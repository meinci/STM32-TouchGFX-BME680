
STM32F769I_DISCO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000269f0  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000476c  08026bf0  08026bf0  00027bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 000000f0  0802b35c  0802b35c  0002c35c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0802b44c  0802b44c  00340cbc  2**0
                  CONTENTS
  5 .ARM          00000008  0802b44c  0802b44c  0002c44c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0802b454  0802b454  00340cbc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   0000001c  0802b454  0802b454  0002c454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000008  0802b470  0802b470  0002c470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000148  20000000  0802b478  0002d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 CCMRAM        00009600  20000148  0802b5c0  0002d148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0001e838  20009748  08034bc0  00036748  2**2
                  ALLOC
 12 ._user_heap_stack 00002000  20027f80  08034bc0  00036f80  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00340cbc  2**0
                  CONTENTS, READONLY
 14 ExtFlashSection 003037c0  90000000  90000000  00037000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 FontFlashSection 0000642c  903037c0  903037c0  0033a7c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 TextFlashSection 000000d0  90309bec  90309bec  00340bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 BufferSection 00177000  c0000000  c0000000  00341000  2**2
                  ALLOC
 18 .debug_line   00066980  00000000  00000000  00340cea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000068  00000000  00000000  003a766a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_info   000ee179  00000000  00000000  003a76d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_abbrev 00017e58  00000000  00000000  0049584b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_aranges 00003ba8  00000000  00000000  004ad6a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    001633c4  00000000  00000000  004b1250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_rnglists 00004921  00000000  00000000  00614614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_macro  0003f2c7  00000000  00000000  00618f35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .comment      000000c2  00000000  00000000  006581fc  2**0
                  CONTENTS, READONLY
 27 .debug_frame  0000a6c0  00000000  00000000  006582c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_loclists 00026599  00000000  00000000  00662980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20009748 	.word	0x20009748
 800021c:	00000000 	.word	0x00000000
 8000220:	08026bd8 	.word	0x08026bd8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000974c 	.word	0x2000974c
 800023c:	08026bd8 	.word	0x08026bd8

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_ldivmod>:
 80002e0:	b97b      	cbnz	r3, 8000302 <__aeabi_ldivmod+0x22>
 80002e2:	b972      	cbnz	r2, 8000302 <__aeabi_ldivmod+0x22>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bfbe      	ittt	lt
 80002e8:	2000      	movlt	r0, #0
 80002ea:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80002ee:	e006      	blt.n	80002fe <__aeabi_ldivmod+0x1e>
 80002f0:	bf08      	it	eq
 80002f2:	2800      	cmpeq	r0, #0
 80002f4:	bf1c      	itt	ne
 80002f6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80002fa:	f04f 30ff 	movne.w	r0, #4294967295
 80002fe:	f000 b9b5 	b.w	800066c <__aeabi_idiv0>
 8000302:	f1ad 0c08 	sub.w	ip, sp, #8
 8000306:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030a:	2900      	cmp	r1, #0
 800030c:	db09      	blt.n	8000322 <__aeabi_ldivmod+0x42>
 800030e:	2b00      	cmp	r3, #0
 8000310:	db1a      	blt.n	8000348 <__aeabi_ldivmod+0x68>
 8000312:	f000 f84d 	bl	80003b0 <__udivmoddi4>
 8000316:	f8dd e004 	ldr.w	lr, [sp, #4]
 800031a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031e:	b004      	add	sp, #16
 8000320:	4770      	bx	lr
 8000322:	4240      	negs	r0, r0
 8000324:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000328:	2b00      	cmp	r3, #0
 800032a:	db1b      	blt.n	8000364 <__aeabi_ldivmod+0x84>
 800032c:	f000 f840 	bl	80003b0 <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4240      	negs	r0, r0
 800033c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000340:	4252      	negs	r2, r2
 8000342:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000346:	4770      	bx	lr
 8000348:	4252      	negs	r2, r2
 800034a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800034e:	f000 f82f 	bl	80003b0 <__udivmoddi4>
 8000352:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000356:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035a:	b004      	add	sp, #16
 800035c:	4240      	negs	r0, r0
 800035e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000362:	4770      	bx	lr
 8000364:	4252      	negs	r2, r2
 8000366:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800036a:	f000 f821 	bl	80003b0 <__udivmoddi4>
 800036e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000372:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000376:	b004      	add	sp, #16
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	4770      	bx	lr

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96a 	b.w	800066c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	460c      	mov	r4, r1
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d14e      	bne.n	800045a <__udivmoddi4+0xaa>
 80003bc:	4694      	mov	ip, r2
 80003be:	458c      	cmp	ip, r1
 80003c0:	4686      	mov	lr, r0
 80003c2:	fab2 f282 	clz	r2, r2
 80003c6:	d962      	bls.n	800048e <__udivmoddi4+0xde>
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0320 	rsb	r3, r2, #32
 80003ce:	4091      	lsls	r1, r2
 80003d0:	fa20 f303 	lsr.w	r3, r0, r3
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	4319      	orrs	r1, r3
 80003da:	fa00 fe02 	lsl.w	lr, r0, r2
 80003de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e2:	fa1f f68c 	uxth.w	r6, ip
 80003e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ee:	fb07 1114 	mls	r1, r7, r4, r1
 80003f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f6:	fb04 f106 	mul.w	r1, r4, r6
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f104 30ff 	add.w	r0, r4, #4294967295
 8000406:	f080 8112 	bcs.w	800062e <__udivmoddi4+0x27e>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 810f 	bls.w	800062e <__udivmoddi4+0x27e>
 8000410:	3c02      	subs	r4, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	fa1f f38e 	uxth.w	r3, lr
 800041a:	fbb1 f0f7 	udiv	r0, r1, r7
 800041e:	fb07 1110 	mls	r1, r7, r0, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb00 f606 	mul.w	r6, r0, r6
 800042a:	429e      	cmp	r6, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x94>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f100 31ff 	add.w	r1, r0, #4294967295
 8000436:	f080 80fc 	bcs.w	8000632 <__udivmoddi4+0x282>
 800043a:	429e      	cmp	r6, r3
 800043c:	f240 80f9 	bls.w	8000632 <__udivmoddi4+0x282>
 8000440:	4463      	add	r3, ip
 8000442:	3802      	subs	r0, #2
 8000444:	1b9b      	subs	r3, r3, r6
 8000446:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800044a:	2100      	movs	r1, #0
 800044c:	b11d      	cbz	r5, 8000456 <__udivmoddi4+0xa6>
 800044e:	40d3      	lsrs	r3, r2
 8000450:	2200      	movs	r2, #0
 8000452:	e9c5 3200 	strd	r3, r2, [r5]
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d905      	bls.n	800046a <__udivmoddi4+0xba>
 800045e:	b10d      	cbz	r5, 8000464 <__udivmoddi4+0xb4>
 8000460:	e9c5 0100 	strd	r0, r1, [r5]
 8000464:	2100      	movs	r1, #0
 8000466:	4608      	mov	r0, r1
 8000468:	e7f5      	b.n	8000456 <__udivmoddi4+0xa6>
 800046a:	fab3 f183 	clz	r1, r3
 800046e:	2900      	cmp	r1, #0
 8000470:	d146      	bne.n	8000500 <__udivmoddi4+0x150>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d302      	bcc.n	800047c <__udivmoddi4+0xcc>
 8000476:	4290      	cmp	r0, r2
 8000478:	f0c0 80f0 	bcc.w	800065c <__udivmoddi4+0x2ac>
 800047c:	1a86      	subs	r6, r0, r2
 800047e:	eb64 0303 	sbc.w	r3, r4, r3
 8000482:	2001      	movs	r0, #1
 8000484:	2d00      	cmp	r5, #0
 8000486:	d0e6      	beq.n	8000456 <__udivmoddi4+0xa6>
 8000488:	e9c5 6300 	strd	r6, r3, [r5]
 800048c:	e7e3      	b.n	8000456 <__udivmoddi4+0xa6>
 800048e:	2a00      	cmp	r2, #0
 8000490:	f040 8090 	bne.w	80005b4 <__udivmoddi4+0x204>
 8000494:	eba1 040c 	sub.w	r4, r1, ip
 8000498:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	2101      	movs	r1, #1
 80004a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004aa:	fb08 4416 	mls	r4, r8, r6, r4
 80004ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004b2:	fb07 f006 	mul.w	r0, r7, r6
 80004b6:	4298      	cmp	r0, r3
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0x11c>
 80004ba:	eb1c 0303 	adds.w	r3, ip, r3
 80004be:	f106 34ff 	add.w	r4, r6, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x11a>
 80004c4:	4298      	cmp	r0, r3
 80004c6:	f200 80cd 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 80004ca:	4626      	mov	r6, r4
 80004cc:	1a1c      	subs	r4, r3, r0
 80004ce:	fa1f f38e 	uxth.w	r3, lr
 80004d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004d6:	fb08 4410 	mls	r4, r8, r0, r4
 80004da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004de:	fb00 f707 	mul.w	r7, r0, r7
 80004e2:	429f      	cmp	r7, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x148>
 80004e6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80004ee:	d202      	bcs.n	80004f6 <__udivmoddi4+0x146>
 80004f0:	429f      	cmp	r7, r3
 80004f2:	f200 80b0 	bhi.w	8000656 <__udivmoddi4+0x2a6>
 80004f6:	4620      	mov	r0, r4
 80004f8:	1bdb      	subs	r3, r3, r7
 80004fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004fe:	e7a5      	b.n	800044c <__udivmoddi4+0x9c>
 8000500:	f1c1 0620 	rsb	r6, r1, #32
 8000504:	408b      	lsls	r3, r1
 8000506:	fa22 f706 	lsr.w	r7, r2, r6
 800050a:	431f      	orrs	r7, r3
 800050c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000510:	fa04 f301 	lsl.w	r3, r4, r1
 8000514:	ea43 030c 	orr.w	r3, r3, ip
 8000518:	40f4      	lsrs	r4, r6
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	0c38      	lsrs	r0, r7, #16
 8000520:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000524:	fbb4 fef0 	udiv	lr, r4, r0
 8000528:	fa1f fc87 	uxth.w	ip, r7
 800052c:	fb00 441e 	mls	r4, r0, lr, r4
 8000530:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000534:	fb0e f90c 	mul.w	r9, lr, ip
 8000538:	45a1      	cmp	r9, r4
 800053a:	fa02 f201 	lsl.w	r2, r2, r1
 800053e:	d90a      	bls.n	8000556 <__udivmoddi4+0x1a6>
 8000540:	193c      	adds	r4, r7, r4
 8000542:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000546:	f080 8084 	bcs.w	8000652 <__udivmoddi4+0x2a2>
 800054a:	45a1      	cmp	r9, r4
 800054c:	f240 8081 	bls.w	8000652 <__udivmoddi4+0x2a2>
 8000550:	f1ae 0e02 	sub.w	lr, lr, #2
 8000554:	443c      	add	r4, r7
 8000556:	eba4 0409 	sub.w	r4, r4, r9
 800055a:	fa1f f983 	uxth.w	r9, r3
 800055e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000562:	fb00 4413 	mls	r4, r0, r3, r4
 8000566:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800056a:	fb03 fc0c 	mul.w	ip, r3, ip
 800056e:	45a4      	cmp	ip, r4
 8000570:	d907      	bls.n	8000582 <__udivmoddi4+0x1d2>
 8000572:	193c      	adds	r4, r7, r4
 8000574:	f103 30ff 	add.w	r0, r3, #4294967295
 8000578:	d267      	bcs.n	800064a <__udivmoddi4+0x29a>
 800057a:	45a4      	cmp	ip, r4
 800057c:	d965      	bls.n	800064a <__udivmoddi4+0x29a>
 800057e:	3b02      	subs	r3, #2
 8000580:	443c      	add	r4, r7
 8000582:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000586:	fba0 9302 	umull	r9, r3, r0, r2
 800058a:	eba4 040c 	sub.w	r4, r4, ip
 800058e:	429c      	cmp	r4, r3
 8000590:	46ce      	mov	lr, r9
 8000592:	469c      	mov	ip, r3
 8000594:	d351      	bcc.n	800063a <__udivmoddi4+0x28a>
 8000596:	d04e      	beq.n	8000636 <__udivmoddi4+0x286>
 8000598:	b155      	cbz	r5, 80005b0 <__udivmoddi4+0x200>
 800059a:	ebb8 030e 	subs.w	r3, r8, lr
 800059e:	eb64 040c 	sbc.w	r4, r4, ip
 80005a2:	fa04 f606 	lsl.w	r6, r4, r6
 80005a6:	40cb      	lsrs	r3, r1
 80005a8:	431e      	orrs	r6, r3
 80005aa:	40cc      	lsrs	r4, r1
 80005ac:	e9c5 6400 	strd	r6, r4, [r5]
 80005b0:	2100      	movs	r1, #0
 80005b2:	e750      	b.n	8000456 <__udivmoddi4+0xa6>
 80005b4:	f1c2 0320 	rsb	r3, r2, #32
 80005b8:	fa20 f103 	lsr.w	r1, r0, r3
 80005bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005c0:	fa24 f303 	lsr.w	r3, r4, r3
 80005c4:	4094      	lsls	r4, r2
 80005c6:	430c      	orrs	r4, r1
 80005c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005d0:	fa1f f78c 	uxth.w	r7, ip
 80005d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005d8:	fb08 3110 	mls	r1, r8, r0, r3
 80005dc:	0c23      	lsrs	r3, r4, #16
 80005de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005e2:	fb00 f107 	mul.w	r1, r0, r7
 80005e6:	4299      	cmp	r1, r3
 80005e8:	d908      	bls.n	80005fc <__udivmoddi4+0x24c>
 80005ea:	eb1c 0303 	adds.w	r3, ip, r3
 80005ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80005f2:	d22c      	bcs.n	800064e <__udivmoddi4+0x29e>
 80005f4:	4299      	cmp	r1, r3
 80005f6:	d92a      	bls.n	800064e <__udivmoddi4+0x29e>
 80005f8:	3802      	subs	r0, #2
 80005fa:	4463      	add	r3, ip
 80005fc:	1a5b      	subs	r3, r3, r1
 80005fe:	b2a4      	uxth	r4, r4
 8000600:	fbb3 f1f8 	udiv	r1, r3, r8
 8000604:	fb08 3311 	mls	r3, r8, r1, r3
 8000608:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800060c:	fb01 f307 	mul.w	r3, r1, r7
 8000610:	42a3      	cmp	r3, r4
 8000612:	d908      	bls.n	8000626 <__udivmoddi4+0x276>
 8000614:	eb1c 0404 	adds.w	r4, ip, r4
 8000618:	f101 36ff 	add.w	r6, r1, #4294967295
 800061c:	d213      	bcs.n	8000646 <__udivmoddi4+0x296>
 800061e:	42a3      	cmp	r3, r4
 8000620:	d911      	bls.n	8000646 <__udivmoddi4+0x296>
 8000622:	3902      	subs	r1, #2
 8000624:	4464      	add	r4, ip
 8000626:	1ae4      	subs	r4, r4, r3
 8000628:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800062c:	e739      	b.n	80004a2 <__udivmoddi4+0xf2>
 800062e:	4604      	mov	r4, r0
 8000630:	e6f0      	b.n	8000414 <__udivmoddi4+0x64>
 8000632:	4608      	mov	r0, r1
 8000634:	e706      	b.n	8000444 <__udivmoddi4+0x94>
 8000636:	45c8      	cmp	r8, r9
 8000638:	d2ae      	bcs.n	8000598 <__udivmoddi4+0x1e8>
 800063a:	ebb9 0e02 	subs.w	lr, r9, r2
 800063e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000642:	3801      	subs	r0, #1
 8000644:	e7a8      	b.n	8000598 <__udivmoddi4+0x1e8>
 8000646:	4631      	mov	r1, r6
 8000648:	e7ed      	b.n	8000626 <__udivmoddi4+0x276>
 800064a:	4603      	mov	r3, r0
 800064c:	e799      	b.n	8000582 <__udivmoddi4+0x1d2>
 800064e:	4630      	mov	r0, r6
 8000650:	e7d4      	b.n	80005fc <__udivmoddi4+0x24c>
 8000652:	46d6      	mov	lr, sl
 8000654:	e77f      	b.n	8000556 <__udivmoddi4+0x1a6>
 8000656:	4463      	add	r3, ip
 8000658:	3802      	subs	r0, #2
 800065a:	e74d      	b.n	80004f8 <__udivmoddi4+0x148>
 800065c:	4606      	mov	r6, r0
 800065e:	4623      	mov	r3, r4
 8000660:	4608      	mov	r0, r1
 8000662:	e70f      	b.n	8000484 <__udivmoddi4+0xd4>
 8000664:	3e02      	subs	r6, #2
 8000666:	4463      	add	r3, ip
 8000668:	e730      	b.n	80004cc <__udivmoddi4+0x11c>
 800066a:	bf00      	nop

0800066c <__aeabi_idiv0>:
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop

08000670 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000670:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80006a8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000674:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000676:	e003      	b.n	8000680 <LoopCopyDataInit>

08000678 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000678:	4b0c      	ldr	r3, [pc, #48]	@ (80006ac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800067a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800067c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800067e:	3104      	adds	r1, #4

08000680 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000680:	480b      	ldr	r0, [pc, #44]	@ (80006b0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000682:	4b0c      	ldr	r3, [pc, #48]	@ (80006b4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000684:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000686:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000688:	d3f6      	bcc.n	8000678 <CopyDataInit>
  ldr  r2, =_sbss
 800068a:	4a0b      	ldr	r2, [pc, #44]	@ (80006b8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800068c:	e002      	b.n	8000694 <LoopFillZerobss>

0800068e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800068e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000690:	f842 3b04 	str.w	r3, [r2], #4

08000694 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000694:	4b09      	ldr	r3, [pc, #36]	@ (80006bc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000696:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000698:	d3f9      	bcc.n	800068e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800069a:	f007 fb21 	bl	8007ce0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800069e:	f025 fdb1 	bl	8026204 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80006a2:	f003 fb93 	bl	8003dcc <main>
  bx  lr    
 80006a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80006a8:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80006ac:	0802b478 	.word	0x0802b478
  ldr  r0, =_sdata
 80006b0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80006b4:	20000148 	.word	0x20000148
  ldr  r2, =_sbss
 80006b8:	20009748 	.word	0x20009748
  ldr  r3, = _ebss
 80006bc:	20027f80 	.word	0x20027f80

080006c0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80006c0:	e7fe      	b.n	80006c0 <CAN1_RX0_IRQHandler>

080006c2 <MX_LIBJPEG_Init>:
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 80006c2:	4770      	bx	lr

080006c4 <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
 80006c4:	4770      	bx	lr

080006c6 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 80006c6:	b508      	push	{r3, lr}
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
 80006c8:	f001 fd5e 	bl	8002188 <touchgfx_components_init>
  touchgfx_init();
}
 80006cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  touchgfx_init();
 80006d0:	f001 bce6 	b.w	80020a0 <touchgfx_init>

080006d4 <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 80006d4:	f001 bd5a 	b.w	800218c <touchgfx_taskEntry>

080006d8 <BSP_PB_Init>:
    __weak void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
    {
        GPIO_InitTypeDef gpio_init_structure;

        /* Enable the BUTTON clock */
        BUTTON_GPIO_CLK_ENABLE();
 80006d8:	4b17      	ldr	r3, [pc, #92]	@ (8000738 <BSP_PB_Init+0x60>)
 80006da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80006dc:	f042 0201 	orr.w	r2, r2, #1
    {
 80006e0:	b510      	push	{r4, lr}
        BUTTON_GPIO_CLK_ENABLE();
 80006e2:	631a      	str	r2, [r3, #48]	@ 0x30
    {
 80006e4:	b086      	sub	sp, #24
        BUTTON_GPIO_CLK_ENABLE();
 80006e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e8:	f003 0301 	and.w	r3, r3, #1
 80006ec:	9300      	str	r3, [sp, #0]
 80006ee:	9b00      	ldr	r3, [sp, #0]

        if (Button_Mode == BUTTON_MODE_GPIO)
 80006f0:	b959      	cbnz	r1, 800070a <BSP_PB_Init+0x32>
        {
            /* Configure Button pin as input */
            gpio_init_structure.Pin = BUTTON_PIN[Button];
 80006f2:	2301      	movs	r3, #1
            gpio_init_structure.Mode = GPIO_MODE_INPUT;
            gpio_init_structure.Pull = GPIO_NOPULL;
 80006f4:	9103      	str	r1, [sp, #12]
            gpio_init_structure.Speed = GPIO_SPEED_FAST;
            HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80006f6:	4811      	ldr	r0, [pc, #68]	@ (800073c <BSP_PB_Init+0x64>)
            gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80006f8:	e9cd 3101 	strd	r3, r1, [sp, #4]
            gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80006fc:	2302      	movs	r3, #2
            HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80006fe:	a901      	add	r1, sp, #4
            gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000700:	9304      	str	r3, [sp, #16]
            HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000702:	f008 fd45 	bl	8009190 <HAL_GPIO_Init>

            /* Enable and set Button EXTI Interrupt to the lowest priority */
            HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
            HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
        }
    }
 8000706:	b006      	add	sp, #24
 8000708:	bd10      	pop	{r4, pc}
        if (Button_Mode == BUTTON_MODE_EXTI)
 800070a:	2901      	cmp	r1, #1
 800070c:	d1fb      	bne.n	8000706 <BSP_PB_Init+0x2e>
            gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800070e:	2400      	movs	r4, #0
 8000710:	2302      	movs	r3, #2
            gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000712:	9101      	str	r1, [sp, #4]
            HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000714:	a901      	add	r1, sp, #4
 8000716:	4809      	ldr	r0, [pc, #36]	@ (800073c <BSP_PB_Init+0x64>)
            gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000718:	e9cd 4303 	strd	r4, r3, [sp, #12]
            gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 800071c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000720:	9302      	str	r3, [sp, #8]
            HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000722:	f008 fd35 	bl	8009190 <HAL_GPIO_Init>
            HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8000726:	4622      	mov	r2, r4
 8000728:	210f      	movs	r1, #15
 800072a:	2006      	movs	r0, #6
 800072c:	f007 fdae 	bl	800828c <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8000730:	2006      	movs	r0, #6
 8000732:	f007 fddd 	bl	80082f0 <HAL_NVIC_EnableIRQ>
    }
 8000736:	e7e6      	b.n	8000706 <BSP_PB_Init+0x2e>
 8000738:	40023800 	.word	0x40023800
 800073c:	40020000 	.word	0x40020000

08000740 <_ZN8touchgfx7Buttons4initEv>:
    BSP_PB_Init(BUTTON_WAKEUP, BUTTON_MODE_GPIO);
 8000740:	2100      	movs	r1, #0
{
 8000742:	b508      	push	{r3, lr}
    BSP_PB_Init(BUTTON_WAKEUP, BUTTON_MODE_GPIO);
 8000744:	4608      	mov	r0, r1
 8000746:	f7ff ffc7 	bl	80006d8 <BSP_PB_Init>
}
 800074a:	bd08      	pop	{r3, pc}

0800074c <BSP_PB_GetState>:
      *            @arg  BUTTON_USER: User Push Button
      * @retval The Button GPIO pin value
      */
    __weak uint32_t BSP_PB_GetState(Button_TypeDef Button)
    {
        return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 800074c:	2101      	movs	r1, #1
 800074e:	4802      	ldr	r0, [pc, #8]	@ (8000758 <BSP_PB_GetState+0xc>)
    {
 8000750:	b508      	push	{r3, lr}
        return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8000752:	f008 fe9b 	bl	800948c <HAL_GPIO_ReadPin>
    }
 8000756:	bd08      	pop	{r3, pc}
 8000758:	40020000 	.word	0x40020000

0800075c <_ZN8touchgfx7Buttons6sampleEv>:
{
 800075c:	b508      	push	{r3, lr}
    result = BSP_PB_GetState(BUTTON_WAKEUP);
 800075e:	2000      	movs	r0, #0
 8000760:	f7ff fff4 	bl	800074c <BSP_PB_GetState>
}
 8000764:	bd08      	pop	{r3, pc}

08000766 <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 8000766:	6840      	ldr	r0, [r0, #4]
    }
 8000768:	4770      	bx	lr

0800076a <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 800076a:	6041      	str	r1, [r0, #4]
    }
 800076c:	4770      	bx	lr
	...

08000770 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    // Enable Debug Exception and Monitor Control Register
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
 8000770:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8000774:	f8d2 3dfc 	ldr.w	r3, [r2, #3580]	@ 0xdfc
 8000778:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800077c:	f8c2 3dfc 	str.w	r3, [r2, #3580]	@ 0xdfc
    // Enable Lock Access Register
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
 8000780:	4b05      	ldr	r3, [pc, #20]	@ (8000798 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x28>)
 8000782:	4a06      	ldr	r2, [pc, #24]	@ (800079c <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x2c>)
 8000784:	f8d3 1fb0 	ldr.w	r1, [r3, #4016]	@ 0xfb0
 8000788:	430a      	orrs	r2, r1
 800078a:	f8c3 2fb0 	str.w	r2, [r3, #4016]	@ 0xfb0
    // Enable Data Watchpoint and Trace Control Register
    *((volatile unsigned int*)0xE0001000) |= 1;
 800078e:	681a      	ldr	r2, [r3, #0]
 8000790:	f042 0201 	orr.w	r2, r2, #1
 8000794:	601a      	str	r2, [r3, #0]
}
 8000796:	4770      	bx	lr
 8000798:	e0001000 	.word	0xe0001000
 800079c:	c5acce55 	.word	0xc5acce55

080007a0 <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 80007a0:	1a52      	subs	r2, r2, r1
 80007a2:	eb02 0253 	add.w	r2, r2, r3, lsr #1
}
 80007a6:	fbb2 f0f3 	udiv	r0, r2, r3
 80007aa:	4770      	bx	lr

080007ac <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
    return *((volatile unsigned int*)0xE0001004);
 80007ac:	4b01      	ldr	r3, [pc, #4]	@ (80007b4 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x8>)
 80007ae:	6858      	ldr	r0, [r3, #4]
}
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	e0001000 	.word	0xe0001000

080007b8 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
 80007b8:	4770      	bx	lr

080007ba <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
 80007ba:	b510      	push	{r4, lr}
 80007bc:	4604      	mov	r4, r0
 80007be:	210c      	movs	r1, #12
 80007c0:	f025 f945 	bl	8025a4e <_ZdlPvj>
 80007c4:	4620      	mov	r0, r4
 80007c6:	bd10      	pop	{r4, pc}

080007c8 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
    if (active) //idle task sched out
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
 80007c8:	6803      	ldr	r3, [r0, #0]
{
 80007ca:	b510      	push	{r4, lr}
        uint32_t cc_temp = getCPUCycles() - cc_in;
 80007cc:	691b      	ldr	r3, [r3, #16]
{
 80007ce:	4604      	mov	r4, r0
    if (active) //idle task sched out
 80007d0:	b131      	cbz	r1, 80007e0 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x18>
        uint32_t cc_temp = getCPUCycles() - cc_in;
 80007d2:	4798      	blx	r3
 80007d4:	68a2      	ldr	r2, [r4, #8]
        cc_consumed += cc_temp;
 80007d6:	6863      	ldr	r3, [r4, #4]
 80007d8:	1a9b      	subs	r3, r3, r2
 80007da:	4403      	add	r3, r0
 80007dc:	6063      	str	r3, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 80007de:	bd10      	pop	{r4, pc}
        cc_in = getCPUCycles();
 80007e0:	4798      	blx	r3
 80007e2:	60a0      	str	r0, [r4, #8]
}
 80007e4:	e7fb      	b.n	80007de <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x16>

080007e6 <_ZN8touchgfx16ButtonController5resetEv>:
    virtual bool sample(uint8_t& key) = 0;

    /** Resets button controller. Does nothing in the default implementation. */
    virtual void reset()
    {
    }
 80007e6:	4770      	bx	lr

080007e8 <_ZN8touchgfx10KeySamplerD1Ev>:
public:
    KeySampler()
    {
        init();
    }
    virtual ~KeySampler() {}
 80007e8:	4770      	bx	lr
	...

080007ec <_ZN8touchgfx10KeySampler4initEv>:
using namespace touchgfx;

static uint8_t btnstatus[4];

void KeySampler::init()
{
 80007ec:	b508      	push	{r3, lr}
    Buttons::init();
 80007ee:	f7ff ffa7 	bl	8000740 <_ZN8touchgfx7Buttons4initEv>

    memset(btnstatus, 0x00, sizeof(uint8_t) * 4);
 80007f2:	4b02      	ldr	r3, [pc, #8]	@ (80007fc <_ZN8touchgfx10KeySampler4initEv+0x10>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
}
 80007f8:	bd08      	pop	{r3, pc}
 80007fa:	bf00      	nop
 80007fc:	20009764 	.word	0x20009764

08000800 <_ZN8touchgfx10KeySampler6sampleERh>:

bool KeySampler::sample(uint8_t& key)
{
 8000800:	b570      	push	{r4, r5, r6, lr}
 8000802:	460d      	mov	r5, r1
    unsigned int buttonValue = Buttons::sample();
 8000804:	f7ff ffaa 	bl	800075c <_ZN8touchgfx7Buttons6sampleEv>

    //Propergate values through buffer
    btnstatus[3] = btnstatus[2];
 8000808:	4a0b      	ldr	r2, [pc, #44]	@ (8000838 <_ZN8touchgfx10KeySampler6sampleERh+0x38>)
    btnstatus[2] = btnstatus[1];
    btnstatus[1] = btnstatus[0];
    btnstatus[0] = buttonValue;
 800080a:	b2c4      	uxtb	r4, r0
    btnstatus[3] = btnstatus[2];
 800080c:	7893      	ldrb	r3, [r2, #2]
    btnstatus[2] = btnstatus[1];
 800080e:	7856      	ldrb	r6, [r2, #1]
    btnstatus[1] = btnstatus[0];
 8000810:	7811      	ldrb	r1, [r2, #0]

    //User key
    if (((btnstatus[3] & Key1) == 1) && ((btnstatus[2] & Key1) == 1) &&
 8000812:	f013 0001 	ands.w	r0, r3, #1
    btnstatus[3] = btnstatus[2];
 8000816:	70d3      	strb	r3, [r2, #3]
    btnstatus[2] = btnstatus[1];
 8000818:	7096      	strb	r6, [r2, #2]
    btnstatus[1] = btnstatus[0];
 800081a:	7051      	strb	r1, [r2, #1]
    btnstatus[0] = buttonValue;
 800081c:	7014      	strb	r4, [r2, #0]
    if (((btnstatus[3] & Key1) == 1) && ((btnstatus[2] & Key1) == 1) &&
 800081e:	d00a      	beq.n	8000836 <_ZN8touchgfx10KeySampler6sampleERh+0x36>
 8000820:	f016 0001 	ands.w	r0, r6, #1
 8000824:	d007      	beq.n	8000836 <_ZN8touchgfx10KeySampler6sampleERh+0x36>
 8000826:	f011 0001 	ands.w	r0, r1, #1
 800082a:	d004      	beq.n	8000836 <_ZN8touchgfx10KeySampler6sampleERh+0x36>
            ((btnstatus[1] & Key1) == 1) && ((btnstatus[0] & Key1) == 0))
 800082c:	07e3      	lsls	r3, r4, #31
    {
        key = 1;
 800082e:	bf56      	itet	pl
 8000830:	2001      	movpl	r0, #1
        return true;
    }

    return false;
 8000832:	2000      	movmi	r0, #0
        key = 1;
 8000834:	7028      	strbpl	r0, [r5, #0]
}
 8000836:	bd70      	pop	{r4, r5, r6, pc}
 8000838:	20009764 	.word	0x20009764

0800083c <_ZN8touchgfx10KeySamplerD0Ev>:
 800083c:	b510      	push	{r4, lr}
 800083e:	4604      	mov	r4, r0
 8000840:	2104      	movs	r1, #4
 8000842:	f025 f904 	bl	8025a4e <_ZdlPvj>
 8000846:	4620      	mov	r0, r4
 8000848:	bd10      	pop	{r4, pc}

0800084a <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 800084a:	4770      	bx	lr

0800084c <_ZN20STM32TouchControllerD0Ev>:
 800084c:	b510      	push	{r4, lr}
 800084e:	4604      	mov	r4, r0
 8000850:	2104      	movs	r1, #4
 8000852:	f025 f8fc 	bl	8025a4e <_ZdlPvj>
 8000856:	4620      	mov	r0, r4
 8000858:	bd10      	pop	{r4, pc}

0800085a <TS_IO_Init>:
      * @retval None
      */
    __weak void TS_IO_Init(void)
    {
        // I2Cx_Init(&hi2c4);
    }
 800085a:	4770      	bx	lr

0800085c <TS_IO_Write>:
      * @param  Reg: Reg address
      * @param  Value: Data to be written
      * @retval None
      */
    __weak void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
    {
 800085c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800085e:	2301      	movs	r3, #1
    {
 8000860:	f88d 2017 	strb.w	r2, [sp, #23]
        status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000864:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000868:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800086c:	f10d 0217 	add.w	r2, sp, #23
 8000870:	9200      	str	r2, [sp, #0]
 8000872:	460a      	mov	r2, r1
 8000874:	4601      	mov	r1, r0
 8000876:	4806      	ldr	r0, [pc, #24]	@ (8000890 <TS_IO_Write+0x34>)
 8000878:	f009 f914 	bl	8009aa4 <HAL_I2C_Mem_Write>
        if (status != HAL_OK)
 800087c:	b120      	cbz	r0, 8000888 <TS_IO_Write+0x2c>
        HAL_I2C_DeInit(i2c_handler);
 800087e:	4804      	ldr	r0, [pc, #16]	@ (8000890 <TS_IO_Write+0x34>)
 8000880:	f008 ffc9 	bl	8009816 <HAL_I2C_DeInit>
        MX_I2C4_Init();
 8000884:	f003 fa80 	bl	8003d88 <MX_I2C4_Init>
        I2Cx_WriteMultiple(&hi2c4, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&Value, 1);
    }
 8000888:	b007      	add	sp, #28
 800088a:	f85d fb04 	ldr.w	pc, [sp], #4
 800088e:	bf00      	nop
 8000890:	2001224c 	.word	0x2001224c

08000894 <TS_IO_Read>:
      * @param  Addr: I2C address
      * @param  Reg: Reg address
      * @retval Data to be read
      */
    __weak uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
    {
 8000894:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        uint8_t read_value = 0;
 8000896:	2300      	movs	r3, #0
    {
 8000898:	460a      	mov	r2, r1
        status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800089a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
        uint8_t read_value = 0;
 800089e:	f88d 3017 	strb.w	r3, [sp, #23]
        status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80008a2:	2301      	movs	r3, #1
 80008a4:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80008a8:	f10d 0117 	add.w	r1, sp, #23
 80008ac:	9100      	str	r1, [sp, #0]
 80008ae:	4601      	mov	r1, r0
 80008b0:	4806      	ldr	r0, [pc, #24]	@ (80008cc <TS_IO_Read+0x38>)
 80008b2:	f009 f9d1 	bl	8009c58 <HAL_I2C_Mem_Read>
        if (status != HAL_OK)
 80008b6:	b120      	cbz	r0, 80008c2 <TS_IO_Read+0x2e>
        HAL_I2C_DeInit(i2c_handler);
 80008b8:	4804      	ldr	r0, [pc, #16]	@ (80008cc <TS_IO_Read+0x38>)
 80008ba:	f008 ffac 	bl	8009816 <HAL_I2C_DeInit>
        MX_I2C4_Init();
 80008be:	f003 fa63 	bl	8003d88 <MX_I2C4_Init>

        I2Cx_ReadMultiple(&hi2c4, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);

        return read_value;
    }
 80008c2:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80008c6:	b007      	add	sp, #28
 80008c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80008cc:	2001224c 	.word	0x2001224c

080008d0 <TS_IO_ReadMultiple>:
      * @param  Buffer: Pointer to data buffer
      * @param  Length: Length of the data
      * @retval Number of read data
      */
    __weak uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t* Buffer, uint16_t Length)
    {
 80008d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80008d2:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 80008d6:	9200      	str	r2, [sp, #0]
 80008d8:	460a      	mov	r2, r1
 80008da:	4601      	mov	r1, r0
 80008dc:	4807      	ldr	r0, [pc, #28]	@ (80008fc <TS_IO_ReadMultiple+0x2c>)
 80008de:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80008e2:	2301      	movs	r3, #1
 80008e4:	f009 f9b8 	bl	8009c58 <HAL_I2C_Mem_Read>
        if (status != HAL_OK)
 80008e8:	4604      	mov	r4, r0
 80008ea:	b120      	cbz	r0, 80008f6 <TS_IO_ReadMultiple+0x26>
        HAL_I2C_DeInit(i2c_handler);
 80008ec:	4803      	ldr	r0, [pc, #12]	@ (80008fc <TS_IO_ReadMultiple+0x2c>)
 80008ee:	f008 ff92 	bl	8009816 <HAL_I2C_DeInit>
        MX_I2C4_Init();
 80008f2:	f003 fa49 	bl	8003d88 <MX_I2C4_Init>
        return I2Cx_ReadMultiple(&hi2c4, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
    }
 80008f6:	4620      	mov	r0, r4
 80008f8:	b004      	add	sp, #16
 80008fa:	bd10      	pop	{r4, pc}
 80008fc:	2001224c 	.word	0x2001224c

08000900 <BSP_TS_Init>:
      * @param  ts_SizeX : Maximum X size of the TS area on LCD
      * @param  ts_SizeY : Maximum Y size of the TS area on LCD
      * @retval TS_OK if all initializations are OK. Other value if error.
      */
    __weak uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
    {
 8000900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        /* Note : I2C_Address is un-initialized here, but is not used at all in init function */
        /* but the prototype of Init() is like that in template and should be respected       */

        /* Initialize the communication channel to sensor (I2C) if necessary */
        /* that is initialization is done only once after a power up         */
        ft6x06_ts_drv.Init(I2C_Address);
 8000902:	4d13      	ldr	r5, [pc, #76]	@ (8000950 <BSP_TS_Init+0x50>)
    {
 8000904:	4606      	mov	r6, r0
        ft6x06_ts_drv.Init(I2C_Address);
 8000906:	4c13      	ldr	r4, [pc, #76]	@ (8000954 <BSP_TS_Init+0x54>)
    {
 8000908:	460f      	mov	r7, r1
        ft6x06_ts_drv.Init(I2C_Address);
 800090a:	682b      	ldr	r3, [r5, #0]
 800090c:	7820      	ldrb	r0, [r4, #0]
 800090e:	4798      	blx	r3

        ts_id1 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 8000910:	686b      	ldr	r3, [r5, #4]
 8000912:	2054      	movs	r0, #84	@ 0x54
 8000914:	4798      	blx	r3
        if (ts_id1 != FT6206_ID_VALUE)
 8000916:	b2c0      	uxtb	r0, r0
 8000918:	2811      	cmp	r0, #17
 800091a:	d009      	beq.n	8000930 <BSP_TS_Init+0x30>
        {
            ts_id2 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS_A02);
 800091c:	686b      	ldr	r3, [r5, #4]
 800091e:	2070      	movs	r0, #112	@ 0x70
 8000920:	4798      	blx	r3
            I2C_Address    = TS_I2C_ADDRESS_A02;
 8000922:	2370      	movs	r3, #112	@ 0x70
            I2C_Address    = TS_I2C_ADDRESS;
        }

        /* Scan FT6xx6 TouchScreen IC controller ID register by I2C Read       */
        /* Verify this is a FT6206 or FT6336G, otherwise this is an error case */
        if ((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 8000924:	b2c0      	uxtb	r0, r0
            I2C_Address    = TS_I2C_ADDRESS_A02;
 8000926:	7023      	strb	r3, [r4, #0]
        if ((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 8000928:	2811      	cmp	r0, #17
 800092a:	d003      	beq.n	8000934 <BSP_TS_Init+0x34>

            } /* of if(ts_status == TS_OK) */
        }
        else
        {
            ts_status = TS_DEVICE_NOT_FOUND;
 800092c:	2003      	movs	r0, #3
        }

        return (ts_status);
    }
 800092e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            I2C_Address    = TS_I2C_ADDRESS;
 8000930:	2354      	movs	r3, #84	@ 0x54
 8000932:	7023      	strb	r3, [r4, #0]
            if (ts_SizeX < ts_SizeY)
 8000934:	4b08      	ldr	r3, [pc, #32]	@ (8000958 <BSP_TS_Init+0x58>)
                ts_orientation = TS_SWAP_NONE;
 8000936:	42be      	cmp	r6, r7
 8000938:	bf2c      	ite	cs
 800093a:	260c      	movcs	r6, #12
 800093c:	2601      	movcc	r6, #1
                ft6x06_ts_drv.Reset(I2C_Address);
 800093e:	7820      	ldrb	r0, [r4, #0]
 8000940:	701e      	strb	r6, [r3, #0]
 8000942:	68ab      	ldr	r3, [r5, #8]
 8000944:	4798      	blx	r3
                ft6x06_ts_drv.Start(I2C_Address);
 8000946:	7820      	ldrb	r0, [r4, #0]
 8000948:	68eb      	ldr	r3, [r5, #12]
 800094a:	4798      	blx	r3
        uint8_t ts_status = TS_OK;
 800094c:	2000      	movs	r0, #0
 800094e:	e7ee      	b.n	800092e <BSP_TS_Init+0x2e>
 8000950:	20000038 	.word	0x20000038
 8000954:	20009779 	.word	0x20009779
 8000958:	2000977a 	.word	0x2000977a

0800095c <_ZN20STM32TouchController4initEv>:
{
 800095c:	b508      	push	{r3, lr}
    if (BSP_TS_Init(800, 480) == TS_OK)
 800095e:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8000962:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8000966:	f7ff ffcb 	bl	8000900 <BSP_TS_Init>
 800096a:	4b07      	ldr	r3, [pc, #28]	@ (8000988 <_ZN20STM32TouchController4initEv+0x2c>)
 800096c:	b910      	cbnz	r0, 8000974 <_ZN20STM32TouchController4initEv+0x18>
        bsp_ts_initialized = true;
 800096e:	2201      	movs	r2, #1
 8000970:	701a      	strb	r2, [r3, #0]
}
 8000972:	bd08      	pop	{r3, pc}
    assert(bsp_ts_initialized);
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d1fb      	bne.n	8000972 <_ZN20STM32TouchController4initEv+0x16>
 800097a:	4b04      	ldr	r3, [pc, #16]	@ (800098c <_ZN20STM32TouchController4initEv+0x30>)
 800097c:	216a      	movs	r1, #106	@ 0x6a
 800097e:	4a04      	ldr	r2, [pc, #16]	@ (8000990 <_ZN20STM32TouchController4initEv+0x34>)
 8000980:	4804      	ldr	r0, [pc, #16]	@ (8000994 <_ZN20STM32TouchController4initEv+0x38>)
 8000982:	f025 f893 	bl	8025aac <__assert_func>
 8000986:	bf00      	nop
 8000988:	20009778 	.word	0x20009778
 800098c:	08026cfc 	.word	0x08026cfc
 8000990:	08026d0f 	.word	0x08026d0f
 8000994:	08026d39 	.word	0x08026d39

08000998 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
__weak uint8_t BSP_TS_GetState(TS_StateTypeDef* TS_State)
{
 8000998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint16_t xDiff;
    uint16_t yDiff;
    uint32_t index;

    /* Check and update the number of touches active detected */
    TS_State->touchDetected = ft6x06_ts_drv.DetectTouch(I2C_Address);
 800099c:	4a34      	ldr	r2, [pc, #208]	@ (8000a70 <BSP_TS_GetState+0xd8>)
{
 800099e:	4605      	mov	r5, r0
    TS_State->touchDetected = ft6x06_ts_drv.DetectTouch(I2C_Address);
 80009a0:	f8df a0dc 	ldr.w	sl, [pc, #220]	@ 8000a80 <BSP_TS_GetState+0xe8>
{
 80009a4:	b085      	sub	sp, #20
    TS_State->touchDetected = ft6x06_ts_drv.DetectTouch(I2C_Address);
 80009a6:	7810      	ldrb	r0, [r2, #0]
 80009a8:	f8da 3010 	ldr.w	r3, [sl, #16]
 80009ac:	4798      	blx	r3
 80009ae:	7028      	strb	r0, [r5, #0]
    if (TS_State->touchDetected)
 80009b0:	b150      	cbz	r0, 80009c8 <BSP_TS_GetState+0x30>
 80009b2:	4e30      	ldr	r6, [pc, #192]	@ (8000a74 <BSP_TS_GetState+0xdc>)
 80009b4:	46a9      	mov	r9, r5
 80009b6:	4f30      	ldr	r7, [pc, #192]	@ (8000a78 <BSP_TS_GetState+0xe0>)
 80009b8:	f10d 0b0c 	add.w	fp, sp, #12
 80009bc:	ac02      	add	r4, sp, #8
    {
        for (index = 0; index < TS_State->touchDetected; index++)
 80009be:	f04f 0800 	mov.w	r8, #0
 80009c2:	782b      	ldrb	r3, [r5, #0]
 80009c4:	4598      	cmp	r8, r3
 80009c6:	d303      	bcc.n	80009d0 <BSP_TS_GetState+0x38>
            TS_State->touchY[index] = _y[index];
        } /* of for(index=0; index < TS_State->touchDetected; index++) */
    } /* end of if(TS_State->touchDetected != 0) */

    return (ts_status);
}
 80009c8:	2000      	movs	r0, #0
 80009ca:	b005      	add	sp, #20
 80009cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            ft6x06_ts_drv.GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 80009d0:	4827      	ldr	r0, [pc, #156]	@ (8000a70 <BSP_TS_GetState+0xd8>)
 80009d2:	465a      	mov	r2, fp
 80009d4:	4621      	mov	r1, r4
 80009d6:	f8da 3014 	ldr.w	r3, [sl, #20]
 80009da:	7800      	ldrb	r0, [r0, #0]
        for (index = 0; index < TS_State->touchDetected; index++)
 80009dc:	f108 0801 	add.w	r8, r8, #1
            ft6x06_ts_drv.GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 80009e0:	4798      	blx	r3
            if (ts_orientation & TS_SWAP_XY)
 80009e2:	4b26      	ldr	r3, [pc, #152]	@ (8000a7c <BSP_TS_GetState+0xe4>)
 80009e4:	46b4      	mov	ip, r6
 80009e6:	46be      	mov	lr, r7
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	3604      	adds	r6, #4
 80009ec:	3704      	adds	r7, #4
 80009ee:	0719      	lsls	r1, r3, #28
                tmp = Raw_x[index];
 80009f0:	bf41      	itttt	mi
 80009f2:	8822      	ldrhmi	r2, [r4, #0]
                Raw_x[index] = Raw_y[index];
 80009f4:	f8bb 1000 	ldrhmi.w	r1, [fp]
                Raw_y[index] = tmp;
 80009f8:	f8ab 2000 	strhmi.w	r2, [fp]
                Raw_x[index] = Raw_y[index];
 80009fc:	8021      	strhmi	r1, [r4, #0]
            if (ts_orientation & TS_SWAP_X)
 80009fe:	079a      	lsls	r2, r3, #30
                Raw_x[index] = FT_6206_MAX_WIDTH - 1 - Raw_x[index];
 8000a00:	bf41      	itttt	mi
 8000a02:	8822      	ldrhmi	r2, [r4, #0]
 8000a04:	f5c2 7247 	rsbmi	r2, r2, #796	@ 0x31c
 8000a08:	3203      	addmi	r2, #3
 8000a0a:	8022      	strhmi	r2, [r4, #0]
            if (ts_orientation & TS_SWAP_Y)
 8000a0c:	075b      	lsls	r3, r3, #29
            xDiff = Raw_x[index] > _x[index] ? (Raw_x[index] - _x[index]) : (_x[index] - Raw_x[index]);
 8000a0e:	f856 2c04 	ldr.w	r2, [r6, #-4]
                Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
 8000a12:	bf48      	it	mi
 8000a14:	f8bb 3000 	ldrhmi.w	r3, [fp]
            xDiff = Raw_x[index] > _x[index] ? (Raw_x[index] - _x[index]) : (_x[index] - Raw_x[index]);
 8000a18:	f834 0b02 	ldrh.w	r0, [r4], #2
                Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
 8000a1c:	bf42      	ittt	mi
 8000a1e:	f5c3 73ef 	rsbmi	r3, r3, #478	@ 0x1de
 8000a22:	3301      	addmi	r3, #1
 8000a24:	f8ab 3000 	strhmi.w	r3, [fp]
            xDiff = Raw_x[index] > _x[index] ? (Raw_x[index] - _x[index]) : (_x[index] - Raw_x[index]);
 8000a28:	b293      	uxth	r3, r2
 8000a2a:	4290      	cmp	r0, r2
            yDiff = Raw_y[index] > _y[index] ? (Raw_y[index] - _y[index]) : (_y[index] - Raw_y[index]);
 8000a2c:	f83b 1b02 	ldrh.w	r1, [fp], #2
            xDiff = Raw_x[index] > _x[index] ? (Raw_x[index] - _x[index]) : (_x[index] - Raw_x[index]);
 8000a30:	bf8c      	ite	hi
 8000a32:	1ac3      	subhi	r3, r0, r3
 8000a34:	1a1b      	subls	r3, r3, r0
 8000a36:	b29b      	uxth	r3, r3
 8000a38:	9301      	str	r3, [sp, #4]
            yDiff = Raw_y[index] > _y[index] ? (Raw_y[index] - _y[index]) : (_y[index] - Raw_y[index]);
 8000a3a:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8000a3e:	b29a      	uxth	r2, r3
 8000a40:	4299      	cmp	r1, r3
            if ((xDiff + yDiff) > 5)
 8000a42:	9b01      	ldr	r3, [sp, #4]
            yDiff = Raw_y[index] > _y[index] ? (Raw_y[index] - _y[index]) : (_y[index] - Raw_y[index]);
 8000a44:	bf8c      	ite	hi
 8000a46:	1a8a      	subhi	r2, r1, r2
 8000a48:	1a52      	subls	r2, r2, r1
 8000a4a:	b292      	uxth	r2, r2
            if ((xDiff + yDiff) > 5)
 8000a4c:	4413      	add	r3, r2
 8000a4e:	2b05      	cmp	r3, #5
                _x[index] = Raw_x[index];
 8000a50:	bfc8      	it	gt
 8000a52:	f846 0c04 	strgt.w	r0, [r6, #-4]
            TS_State->touchX[index] = _x[index];
 8000a56:	f8dc 3000 	ldr.w	r3, [ip]
                _y[index] = Raw_y[index];
 8000a5a:	bfc8      	it	gt
 8000a5c:	f847 1c04 	strgt.w	r1, [r7, #-4]
            TS_State->touchX[index] = _x[index];
 8000a60:	f829 3f02 	strh.w	r3, [r9, #2]!
            TS_State->touchY[index] = _y[index];
 8000a64:	f8de 3000 	ldr.w	r3, [lr]
 8000a68:	f8a9 3004 	strh.w	r3, [r9, #4]
        for (index = 0; index < TS_State->touchDetected; index++)
 8000a6c:	e7a9      	b.n	80009c2 <BSP_TS_GetState+0x2a>
 8000a6e:	bf00      	nop
 8000a70:	20009779 	.word	0x20009779
 8000a74:	20009770 	.word	0x20009770
 8000a78:	20009768 	.word	0x20009768
 8000a7c:	2000977a 	.word	0x2000977a
 8000a80:	20000038 	.word	0x20000038

08000a84 <_ZN20STM32TouchController11sampleTouchERlS0_>:
{
 8000a84:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (bsp_ts_initialized)
 8000a86:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab4 <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>)
{
 8000a88:	460e      	mov	r6, r1
 8000a8a:	4615      	mov	r5, r2
    if (bsp_ts_initialized)
 8000a8c:	781c      	ldrb	r4, [r3, #0]
 8000a8e:	b91c      	cbnz	r4, 8000a98 <_ZN20STM32TouchController11sampleTouchERlS0_+0x14>
    return false;
 8000a90:	2400      	movs	r4, #0
}
 8000a92:	4620      	mov	r0, r4
 8000a94:	b004      	add	sp, #16
 8000a96:	bd70      	pop	{r4, r5, r6, pc}
        BSP_TS_GetState(&state);
 8000a98:	a801      	add	r0, sp, #4
 8000a9a:	f7ff ff7d 	bl	8000998 <BSP_TS_GetState>
        if (state.touchDetected)
 8000a9e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d0f4      	beq.n	8000a90 <_ZN20STM32TouchController11sampleTouchERlS0_+0xc>
            x = state.touchX[0];
 8000aa6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000aaa:	6033      	str	r3, [r6, #0]
            y = state.touchY[0];
 8000aac:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8000ab0:	602b      	str	r3, [r5, #0]
            return true;
 8000ab2:	e7ee      	b.n	8000a92 <_ZN20STM32TouchController11sampleTouchERlS0_+0xe>
 8000ab4:	20009778 	.word	0x20009778

08000ab8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 8000ab8:	2803      	cmp	r0, #3
 8000aba:	d823      	bhi.n	8000b04 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>
 8000abc:	e8df f000 	tbb	[pc, r0]
 8000ac0:	1a120b02 	.word	0x1a120b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8000ac4:	4b10      	ldr	r3, [pc, #64]	@ (8000b08 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8000ac6:	2140      	movs	r1, #64	@ 0x40
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	fab2 f282 	clz	r2, r2
 8000ace:	0952      	lsrs	r2, r2, #5
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8000ad0:	480e      	ldr	r0, [pc, #56]	@ (8000b0c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8000ad2:	f008 bce1 	b.w	8009498 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8000ad6:	4b0c      	ldr	r3, [pc, #48]	@ (8000b08 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8000ad8:	2180      	movs	r1, #128	@ 0x80
 8000ada:	685a      	ldr	r2, [r3, #4]
 8000adc:	fab2 f282 	clz	r2, r2
 8000ae0:	0952      	lsrs	r2, r2, #5
 8000ae2:	e7f5      	b.n	8000ad0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 8000ae4:	4b08      	ldr	r3, [pc, #32]	@ (8000b08 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8000ae6:	2102      	movs	r1, #2
 8000ae8:	4809      	ldr	r0, [pc, #36]	@ (8000b10 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
 8000aea:	689a      	ldr	r2, [r3, #8]
 8000aec:	fab2 f282 	clz	r2, r2
 8000af0:	0952      	lsrs	r2, r2, #5
 8000af2:	e7ee      	b.n	8000ad2 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8000af4:	4b04      	ldr	r3, [pc, #16]	@ (8000b08 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8000af6:	2140      	movs	r1, #64	@ 0x40
 8000af8:	4806      	ldr	r0, [pc, #24]	@ (8000b14 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5c>)
 8000afa:	68da      	ldr	r2, [r3, #12]
 8000afc:	fab2 f282 	clz	r2, r2
 8000b00:	0952      	lsrs	r2, r2, #5
 8000b02:	e7e6      	b.n	8000ad2 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	2000977c 	.word	0x2000977c
 8000b0c:	40020800 	.word	0x40020800
 8000b10:	40022400 	.word	0x40022400
 8000b14:	40021400 	.word	0x40021400

08000b18 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8000b18:	2803      	cmp	r0, #3
 8000b1a:	d823      	bhi.n	8000b64 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>
 8000b1c:	e8df f000 	tbb	[pc, r0]
 8000b20:	1a120b02 	.word	0x1a120b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 8000b24:	4b10      	ldr	r3, [pc, #64]	@ (8000b68 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8000b26:	2140      	movs	r1, #64	@ 0x40
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	3a00      	subs	r2, #0
 8000b2c:	bf18      	it	ne
 8000b2e:	2201      	movne	r2, #1
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8000b30:	480e      	ldr	r0, [pc, #56]	@ (8000b6c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8000b32:	f008 bcb1 	b.w	8009498 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8000b36:	4b0c      	ldr	r3, [pc, #48]	@ (8000b68 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8000b38:	2180      	movs	r1, #128	@ 0x80
 8000b3a:	685a      	ldr	r2, [r3, #4]
 8000b3c:	3a00      	subs	r2, #0
 8000b3e:	bf18      	it	ne
 8000b40:	2201      	movne	r2, #1
 8000b42:	e7f5      	b.n	8000b30 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 8000b44:	4b08      	ldr	r3, [pc, #32]	@ (8000b68 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8000b46:	2102      	movs	r1, #2
 8000b48:	4809      	ldr	r0, [pc, #36]	@ (8000b70 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
 8000b4a:	689a      	ldr	r2, [r3, #8]
 8000b4c:	3a00      	subs	r2, #0
 8000b4e:	bf18      	it	ne
 8000b50:	2201      	movne	r2, #1
 8000b52:	e7ee      	b.n	8000b32 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8000b54:	4b04      	ldr	r3, [pc, #16]	@ (8000b68 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8000b56:	2140      	movs	r1, #64	@ 0x40
 8000b58:	4806      	ldr	r0, [pc, #24]	@ (8000b74 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5c>)
 8000b5a:	68da      	ldr	r2, [r3, #12]
 8000b5c:	3a00      	subs	r2, #0
 8000b5e:	bf18      	it	ne
 8000b60:	2201      	movne	r2, #1
 8000b62:	e7e6      	b.n	8000b32 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	2000977c 	.word	0x2000977c
 8000b6c:	40020800 	.word	0x40020800
 8000b70:	40022400 	.word	0x40022400
 8000b74:	40021400 	.word	0x40021400

08000b78 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 8000b78:	2803      	cmp	r0, #3
 8000b7a:	d80f      	bhi.n	8000b9c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x24>
 8000b7c:	e8df f000 	tbb	[pc, r0]
 8000b80:	0b080602 	.word	0x0b080602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8000b84:	2140      	movs	r1, #64	@ 0x40
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8000b86:	4806      	ldr	r0, [pc, #24]	@ (8000ba0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x28>)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8000b88:	f008 bc8b 	b.w	80094a2 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8000b8c:	2180      	movs	r1, #128	@ 0x80
 8000b8e:	e7fa      	b.n	8000b86 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8000b90:	2102      	movs	r1, #2
 8000b92:	4804      	ldr	r0, [pc, #16]	@ (8000ba4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>)
 8000b94:	e7f8      	b.n	8000b88 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8000b96:	2140      	movs	r1, #64	@ 0x40
 8000b98:	4803      	ldr	r0, [pc, #12]	@ (8000ba8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x30>)
 8000b9a:	e7f5      	b.n	8000b88 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
#endif
        break;
    }
}
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	40020800 	.word	0x40020800
 8000ba4:	40022400 	.word	0x40022400
 8000ba8:	40021400 	.word	0x40021400

08000bac <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8000bac:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 8000bae:	2803      	cmp	r0, #3
 8000bb0:	d813      	bhi.n	8000bda <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x2e>
 8000bb2:	e8df f000 	tbb	[pc, r0]
 8000bb6:	0a02      	.short	0x0a02
 8000bb8:	0f0c      	.short	0x0f0c
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8000bba:	2140      	movs	r1, #64	@ 0x40
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8000bbc:	4808      	ldr	r0, [pc, #32]	@ (8000be0 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x34>)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8000bbe:	f008 fc65 	bl	800948c <HAL_GPIO_ReadPin>
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 8000bc2:	1e43      	subs	r3, r0, #1
 8000bc4:	4258      	negs	r0, r3
 8000bc6:	4158      	adcs	r0, r3
 8000bc8:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8000bca:	2180      	movs	r1, #128	@ 0x80
 8000bcc:	e7f6      	b.n	8000bbc <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8000bce:	2102      	movs	r1, #2
 8000bd0:	4804      	ldr	r0, [pc, #16]	@ (8000be4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x38>)
 8000bd2:	e7f4      	b.n	8000bbe <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8000bd4:	2140      	movs	r1, #64	@ 0x40
 8000bd6:	4804      	ldr	r0, [pc, #16]	@ (8000be8 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x3c>)
 8000bd8:	e7f1      	b.n	8000bbe <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
    switch (id)
 8000bda:	2000      	movs	r0, #0
 8000bdc:	e7f1      	b.n	8000bc2 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 8000bde:	bf00      	nop
 8000be0:	40020800 	.word	0x40020800
 8000be4:	40022400 	.word	0x40022400
 8000be8:	40021400 	.word	0x40021400

08000bec <_ZN8touchgfx4GPIO4initEv>:
{
 8000bec:	b570      	push	{r4, r5, r6, lr}
 8000bee:	4d08      	ldr	r5, [pc, #32]	@ (8000c10 <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 8000bf0:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 8000bf2:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8000bf4:	b2e0      	uxtb	r0, r4
 8000bf6:	f7ff ffd9 	bl	8000bac <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8000bfa:	b118      	cbz	r0, 8000c04 <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 8000bfc:	682b      	ldr	r3, [r5, #0]
 8000bfe:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 8000c00:	bf18      	it	ne
 8000c02:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 8000c04:	3401      	adds	r4, #1
 8000c06:	3504      	adds	r5, #4
 8000c08:	2c05      	cmp	r4, #5
 8000c0a:	d1f3      	bne.n	8000bf4 <_ZN8touchgfx4GPIO4initEv+0x8>
}
 8000c0c:	bd70      	pop	{r4, r5, r6, pc}
 8000c0e:	bf00      	nop
 8000c10:	2000977c 	.word	0x2000977c

08000c14 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8000c14:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8000c16:	f880 1074 	strb.w	r1, [r0, #116]	@ 0x74
        displayOrientationChangeRequested = true;
 8000c1a:	f880 3075 	strb.w	r3, [r0, #117]	@ 0x75
    }
 8000c1e:	4770      	bx	lr

08000c20 <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 8000c20:	2000      	movs	r0, #0
 8000c22:	4770      	bx	lr

08000c24 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8000c24:	6441      	str	r1, [r0, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8000c26:	3900      	subs	r1, #0
 8000c28:	4b02      	ldr	r3, [pc, #8]	@ (8000c34 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 8000c2a:	bf18      	it	ne
 8000c2c:	2101      	movne	r1, #1
 8000c2e:	7019      	strb	r1, [r3, #0]
    }
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	20027b93 	.word	0x20027b93

08000c38 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8000c38:	2000      	movs	r0, #0
 8000c3a:	4770      	bx	lr

08000c3c <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8000c3c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8000c3e:	b10b      	cbz	r3, 8000c44 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 8000c40:	4608      	mov	r0, r1
 8000c42:	4718      	bx	r3
        }
    }
 8000c44:	4770      	bx	lr

08000c46 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8000c46:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000c4a:	4770      	bx	lr

08000c4c <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8000c4c:	6840      	ldr	r0, [r0, #4]
 8000c4e:	6803      	ldr	r3, [r0, #0]
 8000c50:	699b      	ldr	r3, [r3, #24]
 8000c52:	4718      	bx	r3

08000c54 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // and implemented needed functionality here.

    /* USER CODE BEGIN getTFTFrameBuffer */
    return currFbBase;
    /* USER CODE END getTFTFrameBuffer */
}
 8000c54:	4b01      	ldr	r3, [pc, #4]	@ (8000c5c <_ZNK11TouchGFXHAL17getTFTFrameBufferEv+0x8>)
 8000c56:	6818      	ldr	r0, [r3, #0]
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	200097a0 	.word	0x200097a0

08000c60 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8000c60:	4770      	bx	lr
	...

08000c64 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8000c64:	b4f0      	push	{r4, r5, r6, r7}
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000c66:	2300      	movs	r3, #0
 8000c68:	4c10      	ldr	r4, [pc, #64]	@ (8000cac <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x48>)
 8000c6a:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c6e:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000c72:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000c76:	f643 76e0 	movw	r6, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000c7a:	f3c3 05c9 	ubfx	r5, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000c7e:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8000c82:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000c84:	ea03 0c06 	and.w	ip, r3, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000c88:	462a      	mov	r2, r5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000c8a:	ea4c 7782 	orr.w	r7, ip, r2, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000c8e:	3a01      	subs	r2, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000c90:	f8c4 7274 	str.w	r7, [r4, #628]	@ 0x274
      } while (ways-- != 0U);
 8000c94:	d2f9      	bcs.n	8000c8a <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x26>
    } while(sets-- != 0U);
 8000c96:	3b20      	subs	r3, #32
 8000c98:	f113 0f20 	cmn.w	r3, #32
 8000c9c:	d1f2      	bne.n	8000c84 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x20>
 8000c9e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000ca2:	f3bf 8f6f 	isb	sy
    /* USER CODE END flushFrameBuffer step 1 */

    /* USER CODE BEGIN flushFrameBuffer step 2 */
    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
    /* USER CODE END flushFrameBuffer step 2 */
}
 8000ca6:	bcf0      	pop	{r4, r5, r6, r7}
    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8000ca8:	f001 bb58 	b.w	800235c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8000cb0:	b508      	push	{r3, lr}
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN enableInterrupts */
    TouchGFXGeneratedHAL::enableInterrupts();
 8000cb2:	f001 fae7 	bl	8002284 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cb6:	4b02      	ldr	r3, [pc, #8]	@ (8000cc0 <_ZN11TouchGFXHAL16enableInterruptsEv+0x10>)
 8000cb8:	2204      	movs	r2, #4
 8000cba:	60da      	str	r2, [r3, #12]
    NVIC_EnableIRQ(DSI_IRQn);
    /* USER CODE END enableInterrupts */
}
 8000cbc:	bd08      	pop	{r3, pc}
 8000cbe:	bf00      	nop
 8000cc0:	e000e100 	.word	0xe000e100

08000cc4 <_ZN11TouchGFXHAL8endFrameEv>:
    refreshRequested = false;
    return HAL::beginFrame();
}

void TouchGFXHAL::endFrame()
{
 8000cc4:	b510      	push	{r4, lr}
 8000cc6:	4604      	mov	r4, r0
    TouchGFXGeneratedHAL::endFrame();
 8000cc8:	f001 fc58 	bl	800257c <_ZN20TouchGFXGeneratedHAL8endFrameEv>
    if (frameBufferUpdatedThisFrame)
 8000ccc:	f894 304b 	ldrb.w	r3, [r4, #75]	@ 0x4b
 8000cd0:	b113      	cbz	r3, 8000cd8 <_ZN11TouchGFXHAL8endFrameEv+0x14>
    {
        refreshRequested = true;
 8000cd2:	4b02      	ldr	r3, [pc, #8]	@ (8000cdc <_ZN11TouchGFXHAL8endFrameEv+0x18>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	701a      	strb	r2, [r3, #0]
    }
}
 8000cd8:	bd10      	pop	{r4, pc}
 8000cda:	bf00      	nop
 8000cdc:	20000014 	.word	0x20000014

08000ce0 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8000ce0:	f001 bad9 	b.w	8002296 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

08000ce4 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8000ce4:	b510      	push	{r4, lr}
 8000ce6:	4604      	mov	r4, r0
        swapFrameBuffers();
 8000ce8:	f010 f8cc 	bl	8010e84 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8000cec:	6823      	ldr	r3, [r4, #0]
 8000cee:	4620      	mov	r0, r4
 8000cf0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
    }
 8000cf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8000cf8:	4718      	bx	r3

08000cfa <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 8000cfa:	f00f bb29 	b.w	8010350 <_ZN8touchgfx3HAL16flushFrameBufferEv>

08000cfe <_ZN11TouchGFXHALD0Ev>:
 8000cfe:	b510      	push	{r4, lr}
 8000d00:	4604      	mov	r4, r0
 8000d02:	217c      	movs	r1, #124	@ 0x7c
 8000d04:	f024 fea3 	bl	8025a4e <_ZdlPvj>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	bd10      	pop	{r4, pc}

08000d0c <_ZN11TouchGFXHAL10beginFrameEv>:
    refreshRequested = false;
 8000d0c:	4b02      	ldr	r3, [pc, #8]	@ (8000d18 <_ZN11TouchGFXHAL10beginFrameEv+0xc>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	701a      	strb	r2, [r3, #0]
    return HAL::beginFrame();
 8000d12:	f00f bb59 	b.w	80103c8 <_ZN8touchgfx3HAL10beginFrameEv>
 8000d16:	bf00      	nop
 8000d18:	20000014 	.word	0x20000014

08000d1c <_ZN11TouchGFXHAL10initializeEv>:
{
 8000d1c:	b538      	push	{r3, r4, r5, lr}
 8000d1e:	4604      	mov	r4, r0
    GPIO::init();
 8000d20:	f7ff ff64 	bl	8000bec <_ZN8touchgfx4GPIO4initEv>
    instrumentation.init();
 8000d24:	4d08      	ldr	r5, [pc, #32]	@ (8000d48 <_ZN11TouchGFXHAL10initializeEv+0x2c>)
    TouchGFXGeneratedHAL::initialize();
 8000d26:	4620      	mov	r0, r4
 8000d28:	f001 faf2 	bl	8002310 <_ZN20TouchGFXGeneratedHAL10initializeEv>
        lockDMAToPorch = enableLock;
 8000d2c:	2300      	movs	r3, #0
    instrumentation.init();
 8000d2e:	4628      	mov	r0, r5
 8000d30:	f884 304a 	strb.w	r3, [r4, #74]	@ 0x4a
 8000d34:	f7ff fd1c 	bl	8000770 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>
        updateMCULoad = enabled;
 8000d38:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 8000d3a:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8000d3c:	f884 306c 	strb.w	r3, [r4, #108]	@ 0x6c
        buttonController = btnCtrl;
 8000d40:	4b02      	ldr	r3, [pc, #8]	@ (8000d4c <_ZN11TouchGFXHAL10initializeEv+0x30>)
 8000d42:	6163      	str	r3, [r4, #20]
}
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop
 8000d48:	20009794 	.word	0x20009794
 8000d4c:	20009790 	.word	0x20009790

08000d50 <_ZN11TouchGFXHAL9taskEntryEv>:
    enableLCDControllerInterrupt();
 8000d50:	6803      	ldr	r3, [r0, #0]
{
 8000d52:	4604      	mov	r4, r0
 8000d54:	b507      	push	{r0, r1, r2, lr}
    enableLCDControllerInterrupt();
 8000d56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d5a:	4798      	blx	r3
    enableInterrupts();
 8000d5c:	6823      	ldr	r3, [r4, #0]
 8000d5e:	4620      	mov	r0, r4
 8000d60:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8000d62:	4798      	blx	r3
    OSWrappers::waitForVSync();
 8000d64:	f000 feea 	bl	8001b3c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 8000d68:	6823      	ldr	r3, [r4, #0]
 8000d6a:	4620      	mov	r0, r4
 8000d6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000d6e:	4798      	blx	r3
    HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPON, 0x00);
 8000d70:	2100      	movs	r1, #0
 8000d72:	2329      	movs	r3, #41	@ 0x29
 8000d74:	2215      	movs	r2, #21
 8000d76:	4805      	ldr	r0, [pc, #20]	@ (8000d8c <_ZN11TouchGFXHAL9taskEntryEv+0x3c>)
 8000d78:	9100      	str	r1, [sp, #0]
 8000d7a:	f008 f982 	bl	8009082 <HAL_DSI_ShortWrite>
        OSWrappers::waitForVSync();
 8000d7e:	f000 fedd 	bl	8001b3c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8000d82:	6823      	ldr	r3, [r4, #0]
 8000d84:	4620      	mov	r0, r4
 8000d86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000d88:	4798      	blx	r3
    for (;;)
 8000d8a:	e7f8      	b.n	8000d7e <_ZN11TouchGFXHAL9taskEntryEv+0x2e>
 8000d8c:	200122f4 	.word	0x200122f4

08000d90 <_ZN11TouchGFXHAL19configureInterruptsEv>:
{
 8000d90:	b508      	push	{r3, lr}
    TouchGFXGeneratedHAL::configureInterrupts();
 8000d92:	f001 fa6f 	bl	8002274 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8000d96:	2200      	movs	r2, #0
 8000d98:	2107      	movs	r1, #7
 8000d9a:	205a      	movs	r0, #90	@ 0x5a
 8000d9c:	f007 fa76 	bl	800828c <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(DSI_IRQn, 7, 0);
 8000da0:	2200      	movs	r2, #0
 8000da2:	2107      	movs	r1, #7
 8000da4:	2062      	movs	r0, #98	@ 0x62
}
 8000da6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_SetPriority(DSI_IRQn, 7, 0);
 8000daa:	f007 ba6f 	b.w	800828c <HAL_NVIC_SetPriority>
	...

08000db0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8000db0:	f890 1034 	ldrb.w	r1, [r0, #52]	@ 0x34
        {
            if (DISPLAY_ROTATION == rotate0)
 8000db4:	4b0d      	ldr	r3, [pc, #52]	@ (8000dec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 8000db6:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8000db8:	f890 4074 	ldrb.w	r4, [r0, #116]	@ 0x74
            if (DISPLAY_ROTATION == rotate0)
 8000dbc:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 8000dbe:	428c      	cmp	r4, r1
 8000dc0:	d009      	beq.n	8000dd6 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 8000dc2:	b93a      	cbnz	r2, 8000dd4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8000dc4:	490a      	ldr	r1, [pc, #40]	@ (8000df0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000dc6:	4a0b      	ldr	r2, [pc, #44]	@ (8000df4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 8000dc8:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000dca:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 8000dcc:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8000dce:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000dd0:	800c      	strh	r4, [r1, #0]
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
 8000dd2:	701a      	strb	r2, [r3, #0]
        }
    }
 8000dd4:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8000dd6:	2a00      	cmp	r2, #0
 8000dd8:	d0fc      	beq.n	8000dd4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000dda:	4a06      	ldr	r2, [pc, #24]	@ (8000df4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8000ddc:	4904      	ldr	r1, [pc, #16]	@ (8000df0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000dde:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8000de0:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000de2:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8000de4:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8000de6:	2200      	movs	r2, #0
 8000de8:	e7f3      	b.n	8000dd2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 8000dea:	bf00      	nop
 8000dec:	20027b8c 	.word	0x20027b8c
 8000df0:	20027b8a 	.word	0x20027b8a
 8000df4:	20027b88 	.word	0x20027b88

08000df8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8000df8:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8000dfa:	4b09      	ldr	r3, [pc, #36]	@ (8000e20 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8000dfc:	881b      	ldrh	r3, [r3, #0]
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d803      	bhi.n	8000e0a <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 8000e02:	4b08      	ldr	r3, [pc, #32]	@ (8000e24 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8000e04:	881b      	ldrh	r3, [r3, #0]
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d905      	bls.n	8000e16 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8000e0a:	4b07      	ldr	r3, [pc, #28]	@ (8000e28 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8000e0c:	219e      	movs	r1, #158	@ 0x9e
 8000e0e:	4a07      	ldr	r2, [pc, #28]	@ (8000e2c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8000e10:	4807      	ldr	r0, [pc, #28]	@ (8000e30 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8000e12:	f024 fe4b 	bl	8025aac <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8000e16:	4b07      	ldr	r3, [pc, #28]	@ (8000e34 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8000e18:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8000e1a:	4b07      	ldr	r3, [pc, #28]	@ (8000e38 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8000e1c:	801a      	strh	r2, [r3, #0]
    }
 8000e1e:	bd08      	pop	{r3, pc}
 8000e20:	20027b88 	.word	0x20027b88
 8000e24:	20027b8a 	.word	0x20027b8a
 8000e28:	08026da0 	.word	0x08026da0
 8000e2c:	08026e03 	.word	0x08026e03
 8000e30:	08026e46 	.word	0x08026e46
 8000e34:	20027b8e 	.word	0x20027b8e
 8000e38:	20027b90 	.word	0x20027b90

08000e3c <_ZN11TouchGFXHAL17disableInterruptsEv>:
{
 8000e3c:	b508      	push	{r3, lr}
    TouchGFXGeneratedHAL::disableInterrupts();
 8000e3e:	f001 fbcf 	bl	80025e0 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e42:	4b04      	ldr	r3, [pc, #16]	@ (8000e54 <_ZN11TouchGFXHAL17disableInterruptsEv+0x18>)
 8000e44:	2204      	movs	r2, #4
 8000e46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  __ASM volatile ("dsb 0xF":::"memory");
 8000e4a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000e4e:	f3bf 8f6f 	isb	sy
}
 8000e52:	bd08      	pop	{r3, pc}
 8000e54:	e000e100 	.word	0xe000e100

08000e58 <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 8000e58:	4603      	mov	r3, r0
        if (useDMAAcceleration)
 8000e5a:	f890 0077 	ldrb.w	r0, [r0, #119]	@ 0x77
 8000e5e:	b118      	cbz	r0, 8000e68 <_ZN8touchgfx3HAL11getBlitCapsEv+0x10>
 8000e60:	6858      	ldr	r0, [r3, #4]
            return dma.getBlitCaps();
 8000e62:	6803      	ldr	r3, [r0, #0]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4718      	bx	r3
    }
 8000e68:	4770      	bx	lr
	...

08000e6c <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_>:
{
 8000e6c:	b570      	push	{r4, r5, r6, lr}
 8000e6e:	460d      	mov	r5, r1
 8000e70:	4619      	mov	r1, r3
    currFbBase = (uint16_t*)frameBuffer;
 8000e72:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea0 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x34>)
 8000e74:	601d      	str	r5, [r3, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8000e76:	b935      	cbnz	r5, 8000e86 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x1a>
 8000e78:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea4 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x38>)
 8000e7a:	f240 21d2 	movw	r1, #722	@ 0x2d2
 8000e7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea8 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x3c>)
 8000e80:	480a      	ldr	r0, [pc, #40]	@ (8000eac <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x40>)
 8000e82:	f024 fe13 	bl	8025aac <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8000e86:	e9c0 520f 	strd	r5, r2, [r0, #60]	@ 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8000e8a:	3a00      	subs	r2, #0
 8000e8c:	4b08      	ldr	r3, [pc, #32]	@ (8000eb0 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x44>)
 8000e8e:	bf18      	it	ne
 8000e90:	2201      	movne	r2, #1
 8000e92:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8000e94:	6803      	ldr	r3, [r0, #0]
}
 8000e96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8000e9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e9e:	4718      	bx	r3
 8000ea0:	200097a0 	.word	0x200097a0
 8000ea4:	08026e8b 	.word	0x08026e8b
 8000ea8:	08026ec3 	.word	0x08026ec3
 8000eac:	08026e46 	.word	0x08026e46
 8000eb0:	20027b92 	.word	0x20027b92

08000eb4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
          lcdRef(display),
 8000eb4:	e9c0 1201 	strd	r1, r2, [r0, #4]
          touchController(touchCtrl),
 8000eb8:	60c3      	str	r3, [r0, #12]
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 8000eba:	f44f 7280 	mov.w	r2, #256	@ 0x100
          mcuInstrumentation(0),
 8000ebe:	2300      	movs	r3, #0
          auxiliaryLCD(0),
 8000ec0:	e9c0 2312 	strd	r2, r3, [r0, #72]	@ 0x48
          touchSampleRate(1),
 8000ec4:	4a1e      	ldr	r2, [pc, #120]	@ (8000f40 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x8c>)
              startY(0),
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
 8000ec6:	8503      	strh	r3, [r0, #40]	@ 0x28
              inProgress(false)
 8000ec8:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8000ecc:	62c3      	str	r3, [r0, #44]	@ 0x2c
 8000ece:	8603      	strh	r3, [r0, #48]	@ 0x30
          lastY(0),
 8000ed0:	6603      	str	r3, [r0, #96]	@ 0x60
          updateMCULoad(0),
 8000ed2:	f880 306c 	strb.w	r3, [r0, #108]	@ 0x6c
          cc_begin(0),
 8000ed6:	6703      	str	r3, [r0, #112]	@ 0x70
          vSyncCompensationEnabled(false),
 8000ed8:	e9c0 2319 	strd	r2, r3, [r0, #100]	@ 0x64
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8000edc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 8000ee0:	b570      	push	{r4, r5, r6, lr}
 8000ee2:	6742      	str	r2, [r0, #116]	@ 0x74
          lastRenderMethod(HARDWARE)
 8000ee4:	2201      	movs	r2, #1
                           height)
 8000ee6:	f8bd 5010 	ldrh.w	r5, [sp, #16]
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 8000eea:	f8bd 6014 	ldrh.w	r6, [sp, #20]
                           height)
 8000eee:	3520      	adds	r5, #32
          buttonController(0),
 8000ef0:	e9c0 3304 	strd	r3, r3, [r0, #16]
            : startX(0),
 8000ef4:	e9c0 3306 	strd	r3, r3, [r0, #24]
              tickCount(0),
 8000ef8:	e9c0 3308 	strd	r3, r3, [r0, #32]
          frameBuffer0(0),
 8000efc:	e9c0 330e 	strd	r3, r3, [r0, #56]	@ 0x38
          frameBuffer2(0),
 8000f00:	e9c0 3310 	strd	r3, r3, [r0, #64]	@ 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 8000f04:	e9c0 3314 	strd	r3, r3, [r0, #80]	@ 0x50
          lastX(0),
 8000f08:	e9c0 3316 	strd	r3, r3, [r0, #88]	@ 0x58
          lastRenderMethod(HARDWARE)
 8000f0c:	f880 2078 	strb.w	r2, [r0, #120]	@ 0x78
 8000f10:	b2ad      	uxth	r5, r5
        instance = this;
 8000f12:	4a0c      	ldr	r2, [pc, #48]	@ (8000f44 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x90>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8000f14:	42b5      	cmp	r5, r6
        instance = this;
 8000f16:	6010      	str	r0, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8000f18:	4a0b      	ldr	r2, [pc, #44]	@ (8000f48 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x94>)
 8000f1a:	8015      	strh	r5, [r2, #0]
 8000f1c:	4a0b      	ldr	r2, [pc, #44]	@ (8000f4c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x98>)
 8000f1e:	8015      	strh	r5, [r2, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8000f20:	bf28      	it	cs
 8000f22:	2500      	movcs	r5, #0
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8000f24:	4a0a      	ldr	r2, [pc, #40]	@ (8000f50 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x9c>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8000f26:	bf38      	it	cc
 8000f28:	2501      	movcc	r5, #1
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8000f2a:	8016      	strh	r6, [r2, #0]
 8000f2c:	4a09      	ldr	r2, [pc, #36]	@ (8000f54 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa0>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8000f2e:	f880 5034 	strb.w	r5, [r0, #52]	@ 0x34
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8000f32:	8016      	strh	r6, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8000f34:	4a08      	ldr	r2, [pc, #32]	@ (8000f58 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa4>)
 8000f36:	7013      	strb	r3, [r2, #0]
 8000f38:	4b08      	ldr	r3, [pc, #32]	@ (8000f5c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa8>)
 8000f3a:	6003      	str	r3, [r0, #0]
}
 8000f3c:	bd70      	pop	{r4, r5, r6, pc}
 8000f3e:	bf00      	nop
 8000f40:	01000001 	.word	0x01000001
 8000f44:	20027b94 	.word	0x20027b94
 8000f48:	20027b88 	.word	0x20027b88
 8000f4c:	20027b8e 	.word	0x20027b8e
 8000f50:	20027b8a 	.word	0x20027b8a
 8000f54:	20027b90 	.word	0x20027b90
 8000f58:	20027b8c 	.word	0x20027b8c
 8000f5c:	08026f1c 	.word	0x08026f1c

08000f60 <OTM8009A_IO_Delay>:
      * @brief  OTM8009A delay
      * @param  Delay: Delay in ms
      */
    __weak void OTM8009A_IO_Delay(uint32_t Delay)
    {
        HAL_Delay(Delay);
 8000f60:	f006 bf08 	b.w	8007d74 <HAL_Delay>

08000f64 <DSI_IO_WriteCmd>:
     * @param  pParams: Pointer to parameter values table.
     * @retval HAL status
     */
    void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t* pParams)
    {
        if (NbrParams <= 1)
 8000f64:	2801      	cmp	r0, #1
    {
 8000f66:	4603      	mov	r3, r0
 8000f68:	b507      	push	{r0, r1, r2, lr}
        if (NbrParams <= 1)
 8000f6a:	d80a      	bhi.n	8000f82 <DSI_IO_WriteCmd+0x1e>
        {
            HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]);
 8000f6c:	784b      	ldrb	r3, [r1, #1]
 8000f6e:	2215      	movs	r2, #21
 8000f70:	4808      	ldr	r0, [pc, #32]	@ (8000f94 <DSI_IO_WriteCmd+0x30>)
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	780b      	ldrb	r3, [r1, #0]
 8000f76:	2100      	movs	r1, #0
 8000f78:	f008 f883 	bl	8009082 <HAL_DSI_ShortWrite>
        }
        else
        {
            HAL_DSI_LongWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams);
        }
    }
 8000f7c:	b003      	add	sp, #12
 8000f7e:	f85d fb04 	ldr.w	pc, [sp], #4
            HAL_DSI_LongWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams);
 8000f82:	9101      	str	r1, [sp, #4]
 8000f84:	5c0a      	ldrb	r2, [r1, r0]
 8000f86:	2100      	movs	r1, #0
 8000f88:	4802      	ldr	r0, [pc, #8]	@ (8000f94 <DSI_IO_WriteCmd+0x30>)
 8000f8a:	9200      	str	r2, [sp, #0]
 8000f8c:	2239      	movs	r2, #57	@ 0x39
 8000f8e:	f008 f889 	bl	80090a4 <HAL_DSI_LongWrite>
    }
 8000f92:	e7f3      	b.n	8000f7c <DSI_IO_WriteCmd+0x18>
 8000f94:	200122f4 	.word	0x200122f4

08000f98 <LCD_ReqTear>:

    /**
     * Request TE at scanline.
     */
    void LCD_ReqTear(void)
    {
 8000f98:	b537      	push	{r0, r1, r2, r4, r5, lr}
        static uint8_t ScanLineParams[2];

        uint16_t scanline = 533;
        ScanLineParams[0] = scanline >> 8;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	4a0a      	ldr	r2, [pc, #40]	@ (8000fc8 <LCD_ReqTear+0x30>)
        ScanLineParams[1] = scanline & 0x00FF;
 8000f9e:	2515      	movs	r5, #21

        HAL_DSI_LongWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8000fa0:	4c0a      	ldr	r4, [pc, #40]	@ (8000fcc <LCD_ReqTear+0x34>)
        ScanLineParams[0] = scanline >> 8;
 8000fa2:	7013      	strb	r3, [r2, #0]
        HAL_DSI_LongWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8000fa4:	2100      	movs	r1, #0
        ScanLineParams[1] = scanline & 0x00FF;
 8000fa6:	7055      	strb	r5, [r2, #1]
        HAL_DSI_LongWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8000fa8:	4620      	mov	r0, r4
 8000faa:	9201      	str	r2, [sp, #4]
 8000fac:	2244      	movs	r2, #68	@ 0x44
 8000fae:	9200      	str	r2, [sp, #0]
 8000fb0:	2239      	movs	r2, #57	@ 0x39
 8000fb2:	f008 f877 	bl	80090a4 <HAL_DSI_LongWrite>
        // set_tear_on
        HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, 0x35, 0x00);
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	2335      	movs	r3, #53	@ 0x35
 8000fba:	462a      	mov	r2, r5
 8000fbc:	4620      	mov	r0, r4
 8000fbe:	9100      	str	r1, [sp, #0]
 8000fc0:	f008 f85f 	bl	8009082 <HAL_DSI_ShortWrite>
    }
 8000fc4:	b003      	add	sp, #12
 8000fc6:	bd30      	pop	{r4, r5, pc}
 8000fc8:	2000978c 	.word	0x2000978c
 8000fcc:	200122f4 	.word	0x200122f4

08000fd0 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
{
 8000fd0:	b510      	push	{r4, lr}
 8000fd2:	4604      	mov	r4, r0
    LCD_ReqTear();
 8000fd4:	f7ff ffe0 	bl	8000f98 <LCD_ReqTear>
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_ER);
 8000fd8:	4b0f      	ldr	r3, [pc, #60]	@ (8001018 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x48>)
 8000fda:	2202      	movs	r2, #2
    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8000fdc:	4620      	mov	r0, r4
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_ER);
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_TE);
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_TE);
 8000fea:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8000fee:	f042 0201 	orr.w	r2, r2, #1
 8000ff2:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_ER);
 8000ff6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8000ffa:	f042 0202 	orr.w	r2, r2, #2
 8000ffe:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
    __HAL_LTDC_ENABLE_IT(&hltdc, (LTDC_IT_LI | LTDC_IT_FU)); /* Enable line and FIFO underrun interrupts */
 8001002:	4b06      	ldr	r3, [pc, #24]	@ (800101c <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x4c>)
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8001008:	f043 0303 	orr.w	r3, r3, #3
}
 800100c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    __HAL_LTDC_ENABLE_IT(&hltdc, (LTDC_IT_LI | LTDC_IT_FU)); /* Enable line and FIFO underrun interrupts */
 8001010:	6353      	str	r3, [r2, #52]	@ 0x34
    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8001012:	f001 b93f 	b.w	8002294 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
 8001016:	bf00      	nop
 8001018:	200122f4 	.word	0x200122f4
 800101c:	2001208c 	.word	0x2001208c

08001020 <LCD_SetUpdateRegion>:

    void LCD_SetUpdateRegion(int idx)
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[idx]);
 8001020:	4b07      	ldr	r3, [pc, #28]	@ (8001040 <LCD_SetUpdateRegion+0x20>)
 8001022:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    {
 8001026:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[idx]);
 8001028:	9301      	str	r3, [sp, #4]
 800102a:	232a      	movs	r3, #42	@ 0x2a
 800102c:	2239      	movs	r2, #57	@ 0x39
 800102e:	2100      	movs	r1, #0
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	2304      	movs	r3, #4
 8001034:	4803      	ldr	r0, [pc, #12]	@ (8001044 <LCD_SetUpdateRegion+0x24>)
 8001036:	f008 f835 	bl	80090a4 <HAL_DSI_LongWrite>
    }
 800103a:	b003      	add	sp, #12
 800103c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001040:	20000004 	.word	0x20000004
 8001044:	200122f4 	.word	0x200122f4

08001048 <HAL_DSI_TearingEffectCallback>:
    // {
    //     HAL_DSI_LongWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
    // }

    void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef* hdsi)
    {
 8001048:	b570      	push	{r4, r5, r6, lr}
        return instance;
 800104a:	4d15      	ldr	r5, [pc, #84]	@ (80010a0 <HAL_DSI_TearingEffectCallback+0x58>)
 800104c:	4604      	mov	r4, r0
        GPIO::set(GPIO::VSYNC_FREQ);
 800104e:	2000      	movs	r0, #0
 8001050:	f7ff fd32 	bl	8000ab8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8001054:	682a      	ldr	r2, [r5, #0]
        vSyncCnt++;
 8001056:	f892 3066 	ldrb.w	r3, [r2, #102]	@ 0x66
 800105a:	3301      	adds	r3, #1
 800105c:	f882 3066 	strb.w	r3, [r2, #102]	@ 0x66
        HAL::getInstance()->vSync();
        OSWrappers::signalVSync();
 8001060:	f000 fd60 	bl	8001b24 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

        // In single buffering, only require that the system waits for display update to be finished if we
        // actually intend to update the display in this frame.
        HAL::getInstance()->lockDMAToFrontPorch(refreshRequested);
 8001064:	4b0f      	ldr	r3, [pc, #60]	@ (80010a4 <HAL_DSI_TearingEffectCallback+0x5c>)
        return instance;
 8001066:	6828      	ldr	r0, [r5, #0]
 8001068:	781a      	ldrb	r2, [r3, #0]

        if (refreshRequested && !displayRefreshing)
 800106a:	781b      	ldrb	r3, [r3, #0]
        lockDMAToPorch = enableLock;
 800106c:	f880 204a 	strb.w	r2, [r0, #74]	@ 0x4a
 8001070:	b123      	cbz	r3, 800107c <HAL_DSI_TearingEffectCallback+0x34>
 8001072:	4d0d      	ldr	r5, [pc, #52]	@ (80010a8 <HAL_DSI_TearingEffectCallback+0x60>)
 8001074:	782b      	ldrb	r3, [r5, #0]
 8001076:	f003 06ff 	and.w	r6, r3, #255	@ 0xff
 800107a:	b123      	cbz	r3, 8001086 <HAL_DSI_TearingEffectCallback+0x3e>
            HAL_DSI_Refresh(hdsi);
            displayRefreshing = true;
        }
        else
        {
            GPIO::clear(GPIO::VSYNC_FREQ);
 800107c:	2000      	movs	r0, #0
        }
    }
 800107e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8001082:	f7ff bd49 	b.w	8000b18 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
                HAL::getInstance()->swapFrameBuffers();
 8001086:	f00f fefd 	bl	8010e84 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            updateRegion = 0;
 800108a:	4b08      	ldr	r3, [pc, #32]	@ (80010ac <HAL_DSI_TearingEffectCallback+0x64>)
            LCD_SetUpdateRegion(updateRegion);
 800108c:	4630      	mov	r0, r6
            updateRegion = 0;
 800108e:	601e      	str	r6, [r3, #0]
            LCD_SetUpdateRegion(updateRegion);
 8001090:	f7ff ffc6 	bl	8001020 <LCD_SetUpdateRegion>
            HAL_DSI_Refresh(hdsi);
 8001094:	4620      	mov	r0, r4
 8001096:	f007 ffe4 	bl	8009062 <HAL_DSI_Refresh>
            displayRefreshing = true;
 800109a:	2301      	movs	r3, #1
 800109c:	702b      	strb	r3, [r5, #0]
    }
 800109e:	bd70      	pop	{r4, r5, r6, pc}
 80010a0:	20027b94 	.word	0x20027b94
 80010a4:	20000014 	.word	0x20000014
 80010a8:	200097a8 	.word	0x200097a8
 80010ac:	200097a4 	.word	0x200097a4

080010b0 <HAL_DSI_EndOfRefreshCallback>:

    void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef* hdsi)
    {
        updateRegion++;
 80010b0:	4b30      	ldr	r3, [pc, #192]	@ (8001174 <HAL_DSI_EndOfRefreshCallback+0xc4>)
    {
 80010b2:	b570      	push	{r4, r5, r6, lr}
 80010b4:	4c30      	ldr	r4, [pc, #192]	@ (8001178 <HAL_DSI_EndOfRefreshCallback+0xc8>)
 80010b6:	4605      	mov	r5, r0
        updateRegion++;
 80010b8:	6818      	ldr	r0, [r3, #0]
        if (updateRegion < 4)
        {
            DSI->WCR &= ~(DSI_WCR_DSIEN);
 80010ba:	f8d4 1404 	ldr.w	r1, [r4, #1028]	@ 0x404
        updateRegion++;
 80010be:	3001      	adds	r0, #1
            DSI->WCR &= ~(DSI_WCR_DSIEN);
 80010c0:	f021 0108 	bic.w	r1, r1, #8
        updateRegion++;
 80010c4:	6018      	str	r0, [r3, #0]
        if (updateRegion < 4)
 80010c6:	2803      	cmp	r0, #3
            LTDC_Layer1->CFBAR = ((uint32_t)currFbBase) + 200 * 2 * updateRegion;
 80010c8:	4b2c      	ldr	r3, [pc, #176]	@ (800117c <HAL_DSI_EndOfRefreshCallback+0xcc>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4b2c      	ldr	r3, [pc, #176]	@ (8001180 <HAL_DSI_EndOfRefreshCallback+0xd0>)
            DSI->WCR &= ~(DSI_WCR_DSIEN);
 80010ce:	f8c4 1404 	str.w	r1, [r4, #1028]	@ 0x404
        if (updateRegion < 4)
 80010d2:	dc27      	bgt.n	8001124 <HAL_DSI_EndOfRefreshCallback+0x74>
            LTDC_Layer1->CFBAR = ((uint32_t)currFbBase) + 200 * 2 * updateRegion;
 80010d4:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80010d8:	fb01 2200 	mla	r2, r1, r0, r2
 80010dc:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac

            uint16_t REAL_WIDTH = 200;
            uint16_t ADJUSTED_WIDTH = 200;
            if (updateRegion == 3)
            {
                ADJUSTED_WIDTH += 32;
 80010e0:	bf0c      	ite	eq
 80010e2:	23e8      	moveq	r3, #232	@ 0xe8
            uint16_t ADJUSTED_WIDTH = 200;
 80010e4:	23c8      	movne	r3, #200	@ 0xc8
            }

            LTDC->AWCR = ((ADJUSTED_WIDTH + 2) << 16) | 0x1E2; //adj
 80010e6:	4a26      	ldr	r2, [pc, #152]	@ (8001180 <HAL_DSI_EndOfRefreshCallback+0xd0>)
 80010e8:	3302      	adds	r3, #2
 80010ea:	041b      	lsls	r3, r3, #16
 80010ec:	f443 73f1 	orr.w	r3, r3, #482	@ 0x1e2
 80010f0:	6113      	str	r3, [r2, #16]
            LTDC->TWCR = ((REAL_WIDTH + 2 + 1 - 1) << 16) | 0x1E3;
 80010f2:	4b24      	ldr	r3, [pc, #144]	@ (8001184 <HAL_DSI_EndOfRefreshCallback+0xd4>)
 80010f4:	6153      	str	r3, [r2, #20]
            LTDC_Layer1->WHPCR = ((REAL_WIDTH + 2) << 16) | 3;
 80010f6:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80010fa:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
            LTDC_Layer1->CFBLR = ((832 * 2) << 16) | ((REAL_WIDTH) * 2 + 3);
 80010fe:	4b22      	ldr	r3, [pc, #136]	@ (8001188 <HAL_DSI_EndOfRefreshCallback+0xd8>)
 8001100:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

            LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8001104:	2301      	movs	r3, #1
 8001106:	6253      	str	r3, [r2, #36]	@ 0x24
            LCD_SetUpdateRegion(updateRegion);
 8001108:	f7ff ff8a 	bl	8001020 <LCD_SetUpdateRegion>

            DSI->WCR |= DSI_WCR_DSIEN;
 800110c:	4a1a      	ldr	r2, [pc, #104]	@ (8001178 <HAL_DSI_EndOfRefreshCallback+0xc8>)
            HAL_DSI_Refresh(hdsi);
 800110e:	4628      	mov	r0, r5
            DSI->WCR |= DSI_WCR_DSIEN;
 8001110:	f8d2 3404 	ldr.w	r3, [r2, #1028]	@ 0x404
 8001114:	f043 0308 	orr.w	r3, r3, #8
        //             // Signal to the framework that display update has finished.
        //             HAL::getInstance()->frontPorchEntered();
        //         }
        //     }
        // }
    }
 8001118:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            DSI->WCR |= DSI_WCR_DSIEN;
 800111c:	f8c2 3404 	str.w	r3, [r2, #1028]	@ 0x404
            HAL_DSI_Refresh(hdsi);
 8001120:	f007 bf9f 	b.w	8009062 <HAL_DSI_Refresh>
            LTDC_Layer1->CFBAR = (uint32_t)currFbBase;
 8001124:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
            LCD_SetUpdateRegion(0);
 8001128:	2000      	movs	r0, #0
            LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 800112a:	4a18      	ldr	r2, [pc, #96]	@ (800118c <HAL_DSI_EndOfRefreshCallback+0xdc>)
 800112c:	611a      	str	r2, [r3, #16]
            LTDC->TWCR = ((WIDTH + 2 + 1) << 16) | 0x1E3;
 800112e:	f102 1201 	add.w	r2, r2, #65537	@ 0x10001
 8001132:	615a      	str	r2, [r3, #20]
            LTDC_Layer1->WHPCR = ((WIDTH + 2) << 16) | 3;
 8001134:	4a16      	ldr	r2, [pc, #88]	@ (8001190 <HAL_DSI_EndOfRefreshCallback+0xe0>)
 8001136:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
            LTDC_Layer1->CFBLR = (((832 * 2) << 16) | ((WIDTH * 2) + 3));
 800113a:	4a13      	ldr	r2, [pc, #76]	@ (8001188 <HAL_DSI_EndOfRefreshCallback+0xd8>)
 800113c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
            LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8001140:	2201      	movs	r2, #1
 8001142:	625a      	str	r2, [r3, #36]	@ 0x24
            LCD_SetUpdateRegion(0);
 8001144:	f7ff ff6c 	bl	8001020 <LCD_SetUpdateRegion>
            DSI->WCR |= DSI_WCR_DSIEN;
 8001148:	f8d4 3404 	ldr.w	r3, [r4, #1028]	@ 0x404
            GPIO::clear(GPIO::VSYNC_FREQ);
 800114c:	2000      	movs	r0, #0
            DSI->WCR |= DSI_WCR_DSIEN;
 800114e:	f043 0308 	orr.w	r3, r3, #8
 8001152:	f8c4 3404 	str.w	r3, [r4, #1028]	@ 0x404
            GPIO::clear(GPIO::VSYNC_FREQ);
 8001156:	f7ff fcdf 	bl	8000b18 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            displayRefreshing = false;
 800115a:	4b0e      	ldr	r3, [pc, #56]	@ (8001194 <HAL_DSI_EndOfRefreshCallback+0xe4>)
 800115c:	2200      	movs	r2, #0
 800115e:	701a      	strb	r2, [r3, #0]
        return instance;
 8001160:	4b0d      	ldr	r3, [pc, #52]	@ (8001198 <HAL_DSI_EndOfRefreshCallback+0xe8>)
 8001162:	6818      	ldr	r0, [r3, #0]
            if (HAL::getInstance())
 8001164:	b120      	cbz	r0, 8001170 <HAL_DSI_EndOfRefreshCallback+0xc0>
        allowDMATransfers();
 8001166:	6803      	ldr	r3, [r0, #0]
    }
 8001168:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800116c:	6a1b      	ldr	r3, [r3, #32]
 800116e:	4718      	bx	r3
 8001170:	bd70      	pop	{r4, r5, r6, pc}
 8001172:	bf00      	nop
 8001174:	200097a4 	.word	0x200097a4
 8001178:	40016c00 	.word	0x40016c00
 800117c:	200097a0 	.word	0x200097a0
 8001180:	40016800 	.word	0x40016800
 8001184:	00ca01e3 	.word	0x00ca01e3
 8001188:	06800193 	.word	0x06800193
 800118c:	00ca01e2 	.word	0x00ca01e2
 8001190:	00ca0003 	.word	0x00ca0003
 8001194:	200097a8 	.word	0x200097a8
 8001198:	20027b94 	.word	0x20027b94

0800119c <IdleTaskHook>:

    portBASE_TYPE IdleTaskHook(void* p)
    {
 800119c:	4601      	mov	r1, r0
 800119e:	b508      	push	{r3, lr}
        return instance;
 80011a0:	4b03      	ldr	r3, [pc, #12]	@ (80011b0 <IdleTaskHook+0x14>)
 80011a2:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 80011a4:	b101      	cbz	r1, 80011a8 <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 80011a6:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 80011a8:	f00f fe86 	bl	8010eb8 <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 80011ac:	2001      	movs	r0, #1
 80011ae:	bd08      	pop	{r3, pc}
 80011b0:	20027b94 	.word	0x20027b94

080011b4 <_GLOBAL__sub_I_displayRefreshing>:
        : cc_consumed(0),
 80011b4:	4b05      	ldr	r3, [pc, #20]	@ (80011cc <_GLOBAL__sub_I_displayRefreshing+0x18>)
 80011b6:	2200      	movs	r2, #0
{
class KeySampler : public ButtonController
{
public:
    KeySampler()
    {
 80011b8:	4805      	ldr	r0, [pc, #20]	@ (80011d0 <_GLOBAL__sub_I_displayRefreshing+0x1c>)
 80011ba:	605a      	str	r2, [r3, #4]
          cc_in(0)
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	4a05      	ldr	r2, [pc, #20]	@ (80011d4 <_GLOBAL__sub_I_displayRefreshing+0x20>)
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	4b05      	ldr	r3, [pc, #20]	@ (80011d8 <_GLOBAL__sub_I_displayRefreshing+0x24>)
 80011c4:	6003      	str	r3, [r0, #0]
        init();
 80011c6:	f7ff bb11 	b.w	80007ec <_ZN8touchgfx10KeySampler4initEv>
 80011ca:	bf00      	nop
 80011cc:	20009794 	.word	0x20009794
 80011d0:	20009790 	.word	0x20009790
 80011d4:	08026cc0 	.word	0x08026cc0
 80011d8:	08026ce8 	.word	0x08026ce8

080011dc <_ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual bool gotoNextFrame();
    //Decode part of the current frame
    virtual bool decodeFrame(const touchgfx::Rect& area, uint8_t* frameBuffer, uint32_t framebuffer_width);
    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);
    virtual void gotoFrame(uint32_t frameno);
    virtual uint32_t getCurrentFrameNumber() const { return frameNumber; }
 80011dc:	6940      	ldr	r0, [r0, #20]
 80011de:	4770      	bx	lr

080011e0 <_ZN20HardwareMJPEGDecoder12getLastErrorEv>:
    virtual void setRepeatVideo(bool repeat);
    virtual void getVideoInfo(touchgfx::VideoInformation* data);

    void setAVIFileBuffer(uint8_t* buffer, uint32_t size) { aviBuffer = buffer, aviBufferLength = size; }

    virtual AVIErrors getLastError() { return lastError; }
 80011e0:	f890 0040 	ldrb.w	r0, [r0, #64]	@ 0x40
 80011e4:	4770      	bx	lr

080011e6 <_ZN20HardwareMJPEGDecoder8hasVideoEv>:
    readVideoHeader();
}

bool HardwareMJPEGDecoder::hasVideo()
{
    return (reader != 0) || (movieData != 0);
 80011e6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80011e8:	b923      	cbnz	r3, 80011f4 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0xe>
 80011ea:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 80011ec:	3800      	subs	r0, #0
 80011ee:	bf18      	it	ne
 80011f0:	2001      	movne	r0, #1
 80011f2:	4770      	bx	lr
 80011f4:	2001      	movs	r0, #1
}
 80011f6:	4770      	bx	lr

080011f8 <_ZN20HardwareMJPEGDecoder17getNumberOfFramesEv>:
}

uint32_t HardwareMJPEGDecoder::getNumberOfFrames()
{
    return videoInfo.number_of_frames;
}
 80011f8:	6880      	ldr	r0, [r0, #8]
 80011fa:	4770      	bx	lr

080011fc <_ZN20HardwareMJPEGDecoder14setRepeatVideoEb>:

void HardwareMJPEGDecoder::setRepeatVideo(bool repeat)
{

}
 80011fc:	4770      	bx	lr

080011fe <_ZN20HardwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void HardwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
    *data = videoInfo;
 80011fe:	3004      	adds	r0, #4
{
 8001200:	b510      	push	{r4, lr}
 8001202:	460c      	mov	r4, r1
    *data = videoInfo;
 8001204:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 8001206:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800120a:	bd10      	pop	{r4, pc}

0800120c <_ZN20HardwareMJPEGDecoderD1Ev>:
class HardwareMJPEGDecoder : public MJPEGDecoder
 800120c:	4770      	bx	lr
	...

08001210 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt>:
{
 8001210:	b508      	push	{r3, lr}
    assert(0);
 8001212:	4a03      	ldr	r2, [pc, #12]	@ (8001220 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x10>)
 8001214:	f240 11cb 	movw	r1, #459	@ 0x1cb
 8001218:	4b02      	ldr	r3, [pc, #8]	@ (8001224 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x14>)
 800121a:	4803      	ldr	r0, [pc, #12]	@ (8001228 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x18>)
 800121c:	f024 fc46 	bl	8025aac <__assert_func>
 8001220:	08026fec 	.word	0x08026fec
 8001224:	0802992f 	.word	0x0802992f
 8001228:	08027047 	.word	0x08027047

0800122c <_ZN20HardwareMJPEGDecoderD0Ev>:
 800122c:	b510      	push	{r4, lr}
 800122e:	4604      	mov	r4, r0
 8001230:	2144      	movs	r1, #68	@ 0x44
 8001232:	f024 fc0c 	bl	8025a4e <_ZdlPvj>
 8001236:	4620      	mov	r0, r4
 8001238:	bd10      	pop	{r4, pc}
	...

0800123c <_ZN20HardwareMJPEGDecoderC1Ev>:
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 800123c:	b538      	push	{r3, r4, r5, lr}
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
 800123e:	2500      	movs	r5, #0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 8001240:	4b0f      	ldr	r3, [pc, #60]	@ (8001280 <_ZN20HardwareMJPEGDecoderC1Ev+0x44>)
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 8001242:	4604      	mov	r4, r0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 8001244:	6003      	str	r3, [r0, #0]
 8001246:	63c5      	str	r5, [r0, #60]	@ 0x3c
 8001248:	f880 5040 	strb.w	r5, [r0, #64]	@ 0x40
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
 800124c:	e9c0 5505 	strd	r5, r5, [r0, #20]
 8001250:	e9c0 5507 	strd	r5, r5, [r0, #28]
 8001254:	e9c0 5509 	strd	r5, r5, [r0, #36]	@ 0x24
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 8001258:	e9c0 550b 	strd	r5, r5, [r0, #44]	@ 0x2c
 800125c:	e9c0 550d 	strd	r5, r5, [r0, #52]	@ 0x34
    videoInfo.frame_width = 0;
 8001260:	e9c0 5503 	strd	r5, r5, [r0, #12]
    videoInfo.number_of_frames = 0;
 8001264:	e9c0 5501 	strd	r5, r5, [r0, #4]
    TGFX_JPEG_InitColorTables();
 8001268:	f001 fdde 	bl	8002e28 <TGFX_JPEG_InitColorTables>
    semDecodingDone = SEM_CREATE();
 800126c:	462a      	mov	r2, r5
 800126e:	4629      	mov	r1, r5
 8001270:	2001      	movs	r0, #1
 8001272:	f00b fe25 	bl	800cec0 <osSemaphoreNew>
 8001276:	4b03      	ldr	r3, [pc, #12]	@ (8001284 <_ZN20HardwareMJPEGDecoderC1Ev+0x48>)
 8001278:	6018      	str	r0, [r3, #0]
}
 800127a:	4620      	mov	r0, r4
 800127c:	bd38      	pop	{r3, r4, r5, pc}
 800127e:	bf00      	nop
 8001280:	080272d0 	.word	0x080272d0
 8001284:	200097c0 	.word	0x200097c0

08001288 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>:
{
 8001288:	b410      	push	{r4}
 800128a:	460c      	mov	r4, r1
 800128c:	4611      	mov	r1, r2
 800128e:	461a      	mov	r2, r3
    if (reader != 0)
 8001290:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8001292:	b13b      	cbz	r3, 80012a4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x1c>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
 8001294:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8001296:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8001298:	1ae4      	subs	r4, r4, r3
        src = (const char*)movieData + offset;
 800129a:	4420      	add	r0, r4
}
 800129c:	f85d 4b04 	ldr.w	r4, [sp], #4
    return strncmp(src, str, num);
 80012a0:	f024 bea8 	b.w	8025ff4 <strncmp>
        src = (const char*)movieData + offset;
 80012a4:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 80012a6:	e7f8      	b.n	800129a <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x12>

080012a8 <_ZN20HardwareMJPEGDecoder6getU32Em>:
    if (reader != 0)
 80012a8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
{
 80012aa:	b510      	push	{r4, lr}
    if (reader != 0)
 80012ac:	b173      	cbz	r3, 80012cc <_ZN20HardwareMJPEGDecoder6getU32Em+0x24>
        const uint32_t index = offset - aviBufferStartOffset;
 80012ae:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
 80012b0:	6b42      	ldr	r2, [r0, #52]	@ 0x34
        const uint32_t index = offset - aviBufferStartOffset;
 80012b2:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
 80012b4:	1853      	adds	r3, r2, r1
 80012b6:	5c52      	ldrb	r2, [r2, r1]
 80012b8:	7898      	ldrb	r0, [r3, #2]
 80012ba:	785c      	ldrb	r4, [r3, #1]
 80012bc:	0400      	lsls	r0, r0, #16
 80012be:	78db      	ldrb	r3, [r3, #3]
 80012c0:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 80012c4:	4310      	orrs	r0, r2
 80012c6:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
}
 80012ca:	bd10      	pop	{r4, pc}
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
 80012cc:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80012ce:	5858      	ldr	r0, [r3, r1]
 80012d0:	e7fb      	b.n	80012ca <_ZN20HardwareMJPEGDecoder6getU32Em+0x22>

080012d2 <_ZN20HardwareMJPEGDecoder6getU16Em>:
    if (reader != 0)
 80012d2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80012d4:	b143      	cbz	r3, 80012e8 <_ZN20HardwareMJPEGDecoder6getU16Em+0x16>
        const uint32_t index = offset - aviBufferStartOffset;
 80012d6:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80012d8:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
 80012da:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80012dc:	185a      	adds	r2, r3, r1
 80012de:	5c58      	ldrb	r0, [r3, r1]
 80012e0:	7852      	ldrb	r2, [r2, #1]
 80012e2:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80012e6:	4770      	bx	lr
        return d[0] | (d[1] << 8);
 80012e8:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80012ea:	5a58      	ldrh	r0, [r3, r1]
}
 80012ec:	4770      	bx	lr
	...

080012f0 <_ZN20HardwareMJPEGDecoder8readDataEmm>:
{
 80012f0:	b570      	push	{r4, r5, r6, lr}
 80012f2:	4604      	mov	r4, r0
    if (reader != 0)
 80012f4:	6b00      	ldr	r0, [r0, #48]	@ 0x30
{
 80012f6:	460d      	mov	r5, r1
 80012f8:	4616      	mov	r6, r2
    if (reader != 0)
 80012fa:	b1d8      	cbz	r0, 8001334 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x44>
        if (length > aviBufferLength)
 80012fc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80012fe:	4293      	cmp	r3, r2
 8001300:	d208      	bcs.n	8001314 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x24>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 8001302:	2309      	movs	r3, #9
            assert(!"Buffer to small");
 8001304:	4a0d      	ldr	r2, [pc, #52]	@ (800133c <_ZN20HardwareMJPEGDecoder8readDataEmm+0x4c>)
 8001306:	21a7      	movs	r1, #167	@ 0xa7
 8001308:	480d      	ldr	r0, [pc, #52]	@ (8001340 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x50>)
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 800130a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
            assert(!"Buffer to small");
 800130e:	4b0d      	ldr	r3, [pc, #52]	@ (8001344 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x54>)
 8001310:	f024 fbcc 	bl	8025aac <__assert_func>
        reader->seek(offset);
 8001314:	6803      	ldr	r3, [r0, #0]
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
 800131a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800131c:	4632      	mov	r2, r6
 800131e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001320:	6803      	ldr	r3, [r0, #0]
 8001322:	691b      	ldr	r3, [r3, #16]
 8001324:	4798      	blx	r3
 8001326:	b910      	cbnz	r0, 800132e <_ZN20HardwareMJPEGDecoder8readDataEmm+0x3e>
            lastError = AVI_ERROR_EOF_REACHED;
 8001328:	230d      	movs	r3, #13
 800132a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return aviBuffer;
 800132e:	6b60      	ldr	r0, [r4, #52]	@ 0x34
        aviBufferStartOffset = offset;
 8001330:	63e5      	str	r5, [r4, #60]	@ 0x3c
}
 8001332:	bd70      	pop	{r4, r5, r6, pc}
    return movieData + offset;
 8001334:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8001336:	4408      	add	r0, r1
 8001338:	e7fb      	b.n	8001332 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x42>
 800133a:	bf00      	nop
 800133c:	080270b3 	.word	0x080270b3
 8001340:	08027047 	.word	0x08027047
 8001344:	080270a0 	.word	0x080270a0

08001348 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv>:
{
 8001348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 800134c:	6943      	ldr	r3, [r0, #20]
{
 800134e:	4604      	mov	r4, r0
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8001350:	b92b      	cbnz	r3, 800135e <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x16>
 8001352:	4b22      	ldr	r3, [pc, #136]	@ (80013dc <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x94>)
 8001354:	21ed      	movs	r1, #237	@ 0xed
 8001356:	4a22      	ldr	r2, [pc, #136]	@ (80013e0 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x98>)
 8001358:	4822      	ldr	r0, [pc, #136]	@ (80013e4 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x9c>)
 800135a:	f024 fba7 	bl	8025aac <__assert_func>
    readData(currentMovieOffset, 8);
 800135e:	2208      	movs	r2, #8
 8001360:	6981      	ldr	r1, [r0, #24]
 8001362:	f7ff ffc5 	bl	80012f0 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8001366:	69a1      	ldr	r1, [r4, #24]
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 8001368:	f243 0630 	movw	r6, #12336	@ 0x3030
 800136c:	f246 3764 	movw	r7, #25444	@ 0x6364
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8001370:	3104      	adds	r1, #4
 8001372:	4620      	mov	r0, r4
 8001374:	f7ff ff98 	bl	80012a8 <_ZN20HardwareMJPEGDecoder6getU32Em>
    while (currentMovieOffset + 8 + chunkSize < movieLength)
 8001378:	69a3      	ldr	r3, [r4, #24]
 800137a:	4418      	add	r0, r3
 800137c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800137e:	f100 0208 	add.w	r2, r0, #8
 8001382:	429a      	cmp	r2, r3
 8001384:	d306      	bcc.n	8001394 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x4c>
    frameNumber = 1;
 8001386:	2301      	movs	r3, #1
    return false;
 8001388:	2000      	movs	r0, #0
    frameNumber = 1;
 800138a:	6163      	str	r3, [r4, #20]
    currentMovieOffset = firstFrameOffset; //start over
 800138c:	6a23      	ldr	r3, [r4, #32]
 800138e:	61a3      	str	r3, [r4, #24]
}
 8001390:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        frameNumber++;
 8001394:	6963      	ldr	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8001396:	f100 0109 	add.w	r1, r0, #9
        readData(currentMovieOffset, 8);
 800139a:	2208      	movs	r2, #8
 800139c:	4620      	mov	r0, r4
        frameNumber++;
 800139e:	3301      	adds	r3, #1
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 80013a0:	f021 0101 	bic.w	r1, r1, #1
        frameNumber++;
 80013a4:	6163      	str	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 80013a6:	61a1      	str	r1, [r4, #24]
        readData(currentMovieOffset, 8);
 80013a8:	f7ff ffa2 	bl	80012f0 <_ZN20HardwareMJPEGDecoder8readDataEmm>
        uint32_t streamNo  = getU16(currentMovieOffset);
 80013ac:	f8d4 9018 	ldr.w	r9, [r4, #24]
 80013b0:	4620      	mov	r0, r4
 80013b2:	4649      	mov	r1, r9
 80013b4:	f7ff ff8d 	bl	80012d2 <_ZN20HardwareMJPEGDecoder6getU16Em>
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 80013b8:	f109 0102 	add.w	r1, r9, #2
        uint32_t streamNo  = getU16(currentMovieOffset);
 80013bc:	4680      	mov	r8, r0
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 80013be:	4620      	mov	r0, r4
 80013c0:	f7ff ff87 	bl	80012d2 <_ZN20HardwareMJPEGDecoder6getU16Em>
        chunkSize = getU32(currentMovieOffset + 4);
 80013c4:	f109 0104 	add.w	r1, r9, #4
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 80013c8:	4605      	mov	r5, r0
        chunkSize = getU32(currentMovieOffset + 4);
 80013ca:	4620      	mov	r0, r4
 80013cc:	f7ff ff6c 	bl	80012a8 <_ZN20HardwareMJPEGDecoder6getU32Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 80013d0:	45b0      	cmp	r8, r6
 80013d2:	d1d1      	bne.n	8001378 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x30>
 80013d4:	42bd      	cmp	r5, r7
 80013d6:	d1cf      	bne.n	8001378 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x30>
            return true;
 80013d8:	2001      	movs	r0, #1
 80013da:	e7d9      	b.n	8001390 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x48>
 80013dc:	080270f5 	.word	0x080270f5
 80013e0:	0802713e 	.word	0x0802713e
 80013e4:	08027047 	.word	0x08027047

080013e8 <_ZN20HardwareMJPEGDecoder9gotoFrameEm>:
    if (frameNumber==0)
 80013e8:	2901      	cmp	r1, #1
    if (frameNumber > getNumberOfFrames())
 80013ea:	6803      	ldr	r3, [r0, #0]
 80013ec:	bf38      	it	cc
 80013ee:	2101      	movcc	r1, #1
 80013f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
{
 80013f2:	b570      	push	{r4, r5, r6, lr}
 80013f4:	460d      	mov	r5, r1
 80013f6:	4604      	mov	r4, r0
    if (frameNumber > getNumberOfFrames())
 80013f8:	4798      	blx	r3
 80013fa:	42a8      	cmp	r0, r5
 80013fc:	d204      	bcs.n	8001408 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x20>
        frameNumber = getNumberOfFrames();
 80013fe:	6823      	ldr	r3, [r4, #0]
 8001400:	4620      	mov	r0, r4
 8001402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001404:	4798      	blx	r3
 8001406:	4605      	mov	r5, r0
    uint32_t offset = indexOffset + 8 + (frameNumber-1)*16;
 8001408:	1e6b      	subs	r3, r5, #1
 800140a:	69e6      	ldr	r6, [r4, #28]
    readData(offset, 16);
 800140c:	2210      	movs	r2, #16
 800140e:	4620      	mov	r0, r4
    uint32_t offset = indexOffset + 8 + (frameNumber-1)*16;
 8001410:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    readData(offset, 16);
 8001414:	f106 0108 	add.w	r1, r6, #8
 8001418:	f7ff ff6a 	bl	80012f0 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
 800141c:	f106 0110 	add.w	r1, r6, #16
 8001420:	4620      	mov	r0, r4
 8001422:	f7ff ff41 	bl	80012a8 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8001426:	6a23      	ldr	r3, [r4, #32]
 8001428:	3b04      	subs	r3, #4
 800142a:	4403      	add	r3, r0
    this->frameNumber = frameNumber;
 800142c:	e9c4 5305 	strd	r5, r3, [r4, #20]
}
 8001430:	bd70      	pop	{r4, r5, r6, pc}
	...

08001434 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>:
    currentMovieOffset = 0;
 8001434:	2100      	movs	r1, #0
    readData(0, 72);
 8001436:	2248      	movs	r2, #72	@ 0x48
{
 8001438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800143c:	4604      	mov	r4, r0
    currentMovieOffset = 0;
 800143e:	6181      	str	r1, [r0, #24]
    lastError = AVI_NO_ERROR;
 8001440:	f880 1040 	strb.w	r1, [r0, #64]	@ 0x40
    readData(0, 72);
 8001444:	f7ff ff54 	bl	80012f0 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (compare(currentMovieOffset, "RIFF", 4))
 8001448:	69a6      	ldr	r6, [r4, #24]
 800144a:	2304      	movs	r3, #4
 800144c:	4a63      	ldr	r2, [pc, #396]	@ (80015dc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a8>)
 800144e:	4631      	mov	r1, r6
 8001450:	4620      	mov	r0, r4
 8001452:	f7ff ff19 	bl	8001288 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8001456:	b148      	cbz	r0, 800146c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x38>
        lastError = AVI_ERROR_NOT_RIFF;
 8001458:	2303      	movs	r3, #3
        assert(!"RIFF header not found");
 800145a:	4a61      	ldr	r2, [pc, #388]	@ (80015e0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 800145c:	f240 1135 	movw	r1, #309	@ 0x135
        lastError = AVI_ERROR_NOT_RIFF;
 8001460:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"RIFF header not found");
 8001464:	4b5f      	ldr	r3, [pc, #380]	@ (80015e4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
        assert(!"AVI header not found");
 8001466:	4860      	ldr	r0, [pc, #384]	@ (80015e8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b4>)
 8001468:	f024 fb20 	bl	8025aac <__assert_func>
    currentMovieOffset += 8;
 800146c:	f106 0108 	add.w	r1, r6, #8
    if (compare(currentMovieOffset, "AVI ", 4))
 8001470:	2304      	movs	r3, #4
 8001472:	4a5e      	ldr	r2, [pc, #376]	@ (80015ec <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b8>)
 8001474:	4620      	mov	r0, r4
    currentMovieOffset += 8;
 8001476:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "AVI ", 4))
 8001478:	f7ff ff06 	bl	8001288 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800147c:	b138      	cbz	r0, 800148e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x5a>
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 800147e:	2304      	movs	r3, #4
        assert(!"AVI header not found");
 8001480:	4a57      	ldr	r2, [pc, #348]	@ (80015e0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 8001482:	f240 113d 	movw	r1, #317	@ 0x13d
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 8001486:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"AVI header not found");
 800148a:	4b59      	ldr	r3, [pc, #356]	@ (80015f0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1bc>)
 800148c:	e7eb      	b.n	8001466 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    currentMovieOffset += 4;
 800148e:	f106 010c 	add.w	r1, r6, #12
    if (compare(currentMovieOffset, "LIST", 4))
 8001492:	2304      	movs	r3, #4
 8001494:	4a57      	ldr	r2, [pc, #348]	@ (80015f4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c0>)
 8001496:	4620      	mov	r0, r4
    currentMovieOffset += 4;
 8001498:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "LIST", 4))
 800149a:	f7ff fef5 	bl	8001288 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800149e:	4607      	mov	r7, r0
 80014a0:	b138      	cbz	r0, 80014b2 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x7e>
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 80014a2:	2305      	movs	r3, #5
        assert(!"AVI LIST not found");
 80014a4:	4a4e      	ldr	r2, [pc, #312]	@ (80015e0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 80014a6:	f44f 71a2 	mov.w	r1, #324	@ 0x144
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 80014aa:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"AVI LIST not found");
 80014ae:	4b52      	ldr	r3, [pc, #328]	@ (80015f8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c4>)
 80014b0:	e7d9      	b.n	8001466 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    const uint32_t aviListSize = getU32(currentMovieOffset + 4);
 80014b2:	f106 0110 	add.w	r1, r6, #16
 80014b6:	4620      	mov	r0, r4
 80014b8:	f7ff fef6 	bl	80012a8 <_ZN20HardwareMJPEGDecoder6getU32Em>
    assert(aviListSize);
 80014bc:	4605      	mov	r5, r0
 80014be:	b920      	cbnz	r0, 80014ca <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x96>
 80014c0:	4b4e      	ldr	r3, [pc, #312]	@ (80015fc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c8>)
 80014c2:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 80014c6:	4a46      	ldr	r2, [pc, #280]	@ (80015e0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 80014c8:	e7cd      	b.n	8001466 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    uint32_t offset =  currentMovieOffset + 8;
 80014ca:	f106 0814 	add.w	r8, r6, #20
    if (compare(offset, "hdrl", 4))
 80014ce:	2304      	movs	r3, #4
 80014d0:	4a4b      	ldr	r2, [pc, #300]	@ (8001600 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1cc>)
 80014d2:	4620      	mov	r0, r4
 80014d4:	4641      	mov	r1, r8
 80014d6:	f7ff fed7 	bl	8001288 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80014da:	2800      	cmp	r0, #0
 80014dc:	d049      	beq.n	8001572 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x13e>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
 80014de:	2306      	movs	r3, #6
 80014e0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    if (compare(offset, "avih", 4))
 80014e4:	2304      	movs	r3, #4
 80014e6:	4a47      	ldr	r2, [pc, #284]	@ (8001604 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d0>)
 80014e8:	f106 0118 	add.w	r1, r6, #24
 80014ec:	4620      	mov	r0, r4
 80014ee:	f7ff fecb 	bl	8001288 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80014f2:	2800      	cmp	r0, #0
 80014f4:	d03f      	beq.n	8001576 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x142>
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
 80014f6:	2307      	movs	r3, #7
 80014f8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    uint32_t listOffset = aviListOffset + aviListSize + 8;
 80014fc:	4445      	add	r5, r8
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 80014fe:	4f42      	ldr	r7, [pc, #264]	@ (8001608 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d4>)
    readData(listOffset, 12);
 8001500:	220c      	movs	r2, #12
 8001502:	4620      	mov	r0, r4
 8001504:	4629      	mov	r1, r5
 8001506:	f7ff fef3 	bl	80012f0 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 800150a:	f105 0608 	add.w	r6, r5, #8
 800150e:	2304      	movs	r3, #4
 8001510:	463a      	mov	r2, r7
 8001512:	4620      	mov	r0, r4
 8001514:	4631      	mov	r1, r6
 8001516:	f7ff feb7 	bl	8001288 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800151a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800151e:	2800      	cmp	r0, #0
 8001520:	d048      	beq.n	80015b4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x180>
 8001522:	2b00      	cmp	r3, #0
 8001524:	d148      	bne.n	80015b8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x184>
 8001526:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001528:	42ab      	cmp	r3, r5
 800152a:	d849      	bhi.n	80015c0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x18c>
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
 800152c:	f105 030c 	add.w	r3, r5, #12
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8001530:	3504      	adds	r5, #4
 8001532:	4620      	mov	r0, r4
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
 8001534:	61a3      	str	r3, [r4, #24]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8001536:	4629      	mov	r1, r5
 8001538:	f7ff feb6 	bl	80012a8 <_ZN20HardwareMJPEGDecoder6getU32Em>
 800153c:	4430      	add	r0, r6
    const uint32_t listSize = getU32(listOffset+4)+8;
 800153e:	4629      	mov	r1, r5
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8001540:	6260      	str	r0, [r4, #36]	@ 0x24
    const uint32_t listSize = getU32(listOffset+4)+8;
 8001542:	4620      	mov	r0, r4
 8001544:	f7ff feb0 	bl	80012a8 <_ZN20HardwareMJPEGDecoder6getU32Em>
    listOffset += listSize;
 8001548:	4406      	add	r6, r0
    readData(listOffset, 4);
 800154a:	2204      	movs	r2, #4
 800154c:	4620      	mov	r0, r4
 800154e:	4631      	mov	r1, r6
 8001550:	f7ff fece 	bl	80012f0 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (!compare(listOffset, "idx1", 4))
 8001554:	2304      	movs	r3, #4
 8001556:	4a2d      	ldr	r2, [pc, #180]	@ (800160c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d8>)
 8001558:	4631      	mov	r1, r6
 800155a:	4620      	mov	r0, r4
 800155c:	f7ff fe94 	bl	8001288 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8001560:	2800      	cmp	r0, #0
 8001562:	d138      	bne.n	80015d6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a2>
    frameNumber = 1; //next frame number is 1
 8001564:	2301      	movs	r3, #1
        indexOffset = listOffset;
 8001566:	61e6      	str	r6, [r4, #28]
    frameNumber = 1; //next frame number is 1
 8001568:	6163      	str	r3, [r4, #20]
    firstFrameOffset = currentMovieOffset;
 800156a:	69a3      	ldr	r3, [r4, #24]
 800156c:	6223      	str	r3, [r4, #32]
}
 800156e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool foundFrame = true;
 8001572:	2701      	movs	r7, #1
 8001574:	e7b6      	b.n	80014e4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xb0>
    if (foundFrame)
 8001576:	2f00      	cmp	r7, #0
 8001578:	d0c0      	beq.n	80014fc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
        videoInfo.ms_between_frames = getU32(offset)/1000;
 800157a:	f106 0120 	add.w	r1, r6, #32
 800157e:	4620      	mov	r0, r4
 8001580:	f7ff fe92 	bl	80012a8 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8001584:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
        videoInfo.number_of_frames = getU32(offset + 16);
 8001588:	f106 0130 	add.w	r1, r6, #48	@ 0x30
        videoInfo.ms_between_frames = getU32(offset)/1000;
 800158c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001590:	6060      	str	r0, [r4, #4]
        videoInfo.number_of_frames = getU32(offset + 16);
 8001592:	4620      	mov	r0, r4
 8001594:	f7ff fe88 	bl	80012a8 <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_width = getU32(offset + 32);
 8001598:	f106 0140 	add.w	r1, r6, #64	@ 0x40
        videoInfo.number_of_frames = getU32(offset + 16);
 800159c:	60a0      	str	r0, [r4, #8]
        videoInfo.frame_width = getU32(offset + 32);
 800159e:	4620      	mov	r0, r4
 80015a0:	f7ff fe82 	bl	80012a8 <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_height = getU32(offset + 36);
 80015a4:	f106 0144 	add.w	r1, r6, #68	@ 0x44
        videoInfo.frame_width = getU32(offset + 32);
 80015a8:	60e0      	str	r0, [r4, #12]
        videoInfo.frame_height = getU32(offset + 36);
 80015aa:	4620      	mov	r0, r4
 80015ac:	f7ff fe7c 	bl	80012a8 <_ZN20HardwareMJPEGDecoder6getU32Em>
 80015b0:	6120      	str	r0, [r4, #16]
 80015b2:	e7a3      	b.n	80014fc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
    if (lastError != AVI_NO_ERROR)
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d0b9      	beq.n	800152c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xf8>
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
 80015b8:	230a      	movs	r3, #10
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 80015ba:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return;
 80015be:	e7d6      	b.n	800156e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x13a>
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 80015c0:	1d29      	adds	r1, r5, #4
 80015c2:	4620      	mov	r0, r4
 80015c4:	f7ff fe70 	bl	80012a8 <_ZN20HardwareMJPEGDecoder6getU32Em>
        listOffset += listSize;
 80015c8:	1985      	adds	r5, r0, r6
        readData(listOffset, 12);
 80015ca:	220c      	movs	r2, #12
 80015cc:	4620      	mov	r0, r4
 80015ce:	4629      	mov	r1, r5
 80015d0:	f7ff fe8e 	bl	80012f0 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 80015d4:	e799      	b.n	800150a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd6>
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 80015d6:	230b      	movs	r3, #11
 80015d8:	e7ef      	b.n	80015ba <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x186>
 80015da:	bf00      	nop
 80015dc:	08027171 	.word	0x08027171
 80015e0:	0802718f 	.word	0x0802718f
 80015e4:	08027176 	.word	0x08027176
 80015e8:	08027047 	.word	0x08027047
 80015ec:	080271bc 	.word	0x080271bc
 80015f0:	080271c1 	.word	0x080271c1
 80015f4:	080271d9 	.word	0x080271d9
 80015f8:	080271de 	.word	0x080271de
 80015fc:	080271f4 	.word	0x080271f4
 8001600:	08027200 	.word	0x08027200
 8001604:	08027205 	.word	0x08027205
 8001608:	0802720a 	.word	0x0802720a
 800160c:	0802720f 	.word	0x0802720f

08001610 <_ZN20HardwareMJPEGDecoder12setVideoDataEPKhm>:
    movieLength = length;
 8001610:	e9c0 210a 	strd	r2, r1, [r0, #40]	@ 0x28
    reader = 0; //not using reader
 8001614:	2200      	movs	r2, #0
 8001616:	6302      	str	r2, [r0, #48]	@ 0x30
    readVideoHeader();
 8001618:	f7ff bf0c 	b.w	8001434 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>

0800161c <_ZN20HardwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:
{
 800161c:	b510      	push	{r4, lr}
    movieData = 0;
 800161e:	2300      	movs	r3, #0
{
 8001620:	4604      	mov	r4, r0
 8001622:	4608      	mov	r0, r1
    movieData = 0;
 8001624:	62e3      	str	r3, [r4, #44]	@ 0x2c
    movieLength = reader.getDataLength();
 8001626:	680b      	ldr	r3, [r1, #0]
    this->reader = &reader;
 8001628:	6321      	str	r1, [r4, #48]	@ 0x30
    movieLength = reader.getDataLength();
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	4798      	blx	r3
 800162e:	62a0      	str	r0, [r4, #40]	@ 0x28
    readVideoHeader();
 8001630:	4620      	mov	r0, r4
}
 8001632:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    readVideoHeader();
 8001636:	f7ff befd 	b.w	8001434 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
	...

0800163c <JPEG_Decode_DMA>:
  * @param  JPEGImageSize_Bytes    : jpg image size in bytes.
  * @param  DestAddress : ARGB8888 destination Frame Buffer Address.
  * @retval None
  */
uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t* input, uint32_t chunkSizeIn /* length */, uint8_t* output)
{
 800163c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    FrameBufferAddress = output;
 800163e:	4c12      	ldr	r4, [pc, #72]	@ (8001688 <JPEG_Decode_DMA+0x4c>)
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
    }

    //Do not return from this function until done with decoding all chunks.
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8001640:	f44f 75c0 	mov.w	r5, #384	@ 0x180
    FrameBufferAddress = output;
 8001644:	6023      	str	r3, [r4, #0]
    Output_Is_Paused = 0;
 8001646:	2400      	movs	r4, #0
 8001648:	4b10      	ldr	r3, [pc, #64]	@ (800168c <JPEG_Decode_DMA+0x50>)
 800164a:	601c      	str	r4, [r3, #0]
    JPEG_OUT_Read_BufferIndex = 0;
 800164c:	4b10      	ldr	r3, [pc, #64]	@ (8001690 <JPEG_Decode_DMA+0x54>)
 800164e:	601c      	str	r4, [r3, #0]
    JPEG_OUT_Write_BufferIndex = 0;
 8001650:	4b10      	ldr	r3, [pc, #64]	@ (8001694 <JPEG_Decode_DMA+0x58>)
 8001652:	601c      	str	r4, [r3, #0]
    JPEG_InputImageIndex = 0;
 8001654:	4b10      	ldr	r3, [pc, #64]	@ (8001698 <JPEG_Decode_DMA+0x5c>)
 8001656:	601c      	str	r4, [r3, #0]
    JPEG_InputImageAddress = (uint32_t)input;
 8001658:	4b10      	ldr	r3, [pc, #64]	@ (800169c <JPEG_Decode_DMA+0x60>)
 800165a:	6019      	str	r1, [r3, #0]
    JPEG_InputImageSize_Bytes = chunkSizeIn;
 800165c:	4b10      	ldr	r3, [pc, #64]	@ (80016a0 <JPEG_Decode_DMA+0x64>)
 800165e:	601a      	str	r2, [r3, #0]
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8001660:	4a10      	ldr	r2, [pc, #64]	@ (80016a4 <JPEG_Decode_DMA+0x68>)
    MCU_BlockIndex = 0;
 8001662:	4b11      	ldr	r3, [pc, #68]	@ (80016a8 <JPEG_Decode_DMA+0x6c>)
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8001664:	68d2      	ldr	r2, [r2, #12]
    MCU_BlockIndex = 0;
 8001666:	601c      	str	r4, [r3, #0]
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8001668:	436a      	muls	r2, r5
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 800166a:	4b10      	ldr	r3, [pc, #64]	@ (80016ac <JPEG_Decode_DMA+0x70>)
 800166c:	701c      	strb	r4, [r3, #0]
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
 800166e:	609c      	str	r4, [r3, #8]
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 8001670:	731c      	strb	r4, [r3, #12]
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
 8001672:	615c      	str	r4, [r3, #20]
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8001674:	9200      	str	r2, [sp, #0]
 8001676:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f008 ff5e 	bl	800a53c <HAL_JPEG_Decode_DMA>

    return 0;
}
 8001680:	4620      	mov	r0, r4
 8001682:	b003      	add	sp, #12
 8001684:	bd30      	pop	{r4, r5, pc}
 8001686:	bf00      	nop
 8001688:	200097f0 	.word	0x200097f0
 800168c:	200097d4 	.word	0x200097d4
 8001690:	200097dc 	.word	0x200097dc
 8001694:	200097d8 	.word	0x200097d8
 8001698:	200097ec 	.word	0x200097ec
 800169c:	200097e4 	.word	0x200097e4
 80016a0:	200097e8 	.word	0x200097e8
 80016a4:	200097ac 	.word	0x200097ac
 80016a8:	200097c4 	.word	0x200097c4
 80016ac:	20000018 	.word	0x20000018

080016b0 <HAL_JPEG_InfoReadyCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param pInfo: JPEG Info Struct pointer
  * @retval None
  */
void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 80016b0:	b508      	push	{r3, lr}
  if(pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
 80016b2:	684b      	ldr	r3, [r1, #4]
{
 80016b4:	4608      	mov	r0, r1
  if(pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d119      	bne.n	80016ee <HAL_JPEG_InfoReadyCallback+0x3e>
  {
    if((pInfo->ImageWidth % 16) != 0)
 80016ba:	68cb      	ldr	r3, [r1, #12]
 80016bc:	071a      	lsls	r2, r3, #28
      pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));

    if((pInfo->ImageHeight % 16) != 0)
      pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));

    HAL_StatusTypeDef status = TGFX_JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
 80016be:	4a1e      	ldr	r2, [pc, #120]	@ (8001738 <HAL_JPEG_InfoReadyCallback+0x88>)
      pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 80016c0:	bf1e      	ittt	ne
 80016c2:	f023 030f 	bicne.w	r3, r3, #15
 80016c6:	3310      	addne	r3, #16
 80016c8:	60cb      	strne	r3, [r1, #12]
    if((pInfo->ImageHeight % 16) != 0)
 80016ca:	688b      	ldr	r3, [r1, #8]
 80016cc:	0719      	lsls	r1, r3, #28
    HAL_StatusTypeDef status = TGFX_JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
 80016ce:	491b      	ldr	r1, [pc, #108]	@ (800173c <HAL_JPEG_InfoReadyCallback+0x8c>)
      pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
 80016d0:	bf1e      	ittt	ne
 80016d2:	f023 030f 	bicne.w	r3, r3, #15
 80016d6:	3310      	addne	r3, #16
 80016d8:	6083      	strne	r3, [r0, #8]
    HAL_StatusTypeDef status = TGFX_JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
 80016da:	f001 fb43 	bl	8002d64 <TGFX_JPEG_GetDecodeColorConvertFunc>
    if(status != HAL_OK)
 80016de:	b348      	cbz	r0, 8001734 <HAL_JPEG_InfoReadyCallback+0x84>
    {
      assert(status == HAL_OK);
 80016e0:	4b17      	ldr	r3, [pc, #92]	@ (8001740 <HAL_JPEG_InfoReadyCallback+0x90>)
 80016e2:	f240 2129 	movw	r1, #553	@ 0x229
 80016e6:	4a17      	ldr	r2, [pc, #92]	@ (8001744 <HAL_JPEG_InfoReadyCallback+0x94>)
    }

    HAL_StatusTypeDef status = JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
    if(status != HAL_OK)
    {
      assert(status == HAL_OK);
 80016e8:	4817      	ldr	r0, [pc, #92]	@ (8001748 <HAL_JPEG_InfoReadyCallback+0x98>)
 80016ea:	f024 f9df 	bl	8025aac <__assert_func>
    if(pInfo->ChromaSubsampling == JPEG_422_SUBSAMPLING)
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d117      	bne.n	8001722 <HAL_JPEG_InfoReadyCallback+0x72>
      if((pInfo->ImageWidth % 16) != 0)
 80016f2:	68cb      	ldr	r3, [r1, #12]
 80016f4:	071a      	lsls	r2, r3, #28
 80016f6:	d003      	beq.n	8001700 <HAL_JPEG_InfoReadyCallback+0x50>
        pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 80016f8:	f023 030f 	bic.w	r3, r3, #15
 80016fc:	3310      	adds	r3, #16
        pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 80016fe:	60c3      	str	r3, [r0, #12]
      if((pInfo->ImageHeight % 8) != 0)
 8001700:	6883      	ldr	r3, [r0, #8]
 8001702:	075a      	lsls	r2, r3, #29
        pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 8001704:	bf1e      	ittt	ne
 8001706:	f023 0307 	bicne.w	r3, r3, #7
 800170a:	3308      	addne	r3, #8
 800170c:	6083      	strne	r3, [r0, #8]
    HAL_StatusTypeDef status = JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
 800170e:	4a0a      	ldr	r2, [pc, #40]	@ (8001738 <HAL_JPEG_InfoReadyCallback+0x88>)
 8001710:	490a      	ldr	r1, [pc, #40]	@ (800173c <HAL_JPEG_InfoReadyCallback+0x8c>)
 8001712:	f00e f85d 	bl	800f7d0 <JPEG_GetDecodeColorConvertFunc>
    if(status != HAL_OK)
 8001716:	b168      	cbz	r0, 8001734 <HAL_JPEG_InfoReadyCallback+0x84>
      assert(status == HAL_OK);
 8001718:	4b09      	ldr	r3, [pc, #36]	@ (8001740 <HAL_JPEG_InfoReadyCallback+0x90>)
 800171a:	f240 2143 	movw	r1, #579	@ 0x243
 800171e:	4a09      	ldr	r2, [pc, #36]	@ (8001744 <HAL_JPEG_InfoReadyCallback+0x94>)
 8001720:	e7e2      	b.n	80016e8 <HAL_JPEG_InfoReadyCallback+0x38>
    if(pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1f3      	bne.n	800170e <HAL_JPEG_InfoReadyCallback+0x5e>
      if((pInfo->ImageWidth % 8) != 0)
 8001726:	68cb      	ldr	r3, [r1, #12]
 8001728:	0759      	lsls	r1, r3, #29
 800172a:	d0e9      	beq.n	8001700 <HAL_JPEG_InfoReadyCallback+0x50>
        pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 800172c:	f023 0307 	bic.w	r3, r3, #7
 8001730:	3308      	adds	r3, #8
 8001732:	e7e4      	b.n	80016fe <HAL_JPEG_InfoReadyCallback+0x4e>
    }
  }
}
 8001734:	bd08      	pop	{r3, pc}
 8001736:	bf00      	nop
 8001738:	200097cc 	.word	0x200097cc
 800173c:	200097c8 	.word	0x200097c8
 8001740:	08027214 	.word	0x08027214
 8001744:	08027225 	.word	0x08027225
 8001748:	08027047 	.word	0x08027047

0800174c <HAL_JPEG_GetDataCallback>:
  * @retval None
  */
void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData)
{
  //Input buffer has been consumed by the peripheral and to ask for a new data chunk if the operation (encoding/decoding) has not been complete yet.
  JPEG_InputImageIndex += NbDecodedData;
 800174c:	4a0b      	ldr	r2, [pc, #44]	@ (800177c <HAL_JPEG_GetDataCallback+0x30>)
 800174e:	6813      	ldr	r3, [r2, #0]
 8001750:	440b      	add	r3, r1
{
 8001752:	b430      	push	{r4, r5}
  JPEG_InputImageIndex += NbDecodedData;
 8001754:	6013      	str	r3, [r2, #0]
  if(JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
 8001756:	4a0a      	ldr	r2, [pc, #40]	@ (8001780 <HAL_JPEG_GetDataCallback+0x34>)
 8001758:	6812      	ldr	r2, [r2, #0]
 800175a:	4293      	cmp	r3, r2
 800175c:	d20c      	bcs.n	8001778 <HAL_JPEG_GetDataCallback+0x2c>
  {
    JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 800175e:	4c09      	ldr	r4, [pc, #36]	@ (8001784 <HAL_JPEG_GetDataCallback+0x38>)
    uint32_t inDataLength = JPEG_InputImageSize_Bytes - JPEG_InputImageIndex;
 8001760:	1ad2      	subs	r2, r2, r3
    JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8001762:	6825      	ldr	r5, [r4, #0]
    HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 8001764:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
    JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8001768:	4429      	add	r1, r5
    HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 800176a:	bf28      	it	cs
 800176c:	f44f 3280 	movcs.w	r2, #65536	@ 0x10000
    JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8001770:	6021      	str	r1, [r4, #0]
  }
}
 8001772:	bc30      	pop	{r4, r5}
    HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 8001774:	f008 bf49 	b.w	800a60a <HAL_JPEG_ConfigInputBuffer>
}
 8001778:	bc30      	pop	{r4, r5}
 800177a:	4770      	bx	lr
 800177c:	200097ec 	.word	0x200097ec
 8001780:	200097e8 	.word	0x200097e8
 8001784:	200097e4 	.word	0x200097e4

08001788 <HAL_JPEG_DataReadyCallback>:
  * @param pDataOut: pointer to the output data buffer
  * @param OutDataLength: length of output buffer in bytes
  * @retval None
  */
void HAL_JPEG_DataReadyCallback (JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength)
{
 8001788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 800178a:	4e17      	ldr	r6, [pc, #92]	@ (80017e8 <HAL_JPEG_DataReadyCallback+0x60>)
 800178c:	f04f 0c0c 	mov.w	ip, #12
 8001790:	4c16      	ldr	r4, [pc, #88]	@ (80017ec <HAL_JPEG_DataReadyCallback+0x64>)
 8001792:	2701      	movs	r7, #1
 8001794:	6831      	ldr	r1, [r6, #0]
{
 8001796:	4605      	mov	r5, r0
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;

    JPEG_OUT_Write_BufferIndex++;
 8001798:	1c4b      	adds	r3, r1, #1
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 800179a:	fb0c f101 	mul.w	r1, ip, r1
 800179e:	2b02      	cmp	r3, #2
 80017a0:	eb04 0e01 	add.w	lr, r4, r1
 80017a4:	5467      	strb	r7, [r4, r1]
 80017a6:	bf28      	it	cs
 80017a8:	2300      	movcs	r3, #0
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
 80017aa:	f8ce 2008 	str.w	r2, [lr, #8]
    JPEG_OUT_Write_BufferIndex++;
 80017ae:	6033      	str	r3, [r6, #0]
    {
      JPEG_OUT_Write_BufferIndex = 0;
    }

    //if the other buffer is full, then ui thread might be converting it
    if(Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
 80017b0:	fb0c f303 	mul.w	r3, ip, r3
 80017b4:	5ce3      	ldrb	r3, [r4, r3]
 80017b6:	b123      	cbz	r3, 80017c2 <HAL_JPEG_DataReadyCallback+0x3a>
    {
      HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 80017b8:	2102      	movs	r1, #2
 80017ba:	f008 fef3 	bl	800a5a4 <HAL_JPEG_Pause>
      Output_Is_Paused = 1;
 80017be:	4b0c      	ldr	r3, [pc, #48]	@ (80017f0 <HAL_JPEG_DataReadyCallback+0x68>)
 80017c0:	601f      	str	r7, [r3, #0]
    }
    HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 80017c2:	6832      	ldr	r2, [r6, #0]
 80017c4:	210c      	movs	r1, #12
 80017c6:	4b0b      	ldr	r3, [pc, #44]	@ (80017f4 <HAL_JPEG_DataReadyCallback+0x6c>)
 80017c8:	4628      	mov	r0, r5
 80017ca:	fb01 4402 	mla	r4, r1, r2, r4
 80017ce:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	6861      	ldr	r1, [r4, #4]
 80017d6:	435a      	muls	r2, r3
 80017d8:	f008 ff1a 	bl	800a610 <HAL_JPEG_ConfigOutputBuffer>

    // Signal Hardware Decoding to wake up
    SEM_POST(semDecodingDone);
 80017dc:	4b06      	ldr	r3, [pc, #24]	@ (80017f8 <HAL_JPEG_DataReadyCallback+0x70>)
 80017de:	6818      	ldr	r0, [r3, #0]
}
 80017e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    SEM_POST(semDecodingDone);
 80017e4:	f00b bc00 	b.w	800cfe8 <osSemaphoreRelease>
 80017e8:	200097d8 	.word	0x200097d8
 80017ec:	20000018 	.word	0x20000018
 80017f0:	200097d4 	.word	0x200097d4
 80017f4:	200097ac 	.word	0x200097ac
 80017f8:	200097c0 	.word	0x200097c0

080017fc <HAL_JPEG_ErrorCallback>:
  __ASM volatile ("cpsid i" : : : "memory");
 80017fc:	b672      	cpsid	i
  * @retval None
  */
void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef *hjpeg)
{
  __disable_irq();
  while (1)
 80017fe:	e7fe      	b.n	80017fe <HAL_JPEG_ErrorCallback+0x2>

08001800 <HAL_JPEG_DecodeCpltCallback>:
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
  Jpeg_HWDecodingEnd = 1;
 8001800:	4b01      	ldr	r3, [pc, #4]	@ (8001808 <HAL_JPEG_DecodeCpltCallback+0x8>)
 8001802:	2201      	movs	r2, #1
 8001804:	601a      	str	r2, [r3, #0]
}
 8001806:	4770      	bx	lr
 8001808:	200097e0 	.word	0x200097e0

0800180c <JPEG_OutputHandler>:
  * @brief  JPEG Ouput Data BackGround Postprocessing .
  * @param hjpeg: JPEG handle pointer
  * @retval 1 : if JPEG processing has finished, 0 : if JPEG processing still ongoing
  */
uint32_t JPEG_OutputHandler(JPEG_HandleTypeDef *hjpeg)
{
 800180c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  uint32_t ConvertedDataCount;

  if(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL)
 8001810:	4d38      	ldr	r5, [pc, #224]	@ (80018f4 <JPEG_OutputHandler+0xe8>)
 8001812:	260c      	movs	r6, #12
 8001814:	4c38      	ldr	r4, [pc, #224]	@ (80018f8 <JPEG_OutputHandler+0xec>)
 8001816:	682b      	ldr	r3, [r5, #0]
 8001818:	4373      	muls	r3, r6
 800181a:	5ce3      	ldrb	r3, [r4, r3]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d149      	bne.n	80018b4 <JPEG_OutputHandler+0xa8>
  {
    /* Invalidate DCache prior to YCbCr/RGB software conversion. */
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8001820:	4a36      	ldr	r2, [pc, #216]	@ (80018fc <JPEG_OutputHandler+0xf0>)
 8001822:	6953      	ldr	r3, [r2, #20]
 8001824:	03db      	lsls	r3, r3, #15
 8001826:	d51e      	bpl.n	8001866 <JPEG_OutputHandler+0x5a>
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001828:	2300      	movs	r3, #0
 800182a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800182e:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8001832:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001836:	f643 76e0 	movw	r6, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800183a:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800183e:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8001842:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001844:	ea03 0c06 	and.w	ip, r3, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001848:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800184a:	ea4c 7781 	orr.w	r7, ip, r1, lsl #30
      } while (ways-- != 0U);
 800184e:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001850:	f8c2 7274 	str.w	r7, [r2, #628]	@ 0x274
      } while (ways-- != 0U);
 8001854:	d2f9      	bcs.n	800184a <JPEG_OutputHandler+0x3e>
    } while(sets-- != 0U);
 8001856:	3b20      	subs	r3, #32
 8001858:	f113 0f20 	cmn.w	r3, #32
 800185c:	d1f2      	bne.n	8001844 <JPEG_OutputHandler+0x38>
 800185e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001862:	f3bf 8f6f 	isb	sy
    {
      SCB_CleanInvalidateDCache();
    }

    MCU_BlockIndex += pConvert_Function(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBuffer, FrameBufferAddress, MCU_BlockIndex, Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBufferSize, &ConvertedDataCount);
 8001866:	270c      	movs	r7, #12
 8001868:	4e25      	ldr	r6, [pc, #148]	@ (8001900 <JPEG_OutputHandler+0xf4>)
 800186a:	6828      	ldr	r0, [r5, #0]
 800186c:	eb0d 0307 	add.w	r3, sp, r7
 8001870:	6832      	ldr	r2, [r6, #0]
 8001872:	fb07 4000 	mla	r0, r7, r0, r4
 8001876:	4923      	ldr	r1, [pc, #140]	@ (8001904 <JPEG_OutputHandler+0xf8>)
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	4b23      	ldr	r3, [pc, #140]	@ (8001908 <JPEG_OutputHandler+0xfc>)
 800187c:	6809      	ldr	r1, [r1, #0]
 800187e:	f8d3 8000 	ldr.w	r8, [r3]
 8001882:	6883      	ldr	r3, [r0, #8]
 8001884:	6840      	ldr	r0, [r0, #4]
 8001886:	47c0      	blx	r8
 8001888:	6833      	ldr	r3, [r6, #0]

    Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State = JPEG_BUFFER_EMPTY;
 800188a:	2100      	movs	r1, #0
    MCU_BlockIndex += pConvert_Function(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBuffer, FrameBufferAddress, MCU_BlockIndex, Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBufferSize, &ConvertedDataCount);
 800188c:	4403      	add	r3, r0
 800188e:	6033      	str	r3, [r6, #0]
    Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State = JPEG_BUFFER_EMPTY;
 8001890:	682b      	ldr	r3, [r5, #0]
    Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBufferSize = 0;

    JPEG_OUT_Read_BufferIndex++;
 8001892:	1c5a      	adds	r2, r3, #1
    Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State = JPEG_BUFFER_EMPTY;
 8001894:	437b      	muls	r3, r7
 8001896:	2a02      	cmp	r2, #2
 8001898:	eb04 0003 	add.w	r0, r4, r3
 800189c:	54e1      	strb	r1, [r4, r3]
 800189e:	bf28      	it	cs
 80018a0:	2200      	movcs	r2, #0
    if(JPEG_OUT_Read_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
    {
      JPEG_OUT_Read_BufferIndex = 0;
    }

    if(MCU_BlockIndex == MCU_TotalNb)
 80018a2:	4b1a      	ldr	r3, [pc, #104]	@ (800190c <JPEG_OutputHandler+0x100>)
    Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBufferSize = 0;
 80018a4:	6081      	str	r1, [r0, #8]
    if(MCU_BlockIndex == MCU_TotalNb)
 80018a6:	681b      	ldr	r3, [r3, #0]
    JPEG_OUT_Read_BufferIndex++;
 80018a8:	602a      	str	r2, [r5, #0]
    if(MCU_BlockIndex == MCU_TotalNb)
 80018aa:	6832      	ldr	r2, [r6, #0]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d10f      	bne.n	80018d0 <JPEG_OutputHandler+0xc4>
    {
      return 1;
 80018b0:	2001      	movs	r0, #1
 80018b2:	e018      	b.n	80018e6 <JPEG_OutputHandler+0xda>
    }
  }
  else if((Output_Is_Paused == 1) && \
 80018b4:	4916      	ldr	r1, [pc, #88]	@ (8001910 <JPEG_OutputHandler+0x104>)
 80018b6:	680a      	ldr	r2, [r1, #0]
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
 80018b8:	2a01      	cmp	r2, #1
 80018ba:	d117      	bne.n	80018ec <JPEG_OutputHandler+0xe0>
 80018bc:	4a15      	ldr	r2, [pc, #84]	@ (8001914 <JPEG_OutputHandler+0x108>)
 80018be:	6812      	ldr	r2, [r2, #0]
 80018c0:	4372      	muls	r2, r6
  else if((Output_Is_Paused == 1) && \
 80018c2:	5ca2      	ldrb	r2, [r4, r2]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	d111      	bne.n	80018ec <JPEG_OutputHandler+0xe0>
          (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_EMPTY))
  {
    Output_Is_Paused = 0;
 80018c8:	600b      	str	r3, [r1, #0]
    HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 80018ca:	2102      	movs	r1, #2
 80018cc:	f009 f8d8 	bl	800aa80 <HAL_JPEG_Resume>
  else
  {
    return 2;
  }

  if((MCU_BlockIndex == MCU_TotalNb) && (Jpeg_HWDecodingEnd))// decode completed
 80018d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001900 <JPEG_OutputHandler+0xf4>)
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	4b0d      	ldr	r3, [pc, #52]	@ (800190c <JPEG_OutputHandler+0x100>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d109      	bne.n	80018f0 <JPEG_OutputHandler+0xe4>
 80018dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001918 <JPEG_OutputHandler+0x10c>)
 80018de:	6818      	ldr	r0, [r3, #0]
 80018e0:	3800      	subs	r0, #0
 80018e2:	bf18      	it	ne
 80018e4:	2001      	movne	r0, #1
  {
    return 1;
  }

  return 0;
}
 80018e6:	b004      	add	sp, #16
 80018e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return 2;
 80018ec:	2002      	movs	r0, #2
 80018ee:	e7fa      	b.n	80018e6 <JPEG_OutputHandler+0xda>
  return 0;
 80018f0:	2000      	movs	r0, #0
 80018f2:	e7f8      	b.n	80018e6 <JPEG_OutputHandler+0xda>
 80018f4:	200097dc 	.word	0x200097dc
 80018f8:	20000018 	.word	0x20000018
 80018fc:	e000ed00 	.word	0xe000ed00
 8001900:	200097c4 	.word	0x200097c4
 8001904:	200097f0 	.word	0x200097f0
 8001908:	200097c8 	.word	0x200097c8
 800190c:	200097cc 	.word	0x200097cc
 8001910:	200097d4 	.word	0x200097d4
 8001914:	200097d8 	.word	0x200097d8
 8001918:	200097e0 	.word	0x200097e0

0800191c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>:
{
 800191c:	b570      	push	{r4, r5, r6, lr}
    if (length == 0)
 800191e:	b35a      	cbz	r2, 8001978 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x5c>
    if (outputBuffer) //only decode if buffers are assigned.
 8001920:	b353      	cbz	r3, 8001978 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x5c>
      JPEG_ConvertorParams.bytes_pr_pixel = 2;
 8001922:	4d16      	ldr	r5, [pc, #88]	@ (800197c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x60>)
 8001924:	2402      	movs	r4, #2
 8001926:	612c      	str	r4, [r5, #16]
      JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 8001928:	68c4      	ldr	r4, [r0, #12]
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 800192a:	6900      	ldr	r0, [r0, #16]
      if((JPEG_ConvertorParams.WidthExtend % 16) != 0)
 800192c:	0726      	lsls	r6, r4, #28
      JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 800192e:	f44f 66c8 	mov.w	r6, #1600	@ 0x640
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 8001932:	f000 000f 	and.w	r0, r0, #15
          JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 8001936:	bf18      	it	ne
 8001938:	f024 040f 	bicne.w	r4, r4, #15
      JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 800193c:	606e      	str	r6, [r5, #4]
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 800193e:	f1c0 0010 	rsb	r0, r0, #16
          JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 8001942:	bf18      	it	ne
 8001944:	3410      	addne	r4, #16
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 8001946:	60a8      	str	r0, [r5, #8]
      JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 8001948:	602c      	str	r4, [r5, #0]
      JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
 800194a:	0924      	lsrs	r4, r4, #4
      JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, outputBuffer);
 800194c:	480c      	ldr	r0, [pc, #48]	@ (8001980 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x64>)
      JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
 800194e:	60ec      	str	r4, [r5, #12]
      JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, outputBuffer);
 8001950:	f7ff fe74 	bl	800163c <JPEG_Decode_DMA>
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8001954:	4d0a      	ldr	r5, [pc, #40]	@ (8001980 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x64>)
 8001956:	4c0b      	ldr	r4, [pc, #44]	@ (8001984 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x68>)
 8001958:	4628      	mov	r0, r5
 800195a:	f7ff ff57 	bl	800180c <JPEG_OutputHandler>
 800195e:	6020      	str	r0, [r4, #0]
        if (JpegProcessing_End == 2)
 8001960:	6823      	ldr	r3, [r4, #0]
 8001962:	2b02      	cmp	r3, #2
 8001964:	d105      	bne.n	8001972 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x56>
          SEM_WAIT(semDecodingDone);
 8001966:	4b08      	ldr	r3, [pc, #32]	@ (8001988 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x6c>)
 8001968:	f04f 31ff 	mov.w	r1, #4294967295
 800196c:	6818      	ldr	r0, [r3, #0]
 800196e:	f00b faff 	bl	800cf70 <osSemaphoreAcquire>
      while(JpegProcessing_End != 1);
 8001972:	6823      	ldr	r3, [r4, #0]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d1ef      	bne.n	8001958 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x3c>
}
 8001978:	bd70      	pop	{r4, r5, r6, pc}
 800197a:	bf00      	nop
 800197c:	200097ac 	.word	0x200097ac
 8001980:	200121f4 	.word	0x200121f4
 8001984:	200097d0 	.word	0x200097d0
 8001988:	200097c0 	.word	0x200097c0

0800198c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm>:
{
 800198c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001990:	4699      	mov	r9, r3
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8001992:	6943      	ldr	r3, [r0, #20]
{
 8001994:	b085      	sub	sp, #20
 8001996:	4604      	mov	r4, r0
 8001998:	460f      	mov	r7, r1
 800199a:	4690      	mov	r8, r2
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 800199c:	b92b      	cbnz	r3, 80019aa <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x1e>
 800199e:	4b29      	ldr	r3, [pc, #164]	@ (8001a44 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb8>)
 80019a0:	21b9      	movs	r1, #185	@ 0xb9
 80019a2:	4a29      	ldr	r2, [pc, #164]	@ (8001a48 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xbc>)
 80019a4:	4829      	ldr	r0, [pc, #164]	@ (8001a4c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xc0>)
 80019a6:	f024 f881 	bl	8025aac <__assert_func>
    readData(currentMovieOffset, 8);
 80019aa:	2208      	movs	r2, #8
 80019ac:	6981      	ldr	r1, [r0, #24]
 80019ae:	f7ff fc9f 	bl	80012f0 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t streamNo  = getU16(currentMovieOffset);
 80019b2:	69a6      	ldr	r6, [r4, #24]
 80019b4:	4620      	mov	r0, r4
 80019b6:	4631      	mov	r1, r6
 80019b8:	f7ff fc8b 	bl	80012d2 <_ZN20HardwareMJPEGDecoder6getU16Em>
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 80019bc:	1cb1      	adds	r1, r6, #2
    uint32_t streamNo  = getU16(currentMovieOffset);
 80019be:	4683      	mov	fp, r0
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 80019c0:	4620      	mov	r0, r4
 80019c2:	f7ff fc86 	bl	80012d2 <_ZN20HardwareMJPEGDecoder6getU16Em>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80019c6:	1d31      	adds	r1, r6, #4
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 80019c8:	4682      	mov	sl, r0
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80019ca:	4620      	mov	r0, r4
 80019cc:	f7ff fc6c 	bl	80012a8 <_ZN20HardwareMJPEGDecoder6getU32Em>
 80019d0:	f106 0108 	add.w	r1, r6, #8
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 80019d4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80019d6:	4605      	mov	r5, r0
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 80019d8:	1842      	adds	r2, r0, r1
 80019da:	429a      	cmp	r2, r3
 80019dc:	d226      	bcs.n	8001a2c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xa0>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 80019de:	f243 0330 	movw	r3, #12336	@ 0x3030
 80019e2:	459b      	cmp	fp, r3
 80019e4:	d117      	bne.n	8001a16 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 80019e6:	f246 3364 	movw	r3, #25444	@ 0x6364
 80019ea:	459a      	cmp	sl, r3
 80019ec:	d113      	bne.n	8001a16 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 80019ee:	b190      	cbz	r0, 8001a16 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 80019f0:	4602      	mov	r2, r0
            currentMovieOffset += 8;
 80019f2:	61a1      	str	r1, [r4, #24]
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 80019f4:	4620      	mov	r0, r4
 80019f6:	f7ff fc7b 	bl	80012f0 <_ZN20HardwareMJPEGDecoder8readDataEmm>
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 80019fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 80019fc:	4601      	mov	r1, r0
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 80019fe:	462a      	mov	r2, r5
 8001a00:	4620      	mov	r0, r4
 8001a02:	f8cd 8000 	str.w	r8, [sp]
 8001a06:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8001a0a:	463b      	mov	r3, r7
 8001a0c:	f7ff ff86 	bl	800191c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>
            frameNumber++;
 8001a10:	6963      	ldr	r3, [r4, #20]
 8001a12:	3301      	adds	r3, #1
 8001a14:	6163      	str	r3, [r4, #20]
        currentMovieOffset += chunkSize;
 8001a16:	69a3      	ldr	r3, [r4, #24]
 8001a18:	442b      	add	r3, r5
        if (chunkSize == 0) // Empty frame - Skip
 8001a1a:	b905      	cbnz	r5, 8001a1e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x92>
          currentMovieOffset += 8;
 8001a1c:	3308      	adds	r3, #8
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8001a1e:	3301      	adds	r3, #1
        if (currentMovieOffset == lastFrameEnd)
 8001a20:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8001a22:	f023 0301 	bic.w	r3, r3, #1
        if (currentMovieOffset == lastFrameEnd)
 8001a26:	4293      	cmp	r3, r2
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8001a28:	61a3      	str	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 8001a2a:	d109      	bne.n	8001a40 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb4>
        frameNumber = 1;
 8001a2c:	2301      	movs	r3, #1
            isCurrentFrameLast = true;
 8001a2e:	2001      	movs	r0, #1
        frameNumber = 1;
 8001a30:	6163      	str	r3, [r4, #20]
        currentMovieOffset = firstFrameOffset; //start over
 8001a32:	6a23      	ldr	r3, [r4, #32]
 8001a34:	61a3      	str	r3, [r4, #24]
}
 8001a36:	f080 0001 	eor.w	r0, r0, #1
 8001a3a:	b005      	add	sp, #20
 8001a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        isCurrentFrameLast = false;
 8001a40:	2000      	movs	r0, #0
 8001a42:	e7f8      	b.n	8001a36 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xaa>
 8001a44:	080270f5 	.word	0x080270f5
 8001a48:	0802726d 	.word	0x0802726d
 8001a4c:	08027047 	.word	0x08027047

08001a50 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:
{
 8001a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a52:	4604      	mov	r4, r0
    readData(currentMovieOffset, 8);
 8001a54:	6981      	ldr	r1, [r0, #24]
{
 8001a56:	4616      	mov	r6, r2
    readData(currentMovieOffset, 8);
 8001a58:	2208      	movs	r2, #8
 8001a5a:	f7ff fc49 	bl	80012f0 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    const uint32_t length = getU32(currentMovieOffset + 4);
 8001a5e:	69a7      	ldr	r7, [r4, #24]
 8001a60:	4620      	mov	r0, r4
 8001a62:	1d39      	adds	r1, r7, #4
 8001a64:	f7ff fc20 	bl	80012a8 <_ZN20HardwareMJPEGDecoder6getU32Em>
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8001a68:	f107 0108 	add.w	r1, r7, #8
 8001a6c:	4602      	mov	r2, r0
    const uint32_t length = getU32(currentMovieOffset + 4);
 8001a6e:	4605      	mov	r5, r0
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8001a70:	4620      	mov	r0, r4
 8001a72:	f7ff fc3d 	bl	80012f0 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 8001a76:	4601      	mov	r1, r0
    if (frameBuffer) //only decode if buffers are assigned.
 8001a78:	b16e      	cbz	r6, 8001a96 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x46>
      JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 8001a7a:	462a      	mov	r2, r5
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8001a7c:	4c07      	ldr	r4, [pc, #28]	@ (8001a9c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x4c>)
 8001a7e:	4d08      	ldr	r5, [pc, #32]	@ (8001aa0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
      JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 8001a80:	4633      	mov	r3, r6
 8001a82:	4807      	ldr	r0, [pc, #28]	@ (8001aa0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
 8001a84:	f7ff fdda 	bl	800163c <JPEG_Decode_DMA>
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8001a88:	4628      	mov	r0, r5
 8001a8a:	f7ff febf 	bl	800180c <JPEG_OutputHandler>
 8001a8e:	6020      	str	r0, [r4, #0]
      while(JpegProcessing_End == 0);
 8001a90:	6823      	ldr	r3, [r4, #0]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d0f8      	beq.n	8001a88 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x38>
}
 8001a96:	2001      	movs	r0, #1
 8001a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	200097d0 	.word	0x200097d0
 8001aa0:	200121f4 	.word	0x200121f4

08001aa4 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	2200      	movs	r2, #0
{
 8001aa8:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001aaa:	4608      	mov	r0, r1
 8001aac:	f00b fa08 	bl	800cec0 <osSemaphoreNew>
 8001ab0:	4b0a      	ldr	r3, [pc, #40]	@ (8001adc <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8001ab2:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8001ab4:	b928      	cbnz	r0, 8001ac2 <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8001ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae0 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8001ab8:	2128      	movs	r1, #40	@ 0x28
 8001aba:	4a0a      	ldr	r2, [pc, #40]	@ (8001ae4 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001abc:	480a      	ldr	r0, [pc, #40]	@ (8001ae8 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8001abe:	f023 fff5 	bl	8025aac <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	2104      	movs	r1, #4
 8001ac6:	2001      	movs	r0, #1
 8001ac8:	f00b fac4 	bl	800d054 <osMessageQueueNew>
 8001acc:	4b07      	ldr	r3, [pc, #28]	@ (8001aec <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8001ace:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001ad0:	b918      	cbnz	r0, 8001ada <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 8001ad2:	4b07      	ldr	r3, [pc, #28]	@ (8001af0 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8001ad4:	212c      	movs	r1, #44	@ 0x2c
 8001ad6:	4a03      	ldr	r2, [pc, #12]	@ (8001ae4 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8001ad8:	e7f0      	b.n	8001abc <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 8001ada:	bd08      	pop	{r3, pc}
 8001adc:	200097f8 	.word	0x200097f8
 8001ae0:	0802730c 	.word	0x0802730c
 8001ae4:	08027355 	.word	0x08027355
 8001ae8:	08027384 	.word	0x08027384
 8001aec:	200097f4 	.word	0x200097f4
 8001af0:	080273d3 	.word	0x080273d3

08001af4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8001af4:	4b02      	ldr	r3, [pc, #8]	@ (8001b00 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 8001af6:	f04f 31ff 	mov.w	r1, #4294967295
 8001afa:	6818      	ldr	r0, [r3, #0]
 8001afc:	f00b ba38 	b.w	800cf70 <osSemaphoreAcquire>
 8001b00:	200097f8 	.word	0x200097f8

08001b04 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8001b04:	4b01      	ldr	r3, [pc, #4]	@ (8001b0c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8001b06:	6818      	ldr	r0, [r3, #0]
 8001b08:	f00b ba6e 	b.w	800cfe8 <osSemaphoreRelease>
 8001b0c:	200097f8 	.word	0x200097f8

08001b10 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8001b10:	4b02      	ldr	r3, [pc, #8]	@ (8001b1c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8001b12:	2100      	movs	r1, #0
 8001b14:	6818      	ldr	r0, [r3, #0]
 8001b16:	f00b ba2b 	b.w	800cf70 <osSemaphoreAcquire>
 8001b1a:	bf00      	nop
 8001b1c:	200097f8 	.word	0x200097f8

08001b20 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 * from ISR.
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
 8001b20:	f7ff bff0 	b.w	8001b04 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08001b24 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8001b24:	2300      	movs	r3, #0
 8001b26:	4803      	ldr	r0, [pc, #12]	@ (8001b34 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8001b28:	4903      	ldr	r1, [pc, #12]	@ (8001b38 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	6800      	ldr	r0, [r0, #0]
 8001b2e:	f00b bad7 	b.w	800d0e0 <osMessageQueuePut>
 8001b32:	bf00      	nop
 8001b34:	200097f4 	.word	0x200097f4
 8001b38:	20000030 	.word	0x20000030

08001b3c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8001b3c:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8001b3e:	2300      	movs	r3, #0
 8001b40:	4c07      	ldr	r4, [pc, #28]	@ (8001b60 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8001b42:	a901      	add	r1, sp, #4
 8001b44:	461a      	mov	r2, r3
 8001b46:	6820      	ldr	r0, [r4, #0]
 8001b48:	f00b fb0c 	bl	800d164 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8001b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b50:	2200      	movs	r2, #0
 8001b52:	a901      	add	r1, sp, #4
 8001b54:	6820      	ldr	r0, [r4, #0]
 8001b56:	f00b fb05 	bl	800d164 <osMessageQueueGet>
}
 8001b5a:	b002      	add	sp, #8
 8001b5c:	bd10      	pop	{r4, pc}
 8001b5e:	bf00      	nop
 8001b60:	200097f4 	.word	0x200097f4

08001b64 <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 8001b64:	6803      	ldr	r3, [r0, #0]
 8001b66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b68:	4718      	bx	r3

08001b6a <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8001b6a:	2001      	movs	r0, #1
 8001b6c:	4770      	bx	lr

08001b6e <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 8001b6e:	6803      	ldr	r3, [r0, #0]
 8001b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b72:	4718      	bx	r3

08001b74 <_ZN8STM32DMA10initializeEv>:
}

void STM32DMA::initialize()
{
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001b74:	4b0d      	ldr	r3, [pc, #52]	@ (8001bac <_ZN8STM32DMA10initializeEv+0x38>)
{
 8001b76:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001b78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b7a:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001b7e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b82:	f402 0200 	and.w	r2, r2, #8388608	@ 0x800000
 8001b86:	9201      	str	r2, [sp, #4]
 8001b88:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8001b8a:	691a      	ldr	r2, [r3, #16]
 8001b8c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001b90:	611a      	str	r2, [r3, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8001b92:	691a      	ldr	r2, [r3, #16]
 8001b94:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 8001b98:	611a      	str	r2, [r3, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8001b9a:	4b05      	ldr	r3, [pc, #20]	@ (8001bb0 <_ZN8STM32DMA10initializeEv+0x3c>)
 8001b9c:	4a05      	ldr	r2, [pc, #20]	@ (8001bb4 <_ZN8STM32DMA10initializeEv+0x40>)
 8001b9e:	619a      	str	r2, [r3, #24]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ba0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001ba4:	4b04      	ldr	r3, [pc, #16]	@ (8001bb8 <_ZN8STM32DMA10initializeEv+0x44>)
 8001ba6:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
 8001ba8:	b002      	add	sp, #8
 8001baa:	4770      	bx	lr
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	20012310 	.word	0x20012310
 8001bb4:	08001e45 	.word	0x08001e45
 8001bb8:	e000e100 	.word	0xe000e100

08001bbc <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8001bbc:	f240 30ef 	movw	r0, #1007	@ 0x3ef
 8001bc0:	4770      	bx	lr
	...

08001bc4 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8001bc4:	4b05      	ldr	r3, [pc, #20]	@ (8001bdc <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bc6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001bca:	6003      	str	r3, [r0, #0]
 8001bcc:	4b04      	ldr	r3, [pc, #16]	@ (8001be0 <_ZN8STM32DMAD1Ev+0x1c>)
 8001bce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8001bd2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001bd6:	f3bf 8f6f 	isb	sy
}
 8001bda:	4770      	bx	lr
 8001bdc:	08027574 	.word	0x08027574
 8001be0:	e000e100 	.word	0xe000e100

08001be4 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8001be4:	b510      	push	{r4, lr}
 8001be6:	4604      	mov	r4, r0
}
 8001be8:	f44f 615a 	mov.w	r1, #3488	@ 0xda0
 8001bec:	f7ff ffea 	bl	8001bc4 <_ZN8STM32DMAD1Ev>
 8001bf0:	4620      	mov	r0, r4
 8001bf2:	f023 ff2c 	bl	8025a4e <_ZdlPvj>
 8001bf6:	4620      	mov	r0, r4
 8001bf8:	bd10      	pop	{r4, pc}
	...

08001bfc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
 8001bfc:	b508      	push	{r3, lr}
    switch (format)
 8001bfe:	280a      	cmp	r0, #10
 8001c00:	d809      	bhi.n	8001c16 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1a>
 8001c02:	e8df f000 	tbb	[pc, r0]
 8001c06:	1006      	.short	0x1006
 8001c08:	0808080e 	.word	0x0808080e
 8001c0c:	10101008 	.word	0x10101008
 8001c10:	10          	.byte	0x10
 8001c11:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8001c12:	2002      	movs	r0, #2
}
 8001c14:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8001c16:	4b05      	ldr	r3, [pc, #20]	@ (8001c2c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x30>)
 8001c18:	2187      	movs	r1, #135	@ 0x87
 8001c1a:	4a05      	ldr	r2, [pc, #20]	@ (8001c30 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8001c1c:	4805      	ldr	r0, [pc, #20]	@ (8001c34 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8001c1e:	f023 ff45 	bl	8025aac <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8001c22:	2000      	movs	r0, #0
 8001c24:	e7f6      	b.n	8001c14 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8001c26:	2001      	movs	r0, #1
    return dma2dColorMode;
 8001c28:	e7f4      	b.n	8001c14 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8001c2a:	bf00      	nop
 8001c2c:	08027415 	.word	0x08027415
 8001c30:	08027430 	.word	0x08027430
 8001c34:	0802747b 	.word	0x0802747b

08001c38 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8001c38:	b538      	push	{r3, r4, r5, lr}
 8001c3a:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001c3c:	7f88      	ldrb	r0, [r1, #30]
 8001c3e:	f7ff ffdd 	bl	8001bfc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8001c42:	4b17      	ldr	r3, [pc, #92]	@ (8001ca0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x68>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001c44:	8aa5      	ldrh	r5, [r4, #20]
 8001c46:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8001c48:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001c4a:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001c4e:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001c50:	645a      	str	r2, [r3, #68]	@ 0x44

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001c52:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001c54:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001c56:	1b52      	subs	r2, r2, r5
 8001c58:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8001c5a:	6825      	ldr	r5, [r4, #0]
 8001c5c:	2d08      	cmp	r5, #8
 8001c5e:	d10e      	bne.n	8001c7e <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001c60:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001c62:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001c64:	6258      	str	r0, [r3, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8001c66:	4a0f      	ldr	r2, [pc, #60]	@ (8001ca4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x6c>)
 8001c68:	7f20      	ldrb	r0, [r4, #28]
 8001c6a:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8001c6e:	61da      	str	r2, [r3, #28]
        return color;
 8001c70:	68e2      	ldr	r2, [r4, #12]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8001c72:	621a      	str	r2, [r3, #32]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8001c74:	4a0c      	ldr	r2, [pc, #48]	@ (8001ca8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x70>)
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001c76:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001c78:	60d9      	str	r1, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8001c7a:	601a      	str	r2, [r3, #0]
    }
}
 8001c7c:	bd38      	pop	{r3, r4, r5, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 8001c7e:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8001c80:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8001c82:	611a      	str	r2, [r3, #16]
 8001c84:	68e1      	ldr	r1, [r4, #12]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 8001c86:	0a0a      	lsrs	r2, r1, #8
 8001c88:	0948      	lsrs	r0, r1, #5
 8001c8a:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8001c8e:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
 8001c92:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8001c96:	4302      	orrs	r2, r0
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	639a      	str	r2, [r3, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8001c9c:	4a03      	ldr	r2, [pc, #12]	@ (8001cac <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x74>)
 8001c9e:	e7ec      	b.n	8001c7a <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 8001ca0:	4002b000 	.word	0x4002b000
 8001ca4:	00010009 	.word	0x00010009
 8001ca8:	00020201 	.word	0x00020201
 8001cac:	00030201 	.word	0x00030201

08001cb0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
 8001cb0:	b508      	push	{r3, lr}
    switch (format)
 8001cb2:	280b      	cmp	r0, #11
 8001cb4:	d80b      	bhi.n	8001cce <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1e>
 8001cb6:	e8df f000 	tbb	[pc, r0]
 8001cba:	1206      	.short	0x1206
 8001cbc:	0a0a0a10 	.word	0x0a0a0a10
 8001cc0:	0808080a 	.word	0x0808080a
 8001cc4:	0808      	.short	0x0808
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8001cc6:	2002      	movs	r0, #2
}
 8001cc8:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8001cca:	2005      	movs	r0, #5
        break;
 8001ccc:	e7fc      	b.n	8001cc8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        assert(0 && "Unsupported Format!");
 8001cce:	4b05      	ldr	r3, [pc, #20]	@ (8001ce4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8001cd0:	2166      	movs	r1, #102	@ 0x66
 8001cd2:	4a05      	ldr	r2, [pc, #20]	@ (8001ce8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8001cd4:	4805      	ldr	r0, [pc, #20]	@ (8001cec <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x3c>)
 8001cd6:	f023 fee9 	bl	8025aac <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8001cda:	2000      	movs	r0, #0
 8001cdc:	e7f4      	b.n	8001cc8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8001cde:	2001      	movs	r0, #1
    return dma2dColorMode;
 8001ce0:	e7f2      	b.n	8001cc8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8001ce2:	bf00      	nop
 8001ce4:	08027415 	.word	0x08027415
 8001ce8:	080274c8 	.word	0x080274c8
 8001cec:	0802747b 	.word	0x0802747b

08001cf0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
 8001cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8001cf4:	f891 801d 	ldrb.w	r8, [r1, #29]
{
 8001cf8:	460c      	mov	r4, r1
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8001cfa:	4640      	mov	r0, r8
 8001cfc:	f7ff ffd8 	bl	8001cb0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001d00:	7fa7      	ldrb	r7, [r4, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8001d02:	4605      	mov	r5, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001d04:	4638      	mov	r0, r7
 8001d06:	f7ff ffd3 	bl	8001cb0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
 8001d0a:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001d0c:	4638      	mov	r0, r7
 8001d0e:	f7ff ff75 	bl	8001bfc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001d12:	8aa1      	ldrh	r1, [r4, #20]
 8001d14:	8b62      	ldrh	r2, [r4, #26]
 8001d16:	4b43      	ldr	r3, [pc, #268]	@ (8001e24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x134>)
 8001d18:	1a52      	subs	r2, r2, r1
 8001d1a:	641a      	str	r2, [r3, #64]	@ 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001d1c:	619a      	str	r2, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8001d1e:	8b22      	ldrh	r2, [r4, #24]
 8001d20:	1a52      	subs	r2, r2, r1
 8001d22:	611a      	str	r2, [r3, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001d24:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8001d26:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001d28:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001d2c:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001d2e:	645a      	str	r2, [r3, #68]	@ 0x44
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8001d30:	6862      	ldr	r2, [r4, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001d32:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8001d34:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
 8001d36:	6820      	ldr	r0, [r4, #0]
 8001d38:	2880      	cmp	r0, #128	@ 0x80
 8001d3a:	d028      	beq.n	8001d8e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9e>
 8001d3c:	7f22      	ldrb	r2, [r4, #28]
 8001d3e:	d80f      	bhi.n	8001d60 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x70>
 8001d40:	2820      	cmp	r0, #32
 8001d42:	d066      	beq.n	8001e12 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x122>
 8001d44:	2840      	cmp	r0, #64	@ 0x40
 8001d46:	d064      	beq.n	8001e12 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x122>
 8001d48:	2804      	cmp	r0, #4
 8001d4a:	d01a      	beq.n	8001d82 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x92>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001d4c:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
 8001d50:	4b34      	ldr	r3, [pc, #208]	@ (8001e24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x134>)
        if (blitOp.srcFormat != blitOp.dstFormat)
 8001d52:	45b8      	cmp	r8, r7
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001d54:	f445 3500 	orr.w	r5, r5, #131072	@ 0x20000
 8001d58:	61dd      	str	r5, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8001d5a:	d060      	beq.n	8001e1e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8001d5c:	4a32      	ldr	r2, [pc, #200]	@ (8001e28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8001d5e:	e044      	b.n	8001dea <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfa>
    switch (blitOp.operation)
 8001d60:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8001d64:	d004      	beq.n	8001d70 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x80>
 8001d66:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8001d6a:	d1ef      	bne.n	8001d4c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x5c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001d6c:	482f      	ldr	r0, [pc, #188]	@ (8001e2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)
 8001d6e:	e000      	b.n	8001d72 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x82>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001d70:	482f      	ldr	r0, [pc, #188]	@ (8001e30 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x140>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001d72:	ea40 6202 	orr.w	r2, r0, r2, lsl #24
 8001d76:	61da      	str	r2, [r3, #28]
 8001d78:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8001d7a:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001d7c:	625e      	str	r6, [r3, #36]	@ 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001d7e:	6159      	str	r1, [r3, #20]
 8001d80:	e032      	b.n	8001de8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf8>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001d82:	ea45 6202 	orr.w	r2, r5, r2, lsl #24
 8001d86:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001d8a:	61da      	str	r2, [r3, #28]
 8001d8c:	e7f6      	b.n	8001d7c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8c>
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8001d8e:	68a0      	ldr	r0, [r4, #8]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8001d90:	1d02      	adds	r2, r0, #4
 8001d92:	62da      	str	r2, [r3, #44]	@ 0x2c
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001d94:	7f22      	ldrb	r2, [r4, #28]
 8001d96:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
 8001d9a:	f445 3500 	orr.w	r5, r5, #131072	@ 0x20000
 8001d9e:	61dd      	str	r5, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001da0:	625e      	str	r6, [r3, #36]	@ 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001da2:	6159      	str	r1, [r3, #20]
            switch ((Bitmap::ClutFormat)palette->format)
 8001da4:	7801      	ldrb	r1, [r0, #0]
 8001da6:	b141      	cbz	r1, 8001dba <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xca>
 8001da8:	2901      	cmp	r1, #1
 8001daa:	d021      	beq.n	8001df0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
                assert(0 && "Unsupported format");
 8001dac:	4b21      	ldr	r3, [pc, #132]	@ (8001e34 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8001dae:	f240 1111 	movw	r1, #273	@ 0x111
 8001db2:	4a21      	ldr	r2, [pc, #132]	@ (8001e38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 8001db4:	4821      	ldr	r0, [pc, #132]	@ (8001e3c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
 8001db6:	f023 fe79 	bl	8025aac <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001dba:	69da      	ldr	r2, [r3, #28]
 8001dbc:	8841      	ldrh	r1, [r0, #2]
 8001dbe:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8001dc2:	3901      	subs	r1, #1
 8001dc4:	f022 0210 	bic.w	r2, r2, #16
 8001dc8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
            bool blend = true;
 8001dcc:	2101      	movs	r1, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001dce:	61da      	str	r2, [r3, #28]
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8001dd0:	4b14      	ldr	r3, [pc, #80]	@ (8001e24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x134>)
 8001dd2:	69da      	ldr	r2, [r3, #28]
 8001dd4:	f042 0220 	orr.w	r2, r2, #32
 8001dd8:	61da      	str	r2, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8001dda:	69da      	ldr	r2, [r3, #28]
 8001ddc:	0692      	lsls	r2, r2, #26
 8001dde:	d4fc      	bmi.n	8001dda <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xea>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8001de0:	2210      	movs	r2, #16
 8001de2:	609a      	str	r2, [r3, #8]
            if(blend)
 8001de4:	2900      	cmp	r1, #0
 8001de6:	d0b9      	beq.n	8001d5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8001de8:	4a15      	ldr	r2, [pc, #84]	@ (8001e40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>)
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8001dea:	601a      	str	r2, [r3, #0]
}
 8001dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if(blitOp.alpha == 255)
 8001df0:	f1b2 01ff 	subs.w	r1, r2, #255	@ 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001df4:	69da      	ldr	r2, [r3, #28]
 8001df6:	8840      	ldrh	r0, [r0, #2]
 8001df8:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
                if(blitOp.alpha == 255)
 8001dfc:	bf18      	it	ne
 8001dfe:	2101      	movne	r1, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001e00:	3801      	subs	r0, #1
 8001e02:	f022 0210 	bic.w	r2, r2, #16
 8001e06:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001e0a:	f042 0210 	orr.w	r2, r2, #16
 8001e0e:	61da      	str	r2, [r3, #28]
                break;
 8001e10:	e7de      	b.n	8001dd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe0>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001e12:	ea45 6202 	orr.w	r2, r5, r2, lsl #24
 8001e16:	4b03      	ldr	r3, [pc, #12]	@ (8001e24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x134>)
 8001e18:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8001e1c:	e7b5      	b.n	8001d8a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9a>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8001e1e:	f240 2201 	movw	r2, #513	@ 0x201
 8001e22:	e7e2      	b.n	8001dea <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfa>
 8001e24:	4002b000 	.word	0x4002b000
 8001e28:	00010201 	.word	0x00010201
 8001e2c:	00020009 	.word	0x00020009
 8001e30:	0002000a 	.word	0x0002000a
 8001e34:	08027512 	.word	0x08027512
 8001e38:	0802752c 	.word	0x0802752c
 8001e3c:	0802747b 	.word	0x0802747b
 8001e40:	00020201 	.word	0x00020201

08001e44 <DMA2D_XferCpltCallback>:
 8001e44:	4b02      	ldr	r3, [pc, #8]	@ (8001e50 <DMA2D_XferCpltCallback+0xc>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 8001e4a:	6803      	ldr	r3, [r0, #0]
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	4718      	bx	r3
 8001e50:	20027b94 	.word	0x20027b94

08001e54 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8001e54:	b570      	push	{r4, r5, r6, lr}
 8001e56:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8001e58:	4b0a      	ldr	r3, [pc, #40]	@ (8001e84 <_ZN8STM32DMAC1Ev+0x30>)
 8001e5a:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8001e5c:	2600      	movs	r6, #0
 8001e5e:	4625      	mov	r5, r4
 8001e60:	2260      	movs	r2, #96	@ 0x60
 8001e62:	6060      	str	r0, [r4, #4]
 8001e64:	7226      	strb	r6, [r4, #8]
 8001e66:	7266      	strb	r6, [r4, #9]
 8001e68:	f845 3b20 	str.w	r3, [r5], #32
 8001e6c:	4629      	mov	r1, r5
 8001e6e:	f00f f977 	bl	8011160 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8001e72:	f504 635a 	add.w	r3, r4, #3488	@ 0xda0
        : color(0)
 8001e76:	60ee      	str	r6, [r5, #12]
 8001e78:	3524      	adds	r5, #36	@ 0x24
 8001e7a:	429d      	cmp	r5, r3
 8001e7c:	d1fb      	bne.n	8001e76 <_ZN8STM32DMAC1Ev+0x22>
}
 8001e7e:	4620      	mov	r0, r4
 8001e80:	bd70      	pop	{r4, r5, r6, pc}
 8001e82:	bf00      	nop
 8001e84:	08027574 	.word	0x08027574

08001e88 <_ZN8touchgfx5paint8tearDownEv>:
* @brief Waits until previous DMA drawing operation has finished
*/
void tearDown()
{
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8001e88:	4b03      	ldr	r3, [pc, #12]	@ (8001e98 <_ZN8touchgfx5paint8tearDownEv+0x10>)
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	07d2      	lsls	r2, r2, #31
 8001e8e:	d4fc      	bmi.n	8001e8a <_ZN8touchgfx5paint8tearDownEv+0x2>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001e90:	2223      	movs	r2, #35	@ 0x23
 8001e92:	609a      	str	r2, [r3, #8]
}
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	4002b000 	.word	0x4002b000

08001e9c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm>:
*
* @brief Renders Canvas Widget chunks using DMA.
* This functions will not generate an interrupt, and will not affect the DMA queue.
*/
void lineFromColor(uint16_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha, const uint32_t color565)
{
 8001e9c:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8001e9e:	4c10      	ldr	r4, [pc, #64]	@ (8001ee0 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x44>)
 8001ea0:	6825      	ldr	r5, [r4, #0]
 8001ea2:	07ed      	lsls	r5, r5, #31
 8001ea4:	d4fc      	bmi.n	8001ea0 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001ea6:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8001ea8:	0409      	lsls	r1, r1, #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    if (alpha < 0xFF)
 8001eaa:	2bff      	cmp	r3, #255	@ 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001eac:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8001eae:	f041 0101 	orr.w	r1, r1, #1
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
 8001eb2:	f04f 0502 	mov.w	r5, #2
 8001eb6:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8001eb8:	6461      	str	r1, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8001eba:	63e0      	str	r0, [r4, #60]	@ 0x3c
    if (alpha < 0xFF)
 8001ebc:	d00a      	beq.n	8001ed4 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x38>
    {
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8001ebe:	4909      	ldr	r1, [pc, #36]	@ (8001ee4 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x48>)
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001ec0:	6265      	str	r5, [r4, #36]	@ 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8001ec2:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
 8001ec6:	61e3      	str	r3, [r4, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
 8001ec8:	4b07      	ldr	r3, [pc, #28]	@ (8001ee8 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x4c>)
        WRITE_REG(DMA2D->FGCOLR, color);
 8001eca:	6222      	str	r2, [r4, #32]
        WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
 8001ecc:	6160      	str	r0, [r4, #20]
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
 8001ece:	60e0      	str	r0, [r4, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, color565);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8001ed0:	6023      	str	r3, [r4, #0]
    }
}
 8001ed2:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8001ed4:	61e5      	str	r5, [r4, #28]
        WRITE_REG(DMA2D->OCOLR, color565);
 8001ed6:	9b03      	ldr	r3, [sp, #12]
 8001ed8:	63a3      	str	r3, [r4, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8001eda:	4b04      	ldr	r3, [pc, #16]	@ (8001eec <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x50>)
 8001edc:	e7f8      	b.n	8001ed0 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x34>
 8001ede:	bf00      	nop
 8001ee0:	4002b000 	.word	0x4002b000
 8001ee4:	00010009 	.word	0x00010009
 8001ee8:	00020001 	.word	0x00020001
 8001eec:	00030001 	.word	0x00030001

08001ef0 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh>:

void lineFromRGB565(uint16_t* const ptr, const uint16_t* const data, const unsigned count, const uint8_t alpha)
{
 8001ef0:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8001ef2:	4c0f      	ldr	r4, [pc, #60]	@ (8001f30 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x40>)
 8001ef4:	6825      	ldr	r5, [r4, #0]
 8001ef6:	07ed      	lsls	r5, r5, #31
 8001ef8:	d4fc      	bmi.n	8001ef4 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001efa:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8001efc:	0412      	lsls	r2, r2, #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));

    if (alpha < 0xFF)
 8001efe:	2bff      	cmp	r3, #255	@ 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001f00:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8001f02:	f042 0201 	orr.w	r2, r2, #1
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
 8001f06:	f04f 0502 	mov.w	r5, #2
 8001f0a:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8001f0c:	6462      	str	r2, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8001f0e:	63e0      	str	r0, [r4, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 8001f10:	60e1      	str	r1, [r4, #12]
    if (alpha < 0xFF)
 8001f12:	d008      	beq.n	8001f26 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x36>
    {
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << 24));
 8001f14:	061b      	lsls	r3, r3, #24
 8001f16:	f043 1302 	orr.w	r3, r3, #131074	@ 0x20002
 8001f1a:	61e3      	str	r3, [r4, #28]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8001f1c:	4b05      	ldr	r3, [pc, #20]	@ (8001f34 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x44>)
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001f1e:	6265      	str	r5, [r4, #36]	@ 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 8001f20:	6160      	str	r0, [r4, #20]
    {
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << 24));

        /* Start DMA2D : M2M Mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
 8001f22:	6023      	str	r3, [r4, #0]
    }
}
 8001f24:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << 24));
 8001f26:	4b04      	ldr	r3, [pc, #16]	@ (8001f38 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x48>)
 8001f28:	61e3      	str	r3, [r4, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e7f9      	b.n	8001f22 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x32>
 8001f2e:	bf00      	nop
 8001f30:	4002b000 	.word	0x4002b000
 8001f34:	00020001 	.word	0x00020001
 8001f38:	ff020002 	.word	0xff020002

08001f3c <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh>:

void lineFromARGB8888(uint16_t* const ptr, const uint32_t* const data, const unsigned count, const uint8_t alpha)
{
 8001f3c:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8001f3e:	4c0b      	ldr	r4, [pc, #44]	@ (8001f6c <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x30>)
 8001f40:	6825      	ldr	r5, [r4, #0]
 8001f42:	07ed      	lsls	r5, r5, #31
 8001f44:	d4fc      	bmi.n	8001f40 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001f46:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8001f48:	0412      	lsls	r2, r2, #16

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));

    /* Set DMA2D color mode and alpha mode */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (alpha << 24));
 8001f4a:	061b      	lsls	r3, r3, #24
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001f4c:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8001f4e:	f042 0201 	orr.w	r2, r2, #1
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
 8001f52:	2502      	movs	r5, #2
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (alpha << 24));
 8001f54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
 8001f58:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8001f5a:	6462      	str	r2, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8001f5c:	63e0      	str	r0, [r4, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 8001f5e:	60e1      	str	r1, [r4, #12]
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (alpha << 24));
 8001f60:	61e3      	str	r3, [r4, #28]

    /* Configure DMA2D Stream source2 address */
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));

    /* Set DMA2D mode */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8001f62:	4b03      	ldr	r3, [pc, #12]	@ (8001f70 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x34>)
    WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001f64:	6265      	str	r5, [r4, #36]	@ 0x24
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 8001f66:	6160      	str	r0, [r4, #20]
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8001f68:	6023      	str	r3, [r4, #0]
}
 8001f6a:	bd30      	pop	{r4, r5, pc}
 8001f6c:	4002b000 	.word	0x4002b000
 8001f70:	00020001 	.word	0x00020001

08001f74 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8001f74:	2001      	movs	r0, #1
 8001f76:	4770      	bx	lr

08001f78 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8001f78:	2038      	movs	r0, #56	@ 0x38
 8001f7a:	4770      	bx	lr

08001f7c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8001f7c:	2338      	movs	r3, #56	@ 0x38
 8001f7e:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8001f82:	3008      	adds	r0, #8
 8001f84:	4770      	bx	lr

08001f86 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 8001f86:	2338      	movs	r3, #56	@ 0x38
 8001f88:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8001f8c:	3008      	adds	r0, #8
 8001f8e:	4770      	bx	lr

08001f90 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8001f90:	2001      	movs	r0, #1
 8001f92:	4770      	bx	lr

08001f94 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8001f94:	f243 50f4 	movw	r0, #13812	@ 0x35f4
 8001f98:	4770      	bx	lr

08001f9a <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8001f9a:	f243 53f4 	movw	r3, #13812	@ 0x35f4
 8001f9e:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8001fa2:	3008      	adds	r0, #8
 8001fa4:	4770      	bx	lr

08001fa6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8001fa6:	f243 53f4 	movw	r3, #13812	@ 0x35f4
 8001faa:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8001fae:	3008      	adds	r0, #8
 8001fb0:	4770      	bx	lr

08001fb2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8001fb2:	2001      	movs	r0, #1
 8001fb4:	4770      	bx	lr

08001fb6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8001fb6:	2010      	movs	r0, #16
 8001fb8:	4770      	bx	lr

08001fba <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8001fba:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8001fbe:	3008      	adds	r0, #8
 8001fc0:	4770      	bx	lr

08001fc2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8001fc2:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8001fc6:	3008      	adds	r0, #8
 8001fc8:	4770      	bx	lr

08001fca <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen2ScreenNoTransition();
 8001fca:	4608      	mov	r0, r1
 8001fcc:	f003 bdd4 	b.w	8005b78 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv>

08001fd0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8001fd0:	4b03      	ldr	r3, [pc, #12]	@ (8001fe0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x10>)
 8001fd2:	b510      	push	{r4, lr}
 8001fd4:	4604      	mov	r4, r0
 8001fd6:	6003      	str	r3, [r0, #0]
 8001fd8:	f00d fc7f 	bl	800f8da <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001fdc:	4620      	mov	r0, r4
 8001fde:	bd10      	pop	{r4, pc}
 8001fe0:	0802762c 	.word	0x0802762c

08001fe4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
 8001fe4:	b510      	push	{r4, lr}
 8001fe6:	4604      	mov	r4, r0
 8001fe8:	f7ff fff2 	bl	8001fd0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8001fec:	2140      	movs	r1, #64	@ 0x40
 8001fee:	4620      	mov	r0, r4
 8001ff0:	f023 fd2d 	bl	8025a4e <_ZdlPvj>
 8001ff4:	4620      	mov	r0, r4
 8001ff6:	bd10      	pop	{r4, pc}

08001ff8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8001ff8:	4b03      	ldr	r3, [pc, #12]	@ (8002008 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8001ffa:	b510      	push	{r4, lr}
 8001ffc:	4604      	mov	r4, r0
 8001ffe:	6003      	str	r3, [r0, #0]
 8002000:	f00d fc6b 	bl	800f8da <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002004:	4620      	mov	r0, r4
 8002006:	bd10      	pop	{r4, pc}
 8002008:	080275f8 	.word	0x080275f8

0800200c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800200c:	b510      	push	{r4, lr}
 800200e:	4604      	mov	r4, r0
 8002010:	f7ff fff2 	bl	8001ff8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002014:	f243 51fc 	movw	r1, #13820	@ 0x35fc
 8002018:	4620      	mov	r0, r4
 800201a:	f023 fd18 	bl	8025a4e <_ZdlPvj>
 800201e:	4620      	mov	r0, r4
 8002020:	bd10      	pop	{r4, pc}
	...

08002024 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002024:	4b03      	ldr	r3, [pc, #12]	@ (8002034 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002026:	b510      	push	{r4, lr}
 8002028:	4604      	mov	r4, r0
 800202a:	6003      	str	r3, [r0, #0]
 800202c:	f00d fc55 	bl	800f8da <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002030:	4620      	mov	r0, r4
 8002032:	bd10      	pop	{r4, pc}
 8002034:	080275c4 	.word	0x080275c4

08002038 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002038:	b510      	push	{r4, lr}
 800203a:	4604      	mov	r4, r0
 800203c:	f7ff fff2 	bl	8002024 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002040:	2118      	movs	r1, #24
 8002042:	4620      	mov	r0, r4
 8002044:	f023 fd03 	bl	8025a4e <_ZdlPvj>
 8002048:	4620      	mov	r0, r4
 800204a:	bd10      	pop	{r4, pc}

0800204c <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 800204c:	4b09      	ldr	r3, [pc, #36]	@ (8002074 <_ZN12FrontendHeapD1Ev+0x28>)
 800204e:	b510      	push	{r4, lr}
 8002050:	4604      	mov	r4, r0
 8002052:	6003      	str	r3, [r0, #0]
 8002054:	f500 5058 	add.w	r0, r0, #13824	@ 0x3600
 8002058:	3028      	adds	r0, #40	@ 0x28
 800205a:	f7ff ffb9 	bl	8001fd0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 800205e:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8002062:	f7ff ffc9 	bl	8001ff8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002066:	f104 0014 	add.w	r0, r4, #20
 800206a:	f7ff ffdb 	bl	8002024 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800206e:	4620      	mov	r0, r4
 8002070:	bd10      	pop	{r4, pc}
 8002072:	bf00      	nop
 8002074:	08027660 	.word	0x08027660

08002078 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8002078:	b508      	push	{r3, lr}
 800207a:	4802      	ldr	r0, [pc, #8]	@ (8002084 <__tcf_0+0xc>)
 800207c:	f7ff ffe6 	bl	800204c <_ZN12FrontendHeapD1Ev>
 8002080:	bd08      	pop	{r3, pc}
 8002082:	bf00      	nop
 8002084:	2000a69c 	.word	0x2000a69c

08002088 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 8002088:	b510      	push	{r4, lr}
 800208a:	4604      	mov	r4, r0
 800208c:	f7ff ffde 	bl	800204c <_ZN12FrontendHeapD1Ev>
 8002090:	f243 71c8 	movw	r1, #14280	@ 0x37c8
 8002094:	4620      	mov	r0, r4
 8002096:	f023 fcda 	bl	8025a4e <_ZdlPvj>
 800209a:	4620      	mov	r0, r4
 800209c:	bd10      	pop	{r4, pc}
	...

080020a0 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 80020a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80020a4:	f003 f922 	bl	80052ec <_ZN14BitmapDatabase11getInstanceEv>
 80020a8:	2400      	movs	r4, #0
 80020aa:	4605      	mov	r5, r0
 80020ac:	f003 f922 	bl	80052f4 <_ZN14BitmapDatabase15getInstanceSizeEv>
 80020b0:	4623      	mov	r3, r4
 80020b2:	4601      	mov	r1, r0
 80020b4:	4622      	mov	r2, r4
 80020b6:	4628      	mov	r0, r5
 80020b8:	9400      	str	r4, [sp, #0]
 80020ba:	f017 fae5 	bl	8019688 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 80020be:	4b26      	ldr	r3, [pc, #152]	@ (8002158 <touchgfx_init+0xb8>)
 80020c0:	4a26      	ldr	r2, [pc, #152]	@ (800215c <touchgfx_init+0xbc>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 80020c2:	4620      	mov	r0, r4
        static FrontendHeap instance;
 80020c4:	4d26      	ldr	r5, [pc, #152]	@ (8002160 <touchgfx_init+0xc0>)
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	f005 f95a 	bl	8007380 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 80020cc:	4825      	ldr	r0, [pc, #148]	@ (8002164 <touchgfx_init+0xc4>)
 80020ce:	f017 fa43 	bl	8019558 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 80020d2:	682b      	ldr	r3, [r5, #0]
 80020d4:	f3bf 8f5b 	dmb	ish
 80020d8:	07db      	lsls	r3, r3, #31
 80020da:	d436      	bmi.n	800214a <touchgfx_init+0xaa>
 80020dc:	4628      	mov	r0, r5
 80020de:	f023 fcb8 	bl	8025a52 <__cxa_guard_acquire>
 80020e2:	b390      	cbz	r0, 800214a <touchgfx_init+0xaa>
     */
    MVPHeap(AbstractPartition& pres,
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
 80020e4:	4c20      	ldr	r4, [pc, #128]	@ (8002168 <touchgfx_init+0xc8>)
          screenStorage(scr),
          transitionStorage(tra),
 80020e6:	4f21      	ldr	r7, [pc, #132]	@ (800216c <touchgfx_init+0xcc>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 80020e8:	4b21      	ldr	r3, [pc, #132]	@ (8002170 <touchgfx_init+0xd0>)
        : presenterStorage(pres),
 80020ea:	f104 0014 	add.w	r0, r4, #20
          frontendApplication(app)
 80020ee:	f107 0644 	add.w	r6, r7, #68	@ 0x44
          screenStorage(scr),
 80020f2:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 80020f6:	6023      	str	r3, [r4, #0]
        : presenterStorage(pres),
 80020f8:	6060      	str	r0, [r4, #4]
          screenStorage(scr),
 80020fa:	f8c4 8008 	str.w	r8, [r4, #8]
          transitionStorage(tra),
 80020fe:	60e7      	str	r7, [r4, #12]
          frontendApplication(app)
 8002100:	6126      	str	r6, [r4, #16]
 8002102:	f00d fbeb 	bl	800f8dc <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002106:	4b1b      	ldr	r3, [pc, #108]	@ (8002174 <touchgfx_init+0xd4>)
 8002108:	4640      	mov	r0, r8
 800210a:	6163      	str	r3, [r4, #20]
 800210c:	f00d fbe6 	bl	800f8dc <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002110:	4b19      	ldr	r3, [pc, #100]	@ (8002178 <touchgfx_init+0xd8>)
 8002112:	4638      	mov	r0, r7
 8002114:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002116:	f00d fbe1 	bl	800f8dc <_ZN8touchgfx17AbstractPartitionC1Ev>
 800211a:	f504 5340 	add.w	r3, r4, #12288	@ 0x3000
 800211e:	4a17      	ldr	r2, [pc, #92]	@ (800217c <touchgfx_init+0xdc>)
 8002120:	f503 60cd 	add.w	r0, r3, #1640	@ 0x668
 8002124:	f8c3 2628 	str.w	r2, [r3, #1576]	@ 0x628
 8002128:	f005 f9a6 	bl	8007478 <_ZN5ModelC1Ev>
 800212c:	4622      	mov	r2, r4
 800212e:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8002132:	4630      	mov	r0, r6
 8002134:	f005 f996 	bl	8007464 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8002138:	4630      	mov	r0, r6
 800213a:	f003 fd1d 	bl	8005b78 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv>
        static FrontendHeap instance;
 800213e:	4810      	ldr	r0, [pc, #64]	@ (8002180 <touchgfx_init+0xe0>)
 8002140:	f023 fcd2 	bl	8025ae8 <atexit>
 8002144:	4628      	mov	r0, r5
 8002146:	f023 fc90 	bl	8025a6a <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 800214a:	480e      	ldr	r0, [pc, #56]	@ (8002184 <touchgfx_init+0xe4>)
}
 800214c:	b002      	add	sp, #8
 800214e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 8002152:	f7fe bde3 	b.w	8000d1c <_ZN11TouchGFXHAL10initializeEv>
 8002156:	bf00      	nop
 8002158:	20027bf8 	.word	0x20027bf8
 800215c:	20009878 	.word	0x20009878
 8002160:	2000a698 	.word	0x2000a698
 8002164:	20000034 	.word	0x20000034
 8002168:	2000a69c 	.word	0x2000a69c
 800216c:	2000dcc4 	.word	0x2000dcc4
 8002170:	08027660 	.word	0x08027660
 8002174:	080275c4 	.word	0x080275c4
 8002178:	080275f8 	.word	0x080275f8
 800217c:	0802762c 	.word	0x0802762c
 8002180:	08002079 	.word	0x08002079
 8002184:	200097fc 	.word	0x200097fc

08002188 <touchgfx_components_init>:

void touchgfx_components_init()
{
}
 8002188:	4770      	bx	lr
	...

0800218c <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 800218c:	4801      	ldr	r0, [pc, #4]	@ (8002194 <touchgfx_taskEntry+0x8>)
 800218e:	f7fe bddf 	b.w	8000d50 <_ZN11TouchGFXHAL9taskEntryEv>
 8002192:	bf00      	nop
 8002194:	200097fc 	.word	0x200097fc

08002198 <_GLOBAL__sub_I_touchgfx_init>:
}
 8002198:	b573      	push	{r0, r1, r4, r5, r6, lr}
static STM32DMA dma;
 800219a:	4c0c      	ldr	r4, [pc, #48]	@ (80021cc <_GLOBAL__sub_I_touchgfx_init+0x34>)
{
public:

    STM32TouchController() {}
 800219c:	4b0c      	ldr	r3, [pc, #48]	@ (80021d0 <_GLOBAL__sub_I_touchgfx_init+0x38>)
 800219e:	4e0d      	ldr	r6, [pc, #52]	@ (80021d4 <_GLOBAL__sub_I_touchgfx_init+0x3c>)
 80021a0:	4620      	mov	r0, r4
static LCD16bpp display;
 80021a2:	4d0d      	ldr	r5, [pc, #52]	@ (80021d8 <_GLOBAL__sub_I_touchgfx_init+0x40>)
 80021a4:	6033      	str	r3, [r6, #0]
static STM32DMA dma;
 80021a6:	f7ff fe55 	bl	8001e54 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 80021aa:	4628      	mov	r0, r5
 80021ac:	f01a fb78 	bl	801c8a0 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 80021b0:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80021b4:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80021b8:	4621      	mov	r1, r4
 80021ba:	4808      	ldr	r0, [pc, #32]	@ (80021dc <_GLOBAL__sub_I_touchgfx_init+0x44>)
 80021bc:	e9cd 3200 	strd	r3, r2, [sp]
 80021c0:	4633      	mov	r3, r6
 80021c2:	462a      	mov	r2, r5
 80021c4:	f7fe fe76 	bl	8000eb4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
}
 80021c8:	b002      	add	sp, #8
 80021ca:	bd70      	pop	{r4, r5, r6, pc}
 80021cc:	200098f4 	.word	0x200098f4
 80021d0:	08026d90 	.word	0x08026d90
 80021d4:	2000a694 	.word	0x2000a694
 80021d8:	2000987c 	.word	0x2000987c
 80021dc:	200097fc 	.word	0x200097fc

080021e0 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 80021e0:	4801      	ldr	r0, [pc, #4]	@ (80021e8 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 80021e2:	f7ff bcef 	b.w	8001bc4 <_ZN8STM32DMAD1Ev>
 80021e6:	bf00      	nop
 80021e8:	200098f4 	.word	0x200098f4

080021ec <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 80021ec:	2000      	movs	r0, #0
 80021ee:	4770      	bx	lr

080021f0 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 80021f0:	8081      	strh	r1, [r0, #4]
    }
 80021f2:	4770      	bx	lr

080021f4 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 80021f4:	80c1      	strh	r1, [r0, #6]
    }
 80021f6:	4770      	bx	lr

080021f8 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 80021f8:	8101      	strh	r1, [r0, #8]
    }
 80021fa:	4770      	bx	lr

080021fc <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 80021fc:	8141      	strh	r1, [r0, #10]
    }
 80021fe:	4770      	bx	lr

08002200 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 8002200:	4770      	bx	lr

08002202 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 8002202:	4770      	bx	lr

08002204 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8002204:	4770      	bx	lr

08002206 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 8002206:	4770      	bx	lr

08002208 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8002208:	4770      	bx	lr

0800220a <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800220a:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 800220c:	88c4      	ldrh	r4, [r0, #6]
 800220e:	6803      	ldr	r3, [r0, #0]
 8002210:	1b12      	subs	r2, r2, r4
 8002212:	8884      	ldrh	r4, [r0, #4]
 8002214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002216:	1b09      	subs	r1, r1, r4
 8002218:	b212      	sxth	r2, r2
    }
 800221a:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 800221e:	b209      	sxth	r1, r1
 8002220:	4718      	bx	r3

08002222 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8002222:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002226:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8002228:	f04f 33ff 	mov.w	r3, #4294967295
 800222c:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 800222e:	6813      	ldr	r3, [r2, #0]
 8002230:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 8002232:	6010      	str	r0, [r2, #0]
    }
 8002234:	4770      	bx	lr

08002236 <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
    {
        return HAL::SOFTWARE;
    }
 8002236:	2000      	movs	r0, #0
 8002238:	4770      	bx	lr

0800223a <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
    {
        widgetWidth = widgetRect.width;
 800223a:	888b      	ldrh	r3, [r1, #4]
 800223c:	8083      	strh	r3, [r0, #4]
        return true;
    }
 800223e:	2001      	movs	r0, #1
 8002240:	4770      	bx	lr

08002242 <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
    {
        return;
    }
 8002242:	4770      	bx	lr

08002244 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8002244:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
    }
 8002248:	4770      	bx	lr

0800224a <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
    {
        return alpha;
    }
 800224a:	f890 0026 	ldrb.w	r0, [r0, #38]	@ 0x26
 800224e:	4770      	bx	lr

08002250 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8002250:	2200      	movs	r2, #0
     * overwritten in subclasses and return the minimal rectangle containing the shape. See
     * classes such as Circle for example implementations.
     *
     * @return The minimal rectangle containing the shape drawn.
     */
    virtual Rect getMinimalRect() const
 8002252:	b510      	push	{r4, lr}
        return rect.width;
 8002254:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
        return rect.height;
 8002258:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 800225c:	8002      	strh	r2, [r0, #0]
 800225e:	8042      	strh	r2, [r0, #2]
 8002260:	8084      	strh	r4, [r0, #4]
 8002262:	80c1      	strh	r1, [r0, #6]
    {
        return Rect(0, 0, getWidth(), getHeight());
    }
 8002264:	bd10      	pop	{r4, pc}

08002266 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 8002266:	2200      	movs	r2, #0
 8002268:	8002      	strh	r2, [r0, #0]
 800226a:	8042      	strh	r2, [r0, #2]
 800226c:	8082      	strh	r2, [r0, #4]
 800226e:	80c2      	strh	r2, [r0, #6]
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 8002270:	4770      	bx	lr
	...

08002274 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002274:	4b02      	ldr	r3, [pc, #8]	@ (8002280 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0xc>)
 8002276:	2290      	movs	r2, #144	@ 0x90
 8002278:	f883 235a 	strb.w	r2, [r3, #858]	@ 0x35a
}

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
}
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	e000e100 	.word	0xe000e100

08002284 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002284:	4b02      	ldr	r3, [pc, #8]	@ (8002290 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0xc>)
 8002286:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800228a:	609a      	str	r2, [r3, #8]

void TouchGFXGeneratedHAL::enableInterrupts()
{
    NVIC_EnableIRQ(DMA2D_IRQn);
}
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	e000e100 	.word	0xe000e100

08002294 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(DMA2D_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
}
 8002294:	4770      	bx	lr

08002296 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:
}

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    //setTFTFrameBuffer() not used for selected display interface
}
 8002296:	4770      	bx	lr

08002298 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002298:	4a12      	ldr	r2, [pc, #72]	@ (80022e4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x4c>)
 800229a:	6953      	ldr	r3, [r2, #20]
 800229c:	03db      	lsls	r3, r3, #15
{
 800229e:	b570      	push	{r4, r5, r6, lr}
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80022a0:	d51e      	bpl.n	80022e0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80022a2:	2300      	movs	r3, #0
 80022a4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80022a8:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 80022ac:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80022b0:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80022b4:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80022b8:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80022bc:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80022be:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80022c2:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80022c4:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 80022c8:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80022ca:	f8c2 5274 	str.w	r5, [r2, #628]	@ 0x274
      } while (ways-- != 0U);
 80022ce:	d2f9      	bcs.n	80022c4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>
    } while(sets-- != 0U);
 80022d0:	3b20      	subs	r3, #32
 80022d2:	f113 0f20 	cmn.w	r3, #32
 80022d6:	d1f2      	bne.n	80022be <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x26>
 80022d8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80022dc:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 80022e0:	bd70      	pop	{r4, r5, r6, pc}
 80022e2:	bf00      	nop
 80022e4:	e000ed00 	.word	0xe000ed00

080022e8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setRGBBufferEPhj>:

    virtual void setRGBBuffer(uint8_t* buffer, size_t sizeOfBuffer)
    {
        // Running in UI thread / main

        bufferRGB = buffer;
 80022e8:	6301      	str	r1, [r0, #48]	@ 0x30
        topBufferRGB = bufferRGB;
        sizeBufferRGB = sizeOfBuffer;
 80022ea:	e9c0 210d 	strd	r2, r1, [r0, #52]	@ 0x34
    }
 80022ee:	4770      	bx	lr

080022f0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EED1Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 80022f0:	4770      	bx	lr

080022f2 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmRNS0_15VideoDataReaderE>:
        mjpegDecoders[handle]->setVideoData(reader);
 80022f2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80022f6:	4611      	mov	r1, r2
 80022f8:	6840      	ldr	r0, [r0, #4]
 80022fa:	6803      	ldr	r3, [r0, #0]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	4718      	bx	r3

08002300 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EED0Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 8002300:	b510      	push	{r4, lr}
 8002302:	4604      	mov	r4, r0
 8002304:	2148      	movs	r1, #72	@ 0x48
 8002306:	f023 fba2 	bl	8025a4e <_ZdlPvj>
 800230a:	4620      	mov	r0, r4
 800230c:	bd10      	pop	{r4, pc}
	...

08002310 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8002310:	b538      	push	{r3, r4, r5, lr}
 8002312:	4604      	mov	r4, r0
    HAL::initialize();
 8002314:	f00e f871 	bl	80103fa <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8002318:	6823      	ldr	r3, [r4, #0]
 800231a:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
 800231c:	f013 fe5c 	bl	8015fd8 <_ZN8touchgfx11Application11getInstanceEv>
 8002320:	4601      	mov	r1, r0
 8002322:	4620      	mov	r0, r4
 8002324:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)0, (void*)0);
 8002326:	6823      	ldr	r3, [r4, #0]
 8002328:	4907      	ldr	r1, [pc, #28]	@ (8002348 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x38>)
 800232a:	4620      	mov	r0, r4
 800232c:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 8002330:	2300      	movs	r3, #0
 8002332:	461a      	mov	r2, r3
 8002334:	47a8      	blx	r5
    void addDecoder(MJPEGDecoder& decoder, uint32_t index)
    {
        // Running in UI thread / main

        assert(index < no_streams);
        mjpegDecoders[index] = &decoder;
 8002336:	4b05      	ldr	r3, [pc, #20]	@ (800234c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x3c>)
 8002338:	4a05      	ldr	r2, [pc, #20]	@ (8002350 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 800233a:	605a      	str	r2, [r3, #4]
        bufferRGB = buffer;
 800233c:	4a05      	ldr	r2, [pc, #20]	@ (8002354 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 800233e:	631a      	str	r2, [r3, #48]	@ 0x30
        topBufferRGB = bufferRGB;
 8002340:	639a      	str	r2, [r3, #56]	@ 0x38
        sizeBufferRGB = sizeOfBuffer;
 8002342:	4a05      	ldr	r2, [pc, #20]	@ (8002358 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x48>)
 8002344:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002346:	bd38      	pop	{r3, r4, r5, pc}
 8002348:	c00bb800 	.word	0xc00bb800
 800234c:	2000de64 	.word	0x2000de64
 8002350:	2000deac 	.word	0x2000deac
 8002354:	c0000000 	.word	0xc0000000
 8002358:	000bb800 	.word	0x000bb800

0800235c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:
    HAL::flushFrameBuffer(rect);
 800235c:	f00d bffe 	b.w	801035c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

08002360 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
    return HAL::blockCopy(dest, src, numBytes);
 8002360:	f00e b959 	b.w	8010616 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

08002364 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
 8002364:	b538      	push	{r3, r4, r5, lr}
 8002366:	4604      	mov	r4, r0
 8002368:	460d      	mov	r5, r1
        MUTEX_LOCK(mutexBuffers);
 800236a:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 800236c:	f04f 31ff 	mov.w	r1, #4294967295
 8002370:	f00a fd4a 	bl	800ce08 <osMutexAcquire>
        MUTEX_UNLOCK(mutexBuffers);
 8002374:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8002376:	f00a fd77 	bl	800ce68 <osMutexRelease>
        streams[handle].isActive = false;
 800237a:	2324      	movs	r3, #36	@ 0x24
 800237c:	fb03 4505 	mla	r5, r3, r5, r4
 8002380:	2300      	movs	r3, #0
 8002382:	f885 3028 	strb.w	r3, [r5, #40]	@ 0x28
        if (oneIsActive == false)
 8002386:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800238a:	b90b      	cbnz	r3, 8002390 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm+0x2c>
            topBufferRGB = bufferRGB;
 800238c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800238e:	63a3      	str	r3, [r4, #56]	@ 0x38
    }
 8002390:	bd38      	pop	{r3, r4, r5, pc}

08002392 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 8002392:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8002396:	b112      	cbz	r2, 800239e <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 8002398:	6803      	ldr	r3, [r0, #0]
 800239a:	695b      	ldr	r3, [r3, #20]
 800239c:	4718      	bx	r3
    }
 800239e:	4770      	bx	lr

080023a0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm>:
    {
        assert(handle < no_streams);
        mjpegDecoders[handle]->getVideoInfo(data);
    }

    virtual bool getIsPlaying(const Handle handle)
 80023a0:	b508      	push	{r3, lr}
    {
        assert(handle < no_streams);
 80023a2:	b131      	cbz	r1, 80023b2 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x12>
 80023a4:	4b04      	ldr	r3, [pc, #16]	@ (80023b8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x18>)
 80023a6:	f44f 71b8 	mov.w	r1, #368	@ 0x170
 80023aa:	4a04      	ldr	r2, [pc, #16]	@ (80023bc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x1c>)
 80023ac:	4804      	ldr	r0, [pc, #16]	@ (80023c0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x20>)
 80023ae:	f023 fb7d 	bl	8025aac <__assert_func>
        Stream& stream = streams[handle];
        return stream.isPlaying;
    }
 80023b2:	f890 0029 	ldrb.w	r0, [r0, #41]	@ 0x29
 80023b6:	bd08      	pop	{r3, pc}
 80023b8:	0802766c 	.word	0x0802766c
 80023bc:	08027680 	.word	0x08027680
 80023c0:	0802780a 	.word	0x0802780a

080023c4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE>:
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
 80023c4:	b510      	push	{r4, lr}
        assert(handle < no_streams);
 80023c6:	b131      	cbz	r1, 80023d6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x12>
 80023c8:	4b06      	ldr	r3, [pc, #24]	@ (80023e4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>)
 80023ca:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
 80023ce:	4a06      	ldr	r2, [pc, #24]	@ (80023e8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x24>)
 80023d0:	4806      	ldr	r0, [pc, #24]	@ (80023ec <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x28>)
 80023d2:	f023 fb6b 	bl	8025aac <__assert_func>
        mjpegDecoders[handle]->getVideoInfo(data);
 80023d6:	6840      	ldr	r0, [r0, #4]
 80023d8:	4611      	mov	r1, r2
 80023da:	6803      	ldr	r3, [r0, #0]
    }
 80023dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->getVideoInfo(data);
 80023e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e2:	4718      	bx	r3
 80023e4:	0802766c 	.word	0x0802766c
 80023e8:	0802784d 	.word	0x0802784d
 80023ec:	0802780a 	.word	0x0802780a

080023f0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm>:
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
 80023f0:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 80023f2:	b129      	cbz	r1, 8002400 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x10>
 80023f4:	4b03      	ldr	r3, [pc, #12]	@ (8002404 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x14>)
 80023f6:	2179      	movs	r1, #121	@ 0x79
 80023f8:	4a03      	ldr	r2, [pc, #12]	@ (8002408 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x18>)
 80023fa:	4804      	ldr	r0, [pc, #16]	@ (800240c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x1c>)
 80023fc:	f023 fb56 	bl	8025aac <__assert_func>
    }
 8002400:	68c0      	ldr	r0, [r0, #12]
 8002402:	bd08      	pop	{r3, pc}
 8002404:	0802766c 	.word	0x0802766c
 8002408:	080279fb 	.word	0x080279fb
 800240c:	0802780a 	.word	0x0802780a

08002410 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
 8002410:	b510      	push	{r4, lr}
 8002412:	4604      	mov	r4, r0
        assert(handle < no_streams);
 8002414:	b129      	cbz	r1, 8002422 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x12>
 8002416:	4b19      	ldr	r3, [pc, #100]	@ (800247c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x6c>)
 8002418:	21a2      	movs	r1, #162	@ 0xa2
 800241a:	4a19      	ldr	r2, [pc, #100]	@ (8002480 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x70>)
 800241c:	4819      	ldr	r0, [pc, #100]	@ (8002484 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x74>)
 800241e:	f023 fb45 	bl	8025aac <__assert_func>
        switch (cmd)
 8002422:	2a05      	cmp	r2, #5
 8002424:	d815      	bhi.n	8002452 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 8002426:	e8df f002 	tbb	[pc, r2]
 800242a:	1103      	.short	0x1103
 800242c:	221c1715 	.word	0x221c1715
            if (mjpegDecoders[handle]->hasVideo())
 8002430:	6840      	ldr	r0, [r0, #4]
 8002432:	6803      	ldr	r3, [r0, #0]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	4798      	blx	r3
 8002438:	b158      	cbz	r0, 8002452 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
                stream.isPlaying = true;
 800243a:	2301      	movs	r3, #1
 800243c:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
                stream.hasMoreFrames = true; // Assume more frames, lowered on end
 8002440:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
            stream.frameCount = 0;
 8002444:	2300      	movs	r3, #0
            stream.tickCount = 0;
 8002446:	e9c4 3304 	strd	r3, r3, [r4, #16]
            break;
 800244a:	e002      	b.n	8002452 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.isPlaying = false;
 800244c:	2300      	movs	r3, #0
 800244e:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
    }
 8002452:	bd10      	pop	{r4, pc}
            stream.seek_to_frame = param;
 8002454:	6203      	str	r3, [r0, #32]
 8002456:	e7f5      	b.n	8002444 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.seek_to_frame = param;
 8002458:	6203      	str	r3, [r0, #32]
            stream.isShowingOneFrame = true;
 800245a:	2301      	movs	r3, #1
 800245c:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
 8002460:	e7f0      	b.n	8002444 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.isPlaying = false;
 8002462:	2300      	movs	r3, #0
 8002464:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
            stream.seek_to_frame = 1;
 8002468:	2301      	movs	r3, #1
 800246a:	6203      	str	r3, [r0, #32]
            break;
 800246c:	e7f1      	b.n	8002452 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.repeat = (param > 0);
 800246e:	3b00      	subs	r3, #0
 8002470:	bf18      	it	ne
 8002472:	2301      	movne	r3, #1
 8002474:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
    }
 8002478:	e7eb      	b.n	8002452 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 800247a:	bf00      	nop
 800247c:	0802766c 	.word	0x0802766c
 8002480:	08027bb0 	.word	0x08027bb0
 8002484:	0802780a 	.word	0x0802780a

08002488 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
 8002488:	b510      	push	{r4, lr}
 800248a:	460c      	mov	r4, r1
 800248c:	4611      	mov	r1, r2
 800248e:	461a      	mov	r2, r3
        assert(handle < no_streams);
 8002490:	b12c      	cbz	r4, 800249e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x16>
 8002492:	4b06      	ldr	r3, [pc, #24]	@ (80024ac <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x24>)
 8002494:	2190      	movs	r1, #144	@ 0x90
 8002496:	4a06      	ldr	r2, [pc, #24]	@ (80024b0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x28>)
 8002498:	4806      	ldr	r0, [pc, #24]	@ (80024b4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x2c>)
 800249a:	f023 fb07 	bl	8025aac <__assert_func>
        stream.frameNumber = 0;
 800249e:	60c4      	str	r4, [r0, #12]
        mjpegDecoders[handle]->setVideoData(movie, length);
 80024a0:	6840      	ldr	r0, [r0, #4]
 80024a2:	6803      	ldr	r3, [r0, #0]
    }
 80024a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->setVideoData(movie, length);
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	4718      	bx	r3
 80024ac:	0802766c 	.word	0x0802766c
 80024b0:	08027d84 	.word	0x08027d84
 80024b4:	0802780a 	.word	0x0802780a

080024b8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm>:
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
 80024b8:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 80024ba:	b129      	cbz	r1, 80024c8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x10>
 80024bc:	4b05      	ldr	r3, [pc, #20]	@ (80024d4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x1c>)
 80024be:	2182      	movs	r1, #130	@ 0x82
 80024c0:	4a05      	ldr	r2, [pc, #20]	@ (80024d8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x20>)
 80024c2:	4806      	ldr	r0, [pc, #24]	@ (80024dc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x24>)
 80024c4:	f023 faf2 	bl	8025aac <__assert_func>
        stream.tickCount = 0;
 80024c8:	e9c0 1104 	strd	r1, r1, [r0, #16]
        stream.frame_rate_video = video_frames;
 80024cc:	e9c0 3206 	strd	r3, r2, [r0, #24]
    }
 80024d0:	bd08      	pop	{r3, pc}
 80024d2:	bf00      	nop
 80024d4:	0802766c 	.word	0x0802766c
 80024d8:	08027f5f 	.word	0x08027f5f
 80024dc:	0802780a 	.word	0x0802780a

080024e0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
        if (firstDrawThisFrame)
 80024e0:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
 80024e4:	b510      	push	{r4, lr}
 80024e6:	4604      	mov	r4, r0
        if (firstDrawThisFrame)
 80024e8:	b153      	cbz	r3, 8002500 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE+0x20>
            MUTEX_LOCK(mutexBuffers);
 80024ea:	f04f 31ff 	mov.w	r1, #4294967295
 80024ee:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 80024f0:	f00a fc8a 	bl	800ce08 <osMutexAcquire>
            firstDrawThisFrame = false;
 80024f4:	2300      	movs	r3, #0
 80024f6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
            uiHasMutex = true;
 80024fa:	2301      	movs	r3, #1
 80024fc:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    }
 8002500:	bd10      	pop	{r4, pc}

08002502 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 8002502:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8002506:	b11a      	cbz	r2, 8002510 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 8002508:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 800250c:	b102      	cbz	r2, 8002510 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 800250e:	6018      	str	r0, [r3, #0]
        }
    }
 8002510:	4770      	bx	lr
	...

08002514 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
 8002514:	b510      	push	{r4, lr}
 8002516:	4604      	mov	r4, r0
 8002518:	4610      	mov	r0, r2
        assert(handle < no_streams);
 800251a:	b129      	cbz	r1, 8002528 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x14>
 800251c:	4b13      	ldr	r3, [pc, #76]	@ (800256c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x58>)
 800251e:	21d0      	movs	r1, #208	@ 0xd0
 8002520:	4a13      	ldr	r2, [pc, #76]	@ (8002570 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x5c>)
 8002522:	4814      	ldr	r0, [pc, #80]	@ (8002574 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x60>)
 8002524:	f023 fac2 	bl	8025aac <__assert_func>
        if (stream.isPlaying)
 8002528:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 800252c:	b133      	cbz	r3, 800253c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x28>
        return vSyncForFrame;
 800252e:	4b12      	ldr	r3, [pc, #72]	@ (8002578 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x64>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f893 2067 	ldrb.w	r2, [r3, #103]	@ 0x67
            stream.tickCount+=HAL::getInstance()->getLCDRefreshCount();
 8002536:	6963      	ldr	r3, [r4, #20]
 8002538:	4413      	add	r3, r2
 800253a:	6163      	str	r3, [r4, #20]
        if (stream.doInvalidateOnNextTick)
 800253c:	f894 302b 	ldrb.w	r3, [r4, #43]	@ 0x2b
 8002540:	b90b      	cbnz	r3, 8002546 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x32>
        return true;
 8002542:	2001      	movs	r0, #1
    }
 8002544:	bd10      	pop	{r4, pc}
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
    {
        buffer = videoBuffer;
 8002546:	68a3      	ldr	r3, [r4, #8]
 8002548:	6303      	str	r3, [r0, #48]	@ 0x30
            widget.invalidate();
 800254a:	6803      	ldr	r3, [r0, #0]
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	4798      	blx	r3
            stream.doInvalidateOnNextTick = false;
 8002550:	2300      	movs	r3, #0
            if (!stream.hasMoreFrames && !stream.repeat)
 8002552:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
            stream.doInvalidateOnNextTick = false;
 8002556:	f884 302b 	strb.w	r3, [r4, #43]	@ 0x2b
            if (!stream.hasMoreFrames && !stream.repeat)
 800255a:	2800      	cmp	r0, #0
 800255c:	d1f1      	bne.n	8002542 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x2e>
 800255e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1ee      	bne.n	8002544 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
                stream.isPlaying = false;
 8002566:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
 800256a:	e7eb      	b.n	8002544 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
 800256c:	0802766c 	.word	0x0802766c
 8002570:	0802811b 	.word	0x0802811b
 8002574:	0802780a 	.word	0x0802780a
 8002578:	20027b94 	.word	0x20027b94

0800257c <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
{
 800257c:	b510      	push	{r4, lr}
            if (stream.isPlaying || stream.isShowingOneFrame)
 800257e:	4c17      	ldr	r4, [pc, #92]	@ (80025dc <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x60>)
    HAL::endFrame();
 8002580:	f00d ff2e 	bl	80103e0 <_ZN8touchgfx3HAL8endFrameEv>
 8002584:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 8002588:	b913      	cbnz	r3, 8002590 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x14>
 800258a:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 800258e:	b1ab      	cbz	r3, 80025bc <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x40>
    bool decodeForNextTick(Stream& stream)
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
 8002590:	69e1      	ldr	r1, [r4, #28]
 8002592:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8002596:	4353      	muls	r3, r2
 8002598:	6922      	ldr	r2, [r4, #16]
 800259a:	434a      	muls	r2, r1
 800259c:	4293      	cmp	r3, r2
 800259e:	d30d      	bcc.n	80025bc <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x40>
        {
            if (allowSkipFrames)
 80025a0:	f894 003c 	ldrb.w	r0, [r4, #60]	@ 0x3c
 80025a4:	b138      	cbz	r0, 80025b6 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x3a>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
 80025a6:	1a9b      	subs	r3, r3, r2
 80025a8:	fbb3 f2f1 	udiv	r2, r3, r1
                if (stream.skip_frames > 0)
 80025ac:	4299      	cmp	r1, r3
                {
                    stream.skip_frames--;
 80025ae:	bf98      	it	ls
 80025b0:	f102 32ff 	addls.w	r2, r2, #4294967295
 80025b4:	6262      	str	r2, [r4, #36]	@ 0x24
                    stream.doDecode = true;
 80025b6:	2301      	movs	r3, #1
 80025b8:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
        firstDrawThisFrame = true;
 80025bc:	2301      	movs	r3, #1
        SEM_POST(semDecode);
 80025be:	6c20      	ldr	r0, [r4, #64]	@ 0x40
        firstDrawThisFrame = true;
 80025c0:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        SEM_POST(semDecode);
 80025c4:	f00a fd10 	bl	800cfe8 <osSemaphoreRelease>
        if (uiHasMutex)
 80025c8:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 80025cc:	b12b      	cbz	r3, 80025da <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x5e>
            MUTEX_UNLOCK(mutexBuffers);
 80025ce:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 80025d0:	f00a fc4a 	bl	800ce68 <osMutexRelease>
            uiHasMutex = false;
 80025d4:	2300      	movs	r3, #0
 80025d6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
}
 80025da:	bd10      	pop	{r4, pc}
 80025dc:	2000de64 	.word	0x2000de64

080025e0 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025e0:	4b04      	ldr	r3, [pc, #16]	@ (80025f4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x14>)
 80025e2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80025e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 80025ea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80025ee:	f3bf 8f6f 	isb	sy
}
 80025f2:	4770      	bx	lr
 80025f4:	e000e100 	.word	0xe000e100

080025f8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 80025f8:	4603      	mov	r3, r0
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
        {
            if (streams[i].isActive == false)
 80025fa:	f890 0028 	ldrb.w	r0, [r0, #40]	@ 0x28
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 80025fe:	b570      	push	{r4, r5, r6, lr}
            if (streams[i].isActive == false)
 8002600:	b9d8      	cbnz	r0, 800263a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x42>
        streams[handle].isActive = true;
 8002602:	2201      	movs	r2, #1
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8002604:	6b9d      	ldr	r5, [r3, #56]	@ 0x38
            {
                // Reset stream parameters
                streams[i] = Stream();
 8002606:	60d8      	str	r0, [r3, #12]
        streams[handle].isActive = true;
 8002608:	629a      	str	r2, [r3, #40]	@ 0x28
                streams[i] = Stream();
 800260a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800260e:	6118      	str	r0, [r3, #16]
 8002610:	859a      	strh	r2, [r3, #44]	@ 0x2c
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8002612:	f505 223b 	add.w	r2, r5, #765952	@ 0xbb000
                streams[i] = Stream();
 8002616:	6158      	str	r0, [r3, #20]
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8002618:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
                streams[i] = Stream();
 800261c:	6198      	str	r0, [r3, #24]
 800261e:	61d8      	str	r0, [r3, #28]
 8002620:	6218      	str	r0, [r3, #32]
 8002622:	6258      	str	r0, [r3, #36]	@ 0x24
 8002624:	f883 002e 	strb.w	r0, [r3, #46]	@ 0x2e
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8002628:	e9d3 460c 	ldrd	r4, r6, [r3, #48]	@ 0x30
 800262c:	4434      	add	r4, r6
 800262e:	42a2      	cmp	r2, r4
 8002630:	d90a      	bls.n	8002648 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x50>
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 8002632:	4b0b      	ldr	r3, [pc, #44]	@ (8002660 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x68>)
 8002634:	2152      	movs	r1, #82	@ 0x52
 8002636:	4a0b      	ldr	r2, [pc, #44]	@ (8002664 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x6c>)
 8002638:	e003      	b.n	8002642 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x4a>

                return static_cast<VideoController::Handle>(i);
            }
        }

        assert(0 && "Unable to find free video stream handle!");
 800263a:	4b0b      	ldr	r3, [pc, #44]	@ (8002668 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x70>)
 800263c:	f240 11c5 	movw	r1, #453	@ 0x1c5
 8002640:	4a0a      	ldr	r2, [pc, #40]	@ (800266c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x74>)
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 8002642:	480b      	ldr	r0, [pc, #44]	@ (8002670 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x78>)
 8002644:	f023 fa32 	bl	8025aac <__assert_func>
        decodeBuffers[handle] = (uint32_t*)topBufferRGB;
 8002648:	609d      	str	r5, [r3, #8]
        topBufferRGB += sizeOfOneDecodeBuffer;
 800264a:	639a      	str	r2, [r3, #56]	@ 0x38
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
    {
        format = bufferFormat;
        bufferWidth = width;
 800264c:	f44f 7348 	mov.w	r3, #800	@ 0x320
        format = bufferFormat;
 8002650:	f881 0034 	strb.w	r0, [r1, #52]	@ 0x34
        bufferWidth = width;
 8002654:	86cb      	strh	r3, [r1, #54]	@ 0x36
        bufferHeight = height;
 8002656:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
        buffer = videoBuffer;
 800265a:	6308      	str	r0, [r1, #48]	@ 0x30
        bufferHeight = height;
 800265c:	870b      	strh	r3, [r1, #56]	@ 0x38
    }
 800265e:	bd70      	pop	{r4, r5, r6, pc}
 8002660:	08028473 	.word	0x08028473
 8002664:	080284ae 	.word	0x080284ae
 8002668:	080282bc 	.word	0x080282bc
 800266c:	080282ec 	.word	0x080282ec
 8002670:	0802780a 	.word	0x0802780a

08002674 <_ZN8touchgfx21AbstractPainterRGB565C1Ev>:
        : widgetWidth(0)
 8002674:	2300      	movs	r3, #0
public:
    static const uint16_t RMASK = 0xF800; ///< Mask for red   (1111100000000000)
    static const uint16_t GMASK = 0x07E0; ///< Mask for green (0000011111100000)
    static const uint16_t BMASK = 0x001F; ///< Mask for blue  (0000000000011111)

    AbstractPainterRGB565()
 8002676:	b570      	push	{r4, r5, r6, lr}
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8002678:	4e12      	ldr	r6, [pc, #72]	@ (80026c4 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x50>)
 800267a:	4605      	mov	r5, r0
 800267c:	8083      	strh	r3, [r0, #4]
        : AbstractPainter()
 800267e:	4b12      	ldr	r3, [pc, #72]	@ (80026c8 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x54>)
 8002680:	6003      	str	r3, [r0, #0]
 8002682:	6833      	ldr	r3, [r6, #0]
 8002684:	f893 2076 	ldrb.w	r2, [r3, #118]	@ 0x76
 8002688:	b10a      	cbz	r2, 800268e <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x1a>
 800268a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800268c:	b900      	cbnz	r0, 8002690 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x1c>
        return instance->lcdRef;
 800268e:	6898      	ldr	r0, [r3, #8]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 8002690:	6803      	ldr	r3, [r0, #0]
 8002692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002694:	4798      	blx	r3
        return auxiliaryLCD;
 8002696:	6833      	ldr	r3, [r6, #0]
 8002698:	fab0 f480 	clz	r4, r0
 800269c:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800269e:	0964      	lsrs	r4, r4, #5
        if (HAL::getInstance()->getAuxiliaryLCD())
 80026a0:	b130      	cbz	r0, 80026b0 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x3c>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 80026a2:	6803      	ldr	r3, [r0, #0]
 80026a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026a6:	4798      	blx	r3
 80026a8:	2800      	cmp	r0, #0
 80026aa:	bf08      	it	eq
 80026ac:	f044 0401 	orreq.w	r4, r4, #1
    {
        assert(compatibleFramebuffer(Bitmap::RGB565) && "The chosen painter only works with RGB565 displays");
 80026b0:	b92c      	cbnz	r4, 80026be <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x4a>
 80026b2:	4b06      	ldr	r3, [pc, #24]	@ (80026cc <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x58>)
 80026b4:	212c      	movs	r1, #44	@ 0x2c
 80026b6:	4a06      	ldr	r2, [pc, #24]	@ (80026d0 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x5c>)
 80026b8:	4806      	ldr	r0, [pc, #24]	@ (80026d4 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x60>)
 80026ba:	f023 f9f7 	bl	8025aac <__assert_func>
    }
 80026be:	4628      	mov	r0, r5
 80026c0:	bd70      	pop	{r4, r5, r6, pc}
 80026c2:	bf00      	nop
 80026c4:	20027b94 	.word	0x20027b94
 80026c8:	08028754 	.word	0x08028754
 80026cc:	08028651 	.word	0x08028651
 80026d0:	080286af 	.word	0x080286af
 80026d4:	080286e8 	.word	0x080286e8

080026d8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>:
    void decoderTaskEntry()
 80026d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80026dc:	4604      	mov	r4, r0
                    stream.doInvalidateOnNextTick = true;
 80026de:	2601      	movs	r6, #1
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 80026e0:	f44f 67c8 	mov.w	r7, #1600	@ 0x640
            SEM_WAIT(semDecode);
 80026e4:	f04f 31ff 	mov.w	r1, #4294967295
 80026e8:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80026ea:	f00a fc41 	bl	800cf70 <osSemaphoreAcquire>
            MUTEX_LOCK(mutexBuffers);
 80026ee:	f04f 31ff 	mov.w	r1, #4294967295
 80026f2:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 80026f4:	f00a fb88 	bl	800ce08 <osMutexAcquire>
                if (stream.doDecode)
 80026f8:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80026fc:	b343      	cbz	r3, 8002750 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x78>
                    MJPEGDecoder* const decoder = mjpegDecoders[i];
 80026fe:	6865      	ldr	r5, [r4, #4]
                    if (stream.seek_to_frame > 0)
 8002700:	f8d4 8020 	ldr.w	r8, [r4, #32]
                        decoder->gotoFrame(stream.seek_to_frame);
 8002704:	682b      	ldr	r3, [r5, #0]
                    stream.doInvalidateOnNextTick = true;
 8002706:	f884 602b 	strb.w	r6, [r4, #43]	@ 0x2b
                    if (stream.seek_to_frame > 0)
 800270a:	f1b8 0f00 	cmp.w	r8, #0
 800270e:	d023      	beq.n	8002758 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x80>
                        decoder->gotoFrame(stream.seek_to_frame);
 8002710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002712:	4641      	mov	r1, r8
 8002714:	4628      	mov	r0, r5
 8002716:	4798      	blx	r3
                        stream.seek_to_frame = 0;
 8002718:	2300      	movs	r3, #0
 800271a:	6223      	str	r3, [r4, #32]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 800271c:	682b      	ldr	r3, [r5, #0]
 800271e:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8002722:	9700      	str	r7, [sp, #0]
 8002724:	4628      	mov	r0, r5
 8002726:	f8d3 8014 	ldr.w	r8, [r3, #20]
 800272a:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800272e:	68a1      	ldr	r1, [r4, #8]
 8002730:	47c0      	blx	r8
                    stream.frameCount++;
 8002732:	6923      	ldr	r3, [r4, #16]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8002734:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c
                    stream.frameCount++;
 8002738:	3301      	adds	r3, #1
 800273a:	6123      	str	r3, [r4, #16]
                    if (stream.hasMoreFrames)
 800273c:	b1f0      	cbz	r0, 800277c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xa4>
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 800273e:	682b      	ldr	r3, [r5, #0]
 8002740:	4628      	mov	r0, r5
 8002742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002744:	4798      	blx	r3
 8002746:	3801      	subs	r0, #1
                    stream.doDecode = false;
 8002748:	2300      	movs	r3, #0
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 800274a:	60e0      	str	r0, [r4, #12]
                    stream.doDecode = false;
 800274c:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
            MUTEX_UNLOCK(mutexBuffers);
 8002750:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8002752:	f00a fb89 	bl	800ce68 <osMutexRelease>
        while (1)
 8002756:	e7c5      	b.n	80026e4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xc>
                        if (stream.skip_frames > 0)
 8002758:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800275a:	2a00      	cmp	r2, #0
 800275c:	d0de      	beq.n	800271c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x44>
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
 800275e:	4628      	mov	r0, r5
 8002760:	e9d3 9309 	ldrd	r9, r3, [r3, #36]	@ 0x24
 8002764:	4798      	blx	r3
 8002766:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002768:	4401      	add	r1, r0
 800276a:	4628      	mov	r0, r5
 800276c:	47c8      	blx	r9
                            stream.frameCount += stream.skip_frames;
 800276e:	6923      	ldr	r3, [r4, #16]
 8002770:	6a62      	ldr	r2, [r4, #36]	@ 0x24
                            stream.skip_frames = 0;
 8002772:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
                            stream.frameCount += stream.skip_frames;
 8002776:	4413      	add	r3, r2
 8002778:	6123      	str	r3, [r4, #16]
 800277a:	e7cf      	b.n	800271c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x44>
 800277c:	2001      	movs	r0, #1
 800277e:	e7e3      	b.n	8002748 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x70>

08002780 <videoTaskFunc>:
    }
}

extern "C" void videoTaskFunc(void *argument)
{
    videoController.decoderTaskEntry();
 8002780:	4801      	ldr	r0, [pc, #4]	@ (8002788 <videoTaskFunc+0x8>)
{
 8002782:	b508      	push	{r3, lr}
    videoController.decoderTaskEntry();
 8002784:	f7ff ffa8 	bl	80026d8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>
 8002788:	2000de64 	.word	0x2000de64

0800278c <_GLOBAL__sub_I_mjpegdecoder1>:
}
 800278c:	b538      	push	{r3, r4, r5, lr}
HardwareMJPEGDecoder mjpegdecoder1;
 800278e:	4814      	ldr	r0, [pc, #80]	@ (80027e0 <_GLOBAL__sub_I_mjpegdecoder1+0x54>)
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 8002790:	2500      	movs	r5, #0
 8002792:	f7fe fd53 	bl	800123c <_ZN20HardwareMJPEGDecoderC1Ev>
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8002796:	4c13      	ldr	r4, [pc, #76]	@ (80027e4 <_GLOBAL__sub_I_mjpegdecoder1+0x58>)
 8002798:	4b13      	ldr	r3, [pc, #76]	@ (80027e8 <_GLOBAL__sub_I_mjpegdecoder1+0x5c>)
        semDecode = SEM_CREATE(); // Binary semaphore
 800279a:	462a      	mov	r2, r5
 800279c:	4629      	mov	r1, r5
 800279e:	2001      	movs	r0, #1
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 80027a0:	6023      	str	r3, [r4, #0]
 80027a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 80027a6:	63a5      	str	r5, [r4, #56]	@ 0x38
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 80027a8:	87a3      	strh	r3, [r4, #60]	@ 0x3c
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 80027aa:	85a3      	strh	r3, [r4, #44]	@ 0x2c
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 80027ac:	f884 503e 	strb.w	r5, [r4, #62]	@ 0x3e
                   doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
 80027b0:	f884 502e 	strb.w	r5, [r4, #46]	@ 0x2e
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 80027b4:	e9c4 550c 	strd	r5, r5, [r4, #48]	@ 0x30
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 80027b8:	e9c4 5510 	strd	r5, r5, [r4, #64]	@ 0x40
        memset(decodeBuffers, 0, sizeof(decodeBuffers));
 80027bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 80027c0:	e9c4 5503 	strd	r5, r5, [r4, #12]
 80027c4:	e9c4 5505 	strd	r5, r5, [r4, #20]
                   seek_to_frame(0), skip_frames(0),
 80027c8:	e9c4 5507 	strd	r5, r5, [r4, #28]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 80027cc:	e9c4 5509 	strd	r5, r5, [r4, #36]	@ 0x24
        semDecode = SEM_CREATE(); // Binary semaphore
 80027d0:	f00a fb76 	bl	800cec0 <osSemaphoreNew>
 80027d4:	6420      	str	r0, [r4, #64]	@ 0x40
        mutexBuffers = MUTEX_CREATE();
 80027d6:	4628      	mov	r0, r5
 80027d8:	f00a fad4 	bl	800cd84 <osMutexNew>
 80027dc:	6460      	str	r0, [r4, #68]	@ 0x44
}
 80027de:	bd38      	pop	{r3, r4, r5, pc}
 80027e0:	2000deac 	.word	0x2000deac
 80027e4:	2000de64 	.word	0x2000de64
 80027e8:	08028774 	.word	0x08028774

080027ec <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 80027ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027f0:	b08d      	sub	sp, #52	@ 0x34
 80027f2:	9207      	str	r2, [sp, #28]
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr, *pOutAddr2;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
 80027f4:	f44f 72c0 	mov.w	r2, #384	@ 0x180
  currentMCU = BlockIndex;
 80027f8:	f8dd 801c 	ldr.w	r8, [sp, #28]
{
 80027fc:	9001      	str	r0, [sp, #4]
 80027fe:	910b      	str	r1, [sp, #44]	@ 0x2c
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
 8002800:	fbb3 f3f2 	udiv	r3, r3, r2
 8002804:	9306      	str	r3, [sp, #24]

  while(currentMCU < (numberMCU + BlockIndex))
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 8002806:	4b6c      	ldr	r3, [pc, #432]	@ (80029b8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1cc>)
 8002808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800280a:	9305      	str	r3, [sp, #20]
  while(currentMCU < (numberMCU + BlockIndex))
 800280c:	2300      	movs	r3, #0
 800280e:	e9dd 2106 	ldrd	r2, r1, [sp, #24]
 8002812:	440a      	add	r2, r1
 8002814:	4542      	cmp	r2, r8
 8002816:	d808      	bhi.n	800282a <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x3e>
 8002818:	b11b      	cbz	r3, 8002822 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x36>
 800281a:	4b67      	ldr	r3, [pc, #412]	@ (80029b8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1cc>)
 800281c:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8002820:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
  }
  return numberMCU;
}
 8002822:	9806      	ldr	r0, [sp, #24]
 8002824:	b00d      	add	sp, #52	@ 0x34
 8002826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 800282a:	ea4f 1308 	mov.w	r3, r8, lsl #4
 800282e:	9a05      	ldr	r2, [sp, #20]
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 8002830:	9905      	ldr	r1, [sp, #20]
    currentMCU++;
 8002832:	f108 0801 	add.w	r8, r8, #1
    for(i= 0; i <  16; i+=2)
 8002836:	f04f 0b00 	mov.w	fp, #0
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 800283a:	fbb3 f2f2 	udiv	r2, r3, r2
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 800283e:	fb01 3312 	mls	r3, r1, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002842:	f44f 41c8 	mov.w	r1, #25600	@ 0x6400
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	fb01 3302 	mla	r3, r1, r2, r3
 800284c:	9302      	str	r3, [sp, #8]
    pChrom = pInBuffer + 256; /* pChroma = pInBuffer + 4*64 */
 800284e:	9b01      	ldr	r3, [sp, #4]
 8002850:	f503 7c80 	add.w	ip, r3, #256	@ 0x100
    pLum = pInBuffer;
 8002854:	4699      	mov	r9, r3
      if(refline < JPEG_ConvertorParams.ScaledWidth * 480)
 8002856:	9b02      	ldr	r3, [sp, #8]
 8002858:	4a58      	ldr	r2, [pc, #352]	@ (80029bc <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1d0>)
 800285a:	4293      	cmp	r3, r2
 800285c:	f200 8099 	bhi.w	8002992 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1a6>
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
 8002860:	f503 65c8 	add.w	r5, r3, #1600	@ 0x640
 8002864:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002866:	f8cd 900c 	str.w	r9, [sp, #12]
 800286a:	441d      	add	r5, r3
        for(k= 0; k<2; k++)
 800286c:	f10c 0308 	add.w	r3, ip, #8
 8002870:	930a      	str	r3, [sp, #40]	@ 0x28
          for(j=0; j < 8; j+=2)
 8002872:	f10c 33ff 	add.w	r3, ip, #4294967295
 8002876:	9f03      	ldr	r7, [sp, #12]
    for(i= 0; i <  16; i+=2)
 8002878:	2600      	movs	r6, #0
 800287a:	9304      	str	r3, [sp, #16]
 800287c:	f5a5 63c8 	sub.w	r3, r5, #1600	@ 0x640
 8002880:	9308      	str	r3, [sp, #32]
 8002882:	9b08      	ldr	r3, [sp, #32]
          for(j=0; j < 8; j+=2)
 8002884:	3702      	adds	r7, #2
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 8002886:	484e      	ldr	r0, [pc, #312]	@ (80029c0 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1d4>)
 8002888:	4433      	add	r3, r6
            ycomp = (int32_t)(*(pLum +j));
 800288a:	f817 ec02 	ldrb.w	lr, [r7, #-2]
 800288e:	9309      	str	r3, [sp, #36]	@ 0x24
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 8002890:	9b04      	ldr	r3, [sp, #16]
 8002892:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8002896:	9304      	str	r3, [sp, #16]
 8002898:	4b4a      	ldr	r3, [pc, #296]	@ (80029c4 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1d8>)
 800289a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 800289e:	9b04      	ldr	r3, [sp, #16]
 80028a0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80028a4:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 80028a8:	4847      	ldr	r0, [pc, #284]	@ (80029c8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1dc>)
 80028aa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80028ae:	4847      	ldr	r0, [pc, #284]	@ (80029cc <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1e0>)
 80028b0:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80028b4:	4413      	add	r3, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80028b6:	4a46      	ldr	r2, [pc, #280]	@ (80029d0 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1e4>)
 80028b8:	4610      	mov	r0, r2
 80028ba:	4414      	add	r4, r2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80028bc:	eb00 4323 	add.w	r3, r0, r3, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80028c0:	eb04 020e 	add.w	r2, r4, lr
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 80028c4:	4401      	add	r1, r0
            *(__IO uint16_t *)pOutAddr =
 80028c6:	9808      	ldr	r0, [sp, #32]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80028c8:	f892 a100 	ldrb.w	sl, [r2, #256]	@ 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80028cc:	eb03 020e 	add.w	r2, r3, lr
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 80028d0:	448e      	add	lr, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80028d2:	f892 2100 	ldrb.w	r2, [r2, #256]	@ 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80028d6:	ea4f 0ada 	mov.w	sl, sl, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80028da:	f89e e100 	ldrb.w	lr, [lr, #256]	@ 0x100
 80028de:	0892      	lsrs	r2, r2, #2
 80028e0:	0152      	lsls	r2, r2, #5
 80028e2:	ea42 22ca 	orr.w	r2, r2, sl, lsl #11
 80028e6:	ea42 02de 	orr.w	r2, r2, lr, lsr #3
            *(__IO uint16_t *)pOutAddr =
 80028ea:	5382      	strh	r2, [r0, r6]
            ycomp = (int32_t)(*(pLum +j +1));
 80028ec:	f817 ec01 	ldrb.w	lr, [r7, #-1]
            *((__IO uint16_t *)(pOutAddr + 2)) =
 80028f0:	9809      	ldr	r0, [sp, #36]	@ 0x24
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80028f2:	eb04 020e 	add.w	r2, r4, lr
 80028f6:	f892 a100 	ldrb.w	sl, [r2, #256]	@ 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80028fa:	eb03 020e 	add.w	r2, r3, lr
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 80028fe:	448e      	add	lr, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002900:	f892 2100 	ldrb.w	r2, [r2, #256]	@ 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002904:	ea4f 0ada 	mov.w	sl, sl, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002908:	f89e e100 	ldrb.w	lr, [lr, #256]	@ 0x100
 800290c:	0892      	lsrs	r2, r2, #2
 800290e:	0152      	lsls	r2, r2, #5
 8002910:	ea42 22ca 	orr.w	r2, r2, sl, lsl #11
 8002914:	ea42 02de 	orr.w	r2, r2, lr, lsr #3
            *((__IO uint16_t *)(pOutAddr + 2)) =
 8002918:	8042      	strh	r2, [r0, #2]
            ycomp = (int32_t)(*(pLum +j +8));
 800291a:	f897 e006 	ldrb.w	lr, [r7, #6]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800291e:	eb04 020e 	add.w	r2, r4, lr
 8002922:	f892 a100 	ldrb.w	sl, [r2, #256]	@ 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002926:	eb03 020e 	add.w	r2, r3, lr
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 800292a:	448e      	add	lr, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800292c:	f892 2100 	ldrb.w	r2, [r2, #256]	@ 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002930:	ea4f 0ada 	mov.w	sl, sl, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002934:	f89e e100 	ldrb.w	lr, [lr, #256]	@ 0x100
 8002938:	0892      	lsrs	r2, r2, #2
 800293a:	0152      	lsls	r2, r2, #5
 800293c:	ea42 22ca 	orr.w	r2, r2, sl, lsl #11
 8002940:	ea42 02de 	orr.w	r2, r2, lr, lsr #3
            *(__IO uint16_t *)pOutAddr2 =
 8002944:	53aa      	strh	r2, [r5, r6]
            ycomp = (int32_t)(*(pLum +j +8 +1));
 8002946:	79fa      	ldrb	r2, [r7, #7]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002948:	4413      	add	r3, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800294a:	4414      	add	r4, r2
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 800294c:	4411      	add	r1, r2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800294e:	f893 3100 	ldrb.w	r3, [r3, #256]	@ 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002952:	f894 4100 	ldrb.w	r4, [r4, #256]	@ 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002956:	089b      	lsrs	r3, r3, #2
 8002958:	f891 2100 	ldrb.w	r2, [r1, #256]	@ 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800295c:	08e4      	lsrs	r4, r4, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800295e:	015b      	lsls	r3, r3, #5
 8002960:	ea43 23c4 	orr.w	r3, r3, r4, lsl #11
 8002964:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
            *((__IO uint16_t *)(pOutAddr2 +2)) =
 8002968:	19aa      	adds	r2, r5, r6
          for(j=0; j < 8; j+=2)
 800296a:	3604      	adds	r6, #4
            *((__IO uint16_t *)(pOutAddr2 +2)) =
 800296c:	8053      	strh	r3, [r2, #2]
          for(j=0; j < 8; j+=2)
 800296e:	2e10      	cmp	r6, #16
 8002970:	d187      	bne.n	8002882 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x96>
          pLum += 64;
 8002972:	9b03      	ldr	r3, [sp, #12]
            pChrom++;
 8002974:	f10c 0c04 	add.w	ip, ip, #4
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
 8002978:	3510      	adds	r5, #16
          pLum += 64;
 800297a:	3340      	adds	r3, #64	@ 0x40
 800297c:	9303      	str	r3, [sp, #12]
        for(k= 0; k<2; k++)
 800297e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002980:	4563      	cmp	r3, ip
 8002982:	f47f af76 	bne.w	8002872 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x86>
        refline += 2*JPEG_ConvertorParams.ScaledWidth;
 8002986:	9b02      	ldr	r3, [sp, #8]
        pLum = pLum - 128 + 16;
 8002988:	f109 0910 	add.w	r9, r9, #16
        refline += 2*JPEG_ConvertorParams.ScaledWidth;
 800298c:	f503 6348 	add.w	r3, r3, #3200	@ 0xc80
 8002990:	9302      	str	r3, [sp, #8]
    for(i= 0; i <  16; i+=2)
 8002992:	f10b 0b02 	add.w	fp, fp, #2
 8002996:	f1bb 0f10 	cmp.w	fp, #16
 800299a:	d105      	bne.n	80029a8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1bc>
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
 800299c:	9b01      	ldr	r3, [sp, #4]
 800299e:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80029a2:	9301      	str	r3, [sp, #4]
 80029a4:	2301      	movs	r3, #1
 80029a6:	e732      	b.n	800280e <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x22>
      if(i == 8)
 80029a8:	f1bb 0f08 	cmp.w	fp, #8
        pLum = pInBuffer + 128;
 80029ac:	bf04      	itt	eq
 80029ae:	9b01      	ldreq	r3, [sp, #4]
 80029b0:	f103 0980 	addeq.w	r9, r3, #128	@ 0x80
 80029b4:	e74f      	b.n	8002856 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x6a>
 80029b6:	bf00      	nop
 80029b8:	20011ef0 	.word	0x20011ef0
 80029bc:	000bb7ff 	.word	0x000bb7ff
 80029c0:	20011af0 	.word	0x20011af0
 80029c4:	200116f0 	.word	0x200116f0
 80029c8:	200112f0 	.word	0x200112f0
 80029cc:	20010ef0 	.word	0x20010ef0
 80029d0:	080287ac 	.word	0x080287ac

080029d4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 80029d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
 80029d8:	0a1b      	lsrs	r3, r3, #8
{
 80029da:	b08d      	sub	sp, #52	@ 0x34
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
 80029dc:	9305      	str	r3, [sp, #20]
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 80029de:	4b4f      	ldr	r3, [pc, #316]	@ (8002b1c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x148>)
{
 80029e0:	9206      	str	r2, [sp, #24]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 80029e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
  currentMCU = BlockIndex;
 80029e4:	f8dd e018 	ldr.w	lr, [sp, #24]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 80029e8:	9202      	str	r2, [sp, #8]

    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 80029ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28

    pLum = pInBuffer;

    for(i= 0; i <  8; i++)
    {
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 80029ec:	691b      	ldr	r3, [r3, #16]
{
 80029ee:	910a      	str	r1, [sp, #40]	@ 0x28
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 80029f0:	9203      	str	r2, [sp, #12]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 80029f2:	9307      	str	r3, [sp, #28]
  while(currentMCU < (numberMCU + BlockIndex))
 80029f4:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 80029f8:	4413      	add	r3, r2
 80029fa:	4573      	cmp	r3, lr
 80029fc:	d803      	bhi.n	8002a06 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x32>
    }

    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
  }
  return numberMCU;
}
 80029fe:	9805      	ldr	r0, [sp, #20]
 8002a00:	b00d      	add	sp, #52	@ 0x34
 8002a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 8002a06:	ea4f 130e 	mov.w	r3, lr, lsl #4
 8002a0a:	9a02      	ldr	r2, [sp, #8]
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 8002a0c:	9c02      	ldr	r4, [sp, #8]
    currentMCU++;
 8002a0e:	f10e 0e01 	add.w	lr, lr, #1
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002a12:	9903      	ldr	r1, [sp, #12]
    pChrom = pInBuffer + 128; /* pChroma = pInBuffer + 2*64 */
 8002a14:	f100 0780 	add.w	r7, r0, #128	@ 0x80
    pLum = pInBuffer;
 8002a18:	4682      	mov	sl, r0
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 8002a1a:	fbb3 f2f2 	udiv	r2, r3, r2
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 8002a1e:	fb04 3312 	mls	r3, r4, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002a22:	4351      	muls	r1, r2
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8002a2a:	9300      	str	r3, [sp, #0]
    pChrom = pInBuffer + 128; /* pChroma = pInBuffer + 2*64 */
 8002a2c:	2308      	movs	r3, #8
 8002a2e:	9304      	str	r3, [sp, #16]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002a30:	9b07      	ldr	r3, [sp, #28]
 8002a32:	9a00      	ldr	r2, [sp, #0]
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d969      	bls.n	8002b0c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x138>
        pOutAddr = pOutBuffer + refline;
 8002a38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002a3a:	46d0      	mov	r8, sl
 8002a3c:	eb03 0902 	add.w	r9, r3, r2
        for(k= 0; k<2; k++)
 8002a40:	f107 0308 	add.w	r3, r7, #8
 8002a44:	9308      	str	r3, [sp, #32]
          for(j=0; j < 8; j+=2)
 8002a46:	1e7b      	subs	r3, r7, #1
    pChrom = pInBuffer + 128; /* pChroma = pInBuffer + 2*64 */
 8002a48:	2400      	movs	r4, #0
 8002a4a:	9301      	str	r3, [sp, #4]
            ycomp = (int32_t)(*(pLum +j +1));
 8002a4c:	f108 0301 	add.w	r3, r8, #1
 8002a50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002a52:	eb09 0384 	add.w	r3, r9, r4, lsl #2
            ycomp = (int32_t)(*(pLum +j));
 8002a56:	f818 c014 	ldrb.w	ip, [r8, r4, lsl #1]
 8002a5a:	9309      	str	r3, [sp, #36]	@ 0x24
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 8002a5c:	9b01      	ldr	r3, [sp, #4]
 8002a5e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8002a62:	9301      	str	r3, [sp, #4]
 8002a64:	4b2e      	ldr	r3, [pc, #184]	@ (8002b20 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x14c>)
 8002a66:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 8002a6a:	9b01      	ldr	r3, [sp, #4]
 8002a6c:	f893 1040 	ldrb.w	r1, [r3, #64]	@ 0x40
 8002a70:	4b2c      	ldr	r3, [pc, #176]	@ (8002b24 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x150>)
 8002a72:	f853 6021 	ldr.w	r6, [r3, r1, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 8002a76:	4b2c      	ldr	r3, [pc, #176]	@ (8002b28 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x154>)
 8002a78:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8002a7c:	4b2b      	ldr	r3, [pc, #172]	@ (8002b2c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x158>)
 8002a7e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002a82:	4411      	add	r1, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002a84:	4a2a      	ldr	r2, [pc, #168]	@ (8002b30 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x15c>)
 8002a86:	4613      	mov	r3, r2
 8002a88:	4416      	add	r6, r2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002a8a:	eb03 4121 	add.w	r1, r3, r1, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002a8e:	eb06 020c 	add.w	r2, r6, ip
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002a92:	441d      	add	r5, r3
            ycomp = (int32_t)(*(pLum +j +1));
 8002a94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002a96:	f892 b100 	ldrb.w	fp, [r2, #256]	@ 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002a9a:	eb01 020c 	add.w	r2, r1, ip
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002a9e:	44ac      	add	ip, r5
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002aa0:	f892 2100 	ldrb.w	r2, [r2, #256]	@ 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002aa4:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002aa8:	f89c c100 	ldrb.w	ip, [ip, #256]	@ 0x100
 8002aac:	0892      	lsrs	r2, r2, #2
 8002aae:	0152      	lsls	r2, r2, #5
 8002ab0:	ea42 22cb 	orr.w	r2, r2, fp, lsl #11
 8002ab4:	ea42 02dc 	orr.w	r2, r2, ip, lsr #3
            *(__IO uint16_t *)pOutAddr =
 8002ab8:	f829 2024 	strh.w	r2, [r9, r4, lsl #2]
            ycomp = (int32_t)(*(pLum +j +1));
 8002abc:	f813 2014 	ldrb.w	r2, [r3, r4, lsl #1]
          for(j=0; j < 8; j+=2)
 8002ac0:	3401      	adds	r4, #1
            *((__IO uint16_t *)(pOutAddr + 2)) =
 8002ac2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002ac4:	4411      	add	r1, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002ac6:	4416      	add	r6, r2
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002ac8:	4415      	add	r5, r2
          for(j=0; j < 8; j+=2)
 8002aca:	2c04      	cmp	r4, #4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002acc:	f891 1100 	ldrb.w	r1, [r1, #256]	@ 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002ad0:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002ad4:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8002ad8:	f895 2100 	ldrb.w	r2, [r5, #256]	@ 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002adc:	ea4f 06d6 	mov.w	r6, r6, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002ae0:	ea4f 1141 	mov.w	r1, r1, lsl #5
 8002ae4:	ea41 21c6 	orr.w	r1, r1, r6, lsl #11
 8002ae8:	ea41 01d2 	orr.w	r1, r1, r2, lsr #3
            *((__IO uint16_t *)(pOutAddr + 2)) =
 8002aec:	8059      	strh	r1, [r3, #2]
          for(j=0; j < 8; j+=2)
 8002aee:	d1b0      	bne.n	8002a52 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x7e>
            pChrom++;
 8002af0:	3704      	adds	r7, #4
        for(k= 0; k<2; k++)
 8002af2:	9b08      	ldr	r3, [sp, #32]
            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 8002af4:	f109 0910 	add.w	r9, r9, #16
          pLum += 64;
 8002af8:	f108 0840 	add.w	r8, r8, #64	@ 0x40
        for(k= 0; k<2; k++)
 8002afc:	42bb      	cmp	r3, r7
 8002afe:	d1a2      	bne.n	8002a46 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x72>
        refline += JPEG_ConvertorParams.ScaledWidth;
 8002b00:	9a00      	ldr	r2, [sp, #0]
        pLum = pLum - 128 + 8;
 8002b02:	f10a 0a08 	add.w	sl, sl, #8
        refline += JPEG_ConvertorParams.ScaledWidth;
 8002b06:	9b03      	ldr	r3, [sp, #12]
 8002b08:	441a      	add	r2, r3
 8002b0a:	9200      	str	r2, [sp, #0]
    for(i= 0; i <  8; i++)
 8002b0c:	9b04      	ldr	r3, [sp, #16]
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	9304      	str	r3, [sp, #16]
 8002b12:	d18d      	bne.n	8002a30 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x5c>
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
 8002b14:	f500 7080 	add.w	r0, r0, #256	@ 0x100
 8002b18:	e76c      	b.n	80029f4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x20>
 8002b1a:	bf00      	nop
 8002b1c:	20011ef0 	.word	0x20011ef0
 8002b20:	200116f0 	.word	0x200116f0
 8002b24:	20011af0 	.word	0x20011af0
 8002b28:	200112f0 	.word	0x200112f0
 8002b2c:	20010ef0 	.word	0x20010ef0
 8002b30:	080287ac 	.word	0x080287ac

08002b34 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 8002b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b38:	4692      	mov	sl, r2
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 8002b3a:	22c0      	movs	r2, #192	@ 0xc0
{
 8002b3c:	b089      	sub	sp, #36	@ 0x24
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 8002b3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b42:	9304      	str	r3, [sp, #16]
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002b44:	4b34      	ldr	r3, [pc, #208]	@ (8002c18 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xe4>)
{
 8002b46:	9107      	str	r1, [sp, #28]
  currentMCU = BlockIndex;
 8002b48:	4651      	mov	r1, sl
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002b4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b4c:	9200      	str	r2, [sp, #0]

    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002b4e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28

    pLum = pInBuffer;

    for(i= 0; i <  8; i++)
    {
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002b50:	691b      	ldr	r3, [r3, #16]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002b52:	9201      	str	r2, [sp, #4]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002b54:	9305      	str	r3, [sp, #20]
  while(currentMCU < (numberMCU + BlockIndex))
 8002b56:	9b04      	ldr	r3, [sp, #16]
 8002b58:	4453      	add	r3, sl
 8002b5a:	428b      	cmp	r3, r1
 8002b5c:	d803      	bhi.n	8002b66 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x32>
    }

    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
  }
  return numberMCU;
}
 8002b5e:	9804      	ldr	r0, [sp, #16]
 8002b60:	b009      	add	sp, #36	@ 0x24
 8002b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002b66:	00cb      	lsls	r3, r1, #3
 8002b68:	9a00      	ldr	r2, [sp, #0]
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 8002b6a:	9d00      	ldr	r5, [sp, #0]
    currentMCU++;
 8002b6c:	3101      	adds	r1, #1
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002b6e:	9c01      	ldr	r4, [sp, #4]
    pChrom = pInBuffer + 64; /* pChroma = pInBuffer + 4*64 */
 8002b70:	f100 0640 	add.w	r6, r0, #64	@ 0x40
    pLum = pInBuffer;
 8002b74:	4684      	mov	ip, r0
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002b76:	fbb3 f2f2 	udiv	r2, r3, r2
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 8002b7a:	fb05 3312 	mls	r3, r5, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002b7e:	4354      	muls	r4, r2
    pChrom = pInBuffer + 64; /* pChroma = pInBuffer + 4*64 */
 8002b80:	2208      	movs	r2, #8
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002b82:	005b      	lsls	r3, r3, #1
    pChrom = pInBuffer + 64; /* pChroma = pInBuffer + 4*64 */
 8002b84:	9203      	str	r2, [sp, #12]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002b86:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002b8a:	9a05      	ldr	r2, [sp, #20]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d93c      	bls.n	8002c0a <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xd6>
        pOutAddr = pOutBuffer+ refline;
 8002b90:	9a07      	ldr	r2, [sp, #28]
 8002b92:	f106 3eff 	add.w	lr, r6, #4294967295
 8002b96:	18d4      	adds	r4, r2, r3
          for(j=0; j < 8; j++)
 8002b98:	f10c 32ff 	add.w	r2, ip, #4294967295
 8002b9c:	9202      	str	r2, [sp, #8]
 8002b9e:	f104 0210 	add.w	r2, r4, #16
 8002ba2:	9206      	str	r2, [sp, #24]
            ycomp = (int32_t)(*(pLum +j));
 8002ba4:	9f02      	ldr	r7, [sp, #8]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 8002ba6:	f81e 8f01 	ldrb.w	r8, [lr, #1]!
            ycomp = (int32_t)(*(pLum +j));
 8002baa:	f817 2f01 	ldrb.w	r2, [r7, #1]!
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 8002bae:	f89e 9040 	ldrb.w	r9, [lr, #64]	@ 0x40
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002bb2:	4d1a      	ldr	r5, [pc, #104]	@ (8002c1c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xe8>)
            ycomp = (int32_t)(*(pLum +j));
 8002bb4:	9702      	str	r7, [sp, #8]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002bb6:	4f1a      	ldr	r7, [pc, #104]	@ (8002c20 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xec>)
 8002bb8:	442a      	add	r2, r5
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002bba:	4d1a      	ldr	r5, [pc, #104]	@ (8002c24 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xf0>)
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002bbc:	f857 7029 	ldr.w	r7, [r7, r9, lsl #2]
 8002bc0:	4417      	add	r7, r2
 8002bc2:	f897 b100 	ldrb.w	fp, [r7, #256]	@ 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002bc6:	f855 7028 	ldr.w	r7, [r5, r8, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 8002bca:	4d17      	ldr	r5, [pc, #92]	@ (8002c28 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xf4>)
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002bcc:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002bd0:	4417      	add	r7, r2
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 8002bd2:	f855 9029 	ldr.w	r9, [r5, r9, lsl #2]
 8002bd6:	4d15      	ldr	r5, [pc, #84]	@ (8002c2c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xf8>)
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002bd8:	f897 7100 	ldrb.w	r7, [r7, #256]	@ 0x100
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 8002bdc:	f855 8028 	ldr.w	r8, [r5, r8, lsl #2]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002be0:	08ff      	lsrs	r7, r7, #3
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 8002be2:	44c1      	add	r9, r8
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002be4:	ea47 27cb 	orr.w	r7, r7, fp, lsl #11
 8002be8:	eb02 4229 	add.w	r2, r2, r9, asr #16
 8002bec:	f892 2100 	ldrb.w	r2, [r2, #256]	@ 0x100
 8002bf0:	0892      	lsrs	r2, r2, #2
 8002bf2:	ea47 1742 	orr.w	r7, r7, r2, lsl #5
          for(j=0; j < 8; j++)
 8002bf6:	9a06      	ldr	r2, [sp, #24]
            *(__IO uint16_t *)pOutAddr =
 8002bf8:	f824 7b02 	strh.w	r7, [r4], #2
          for(j=0; j < 8; j++)
 8002bfc:	4294      	cmp	r4, r2
 8002bfe:	d1d1      	bne.n	8002ba4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x70>
        refline += JPEG_ConvertorParams.ScaledWidth;
 8002c00:	9a01      	ldr	r2, [sp, #4]
            pChrom++;
 8002c02:	3608      	adds	r6, #8
          pLum += 8;
 8002c04:	f10c 0c08 	add.w	ip, ip, #8
        refline += JPEG_ConvertorParams.ScaledWidth;
 8002c08:	4413      	add	r3, r2
    for(i= 0; i <  8; i++)
 8002c0a:	9a03      	ldr	r2, [sp, #12]
 8002c0c:	3a01      	subs	r2, #1
 8002c0e:	9203      	str	r2, [sp, #12]
 8002c10:	d1bb      	bne.n	8002b8a <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x56>
    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
 8002c12:	30c0      	adds	r0, #192	@ 0xc0
 8002c14:	e79f      	b.n	8002b56 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x22>
 8002c16:	bf00      	nop
 8002c18:	20011ef0 	.word	0x20011ef0
 8002c1c:	080287ac 	.word	0x080287ac
 8002c20:	20011af0 	.word	0x20011af0
 8002c24:	200116f0 	.word	0x200116f0
 8002c28:	200112f0 	.word	0x200112f0
 8002c2c:	20010ef0 	.word	0x20010ef0

08002c30 <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 8002c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c34:	b085      	sub	sp, #20
 8002c36:	4604      	mov	r4, r0
  uint32_t refline;

  uint32_t i,j, ySample;
  uint8_t *pOutAddr,  *pLum;

  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
 8002c38:	0998      	lsrs	r0, r3, #6
{
 8002c3a:	9102      	str	r1, [sp, #8]
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
 8002c3c:	eb02 1393 	add.w	r3, r2, r3, lsr #6
  {
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002c40:	491a      	ldr	r1, [pc, #104]	@ (8002cac <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x7c>)
  while(currentMCU < (numberMCU + BlockIndex))
 8002c42:	9303      	str	r3, [sp, #12]

    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002c44:	e9d1 8909 	ldrd	r8, r9, [r1, #36]	@ 0x24
    pLum = pInBuffer;

    for(i= 0; i <  8; i++)
    {
      pOutAddr = pOutBuffer + refline;
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002c48:	6909      	ldr	r1, [r1, #16]
 8002c4a:	9101      	str	r1, [sp, #4]
  while(currentMCU < (numberMCU + BlockIndex))
 8002c4c:	9b03      	ldr	r3, [sp, #12]
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d802      	bhi.n	8002c58 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x28>
    }

    pInBuffer +=  GRAY_444_BLOCK_SIZE;
  }
  return numberMCU;
}
 8002c52:	b005      	add	sp, #20
 8002c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002c58:	00d3      	lsls	r3, r2, #3
    pLum = pInBuffer;
 8002c5a:	46a4      	mov	ip, r4
    currentMCU++;
 8002c5c:	3201      	adds	r2, #1
 8002c5e:	2708      	movs	r7, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002c60:	fbb3 f1f8 	udiv	r1, r3, r8
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 8002c64:	fb08 3311 	mls	r3, r8, r1, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002c68:	fb09 f501 	mul.w	r5, r9, r1
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002c72:	9901      	ldr	r1, [sp, #4]
 8002c74:	4299      	cmp	r1, r3
 8002c76:	d915      	bls.n	8002ca4 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x74>
      pOutAddr = pOutBuffer + refline;
 8002c78:	9902      	ldr	r1, [sp, #8]
 8002c7a:	46e2      	mov	sl, ip
 8002c7c:	4419      	add	r1, r3
        for(j=0; j < 8; j++)
 8002c7e:	f101 0b10 	add.w	fp, r1, #16
          ySample =   (uint32_t)(*pLum);
 8002c82:	f81a 6b01 	ldrb.w	r6, [sl], #1
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
 8002c86:	08f5      	lsrs	r5, r6, #3
 8002c88:	08b6      	lsrs	r6, r6, #2
 8002c8a:	ea4f 2ec5 	mov.w	lr, r5, lsl #11
 8002c8e:	ea4e 1e46 	orr.w	lr, lr, r6, lsl #5
 8002c92:	ea45 050e 	orr.w	r5, r5, lr
 8002c96:	f821 5b02 	strh.w	r5, [r1], #2
        for(j=0; j < 8; j++)
 8002c9a:	4559      	cmp	r1, fp
 8002c9c:	d1f1      	bne.n	8002c82 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x52>
          pLum++;
 8002c9e:	f10c 0c08 	add.w	ip, ip, #8
        refline += JPEG_ConvertorParams.ScaledWidth;
 8002ca2:	444b      	add	r3, r9
    for(i= 0; i <  8; i++)
 8002ca4:	3f01      	subs	r7, #1
 8002ca6:	d1e4      	bne.n	8002c72 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x42>
    pInBuffer +=  GRAY_444_BLOCK_SIZE;
 8002ca8:	3440      	adds	r4, #64	@ 0x40
 8002caa:	e7cf      	b.n	8002c4c <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1c>
 8002cac:	20011ef0 	.word	0x20011ef0

08002cb0 <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 8002cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cb4:	b085      	sub	sp, #20
 8002cb6:	4605      	mov	r5, r0
        pOutAddr = pOutBuffer+ refline;

          for(j=0; j < 8; j++)
          {
            color_k = (int32_t)(*(pChrom + 192));
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 8002cb8:	27ff      	movs	r7, #255	@ 0xff
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
 8002cba:	0a18      	lsrs	r0, r3, #8
{
 8002cbc:	9102      	str	r1, [sp, #8]
  while(currentMCU < (numberMCU + BlockIndex))
 8002cbe:	eb02 2313 	add.w	r3, r2, r3, lsr #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002cc2:	4927      	ldr	r1, [pc, #156]	@ (8002d60 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0xb0>)
  while(currentMCU < (numberMCU + BlockIndex))
 8002cc4:	9303      	str	r3, [sp, #12]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002cc6:	e9d1 9a09 	ldrd	r9, sl, [r1, #36]	@ 0x24
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002cca:	6909      	ldr	r1, [r1, #16]
 8002ccc:	9100      	str	r1, [sp, #0]
  while(currentMCU < (numberMCU + BlockIndex))
 8002cce:	9b03      	ldr	r3, [sp, #12]
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d802      	bhi.n	8002cda <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x2a>
    }

    pInBuffer +=  CMYK_444_BLOCK_SIZE;
  }
  return numberMCU;
}
 8002cd4:	b005      	add	sp, #20
 8002cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002cda:	00d1      	lsls	r1, r2, #3
    pChrom = pInBuffer;
 8002cdc:	46ae      	mov	lr, r5
    currentMCU++;
 8002cde:	3201      	adds	r2, #1
 8002ce0:	f04f 0c08 	mov.w	ip, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002ce4:	fbb1 f3f9 	udiv	r3, r1, r9
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 8002ce8:	fb09 1113 	mls	r1, r9, r3, r1
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002cec:	fb0a f403 	mul.w	r4, sl, r3
 8002cf0:	0049      	lsls	r1, r1, #1
 8002cf2:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002cf6:	9b00      	ldr	r3, [sp, #0]
 8002cf8:	428b      	cmp	r3, r1
 8002cfa:	d92b      	bls.n	8002d54 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0xa4>
        pOutAddr = pOutBuffer+ refline;
 8002cfc:	9b02      	ldr	r3, [sp, #8]
 8002cfe:	4674      	mov	r4, lr
 8002d00:	185e      	adds	r6, r3, r1
          for(j=0; j < 8; j++)
 8002d02:	f106 0310 	add.w	r3, r6, #16
 8002d06:	9301      	str	r3, [sp, #4]
            color_k = (int32_t)(*(pChrom + 192));
 8002d08:	f894 80c0 	ldrb.w	r8, [r4, #192]	@ 0xc0
            pChrom++;
 8002d0c:	3401      	adds	r4, #1
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
 8002d0e:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 8002d12:	f814 bc01 	ldrb.w	fp, [r4, #-1]
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
 8002d16:	fb13 f308 	smulbb	r3, r3, r8
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 8002d1a:	fb1b fb08 	smulbb	fp, fp, r8
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
 8002d1e:	fbb3 f3f7 	udiv	r3, r3, r7
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 8002d22:	fbbb fbf7 	udiv	fp, fp, r7
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 8002d26:	109b      	asrs	r3, r3, #2
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
 8002d28:	ea4f 0beb 	mov.w	fp, fp, asr #3
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 8002d2c:	015b      	lsls	r3, r3, #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
 8002d2e:	ea43 23cb 	orr.w	r3, r3, fp, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
 8002d32:	f894 b07f 	ldrb.w	fp, [r4, #127]	@ 0x7f
 8002d36:	fb1b fb08 	smulbb	fp, fp, r8
 8002d3a:	fbbb fbf7 	udiv	fp, fp, r7
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 8002d3e:	ea43 03db 	orr.w	r3, r3, fp, lsr #3
 8002d42:	b29b      	uxth	r3, r3
          *(__IO uint16_t *)pOutAddr =
 8002d44:	f826 3b02 	strh.w	r3, [r6], #2
          for(j=0; j < 8; j++)
 8002d48:	9b01      	ldr	r3, [sp, #4]
 8002d4a:	429e      	cmp	r6, r3
 8002d4c:	d1dc      	bne.n	8002d08 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x58>
            pChrom++;
 8002d4e:	f10e 0e08 	add.w	lr, lr, #8
        refline += JPEG_ConvertorParams.ScaledWidth;
 8002d52:	4451      	add	r1, sl
    for(i= 0; i <  8; i++)
 8002d54:	f1bc 0c01 	subs.w	ip, ip, #1
 8002d58:	d1cd      	bne.n	8002cf6 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x46>
    pInBuffer +=  CMYK_444_BLOCK_SIZE;
 8002d5a:	f505 7580 	add.w	r5, r5, #256	@ 0x100
 8002d5e:	e7b6      	b.n	8002cce <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x1e>
 8002d60:	20011ef0 	.word	0x20011ef0

08002d64 <TGFX_JPEG_GetDecodeColorConvertFunc>:
  *                      depending of the jpeg image color space and chroma sampling info.
  * @param ImageNbMCUs : pointer to uint32_t, used to retrive the total number of MCU blocks in the jpeg image.
  * @retval HAL status : HAL_OK or HAL_ERROR.
  */
HAL_StatusTypeDef TGFX_JPEG_GetDecodeColorConvertFunc(JPEG_ConfTypeDef *pJpegInfo, JPEG_YCbCrToRGB_Convert_Function *pFunction, uint32_t *ImageNbMCUs)
{
 8002d64:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t hMCU, vMCU;

  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
 8002d66:	68c3      	ldr	r3, [r0, #12]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
 8002d68:	6886      	ldr	r6, [r0, #8]
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 8002d6a:	6805      	ldr	r5, [r0, #0]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 8002d6c:	fb06 f703 	mul.w	r7, r6, r3
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 8002d70:	4c27      	ldr	r4, [pc, #156]	@ (8002e10 <TGFX_JPEG_GetDecodeColorConvertFunc+0xac>)

  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;
 8002d72:	6840      	ldr	r0, [r0, #4]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
 8002d74:	2d10      	cmp	r5, #16
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 8002d76:	ea4f 0747 	mov.w	r7, r7, lsl #1
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 8002d7a:	6025      	str	r5, [r4, #0]
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
 8002d7c:	60a3      	str	r3, [r4, #8]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
 8002d7e:	60e6      	str	r6, [r4, #12]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 8002d80:	6127      	str	r7, [r4, #16]
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;
 8002d82:	6060      	str	r0, [r4, #4]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
 8002d84:	d13a      	bne.n	8002dfc <TGFX_JPEG_GetDecodeColorConvertFunc+0x98>
  {
    if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
 8002d86:	2801      	cmp	r0, #1
 8002d88:	d120      	bne.n	8002dcc <TGFX_JPEG_GetDecodeColorConvertFunc+0x68>
    {
      *pFunction = TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;

      if(JPEG_ConvertorParams.LineOffset != 0)
 8002d8a:	f013 000f 	ands.w	r0, r3, #15
      *pFunction = TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
 8002d8e:	4f21      	ldr	r7, [pc, #132]	@ (8002e14 <TGFX_JPEG_GetDecodeColorConvertFunc+0xb0>)
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
 8002d90:	bf18      	it	ne
 8002d92:	f1c0 0010 	rsbne	r0, r0, #16
      *pFunction = TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
 8002d96:	600f      	str	r7, [r1, #0]
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
 8002d98:	6160      	str	r0, [r4, #20]
      }
      JPEG_ConvertorParams.H_factor = 16;
      JPEG_ConvertorParams.V_factor  = 16;
 8002d9a:	2010      	movs	r0, #16
  else
  {
    return HAL_ERROR; /* Color space Not supported*/
  }

  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
 8002d9c:	6961      	ldr	r1, [r4, #20]
 8002d9e:	4419      	add	r1, r3
 8002da0:	6261      	str	r1, [r4, #36]	@ 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
 8002da2:	0059      	lsls	r1, r3, #1
 8002da4:	62a1      	str	r1, [r4, #40]	@ 0x28

  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
 8002da6:	fbb3 f1f5 	udiv	r1, r3, r5
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
 8002daa:	fb05 3311 	mls	r3, r5, r1, r3
      JPEG_ConvertorParams.V_factor  = 8;
 8002dae:	e9c4 5007 	strd	r5, r0, [r4, #28]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
 8002db2:	b103      	cbz	r3, 8002db6 <TGFX_JPEG_GetDecodeColorConvertFunc+0x52>
  {
    hMCU++; /*+1 for horizenatl incomplete MCU */
 8002db4:	3101      	adds	r1, #1
  }

  vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
 8002db6:	fbb6 f3f0 	udiv	r3, r6, r0
  if((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
 8002dba:	fb00 6613 	mls	r6, r0, r3, r6
 8002dbe:	b106      	cbz	r6, 8002dc2 <TGFX_JPEG_GetDecodeColorConvertFunc+0x5e>
  {
    vMCU++; /*+1 for vertical incomplete MCU */
 8002dc0:	3301      	adds	r3, #1
  }
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
 8002dc2:	4359      	muls	r1, r3
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;

  return HAL_OK;
 8002dc4:	2000      	movs	r0, #0
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
 8002dc6:	62e1      	str	r1, [r4, #44]	@ 0x2c
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
 8002dc8:	6011      	str	r1, [r2, #0]
}
 8002dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
 8002dcc:	2802      	cmp	r0, #2
 8002dce:	d109      	bne.n	8002de4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x80>
      if(JPEG_ConvertorParams.LineOffset != 0)
 8002dd0:	f013 000f 	ands.w	r0, r3, #15
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
 8002dd4:	4f10      	ldr	r7, [pc, #64]	@ (8002e18 <TGFX_JPEG_GetDecodeColorConvertFunc+0xb4>)
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
 8002dd6:	bf18      	it	ne
 8002dd8:	f1c0 0010 	rsbne	r0, r0, #16
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
 8002ddc:	600f      	str	r7, [r1, #0]
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
 8002dde:	6160      	str	r0, [r4, #20]
      JPEG_ConvertorParams.V_factor  = 8;
 8002de0:	2008      	movs	r0, #8
 8002de2:	e7db      	b.n	8002d9c <TGFX_JPEG_GetDecodeColorConvertFunc+0x38>
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
 8002de4:	480d      	ldr	r0, [pc, #52]	@ (8002e1c <TGFX_JPEG_GetDecodeColorConvertFunc+0xb8>)
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
 8002de6:	6008      	str	r0, [r1, #0]
    if(JPEG_ConvertorParams.LineOffset != 0)
 8002de8:	f013 0107 	ands.w	r1, r3, #7
 8002dec:	d002      	beq.n	8002df4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x90>
        JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;
 8002dee:	f1c1 0108 	rsb	r1, r1, #8
 8002df2:	e000      	b.n	8002df6 <TGFX_JPEG_GetDecodeColorConvertFunc+0x92>
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 8002df4:	2100      	movs	r1, #0
 8002df6:	2508      	movs	r5, #8
        JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;
 8002df8:	6161      	str	r1, [r4, #20]
      JPEG_ConvertorParams.V_factor  = 8;
 8002dfa:	e7f1      	b.n	8002de0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x7c>
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
 8002dfc:	b90d      	cbnz	r5, 8002e02 <TGFX_JPEG_GetDecodeColorConvertFunc+0x9e>
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
 8002dfe:	4808      	ldr	r0, [pc, #32]	@ (8002e20 <TGFX_JPEG_GetDecodeColorConvertFunc+0xbc>)
 8002e00:	e7f1      	b.n	8002de6 <TGFX_JPEG_GetDecodeColorConvertFunc+0x82>
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
 8002e02:	2d30      	cmp	r5, #48	@ 0x30
 8002e04:	d101      	bne.n	8002e0a <TGFX_JPEG_GetDecodeColorConvertFunc+0xa6>
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
 8002e06:	4807      	ldr	r0, [pc, #28]	@ (8002e24 <TGFX_JPEG_GetDecodeColorConvertFunc+0xc0>)
 8002e08:	e7ed      	b.n	8002de6 <TGFX_JPEG_GetDecodeColorConvertFunc+0x82>
    return HAL_ERROR; /* Color space Not supported*/
 8002e0a:	2001      	movs	r0, #1
 8002e0c:	e7dd      	b.n	8002dca <TGFX_JPEG_GetDecodeColorConvertFunc+0x66>
 8002e0e:	bf00      	nop
 8002e10:	20011ef0 	.word	0x20011ef0
 8002e14:	080027ed 	.word	0x080027ed
 8002e18:	080029d5 	.word	0x080029d5
 8002e1c:	08002b35 	.word	0x08002b35
 8002e20:	08002c31 	.word	0x08002c31
 8002e24:	08002cb1 	.word	0x08002cb1

08002e28 <TGFX_JPEG_InitColorTables>:
  * @brief  Initializes the colors conversion Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_InitColorTables(void)
{
 8002e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e2c:	f8df c250 	ldr.w	ip, [pc, #592]	@ 8003080 <TGFX_JPEG_InitColorTables+0x258>
  */
void TGFX_JPEG_InitPreProcColorTables(void)
{
  int32_t i;

  for (i = 0; i <= 255; i++)
 8002e30:	2300      	movs	r3, #0
 8002e32:	f8df 8250 	ldr.w	r8, [pc, #592]	@ 8003084 <TGFX_JPEG_InitColorTables+0x25c>
  {
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002e36:	f644 4b8b 	movw	fp, #19595	@ 0x4c8b
 8002e3a:	4f7e      	ldr	r7, [pc, #504]	@ (8003034 <TGFX_JPEG_InitColorTables+0x20c>)
    GREEN_Y_LUT[i]         = ((  ((int32_t) ((0.587 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002e3c:	f249 6a45 	movw	sl, #38469	@ 0x9645
 8002e40:	4e7d      	ldr	r6, [pc, #500]	@ (8003038 <TGFX_JPEG_InitColorTables+0x210>)
    BLUE_Y_LUT[i]          = ((  ((int32_t) ((0.114 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002e42:	f641 592f 	movw	r9, #7471	@ 0x1d2f
 8002e46:	4d7d      	ldr	r5, [pc, #500]	@ (800303c <TGFX_JPEG_InitColorTables+0x214>)
 8002e48:	4c7d      	ldr	r4, [pc, #500]	@ (8003040 <TGFX_JPEG_InitColorTables+0x218>)
 8002e4a:	487e      	ldr	r0, [pc, #504]	@ (8003044 <TGFX_JPEG_InitColorTables+0x21c>)
 8002e4c:	497e      	ldr	r1, [pc, #504]	@ (8003048 <TGFX_JPEG_InitColorTables+0x220>)
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002e4e:	fb0b f203 	mul.w	r2, fp, r3
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;

    /* BLUE_CB_LUT and RED_CR_LUT are identical */
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;

    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002e52:	f64e 3e2f 	movw	lr, #60207	@ 0xeb2f
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002e56:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8002e5a:	1412      	asrs	r2, r2, #16
 8002e5c:	f848 2b04 	str.w	r2, [r8], #4
    GREEN_Y_LUT[i]         = ((  ((int32_t) ((0.587 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002e60:	fb0a f203 	mul.w	r2, sl, r3
 8002e64:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8002e68:	1412      	asrs	r2, r2, #16
 8002e6a:	f84c 2b04 	str.w	r2, [ip], #4
    BLUE_Y_LUT[i]          = ((  ((int32_t) ((0.114 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002e6e:	fb09 f203 	mul.w	r2, r9, r3
 8002e72:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8002e76:	1412      	asrs	r2, r2, #16
 8002e78:	f847 2b04 	str.w	r2, [r7], #4
    RED_CB_LUT[i]          = (((-((int32_t) ((0.1687 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002e7c:	4a73      	ldr	r2, [pc, #460]	@ (800304c <TGFX_JPEG_InitColorTables+0x224>)
 8002e7e:	435a      	muls	r2, r3
 8002e80:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8002e84:	1412      	asrs	r2, r2, #16
 8002e86:	f846 2b04 	str.w	r2, [r6], #4
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002e8a:	4a71      	ldr	r2, [pc, #452]	@ (8003050 <TGFX_JPEG_InitColorTables+0x228>)
 8002e8c:	435a      	muls	r2, r3
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002e8e:	3301      	adds	r3, #1
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002e90:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
  for (i = 0; i <= 255; i++)
 8002e94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002e98:	ea4f 4222 	mov.w	r2, r2, asr #16
 8002e9c:	f845 2b04 	str.w	r2, [r5], #4
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002ea0:	f343 024f 	sbfx	r2, r3, #1, #16
 8002ea4:	f844 2b04 	str.w	r2, [r4], #4
    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002ea8:	4a6a      	ldr	r2, [pc, #424]	@ (8003054 <TGFX_JPEG_InitColorTables+0x22c>)
 8002eaa:	fb02 e203 	mla	r2, r2, r3, lr
    BLUE_CR_LUT[i]         = (((-((int32_t) ((0.0813 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002eae:	f249 4ed0 	movw	lr, #38096	@ 0x94d0
    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002eb2:	ea4f 4222 	mov.w	r2, r2, asr #16
 8002eb6:	f840 2b04 	str.w	r2, [r0], #4
    BLUE_CR_LUT[i]         = (((-((int32_t) ((0.0813 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002eba:	4a67      	ldr	r2, [pc, #412]	@ (8003058 <TGFX_JPEG_InitColorTables+0x230>)
 8002ebc:	fb02 e203 	mla	r2, r2, r3, lr
 8002ec0:	ea4f 4222 	mov.w	r2, r2, asr #16
 8002ec4:	f841 2b04 	str.w	r2, [r1], #4
  for (i = 0; i <= 255; i++)
 8002ec8:	d1c1      	bne.n	8002e4e <TGFX_JPEG_InitColorTables+0x26>
 8002eca:	4c64      	ldr	r4, [pc, #400]	@ (800305c <TGFX_JPEG_InitColorTables+0x234>)
void TGFX_JPEG_Init_MCU_LUT(void)
{
  uint32_t i, j, offset;

  /*Y LUT */
  for(i = 0; i < 16; i++)
 8002ecc:	2200      	movs	r2, #0
  {
    for(j = 0; j < 16; j++)
 8002ece:	00d3      	lsls	r3, r2, #3
  for (i = 0; i <= 255; i++)
 8002ed0:	4625      	mov	r5, r4
    for(j = 0; j < 16; j++)
 8002ed2:	2100      	movs	r1, #0
    {
      offset =  j + (i*8);
      if((j>=8) && (i>=8)) offset+= 120;
 8002ed4:	2907      	cmp	r1, #7
 8002ed6:	f240 80a6 	bls.w	8003026 <TGFX_JPEG_InitColorTables+0x1fe>
 8002eda:	2a07      	cmp	r2, #7
 8002edc:	bf8c      	ite	hi
 8002ede:	f103 0078 	addhi.w	r0, r3, #120	@ 0x78
      else  if((j>=8) && (i<8)) offset+= 56;
 8002ee2:	f103 0038 	addls.w	r0, r3, #56	@ 0x38
    for(j = 0; j < 16; j++)
 8002ee6:	3101      	adds	r1, #1
 8002ee8:	3301      	adds	r3, #1
      else  if((j<8) && (i>=8)) offset+= 64;

      JPEG_Y_MCU_LUT[i*16 + j] = offset;
 8002eea:	f825 0b02 	strh.w	r0, [r5], #2
    for(j = 0; j < 16; j++)
 8002eee:	2910      	cmp	r1, #16
 8002ef0:	d1f0      	bne.n	8002ed4 <TGFX_JPEG_InitColorTables+0xac>
  for(i = 0; i < 16; i++)
 8002ef2:	3201      	adds	r2, #1
 8002ef4:	3420      	adds	r4, #32
 8002ef6:	2a10      	cmp	r2, #16
 8002ef8:	d1e9      	bne.n	8002ece <TGFX_JPEG_InitColorTables+0xa6>
    }
  }

  /*Cb Cr K LUT*/
  for(i = 0; i < 16; i++)
 8002efa:	2000      	movs	r0, #0
      offset = i*16 + j;

      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;

      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
 8002efc:	f8df e188 	ldr.w	lr, [pc, #392]	@ 8003088 <TGFX_JPEG_InitColorTables+0x260>
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
 8002f00:	f8df 8188 	ldr.w	r8, [pc, #392]	@ 800308c <TGFX_JPEG_InitColorTables+0x264>

      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
 8002f04:	f8df 9188 	ldr.w	r9, [pc, #392]	@ 8003090 <TGFX_JPEG_InitColorTables+0x268>
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8002f08:	f8df a188 	ldr.w	sl, [pc, #392]	@ 8003094 <TGFX_JPEG_InitColorTables+0x26c>
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8002f0c:	0844      	lsrs	r4, r0, #1
    for(j = 0; j < 16; j++)
 8002f0e:	2500      	movs	r5, #0
 8002f10:	00c3      	lsls	r3, r0, #3
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8002f12:	00e4      	lsls	r4, r4, #3
 8002f14:	fa1f fc83 	uxth.w	ip, r3
 8002f18:	b2a4      	uxth	r4, r4
 8002f1a:	0142      	lsls	r2, r0, #5
 8002f1c:	f3c5 034f 	ubfx	r3, r5, #1, #16
 8002f20:	4f4f      	ldr	r7, [pc, #316]	@ (8003060 <TGFX_JPEG_InitColorTables+0x238>)
    for(j = 0; j < 16; j++)
 8002f22:	3501      	adds	r5, #1
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8002f24:	1919      	adds	r1, r3, r4
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
 8002f26:	4463      	add	r3, ip
    for(j = 0; j < 16; j++)
 8002f28:	2d10      	cmp	r5, #16
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8002f2a:	b289      	uxth	r1, r1
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
 8002f2c:	b29b      	uxth	r3, r3
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8002f2e:	f501 7680 	add.w	r6, r1, #256	@ 0x100
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
 8002f32:	f103 0b80 	add.w	fp, r3, #128	@ 0x80
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
 8002f36:	f103 03c0 	add.w	r3, r3, #192	@ 0xc0
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8002f3a:	b2b6      	uxth	r6, r6
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
 8002f3c:	f828 3002 	strh.w	r3, [r8, r2]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8002f40:	52be      	strh	r6, [r7, r2]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
 8002f42:	4f48      	ldr	r7, [pc, #288]	@ (8003064 <TGFX_JPEG_InitColorTables+0x23c>)
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8002f44:	f82a 6002 	strh.w	r6, [sl, r2]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
 8002f48:	f827 b002 	strh.w	fp, [r7, r2]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
 8002f4c:	f501 7ba0 	add.w	fp, r1, #320	@ 0x140
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
 8002f50:	f501 71c0 	add.w	r1, r1, #384	@ 0x180
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
 8002f54:	f82e b002 	strh.w	fp, [lr, r2]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
 8002f58:	f829 1002 	strh.w	r1, [r9, r2]
    for(j = 0; j < 16; j++)
 8002f5c:	f102 0202 	add.w	r2, r2, #2
 8002f60:	d1dc      	bne.n	8002f1c <TGFX_JPEG_InitColorTables+0xf4>
  for(i = 0; i < 16; i++)
 8002f62:	3001      	adds	r0, #1
 8002f64:	2810      	cmp	r0, #16
 8002f66:	d1d1      	bne.n	8002f0c <TGFX_JPEG_InitColorTables+0xe4>
 8002f68:	2100      	movs	r1, #0
 8002f6a:	f8df 912c 	ldr.w	r9, [pc, #300]	@ 8003098 <TGFX_JPEG_InitColorTables+0x270>
 8002f6e:	f8df 812c 	ldr.w	r8, [pc, #300]	@ 800309c <TGFX_JPEG_InitColorTables+0x274>
 8002f72:	4608      	mov	r0, r1
 8002f74:	f8df e128 	ldr.w	lr, [pc, #296]	@ 80030a0 <TGFX_JPEG_InitColorTables+0x278>
 8002f78:	f8df c128 	ldr.w	ip, [pc, #296]	@ 80030a4 <TGFX_JPEG_InitColorTables+0x27c>
 8002f7c:	b283      	uxth	r3, r0
 8002f7e:	eb01 0709 	add.w	r7, r1, r9
 8002f82:	eb01 0608 	add.w	r6, r1, r8
 8002f86:	eb01 050e 	add.w	r5, r1, lr
    }
  }

  for(i = 0; i < 8; i++)
  {
    for(j = 0; j < 8; j++)
 8002f8a:	f103 0208 	add.w	r2, r3, #8
 8002f8e:	eb01 040c 	add.w	r4, r1, ip
 8002f92:	b292      	uxth	r2, r2
    {
      offset = i*8 + j;

      JPEG_Y_MCU_444_LUT[offset]  = offset;
      JPEG_Cb_MCU_444_LUT[offset] = offset + 64 ;
 8002f94:	f103 0a40 	add.w	sl, r3, #64	@ 0x40
      JPEG_Y_MCU_444_LUT[offset]  = offset;
 8002f98:	f827 3b02 	strh.w	r3, [r7], #2
      JPEG_Cb_MCU_444_LUT[offset] = offset + 64 ;
 8002f9c:	f826 ab02 	strh.w	sl, [r6], #2
      JPEG_Cr_MCU_444_LUT[offset] = offset + 128 ;
 8002fa0:	f103 0a80 	add.w	sl, r3, #128	@ 0x80
 8002fa4:	f825 ab02 	strh.w	sl, [r5], #2
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
 8002fa8:	f103 0ac0 	add.w	sl, r3, #192	@ 0xc0
    for(j = 0; j < 8; j++)
 8002fac:	3301      	adds	r3, #1
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
 8002fae:	f824 ab02 	strh.w	sl, [r4], #2
    for(j = 0; j < 8; j++)
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d1ed      	bne.n	8002f94 <TGFX_JPEG_InitColorTables+0x16c>
  for(i = 0; i < 8; i++)
 8002fb8:	3008      	adds	r0, #8
 8002fba:	3110      	adds	r1, #16
 8002fbc:	2840      	cmp	r0, #64	@ 0x40
 8002fbe:	d1dd      	bne.n	8002f7c <TGFX_JPEG_InitColorTables+0x154>
 8002fc0:	4d29      	ldr	r5, [pc, #164]	@ (8003068 <TGFX_JPEG_InitColorTables+0x240>)
  for (i = 0; i <= 255; i++)
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	4c29      	ldr	r4, [pc, #164]	@ (800306c <TGFX_JPEG_InitColorTables+0x244>)
 8002fc6:	482a      	ldr	r0, [pc, #168]	@ (8003070 <TGFX_JPEG_InitColorTables+0x248>)
 8002fc8:	492a      	ldr	r1, [pc, #168]	@ (8003074 <TGFX_JPEG_InitColorTables+0x24c>)
    CR_RED_LUT[i] = ( (((int32_t) ((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 8002fca:	f8df e0dc 	ldr.w	lr, [pc, #220]	@ 80030a8 <TGFX_JPEG_InitColorTables+0x280>
    CB_BLUE_LUT[i] = ( (((int32_t) ((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 8002fce:	f8df c0dc 	ldr.w	ip, [pc, #220]	@ 80030ac <TGFX_JPEG_InitColorTables+0x284>
    CR_GREEN_LUT[i] = (-((int32_t) ((0.71414 / 2) * (1L << 16)))) * index;
 8002fd2:	4f29      	ldr	r7, [pc, #164]	@ (8003078 <TGFX_JPEG_InitColorTables+0x250>)
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
 8002fd4:	4e29      	ldr	r6, [pc, #164]	@ (800307c <TGFX_JPEG_InitColorTables+0x254>)
    CR_RED_LUT[i] = ( (((int32_t) ((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 8002fd6:	fb0e f203 	mul.w	r2, lr, r3
 8002fda:	f5a2 0232 	sub.w	r2, r2, #11665408	@ 0xb20000
 8002fde:	f5a2 4274 	sub.w	r2, r2, #62464	@ 0xf400
 8002fe2:	1412      	asrs	r2, r2, #16
 8002fe4:	f845 2b04 	str.w	r2, [r5], #4
    CB_BLUE_LUT[i] = ( (((int32_t) ((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 8002fe8:	fb0c f203 	mul.w	r2, ip, r3
 8002fec:	f5a2 0262 	sub.w	r2, r2, #14811136	@ 0xe20000
 8002ff0:	f5a2 42a0 	sub.w	r2, r2, #20480	@ 0x5000
 8002ff4:	1412      	asrs	r2, r2, #16
 8002ff6:	f844 2b04 	str.w	r2, [r4], #4
    CR_GREEN_LUT[i] = (-((int32_t) ((0.71414 / 2) * (1L << 16)))) * index;
 8002ffa:	fb07 f203 	mul.w	r2, r7, r3
 8002ffe:	f502 02b6 	add.w	r2, r2, #5963776	@ 0x5b0000
 8003002:	f502 42d0 	add.w	r2, r2, #26624	@ 0x6800
 8003006:	f840 2b04 	str.w	r2, [r0], #4
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
 800300a:	fb06 f203 	mul.w	r2, r6, r3
  for (i = 0; i <= 255; i++)
 800300e:	3301      	adds	r3, #1
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
 8003010:	f502 1230 	add.w	r2, r2, #2883584	@ 0x2c0000
  for (i = 0; i <= 255; i++)
 8003014:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
 8003018:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 800301c:	f841 2b04 	str.w	r2, [r1], #4
  for (i = 0; i <= 255; i++)
 8003020:	d1d9      	bne.n	8002fd6 <TGFX_JPEG_InitColorTables+0x1ae>
}
 8003022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else  if((j<8) && (i>=8)) offset+= 64;
 8003026:	2a07      	cmp	r2, #7
 8003028:	bf8c      	ite	hi
 800302a:	f103 0040 	addhi.w	r0, r3, #64	@ 0x40
      offset =  j + (i*8);
 800302e:	4618      	movls	r0, r3
 8003030:	e759      	b.n	8002ee6 <TGFX_JPEG_InitColorTables+0xbe>
 8003032:	bf00      	nop
 8003034:	2000f2f0 	.word	0x2000f2f0
 8003038:	200106f0 	.word	0x200106f0
 800303c:	2000f6f0 	.word	0x2000f6f0
 8003040:	200102f0 	.word	0x200102f0
 8003044:	2000faf0 	.word	0x2000faf0
 8003048:	2000eef0 	.word	0x2000eef0
 800304c:	ffffd4d1 	.word	0xffffd4d1
 8003050:	ffffab30 	.word	0xffffab30
 8003054:	ffff94d1 	.word	0xffff94d1
 8003058:	ffffeb30 	.word	0xffffeb30
 800305c:	2000ecf0 	.word	0x2000ecf0
 8003060:	2000ea70 	.word	0x2000ea70
 8003064:	2000e870 	.word	0x2000e870
 8003068:	20011af0 	.word	0x20011af0
 800306c:	200116f0 	.word	0x200116f0
 8003070:	200112f0 	.word	0x200112f0
 8003074:	20010ef0 	.word	0x20010ef0
 8003078:	ffff4930 	.word	0xffff4930
 800307c:	ffffa7e8 	.word	0xffffa7e8
 8003080:	2000fef0 	.word	0x2000fef0
 8003084:	20010af0 	.word	0x20010af0
 8003088:	2000e5f0 	.word	0x2000e5f0
 800308c:	2000e3f0 	.word	0x2000e3f0
 8003090:	2000e170 	.word	0x2000e170
 8003094:	2000df70 	.word	0x2000df70
 8003098:	2000ec70 	.word	0x2000ec70
 800309c:	2000e7f0 	.word	0x2000e7f0
 80030a0:	2000e370 	.word	0x2000e370
 80030a4:	2000def0 	.word	0x2000def0
 80030a8:	000166e8 	.word	0x000166e8
 80030ac:	0001c5a0 	.word	0x0001c5a0

080030b0 <null_ptr_check>:
 */
static int8_t null_ptr_check(const struct bme680_dev *dev)
{
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 80030b0:	b148      	cbz	r0, 80030c6 <null_ptr_check+0x16>
 80030b2:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 80030b4:	b13b      	cbz	r3, 80030c6 <null_ptr_check+0x16>
 80030b6:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 80030b8:	b12b      	cbz	r3, 80030c6 <null_ptr_check+0x16>
 80030ba:	6d00      	ldr	r0, [r0, #80]	@ 0x50
 80030bc:	fab0 f080 	clz	r0, r0
 80030c0:	0940      	lsrs	r0, r0, #5
 80030c2:	4240      	negs	r0, r0
 80030c4:	4770      	bx	lr
		/* Device structure pointer is not valid */
		rslt = BME680_E_NULL_PTR;
 80030c6:	f04f 30ff 	mov.w	r0, #4294967295
		/* Device structure is fine */
		rslt = BME680_OK;
	}

	return rslt;
}
 80030ca:	4770      	bx	lr

080030cc <set_mem_page>:
{
 80030cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80030ce:	4602      	mov	r2, r0
	rslt = null_ptr_check(dev);
 80030d0:	4608      	mov	r0, r1
 80030d2:	f7ff ffed 	bl	80030b0 <null_ptr_check>
{
 80030d6:	460c      	mov	r4, r1
	if (rslt == BME680_OK) {
 80030d8:	4605      	mov	r5, r0
 80030da:	b9a8      	cbnz	r0, 8003108 <set_mem_page+0x3c>
		if (reg_addr > 0x7f)
 80030dc:	43d3      	mvns	r3, r2
		if (mem_page != dev->mem_page) {
 80030de:	78c9      	ldrb	r1, [r1, #3]
		if (reg_addr > 0x7f)
 80030e0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
		if (mem_page != dev->mem_page) {
 80030e4:	ebb1 1f03 	cmp.w	r1, r3, lsl #4
		if (reg_addr > 0x7f)
 80030e8:	ea4f 1203 	mov.w	r2, r3, lsl #4
		if (mem_page != dev->mem_page) {
 80030ec:	d00c      	beq.n	8003108 <set_mem_page+0x3c>
			dev->mem_page = mem_page;
 80030ee:	70e2      	strb	r2, [r4, #3]
			dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 80030f0:	2301      	movs	r3, #1
 80030f2:	6ca6      	ldr	r6, [r4, #72]	@ 0x48
 80030f4:	f10d 0207 	add.w	r2, sp, #7
 80030f8:	21f3      	movs	r1, #243	@ 0xf3
 80030fa:	7860      	ldrb	r0, [r4, #1]
 80030fc:	47b0      	blx	r6
 80030fe:	f884 0054 	strb.w	r0, [r4, #84]	@ 0x54
			if (dev->com_rslt != 0)
 8003102:	b120      	cbz	r0, 800310e <set_mem_page+0x42>
				rslt = BME680_E_COM_FAIL;
 8003104:	f06f 0501 	mvn.w	r5, #1
}
 8003108:	4628      	mov	r0, r5
 800310a:	b002      	add	sp, #8
 800310c:	bd70      	pop	{r4, r5, r6, pc}
				reg = reg & (~BME680_MEM_PAGE_MSK);
 800310e:	f89d 3007 	ldrb.w	r3, [sp, #7]
				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 8003112:	2173      	movs	r1, #115	@ 0x73
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 8003114:	78e2      	ldrb	r2, [r4, #3]
				reg = reg & (~BME680_MEM_PAGE_MSK);
 8003116:	f023 0310 	bic.w	r3, r3, #16
				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 800311a:	6ce6      	ldr	r6, [r4, #76]	@ 0x4c
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 800311c:	f002 0210 	and.w	r2, r2, #16
				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 8003120:	7860      	ldrb	r0, [r4, #1]
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 8003122:	4313      	orrs	r3, r2
				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 8003124:	f10d 0207 	add.w	r2, sp, #7
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 8003128:	f88d 3007 	strb.w	r3, [sp, #7]
				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 800312c:	2301      	movs	r3, #1
 800312e:	47b0      	blx	r6
 8003130:	f884 0054 	strb.w	r0, [r4, #84]	@ 0x54
				if (dev->com_rslt != 0)
 8003134:	2800      	cmp	r0, #0
 8003136:	d0e7      	beq.n	8003108 <set_mem_page+0x3c>
 8003138:	e7e4      	b.n	8003104 <set_mem_page+0x38>

0800313a <get_mem_page>:
{
 800313a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800313c:	4604      	mov	r4, r0
	rslt = null_ptr_check(dev);
 800313e:	f7ff ffb7 	bl	80030b0 <null_ptr_check>
	if (rslt == BME680_OK) {
 8003142:	b970      	cbnz	r0, 8003162 <get_mem_page+0x28>
		dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 8003144:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 8003146:	2301      	movs	r3, #1
 8003148:	f10d 0207 	add.w	r2, sp, #7
 800314c:	21f3      	movs	r1, #243	@ 0xf3
 800314e:	7860      	ldrb	r0, [r4, #1]
 8003150:	47a8      	blx	r5
 8003152:	f884 0054 	strb.w	r0, [r4, #84]	@ 0x54
		if (dev->com_rslt != 0)
 8003156:	b930      	cbnz	r0, 8003166 <get_mem_page+0x2c>
			dev->mem_page = reg & BME680_MEM_PAGE_MSK;
 8003158:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800315c:	f003 0310 	and.w	r3, r3, #16
 8003160:	70e3      	strb	r3, [r4, #3]
}
 8003162:	b003      	add	sp, #12
 8003164:	bd30      	pop	{r4, r5, pc}
			rslt = BME680_E_COM_FAIL;
 8003166:	f06f 0001 	mvn.w	r0, #1
	return rslt;
 800316a:	e7fa      	b.n	8003162 <get_mem_page+0x28>

0800316c <boundary_check.constprop.0>:
		if (*value > max) {
 800316c:	7803      	ldrb	r3, [r0, #0]
 800316e:	428b      	cmp	r3, r1
			*value = max;
 8003170:	bf88      	it	hi
 8003172:	7001      	strbhi	r1, [r0, #0]
}
 8003174:	f04f 0000 	mov.w	r0, #0
			dev->info_msg |= BME680_I_MAX_CORRECTION;
 8003178:	bf82      	ittt	hi
 800317a:	f892 3046 	ldrbhi.w	r3, [r2, #70]	@ 0x46
 800317e:	f043 0302 	orrhi.w	r3, r3, #2
 8003182:	f882 3046 	strbhi.w	r3, [r2, #70]	@ 0x46
}
 8003186:	4770      	bx	lr

08003188 <bme680_get_regs>:
{
 8003188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800318c:	4606      	mov	r6, r0
	rslt = null_ptr_check(dev);
 800318e:	4618      	mov	r0, r3
{
 8003190:	461d      	mov	r5, r3
 8003192:	4688      	mov	r8, r1
	rslt = null_ptr_check(dev);
 8003194:	f7ff ff8c 	bl	80030b0 <null_ptr_check>
{
 8003198:	4691      	mov	r9, r2
	if (rslt == BME680_OK) {
 800319a:	4604      	mov	r4, r0
 800319c:	b9a8      	cbnz	r0, 80031ca <bme680_get_regs+0x42>
		if (dev->intf == BME680_SPI_INTF) {
 800319e:	78ab      	ldrb	r3, [r5, #2]
 80031a0:	b93b      	cbnz	r3, 80031b2 <bme680_get_regs+0x2a>
			rslt = set_mem_page(reg_addr, dev);
 80031a2:	4629      	mov	r1, r5
 80031a4:	4630      	mov	r0, r6
 80031a6:	f7ff ff91 	bl	80030cc <set_mem_page>
			if (rslt == BME680_OK)
 80031aa:	4604      	mov	r4, r0
 80031ac:	b908      	cbnz	r0, 80031b2 <bme680_get_regs+0x2a>
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
 80031ae:	f046 0680 	orr.w	r6, r6, #128	@ 0x80
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 80031b2:	6caf      	ldr	r7, [r5, #72]	@ 0x48
 80031b4:	464b      	mov	r3, r9
 80031b6:	4642      	mov	r2, r8
 80031b8:	4631      	mov	r1, r6
 80031ba:	7868      	ldrb	r0, [r5, #1]
 80031bc:	47b8      	blx	r7
			rslt = BME680_E_COM_FAIL;
 80031be:	2800      	cmp	r0, #0
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 80031c0:	f885 0054 	strb.w	r0, [r5, #84]	@ 0x54
			rslt = BME680_E_COM_FAIL;
 80031c4:	bf18      	it	ne
 80031c6:	f06f 0401 	mvnne.w	r4, #1
}
 80031ca:	4620      	mov	r0, r4
 80031cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080031d0 <bme680_set_regs>:
{
 80031d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80031d4:	b08b      	sub	sp, #44	@ 0x2c
 80031d6:	461d      	mov	r5, r3
 80031d8:	460f      	mov	r7, r1
	uint8_t tmp_buff[BME680_TMP_BUFFER_LENGTH] = { 0 };
 80031da:	2100      	movs	r1, #0
{
 80031dc:	4606      	mov	r6, r0
 80031de:	4614      	mov	r4, r2
	uint8_t tmp_buff[BME680_TMP_BUFFER_LENGTH] = { 0 };
 80031e0:	a801      	add	r0, sp, #4
 80031e2:	2224      	movs	r2, #36	@ 0x24
 80031e4:	9100      	str	r1, [sp, #0]
 80031e6:	f022 fefd 	bl	8025fe4 <memset>
	rslt = null_ptr_check(dev);
 80031ea:	4628      	mov	r0, r5
 80031ec:	f7ff ff60 	bl	80030b0 <null_ptr_check>
	if (rslt == BME680_OK) {
 80031f0:	bb78      	cbnz	r0, 8003252 <bme680_set_regs+0x82>
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
 80031f2:	1e63      	subs	r3, r4, #1
 80031f4:	2b12      	cmp	r3, #18
 80031f6:	d82f      	bhi.n	8003258 <bme680_set_regs+0x88>
			for (index = 0; index < len; index++) {
 80031f8:	3e01      	subs	r6, #1
 80031fa:	46e9      	mov	r9, sp
 80031fc:	4680      	mov	r8, r0
				if (dev->intf == BME680_SPI_INTF) {
 80031fe:	78aa      	ldrb	r2, [r5, #2]
					rslt = set_mem_page(reg_addr[index], dev);
 8003200:	f816 3f01 	ldrb.w	r3, [r6, #1]!
				if (dev->intf == BME680_SPI_INTF) {
 8003204:	b932      	cbnz	r2, 8003214 <bme680_set_regs+0x44>
					rslt = set_mem_page(reg_addr[index], dev);
 8003206:	4618      	mov	r0, r3
 8003208:	4629      	mov	r1, r5
 800320a:	f7ff ff5f 	bl	80030cc <set_mem_page>
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
 800320e:	7833      	ldrb	r3, [r6, #0]
 8003210:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003214:	f889 3000 	strb.w	r3, [r9]
			for (index = 0; index < len; index++) {
 8003218:	f109 0902 	add.w	r9, r9, #2
				tmp_buff[(2 * index) + 1] = reg_data[index];
 800321c:	f817 3008 	ldrb.w	r3, [r7, r8]
			for (index = 0; index < len; index++) {
 8003220:	f108 0801 	add.w	r8, r8, #1
				tmp_buff[(2 * index) + 1] = reg_data[index];
 8003224:	f809 3c01 	strb.w	r3, [r9, #-1]
			for (index = 0; index < len; index++) {
 8003228:	fa1f f388 	uxth.w	r3, r8
 800322c:	42a3      	cmp	r3, r4
 800322e:	d3e6      	bcc.n	80031fe <bme680_set_regs+0x2e>
			if (rslt == BME680_OK) {
 8003230:	b978      	cbnz	r0, 8003252 <bme680_set_regs+0x82>
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
 8003232:	0064      	lsls	r4, r4, #1
 8003234:	6cee      	ldr	r6, [r5, #76]	@ 0x4c
 8003236:	f10d 0201 	add.w	r2, sp, #1
 800323a:	f89d 1000 	ldrb.w	r1, [sp]
 800323e:	3c01      	subs	r4, #1
 8003240:	7868      	ldrb	r0, [r5, #1]
 8003242:	b2a3      	uxth	r3, r4
 8003244:	47b0      	blx	r6
					rslt = BME680_E_COM_FAIL;
 8003246:	2800      	cmp	r0, #0
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
 8003248:	f885 0054 	strb.w	r0, [r5, #84]	@ 0x54
					rslt = BME680_E_COM_FAIL;
 800324c:	bf18      	it	ne
 800324e:	f06f 0001 	mvnne.w	r0, #1
}
 8003252:	b00b      	add	sp, #44	@ 0x2c
 8003254:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			rslt = BME680_E_INVALID_LENGTH;
 8003258:	f06f 0003 	mvn.w	r0, #3
 800325c:	e7f9      	b.n	8003252 <bme680_set_regs+0x82>

0800325e <bme680_soft_reset>:
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
 800325e:	23e0      	movs	r3, #224	@ 0xe0
{
 8003260:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
 8003262:	f88d 3006 	strb.w	r3, [sp, #6]
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
 8003266:	23b6      	movs	r3, #182	@ 0xb6
{
 8003268:	4605      	mov	r5, r0
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
 800326a:	f88d 3007 	strb.w	r3, [sp, #7]
	rslt = null_ptr_check(dev);
 800326e:	f7ff ff1f 	bl	80030b0 <null_ptr_check>
	if (rslt == BME680_OK) {
 8003272:	4604      	mov	r4, r0
 8003274:	b970      	cbnz	r0, 8003294 <bme680_soft_reset+0x36>
		if (dev->intf == BME680_SPI_INTF)
 8003276:	78ab      	ldrb	r3, [r5, #2]
 8003278:	b17b      	cbz	r3, 800329a <bme680_soft_reset+0x3c>
			rslt = bme680_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 800327a:	462b      	mov	r3, r5
 800327c:	2201      	movs	r2, #1
 800327e:	f10d 0107 	add.w	r1, sp, #7
 8003282:	f10d 0006 	add.w	r0, sp, #6
 8003286:	f7ff ffa3 	bl	80031d0 <bme680_set_regs>
 800328a:	4604      	mov	r4, r0
			dev->delay_ms(BME680_RESET_PERIOD);
 800328c:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800328e:	200a      	movs	r0, #10
 8003290:	4798      	blx	r3
			if (rslt == BME680_OK) {
 8003292:	b14c      	cbz	r4, 80032a8 <bme680_soft_reset+0x4a>
}
 8003294:	4620      	mov	r0, r4
 8003296:	b003      	add	sp, #12
 8003298:	bd30      	pop	{r4, r5, pc}
			rslt = get_mem_page(dev);
 800329a:	4628      	mov	r0, r5
 800329c:	f7ff ff4d 	bl	800313a <get_mem_page>
		if (rslt == BME680_OK) {
 80032a0:	4604      	mov	r4, r0
 80032a2:	2800      	cmp	r0, #0
 80032a4:	d1f6      	bne.n	8003294 <bme680_soft_reset+0x36>
 80032a6:	e7e8      	b.n	800327a <bme680_soft_reset+0x1c>
				if (dev->intf == BME680_SPI_INTF)
 80032a8:	78ab      	ldrb	r3, [r5, #2]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1f2      	bne.n	8003294 <bme680_soft_reset+0x36>
					rslt = get_mem_page(dev);
 80032ae:	4628      	mov	r0, r5
}
 80032b0:	b003      	add	sp, #12
 80032b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
					rslt = get_mem_page(dev);
 80032b6:	f7ff bf40 	b.w	800313a <get_mem_page>

080032ba <bme680_init>:
{
 80032ba:	b530      	push	{r4, r5, lr}
 80032bc:	b08d      	sub	sp, #52	@ 0x34
 80032be:	4605      	mov	r5, r0
	rslt = null_ptr_check(dev);
 80032c0:	f7ff fef6 	bl	80030b0 <null_ptr_check>
	if (rslt == BME680_OK) {
 80032c4:	4604      	mov	r4, r0
 80032c6:	2800      	cmp	r0, #0
 80032c8:	f040 80a5 	bne.w	8003416 <bme680_init+0x15c>
		rslt = bme680_soft_reset(dev);
 80032cc:	4628      	mov	r0, r5
 80032ce:	f7ff ffc6 	bl	800325e <bme680_soft_reset>
		if (rslt == BME680_OK) {
 80032d2:	4604      	mov	r4, r0
 80032d4:	2800      	cmp	r0, #0
 80032d6:	f040 809e 	bne.w	8003416 <bme680_init+0x15c>
			rslt = bme680_get_regs(BME680_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 80032da:	462b      	mov	r3, r5
 80032dc:	2201      	movs	r2, #1
 80032de:	4629      	mov	r1, r5
 80032e0:	20d0      	movs	r0, #208	@ 0xd0
 80032e2:	f7ff ff51 	bl	8003188 <bme680_get_regs>
			if (rslt == BME680_OK) {
 80032e6:	4604      	mov	r4, r0
 80032e8:	2800      	cmp	r0, #0
 80032ea:	f040 8094 	bne.w	8003416 <bme680_init+0x15c>
				if (dev->chip_id == BME680_CHIP_ID) {
 80032ee:	782b      	ldrb	r3, [r5, #0]
 80032f0:	2b61      	cmp	r3, #97	@ 0x61
 80032f2:	f040 8093 	bne.w	800341c <bme680_init+0x162>
	uint8_t coeff_array[BME680_COEFF_SIZE] = { 0 };
 80032f6:	4601      	mov	r1, r0
 80032f8:	9001      	str	r0, [sp, #4]
 80032fa:	2225      	movs	r2, #37	@ 0x25
 80032fc:	a802      	add	r0, sp, #8
 80032fe:	f022 fe71 	bl	8025fe4 <memset>
	rslt = null_ptr_check(dev);
 8003302:	4628      	mov	r0, r5
	uint8_t temp_var = 0; /* Temporary variable */
 8003304:	f88d 4003 	strb.w	r4, [sp, #3]
	rslt = null_ptr_check(dev);
 8003308:	f7ff fed2 	bl	80030b0 <null_ptr_check>
	if (rslt == BME680_OK) {
 800330c:	4604      	mov	r4, r0
 800330e:	2800      	cmp	r0, #0
 8003310:	f040 8081 	bne.w	8003416 <bme680_init+0x15c>
		rslt = bme680_get_regs(BME680_COEFF_ADDR1, coeff_array, BME680_COEFF_ADDR1_LEN, dev);
 8003314:	462b      	mov	r3, r5
 8003316:	2219      	movs	r2, #25
 8003318:	a901      	add	r1, sp, #4
 800331a:	2089      	movs	r0, #137	@ 0x89
 800331c:	f7ff ff34 	bl	8003188 <bme680_get_regs>
		if (rslt == BME680_OK)
 8003320:	4604      	mov	r4, r0
 8003322:	b938      	cbnz	r0, 8003334 <bme680_init+0x7a>
			rslt = bme680_get_regs(BME680_COEFF_ADDR2, &coeff_array[BME680_COEFF_ADDR1_LEN]
 8003324:	462b      	mov	r3, r5
 8003326:	2210      	movs	r2, #16
 8003328:	f10d 011d 	add.w	r1, sp, #29
 800332c:	20e1      	movs	r0, #225	@ 0xe1
 800332e:	f7ff ff2b 	bl	8003188 <bme680_get_regs>
 8003332:	4604      	mov	r4, r0
		dev->calib.par_t1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T1_MSB_REG],
 8003334:	f8bd 3025 	ldrh.w	r3, [sp, #37]	@ 0x25
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 8003338:	f89d 101f 	ldrb.w	r1, [sp, #31]
		dev->calib.par_t1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T1_MSB_REG],
 800333c:	82eb      	strh	r3, [r5, #22]
		dev->calib.par_t2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T2_MSB_REG],
 800333e:	f8bd 3005 	ldrh.w	r3, [sp, #5]
 8003342:	832b      	strh	r3, [r5, #24]
		dev->calib.par_t3 = (int8_t) (coeff_array[BME680_T3_REG]);
 8003344:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003348:	76ab      	strb	r3, [r5, #26]
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
 800334a:	f8bd 3009 	ldrh.w	r3, [sp, #9]
 800334e:	83ab      	strh	r3, [r5, #28]
		dev->calib.par_p2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P2_MSB_REG],
 8003350:	f8bd 300b 	ldrh.w	r3, [sp, #11]
 8003354:	83eb      	strh	r3, [r5, #30]
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
 8003356:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800335a:	f885 3020 	strb.w	r3, [r5, #32]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
 800335e:	f8bd 300f 	ldrh.w	r3, [sp, #15]
 8003362:	846b      	strh	r3, [r5, #34]	@ 0x22
		dev->calib.par_p5 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P5_MSB_REG],
 8003364:	f8bd 3011 	ldrh.w	r3, [sp, #17]
 8003368:	84ab      	strh	r3, [r5, #36]	@ 0x24
		dev->calib.par_p6 = (int8_t) (coeff_array[BME680_P6_REG]);
 800336a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800336e:	f885 3026 	strb.w	r3, [r5, #38]	@ 0x26
		dev->calib.par_p7 = (int8_t) (coeff_array[BME680_P7_REG]);
 8003372:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8003376:	f885 3027 	strb.w	r3, [r5, #39]	@ 0x27
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
 800337a:	f8bd 3017 	ldrh.w	r3, [sp, #23]
 800337e:	852b      	strh	r3, [r5, #40]	@ 0x28
		dev->calib.par_p9 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P9_MSB_REG],
 8003380:	f8bd 3019 	ldrh.w	r3, [sp, #25]
 8003384:	856b      	strh	r3, [r5, #42]	@ 0x2a
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);
 8003386:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800338a:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
 800338e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8003392:	f003 020f 	and.w	r2, r3, #15
			| ((coeff_array[BME680_H2_LSB_REG]) >> BME680_HUM_REG_SHIFT_VAL));
 8003396:	091b      	lsrs	r3, r3, #4
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
 8003398:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 800339c:	812a      	strh	r2, [r5, #8]
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 800339e:	f89d 201d 	ldrb.w	r2, [sp, #29]
			| ((coeff_array[BME680_H2_LSB_REG]) >> BME680_HUM_REG_SHIFT_VAL));
 80033a2:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 80033a6:	816b      	strh	r3, [r5, #10]
		dev->calib.par_h3 = (int8_t) coeff_array[BME680_H3_REG];
 80033a8:	9b08      	ldr	r3, [sp, #32]
 80033aa:	60eb      	str	r3, [r5, #12]
		dev->calib.par_h7 = (int8_t) coeff_array[BME680_H7_REG];
 80033ac:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80033b0:	742b      	strb	r3, [r5, #16]
		dev->calib.par_gh1 = (int8_t) coeff_array[BME680_GH1_REG];
 80033b2:	f89d 3029 	ldrb.w	r3, [sp, #41]	@ 0x29
 80033b6:	746b      	strb	r3, [r5, #17]
		dev->calib.par_gh2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_GH2_MSB_REG],
 80033b8:	f8bd 3027 	ldrh.w	r3, [sp, #39]	@ 0x27
 80033bc:	826b      	strh	r3, [r5, #18]
		dev->calib.par_gh3 = (int8_t) coeff_array[BME680_GH3_REG];
 80033be:	f89d 302a 	ldrb.w	r3, [sp, #42]	@ 0x2a
 80033c2:	752b      	strb	r3, [r5, #20]
		if (rslt == BME680_OK) {
 80033c4:	bb14      	cbnz	r4, 800340c <bme680_init+0x152>
			rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_RANGE_ADDR, &temp_var, 1, dev);
 80033c6:	462b      	mov	r3, r5
 80033c8:	2201      	movs	r2, #1
 80033ca:	f10d 0103 	add.w	r1, sp, #3
 80033ce:	2002      	movs	r0, #2
 80033d0:	f7ff feda 	bl	8003188 <bme680_get_regs>
			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
 80033d4:	f89d 3003 	ldrb.w	r3, [sp, #3]
			if (rslt == BME680_OK) {
 80033d8:	4604      	mov	r4, r0
			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
 80033da:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80033de:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
			if (rslt == BME680_OK) {
 80033e2:	b998      	cbnz	r0, 800340c <bme680_init+0x152>
				rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_VAL_ADDR, &temp_var, 1, dev);
 80033e4:	462b      	mov	r3, r5
 80033e6:	2201      	movs	r2, #1
 80033e8:	f10d 0103 	add.w	r1, sp, #3
 80033ec:	f7ff fecc 	bl	8003188 <bme680_get_regs>
				dev->calib.res_heat_val = (int8_t) temp_var;
 80033f0:	f89d 3003 	ldrb.w	r3, [sp, #3]
				if (rslt == BME680_OK)
 80033f4:	4604      	mov	r4, r0
				dev->calib.res_heat_val = (int8_t) temp_var;
 80033f6:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
				if (rslt == BME680_OK)
 80033fa:	b938      	cbnz	r0, 800340c <bme680_init+0x152>
					rslt = bme680_get_regs(BME680_ADDR_RANGE_SW_ERR_ADDR, &temp_var, 1, dev);
 80033fc:	462b      	mov	r3, r5
 80033fe:	2201      	movs	r2, #1
 8003400:	f10d 0103 	add.w	r1, sp, #3
 8003404:	2004      	movs	r0, #4
 8003406:	f7ff febf 	bl	8003188 <bme680_get_regs>
 800340a:	4604      	mov	r4, r0
		dev->calib.range_sw_err = ((int8_t) temp_var & (int8_t) BME680_RSERROR_MSK) / 16;
 800340c:	f99d 3003 	ldrsb.w	r3, [sp, #3]
 8003410:	111b      	asrs	r3, r3, #4
 8003412:	f885 3036 	strb.w	r3, [r5, #54]	@ 0x36
}
 8003416:	4620      	mov	r0, r4
 8003418:	b00d      	add	sp, #52	@ 0x34
 800341a:	bd30      	pop	{r4, r5, pc}
					rslt = BME680_E_DEV_NOT_FOUND;
 800341c:	f06f 0402 	mvn.w	r4, #2
 8003420:	e7f9      	b.n	8003416 <bme680_init+0x15c>

08003422 <bme680_set_sensor_mode>:
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
 8003422:	2374      	movs	r3, #116	@ 0x74
{
 8003424:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003426:	4604      	mov	r4, r0
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
 8003428:	f88d 3007 	strb.w	r3, [sp, #7]
	rslt = null_ptr_check(dev);
 800342c:	f7ff fe40 	bl	80030b0 <null_ptr_check>
	if (rslt == BME680_OK) {
 8003430:	bba0      	cbnz	r0, 800349c <bme680_set_sensor_mode+0x7a>
	uint8_t pow_mode = 0;
 8003432:	4605      	mov	r5, r0
			rslt = bme680_get_regs(BME680_CONF_T_P_MODE_ADDR, &tmp_pow_mode, 1, dev);
 8003434:	4623      	mov	r3, r4
 8003436:	2201      	movs	r2, #1
 8003438:	f10d 0106 	add.w	r1, sp, #6
 800343c:	2074      	movs	r0, #116	@ 0x74
 800343e:	f7ff fea3 	bl	8003188 <bme680_get_regs>
			if (rslt == BME680_OK) {
 8003442:	b9a0      	cbnz	r0, 800346e <bme680_set_sensor_mode+0x4c>
				pow_mode = (tmp_pow_mode & BME680_MODE_MSK);
 8003444:	f89d 3006 	ldrb.w	r3, [sp, #6]
				if (pow_mode != BME680_SLEEP_MODE) {
 8003448:	f013 0503 	ands.w	r5, r3, #3
 800344c:	d011      	beq.n	8003472 <bme680_set_sensor_mode+0x50>
					tmp_pow_mode = tmp_pow_mode & (~BME680_MODE_MSK); /* Set to sleep */
 800344e:	f023 0303 	bic.w	r3, r3, #3
					rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8003452:	2201      	movs	r2, #1
 8003454:	f10d 0106 	add.w	r1, sp, #6
 8003458:	f10d 0007 	add.w	r0, sp, #7
					tmp_pow_mode = tmp_pow_mode & (~BME680_MODE_MSK); /* Set to sleep */
 800345c:	f88d 3006 	strb.w	r3, [sp, #6]
					rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8003460:	4623      	mov	r3, r4
 8003462:	f7ff feb5 	bl	80031d0 <bme680_set_regs>
					dev->delay_ms(BME680_POLL_PERIOD_MS);
 8003466:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8003468:	200a      	movs	r0, #10
 800346a:	4798      	blx	r3
		} while (pow_mode != BME680_SLEEP_MODE);
 800346c:	e7e2      	b.n	8003434 <bme680_set_sensor_mode+0x12>
 800346e:	2d00      	cmp	r5, #0
 8003470:	d1e0      	bne.n	8003434 <bme680_set_sensor_mode+0x12>
		if (dev->power_mode != BME680_SLEEP_MODE) {
 8003472:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 8003476:	b18a      	cbz	r2, 800349c <bme680_set_sensor_mode+0x7a>
			tmp_pow_mode = (tmp_pow_mode & ~BME680_MODE_MSK) | (dev->power_mode & BME680_MODE_MSK);
 8003478:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800347c:	f002 0203 	and.w	r2, r2, #3
 8003480:	f023 0303 	bic.w	r3, r3, #3
 8003484:	4313      	orrs	r3, r2
 8003486:	f88d 3006 	strb.w	r3, [sp, #6]
			if (rslt == BME680_OK)
 800348a:	b938      	cbnz	r0, 800349c <bme680_set_sensor_mode+0x7a>
				rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 800348c:	4623      	mov	r3, r4
 800348e:	2201      	movs	r2, #1
 8003490:	f10d 0106 	add.w	r1, sp, #6
 8003494:	f10d 0007 	add.w	r0, sp, #7
 8003498:	f7ff fe9a 	bl	80031d0 <bme680_set_regs>
}
 800349c:	b003      	add	sp, #12
 800349e:	bd30      	pop	{r4, r5, pc}

080034a0 <bme680_set_sensor_settings>:
{
 80034a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t data = 0;
 80034a2:	2300      	movs	r3, #0
{
 80034a4:	b089      	sub	sp, #36	@ 0x24
 80034a6:	4606      	mov	r6, r0
	rslt = null_ptr_check(dev);
 80034a8:	4608      	mov	r0, r1
{
 80034aa:	460c      	mov	r4, r1
	uint8_t data = 0;
 80034ac:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 80034b0:	9304      	str	r3, [sp, #16]
 80034b2:	f8ad 3014 	strh.w	r3, [sp, #20]
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 80034b6:	9306      	str	r3, [sp, #24]
 80034b8:	f8ad 301c 	strh.w	r3, [sp, #28]
	rslt = null_ptr_check(dev);
 80034bc:	f7ff fdf8 	bl	80030b0 <null_ptr_check>
	if (rslt == BME680_OK) {
 80034c0:	2800      	cmp	r0, #0
 80034c2:	f040 80fc 	bne.w	80036be <bme680_set_sensor_settings+0x21e>
		if (desired_settings & BME680_GAS_MEAS_SEL)
 80034c6:	f016 0308 	ands.w	r3, r6, #8
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */
 80034ca:	f891 7044 	ldrb.w	r7, [r1, #68]	@ 0x44
		if (desired_settings & BME680_GAS_MEAS_SEL)
 80034ce:	d105      	bne.n	80034dc <bme680_set_sensor_settings+0x3c>
		dev->power_mode = BME680_SLEEP_MODE;
 80034d0:	f881 3044 	strb.w	r3, [r1, #68]	@ 0x44
			rslt = bme680_set_sensor_mode(dev);
 80034d4:	4620      	mov	r0, r4
 80034d6:	f7ff ffa4 	bl	8003422 <bme680_set_sensor_mode>
 80034da:	e007      	b.n	80034ec <bme680_set_sensor_settings+0x4c>
		if (dev->power_mode == BME680_FORCED_MODE) {
 80034dc:	2f01      	cmp	r7, #1
		uint8_t reg_data[2] = {0};
 80034de:	f8ad 000c 	strh.w	r0, [sp, #12]
		if (dev->power_mode == BME680_FORCED_MODE) {
 80034e2:	f000 80ee 	beq.w	80036c2 <bme680_set_sensor_settings+0x222>
		dev->power_mode = BME680_SLEEP_MODE;
 80034e6:	f881 0044 	strb.w	r0, [r1, #68]	@ 0x44
			rslt = BME680_W_DEFINE_PWR_MODE;
 80034ea:	2001      	movs	r0, #1
		if (desired_settings & BME680_FILTER_SEL) {
 80034ec:	f016 0510 	ands.w	r5, r6, #16
 80034f0:	d01e      	beq.n	8003530 <bme680_set_sensor_settings+0x90>
			rslt = boundary_check(&dev->tph_sett.filter, BME680_FILTER_SIZE_0, BME680_FILTER_SIZE_127, dev);
 80034f2:	4622      	mov	r2, r4
 80034f4:	2107      	movs	r1, #7
 80034f6:	f104 003b 	add.w	r0, r4, #59	@ 0x3b
 80034fa:	f7ff fe37 	bl	800316c <boundary_check.constprop.0>
			if (rslt == BME680_OK)
 80034fe:	b928      	cbnz	r0, 800350c <bme680_set_sensor_settings+0x6c>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8003500:	4623      	mov	r3, r4
 8003502:	2201      	movs	r2, #1
 8003504:	4469      	add	r1, sp
 8003506:	2075      	movs	r0, #117	@ 0x75
 8003508:	f7ff fe3e 	bl	8003188 <bme680_get_regs>
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 800350c:	f894 303b 	ldrb.w	r3, [r4, #59]	@ 0x3b
			count++;
 8003510:	2501      	movs	r5, #1
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 8003512:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	f022 021c 	bic.w	r2, r2, #28
 800351c:	f003 031c 	and.w	r3, r3, #28
 8003520:	4313      	orrs	r3, r2
			reg_array[count] = reg_addr; /* Append configuration */
 8003522:	2275      	movs	r2, #117	@ 0x75
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 8003524:	f88d 3007 	strb.w	r3, [sp, #7]
			reg_array[count] = reg_addr; /* Append configuration */
 8003528:	f88d 2010 	strb.w	r2, [sp, #16]
			data_array[count] = data;
 800352c:	f88d 3018 	strb.w	r3, [sp, #24]
		if (desired_settings & BME680_HCNTRL_SEL) {
 8003530:	06b3      	lsls	r3, r6, #26
 8003532:	d522      	bpl.n	800357a <bme680_set_sensor_settings+0xda>
			rslt = boundary_check(&dev->gas_sett.heatr_ctrl, BME680_ENABLE_HEATER,
 8003534:	4622      	mov	r2, r4
 8003536:	2108      	movs	r1, #8
 8003538:	f104 003d 	add.w	r0, r4, #61	@ 0x3d
 800353c:	f7ff fe16 	bl	800316c <boundary_check.constprop.0>
			if (rslt == BME680_OK)
 8003540:	b930      	cbnz	r0, 8003550 <bme680_set_sensor_settings+0xb0>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8003542:	4623      	mov	r3, r4
 8003544:	2201      	movs	r2, #1
 8003546:	f10d 0107 	add.w	r1, sp, #7
 800354a:	2070      	movs	r0, #112	@ 0x70
 800354c:	f7ff fe1c 	bl	8003188 <bme680_get_regs>
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 8003550:	f89d 3007 	ldrb.w	r3, [sp, #7]
			reg_array[count] = reg_addr; /* Append configuration */
 8003554:	2170      	movs	r1, #112	@ 0x70
 8003556:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 800355a:	f023 0308 	bic.w	r3, r3, #8
 800355e:	f002 0208 	and.w	r2, r2, #8
 8003562:	4313      	orrs	r3, r2
 8003564:	f105 0220 	add.w	r2, r5, #32
			count++;
 8003568:	3501      	adds	r5, #1
			reg_array[count] = reg_addr; /* Append configuration */
 800356a:	446a      	add	r2, sp
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 800356c:	f88d 3007 	strb.w	r3, [sp, #7]
			count++;
 8003570:	b2ed      	uxtb	r5, r5
			reg_array[count] = reg_addr; /* Append configuration */
 8003572:	f802 1c10 	strb.w	r1, [r2, #-16]
			data_array[count] = data;
 8003576:	f802 3c08 	strb.w	r3, [r2, #-8]
		if (desired_settings & (BME680_OST_SEL | BME680_OSP_SEL)) {
 800357a:	07b1      	lsls	r1, r6, #30
 800357c:	d033      	beq.n	80035e6 <bme680_set_sensor_settings+0x146>
			rslt = boundary_check(&dev->tph_sett.os_temp, BME680_OS_NONE, BME680_OS_16X, dev);
 800357e:	4622      	mov	r2, r4
 8003580:	2105      	movs	r1, #5
 8003582:	f104 0039 	add.w	r0, r4, #57	@ 0x39
 8003586:	f7ff fdf1 	bl	800316c <boundary_check.constprop.0>
			if (rslt == BME680_OK)
 800358a:	b930      	cbnz	r0, 800359a <bme680_set_sensor_settings+0xfa>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 800358c:	4623      	mov	r3, r4
 800358e:	2201      	movs	r2, #1
 8003590:	f10d 0107 	add.w	r1, sp, #7
 8003594:	2074      	movs	r0, #116	@ 0x74
 8003596:	f7ff fdf7 	bl	8003188 <bme680_get_regs>
			if (desired_settings & BME680_OST_SEL)
 800359a:	07f2      	lsls	r2, r6, #31
 800359c:	d509      	bpl.n	80035b2 <bme680_set_sensor_settings+0x112>
				data = BME680_SET_BITS(data, BME680_OST, dev->tph_sett.os_temp);
 800359e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80035a2:	f894 2039 	ldrb.w	r2, [r4, #57]	@ 0x39
 80035a6:	f003 031f 	and.w	r3, r3, #31
 80035aa:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 80035ae:	f88d 3007 	strb.w	r3, [sp, #7]
			if (desired_settings & BME680_OSP_SEL)
 80035b2:	07b3      	lsls	r3, r6, #30
 80035b4:	d50b      	bpl.n	80035ce <bme680_set_sensor_settings+0x12e>
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);
 80035b6:	f894 303a 	ldrb.w	r3, [r4, #58]	@ 0x3a
 80035ba:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	f022 021c 	bic.w	r2, r2, #28
 80035c4:	f003 031c 	and.w	r3, r3, #28
 80035c8:	4313      	orrs	r3, r2
 80035ca:	f88d 3007 	strb.w	r3, [sp, #7]
			reg_array[count] = reg_addr;
 80035ce:	f105 0320 	add.w	r3, r5, #32
 80035d2:	2274      	movs	r2, #116	@ 0x74
			count++;
 80035d4:	3501      	adds	r5, #1
			reg_array[count] = reg_addr;
 80035d6:	446b      	add	r3, sp
			count++;
 80035d8:	b2ed      	uxtb	r5, r5
			reg_array[count] = reg_addr;
 80035da:	f803 2c10 	strb.w	r2, [r3, #-16]
			data_array[count] = data;
 80035de:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80035e2:	f803 2c08 	strb.w	r2, [r3, #-8]
		if (desired_settings & BME680_OSH_SEL) {
 80035e6:	0771      	lsls	r1, r6, #29
 80035e8:	d522      	bpl.n	8003630 <bme680_set_sensor_settings+0x190>
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
 80035ea:	4622      	mov	r2, r4
 80035ec:	2105      	movs	r1, #5
 80035ee:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 80035f2:	f7ff fdbb 	bl	800316c <boundary_check.constprop.0>
			if (rslt == BME680_OK)
 80035f6:	b930      	cbnz	r0, 8003606 <bme680_set_sensor_settings+0x166>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 80035f8:	4623      	mov	r3, r4
 80035fa:	2201      	movs	r2, #1
 80035fc:	f10d 0107 	add.w	r1, sp, #7
 8003600:	2072      	movs	r0, #114	@ 0x72
 8003602:	f7ff fdc1 	bl	8003188 <bme680_get_regs>
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 8003606:	f89d 3007 	ldrb.w	r3, [sp, #7]
			reg_array[count] = reg_addr; /* Append configuration */
 800360a:	2172      	movs	r1, #114	@ 0x72
 800360c:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 8003610:	f023 0307 	bic.w	r3, r3, #7
 8003614:	f002 0207 	and.w	r2, r2, #7
 8003618:	4313      	orrs	r3, r2
 800361a:	f105 0220 	add.w	r2, r5, #32
			count++;
 800361e:	3501      	adds	r5, #1
			reg_array[count] = reg_addr; /* Append configuration */
 8003620:	446a      	add	r2, sp
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 8003622:	f88d 3007 	strb.w	r3, [sp, #7]
			count++;
 8003626:	b2ed      	uxtb	r5, r5
			reg_array[count] = reg_addr; /* Append configuration */
 8003628:	f802 1c10 	strb.w	r1, [r2, #-16]
			data_array[count] = data;
 800362c:	f802 3c08 	strb.w	r3, [r2, #-8]
		if (desired_settings & (BME680_RUN_GAS_SEL | BME680_NBCONV_SEL)) {
 8003630:	f016 0fc0 	tst.w	r6, #192	@ 0xc0
 8003634:	d03a      	beq.n	80036ac <bme680_set_sensor_settings+0x20c>
			rslt = boundary_check(&dev->gas_sett.run_gas, BME680_RUN_GAS_DISABLE,
 8003636:	4622      	mov	r2, r4
 8003638:	2101      	movs	r1, #1
 800363a:	f104 003e 	add.w	r0, r4, #62	@ 0x3e
 800363e:	f7ff fd95 	bl	800316c <boundary_check.constprop.0>
			if (rslt == BME680_OK) {
 8003642:	b960      	cbnz	r0, 800365e <bme680_set_sensor_settings+0x1be>
				rslt = boundary_check(&dev->gas_sett.nb_conv, BME680_NBCONV_MIN,
 8003644:	210a      	movs	r1, #10
 8003646:	f104 003c 	add.w	r0, r4, #60	@ 0x3c
 800364a:	f7ff fd8f 	bl	800316c <boundary_check.constprop.0>
			if (rslt == BME680_OK)
 800364e:	b930      	cbnz	r0, 800365e <bme680_set_sensor_settings+0x1be>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8003650:	4623      	mov	r3, r4
 8003652:	2201      	movs	r2, #1
 8003654:	f10d 0107 	add.w	r1, sp, #7
 8003658:	2071      	movs	r0, #113	@ 0x71
 800365a:	f7ff fd95 	bl	8003188 <bme680_get_regs>
			if (desired_settings & BME680_RUN_GAS_SEL)
 800365e:	0672      	lsls	r2, r6, #25
 8003660:	d50b      	bpl.n	800367a <bme680_set_sensor_settings+0x1da>
				data = BME680_SET_BITS(data, BME680_RUN_GAS, dev->gas_sett.run_gas);
 8003662:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8003666:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800366a:	011b      	lsls	r3, r3, #4
 800366c:	f022 0210 	bic.w	r2, r2, #16
 8003670:	f003 0310 	and.w	r3, r3, #16
 8003674:	4313      	orrs	r3, r2
 8003676:	f88d 3007 	strb.w	r3, [sp, #7]
			if (desired_settings & BME680_NBCONV_SEL)
 800367a:	0633      	lsls	r3, r6, #24
 800367c:	d50a      	bpl.n	8003694 <bme680_set_sensor_settings+0x1f4>
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);
 800367e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003682:	f894 203c 	ldrb.w	r2, [r4, #60]	@ 0x3c
 8003686:	f023 030f 	bic.w	r3, r3, #15
 800368a:	f002 020f 	and.w	r2, r2, #15
 800368e:	4313      	orrs	r3, r2
 8003690:	f88d 3007 	strb.w	r3, [sp, #7]
			reg_array[count] = reg_addr; /* Append configuration */
 8003694:	f105 0320 	add.w	r3, r5, #32
 8003698:	2271      	movs	r2, #113	@ 0x71
			count++;
 800369a:	3501      	adds	r5, #1
			reg_array[count] = reg_addr; /* Append configuration */
 800369c:	446b      	add	r3, sp
			count++;
 800369e:	b2ed      	uxtb	r5, r5
			reg_array[count] = reg_addr; /* Append configuration */
 80036a0:	f803 2c10 	strb.w	r2, [r3, #-16]
			data_array[count] = data;
 80036a4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80036a8:	f803 2c08 	strb.w	r2, [r3, #-8]
		if (rslt == BME680_OK)
 80036ac:	b928      	cbnz	r0, 80036ba <bme680_set_sensor_settings+0x21a>
			rslt = bme680_set_regs(reg_array, data_array, count, dev);
 80036ae:	4623      	mov	r3, r4
 80036b0:	462a      	mov	r2, r5
 80036b2:	a906      	add	r1, sp, #24
 80036b4:	a804      	add	r0, sp, #16
 80036b6:	f7ff fd8b 	bl	80031d0 <bme680_set_regs>
		dev->power_mode = intended_power_mode;
 80036ba:	f884 7044 	strb.w	r7, [r4, #68]	@ 0x44
}
 80036be:	b009      	add	sp, #36	@ 0x24
 80036c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (temp > 400) /* Cap temperature */
 80036c2:	f8b1 2040 	ldrh.w	r2, [r1, #64]	@ 0x40
	var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 80036c6:	f9b1 3012 	ldrsh.w	r3, [r1, #18]
 80036ca:	f5b2 7fc8 	cmp.w	r2, #400	@ 0x190
 80036ce:	f503 3316 	add.w	r3, r3, #153600	@ 0x25800
 80036d2:	bf28      	it	cs
 80036d4:	f44f 72c8 	movcs.w	r2, #400	@ 0x190
 80036d8:	f203 1399 	addw	r3, r3, #409	@ 0x199
 80036dc:	435a      	muls	r2, r3
 80036de:	2314      	movs	r3, #20
 80036e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80036e4:	230a      	movs	r3, #10
 80036e6:	f502 1248 	add.w	r2, r2, #3276800	@ 0x320000
 80036ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80036ee:	f991 3011 	ldrsb.w	r3, [r1, #17]
 80036f2:	f503 7344 	add.w	r3, r3, #784	@ 0x310
 80036f6:	435a      	muls	r2, r3
	var1 = (((int32_t) dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
 80036f8:	f991 3004 	ldrsb.w	r3, [r1, #4]
 80036fc:	f991 1014 	ldrsb.w	r1, [r1, #20]
 8003700:	fb13 f301 	smulbb	r3, r3, r1
 8003704:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003708:	fb93 f3f1 	sdiv	r3, r3, r1
 800370c:	021b      	lsls	r3, r3, #8
	var5 = (131 * dev->calib.res_heat_val) + 65536;
 800370e:	2183      	movs	r1, #131	@ 0x83
	var3 = var1 + (var2 / 2);
 8003710:	eb03 0362 	add.w	r3, r3, r2, asr #1
	var4 = (var3 / (dev->calib.res_heat_range + 4));
 8003714:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
 8003718:	3204      	adds	r2, #4
 800371a:	fbb3 f3f2 	udiv	r3, r3, r2
	var5 = (131 * dev->calib.res_heat_val) + 65536;
 800371e:	f994 2035 	ldrsb.w	r2, [r4, #53]	@ 0x35
 8003722:	434a      	muls	r2, r1
 8003724:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
	heatr_res_x100 = (int32_t) (((var4 / var5) - 250) * 34);
 8003728:	fbb3 f3f2 	udiv	r3, r3, r2
 800372c:	2222      	movs	r2, #34	@ 0x22
 800372e:	3bfa      	subs	r3, #250	@ 0xfa
 8003730:	4353      	muls	r3, r2
	heatr_res = (uint8_t) ((heatr_res_x100 + 50) / 100);
 8003732:	2264      	movs	r2, #100	@ 0x64
 8003734:	3332      	adds	r3, #50	@ 0x32
 8003736:	fb93 f3f2 	sdiv	r3, r3, r2
 800373a:	f88d 300c 	strb.w	r3, [sp, #12]
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
 800373e:	f246 435a 	movw	r3, #25690	@ 0x645a
 8003742:	f8ad 3008 	strh.w	r3, [sp, #8]
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
 8003746:	f8b4 3042 	ldrh.w	r3, [r4, #66]	@ 0x42
	if (dur >= 0xfc0) {
 800374a:	f5b3 6f7c 	cmp.w	r3, #4032	@ 0xfc0
 800374e:	d21a      	bcs.n	8003786 <bme680_set_sensor_settings+0x2e6>
		while (dur > 0x3F) {
 8003750:	2b3f      	cmp	r3, #63	@ 0x3f
 8003752:	f100 0201 	add.w	r2, r0, #1
 8003756:	d813      	bhi.n	8003780 <bme680_set_sensor_settings+0x2e0>
		durval = (uint8_t) (dur + (factor * 64));
 8003758:	eb03 1380 	add.w	r3, r3, r0, lsl #6
 800375c:	b2db      	uxtb	r3, r3
			dev->gas_sett.nb_conv = 0;
 800375e:	2500      	movs	r5, #0
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
 8003760:	f88d 300d 	strb.w	r3, [sp, #13]
			rslt = bme680_set_regs(reg_addr, reg_data, 2, dev);
 8003764:	2202      	movs	r2, #2
 8003766:	4623      	mov	r3, r4
 8003768:	a903      	add	r1, sp, #12
 800376a:	a802      	add	r0, sp, #8
			dev->gas_sett.nb_conv = 0;
 800376c:	f884 503c 	strb.w	r5, [r4, #60]	@ 0x3c
			rslt = bme680_set_regs(reg_addr, reg_data, 2, dev);
 8003770:	f7ff fd2e 	bl	80031d0 <bme680_set_regs>
		dev->power_mode = BME680_SLEEP_MODE;
 8003774:	f884 5044 	strb.w	r5, [r4, #68]	@ 0x44
		if (rslt == BME680_OK)
 8003778:	2800      	cmp	r0, #0
 800377a:	f47f aeb7 	bne.w	80034ec <bme680_set_sensor_settings+0x4c>
 800377e:	e6a9      	b.n	80034d4 <bme680_set_sensor_settings+0x34>
			dur = dur / 4;
 8003780:	089b      	lsrs	r3, r3, #2
 8003782:	4610      	mov	r0, r2
 8003784:	e7e4      	b.n	8003750 <bme680_set_sensor_settings+0x2b0>
		durval = 0xff; /* Max duration*/
 8003786:	23ff      	movs	r3, #255	@ 0xff
 8003788:	e7e9      	b.n	800375e <bme680_set_sensor_settings+0x2be>
	...

0800378c <bme680_get_profile_dur>:
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 800378c:	4b18      	ldr	r3, [pc, #96]	@ (80037f0 <bme680_get_profile_dur+0x64>)
{
 800378e:	4602      	mov	r2, r0
 8003790:	b513      	push	{r0, r1, r4, lr}
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 8003792:	6818      	ldr	r0, [r3, #0]
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
 8003794:	f240 74ab 	movw	r4, #1963	@ 0x7ab
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 8003798:	889b      	ldrh	r3, [r3, #4]
 800379a:	9000      	str	r0, [sp, #0]
 800379c:	f8ad 3004 	strh.w	r3, [sp, #4]
	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 80037a0:	f891 3039 	ldrb.w	r3, [r1, #57]	@ 0x39
 80037a4:	3308      	adds	r3, #8
 80037a6:	446b      	add	r3, sp
 80037a8:	f813 0c08 	ldrb.w	r0, [r3, #-8]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 80037ac:	f891 303a 	ldrb.w	r3, [r1, #58]	@ 0x3a
 80037b0:	3308      	adds	r3, #8
 80037b2:	446b      	add	r3, sp
 80037b4:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80037b8:	4403      	add	r3, r0
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
 80037ba:	f891 0038 	ldrb.w	r0, [r1, #56]	@ 0x38
 80037be:	3008      	adds	r0, #8
 80037c0:	4468      	add	r0, sp
 80037c2:	f810 0c08 	ldrb.w	r0, [r0, #-8]
 80037c6:	4418      	add	r0, r3
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
 80037c8:	f241 23b9 	movw	r3, #4793	@ 0x12b9
 80037cc:	fb04 3300 	mla	r3, r4, r0, r3
	tph_dur /= UINT32_C(1000); /* Convert to ms */
 80037d0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80037d4:	fbb3 f3f0 	udiv	r3, r3, r0
	tph_dur += UINT32_C(1); /* Wake up duration of 1ms */
 80037d8:	3301      	adds	r3, #1
	*duration = (uint16_t) tph_dur;
 80037da:	b29b      	uxth	r3, r3
 80037dc:	8013      	strh	r3, [r2, #0]
	if (dev->gas_sett.run_gas) {
 80037de:	f891 003e 	ldrb.w	r0, [r1, #62]	@ 0x3e
 80037e2:	b118      	cbz	r0, 80037ec <bme680_get_profile_dur+0x60>
		*duration += dev->gas_sett.heatr_dur;
 80037e4:	f8b1 1042 	ldrh.w	r1, [r1, #66]	@ 0x42
 80037e8:	440b      	add	r3, r1
 80037ea:	8013      	strh	r3, [r2, #0]
}
 80037ec:	b002      	add	sp, #8
 80037ee:	bd10      	pop	{r4, pc}
 80037f0:	08026bf0 	.word	0x08026bf0

080037f4 <bme680_get_sensor_data>:
{
 80037f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037f8:	4607      	mov	r7, r0
 80037fa:	b0a7      	sub	sp, #156	@ 0x9c
	rslt = null_ptr_check(dev);
 80037fc:	4608      	mov	r0, r1
{
 80037fe:	460c      	mov	r4, r1
	rslt = null_ptr_check(dev);
 8003800:	f7ff fc56 	bl	80030b0 <null_ptr_check>
	if (rslt == BME680_OK) {
 8003804:	4606      	mov	r6, r0
 8003806:	2800      	cmp	r0, #0
 8003808:	f040 8185 	bne.w	8003b16 <bme680_get_sensor_data+0x322>
	uint8_t buff[BME680_FIELD_LENGTH] = { 0 };
 800380c:	f04f 080a 	mov.w	r8, #10
 8003810:	9004      	str	r0, [sp, #16]
 8003812:	f8cd 0013 	str.w	r0, [sp, #19]
 8003816:	e9cd 0002 	strd	r0, r0, [sp, #8]
		if (rslt == BME680_OK) {
 800381a:	2e00      	cmp	r6, #0
 800381c:	f040 8182 	bne.w	8003b24 <bme680_get_sensor_data+0x330>
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
 8003820:	4623      	mov	r3, r4
 8003822:	220f      	movs	r2, #15
 8003824:	a902      	add	r1, sp, #8
 8003826:	201d      	movs	r0, #29
 8003828:	f7ff fcae 	bl	8003188 <bme680_get_regs>
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 800382c:	f89d 1011 	ldrb.w	r1, [sp, #17]
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
 8003830:	4606      	mov	r6, r0
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 8003832:	f89d 5016 	ldrb.w	r5, [sp, #22]
			data->status = buff[0] & BME680_NEW_DATA_MSK;
 8003836:	f89d 0008 	ldrb.w	r0, [sp, #8]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 800383a:	9100      	str	r1, [sp, #0]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 800383c:	f89d 1015 	ldrb.w	r1, [sp, #21]
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
 8003840:	f000 030f 	and.w	r3, r0, #15
			data->status = buff[0] & BME680_NEW_DATA_MSK;
 8003844:	f020 007f 	bic.w	r0, r0, #127	@ 0x7f
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 8003848:	f89d e00a 	ldrb.w	lr, [sp, #10]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 800384c:	9101      	str	r1, [sp, #4]
 800384e:	f005 0130 	and.w	r1, r5, #48	@ 0x30
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
 8003852:	707b      	strb	r3, [r7, #1]
			data->meas_index = buff[1];
 8003854:	4301      	orrs	r1, r0
 8003856:	f89d 3009 	ldrb.w	r3, [sp, #9]
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 800385a:	f89d 900b 	ldrb.w	r9, [sp, #11]
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 800385e:	7039      	strb	r1, [r7, #0]
			if (data->status & BME680_NEW_DATA_MSK) {
 8003860:	0609      	lsls	r1, r1, #24
			data->meas_index = buff[1];
 8003862:	70bb      	strb	r3, [r7, #2]
				| ((uint32_t) buff[4] / 16));
 8003864:	f89d 200c 	ldrb.w	r2, [sp, #12]
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 8003868:	f89d a00d 	ldrb.w	sl, [sp, #13]
 800386c:	f89d b00e 	ldrb.w	fp, [sp, #14]
				| ((uint32_t) buff[7] / 16));
 8003870:	f89d 300f 	ldrb.w	r3, [sp, #15]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 8003874:	f89d c010 	ldrb.w	ip, [sp, #16]
			if (data->status & BME680_NEW_DATA_MSK) {
 8003878:	f140 8151 	bpl.w	8003b1e <bme680_get_sensor_data+0x32a>
				| ((uint32_t) buff[7] / 16));
 800387c:	091b      	lsrs	r3, r3, #4
	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 800387e:	8ae0      	ldrh	r0, [r4, #22]
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 8003880:	ea43 130b 	orr.w	r3, r3, fp, lsl #4
	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 8003884:	0040      	lsls	r0, r0, #1
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 8003886:	ea43 330a 	orr.w	r3, r3, sl, lsl #12
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 800388a:	f994 a01a 	ldrsb.w	sl, [r4, #26]
	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 800388e:	ebc0 00d3 	rsb	r0, r0, r3, lsr #3
 8003892:	ea4f 78e0 	mov.w	r8, r0, asr #31
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 8003896:	0843      	lsrs	r3, r0, #1
 8003898:	ea43 73c8 	orr.w	r3, r3, r8, lsl #31
 800389c:	fb03 f808 	mul.w	r8, r3, r8
 80038a0:	fba3 1303 	umull	r1, r3, r3, r3
 80038a4:	eb03 0348 	add.w	r3, r3, r8, lsl #1
 80038a8:	0b09      	lsrs	r1, r1, #12
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 80038aa:	ea4f 180a 	mov.w	r8, sl, lsl #4
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 80038ae:	ea41 5103 	orr.w	r1, r1, r3, lsl #20
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 80038b2:	ea4f 7aea 	mov.w	sl, sl, asr #31
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 80038b6:	131b      	asrs	r3, r3, #12
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 80038b8:	fb01 fa0a 	mul.w	sl, r1, sl
 80038bc:	fb08 aa03 	mla	sl, r8, r3, sl
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 80038c0:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 80038c4:	fba1 8108 	umull	r8, r1, r1, r8
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 80038c8:	fb83 3000 	smull	r3, r0, r3, r0
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 80038cc:	4451      	add	r1, sl
 80038ce:	ea4f 3898 	mov.w	r8, r8, lsr #14
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 80038d2:	0adb      	lsrs	r3, r3, #11
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 80038d4:	ea48 4881 	orr.w	r8, r8, r1, lsl #18
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 80038d8:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
	dev->calib.t_fine = (int32_t) (var2 + var3);
 80038dc:	4443      	add	r3, r8
	calc_temp = (int16_t) (((dev->calib.t_fine * 5) + 128) >> 8);
 80038de:	eb03 0183 	add.w	r1, r3, r3, lsl #2
	dev->calib.t_fine = (int32_t) (var2 + var3);
 80038e2:	6323      	str	r3, [r4, #48]	@ 0x30
	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 80038e4:	105b      	asrs	r3, r3, #1
	calc_temp = (int16_t) (((dev->calib.t_fine * 5) + 128) >> 8);
 80038e6:	3180      	adds	r1, #128	@ 0x80
	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 80038e8:	f5a3 437a 	sub.w	r3, r3, #64000	@ 0xfa00
	calc_temp = (int16_t) (((dev->calib.t_fine * 5) + 128) >> 8);
 80038ec:	ea4f 2821 	mov.w	r8, r1, asr #8
				data->temperature = calc_temperature(adc_temp, dev);
 80038f0:	f341 210f 	sbfx	r1, r1, #8, #16
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 80038f4:	1098      	asrs	r0, r3, #2
				data->temperature = calc_temperature(adc_temp, dev);
 80038f6:	ee07 1a90 	vmov	s15, r1
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 80038fa:	4340      	muls	r0, r0
				data->temperature = calc_temperature(adc_temp, dev);
 80038fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 8003900:	ea4f 2ae0 	mov.w	sl, r0, asr #11
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8003904:	1340      	asrs	r0, r0, #13
				data->temperature = calc_temperature(adc_temp, dev);
 8003906:	edc7 7a01 	vstr	s15, [r7, #4]
		(int32_t)dev->calib.par_p6) >> 2;
 800390a:	f994 1026 	ldrsb.w	r1, [r4, #38]	@ 0x26
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 800390e:	fb01 fa0a 	mul.w	sl, r1, sl
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
 8003912:	f9b4 1024 	ldrsh.w	r1, [r4, #36]	@ 0x24
 8003916:	4359      	muls	r1, r3
 8003918:	0049      	lsls	r1, r1, #1
 800391a:	eb01 01aa 	add.w	r1, r1, sl, asr #2
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
 800391e:	f9b4 a01e 	ldrsh.w	sl, [r4, #30]
 8003922:	fb03 fa0a 	mul.w	sl, r3, sl
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 8003926:	f994 3020 	ldrsb.w	r3, [r4, #32]
 800392a:	015b      	lsls	r3, r3, #5
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 800392c:	4358      	muls	r0, r3
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 800392e:	8ba3      	ldrh	r3, [r4, #28]
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 8003930:	10c0      	asrs	r0, r0, #3
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8003932:	eb00 006a 	add.w	r0, r0, sl, asr #1
	var1 = var1 >> 18;
 8003936:	1480      	asrs	r0, r0, #18
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 8003938:	f500 4000 	add.w	r0, r0, #32768	@ 0x8000
 800393c:	4358      	muls	r0, r3
				| ((uint32_t) buff[4] / 16));
 800393e:	0913      	lsrs	r3, r2, #4
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 8003940:	f9b4 2022 	ldrsh.w	r2, [r4, #34]	@ 0x22
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 8003944:	ea43 1309 	orr.w	r3, r3, r9, lsl #4
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 8003948:	0412      	lsls	r2, r2, #16
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 800394a:	ea43 330e 	orr.w	r3, r3, lr, lsl #12
		(int32_t)dev->calib.par_p8) >> 13;
 800394e:	f9b4 e028 	ldrsh.w	lr, [r4, #40]	@ 0x28
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 8003952:	eb02 02a1 	add.w	r2, r2, r1, asr #2
	pressure_comp = 1048576 - pres_adc;
 8003956:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 800395a:	13c0      	asrs	r0, r0, #15
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
 800395c:	eba3 3322 	sub.w	r3, r3, r2, asr #12
 8003960:	f640 4235 	movw	r2, #3125	@ 0xc35
 8003964:	4353      	muls	r3, r2
	if (pressure_comp >= BME680_MAX_OVERFLOW_VAL)
 8003966:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
		pressure_comp = ((pressure_comp / var1) << 1);
 800396a:	bfab      	itete	ge
 800396c:	fb93 f3f0 	sdivge	r3, r3, r0
		pressure_comp = ((pressure_comp << 1) / var1);
 8003970:	005b      	lsllt	r3, r3, #1
		pressure_comp = ((pressure_comp / var1) << 1);
 8003972:	005b      	lslge	r3, r3, #1
		pressure_comp = ((pressure_comp << 1) / var1);
 8003974:	fb93 f3f0 	sdivlt	r3, r3, r0
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 8003978:	10da      	asrs	r2, r3, #3
 800397a:	f9b4 002a 	ldrsh.w	r0, [r4, #42]	@ 0x2a
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 800397e:	1219      	asrs	r1, r3, #8
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 8003980:	4352      	muls	r2, r2
		(pressure_comp >> 3)) >> 13)) >> 12;
 8003982:	1352      	asrs	r2, r2, #13
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 8003984:	4342      	muls	r2, r0
	var2 = ((int32_t)(pressure_comp >> 2) *
 8003986:	1098      	asrs	r0, r3, #2
 8003988:	fb0e f000 	mul.w	r0, lr, r0
	uint32_t lookupTable1[16] = { UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647),
 800398c:	f10d 0e18 	add.w	lr, sp, #24
	var2 = ((int32_t)(pressure_comp >> 2) *
 8003990:	1340      	asrs	r0, r0, #13
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 8003992:	eb00 3222 	add.w	r2, r0, r2, asr #12
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 8003996:	fb01 f001 	mul.w	r0, r1, r1
 800399a:	4341      	muls	r1, r0
		(int32_t)dev->calib.par_p10) >> 17;
 800399c:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
		(int32_t)(pressure_comp >> 8) *
 80039a0:	4341      	muls	r1, r0
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 80039a2:	8920      	ldrh	r0, [r4, #8]
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 80039a4:	eb02 4261 	add.w	r2, r2, r1, asr #17
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 80039a8:	f994 1027 	ldrsb.w	r1, [r4, #39]	@ 0x27
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 80039ac:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
 80039b0:	eb03 1322 	add.w	r3, r3, r2, asr #4
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 80039b4:	2264      	movs	r2, #100	@ 0x64
				data->pressure = calc_pressure(adc_pres, dev);
 80039b6:	ee07 3a90 	vmov	s15, r3
 80039ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039be:	edc7 7a02 	vstr	s15, [r7, #8]
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 80039c2:	f994 300e 	ldrsb.w	r3, [r4, #14]
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 80039c6:	f994 100d 	ldrsb.w	r1, [r4, #13]
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 80039ca:	fb08 f303 	mul.w	r3, r8, r3
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 80039ce:	fb08 f101 	mul.w	r1, r8, r1
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 80039d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80039d6:	fb08 f303 	mul.w	r3, r8, r3
 80039da:	119b      	asrs	r3, r3, #6
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 80039dc:	fb91 f1f2 	sdiv	r1, r1, r2
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
 80039e0:	fb93 f3f2 	sdiv	r3, r3, r2
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 80039e4:	440b      	add	r3, r1
	var2 = ((int32_t) dev->calib.par_h2
 80039e6:	8961      	ldrh	r1, [r4, #10]
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
 80039e8:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 80039ec:	434b      	muls	r3, r1
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 80039ee:	9900      	ldr	r1, [sp, #0]
 80039f0:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
	uint32_t lookupTable1[16] = { UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647),
 80039f4:	f8df c148 	ldr.w	ip, [pc, #328]	@ 8003b40 <bme680_get_sensor_data+0x34c>
	var2 = ((int32_t) dev->calib.par_h2
 80039f8:	129b      	asrs	r3, r3, #10
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 80039fa:	eba1 1100 	sub.w	r1, r1, r0, lsl #4
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
 80039fe:	f994 000c 	ldrsb.w	r0, [r4, #12]
 8003a02:	fb08 f000 	mul.w	r0, r8, r0
 8003a06:	fb90 f0f2 	sdiv	r0, r0, r2
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 8003a0a:	eba1 0160 	sub.w	r1, r1, r0, asr #1
	var3 = var1 * var2;
 8003a0e:	434b      	muls	r3, r1
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8003a10:	f994 1010 	ldrsb.w	r1, [r4, #16]
 8003a14:	fb08 f101 	mul.w	r1, r8, r1
 8003a18:	fb91 f2f2 	sdiv	r2, r1, r2
	var4 = (int32_t) dev->calib.par_h6 << 7;
 8003a1c:	7be1      	ldrb	r1, [r4, #15]
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8003a1e:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
 8003a22:	1399      	asrs	r1, r3, #14
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8003a24:	1112      	asrs	r2, r2, #4
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
 8003a26:	4349      	muls	r1, r1
 8003a28:	1289      	asrs	r1, r1, #10
	var6 = (var4 * var5) >> 1;
 8003a2a:	4351      	muls	r1, r2
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
 8003a2c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003a30:	eb03 0361 	add.w	r3, r3, r1, asr #1
 8003a34:	129b      	asrs	r3, r3, #10
 8003a36:	4353      	muls	r3, r2
				data->humidity = calc_humidity(adc_hum, dev);
 8003a38:	4a40      	ldr	r2, [pc, #256]	@ (8003b3c <bme680_get_sensor_data+0x348>)
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
 8003a3a:	131b      	asrs	r3, r3, #12
	else if (calc_hum < 0)
 8003a3c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
				data->humidity = calc_humidity(adc_hum, dev);
 8003a40:	4293      	cmp	r3, r2
 8003a42:	bfa8      	it	ge
 8003a44:	4613      	movge	r3, r2
 8003a46:	ee07 3a90 	vmov	s15, r3
 8003a4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	uint32_t lookupTable1[16] = { UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647),
 8003a4e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
				data->humidity = calc_humidity(adc_hum, dev);
 8003a52:	edc7 7a03 	vstr	s15, [r7, #12]
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
 8003a56:	f994 8036 	ldrsb.w	r8, [r4, #54]	@ 0x36
	uint32_t lookupTable1[16] = { UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647),
 8003a5a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8003a5e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003a62:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8003a66:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003a6a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8003a6e:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
	uint32_t lookupTable2[16] = { UINT32_C(4096000000), UINT32_C(2048000000), UINT32_C(1024000000), UINT32_C(512000000),
 8003a72:	f10c 0c10 	add.w	ip, ip, #16
	uint32_t lookupTable1[16] = { UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647),
 8003a76:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
	uint32_t lookupTable2[16] = { UINT32_C(4096000000), UINT32_C(2048000000), UINT32_C(1024000000), UINT32_C(512000000),
 8003a7a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003a7e:	f10d 0e58 	add.w	lr, sp, #88	@ 0x58
 8003a82:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8003a86:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003a8a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8003a8e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003a92:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8003a96:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8003a9a:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8003a9e:	2305      	movs	r3, #5
 8003aa0:	f240 503c 	movw	r0, #1340	@ 0x53c
 8003aa4:	2200      	movs	r2, #0
		((int64_t) lookupTable1[gas_range])) >> 16;
 8003aa6:	f005 0c0f 	and.w	ip, r5, #15
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8003aaa:	fbc3 0208 	smlal	r0, r2, r3, r8
		((int64_t) lookupTable1[gas_range])) >> 16;
 8003aae:	ab26      	add	r3, sp, #152	@ 0x98
 8003ab0:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8003ab4:	f85c 1c80 	ldr.w	r1, [ip, #-128]
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8003ab8:	fba0 0301 	umull	r0, r3, r0, r1
 8003abc:	fb01 3302 	mla	r3, r1, r2, r3
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 8003ac0:	09aa      	lsrs	r2, r5, #6
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8003ac2:	9901      	ldr	r1, [sp, #4]
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8003ac4:	0c00      	lsrs	r0, r0, #16
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
 8003ac6:	f85c 5c40 	ldr.w	r5, [ip, #-64]
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8003aca:	ea4f 4e23 	mov.w	lr, r3, asr #16
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8003ace:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8003ad2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8003ad6:	03d2      	lsls	r2, r2, #15
 8003ad8:	f112 427f 	adds.w	r2, r2, #4278190080	@ 0xff000000
 8003adc:	eb61 0101 	sbc.w	r1, r1, r1
 8003ae0:	1812      	adds	r2, r2, r0
 8003ae2:	eb41 4323 	adc.w	r3, r1, r3, asr #16
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
 8003ae6:	fba5 0100 	umull	r0, r1, r5, r0
 8003aea:	fb05 110e 	mla	r1, r5, lr, r1
 8003aee:	0a40      	lsrs	r0, r0, #9
	calc_gas_res = (uint32_t) ((var3 + ((int64_t) var2 >> 1)) / (int64_t) var2);
 8003af0:	0855      	lsrs	r5, r2, #1
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
 8003af2:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
	calc_gas_res = (uint32_t) ((var3 + ((int64_t) var2 >> 1)) / (int64_t) var2);
 8003af6:	ea45 75c3 	orr.w	r5, r5, r3, lsl #31
 8003afa:	ea4f 0c63 	mov.w	ip, r3, asr #1
 8003afe:	1940      	adds	r0, r0, r5
 8003b00:	eb4c 2161 	adc.w	r1, ip, r1, asr #9
 8003b04:	f7fc fbec 	bl	80002e0 <__aeabi_ldivmod>
 8003b08:	ee07 0a90 	vmov	s15, r0
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
 8003b0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b10:	edc7 7a04 	vstr	s15, [r7, #16]
		if (rslt == BME680_OK) {
 8003b14:	b176      	cbz	r6, 8003b34 <bme680_get_sensor_data+0x340>
}
 8003b16:	4630      	mov	r0, r6
 8003b18:	b027      	add	sp, #156	@ 0x9c
 8003b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			dev->delay_ms(BME680_POLL_PERIOD_MS);
 8003b1e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8003b20:	200a      	movs	r0, #10
 8003b22:	4798      	blx	r3
	} while (tries);
 8003b24:	f108 38ff 	add.w	r8, r8, #4294967295
 8003b28:	f018 08ff 	ands.w	r8, r8, #255	@ 0xff
 8003b2c:	f47f ae75 	bne.w	800381a <bme680_get_sensor_data+0x26>
		rslt = BME680_W_NO_NEW_DATA;
 8003b30:	2602      	movs	r6, #2
 8003b32:	e7f0      	b.n	8003b16 <bme680_get_sensor_data+0x322>
				dev->new_fields = 1;
 8003b34:	2301      	movs	r3, #1
 8003b36:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8003b3a:	e7ec      	b.n	8003b16 <bme680_get_sensor_data+0x322>
 8003b3c:	000186a0 	.word	0x000186a0
 8003b40:	08026bf8 	.word	0x08026bf8

08003b44 <vApplicationIdleHook>:
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
  
  vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 8003b44:	4901      	ldr	r1, [pc, #4]	@ (8003b4c <vApplicationIdleHook+0x8>)
 8003b46:	2000      	movs	r0, #0
 8003b48:	f00a bf02 	b.w	800e950 <vTaskSetApplicationTaskTag>
 8003b4c:	0800119d 	.word	0x0800119d

08003b50 <user_i2c_read>:
struct bme680_field_data data;
struct bme680_dev gas_sensor;


int8_t user_i2c_read(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len)
    {
 8003b50:	b5f0      	push	{r4, r5, r6, r7, lr}

      if(HAL_I2C_Master_Transmit(&hi2c1, (dev_id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 8003b52:	0047      	lsls	r7, r0, #1
    {
 8003b54:	b085      	sub	sp, #20
      if(HAL_I2C_Master_Transmit(&hi2c1, (dev_id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 8003b56:	260a      	movs	r6, #10
    {
 8003b58:	4614      	mov	r4, r2
 8003b5a:	461d      	mov	r5, r3
 8003b5c:	f88d 100f 	strb.w	r1, [sp, #15]
      if(HAL_I2C_Master_Transmit(&hi2c1, (dev_id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 8003b60:	2301      	movs	r3, #1
 8003b62:	f10d 020f 	add.w	r2, sp, #15
 8003b66:	4639      	mov	r1, r7
 8003b68:	480a      	ldr	r0, [pc, #40]	@ (8003b94 <user_i2c_read+0x44>)
 8003b6a:	9600      	str	r6, [sp, #0]
 8003b6c:	f005 fe6c 	bl	8009848 <HAL_I2C_Master_Transmit>
 8003b70:	b968      	cbnz	r0, 8003b8e <user_i2c_read+0x3e>
      if(HAL_I2C_Master_Receive(&hi2c1, (dev_id << 1) | 0x01, reg_data, len, 10) != HAL_OK) return -1;
 8003b72:	462b      	mov	r3, r5
 8003b74:	4622      	mov	r2, r4
 8003b76:	f047 0101 	orr.w	r1, r7, #1
 8003b7a:	4806      	ldr	r0, [pc, #24]	@ (8003b94 <user_i2c_read+0x44>)
 8003b7c:	9600      	str	r6, [sp, #0]
 8003b7e:	f005 fef9 	bl	8009974 <HAL_I2C_Master_Receive>
 8003b82:	3800      	subs	r0, #0
 8003b84:	bf18      	it	ne
 8003b86:	2001      	movne	r0, #1
 8003b88:	4240      	negs	r0, r0
      return 0;
    }
 8003b8a:	b005      	add	sp, #20
 8003b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(HAL_I2C_Master_Transmit(&hi2c1, (dev_id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 8003b8e:	f04f 30ff 	mov.w	r0, #4294967295
 8003b92:	e7fa      	b.n	8003b8a <user_i2c_read+0x3a>
 8003b94:	200122a0 	.word	0x200122a0

08003b98 <user_delay_ms>:
    void user_delay_ms(uint32_t period)
    {
      HAL_Delay(period);
 8003b98:	f004 b8ec 	b.w	8007d74 <HAL_Delay>

08003b9c <user_i2c_write>:
    }

    int8_t user_i2c_write(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len)
    {
 8003b9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

      int8_t *buf;
      buf = malloc(len +1);
 8003ba0:	f103 0901 	add.w	r9, r3, #1
    {
 8003ba4:	461c      	mov	r4, r3
 8003ba6:	4606      	mov	r6, r0
 8003ba8:	4688      	mov	r8, r1
 8003baa:	4617      	mov	r7, r2
      buf = malloc(len +1);
 8003bac:	4648      	mov	r0, r9
 8003bae:	f021 ffa1 	bl	8025af4 <malloc>
      buf[0] = reg_addr;
      memcpy(buf +1, reg_data, len);
 8003bb2:	4622      	mov	r2, r4
      buf = malloc(len +1);
 8003bb4:	4605      	mov	r5, r0
      if(HAL_I2C_Master_Transmit(&hi2c1, (dev_id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 8003bb6:	f04f 34ff 	mov.w	r4, #4294967295
      memcpy(buf +1, reg_data, len);
 8003bba:	4639      	mov	r1, r7
      buf[0] = reg_addr;
 8003bbc:	f800 8b01 	strb.w	r8, [r0], #1
      memcpy(buf +1, reg_data, len);
 8003bc0:	f022 fb47 	bl	8026252 <memcpy>
      if(HAL_I2C_Master_Transmit(&hi2c1, (dev_id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 8003bc4:	462a      	mov	r2, r5
 8003bc6:	0071      	lsls	r1, r6, #1
 8003bc8:	4808      	ldr	r0, [pc, #32]	@ (8003bec <user_i2c_write+0x50>)
 8003bca:	fa1f f389 	uxth.w	r3, r9
 8003bce:	9400      	str	r4, [sp, #0]
 8003bd0:	f005 fe3a 	bl	8009848 <HAL_I2C_Master_Transmit>
 8003bd4:	4606      	mov	r6, r0
 8003bd6:	b930      	cbnz	r0, 8003be6 <user_i2c_write+0x4a>
      free(buf);
 8003bd8:	4628      	mov	r0, r5
 8003bda:	f021 ff93 	bl	8025b04 <free>
      return 0;
 8003bde:	4630      	mov	r0, r6
    }
 8003be0:	b003      	add	sp, #12
 8003be2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if(HAL_I2C_Master_Transmit(&hi2c1, (dev_id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 8003be6:	4620      	mov	r0, r4
 8003be8:	e7fa      	b.n	8003be0 <user_i2c_write+0x44>
 8003bea:	bf00      	nop
 8003bec:	200122a0 	.word	0x200122a0

08003bf0 <StartDefaultTask>:
void StartDefaultTask(void *argument)
{
  /* USER CODE BEGIN 5 */
  for(;;)
  {
	  rslt = bme680_get_sensor_data(&data, &gas_sensor);
 8003bf0:	4d19      	ldr	r5, [pc, #100]	@ (8003c58 <StartDefaultTask+0x68>)
 8003bf2:	4e1a      	ldr	r6, [pc, #104]	@ (8003c5c <StartDefaultTask+0x6c>)
{
 8003bf4:	b508      	push	{r3, lr}
	  rslt = bme680_get_sensor_data(&data, &gas_sensor);
 8003bf6:	4c1a      	ldr	r4, [pc, #104]	@ (8003c60 <StartDefaultTask+0x70>)
 8003bf8:	4629      	mov	r1, r5
 8003bfa:	4620      	mov	r0, r4
 8003bfc:	f7ff fdfa 	bl	80037f4 <bme680_get_sensor_data>

	  			temperature = data.temperature/100;
 8003c00:	edd4 6a01 	vldr	s13, [r4, #4]
 8003c04:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8003c64 <StartDefaultTask+0x74>
 8003c08:	4b17      	ldr	r3, [pc, #92]	@ (8003c68 <StartDefaultTask+0x78>)
 8003c0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
	  			humidity = data.humidity/1000;
 8003c0e:	ed94 6a03 	vldr	s12, [r4, #12]
 8003c12:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8003c6c <StartDefaultTask+0x7c>
	  rslt = bme680_get_sensor_data(&data, &gas_sensor);
 8003c16:	7030      	strb	r0, [r6, #0]
	  			temperature = data.temperature/100;
 8003c18:	ed83 7a00 	vstr	s14, [r3]
	  			humidity = data.humidity/1000;
 8003c1c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8003c20:	4b13      	ldr	r3, [pc, #76]	@ (8003c70 <StartDefaultTask+0x80>)
	  			pressure = data.pressure / 100;
 8003c22:	edd4 6a02 	vldr	s13, [r4, #8]
	  			humidity = data.humidity/1000;
 8003c26:	ed83 7a00 	vstr	s14, [r3]
	  			pressure = data.pressure / 100;
 8003c2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c2e:	4b11      	ldr	r3, [pc, #68]	@ (8003c74 <StartDefaultTask+0x84>)
 8003c30:	ed83 7a00 	vstr	s14, [r3]

	  			if(data.status & BME680_GASM_VALID_MSK)
 8003c34:	7823      	ldrb	r3, [r4, #0]
 8003c36:	069b      	lsls	r3, r3, #26
	  				gas_resistance = data.gas_resistance;
 8003c38:	bf42      	ittt	mi
 8003c3a:	4b0f      	ldrmi	r3, [pc, #60]	@ (8003c78 <StartDefaultTask+0x88>)
 8003c3c:	6922      	ldrmi	r2, [r4, #16]
 8003c3e:	601a      	strmi	r2, [r3, #0]

	  			if (gas_sensor.power_mode == BME680_FORCED_MODE)
 8003c40:	f895 3044 	ldrb.w	r3, [r5, #68]	@ 0x44
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d103      	bne.n	8003c50 <StartDefaultTask+0x60>
	  			{
	  				rslt = bme680_set_sensor_mode(&gas_sensor);
 8003c48:	4628      	mov	r0, r5
 8003c4a:	f7ff fbea 	bl	8003422 <bme680_set_sensor_mode>
 8003c4e:	7030      	strb	r0, [r6, #0]
	  			}
	  			osDelay(20);
 8003c50:	2014      	movs	r0, #20
 8003c52:	f009 f87f 	bl	800cd54 <osDelay>
	  rslt = bme680_get_sensor_data(&data, &gas_sensor);
 8003c56:	e7ce      	b.n	8003bf6 <StartDefaultTask+0x6>
 8003c58:	20011f30 	.word	0x20011f30
 8003c5c:	20011f9c 	.word	0x20011f9c
 8003c60:	20011f88 	.word	0x20011f88
 8003c64:	42c80000 	.word	0x42c80000
 8003c68:	20011fac 	.word	0x20011fac
 8003c6c:	447a0000 	.word	0x447a0000
 8003c70:	20011fa8 	.word	0x20011fa8
 8003c74:	20011fa4 	.word	0x20011fa4
 8003c78:	20011fa0 	.word	0x20011fa0

08003c7c <QSPI_WriteEnable.constprop.0>:
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 8003c7c:	b500      	push	{lr}
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003c7e:	f44f 7340 	mov.w	r3, #768	@ 0x300
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 8003c82:	b095      	sub	sp, #84	@ 0x54
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003c84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c88:	4817      	ldr	r0, [pc, #92]	@ (8003ce8 <QSPI_WriteEnable.constprop.0+0x6c>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003c8a:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8003c8c:	2306      	movs	r3, #6
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003c8e:	a906      	add	r1, sp, #24
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8003c90:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003c92:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003c94:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 8003c98:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DummyCycles       = 0;
 8003c9a:	930b      	str	r3, [sp, #44]	@ 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003c9c:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003c9e:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003ca2:	f007 fb71 	bl	800b388 <HAL_QSPI_Command>
 8003ca6:	b9e0      	cbnz	r0, 8003ce2 <QSPI_WriteEnable.constprop.0+0x66>
  s_config.Match           = MX25L512_SR_WREN;
 8003ca8:	2302      	movs	r3, #2
  s_config.Interval        = 0x10;
 8003caa:	2201      	movs	r2, #1
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8003cac:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8003cb0:	9004      	str	r0, [sp, #16]
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003cb2:	480d      	ldr	r0, [pc, #52]	@ (8003ce8 <QSPI_WriteEnable.constprop.0+0x6c>)
  s_config.Mask            = MX25L512_SR_WREN;
 8003cb4:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 8003cb8:	2310      	movs	r3, #16
 8003cba:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8003cbe:	2305      	movs	r3, #5
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003cc0:	466a      	mov	r2, sp
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8003cc2:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = QSPI_DATA_4_LINES;
 8003cc6:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003cca:	a906      	add	r1, sp, #24
  s_command.DataMode       = QSPI_DATA_4_LINES;
 8003ccc:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003cce:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003cd2:	f007 fc5a 	bl	800b58a <HAL_QSPI_AutoPolling>
 8003cd6:	3800      	subs	r0, #0
 8003cd8:	bf18      	it	ne
 8003cda:	2001      	movne	r0, #1
}
 8003cdc:	b015      	add	sp, #84	@ 0x54
 8003cde:	f85d fb04 	ldr.w	pc, [sp], #4
    return QSPI_ERROR;
 8003ce2:	2001      	movs	r0, #1
 8003ce4:	e7fa      	b.n	8003cdc <QSPI_WriteEnable.constprop.0+0x60>
 8003ce6:	bf00      	nop
 8003ce8:	20012040 	.word	0x20012040

08003cec <SystemClock_Config>:
{
 8003cec:	b510      	push	{r4, lr}
 8003cee:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003cf0:	2210      	movs	r2, #16
 8003cf2:	2100      	movs	r1, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003cf4:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003cf6:	a809      	add	r0, sp, #36	@ 0x24
 8003cf8:	f022 f974 	bl	8025fe4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003cfc:	2214      	movs	r2, #20
 8003cfe:	2100      	movs	r1, #0
 8003d00:	a802      	add	r0, sp, #8
 8003d02:	f022 f96f 	bl	8025fe4 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d06:	4b1e      	ldr	r3, [pc, #120]	@ (8003d80 <SystemClock_Config+0x94>)
  RCC_OscInitStruct.PLL.PLLN = 400;
 8003d08:	2119      	movs	r1, #25
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003d0a:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d0c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d0e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003d12:	641a      	str	r2, [r3, #64]	@ 0x40
 8003d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d1a:	9300      	str	r3, [sp, #0]
 8003d1c:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d1e:	4b19      	ldr	r3, [pc, #100]	@ (8003d84 <SystemClock_Config+0x98>)
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8003d26:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003d28:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003d30:	9301      	str	r3, [sp, #4]
 8003d32:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003d34:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003d38:	e9cd 2307 	strd	r2, r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003d3c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003d40:	e9cd 430d 	strd	r4, r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLN = 400;
 8003d44:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8003d48:	e9cd 130f 	strd	r1, r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLR = 7;
 8003d4c:	2307      	movs	r3, #7
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003d4e:	e9cd 4411 	strd	r4, r4, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLR = 7;
 8003d52:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003d54:	f007 fcac 	bl	800b6b0 <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003d58:	f007 f9aa 	bl	800b0b0 <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003d5c:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003d5e:	2000      	movs	r0, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8003d60:	2106      	movs	r1, #6
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003d62:	e9cd 3402 	strd	r3, r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003d66:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003d6a:	e9cd 0304 	strd	r0, r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003d6e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8003d72:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003d74:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8003d76:	f007 fe8d 	bl	800ba94 <HAL_RCC_ClockConfig>
}
 8003d7a:	b014      	add	sp, #80	@ 0x50
 8003d7c:	bd10      	pop	{r4, pc}
 8003d7e:	bf00      	nop
 8003d80:	40023800 	.word	0x40023800
 8003d84:	40007000 	.word	0x40007000

08003d88 <MX_I2C4_Init>:
{
 8003d88:	b538      	push	{r3, r4, r5, lr}
  hi2c4.Init.Timing = 0x00C0EAFF;
 8003d8a:	4a0d      	ldr	r2, [pc, #52]	@ (8003dc0 <MX_I2C4_Init+0x38>)
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003d8c:	2500      	movs	r5, #0
  hi2c4.Instance = I2C4;
 8003d8e:	4c0d      	ldr	r4, [pc, #52]	@ (8003dc4 <MX_I2C4_Init+0x3c>)
  hi2c4.Init.Timing = 0x00C0EAFF;
 8003d90:	4b0d      	ldr	r3, [pc, #52]	@ (8003dc8 <MX_I2C4_Init+0x40>)
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8003d92:	4620      	mov	r0, r4
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003d94:	6225      	str	r5, [r4, #32]
  hi2c4.Init.Timing = 0x00C0EAFF;
 8003d96:	e9c4 2300 	strd	r2, r3, [r4]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003d9a:	2301      	movs	r3, #1
  hi2c4.Init.OwnAddress2 = 0;
 8003d9c:	e9c4 5504 	strd	r5, r5, [r4, #16]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003da0:	e9c4 5302 	strd	r5, r3, [r4, #8]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003da4:	e9c4 5506 	strd	r5, r5, [r4, #24]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8003da8:	f005 fce4 	bl	8009774 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003dac:	4629      	mov	r1, r5
 8003dae:	4620      	mov	r0, r4
 8003db0:	f006 f837 	bl	8009e22 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8003db4:	4629      	mov	r1, r5
 8003db6:	4620      	mov	r0, r4
}
 8003db8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8003dbc:	f006 b857 	b.w	8009e6e <HAL_I2CEx_ConfigDigitalFilter>
 8003dc0:	40006000 	.word	0x40006000
 8003dc4:	2001224c 	.word	0x2001224c
 8003dc8:	00c0eaff 	.word	0x00c0eaff

08003dcc <main>:
{
 8003dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dd0:	b0bd      	sub	sp, #244	@ 0xf4

/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8003dd2:	2210      	movs	r2, #16
 8003dd4:	2100      	movs	r1, #0
  /* Disables the MPU */
  HAL_MPU_Disable();

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8003dd6:	2401      	movs	r4, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8003dd8:	a82e      	add	r0, sp, #184	@ 0xb8

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.BaseAddress = 0x90000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 8003dda:	261c      	movs	r6, #28
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8003ddc:	f022 f902 	bl	8025fe4 <memset>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8003de0:	2503      	movs	r5, #3
  HAL_MPU_Disable();
 8003de2:	f004 faa5 	bl	8008330 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8003de6:	f04f 5e00 	mov.w	lr, #536870912	@ 0x20000000
 8003dea:	4bcb      	ldr	r3, [pc, #812]	@ (8004118 <main+0x34c>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003dec:	a82e      	add	r0, sp, #184	@ 0xb8
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8003dee:	f8ad 40b8 	strh.w	r4, [sp, #184]	@ 0xb8
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8003df2:	f240 1701 	movw	r7, #257	@ 0x101
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8003df6:	e9cd e32f 	strd	lr, r3, [sp, #188]	@ 0xbc
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8003dfa:	4bc8      	ldr	r3, [pc, #800]	@ (800411c <main+0x350>)
 8003dfc:	9331      	str	r3, [sp, #196]	@ 0xc4
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003dfe:	f004 fab5 	bl	800836c <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x90000000;
 8003e02:	f04f 4310 	mov.w	r3, #2415919104	@ 0x90000000
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8003e06:	f88d 40b9 	strb.w	r4, [sp, #185]	@ 0xb9
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8003e0a:	2400      	movs	r4, #0
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003e0c:	a82e      	add	r0, sp, #184	@ 0xb8
  MPU_InitStruct.BaseAddress = 0x90000000;
 8003e0e:	932f      	str	r3, [sp, #188]	@ 0xbc
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 8003e10:	f88d 60c0 	strb.w	r6, [sp, #192]	@ 0xc0
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8003e14:	f88d 40c3 	strb.w	r4, [sp, #195]	@ 0xc3
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8003e18:	f8ad 40c6 	strh.w	r4, [sp, #198]	@ 0xc6
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003e1c:	f004 faa6 	bl	800836c <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8003e20:	2302      	movs	r3, #2
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003e22:	a82e      	add	r0, sp, #184	@ 0xb8
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8003e24:	f88d 50c3 	strb.w	r5, [sp, #195]	@ 0xc3
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8003e28:	f88d 30b9 	strb.w	r3, [sp, #185]	@ 0xb9
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 8003e2c:	2319      	movs	r3, #25
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8003e2e:	f8ad 70c6 	strh.w	r7, [sp, #198]	@ 0xc6
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 8003e32:	f88d 30c0 	strb.w	r3, [sp, #192]	@ 0xc0
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003e36:	f004 fa99 	bl	800836c <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
  MPU_InitStruct.BaseAddress = 0xC0000000;
 8003e3a:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003e3e:	a82e      	add	r0, sp, #184	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 8003e40:	f88d 60c0 	strb.w	r6, [sp, #192]	@ 0xc0

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8003e44:	2604      	movs	r6, #4
  MPU_InitStruct.BaseAddress = 0xC0000000;
 8003e46:	932f      	str	r3, [sp, #188]	@ 0xbc
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8003e48:	f88d 50b9 	strb.w	r5, [sp, #185]	@ 0xb9
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8003e4c:	f88d 40c3 	strb.w	r4, [sp, #195]	@ 0xc3
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8003e50:	f8ad 40c6 	strh.w	r4, [sp, #198]	@ 0xc6
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003e54:	f004 fa8a 	bl	800836c <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8003e58:	2317      	movs	r3, #23
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003e5a:	a82e      	add	r0, sp, #184	@ 0xb8
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8003e5c:	f88d 60b9 	strb.w	r6, [sp, #185]	@ 0xb9
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8003e60:	f88d 30c0 	strb.w	r3, [sp, #192]	@ 0xc0
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8003e64:	f88d 50c3 	strb.w	r5, [sp, #195]	@ 0xc3
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8003e68:	f8ad 70c6 	strh.w	r7, [sp, #198]	@ 0xc6
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003e6c:	f004 fa7e 	bl	800836c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8003e70:	4630      	mov	r0, r6
 8003e72:	f004 fa6b 	bl	800834c <HAL_MPU_Enable>
  __ASM volatile ("dsb 0xF":::"memory");
 8003e76:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003e7a:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8003e7e:	4aa8      	ldr	r2, [pc, #672]	@ (8004120 <main+0x354>)
 8003e80:	f8c2 4250 	str.w	r4, [r2, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8003e84:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003e88:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8003e8c:	6953      	ldr	r3, [r2, #20]
 8003e8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e92:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8003e94:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003e98:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8003e9c:	f8c2 4084 	str.w	r4, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003ea0:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8003ea4:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003ea8:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003eac:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003eb0:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8003eb4:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003eb6:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003eba:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003ebc:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 8003ec0:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003ec2:	f8c2 5260 	str.w	r5, [r2, #608]	@ 0x260
      } while (ways-- != 0U);
 8003ec6:	d2f9      	bcs.n	8003ebc <main+0xf0>
    } while(sets-- != 0U);
 8003ec8:	3b20      	subs	r3, #32
 8003eca:	f113 0f20 	cmn.w	r3, #32
 8003ece:	d1f2      	bne.n	8003eb6 <main+0xea>
 8003ed0:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8003ed4:	6953      	ldr	r3, [r2, #20]
 8003ed6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003eda:	6153      	str	r3, [r2, #20]
 8003edc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003ee0:	f3bf 8f6f 	isb	sy
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003ee4:	4e8f      	ldr	r6, [pc, #572]	@ (8004124 <main+0x358>)
  HAL_Init();
 8003ee6:	f003 ff21 	bl	8007d2c <HAL_Init>
  SystemClock_Config();
 8003eea:	f7ff feff 	bl	8003cec <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003eee:	2214      	movs	r2, #20
 8003ef0:	2100      	movs	r1, #0
 8003ef2:	a82e      	add	r0, sp, #184	@ 0xb8
 8003ef4:	f022 f876 	bl	8025fe4 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003ef8:	6b33      	ldr	r3, [r6, #48]	@ 0x30
  HAL_GPIO_WritePin(DSI_RESET_GPIO_Port, DSI_RESET_Pin, GPIO_PIN_SET);
 8003efa:	2201      	movs	r2, #1
 8003efc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003f00:	f043 0310 	orr.w	r3, r3, #16
  HAL_GPIO_WritePin(DSI_RESET_GPIO_Port, DSI_RESET_Pin, GPIO_PIN_SET);
 8003f04:	4888      	ldr	r0, [pc, #544]	@ (8004128 <main+0x35c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f06:	2501      	movs	r5, #1
 8003f08:	f44f 4700 	mov.w	r7, #32768	@ 0x8000
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003f0c:	6333      	str	r3, [r6, #48]	@ 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f0e:	2400      	movs	r4, #0
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003f10:	6b33      	ldr	r3, [r6, #48]	@ 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f12:	f04f 0b03 	mov.w	fp, #3
  GPIO_InitStruct.Pin = FRAME_RATE_Pin;
 8003f16:	f04f 0802 	mov.w	r8, #2
  hdsi.Init.TXEscapeCkdiv = 4;
 8003f1a:	f04f 0a04 	mov.w	sl, #4
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003f1e:	f003 0310 	and.w	r3, r3, #16
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8003f22:	f44f 7980 	mov.w	r9, #256	@ 0x100
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003f26:	9304      	str	r3, [sp, #16]
 8003f28:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f2a:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 8003f2c:	f043 0302 	orr.w	r3, r3, #2
 8003f30:	6333      	str	r3, [r6, #48]	@ 0x30
 8003f32:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 8003f34:	f003 0302 	and.w	r3, r3, #2
 8003f38:	9305      	str	r3, [sp, #20]
 8003f3a:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003f3c:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 8003f3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f42:	6333      	str	r3, [r6, #48]	@ 0x30
 8003f44:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 8003f46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f4a:	9306      	str	r3, [sp, #24]
 8003f4c:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f4e:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 8003f50:	f043 0308 	orr.w	r3, r3, #8
 8003f54:	6333      	str	r3, [r6, #48]	@ 0x30
 8003f56:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 8003f58:	f003 0308 	and.w	r3, r3, #8
 8003f5c:	9307      	str	r3, [sp, #28]
 8003f5e:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f60:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 8003f62:	f043 0304 	orr.w	r3, r3, #4
 8003f66:	6333      	str	r3, [r6, #48]	@ 0x30
 8003f68:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 8003f6a:	f003 0304 	and.w	r3, r3, #4
 8003f6e:	9308      	str	r3, [sp, #32]
 8003f70:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003f72:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 8003f74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f78:	6333      	str	r3, [r6, #48]	@ 0x30
 8003f7a:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 8003f7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f80:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003f84:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 8003f86:	f043 0320 	orr.w	r3, r3, #32
 8003f8a:	6333      	str	r3, [r6, #48]	@ 0x30
 8003f8c:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 8003f8e:	f003 0320 	and.w	r3, r3, #32
 8003f92:	930a      	str	r3, [sp, #40]	@ 0x28
 8003f94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003f96:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 8003f98:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f9c:	6333      	str	r3, [r6, #48]	@ 0x30
 8003f9e:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 8003fa0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fa4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003fa6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003fa8:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 8003faa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fae:	6333      	str	r3, [r6, #48]	@ 0x30
 8003fb0:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 8003fb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fb6:	930c      	str	r3, [sp, #48]	@ 0x30
 8003fb8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fba:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 8003fbc:	f043 0301 	orr.w	r3, r3, #1
 8003fc0:	6333      	str	r3, [r6, #48]	@ 0x30
 8003fc2:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 8003fc4:	f003 0301 	and.w	r3, r3, #1
 8003fc8:	930d      	str	r3, [sp, #52]	@ 0x34
 8003fca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
  HAL_GPIO_WritePin(DSI_RESET_GPIO_Port, DSI_RESET_Pin, GPIO_PIN_SET);
 8003fcc:	f005 fa64 	bl	8009498 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	21c0      	movs	r1, #192	@ 0xc0
 8003fd4:	4855      	ldr	r0, [pc, #340]	@ (800412c <main+0x360>)
 8003fd6:	f005 fa5f 	bl	8009498 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8003fda:	2200      	movs	r2, #0
 8003fdc:	2140      	movs	r1, #64	@ 0x40
 8003fde:	4854      	ldr	r0, [pc, #336]	@ (8004130 <main+0x364>)
 8003fe0:	f005 fa5a 	bl	8009498 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_RESET);
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	2102      	movs	r1, #2
 8003fe8:	484f      	ldr	r0, [pc, #316]	@ (8004128 <main+0x35c>)
 8003fea:	f005 fa55 	bl	8009498 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(DSI_RESET_GPIO_Port, &GPIO_InitStruct);
 8003fee:	a92e      	add	r1, sp, #184	@ 0xb8
 8003ff0:	484d      	ldr	r0, [pc, #308]	@ (8004128 <main+0x35c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ff2:	e9cd 752e 	strd	r7, r5, [sp, #184]	@ 0xb8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003ff6:	e9cd 5530 	strd	r5, r5, [sp, #192]	@ 0xc0
  HAL_GPIO_Init(DSI_RESET_GPIO_Port, &GPIO_InitStruct);
 8003ffa:	f005 f8c9 	bl	8009190 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RENDER_TIME_Pin|VSYNC_FREQ_Pin;
 8003ffe:	23c0      	movs	r3, #192	@ 0xc0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004000:	a92e      	add	r1, sp, #184	@ 0xb8
 8004002:	484a      	ldr	r0, [pc, #296]	@ (800412c <main+0x360>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004004:	e9cd 352e 	strd	r3, r5, [sp, #184]	@ 0xb8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004008:	e9cd 4b30 	strd	r4, fp, [sp, #192]	@ 0xc0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800400c:	f005 f8c0 	bl	8009190 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin;
 8004010:	2340      	movs	r3, #64	@ 0x40
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8004012:	a92e      	add	r1, sp, #184	@ 0xb8
 8004014:	4846      	ldr	r0, [pc, #280]	@ (8004130 <main+0x364>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004016:	e9cd 352e 	strd	r3, r5, [sp, #184]	@ 0xb8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800401a:	e9cd 4b30 	strd	r4, fp, [sp, #192]	@ 0xc0
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 800401e:	f005 f8b7 	bl	8009190 <HAL_GPIO_Init>
  HAL_GPIO_Init(FRAME_RATE_GPIO_Port, &GPIO_InitStruct);
 8004022:	a92e      	add	r1, sp, #184	@ 0xb8
 8004024:	4840      	ldr	r0, [pc, #256]	@ (8004128 <main+0x35c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004026:	e9cd 852e 	strd	r8, r5, [sp, #184]	@ 0xb8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800402a:	e9cd 4b30 	strd	r4, fp, [sp, #192]	@ 0xc0
  HAL_GPIO_Init(FRAME_RATE_GPIO_Port, &GPIO_InitStruct);
 800402e:	f005 f8af 	bl	8009190 <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004032:	6b33      	ldr	r3, [r6, #48]	@ 0x30
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8004034:	4622      	mov	r2, r4
 8004036:	2105      	movs	r1, #5
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004038:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800403c:	2038      	movs	r0, #56	@ 0x38
  __HAL_RCC_DMA2_CLK_ENABLE();
 800403e:	6333      	str	r3, [r6, #48]	@ 0x30
 8004040:	6b33      	ldr	r3, [r6, #48]	@ 0x30
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 8004042:	2664      	movs	r6, #100	@ 0x64
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004044:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004048:	9303      	str	r3, [sp, #12]
 800404a:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800404c:	f004 f91e 	bl	800828c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8004050:	2038      	movs	r0, #56	@ 0x38
 8004052:	f004 f94d 	bl	80082f0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8004056:	4622      	mov	r2, r4
 8004058:	2105      	movs	r1, #5
 800405a:	2039      	movs	r0, #57	@ 0x39
 800405c:	f004 f916 	bl	800828c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8004060:	2039      	movs	r0, #57	@ 0x39
 8004062:	f004 f945 	bl	80082f0 <HAL_NVIC_EnableIRQ>
  HAL_GPIO_WritePin(DSI_RESET_GPIO_Port, DSI_RESET_Pin, GPIO_PIN_RESET);
 8004066:	4639      	mov	r1, r7
 8004068:	4622      	mov	r2, r4
 800406a:	482f      	ldr	r0, [pc, #188]	@ (8004128 <main+0x35c>)
 800406c:	f005 fa14 	bl	8009498 <HAL_GPIO_WritePin>
  HAL_Delay(20); /* wait 20 ms */
 8004070:	2014      	movs	r0, #20
 8004072:	f003 fe7f 	bl	8007d74 <HAL_Delay>
  HAL_GPIO_WritePin(DSI_RESET_GPIO_Port, DSI_RESET_Pin, GPIO_PIN_SET);
 8004076:	4639      	mov	r1, r7
 8004078:	462a      	mov	r2, r5
 800407a:	482b      	ldr	r0, [pc, #172]	@ (8004128 <main+0x35c>)
 800407c:	f005 fa0c 	bl	8009498 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8004080:	200a      	movs	r0, #10
 8004082:	f003 fe77 	bl	8007d74 <HAL_Delay>
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8004086:	2224      	movs	r2, #36	@ 0x24
 8004088:	4621      	mov	r1, r4
 800408a:	a817      	add	r0, sp, #92	@ 0x5c
  DSI_PLLInitTypeDef PLLInit = {0};
 800408c:	9410      	str	r4, [sp, #64]	@ 0x40
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 800408e:	f021 ffa9 	bl	8025fe4 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8004092:	2218      	movs	r2, #24
 8004094:	4621      	mov	r1, r4
 8004096:	a811      	add	r0, sp, #68	@ 0x44
  hdsi.Instance = DSI;
 8004098:	4f26      	ldr	r7, [pc, #152]	@ (8004134 <main+0x368>)
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 800409a:	f021 ffa3 	bl	8025fe4 <memset>
  DSI_LPCmdTypeDef LPCmd = {0};
 800409e:	2234      	movs	r2, #52	@ 0x34
 80040a0:	4621      	mov	r1, r4
 80040a2:	a82e      	add	r0, sp, #184	@ 0xb8
 80040a4:	f021 ff9e 	bl	8025fe4 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 80040a8:	222c      	movs	r2, #44	@ 0x2c
 80040aa:	4621      	mov	r1, r4
 80040ac:	a820      	add	r0, sp, #128	@ 0x80
 80040ae:	f021 ff99 	bl	8025fe4 <memset>
  hdsi.Instance = DSI;
 80040b2:	4b21      	ldr	r3, [pc, #132]	@ (8004138 <main+0x36c>)
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 80040b4:	a90e      	add	r1, sp, #56	@ 0x38
 80040b6:	4638      	mov	r0, r7
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 80040b8:	e9c7 3400 	strd	r3, r4, [r7]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 80040bc:	2305      	movs	r3, #5
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 80040be:	e9c7 a502 	strd	sl, r5, [r7, #8]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 80040c2:	e9cd 630e 	strd	r6, r3, [sp, #56]	@ 0x38
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 80040c6:	f004 fd17 	bl	8008af8 <HAL_DSI_Init>
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 80040ca:	a917      	add	r1, sp, #92	@ 0x5c
 80040cc:	4638      	mov	r0, r7
  HostTimeouts.BTATimeout = 0;
 80040ce:	941f      	str	r4, [sp, #124]	@ 0x7c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 80040d0:	f44f 3600 	mov.w	r6, #131072	@ 0x20000
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 80040d4:	e9cd 5417 	strd	r5, r4, [sp, #92]	@ 0x5c
  HostTimeouts.HighSpeedReadTimeout = 0;
 80040d8:	e9cd 4419 	strd	r4, r4, [sp, #100]	@ 0x64
  HostTimeouts.HighSpeedWriteTimeout = 0;
 80040dc:	e9cd 441b 	strd	r4, r4, [sp, #108]	@ 0x6c
  HostTimeouts.LowPowerWriteTimeout = 0;
 80040e0:	e9cd 441d 	strd	r4, r4, [sp, #116]	@ 0x74
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 80040e4:	f004 ff34 	bl	8008f50 <HAL_DSI_ConfigHostTimeouts>
  PhyTimings.ClockLaneLP2HSTime = 33;
 80040e8:	f04f 0c1c 	mov.w	ip, #28
 80040ec:	2321      	movs	r3, #33	@ 0x21
  PhyTimings.DataLaneLP2HSTime = 25;
 80040ee:	f04f 0e0f 	mov.w	lr, #15
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 80040f2:	a911      	add	r1, sp, #68	@ 0x44
 80040f4:	4638      	mov	r0, r7
  PhyTimings.ClockLaneLP2HSTime = 33;
 80040f6:	e9cd c311 	strd	ip, r3, [sp, #68]	@ 0x44
  PhyTimings.DataLaneLP2HSTime = 25;
 80040fa:	2319      	movs	r3, #25
  PhyTimings.StopWaitTime = 0;
 80040fc:	e9cd 4415 	strd	r4, r4, [sp, #84]	@ 0x54
  PhyTimings.DataLaneLP2HSTime = 25;
 8004100:	e9cd e313 	strd	lr, r3, [sp, #76]	@ 0x4c
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8004104:	f004 fee7 	bl	8008ed6 <HAL_DSI_ConfigPhyTimer>
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8004108:	4651      	mov	r1, sl
 800410a:	4638      	mov	r0, r7
 800410c:	f004 fed2 	bl	8008eb4 <HAL_DSI_ConfigFlowControl>
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8004110:	f242 7110 	movw	r1, #10000	@ 0x2710
 8004114:	4638      	mov	r0, r7
 8004116:	e011      	b.n	800413c <main+0x370>
 8004118:	03000012 	.word	0x03000012
 800411c:	01010001 	.word	0x01010001
 8004120:	e000ed00 	.word	0xe000ed00
 8004124:	40023800 	.word	0x40023800
 8004128:	40022400 	.word	0x40022400
 800412c:	40020800 	.word	0x40020800
 8004130:	40021400 	.word	0x40021400
 8004134:	200122f4 	.word	0x200122f4
 8004138:	40016c00 	.word	0x40016c00
 800413c:	f005 f812 	bl	8009164 <HAL_DSI_SetLowPowerRXFilter>
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_OVF) != HAL_OK)
 8004140:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004144:	4638      	mov	r0, r7
 8004146:	f004 fc74 	bl	8008a32 <HAL_DSI_ConfigErrorMonitor>
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 800414a:	f44f 7300 	mov.w	r3, #512	@ 0x200
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 800414e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8004152:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8004156:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 800415a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 800415e:	f8cd 80e8 	str.w	r8, [sp, #232]	@ 0xe8
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8004162:	e9cd 932e 	strd	r9, r3, [sp, #184]	@ 0xb8
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8004166:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 800416a:	f04f 0910 	mov.w	r9, #16
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 800416e:	e9cd 2330 	strd	r2, r3, [sp, #192]	@ 0xc0
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8004172:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004176:	e9cd 1332 	strd	r1, r3, [sp, #200]	@ 0xc8
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 800417a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 800417e:	a92e      	add	r1, sp, #184	@ 0xb8
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8004180:	e9cd 0334 	strd	r0, r3, [sp, #208]	@ 0xd0
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8004184:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8004188:	4638      	mov	r0, r7
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 800418a:	e9cd 6336 	strd	r6, r3, [sp, #216]	@ 0xd8
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 800418e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
  hltdc.Instance = LTDC;
 8004192:	4ec9      	ldr	r6, [pc, #804]	@ (80044b8 <main+0x6ec>)
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8004194:	e9cd c338 	strd	ip, r3, [sp, #224]	@ 0xe0
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8004198:	f004 fe58 	bl	8008e4c <HAL_DSI_ConfigCommand>
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 800419c:	23c8      	movs	r3, #200	@ 0xc8
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 800419e:	a920      	add	r1, sp, #128	@ 0x80
 80041a0:	4638      	mov	r0, r7
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 80041a2:	952a      	str	r5, [sp, #168]	@ 0xa8
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 80041a4:	e9cd 3922 	strd	r3, r9, [sp, #136]	@ 0x88
  CmdCfg.ColorCoding = DSI_RGB565;
 80041a8:	e9cd 4420 	strd	r4, r4, [sp, #128]	@ 0x80
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 80041ac:	e9cd 4a24 	strd	r4, sl, [sp, #144]	@ 0x90
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 80041b0:	e9cd 8426 	strd	r8, r4, [sp, #152]	@ 0x98
  CmdCfg.AutomaticRefresh = DSI_AR_DISABLE;
 80041b4:	e9cd 4428 	strd	r4, r4, [sp, #160]	@ 0xa0
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 80041b8:	f004 fdd6 	bl	8008d68 <HAL_DSI_ConfigAdaptedCommandMode>
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 80041bc:	4621      	mov	r1, r4
 80041be:	4638      	mov	r0, r7
 80041c0:	f004 fdc1 	bl	8008d46 <HAL_DSI_SetGenericVCID>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80041c4:	4621      	mov	r1, r4
 80041c6:	2234      	movs	r2, #52	@ 0x34
 80041c8:	a820      	add	r0, sp, #128	@ 0x80
 80041ca:	f021 ff0b 	bl	8025fe4 <memset>
  hltdc.Instance = LTDC;
 80041ce:	4abb      	ldr	r2, [pc, #748]	@ (80044bc <main+0x6f0>)
  hltdc.Init.AccumulatedActiveH = 482;
 80041d0:	f04f 0eca 	mov.w	lr, #202	@ 0xca
  hltdc.Init.TotalHeigh = 483;
 80041d4:	23cb      	movs	r3, #203	@ 0xcb
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80041d6:	4630      	mov	r0, r6
  hltdc.Init.AccumulatedVBP = 2;
 80041d8:	f8c6 8020 	str.w	r8, [r6, #32]
  hltdc.Init.Backcolor.Blue = 0;
 80041dc:	86b4      	strh	r4, [r6, #52]	@ 0x34
  hltdc.Init.Backcolor.Red = 0;
 80041de:	f886 4036 	strb.w	r4, [r6, #54]	@ 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80041e2:	e9c6 2400 	strd	r2, r4, [r6]
  hltdc.Init.AccumulatedActiveH = 482;
 80041e6:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 80041ea:	e9c6 e209 	strd	lr, r2, [r6, #36]	@ 0x24
  hltdc.Init.TotalHeigh = 483;
 80041ee:	f240 12e3 	movw	r2, #483	@ 0x1e3
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80041f2:	e9c6 4402 	strd	r4, r4, [r6, #8]
  hltdc.Init.TotalHeigh = 483;
 80041f6:	e9c6 320b 	strd	r3, r2, [r6, #44]	@ 0x2c
  hltdc.Init.HorizontalSync = 1;
 80041fa:	e9c6 4504 	strd	r4, r5, [r6, #16]
  hltdc.Init.AccumulatedHBP = 2;
 80041fe:	e9c6 5806 	strd	r5, r8, [r6, #24]
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8004202:	f006 fe1f 	bl	800ae44 <HAL_LTDC_Init>
  pLayerCfg.Alpha = 255;
 8004206:	21ff      	movs	r1, #255	@ 0xff
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8004208:	f44f 6080 	mov.w	r0, #1024	@ 0x400
  pLayerCfg.WindowX1 = 200;
 800420c:	23c8      	movs	r3, #200	@ 0xc8
  pLayerCfg.WindowY1 = 480;
 800420e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
  pLayerCfg.WindowX0 = 0;
 8004212:	9420      	str	r4, [sp, #128]	@ 0x80
  pLayerCfg.Backcolor.Blue = 0;
 8004214:	f8ad 40b0 	strh.w	r4, [sp, #176]	@ 0xb0
  pLayerCfg.ImageHeight = 480;
 8004218:	922b      	str	r2, [sp, #172]	@ 0xac
  pLayerCfg.Backcolor.Red = 0;
 800421a:	f88d 40b2 	strb.w	r4, [sp, #178]	@ 0xb2
  pLayerCfg.Alpha0 = 0;
 800421e:	e9cd 1425 	strd	r1, r4, [sp, #148]	@ 0x94
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8004222:	2105      	movs	r1, #5
 8004224:	e9cd 0127 	strd	r0, r1, [sp, #156]	@ 0x9c
  pLayerCfg.FBStartAdress = 0xC0000000;
 8004228:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800422c:	4630      	mov	r0, r6
  pLayerCfg.ImageWidth = 200;
 800422e:	e9cd 1329 	strd	r1, r3, [sp, #164]	@ 0xa4
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8004232:	e9cd 2823 	strd	r2, r8, [sp, #140]	@ 0x8c
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8004236:	a920      	add	r1, sp, #128	@ 0x80
 8004238:	4622      	mov	r2, r4
  pLayerCfg.WindowY0 = 0;
 800423a:	e9cd 3421 	strd	r3, r4, [sp, #132]	@ 0x84
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800423e:	f006 fecd 	bl	800afdc <HAL_LTDC_ConfigLayer>
  __HAL_LTDC_DISABLE(&hltdc);
 8004242:	6832      	ldr	r2, [r6, #0]
  HAL_DSI_Start(&hdsi);
 8004244:	4638      	mov	r0, r7
  __HAL_LTDC_DISABLE(&hltdc);
 8004246:	6993      	ldr	r3, [r2, #24]
 8004248:	f023 0301 	bic.w	r3, r3, #1
 800424c:	6193      	str	r3, [r2, #24]
  HAL_DSI_Start(&hdsi);
 800424e:	f004 fee5 	bl	800901c <HAL_DSI_Start>
  OTM8009A_Init(OTM8009A_FORMAT_RBG565, LCD_ORIENTATION_LANDSCAPE);
 8004252:	4629      	mov	r1, r5
 8004254:	4640      	mov	r0, r8
 8004256:	f003 faf7 	bl	8007848 <OTM8009A_Init>
  HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPOFF, 0x00);
 800425a:	2328      	movs	r3, #40	@ 0x28
 800425c:	2215      	movs	r2, #21
 800425e:	4621      	mov	r1, r4
 8004260:	4638      	mov	r0, r7
 8004262:	9400      	str	r4, [sp, #0]
 8004264:	f004 ff0d 	bl	8009082 <HAL_DSI_ShortWrite>
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8004268:	a92e      	add	r1, sp, #184	@ 0xb8
 800426a:	4638      	mov	r0, r7
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 800426c:	9438      	str	r4, [sp, #224]	@ 0xe0
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800426e:	2720      	movs	r7, #32
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8004270:	e9cd 442e 	strd	r4, r4, [sp, #184]	@ 0xb8
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 8004274:	e9cd 4430 	strd	r4, r4, [sp, #192]	@ 0xc0
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8004278:	e9cd 4432 	strd	r4, r4, [sp, #200]	@ 0xc8
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 800427c:	e9cd 4434 	strd	r4, r4, [sp, #208]	@ 0xd0
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8004280:	e9cd 4436 	strd	r4, r4, [sp, #216]	@ 0xd8
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8004284:	f004 fde2 	bl	8008e4c <HAL_DSI_ConfigCommand>
  HAL_LTDC_SetPitch(&hltdc, 800, 0);
 8004288:	4622      	mov	r2, r4
 800428a:	f44f 7148 	mov.w	r1, #800	@ 0x320
 800428e:	4630      	mov	r0, r6
 8004290:	f006 fed2 	bl	800b038 <HAL_LTDC_SetPitch>
  __HAL_LTDC_ENABLE(&hltdc);
 8004294:	6832      	ldr	r2, [r6, #0]
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8004296:	4e8a      	ldr	r6, [pc, #552]	@ (80044c0 <main+0x6f4>)
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8004298:	f44f 6c00 	mov.w	ip, #2048	@ 0x800
  __HAL_LTDC_ENABLE(&hltdc);
 800429c:	6993      	ldr	r3, [r2, #24]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800429e:	a92e      	add	r1, sp, #184	@ 0xb8
 80042a0:	4630      	mov	r0, r6
  __HAL_LTDC_ENABLE(&hltdc);
 80042a2:	432b      	orrs	r3, r5
 80042a4:	6193      	str	r3, [r2, #24]
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80042a6:	4b87      	ldr	r3, [pc, #540]	@ (80044c4 <main+0x6f8>)
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80042a8:	62b4      	str	r4, [r6, #40]	@ 0x28
  SdramTiming.LoadToActiveDelay = 2;
 80042aa:	f8cd 80b8 	str.w	r8, [sp, #184]	@ 0xb8
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80042ae:	e9c6 3400 	strd	r3, r4, [r6]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80042b2:	2340      	movs	r3, #64	@ 0x40
 80042b4:	e9c6 7304 	strd	r7, r3, [r6, #16]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80042b8:	f44f 73c0 	mov.w	r3, #384	@ 0x180
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE;
 80042bc:	f44f 7740 	mov.w	r7, #768	@ 0x300
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80042c0:	e9c6 3406 	strd	r3, r4, [r6, #24]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80042c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80042c8:	e9c6 c308 	strd	ip, r3, [r6, #32]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80042cc:	2307      	movs	r3, #7
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80042ce:	e9c6 4a02 	strd	r4, sl, [r6, #8]
  SdramTiming.SelfRefreshTime = 4;
 80042d2:	e9cd 3a2f 	strd	r3, sl, [sp, #188]	@ 0xbc
  SdramTiming.WriteRecoveryTime = 2;
 80042d6:	e9cd 3831 	strd	r3, r8, [sp, #196]	@ 0xc4
  SdramTiming.RCDDelay = 3;
 80042da:	e9cd 8b33 	strd	r8, fp, [sp, #204]	@ 0xcc
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80042de:	f007 ff53 	bl	800c188 <HAL_SDRAM_Init>
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80042e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80042e6:	a920      	add	r1, sp, #128	@ 0x80
 80042e8:	4630      	mov	r0, r6
 __IO uint32_t tmpmrd = 0;
 80042ea:	9411      	str	r4, [sp, #68]	@ 0x44
    Command->CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 80042ec:	e9cd 5920 	strd	r5, r9, [sp, #128]	@ 0x80
    Command->ModeRegisterDefinition = 0;
 80042f0:	e9cd 5422 	strd	r5, r4, [sp, #136]	@ 0x88
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80042f4:	f007 ff68 	bl	800c1c8 <HAL_SDRAM_SendCommand>
    HAL_Delay(1);
 80042f8:	4628      	mov	r0, r5
 80042fa:	f003 fd3b 	bl	8007d74 <HAL_Delay>
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80042fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004302:	a920      	add	r1, sp, #128	@ 0x80
 8004304:	4630      	mov	r0, r6
    Command->CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004306:	e9cd 8920 	strd	r8, r9, [sp, #128]	@ 0x80
    Command->ModeRegisterDefinition = 0;
 800430a:	e9cd 5422 	strd	r5, r4, [sp, #136]	@ 0x88
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800430e:	f007 ff5b 	bl	800c1c8 <HAL_SDRAM_SendCommand>
    Command->AutoRefreshNumber      = 8;
 8004312:	2308      	movs	r3, #8
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8004314:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004318:	a920      	add	r1, sp, #128	@ 0x80
 800431a:	4630      	mov	r0, r6
    Command->ModeRegisterDefinition = 0;
 800431c:	e9cd 3422 	strd	r3, r4, [sp, #136]	@ 0x88
    Command->CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004320:	e9cd b920 	strd	fp, r9, [sp, #128]	@ 0x80
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8004324:	f007 ff50 	bl	800c1c8 <HAL_SDRAM_SendCommand>
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          | \
 8004328:	f44f 730c 	mov.w	r3, #560	@ 0x230
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800432c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004330:	a920      	add	r1, sp, #128	@ 0x80
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          | \
 8004332:	9311      	str	r3, [sp, #68]	@ 0x44
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8004334:	4630      	mov	r0, r6
    Command->ModeRegisterDefinition = tmpmrd;
 8004336:	9b11      	ldr	r3, [sp, #68]	@ 0x44
    Command->AutoRefreshNumber      = 1;
 8004338:	9522      	str	r5, [sp, #136]	@ 0x88
    Command->ModeRegisterDefinition = tmpmrd;
 800433a:	9323      	str	r3, [sp, #140]	@ 0x8c
    Command->CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800433c:	e9cd a920 	strd	sl, r9, [sp, #128]	@ 0x80
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8004340:	f007 ff42 	bl	800c1c8 <HAL_SDRAM_SendCommand>
    HAL_SDRAM_ProgramRefreshRate(hsdram, REFRESH_COUNT);
 8004344:	f240 712a 	movw	r1, #1834	@ 0x72a
 8004348:	4630      	mov	r0, r6
  hqspi.Instance = QUADSPI;
 800434a:	4e5f      	ldr	r6, [pc, #380]	@ (80044c8 <main+0x6fc>)
    HAL_SDRAM_ProgramRefreshRate(hsdram, REFRESH_COUNT);
 800434c:	f007 ff5b 	bl	800c206 <HAL_SDRAM_ProgramRefreshRate>
  FMC_Bank1->BTCR[0] = 0x000030D2;
 8004350:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8004354:	f04f 4320 	mov.w	r3, #2684354560	@ 0xa0000000
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8004358:	4630      	mov	r0, r6
  FMC_Bank1->BTCR[0] = 0x000030D2;
 800435a:	601a      	str	r2, [r3, #0]
  hqspi.Instance = QUADSPI;
 800435c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8004360:	6234      	str	r4, [r6, #32]
  hqspi.Init.ClockPrescaler = 1;
 8004362:	e9c6 3500 	strd	r3, r5, [r6]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE;
 8004366:	2319      	movs	r3, #25
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8004368:	e9c6 9902 	strd	r9, r9, [r6, #8]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE;
 800436c:	e9c6 3704 	strd	r3, r7, [r6, #16]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8004370:	e9c6 4406 	strd	r4, r4, [r6, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8004374:	f006 ffb6 	bl	800b2e4 <HAL_QSPI_Init>
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8004378:	9734      	str	r7, [sp, #208]	@ 0xd0
  s_command.Instruction       = RESET_ENABLE_CMD;
 800437a:	2766      	movs	r7, #102	@ 0x66
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800437c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004380:	a92e      	add	r1, sp, #184	@ 0xb8
 8004382:	4630      	mov	r0, r6
  s_command.Instruction       = RESET_ENABLE_CMD;
 8004384:	972e      	str	r7, [sp, #184]	@ 0xb8
  s_command.DataMode          = QSPI_DATA_NONE;
 8004386:	9437      	str	r4, [sp, #220]	@ 0xdc
  s_command.DummyCycles       = 0;
 8004388:	9433      	str	r4, [sp, #204]	@ 0xcc
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800438a:	943b      	str	r4, [sp, #236]	@ 0xec
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800438c:	e9cd 4435 	strd	r4, r4, [sp, #212]	@ 0xd4
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004390:	e9cd 4439 	strd	r4, r4, [sp, #228]	@ 0xe4
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004394:	f006 fff8 	bl	800b388 <HAL_QSPI_Command>
 8004398:	2800      	cmp	r0, #0
 800439a:	f040 80ba 	bne.w	8004512 <main+0x746>
  s_command.Instruction = RESET_MEMORY_CMD;
 800439e:	2499      	movs	r4, #153	@ 0x99
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80043a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043a4:	a92e      	add	r1, sp, #184	@ 0xb8
 80043a6:	4630      	mov	r0, r6
  s_command.Instruction = RESET_MEMORY_CMD;
 80043a8:	942e      	str	r4, [sp, #184]	@ 0xb8
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80043aa:	f006 ffed 	bl	800b388 <HAL_QSPI_Command>
 80043ae:	2800      	cmp	r0, #0
 80043b0:	f040 80af 	bne.w	8004512 <main+0x746>
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80043b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80043b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043bc:	a92e      	add	r1, sp, #184	@ 0xb8
 80043be:	4630      	mov	r0, r6
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80043c0:	9334      	str	r3, [sp, #208]	@ 0xd0
  s_command.Instruction       = RESET_ENABLE_CMD;
 80043c2:	972e      	str	r7, [sp, #184]	@ 0xb8
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80043c4:	f006 ffe0 	bl	800b388 <HAL_QSPI_Command>
 80043c8:	2800      	cmp	r0, #0
 80043ca:	f040 80a2 	bne.w	8004512 <main+0x746>
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80043ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043d2:	a92e      	add	r1, sp, #184	@ 0xb8
 80043d4:	4630      	mov	r0, r6
  s_command.Instruction = RESET_MEMORY_CMD;
 80043d6:	942e      	str	r4, [sp, #184]	@ 0xb8
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80043d8:	f006 ffd6 	bl	800b388 <HAL_QSPI_Command>
 80043dc:	4604      	mov	r4, r0
 80043de:	2800      	cmp	r0, #0
 80043e0:	f040 8097 	bne.w	8004512 <main+0x746>
  HAL_Delay( 1000 );
 80043e4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80043e8:	f003 fcc4 	bl	8007d74 <HAL_Delay>
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80043ec:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80043f0:	aa20      	add	r2, sp, #128	@ 0x80
 80043f2:	a92e      	add	r1, sp, #184	@ 0xb8
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80043f4:	9325      	str	r3, [sp, #148]	@ 0x94
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80043f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80043fa:	4630      	mov	r0, r6
  s_config.Interval        = 0x10;
 80043fc:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8004400:	9334      	str	r3, [sp, #208]	@ 0xd0
  s_command.Instruction     = READ_STATUS_REG_CMD;
 8004402:	2305      	movs	r3, #5
 8004404:	932e      	str	r3, [sp, #184]	@ 0xb8
  s_command.DataMode        = QSPI_DATA_1_LINE;
 8004406:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800440a:	9337      	str	r3, [sp, #220]	@ 0xdc
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800440c:	f241 3388 	movw	r3, #5000	@ 0x1388
  s_config.Mask            = MX25L512_SR_WIP;
 8004410:	e9cd 4520 	strd	r4, r5, [sp, #128]	@ 0x80
  s_config.StatusBytesSize = 1;
 8004414:	e9cd 5423 	strd	r5, r4, [sp, #140]	@ 0x8c
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004418:	f007 f8b7 	bl	800b58a <HAL_QSPI_AutoPolling>
 800441c:	2800      	cmp	r0, #0
 800441e:	d178      	bne.n	8004512 <main+0x746>
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004420:	f44f 7380 	mov.w	r3, #256	@ 0x100
  s_command.DummyCycles       = 0;
 8004424:	9033      	str	r0, [sp, #204]	@ 0xcc
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004426:	f241 3288 	movw	r2, #5000	@ 0x1388
 800442a:	a92e      	add	r1, sp, #184	@ 0xb8
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800442c:	9334      	str	r3, [sp, #208]	@ 0xd0
  s_command.Instruction       = READ_STATUS_REG_CMD;
 800442e:	2305      	movs	r3, #5
 8004430:	932e      	str	r3, [sp, #184]	@ 0xb8
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8004432:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004436:	e9cd 0035 	strd	r0, r0, [sp, #212]	@ 0xd4
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800443a:	e9cd 5038 	strd	r5, r0, [sp, #224]	@ 0xe0
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800443e:	e9cd 003a 	strd	r0, r0, [sp, #232]	@ 0xe8
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004442:	4630      	mov	r0, r6
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8004444:	9337      	str	r3, [sp, #220]	@ 0xdc
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004446:	f006 ff9f 	bl	800b388 <HAL_QSPI_Command>
 800444a:	2800      	cmp	r0, #0
 800444c:	d161      	bne.n	8004512 <main+0x746>
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800444e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004452:	a917      	add	r1, sp, #92	@ 0x5c
 8004454:	4630      	mov	r0, r6
 8004456:	f007 f838 	bl	800b4ca <HAL_QSPI_Receive>
 800445a:	2800      	cmp	r0, #0
 800445c:	d159      	bne.n	8004512 <main+0x746>
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800445e:	f44f 7380 	mov.w	r3, #256	@ 0x100
  s_command.DataMode          = QSPI_DATA_NONE;
 8004462:	9037      	str	r0, [sp, #220]	@ 0xdc
  s_command.DummyCycles       = 0;
 8004464:	9033      	str	r0, [sp, #204]	@ 0xcc
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004466:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800446a:	9334      	str	r3, [sp, #208]	@ 0xd0
  s_command.Instruction       = WRITE_ENABLE_CMD;
 800446c:	2306      	movs	r3, #6
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800446e:	903b      	str	r0, [sp, #236]	@ 0xec
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004470:	a92e      	add	r1, sp, #184	@ 0xb8
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8004472:	932e      	str	r3, [sp, #184]	@ 0xb8
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004474:	e9cd 0035 	strd	r0, r0, [sp, #212]	@ 0xd4
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004478:	e9cd 0039 	strd	r0, r0, [sp, #228]	@ 0xe4
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800447c:	4630      	mov	r0, r6
 800447e:	f006 ff83 	bl	800b388 <HAL_QSPI_Command>
 8004482:	2800      	cmp	r0, #0
 8004484:	d145      	bne.n	8004512 <main+0x746>
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8004486:	2300      	movs	r3, #0
  s_config.StatusBytesSize = 1;
 8004488:	462c      	mov	r4, r5
 800448a:	9523      	str	r5, [sp, #140]	@ 0x8c
  s_command.DataMode       = QSPI_DATA_1_LINE;
 800448c:	f04f 7580 	mov.w	r5, #16777216	@ 0x1000000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8004490:	9324      	str	r3, [sp, #144]	@ 0x90
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8004492:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004496:	aa20      	add	r2, sp, #128	@ 0x80
 8004498:	a92e      	add	r1, sp, #184	@ 0xb8
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800449a:	9325      	str	r3, [sp, #148]	@ 0x94
  s_command.Instruction    = READ_STATUS_REG_CMD;
 800449c:	2305      	movs	r3, #5
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800449e:	4630      	mov	r0, r6
  s_config.Interval        = 0x10;
 80044a0:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
  s_command.Instruction    = READ_STATUS_REG_CMD;
 80044a4:	932e      	str	r3, [sp, #184]	@ 0xb8
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80044a6:	f241 3388 	movw	r3, #5000	@ 0x1388
  s_command.DataMode       = QSPI_DATA_1_LINE;
 80044aa:	9537      	str	r5, [sp, #220]	@ 0xdc
  s_config.Mask            = MX25L512_SR_WREN;
 80044ac:	e9cd 8820 	strd	r8, r8, [sp, #128]	@ 0x80
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80044b0:	f007 f86b 	bl	800b58a <HAL_QSPI_AutoPolling>
 80044b4:	bb68      	cbnz	r0, 8004512 <main+0x746>
 80044b6:	e009      	b.n	80044cc <main+0x700>
 80044b8:	2001208c 	.word	0x2001208c
 80044bc:	40016800 	.word	0x40016800
 80044c0:	20011fc0 	.word	0x20011fc0
 80044c4:	a0000140 	.word	0xa0000140
 80044c8:	20012040 	.word	0x20012040
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80044cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
  s_command.DummyCycles       = 0;
 80044d0:	9033      	str	r0, [sp, #204]	@ 0xcc
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80044d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044d6:	a92e      	add	r1, sp, #184	@ 0xb8
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80044d8:	9334      	str	r3, [sp, #208]	@ 0xd0
  reg |= MX25L512_SR_QUADEN;
 80044da:	f89d 305c 	ldrb.w	r3, [sp, #92]	@ 0x5c
  s_command.Instruction       = WRITE_STATUS_CFG_REG_CMD;
 80044de:	942e      	str	r4, [sp, #184]	@ 0xb8
  reg |= MX25L512_SR_QUADEN;
 80044e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
  s_command.DataMode          = QSPI_DATA_1_LINE;
 80044e4:	9537      	str	r5, [sp, #220]	@ 0xdc
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80044e6:	e9cd 0035 	strd	r0, r0, [sp, #212]	@ 0xd4
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80044ea:	e9cd 4038 	strd	r4, r0, [sp, #224]	@ 0xe0
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80044ee:	e9cd 003a 	strd	r0, r0, [sp, #232]	@ 0xe8
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80044f2:	4630      	mov	r0, r6
  reg |= MX25L512_SR_QUADEN;
 80044f4:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80044f8:	f006 ff46 	bl	800b388 <HAL_QSPI_Command>
 80044fc:	b948      	cbnz	r0, 8004512 <main+0x746>
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80044fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004502:	a917      	add	r1, sp, #92	@ 0x5c
 8004504:	4630      	mov	r0, r6
 8004506:	f006 ff84 	bl	800b412 <HAL_QSPI_Transmit>
 800450a:	b910      	cbnz	r0, 8004512 <main+0x746>
  HAL_Delay( 40 );
 800450c:	2028      	movs	r0, #40	@ 0x28
 800450e:	f003 fc31 	bl	8007d74 <HAL_Delay>
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004512:	f44f 7380 	mov.w	r3, #256	@ 0x100
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004516:	f241 3288 	movw	r2, #5000	@ 0x1388
 800451a:	a92e      	add	r1, sp, #184	@ 0xb8
 800451c:	48b6      	ldr	r0, [pc, #728]	@ (80047f8 <main+0xa2c>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800451e:	9334      	str	r3, [sp, #208]	@ 0xd0
  s_command.Instruction       = ENTER_QUAD_CMD;
 8004520:	2335      	movs	r3, #53	@ 0x35
 8004522:	932e      	str	r3, [sp, #184]	@ 0xb8
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004524:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004526:	e9cd 3335 	strd	r3, r3, [sp, #212]	@ 0xd4
  s_command.DataMode          = QSPI_DATA_NONE;
 800452a:	9337      	str	r3, [sp, #220]	@ 0xdc
  s_command.DummyCycles       = 0;
 800452c:	9333      	str	r3, [sp, #204]	@ 0xcc
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800452e:	933b      	str	r3, [sp, #236]	@ 0xec
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004530:	e9cd 3339 	strd	r3, r3, [sp, #228]	@ 0xe4
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004534:	f006 ff28 	bl	800b388 <HAL_QSPI_Command>
 8004538:	b9d0      	cbnz	r0, 8004570 <main+0x7a4>
  s_config.Mask            = MX25L512_SR_QUADEN|MX25L512_SR_WIP;
 800453a:	2140      	movs	r1, #64	@ 0x40
 800453c:	2341      	movs	r3, #65	@ 0x41
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800453e:	9024      	str	r0, [sp, #144]	@ 0x90
  s_config.Interval        = 0x10;
 8004540:	2001      	movs	r0, #1
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004542:	aa20      	add	r2, sp, #128	@ 0x80
  s_config.Mask            = MX25L512_SR_QUADEN|MX25L512_SR_WIP;
 8004544:	e9cd 1320 	strd	r1, r3, [sp, #128]	@ 0x80
  s_config.Interval        = 0x10;
 8004548:	2310      	movs	r3, #16
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800454a:	a92e      	add	r1, sp, #184	@ 0xb8
  s_config.Interval        = 0x10;
 800454c:	e9cd 3022 	strd	r3, r0, [sp, #136]	@ 0x88
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8004550:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004554:	48a8      	ldr	r0, [pc, #672]	@ (80047f8 <main+0xa2c>)
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8004556:	9325      	str	r3, [sp, #148]	@ 0x94
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8004558:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800455c:	9334      	str	r3, [sp, #208]	@ 0xd0
  s_command.Instruction       = READ_STATUS_REG_CMD;
 800455e:	2305      	movs	r3, #5
 8004560:	932e      	str	r3, [sp, #184]	@ 0xb8
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8004562:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8004566:	9337      	str	r3, [sp, #220]	@ 0xdc
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004568:	f241 3388 	movw	r3, #5000	@ 0x1388
 800456c:	f007 f80d 	bl	800b58a <HAL_QSPI_AutoPolling>
  s_command.Instruction       = ENTER_4_BYTE_ADDR_MODE_CMD;
 8004570:	23b7      	movs	r3, #183	@ 0xb7
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8004572:	f44f 7440 	mov.w	r4, #768	@ 0x300
  s_command.Instruction       = ENTER_4_BYTE_ADDR_MODE_CMD;
 8004576:	9320      	str	r3, [sp, #128]	@ 0x80
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004578:	2300      	movs	r3, #0
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800457a:	9426      	str	r4, [sp, #152]	@ 0x98
  s_command.DataMode          = QSPI_DATA_NONE;
 800457c:	9329      	str	r3, [sp, #164]	@ 0xa4
  s_command.DummyCycles       = 0;
 800457e:	9325      	str	r3, [sp, #148]	@ 0x94
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004580:	932d      	str	r3, [sp, #180]	@ 0xb4
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004582:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004586:	e9cd 332b 	strd	r3, r3, [sp, #172]	@ 0xac
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 800458a:	f7ff fb77 	bl	8003c7c <QSPI_WriteEnable.constprop.0>
 800458e:	bb18      	cbnz	r0, 80045d8 <main+0x80c>
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004590:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004594:	a920      	add	r1, sp, #128	@ 0x80
 8004596:	4898      	ldr	r0, [pc, #608]	@ (80047f8 <main+0xa2c>)
 8004598:	f006 fef6 	bl	800b388 <HAL_QSPI_Command>
 800459c:	b9e0      	cbnz	r0, 80045d8 <main+0x80c>
  s_command.Instruction       = READ_STATUS_REG_CMD;
 800459e:	2305      	movs	r3, #5
  s_command.DummyCycles       = 0;
 80045a0:	9033      	str	r0, [sp, #204]	@ 0xcc
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80045a2:	903b      	str	r0, [sp, #236]	@ 0xec
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 80045a4:	aa17      	add	r2, sp, #92	@ 0x5c
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80045a6:	932e      	str	r3, [sp, #184]	@ 0xb8
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80045a8:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
  s_config.Match           = 0;
 80045ac:	9017      	str	r0, [sp, #92]	@ 0x5c
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 80045ae:	a92e      	add	r1, sp, #184	@ 0xb8
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80045b0:	9337      	str	r3, [sp, #220]	@ 0xdc
  s_config.Mask            = MX25L512_SR_WIP;
 80045b2:	2301      	movs	r3, #1
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80045b4:	9434      	str	r4, [sp, #208]	@ 0xd0
  s_config.Mask            = MX25L512_SR_WIP;
 80045b6:	9318      	str	r3, [sp, #96]	@ 0x60
  s_config.StatusBytesSize = 1;
 80045b8:	e9cd 301a 	strd	r3, r0, [sp, #104]	@ 0x68
  s_config.Interval        = 0x10;
 80045bc:	2310      	movs	r3, #16
 80045be:	9319      	str	r3, [sp, #100]	@ 0x64
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80045c0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80045c4:	e9cd 0035 	strd	r0, r0, [sp, #212]	@ 0xd4
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80045c8:	e9cd 0039 	strd	r0, r0, [sp, #228]	@ 0xe4
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80045cc:	931c      	str	r3, [sp, #112]	@ 0x70
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 80045ce:	f241 3388 	movw	r3, #5000	@ 0x1388
 80045d2:	4889      	ldr	r0, [pc, #548]	@ (80047f8 <main+0xa2c>)
 80045d4:	f006 ffd9 	bl	800b58a <HAL_QSPI_AutoPolling>
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80045d8:	2305      	movs	r3, #5
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80045da:	f44f 7640 	mov.w	r6, #768	@ 0x300
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80045de:	f04f 7440 	mov.w	r4, #50331648	@ 0x3000000
  s_command.NbData            = 1;
 80045e2:	2501      	movs	r5, #1
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80045e4:	932e      	str	r3, [sp, #184]	@ 0xb8
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80045e6:	2300      	movs	r3, #0
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80045e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045ec:	a92e      	add	r1, sp, #184	@ 0xb8
 80045ee:	4882      	ldr	r0, [pc, #520]	@ (80047f8 <main+0xa2c>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80045f0:	9634      	str	r6, [sp, #208]	@ 0xd0
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80045f2:	9437      	str	r4, [sp, #220]	@ 0xdc
  s_command.DummyCycles       = 0;
 80045f4:	9333      	str	r3, [sp, #204]	@ 0xcc
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80045f6:	e9cd 3335 	strd	r3, r3, [sp, #212]	@ 0xd4
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80045fa:	e9cd 5338 	strd	r5, r3, [sp, #224]	@ 0xe0
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80045fe:	e9cd 333a 	strd	r3, r3, [sp, #232]	@ 0xe8
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004602:	f006 fec1 	bl	800b388 <HAL_QSPI_Command>
 8004606:	2800      	cmp	r0, #0
 8004608:	d14f      	bne.n	80046aa <main+0x8de>
  if (HAL_QSPI_Receive(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800460a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800460e:	a920      	add	r1, sp, #128	@ 0x80
 8004610:	4879      	ldr	r0, [pc, #484]	@ (80047f8 <main+0xa2c>)
 8004612:	f006 ff5a 	bl	800b4ca <HAL_QSPI_Receive>
 8004616:	2800      	cmp	r0, #0
 8004618:	d147      	bne.n	80046aa <main+0x8de>
  s_command.Instruction       = READ_CFG_REG_CMD;
 800461a:	2315      	movs	r3, #21
  s_command.DummyCycles       = 0;
 800461c:	9033      	str	r0, [sp, #204]	@ 0xcc
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800461e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004622:	a92e      	add	r1, sp, #184	@ 0xb8
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8004624:	9634      	str	r6, [sp, #208]	@ 0xd0
  s_command.Instruction       = READ_CFG_REG_CMD;
 8004626:	932e      	str	r3, [sp, #184]	@ 0xb8
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8004628:	9437      	str	r4, [sp, #220]	@ 0xdc
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800462a:	e9cd 0035 	strd	r0, r0, [sp, #212]	@ 0xd4
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800462e:	e9cd 5038 	strd	r5, r0, [sp, #224]	@ 0xe0
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004632:	e9cd 003a 	strd	r0, r0, [sp, #232]	@ 0xe8
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004636:	4870      	ldr	r0, [pc, #448]	@ (80047f8 <main+0xa2c>)
 8004638:	f006 fea6 	bl	800b388 <HAL_QSPI_Command>
 800463c:	bba8      	cbnz	r0, 80046aa <main+0x8de>
  if (HAL_QSPI_Receive(hqspi, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800463e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004642:	f10d 0181 	add.w	r1, sp, #129	@ 0x81
 8004646:	486c      	ldr	r0, [pc, #432]	@ (80047f8 <main+0xa2c>)
 8004648:	f006 ff3f 	bl	800b4ca <HAL_QSPI_Receive>
 800464c:	bb68      	cbnz	r0, 80046aa <main+0x8de>
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 800464e:	f7ff fb15 	bl	8003c7c <QSPI_WriteEnable.constprop.0>
 8004652:	bb50      	cbnz	r0, 80046aa <main+0x8de>
  s_command.NbData            = 2;
 8004654:	2302      	movs	r3, #2
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004656:	22c0      	movs	r2, #192	@ 0xc0
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8004658:	9634      	str	r6, [sp, #208]	@ 0xd0
  s_command.Instruction       = WRITE_STATUS_CFG_REG_CMD;
 800465a:	952e      	str	r5, [sp, #184]	@ 0xb8
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800465c:	9437      	str	r4, [sp, #220]	@ 0xdc
  s_command.DummyCycles       = 0;
 800465e:	9033      	str	r0, [sp, #204]	@ 0xcc
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004660:	e9cd 0035 	strd	r0, r0, [sp, #212]	@ 0xd4
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8004664:	e9cd 3038 	strd	r3, r0, [sp, #224]	@ 0xe0
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004668:	e9cd 003a 	strd	r0, r0, [sp, #232]	@ 0xe8
 800466c:	fa92 f2a2 	rbit	r2, r2
  MODIFY_REG( reg[1], MX25L512_CR_NB_DUMMY, (MX25L512_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(MX25L512_CR_NB_DUMMY)));
 8004670:	2103      	movs	r1, #3
 8004672:	f89d 3081 	ldrb.w	r3, [sp, #129]	@ 0x81
 8004676:	fab2 f282 	clz	r2, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800467a:	485f      	ldr	r0, [pc, #380]	@ (80047f8 <main+0xa2c>)
  MODIFY_REG( reg[1], MX25L512_CR_NB_DUMMY, (MX25L512_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(MX25L512_CR_NB_DUMMY)));
 800467c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004680:	fa01 f202 	lsl.w	r2, r1, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004684:	a92e      	add	r1, sp, #184	@ 0xb8
  MODIFY_REG( reg[1], MX25L512_CR_NB_DUMMY, (MX25L512_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(MX25L512_CR_NB_DUMMY)));
 8004686:	4313      	orrs	r3, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004688:	f241 3288 	movw	r2, #5000	@ 0x1388
  MODIFY_REG( reg[1], MX25L512_CR_NB_DUMMY, (MX25L512_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(MX25L512_CR_NB_DUMMY)));
 800468c:	f88d 3081 	strb.w	r3, [sp, #129]	@ 0x81
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004690:	f006 fe7a 	bl	800b388 <HAL_QSPI_Command>
 8004694:	b948      	cbnz	r0, 80046aa <main+0x8de>
  if (HAL_QSPI_Transmit(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004696:	f241 3288 	movw	r2, #5000	@ 0x1388
 800469a:	a920      	add	r1, sp, #128	@ 0x80
 800469c:	4856      	ldr	r0, [pc, #344]	@ (80047f8 <main+0xa2c>)
 800469e:	f006 feb8 	bl	800b412 <HAL_QSPI_Transmit>
 80046a2:	b910      	cbnz	r0, 80046aa <main+0x8de>
  HAL_Delay( 40 );
 80046a4:	2028      	movs	r0, #40	@ 0x28
 80046a6:	f003 fb65 	bl	8007d74 <HAL_Delay>
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80046aa:	2305      	movs	r3, #5
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80046ac:	f44f 7640 	mov.w	r6, #768	@ 0x300
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80046b0:	f04f 7440 	mov.w	r4, #50331648	@ 0x3000000
  s_command.NbData            = 1;
 80046b4:	2501      	movs	r5, #1
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80046b6:	932e      	str	r3, [sp, #184]	@ 0xb8
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80046b8:	2300      	movs	r3, #0
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80046ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046be:	a92e      	add	r1, sp, #184	@ 0xb8
 80046c0:	484d      	ldr	r0, [pc, #308]	@ (80047f8 <main+0xa2c>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80046c2:	9634      	str	r6, [sp, #208]	@ 0xd0
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80046c4:	9437      	str	r4, [sp, #220]	@ 0xdc
  s_command.DummyCycles       = 0;
 80046c6:	9333      	str	r3, [sp, #204]	@ 0xcc
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80046c8:	e9cd 3335 	strd	r3, r3, [sp, #212]	@ 0xd4
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80046cc:	e9cd 5338 	strd	r5, r3, [sp, #224]	@ 0xe0
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80046d0:	e9cd 333a 	strd	r3, r3, [sp, #232]	@ 0xe8
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80046d4:	f006 fe58 	bl	800b388 <HAL_QSPI_Command>
 80046d8:	2800      	cmp	r0, #0
 80046da:	d14b      	bne.n	8004774 <main+0x9a8>
  if (HAL_QSPI_Receive(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80046dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046e0:	a920      	add	r1, sp, #128	@ 0x80
 80046e2:	4845      	ldr	r0, [pc, #276]	@ (80047f8 <main+0xa2c>)
 80046e4:	f006 fef1 	bl	800b4ca <HAL_QSPI_Receive>
 80046e8:	2800      	cmp	r0, #0
 80046ea:	d143      	bne.n	8004774 <main+0x9a8>
  s_command.Instruction       = READ_CFG_REG_CMD;
 80046ec:	2315      	movs	r3, #21
  s_command.DummyCycles       = 0;
 80046ee:	9033      	str	r0, [sp, #204]	@ 0xcc
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80046f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046f4:	a92e      	add	r1, sp, #184	@ 0xb8
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80046f6:	9634      	str	r6, [sp, #208]	@ 0xd0
  s_command.Instruction       = READ_CFG_REG_CMD;
 80046f8:	932e      	str	r3, [sp, #184]	@ 0xb8
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80046fa:	9437      	str	r4, [sp, #220]	@ 0xdc
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80046fc:	e9cd 0035 	strd	r0, r0, [sp, #212]	@ 0xd4
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8004700:	e9cd 5038 	strd	r5, r0, [sp, #224]	@ 0xe0
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004704:	e9cd 003a 	strd	r0, r0, [sp, #232]	@ 0xe8
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004708:	483b      	ldr	r0, [pc, #236]	@ (80047f8 <main+0xa2c>)
 800470a:	f006 fe3d 	bl	800b388 <HAL_QSPI_Command>
 800470e:	bb88      	cbnz	r0, 8004774 <main+0x9a8>
  if (HAL_QSPI_Receive(hqspi, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004710:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004714:	f10d 0181 	add.w	r1, sp, #129	@ 0x81
 8004718:	4837      	ldr	r0, [pc, #220]	@ (80047f8 <main+0xa2c>)
 800471a:	f006 fed6 	bl	800b4ca <HAL_QSPI_Receive>
 800471e:	bb48      	cbnz	r0, 8004774 <main+0x9a8>
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 8004720:	f7ff faac 	bl	8003c7c <QSPI_WriteEnable.constprop.0>
 8004724:	bb30      	cbnz	r0, 8004774 <main+0x9a8>
  s_command.NbData            = 2;
 8004726:	2302      	movs	r3, #2
 8004728:	2207      	movs	r2, #7
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800472a:	9634      	str	r6, [sp, #208]	@ 0xd0
  s_command.Instruction       = WRITE_STATUS_CFG_REG_CMD;
 800472c:	952e      	str	r5, [sp, #184]	@ 0xb8
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800472e:	9437      	str	r4, [sp, #220]	@ 0xdc
  s_command.DummyCycles       = 0;
 8004730:	9033      	str	r0, [sp, #204]	@ 0xcc
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004732:	e9cd 0035 	strd	r0, r0, [sp, #212]	@ 0xd4
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8004736:	e9cd 3038 	strd	r3, r0, [sp, #224]	@ 0xe0
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800473a:	e9cd 003a 	strd	r0, r0, [sp, #232]	@ 0xe8
 800473e:	fa92 f2a2 	rbit	r2, r2
  MODIFY_REG( reg[1], MX25L512_CR_ODS, (MX25L512_CR_ODS_15 << POSITION_VAL(MX25L512_CR_ODS)));
 8004742:	2106      	movs	r1, #6
 8004744:	f89d 3081 	ldrb.w	r3, [sp, #129]	@ 0x81
 8004748:	fab2 f282 	clz	r2, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800474c:	482a      	ldr	r0, [pc, #168]	@ (80047f8 <main+0xa2c>)
  MODIFY_REG( reg[1], MX25L512_CR_ODS, (MX25L512_CR_ODS_15 << POSITION_VAL(MX25L512_CR_ODS)));
 800474e:	f023 0307 	bic.w	r3, r3, #7
 8004752:	fa01 f202 	lsl.w	r2, r1, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004756:	a92e      	add	r1, sp, #184	@ 0xb8
  MODIFY_REG( reg[1], MX25L512_CR_ODS, (MX25L512_CR_ODS_15 << POSITION_VAL(MX25L512_CR_ODS)));
 8004758:	4313      	orrs	r3, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800475a:	f241 3288 	movw	r2, #5000	@ 0x1388
  MODIFY_REG( reg[1], MX25L512_CR_ODS, (MX25L512_CR_ODS_15 << POSITION_VAL(MX25L512_CR_ODS)));
 800475e:	f88d 3081 	strb.w	r3, [sp, #129]	@ 0x81
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004762:	f006 fe11 	bl	800b388 <HAL_QSPI_Command>
 8004766:	b928      	cbnz	r0, 8004774 <main+0x9a8>
  if (HAL_QSPI_Transmit(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004768:	f241 3288 	movw	r2, #5000	@ 0x1388
 800476c:	a920      	add	r1, sp, #128	@ 0x80
 800476e:	4822      	ldr	r0, [pc, #136]	@ (80047f8 <main+0xa2c>)
 8004770:	f006 fe4f 	bl	800b412 <HAL_QSPI_Transmit>
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8004774:	f44f 7340 	mov.w	r3, #768	@ 0x300
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8004778:	2400      	movs	r4, #0
  if (HAL_QSPI_MemoryMapped(hqspi, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800477a:	aa20      	add	r2, sp, #128	@ 0x80
  hdma2d.Instance = DMA2D;
 800477c:	4d1f      	ldr	r5, [pc, #124]	@ (80047fc <main+0xa30>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800477e:	9334      	str	r3, [sp, #208]	@ 0xd0
  s_command.Instruction       = QPI_READ_4_BYTE_ADDR_CMD;
 8004780:	23ec      	movs	r3, #236	@ 0xec
  if (HAL_QSPI_MemoryMapped(hqspi, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004782:	a92e      	add	r1, sp, #184	@ 0xb8
 8004784:	481c      	ldr	r0, [pc, #112]	@ (80047f8 <main+0xa2c>)
  s_command.Instruction       = QPI_READ_4_BYTE_ADDR_CMD;
 8004786:	932e      	str	r3, [sp, #184]	@ 0xb8
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8004788:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800478c:	943b      	str	r4, [sp, #236]	@ 0xec
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800478e:	2601      	movs	r6, #1
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8004790:	9335      	str	r3, [sp, #212]	@ 0xd4
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8004792:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004796:	4f1a      	ldr	r7, [pc, #104]	@ (8004800 <main+0xa34>)
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8004798:	9331      	str	r3, [sp, #196]	@ 0xc4
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800479a:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
  hi2c1.Init.Timing = 0x00C0EAFF;
 800479e:	f8df 8074 	ldr.w	r8, [pc, #116]	@ 8004814 <main+0xa48>
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80047a2:	e9cd 4336 	strd	r4, r3, [sp, #216]	@ 0xd8
  s_command.DummyCycles       = MX25L512_DUMMY_CYCLES_READ_QUAD_IO;
 80047a6:	230a      	movs	r3, #10
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80047a8:	e9cd 4439 	strd	r4, r4, [sp, #228]	@ 0xe4
  s_command.DummyCycles       = MX25L512_DUMMY_CYCLES_READ_QUAD_IO;
 80047ac:	9333      	str	r3, [sp, #204]	@ 0xcc
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 80047ae:	e9cd 4420 	strd	r4, r4, [sp, #128]	@ 0x80
  if (HAL_QSPI_MemoryMapped(hqspi, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80047b2:	f006 ff3b 	bl	800b62c <HAL_QSPI_MemoryMapped>
  hdma2d.Instance = DMA2D;
 80047b6:	4b13      	ldr	r3, [pc, #76]	@ (8004804 <main+0xa38>)
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80047b8:	4628      	mov	r0, r5
  hdma2d.Init.Mode = DMA2D_M2M;
 80047ba:	e9c5 3400 	strd	r3, r4, [r5]
  hdma2d.Init.OutputOffset = 0;
 80047be:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80047c2:	e9c5 440e 	strd	r4, r4, [r5, #56]	@ 0x38
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80047c6:	e9c5 4410 	strd	r4, r4, [r5, #64]	@ 0x40
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 80047ca:	e9c5 4412 	strd	r4, r4, [r5, #72]	@ 0x48
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80047ce:	f003 fffd 	bl	80087cc <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80047d2:	2101      	movs	r1, #1
 80047d4:	4628      	mov	r0, r5
  hadc1.Instance = ADC1;
 80047d6:	4d0c      	ldr	r5, [pc, #48]	@ (8004808 <main+0xa3c>)
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80047d8:	f004 f8ba 	bl	8008950 <HAL_DMA2D_ConfigLayer>
  MX_I2C4_Init();
 80047dc:	f7ff fad4 	bl	8003d88 <MX_I2C4_Init>
  MX_LIBJPEG_Init();
 80047e0:	f7fb ff6f 	bl	80006c2 <MX_LIBJPEG_Init>
  hcrc.Instance = CRC;
 80047e4:	4809      	ldr	r0, [pc, #36]	@ (800480c <main+0xa40>)
 80047e6:	4b0a      	ldr	r3, [pc, #40]	@ (8004810 <main+0xa44>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80047e8:	8084      	strh	r4, [r0, #4]
  hcrc.Instance = CRC;
 80047ea:	6003      	str	r3, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80047ec:	6206      	str	r6, [r0, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80047ee:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80047f2:	f003 fde7 	bl	80083c4 <HAL_CRC_Init>
 80047f6:	e00f      	b.n	8004818 <main+0xa4c>
 80047f8:	20012040 	.word	0x20012040
 80047fc:	20012310 	.word	0x20012310
 8004800:	40012000 	.word	0x40012000
 8004804:	4002b000 	.word	0x4002b000
 8004808:	2001238c 	.word	0x2001238c
 800480c:	20012368 	.word	0x20012368
 8004810:	40023000 	.word	0x40023000
 8004814:	40005400 	.word	0x40005400
  hjpeg.Instance = JPEG;
 8004818:	4b66      	ldr	r3, [pc, #408]	@ (80049b4 <main+0xbe8>)
 800481a:	4867      	ldr	r0, [pc, #412]	@ (80049b8 <main+0xbec>)
 800481c:	6003      	str	r3, [r0, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 800481e:	f005 fcdb 	bl	800a1d8 <HAL_JPEG_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 8004822:	2210      	movs	r2, #16
 8004824:	4621      	mov	r1, r4
 8004826:	a82e      	add	r0, sp, #184	@ 0xb8
 8004828:	f021 fbdc 	bl	8025fe4 <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800482c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004830:	4628      	mov	r0, r5
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004832:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004834:	612c      	str	r4, [r5, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004836:	61ac      	str	r4, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004838:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800483c:	60ec      	str	r4, [r5, #12]
  hadc1.Init.NbrOfConversion = 1;
 800483e:	61ee      	str	r6, [r5, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004840:	f885 4030 	strb.w	r4, [r5, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004844:	616e      	str	r6, [r5, #20]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004846:	e9c5 7300 	strd	r7, r3, [r5]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800484a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
 800484e:	e9c5 430a 	strd	r4, r3, [r5, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004852:	f003 faa1 	bl	8007d98 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_6;
 8004856:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004858:	a92e      	add	r1, sp, #184	@ 0xb8
 800485a:	4628      	mov	r0, r5
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800485c:	9430      	str	r4, [sp, #192]	@ 0xc0
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800485e:	e9cd 362e 	strd	r3, r6, [sp, #184]	@ 0xb8
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004862:	f003 fc51 	bl	8008108 <HAL_ADC_ConfigChannel>
  HAL_ADC_Start_IT(&hadc1);
 8004866:	4628      	mov	r0, r5
 8004868:	f003 fb3c 	bl	8007ee4 <HAL_ADC_Start_IT>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800486c:	221c      	movs	r2, #28
 800486e:	4621      	mov	r1, r4
 8004870:	a820      	add	r0, sp, #128	@ 0x80
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004872:	9419      	str	r4, [sp, #100]	@ 0x64
  htim1.Instance = TIM1;
 8004874:	4d51      	ldr	r5, [pc, #324]	@ (80049bc <main+0xbf0>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004876:	e9cd 4417 	strd	r4, r4, [sp, #92]	@ 0x5c
  TIM_OC_InitTypeDef sConfigOC = {0};
 800487a:	f021 fbb3 	bl	8025fe4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800487e:	222c      	movs	r2, #44	@ 0x2c
 8004880:	4621      	mov	r1, r4
 8004882:	a82e      	add	r0, sp, #184	@ 0xb8
 8004884:	f021 fbae 	bl	8025fe4 <memset>
  htim1.Init.Prescaler = 100-1;
 8004888:	f8df c178 	ldr.w	ip, [pc, #376]	@ 8004a04 <main+0xc38>
 800488c:	2363      	movs	r3, #99	@ 0x63
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800488e:	4628      	mov	r0, r5
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004890:	60ac      	str	r4, [r5, #8]
  htim1.Init.Prescaler = 100-1;
 8004892:	e9c5 c300 	strd	ip, r3, [r5]
  htim1.Init.Period = 16000-1;
 8004896:	f643 637f 	movw	r3, #15999	@ 0x3e7f
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800489a:	e9c5 4405 	strd	r4, r4, [r5, #20]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800489e:	e9c5 3403 	strd	r3, r4, [r5, #12]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80048a2:	f007 ff37 	bl	800c714 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80048a6:	a917      	add	r1, sp, #92	@ 0x5c
 80048a8:	4628      	mov	r0, r5
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80048aa:	9419      	str	r4, [sp, #100]	@ 0x64
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80048ac:	e9cd 4417 	strd	r4, r4, [sp, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80048b0:	f008 f8a8 	bl	800ca04 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.Pulse = 16000/2;
 80048b4:	f04f 0e60 	mov.w	lr, #96	@ 0x60
 80048b8:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80048bc:	4622      	mov	r2, r4
 80048be:	a920      	add	r1, sp, #128	@ 0x80
 80048c0:	4628      	mov	r0, r5
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80048c2:	9426      	str	r4, [sp, #152]	@ 0x98
  sConfigOC.Pulse = 16000/2;
 80048c4:	e9cd e320 	strd	lr, r3, [sp, #128]	@ 0x80
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80048c8:	e9cd 4422 	strd	r4, r4, [sp, #136]	@ 0x88
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80048cc:	e9cd 4424 	strd	r4, r4, [sp, #144]	@ 0x90
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80048d0:	f007 ff88 	bl	800c7e4 <HAL_TIM_PWM_ConfigChannel>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80048d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80048d8:	a92e      	add	r1, sp, #184	@ 0xb8
 80048da:	4628      	mov	r0, r5
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80048dc:	9432      	str	r4, [sp, #200]	@ 0xc8
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80048de:	9435      	str	r4, [sp, #212]	@ 0xd4
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80048e0:	9438      	str	r4, [sp, #224]	@ 0xe0
  sBreakDeadTimeConfig.BreakFilter = 0;
 80048e2:	e9cd 3433 	strd	r3, r4, [sp, #204]	@ 0xcc
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80048e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80048ea:	e9cd 442e 	strd	r4, r4, [sp, #184]	@ 0xb8
  sBreakDeadTimeConfig.Break2Filter = 0;
 80048ee:	e9cd 3436 	strd	r3, r4, [sp, #216]	@ 0xd8
  sBreakDeadTimeConfig.DeadTime = 0;
 80048f2:	e9cd 4430 	strd	r4, r4, [sp, #192]	@ 0xc0
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80048f6:	f008 f8cf 	bl	800ca98 <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80048fa:	4621      	mov	r1, r4
 80048fc:	4628      	mov	r0, r5
 80048fe:	f008 f87f 	bl	800ca00 <HAL_TIM_PWM_Start>
  HAL_TIM_MspPostInit(&htim1);
 8004902:	4628      	mov	r0, r5
  hi2c1.Instance = I2C1;
 8004904:	4d2e      	ldr	r5, [pc, #184]	@ (80049c0 <main+0xbf4>)
  HAL_TIM_MspPostInit(&htim1);
 8004906:	f000 fb71 	bl	8004fec <HAL_TIM_MspPostInit>
  hi2c1.Init.Timing = 0x00C0EAFF;
 800490a:	4b2e      	ldr	r3, [pc, #184]	@ (80049c4 <main+0xbf8>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800490c:	4628      	mov	r0, r5
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800490e:	622c      	str	r4, [r5, #32]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8004910:	e9c5 8300 	strd	r8, r3, [r5]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004914:	e9c5 4602 	strd	r4, r6, [r5, #8]
  hi2c1.Init.OwnAddress2 = 0;
 8004918:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800491c:	e9c5 4406 	strd	r4, r4, [r5, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004920:	f004 ff28 	bl	8009774 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004924:	4621      	mov	r1, r4
 8004926:	4628      	mov	r0, r5
 8004928:	f005 fa7b 	bl	8009e22 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800492c:	4621      	mov	r1, r4
 800492e:	4628      	mov	r0, r5
    gas_sensor.power_mode = BME680_FORCED_MODE;
 8004930:	4d25      	ldr	r5, [pc, #148]	@ (80049c8 <main+0xbfc>)
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004932:	f005 fa9c 	bl	8009e6e <HAL_I2CEx_ConfigDigitalFilter>
  MX_TouchGFX_Init();
 8004936:	f7fb fec6 	bl	80006c6 <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
 800493a:	f7fb fec3 	bl	80006c4 <MX_TouchGFX_PreOSInit>
    gas_sensor.dev_id = BME680_I2C_ADDR_PRIMARY;
 800493e:	2376      	movs	r3, #118	@ 0x76
    rslt = bme680_init(&gas_sensor);
 8004940:	4628      	mov	r0, r5
    gas_sensor.power_mode = BME680_FORCED_MODE;
 8004942:	f885 6044 	strb.w	r6, [r5, #68]	@ 0x44
    gas_sensor.dev_id = BME680_I2C_ADDR_PRIMARY;
 8004946:	706b      	strb	r3, [r5, #1]
    gas_sensor.read = user_i2c_read;
 8004948:	4b20      	ldr	r3, [pc, #128]	@ (80049cc <main+0xc00>)
    gas_sensor.intf = BME680_I2C_INTF;
 800494a:	70ae      	strb	r6, [r5, #2]
    gas_sensor.read = user_i2c_read;
 800494c:	64ab      	str	r3, [r5, #72]	@ 0x48
    gas_sensor.write = user_i2c_write;
 800494e:	4b20      	ldr	r3, [pc, #128]	@ (80049d0 <main+0xc04>)
 8004950:	64eb      	str	r3, [r5, #76]	@ 0x4c
    gas_sensor.delay_ms = user_delay_ms;
 8004952:	4b20      	ldr	r3, [pc, #128]	@ (80049d4 <main+0xc08>)
 8004954:	652b      	str	r3, [r5, #80]	@ 0x50
    gas_sensor.amb_temp = 25;
 8004956:	2319      	movs	r3, #25
 8004958:	712b      	strb	r3, [r5, #4]
    rslt = bme680_init(&gas_sensor);
 800495a:	f7fe fcae 	bl	80032ba <bme680_init>
    gas_sensor.tph_sett.os_hum = BME680_OS_2X;
 800495e:	4b1e      	ldr	r3, [pc, #120]	@ (80049d8 <main+0xc0c>)
    rslt = bme680_set_sensor_settings(set_required_settings,&gas_sensor);
 8004960:	4629      	mov	r1, r5
 8004962:	20df      	movs	r0, #223	@ 0xdf
    gas_sensor.gas_sett.run_gas = BME680_ENABLE_GAS_MEAS;
 8004964:	f885 603e 	strb.w	r6, [r5, #62]	@ 0x3e
    gas_sensor.tph_sett.os_hum = BME680_OS_2X;
 8004968:	63ab      	str	r3, [r5, #56]	@ 0x38
    gas_sensor.gas_sett.heatr_temp = 320; /* degree Celsius */
 800496a:	4b1c      	ldr	r3, [pc, #112]	@ (80049dc <main+0xc10>)
 800496c:	642b      	str	r3, [r5, #64]	@ 0x40
    rslt = bme680_set_sensor_settings(set_required_settings,&gas_sensor);
 800496e:	f7fe fd97 	bl	80034a0 <bme680_set_sensor_settings>
    rslt = bme680_set_sensor_mode(&gas_sensor);
 8004972:	4628      	mov	r0, r5
 8004974:	f7fe fd55 	bl	8003422 <bme680_set_sensor_mode>
    bme680_get_profile_dur(&meas_period, &gas_sensor);
 8004978:	4629      	mov	r1, r5
 800497a:	a82e      	add	r0, sp, #184	@ 0xb8
 800497c:	f7fe ff06 	bl	800378c <bme680_get_profile_dur>
  osKernelInitialize();
 8004980:	f008 f95a 	bl	800cc38 <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8004984:	4a16      	ldr	r2, [pc, #88]	@ (80049e0 <main+0xc14>)
 8004986:	4621      	mov	r1, r4
 8004988:	4816      	ldr	r0, [pc, #88]	@ (80049e4 <main+0xc18>)
 800498a:	f008 f98f 	bl	800ccac <osThreadNew>
 800498e:	4b16      	ldr	r3, [pc, #88]	@ (80049e8 <main+0xc1c>)
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8004990:	4a16      	ldr	r2, [pc, #88]	@ (80049ec <main+0xc20>)
 8004992:	4621      	mov	r1, r4
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8004994:	6018      	str	r0, [r3, #0]
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8004996:	4816      	ldr	r0, [pc, #88]	@ (80049f0 <main+0xc24>)
 8004998:	f008 f988 	bl	800ccac <osThreadNew>
 800499c:	4b15      	ldr	r3, [pc, #84]	@ (80049f4 <main+0xc28>)
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 800499e:	4a16      	ldr	r2, [pc, #88]	@ (80049f8 <main+0xc2c>)
 80049a0:	4621      	mov	r1, r4
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 80049a2:	6018      	str	r0, [r3, #0]
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 80049a4:	4815      	ldr	r0, [pc, #84]	@ (80049fc <main+0xc30>)
 80049a6:	f008 f981 	bl	800ccac <osThreadNew>
 80049aa:	4b15      	ldr	r3, [pc, #84]	@ (8004a00 <main+0xc34>)
 80049ac:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80049ae:	f008 f95d 	bl	800cc6c <osKernelStart>
  while (1)
 80049b2:	e7fe      	b.n	80049b2 <main+0xbe6>
 80049b4:	50051000 	.word	0x50051000
 80049b8:	200121f4 	.word	0x200121f4
 80049bc:	20011ff4 	.word	0x20011ff4
 80049c0:	200122a0 	.word	0x200122a0
 80049c4:	00c0eaff 	.word	0x00c0eaff
 80049c8:	20011f30 	.word	0x20011f30
 80049cc:	08003b51 	.word	0x08003b51
 80049d0:	08003b9d 	.word	0x08003b9d
 80049d4:	08003b99 	.word	0x08003b99
 80049d8:	02030402 	.word	0x02030402
 80049dc:	00960140 	.word	0x00960140
 80049e0:	08028b18 	.word	0x08028b18
 80049e4:	08003bf1 	.word	0x08003bf1
 80049e8:	20011fbc 	.word	0x20011fbc
 80049ec:	08028af4 	.word	0x08028af4
 80049f0:	080006d5 	.word	0x080006d5
 80049f4:	20011fb8 	.word	0x20011fb8
 80049f8:	08028ad0 	.word	0x08028ad0
 80049fc:	08002781 	.word	0x08002781
 8004a00:	20011fb4 	.word	0x20011fb4
 8004a04:	40010000 	.word	0x40010000

08004a08 <HAL_ADC_ConvCpltCallback>:
{
 8004a08:	b508      	push	{r3, lr}
   uhADCxConvertedData = HAL_ADC_GetValue(hadc);
 8004a0a:	f003 fae9 	bl	8007fe0 <HAL_ADC_GetValue>
 8004a0e:	4b02      	ldr	r3, [pc, #8]	@ (8004a18 <HAL_ADC_ConvCpltCallback+0x10>)
 8004a10:	b280      	uxth	r0, r0
 8004a12:	8018      	strh	r0, [r3, #0]
}
 8004a14:	bd08      	pop	{r3, pc}
 8004a16:	bf00      	nop
 8004a18:	20011fb0 	.word	0x20011fb0

08004a1c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8004a1c:	6802      	ldr	r2, [r0, #0]
 8004a1e:	4b03      	ldr	r3, [pc, #12]	@ (8004a2c <HAL_TIM_PeriodElapsedCallback+0x10>)
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d101      	bne.n	8004a28 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8004a24:	f003 b994 	b.w	8007d50 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	40001000 	.word	0x40001000

08004a30 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004a30:	4770      	bx	lr
	...

08004a34 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004a34:	4b0d      	ldr	r3, [pc, #52]	@ (8004a6c <HAL_MspInit+0x38>)
{
 8004a36:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004a38:	210f      	movs	r1, #15
 8004a3a:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a40:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004a44:	641a      	str	r2, [r3, #64]	@ 0x40
 8004a46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a48:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8004a4c:	9200      	str	r2, [sp, #0]
 8004a4e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a52:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a56:	645a      	str	r2, [r3, #68]	@ 0x44
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004a58:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a60:	9301      	str	r3, [sp, #4]
 8004a62:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004a64:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004a66:	f003 bc11 	b.w	800828c <HAL_NVIC_SetPriority>
 8004a6a:	bf00      	nop
 8004a6c:	40023800 	.word	0x40023800

08004a70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004a70:	b510      	push	{r4, lr}
 8004a72:	b088      	sub	sp, #32
 8004a74:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a76:	2214      	movs	r2, #20
 8004a78:	2100      	movs	r1, #0
 8004a7a:	a803      	add	r0, sp, #12
 8004a7c:	f021 fab2 	bl	8025fe4 <memset>
  if(hadc->Instance==ADC1)
 8004a80:	6822      	ldr	r2, [r4, #0]
 8004a82:	4b14      	ldr	r3, [pc, #80]	@ (8004ad4 <HAL_ADC_MspInit+0x64>)
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d123      	bne.n	8004ad0 <HAL_ADC_MspInit+0x60>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004a88:	f503 338c 	add.w	r3, r3, #71680	@ 0x11800
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a8c:	a903      	add	r1, sp, #12
 8004a8e:	4812      	ldr	r0, [pc, #72]	@ (8004ad8 <HAL_ADC_MspInit+0x68>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004a90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a92:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a96:	645a      	str	r2, [r3, #68]	@ 0x44
 8004a98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a9a:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8004a9e:	9201      	str	r2, [sp, #4]
 8004aa0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004aa2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004aa4:	f042 0201 	orr.w	r2, r2, #1
 8004aa8:	631a      	str	r2, [r3, #48]	@ 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004aaa:	2240      	movs	r2, #64	@ 0x40
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	9302      	str	r3, [sp, #8]
 8004ab4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004abc:	f004 fb68 	bl	8009190 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8004ac0:	2012      	movs	r0, #18
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	2105      	movs	r1, #5
 8004ac6:	f003 fbe1 	bl	800828c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8004aca:	2012      	movs	r0, #18
 8004acc:	f003 fc10 	bl	80082f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004ad0:	b008      	add	sp, #32
 8004ad2:	bd10      	pop	{r4, pc}
 8004ad4:	40012000 	.word	0x40012000
 8004ad8:	40020000 	.word	0x40020000

08004adc <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8004adc:	6802      	ldr	r2, [r0, #0]
{
 8004ade:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8004ae0:	4b08      	ldr	r3, [pc, #32]	@ (8004b04 <HAL_CRC_MspInit+0x28>)
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d10b      	bne.n	8004afe <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8004ae6:	f8d3 2830 	ldr.w	r2, [r3, #2096]	@ 0x830
 8004aea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004aee:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004af2:	631a      	str	r2, [r3, #48]	@ 0x30
 8004af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004af6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004afa:	9301      	str	r3, [sp, #4]
 8004afc:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8004afe:	b002      	add	sp, #8
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	40023000 	.word	0x40023000

08004b08 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8004b08:	4b0e      	ldr	r3, [pc, #56]	@ (8004b44 <HAL_DMA2D_MspInit+0x3c>)
{
 8004b0a:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 8004b0c:	6802      	ldr	r2, [r0, #0]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d115      	bne.n	8004b3e <HAL_DMA2D_MspInit+0x36>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8004b12:	f5a3 43f0 	sub.w	r3, r3, #30720	@ 0x7800
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8004b16:	2105      	movs	r1, #5
 8004b18:	205a      	movs	r0, #90	@ 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8004b1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b1c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8004b20:	631a      	str	r2, [r3, #48]	@ 0x30
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8004b22:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8004b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004b2a:	9301      	str	r3, [sp, #4]
 8004b2c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8004b2e:	f003 fbad 	bl	800828c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8004b32:	205a      	movs	r0, #90	@ 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8004b34:	b003      	add	sp, #12
 8004b36:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8004b3a:	f003 bbd9 	b.w	80082f0 <HAL_NVIC_EnableIRQ>
}
 8004b3e:	b003      	add	sp, #12
 8004b40:	f85d fb04 	ldr.w	pc, [sp], #4
 8004b44:	4002b000 	.word	0x4002b000

08004b48 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8004b48:	b510      	push	{r4, lr}
 8004b4a:	b088      	sub	sp, #32
 8004b4c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b4e:	2214      	movs	r2, #20
 8004b50:	2100      	movs	r1, #0
 8004b52:	a803      	add	r0, sp, #12
 8004b54:	f021 fa46 	bl	8025fe4 <memset>
  if(hdsi->Instance==DSI)
 8004b58:	6822      	ldr	r2, [r4, #0]
 8004b5a:	4b15      	ldr	r3, [pc, #84]	@ (8004bb0 <HAL_DSI_MspInit+0x68>)
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d125      	bne.n	8004bac <HAL_DSI_MspInit+0x64>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8004b60:	f503 434c 	add.w	r3, r3, #52224	@ 0xcc00
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8004b64:	a903      	add	r1, sp, #12
 8004b66:	4813      	ldr	r0, [pc, #76]	@ (8004bb4 <HAL_DSI_MspInit+0x6c>)
    __HAL_RCC_DSI_CLK_ENABLE();
 8004b68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b6a:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8004b6e:	645a      	str	r2, [r3, #68]	@ 0x44
 8004b70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b72:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8004b76:	9201      	str	r2, [sp, #4]
 8004b78:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8004b7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b80:	631a      	str	r2, [r3, #48]	@ 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b82:	2204      	movs	r2, #4
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8004b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b8a:	9302      	str	r3, [sp, #8]
 8004b8c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b8e:	2302      	movs	r3, #2
 8004b90:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8004b94:	230d      	movs	r3, #13
 8004b96:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8004b98:	f004 fafa 	bl	8009190 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 5, 0);
 8004b9c:	2062      	movs	r0, #98	@ 0x62
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	2105      	movs	r1, #5
 8004ba2:	f003 fb73 	bl	800828c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 8004ba6:	2062      	movs	r0, #98	@ 0x62
 8004ba8:	f003 fba2 	bl	80082f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 8004bac:	b008      	add	sp, #32
 8004bae:	bd10      	pop	{r4, pc}
 8004bb0:	40016c00 	.word	0x40016c00
 8004bb4:	40022400 	.word	0x40022400

08004bb8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bba:	2214      	movs	r2, #20
{
 8004bbc:	b0af      	sub	sp, #188	@ 0xbc
 8004bbe:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bc0:	2100      	movs	r1, #0
 8004bc2:	eb0d 0002 	add.w	r0, sp, r2
 8004bc6:	f021 fa0d 	bl	8025fe4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004bca:	2290      	movs	r2, #144	@ 0x90
 8004bcc:	2100      	movs	r1, #0
 8004bce:	a80a      	add	r0, sp, #40	@ 0x28
 8004bd0:	f021 fa08 	bl	8025fe4 <memset>
  if(hi2c->Instance==I2C1)
 8004bd4:	6823      	ldr	r3, [r4, #0]
 8004bd6:	4a3d      	ldr	r2, [pc, #244]	@ (8004ccc <HAL_I2C_MspInit+0x114>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d12c      	bne.n	8004c36 <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004bdc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004be0:	a80a      	add	r0, sp, #40	@ 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004be2:	930a      	str	r3, [sp, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004be4:	f007 f822 	bl	800bc2c <HAL_RCCEx_PeriphCLKConfig>
 8004be8:	b108      	cbz	r0, 8004bee <HAL_I2C_MspInit+0x36>
    {
      Error_Handler();
 8004bea:	f7ff ff21 	bl	8004a30 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bee:	4c38      	ldr	r4, [pc, #224]	@ (8004cd0 <HAL_I2C_MspInit+0x118>)
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004bf0:	f44f 7240 	mov.w	r2, #768	@ 0x300
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bf4:	2100      	movs	r1, #0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bf6:	4837      	ldr	r0, [pc, #220]	@ (8004cd4 <HAL_I2C_MspInit+0x11c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bf8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004bfa:	f043 0302 	orr.w	r3, r3, #2
 8004bfe:	6323      	str	r3, [r4, #48]	@ 0x30
 8004c00:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	9300      	str	r3, [sp, #0]
 8004c08:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004c0a:	2312      	movs	r3, #18
 8004c0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e9cd 1307 	strd	r1, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004c16:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c18:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004c1a:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c1c:	f004 fab8 	bl	8009190 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004c20:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004c22:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004c26:	6423      	str	r3, [r4, #64]	@ 0x40
 8004c28:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004c2a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c2e:	9301      	str	r3, [sp, #4]
 8004c30:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8004c32:	b02f      	add	sp, #188	@ 0xbc
 8004c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(hi2c->Instance==I2C4)
 8004c36:	4a28      	ldr	r2, [pc, #160]	@ (8004cd8 <HAL_I2C_MspInit+0x120>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d1fa      	bne.n	8004c32 <HAL_I2C_MspInit+0x7a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8004c3c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004c40:	a80a      	add	r0, sp, #40	@ 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8004c42:	930a      	str	r3, [sp, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004c44:	f006 fff2 	bl	800bc2c <HAL_RCCEx_PeriphCLKConfig>
 8004c48:	b108      	cbz	r0, 8004c4e <HAL_I2C_MspInit+0x96>
      Error_Handler();
 8004c4a:	f7ff fef1 	bl	8004a30 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c4e:	4c20      	ldr	r4, [pc, #128]	@ (8004cd0 <HAL_I2C_MspInit+0x118>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004c50:	2712      	movs	r7, #18
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c52:	2601      	movs	r6, #1
 8004c54:	2503      	movs	r5, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c56:	6b23      	ldr	r3, [r4, #48]	@ 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c58:	a905      	add	r1, sp, #20
 8004c5a:	481e      	ldr	r0, [pc, #120]	@ (8004cd4 <HAL_I2C_MspInit+0x11c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c5c:	f043 0302 	orr.w	r3, r3, #2
 8004c60:	6323      	str	r3, [r4, #48]	@ 0x30
 8004c62:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004c64:	f003 0302 	and.w	r3, r3, #2
 8004c68:	9302      	str	r3, [sp, #8]
 8004c6a:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004c6c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004c6e:	f043 0308 	orr.w	r3, r3, #8
 8004c72:	6323      	str	r3, [r4, #48]	@ 0x30
 8004c74:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004c76:	f003 0308 	and.w	r3, r3, #8
 8004c7a:	9303      	str	r3, [sp, #12]
 8004c7c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004c7e:	2380      	movs	r3, #128	@ 0x80
 8004c80:	e9cd 3705 	strd	r3, r7, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 8004c84:	230b      	movs	r3, #11
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c86:	e9cd 6507 	strd	r6, r5, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 8004c8a:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c8c:	f004 fa80 	bl	8009190 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004c90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004c94:	a905      	add	r1, sp, #20
 8004c96:	4811      	ldr	r0, [pc, #68]	@ (8004cdc <HAL_I2C_MspInit+0x124>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004c98:	e9cd 3705 	strd	r3, r7, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8004c9c:	2304      	movs	r3, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c9e:	e9cd 6507 	strd	r6, r5, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8004ca2:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004ca4:	f004 fa74 	bl	8009190 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8004ca8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 5, 0);
 8004caa:	2200      	movs	r2, #0
 8004cac:	2105      	movs	r1, #5
 8004cae:	205f      	movs	r0, #95	@ 0x5f
    __HAL_RCC_I2C4_CLK_ENABLE();
 8004cb0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004cb4:	6423      	str	r3, [r4, #64]	@ 0x40
 8004cb6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004cb8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004cbc:	9304      	str	r3, [sp, #16]
 8004cbe:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 5, 0);
 8004cc0:	f003 fae4 	bl	800828c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 8004cc4:	205f      	movs	r0, #95	@ 0x5f
 8004cc6:	f003 fb13 	bl	80082f0 <HAL_NVIC_EnableIRQ>
}
 8004cca:	e7b2      	b.n	8004c32 <HAL_I2C_MspInit+0x7a>
 8004ccc:	40005400 	.word	0x40005400
 8004cd0:	40023800 	.word	0x40023800
 8004cd4:	40020400 	.word	0x40020400
 8004cd8:	40006000 	.word	0x40006000
 8004cdc:	40020c00 	.word	0x40020c00

08004ce0 <HAL_I2C_MspDeInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
  if(hi2c->Instance==I2C1)
 8004ce0:	4a17      	ldr	r2, [pc, #92]	@ (8004d40 <HAL_I2C_MspDeInit+0x60>)
{
 8004ce2:	b508      	push	{r3, lr}
  if(hi2c->Instance==I2C1)
 8004ce4:	6803      	ldr	r3, [r0, #0]
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d111      	bne.n	8004d0e <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8004cea:	f502 32f2 	add.w	r2, r2, #123904	@ 0x1e400

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8004cee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004cf2:	4814      	ldr	r0, [pc, #80]	@ (8004d44 <HAL_I2C_MspDeInit+0x64>)
    __HAL_RCC_I2C1_CLK_DISABLE();
 8004cf4:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8004cf6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004cfa:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8004cfc:	f004 fb2c 	bl	8009358 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8004d00:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004d04:	480f      	ldr	r0, [pc, #60]	@ (8004d44 <HAL_I2C_MspDeInit+0x64>)
  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 8004d06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8004d0a:	f004 bb25 	b.w	8009358 <HAL_GPIO_DeInit>
  else if(hi2c->Instance==I2C4)
 8004d0e:	4a0e      	ldr	r2, [pc, #56]	@ (8004d48 <HAL_I2C_MspDeInit+0x68>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d113      	bne.n	8004d3c <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C4_CLK_DISABLE();
 8004d14:	f502 32ec 	add.w	r2, r2, #120832	@ 0x1d800
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8004d18:	2180      	movs	r1, #128	@ 0x80
 8004d1a:	480a      	ldr	r0, [pc, #40]	@ (8004d44 <HAL_I2C_MspDeInit+0x64>)
    __HAL_RCC_I2C4_CLK_DISABLE();
 8004d1c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8004d1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d22:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8004d24:	f004 fb18 	bl	8009358 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12);
 8004d28:	4808      	ldr	r0, [pc, #32]	@ (8004d4c <HAL_I2C_MspDeInit+0x6c>)
 8004d2a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004d2e:	f004 fb13 	bl	8009358 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(I2C4_EV_IRQn);
 8004d32:	205f      	movs	r0, #95	@ 0x5f
}
 8004d34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_DisableIRQ(I2C4_EV_IRQn);
 8004d38:	f003 bae8 	b.w	800830c <HAL_NVIC_DisableIRQ>
}
 8004d3c:	bd08      	pop	{r3, pc}
 8004d3e:	bf00      	nop
 8004d40:	40005400 	.word	0x40005400
 8004d44:	40020400 	.word	0x40020400
 8004d48:	40006000 	.word	0x40006000
 8004d4c:	40020c00 	.word	0x40020c00

08004d50 <HAL_JPEG_MspInit>:
* This function configures the hardware resources used in this example
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 8004d50:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(hjpeg->Instance==JPEG)
 8004d52:	4b35      	ldr	r3, [pc, #212]	@ (8004e28 <HAL_JPEG_MspInit+0xd8>)
{
 8004d54:	4605      	mov	r5, r0
  if(hjpeg->Instance==JPEG)
 8004d56:	6802      	ldr	r2, [r0, #0]
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d162      	bne.n	8004e22 <HAL_JPEG_MspInit+0xd2>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 8004d5c:	4b33      	ldr	r3, [pc, #204]	@ (8004e2c <HAL_JPEG_MspInit+0xdc>)
    hdma_jpeg_in.Instance = DMA2_Stream0;
    hdma_jpeg_in.Init.Channel = DMA_CHANNEL_9;
    hdma_jpeg_in.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_jpeg_in.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_jpeg_in.Init.MemInc = DMA_MINC_ENABLE;
    hdma_jpeg_in.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004d5e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
    hdma_jpeg_in.Instance = DMA2_Stream0;
 8004d62:	4c33      	ldr	r4, [pc, #204]	@ (8004e30 <HAL_JPEG_MspInit+0xe0>)
    hdma_jpeg_in.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_jpeg_in.Init.Mode = DMA_NORMAL;
    hdma_jpeg_in.Init.Priority = DMA_PRIORITY_LOW;
    hdma_jpeg_in.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
    hdma_jpeg_in.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004d64:	2004      	movs	r0, #4
    __HAL_RCC_JPEG_CLK_ENABLE();
 8004d66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
    hdma_jpeg_in.Init.MemBurst = DMA_MBURST_INC4;
    hdma_jpeg_in.Init.PeriphBurst = DMA_PBURST_INC4;
 8004d68:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
    hdma_jpeg_in.Init.Channel = DMA_CHANNEL_9;
 8004d6c:	f8df e0cc 	ldr.w	lr, [pc, #204]	@ 8004e3c <HAL_JPEG_MspInit+0xec>
    __HAL_RCC_JPEG_CLK_ENABLE();
 8004d70:	f042 0202 	orr.w	r2, r2, #2
 8004d74:	635a      	str	r2, [r3, #52]	@ 0x34
    hdma_jpeg_in.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d76:	2240      	movs	r2, #64	@ 0x40
    __HAL_RCC_JPEG_CLK_ENABLE();
 8004d78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d7a:	f003 0302 	and.w	r3, r3, #2
 8004d7e:	9301      	str	r3, [sp, #4]
 8004d80:	9b01      	ldr	r3, [sp, #4]
    hdma_jpeg_in.Init.Channel = DMA_CHANNEL_9;
 8004d82:	f04f 5390 	mov.w	r3, #301989888	@ 0x12000000
 8004d86:	e9c4 e300 	strd	lr, r3, [r4]
    hdma_jpeg_in.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	e9c4 2302 	strd	r2, r3, [r4, #8]
    hdma_jpeg_in.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004d90:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
    hdma_jpeg_in.Init.Priority = DMA_PRIORITY_LOW;
 8004d94:	6223      	str	r3, [r4, #32]
    hdma_jpeg_in.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004d96:	e9c4 1204 	strd	r1, r2, [r4, #16]
    hdma_jpeg_in.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004d9a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
    hdma_jpeg_in.Init.Mode = DMA_NORMAL;
 8004d9e:	e9c4 2306 	strd	r2, r3, [r4, #24]
    hdma_jpeg_in.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e9c4 0309 	strd	r0, r3, [r4, #36]	@ 0x24
    hdma_jpeg_in.Init.PeriphBurst = DMA_PBURST_INC4;
 8004da8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
    if (HAL_DMA_Init(&hdma_jpeg_in) != HAL_OK)
 8004dac:	4620      	mov	r0, r4
    hdma_jpeg_in.Init.PeriphBurst = DMA_PBURST_INC4;
 8004dae:	e9c4 c30b 	strd	ip, r3, [r4, #44]	@ 0x2c
    if (HAL_DMA_Init(&hdma_jpeg_in) != HAL_OK)
 8004db2:	f003 fb7d 	bl	80084b0 <HAL_DMA_Init>
 8004db6:	b108      	cbz	r0, 8004dbc <HAL_JPEG_MspInit+0x6c>
    {
      Error_Handler();
 8004db8:	f7ff fe3a 	bl	8004a30 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hdma_jpeg_in);
 8004dbc:	632c      	str	r4, [r5, #48]	@ 0x30

    /* JPEG_OUT Init */
    hdma_jpeg_out.Instance = DMA2_Stream1;
    hdma_jpeg_out.Init.Channel = DMA_CHANNEL_9;
 8004dbe:	f04f 5390 	mov.w	r3, #301989888	@ 0x12000000
 8004dc2:	4a1c      	ldr	r2, [pc, #112]	@ (8004e34 <HAL_JPEG_MspInit+0xe4>)
    hdma_jpeg_out.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_jpeg_out.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_jpeg_out.Init.MemInc = DMA_MINC_ENABLE;
    hdma_jpeg_out.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004dc4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
    __HAL_LINKDMA(hjpeg,hdmain,hdma_jpeg_in);
 8004dc8:	63a5      	str	r5, [r4, #56]	@ 0x38
    hdma_jpeg_out.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_jpeg_out.Init.Mode = DMA_NORMAL;
    hdma_jpeg_out.Init.Priority = DMA_PRIORITY_LOW;
    hdma_jpeg_out.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
    hdma_jpeg_out.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004dca:	2004      	movs	r0, #4
    hdma_jpeg_out.Instance = DMA2_Stream1;
 8004dcc:	4c1a      	ldr	r4, [pc, #104]	@ (8004e38 <HAL_JPEG_MspInit+0xe8>)
    hdma_jpeg_out.Init.MemBurst = DMA_MBURST_INC4;
    hdma_jpeg_out.Init.PeriphBurst = DMA_PBURST_INC4;
 8004dce:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
    hdma_jpeg_out.Init.Channel = DMA_CHANNEL_9;
 8004dd2:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_jpeg_out.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004dd6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
    hdma_jpeg_out.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004dda:	2300      	movs	r3, #0
    hdma_jpeg_out.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004ddc:	e9c4 1204 	strd	r1, r2, [r4, #16]
    hdma_jpeg_out.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004de0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
    hdma_jpeg_out.Init.Priority = DMA_PRIORITY_LOW;
 8004de4:	6223      	str	r3, [r4, #32]
    hdma_jpeg_out.Init.PeriphInc = DMA_PINC_DISABLE;
 8004de6:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_jpeg_out.Init.Mode = DMA_NORMAL;
 8004dea:	e9c4 2306 	strd	r2, r3, [r4, #24]
    hdma_jpeg_out.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e9c4 0309 	strd	r0, r3, [r4, #36]	@ 0x24
    hdma_jpeg_out.Init.PeriphBurst = DMA_PBURST_INC4;
 8004df4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
    if (HAL_DMA_Init(&hdma_jpeg_out) != HAL_OK)
 8004df8:	4620      	mov	r0, r4
    hdma_jpeg_out.Init.PeriphBurst = DMA_PBURST_INC4;
 8004dfa:	e9c4 c30b 	strd	ip, r3, [r4, #44]	@ 0x2c
    if (HAL_DMA_Init(&hdma_jpeg_out) != HAL_OK)
 8004dfe:	f003 fb57 	bl	80084b0 <HAL_DMA_Init>
 8004e02:	b108      	cbz	r0, 8004e08 <HAL_JPEG_MspInit+0xb8>
    {
      Error_Handler();
 8004e04:	f7ff fe14 	bl	8004a30 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hdma_jpeg_out);
 8004e08:	636c      	str	r4, [r5, #52]	@ 0x34

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	2105      	movs	r1, #5
 8004e0e:	206c      	movs	r0, #108	@ 0x6c
    __HAL_LINKDMA(hjpeg,hdmaout,hdma_jpeg_out);
 8004e10:	63a5      	str	r5, [r4, #56]	@ 0x38
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 8004e12:	f003 fa3b 	bl	800828c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8004e16:	206c      	movs	r0, #108	@ 0x6c
  /* USER CODE BEGIN JPEG_MspInit 1 */

  /* USER CODE END JPEG_MspInit 1 */
  }

}
 8004e18:	b003      	add	sp, #12
 8004e1a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8004e1e:	f003 ba67 	b.w	80082f0 <HAL_NVIC_EnableIRQ>
}
 8004e22:	b003      	add	sp, #12
 8004e24:	bd30      	pop	{r4, r5, pc}
 8004e26:	bf00      	nop
 8004e28:	50051000 	.word	0x50051000
 8004e2c:	40023800 	.word	0x40023800
 8004e30:	20012194 	.word	0x20012194
 8004e34:	40026428 	.word	0x40026428
 8004e38:	20012134 	.word	0x20012134
 8004e3c:	40026410 	.word	0x40026410

08004e40 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8004e40:	b510      	push	{r4, lr}
 8004e42:	b0a6      	sub	sp, #152	@ 0x98
 8004e44:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004e46:	2290      	movs	r2, #144	@ 0x90
 8004e48:	2100      	movs	r1, #0
 8004e4a:	a802      	add	r0, sp, #8
 8004e4c:	f021 f8ca 	bl	8025fe4 <memset>
  if(hltdc->Instance==LTDC)
 8004e50:	6822      	ldr	r2, [r4, #0]
 8004e52:	4b14      	ldr	r3, [pc, #80]	@ (8004ea4 <HAL_LTDC_MspInit+0x64>)
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d122      	bne.n	8004e9e <HAL_LTDC_MspInit+0x5e>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8004e58:	2308      	movs	r3, #8
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8004e5a:	2007      	movs	r0, #7
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8004e5c:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8004e5e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8004e62:	9307      	str	r3, [sp, #28]
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8004e64:	2302      	movs	r3, #2
 8004e66:	e9cd 3008 	strd	r3, r0, [sp, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8004e6a:	2301      	movs	r3, #1
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004e6c:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8004e6e:	930c      	str	r3, [sp, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004e70:	f006 fedc 	bl	800bc2c <HAL_RCCEx_PeriphCLKConfig>
 8004e74:	b108      	cbz	r0, 8004e7a <HAL_LTDC_MspInit+0x3a>
    {
      Error_Handler();
 8004e76:	f7ff fddb 	bl	8004a30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8004e7a:	4b0b      	ldr	r3, [pc, #44]	@ (8004ea8 <HAL_LTDC_MspInit+0x68>)
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8004e7c:	2058      	movs	r0, #88	@ 0x58
 8004e7e:	2103      	movs	r1, #3
    __HAL_RCC_LTDC_CLK_ENABLE();
 8004e80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e82:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8004e86:	645a      	str	r2, [r3, #68]	@ 0x44
    HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8004e88:	2200      	movs	r2, #0
    __HAL_RCC_LTDC_CLK_ENABLE();
 8004e8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e8c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004e90:	9301      	str	r3, [sp, #4]
 8004e92:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8004e94:	f003 f9fa 	bl	800828c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8004e98:	2058      	movs	r0, #88	@ 0x58
 8004e9a:	f003 fa29 	bl	80082f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8004e9e:	b026      	add	sp, #152	@ 0x98
 8004ea0:	bd10      	pop	{r4, pc}
 8004ea2:	bf00      	nop
 8004ea4:	40016800 	.word	0x40016800
 8004ea8:	40023800 	.word	0x40023800

08004eac <HAL_QSPI_MspInit>:
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004eac:	2214      	movs	r2, #20
 8004eae:	2100      	movs	r1, #0
{
 8004eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004eb4:	b08a      	sub	sp, #40	@ 0x28
 8004eb6:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004eb8:	eb0d 0002 	add.w	r0, sp, r2
 8004ebc:	f021 f892 	bl	8025fe4 <memset>
  if(hqspi->Instance==QUADSPI)
 8004ec0:	6822      	ldr	r2, [r4, #0]
 8004ec2:	4b3a      	ldr	r3, [pc, #232]	@ (8004fac <HAL_QSPI_MspInit+0x100>)
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d16e      	bne.n	8004fa6 <HAL_QSPI_MspInit+0xfa>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

    __HAL_RCC_QSPI_FORCE_RESET();
 8004ec8:	4b39      	ldr	r3, [pc, #228]	@ (8004fb0 <HAL_QSPI_MspInit+0x104>)
    PC9     ------> QUADSPI_BK1_IO0
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004eca:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8004ecc:	2403      	movs	r4, #3
 8004ece:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_FORCE_RESET();
 8004ed0:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ed2:	f04f 0804 	mov.w	r8, #4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004ed6:	a905      	add	r1, sp, #20
 8004ed8:	4836      	ldr	r0, [pc, #216]	@ (8004fb4 <HAL_QSPI_MspInit+0x108>)
    __HAL_RCC_QSPI_FORCE_RESET();
 8004eda:	f042 0202 	orr.w	r2, r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ede:	2700      	movs	r7, #0
    __HAL_RCC_QSPI_FORCE_RESET();
 8004ee0:	619a      	str	r2, [r3, #24]
    __HAL_RCC_QSPI_RELEASE_RESET();
 8004ee2:	699a      	ldr	r2, [r3, #24]
 8004ee4:	f022 0202 	bic.w	r2, r2, #2
 8004ee8:	619a      	str	r2, [r3, #24]
    __HAL_RCC_QSPI_CLK_ENABLE();
 8004eea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004eec:	f042 0202 	orr.w	r2, r2, #2
 8004ef0:	639a      	str	r2, [r3, #56]	@ 0x38
 8004ef2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ef4:	f002 0202 	and.w	r2, r2, #2
 8004ef8:	9200      	str	r2, [sp, #0]
 8004efa:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004efc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004efe:	f042 0210 	orr.w	r2, r2, #16
 8004f02:	631a      	str	r2, [r3, #48]	@ 0x30
 8004f04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f06:	f002 0210 	and.w	r2, r2, #16
 8004f0a:	9201      	str	r2, [sp, #4]
 8004f0c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f10:	f042 0202 	orr.w	r2, r2, #2
 8004f14:	631a      	str	r2, [r3, #48]	@ 0x30
 8004f16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f18:	f002 0202 	and.w	r2, r2, #2
 8004f1c:	9202      	str	r2, [sp, #8]
 8004f1e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f22:	f042 0204 	orr.w	r2, r2, #4
 8004f26:	631a      	str	r2, [r3, #48]	@ 0x30
 8004f28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f2a:	f002 0204 	and.w	r2, r2, #4
 8004f2e:	9203      	str	r2, [sp, #12]
 8004f30:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004f32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f34:	f042 0208 	orr.w	r2, r2, #8
 8004f38:	631a      	str	r2, [r3, #48]	@ 0x30
 8004f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f3c:	f003 0308 	and.w	r3, r3, #8
 8004f40:	9304      	str	r3, [sp, #16]
 8004f42:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f44:	e9cd 8505 	strd	r8, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8004f48:	e9cd 4608 	strd	r4, r6, [sp, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004f4c:	f004 f920 	bl	8009190 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004f50:	2340      	movs	r3, #64	@ 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f52:	a905      	add	r1, sp, #20
 8004f54:	4818      	ldr	r0, [pc, #96]	@ (8004fb8 <HAL_QSPI_MspInit+0x10c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f56:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f5a:	2301      	movs	r3, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f5c:	e9cd 3407 	strd	r3, r4, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8004f60:	230a      	movs	r3, #10
 8004f62:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f64:	f004 f914 	bl	8009190 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8004f68:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f6c:	a905      	add	r1, sp, #20
 8004f6e:	4813      	ldr	r0, [pc, #76]	@ (8004fbc <HAL_QSPI_MspInit+0x110>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8004f70:	9609      	str	r6, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f72:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f76:	e9cd 7407 	strd	r7, r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f7a:	f004 f909 	bl	8009190 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f7e:	a905      	add	r1, sp, #20
 8004f80:	480d      	ldr	r0, [pc, #52]	@ (8004fb8 <HAL_QSPI_MspInit+0x10c>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8004f82:	9609      	str	r6, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f84:	e9cd 8505 	strd	r8, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f88:	e9cd 7407 	strd	r7, r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f8c:	f004 f900 	bl	8009190 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004f90:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004f94:	a905      	add	r1, sp, #20
 8004f96:	480a      	ldr	r0, [pc, #40]	@ (8004fc0 <HAL_QSPI_MspInit+0x114>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8004f98:	9609      	str	r6, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f9a:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f9e:	e9cd 7407 	strd	r7, r4, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004fa2:	f004 f8f5 	bl	8009190 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8004fa6:	b00a      	add	sp, #40	@ 0x28
 8004fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fac:	a0001000 	.word	0xa0001000
 8004fb0:	40023800 	.word	0x40023800
 8004fb4:	40021000 	.word	0x40021000
 8004fb8:	40020400 	.word	0x40020400
 8004fbc:	40020800 	.word	0x40020800
 8004fc0:	40020c00 	.word	0x40020c00

08004fc4 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM1)
 8004fc4:	6802      	ldr	r2, [r0, #0]
{
 8004fc6:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM1)
 8004fc8:	4b07      	ldr	r3, [pc, #28]	@ (8004fe8 <HAL_TIM_PWM_MspInit+0x24>)
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d10a      	bne.n	8004fe4 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004fce:	f503 339c 	add.w	r3, r3, #79872	@ 0x13800
 8004fd2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004fd4:	f042 0201 	orr.w	r2, r2, #1
 8004fd8:	645a      	str	r2, [r3, #68]	@ 0x44
 8004fda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fdc:	f003 0301 	and.w	r3, r3, #1
 8004fe0:	9301      	str	r3, [sp, #4]
 8004fe2:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004fe4:	b002      	add	sp, #8
 8004fe6:	4770      	bx	lr
 8004fe8:	40010000 	.word	0x40010000

08004fec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004fec:	b510      	push	{r4, lr}
 8004fee:	b086      	sub	sp, #24
 8004ff0:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ff2:	2214      	movs	r2, #20
 8004ff4:	2100      	movs	r1, #0
 8004ff6:	a801      	add	r0, sp, #4
 8004ff8:	f020 fff4 	bl	8025fe4 <memset>
  if(htim->Instance==TIM1)
 8004ffc:	6822      	ldr	r2, [r4, #0]
 8004ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8005034 <HAL_TIM_MspPostInit+0x48>)
 8005000:	429a      	cmp	r2, r3
 8005002:	d115      	bne.n	8005030 <HAL_TIM_MspPostInit+0x44>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005004:	f503 339c 	add.w	r3, r3, #79872	@ 0x13800
    GPIO_InitStruct.Pin = GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005008:	a901      	add	r1, sp, #4
 800500a:	480b      	ldr	r0, [pc, #44]	@ (8005038 <HAL_TIM_MspPostInit+0x4c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800500c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800500e:	f042 0201 	orr.w	r2, r2, #1
 8005012:	631a      	str	r2, [r3, #48]	@ 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005014:	f44f 7280 	mov.w	r2, #256	@ 0x100
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800501a:	f003 0301 	and.w	r3, r3, #1
 800501e:	9300      	str	r3, [sp, #0]
 8005020:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005022:	2302      	movs	r3, #2
 8005024:	e9cd 2301 	strd	r2, r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005028:	2301      	movs	r3, #1
 800502a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800502c:	f004 f8b0 	bl	8009190 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005030:	b006      	add	sp, #24
 8005032:	bd10      	pop	{r4, pc}
 8005034:	40010000 	.word	0x40010000
 8005038:	40020000 	.word	0x40020000

0800503c <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800503c:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800503e:	2300      	movs	r3, #0
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8005040:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8005042:	9303      	str	r3, [sp, #12]
  if (FMC_Initialized) {
 8005044:	4b2a      	ldr	r3, [pc, #168]	@ (80050f0 <HAL_SDRAM_MspInit+0xb4>)
 8005046:	681e      	ldr	r6, [r3, #0]
 8005048:	2e00      	cmp	r6, #0
 800504a:	d14f      	bne.n	80050ec <HAL_SDRAM_MspInit+0xb0>
  FMC_Initialized = 1;
 800504c:	2201      	movs	r2, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800504e:	2702      	movs	r7, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005050:	2503      	movs	r5, #3
 8005052:	240c      	movs	r4, #12
  FMC_Initialized = 1;
 8005054:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005056:	a901      	add	r1, sp, #4
  __HAL_RCC_FMC_CLK_ENABLE();
 8005058:	4b26      	ldr	r3, [pc, #152]	@ (80050f4 <HAL_SDRAM_MspInit+0xb8>)
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800505a:	4827      	ldr	r0, [pc, #156]	@ (80050f8 <HAL_SDRAM_MspInit+0xbc>)
  __HAL_RCC_FMC_CLK_ENABLE();
 800505c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800505e:	f042 0201 	orr.w	r2, r2, #1
 8005062:	639a      	str	r2, [r3, #56]	@ 0x38
 8005064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005066:	f003 0301 	and.w	r3, r3, #1
 800506a:	9300      	str	r3, [sp, #0]
 800506c:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800506e:	f64f 7383 	movw	r3, #65411	@ 0xff83
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005072:	e9cd 5404 	strd	r5, r4, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005076:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800507a:	f004 f889 	bl	8009190 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 800507e:	f248 1333 	movw	r3, #33075	@ 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005082:	a901      	add	r1, sp, #4
 8005084:	481d      	ldr	r0, [pc, #116]	@ (80050fc <HAL_SDRAM_MspInit+0xc0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005086:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005088:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800508c:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005090:	f004 f87e 	bl	8009190 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 8005094:	f24c 7303 	movw	r3, #50947	@ 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005098:	a901      	add	r1, sp, #4
 800509a:	4819      	ldr	r0, [pc, #100]	@ (8005100 <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800509c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800509e:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050a2:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80050a6:	f004 f873 	bl	8009190 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_5
 80050aa:	f240 63ff 	movw	r3, #1791	@ 0x6ff
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80050ae:	a901      	add	r1, sp, #4
 80050b0:	4814      	ldr	r0, [pc, #80]	@ (8005104 <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80050b2:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050b4:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050b8:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80050bc:	f004 f868 	bl	8009190 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80050c0:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80050c4:	a901      	add	r1, sp, #4
 80050c6:	4810      	ldr	r0, [pc, #64]	@ (8005108 <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80050c8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050ca:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050ce:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80050d2:	f004 f85d 	bl	8009190 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_5
 80050d6:	f64f 732c 	movw	r3, #65324	@ 0xff2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80050da:	a901      	add	r1, sp, #4
 80050dc:	480b      	ldr	r0, [pc, #44]	@ (800510c <HAL_SDRAM_MspInit+0xd0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80050de:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050e0:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050e4:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80050e8:	f004 f852 	bl	8009190 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80050ec:	b007      	add	sp, #28
 80050ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050f0:	200123d4 	.word	0x200123d4
 80050f4:	40023800 	.word	0x40023800
 80050f8:	40021000 	.word	0x40021000
 80050fc:	40021800 	.word	0x40021800
 8005100:	40020c00 	.word	0x40020c00
 8005104:	40022000 	.word	0x40022000
 8005108:	40021400 	.word	0x40021400
 800510c:	40021c00 	.word	0x40021c00

08005110 <HAL_InitTick>:
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8005110:	4b21      	ldr	r3, [pc, #132]	@ (8005198 <HAL_InitTick+0x88>)
 8005112:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005114:	f042 0210 	orr.w	r2, r2, #16
{
 8005118:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM6_CLK_ENABLE();
 800511a:	641a      	str	r2, [r3, #64]	@ 0x40
{
 800511c:	b088      	sub	sp, #32
  __HAL_RCC_TIM6_CLK_ENABLE();
 800511e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
{
 8005120:	4605      	mov	r5, r0

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005122:	a901      	add	r1, sp, #4
 8005124:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8005126:	f003 0310 	and.w	r3, r3, #16
 800512a:	9302      	str	r3, [sp, #8]
 800512c:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800512e:	f006 fd5f 	bl	800bbf0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8005132:	9b06      	ldr	r3, [sp, #24]
 8005134:	bb4b      	cbnz	r3, 800518a <HAL_InitTick+0x7a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8005136:	f006 fd4b 	bl	800bbd0 <HAL_RCC_GetPCLK1Freq>

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800513a:	4e18      	ldr	r6, [pc, #96]	@ (800519c <HAL_InitTick+0x8c>)
 800513c:	4b18      	ldr	r3, [pc, #96]	@ (80051a0 <HAL_InitTick+0x90>)
 800513e:	6033      	str	r3, [r6, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8005140:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8005144:	60f3      	str	r3, [r6, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005146:	4b17      	ldr	r3, [pc, #92]	@ (80051a4 <HAL_InitTick+0x94>)
 8005148:	fbb0 f3f3 	udiv	r3, r0, r3
 800514c:	3b01      	subs	r3, #1
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim6);
 800514e:	4630      	mov	r0, r6
  htim6.Init.Prescaler = uwPrescalerValue;
 8005150:	6073      	str	r3, [r6, #4]
  htim6.Init.ClockDivision = 0;
 8005152:	2300      	movs	r3, #0
 8005154:	6133      	str	r3, [r6, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005156:	60b3      	str	r3, [r6, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005158:	61b3      	str	r3, [r6, #24]
  status = HAL_TIM_Base_Init(&htim6);
 800515a:	f007 faab 	bl	800c6b4 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 800515e:	4604      	mov	r4, r0
 8005160:	b980      	cbnz	r0, 8005184 <HAL_InitTick+0x74>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8005162:	4630      	mov	r0, r6
 8005164:	f007 f94e 	bl	800c404 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8005168:	4604      	mov	r4, r0
 800516a:	b958      	cbnz	r0, 8005184 <HAL_InitTick+0x74>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800516c:	2036      	movs	r0, #54	@ 0x36
 800516e:	f003 f8bf 	bl	80082f0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005172:	2d0f      	cmp	r5, #15
 8005174:	d80d      	bhi.n	8005192 <HAL_InitTick+0x82>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8005176:	4622      	mov	r2, r4
 8005178:	4629      	mov	r1, r5
 800517a:	2036      	movs	r0, #54	@ 0x36
 800517c:	f003 f886 	bl	800828c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005180:	4b09      	ldr	r3, [pc, #36]	@ (80051a8 <HAL_InitTick+0x98>)
 8005182:	601d      	str	r5, [r3, #0]
    }
  }

 /* Return function status */
  return status;
}
 8005184:	4620      	mov	r0, r4
 8005186:	b008      	add	sp, #32
 8005188:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800518a:	f006 fd21 	bl	800bbd0 <HAL_RCC_GetPCLK1Freq>
 800518e:	0040      	lsls	r0, r0, #1
 8005190:	e7d3      	b.n	800513a <HAL_InitTick+0x2a>
        status = HAL_ERROR;
 8005192:	2401      	movs	r4, #1
 8005194:	e7f6      	b.n	8005184 <HAL_InitTick+0x74>
 8005196:	bf00      	nop
 8005198:	40023800 	.word	0x40023800
 800519c:	200123d8 	.word	0x200123d8
 80051a0:	40001000 	.word	0x40001000
 80051a4:	000f4240 	.word	0x000f4240
 80051a8:	20000068 	.word	0x20000068

080051ac <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80051ac:	4770      	bx	lr

080051ae <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80051ae:	e7fe      	b.n	80051ae <HardFault_Handler>

080051b0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80051b0:	e7fe      	b.n	80051b0 <MemManage_Handler>

080051b2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80051b2:	e7fe      	b.n	80051b2 <BusFault_Handler>

080051b4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80051b4:	e7fe      	b.n	80051b4 <UsageFault_Handler>

080051b6 <DebugMon_Handler>:
}

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 80051b6:	4770      	bx	lr

080051b8 <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80051b8:	4801      	ldr	r0, [pc, #4]	@ (80051c0 <ADC_IRQHandler+0x8>)
 80051ba:	f002 bf16 	b.w	8007fea <HAL_ADC_IRQHandler>
 80051be:	bf00      	nop
 80051c0:	2001238c 	.word	0x2001238c

080051c4 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80051c4:	4801      	ldr	r0, [pc, #4]	@ (80051cc <TIM6_DAC_IRQHandler+0x8>)
 80051c6:	f007 b95f 	b.w	800c488 <HAL_TIM_IRQHandler>
 80051ca:	bf00      	nop
 80051cc:	200123d8 	.word	0x200123d8

080051d0 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_jpeg_in);
 80051d0:	4801      	ldr	r0, [pc, #4]	@ (80051d8 <DMA2_Stream0_IRQHandler+0x8>)
 80051d2:	f003 ba3b 	b.w	800864c <HAL_DMA_IRQHandler>
 80051d6:	bf00      	nop
 80051d8:	20012194 	.word	0x20012194

080051dc <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_jpeg_out);
 80051dc:	4801      	ldr	r0, [pc, #4]	@ (80051e4 <DMA2_Stream1_IRQHandler+0x8>)
 80051de:	f003 ba35 	b.w	800864c <HAL_DMA_IRQHandler>
 80051e2:	bf00      	nop
 80051e4:	20012134 	.word	0x20012134

080051e8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80051e8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LTDC_IRQn 0 */
  int now = HAL_GetTick();
 80051ea:	f002 fdbd 	bl	8007d68 <HAL_GetTick>
  diff = last - now;
 80051ee:	4a05      	ldr	r2, [pc, #20]	@ (8005204 <LTDC_IRQHandler+0x1c>)
 80051f0:	4905      	ldr	r1, [pc, #20]	@ (8005208 <LTDC_IRQHandler+0x20>)
 80051f2:	6813      	ldr	r3, [r2, #0]
 80051f4:	1a1b      	subs	r3, r3, r0
 80051f6:	600b      	str	r3, [r1, #0]
  last = now;
 80051f8:	6010      	str	r0, [r2, #0]
  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80051fa:	4804      	ldr	r0, [pc, #16]	@ (800520c <LTDC_IRQHandler+0x24>)
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80051fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_LTDC_IRQHandler(&hltdc);
 8005200:	f005 be8f 	b.w	800af22 <HAL_LTDC_IRQHandler>
 8005204:	20012428 	.word	0x20012428
 8005208:	20012424 	.word	0x20012424
 800520c:	2001208c 	.word	0x2001208c

08005210 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8005210:	4801      	ldr	r0, [pc, #4]	@ (8005218 <DMA2D_IRQHandler+0x8>)
 8005212:	f003 bb13 	b.w	800883c <HAL_DMA2D_IRQHandler>
 8005216:	bf00      	nop
 8005218:	20012310 	.word	0x20012310

0800521c <I2C4_EV_IRQHandler>:
void I2C4_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 800521c:	4801      	ldr	r0, [pc, #4]	@ (8005224 <I2C4_EV_IRQHandler+0x8>)
 800521e:	f004 bdf9 	b.w	8009e14 <HAL_I2C_EV_IRQHandler>
 8005222:	bf00      	nop
 8005224:	2001224c 	.word	0x2001224c

08005228 <DSI_IRQHandler>:
void DSI_IRQHandler(void)
{
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8005228:	4801      	ldr	r0, [pc, #4]	@ (8005230 <DSI_IRQHandler+0x8>)
 800522a:	f003 bd1a 	b.w	8008c62 <HAL_DSI_IRQHandler>
 800522e:	bf00      	nop
 8005230:	200122f4 	.word	0x200122f4

08005234 <JPEG_IRQHandler>:
void JPEG_IRQHandler(void)
{
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 8005234:	4801      	ldr	r0, [pc, #4]	@ (800523c <JPEG_IRQHandler+0x8>)
 8005236:	f005 bd21 	b.w	800ac7c <HAL_JPEG_IRQHandler>
 800523a:	bf00      	nop
 800523c:	200121f4 	.word	0x200121f4

08005240 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8005240:	2001      	movs	r0, #1
 8005242:	4770      	bx	lr

08005244 <_kill>:

int _kill(int pid, int sig)
{
 8005244:	b508      	push	{r3, lr}
	errno = EINVAL;
 8005246:	f020 ffd7 	bl	80261f8 <__errno>
 800524a:	2316      	movs	r3, #22
 800524c:	6003      	str	r3, [r0, #0]
	return -1;
}
 800524e:	f04f 30ff 	mov.w	r0, #4294967295
 8005252:	bd08      	pop	{r3, pc}

08005254 <_exit>:

void _exit (int status)
{
 8005254:	b508      	push	{r3, lr}
	errno = EINVAL;
 8005256:	f020 ffcf 	bl	80261f8 <__errno>
 800525a:	2316      	movs	r3, #22
 800525c:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 800525e:	e7fe      	b.n	800525e <_exit+0xa>

08005260 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005260:	b570      	push	{r4, r5, r6, lr}
 8005262:	460d      	mov	r5, r1
 8005264:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005266:	460e      	mov	r6, r1
 8005268:	1b73      	subs	r3, r6, r5
 800526a:	429c      	cmp	r4, r3
 800526c:	dc01      	bgt.n	8005272 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 800526e:	4620      	mov	r0, r4
 8005270:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8005272:	f3af 8000 	nop.w
 8005276:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800527a:	e7f5      	b.n	8005268 <_read+0x8>

0800527c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800527c:	b570      	push	{r4, r5, r6, lr}
 800527e:	460d      	mov	r5, r1
 8005280:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005282:	460e      	mov	r6, r1
 8005284:	1b73      	subs	r3, r6, r5
 8005286:	429c      	cmp	r4, r3
 8005288:	dc01      	bgt.n	800528e <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800528a:	4620      	mov	r0, r4
 800528c:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 800528e:	f816 0b01 	ldrb.w	r0, [r6], #1
 8005292:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005296:	e7f5      	b.n	8005284 <_write+0x8>

08005298 <_close>:

int _close(int file)
{
	return -1;
}
 8005298:	f04f 30ff 	mov.w	r0, #4294967295
 800529c:	4770      	bx	lr

0800529e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800529e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
	return 0;
}
 80052a2:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80052a4:	604b      	str	r3, [r1, #4]
}
 80052a6:	4770      	bx	lr

080052a8 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80052a8:	2001      	movs	r0, #1
 80052aa:	4770      	bx	lr

080052ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80052ac:	2000      	movs	r0, #0
 80052ae:	4770      	bx	lr

080052b0 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId SMALL = 2;         // verdana_20_4bpp
    static const touchgfx::FontId TYPOGRAPHY_00 = 0; // verdana_30_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 80052b0:	4770      	bx	lr

080052b2 <_ZN23ApplicationFontProviderD0Ev>:
 80052b2:	b510      	push	{r4, lr}
 80052b4:	4604      	mov	r4, r0
 80052b6:	2104      	movs	r1, #4
 80052b8:	f020 fbc9 	bl	8025a4e <_ZdlPvj>
 80052bc:	4620      	mov	r0, r4
 80052be:	bd10      	pop	{r4, pc}

080052c0 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 80052c0:	b508      	push	{r3, lr}
    switch (typography)
 80052c2:	2903      	cmp	r1, #3
 80052c4:	d80f      	bhi.n	80052e6 <_ZN23ApplicationFontProvider7getFontEt+0x26>
 80052c6:	e8df f001 	tbb	[pc, r1]
 80052ca:	020a      	.short	0x020a
 80052cc:	0a06      	.short	0x0a06
    case Typography::DEFAULT:
        // verdana_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
    case Typography::LARGE:
        // verdana_60_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 80052ce:	f002 f8a3 	bl	8007418 <_ZN17TypedTextDatabase8getFontsEv>
 80052d2:	6840      	ldr	r0, [r0, #4]
        // verdana_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
    default:
        return 0;
    }
}
 80052d4:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 80052d6:	f002 f89f 	bl	8007418 <_ZN17TypedTextDatabase8getFontsEv>
 80052da:	6880      	ldr	r0, [r0, #8]
 80052dc:	e7fa      	b.n	80052d4 <_ZN23ApplicationFontProvider7getFontEt+0x14>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 80052de:	f002 f89b 	bl	8007418 <_ZN17TypedTextDatabase8getFontsEv>
 80052e2:	6800      	ldr	r0, [r0, #0]
 80052e4:	e7f6      	b.n	80052d4 <_ZN23ApplicationFontProvider7getFontEt+0x14>
    switch (typography)
 80052e6:	2000      	movs	r0, #0
 80052e8:	e7f4      	b.n	80052d4 <_ZN23ApplicationFontProvider7getFontEt+0x14>
	...

080052ec <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 80052ec:	4800      	ldr	r0, [pc, #0]	@ (80052f0 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 80052ee:	4770      	bx	lr
 80052f0:	08028b50 	.word	0x08028b50

080052f4 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 80052f4:	2008      	movs	r0, #8
 80052f6:	4770      	bx	lr

080052f8 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 80052f8:	b513      	push	{r0, r1, r4, lr}
 80052fa:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 80052fc:	b151      	cbz	r1, 8005314 <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 80052fe:	6803      	ldr	r3, [r0, #0]
 8005300:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 8005302:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8005304:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8005308:	689c      	ldr	r4, [r3, #8]
 800530a:	f10d 0303 	add.w	r3, sp, #3
 800530e:	47a0      	blx	r4
        return glyph;
    }
 8005310:	b002      	add	sp, #8
 8005312:	bd10      	pop	{r4, pc}
            return 0;
 8005314:	4608      	mov	r0, r1
 8005316:	e7fb      	b.n	8005310 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

08005318 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8005318:	89c0      	ldrh	r0, [r0, #14]
 800531a:	4770      	bx	lr

0800531c <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 800531c:	8a00      	ldrh	r0, [r0, #16]
 800531e:	4770      	bx	lr

08005320 <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 8005320:	88c0      	ldrh	r0, [r0, #6]
 8005322:	4770      	bx	lr

08005324 <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 8005324:	8880      	ldrh	r0, [r0, #4]
 8005326:	4770      	bx	lr

08005328 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8005328:	7a80      	ldrb	r0, [r0, #10]
    }
 800532a:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 800532e:	4770      	bx	lr

08005330 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 8005330:	7a80      	ldrb	r0, [r0, #10]
    }
 8005332:	09c0      	lsrs	r0, r0, #7
 8005334:	4770      	bx	lr

08005336 <_ZN8touchgfx9TypedTextD1Ev>:
    }
 8005336:	4770      	bx	lr

08005338 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8005338:	b510      	push	{r4, lr}
 800533a:	4604      	mov	r4, r0
    }
 800533c:	2108      	movs	r1, #8
 800533e:	f020 fb86 	bl	8025a4e <_ZdlPvj>
 8005342:	4620      	mov	r0, r4
 8005344:	bd10      	pop	{r4, pc}

08005346 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 8005346:	4770      	bx	lr

08005348 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 8005348:	4770      	bx	lr

0800534a <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 800534a:	f500 7398 	add.w	r3, r0, #304	@ 0x130
 800534e:	6808      	ldr	r0, [r1, #0]
 8005350:	6849      	ldr	r1, [r1, #4]
 8005352:	c303      	stmia	r3!, {r0, r1}
    }
 8005354:	4770      	bx	lr

08005356 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 8005356:	4770      	bx	lr

08005358 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 8005358:	4770      	bx	lr

0800535a <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 800535a:	6041      	str	r1, [r0, #4]
    }
 800535c:	4770      	bx	lr

0800535e <_ZNK8touchgfx10Transition13FullSolidRect12getSolidRectEv>:
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 800535e:	2200      	movs	r2, #0
     * A Widget that reports solid and but does not draw anything.
     */
    class FullSolidRect : public Widget
    {
    public:
        virtual Rect getSolidRect() const
 8005360:	b510      	push	{r4, lr}
        {
            return Rect(0, 0, rect.width, rect.height);
 8005362:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8005366:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 800536a:	8002      	strh	r2, [r0, #0]
 800536c:	8042      	strh	r2, [r0, #2]
 800536e:	8084      	strh	r4, [r0, #4]
 8005370:	80c1      	strh	r1, [r0, #6]
        }
 8005372:	bd10      	pop	{r4, pc}

08005374 <_ZNK8touchgfx10Transition13FullSolidRect4drawERKNS_4RectE>:

        virtual void draw(const Rect& area) const
        {
        }
 8005374:	4770      	bx	lr

08005376 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8005376:	4770      	bx	lr

08005378 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8005378:	4b06      	ldr	r3, [pc, #24]	@ (8005394 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 800537a:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 800537e:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8005382:	2300      	movs	r3, #0
 8005384:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// Screen2

void FrontendApplicationBase::gotoScreen2ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen2ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8005388:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 800538c:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140

    virtual void changeToStartScreen()
    {
        gotoScreen2ScreenNoTransition();
    }
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	0800563d 	.word	0x0800563d

08005398 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 8005398:	2301      	movs	r3, #1
 800539a:	7203      	strb	r3, [r0, #8]
    }
 800539c:	4770      	bx	lr

0800539e <_ZN8touchgfx10Transition13FullSolidRectD1Ev>:
    class FullSolidRect : public Widget
 800539e:	4770      	bx	lr

080053a0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EED1Ev>:
{
/**
 * A Transition that slides the new screen over the previous \e from the given direction.
 */
template <Direction templateDirection>
class CoverTransition : public Transition
 80053a0:	4770      	bx	lr

080053a2 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED1Ev>:
 80053a2:	4770      	bx	lr

080053a4 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 80053a4:	4770      	bx	lr

080053a6 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 80053a6:	4770      	bx	lr

080053a8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE8tearDownEv>:

            d = d->getNextSibling();
        }
    }

    virtual void tearDown()
 80053a8:	4601      	mov	r1, r0
    {
        screenContainer->remove(solid);
 80053aa:	6840      	ldr	r0, [r0, #4]
 80053ac:	6803      	ldr	r3, [r0, #0]
 80053ae:	3110      	adds	r1, #16
 80053b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80053b2:	4718      	bx	r3

080053b4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE4initEv>:
    }

    virtual void init()
 80053b4:	b570      	push	{r4, r5, r6, lr}
 80053b6:	4605      	mov	r5, r0
    {
        Transition::init();

        // Move snapshot and its children with delta value for X or Y
        Drawable* d = screenContainer->getFirstChild();
 80053b8:	6840      	ldr	r0, [r0, #4]
 80053ba:	6803      	ldr	r3, [r0, #0]
 80053bc:	69db      	ldr	r3, [r3, #28]
 80053be:	4798      	blx	r3
 80053c0:	4604      	mov	r4, r0
        while (d)
 80053c2:	b93c      	cbnz	r4, 80053d4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE4initEv+0x20>
            }

            d = d->getNextSibling();
        }

        screenContainer->add(solid);
 80053c4:	6868      	ldr	r0, [r5, #4]
 80053c6:	f105 0110 	add.w	r1, r5, #16
 80053ca:	6803      	ldr	r3, [r0, #0]
    }
 80053cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        screenContainer->add(solid);
 80053d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053d2:	4718      	bx	r3
                d->setX(d->getX() - targetValue);
 80053d4:	88a1      	ldrh	r1, [r4, #4]
 80053d6:	4620      	mov	r0, r4
 80053d8:	89ab      	ldrh	r3, [r5, #12]
 80053da:	1ac9      	subs	r1, r1, r3
 80053dc:	6823      	ldr	r3, [r4, #0]
 80053de:	b209      	sxth	r1, r1
 80053e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053e2:	4798      	blx	r3
        return nextSibling;
 80053e4:	69a4      	ldr	r4, [r4, #24]
 80053e6:	e7ec      	b.n	80053c2 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE4initEv+0xe>

080053e8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE8tearDownEv>:
    virtual void tearDown()
 80053e8:	4601      	mov	r1, r0
        screenContainer->remove(solid);
 80053ea:	6840      	ldr	r0, [r0, #4]
 80053ec:	6803      	ldr	r3, [r0, #0]
 80053ee:	3110      	adds	r1, #16
 80053f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80053f2:	4718      	bx	r3

080053f4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv>:
    virtual void init()
 80053f4:	b570      	push	{r4, r5, r6, lr}
 80053f6:	4605      	mov	r5, r0
        Drawable* d = screenContainer->getFirstChild();
 80053f8:	6840      	ldr	r0, [r0, #4]
 80053fa:	6803      	ldr	r3, [r0, #0]
 80053fc:	69db      	ldr	r3, [r3, #28]
 80053fe:	4798      	blx	r3
 8005400:	4604      	mov	r4, r0
        while (d)
 8005402:	b93c      	cbnz	r4, 8005414 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv+0x20>
        screenContainer->add(solid);
 8005404:	6868      	ldr	r0, [r5, #4]
 8005406:	f105 0110 	add.w	r1, r5, #16
 800540a:	6803      	ldr	r3, [r0, #0]
    }
 800540c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        screenContainer->add(solid);
 8005410:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005412:	4718      	bx	r3
                d->setX(d->getX() - targetValue);
 8005414:	88a1      	ldrh	r1, [r4, #4]
 8005416:	4620      	mov	r0, r4
 8005418:	89ab      	ldrh	r3, [r5, #12]
 800541a:	1ac9      	subs	r1, r1, r3
 800541c:	6823      	ldr	r3, [r4, #0]
 800541e:	b209      	sxth	r1, r1
 8005420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005422:	4798      	blx	r3
 8005424:	69a4      	ldr	r4, [r4, #24]
 8005426:	e7ec      	b.n	8005402 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv+0xe>

08005428 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8005428:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 800542a:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 800542c:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 800542e:	68c2      	ldr	r2, [r0, #12]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	1054      	asrs	r4, r2, #1
 8005434:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8005438:	07d2      	lsls	r2, r2, #31
 800543a:	bf48      	it	mi
 800543c:	590a      	ldrmi	r2, [r1, r4]
    }
 800543e:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 8005442:	bf48      	it	mi
 8005444:	58d3      	ldrmi	r3, [r2, r3]
 8005446:	4718      	bx	r3

08005448 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8005448:	4603      	mov	r3, r0
    {
        return (pobject != 0) && (pmemfun != 0);
 800544a:	6840      	ldr	r0, [r0, #4]
 800544c:	b130      	cbz	r0, 800545c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 800544e:	689a      	ldr	r2, [r3, #8]
 8005450:	b91a      	cbnz	r2, 800545a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x12>
 8005452:	68d8      	ldr	r0, [r3, #12]
 8005454:	f000 0001 	and.w	r0, r0, #1
 8005458:	4770      	bx	lr
 800545a:	2001      	movs	r0, #1
    }
 800545c:	4770      	bx	lr

0800545e <_ZN8touchgfx12NoTransitionD0Ev>:
 800545e:	b510      	push	{r4, lr}
 8005460:	4604      	mov	r4, r0
 8005462:	210c      	movs	r1, #12
 8005464:	f020 faf3 	bl	8025a4e <_ZdlPvj>
 8005468:	4620      	mov	r0, r4
 800546a:	bd10      	pop	{r4, pc}

0800546c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800546c:	b510      	push	{r4, lr}
 800546e:	4604      	mov	r4, r0
 8005470:	2110      	movs	r1, #16
 8005472:	f020 faec 	bl	8025a4e <_ZdlPvj>
 8005476:	4620      	mov	r0, r4
 8005478:	bd10      	pop	{r4, pc}

0800547a <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 800547a:	b510      	push	{r4, lr}
 800547c:	4604      	mov	r4, r0
 800547e:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8005482:	f020 fae4 	bl	8025a4e <_ZdlPvj>
 8005486:	4620      	mov	r0, r4
 8005488:	bd10      	pop	{r4, pc}

0800548a <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EED0Ev>:
class CoverTransition : public Transition
 800548a:	b510      	push	{r4, lr}
 800548c:	4604      	mov	r4, r0
 800548e:	2138      	movs	r1, #56	@ 0x38
 8005490:	f020 fadd 	bl	8025a4e <_ZdlPvj>
 8005494:	4620      	mov	r0, r4
 8005496:	bd10      	pop	{r4, pc}

08005498 <_ZN8touchgfx10Transition13FullSolidRectD0Ev>:
 8005498:	b510      	push	{r4, lr}
 800549a:	4604      	mov	r4, r0
 800549c:	2128      	movs	r1, #40	@ 0x28
 800549e:	f020 fad6 	bl	8025a4e <_ZdlPvj>
 80054a2:	4620      	mov	r0, r4
 80054a4:	bd10      	pop	{r4, pc}

080054a6 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED0Ev>:
 80054a6:	b510      	push	{r4, lr}
 80054a8:	4604      	mov	r4, r0
 80054aa:	2138      	movs	r1, #56	@ 0x38
 80054ac:	f020 facf 	bl	8025a4e <_ZdlPvj>
 80054b0:	4620      	mov	r0, r4
 80054b2:	bd10      	pop	{r4, pc}

080054b4 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 80054b4:	b508      	push	{r3, lr}
        Application::getInstance()->invalidate();
 80054b6:	f010 fd8f 	bl	8015fd8 <_ZN8touchgfx11Application11getInstanceEv>
    }
 80054ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Application::getInstance()->invalidate();
 80054be:	f011 ba47 	b.w	8016950 <_ZN8touchgfx11Application10invalidateEv>
	...

080054c4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv>:
    virtual void handleTickEvent()
 80054c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80054c6:	4605      	mov	r5, r0
        animationCounter++;
 80054c8:	7a80      	ldrb	r0, [r0, #10]
 80054ca:	3001      	adds	r0, #1
        if (animationCounter > animationSteps)
 80054cc:	7a6b      	ldrb	r3, [r5, #9]
        animationCounter++;
 80054ce:	b2c0      	uxtb	r0, r0
        if (animationCounter > animationSteps)
 80054d0:	4298      	cmp	r0, r3
        animationCounter++;
 80054d2:	72a8      	strb	r0, [r5, #10]
        if (animationCounter > animationSteps)
 80054d4:	d905      	bls.n	80054e2 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv+0x1e>
            done = true;
 80054d6:	2301      	movs	r3, #1
 80054d8:	722b      	strb	r3, [r5, #8]
            animationCounter = 0;
 80054da:	2300      	movs	r3, #0
 80054dc:	72ab      	strb	r3, [r5, #10]
    }
 80054de:	b003      	add	sp, #12
 80054e0:	bd30      	pop	{r4, r5, pc}
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 80054e2:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
 80054e6:	2100      	movs	r1, #0
        const int16_t oldValue = calculatedValue;
 80054e8:	f9b5 400e 	ldrsh.w	r4, [r5, #14]
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 80054ec:	f012 fb4e 	bl	8017b8c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
        if ((calculatedValue % 2) != 0)
 80054f0:	07c3      	lsls	r3, r0, #31
 80054f2:	d506      	bpl.n	8005502 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv+0x3e>
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
 80054f4:	2800      	cmp	r0, #0
 80054f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80054fa:	bfc8      	it	gt
 80054fc:	2301      	movgt	r3, #1
 80054fe:	4418      	add	r0, r3
 8005500:	b200      	sxth	r0, r0
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 8005502:	7aab      	ldrb	r3, [r5, #10]
        const int16_t relativeValue = calculatedValue - oldValue;
 8005504:	1b04      	subs	r4, r0, r4
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 8005506:	81e8      	strh	r0, [r5, #14]
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 8005508:	2b01      	cmp	r3, #1
        const int16_t relativeValue = calculatedValue - oldValue;
 800550a:	b2a4      	uxth	r4, r4
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 800550c:	d106      	bne.n	800551c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv+0x58>
 800550e:	4b13      	ldr	r3, [pc, #76]	@ (800555c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv+0x98>)
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	b11b      	cbz	r3, 800551c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv+0x58>
            Application::getInstance()->copyInvalidatedAreasFromTFTToClientBuffer();
 8005514:	f010 fd60 	bl	8015fd8 <_ZN8touchgfx11Application11getInstanceEv>
 8005518:	f010 fd64 	bl	8015fe4 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>
        : x(0), y(0), width(0), height(0)
 800551c:	2300      	movs	r3, #0
 800551e:	9300      	str	r3, [sp, #0]
            rect.width = calculatedValue;
 8005520:	89eb      	ldrh	r3, [r5, #14]
 8005522:	f8ad 3004 	strh.w	r3, [sp, #4]
            rect.height = HAL::DISPLAY_HEIGHT;
 8005526:	4b0e      	ldr	r3, [pc, #56]	@ (8005560 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv+0x9c>)
 8005528:	881b      	ldrh	r3, [r3, #0]
 800552a:	f8ad 3006 	strh.w	r3, [sp, #6]
        Application::getInstance()->invalidateArea(rect);
 800552e:	f010 fd53 	bl	8015fd8 <_ZN8touchgfx11Application11getInstanceEv>
 8005532:	ab02      	add	r3, sp, #8
 8005534:	e913 0006 	ldmdb	r3, {r1, r2}
 8005538:	f010 fee4 	bl	8016304 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
        Drawable* d = screenContainer->getFirstChild();
 800553c:	6868      	ldr	r0, [r5, #4]
 800553e:	6803      	ldr	r3, [r0, #0]
 8005540:	69db      	ldr	r3, [r3, #28]
 8005542:	4798      	blx	r3
 8005544:	4605      	mov	r5, r0
        while (d)
 8005546:	2d00      	cmp	r5, #0
 8005548:	d0c9      	beq.n	80054de <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv+0x1a>
                d->setX(d->getX() + relativeValue);
 800554a:	88a9      	ldrh	r1, [r5, #4]
 800554c:	4628      	mov	r0, r5
 800554e:	682b      	ldr	r3, [r5, #0]
 8005550:	4421      	add	r1, r4
 8005552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005554:	b209      	sxth	r1, r1
 8005556:	4798      	blx	r3
 8005558:	69ad      	ldr	r5, [r5, #24]
 800555a:	e7f4      	b.n	8005546 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv+0x82>
 800555c:	20027b92 	.word	0x20027b92
 8005560:	20027b8a 	.word	0x20027b8a

08005564 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 8005564:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005566:	4605      	mov	r5, r0
        animationCounter++;
 8005568:	7a80      	ldrb	r0, [r0, #10]
 800556a:	3001      	adds	r0, #1
        if (animationCounter > animationSteps)
 800556c:	7a6b      	ldrb	r3, [r5, #9]
        animationCounter++;
 800556e:	b2c0      	uxtb	r0, r0
        if (animationCounter > animationSteps)
 8005570:	4298      	cmp	r0, r3
        animationCounter++;
 8005572:	72a8      	strb	r0, [r5, #10]
        if (animationCounter > animationSteps)
 8005574:	d905      	bls.n	8005582 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1e>
            done = true;
 8005576:	2301      	movs	r3, #1
 8005578:	722b      	strb	r3, [r5, #8]
            animationCounter = 0;
 800557a:	2300      	movs	r3, #0
 800557c:	72ab      	strb	r3, [r5, #10]
    }
 800557e:	b003      	add	sp, #12
 8005580:	bd30      	pop	{r4, r5, pc}
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 8005582:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
 8005586:	2100      	movs	r1, #0
        const int16_t oldValue = calculatedValue;
 8005588:	f9b5 400e 	ldrsh.w	r4, [r5, #14]
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 800558c:	f012 fafe 	bl	8017b8c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
        if ((calculatedValue % 2) != 0)
 8005590:	07c3      	lsls	r3, r0, #31
 8005592:	d506      	bpl.n	80055a2 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x3e>
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
 8005594:	2800      	cmp	r0, #0
 8005596:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800559a:	bfc8      	it	gt
 800559c:	2301      	movgt	r3, #1
 800559e:	4418      	add	r0, r3
 80055a0:	b200      	sxth	r0, r0
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 80055a2:	7aab      	ldrb	r3, [r5, #10]
        const int16_t relativeValue = calculatedValue - oldValue;
 80055a4:	1b04      	subs	r4, r0, r4
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 80055a6:	81e8      	strh	r0, [r5, #14]
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 80055a8:	2b01      	cmp	r3, #1
        const int16_t relativeValue = calculatedValue - oldValue;
 80055aa:	b2a4      	uxth	r4, r4
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 80055ac:	d106      	bne.n	80055bc <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x58>
 80055ae:	4b17      	ldr	r3, [pc, #92]	@ (800560c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0xa8>)
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	b11b      	cbz	r3, 80055bc <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x58>
            Application::getInstance()->copyInvalidatedAreasFromTFTToClientBuffer();
 80055b4:	f010 fd10 	bl	8015fd8 <_ZN8touchgfx11Application11getInstanceEv>
 80055b8:	f010 fd14 	bl	8015fe4 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>
 80055bc:	2300      	movs	r3, #0
            rect.x = HAL::DISPLAY_WIDTH + calculatedValue;
 80055be:	4a14      	ldr	r2, [pc, #80]	@ (8005610 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0xac>)
 80055c0:	f8ad 3002 	strh.w	r3, [sp, #2]
 80055c4:	8812      	ldrh	r2, [r2, #0]
 80055c6:	89eb      	ldrh	r3, [r5, #14]
 80055c8:	441a      	add	r2, r3
            rect.width = -calculatedValue;
 80055ca:	425b      	negs	r3, r3
 80055cc:	f8ad 3004 	strh.w	r3, [sp, #4]
            rect.height = HAL::DISPLAY_HEIGHT;
 80055d0:	4b10      	ldr	r3, [pc, #64]	@ (8005614 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb0>)
            rect.x = HAL::DISPLAY_WIDTH + calculatedValue;
 80055d2:	f8ad 2000 	strh.w	r2, [sp]
            rect.height = HAL::DISPLAY_HEIGHT;
 80055d6:	881b      	ldrh	r3, [r3, #0]
 80055d8:	f8ad 3006 	strh.w	r3, [sp, #6]
        Application::getInstance()->invalidateArea(rect);
 80055dc:	f010 fcfc 	bl	8015fd8 <_ZN8touchgfx11Application11getInstanceEv>
 80055e0:	ab02      	add	r3, sp, #8
 80055e2:	e913 0006 	ldmdb	r3, {r1, r2}
 80055e6:	f010 fe8d 	bl	8016304 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
        Drawable* d = screenContainer->getFirstChild();
 80055ea:	6868      	ldr	r0, [r5, #4]
 80055ec:	6803      	ldr	r3, [r0, #0]
 80055ee:	69db      	ldr	r3, [r3, #28]
 80055f0:	4798      	blx	r3
 80055f2:	4605      	mov	r5, r0
        while (d)
 80055f4:	2d00      	cmp	r5, #0
 80055f6:	d0c2      	beq.n	800557e <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a>
                d->setX(d->getX() + relativeValue);
 80055f8:	88a9      	ldrh	r1, [r5, #4]
 80055fa:	4628      	mov	r0, r5
 80055fc:	682b      	ldr	r3, [r5, #0]
 80055fe:	4421      	add	r1, r4
 8005600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005602:	b209      	sxth	r1, r1
 8005604:	4798      	blx	r3
 8005606:	69ad      	ldr	r5, [r5, #24]
 8005608:	e7f4      	b.n	80055f4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x90>
 800560a:	bf00      	nop
 800560c:	20027b92 	.word	0x20027b92
 8005610:	20027b88 	.word	0x20027b88
 8005614:	20027b8a 	.word	0x20027b8a

08005618 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8005618:	b510      	push	{r4, lr}
 800561a:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800561c:	f8d0 0140 	ldr.w	r0, [r0, #320]	@ 0x140
 8005620:	b158      	cbz	r0, 800563a <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8005622:	6803      	ldr	r3, [r0, #0]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	4798      	blx	r3
 8005628:	b138      	cbz	r0, 800563a <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 800562a:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
 800562e:	6803      	ldr	r3, [r0, #0]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8005634:	2300      	movs	r3, #0
 8005636:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
    }
 800563a:	bd10      	pop	{r4, pc}

0800563c <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoScreen2ScreenNoTransitionImpl()
{
 800563c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen2View, Screen2Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8005640:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 8005644:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8005646:	68b0      	ldr	r0, [r6, #8]
 8005648:	6803      	ldr	r3, [r0, #0]
 800564a:	6a1b      	ldr	r3, [r3, #32]
 800564c:	4798      	blx	r3
 800564e:	f5b0 7f19 	cmp.w	r0, #612	@ 0x264
 8005652:	d205      	bcs.n	8005660 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x24>
 8005654:	4b44      	ldr	r3, [pc, #272]	@ (8005768 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x12c>)
 8005656:	21a3      	movs	r1, #163	@ 0xa3
 8005658:	4a44      	ldr	r2, [pc, #272]	@ (800576c <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x130>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800565a:	4845      	ldr	r0, [pc, #276]	@ (8005770 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x134>)
 800565c:	f020 fa26 	bl	8025aac <__assert_func>
 8005660:	6870      	ldr	r0, [r6, #4]
 8005662:	6803      	ldr	r3, [r0, #0]
 8005664:	6a1b      	ldr	r3, [r3, #32]
 8005666:	4798      	blx	r3
 8005668:	280f      	cmp	r0, #15
 800566a:	d803      	bhi.n	8005674 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x38>
 800566c:	4b41      	ldr	r3, [pc, #260]	@ (8005774 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x138>)
 800566e:	21a4      	movs	r1, #164	@ 0xa4
 8005670:	4a3e      	ldr	r2, [pc, #248]	@ (800576c <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x130>)
 8005672:	e7f2      	b.n	800565a <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8005674:	68f0      	ldr	r0, [r6, #12]
 8005676:	6803      	ldr	r3, [r0, #0]
 8005678:	6a1b      	ldr	r3, [r3, #32]
 800567a:	4798      	blx	r3
 800567c:	280b      	cmp	r0, #11
 800567e:	d803      	bhi.n	8005688 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x4c>
 8005680:	4b3d      	ldr	r3, [pc, #244]	@ (8005778 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x13c>)
 8005682:	21a5      	movs	r1, #165	@ 0xa5
 8005684:	4a39      	ldr	r2, [pc, #228]	@ (800576c <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x130>)
 8005686:	e7e8      	b.n	800565a <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x1e>
    if (*currentTrans)
 8005688:	f8df 90f4 	ldr.w	r9, [pc, #244]	@ 8005780 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x144>
    Application::getInstance()->clearAllTimerWidgets();
 800568c:	f010 fca4 	bl	8015fd8 <_ZN8touchgfx11Application11getInstanceEv>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 8005690:	3004      	adds	r0, #4
 8005692:	f010 fd07 	bl	80160a4 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 8005696:	f8d9 0000 	ldr.w	r0, [r9]
 800569a:	b110      	cbz	r0, 80056a2 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x66>
        (*currentTrans)->tearDown();
 800569c:	6803      	ldr	r3, [r0, #0]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	4798      	blx	r3
    if (*currentTrans)
 80056a2:	f8d9 0000 	ldr.w	r0, [r9]
 80056a6:	b110      	cbz	r0, 80056ae <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x72>
        (*currentTrans)->~Transition();
 80056a8:	6803      	ldr	r3, [r0, #0]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4798      	blx	r3
    if (*currentScreen)
 80056ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005784 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x148>
 80056b2:	f8d8 0000 	ldr.w	r0, [r8]
 80056b6:	b110      	cbz	r0, 80056be <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x82>
        (*currentScreen)->tearDownScreen();
 80056b8:	6803      	ldr	r3, [r0, #0]
 80056ba:	695b      	ldr	r3, [r3, #20]
 80056bc:	4798      	blx	r3
    if (*currentPresenter)
 80056be:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80056c2:	b110      	cbz	r0, 80056ca <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x8e>
        (*currentPresenter)->deactivate();
 80056c4:	6803      	ldr	r3, [r0, #0]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	4798      	blx	r3
    if (*currentScreen)
 80056ca:	f8d8 0000 	ldr.w	r0, [r8]
 80056ce:	b110      	cbz	r0, 80056d6 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x9a>
        (*currentScreen)->~Screen();
 80056d0:	6803      	ldr	r3, [r0, #0]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4798      	blx	r3
    if (*currentPresenter)
 80056d6:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80056da:	b110      	cbz	r0, 80056e2 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0xa6>
        (*currentPresenter)->~Presenter();
 80056dc:	6803      	ldr	r3, [r0, #0]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80056e2:	68f0      	ldr	r0, [r6, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 80056e4:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
 80056e6:	f04f 0b00 	mov.w	fp, #0
 80056ea:	6803      	ldr	r3, [r0, #0]
 80056ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ee:	4798      	blx	r3
 80056f0:	4b22      	ldr	r3, [pc, #136]	@ (800577c <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x140>)
 80056f2:	4604      	mov	r4, r0
 80056f4:	f8c0 b004 	str.w	fp, [r0, #4]
 80056f8:	f880 b008 	strb.w	fp, [r0, #8]
 80056fc:	4659      	mov	r1, fp
 80056fe:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8005700:	68b0      	ldr	r0, [r6, #8]
 8005702:	6803      	ldr	r3, [r0, #0]
 8005704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005706:	4798      	blx	r3
 8005708:	4605      	mov	r5, r0
 800570a:	f001 ffc7 	bl	800769c <_ZN11Screen2ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800570e:	6870      	ldr	r0, [r6, #4]
 8005710:	4659      	mov	r1, fp
 8005712:	6803      	ldr	r3, [r0, #0]
 8005714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005716:	4798      	blx	r3
 8005718:	4606      	mov	r6, r0
 800571a:	4629      	mov	r1, r5
 800571c:	f001 ff9c 	bl	8007658 <_ZN16Screen2PresenterC1ER11Screen2View>
    *currentTrans = newTransition;
    *currentPresenter = newPresenter;
    *currentScreen = newScreen;
    model->bind(newPresenter);
 8005720:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 8005722:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
    newScreen->setupScreen();
 8005726:	4628      	mov	r0, r5
    *currentTrans = newTransition;
 8005728:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 800572c:	f8c8 5000 	str.w	r5, [r8]
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 8005730:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8005734:	682b      	ldr	r3, [r5, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 8005736:	f8c6 a008 	str.w	sl, [r6, #8]
 800573a:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 800573c:	63ee      	str	r6, [r5, #60]	@ 0x3c
 800573e:	4798      	blx	r3
    newPresenter->activate();
 8005740:	6833      	ldr	r3, [r6, #0]
 8005742:	4630      	mov	r0, r6
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8005748:	4621      	mov	r1, r4
 800574a:	4628      	mov	r0, r5
 800574c:	f012 fa18 	bl	8017b80 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8005750:	6823      	ldr	r3, [r4, #0]
 8005752:	4620      	mov	r0, r4
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	4798      	blx	r3
    newTransition->invalidate();
 8005758:	6823      	ldr	r3, [r4, #0]
 800575a:	4620      	mov	r0, r4
 800575c:	695b      	ldr	r3, [r3, #20]
}
 800575e:	b001      	add	sp, #4
 8005760:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005764:	4718      	bx	r3
 8005766:	bf00      	nop
 8005768:	08028c00 	.word	0x08028c00
 800576c:	08028c8e 	.word	0x08028c8e
 8005770:	08028d60 	.word	0x08028d60
 8005774:	08028da7 	.word	0x08028da7
 8005778:	08028e4a 	.word	0x08028e4a
 800577c:	0802918c 	.word	0x0802918c
 8005780:	20027bdc 	.word	0x20027bdc
 8005784:	20027bd8 	.word	0x20027bd8

08005788 <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8005788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800578c:	461d      	mov	r5, r3
        setX(x);
 800578e:	6803      	ldr	r3, [r0, #0]
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8005790:	4604      	mov	r4, r0
 8005792:	4616      	mov	r6, r2
        setX(x);
 8005794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8005796:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
        setX(x);
 800579a:	4798      	blx	r3
        setY(y);
 800579c:	6823      	ldr	r3, [r4, #0]
 800579e:	4631      	mov	r1, r6
 80057a0:	4620      	mov	r0, r4
 80057a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057a4:	4798      	blx	r3
        setWidth(width);
 80057a6:	6823      	ldr	r3, [r4, #0]
 80057a8:	4629      	mov	r1, r5
 80057aa:	4620      	mov	r0, r4
 80057ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ae:	4798      	blx	r3
        setHeight(height);
 80057b0:	6823      	ldr	r3, [r4, #0]
 80057b2:	4639      	mov	r1, r7
 80057b4:	4620      	mov	r0, r4
 80057b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    }
 80057b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        setHeight(height);
 80057bc:	4718      	bx	r3
	...

080057c0 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv>:
{
 80057c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::CoverTransition<WEST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80057c4:	e9d0 ba55 	ldrd	fp, sl, [r0, #340]	@ 0x154
{
 80057c8:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80057ca:	f8db 0008 	ldr.w	r0, [fp, #8]
 80057ce:	6803      	ldr	r3, [r0, #0]
 80057d0:	6a1b      	ldr	r3, [r3, #32]
 80057d2:	4798      	blx	r3
 80057d4:	f243 53f3 	movw	r3, #13811	@ 0x35f3
 80057d8:	4298      	cmp	r0, r3
 80057da:	d805      	bhi.n	80057e8 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x28>
 80057dc:	4b54      	ldr	r3, [pc, #336]	@ (8005930 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x170>)
 80057de:	21a3      	movs	r1, #163	@ 0xa3
 80057e0:	4a54      	ldr	r2, [pc, #336]	@ (8005934 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x174>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80057e2:	4855      	ldr	r0, [pc, #340]	@ (8005938 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x178>)
 80057e4:	f020 f962 	bl	8025aac <__assert_func>
 80057e8:	f8db 0004 	ldr.w	r0, [fp, #4]
 80057ec:	6803      	ldr	r3, [r0, #0]
 80057ee:	6a1b      	ldr	r3, [r3, #32]
 80057f0:	4798      	blx	r3
 80057f2:	280f      	cmp	r0, #15
 80057f4:	d803      	bhi.n	80057fe <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x3e>
 80057f6:	4b51      	ldr	r3, [pc, #324]	@ (800593c <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x17c>)
 80057f8:	21a4      	movs	r1, #164	@ 0xa4
 80057fa:	4a4e      	ldr	r2, [pc, #312]	@ (8005934 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x174>)
 80057fc:	e7f1      	b.n	80057e2 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x22>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80057fe:	f8db 000c 	ldr.w	r0, [fp, #12]
 8005802:	6803      	ldr	r3, [r0, #0]
 8005804:	6a1b      	ldr	r3, [r3, #32]
 8005806:	4798      	blx	r3
 8005808:	2837      	cmp	r0, #55	@ 0x37
 800580a:	d803      	bhi.n	8005814 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x54>
 800580c:	4b4c      	ldr	r3, [pc, #304]	@ (8005940 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x180>)
 800580e:	21a5      	movs	r1, #165	@ 0xa5
 8005810:	4a48      	ldr	r2, [pc, #288]	@ (8005934 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x174>)
 8005812:	e7e6      	b.n	80057e2 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x22>
    if (*currentTrans)
 8005814:	f8df 913c 	ldr.w	r9, [pc, #316]	@ 8005954 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x194>
    Application::getInstance()->clearAllTimerWidgets();
 8005818:	f010 fbde 	bl	8015fd8 <_ZN8touchgfx11Application11getInstanceEv>
 800581c:	3004      	adds	r0, #4
 800581e:	f010 fc41 	bl	80160a4 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 8005822:	f8d9 0000 	ldr.w	r0, [r9]
 8005826:	b110      	cbz	r0, 800582e <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x6e>
        (*currentTrans)->tearDown();
 8005828:	6803      	ldr	r3, [r0, #0]
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	4798      	blx	r3
    if (*currentTrans)
 800582e:	f8d9 0000 	ldr.w	r0, [r9]
 8005832:	b110      	cbz	r0, 800583a <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x7a>
        (*currentTrans)->~Transition();
 8005834:	6803      	ldr	r3, [r0, #0]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4798      	blx	r3
    if (*currentScreen)
 800583a:	f8df 811c 	ldr.w	r8, [pc, #284]	@ 8005958 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x198>
 800583e:	f8d8 0000 	ldr.w	r0, [r8]
 8005842:	b110      	cbz	r0, 800584a <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x8a>
        (*currentScreen)->tearDownScreen();
 8005844:	6803      	ldr	r3, [r0, #0]
 8005846:	695b      	ldr	r3, [r3, #20]
 8005848:	4798      	blx	r3
    if (*currentPresenter)
 800584a:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 800584e:	b110      	cbz	r0, 8005856 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x96>
        (*currentPresenter)->deactivate();
 8005850:	6803      	ldr	r3, [r0, #0]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	4798      	blx	r3
    if (*currentScreen)
 8005856:	f8d8 0000 	ldr.w	r0, [r8]
 800585a:	b110      	cbz	r0, 8005862 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0xa2>
        (*currentScreen)->~Screen();
 800585c:	6803      	ldr	r3, [r0, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4798      	blx	r3
    if (*currentPresenter)
 8005862:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8005866:	b110      	cbz	r0, 800586e <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0xae>
        (*currentPresenter)->~Presenter();
 8005868:	6803      	ldr	r3, [r0, #0]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800586e:	f8db 000c 	ldr.w	r0, [fp, #12]
 8005872:	2100      	movs	r1, #0
 8005874:	2500      	movs	r5, #0
 8005876:	6803      	ldr	r3, [r0, #0]
 8005878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800587a:	4798      	blx	r3
          solid()
 800587c:	4b31      	ldr	r3, [pc, #196]	@ (8005944 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x184>)
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 800587e:	4a32      	ldr	r2, [pc, #200]	@ (8005948 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x188>)
 8005880:	4604      	mov	r4, r0
          solid()
 8005882:	6003      	str	r3, [r0, #0]
 8005884:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8005888:	f9b2 2000 	ldrsh.w	r2, [r2]
 800588c:	4629      	mov	r1, r5
 800588e:	8103      	strh	r3, [r0, #8]
          solid()
 8005890:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005894:	6045      	str	r5, [r0, #4]
 8005896:	6343      	str	r3, [r0, #52]	@ 0x34
    class FullSolidRect : public Widget
 8005898:	4b2c      	ldr	r3, [pc, #176]	@ (800594c <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x18c>)
          animationCounter(0),
 800589a:	7285      	strb	r5, [r0, #10]
 800589c:	6103      	str	r3, [r0, #16]
            targetValue = HAL::DISPLAY_WIDTH;
 800589e:	4b2c      	ldr	r3, [pc, #176]	@ (8005950 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x190>)
          calculatedValue(0),
 80058a0:	81c5      	strh	r5, [r0, #14]
            targetValue = HAL::DISPLAY_WIDTH;
 80058a2:	f9b3 3000 	ldrsh.w	r3, [r3]
          solid()
 80058a6:	e9c0 5505 	strd	r5, r5, [r0, #20]
            targetValue = HAL::DISPLAY_WIDTH;
 80058aa:	8183      	strh	r3, [r0, #12]
          solid()
 80058ac:	e9c0 5507 	strd	r5, r5, [r0, #28]
 80058b0:	e9c0 5509 	strd	r5, r5, [r0, #36]	@ 0x24
 80058b4:	e9c0 550b 	strd	r5, r5, [r0, #44]	@ 0x2c
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 80058b8:	9200      	str	r2, [sp, #0]
 80058ba:	3010      	adds	r0, #16
 80058bc:	462a      	mov	r2, r5
 80058be:	f7ff ff63 	bl	8005788 <_ZN8touchgfx8Drawable11setPositionEssss>
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 80058c2:	f8db 0008 	ldr.w	r0, [fp, #8]
 80058c6:	4629      	mov	r1, r5
 80058c8:	6803      	ldr	r3, [r0, #0]
 80058ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058cc:	4798      	blx	r3
 80058ce:	4606      	mov	r6, r0
 80058d0:	f001 fe66 	bl	80075a0 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 80058d4:	f8db 0004 	ldr.w	r0, [fp, #4]
 80058d8:	4629      	mov	r1, r5
 80058da:	6803      	ldr	r3, [r0, #0]
 80058dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058de:	4798      	blx	r3
 80058e0:	4605      	mov	r5, r0
 80058e2:	4631      	mov	r1, r6
 80058e4:	f001 fe3a 	bl	800755c <_ZN16Screen1PresenterC1ER11Screen1View>
    model->bind(newPresenter);
 80058e8:	1d2b      	adds	r3, r5, #4
    *currentPresenter = newPresenter;
 80058ea:	f8c7 513c 	str.w	r5, [r7, #316]	@ 0x13c
    newScreen->setupScreen();
 80058ee:	4630      	mov	r0, r6
    *currentTrans = newTransition;
 80058f0:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 80058f4:	f8c8 6000 	str.w	r6, [r8]
 80058f8:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 80058fc:	6833      	ldr	r3, [r6, #0]
 80058fe:	f8c5 a008 	str.w	sl, [r5, #8]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	63f5      	str	r5, [r6, #60]	@ 0x3c
 8005906:	4798      	blx	r3
    newPresenter->activate();
 8005908:	682b      	ldr	r3, [r5, #0]
 800590a:	4628      	mov	r0, r5
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8005910:	4621      	mov	r1, r4
 8005912:	4630      	mov	r0, r6
 8005914:	f012 f934 	bl	8017b80 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8005918:	6823      	ldr	r3, [r4, #0]
 800591a:	4620      	mov	r0, r4
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	4798      	blx	r3
    newTransition->invalidate();
 8005920:	6823      	ldr	r3, [r4, #0]
 8005922:	4620      	mov	r0, r4
 8005924:	695b      	ldr	r3, [r3, #20]
}
 8005926:	b003      	add	sp, #12
 8005928:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800592c:	4718      	bx	r3
 800592e:	bf00      	nop
 8005930:	08028c00 	.word	0x08028c00
 8005934:	08028eed 	.word	0x08028eed
 8005938:	08028d60 	.word	0x08028d60
 800593c:	08028da7 	.word	0x08028da7
 8005940:	08028e4a 	.word	0x08028e4a
 8005944:	080291d4 	.word	0x080291d4
 8005948:	20027b8a 	.word	0x20027b8a
 800594c:	080290c0 	.word	0x080290c0
 8005950:	20027b88 	.word	0x20027b88
 8005954:	20027bdc 	.word	0x20027bdc
 8005958:	20027bd8 	.word	0x20027bd8

0800595c <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv>:
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen2ScreenCoverTransitionEastImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoScreen2ScreenCoverTransitionEastImpl()
{
 800595c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen2View, Screen2Presenter, touchgfx::CoverTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8005960:	e9d0 ba55 	ldrd	fp, sl, [r0, #340]	@ 0x154
{
 8005964:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8005966:	f8db 0008 	ldr.w	r0, [fp, #8]
 800596a:	6803      	ldr	r3, [r0, #0]
 800596c:	6a1b      	ldr	r3, [r3, #32]
 800596e:	4798      	blx	r3
 8005970:	f5b0 7f19 	cmp.w	r0, #612	@ 0x264
 8005974:	d205      	bcs.n	8005982 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x26>
 8005976:	4b55      	ldr	r3, [pc, #340]	@ (8005acc <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x170>)
 8005978:	21a3      	movs	r1, #163	@ 0xa3
 800597a:	4a55      	ldr	r2, [pc, #340]	@ (8005ad0 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x174>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800597c:	4855      	ldr	r0, [pc, #340]	@ (8005ad4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x178>)
 800597e:	f020 f895 	bl	8025aac <__assert_func>
 8005982:	f8db 0004 	ldr.w	r0, [fp, #4]
 8005986:	6803      	ldr	r3, [r0, #0]
 8005988:	6a1b      	ldr	r3, [r3, #32]
 800598a:	4798      	blx	r3
 800598c:	280f      	cmp	r0, #15
 800598e:	d803      	bhi.n	8005998 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x3c>
 8005990:	4b51      	ldr	r3, [pc, #324]	@ (8005ad8 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x17c>)
 8005992:	21a4      	movs	r1, #164	@ 0xa4
 8005994:	4a4e      	ldr	r2, [pc, #312]	@ (8005ad0 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x174>)
 8005996:	e7f1      	b.n	800597c <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x20>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8005998:	f8db 000c 	ldr.w	r0, [fp, #12]
 800599c:	6803      	ldr	r3, [r0, #0]
 800599e:	6a1b      	ldr	r3, [r3, #32]
 80059a0:	4798      	blx	r3
 80059a2:	2837      	cmp	r0, #55	@ 0x37
 80059a4:	d803      	bhi.n	80059ae <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x52>
 80059a6:	4b4d      	ldr	r3, [pc, #308]	@ (8005adc <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x180>)
 80059a8:	21a5      	movs	r1, #165	@ 0xa5
 80059aa:	4a49      	ldr	r2, [pc, #292]	@ (8005ad0 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x174>)
 80059ac:	e7e6      	b.n	800597c <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x20>
    if (*currentTrans)
 80059ae:	f8df 9140 	ldr.w	r9, [pc, #320]	@ 8005af0 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x194>
    Application::getInstance()->clearAllTimerWidgets();
 80059b2:	f010 fb11 	bl	8015fd8 <_ZN8touchgfx11Application11getInstanceEv>
 80059b6:	3004      	adds	r0, #4
 80059b8:	f010 fb74 	bl	80160a4 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 80059bc:	f8d9 0000 	ldr.w	r0, [r9]
 80059c0:	b110      	cbz	r0, 80059c8 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x6c>
        (*currentTrans)->tearDown();
 80059c2:	6803      	ldr	r3, [r0, #0]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	4798      	blx	r3
    if (*currentTrans)
 80059c8:	f8d9 0000 	ldr.w	r0, [r9]
 80059cc:	b110      	cbz	r0, 80059d4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x78>
        (*currentTrans)->~Transition();
 80059ce:	6803      	ldr	r3, [r0, #0]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4798      	blx	r3
    if (*currentScreen)
 80059d4:	f8df 811c 	ldr.w	r8, [pc, #284]	@ 8005af4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x198>
 80059d8:	f8d8 0000 	ldr.w	r0, [r8]
 80059dc:	b110      	cbz	r0, 80059e4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x88>
        (*currentScreen)->tearDownScreen();
 80059de:	6803      	ldr	r3, [r0, #0]
 80059e0:	695b      	ldr	r3, [r3, #20]
 80059e2:	4798      	blx	r3
    if (*currentPresenter)
 80059e4:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80059e8:	b110      	cbz	r0, 80059f0 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x94>
        (*currentPresenter)->deactivate();
 80059ea:	6803      	ldr	r3, [r0, #0]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	4798      	blx	r3
    if (*currentScreen)
 80059f0:	f8d8 0000 	ldr.w	r0, [r8]
 80059f4:	b110      	cbz	r0, 80059fc <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0xa0>
        (*currentScreen)->~Screen();
 80059f6:	6803      	ldr	r3, [r0, #0]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4798      	blx	r3
    if (*currentPresenter)
 80059fc:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8005a00:	b110      	cbz	r0, 8005a08 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0xac>
        (*currentPresenter)->~Presenter();
 8005a02:	6803      	ldr	r3, [r0, #0]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8005a08:	f8db 000c 	ldr.w	r0, [fp, #12]
 8005a0c:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
 8005a0e:	2500      	movs	r5, #0
 8005a10:	6803      	ldr	r3, [r0, #0]
 8005a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a14:	4798      	blx	r3
          solid()
 8005a16:	4b32      	ldr	r3, [pc, #200]	@ (8005ae0 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x184>)
 8005a18:	4604      	mov	r4, r0
 8005a1a:	6045      	str	r5, [r0, #4]
 8005a1c:	6003      	str	r3, [r0, #0]
 8005a1e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
          animationCounter(0),
 8005a22:	7285      	strb	r5, [r0, #10]
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8005a24:	4629      	mov	r1, r5
 8005a26:	8103      	strh	r3, [r0, #8]
          solid()
 8005a28:	f44f 7380 	mov.w	r3, #256	@ 0x100
          calculatedValue(0),
 8005a2c:	81c5      	strh	r5, [r0, #14]
          solid()
 8005a2e:	6343      	str	r3, [r0, #52]	@ 0x34
    class FullSolidRect : public Widget
 8005a30:	4b2c      	ldr	r3, [pc, #176]	@ (8005ae4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x188>)
 8005a32:	6103      	str	r3, [r0, #16]
            targetValue = -HAL::DISPLAY_WIDTH;
 8005a34:	4b2c      	ldr	r3, [pc, #176]	@ (8005ae8 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x18c>)
 8005a36:	881b      	ldrh	r3, [r3, #0]
 8005a38:	425a      	negs	r2, r3
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8005a3a:	b21b      	sxth	r3, r3
            targetValue = -HAL::DISPLAY_WIDTH;
 8005a3c:	8182      	strh	r2, [r0, #12]
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8005a3e:	4a2b      	ldr	r2, [pc, #172]	@ (8005aec <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x190>)
 8005a40:	f9b2 2000 	ldrsh.w	r2, [r2]
          solid()
 8005a44:	e9c0 5505 	strd	r5, r5, [r0, #20]
 8005a48:	e9c0 5507 	strd	r5, r5, [r0, #28]
 8005a4c:	e9c0 5509 	strd	r5, r5, [r0, #36]	@ 0x24
 8005a50:	e9c0 550b 	strd	r5, r5, [r0, #44]	@ 0x2c
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8005a54:	9200      	str	r2, [sp, #0]
 8005a56:	3010      	adds	r0, #16
 8005a58:	462a      	mov	r2, r5
 8005a5a:	f7ff fe95 	bl	8005788 <_ZN8touchgfx8Drawable11setPositionEssss>
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8005a5e:	f8db 0008 	ldr.w	r0, [fp, #8]
 8005a62:	4629      	mov	r1, r5
 8005a64:	6803      	ldr	r3, [r0, #0]
 8005a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a68:	4798      	blx	r3
 8005a6a:	4606      	mov	r6, r0
 8005a6c:	f001 fe16 	bl	800769c <_ZN11Screen2ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8005a70:	f8db 0004 	ldr.w	r0, [fp, #4]
 8005a74:	4629      	mov	r1, r5
 8005a76:	6803      	ldr	r3, [r0, #0]
 8005a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a7a:	4798      	blx	r3
 8005a7c:	4605      	mov	r5, r0
 8005a7e:	4631      	mov	r1, r6
 8005a80:	f001 fdea 	bl	8007658 <_ZN16Screen2PresenterC1ER11Screen2View>
    model->bind(newPresenter);
 8005a84:	1d2b      	adds	r3, r5, #4
    *currentPresenter = newPresenter;
 8005a86:	f8c7 513c 	str.w	r5, [r7, #316]	@ 0x13c
    newScreen->setupScreen();
 8005a8a:	4630      	mov	r0, r6
    *currentTrans = newTransition;
 8005a8c:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 8005a90:	f8c8 6000 	str.w	r6, [r8]
 8005a94:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8005a98:	6833      	ldr	r3, [r6, #0]
 8005a9a:	f8c5 a008 	str.w	sl, [r5, #8]
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	63f5      	str	r5, [r6, #60]	@ 0x3c
 8005aa2:	4798      	blx	r3
    newPresenter->activate();
 8005aa4:	682b      	ldr	r3, [r5, #0]
 8005aa6:	4628      	mov	r0, r5
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8005aac:	4621      	mov	r1, r4
 8005aae:	4630      	mov	r0, r6
 8005ab0:	f012 f866 	bl	8017b80 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8005ab4:	6823      	ldr	r3, [r4, #0]
 8005ab6:	4620      	mov	r0, r4
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	4798      	blx	r3
    newTransition->invalidate();
 8005abc:	6823      	ldr	r3, [r4, #0]
 8005abe:	4620      	mov	r0, r4
 8005ac0:	695b      	ldr	r3, [r3, #20]
}
 8005ac2:	b003      	add	sp, #12
 8005ac4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ac8:	4718      	bx	r3
 8005aca:	bf00      	nop
 8005acc:	08028c00 	.word	0x08028c00
 8005ad0:	08028fd2 	.word	0x08028fd2
 8005ad4:	08028d60 	.word	0x08028d60
 8005ad8:	08028da7 	.word	0x08028da7
 8005adc:	08028e4a 	.word	0x08028e4a
 8005ae0:	080291b0 	.word	0x080291b0
 8005ae4:	080290c0 	.word	0x080290c0
 8005ae8:	20027b88 	.word	0x20027b88
 8005aec:	20027b8a 	.word	0x20027b8a
 8005af0:	20027bdc 	.word	0x20027bdc
 8005af4:	20027bd8 	.word	0x20027bd8

08005af8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8005af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005afa:	4604      	mov	r4, r0
 8005afc:	4617      	mov	r7, r2
 8005afe:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 8005b00:	f010 fba2 	bl	8016248 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 8005b04:	4b10      	ldr	r3, [pc, #64]	@ (8005b48 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x50>)
        : currentPresenter(0),
 8005b06:	2500      	movs	r5, #0
        instance = this;
 8005b08:	601c      	str	r4, [r3, #0]
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8005b0a:	4629      	mov	r1, r5
      model(m)
 8005b0c:	4b0f      	ldr	r3, [pc, #60]	@ (8005b4c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
 8005b0e:	e9c4 7655 	strd	r7, r6, [r4, #340]	@ 0x154
        return instance;
 8005b12:	4e0f      	ldr	r6, [pc, #60]	@ (8005b50 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
 8005b14:	6023      	str	r3, [r4, #0]
 8005b16:	6830      	ldr	r0, [r6, #0]
        : pobject(0), pmemfun(0)
 8005b18:	4b0e      	ldr	r3, [pc, #56]	@ (8005b54 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 8005b1a:	e9c4 5553 	strd	r5, r5, [r4, #332]	@ 0x14c
 8005b1e:	e9c4 3551 	strd	r3, r5, [r4, #324]	@ 0x144
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8005b22:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 8005b24:	e9c4 554f 	strd	r5, r5, [r4, #316]	@ 0x13c
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 8005b2c:	4628      	mov	r0, r5
 8005b2e:	f001 fc27 	bl	8007380 <_ZN8touchgfx5Texts11setLanguageEt>
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8005b32:	6833      	ldr	r3, [r6, #0]
 8005b34:	f893 2076 	ldrb.w	r2, [r3, #118]	@ 0x76
 8005b38:	b10a      	cbz	r2, 8005b3e <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x46>
 8005b3a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8005b3c:	b900      	cbnz	r0, 8005b40 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x48>
        return instance->lcdRef;
 8005b3e:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8005b40:	f018 fc95 	bl	801e46e <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 8005b44:	4620      	mov	r0, r4
 8005b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b48:	20027be8 	.word	0x20027be8
 8005b4c:	08029140 	.word	0x08029140
 8005b50:	20027b94 	.word	0x20027b94
 8005b54:	08029128 	.word	0x08029128

08005b58 <_ZN23FrontendApplicationBase36gotoScreen1ScreenCoverTransitionWestEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8005b58:	4b06      	ldr	r3, [pc, #24]	@ (8005b74 <_ZN23FrontendApplicationBase36gotoScreen1ScreenCoverTransitionWestEv+0x1c>)
 8005b5a:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8005b5e:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8005b62:	2300      	movs	r3, #0
 8005b64:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8005b68:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8005b6c:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop
 8005b74:	080057c1 	.word	0x080057c1

08005b78 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv>:
 8005b78:	4b06      	ldr	r3, [pc, #24]	@ (8005b94 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv+0x1c>)
 8005b7a:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8005b7e:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8005b82:	2300      	movs	r3, #0
 8005b84:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8005b88:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8005b8c:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8005b90:	4770      	bx	lr
 8005b92:	bf00      	nop
 8005b94:	0800563d 	.word	0x0800563d

08005b98 <_ZN23FrontendApplicationBase36gotoScreen2ScreenCoverTransitionEastEv>:
 8005b98:	4b06      	ldr	r3, [pc, #24]	@ (8005bb4 <_ZN23FrontendApplicationBase36gotoScreen2ScreenCoverTransitionEastEv+0x1c>)
 8005b9a:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8005b9e:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8005ba8:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8005bac:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop
 8005bb4:	0800595d 	.word	0x0800595d

08005bb8 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8005bb8:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8005bba:	4770      	bx	lr

08005bbc <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8005bbc:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8005bbe:	4770      	bx	lr

08005bc0 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8005bc0:	4770      	bx	lr

08005bc2 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8005bc2:	888b      	ldrh	r3, [r1, #4]
 8005bc4:	69c0      	ldr	r0, [r0, #28]
 8005bc6:	0adb      	lsrs	r3, r3, #11
 8005bc8:	680a      	ldr	r2, [r1, #0]
 8005bca:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 8005bce:	4410      	add	r0, r2
 8005bd0:	4770      	bx	lr

08005bd2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8005bd2:	b510      	push	{r4, lr}
 8005bd4:	4604      	mov	r4, r0
    if (!glyph || glyph->kerningTableSize == 0)
 8005bd6:	b1ba      	cbz	r2, 8005c08 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 8005bd8:	7b10      	ldrb	r0, [r2, #12]
 8005bda:	b168      	cbz	r0, 8005bf8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8005bdc:	7b53      	ldrb	r3, [r2, #13]
 8005bde:	7ad2      	ldrb	r2, [r2, #11]
 8005be0:	021b      	lsls	r3, r3, #8
 8005be2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8005be6:	431a      	orrs	r2, r3
 8005be8:	6a23      	ldr	r3, [r4, #32]
 8005bea:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
    {
        if (prevChar == kerndata->unicodePrevChar)
 8005bee:	881a      	ldrh	r2, [r3, #0]
 8005bf0:	428a      	cmp	r2, r1
 8005bf2:	d102      	bne.n	8005bfa <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 8005bf4:	f993 0002 	ldrsb.w	r0, [r3, #2]
        {
            break;
        }
    }
    return 0;
}
 8005bf8:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 8005bfa:	d805      	bhi.n	8005c08 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8005bfc:	3801      	subs	r0, #1
 8005bfe:	3304      	adds	r3, #4
 8005c00:	b280      	uxth	r0, r0
 8005c02:	2800      	cmp	r0, #0
 8005c04:	d1f3      	bne.n	8005bee <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8005c06:	e7f7      	b.n	8005bf8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 8005c08:	2000      	movs	r0, #0
 8005c0a:	e7f5      	b.n	8005bf8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

08005c0c <_ZN8touchgfx13GeneratedFontD0Ev>:
 8005c0c:	b510      	push	{r4, lr}
 8005c0e:	4604      	mov	r4, r0
 8005c10:	212c      	movs	r1, #44	@ 0x2c
 8005c12:	f01f ff1c 	bl	8025a4e <_ZdlPvj>
 8005c16:	4620      	mov	r0, r4
 8005c18:	bd10      	pop	{r4, pc}
	...

08005c1c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8005c1c:	b530      	push	{r4, r5, lr}
 8005c1e:	b08b      	sub	sp, #44	@ 0x2c
 8005c20:	4604      	mov	r4, r0
      arabicTable(formsTable)
 8005c22:	f8bd 5060 	ldrh.w	r5, [sp, #96]	@ 0x60
 8005c26:	9508      	str	r5, [sp, #32]
 8005c28:	f8bd 505c 	ldrh.w	r5, [sp, #92]	@ 0x5c
 8005c2c:	9507      	str	r5, [sp, #28]
 8005c2e:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8005c32:	9506      	str	r5, [sp, #24]
 8005c34:	f89d 504c 	ldrb.w	r5, [sp, #76]	@ 0x4c
 8005c38:	9505      	str	r5, [sp, #20]
 8005c3a:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8005c3e:	9504      	str	r5, [sp, #16]
 8005c40:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8005c44:	9503      	str	r5, [sp, #12]
 8005c46:	f89d 5040 	ldrb.w	r5, [sp, #64]	@ 0x40
 8005c4a:	9502      	str	r5, [sp, #8]
 8005c4c:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 8005c50:	9501      	str	r5, [sp, #4]
 8005c52:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8005c56:	9500      	str	r5, [sp, #0]
 8005c58:	f011 fb22 	bl	80172a0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8005c5c:	4b06      	ldr	r3, [pc, #24]	@ (8005c78 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
}
 8005c5e:	4620      	mov	r0, r4
      arabicTable(formsTable)
 8005c60:	6023      	str	r3, [r4, #0]
      glyphData(glyphDataInternalFlash),
 8005c62:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005c64:	61e3      	str	r3, [r4, #28]
      kerningData(kerningList),
 8005c66:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005c68:	6223      	str	r3, [r4, #32]
      gsubTable(gsubData),
 8005c6a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005c6c:	6263      	str	r3, [r4, #36]	@ 0x24
      arabicTable(formsTable)
 8005c6e:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8005c70:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 8005c72:	b00b      	add	sp, #44	@ 0x2c
 8005c74:	bd30      	pop	{r4, r5, pc}
 8005c76:	bf00      	nop
 8005c78:	080291f8 	.word	0x080291f8

08005c7c <_ZN8touchgfx9Container13getFirstChildEv>:
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
    {
        return firstChild;
    }
 8005c7c:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8005c7e:	4770      	bx	lr

08005c80 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 8005c80:	4770      	bx	lr

08005c82 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 8005c82:	4770      	bx	lr

08005c84 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 8005c84:	4770      	bx	lr

08005c86 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 8005c86:	4770      	bx	lr

08005c88 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 8005c88:	4770      	bx	lr

08005c8a <_ZN8touchgfx17AbstractDataGraph8setAlphaEh>:
     *
     * @note All graph elements have to take this alpha into consideration.
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8005c8a:	f880 102c 	strb.w	r1, [r0, #44]	@ 0x2c
    }
 8005c8e:	4770      	bx	lr

08005c90 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>:
     * @param  min The minimum x value.
     * @param  max The maximum x value.
     *
     * @note The graph as well as the area above and below are automatically redrawn (invalidated).
     */
    virtual void setGraphRangeX(int min, int max)
 8005c90:	b410      	push	{r4}
    {
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 8005c92:	6803      	ldr	r3, [r0, #0]
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int int2scaledX(int i) const
    {
        return int2scaled(i, xScale);
 8005c94:	6b04      	ldr	r4, [r0, #48]	@ 0x30
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 8005c96:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005c9a:	4362      	muls	r2, r4
 8005c9c:	4361      	muls	r1, r4
    }
 8005c9e:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 8005ca2:	4718      	bx	r3

08005ca4 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff>:
     *
     * @return The product of the two numbers, rounded to nearest integer value.
     */
    FORCE_INLINE_FUNCTION static int float2scaled(float f, int scale)
    {
        const float fs = f * (float)scale;
 8005ca4:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 8005ca8:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8005caa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    virtual void setGraphRangeX(float min, float max)
 8005cae:	b410      	push	{r4}
        const float fs = f * (float)scale;
 8005cb0:	ee20 0a27 	vmul.f32	s0, s0, s15
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 8005cb4:	f8d3 40a4 	ldr.w	r4, [r3, #164]	@ 0xa4
        if (fs >= 0)
 8005cb8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cc0:	db1a      	blt.n	8005cf8 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x54>
        {
            return (int)(fs + 0.5f);
 8005cc2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005cc6:	ee30 0a07 	vadd.f32	s0, s0, s14
 8005cca:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8005cce:	ee17 1a10 	vmov	r1, s14
        const float fs = f * (float)scale;
 8005cd2:	ee60 0aa7 	vmul.f32	s1, s1, s15
        if (fs >= 0)
 8005cd6:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 8005cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cde:	db1e      	blt.n	8005d1e <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x7a>
            return (int)(fs + 0.5f);
 8005ce0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8005ce4:	ee70 0aa7 	vadd.f32	s1, s1, s15
 8005ce8:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8005cec:	ee17 2a90 	vmov	r2, s15
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 8005cf0:	4623      	mov	r3, r4
    }
 8005cf2:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 8005cf6:	4718      	bx	r3
        }
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8005cf8:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8005cfc:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005d00:	ee17 3a10 	vmov	r3, s14
 8005d04:	3b01      	subs	r3, #1
 8005d06:	ee30 0a66 	vsub.f32	s0, s0, s13
 8005d0a:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8005d0e:	ee30 0a26 	vadd.f32	s0, s0, s13
 8005d12:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005d16:	ee10 1a10 	vmov	r1, s0
 8005d1a:	4419      	add	r1, r3
 8005d1c:	e7d9      	b.n	8005cd2 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x2e>
 8005d1e:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8005d22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005d26:	ee17 3a90 	vmov	r3, s15
 8005d2a:	3b01      	subs	r3, #1
 8005d2c:	ee70 0ac7 	vsub.f32	s1, s1, s14
 8005d30:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8005d34:	ee70 0a87 	vadd.f32	s1, s1, s14
 8005d38:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 8005d3c:	ee10 2a90 	vmov	r2, s1
 8005d40:	441a      	add	r2, r3
 8005d42:	e7d5      	b.n	8005cf0 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x4c>

08005d44 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbi>:
    virtual void setGraphRangeXAuto(bool showYaxis = true, int margin = 0)
 8005d44:	b410      	push	{r4}
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 8005d46:	6803      	ldr	r3, [r0, #0]
        return i * scale;
 8005d48:	6b04      	ldr	r4, [r0, #48]	@ 0x30
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 8005d4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005d4e:	4362      	muls	r2, r4
    }
 8005d50:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 8005d54:	4718      	bx	r3

08005d56 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf>:
        const float fs = f * (float)scale;
 8005d56:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 8005d5a:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8005d5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    virtual void setGraphRangeXAuto(bool showYaxis, float margin)
 8005d60:	b410      	push	{r4}
        const float fs = f * (float)scale;
 8005d62:	ee27 0a80 	vmul.f32	s0, s15, s0
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 8005d66:	f8d3 40b0 	ldr.w	r4, [r3, #176]	@ 0xb0
        if (fs >= 0)
 8005d6a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d72:	db0b      	blt.n	8005d8c <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x36>
            return (int)(fs + 0.5f);
 8005d74:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8005d78:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005d7c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005d80:	ee17 2a90 	vmov	r2, s15
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 8005d84:	4623      	mov	r3, r4
    }
 8005d86:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 8005d8a:	4718      	bx	r3
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8005d8c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005d90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005d94:	ee17 3a90 	vmov	r3, s15
 8005d98:	3b01      	subs	r3, #1
 8005d9a:	ee30 0a47 	vsub.f32	s0, s0, s14
 8005d9e:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8005da2:	ee30 0a07 	vadd.f32	s0, s0, s14
 8005da6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005daa:	ee10 2a10 	vmov	r2, s0
 8005dae:	441a      	add	r2, r3
 8005db0:	e7e8      	b.n	8005d84 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x2e>

08005db2 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEii>:
    virtual void setGraphRangeY(int min, int max)
 8005db2:	b410      	push	{r4}
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 8005db4:	6803      	ldr	r3, [r0, #0]
        return int2scaled(i, yScale);
 8005db6:	6b44      	ldr	r4, [r0, #52]	@ 0x34
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 8005db8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005dbc:	4362      	muls	r2, r4
 8005dbe:	4361      	muls	r1, r4
    }
 8005dc0:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 8005dc4:	4718      	bx	r3

08005dc6 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff>:
        const float fs = f * (float)scale;
 8005dc6:	edd0 7a0d 	vldr	s15, [r0, #52]	@ 0x34
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 8005dca:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8005dcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    virtual void setGraphRangeY(float min, float max)
 8005dd0:	b410      	push	{r4}
        const float fs = f * (float)scale;
 8005dd2:	ee20 0a27 	vmul.f32	s0, s0, s15
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 8005dd6:	f8d3 40bc 	ldr.w	r4, [r3, #188]	@ 0xbc
        if (fs >= 0)
 8005dda:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005de2:	db1a      	blt.n	8005e1a <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x54>
            return (int)(fs + 0.5f);
 8005de4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005de8:	ee30 0a07 	vadd.f32	s0, s0, s14
 8005dec:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8005df0:	ee17 1a10 	vmov	r1, s14
        const float fs = f * (float)scale;
 8005df4:	ee60 0aa7 	vmul.f32	s1, s1, s15
        if (fs >= 0)
 8005df8:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 8005dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e00:	db1e      	blt.n	8005e40 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x7a>
            return (int)(fs + 0.5f);
 8005e02:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8005e06:	ee70 0aa7 	vadd.f32	s1, s1, s15
 8005e0a:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8005e0e:	ee17 2a90 	vmov	r2, s15
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 8005e12:	4623      	mov	r3, r4
    }
 8005e14:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 8005e18:	4718      	bx	r3
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8005e1a:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8005e1e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005e22:	ee17 3a10 	vmov	r3, s14
 8005e26:	3b01      	subs	r3, #1
 8005e28:	ee30 0a66 	vsub.f32	s0, s0, s13
 8005e2c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8005e30:	ee30 0a26 	vadd.f32	s0, s0, s13
 8005e34:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005e38:	ee10 1a10 	vmov	r1, s0
 8005e3c:	4419      	add	r1, r3
 8005e3e:	e7d9      	b.n	8005df4 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x2e>
 8005e40:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8005e44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e48:	ee17 3a90 	vmov	r3, s15
 8005e4c:	3b01      	subs	r3, #1
 8005e4e:	ee70 0ac7 	vsub.f32	s1, s1, s14
 8005e52:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8005e56:	ee70 0a87 	vadd.f32	s1, s1, s14
 8005e5a:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 8005e5e:	ee10 2a90 	vmov	r2, s1
 8005e62:	441a      	add	r2, r3
 8005e64:	e7d5      	b.n	8005e12 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x4c>

08005e66 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbi>:
    virtual void setGraphRangeYAuto(bool showXaxis = true, int margin = 0)
 8005e66:	b410      	push	{r4}
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 8005e68:	6803      	ldr	r3, [r0, #0]
        return i * scale;
 8005e6a:	6b44      	ldr	r4, [r0, #52]	@ 0x34
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 8005e6c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005e70:	4362      	muls	r2, r4
    }
 8005e72:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 8005e76:	4718      	bx	r3

08005e78 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf>:
        const float fs = f * (float)scale;
 8005e78:	edd0 7a0d 	vldr	s15, [r0, #52]	@ 0x34
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 8005e7c:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8005e7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    virtual void setGraphRangeYAuto(bool showXaxis, float margin)
 8005e82:	b410      	push	{r4}
        const float fs = f * (float)scale;
 8005e84:	ee27 0a80 	vmul.f32	s0, s15, s0
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 8005e88:	f8d3 40c0 	ldr.w	r4, [r3, #192]	@ 0xc0
        if (fs >= 0)
 8005e8c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e94:	db0b      	blt.n	8005eae <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf+0x36>
            return (int)(fs + 0.5f);
 8005e96:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8005e9a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005e9e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005ea2:	ee17 2a90 	vmov	r2, s15
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 8005ea6:	4623      	mov	r3, r4
    }
 8005ea8:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 8005eac:	4718      	bx	r3
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8005eae:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005eb2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005eb6:	ee17 3a90 	vmov	r3, s15
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	ee30 0a47 	vsub.f32	s0, s0, s14
 8005ec0:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8005ec4:	ee30 0a07 	vadd.f32	s0, s0, s14
 8005ec8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005ecc:	ee10 2a10 	vmov	r2, s0
 8005ed0:	441a      	add	r2, r3
 8005ed2:	e7e8      	b.n	8005ea6 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf+0x2e>

08005ed4 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv>:
        return scaled2intX(graphRangeMinX);
 8005ed4:	f8d0 312c 	ldr.w	r3, [r0, #300]	@ 0x12c
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int scaled2intX(int i) const
    {
        return scaled2int(i, xScale);
 8005ed8:	6b02      	ldr	r2, [r0, #48]	@ 0x30
        if (i >= 0)
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	db07      	blt.n	8005eee <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 8005ede:	eb02 0043 	add.w	r0, r2, r3, lsl #1
 8005ee2:	fb90 f0f2 	sdiv	r0, r0, r2
 8005ee6:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005eea:	1040      	asrs	r0, r0, #1
 8005eec:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8005eee:	f06f 0101 	mvn.w	r1, #1
 8005ef2:	fb01 2003 	mla	r0, r1, r3, r2
 8005ef6:	3801      	subs	r0, #1
 8005ef8:	fb90 f0f2 	sdiv	r0, r0, r2
 8005efc:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005f00:	1040      	asrs	r0, r0, #1
 8005f02:	4240      	negs	r0, r0
    }
 8005f04:	4770      	bx	lr

08005f06 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeXMinAsFloatEv>:
     *
     * @return The number divided by the scale.
     */
    FORCE_INLINE_FUNCTION static float scaled2float(int i, int scale)
    {
        return (float)i / (float)scale;
 8005f06:	edd0 7a4b 	vldr	s15, [r0, #300]	@ 0x12c
 8005f0a:	ed90 0a0c 	vldr	s0, [r0, #48]	@ 0x30
 8005f0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f12:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    }
 8005f16:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8005f1a:	4770      	bx	lr

08005f1c <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeXMinScaledEv>:
    }
 8005f1c:	f8d0 012c 	ldr.w	r0, [r0, #300]	@ 0x12c
 8005f20:	4770      	bx	lr

08005f22 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv>:
        return scaled2intX(graphRangeMaxX);
 8005f22:	f8d0 3130 	ldr.w	r3, [r0, #304]	@ 0x130
        return scaled2int(i, xScale);
 8005f26:	6b02      	ldr	r2, [r0, #48]	@ 0x30
        if (i >= 0)
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	db07      	blt.n	8005f3c <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 8005f2c:	eb02 0043 	add.w	r0, r2, r3, lsl #1
 8005f30:	fb90 f0f2 	sdiv	r0, r0, r2
 8005f34:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005f38:	1040      	asrs	r0, r0, #1
 8005f3a:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8005f3c:	f06f 0101 	mvn.w	r1, #1
 8005f40:	fb01 2003 	mla	r0, r1, r3, r2
 8005f44:	3801      	subs	r0, #1
 8005f46:	fb90 f0f2 	sdiv	r0, r0, r2
 8005f4a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005f4e:	1040      	asrs	r0, r0, #1
 8005f50:	4240      	negs	r0, r0
    }
 8005f52:	4770      	bx	lr

08005f54 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeXMaxAsFloatEv>:
        return (float)i / (float)scale;
 8005f54:	edd0 7a4c 	vldr	s15, [r0, #304]	@ 0x130
 8005f58:	ed90 0a0c 	vldr	s0, [r0, #48]	@ 0x30
 8005f5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f60:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    }
 8005f64:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8005f68:	4770      	bx	lr

08005f6a <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeXMaxScaledEv>:
    }
 8005f6a:	f8d0 0130 	ldr.w	r0, [r0, #304]	@ 0x130
 8005f6e:	4770      	bx	lr

08005f70 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv>:
        return scaled2intY(graphRangeMinY);
 8005f70:	f8d0 3134 	ldr.w	r3, [r0, #308]	@ 0x134
        return scaled2int(i, yScale);
 8005f74:	6b42      	ldr	r2, [r0, #52]	@ 0x34
        if (i >= 0)
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	db07      	blt.n	8005f8a <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 8005f7a:	eb02 0043 	add.w	r0, r2, r3, lsl #1
 8005f7e:	fb90 f0f2 	sdiv	r0, r0, r2
 8005f82:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005f86:	1040      	asrs	r0, r0, #1
 8005f88:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8005f8a:	f06f 0101 	mvn.w	r1, #1
 8005f8e:	fb01 2003 	mla	r0, r1, r3, r2
 8005f92:	3801      	subs	r0, #1
 8005f94:	fb90 f0f2 	sdiv	r0, r0, r2
 8005f98:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005f9c:	1040      	asrs	r0, r0, #1
 8005f9e:	4240      	negs	r0, r0
    }
 8005fa0:	4770      	bx	lr

08005fa2 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeYMinAsFloatEv>:
        return (float)i / (float)scale;
 8005fa2:	edd0 7a4d 	vldr	s15, [r0, #308]	@ 0x134
 8005fa6:	ed90 0a0d 	vldr	s0, [r0, #52]	@ 0x34
 8005faa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005fae:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    }
 8005fb2:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8005fb6:	4770      	bx	lr

08005fb8 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeYMinScaledEv>:
    }
 8005fb8:	f8d0 0134 	ldr.w	r0, [r0, #308]	@ 0x134
 8005fbc:	4770      	bx	lr

08005fbe <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv>:
        return scaled2intY(graphRangeMaxY);
 8005fbe:	f8d0 3138 	ldr.w	r3, [r0, #312]	@ 0x138
        return scaled2int(i, yScale);
 8005fc2:	6b42      	ldr	r2, [r0, #52]	@ 0x34
        if (i >= 0)
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	db07      	blt.n	8005fd8 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 8005fc8:	eb02 0043 	add.w	r0, r2, r3, lsl #1
 8005fcc:	fb90 f0f2 	sdiv	r0, r0, r2
 8005fd0:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005fd4:	1040      	asrs	r0, r0, #1
 8005fd6:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8005fd8:	f06f 0101 	mvn.w	r1, #1
 8005fdc:	fb01 2003 	mla	r0, r1, r3, r2
 8005fe0:	3801      	subs	r0, #1
 8005fe2:	fb90 f0f2 	sdiv	r0, r0, r2
 8005fe6:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005fea:	1040      	asrs	r0, r0, #1
 8005fec:	4240      	negs	r0, r0
    }
 8005fee:	4770      	bx	lr

08005ff0 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeYMaxAsFloatEv>:
        return (float)i / (float)scale;
 8005ff0:	edd0 7a4e 	vldr	s15, [r0, #312]	@ 0x138
 8005ff4:	ed90 0a0d 	vldr	s0, [r0, #52]	@ 0x34
 8005ff8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ffc:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    }
 8006000:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8006004:	4770      	bx	lr

08006006 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeYMaxScaledEv>:
    }
 8006006:	f8d0 0138 	ldr.w	r0, [r0, #312]	@ 0x138
 800600a:	4770      	bx	lr

0800600c <_ZN8touchgfx16DynamicDataGraph8setScaleEib>:
     * @note The current xAxisFactor, xAxisOffet and xGraphRange values are updated to reflect the
     *       new scale being set.
     */
    virtual void setScale(int scale, bool updateData = false)
    {
        setScaleX(scale, updateData);
 800600c:	6803      	ldr	r3, [r0, #0]
    virtual void setScale(int scale, bool updateData = false)
 800600e:	b570      	push	{r4, r5, r6, lr}
 8006010:	4604      	mov	r4, r0
        setScaleX(scale, updateData);
 8006012:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
    virtual void setScale(int scale, bool updateData = false)
 8006016:	460d      	mov	r5, r1
 8006018:	4616      	mov	r6, r2
        setScaleX(scale, updateData);
 800601a:	4798      	blx	r3
        setScaleY(scale, updateData);
 800601c:	6823      	ldr	r3, [r4, #0]
 800601e:	4632      	mov	r2, r6
 8006020:	4629      	mov	r1, r5
 8006022:	4620      	mov	r0, r4
 8006024:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
    }
 8006028:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setScaleY(scale, updateData);
 800602c:	4718      	bx	r3

0800602e <_ZNK8touchgfx16DynamicDataGraph8getScaleEv>:
     *
     * @see setScale
     */
    virtual int getScale() const
    {
        return getScaleY();
 800602e:	6803      	ldr	r3, [r0, #0]
 8006030:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006034:	4718      	bx	r3

08006036 <_ZNK8touchgfx16DynamicDataGraph17getGraphRangeXMinEv>:
     *
     * @return The minimum x coordinate .
     */
    virtual int getGraphRangeXMin() const
    {
        return getGraphRangeXMinScaled();
 8006036:	6803      	ldr	r3, [r0, #0]
 8006038:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800603c:	4718      	bx	r3

0800603e <_ZNK8touchgfx16DynamicDataGraph17getGraphRangeXMaxEv>:
     *
     * @return The maximum x coordinate .
     */
    virtual int getGraphRangeXMax() const
    {
        return getGraphRangeXMaxScaled();
 800603e:	6803      	ldr	r3, [r0, #0]
 8006040:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006044:	4718      	bx	r3

08006046 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi>:

    virtual void setGraphRangeYAutoScaled(bool showXaxis, int margin);

    virtual void setGraphRangeXAutoScaled(bool /*showYaxis*/, int margin)
    {
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 8006046:	6803      	ldr	r3, [r0, #0]
        if (i >= 0)
 8006048:	2a00      	cmp	r2, #0
    virtual void setGraphRangeXAutoScaled(bool /*showYaxis*/, int margin)
 800604a:	b410      	push	{r4}
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 800604c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
        return scaled2int(i, xScale);
 8006050:	6b04      	ldr	r4, [r0, #48]	@ 0x30
        if (i >= 0)
 8006052:	db0e      	blt.n	8006072 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0x2c>
            return ((i * 2 + scale) / scale) / 2;
 8006054:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8006058:	fb92 f1f4 	sdiv	r1, r2, r4
 800605c:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8006060:	1049      	asrs	r1, r1, #1
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 8006062:	f9b0 211e 	ldrsh.w	r2, [r0, #286]	@ 0x11e
    }
 8006066:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 800606a:	3a01      	subs	r2, #1
 800606c:	440a      	add	r2, r1
 800606e:	4249      	negs	r1, r1
 8006070:	4718      	bx	r3
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8006072:	f06f 0101 	mvn.w	r1, #1
 8006076:	fb01 4102 	mla	r1, r1, r2, r4
 800607a:	3901      	subs	r1, #1
 800607c:	fb91 f1f4 	sdiv	r1, r1, r4
 8006080:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8006084:	1049      	asrs	r1, r1, #1
 8006086:	4249      	negs	r1, r1
 8006088:	e7eb      	b.n	8006062 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0x1c>

0800608a <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEi>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactor()", virtual void setXAxisScale(int scale))
    {
        setXAxisFactor(scale);
 800608a:	6803      	ldr	r3, [r0, #0]
 800608c:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8006090:	4718      	bx	r3

08006092 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEi>:
        return i * scale;
 8006092:	6b02      	ldr	r2, [r0, #48]	@ 0x30
     *
     * @param  factor The x axis factor.
     */
    virtual void setXAxisFactor(int factor)
    {
        setXAxisFactorScaled(int2scaledX(factor));
 8006094:	6803      	ldr	r3, [r0, #0]
 8006096:	4351      	muls	r1, r2
 8006098:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800609c:	4718      	bx	r3

0800609e <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEf>:
    }

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactor()", virtual void setXAxisScale(float scale))
    {
        setXAxisFactor(scale);
 800609e:	6803      	ldr	r3, [r0, #0]
 80060a0:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 80060a4:	4718      	bx	r3

080060a6 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf>:
        const float fs = f * (float)scale;
 80060a6:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
    /// @endcond

    /** @copydoc setXAxisFactor(int) */
    virtual void setXAxisFactor(float factor)
    {
        setXAxisFactorScaled(float2scaledX(factor));
 80060aa:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 80060ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setXAxisFactorScaled(float2scaledX(factor));
 80060b0:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
        const float fs = f * (float)scale;
 80060b4:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
 80060b8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80060bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060c0:	db08      	blt.n	80060d4 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf+0x2e>
            return (int)(fs + 0.5f);
 80060c2:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80060c6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80060ca:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80060ce:	ee17 1a90 	vmov	r1, s15
        setXAxisFactorScaled(float2scaledX(factor));
 80060d2:	4710      	bx	r2
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 80060d4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80060d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80060dc:	ee17 3a90 	vmov	r3, s15
 80060e0:	3b01      	subs	r3, #1
 80060e2:	ee30 0a47 	vsub.f32	s0, s0, s14
 80060e6:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80060ea:	ee30 0a07 	vadd.f32	s0, s0, s14
 80060ee:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80060f2:	ee10 1a10 	vmov	r1, s0
 80060f6:	4419      	add	r1, r3
 80060f8:	e7eb      	b.n	80060d2 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf+0x2c>

080060fa <_ZN8touchgfx16DynamicDataGraph20setXAxisFactorScaledEi>:
     *
     * @see setXAxisFactorScaled,setXAxisFactor
     */
    virtual void setXAxisFactorScaled(int factor)
    {
        xAxisFactor = factor;
 80060fa:	f8c0 113c 	str.w	r1, [r0, #316]	@ 0x13c
    }
 80060fe:	4770      	bx	lr

08006100 <_ZNK8touchgfx16DynamicDataGraph18getXAxisScaleAsIntEv>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorAsInt()", virtual int getXAxisScaleAsInt() const)
    {
        return getXAxisFactorAsInt();
 8006100:	6803      	ldr	r3, [r0, #0]
 8006102:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8006106:	4718      	bx	r3

08006108 <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv>:
     *
     * @return The x axis factor.
     */
    virtual int getXAxisFactorAsInt() const
    {
        return scaled2intX(getXAxisFactorScaled());
 8006108:	6803      	ldr	r3, [r0, #0]
    virtual int getXAxisFactorAsInt() const
 800610a:	b510      	push	{r4, lr}
        return scaled2intX(getXAxisFactorScaled());
 800610c:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
    virtual int getXAxisFactorAsInt() const
 8006110:	4604      	mov	r4, r0
        return scaled2intX(getXAxisFactorScaled());
 8006112:	4798      	blx	r3
        if (i >= 0)
 8006114:	2800      	cmp	r0, #0
        return scaled2int(i, xScale);
 8006116:	6b23      	ldr	r3, [r4, #48]	@ 0x30
        if (i >= 0)
 8006118:	db07      	blt.n	800612a <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv+0x22>
            return ((i * 2 + scale) / scale) / 2;
 800611a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800611e:	fb90 f0f3 	sdiv	r0, r0, r3
 8006122:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8006126:	1040      	asrs	r0, r0, #1
    }
 8006128:	bd10      	pop	{r4, pc}
        return -(((-i * 2 + scale - 1) / scale) / 2);
 800612a:	f06f 0201 	mvn.w	r2, #1
 800612e:	fb02 3000 	mla	r0, r2, r0, r3
 8006132:	3801      	subs	r0, #1
 8006134:	fb90 f0f3 	sdiv	r0, r0, r3
 8006138:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800613c:	1040      	asrs	r0, r0, #1
 800613e:	4240      	negs	r0, r0
        return scaled2intX(getXAxisFactorScaled());
 8006140:	e7f2      	b.n	8006128 <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv+0x20>

08006142 <_ZNK8touchgfx16DynamicDataGraph20getXAxisScaleAsFloatEv>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorAsFloat()", virtual float getXAxisScaleAsFloat() const)
    {
        return getXAxisFactorAsFloat();
 8006142:	6803      	ldr	r3, [r0, #0]
 8006144:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8006148:	4718      	bx	r3

0800614a <_ZNK8touchgfx16DynamicDataGraph21getXAxisFactorAsFloatEv>:
    /// @endcond

    /** @copydoc getXAxisFactorAsInt() */
    virtual float getXAxisFactorAsFloat() const
    {
        return scaled2floatX(getXAxisFactorScaled());
 800614a:	6803      	ldr	r3, [r0, #0]
    virtual float getXAxisFactorAsFloat() const
 800614c:	b510      	push	{r4, lr}
 800614e:	4604      	mov	r4, r0
        return scaled2floatX(getXAxisFactorScaled());
 8006150:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 8006154:	4798      	blx	r3
 8006156:	ee07 0a90 	vmov	s15, r0
        return (float)i / (float)scale;
 800615a:	ed94 0a0c 	vldr	s0, [r4, #48]	@ 0x30
 800615e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006162:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    }
 8006166:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800616a:	bd10      	pop	{r4, pc}

0800616c <_ZNK8touchgfx16DynamicDataGraph20getXAxisFactorScaledEv>:
     * @see getXAxisFactorAsInt, getXAxisFactorAsFloat, setXAxisFactor
     */
    virtual int getXAxisFactorScaled() const
    {
        return xAxisFactor;
    }
 800616c:	f8d0 013c 	ldr.w	r0, [r0, #316]	@ 0x13c
 8006170:	4770      	bx	lr

08006172 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEi>:
        return i * scale;
 8006172:	6b02      	ldr	r2, [r0, #48]	@ 0x30
     *
     * @param  offset The x axis offset.
     */
    virtual void setXAxisOffset(int offset)
    {
        setXAxisOffsetScaled(int2scaledX(offset));
 8006174:	6803      	ldr	r3, [r0, #0]
 8006176:	4351      	muls	r1, r2
 8006178:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 800617c:	4718      	bx	r3

0800617e <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf>:
        const float fs = f * (float)scale;
 800617e:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
    }

    /** @copydoc setXAxisOffset(int) */
    virtual void setXAxisOffset(float offset)
    {
        setXAxisOffsetScaled(float2scaledX(offset));
 8006182:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8006184:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setXAxisOffsetScaled(float2scaledX(offset));
 8006188:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
        const float fs = f * (float)scale;
 800618c:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
 8006190:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006198:	db08      	blt.n	80061ac <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf+0x2e>
            return (int)(fs + 0.5f);
 800619a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800619e:	ee30 0a27 	vadd.f32	s0, s0, s15
 80061a2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80061a6:	ee17 1a90 	vmov	r1, s15
        setXAxisOffsetScaled(float2scaledX(offset));
 80061aa:	4710      	bx	r2
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 80061ac:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80061b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80061b4:	ee17 3a90 	vmov	r3, s15
 80061b8:	3b01      	subs	r3, #1
 80061ba:	ee30 0a47 	vsub.f32	s0, s0, s14
 80061be:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80061c2:	ee30 0a07 	vadd.f32	s0, s0, s14
 80061c6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80061ca:	ee10 1a10 	vmov	r1, s0
 80061ce:	4419      	add	r1, r3
 80061d0:	e7eb      	b.n	80061aa <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf+0x2c>

080061d2 <_ZN8touchgfx16DynamicDataGraph20setXAxisOffsetScaledEi>:
     *
     * @see setXAxisOffset, getXAxisOffsetScaled
     */
    virtual void setXAxisOffsetScaled(int offset)
    {
        xAxisOffset = offset;
 80061d2:	f8c0 1140 	str.w	r1, [r0, #320]	@ 0x140
    }
 80061d6:	4770      	bx	lr

080061d8 <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv>:
     *
     * @return The x axis offset.
     */
    virtual int getXAxisOffsetAsInt() const
    {
        return scaled2intX(getXAxisOffsetScaled());
 80061d8:	6803      	ldr	r3, [r0, #0]
    virtual int getXAxisOffsetAsInt() const
 80061da:	b510      	push	{r4, lr}
        return scaled2intX(getXAxisOffsetScaled());
 80061dc:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
    virtual int getXAxisOffsetAsInt() const
 80061e0:	4604      	mov	r4, r0
        return scaled2intX(getXAxisOffsetScaled());
 80061e2:	4798      	blx	r3
        if (i >= 0)
 80061e4:	2800      	cmp	r0, #0
        return scaled2int(i, xScale);
 80061e6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
        if (i >= 0)
 80061e8:	db07      	blt.n	80061fa <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv+0x22>
            return ((i * 2 + scale) / scale) / 2;
 80061ea:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80061ee:	fb90 f0f3 	sdiv	r0, r0, r3
 80061f2:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80061f6:	1040      	asrs	r0, r0, #1
    }
 80061f8:	bd10      	pop	{r4, pc}
        return -(((-i * 2 + scale - 1) / scale) / 2);
 80061fa:	f06f 0201 	mvn.w	r2, #1
 80061fe:	fb02 3000 	mla	r0, r2, r0, r3
 8006202:	3801      	subs	r0, #1
 8006204:	fb90 f0f3 	sdiv	r0, r0, r3
 8006208:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800620c:	1040      	asrs	r0, r0, #1
 800620e:	4240      	negs	r0, r0
        return scaled2intX(getXAxisOffsetScaled());
 8006210:	e7f2      	b.n	80061f8 <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv+0x20>

08006212 <_ZNK8touchgfx16DynamicDataGraph21getXAxisOffsetAsFloatEv>:

    /** @copydoc getXAxisOffsetAsInt() */
    virtual float getXAxisOffsetAsFloat() const
    {
        return scaled2floatX(getXAxisOffsetScaled());
 8006212:	6803      	ldr	r3, [r0, #0]
    virtual float getXAxisOffsetAsFloat() const
 8006214:	b510      	push	{r4, lr}
 8006216:	4604      	mov	r4, r0
        return scaled2floatX(getXAxisOffsetScaled());
 8006218:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 800621c:	4798      	blx	r3
 800621e:	ee07 0a90 	vmov	s15, r0
        return (float)i / (float)scale;
 8006222:	ed94 0a0c 	vldr	s0, [r4, #48]	@ 0x30
 8006226:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800622a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    }
 800622e:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8006232:	bd10      	pop	{r4, pc}

08006234 <_ZNK8touchgfx16DynamicDataGraph20getXAxisOffsetScaledEv>:
     * @see getXAxisOffsetAsInt, getXAxisOffsetAsFloat, setXAxisOffsetScaled, setXAxisOffset
     */
    virtual int getXAxisOffsetScaled() const
    {
        return xAxisOffset;
    }
 8006234:	f8d0 0140 	ldr.w	r0, [r0, #320]	@ 0x140
 8006238:	4770      	bx	lr

0800623a <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii>:
    }

    virtual int indexToXAxis(const int valueScaled, const int /*labelScaled*/) const
    {
        // Value is also index for these types of graphs.
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
 800623a:	6803      	ldr	r3, [r0, #0]
        if (i >= 0)
 800623c:	2900      	cmp	r1, #0
        return scaled2int(i, xScale);
 800623e:	6b02      	ldr	r2, [r0, #48]	@ 0x30
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
 8006240:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
    virtual int indexToXAxis(const int valueScaled, const int /*labelScaled*/) const
 8006244:	b510      	push	{r4, lr}
 8006246:	4604      	mov	r4, r0
        if (i >= 0)
 8006248:	db0e      	blt.n	8006268 <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii+0x2e>
            return ((i * 2 + scale) / scale) / 2;
 800624a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800624e:	fb91 f1f2 	sdiv	r1, r1, r2
 8006252:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8006256:	1049      	asrs	r1, r1, #1
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
 8006258:	b209      	sxth	r1, r1
 800625a:	4620      	mov	r0, r4
 800625c:	4798      	blx	r3
 800625e:	e9d4 234f 	ldrd	r2, r3, [r4, #316]	@ 0x13c
    }
 8006262:	fb02 3000 	mla	r0, r2, r0, r3
 8006266:	bd10      	pop	{r4, pc}
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8006268:	f06f 0001 	mvn.w	r0, #1
 800626c:	fb00 2101 	mla	r1, r0, r1, r2
 8006270:	3901      	subs	r1, #1
 8006272:	fb91 f1f2 	sdiv	r1, r1, r2
 8006276:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 800627a:	1049      	asrs	r1, r1, #1
 800627c:	4249      	negs	r1, r1
 800627e:	e7eb      	b.n	8006258 <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii+0x1e>

08006280 <_ZNK8touchgfx16DynamicDataGraph9getScaleXEv>:
    virtual void setScaleX(int scale, bool updateData = false);

    virtual int getScaleX() const
    {
        return AbstractDataGraph::getScaleX();
    }
 8006280:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8006282:	4770      	bx	lr

08006284 <_ZNK8touchgfx16DynamicDataGraph9getScaleYEv>:
    virtual void setScaleY(int scale, bool updateData = false);

    virtual int getScaleY() const
    {
        return AbstractDataGraph::getScaleY();
    }
 8006284:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8006286:	4770      	bx	lr

08006288 <_ZN8touchgfx16DynamicDataGraph19setXAxisScaleScaledEi>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactorScaled()", virtual void setXAxisScaleScaled(int scale))
    {
        setXAxisFactorScaled(scale);
 8006288:	6803      	ldr	r3, [r0, #0]
 800628a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800628e:	4718      	bx	r3

08006290 <_ZNK8touchgfx16DynamicDataGraph19getXAxisScaleScaledEv>:
    /// @endcond

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorScaled()", virtual int getXAxisScaleScaled() const)
    {
        return getXAxisFactorScaled();
 8006290:	6803      	ldr	r3, [r0, #0]
 8006292:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 8006296:	4718      	bx	r3

08006298 <_ZNK8touchgfx16DynamicDataGraph16indexToScreenXQ5Es>:
        return i * scale;
 8006298:	6b02      	ldr	r2, [r0, #48]	@ 0x30

    /// @endcond

    virtual CWRUtil::Q5 indexToScreenXQ5(int16_t index) const
    {
        return valueToScreenXQ5(int2scaledX(index));
 800629a:	6803      	ldr	r3, [r0, #0]
 800629c:	4351      	muls	r1, r2
 800629e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80062a2:	4718      	bx	r3

080062a4 <_ZNK8touchgfx16DynamicDataGraph16indexToScreenYQ5Es>:
    }

    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
    {
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 80062a4:	6803      	ldr	r3, [r0, #0]
    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
 80062a6:	b570      	push	{r4, r5, r6, lr}
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 80062a8:	f8d3 5118 	ldr.w	r5, [r3, #280]	@ 0x118
    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
 80062ac:	4604      	mov	r4, r0
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 80062ae:	f8d0 6144 	ldr.w	r6, [r0, #324]	@ 0x144
 80062b2:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 80062b6:	4798      	blx	r3
 80062b8:	462b      	mov	r3, r5
 80062ba:	f856 1020 	ldr.w	r1, [r6, r0, lsl #2]
 80062be:	4620      	mov	r0, r4
    }
 80062c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 80062c4:	4718      	bx	r3

080062c6 <_ZNK8touchgfx15GraphScrollData9dataIndexEs>:

    virtual void beforeAddValue();

    virtual int16_t addValue(int value);

    virtual int16_t dataIndex(int16_t screenIndex) const
 80062c6:	4603      	mov	r3, r0
 80062c8:	4608      	mov	r0, r1
    {
        return usedCapacity < maxCapacity ? screenIndex : (screenIndex + current) % maxCapacity;
 80062ca:	f9b3 211c 	ldrsh.w	r2, [r3, #284]	@ 0x11c
 80062ce:	f9b3 111e 	ldrsh.w	r1, [r3, #286]	@ 0x11e
 80062d2:	4291      	cmp	r1, r2
 80062d4:	db07      	blt.n	80062e6 <_ZNK8touchgfx15GraphScrollData9dataIndexEs+0x20>
 80062d6:	f9b3 314c 	ldrsh.w	r3, [r3, #332]	@ 0x14c
 80062da:	1819      	adds	r1, r3, r0
 80062dc:	fb91 f3f2 	sdiv	r3, r1, r2
 80062e0:	fb02 1113 	mls	r1, r2, r3, r1
 80062e4:	b208      	sxth	r0, r1
    }
 80062e6:	4770      	bx	lr

080062e8 <_ZNK8touchgfx15GraphScrollData10indexToXQ5Es>:

private:
    virtual CWRUtil::Q5 indexToXQ5(int16_t index) const
    {
        return CWRUtil::toQ5(index);
    }
 80062e8:	0148      	lsls	r0, r1, #5
 80062ea:	4770      	bx	lr

080062ec <_ZN8touchgfx25AbstractGraphElementNoCWR8setColorENS_9colortypeE>:
     *
     * @see getColor
     */
    virtual void setColor(colortype newColor)
    {
        color = newColor;
 80062ec:	62c1      	str	r1, [r0, #44]	@ 0x2c
    }
 80062ee:	4770      	bx	lr

080062f0 <_ZNK8touchgfx25AbstractGraphElementNoCWR8getColorEv>:
     * @see setColor
     */
    virtual colortype getColor() const
    {
        return color;
    }
 80062f0:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 80062f2:	4770      	bx	lr

080062f4 <_ZNK8touchgfx25AbstractGraphElementNoCWR16drawCanvasWidgetERKNS_4RectE>:

    virtual bool drawCanvasWidget(const Rect&) const
    {
        return true;
    }
 80062f4:	2001      	movs	r0, #1
 80062f6:	4770      	bx	lr

080062f8 <_ZN8touchgfx25AbstractGraphElementNoCWR10setPainterERNS_15AbstractPainterE>:
    void normalizeRect(Rect& r) const;

private:
    virtual void setPainter(AbstractPainter& /*painter*/)
    {
    }
 80062f8:	4770      	bx	lr

080062fa <_ZN8touchgfx20GraphElementGridBase22invalidateGraphPointAtEs>:
        return lineWidth;
    }

    virtual void invalidateGraphPointAt(int16_t)
    {
    }
 80062fa:	4770      	bx	lr

080062fc <_ZNK8touchgfx20GraphElementGridBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE>:
     *
     * @return The correctly scaled major interval.
     */
    virtual int getCorrectlyScaledMajorInterval(const AbstractDataGraph* graph) const
    {
        return majorGrid == 0 ? 0 : majorGrid->getCorrectlyScaledGridInterval(graph);
 80062fc:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 80062fe:	b118      	cbz	r0, 8006308 <_ZNK8touchgfx20GraphElementGridBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE+0xc>
 8006300:	6803      	ldr	r3, [r0, #0]
 8006302:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006306:	4718      	bx	r3
    }
 8006308:	4770      	bx	lr

0800630a <_ZNK8touchgfx17GraphElementGridX13enclosingAreaEPKNS_17AbstractDataGraphE>:
        return graphArea.getHeight() - (topPadding + bottomPadding);
 800630a:	f8b2 111a 	ldrh.w	r1, [r2, #282]	@ 0x11a
    {
        return convertToGraphScaleX(graph, gridInterval, dataScale);
    }

protected:
    virtual Rect enclosingArea(const AbstractDataGraph* graph) const
 800630e:	b530      	push	{r4, r5, lr}
        return topPadding;
 8006310:	f9b2 4114 	ldrsh.w	r4, [r2, #276]	@ 0x114
        return rect.width;
 8006314:	f9b2 5040 	ldrsh.w	r5, [r2, #64]	@ 0x40
        return graphArea.getHeight() - (topPadding + bottomPadding);
 8006318:	4421      	add	r1, r4
 800631a:	f8b2 2042 	ldrh.w	r2, [r2, #66]	@ 0x42
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 800631e:	8044      	strh	r4, [r0, #2]
 8006320:	1a52      	subs	r2, r2, r1
 8006322:	2100      	movs	r1, #0
 8006324:	8085      	strh	r5, [r0, #4]
 8006326:	8001      	strh	r1, [r0, #0]
 8006328:	80c2      	strh	r2, [r0, #6]
    {
        return Rect(0, graph->getGraphAreaPaddingTop(), graph->getGraphAreaWidthIncludingPadding(), graph->getGraphAreaHeight());
    }
 800632a:	bd30      	pop	{r4, r5, pc}

0800632c <_ZNK8touchgfx17GraphElementGridX8lineRectEssss>:

    virtual Rect lineRect(int16_t start, int16_t length, int16_t pos, int16_t width) const
 800632c:	b510      	push	{r4, lr}
 800632e:	8042      	strh	r2, [r0, #2]
 8006330:	f9bd 4008 	ldrsh.w	r4, [sp, #8]
 8006334:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8006338:	8004      	strh	r4, [r0, #0]
 800633a:	8082      	strh	r2, [r0, #4]
 800633c:	80c3      	strh	r3, [r0, #6]
    {
        return Rect(pos, start, width, length);
    }
 800633e:	bd10      	pop	{r4, pc}

08006340 <_ZNK8touchgfx17GraphElementGridX22getGraphRangeMinScaledEPKNS_17AbstractDataGraphE>:

    virtual int getGraphRangeMinScaled(const AbstractDataGraph* graph) const
    {
        return graph->getGraphRangeXMinScaled();
 8006340:	680b      	ldr	r3, [r1, #0]
    virtual int getGraphRangeMinScaled(const AbstractDataGraph* graph) const
 8006342:	4608      	mov	r0, r1
        return graph->getGraphRangeXMinScaled();
 8006344:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8006348:	4718      	bx	r3

0800634a <_ZNK8touchgfx17GraphElementGridX22getGraphRangeMaxScaledEPKNS_17AbstractDataGraphE>:
    }

    virtual int getGraphRangeMaxScaled(const AbstractDataGraph* graph) const
    {
        return graph->getGraphRangeXMaxScaled();
 800634a:	680b      	ldr	r3, [r1, #0]
    virtual int getGraphRangeMaxScaled(const AbstractDataGraph* graph) const
 800634c:	4608      	mov	r0, r1
        return graph->getGraphRangeXMaxScaled();
 800634e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006352:	4718      	bx	r3

08006354 <_ZNK8touchgfx17GraphElementGridX17getGraphAreaStartEPKNS_17AbstractDataGraphE>:
    }

    virtual int getGraphAreaStart(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaPaddingTop();
    }
 8006354:	f9b1 0114 	ldrsh.w	r0, [r1, #276]	@ 0x114
 8006358:	4770      	bx	lr

0800635a <_ZNK8touchgfx17GraphElementGridX18getGraphAreaLengthEPKNS_17AbstractDataGraphE>:
 800635a:	f8b1 3114 	ldrh.w	r3, [r1, #276]	@ 0x114
 800635e:	f8b1 211a 	ldrh.w	r2, [r1, #282]	@ 0x11a
 8006362:	f8b1 0042 	ldrh.w	r0, [r1, #66]	@ 0x42
 8006366:	4413      	add	r3, r2
 8006368:	1ac0      	subs	r0, r0, r3

    virtual int getGraphAreaLength(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaHeight();
    }
 800636a:	b200      	sxth	r0, r0
 800636c:	4770      	bx	lr

0800636e <_ZNK8touchgfx17GraphElementGridX20getGraphAreaStartPosEPKNS_17AbstractDataGraphE>:

    virtual int getGraphAreaStartPos(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaPaddingLeft();
    }
 800636e:	f9b1 0116 	ldrsh.w	r0, [r1, #278]	@ 0x116
 8006372:	4770      	bx	lr

08006374 <_ZNK8touchgfx17GraphElementGridX18getGraphAreaEndPosEPKNS_17AbstractDataGraphE>:
        return graphArea.getWidth() - (leftPadding + rightPadding);
 8006374:	f8b1 3116 	ldrh.w	r3, [r1, #278]	@ 0x116
 8006378:	f8b1 2118 	ldrh.w	r2, [r1, #280]	@ 0x118
 800637c:	f8b1 0040 	ldrh.w	r0, [r1, #64]	@ 0x40
 8006380:	4413      	add	r3, r2
 8006382:	1ac0      	subs	r0, r0, r3

    virtual int getGraphAreaEndPos(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaWidth();
    }
 8006384:	b200      	sxth	r0, r0
 8006386:	4770      	bx	lr

08006388 <_ZNK8touchgfx17GraphElementGridX15valueToScreenQ5EPKNS_17AbstractDataGraphEi>:
        return graph->valueToScreenXQ5(x);
 8006388:	680b      	ldr	r3, [r1, #0]

    virtual CWRUtil::Q5 valueToScreenQ5(const AbstractDataGraph* graph, int value) const
 800638a:	4608      	mov	r0, r1
        return graph->valueToScreenXQ5(x);
 800638c:	4611      	mov	r1, r2
 800638e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8006392:	4718      	bx	r3

08006394 <_ZNK8touchgfx17GraphElementGridY13enclosingAreaEPKNS_17AbstractDataGraphE>:
    {
        return convertToGraphScaleY(graph, gridInterval, dataScale);
    }

protected:
    virtual Rect enclosingArea(const AbstractDataGraph* graph) const
 8006394:	b530      	push	{r4, r5, lr}
        return leftPadding;
 8006396:	f9b2 5116 	ldrsh.w	r5, [r2, #278]	@ 0x116
        return graphArea.getWidth() - (leftPadding + rightPadding);
 800639a:	f8b2 4118 	ldrh.w	r4, [r2, #280]	@ 0x118
 800639e:	f8b2 1040 	ldrh.w	r1, [r2, #64]	@ 0x40
 80063a2:	442c      	add	r4, r5
        return rect.height;
 80063a4:	f9b2 2042 	ldrsh.w	r2, [r2, #66]	@ 0x42
 80063a8:	8005      	strh	r5, [r0, #0]
 80063aa:	1b09      	subs	r1, r1, r4
 80063ac:	2400      	movs	r4, #0
 80063ae:	80c2      	strh	r2, [r0, #6]
 80063b0:	8044      	strh	r4, [r0, #2]
 80063b2:	8081      	strh	r1, [r0, #4]
    {
        return Rect(graph->getGraphAreaPaddingLeft(), 0, graph->getGraphAreaWidth(), graph->getGraphAreaHeightIncludingPadding());
    }
 80063b4:	bd30      	pop	{r4, r5, pc}

080063b6 <_ZNK8touchgfx17GraphElementGridY8lineRectEssss>:
 80063b6:	8002      	strh	r2, [r0, #0]
 80063b8:	8083      	strh	r3, [r0, #4]
 80063ba:	f9bd 2000 	ldrsh.w	r2, [sp]
 80063be:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80063c2:	8042      	strh	r2, [r0, #2]
 80063c4:	80c3      	strh	r3, [r0, #6]

    virtual Rect lineRect(int16_t start, int16_t length, int16_t pos, int16_t width) const
    {
        return Rect(start, pos, length, width);
    }
 80063c6:	4770      	bx	lr

080063c8 <_ZNK8touchgfx17GraphElementGridY22getGraphRangeMinScaledEPKNS_17AbstractDataGraphE>:

    virtual int getGraphRangeMinScaled(const AbstractDataGraph* graph) const
    {
        return graph->getGraphRangeYMinScaled();
 80063c8:	680b      	ldr	r3, [r1, #0]
    virtual int getGraphRangeMinScaled(const AbstractDataGraph* graph) const
 80063ca:	4608      	mov	r0, r1
        return graph->getGraphRangeYMinScaled();
 80063cc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80063d0:	4718      	bx	r3

080063d2 <_ZNK8touchgfx17GraphElementGridY22getGraphRangeMaxScaledEPKNS_17AbstractDataGraphE>:
    }

    virtual int getGraphRangeMaxScaled(const AbstractDataGraph* graph) const
    {
        return graph->getGraphRangeYMaxScaled();
 80063d2:	680b      	ldr	r3, [r1, #0]
    virtual int getGraphRangeMaxScaled(const AbstractDataGraph* graph) const
 80063d4:	4608      	mov	r0, r1
        return graph->getGraphRangeYMaxScaled();
 80063d6:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80063da:	4718      	bx	r3

080063dc <_ZNK8touchgfx17GraphElementGridY17getGraphAreaStartEPKNS_17AbstractDataGraphE>:
    }

    virtual int getGraphAreaStart(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaPaddingLeft();
    }
 80063dc:	f9b1 0116 	ldrsh.w	r0, [r1, #278]	@ 0x116
 80063e0:	4770      	bx	lr

080063e2 <_ZNK8touchgfx17GraphElementGridY18getGraphAreaLengthEPKNS_17AbstractDataGraphE>:
 80063e2:	f8b1 3116 	ldrh.w	r3, [r1, #278]	@ 0x116
 80063e6:	f8b1 2118 	ldrh.w	r2, [r1, #280]	@ 0x118
 80063ea:	f8b1 0040 	ldrh.w	r0, [r1, #64]	@ 0x40
 80063ee:	4413      	add	r3, r2
 80063f0:	1ac0      	subs	r0, r0, r3

    virtual int getGraphAreaLength(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaWidth();
    }
 80063f2:	b200      	sxth	r0, r0
 80063f4:	4770      	bx	lr

080063f6 <_ZNK8touchgfx17GraphElementGridY20getGraphAreaStartPosEPKNS_17AbstractDataGraphE>:

    virtual int getGraphAreaStartPos(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaPaddingTop();
    }
 80063f6:	f9b1 0114 	ldrsh.w	r0, [r1, #276]	@ 0x114
 80063fa:	4770      	bx	lr

080063fc <_ZNK8touchgfx17GraphElementGridY18getGraphAreaEndPosEPKNS_17AbstractDataGraphE>:
        return graphArea.getHeight() - (topPadding + bottomPadding);
 80063fc:	f8b1 3114 	ldrh.w	r3, [r1, #276]	@ 0x114
 8006400:	f8b1 211a 	ldrh.w	r2, [r1, #282]	@ 0x11a
 8006404:	f8b1 0042 	ldrh.w	r0, [r1, #66]	@ 0x42
 8006408:	4413      	add	r3, r2
 800640a:	1ac0      	subs	r0, r0, r3

    virtual int getGraphAreaEndPos(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaHeight();
    }
 800640c:	b200      	sxth	r0, r0
 800640e:	4770      	bx	lr

08006410 <_ZNK8touchgfx17GraphElementGridY15valueToScreenQ5EPKNS_17AbstractDataGraphEi>:
        return graph->valueToScreenYQ5(y);
 8006410:	680b      	ldr	r3, [r1, #0]

    virtual CWRUtil::Q5 valueToScreenQ5(const AbstractDataGraph* graph, int value) const
 8006412:	4608      	mov	r0, r1
        return graph->valueToScreenYQ5(y);
 8006414:	4611      	mov	r1, r2
 8006416:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800641a:	4718      	bx	r3

0800641c <_ZN8touchgfx21AbstractPainterBitmapD1Ev>:
    }

    /** Destructor */
    virtual ~AbstractPainterBitmap()
    {
    }
 800641c:	4770      	bx	lr

0800641e <_ZN8touchgfx21AbstractPainterBitmap8setTiledEb>:
     *
     * @see setOffset
     */
    virtual void setTiled(bool tiled)
    {
        isTiled = tiled;
 800641e:	7601      	strb	r1, [r0, #24]
    }
 8006420:	4770      	bx	lr

08006422 <_ZN8touchgfx21AbstractPainterBitmap9setOffsetEss>:
     *
     * @see setTiled
     */
    virtual void setOffset(int16_t x, int16_t y)
    {
        xOffset = x;
 8006422:	8281      	strh	r1, [r0, #20]
        yOffset = y;
 8006424:	82c2      	strh	r2, [r0, #22]
    }
 8006426:	4770      	bx	lr

08006428 <_ZN8touchgfx8TextArea8setWidthEs>:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
    {
    }

    virtual void setWidth(int16_t width)
 8006428:	b530      	push	{r4, r5, lr}
 800642a:	b085      	sub	sp, #20
    {
        Widget::setWidth(width);
        boundingArea = calculateBoundingArea();
 800642c:	6803      	ldr	r3, [r0, #0]
    virtual void setWidth(int16_t width)
 800642e:	4604      	mov	r4, r0
        rect.width = width;
 8006430:	8101      	strh	r1, [r0, #8]
        boundingArea = calculateBoundingArea();
 8006432:	466d      	mov	r5, sp
 8006434:	4601      	mov	r1, r0
 8006436:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800643a:	343c      	adds	r4, #60	@ 0x3c
 800643c:	4628      	mov	r0, r5
 800643e:	4798      	blx	r3
 8006440:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006444:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 8006448:	b005      	add	sp, #20
 800644a:	bd30      	pop	{r4, r5, pc}

0800644c <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 800644c:	b530      	push	{r4, r5, lr}
 800644e:	b085      	sub	sp, #20
    {
        Widget::setHeight(height);
        boundingArea = calculateBoundingArea();
 8006450:	6803      	ldr	r3, [r0, #0]
    virtual void setHeight(int16_t height)
 8006452:	4604      	mov	r4, r0
        rect.height = height;
 8006454:	8141      	strh	r1, [r0, #10]
        boundingArea = calculateBoundingArea();
 8006456:	466d      	mov	r5, sp
 8006458:	4601      	mov	r1, r0
 800645a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800645e:	343c      	adds	r4, #60	@ 0x3c
 8006460:	4628      	mov	r0, r5
 8006462:	4798      	blx	r3
 8006464:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006468:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 800646c:	b005      	add	sp, #20
 800646e:	bd30      	pop	{r4, r5, pc}

08006470 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 8006470:	2200      	movs	r2, #0
 8006472:	8002      	strh	r2, [r0, #0]
 8006474:	8042      	strh	r2, [r0, #2]
 8006476:	8082      	strh	r2, [r0, #4]
 8006478:	80c2      	strh	r2, [r0, #6]

    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 800647a:	4770      	bx	lr

0800647c <_ZN8touchgfx8TextArea8setAlphaEh>:
    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 800647c:	f880 1036 	strb.w	r1, [r0, #54]	@ 0x36
    }
 8006480:	4770      	bx	lr

08006482 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
    {
        setX(x);
 8006482:	6803      	ldr	r3, [r0, #0]
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8006484:	b570      	push	{r4, r5, r6, lr}
 8006486:	4604      	mov	r4, r0
        setX(x);
 8006488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 800648a:	4615      	mov	r5, r2
        setX(x);
 800648c:	4798      	blx	r3
        setBaselineY(baselineY);
 800648e:	6823      	ldr	r3, [r4, #0]
 8006490:	4620      	mov	r0, r4
 8006492:	4629      	mov	r1, r5
 8006494:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
    }
 8006496:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setBaselineY(baselineY);
 800649a:	4718      	bx	r3

0800649c <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
    {
        return 0;
    }
 800649c:	2000      	movs	r0, #0
 800649e:	4770      	bx	lr

080064a0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
    {
        return wc1;
    }
 80064a0:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 80064a2:	4770      	bx	lr

080064a4 <_ZN15Screen1ViewBase11setupScreenEv>:
}

void Screen1ViewBase::setupScreen()
{

}
 80064a4:	4770      	bx	lr

080064a6 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80064a6:	4770      	bx	lr

080064a8 <_ZN8touchgfx11GraphScrollILs100EED1Ev>:
 * the new values added to the graph.
 *
 * @tparam CAPACITY The maximum number of data points on the graph.
 */
template <int16_t CAPACITY>
class GraphScroll : public GraphScrollData
 80064a8:	4770      	bx	lr

080064aa <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 80064aa:	4770      	bx	lr

080064ac <_ZN8touchgfx17GraphElementGridYD1Ev>:
class GraphElementGridY : public GraphElementGridBase
 80064ac:	4770      	bx	lr

080064ae <_ZN8touchgfx17GraphElementGridXD1Ev>:
class GraphElementGridX : public GraphElementGridBase
 80064ae:	4770      	bx	lr

080064b0 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 80064b0:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 80064b2:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 80064b4:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 80064b6:	68c2      	ldr	r2, [r0, #12]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	1055      	asrs	r5, r2, #1
 80064bc:	eb04 0062 	add.w	r0, r4, r2, asr #1
 80064c0:	07d2      	lsls	r2, r2, #31
 80064c2:	bf48      	it	mi
 80064c4:	5962      	ldrmi	r2, [r4, r5]
    }
 80064c6:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 80064c8:	bf48      	it	mi
 80064ca:	58d3      	ldrmi	r3, [r2, r3]
 80064cc:	4718      	bx	r3

080064ce <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 80064ce:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 80064d0:	6840      	ldr	r0, [r0, #4]
 80064d2:	b130      	cbz	r0, 80064e2 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 80064d4:	689a      	ldr	r2, [r3, #8]
 80064d6:	b91a      	cbnz	r2, 80064e0 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x12>
 80064d8:	68d8      	ldr	r0, [r3, #12]
 80064da:	f000 0001 	and.w	r0, r0, #1
 80064de:	4770      	bx	lr
 80064e0:	2001      	movs	r0, #1
    }
 80064e2:	4770      	bx	lr

080064e4 <_ZN8touchgfx21AbstractPainterBitmapD0Ev>:
    virtual ~AbstractPainterBitmap()
 80064e4:	b510      	push	{r4, lr}
 80064e6:	4604      	mov	r4, r0
    }
 80064e8:	2120      	movs	r1, #32
 80064ea:	f01f fab0 	bl	8025a4e <_ZdlPvj>
 80064ee:	4620      	mov	r0, r4
 80064f0:	bd10      	pop	{r4, pc}

080064f2 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 80064f2:	b510      	push	{r4, lr}
 80064f4:	4604      	mov	r4, r0
 80064f6:	214c      	movs	r1, #76	@ 0x4c
 80064f8:	f01f faa9 	bl	8025a4e <_ZdlPvj>
 80064fc:	4620      	mov	r0, r4
 80064fe:	bd10      	pop	{r4, pc}

08006500 <_ZN8touchgfx17GraphElementGridXD0Ev>:
 8006500:	b510      	push	{r4, lr}
 8006502:	4604      	mov	r4, r0
 8006504:	2140      	movs	r1, #64	@ 0x40
 8006506:	f01f faa2 	bl	8025a4e <_ZdlPvj>
 800650a:	4620      	mov	r0, r4
 800650c:	bd10      	pop	{r4, pc}

0800650e <_ZN8touchgfx17GraphElementGridYD0Ev>:
class GraphElementGridY : public GraphElementGridBase
 800650e:	b510      	push	{r4, lr}
 8006510:	4604      	mov	r4, r0
 8006512:	2140      	movs	r1, #64	@ 0x40
 8006514:	f01f fa9b 	bl	8025a4e <_ZdlPvj>
 8006518:	4620      	mov	r0, r4
 800651a:	bd10      	pop	{r4, pc}

0800651c <_ZN8touchgfx11GraphScrollILs100EED0Ev>:
 800651c:	b510      	push	{r4, lr}
 800651e:	4604      	mov	r4, r0
 8006520:	f44f 7138 	mov.w	r1, #736	@ 0x2e0
 8006524:	f01f fa93 	bl	8025a4e <_ZdlPvj>
 8006528:	4620      	mov	r0, r4
 800652a:	bd10      	pop	{r4, pc}

0800652c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800652c:	b510      	push	{r4, lr}
 800652e:	4604      	mov	r4, r0
 8006530:	2110      	movs	r1, #16
 8006532:	f01f fa8c 	bl	8025a4e <_ZdlPvj>
 8006536:	4620      	mov	r0, r4
 8006538:	bd10      	pop	{r4, pc}

0800653a <_ZNK8touchgfx17GraphElementGridX30getCorrectlyScaledGridIntervalEPKNS_17AbstractDataGraphE>:
    virtual int getCorrectlyScaledGridInterval(const AbstractDataGraph* graph) const
 800653a:	b538      	push	{r3, r4, r5, lr}
 800653c:	4603      	mov	r3, r0
 800653e:	4608      	mov	r0, r1
        return convertToGraphScaleX(graph, gridInterval, dataScale);
 8006540:	e9d3 540c 	ldrd	r5, r4, [r3, #48]	@ 0x30
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleX());
 8006544:	680b      	ldr	r3, [r1, #0]
 8006546:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800654a:	4798      	blx	r3
 800654c:	4629      	mov	r1, r5
 800654e:	4602      	mov	r2, r0
 8006550:	4620      	mov	r0, r4
    }
 8006552:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleX());
 8006556:	f00b bfe3 	b.w	8012520 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>

0800655a <_ZNK8touchgfx17GraphElementGridY30getCorrectlyScaledGridIntervalEPKNS_17AbstractDataGraphE>:
    virtual int getCorrectlyScaledGridInterval(const AbstractDataGraph* graph) const
 800655a:	b538      	push	{r3, r4, r5, lr}
 800655c:	4603      	mov	r3, r0
 800655e:	4608      	mov	r0, r1
        return convertToGraphScaleY(graph, gridInterval, dataScale);
 8006560:	e9d3 540c 	ldrd	r5, r4, [r3, #48]	@ 0x30
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleY());
 8006564:	680b      	ldr	r3, [r1, #0]
 8006566:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800656a:	4798      	blx	r3
 800656c:	4629      	mov	r1, r5
 800656e:	4602      	mov	r2, r0
 8006570:	4620      	mov	r0, r4
    }
 8006572:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleY());
 8006576:	f00b bfd3 	b.w	8012520 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>

0800657a <_ZN8touchgfx21AbstractPainterBitmap9setBitmapERKNS_6BitmapE>:
    virtual void setBitmap(const Bitmap& bmp)
 800657a:	b570      	push	{r4, r5, r6, lr}
        bitmap = bmp;
 800657c:	880b      	ldrh	r3, [r1, #0]
 800657e:	4605      	mov	r5, r0
    virtual void setBitmap(const Bitmap& bmp)
 8006580:	4604      	mov	r4, r0
        bitmap = bmp;
 8006582:	f825 3f04 	strh.w	r3, [r5, #4]!
        bitmapFormat = bitmap.getFormat();
 8006586:	4628      	mov	r0, r5
 8006588:	f013 fa02 	bl	8019990 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800658c:	71a0      	strb	r0, [r4, #6]
     *
     * @return a Rect describing the dimensions of this Bitmap.
     */
    Rect getRect() const
    {
        return Rect(0, 0, getWidth(), getHeight());
 800658e:	4628      	mov	r0, r5
 8006590:	f013 f88e 	bl	80196b0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8006594:	4606      	mov	r6, r0
 8006596:	4628      	mov	r0, r5
 8006598:	f013 f8be 	bl	8019718 <_ZNK8touchgfx6Bitmap9getHeightEv>
        bitmapRect = bitmap.getRect();
 800659c:	2300      	movs	r3, #0
 800659e:	81e0      	strh	r0, [r4, #14]
        DisplayTransformation::transformDisplayToFrameBuffer(bitmapRect);
 80065a0:	f104 0008 	add.w	r0, r4, #8
        bitmapRect = bitmap.getRect();
 80065a4:	60a3      	str	r3, [r4, #8]
 80065a6:	81a6      	strh	r6, [r4, #12]
        DisplayTransformation::transformDisplayToFrameBuffer(bitmapRect);
 80065a8:	f00f fbdc 	bl	8015d64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
        bitmapData = bitmap.getData();
 80065ac:	4628      	mov	r0, r5
 80065ae:	f013 f96b 	bl	8019888 <_ZNK8touchgfx6Bitmap7getDataEv>
 80065b2:	6120      	str	r0, [r4, #16]
    }
 80065b4:	bd70      	pop	{r4, r5, r6, pc}
	...

080065b8 <_ZN15Screen1ViewBaseD1Ev>:
Screen1ViewBase::~Screen1ViewBase()
 80065b8:	4b03      	ldr	r3, [pc, #12]	@ (80065c8 <_ZN15Screen1ViewBaseD1Ev+0x10>)
 80065ba:	b510      	push	{r4, lr}
 80065bc:	4604      	mov	r4, r0
 80065be:	6003      	str	r3, [r0, #0]
    touchgfx::CanvasWidgetRenderer::resetBuffer();
 80065c0:	f00e f88c 	bl	80146dc <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>
}
 80065c4:	4620      	mov	r0, r4
 80065c6:	bd10      	pop	{r4, pc}
 80065c8:	080298b0 	.word	0x080298b0

080065cc <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 80065cc:	4b06      	ldr	r3, [pc, #24]	@ (80065e8 <_ZN15Screen1ViewBaseD0Ev+0x1c>)
 80065ce:	b510      	push	{r4, lr}
 80065d0:	4604      	mov	r4, r0
 80065d2:	6003      	str	r3, [r0, #0]
    touchgfx::CanvasWidgetRenderer::resetBuffer();
 80065d4:	f00e f882 	bl	80146dc <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>
}
 80065d8:	f243 51f4 	movw	r1, #13812	@ 0x35f4
 80065dc:	4620      	mov	r0, r4
 80065de:	f01f fa36 	bl	8025a4e <_ZdlPvj>
 80065e2:	4620      	mov	r0, r4
 80065e4:	bd10      	pop	{r4, pc}
 80065e6:	bf00      	nop
 80065e8:	080298b0 	.word	0x080298b0

080065ec <_ZNK8touchgfx17AbstractDataGraph17invalidateContentEv>:
    virtual void invalidateContent() const
 80065ec:	b508      	push	{r3, lr}
        if (alpha > 0)
 80065ee:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 80065f2:	b10b      	cbz	r3, 80065f8 <_ZNK8touchgfx17AbstractDataGraph17invalidateContentEv+0xc>
            Container::invalidateContent();
 80065f4:	f7fb fecd 	bl	8002392 <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 80065f8:	bd08      	pop	{r3, pc}

080065fa <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
    virtual void invalidateContent() const
 80065fa:	b508      	push	{r3, lr}
        Widget::invalidateContent();
 80065fc:	f7fb fec9 	bl	8002392 <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 8006600:	bd08      	pop	{r3, pc}
	...

08006604 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs>:
        assert(index >= 0 && index < usedCapacity);
 8006604:	1e0a      	subs	r2, r1, #0
    virtual int indexToDataPointYScaled(int16_t index) const
 8006606:	b510      	push	{r4, lr}
        assert(index >= 0 && index < usedCapacity);
 8006608:	db03      	blt.n	8006612 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0xe>
 800660a:	f9b0 411e 	ldrsh.w	r4, [r0, #286]	@ 0x11e
 800660e:	4294      	cmp	r4, r2
 8006610:	dc06      	bgt.n	8006620 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x1c>
 8006612:	4b08      	ldr	r3, [pc, #32]	@ (8006634 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x30>)
 8006614:	f240 6139 	movw	r1, #1593	@ 0x639
 8006618:	4a07      	ldr	r2, [pc, #28]	@ (8006638 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x34>)
 800661a:	4808      	ldr	r0, [pc, #32]	@ (800663c <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x38>)
 800661c:	f01f fa46 	bl	8025aac <__assert_func>
        return yValues[dataIndex(index)];
 8006620:	6803      	ldr	r3, [r0, #0]
 8006622:	f8d0 4144 	ldr.w	r4, [r0, #324]	@ 0x144
 8006626:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 800662a:	4798      	blx	r3
    }
 800662c:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8006630:	bd10      	pop	{r4, pc}
 8006632:	bf00      	nop
 8006634:	08029250 	.word	0x08029250
 8006638:	08029273 	.word	0x08029273
 800663c:	080292c2 	.word	0x080292c2

08006640 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs>:
        assert(index >= 0 && index < usedCapacity);
 8006640:	1e0b      	subs	r3, r1, #0
    virtual int indexToDataPointXScaled(int16_t index) const
 8006642:	b510      	push	{r4, lr}
 8006644:	4604      	mov	r4, r0
        assert(index >= 0 && index < usedCapacity);
 8006646:	db03      	blt.n	8006650 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x10>
 8006648:	f9b0 211e 	ldrsh.w	r2, [r0, #286]	@ 0x11e
 800664c:	429a      	cmp	r2, r3
 800664e:	dc06      	bgt.n	800665e <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x1e>
 8006650:	4b07      	ldr	r3, [pc, #28]	@ (8006670 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x30>)
 8006652:	f240 6133 	movw	r1, #1587	@ 0x633
 8006656:	4a07      	ldr	r2, [pc, #28]	@ (8006674 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x34>)
 8006658:	4807      	ldr	r0, [pc, #28]	@ (8006678 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x38>)
 800665a:	f01f fa27 	bl	8025aac <__assert_func>
        return (indexToGlobalIndex(index) * xAxisFactor) + xAxisOffset;
 800665e:	6803      	ldr	r3, [r0, #0]
 8006660:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 8006664:	4798      	blx	r3
 8006666:	e9d4 234f 	ldrd	r2, r3, [r4, #316]	@ 0x13c
    }
 800666a:	fb02 3000 	mla	r0, r2, r0, r3
 800666e:	bd10      	pop	{r4, pc}
 8006670:	08029250 	.word	0x08029250
 8006674:	0802931f 	.word	0x0802931f
 8006678:	080292c2 	.word	0x080292c2

0800667c <_ZN8touchgfx8TextArea12setBaselineYEs>:
        setY(baselineY - getTypedText().getFont()->getBaseline());
 800667c:	6803      	ldr	r3, [r0, #0]
    virtual void setBaselineY(int16_t baselineY)
 800667e:	b570      	push	{r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8006680:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
    virtual void setBaselineY(int16_t baselineY)
 8006682:	4604      	mov	r4, r0
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8006684:	4b11      	ldr	r3, [pc, #68]	@ (80066cc <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8006686:	b28d      	uxth	r5, r1
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	b92b      	cbnz	r3, 8006698 <_ZN8touchgfx8TextArea12setBaselineYEs+0x1c>
 800668c:	4b10      	ldr	r3, [pc, #64]	@ (80066d0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 800668e:	216c      	movs	r1, #108	@ 0x6c
 8006690:	4a10      	ldr	r2, [pc, #64]	@ (80066d4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8006692:	4811      	ldr	r0, [pc, #68]	@ (80066d8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 8006694:	f01f fa0a 	bl	8025aac <__assert_func>
        return typedTextId < numberOfTypedTexts;
 8006698:	4910      	ldr	r1, [pc, #64]	@ (80066dc <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 800669a:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800669c:	8809      	ldrh	r1, [r1, #0]
 800669e:	4291      	cmp	r1, r2
 80066a0:	d803      	bhi.n	80066aa <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 80066a2:	4b0f      	ldr	r3, [pc, #60]	@ (80066e0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 80066a4:	216d      	movs	r1, #109	@ 0x6d
 80066a6:	4a0b      	ldr	r2, [pc, #44]	@ (80066d4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 80066a8:	e7f3      	b.n	8006692 <_ZN8touchgfx8TextArea12setBaselineYEs+0x16>
        return fonts[typedTexts[typedTextId].fontIdx];
 80066aa:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 80066ae:	4b0d      	ldr	r3, [pc, #52]	@ (80066e4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80066b6:	6803      	ldr	r3, [r0, #0]
 80066b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066ba:	4798      	blx	r3
 80066bc:	1a29      	subs	r1, r5, r0
 80066be:	4633      	mov	r3, r6
 80066c0:	4620      	mov	r0, r4
 80066c2:	b209      	sxth	r1, r1
    }
 80066c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 80066c8:	4718      	bx	r3
 80066ca:	bf00      	nop
 80066cc:	20027bec 	.word	0x20027bec
 80066d0:	0802936e 	.word	0x0802936e
 80066d4:	080293b0 	.word	0x080293b0
 80066d8:	080293eb 	.word	0x080293eb
 80066dc:	20027bf0 	.word	0x20027bf0
 80066e0:	08029432 	.word	0x08029432
 80066e4:	20027bf4 	.word	0x20027bf4

080066e8 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &Sc1_button)
 80066e8:	f500 60a1 	add.w	r0, r0, #1288	@ 0x508
 80066ec:	4288      	cmp	r0, r1
{
 80066ee:	b508      	push	{r3, lr}
    if (&src == &Sc1_button)
 80066f0:	d105      	bne.n	80066fe <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x16>
    virtual ~Screen1ViewBase();
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 80066f2:	f00f fc71 	bl	8015fd8 <_ZN8touchgfx11Application11getInstanceEv>
        //Interaction1
        //When Sc1_button clicked change screen to Screen2
        //Go to Screen2 with screen transition towards East
        application().gotoScreen2ScreenCoverTransitionEast();
    }
}
 80066f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotoScreen2ScreenCoverTransitionEast();
 80066fa:	f7ff ba4d 	b.w	8005b98 <_ZN23FrontendApplicationBase36gotoScreen2ScreenCoverTransitionEastEv>
}
 80066fe:	bd08      	pop	{r3, pc}

08006700 <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 8006700:	2200      	movs	r2, #0
 8006702:	f04f 31ff 	mov.w	r1, #4294967295
              text(0)
 8006706:	6082      	str	r2, [r0, #8]
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 8006708:	e9c0 2100 	strd	r2, r1, [r0]
    }
 800670c:	4770      	bx	lr

0800670e <_ZN8touchgfx8Drawable5setXYEss>:
        setX(x);
 800670e:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 8006710:	b570      	push	{r4, r5, r6, lr}
 8006712:	4604      	mov	r4, r0
        setX(x);
 8006714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    void setXY(int16_t x, int16_t y)
 8006716:	4615      	mov	r5, r2
        setX(x);
 8006718:	4798      	blx	r3
        setY(y);
 800671a:	6823      	ldr	r3, [r4, #0]
 800671c:	4620      	mov	r0, r4
 800671e:	4629      	mov	r1, r5
 8006720:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    }
 8006722:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 8006726:	4718      	bx	r3

08006728 <_ZN8touchgfx6WidgetC1Ev>:
 8006728:	2200      	movs	r2, #0
 800672a:	e9c0 2201 	strd	r2, r2, [r0, #4]
 800672e:	e9c0 2203 	strd	r2, r2, [r0, #12]
          nextSibling(0),
 8006732:	e9c0 2205 	strd	r2, r2, [r0, #20]
          cachedAbsX(0),
 8006736:	e9c0 2207 	strd	r2, r2, [r0, #28]
          touchable(false),
 800673a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800673e:	8482      	strh	r2, [r0, #36]	@ 0x24
class Widget : public Drawable
 8006740:	4a01      	ldr	r2, [pc, #4]	@ (8006748 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8006742:	6002      	str	r2, [r0, #0]
 8006744:	4770      	bx	lr
 8006746:	bf00      	nop
 8006748:	08029478 	.word	0x08029478

0800674c <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>:
     * @param  factor2 The second factor.
     * @param  divisor The divisor.
     *
     * @return factor1 * factor2 / divisor as a Q5
     */
    static Q5 muldiv_toQ5(int32_t factor1, int32_t factor2, int32_t divisor)
 800674c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    {
        int32_t remainder;
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
 800674e:	ab01      	add	r3, sp, #4
    static Q5 muldiv_toQ5(int32_t factor1, int32_t factor2, int32_t divisor)
 8006750:	4615      	mov	r5, r2
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
 8006752:	f010 fea0 	bl	8017496 <_ZN8touchgfx6muldivElllRl>
        if (result >= 0)
 8006756:	2800      	cmp	r0, #0
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
 8006758:	462a      	mov	r2, r5
 800675a:	9901      	ldr	r1, [sp, #4]
 800675c:	ea4f 1440 	mov.w	r4, r0, lsl #5
 8006760:	f04f 0020 	mov.w	r0, #32
        if (result >= 0)
 8006764:	db04      	blt.n	8006770 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll+0x24>
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
 8006766:	f010 feb5 	bl	80174d4 <_ZN8touchgfx6muldivElll>
            return Q5(v + q5.v);
 800676a:	4420      	add	r0, r4
        {
            return toQ5(result) + muldivQ5(Q5(Rasterizer::POLY_BASE_SIZE), Q5(remainder), Q5(divisor));
        }
        return toQ5(result) - muldivQ5(Q5(Rasterizer::POLY_BASE_SIZE), Q5(remainder), Q5(divisor));
    }
 800676c:	b003      	add	sp, #12
 800676e:	bd30      	pop	{r4, r5, pc}
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
 8006770:	f010 feb0 	bl	80174d4 <_ZN8touchgfx6muldivElll>
            return Q5(v - q5.v);
 8006774:	1a20      	subs	r0, r4, r0
        explicit Q5(int i)
 8006776:	e7f9      	b.n	800676c <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll+0x20>

08006778 <_ZNK8touchgfx17AbstractDataGraph16valueToScreenYQ5Ei>:
    virtual CWRUtil::Q5 valueToScreenYQ5(int y) const
 8006778:	b570      	push	{r4, r5, r6, lr}
        return graphArea.getHeight() - (topPadding + bottomPadding);
 800677a:	f8b0 311a 	ldrh.w	r3, [r0, #282]	@ 0x11a
    virtual CWRUtil::Q5 valueToScreenYQ5(int y) const
 800677e:	460e      	mov	r6, r1
        return graphArea.getHeight() - (topPadding + bottomPadding);
 8006780:	f9b0 4114 	ldrsh.w	r4, [r0, #276]	@ 0x114
 8006784:	f8b0 5042 	ldrh.w	r5, [r0, #66]	@ 0x42
 8006788:	4423      	add	r3, r4
 800678a:	1aed      	subs	r5, r5, r3
        return CWRUtil::toQ5(graphAreaHeight + topPadding - 1) - CWRUtil::muldiv_toQ5(y - graphRangeMinY, graphAreaHeight - 1, graphRangeMaxY - graphRangeMinY);
 800678c:	b22d      	sxth	r5, r5
 800678e:	442c      	add	r4, r5
 8006790:	1e69      	subs	r1, r5, #1
 8006792:	e9d0 324d 	ldrd	r3, r2, [r0, #308]	@ 0x134
 8006796:	3c01      	subs	r4, #1
 8006798:	1ad2      	subs	r2, r2, r3
 800679a:	1af0      	subs	r0, r6, r3
 800679c:	f7ff ffd6 	bl	800674c <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
    }
 80067a0:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 80067a4:	bd70      	pop	{r4, r5, r6, pc}

080067a6 <_ZNK8touchgfx17AbstractDataGraph16valueToScreenXQ5Ei>:
    virtual CWRUtil::Q5 valueToScreenXQ5(int x) const
 80067a6:	b538      	push	{r3, r4, r5, lr}
 80067a8:	4604      	mov	r4, r0
 80067aa:	460d      	mov	r5, r1
        return graphArea.getWidth() - (leftPadding + rightPadding);
 80067ac:	f8b4 3116 	ldrh.w	r3, [r4, #278]	@ 0x116
 80067b0:	f8b4 1118 	ldrh.w	r1, [r4, #280]	@ 0x118
 80067b4:	440b      	add	r3, r1
 80067b6:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 80067ba:	1ac9      	subs	r1, r1, r3
        return CWRUtil::muldiv_toQ5(x - graphRangeMinX, getGraphAreaWidth() - 1, graphRangeMaxX - graphRangeMinX) + CWRUtil::toQ5(leftPadding);
 80067bc:	e9d0 024b 	ldrd	r0, r2, [r0, #300]	@ 0x12c
 80067c0:	b209      	sxth	r1, r1
 80067c2:	1a12      	subs	r2, r2, r0
 80067c4:	1a28      	subs	r0, r5, r0
 80067c6:	3901      	subs	r1, #1
 80067c8:	f7ff ffc0 	bl	800674c <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
            return Q5(v + q5.v);
 80067cc:	f9b4 3116 	ldrsh.w	r3, [r4, #278]	@ 0x116
    }
 80067d0:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80067d4:	bd38      	pop	{r3, r4, r5, pc}
	...

080067d8 <_ZN8touchgfx20GraphElementGridBaseC1Ev>:
    GraphElementGridBase()
 80067d8:	b510      	push	{r4, lr}
 80067da:	4604      	mov	r4, r0
        : CanvasWidget()
 80067dc:	f00a fef2 	bl	80115c4 <_ZN8touchgfx12CanvasWidgetC1Ev>
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 80067e0:	4a06      	ldr	r2, [pc, #24]	@ (80067fc <_ZN8touchgfx20GraphElementGridBaseC1Ev+0x24>)
        : color(col)
 80067e2:	2300      	movs	r3, #0
 80067e4:	210a      	movs	r1, #10
    }
 80067e6:	4620      	mov	r0, r4
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 80067e8:	6022      	str	r2, [r4, #0]
 80067ea:	2201      	movs	r2, #1
 80067ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80067ee:	f884 2038 	strb.w	r2, [r4, #56]	@ 0x38
 80067f2:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80067f4:	e9c4 210c 	strd	r2, r1, [r4, #48]	@ 0x30
    }
 80067f8:	bd10      	pop	{r4, pc}
 80067fa:	bf00      	nop
 80067fc:	0802ac18 	.word	0x0802ac18

08006800 <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase() :
 8006800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006804:	4604      	mov	r4, r0
 8006806:	b097      	sub	sp, #92	@ 0x5c
        : presenter(0)
 8006808:	2500      	movs	r5, #0
 800680a:	f011 f80d 	bl	8017828 <_ZN8touchgfx6ScreenC1Ev>
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 800680e:	46a1      	mov	r9, r4
 8006810:	4be4      	ldr	r3, [pc, #912]	@ (8006ba4 <_ZN15Screen1ViewBaseC1Ev+0x3a4>)
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 8006812:	4629      	mov	r1, r5
 8006814:	2226      	movs	r2, #38	@ 0x26
 8006816:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8006818:	f104 086c 	add.w	r8, r4, #108	@ 0x6c
 800681c:	f849 3b40 	str.w	r3, [r9], #64
 8006820:	4648      	mov	r0, r9
 8006822:	f01f fbdf 	bl	8025fe4 <memset>
 8006826:	4648      	mov	r0, r9
 8006828:	f7ff ff7e 	bl	8006728 <_ZN8touchgfx6WidgetC1Ev>
 800682c:	26ff      	movs	r6, #255	@ 0xff
 800682e:	4bde      	ldr	r3, [pc, #888]	@ (8006ba8 <_ZN15Screen1ViewBaseC1Ev+0x3a8>)
        : bitmapId(id)
 8006830:	f64f 7aff 	movw	sl, #65535	@ 0xffff
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
        : Widget(), bitmap(bmp), alpha(255)
 8006834:	2226      	movs	r2, #38	@ 0x26
 8006836:	4629      	mov	r1, r5
 8006838:	6423      	str	r3, [r4, #64]	@ 0x40
 800683a:	4640      	mov	r0, r8
 800683c:	f884 6066 	strb.w	r6, [r4, #102]	@ 0x66
 8006840:	f104 0798 	add.w	r7, r4, #152	@ 0x98
 8006844:	66a5      	str	r5, [r4, #104]	@ 0x68
 8006846:	f8ad a050 	strh.w	sl, [sp, #80]	@ 0x50
 800684a:	f01f fbcb 	bl	8025fe4 <memset>
 800684e:	4640      	mov	r0, r8
class GraphElementGridY : public GraphElementGridBase
 8006850:	f8df b390 	ldr.w	fp, [pc, #912]	@ 8006be4 <_ZN15Screen1ViewBaseC1Ev+0x3e4>
 8006854:	f7ff ff68 	bl	8006728 <_ZN8touchgfx6WidgetC1Ev>
 8006858:	4bd4      	ldr	r3, [pc, #848]	@ (8006bac <_ZN15Screen1ViewBaseC1Ev+0x3ac>)
    {
        Image::setBitmap(bmp);
 800685a:	a914      	add	r1, sp, #80	@ 0x50
 800685c:	4640      	mov	r0, r8
        : Widget(), bitmap(bmp), alpha(255)
 800685e:	66e3      	str	r3, [r4, #108]	@ 0x6c
 8006860:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8006864:	f884 6094 	strb.w	r6, [r4, #148]	@ 0x94
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
 8006868:	2601      	movs	r6, #1
 800686a:	f8a4 3092 	strh.w	r3, [r4, #146]	@ 0x92
        Image::setBitmap(bmp);
 800686e:	f00d f830 	bl	80138d2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8006872:	2164      	movs	r1, #100	@ 0x64
 8006874:	4638      	mov	r0, r7
 8006876:	f00b fdef 	bl	8012458 <_ZN8touchgfx17AbstractDataGraphC1Es>
 800687a:	4bcd      	ldr	r3, [pc, #820]	@ (8006bb0 <_ZN15Screen1ViewBaseC1Ev+0x3b0>)
        DynamicDataGraph::setGraphRangeX(0, capacity - 1);
 800687c:	4629      	mov	r1, r5
 800687e:	2263      	movs	r2, #99	@ 0x63
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
 8006880:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
{
public:
    GraphScroll()
        : GraphScrollData(CAPACITY, y)
 8006884:	f504 73f4 	add.w	r3, r4, #488	@ 0x1e8
        DynamicDataGraph::setGraphRangeX(0, capacity - 1);
 8006888:	4638      	mov	r0, r7
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
 800688a:	e9c4 3577 	strd	r3, r5, [r4, #476]	@ 0x1dc
 800688e:	e9c4 6575 	strd	r6, r5, [r4, #468]	@ 0x1d4
        DynamicDataGraph::setGraphRangeX(0, capacity - 1);
 8006892:	f7ff f9fd 	bl	8005c90 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>
 8006896:	4bc7      	ldr	r3, [pc, #796]	@ (8006bb4 <_ZN15Screen1ViewBaseC1Ev+0x3b4>)
        : DynamicDataGraph(capacity, values), current(0)
 8006898:	f8a4 51e4 	strh.w	r5, [r4, #484]	@ 0x1e4
        : GraphScrollData(CAPACITY, y)
 800689c:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 80068a0:	f504 735e 	add.w	r3, r4, #888	@ 0x378
class GraphElementGridX : public GraphElementGridBase
 80068a4:	4618      	mov	r0, r3
 80068a6:	9307      	str	r3, [sp, #28]
 80068a8:	f7ff ff96 	bl	80067d8 <_ZN8touchgfx20GraphElementGridBaseC1Ev>
 80068ac:	f504 736e 	add.w	r3, r4, #952	@ 0x3b8
 80068b0:	4ac1      	ldr	r2, [pc, #772]	@ (8006bb8 <_ZN15Screen1ViewBaseC1Ev+0x3b8>)
class GraphElementGridY : public GraphElementGridBase
 80068b2:	4618      	mov	r0, r3
 80068b4:	9308      	str	r3, [sp, #32]
class GraphElementGridX : public GraphElementGridBase
 80068b6:	f8c4 2378 	str.w	r2, [r4, #888]	@ 0x378
class GraphElementGridY : public GraphElementGridBase
 80068ba:	f7ff ff8d 	bl	80067d8 <_ZN8touchgfx20GraphElementGridBaseC1Ev>
 80068be:	f504 737e 	add.w	r3, r4, #1016	@ 0x3f8
 80068c2:	f8c4 b3b8 	str.w	fp, [r4, #952]	@ 0x3b8
class GraphElementGridX : public GraphElementGridBase
 80068c6:	4618      	mov	r0, r3
 80068c8:	9304      	str	r3, [sp, #16]
 80068ca:	f7ff ff85 	bl	80067d8 <_ZN8touchgfx20GraphElementGridBaseC1Ev>
 80068ce:	f504 6387 	add.w	r3, r4, #1080	@ 0x438
 80068d2:	4ab9      	ldr	r2, [pc, #740]	@ (8006bb8 <_ZN15Screen1ViewBaseC1Ev+0x3b8>)
class GraphElementGridY : public GraphElementGridBase
 80068d4:	4618      	mov	r0, r3
 80068d6:	9305      	str	r3, [sp, #20]
class GraphElementGridX : public GraphElementGridBase
 80068d8:	f8c4 23f8 	str.w	r2, [r4, #1016]	@ 0x3f8
class GraphElementGridY : public GraphElementGridBase
 80068dc:	f7ff ff7c 	bl	80067d8 <_ZN8touchgfx20GraphElementGridBaseC1Ev>
 80068e0:	f504 638f 	add.w	r3, r4, #1144	@ 0x478
 80068e4:	f8c4 b438 	str.w	fp, [r4, #1080]	@ 0x438
 80068e8:	f204 5b44 	addw	fp, r4, #1348	@ 0x544
        : CanvasWidget()
 80068ec:	4618      	mov	r0, r3
 80068ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80068f0:	f00a fe68 	bl	80115c4 <_ZN8touchgfx12CanvasWidgetC1Ev>
        : typedTextId(id)
 80068f4:	4bb1      	ldr	r3, [pc, #708]	@ (8006bbc <_ZN15Screen1ViewBaseC1Ev+0x3bc>)
 80068f6:	f204 42c4 	addw	r2, r4, #1220	@ 0x4c4
 80068fa:	f8a4 a4b4 	strh.w	sl, [r4, #1204]	@ 0x4b4
 80068fe:	f8c4 34b0 	str.w	r3, [r4, #1200]	@ 0x4b0
class GraphLabelsBase : public AbstractGraphDecoration
{
public:
    GraphLabelsBase()
        : AbstractGraphDecoration(),
          dataScale(1), labelInterval(0), labelTypedText(TYPED_TEXT_INVALID), labelRotation(TEXT_ROTATE_0), labelDecimals(0), labelDecimalPoint('.'), majorLabel(0)
 8006902:	232e      	movs	r3, #46	@ 0x2e
 8006904:	4610      	mov	r0, r2
 8006906:	f8c4 54a4 	str.w	r5, [r4, #1188]	@ 0x4a4
 800690a:	f8a4 34bc 	strh.w	r3, [r4, #1212]	@ 0x4bc

/**
 * GraphLabelsY will draw labels along the Y axis at given intervals. By combining two
 * GraphLabelsY it is possible to have different appearance for major and minor y offsets.
 */
class GraphLabelsY : public GraphLabelsBase
 800690e:	4bac      	ldr	r3, [pc, #688]	@ (8006bc0 <_ZN15Screen1ViewBaseC1Ev+0x3c0>)
          dataScale(1), labelInterval(0), labelTypedText(TYPED_TEXT_INVALID), labelRotation(TEXT_ROTATE_0), labelDecimals(0), labelDecimalPoint('.'), majorLabel(0)
 8006910:	f8c4 64a8 	str.w	r6, [r4, #1192]	@ 0x4a8
class GraphLabelsY : public GraphLabelsBase
 8006914:	f8c4 3478 	str.w	r3, [r4, #1144]	@ 0x478
          dataScale(1), labelInterval(0), labelTypedText(TYPED_TEXT_INVALID), labelRotation(TEXT_ROTATE_0), labelDecimals(0), labelDecimalPoint('.'), majorLabel(0)
 8006918:	f8c4 54ac 	str.w	r5, [r4, #1196]	@ 0x4ac
 800691c:	f884 54b8 	strb.w	r5, [r4, #1208]	@ 0x4b8
 8006920:	f8a4 54ba 	strh.w	r5, [r4, #1210]	@ 0x4ba
 8006924:	f8c4 54c0 	str.w	r5, [r4, #1216]	@ 0x4c0
 8006928:	920a      	str	r2, [sp, #40]	@ 0x28
 800692a:	f00a fe4b 	bl	80115c4 <_ZN8touchgfx12CanvasWidgetC1Ev>
 */
class GraphElementLine : public AbstractGraphElement
{
public:
    GraphElementLine()
        : lineWidth(2)
 800692e:	f04f 0202 	mov.w	r2, #2
 8006932:	f204 41f4 	addw	r1, r4, #1268	@ 0x4f4
 8006936:	4ba3      	ldr	r3, [pc, #652]	@ (8006bc4 <_ZN15Screen1ViewBaseC1Ev+0x3c4>)
 8006938:	f884 24f0 	strb.w	r2, [r4, #1264]	@ 0x4f0
     * Initializes a new instance of the PainterRGB565 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB565(colortype color = 0)
        : AbstractPainterRGB565(), AbstractPainterColor(color)
 800693c:	4608      	mov	r0, r1
 800693e:	f8c4 34c4 	str.w	r3, [r4, #1220]	@ 0x4c4
 8006942:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006944:	f7fb fe96 	bl	8002674 <_ZN8touchgfx21AbstractPainterRGB565C1Ev>
 8006948:	4b9f      	ldr	r3, [pc, #636]	@ (8006bc8 <_ZN15Screen1ViewBaseC1Ev+0x3c8>)
 800694a:	f504 61a1 	add.w	r1, r4, #1288	@ 0x508
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
    {
        painterColor = color;
 800694e:	f8c4 5500 	str.w	r5, [r4, #1280]	@ 0x500
 8006952:	f8c4 34f4 	str.w	r3, [r4, #1268]	@ 0x4f4
 8006956:	3324      	adds	r3, #36	@ 0x24
 8006958:	4608      	mov	r0, r1
 800695a:	9103      	str	r1, [sp, #12]
 800695c:	f8c4 34fc 	str.w	r3, [r4, #1276]	@ 0x4fc
 8006960:	f00c ff90 	bl	8013884 <_ZN8touchgfx14ButtonWithIconC1Ev>
 8006964:	4658      	mov	r0, fp
 8006966:	f009 f879 	bl	800fa5c <_ZN8touchgfx12LineProgressC1Ev>
 800696a:	f504 61cf 	add.w	r1, r4, #1656	@ 0x678
 800696e:	f8ad a050 	strh.w	sl, [sp, #80]	@ 0x50
     * Constructor.
     *
     * @param  bmp (Optional) The bitmap to use in the painter.
     */
    PainterRGB565Bitmap(const Bitmap& bmp = Bitmap(BITMAP_INVALID))
        : AbstractPainterRGB565(), AbstractPainterBitmap(bmp)
 8006972:	4608      	mov	r0, r1
 8006974:	9106      	str	r1, [sp, #24]
 8006976:	f7fb fe7d 	bl	8002674 <_ZN8touchgfx21AbstractPainterRGB565C1Ev>
        : bitmap(bmp), bitmapFormat(), bitmapRect(), bitmapData(0), xOffset(0), yOffset(0), isTiled(false)
 800697a:	4b94      	ldr	r3, [pc, #592]	@ (8006bcc <_ZN15Screen1ViewBaseC1Ev+0x3cc>)
        setBitmap(bmp);
 800697c:	a914      	add	r1, sp, #80	@ 0x50
 800697e:	f504 60d0 	add.w	r0, r4, #1664	@ 0x680
        : bitmap(bmp), bitmapFormat(), bitmapRect(), bitmapData(0), xOffset(0), yOffset(0), isTiled(false)
 8006982:	f8c4 3680 	str.w	r3, [r4, #1664]	@ 0x680
 8006986:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 800698a:	f884 5686 	strb.w	r5, [r4, #1670]	@ 0x686
 800698e:	f8a4 3684 	strh.w	r3, [r4, #1668]	@ 0x684
        : x(0), y(0), width(0), height(0)
 8006992:	f8c4 5688 	str.w	r5, [r4, #1672]	@ 0x688
 8006996:	f8c4 568c 	str.w	r5, [r4, #1676]	@ 0x68c
 800699a:	f8c4 5690 	str.w	r5, [r4, #1680]	@ 0x690
 800699e:	f8c4 5694 	str.w	r5, [r4, #1684]	@ 0x694
 80069a2:	f884 5698 	strb.w	r5, [r4, #1688]	@ 0x698
        setBitmap(bmp);
 80069a6:	f7ff fde8 	bl	800657a <_ZN8touchgfx21AbstractPainterBitmap9setBitmapERKNS_6BitmapE>
 80069aa:	4b89      	ldr	r3, [pc, #548]	@ (8006bd0 <_ZN15Screen1ViewBaseC1Ev+0x3d0>)
 80069ac:	f204 61a4 	addw	r1, r4, #1700	@ 0x6a4
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 80069b0:	2226      	movs	r2, #38	@ 0x26
 80069b2:	f8c4 3678 	str.w	r3, [r4, #1656]	@ 0x678
 80069b6:	3324      	adds	r3, #36	@ 0x24
 80069b8:	9102      	str	r1, [sp, #8]
 80069ba:	4629      	mov	r1, r5
 80069bc:	f8c4 3680 	str.w	r3, [r4, #1664]	@ 0x680
 80069c0:	9802      	ldr	r0, [sp, #8]
 80069c2:	f01f fb0f 	bl	8025fe4 <memset>
 80069c6:	9802      	ldr	r0, [sp, #8]
 80069c8:	f7ff feae 	bl	8006728 <_ZN8touchgfx6WidgetC1Ev>
 80069cc:	4b7b      	ldr	r3, [pc, #492]	@ (8006bbc <_ZN15Screen1ViewBaseC1Ev+0x3bc>)
        : pobject(pObject), pmemfun(pmemfun_1)
 80069ce:	4a81      	ldr	r2, [pc, #516]	@ (8006bd4 <_ZN15Screen1ViewBaseC1Ev+0x3d4>)
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 80069d0:	f204 7004 	addw	r0, r4, #1796	@ 0x704
 80069d4:	f8c4 36cc 	str.w	r3, [r4, #1740]	@ 0x6cc
 80069d8:	f44f 037f 	mov.w	r3, #16711680	@ 0xff0000
 80069dc:	f8a4 a6d0 	strh.w	sl, [r4, #1744]	@ 0x6d0
 80069e0:	f642 61e0 	movw	r1, #12000	@ 0x2ee0
 80069e4:	f8c4 36d8 	str.w	r3, [r4, #1752]	@ 0x6d8
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 80069e8:	f104 0a04 	add.w	sl, r4, #4
        : TextAreaWithWildcardBase(), wc1(0)
 80069ec:	4b7a      	ldr	r3, [pc, #488]	@ (8006bd8 <_ZN15Screen1ViewBaseC1Ev+0x3d8>)
        : color(col)
 80069ee:	f8c4 56d4 	str.w	r5, [r4, #1748]	@ 0x6d4
 80069f2:	f8c4 36a4 	str.w	r3, [r4, #1700]	@ 0x6a4
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80069f6:	f04f 33ff 	mov.w	r3, #4294967295
 80069fa:	f8a4 56dc 	strh.w	r5, [r4, #1756]	@ 0x6dc
 80069fe:	f8c4 36e4 	str.w	r3, [r4, #1764]	@ 0x6e4
 8006a02:	f504 5340 	add.w	r3, r4, #12288	@ 0x3000
 8006a06:	f8c4 56e0 	str.w	r5, [r4, #1760]	@ 0x6e0
              text(0)
 8006a0a:	f8c4 56e8 	str.w	r5, [r4, #1768]	@ 0x6e8
 8006a0e:	f8c4 56ec 	str.w	r5, [r4, #1772]	@ 0x6ec
 8006a12:	f8c3 25e4 	str.w	r2, [r3, #1508]	@ 0x5e4
 8006a16:	4a71      	ldr	r2, [pc, #452]	@ (8006bdc <_ZN15Screen1ViewBaseC1Ev+0x3dc>)
 8006a18:	f8c3 45e8 	str.w	r4, [r3, #1512]	@ 0x5e8
 8006a1c:	f8c3 25ec 	str.w	r2, [r3, #1516]	@ 0x5ec
 8006a20:	f8c3 55f0 	str.w	r5, [r3, #1520]	@ 0x5f0
 8006a24:	f00d fe50 	bl	80146c8 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>
    __background.setPosition(0, 0, 800, 480);
 8006a28:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8006a2c:	462a      	mov	r2, r5
 8006a2e:	4629      	mov	r1, r5
 8006a30:	4648      	mov	r0, r9
 8006a32:	9300      	str	r3, [sp, #0]
 8006a34:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8006a38:	f7fe fea6 	bl	8005788 <_ZN8touchgfx8Drawable11setPositionEssss>
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 8006a3c:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
 8006a40:	4650      	mov	r0, sl
 8006a42:	66a1      	str	r1, [r4, #104]	@ 0x68
 8006a44:	4649      	mov	r1, r9
 8006a46:	f009 f9ef 	bl	800fe28 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image1.setXY(0, 0);
 8006a4a:	462a      	mov	r2, r5
 8006a4c:	4629      	mov	r1, r5
 8006a4e:	4640      	mov	r0, r8
 8006a50:	f7ff fe5d 	bl	800670e <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_BACKGROUNDS_800X480_GRADIENT_LIGHT_ID));
 8006a54:	a914      	add	r1, sp, #80	@ 0x50
 8006a56:	4640      	mov	r0, r8
 8006a58:	f8ad 5050 	strh.w	r5, [sp, #80]	@ 0x50
 8006a5c:	f00c ff39 	bl	80138d2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8006a60:	4641      	mov	r1, r8
 8006a62:	4650      	mov	r0, sl
    dynamicGraph1.setGraphAreaMargin(21, 92, 0, 30);
 8006a64:	f04f 081e 	mov.w	r8, #30
 8006a68:	f009 f9de 	bl	800fe28 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    dynamicGraph1.setPosition(161, 135, 639, 345);
 8006a6c:	f240 1359 	movw	r3, #345	@ 0x159
 8006a70:	4638      	mov	r0, r7
 8006a72:	2287      	movs	r2, #135	@ 0x87
 8006a74:	9300      	str	r3, [sp, #0]
 8006a76:	21a1      	movs	r1, #161	@ 0xa1
 8006a78:	f240 237f 	movw	r3, #639	@ 0x27f
        setIntervalScaled(abs(interval) * dataScale);
 8006a7c:	f04f 090a 	mov.w	r9, #10
 8006a80:	f7fe fe82 	bl	8005788 <_ZN8touchgfx8Drawable11setPositionEssss>
    dynamicGraph1.setScale(1);
 8006a84:	462a      	mov	r2, r5
 8006a86:	4631      	mov	r1, r6
 8006a88:	4638      	mov	r0, r7
 8006a8a:	f7ff fabf 	bl	800600c <_ZN8touchgfx16DynamicDataGraph8setScaleEib>
    dynamicGraph1.setGraphRangeX(0, 99);
 8006a8e:	4629      	mov	r1, r5
 8006a90:	4638      	mov	r0, r7
 8006a92:	2263      	movs	r2, #99	@ 0x63
 8006a94:	f7ff f8fc 	bl	8005c90 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>
    dynamicGraph1.setGraphAreaMargin(21, 92, 0, 30);
 8006a98:	462b      	mov	r3, r5
 8006a9a:	4638      	mov	r0, r7
 8006a9c:	f8cd 8000 	str.w	r8, [sp]
 8006aa0:	225c      	movs	r2, #92	@ 0x5c
 8006aa2:	2115      	movs	r1, #21
 8006aa4:	f00b fc8a 	bl	80123bc <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
    dynamicGraph1.setGraphAreaPadding(0, 0, 0, 0);
 8006aa8:	462b      	mov	r3, r5
 8006aaa:	462a      	mov	r2, r5
 8006aac:	4629      	mov	r1, r5
 8006aae:	4638      	mov	r0, r7
 8006ab0:	9500      	str	r5, [sp, #0]
 8006ab2:	f00b fb98 	bl	80121e6 <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>
    dynamicGraph1.setGraphRangeY(0, 3500);
 8006ab6:	4629      	mov	r1, r5
 8006ab8:	4638      	mov	r0, r7
 8006aba:	f640 52ac 	movw	r2, #3500	@ 0xdac
 8006abe:	f7ff f978 	bl	8005db2 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEii>
 8006ac2:	f8d4 13a8 	ldr.w	r1, [r4, #936]	@ 0x3a8
        color = newColor;
 8006ac6:	4b46      	ldr	r3, [pc, #280]	@ (8006be0 <_ZN15Screen1ViewBaseC1Ev+0x3e0>)
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8006ac8:	4632      	mov	r2, r6
        setIntervalScaled(abs(interval) * dataScale);
 8006aca:	fb09 f001 	mul.w	r0, r9, r1
        color = newColor;
 8006ace:	f8c4 33a4 	str.w	r3, [r4, #932]	@ 0x3a4
 * @return The absolute (non-negative) value of d.
 */
template <typename T>
T abs(T d)
{
    return (d < 0) ? -d : d;
 8006ad2:	2800      	cmp	r0, #0
        lineWidth = width;
 8006ad4:	f884 63b0 	strb.w	r6, [r4, #944]	@ 0x3b0
 8006ad8:	bfb8      	it	lt
 8006ada:	4240      	neglt	r0, r0
        gridInterval = abs(interval);
 8006adc:	f8c4 03ac 	str.w	r0, [r4, #940]	@ 0x3ac
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8006ae0:	f00b fd1e 	bl	8012520 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
        majorGrid = &major;
 8006ae4:	9a04      	ldr	r2, [sp, #16]
    dynamicGraph1.addGraphElement(dynamicGraph1MinorXAxisGrid);
 8006ae6:	9907      	ldr	r1, [sp, #28]
 8006ae8:	f8c4 23b4 	str.w	r2, [r4, #948]	@ 0x3b4
        dataScale = scale;
 8006aec:	e9c4 60ea 	strd	r6, r0, [r4, #936]	@ 0x3a8
 8006af0:	4638      	mov	r0, r7
 8006af2:	f00b fb83 	bl	80121fc <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
        color = newColor;
 8006af6:	4b3a      	ldr	r3, [pc, #232]	@ (8006be0 <_ZN15Screen1ViewBaseC1Ev+0x3e0>)
        setIntervalScaled(abs(interval) * dataScale);
 8006af8:	f8d4 13e8 	ldr.w	r1, [r4, #1000]	@ 0x3e8
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8006afc:	4632      	mov	r2, r6
        color = newColor;
 8006afe:	f8c4 33e4 	str.w	r3, [r4, #996]	@ 0x3e4
        setIntervalScaled(abs(interval) * dataScale);
 8006b02:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
        lineWidth = width;
 8006b06:	f884 63f0 	strb.w	r6, [r4, #1008]	@ 0x3f0
        setIntervalScaled(abs(interval) * dataScale);
 8006b0a:	fb03 f001 	mul.w	r0, r3, r1
 8006b0e:	2800      	cmp	r0, #0
 8006b10:	bfb8      	it	lt
 8006b12:	4240      	neglt	r0, r0
        gridInterval = abs(interval);
 8006b14:	f8c4 03ec 	str.w	r0, [r4, #1004]	@ 0x3ec
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8006b18:	f00b fd02 	bl	8012520 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
        majorGrid = &major;
 8006b1c:	9a05      	ldr	r2, [sp, #20]
    dynamicGraph1.addGraphElement(dynamicGraph1MinorYAxisGrid);
 8006b1e:	9908      	ldr	r1, [sp, #32]
 8006b20:	f8c4 23f4 	str.w	r2, [r4, #1012]	@ 0x3f4
        dataScale = scale;
 8006b24:	e9c4 60fa 	strd	r6, r0, [r4, #1000]	@ 0x3e8
 8006b28:	4638      	mov	r0, r7
 8006b2a:	f00b fb67 	bl	80121fc <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
        color = newColor;
 8006b2e:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
        setIntervalScaled(abs(interval) * dataScale);
 8006b32:	2032      	movs	r0, #50	@ 0x32
        lineWidth = width;
 8006b34:	f04f 0202 	mov.w	r2, #2
        color = newColor;
 8006b38:	f8c4 1424 	str.w	r1, [r4, #1060]	@ 0x424
        setIntervalScaled(abs(interval) * dataScale);
 8006b3c:	f8d4 1428 	ldr.w	r1, [r4, #1064]	@ 0x428
        lineWidth = width;
 8006b40:	f884 2430 	strb.w	r2, [r4, #1072]	@ 0x430
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8006b44:	4632      	mov	r2, r6
        setIntervalScaled(abs(interval) * dataScale);
 8006b46:	4348      	muls	r0, r1
 8006b48:	2800      	cmp	r0, #0
 8006b4a:	bfb8      	it	lt
 8006b4c:	4240      	neglt	r0, r0
        gridInterval = abs(interval);
 8006b4e:	f8c4 042c 	str.w	r0, [r4, #1068]	@ 0x42c
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8006b52:	f00b fce5 	bl	8012520 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
    dynamicGraph1.addGraphElement(dynamicGraph1MajorXAxisGrid);
 8006b56:	9904      	ldr	r1, [sp, #16]
 8006b58:	f8c4 042c 	str.w	r0, [r4, #1068]	@ 0x42c
 8006b5c:	4638      	mov	r0, r7
        dataScale = scale;
 8006b5e:	f8c4 6428 	str.w	r6, [r4, #1064]	@ 0x428
 8006b62:	f00b fb4b 	bl	80121fc <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
        color = newColor;
 8006b66:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
        setIntervalScaled(abs(interval) * dataScale);
 8006b6a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
        lineWidth = width;
 8006b6e:	f04f 0202 	mov.w	r2, #2
        color = newColor;
 8006b72:	f8c4 1464 	str.w	r1, [r4, #1124]	@ 0x464
        setIntervalScaled(abs(interval) * dataScale);
 8006b76:	f8d4 1468 	ldr.w	r1, [r4, #1128]	@ 0x468
        lineWidth = width;
 8006b7a:	f884 2470 	strb.w	r2, [r4, #1136]	@ 0x470
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8006b7e:	4632      	mov	r2, r6
        setIntervalScaled(abs(interval) * dataScale);
 8006b80:	4348      	muls	r0, r1
 8006b82:	2800      	cmp	r0, #0
 8006b84:	bfb8      	it	lt
 8006b86:	4240      	neglt	r0, r0
        gridInterval = abs(interval);
 8006b88:	f8c4 046c 	str.w	r0, [r4, #1132]	@ 0x46c
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8006b8c:	f00b fcc8 	bl	8012520 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
    dynamicGraph1.addGraphElement(dynamicGraph1MajorYAxisGrid);
 8006b90:	9905      	ldr	r1, [sp, #20]
 8006b92:	f8c4 046c 	str.w	r0, [r4, #1132]	@ 0x46c
 8006b96:	4638      	mov	r0, r7
        dataScale = scale;
 8006b98:	f8c4 6468 	str.w	r6, [r4, #1128]	@ 0x468
 8006b9c:	f00b fb2e 	bl	80121fc <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
 8006ba0:	e022      	b.n	8006be8 <_ZN15Screen1ViewBaseC1Ev+0x3e8>
 8006ba2:	bf00      	nop
 8006ba4:	080298b0 	.word	0x080298b0
 8006ba8:	0802ad74 	.word	0x0802ad74
 8006bac:	0802ae54 	.word	0x0802ae54
 8006bb0:	0802a8d4 	.word	0x0802a8d4
 8006bb4:	080296fc 	.word	0x080296fc
 8006bb8:	080294e0 	.word	0x080294e0
 8006bbc:	08028bf8 	.word	0x08028bf8
 8006bc0:	0802acd4 	.word	0x0802acd4
 8006bc4:	0802ab9c 	.word	0x0802ab9c
 8006bc8:	0802a698 	.word	0x0802a698
 8006bcc:	08029650 	.word	0x08029650
 8006bd0:	0802a658 	.word	0x0802a658
 8006bd4:	08029898 	.word	0x08029898
 8006bd8:	0802966c 	.word	0x0802966c
 8006bdc:	080066e9 	.word	0x080066e9
 8006be0:	ff1e1e1e 	.word	0xff1e1e1e
 8006be4:	08029598 	.word	0x08029598
        setIntervalScaled(AbstractDataGraph::int2scaled(interval, dataScale));
 8006be8:	f8d4 14a8 	ldr.w	r1, [r4, #1192]	@ 0x4a8
        return i * scale;
 8006bec:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
        color = newColor;
 8006bf0:	f04f 4c7f 	mov.w	ip, #4278190080	@ 0xff000000
        labelInterval = AbstractDataGraph::convertToNewScale(labelInterval, dataScale, scale);
 8006bf4:	4632      	mov	r2, r6
 8006bf6:	fb03 f001 	mul.w	r0, r3, r1
class TypedText
 8006bfa:	2306      	movs	r3, #6
 8006bfc:	f8c4 c4a4 	str.w	ip, [r4, #1188]	@ 0x4a4
 8006c00:	2800      	cmp	r0, #0
 8006c02:	f8a4 34b4 	strh.w	r3, [r4, #1204]	@ 0x4b4
 8006c06:	bfb8      	it	lt
 8006c08:	4240      	neglt	r0, r0
        labelInterval = abs(interval);
 8006c0a:	f8c4 04ac 	str.w	r0, [r4, #1196]	@ 0x4ac
        labelInterval = AbstractDataGraph::convertToNewScale(labelInterval, dataScale, scale);
 8006c0e:	f00b fc87 	bl	8012520 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
    dynamicGraph1.addLeftElement(dynamicGraph1MajorYAxisLabel);
 8006c12:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006c14:	f8c4 04ac 	str.w	r0, [r4, #1196]	@ 0x4ac
 8006c18:	4638      	mov	r0, r7
        dataScale = scale;
 8006c1a:	f8c4 64a8 	str.w	r6, [r4, #1192]	@ 0x4a8
 8006c1e:	f00b faff 	bl	8012220 <_ZN8touchgfx17AbstractDataGraph14addLeftElementERNS_23AbstractGraphDecorationE>
 8006c22:	4a57      	ldr	r2, [pc, #348]	@ (8006d80 <_ZN15Screen1ViewBaseC1Ev+0x580>)
    dynamicGraph1.addGraphElement(dynamicGraph1Line1);
 8006c24:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006c26:	4638      	mov	r0, r7
 8006c28:	f8c4 2500 	str.w	r2, [r4, #1280]	@ 0x500
    }

    virtual void setColor(colortype color)
    {
        AbstractPainterColor::setColor(color);
        color565 = LCD16bpp::getNativeColor(painterColor);
 8006c2c:	f24f 0227 	movw	r2, #61479	@ 0xf027
 8006c30:	f8a4 2504 	strh.w	r2, [r4, #1284]	@ 0x504
        canvasPainter = &painter;
 8006c34:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006c36:	f8c4 24ec 	str.w	r2, [r4, #1260]	@ 0x4ec
     *
     * @see getLineWidth
     */
    FORCE_INLINE_FUNCTION void setLineWidth(uint8_t width)
    {
        lineWidth = width;
 8006c3a:	f04f 0202 	mov.w	r2, #2
 8006c3e:	f884 24f0 	strb.w	r2, [r4, #1264]	@ 0x4f0
 8006c42:	f00b fadb 	bl	80121fc <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
 8006c46:	4639      	mov	r1, r7
 8006c48:	4650      	mov	r0, sl
    lineProgress1.setProgressIndicatorPosition(0, 0, 10, 300);
 8006c4a:	f44f 7796 	mov.w	r7, #300	@ 0x12c
 8006c4e:	f009 f8eb 	bl	800fe28 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Sc1_button.setXY(37, 35);
 8006c52:	9803      	ldr	r0, [sp, #12]
 8006c54:	2223      	movs	r2, #35	@ 0x23
 8006c56:	2125      	movs	r1, #37	@ 0x25
 8006c58:	f7ff fd59 	bl	800670e <_ZN8touchgfx8Drawable5setXYEss>
 8006c5c:	2203      	movs	r2, #3
 8006c5e:	2306      	movs	r3, #6
    Sc1_button.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_TINY_ROUNDED_ACTIVE_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_TINY_ROUNDED_ACTION_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_NAVIGATION_ARROW_BACK_IOS_50_50_E8F6FB_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_NAVIGATION_ARROW_BACK_IOS_50_50_E8F6FB_SVG_ID));
 8006c60:	a911      	add	r1, sp, #68	@ 0x44
 8006c62:	f8ad 2044 	strh.w	r2, [sp, #68]	@ 0x44
 8006c66:	f04f 0202 	mov.w	r2, #2
 8006c6a:	9803      	ldr	r0, [sp, #12]
 8006c6c:	f8ad 2048 	strh.w	r2, [sp, #72]	@ 0x48
 8006c70:	aa14      	add	r2, sp, #80	@ 0x50
 8006c72:	f8ad 304c 	strh.w	r3, [sp, #76]	@ 0x4c
 8006c76:	f8ad 3050 	strh.w	r3, [sp, #80]	@ 0x50
 8006c7a:	ab13      	add	r3, sp, #76	@ 0x4c
 8006c7c:	9200      	str	r2, [sp, #0]
 8006c7e:	aa12      	add	r2, sp, #72	@ 0x48
 8006c80:	f00c fd5b 	bl	801373a <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    Sc1_button.setAction(buttonCallback);
 8006c84:	f504 5357 	add.w	r3, r4, #13760	@ 0x35c0
 8006c88:	9903      	ldr	r1, [sp, #12]
 8006c8a:	4650      	mov	r0, sl
 8006c8c:	3324      	adds	r3, #36	@ 0x24
     * @note The user code must call invalidate() in order to update the button on the display.
     * @note The value set is overwritten on a subsequent call to setBitmaps.
     */
    void setIconX(int16_t x)
    {
        iconX = x;
 8006c8e:	f8c4 8540 	str.w	r8, [r4, #1344]	@ 0x540
 8006c92:	f04f 0805 	mov.w	r8, #5
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
    {
        action = &callback;
 8006c96:	f8c4 3530 	str.w	r3, [r4, #1328]	@ 0x530
 8006c9a:	f009 f8c5 	bl	800fe28 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    lineProgress1.setXY(87, 157);
 8006c9e:	4658      	mov	r0, fp
 8006ca0:	229d      	movs	r2, #157	@ 0x9d
 8006ca2:	2157      	movs	r1, #87	@ 0x57
 8006ca4:	f7ff fd33 	bl	800670e <_ZN8touchgfx8Drawable5setXYEss>
    lineProgress1.setProgressIndicatorPosition(0, 0, 10, 300);
 8006ca8:	464b      	mov	r3, r9
 8006caa:	462a      	mov	r2, r5
 8006cac:	4629      	mov	r1, r5
 8006cae:	4658      	mov	r0, fp
 8006cb0:	9700      	str	r7, [sp, #0]
 8006cb2:	f008 feba 	bl	800fa2a <_ZN8touchgfx12LineProgress28setProgressIndicatorPositionEssss>
    lineProgress1.setRange(0, 3500);
 8006cb6:	f640 52ac 	movw	r2, #3500	@ 0xdac
 8006cba:	462b      	mov	r3, r5
 8006cbc:	4629      	mov	r1, r5
 8006cbe:	4658      	mov	r0, fp
 8006cc0:	9500      	str	r5, [sp, #0]
 8006cc2:	f008 fefd 	bl	800fac0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
 8006cc6:	2304      	movs	r3, #4
    lineProgress1.setBackground(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_LINEPROGRESS_BACKGROUNDS_IMAGE_PLAIN_NORMAL_MEDIUM_90_ID));
 8006cc8:	a914      	add	r1, sp, #80	@ 0x50
 8006cca:	4658      	mov	r0, fp
 8006ccc:	f8ad 3050 	strh.w	r3, [sp, #80]	@ 0x50
 8006cd0:	f009 f83d 	bl	800fd4e <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    lineProgress1Painter.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_LINEPROGRESS_FILLERS_PLAIN_NORMAL_MEDIUM_ACTION_90_ID));
 8006cd4:	a914      	add	r1, sp, #80	@ 0x50
 8006cd6:	9806      	ldr	r0, [sp, #24]
 8006cd8:	f8ad 8050 	strh.w	r8, [sp, #80]	@ 0x50
 8006cdc:	f00a fb74 	bl	80113c8 <_ZN8touchgfx19PainterRGB565Bitmap9setBitmapERKNS_6BitmapE>
    lineProgress1.setPainter(lineProgress1Painter);
 8006ce0:	9906      	ldr	r1, [sp, #24]
 8006ce2:	4658      	mov	r0, fp
 8006ce4:	f008 fe02 	bl	800f8ec <_ZN8touchgfx12LineProgress10setPainterERNS_15AbstractPainterE>
    lineProgress1.setStart(5, 300);
 8006ce8:	463a      	mov	r2, r7
 8006cea:	4641      	mov	r1, r8
 8006cec:	4658      	mov	r0, fp
 8006cee:	f008 fe28 	bl	800f942 <_ZN8touchgfx12LineProgress8setStartEii>
    lineProgress1.setEnd(5, 0);
 8006cf2:	462a      	mov	r2, r5
 8006cf4:	4641      	mov	r1, r8
 8006cf6:	4658      	mov	r0, fp
 8006cf8:	f008 fe08 	bl	800f90c <_ZN8touchgfx12LineProgress6setEndEii>
    lineProgress1.setLineWidth(10);
 8006cfc:	4649      	mov	r1, r9
 8006cfe:	4658      	mov	r0, fp
 8006d00:	f008 fe26 	bl	800f950 <_ZN8touchgfx12LineProgress12setLineWidthEi>
    lineProgress1.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
 8006d04:	4629      	mov	r1, r5
 8006d06:	4658      	mov	r0, fp
 8006d08:	f008 fe2d 	bl	800f966 <_ZN8touchgfx12LineProgress18setLineEndingStyleENS_4Line17LINE_ENDING_STYLEE>
    lineProgress1.setValue(300);
 8006d0c:	4639      	mov	r1, r7
 8006d0e:	4658      	mov	r0, fp
        boundingArea = calculateBoundingArea();
 8006d10:	af0c      	add	r7, sp, #48	@ 0x30
 8006d12:	f008 fe3e 	bl	800f992 <_ZN8touchgfx12LineProgress8setValueEi>
 8006d16:	4659      	mov	r1, fp
 8006d18:	4650      	mov	r0, sl
 8006d1a:	f009 f885 	bl	800fe28 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea_Value.setPosition(7, 120, 149, 31);
 8006d1e:	231f      	movs	r3, #31
 8006d20:	9802      	ldr	r0, [sp, #8]
 8006d22:	2278      	movs	r2, #120	@ 0x78
 8006d24:	9300      	str	r3, [sp, #0]
 8006d26:	2107      	movs	r1, #7
 8006d28:	2395      	movs	r3, #149	@ 0x95
 8006d2a:	f7fe fd2d 	bl	8005788 <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 8006d2e:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
        boundingArea = calculateBoundingArea();
 8006d32:	f8d4 36a4 	ldr.w	r3, [r4, #1700]	@ 0x6a4
 8006d36:	4638      	mov	r0, r7
 8006d38:	9902      	ldr	r1, [sp, #8]
        color = newColor;
 8006d3a:	f8c4 26d4 	str.w	r2, [r4, #1748]	@ 0x6d4
        boundingArea = calculateBoundingArea();
 8006d3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
        linespace = space;
 8006d42:	f8a4 56d8 	strh.w	r5, [r4, #1752]	@ 0x6d8
        boundingArea = calculateBoundingArea();
 8006d46:	4798      	blx	r3
 8006d48:	f504 63dc 	add.w	r3, r4, #1760	@ 0x6e0
 8006d4c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8006d50:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    textArea_Value.setWildcard(textArea_ValueBuffer);
 8006d54:	f504 63de 	add.w	r3, r4, #1776	@ 0x6f0
    textArea_Value.setTypedText(touchgfx::TypedText(T_ADC_VALUE));
 8006d58:	a914      	add	r1, sp, #80	@ 0x50
 8006d5a:	9802      	ldr	r0, [sp, #8]
        wc1 = value;
 8006d5c:	f8c4 36ec 	str.w	r3, [r4, #1772]	@ 0x6ec
        : typedTextId(id)
 8006d60:	4b08      	ldr	r3, [pc, #32]	@ (8006d84 <_ZN15Screen1ViewBaseC1Ev+0x584>)
    textArea_ValueBuffer[0] = 0;
 8006d62:	f8a4 56f0 	strh.w	r5, [r4, #1776]	@ 0x6f0
 8006d66:	9314      	str	r3, [sp, #80]	@ 0x50
 8006d68:	f8ad 6054 	strh.w	r6, [sp, #84]	@ 0x54
    textArea_Value.setTypedText(touchgfx::TypedText(T_ADC_VALUE));
 8006d6c:	f00c fc0c 	bl	8013588 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8006d70:	4650      	mov	r0, sl
 8006d72:	9902      	ldr	r1, [sp, #8]
 8006d74:	f009 f858 	bl	800fe28 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8006d78:	4620      	mov	r0, r4
 8006d7a:	b017      	add	sp, #92	@ 0x5c
 8006d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d80:	fff20538 	.word	0xfff20538
 8006d84:	08028bf8 	.word	0x08028bf8

08006d88 <_ZN15Screen2ViewBaseD1Ev>:
}

Screen2ViewBase::~Screen2ViewBase()
{

}
 8006d88:	4770      	bx	lr

08006d8a <_ZN15Screen2ViewBase11setupScreenEv>:

void Screen2ViewBase::setupScreen()
{

}
 8006d8a:	4770      	bx	lr

08006d8c <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8006d8c:	4770      	bx	lr

08006d8e <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8006d8e:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 8006d90:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8006d92:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8006d94:	68c2      	ldr	r2, [r0, #12]
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	1055      	asrs	r5, r2, #1
 8006d9a:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8006d9e:	07d2      	lsls	r2, r2, #31
 8006da0:	bf48      	it	mi
 8006da2:	5962      	ldrmi	r2, [r4, r5]
    }
 8006da4:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 8006da6:	bf48      	it	mi
 8006da8:	58d3      	ldrmi	r3, [r2, r3]
 8006daa:	4718      	bx	r3

08006dac <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8006dac:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 8006dae:	6840      	ldr	r0, [r0, #4]
 8006db0:	b130      	cbz	r0, 8006dc0 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 8006db2:	689a      	ldr	r2, [r3, #8]
 8006db4:	b91a      	cbnz	r2, 8006dbe <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x12>
 8006db6:	68d8      	ldr	r0, [r3, #12]
 8006db8:	f000 0001 	and.w	r0, r0, #1
 8006dbc:	4770      	bx	lr
 8006dbe:	2001      	movs	r0, #1
    }
 8006dc0:	4770      	bx	lr

08006dc2 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8006dc2:	b510      	push	{r4, lr}
 8006dc4:	4604      	mov	r4, r0
 8006dc6:	2110      	movs	r1, #16
 8006dc8:	f01e fe41 	bl	8025a4e <_ZdlPvj>
 8006dcc:	4620      	mov	r0, r4
 8006dce:	bd10      	pop	{r4, pc}

08006dd0 <_ZN15Screen2ViewBaseD0Ev>:
Screen2ViewBase::~Screen2ViewBase()
 8006dd0:	b510      	push	{r4, lr}
 8006dd2:	4604      	mov	r4, r0
}
 8006dd4:	f44f 7119 	mov.w	r1, #612	@ 0x264
 8006dd8:	f01e fe39 	bl	8025a4e <_ZdlPvj>
 8006ddc:	4620      	mov	r0, r4
 8006dde:	bd10      	pop	{r4, pc}

08006de0 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen2ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &Sc2_button)
 8006de0:	3098      	adds	r0, #152	@ 0x98
 8006de2:	4288      	cmp	r0, r1
{
 8006de4:	b508      	push	{r3, lr}
    if (&src == &Sc2_button)
 8006de6:	d105      	bne.n	8006df4 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x14>
    virtual ~Screen2ViewBase();
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8006de8:	f00f f8f6 	bl	8015fd8 <_ZN8touchgfx11Application11getInstanceEv>
        //Interaction1
        //When Sc2_button clicked change screen to Screen1
        //Go to Screen1 with screen transition towards West
        application().gotoScreen1ScreenCoverTransitionWest();
    }
}
 8006dec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotoScreen1ScreenCoverTransitionWest();
 8006df0:	f7fe beb2 	b.w	8005b58 <_ZN23FrontendApplicationBase36gotoScreen1ScreenCoverTransitionWestEv>
}
 8006df4:	bd08      	pop	{r3, pc}
	...

08006df8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
    TextAreaWithOneWildcard()
 8006df8:	b510      	push	{r4, lr}
 8006dfa:	4604      	mov	r4, r0
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8006dfc:	2226      	movs	r2, #38	@ 0x26
 8006dfe:	2100      	movs	r1, #0
 8006e00:	f01f f8f0 	bl	8025fe4 <memset>
 8006e04:	4620      	mov	r0, r4
 8006e06:	f7ff fc8f 	bl	8006728 <_ZN8touchgfx6WidgetC1Ev>
 8006e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8006e34 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x3c>)
 8006e0c:	f44f 027f 	mov.w	r2, #16711680	@ 0xff0000
    }
 8006e10:	4620      	mov	r0, r4
 8006e12:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006e14:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006e18:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	e9c4 320c 	strd	r3, r2, [r4, #48]	@ 0x30
        : TextAreaWithWildcardBase(), wc1(0)
 8006e20:	4a05      	ldr	r2, [pc, #20]	@ (8006e38 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x40>)
 8006e22:	8723      	strh	r3, [r4, #56]	@ 0x38
 8006e24:	6022      	str	r2, [r4, #0]
 8006e26:	f04f 32ff 	mov.w	r2, #4294967295
 8006e2a:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8006e2c:	64a3      	str	r3, [r4, #72]	@ 0x48
              text(0)
 8006e2e:	e9c4 2310 	strd	r2, r3, [r4, #64]	@ 0x40
    }
 8006e32:	bd10      	pop	{r4, pc}
 8006e34:	08028bf8 	.word	0x08028bf8
 8006e38:	0802966c 	.word	0x0802966c

08006e3c <_ZN15Screen2ViewBaseC1Ev>:
Screen2ViewBase::Screen2ViewBase() :
 8006e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e40:	4604      	mov	r4, r0
 8006e42:	b091      	sub	sp, #68	@ 0x44
 8006e44:	2500      	movs	r5, #0
 8006e46:	f010 fcef 	bl	8017828 <_ZN8touchgfx6ScreenC1Ev>
    buttonCallback(this, &Screen2ViewBase::buttonCallbackHandler)
 8006e4a:	46a1      	mov	r9, r4
 8006e4c:	4bad      	ldr	r3, [pc, #692]	@ (8007104 <_ZN15Screen2ViewBaseC1Ev+0x2c8>)
        : Widget(), alpha(255), color(0)
 8006e4e:	2726      	movs	r7, #38	@ 0x26
 8006e50:	4629      	mov	r1, r5
 8006e52:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8006e54:	f104 086c 	add.w	r8, r4, #108	@ 0x6c
 8006e58:	f849 3b40 	str.w	r3, [r9], #64
 8006e5c:	463a      	mov	r2, r7
 8006e5e:	4648      	mov	r0, r9
 8006e60:	26ff      	movs	r6, #255	@ 0xff
 8006e62:	f01f f8bf 	bl	8025fe4 <memset>
 8006e66:	4648      	mov	r0, r9
 8006e68:	f7ff fc5e 	bl	8006728 <_ZN8touchgfx6WidgetC1Ev>
 8006e6c:	4ba6      	ldr	r3, [pc, #664]	@ (8007108 <_ZN15Screen2ViewBaseC1Ev+0x2cc>)
        : Widget(), bitmap(bmp), alpha(255)
 8006e6e:	463a      	mov	r2, r7
 8006e70:	4629      	mov	r1, r5
 8006e72:	6423      	str	r3, [r4, #64]	@ 0x40
 8006e74:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006e78:	f884 6066 	strb.w	r6, [r4, #102]	@ 0x66
 8006e7c:	4640      	mov	r0, r8
        : color(col)
 8006e7e:	66a5      	str	r5, [r4, #104]	@ 0x68
        Image::setBitmap(bmp);
 8006e80:	af0e      	add	r7, sp, #56	@ 0x38
 8006e82:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
        : Widget(), bitmap(bmp), alpha(255)
 8006e86:	f01f f8ad 	bl	8025fe4 <memset>
 8006e8a:	4640      	mov	r0, r8
 8006e8c:	f104 0b98 	add.w	fp, r4, #152	@ 0x98
 8006e90:	f7ff fc4a 	bl	8006728 <_ZN8touchgfx6WidgetC1Ev>
 8006e94:	4b9d      	ldr	r3, [pc, #628]	@ (800710c <_ZN15Screen2ViewBaseC1Ev+0x2d0>)
        Image::setBitmap(bmp);
 8006e96:	4639      	mov	r1, r7
 8006e98:	f104 0ad4 	add.w	sl, r4, #212	@ 0xd4
        : Widget(), bitmap(bmp), alpha(255)
 8006e9c:	66e3      	str	r3, [r4, #108]	@ 0x6c
        Image::setBitmap(bmp);
 8006e9e:	4640      	mov	r0, r8
        : Widget(), bitmap(bmp), alpha(255)
 8006ea0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8006ea4:	f884 6094 	strb.w	r6, [r4, #148]	@ 0x94
 8006ea8:	1d26      	adds	r6, r4, #4
 8006eaa:	f8a4 3092 	strh.w	r3, [r4, #146]	@ 0x92
        Image::setBitmap(bmp);
 8006eae:	f00c fd10 	bl	80138d2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8006eb2:	4658      	mov	r0, fp
 8006eb4:	f00c fce6 	bl	8013884 <_ZN8touchgfx14ButtonWithIconC1Ev>
 8006eb8:	4650      	mov	r0, sl
 8006eba:	f7ff ff9d 	bl	8006df8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8006ebe:	f504 7390 	add.w	r3, r4, #288	@ 0x120
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	9303      	str	r3, [sp, #12]
 8006ec6:	f7ff ff97 	bl	8006df8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8006eca:	f504 73b6 	add.w	r3, r4, #364	@ 0x16c
 8006ece:	4618      	mov	r0, r3
 8006ed0:	9304      	str	r3, [sp, #16]
 8006ed2:	f7ff ff91 	bl	8006df8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8006ed6:	f504 73dc 	add.w	r3, r4, #440	@ 0x1b8
 8006eda:	4618      	mov	r0, r3
 8006edc:	9305      	str	r3, [sp, #20]
 8006ede:	f7ff ff8b 	bl	8006df8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
        : pobject(pObject), pmemfun(pmemfun_1)
 8006ee2:	4b8b      	ldr	r3, [pc, #556]	@ (8007110 <_ZN15Screen2ViewBaseC1Ev+0x2d4>)
    __background.setPosition(0, 0, 800, 480);
 8006ee4:	462a      	mov	r2, r5
 8006ee6:	4629      	mov	r1, r5
 8006ee8:	4648      	mov	r0, r9
 8006eea:	e9c4 3495 	strd	r3, r4, [r4, #596]	@ 0x254
 8006eee:	4b89      	ldr	r3, [pc, #548]	@ (8007114 <_ZN15Screen2ViewBaseC1Ev+0x2d8>)
 8006ef0:	e9c4 3597 	strd	r3, r5, [r4, #604]	@ 0x25c
 8006ef4:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8006ef8:	9300      	str	r3, [sp, #0]
 8006efa:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8006efe:	f7fe fc43 	bl	8005788 <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 8006f02:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8006f06:	4649      	mov	r1, r9
 8006f08:	4630      	mov	r0, r6
 8006f0a:	66a3      	str	r3, [r4, #104]	@ 0x68
 8006f0c:	f008 ff8c 	bl	800fe28 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image1.setXY(0, 0);
 8006f10:	462a      	mov	r2, r5
 8006f12:	4629      	mov	r1, r5
 8006f14:	4640      	mov	r0, r8
 8006f16:	f7ff fbfa 	bl	800670e <_ZN8touchgfx8Drawable5setXYEss>
 8006f1a:	2301      	movs	r3, #1
    image1.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_BACKGROUNDS_800X480_WAVES_ID));
 8006f1c:	4639      	mov	r1, r7
 8006f1e:	4640      	mov	r0, r8
 8006f20:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 8006f24:	f00c fcd5 	bl	80138d2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8006f28:	4641      	mov	r1, r8
 8006f2a:	4630      	mov	r0, r6
 8006f2c:	f008 ff7c 	bl	800fe28 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Sc2_button.setXY(650, 35);
 8006f30:	4658      	mov	r0, fp
 8006f32:	2223      	movs	r2, #35	@ 0x23
 8006f34:	f240 218a 	movw	r1, #650	@ 0x28a
 8006f38:	f7ff fbe9 	bl	800670e <_ZN8touchgfx8Drawable5setXYEss>
 8006f3c:	f04f 0303 	mov.w	r3, #3
 8006f40:	f04f 0202 	mov.w	r2, #2
    Sc2_button.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_TINY_ROUNDED_ACTIVE_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_TINY_ROUNDED_ACTION_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_NAVIGATION_ARROW_FORWARD_IOS_50_50_E8F6FB_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_NAVIGATION_ARROW_FORWARD_IOS_50_50_E8F6FB_SVG_ID));
 8006f44:	a90b      	add	r1, sp, #44	@ 0x2c
 8006f46:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 8006f4a:	2307      	movs	r3, #7
 8006f4c:	4658      	mov	r0, fp
 8006f4e:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8006f52:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8006f56:	aa0c      	add	r2, sp, #48	@ 0x30
 8006f58:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 8006f5c:	ab0d      	add	r3, sp, #52	@ 0x34
 8006f5e:	9700      	str	r7, [sp, #0]
        boundingArea = calculateBoundingArea();
 8006f60:	f10d 0818 	add.w	r8, sp, #24
 8006f64:	f00c fbe9 	bl	801373a <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
 8006f68:	231e      	movs	r3, #30
 8006f6a:	4659      	mov	r1, fp
 8006f6c:	4630      	mov	r0, r6
 8006f6e:	f8c4 30d0 	str.w	r3, [r4, #208]	@ 0xd0
    Sc2_button.setAction(buttonCallback);
 8006f72:	f504 7315 	add.w	r3, r4, #596	@ 0x254
        color = newColor;
 8006f76:	f8df b1a0 	ldr.w	fp, [pc, #416]	@ 8007118 <_ZN15Screen2ViewBaseC1Ev+0x2dc>
 8006f7a:	f8c4 30c0 	str.w	r3, [r4, #192]	@ 0xc0
 8006f7e:	f008 ff53 	bl	800fe28 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textAreaTemp.setPosition(33, 132, 727, 73);
 8006f82:	2349      	movs	r3, #73	@ 0x49
 8006f84:	2284      	movs	r2, #132	@ 0x84
 8006f86:	4650      	mov	r0, sl
 8006f88:	9300      	str	r3, [sp, #0]
 8006f8a:	2121      	movs	r1, #33	@ 0x21
 8006f8c:	f240 23d7 	movw	r3, #727	@ 0x2d7
 8006f90:	f8df 9188 	ldr.w	r9, [pc, #392]	@ 800711c <_ZN15Screen2ViewBaseC1Ev+0x2e0>
 8006f94:	f7fe fbf8 	bl	8005788 <_ZN8touchgfx8Drawable11setPositionEssss>
        boundingArea = calculateBoundingArea();
 8006f98:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
 8006f9c:	4651      	mov	r1, sl
 8006f9e:	4640      	mov	r0, r8
 8006fa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
        color = newColor;
 8006fa4:	f8c4 b104 	str.w	fp, [r4, #260]	@ 0x104
        linespace = space;
 8006fa8:	f8a4 5108 	strh.w	r5, [r4, #264]	@ 0x108
        boundingArea = calculateBoundingArea();
 8006fac:	4798      	blx	r3
 8006fae:	f504 7388 	add.w	r3, r4, #272	@ 0x110
 8006fb2:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8006fb6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    textAreaTemp.setWildcard(textAreaTempBuffer);
 8006fba:	f504 7301 	add.w	r3, r4, #516	@ 0x204
    textAreaTemp.setTypedText(touchgfx::TypedText(T_TEMPERATUR_TEXT));
 8006fbe:	4639      	mov	r1, r7
 8006fc0:	4650      	mov	r0, sl
    textAreaTempBuffer[0] = 0;
 8006fc2:	f8a4 5204 	strh.w	r5, [r4, #516]	@ 0x204
        wc1 = value;
 8006fc6:	f8c4 311c 	str.w	r3, [r4, #284]	@ 0x11c
 8006fca:	2305      	movs	r3, #5
 8006fcc:	f8cd 9038 	str.w	r9, [sp, #56]	@ 0x38
 8006fd0:	f8ad 303c 	strh.w	r3, [sp, #60]	@ 0x3c
    textAreaTemp.setTypedText(touchgfx::TypedText(T_TEMPERATUR_TEXT));
 8006fd4:	f00c fad8 	bl	8013588 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8006fd8:	4651      	mov	r1, sl
    textAreaHumi.setPosition(33, 205, 727, 70);
 8006fda:	f04f 0a46 	mov.w	sl, #70	@ 0x46
 8006fde:	4630      	mov	r0, r6
 8006fe0:	f008 ff22 	bl	800fe28 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8006fe4:	22cd      	movs	r2, #205	@ 0xcd
 8006fe6:	9803      	ldr	r0, [sp, #12]
 8006fe8:	f240 23d7 	movw	r3, #727	@ 0x2d7
 8006fec:	2121      	movs	r1, #33	@ 0x21
 8006fee:	f8cd a000 	str.w	sl, [sp]
 8006ff2:	f7fe fbc9 	bl	8005788 <_ZN8touchgfx8Drawable11setPositionEssss>
 8006ff6:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
 8006ffa:	9903      	ldr	r1, [sp, #12]
 8006ffc:	4640      	mov	r0, r8
 8006ffe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
        color = newColor;
 8007002:	f8c4 b150 	str.w	fp, [r4, #336]	@ 0x150
        linespace = space;
 8007006:	f8a4 5154 	strh.w	r5, [r4, #340]	@ 0x154
        boundingArea = calculateBoundingArea();
 800700a:	4798      	blx	r3
 800700c:	f504 73ae 	add.w	r3, r4, #348	@ 0x15c
 8007010:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8007014:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    textAreaHumi.setWildcard(textAreaHumiBuffer);
 8007018:	f504 7306 	add.w	r3, r4, #536	@ 0x218
    textAreaHumi.setTypedText(touchgfx::TypedText(T_LUFTFEUCHTE_TEXT));
 800701c:	4639      	mov	r1, r7
 800701e:	9803      	ldr	r0, [sp, #12]
 8007020:	f8c4 3168 	str.w	r3, [r4, #360]	@ 0x168
 8007024:	2304      	movs	r3, #4
    textAreaHumiBuffer[0] = 0;
 8007026:	f8a4 5218 	strh.w	r5, [r4, #536]	@ 0x218
 800702a:	f8ad 303c 	strh.w	r3, [sp, #60]	@ 0x3c
 800702e:	f8cd 9038 	str.w	r9, [sp, #56]	@ 0x38
    textAreaHumi.setTypedText(touchgfx::TypedText(T_LUFTFEUCHTE_TEXT));
 8007032:	f00c faa9 	bl	8013588 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8007036:	9903      	ldr	r1, [sp, #12]
 8007038:	4630      	mov	r0, r6
 800703a:	f008 fef5 	bl	800fe28 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textAreaPres.setPosition(33, 275, 727, 70);
 800703e:	f240 1213 	movw	r2, #275	@ 0x113
 8007042:	9804      	ldr	r0, [sp, #16]
 8007044:	f240 23d7 	movw	r3, #727	@ 0x2d7
 8007048:	2121      	movs	r1, #33	@ 0x21
 800704a:	f8cd a000 	str.w	sl, [sp]
 800704e:	f7fe fb9b 	bl	8005788 <_ZN8touchgfx8Drawable11setPositionEssss>
 8007052:	f8d4 316c 	ldr.w	r3, [r4, #364]	@ 0x16c
 8007056:	9904      	ldr	r1, [sp, #16]
 8007058:	4640      	mov	r0, r8
 800705a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
        color = newColor;
 800705e:	f8c4 b19c 	str.w	fp, [r4, #412]	@ 0x19c
        linespace = space;
 8007062:	f8a4 51a0 	strh.w	r5, [r4, #416]	@ 0x1a0
        boundingArea = calculateBoundingArea();
 8007066:	4798      	blx	r3
 8007068:	f504 73d4 	add.w	r3, r4, #424	@ 0x1a8
 800706c:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8007070:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    textAreaPres.setWildcard(textAreaPresBuffer);
 8007074:	f504 730b 	add.w	r3, r4, #556	@ 0x22c
    textAreaPres.setTypedText(touchgfx::TypedText(T_LUFTDRUCK_TEXT));
 8007078:	4639      	mov	r1, r7
 800707a:	9804      	ldr	r0, [sp, #16]
 800707c:	f8c4 31b4 	str.w	r3, [r4, #436]	@ 0x1b4
 8007080:	f04f 0303 	mov.w	r3, #3
    textAreaPresBuffer[0] = 0;
 8007084:	f8a4 522c 	strh.w	r5, [r4, #556]	@ 0x22c
 8007088:	f8ad 303c 	strh.w	r3, [sp, #60]	@ 0x3c
 800708c:	f8cd 9038 	str.w	r9, [sp, #56]	@ 0x38
    textAreaPres.setTypedText(touchgfx::TypedText(T_LUFTDRUCK_TEXT));
 8007090:	f00c fa7a 	bl	8013588 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8007094:	9904      	ldr	r1, [sp, #16]
 8007096:	4630      	mov	r0, r6
 8007098:	f008 fec6 	bl	800fe28 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textAreaGas.setPosition(33, 345, 727, 70);
 800709c:	f240 1259 	movw	r2, #345	@ 0x159
 80070a0:	9805      	ldr	r0, [sp, #20]
 80070a2:	f240 23d7 	movw	r3, #727	@ 0x2d7
 80070a6:	2121      	movs	r1, #33	@ 0x21
 80070a8:	f8cd a000 	str.w	sl, [sp]
 80070ac:	f7fe fb6c 	bl	8005788 <_ZN8touchgfx8Drawable11setPositionEssss>
 80070b0:	f8d4 31b8 	ldr.w	r3, [r4, #440]	@ 0x1b8
 80070b4:	9905      	ldr	r1, [sp, #20]
 80070b6:	4640      	mov	r0, r8
 80070b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
        color = newColor;
 80070bc:	f8c4 b1e8 	str.w	fp, [r4, #488]	@ 0x1e8
        linespace = space;
 80070c0:	f8a4 51ec 	strh.w	r5, [r4, #492]	@ 0x1ec
        boundingArea = calculateBoundingArea();
 80070c4:	4798      	blx	r3
 80070c6:	f504 73fa 	add.w	r3, r4, #500	@ 0x1f4
 80070ca:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 80070ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    textAreaGas.setWildcard(textAreaGasBuffer);
 80070d2:	f504 7310 	add.w	r3, r4, #576	@ 0x240
 80070d6:	f04f 0202 	mov.w	r2, #2
    textAreaGas.setTypedText(touchgfx::TypedText(T_LUFTQUALITAET_TEXT));
 80070da:	4639      	mov	r1, r7
 80070dc:	9805      	ldr	r0, [sp, #20]
 80070de:	f8c4 3200 	str.w	r3, [r4, #512]	@ 0x200
    textAreaGasBuffer[0] = 0;
 80070e2:	f8a4 5240 	strh.w	r5, [r4, #576]	@ 0x240
 80070e6:	f8ad 203c 	strh.w	r2, [sp, #60]	@ 0x3c
 80070ea:	f8cd 9038 	str.w	r9, [sp, #56]	@ 0x38
    textAreaGas.setTypedText(touchgfx::TypedText(T_LUFTQUALITAET_TEXT));
 80070ee:	f00c fa4b 	bl	8013588 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80070f2:	4630      	mov	r0, r6
 80070f4:	9905      	ldr	r1, [sp, #20]
 80070f6:	f008 fe97 	bl	800fe28 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 80070fa:	4620      	mov	r0, r4
 80070fc:	b011      	add	sp, #68	@ 0x44
 80070fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007102:	bf00      	nop
 8007104:	080298fc 	.word	0x080298fc
 8007108:	0802ad74 	.word	0x0802ad74
 800710c:	0802ae54 	.word	0x0802ae54
 8007110:	080298e4 	.word	0x080298e4
 8007114:	08006de1 	.word	0x08006de1
 8007118:	fff0f0f0 	.word	0xfff0f0f0
 800711c:	08028bf8 	.word	0x08028bf8

08007120 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 23, 24, 20, 0, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8007120:	4770      	bx	lr
	...

08007124 <_Z23getFont_verdana_20_4bppv>:
{
 8007124:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 23, 24, 20, 0, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8007126:	4d17      	ldr	r5, [pc, #92]	@ (8007184 <_Z23getFont_verdana_20_4bppv+0x60>)
{
 8007128:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 23, 24, 20, 0, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800712a:	682c      	ldr	r4, [r5, #0]
 800712c:	f3bf 8f5b 	dmb	ish
 8007130:	f014 0401 	ands.w	r4, r4, #1
 8007134:	d122      	bne.n	800717c <_Z23getFont_verdana_20_4bppv+0x58>
 8007136:	4628      	mov	r0, r5
 8007138:	f01e fc8b 	bl	8025a52 <__cxa_guard_acquire>
 800713c:	b1f0      	cbz	r0, 800717c <_Z23getFont_verdana_20_4bppv+0x58>
 800713e:	233f      	movs	r3, #63	@ 0x3f
 8007140:	2217      	movs	r2, #23
 8007142:	4911      	ldr	r1, [pc, #68]	@ (8007188 <_Z23getFont_verdana_20_4bppv+0x64>)
 8007144:	9309      	str	r3, [sp, #36]	@ 0x24
 8007146:	4b11      	ldr	r3, [pc, #68]	@ (800718c <_Z23getFont_verdana_20_4bppv+0x68>)
 8007148:	4811      	ldr	r0, [pc, #68]	@ (8007190 <_Z23getFont_verdana_20_4bppv+0x6c>)
 800714a:	9308      	str	r3, [sp, #32]
 800714c:	4b11      	ldr	r3, [pc, #68]	@ (8007194 <_Z23getFont_verdana_20_4bppv+0x70>)
 800714e:	940a      	str	r4, [sp, #40]	@ 0x28
 8007150:	9307      	str	r3, [sp, #28]
 8007152:	2301      	movs	r3, #1
 8007154:	9401      	str	r4, [sp, #4]
 8007156:	9304      	str	r3, [sp, #16]
 8007158:	e9cd 4305 	strd	r4, r3, [sp, #20]
 800715c:	2304      	movs	r3, #4
 800715e:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8007162:	2314      	movs	r3, #20
 8007164:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8007168:	9300      	str	r3, [sp, #0]
 800716a:	2318      	movs	r3, #24
 800716c:	f7fe fd56 	bl	8005c1c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8007170:	4809      	ldr	r0, [pc, #36]	@ (8007198 <_Z23getFont_verdana_20_4bppv+0x74>)
 8007172:	f01e fcb9 	bl	8025ae8 <atexit>
 8007176:	4628      	mov	r0, r5
 8007178:	f01e fc77 	bl	8025a6a <__cxa_guard_release>
    return verdana_20_4bpp;
}
 800717c:	4804      	ldr	r0, [pc, #16]	@ (8007190 <_Z23getFont_verdana_20_4bppv+0x6c>)
 800717e:	b00f      	add	sp, #60	@ 0x3c
 8007180:	bd30      	pop	{r4, r5, pc}
 8007182:	bf00      	nop
 8007184:	2001242c 	.word	0x2001242c
 8007188:	903097cc 	.word	0x903097cc
 800718c:	0802b35c 	.word	0x0802b35c
 8007190:	20012430 	.word	0x20012430
 8007194:	0802b440 	.word	0x0802b440
 8007198:	08007121 	.word	0x08007121

0800719c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_30_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_30_4bpp();

touchgfx::GeneratedFont& getFont_verdana_30_4bpp()
{
    static touchgfx::GeneratedFont verdana_30_4bpp(glyphs_verdana_30_4bpp, 15, 35, 30, 0, 0, 4, 1, 0, 0, unicodes_verdana_30_4bpp, kerning_verdana_30_4bpp, 63, 0, 0, 0);
 800719c:	4770      	bx	lr
	...

080071a0 <_Z23getFont_verdana_30_4bppv>:
{
 80071a0:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_30_4bpp(glyphs_verdana_30_4bpp, 15, 35, 30, 0, 0, 4, 1, 0, 0, unicodes_verdana_30_4bpp, kerning_verdana_30_4bpp, 63, 0, 0, 0);
 80071a2:	4d17      	ldr	r5, [pc, #92]	@ (8007200 <_Z23getFont_verdana_30_4bppv+0x60>)
{
 80071a4:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_30_4bpp(glyphs_verdana_30_4bpp, 15, 35, 30, 0, 0, 4, 1, 0, 0, unicodes_verdana_30_4bpp, kerning_verdana_30_4bpp, 63, 0, 0, 0);
 80071a6:	682c      	ldr	r4, [r5, #0]
 80071a8:	f3bf 8f5b 	dmb	ish
 80071ac:	f014 0401 	ands.w	r4, r4, #1
 80071b0:	d122      	bne.n	80071f8 <_Z23getFont_verdana_30_4bppv+0x58>
 80071b2:	4628      	mov	r0, r5
 80071b4:	f01e fc4d 	bl	8025a52 <__cxa_guard_acquire>
 80071b8:	b1f0      	cbz	r0, 80071f8 <_Z23getFont_verdana_30_4bppv+0x58>
 80071ba:	233f      	movs	r3, #63	@ 0x3f
 80071bc:	2201      	movs	r2, #1
 80071be:	4911      	ldr	r1, [pc, #68]	@ (8007204 <_Z23getFont_verdana_30_4bppv+0x64>)
 80071c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80071c2:	4b11      	ldr	r3, [pc, #68]	@ (8007208 <_Z23getFont_verdana_30_4bppv+0x68>)
 80071c4:	4811      	ldr	r0, [pc, #68]	@ (800720c <_Z23getFont_verdana_30_4bppv+0x6c>)
 80071c6:	9308      	str	r3, [sp, #32]
 80071c8:	4b11      	ldr	r3, [pc, #68]	@ (8007210 <_Z23getFont_verdana_30_4bppv+0x70>)
 80071ca:	940a      	str	r4, [sp, #40]	@ 0x28
 80071cc:	9405      	str	r4, [sp, #20]
 80071ce:	e9cd 4306 	strd	r4, r3, [sp, #24]
 80071d2:	2304      	movs	r3, #4
 80071d4:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80071d8:	231e      	movs	r3, #30
 80071da:	220f      	movs	r2, #15
 80071dc:	9300      	str	r3, [sp, #0]
 80071de:	2323      	movs	r3, #35	@ 0x23
 80071e0:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 80071e4:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80071e8:	f7fe fd18 	bl	8005c1c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80071ec:	4809      	ldr	r0, [pc, #36]	@ (8007214 <_Z23getFont_verdana_30_4bppv+0x74>)
 80071ee:	f01e fc7b 	bl	8025ae8 <atexit>
 80071f2:	4628      	mov	r0, r5
 80071f4:	f01e fc39 	bl	8025a6a <__cxa_guard_release>
    return verdana_30_4bpp;
}
 80071f8:	4804      	ldr	r0, [pc, #16]	@ (800720c <_Z23getFont_verdana_30_4bppv+0x6c>)
 80071fa:	b00f      	add	sp, #60	@ 0x3c
 80071fc:	bd30      	pop	{r4, r5, pc}
 80071fe:	bf00      	nop
 8007200:	2001245c 	.word	0x2001245c
 8007204:	90309910 	.word	0x90309910
 8007208:	0802b398 	.word	0x0802b398
 800720c:	20012460 	.word	0x20012460
 8007210:	0802b444 	.word	0x0802b444
 8007214:	0800719d 	.word	0x0800719d

08007218 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_60_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_60_4bpp();

touchgfx::GeneratedFont& getFont_verdana_60_4bpp()
{
    static touchgfx::GeneratedFont verdana_60_4bpp(glyphs_verdana_60_4bpp, 37, 72, 60, 0, 0, 4, 1, 0, 2, unicodes_verdana_60_4bpp, kerning_verdana_60_4bpp, 63, 0, 0, 0);
 8007218:	4770      	bx	lr
	...

0800721c <_Z23getFont_verdana_60_4bppv>:
{
 800721c:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_60_4bpp(glyphs_verdana_60_4bpp, 37, 72, 60, 0, 0, 4, 1, 0, 2, unicodes_verdana_60_4bpp, kerning_verdana_60_4bpp, 63, 0, 0, 0);
 800721e:	4d17      	ldr	r5, [pc, #92]	@ (800727c <_Z23getFont_verdana_60_4bppv+0x60>)
{
 8007220:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_60_4bpp(glyphs_verdana_60_4bpp, 37, 72, 60, 0, 0, 4, 1, 0, 2, unicodes_verdana_60_4bpp, kerning_verdana_60_4bpp, 63, 0, 0, 0);
 8007222:	682c      	ldr	r4, [r5, #0]
 8007224:	f3bf 8f5b 	dmb	ish
 8007228:	f014 0401 	ands.w	r4, r4, #1
 800722c:	d123      	bne.n	8007276 <_Z23getFont_verdana_60_4bppv+0x5a>
 800722e:	4628      	mov	r0, r5
 8007230:	f01e fc0f 	bl	8025a52 <__cxa_guard_acquire>
 8007234:	b1f8      	cbz	r0, 8007276 <_Z23getFont_verdana_60_4bppv+0x5a>
 8007236:	233f      	movs	r3, #63	@ 0x3f
 8007238:	2201      	movs	r2, #1
 800723a:	4911      	ldr	r1, [pc, #68]	@ (8007280 <_Z23getFont_verdana_60_4bppv+0x64>)
 800723c:	9309      	str	r3, [sp, #36]	@ 0x24
 800723e:	4b11      	ldr	r3, [pc, #68]	@ (8007284 <_Z23getFont_verdana_60_4bppv+0x68>)
 8007240:	4811      	ldr	r0, [pc, #68]	@ (8007288 <_Z23getFont_verdana_60_4bppv+0x6c>)
 8007242:	9308      	str	r3, [sp, #32]
 8007244:	4b11      	ldr	r3, [pc, #68]	@ (800728c <_Z23getFont_verdana_60_4bppv+0x70>)
 8007246:	940a      	str	r4, [sp, #40]	@ 0x28
 8007248:	9307      	str	r3, [sp, #28]
 800724a:	2302      	movs	r3, #2
 800724c:	e9cd 4305 	strd	r4, r3, [sp, #20]
 8007250:	2304      	movs	r3, #4
 8007252:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8007256:	233c      	movs	r3, #60	@ 0x3c
 8007258:	2225      	movs	r2, #37	@ 0x25
 800725a:	9300      	str	r3, [sp, #0]
 800725c:	2348      	movs	r3, #72	@ 0x48
 800725e:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8007262:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8007266:	f7fe fcd9 	bl	8005c1c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800726a:	4809      	ldr	r0, [pc, #36]	@ (8007290 <_Z23getFont_verdana_60_4bppv+0x74>)
 800726c:	f01e fc3c 	bl	8025ae8 <atexit>
 8007270:	4628      	mov	r0, r5
 8007272:	f01e fbfa 	bl	8025a6a <__cxa_guard_release>
    return verdana_60_4bpp;
}
 8007276:	4804      	ldr	r0, [pc, #16]	@ (8007288 <_Z23getFont_verdana_60_4bppv+0x6c>)
 8007278:	b00f      	add	sp, #60	@ 0x3c
 800727a:	bd30      	pop	{r4, r5, pc}
 800727c:	2001248c 	.word	0x2001248c
 8007280:	903099e4 	.word	0x903099e4
 8007284:	0802b3a0 	.word	0x0802b3a0
 8007288:	20012490 	.word	0x20012490
 800728c:	0802b448 	.word	0x0802b448
 8007290:	08007219 	.word	0x08007219

08007294 <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
 8007294:	2000      	movs	r0, #0
 8007296:	4770      	bx	lr

08007298 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
 8007298:	2000      	movs	r0, #0
 800729a:	4770      	bx	lr

0800729c <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800729c:	b40e      	push	{r1, r2, r3}
 800729e:	b503      	push	{r0, r1, lr}
 80072a0:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80072a2:	2100      	movs	r1, #0
{
 80072a4:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 80072a8:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80072aa:	f00f fe21 	bl	8016ef0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 80072ae:	b002      	add	sp, #8
 80072b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80072b4:	b003      	add	sp, #12
 80072b6:	4770      	bx	lr

080072b8 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80072b8:	b40c      	push	{r2, r3}
 80072ba:	b507      	push	{r0, r1, r2, lr}
 80072bc:	ab04      	add	r3, sp, #16
 80072be:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 80072c2:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 80072c4:	f00f fe14 	bl	8016ef0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 80072c8:	b003      	add	sp, #12
 80072ca:	f85d eb04 	ldr.w	lr, [sp], #4
 80072ce:	b002      	add	sp, #8
 80072d0:	4770      	bx	lr
	...

080072d4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 80072d4:	6c43      	ldr	r3, [r0, #68]	@ 0x44
{
 80072d6:	b510      	push	{r4, lr}
 80072d8:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 80072da:	b373      	cbz	r3, 800733a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 80072dc:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
 80072de:	b92b      	cbnz	r3, 80072ec <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 80072e0:	4b18      	ldr	r3, [pc, #96]	@ (8007344 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 80072e2:	21c5      	movs	r1, #197	@ 0xc5
 80072e4:	4a18      	ldr	r2, [pc, #96]	@ (8007348 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 80072e6:	4819      	ldr	r0, [pc, #100]	@ (800734c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 80072e8:	f01e fbe0 	bl	8025aac <__assert_func>
            return buffer[pos];
 80072ec:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 80072ee:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80072f2:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80072f4:	b30b      	cbz	r3, 800733a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 80072f6:	f011 f9bb 	bl	8018670 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 80072fa:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d803      	bhi.n	8007308 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 8007300:	4b13      	ldr	r3, [pc, #76]	@ (8007350 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 8007302:	21cb      	movs	r1, #203	@ 0xcb
 8007304:	4a13      	ldr	r2, [pc, #76]	@ (8007354 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 8007306:	e7ee      	b.n	80072e6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 8007308:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 800730a:	f640 103f 	movw	r0, #2367	@ 0x93f
 800730e:	1c53      	adds	r3, r2, #1
 8007310:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 8007312:	2b09      	cmp	r3, #9
 8007314:	4619      	mov	r1, r3
 8007316:	bf88      	it	hi
 8007318:	f1a3 010a 	subhi.w	r1, r3, #10
 800731c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8007320:	8c49      	ldrh	r1, [r1, #34]	@ 0x22
 8007322:	4281      	cmp	r1, r0
 8007324:	d109      	bne.n	800733a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 8007326:	2b0a      	cmp	r3, #10
 8007328:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 800732c:	bf28      	it	cs
 800732e:	2300      	movcs	r3, #0
            return buffer[pos];
 8007330:	8c50      	ldrh	r0, [r2, #34]	@ 0x22

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 8007332:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8007336:	8458      	strh	r0, [r3, #34]	@ 0x22
            buffer[pos] = newChar;
 8007338:	8451      	strh	r1, [r2, #34]	@ 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 800733a:	4620      	mov	r0, r4
}
 800733c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 8007340:	f011 b898 	b.w	8018474 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8007344:	08029928 	.word	0x08029928
 8007348:	08029931 	.word	0x08029931
 800734c:	080299dc 	.word	0x080299dc
 8007350:	08029a26 	.word	0x08029a26
 8007354:	08029a34 	.word	0x08029a34

08007358 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 8007358:	f011 b855 	b.w	8018406 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0800735c <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 800735c:	b510      	push	{r4, lr}
 800735e:	b086      	sub	sp, #24
 8007360:	ac02      	add	r4, sp, #8
 8007362:	e884 0006 	stmia.w	r4, {r1, r2}
 8007366:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 8007368:	ab0a      	add	r3, sp, #40	@ 0x28
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 800736a:	4621      	mov	r1, r4
    va_start(pArg, format);
 800736c:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 800736e:	9301      	str	r3, [sp, #4]
 8007370:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007372:	9300      	str	r3, [sp, #0]
 8007374:	9b08      	ldr	r3, [sp, #32]
 8007376:	f00e fa33 	bl	80157e0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 800737a:	b006      	add	sp, #24
 800737c:	bd10      	pop	{r4, pc}
	...

08007380 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8007380:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 8007382:	bb18      	cbnz	r0, 80073cc <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 8007384:	4b12      	ldr	r3, [pc, #72]	@ (80073d0 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 8007386:	4813      	ldr	r0, [pc, #76]	@ (80073d4 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 8007388:	681c      	ldr	r4, [r3, #0]
 800738a:	4913      	ldr	r1, [pc, #76]	@ (80073d8 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 800738c:	b1b4      	cbz	r4, 80073bc <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800738e:	6822      	ldr	r2, [r4, #0]
 8007390:	4422      	add	r2, r4
 8007392:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8007394:	6862      	ldr	r2, [r4, #4]
 8007396:	4422      	add	r2, r4
 8007398:	600a      	str	r2, [r1, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800739a:	68a2      	ldr	r2, [r4, #8]
 800739c:	4414      	add	r4, r2
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 800739e:	4b0f      	ldr	r3, [pc, #60]	@ (80073dc <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 80073a0:	2200      	movs	r2, #0
 80073a2:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 80073a4:	f000 f838 	bl	8007418 <_ZN17TypedTextDatabase8getFontsEv>
 80073a8:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 80073aa:	f000 f833 	bl	8007414 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 80073ae:	4b0c      	ldr	r3, [pc, #48]	@ (80073e0 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 80073b0:	601c      	str	r4, [r3, #0]
        fonts = f;
 80073b2:	4b0c      	ldr	r3, [pc, #48]	@ (80073e4 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 80073b4:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 80073b6:	4b0c      	ldr	r3, [pc, #48]	@ (80073e8 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 80073b8:	8018      	strh	r0, [r3, #0]
    }
}
 80073ba:	e007      	b.n	80073cc <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 80073bc:	4b0b      	ldr	r3, [pc, #44]	@ (80073ec <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 80073be:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 80073c0:	4b0b      	ldr	r3, [pc, #44]	@ (80073f0 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 80073c2:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 80073c4:	4b0b      	ldr	r3, [pc, #44]	@ (80073f4 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 80073c6:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 80073c8:	2c00      	cmp	r4, #0
 80073ca:	d1e8      	bne.n	800739e <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 80073cc:	bd38      	pop	{r3, r4, r5, pc}
 80073ce:	bf00      	nop
 80073d0:	200124c8 	.word	0x200124c8
 80073d4:	200124c0 	.word	0x200124c0
 80073d8:	200124bc 	.word	0x200124bc
 80073dc:	200124c4 	.word	0x200124c4
 80073e0:	20027bec 	.word	0x20027bec
 80073e4:	20027bf4 	.word	0x20027bf4
 80073e8:	20027bf0 	.word	0x20027bf0
 80073ec:	90309c08 	.word	0x90309c08
 80073f0:	90309bec 	.word	0x90309bec
 80073f4:	90309ca8 	.word	0x90309ca8

080073f8 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 80073f8:	4b04      	ldr	r3, [pc, #16]	@ (800740c <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8007400:	4b03      	ldr	r3, [pc, #12]	@ (8007410 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 8007402:	681b      	ldr	r3, [r3, #0]
}
 8007404:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8007408:	4770      	bx	lr
 800740a:	bf00      	nop
 800740c:	200124bc 	.word	0x200124bc
 8007410:	200124c0 	.word	0x200124c0

08007414 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 8007414:	2007      	movs	r0, #7
 8007416:	4770      	bx	lr

08007418 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 8007418:	4800      	ldr	r0, [pc, #0]	@ (800741c <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 800741a:	4770      	bx	lr
 800741c:	200124cc 	.word	0x200124cc

08007420 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_20_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8007420:	b510      	push	{r4, lr}
};
 8007422:	4c05      	ldr	r4, [pc, #20]	@ (8007438 <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
    &(getFont_verdana_30_4bpp()),
 8007424:	f7ff febc 	bl	80071a0 <_Z23getFont_verdana_30_4bppv>
};
 8007428:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_60_4bpp()),
 800742a:	f7ff fef7 	bl	800721c <_Z23getFont_verdana_60_4bppv>
};
 800742e:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_20_4bpp())
 8007430:	f7ff fe78 	bl	8007124 <_Z23getFont_verdana_20_4bppv>
};
 8007434:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
 8007436:	bd10      	pop	{r4, pc}
 8007438:	200124cc 	.word	0x200124cc

0800743c <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 800743c:	4770      	bx	lr

0800743e <_ZN19FrontendApplicationD0Ev>:
 800743e:	b510      	push	{r4, lr}
 8007440:	4604      	mov	r4, r0
 8007442:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8007446:	f01e fb02 	bl	8025a4e <_ZdlPvj>
 800744a:	4620      	mov	r0, r4
 800744c:	bd10      	pop	{r4, pc}

0800744e <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 800744e:	b510      	push	{r4, lr}
 8007450:	4604      	mov	r4, r0
    {
        model.tick();
 8007452:	f8d0 0158 	ldr.w	r0, [r0, #344]	@ 0x158
 8007456:	f000 f813 	bl	8007480 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 800745a:	4620      	mov	r0, r4
    }
 800745c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 8007460:	f00e be7e 	b.w	8016160 <_ZN8touchgfx11Application15handleTickEventEv>

08007464 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8007464:	b510      	push	{r4, lr}
 8007466:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 8007468:	f7fe fb46 	bl	8005af8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 800746c:	4b01      	ldr	r3, [pc, #4]	@ (8007474 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 800746e:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 8007470:	6023      	str	r3, [r4, #0]
}
 8007472:	bd10      	pop	{r4, pc}
 8007474:	08029b10 	.word	0x08029b10

08007478 <_ZN5ModelC1Ev>:
extern __IO float humidity;
extern __IO float pressure;
extern __IO float gas_resistance;
extern __IO uint16_t meas_period;

Model::Model() : modelListener(0)
 8007478:	2200      	movs	r2, #0
 800747a:	6002      	str	r2, [r0, #0]
{

}
 800747c:	4770      	bx	lr
	...

08007480 <_ZN5Model4tickEv>:

void Model::tick()
{
 8007480:	b570      	push	{r4, r5, r6, lr}
			tick1 = 0;
		}


  */
  modelListener->UpdateTemp(temperature);
 8007482:	4b1d      	ldr	r3, [pc, #116]	@ (80074f8 <_ZN5Model4tickEv+0x78>)
{
 8007484:	4604      	mov	r4, r0
  modelListener->UpdateTemp(temperature);
 8007486:	6800      	ldr	r0, [r0, #0]
  modelListener->UpdateHumi(humidity);
  modelListener->UpdatePres(pressure);
  modelListener->UpdateGas(gas_resistance);


  modelListener->UpdateGraph1(uhADCxConvertedData * 3300 / 4096);
 8007488:	f640 45e4 	movw	r5, #3300	@ 0xce4
  modelListener->UpdateTemp(temperature);
 800748c:	ed93 0a00 	vldr	s0, [r3]
 8007490:	6803      	ldr	r3, [r0, #0]
  modelListener->UpdateGraph1(uhADCxConvertedData * 3300 / 4096);
 8007492:	4e1a      	ldr	r6, [pc, #104]	@ (80074fc <_ZN5Model4tickEv+0x7c>)
  modelListener->UpdateTemp(temperature);
 8007494:	695b      	ldr	r3, [r3, #20]
 8007496:	4798      	blx	r3
  modelListener->UpdateHumi(humidity);
 8007498:	6820      	ldr	r0, [r4, #0]
 800749a:	4b19      	ldr	r3, [pc, #100]	@ (8007500 <_ZN5Model4tickEv+0x80>)
 800749c:	ed93 0a00 	vldr	s0, [r3]
 80074a0:	6803      	ldr	r3, [r0, #0]
 80074a2:	699b      	ldr	r3, [r3, #24]
 80074a4:	4798      	blx	r3
  modelListener->UpdatePres(pressure);
 80074a6:	6820      	ldr	r0, [r4, #0]
 80074a8:	4b16      	ldr	r3, [pc, #88]	@ (8007504 <_ZN5Model4tickEv+0x84>)
 80074aa:	ed93 0a00 	vldr	s0, [r3]
 80074ae:	6803      	ldr	r3, [r0, #0]
 80074b0:	69db      	ldr	r3, [r3, #28]
 80074b2:	4798      	blx	r3
  modelListener->UpdateGas(gas_resistance);
 80074b4:	6820      	ldr	r0, [r4, #0]
 80074b6:	4b14      	ldr	r3, [pc, #80]	@ (8007508 <_ZN5Model4tickEv+0x88>)
 80074b8:	ed93 0a00 	vldr	s0, [r3]
 80074bc:	6803      	ldr	r3, [r0, #0]
 80074be:	6a1b      	ldr	r3, [r3, #32]
 80074c0:	4798      	blx	r3
  modelListener->UpdateGraph1(uhADCxConvertedData * 3300 / 4096);
 80074c2:	8831      	ldrh	r1, [r6, #0]
 80074c4:	6820      	ldr	r0, [r4, #0]
 80074c6:	b289      	uxth	r1, r1
 80074c8:	6803      	ldr	r3, [r0, #0]
 80074ca:	4369      	muls	r1, r5
 80074cc:	689b      	ldr	r3, [r3, #8]
 80074ce:	0b09      	lsrs	r1, r1, #12
 80074d0:	4798      	blx	r3
  modelListener->UpdateBar(uhADCxConvertedData * 3300 / 4096);
 80074d2:	8831      	ldrh	r1, [r6, #0]
 80074d4:	6820      	ldr	r0, [r4, #0]
 80074d6:	b289      	uxth	r1, r1
 80074d8:	6803      	ldr	r3, [r0, #0]
 80074da:	4369      	muls	r1, r5
 80074dc:	68db      	ldr	r3, [r3, #12]
 80074de:	0b09      	lsrs	r1, r1, #12
 80074e0:	4798      	blx	r3
  modelListener->UpdateTextArea(uhADCxConvertedData * 3300 / 4096);
 80074e2:	8831      	ldrh	r1, [r6, #0]
 80074e4:	6820      	ldr	r0, [r4, #0]
 80074e6:	b289      	uxth	r1, r1
 80074e8:	6803      	ldr	r3, [r0, #0]
 80074ea:	4369      	muls	r1, r5
 80074ec:	691b      	ldr	r3, [r3, #16]
 80074ee:	0b09      	lsrs	r1, r1, #12
}
 80074f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  modelListener->UpdateTextArea(uhADCxConvertedData * 3300 / 4096);
 80074f4:	4718      	bx	r3
 80074f6:	bf00      	nop
 80074f8:	20011fac 	.word	0x20011fac
 80074fc:	20011fb0 	.word	0x20011fb0
 8007500:	20011fa8 	.word	0x20011fa8
 8007504:	20011fa4 	.word	0x20011fa4
 8007508:	20011fa0 	.word	0x20011fa0

0800750c <_ZN13ModelListener10UpdateTempEf>:
    }
    virtual void UpdateGraph1(uint16_t value){}
    virtual void UpdateBar(uint16_t value){}
    virtual void UpdateTextArea(uint16_t value){}

    virtual void UpdateTemp(float temperature){}
 800750c:	4770      	bx	lr

0800750e <_ZN13ModelListener10UpdateHumiEf>:
    virtual void UpdateHumi(float humidity){}
 800750e:	4770      	bx	lr

08007510 <_ZN13ModelListener10UpdatePresEf>:
    virtual void UpdatePres(float pressure){}
 8007510:	4770      	bx	lr

08007512 <_ZN13ModelListener9UpdateGasEf>:
    virtual void UpdateGas(float gas_resistance){}
 8007512:	4770      	bx	lr

08007514 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 8007514:	4770      	bx	lr

08007516 <_ZThn4_N16Screen1PresenterD1Ev>:
 8007516:	3804      	subs	r0, #4
 8007518:	4770      	bx	lr

0800751a <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
 800751a:	4770      	bx	lr

0800751c <_ZN16Screen1PresenterD0Ev>:
 800751c:	b510      	push	{r4, lr}
 800751e:	4604      	mov	r4, r0
 8007520:	2110      	movs	r1, #16
 8007522:	f01e fa94 	bl	8025a4e <_ZdlPvj>
 8007526:	4620      	mov	r0, r4
 8007528:	bd10      	pop	{r4, pc}

0800752a <_ZThn4_N16Screen1PresenterD0Ev>:
 800752a:	f1a0 0004 	sub.w	r0, r0, #4
 800752e:	e7f5      	b.n	800751c <_ZN16Screen1PresenterD0Ev>

08007530 <_ZN16Screen1Presenter12UpdateGraph1Et>:
{

}
void Screen1Presenter::UpdateGraph1(uint16_t value)
{
	view.UpdateGraph1(value);
 8007530:	68c0      	ldr	r0, [r0, #12]
 8007532:	f000 b83f 	b.w	80075b4 <_ZN11Screen1View12UpdateGraph1Et>

08007536 <_ZThn4_N16Screen1Presenter12UpdateGraph1Et>:

    void UpdateGraph1(uint16_t value);
 8007536:	f1a0 0004 	sub.w	r0, r0, #4
 800753a:	f7ff bff9 	b.w	8007530 <_ZN16Screen1Presenter12UpdateGraph1Et>

0800753e <_ZN16Screen1Presenter9UpdateBarEt>:
}

void Screen1Presenter::UpdateBar(uint16_t value)
{
	view.UpdateBar(value);
 800753e:	68c0      	ldr	r0, [r0, #12]
 8007540:	f000 b840 	b.w	80075c4 <_ZN11Screen1View9UpdateBarEt>

08007544 <_ZThn4_N16Screen1Presenter9UpdateBarEt>:
    void UpdateBar(uint16_t value);
 8007544:	f1a0 0004 	sub.w	r0, r0, #4
 8007548:	f7ff bff9 	b.w	800753e <_ZN16Screen1Presenter9UpdateBarEt>

0800754c <_ZN16Screen1Presenter14UpdateTextAreaEt>:
}

void Screen1Presenter::UpdateTextArea(uint16_t value)
{
	view.UpdateTextArea(value);
 800754c:	68c0      	ldr	r0, [r0, #12]
 800754e:	f000 b83d 	b.w	80075cc <_ZN11Screen1View14UpdateTextAreaEt>

08007552 <_ZThn4_N16Screen1Presenter14UpdateTextAreaEt>:
    void UpdateTextArea(uint16_t value);
 8007552:	f1a0 0004 	sub.w	r0, r0, #4
 8007556:	f7ff bff9 	b.w	800754c <_ZN16Screen1Presenter14UpdateTextAreaEt>
	...

0800755c <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 800755c:	2200      	movs	r2, #0
    : view(v)
 800755e:	60c1      	str	r1, [r0, #12]
 8007560:	6082      	str	r2, [r0, #8]
 8007562:	4a02      	ldr	r2, [pc, #8]	@ (800756c <_ZN16Screen1PresenterC1ER11Screen1View+0x10>)
 8007564:	6002      	str	r2, [r0, #0]
 8007566:	3224      	adds	r2, #36	@ 0x24
 8007568:	6042      	str	r2, [r0, #4]
}
 800756a:	4770      	bx	lr
 800756c:	08029b5c 	.word	0x08029b5c

08007570 <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 8007570:	4770      	bx	lr
	...

08007574 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8007574:	4b03      	ldr	r3, [pc, #12]	@ (8007584 <_ZN11Screen1ViewD1Ev+0x10>)
 8007576:	b510      	push	{r4, lr}
 8007578:	4604      	mov	r4, r0
 800757a:	6003      	str	r3, [r0, #0]
 800757c:	f7ff f81c 	bl	80065b8 <_ZN15Screen1ViewBaseD1Ev>
 8007580:	4620      	mov	r0, r4
 8007582:	bd10      	pop	{r4, pc}
 8007584:	08029bb0 	.word	0x08029bb0

08007588 <_ZN11Screen1ViewD0Ev>:
 8007588:	b510      	push	{r4, lr}
 800758a:	4604      	mov	r4, r0
 800758c:	f7ff fff2 	bl	8007574 <_ZN11Screen1ViewD1Ev>
 8007590:	f243 51f4 	movw	r1, #13812	@ 0x35f4
 8007594:	4620      	mov	r0, r4
 8007596:	f01e fa5a 	bl	8025a4e <_ZdlPvj>
 800759a:	4620      	mov	r0, r4
 800759c:	bd10      	pop	{r4, pc}
	...

080075a0 <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 80075a0:	b510      	push	{r4, lr}
 80075a2:	4604      	mov	r4, r0
 80075a4:	f7ff f92c 	bl	8006800 <_ZN15Screen1ViewBaseC1Ev>
 80075a8:	4b01      	ldr	r3, [pc, #4]	@ (80075b0 <_ZN11Screen1ViewC1Ev+0x10>)
}
 80075aa:	4620      	mov	r0, r4
Screen1View::Screen1View()
 80075ac:	6023      	str	r3, [r4, #0]
}
 80075ae:	bd10      	pop	{r4, pc}
 80075b0:	08029bb0 	.word	0x08029bb0

080075b4 <_ZN11Screen1View12UpdateGraph1Et>:
 80075b4:	f8d0 30cc 	ldr.w	r3, [r0, #204]	@ 0xcc
        return addDataPointScaled(int2scaledY(y));
 80075b8:	3098      	adds	r0, #152	@ 0x98
 80075ba:	4359      	muls	r1, r3
 80075bc:	f00b b809 	b.w	80125d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>

080075c0 <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
 80075c0:	f7fe bf70 	b.w	80064a4 <_ZN15Screen1ViewBase11setupScreenEv>

080075c4 <_ZN11Screen1View9UpdateBarEt>:
{
	dynamicGraph1.addDataPoint(value);
}
void Screen1View::UpdateBar(uint16_t value)
{
	lineProgress1.setValue(value);
 80075c4:	f200 5044 	addw	r0, r0, #1348	@ 0x544
 80075c8:	f008 b9e3 	b.w	800f992 <_ZN8touchgfx12LineProgress8setValueEi>

080075cc <_ZN11Screen1View14UpdateTextAreaEt>:
}
void Screen1View::UpdateTextArea(uint16_t value)
{
 80075cc:	ee07 1a90 	vmov	s15, r1
     *
     * @see snprintf, snprintfFloats
     */
    static UnicodeChar* snprintfFloat(UnicodeChar* dst, uint16_t dstSize, const char* format, const float value)
    {
        return snprintfFloats(dst, dstSize, format, &value);
 80075d0:	4a09      	ldr	r2, [pc, #36]	@ (80075f8 <_ZN11Screen1View14UpdateTextAreaEt+0x2c>)
	Unicode::snprintfFloat(textArea_ValueBuffer,TEXTAREA_VALUE_SIZE,"%.f",value);
 80075d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
{
 80075d6:	b513      	push	{r0, r1, r4, lr}
 80075d8:	4604      	mov	r4, r0
 80075da:	ab01      	add	r3, sp, #4
 80075dc:	210a      	movs	r1, #10
 80075de:	f500 60de 	add.w	r0, r0, #1776	@ 0x6f0
	Unicode::snprintfFloat(textArea_ValueBuffer,TEXTAREA_VALUE_SIZE,"%.f",value);
 80075e2:	edcd 7a01 	vstr	s15, [sp, #4]
 80075e6:	f011 ffad 	bl	8019544 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>
	textArea_Value.invalidate();
 80075ea:	f204 60a4 	addw	r0, r4, #1700	@ 0x6a4
}
 80075ee:	b002      	add	sp, #8
 80075f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	textArea_Value.invalidate();
 80075f4:	f00f bda7 	b.w	8017146 <_ZNK8touchgfx8Drawable10invalidateEv>
 80075f8:	08029ba4 	.word	0x08029ba4

080075fc <_ZN13ModelListener12UpdateGraph1Et>:
    virtual void UpdateGraph1(uint16_t value){}
 80075fc:	4770      	bx	lr

080075fe <_ZN13ModelListener9UpdateBarEt>:
    virtual void UpdateBar(uint16_t value){}
 80075fe:	4770      	bx	lr

08007600 <_ZN13ModelListener14UpdateTextAreaEt>:
    virtual void UpdateTextArea(uint16_t value){}
 8007600:	4770      	bx	lr

08007602 <_ZN16Screen2PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen2Presenter() {};
 8007602:	4770      	bx	lr

08007604 <_ZThn4_N16Screen2PresenterD1Ev>:
 8007604:	3804      	subs	r0, #4
 8007606:	4770      	bx	lr

08007608 <_ZN16Screen2Presenter10deactivateEv>:
}

void Screen2Presenter::activate()
{

}
 8007608:	4770      	bx	lr

0800760a <_ZN16Screen2PresenterD0Ev>:
 800760a:	b510      	push	{r4, lr}
 800760c:	4604      	mov	r4, r0
 800760e:	2110      	movs	r1, #16
 8007610:	f01e fa1d 	bl	8025a4e <_ZdlPvj>
 8007614:	4620      	mov	r0, r4
 8007616:	bd10      	pop	{r4, pc}

08007618 <_ZThn4_N16Screen2PresenterD0Ev>:
 8007618:	f1a0 0004 	sub.w	r0, r0, #4
 800761c:	e7f5      	b.n	800760a <_ZN16Screen2PresenterD0Ev>

0800761e <_ZN16Screen2Presenter10UpdateTempEf>:
{

}
void Screen2Presenter::UpdateTemp(float temperature)
{
	view.UpdateTemp(temperature);
 800761e:	68c0      	ldr	r0, [r0, #12]
 8007620:	f000 b848 	b.w	80076b4 <_ZN11Screen2View10UpdateTempEf>

08007624 <_ZThn4_N16Screen2Presenter10UpdateTempEf>:

    void UpdateTemp(float temperature);
 8007624:	f1a0 0004 	sub.w	r0, r0, #4
 8007628:	f7ff bff9 	b.w	800761e <_ZN16Screen2Presenter10UpdateTempEf>

0800762c <_ZN16Screen2Presenter10UpdateHumiEf>:
}

void Screen2Presenter::UpdateHumi(float humidity)
{
	view.UpdateHumi(humidity);
 800762c:	68c0      	ldr	r0, [r0, #12]
 800762e:	f000 b855 	b.w	80076dc <_ZN11Screen2View10UpdateHumiEf>

08007632 <_ZThn4_N16Screen2Presenter10UpdateHumiEf>:
    void UpdateHumi(float humidity);
 8007632:	f1a0 0004 	sub.w	r0, r0, #4
 8007636:	f7ff bff9 	b.w	800762c <_ZN16Screen2Presenter10UpdateHumiEf>

0800763a <_ZN16Screen2Presenter10UpdatePresEf>:
}
void Screen2Presenter::UpdatePres(float pressure)
{
	view.UpdatePres(pressure);
 800763a:	68c0      	ldr	r0, [r0, #12]
 800763c:	f000 b862 	b.w	8007704 <_ZN11Screen2View10UpdatePresEf>

08007640 <_ZThn4_N16Screen2Presenter10UpdatePresEf>:
    void UpdatePres(float pressure);
 8007640:	f1a0 0004 	sub.w	r0, r0, #4
 8007644:	f7ff bff9 	b.w	800763a <_ZN16Screen2Presenter10UpdatePresEf>

08007648 <_ZN16Screen2Presenter9UpdateGasEf>:
}
void Screen2Presenter::UpdateGas(float gas_resistance)
{
	view.UpdateGas(gas_resistance);
 8007648:	68c0      	ldr	r0, [r0, #12]
 800764a:	f000 b86f 	b.w	800772c <_ZN11Screen2View9UpdateGasEf>

0800764e <_ZThn4_N16Screen2Presenter9UpdateGasEf>:
    void UpdateGas(float gas_resistance);
 800764e:	f1a0 0004 	sub.w	r0, r0, #4
 8007652:	f7ff bff9 	b.w	8007648 <_ZN16Screen2Presenter9UpdateGasEf>
	...

08007658 <_ZN16Screen2PresenterC1ER11Screen2View>:
    ModelListener() : model(0) {}
 8007658:	2200      	movs	r2, #0
    : view(v)
 800765a:	60c1      	str	r1, [r0, #12]
 800765c:	6082      	str	r2, [r0, #8]
 800765e:	4a02      	ldr	r2, [pc, #8]	@ (8007668 <_ZN16Screen2PresenterC1ER11Screen2View+0x10>)
 8007660:	6002      	str	r2, [r0, #0]
 8007662:	3228      	adds	r2, #40	@ 0x28
 8007664:	6042      	str	r2, [r0, #4]
}
 8007666:	4770      	bx	lr
 8007668:	08029be4 	.word	0x08029be4

0800766c <_ZN11Screen2View14tearDownScreenEv>:
}

void Screen2View::tearDownScreen()
{
    Screen2ViewBase::tearDownScreen();
}
 800766c:	4770      	bx	lr
	...

08007670 <_ZN11Screen2ViewD1Ev>:

class Screen2View : public Screen2ViewBase
{
public:
    Screen2View();
    virtual ~Screen2View() {}
 8007670:	4b03      	ldr	r3, [pc, #12]	@ (8007680 <_ZN11Screen2ViewD1Ev+0x10>)
 8007672:	b510      	push	{r4, lr}
 8007674:	4604      	mov	r4, r0
 8007676:	6003      	str	r3, [r0, #0]
 8007678:	f7ff fb86 	bl	8006d88 <_ZN15Screen2ViewBaseD1Ev>
 800767c:	4620      	mov	r0, r4
 800767e:	bd10      	pop	{r4, pc}
 8007680:	08029c40 	.word	0x08029c40

08007684 <_ZN11Screen2ViewD0Ev>:
 8007684:	b510      	push	{r4, lr}
 8007686:	4604      	mov	r4, r0
 8007688:	f7ff fff2 	bl	8007670 <_ZN11Screen2ViewD1Ev>
 800768c:	f44f 7119 	mov.w	r1, #612	@ 0x264
 8007690:	4620      	mov	r0, r4
 8007692:	f01e f9dc 	bl	8025a4e <_ZdlPvj>
 8007696:	4620      	mov	r0, r4
 8007698:	bd10      	pop	{r4, pc}
	...

0800769c <_ZN11Screen2ViewC1Ev>:
Screen2View::Screen2View()
 800769c:	b510      	push	{r4, lr}
 800769e:	4604      	mov	r4, r0
 80076a0:	f7ff fbcc 	bl	8006e3c <_ZN15Screen2ViewBaseC1Ev>
 80076a4:	4b01      	ldr	r3, [pc, #4]	@ (80076ac <_ZN11Screen2ViewC1Ev+0x10>)
}
 80076a6:	4620      	mov	r0, r4
Screen2View::Screen2View()
 80076a8:	6023      	str	r3, [r4, #0]
}
 80076aa:	bd10      	pop	{r4, pc}
 80076ac:	08029c40 	.word	0x08029c40

080076b0 <_ZN11Screen2View11setupScreenEv>:
    Screen2ViewBase::setupScreen();
 80076b0:	f7ff bb6b 	b.w	8006d8a <_ZN15Screen2ViewBase11setupScreenEv>

080076b4 <_ZN11Screen2View10UpdateTempEf>:
void Screen2View::UpdateTemp(float temperature)
{
 80076b4:	b513      	push	{r0, r1, r4, lr}
 80076b6:	4604      	mov	r4, r0
 80076b8:	ab01      	add	r3, sp, #4
 80076ba:	4a07      	ldr	r2, [pc, #28]	@ (80076d8 <_ZN11Screen2View10UpdateTempEf+0x24>)
 80076bc:	210a      	movs	r1, #10
 80076be:	f500 7001 	add.w	r0, r0, #516	@ 0x204
 80076c2:	ed8d 0a01 	vstr	s0, [sp, #4]
 80076c6:	f011 ff3d 	bl	8019544 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>
	Unicode::snprintfFloat(textAreaTempBuffer,TEXTAREATEMP_SIZE,"%.2f",temperature);
	textAreaTemp.invalidate();
 80076ca:	f104 00d4 	add.w	r0, r4, #212	@ 0xd4
}
 80076ce:	b002      	add	sp, #8
 80076d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	textAreaTemp.invalidate();
 80076d4:	f00f bd37 	b.w	8017146 <_ZNK8touchgfx8Drawable10invalidateEv>
 80076d8:	08029c30 	.word	0x08029c30

080076dc <_ZN11Screen2View10UpdateHumiEf>:

void Screen2View::UpdateHumi(float humidity)
{
 80076dc:	b513      	push	{r0, r1, r4, lr}
 80076de:	4604      	mov	r4, r0
 80076e0:	ab01      	add	r3, sp, #4
 80076e2:	4a07      	ldr	r2, [pc, #28]	@ (8007700 <_ZN11Screen2View10UpdateHumiEf+0x24>)
 80076e4:	210a      	movs	r1, #10
 80076e6:	f500 7006 	add.w	r0, r0, #536	@ 0x218
 80076ea:	ed8d 0a01 	vstr	s0, [sp, #4]
 80076ee:	f011 ff29 	bl	8019544 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>
	Unicode::snprintfFloat(textAreaHumiBuffer,TEXTAREAHUMI_SIZE,"%.2f",humidity);
	textAreaHumi.invalidate();
 80076f2:	f504 7090 	add.w	r0, r4, #288	@ 0x120
}
 80076f6:	b002      	add	sp, #8
 80076f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	textAreaHumi.invalidate();
 80076fc:	f00f bd23 	b.w	8017146 <_ZNK8touchgfx8Drawable10invalidateEv>
 8007700:	08029c30 	.word	0x08029c30

08007704 <_ZN11Screen2View10UpdatePresEf>:
void Screen2View::UpdatePres(float pressure)
{
 8007704:	b513      	push	{r0, r1, r4, lr}
 8007706:	4604      	mov	r4, r0
 8007708:	ab01      	add	r3, sp, #4
 800770a:	4a07      	ldr	r2, [pc, #28]	@ (8007728 <_ZN11Screen2View10UpdatePresEf+0x24>)
 800770c:	210a      	movs	r1, #10
 800770e:	f500 700b 	add.w	r0, r0, #556	@ 0x22c
 8007712:	ed8d 0a01 	vstr	s0, [sp, #4]
 8007716:	f011 ff15 	bl	8019544 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>
	Unicode::snprintfFloat(textAreaPresBuffer,TEXTAREAPRES_SIZE,"%.2f",pressure);
	textAreaPres.invalidate();
 800771a:	f504 70b6 	add.w	r0, r4, #364	@ 0x16c
}
 800771e:	b002      	add	sp, #8
 8007720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	textAreaPres.invalidate();
 8007724:	f00f bd0f 	b.w	8017146 <_ZNK8touchgfx8Drawable10invalidateEv>
 8007728:	08029c30 	.word	0x08029c30

0800772c <_ZN11Screen2View9UpdateGasEf>:
void Screen2View::UpdateGas(float gas_resistance)
{
 800772c:	b513      	push	{r0, r1, r4, lr}
 800772e:	4604      	mov	r4, r0
 8007730:	ab01      	add	r3, sp, #4
 8007732:	4a07      	ldr	r2, [pc, #28]	@ (8007750 <_ZN11Screen2View9UpdateGasEf+0x24>)
 8007734:	210a      	movs	r1, #10
 8007736:	f500 7010 	add.w	r0, r0, #576	@ 0x240
 800773a:	ed8d 0a01 	vstr	s0, [sp, #4]
 800773e:	f011 ff01 	bl	8019544 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>
	Unicode::snprintfFloat(textAreaGasBuffer,TEXTAREAGAS_SIZE,"%.f",gas_resistance);
	textAreaGas.invalidate();
 8007742:	f504 70dc 	add.w	r0, r4, #440	@ 0x1b8
}
 8007746:	b002      	add	sp, #8
 8007748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	textAreaGas.invalidate();
 800774c:	f00f bcfb 	b.w	8017146 <_ZNK8touchgfx8Drawable10invalidateEv>
 8007750:	08029ba4 	.word	0x08029ba4

08007754 <ft6x06_Reset>:
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
  /* Do nothing */
  /* No software reset sequence available in FT6206 IC */
}
 8007754:	4770      	bx	lr

08007756 <ft6x06_TS_ITStatus>:
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT6206 */
  return 0;
}
 8007756:	2000      	movs	r0, #0
 8007758:	4770      	bx	lr

0800775a <ft6x06_ReadID>:
{
 800775a:	b510      	push	{r4, lr}
 800775c:	4604      	mov	r4, r0
  TS_IO_Init();
 800775e:	f7f9 f87c 	bl	800085a <TS_IO_Init>
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 8007762:	21a8      	movs	r1, #168	@ 0xa8
 8007764:	b2e0      	uxtb	r0, r4
 8007766:	f7f9 f895 	bl	8000894 <TS_IO_Read>
}
 800776a:	bd10      	pop	{r4, pc}

0800776c <ft6x06_TS_DetectTouch>:
{
 800776c:	b513      	push	{r0, r1, r4, lr}
  volatile uint8_t nbTouch = 0;
 800776e:	2400      	movs	r4, #0
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 8007770:	2102      	movs	r1, #2
 8007772:	b2c0      	uxtb	r0, r0
  volatile uint8_t nbTouch = 0;
 8007774:	f88d 4007 	strb.w	r4, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 8007778:	f7f9 f88c 	bl	8000894 <TS_IO_Read>
 800777c:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT6206_TD_STAT_MASK;
 8007780:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007784:	f003 030f 	and.w	r3, r3, #15
 8007788:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 800778c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007790:	2b02      	cmp	r3, #2
 8007792:	d901      	bls.n	8007798 <ft6x06_TS_DetectTouch+0x2c>
    nbTouch = 0;
 8007794:	f88d 4007 	strb.w	r4, [sp, #7]
  ft6x06_handle.currActiveTouchNb = nbTouch;
 8007798:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800779c:	4b03      	ldr	r3, [pc, #12]	@ (80077ac <ft6x06_TS_DetectTouch+0x40>)
  return(nbTouch);
 800779e:	f89d 0007 	ldrb.w	r0, [sp, #7]
  ft6x06_handle.currActiveTouchNb = nbTouch;
 80077a2:	705a      	strb	r2, [r3, #1]
  ft6x06_handle.currActiveTouchIdx = 0;
 80077a4:	2200      	movs	r2, #0
 80077a6:	709a      	strb	r2, [r3, #2]
}
 80077a8:	b002      	add	sp, #8
 80077aa:	bd10      	pop	{r4, pc}
 80077ac:	200124d8 	.word	0x200124d8

080077b0 <ft6x06_TS_GetXY>:
{
 80077b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 80077b2:	4c15      	ldr	r4, [pc, #84]	@ (8007808 <ft6x06_TS_GetXY+0x58>)
{
 80077b4:	4615      	mov	r5, r2
 80077b6:	460e      	mov	r6, r1
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 80077b8:	78a3      	ldrb	r3, [r4, #2]
 80077ba:	7862      	ldrb	r2, [r4, #1]
 80077bc:	429a      	cmp	r2, r3
 80077be:	d91f      	bls.n	8007800 <ft6x06_TS_GetXY+0x50>
    switch(ft6x06_handle.currActiveTouchIdx)
 80077c0:	b303      	cbz	r3, 8007804 <ft6x06_TS_GetXY+0x54>
  uint8_t regAddress = 0;
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	bf0c      	ite	eq
 80077c6:	2109      	moveq	r1, #9
 80077c8:	2100      	movne	r1, #0
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 80077ca:	2304      	movs	r3, #4
 80077cc:	b2c0      	uxtb	r0, r0
 80077ce:	eb0d 0203 	add.w	r2, sp, r3
 80077d2:	f7f9 f87d 	bl	80008d0 <TS_IO_ReadMultiple>
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 80077d6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80077da:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80077de:	021b      	lsls	r3, r3, #8
 80077e0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80077e4:	4313      	orrs	r3, r2
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 80077e6:	f89d 2007 	ldrb.w	r2, [sp, #7]
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 80077ea:	8033      	strh	r3, [r6, #0]
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 80077ec:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80077f0:	021b      	lsls	r3, r3, #8
 80077f2:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80077f6:	4313      	orrs	r3, r2
 80077f8:	802b      	strh	r3, [r5, #0]
    ft6x06_handle.currActiveTouchIdx++;
 80077fa:	78a3      	ldrb	r3, [r4, #2]
 80077fc:	3301      	adds	r3, #1
 80077fe:	70a3      	strb	r3, [r4, #2]
}
 8007800:	b002      	add	sp, #8
 8007802:	bd70      	pop	{r4, r5, r6, pc}
    switch(ft6x06_handle.currActiveTouchIdx)
 8007804:	2103      	movs	r1, #3
 8007806:	e7e0      	b.n	80077ca <ft6x06_TS_GetXY+0x1a>
 8007808:	200124d8 	.word	0x200124d8

0800780c <ft6x06_TS_EnableIT>:
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 800780c:	2201      	movs	r2, #1
 800780e:	21a4      	movs	r1, #164	@ 0xa4
 8007810:	b2c0      	uxtb	r0, r0
 8007812:	f7f9 b823 	b.w	800085c <TS_IO_Write>

08007816 <ft6x06_TS_DisableIT>:
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8007816:	2200      	movs	r2, #0
 8007818:	21a4      	movs	r1, #164	@ 0xa4
 800781a:	b2c0      	uxtb	r0, r0
 800781c:	f7f9 b81e 	b.w	800085c <TS_IO_Write>

08007820 <ft6x06_TS_Start>:
  ft6x06_TS_DisableIT(DeviceAddr);
 8007820:	f7ff bff9 	b.w	8007816 <ft6x06_TS_DisableIT>

08007824 <ft6x06_TS_ClearIT>:
  *         Should be called Following an EXTI coming to the MCU.
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_TS_ClearIT(uint16_t DeviceAddr)
 8007824:	4770      	bx	lr
	...

08007828 <ft6x06_Init>:
  uint8_t idx = 0;
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
  {
    if(ft6x06[idx] == DeviceAddr)
 8007828:	4a06      	ldr	r2, [pc, #24]	@ (8007844 <ft6x06_Init+0x1c>)
 800782a:	7813      	ldrb	r3, [r2, #0]
 800782c:	4298      	cmp	r0, r3
 800782e:	d008      	beq.n	8007842 <ft6x06_Init+0x1a>
 8007830:	7851      	ldrb	r1, [r2, #1]
 8007832:	4288      	cmp	r0, r1
 8007834:	d005      	beq.n	8007842 <ft6x06_Init+0x1a>
 8007836:	b10b      	cbz	r3, 800783c <ft6x06_Init+0x14>
 8007838:	b919      	cbnz	r1, 8007842 <ft6x06_Init+0x1a>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 800783a:	2301      	movs	r3, #1
      ft6x06[empty] = DeviceAddr;
 800783c:	54d0      	strb	r0, [r2, r3]
      TS_IO_Init(); 
 800783e:	f7f9 b80c 	b.w	800085a <TS_IO_Init>
}
 8007842:	4770      	bx	lr
 8007844:	200124db 	.word	0x200124db

08007848 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8007848:	b538      	push	{r3, r4, r5, lr}
 800784a:	4604      	mov	r4, r0
 800784c:	460d      	mov	r5, r1
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800784e:	2000      	movs	r0, #0
 8007850:	49c9      	ldr	r1, [pc, #804]	@ (8007b78 <OTM8009A_Init+0x330>)
 8007852:	f7f9 fb87 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 8007856:	49c9      	ldr	r1, [pc, #804]	@ (8007b7c <OTM8009A_Init+0x334>)
 8007858:	2003      	movs	r0, #3
 800785a:	f7f9 fb83 	bl	8000f64 <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 800785e:	49c8      	ldr	r1, [pc, #800]	@ (8007b80 <OTM8009A_Init+0x338>)
 8007860:	2000      	movs	r0, #0
 8007862:	f7f9 fb7f 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 8007866:	49c7      	ldr	r1, [pc, #796]	@ (8007b84 <OTM8009A_Init+0x33c>)
 8007868:	2002      	movs	r0, #2
 800786a:	f7f9 fb7b 	bl	8000f64 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800786e:	49c4      	ldr	r1, [pc, #784]	@ (8007b80 <OTM8009A_Init+0x338>)
 8007870:	2000      	movs	r0, #0
 8007872:	f7f9 fb77 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 8007876:	49c4      	ldr	r1, [pc, #784]	@ (8007b88 <OTM8009A_Init+0x340>)
 8007878:	2000      	movs	r0, #0
 800787a:	f7f9 fb73 	bl	8000f64 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 800787e:	200a      	movs	r0, #10
 8007880:	f7f9 fb6e 	bl	8000f60 <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 8007884:	49c1      	ldr	r1, [pc, #772]	@ (8007b8c <OTM8009A_Init+0x344>)
 8007886:	2000      	movs	r0, #0
 8007888:	f7f9 fb6c 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 800788c:	49c0      	ldr	r1, [pc, #768]	@ (8007b90 <OTM8009A_Init+0x348>)
 800788e:	2000      	movs	r0, #0
 8007890:	f7f9 fb68 	bl	8000f64 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 8007894:	200a      	movs	r0, #10
 8007896:	f7f9 fb63 	bl	8000f60 <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 800789a:	49be      	ldr	r1, [pc, #760]	@ (8007b94 <OTM8009A_Init+0x34c>)
 800789c:	2000      	movs	r0, #0
 800789e:	f7f9 fb61 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 80078a2:	49bd      	ldr	r1, [pc, #756]	@ (8007b98 <OTM8009A_Init+0x350>)
 80078a4:	2000      	movs	r0, #0
 80078a6:	f7f9 fb5d 	bl	8000f64 <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 80078aa:	49bc      	ldr	r1, [pc, #752]	@ (8007b9c <OTM8009A_Init+0x354>)
 80078ac:	2000      	movs	r0, #0
 80078ae:	f7f9 fb59 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 80078b2:	49bb      	ldr	r1, [pc, #748]	@ (8007ba0 <OTM8009A_Init+0x358>)
 80078b4:	2000      	movs	r0, #0
 80078b6:	f7f9 fb55 	bl	8000f64 <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 80078ba:	49ba      	ldr	r1, [pc, #744]	@ (8007ba4 <OTM8009A_Init+0x35c>)
 80078bc:	2000      	movs	r0, #0
 80078be:	f7f9 fb51 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 80078c2:	49b9      	ldr	r1, [pc, #740]	@ (8007ba8 <OTM8009A_Init+0x360>)
 80078c4:	2000      	movs	r0, #0
 80078c6:	f7f9 fb4d 	bl	8000f64 <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80078ca:	49ab      	ldr	r1, [pc, #684]	@ (8007b78 <OTM8009A_Init+0x330>)
 80078cc:	2000      	movs	r0, #0
 80078ce:	f7f9 fb49 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 80078d2:	49b6      	ldr	r1, [pc, #728]	@ (8007bac <OTM8009A_Init+0x364>)
 80078d4:	2000      	movs	r0, #0
 80078d6:	f7f9 fb45 	bl	8000f64 <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 80078da:	49b5      	ldr	r1, [pc, #724]	@ (8007bb0 <OTM8009A_Init+0x368>)
 80078dc:	2000      	movs	r0, #0
 80078de:	f7f9 fb41 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 80078e2:	49b4      	ldr	r1, [pc, #720]	@ (8007bb4 <OTM8009A_Init+0x36c>)
 80078e4:	2000      	movs	r0, #0
 80078e6:	f7f9 fb3d 	bl	8000f64 <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 80078ea:	49b3      	ldr	r1, [pc, #716]	@ (8007bb8 <OTM8009A_Init+0x370>)
 80078ec:	2000      	movs	r0, #0
 80078ee:	f7f9 fb39 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 80078f2:	49b2      	ldr	r1, [pc, #712]	@ (8007bbc <OTM8009A_Init+0x374>)
 80078f4:	2000      	movs	r0, #0
 80078f6:	f7f9 fb35 	bl	8000f64 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 80078fa:	49b1      	ldr	r1, [pc, #708]	@ (8007bc0 <OTM8009A_Init+0x378>)
 80078fc:	2000      	movs	r0, #0
 80078fe:	f7f9 fb31 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 8007902:	49b0      	ldr	r1, [pc, #704]	@ (8007bc4 <OTM8009A_Init+0x37c>)
 8007904:	2000      	movs	r0, #0
 8007906:	f7f9 fb2d 	bl	8000f64 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 800790a:	49af      	ldr	r1, [pc, #700]	@ (8007bc8 <OTM8009A_Init+0x380>)
 800790c:	2000      	movs	r0, #0
 800790e:	f7f9 fb29 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8007912:	49a3      	ldr	r1, [pc, #652]	@ (8007ba0 <OTM8009A_Init+0x358>)
 8007914:	2000      	movs	r0, #0
 8007916:	f7f9 fb25 	bl	8000f64 <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800791a:	4997      	ldr	r1, [pc, #604]	@ (8007b78 <OTM8009A_Init+0x330>)
 800791c:	2000      	movs	r0, #0
 800791e:	f7f9 fb21 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 8007922:	49aa      	ldr	r1, [pc, #680]	@ (8007bcc <OTM8009A_Init+0x384>)
 8007924:	2002      	movs	r0, #2
 8007926:	f7f9 fb1d 	bl	8000f64 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 800792a:	49a9      	ldr	r1, [pc, #676]	@ (8007bd0 <OTM8009A_Init+0x388>)
 800792c:	2000      	movs	r0, #0
 800792e:	f7f9 fb19 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 8007932:	49a8      	ldr	r1, [pc, #672]	@ (8007bd4 <OTM8009A_Init+0x38c>)
 8007934:	2000      	movs	r0, #0
 8007936:	f7f9 fb15 	bl	8000f64 <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 800793a:	49a7      	ldr	r1, [pc, #668]	@ (8007bd8 <OTM8009A_Init+0x390>)
 800793c:	2000      	movs	r0, #0
 800793e:	f7f9 fb11 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 8007942:	49a6      	ldr	r1, [pc, #664]	@ (8007bdc <OTM8009A_Init+0x394>)
 8007944:	2000      	movs	r0, #0
 8007946:	f7f9 fb0d 	bl	8000f64 <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 800794a:	49a5      	ldr	r1, [pc, #660]	@ (8007be0 <OTM8009A_Init+0x398>)
 800794c:	2000      	movs	r0, #0
 800794e:	f7f9 fb09 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 8007952:	49a4      	ldr	r1, [pc, #656]	@ (8007be4 <OTM8009A_Init+0x39c>)
 8007954:	2000      	movs	r0, #0
 8007956:	f7f9 fb05 	bl	8000f64 <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 800795a:	4995      	ldr	r1, [pc, #596]	@ (8007bb0 <OTM8009A_Init+0x368>)
 800795c:	2000      	movs	r0, #0
 800795e:	f7f9 fb01 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 8007962:	49a1      	ldr	r1, [pc, #644]	@ (8007be8 <OTM8009A_Init+0x3a0>)
 8007964:	2000      	movs	r0, #0
 8007966:	f7f9 fafd 	bl	8000f64 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 800796a:	4993      	ldr	r1, [pc, #588]	@ (8007bb8 <OTM8009A_Init+0x370>)
 800796c:	2000      	movs	r0, #0
 800796e:	f7f9 faf9 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 8007972:	499e      	ldr	r1, [pc, #632]	@ (8007bec <OTM8009A_Init+0x3a4>)
 8007974:	2000      	movs	r0, #0
 8007976:	f7f9 faf5 	bl	8000f64 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 800797a:	499d      	ldr	r1, [pc, #628]	@ (8007bf0 <OTM8009A_Init+0x3a8>)
 800797c:	2000      	movs	r0, #0
 800797e:	f7f9 faf1 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 8007982:	499c      	ldr	r1, [pc, #624]	@ (8007bf4 <OTM8009A_Init+0x3ac>)
 8007984:	2002      	movs	r0, #2
 8007986:	f7f9 faed 	bl	8000f64 <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800798a:	497d      	ldr	r1, [pc, #500]	@ (8007b80 <OTM8009A_Init+0x338>)
 800798c:	2000      	movs	r0, #0
 800798e:	f7f9 fae9 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 8007992:	4999      	ldr	r1, [pc, #612]	@ (8007bf8 <OTM8009A_Init+0x3b0>)
 8007994:	2006      	movs	r0, #6
 8007996:	f7f9 fae5 	bl	8000f64 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 800799a:	4998      	ldr	r1, [pc, #608]	@ (8007bfc <OTM8009A_Init+0x3b4>)
 800799c:	2000      	movs	r0, #0
 800799e:	f7f9 fae1 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 80079a2:	4997      	ldr	r1, [pc, #604]	@ (8007c00 <OTM8009A_Init+0x3b8>)
 80079a4:	200e      	movs	r0, #14
 80079a6:	f7f9 fadd 	bl	8000f64 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80079aa:	4996      	ldr	r1, [pc, #600]	@ (8007c04 <OTM8009A_Init+0x3bc>)
 80079ac:	2000      	movs	r0, #0
 80079ae:	f7f9 fad9 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 80079b2:	4995      	ldr	r1, [pc, #596]	@ (8007c08 <OTM8009A_Init+0x3c0>)
 80079b4:	200e      	movs	r0, #14
 80079b6:	f7f9 fad5 	bl	8000f64 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80079ba:	4994      	ldr	r1, [pc, #592]	@ (8007c0c <OTM8009A_Init+0x3c4>)
 80079bc:	2000      	movs	r0, #0
 80079be:	f7f9 fad1 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 80079c2:	4993      	ldr	r1, [pc, #588]	@ (8007c10 <OTM8009A_Init+0x3c8>)
 80079c4:	200a      	movs	r0, #10
 80079c6:	f7f9 facd 	bl	8000f64 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 80079ca:	4992      	ldr	r1, [pc, #584]	@ (8007c14 <OTM8009A_Init+0x3cc>)
 80079cc:	2000      	movs	r0, #0
 80079ce:	f7f9 fac9 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 80079d2:	4991      	ldr	r1, [pc, #580]	@ (8007c18 <OTM8009A_Init+0x3d0>)
 80079d4:	2000      	movs	r0, #0
 80079d6:	f7f9 fac5 	bl	8000f64 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80079da:	4969      	ldr	r1, [pc, #420]	@ (8007b80 <OTM8009A_Init+0x338>)
 80079dc:	2000      	movs	r0, #0
 80079de:	f7f9 fac1 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 80079e2:	498e      	ldr	r1, [pc, #568]	@ (8007c1c <OTM8009A_Init+0x3d4>)
 80079e4:	200a      	movs	r0, #10
 80079e6:	f7f9 fabd 	bl	8000f64 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 80079ea:	498d      	ldr	r1, [pc, #564]	@ (8007c20 <OTM8009A_Init+0x3d8>)
 80079ec:	2000      	movs	r0, #0
 80079ee:	f7f9 fab9 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 80079f2:	498c      	ldr	r1, [pc, #560]	@ (8007c24 <OTM8009A_Init+0x3dc>)
 80079f4:	200f      	movs	r0, #15
 80079f6:	f7f9 fab5 	bl	8000f64 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80079fa:	4980      	ldr	r1, [pc, #512]	@ (8007bfc <OTM8009A_Init+0x3b4>)
 80079fc:	2000      	movs	r0, #0
 80079fe:	f7f9 fab1 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 8007a02:	4989      	ldr	r1, [pc, #548]	@ (8007c28 <OTM8009A_Init+0x3e0>)
 8007a04:	200f      	movs	r0, #15
 8007a06:	f7f9 faad 	bl	8000f64 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8007a0a:	497e      	ldr	r1, [pc, #504]	@ (8007c04 <OTM8009A_Init+0x3bc>)
 8007a0c:	2000      	movs	r0, #0
 8007a0e:	f7f9 faa9 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 8007a12:	4986      	ldr	r1, [pc, #536]	@ (8007c2c <OTM8009A_Init+0x3e4>)
 8007a14:	200a      	movs	r0, #10
 8007a16:	f7f9 faa5 	bl	8000f64 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8007a1a:	497c      	ldr	r1, [pc, #496]	@ (8007c0c <OTM8009A_Init+0x3c4>)
 8007a1c:	2000      	movs	r0, #0
 8007a1e:	f7f9 faa1 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 8007a22:	4983      	ldr	r1, [pc, #524]	@ (8007c30 <OTM8009A_Init+0x3e8>)
 8007a24:	200f      	movs	r0, #15
 8007a26:	f7f9 fa9d 	bl	8000f64 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8007a2a:	497a      	ldr	r1, [pc, #488]	@ (8007c14 <OTM8009A_Init+0x3cc>)
 8007a2c:	2000      	movs	r0, #0
 8007a2e:	f7f9 fa99 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 8007a32:	4980      	ldr	r1, [pc, #512]	@ (8007c34 <OTM8009A_Init+0x3ec>)
 8007a34:	200f      	movs	r0, #15
 8007a36:	f7f9 fa95 	bl	8000f64 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 8007a3a:	497f      	ldr	r1, [pc, #508]	@ (8007c38 <OTM8009A_Init+0x3f0>)
 8007a3c:	2000      	movs	r0, #0
 8007a3e:	f7f9 fa91 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 8007a42:	497e      	ldr	r1, [pc, #504]	@ (8007c3c <OTM8009A_Init+0x3f4>)
 8007a44:	200a      	movs	r0, #10
 8007a46:	f7f9 fa8d 	bl	8000f64 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 8007a4a:	497d      	ldr	r1, [pc, #500]	@ (8007c40 <OTM8009A_Init+0x3f8>)
 8007a4c:	2000      	movs	r0, #0
 8007a4e:	f7f9 fa89 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 8007a52:	497c      	ldr	r1, [pc, #496]	@ (8007c44 <OTM8009A_Init+0x3fc>)
 8007a54:	200a      	movs	r0, #10
 8007a56:	f7f9 fa85 	bl	8000f64 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8007a5a:	4949      	ldr	r1, [pc, #292]	@ (8007b80 <OTM8009A_Init+0x338>)
 8007a5c:	2000      	movs	r0, #0
 8007a5e:	f7f9 fa81 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 8007a62:	4979      	ldr	r1, [pc, #484]	@ (8007c48 <OTM8009A_Init+0x400>)
 8007a64:	200a      	movs	r0, #10
 8007a66:	f7f9 fa7d 	bl	8000f64 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8007a6a:	496d      	ldr	r1, [pc, #436]	@ (8007c20 <OTM8009A_Init+0x3d8>)
 8007a6c:	2000      	movs	r0, #0
 8007a6e:	f7f9 fa79 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 8007a72:	4976      	ldr	r1, [pc, #472]	@ (8007c4c <OTM8009A_Init+0x404>)
 8007a74:	200f      	movs	r0, #15
 8007a76:	f7f9 fa75 	bl	8000f64 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8007a7a:	4960      	ldr	r1, [pc, #384]	@ (8007bfc <OTM8009A_Init+0x3b4>)
 8007a7c:	2000      	movs	r0, #0
 8007a7e:	f7f9 fa71 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 8007a82:	4973      	ldr	r1, [pc, #460]	@ (8007c50 <OTM8009A_Init+0x408>)
 8007a84:	200f      	movs	r0, #15
 8007a86:	f7f9 fa6d 	bl	8000f64 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8007a8a:	495e      	ldr	r1, [pc, #376]	@ (8007c04 <OTM8009A_Init+0x3bc>)
 8007a8c:	2000      	movs	r0, #0
 8007a8e:	f7f9 fa69 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 8007a92:	4970      	ldr	r1, [pc, #448]	@ (8007c54 <OTM8009A_Init+0x40c>)
 8007a94:	200a      	movs	r0, #10
 8007a96:	f7f9 fa65 	bl	8000f64 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8007a9a:	495c      	ldr	r1, [pc, #368]	@ (8007c0c <OTM8009A_Init+0x3c4>)
 8007a9c:	2000      	movs	r0, #0
 8007a9e:	f7f9 fa61 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 8007aa2:	496d      	ldr	r1, [pc, #436]	@ (8007c58 <OTM8009A_Init+0x410>)
 8007aa4:	200f      	movs	r0, #15
 8007aa6:	f7f9 fa5d 	bl	8000f64 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8007aaa:	495a      	ldr	r1, [pc, #360]	@ (8007c14 <OTM8009A_Init+0x3cc>)
 8007aac:	2000      	movs	r0, #0
 8007aae:	f7f9 fa59 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 8007ab2:	496a      	ldr	r1, [pc, #424]	@ (8007c5c <OTM8009A_Init+0x414>)
 8007ab4:	200f      	movs	r0, #15
 8007ab6:	f7f9 fa55 	bl	8000f64 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8007aba:	493d      	ldr	r1, [pc, #244]	@ (8007bb0 <OTM8009A_Init+0x368>)
 8007abc:	2000      	movs	r0, #0
 8007abe:	f7f9 fa51 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 8007ac2:	4967      	ldr	r1, [pc, #412]	@ (8007c60 <OTM8009A_Init+0x418>)
 8007ac4:	2000      	movs	r0, #0
 8007ac6:	f7f9 fa4d 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 8007aca:	4966      	ldr	r1, [pc, #408]	@ (8007c64 <OTM8009A_Init+0x41c>)
 8007acc:	2000      	movs	r0, #0
 8007ace:	f7f9 fa49 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 8007ad2:	4965      	ldr	r1, [pc, #404]	@ (8007c68 <OTM8009A_Init+0x420>)
 8007ad4:	2000      	movs	r0, #0
 8007ad6:	f7f9 fa45 	bl	8000f64 <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 8007ada:	4964      	ldr	r1, [pc, #400]	@ (8007c6c <OTM8009A_Init+0x424>)
 8007adc:	2000      	movs	r0, #0
 8007ade:	f7f9 fa41 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 8007ae2:	4963      	ldr	r1, [pc, #396]	@ (8007c70 <OTM8009A_Init+0x428>)
 8007ae4:	2000      	movs	r0, #0
 8007ae6:	f7f9 fa3d 	bl	8000f64 <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8007aea:	4923      	ldr	r1, [pc, #140]	@ (8007b78 <OTM8009A_Init+0x330>)
 8007aec:	2000      	movs	r0, #0
 8007aee:	f7f9 fa39 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 8007af2:	4960      	ldr	r1, [pc, #384]	@ (8007c74 <OTM8009A_Init+0x42c>)
 8007af4:	2003      	movs	r0, #3
 8007af6:	f7f9 fa35 	bl	8000f64 <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8007afa:	491f      	ldr	r1, [pc, #124]	@ (8007b78 <OTM8009A_Init+0x330>)
 8007afc:	2000      	movs	r0, #0
 8007afe:	f7f9 fa31 	bl	8000f64 <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8007b02:	491d      	ldr	r1, [pc, #116]	@ (8007b78 <OTM8009A_Init+0x330>)
 8007b04:	2000      	movs	r0, #0
 8007b06:	f7f9 fa2d 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 8007b0a:	495b      	ldr	r1, [pc, #364]	@ (8007c78 <OTM8009A_Init+0x430>)
 8007b0c:	2010      	movs	r0, #16
 8007b0e:	f7f9 fa29 	bl	8000f64 <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8007b12:	4919      	ldr	r1, [pc, #100]	@ (8007b78 <OTM8009A_Init+0x330>)
 8007b14:	2000      	movs	r0, #0
 8007b16:	f7f9 fa25 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 8007b1a:	4958      	ldr	r1, [pc, #352]	@ (8007c7c <OTM8009A_Init+0x434>)
 8007b1c:	2010      	movs	r0, #16
 8007b1e:	f7f9 fa21 	bl	8000f64 <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 8007b22:	2000      	movs	r0, #0
 8007b24:	4956      	ldr	r1, [pc, #344]	@ (8007c80 <OTM8009A_Init+0x438>)
 8007b26:	f7f9 fa1d 	bl	8000f64 <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 8007b2a:	2078      	movs	r0, #120	@ 0x78
 8007b2c:	f7f9 fa18 	bl	8000f60 <OTM8009A_IO_Delay>

  switch(ColorCoding)
 8007b30:	2c00      	cmp	r4, #0
 8007b32:	f000 80c7 	beq.w	8007cc4 <OTM8009A_Init+0x47c>
 8007b36:	2c02      	cmp	r4, #2
 8007b38:	d103      	bne.n	8007b42 <OTM8009A_Init+0x2fa>
  {
  case OTM8009A_FORMAT_RBG565 :
    /* Set Pixel color format to RGB565 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 8007b3a:	4952      	ldr	r1, [pc, #328]	@ (8007c84 <OTM8009A_Init+0x43c>)
 8007b3c:	2000      	movs	r0, #0
    break;
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8007b3e:	f7f9 fa11 	bl	8000f64 <DSI_IO_WriteCmd>
    break;
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8007b42:	2d01      	cmp	r5, #1
 8007b44:	d10b      	bne.n	8007b5e <OTM8009A_Init+0x316>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 8007b46:	4950      	ldr	r1, [pc, #320]	@ (8007c88 <OTM8009A_Init+0x440>)
 8007b48:	2000      	movs	r0, #0
 8007b4a:	f7f9 fa0b 	bl	8000f64 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 8007b4e:	494f      	ldr	r1, [pc, #316]	@ (8007c8c <OTM8009A_Init+0x444>)
 8007b50:	2004      	movs	r0, #4
 8007b52:	f7f9 fa07 	bl	8000f64 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8007b56:	494e      	ldr	r1, [pc, #312]	@ (8007c90 <OTM8009A_Init+0x448>)
 8007b58:	2004      	movs	r0, #4
 8007b5a:	f7f9 fa03 	bl	8000f64 <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 8007b5e:	494d      	ldr	r1, [pc, #308]	@ (8007c94 <OTM8009A_Init+0x44c>)
 8007b60:	2000      	movs	r0, #0
 8007b62:	f7f9 f9ff 	bl	8000f64 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 8007b66:	494c      	ldr	r1, [pc, #304]	@ (8007c98 <OTM8009A_Init+0x450>)
 8007b68:	2000      	movs	r0, #0
 8007b6a:	f7f9 f9fb 	bl	8000f64 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 8007b6e:	494b      	ldr	r1, [pc, #300]	@ (8007c9c <OTM8009A_Init+0x454>)
 8007b70:	2000      	movs	r0, #0
 8007b72:	f7f9 f9f7 	bl	8000f64 <DSI_IO_WriteCmd>
 8007b76:	e093      	b.n	8007ca0 <OTM8009A_Init+0x458>
 8007b78:	08029cd0 	.word	0x08029cd0
 8007b7c:	08029dfd 	.word	0x08029dfd
 8007b80:	08029cce 	.word	0x08029cce
 8007b84:	08029dfa 	.word	0x08029dfa
 8007b88:	08029ccc 	.word	0x08029ccc
 8007b8c:	08029cca 	.word	0x08029cca
 8007b90:	08029cc8 	.word	0x08029cc8
 8007b94:	08029cc6 	.word	0x08029cc6
 8007b98:	08029cc4 	.word	0x08029cc4
 8007b9c:	08029cc2 	.word	0x08029cc2
 8007ba0:	08029cc0 	.word	0x08029cc0
 8007ba4:	08029cbe 	.word	0x08029cbe
 8007ba8:	08029cbc 	.word	0x08029cbc
 8007bac:	08029cba 	.word	0x08029cba
 8007bb0:	08029cb8 	.word	0x08029cb8
 8007bb4:	08029cb6 	.word	0x08029cb6
 8007bb8:	08029cb4 	.word	0x08029cb4
 8007bbc:	08029cb2 	.word	0x08029cb2
 8007bc0:	08029cb0 	.word	0x08029cb0
 8007bc4:	08029cae 	.word	0x08029cae
 8007bc8:	08029cac 	.word	0x08029cac
 8007bcc:	08029dd5 	.word	0x08029dd5
 8007bd0:	08029caa 	.word	0x08029caa
 8007bd4:	08029ca8 	.word	0x08029ca8
 8007bd8:	08029ca6 	.word	0x08029ca6
 8007bdc:	08029ca4 	.word	0x08029ca4
 8007be0:	08029ca2 	.word	0x08029ca2
 8007be4:	08029ca0 	.word	0x08029ca0
 8007be8:	08029c9e 	.word	0x08029c9e
 8007bec:	08029c9c 	.word	0x08029c9c
 8007bf0:	08029c9a 	.word	0x08029c9a
 8007bf4:	08029dd2 	.word	0x08029dd2
 8007bf8:	08029dcb 	.word	0x08029dcb
 8007bfc:	08029c98 	.word	0x08029c98
 8007c00:	08029dbc 	.word	0x08029dbc
 8007c04:	08029c96 	.word	0x08029c96
 8007c08:	08029dad 	.word	0x08029dad
 8007c0c:	08029c94 	.word	0x08029c94
 8007c10:	08029da2 	.word	0x08029da2
 8007c14:	08029c92 	.word	0x08029c92
 8007c18:	08029c76 	.word	0x08029c76
 8007c1c:	08029d97 	.word	0x08029d97
 8007c20:	08029c90 	.word	0x08029c90
 8007c24:	08029d87 	.word	0x08029d87
 8007c28:	08029d77 	.word	0x08029d77
 8007c2c:	08029d6c 	.word	0x08029d6c
 8007c30:	08029d5c 	.word	0x08029d5c
 8007c34:	08029d4c 	.word	0x08029d4c
 8007c38:	08029c8e 	.word	0x08029c8e
 8007c3c:	08029d41 	.word	0x08029d41
 8007c40:	08029c8c 	.word	0x08029c8c
 8007c44:	08029d36 	.word	0x08029d36
 8007c48:	08029d2b 	.word	0x08029d2b
 8007c4c:	08029d1b 	.word	0x08029d1b
 8007c50:	08029d0b 	.word	0x08029d0b
 8007c54:	08029d00 	.word	0x08029d00
 8007c58:	08029cf0 	.word	0x08029cf0
 8007c5c:	08029ce0 	.word	0x08029ce0
 8007c60:	08029c74 	.word	0x08029c74
 8007c64:	08029c72 	.word	0x08029c72
 8007c68:	08029c70 	.word	0x08029c70
 8007c6c:	08029c6e 	.word	0x08029c6e
 8007c70:	08029c6c 	.word	0x08029c6c
 8007c74:	08029cdc 	.word	0x08029cdc
 8007c78:	08029de9 	.word	0x08029de9
 8007c7c:	08029dd8 	.word	0x08029dd8
 8007c80:	08029c8a 	.word	0x08029c8a
 8007c84:	08029c88 	.word	0x08029c88
 8007c88:	08029c84 	.word	0x08029c84
 8007c8c:	08029cd7 	.word	0x08029cd7
 8007c90:	08029cd2 	.word	0x08029cd2
 8007c94:	08029c82 	.word	0x08029c82
 8007c98:	08029c80 	.word	0x08029c80
 8007c9c:	08029c7e 	.word	0x08029c7e

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 8007ca0:	490a      	ldr	r1, [pc, #40]	@ (8007ccc <OTM8009A_Init+0x484>)
 8007ca2:	2000      	movs	r0, #0
 8007ca4:	f7f9 f95e 	bl	8000f64 <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 8007ca8:	4909      	ldr	r1, [pc, #36]	@ (8007cd0 <OTM8009A_Init+0x488>)
 8007caa:	2000      	movs	r0, #0
 8007cac:	f7f9 f95a 	bl	8000f64 <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8007cb0:	4908      	ldr	r1, [pc, #32]	@ (8007cd4 <OTM8009A_Init+0x48c>)
 8007cb2:	2000      	movs	r0, #0
 8007cb4:	f7f9 f956 	bl	8000f64 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 8007cb8:	4907      	ldr	r1, [pc, #28]	@ (8007cd8 <OTM8009A_Init+0x490>)
 8007cba:	2000      	movs	r0, #0
 8007cbc:	f7f9 f952 	bl	8000f64 <DSI_IO_WriteCmd>

  return 0;
}
 8007cc0:	2000      	movs	r0, #0
 8007cc2:	bd38      	pop	{r3, r4, r5, pc}
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8007cc4:	4905      	ldr	r1, [pc, #20]	@ (8007cdc <OTM8009A_Init+0x494>)
 8007cc6:	4620      	mov	r0, r4
 8007cc8:	e739      	b.n	8007b3e <OTM8009A_Init+0x2f6>
 8007cca:	bf00      	nop
 8007ccc:	08029c7c 	.word	0x08029c7c
 8007cd0:	08029c7a 	.word	0x08029c7a
 8007cd4:	08029cd0 	.word	0x08029cd0
 8007cd8:	08029c78 	.word	0x08029c78
 8007cdc:	08029c86 	.word	0x08029c86

08007ce0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007ce0:	490f      	ldr	r1, [pc, #60]	@ (8007d20 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007ce2:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007ce4:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8007ce8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007cec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8007cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8007d24 <SystemInit+0x44>)
 8007cf2:	681a      	ldr	r2, [r3, #0]
 8007cf4:	f042 0201 	orr.w	r2, r2, #1
 8007cf8:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8007cfa:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8007cfc:	681a      	ldr	r2, [r3, #0]
 8007cfe:	f022 7284 	bic.w	r2, r2, #17301504	@ 0x1080000
 8007d02:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8007d06:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8007d08:	4a07      	ldr	r2, [pc, #28]	@ (8007d28 <SystemInit+0x48>)
 8007d0a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007d0c:	681a      	ldr	r2, [r3, #0]
 8007d0e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007d12:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8007d14:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007d16:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007d1a:	608b      	str	r3, [r1, #8]
#endif
}
 8007d1c:	4770      	bx	lr
 8007d1e:	bf00      	nop
 8007d20:	e000ed00 	.word	0xe000ed00
 8007d24:	40023800 	.word	0x40023800
 8007d28:	24003010 	.word	0x24003010

08007d2c <HAL_Init>:
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007d2c:	4a07      	ldr	r2, [pc, #28]	@ (8007d4c <HAL_Init+0x20>)
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007d2e:	2003      	movs	r0, #3
{
 8007d30:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007d32:	6813      	ldr	r3, [r2, #0]
 8007d34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d38:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007d3a:	f000 fa95 	bl	8008268 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007d3e:	2000      	movs	r0, #0
 8007d40:	f7fd f9e6 	bl	8005110 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007d44:	f7fc fe76 	bl	8004a34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8007d48:	2000      	movs	r0, #0
 8007d4a:	bd08      	pop	{r3, pc}
 8007d4c:	40023c00 	.word	0x40023c00

08007d50 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8007d50:	4a03      	ldr	r2, [pc, #12]	@ (8007d60 <HAL_IncTick+0x10>)
 8007d52:	4b04      	ldr	r3, [pc, #16]	@ (8007d64 <HAL_IncTick+0x14>)
 8007d54:	6811      	ldr	r1, [r2, #0]
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	440b      	add	r3, r1
 8007d5a:	6013      	str	r3, [r2, #0]
}
 8007d5c:	4770      	bx	lr
 8007d5e:	bf00      	nop
 8007d60:	200124e0 	.word	0x200124e0
 8007d64:	20000064 	.word	0x20000064

08007d68 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8007d68:	4b01      	ldr	r3, [pc, #4]	@ (8007d70 <HAL_GetTick+0x8>)
 8007d6a:	6818      	ldr	r0, [r3, #0]
}
 8007d6c:	4770      	bx	lr
 8007d6e:	bf00      	nop
 8007d70:	200124e0 	.word	0x200124e0

08007d74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007d74:	b538      	push	{r3, r4, r5, lr}
 8007d76:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8007d78:	f7ff fff6 	bl	8007d68 <HAL_GetTick>
 8007d7c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007d7e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8007d80:	bf1e      	ittt	ne
 8007d82:	4b04      	ldrne	r3, [pc, #16]	@ (8007d94 <HAL_Delay+0x20>)
 8007d84:	781b      	ldrbne	r3, [r3, #0]
 8007d86:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007d88:	f7ff ffee 	bl	8007d68 <HAL_GetTick>
 8007d8c:	1b43      	subs	r3, r0, r5
 8007d8e:	42a3      	cmp	r3, r4
 8007d90:	d3fa      	bcc.n	8007d88 <HAL_Delay+0x14>
  {
  }
}
 8007d92:	bd38      	pop	{r3, r4, r5, pc}
 8007d94:	20000064 	.word	0x20000064

08007d98 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007d98:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007d9a:	4604      	mov	r4, r0
 8007d9c:	2800      	cmp	r0, #0
 8007d9e:	f000 809b 	beq.w	8007ed8 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8007da2:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8007da4:	b925      	cbnz	r5, 8007db0 <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007da6:	f7fc fe63 	bl	8004a70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007daa:	6465      	str	r5, [r4, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007dac:	f884 503c 	strb.w	r5, [r4, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007db0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007db2:	06db      	lsls	r3, r3, #27
 8007db4:	f100 808e 	bmi.w	8007ed4 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007db8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007dba:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8007dbe:	f023 0302 	bic.w	r3, r3, #2
 8007dc2:	f043 0302 	orr.w	r3, r3, #2
 8007dc6:	6423      	str	r3, [r4, #64]	@ 0x40
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8007dc8:	4b44      	ldr	r3, [pc, #272]	@ (8007edc <HAL_ADC_Init+0x144>)
 8007dca:	685a      	ldr	r2, [r3, #4]
 8007dcc:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8007dd0:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8007dd2:	685a      	ldr	r2, [r3, #4]
 8007dd4:	6861      	ldr	r1, [r4, #4]
 8007dd6:	430a      	orrs	r2, r1
 8007dd8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007dda:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007ddc:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007dde:	685a      	ldr	r2, [r3, #4]
 8007de0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007de4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007de6:	685a      	ldr	r2, [r3, #4]
 8007de8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007dec:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007dee:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007df0:	685a      	ldr	r2, [r3, #4]
 8007df2:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8007df6:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007df8:	685a      	ldr	r2, [r3, #4]
 8007dfa:	430a      	orrs	r2, r1
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007dfc:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007dfe:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007e00:	689a      	ldr	r2, [r3, #8]
 8007e02:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007e06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007e08:	689a      	ldr	r2, [r3, #8]
 8007e0a:	430a      	orrs	r2, r1
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007e0c:	4934      	ldr	r1, [pc, #208]	@ (8007ee0 <HAL_ADC_Init+0x148>)
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007e0e:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007e10:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8007e12:	428a      	cmp	r2, r1
 8007e14:	d052      	beq.n	8007ebc <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007e16:	6899      	ldr	r1, [r3, #8]
 8007e18:	f021 6170 	bic.w	r1, r1, #251658240	@ 0xf000000
 8007e1c:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007e1e:	6899      	ldr	r1, [r3, #8]
 8007e20:	430a      	orrs	r2, r1
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007e22:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007e24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007e26:	689a      	ldr	r2, [r3, #8]
 8007e28:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8007e2c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007e2e:	689a      	ldr	r2, [r3, #8]
 8007e30:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007e32:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007e34:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007e36:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007e38:	f022 0202 	bic.w	r2, r2, #2
 8007e3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007e3e:	689a      	ldr	r2, [r3, #8]
 8007e40:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8007e44:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007e46:	f894 2020 	ldrb.w	r2, [r4, #32]
 8007e4a:	2a00      	cmp	r2, #0
 8007e4c:	d03e      	beq.n	8007ecc <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007e4e:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007e50:	6a61      	ldr	r1, [r4, #36]	@ 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007e52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007e56:	3901      	subs	r1, #1
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007e58:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007e5a:	685a      	ldr	r2, [r3, #4]
 8007e5c:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8007e60:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007e62:	685a      	ldr	r2, [r3, #4]
 8007e64:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007e68:	605a      	str	r2, [r3, #4]
    ADC_CLEAR_ERRORCODE(hadc);
 8007e6a:	2000      	movs	r0, #0
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007e6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007e6e:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007e70:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007e74:	3901      	subs	r1, #1
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007e76:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007e78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e7a:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8007e7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007e80:	689a      	ldr	r2, [r3, #8]
 8007e82:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8007e86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007e88:	689a      	ldr	r2, [r3, #8]
 8007e8a:	f894 1030 	ldrb.w	r1, [r4, #48]	@ 0x30
 8007e8e:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007e92:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007e94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007e96:	689a      	ldr	r2, [r3, #8]
 8007e98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e9c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007e9e:	689a      	ldr	r2, [r3, #8]
 8007ea0:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8007ea4:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8007ea6:	6460      	str	r0, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8007ea8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007eaa:	f023 0303 	bic.w	r3, r3, #3
 8007eae:	f043 0301 	orr.w	r3, r3, #1
 8007eb2:	6423      	str	r3, [r4, #64]	@ 0x40
  __HAL_UNLOCK(hadc);
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8007eba:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007ebc:	689a      	ldr	r2, [r3, #8]
 8007ebe:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007ec2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007ec4:	689a      	ldr	r2, [r3, #8]
 8007ec6:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8007eca:	e7b2      	b.n	8007e32 <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007ecc:	685a      	ldr	r2, [r3, #4]
 8007ece:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007ed2:	e7c9      	b.n	8007e68 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 8007ed4:	2001      	movs	r0, #1
 8007ed6:	e7ed      	b.n	8007eb4 <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 8007ed8:	2001      	movs	r0, #1
 8007eda:	e7ee      	b.n	8007eba <HAL_ADC_Init+0x122>
 8007edc:	40012300 	.word	0x40012300
 8007ee0:	0f000001 	.word	0x0f000001

08007ee4 <HAL_ADC_Start_IT>:
  __IO uint32_t counter = 0;
 8007ee4:	2300      	movs	r3, #0
{
 8007ee6:	b082      	sub	sp, #8
  __IO uint32_t counter = 0;
 8007ee8:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8007eea:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8007eee:	2b01      	cmp	r3, #1
 8007ef0:	d06a      	beq.n	8007fc8 <HAL_ADC_Start_IT+0xe4>
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007ef8:	6803      	ldr	r3, [r0, #0]
 8007efa:	689a      	ldr	r2, [r3, #8]
 8007efc:	07d2      	lsls	r2, r2, #31
 8007efe:	d50b      	bpl.n	8007f18 <HAL_ADC_Start_IT+0x34>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8007f00:	689a      	ldr	r2, [r3, #8]
 8007f02:	07d1      	lsls	r1, r2, #31
 8007f04:	d41a      	bmi.n	8007f3c <HAL_ADC_Start_IT+0x58>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007f06:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8007f08:	f043 0310 	orr.w	r3, r3, #16
 8007f0c:	6403      	str	r3, [r0, #64]	@ 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007f0e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8007f10:	f043 0301 	orr.w	r3, r3, #1
 8007f14:	6443      	str	r3, [r0, #68]	@ 0x44
 8007f16:	e054      	b.n	8007fc2 <HAL_ADC_Start_IT+0xde>
    __HAL_ADC_ENABLE(hadc);
 8007f18:	689a      	ldr	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8007f1a:	492c      	ldr	r1, [pc, #176]	@ (8007fcc <HAL_ADC_Start_IT+0xe8>)
    __HAL_ADC_ENABLE(hadc);
 8007f1c:	f042 0201 	orr.w	r2, r2, #1
 8007f20:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8007f22:	4a2b      	ldr	r2, [pc, #172]	@ (8007fd0 <HAL_ADC_Start_IT+0xec>)
 8007f24:	6812      	ldr	r2, [r2, #0]
 8007f26:	fbb2 f2f1 	udiv	r2, r2, r1
 8007f2a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      counter--;
 8007f2e:	9201      	str	r2, [sp, #4]
    while(counter != 0)
 8007f30:	9a01      	ldr	r2, [sp, #4]
 8007f32:	2a00      	cmp	r2, #0
 8007f34:	d0e4      	beq.n	8007f00 <HAL_ADC_Start_IT+0x1c>
      counter--;
 8007f36:	9a01      	ldr	r2, [sp, #4]
 8007f38:	3a01      	subs	r2, #1
 8007f3a:	e7f8      	b.n	8007f2e <HAL_ADC_Start_IT+0x4a>
    ADC_STATE_CLR_SET(hadc->State,
 8007f3c:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8007f3e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007f42:	f022 0201 	bic.w	r2, r2, #1
 8007f46:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007f4a:	6402      	str	r2, [r0, #64]	@ 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007f4c:	685a      	ldr	r2, [r3, #4]
 8007f4e:	0552      	lsls	r2, r2, #21
 8007f50:	d505      	bpl.n	8007f5e <HAL_ADC_Start_IT+0x7a>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007f52:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8007f54:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8007f58:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007f5c:	6402      	str	r2, [r0, #64]	@ 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007f5e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8007f60:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007f64:	d002      	beq.n	8007f6c <HAL_ADC_Start_IT+0x88>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007f66:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8007f68:	f022 0206 	bic.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8007f6c:	6442      	str	r2, [r0, #68]	@ 0x44
    __HAL_UNLOCK(hadc);
 8007f6e:	2200      	movs	r2, #0
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8007f70:	4918      	ldr	r1, [pc, #96]	@ (8007fd4 <HAL_ADC_Start_IT+0xf0>)
    __HAL_UNLOCK(hadc);
 8007f72:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8007f76:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8007f7a:	601a      	str	r2, [r3, #0]
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8007f7c:	685a      	ldr	r2, [r3, #4]
 8007f7e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8007f82:	f042 0220 	orr.w	r2, r2, #32
 8007f86:	605a      	str	r2, [r3, #4]
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8007f88:	684a      	ldr	r2, [r1, #4]
 8007f8a:	06d0      	lsls	r0, r2, #27
 8007f8c:	d108      	bne.n	8007fa0 <HAL_ADC_Start_IT+0xbc>
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007f8e:	689a      	ldr	r2, [r3, #8]
 8007f90:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8007f94:	d115      	bne.n	8007fc2 <HAL_ADC_Start_IT+0xde>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007f96:	689a      	ldr	r2, [r3, #8]
 8007f98:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8007f9c:	609a      	str	r2, [r3, #8]
 8007f9e:	e010      	b.n	8007fc2 <HAL_ADC_Start_IT+0xde>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007fa0:	4a0d      	ldr	r2, [pc, #52]	@ (8007fd8 <HAL_ADC_Start_IT+0xf4>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d107      	bne.n	8007fb6 <HAL_ADC_Start_IT+0xd2>
 8007fa6:	689a      	ldr	r2, [r3, #8]
 8007fa8:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8007fac:	d103      	bne.n	8007fb6 <HAL_ADC_Start_IT+0xd2>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007fae:	689a      	ldr	r2, [r3, #8]
 8007fb0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8007fb4:	609a      	str	r2, [r3, #8]
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8007fb6:	684a      	ldr	r2, [r1, #4]
 8007fb8:	06d2      	lsls	r2, r2, #27
 8007fba:	d402      	bmi.n	8007fc2 <HAL_ADC_Start_IT+0xde>
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007fbc:	4a07      	ldr	r2, [pc, #28]	@ (8007fdc <HAL_ADC_Start_IT+0xf8>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d0e5      	beq.n	8007f8e <HAL_ADC_Start_IT+0xaa>
  return HAL_OK;
 8007fc2:	2000      	movs	r0, #0
}
 8007fc4:	b002      	add	sp, #8
 8007fc6:	4770      	bx	lr
  __HAL_LOCK(hadc);
 8007fc8:	2002      	movs	r0, #2
 8007fca:	e7fb      	b.n	8007fc4 <HAL_ADC_Start_IT+0xe0>
 8007fcc:	000f4240 	.word	0x000f4240
 8007fd0:	20000060 	.word	0x20000060
 8007fd4:	40012300 	.word	0x40012300
 8007fd8:	40012000 	.word	0x40012000
 8007fdc:	40012200 	.word	0x40012200

08007fe0 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8007fe0:	6803      	ldr	r3, [r0, #0]
 8007fe2:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
}
 8007fe4:	4770      	bx	lr

08007fe6 <HAL_ADC_LevelOutOfWindowCallback>:
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
 8007fe6:	4770      	bx	lr

08007fe8 <HAL_ADC_ErrorCallback>:
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 8007fe8:	4770      	bx	lr

08007fea <HAL_ADC_IRQHandler>:
  uint32_t tmp_sr = hadc->Instance->SR;
 8007fea:	6803      	ldr	r3, [r0, #0]
{
 8007fec:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp_sr = hadc->Instance->SR;
 8007fee:	681e      	ldr	r6, [r3, #0]
{
 8007ff0:	4604      	mov	r4, r0
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8007ff2:	685d      	ldr	r5, [r3, #4]
  if(tmp1 && tmp2)
 8007ff4:	07b2      	lsls	r2, r6, #30
 8007ff6:	d52b      	bpl.n	8008050 <HAL_ADC_IRQHandler+0x66>
 8007ff8:	06a8      	lsls	r0, r5, #26
 8007ffa:	d529      	bpl.n	8008050 <HAL_ADC_IRQHandler+0x66>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007ffc:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8007ffe:	06d1      	lsls	r1, r2, #27
 8008000:	d403      	bmi.n	800800a <HAL_ADC_IRQHandler+0x20>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8008002:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8008004:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008008:	6422      	str	r2, [r4, #64]	@ 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800800a:	689a      	ldr	r2, [r3, #8]
 800800c:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8008010:	d117      	bne.n	8008042 <HAL_ADC_IRQHandler+0x58>
 8008012:	69a2      	ldr	r2, [r4, #24]
 8008014:	b9aa      	cbnz	r2, 8008042 <HAL_ADC_IRQHandler+0x58>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008016:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008018:	f412 0f70 	tst.w	r2, #15728640	@ 0xf00000
 800801c:	d002      	beq.n	8008024 <HAL_ADC_IRQHandler+0x3a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800801e:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008020:	0552      	lsls	r2, r2, #21
 8008022:	d40e      	bmi.n	8008042 <HAL_ADC_IRQHandler+0x58>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8008024:	685a      	ldr	r2, [r3, #4]
 8008026:	f022 0220 	bic.w	r2, r2, #32
 800802a:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800802c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800802e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008032:	6423      	str	r3, [r4, #64]	@ 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008034:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008036:	04d8      	lsls	r0, r3, #19
 8008038:	d403      	bmi.n	8008042 <HAL_ADC_IRQHandler+0x58>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800803a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800803c:	f043 0301 	orr.w	r3, r3, #1
 8008040:	6423      	str	r3, [r4, #64]	@ 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8008042:	4620      	mov	r0, r4
 8008044:	f7fc fce0 	bl	8004a08 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8008048:	6823      	ldr	r3, [r4, #0]
 800804a:	f06f 0212 	mvn.w	r2, #18
 800804e:	601a      	str	r2, [r3, #0]
  if(tmp1 && tmp2)
 8008050:	0771      	lsls	r1, r6, #29
 8008052:	d533      	bpl.n	80080bc <HAL_ADC_IRQHandler+0xd2>
 8008054:	062a      	lsls	r2, r5, #24
 8008056:	d531      	bpl.n	80080bc <HAL_ADC_IRQHandler+0xd2>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008058:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800805a:	06db      	lsls	r3, r3, #27
 800805c:	d403      	bmi.n	8008066 <HAL_ADC_IRQHandler+0x7c>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800805e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008060:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8008064:	6423      	str	r3, [r4, #64]	@ 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8008066:	6823      	ldr	r3, [r4, #0]
 8008068:	689a      	ldr	r2, [r3, #8]
 800806a:	f412 1f40 	tst.w	r2, #3145728	@ 0x300000
 800806e:	d11e      	bne.n	80080ae <HAL_ADC_IRQHandler+0xc4>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8008070:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8008072:	f412 1f40 	tst.w	r2, #3145728	@ 0x300000
 8008076:	d002      	beq.n	800807e <HAL_ADC_IRQHandler+0x94>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8008078:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 800807a:	0550      	lsls	r0, r2, #21
 800807c:	d417      	bmi.n	80080ae <HAL_ADC_IRQHandler+0xc4>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800807e:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8008080:	0551      	lsls	r1, r2, #21
 8008082:	d414      	bmi.n	80080ae <HAL_ADC_IRQHandler+0xc4>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8008084:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8008086:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 800808a:	d110      	bne.n	80080ae <HAL_ADC_IRQHandler+0xc4>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 800808c:	69a2      	ldr	r2, [r4, #24]
 800808e:	b972      	cbnz	r2, 80080ae <HAL_ADC_IRQHandler+0xc4>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8008090:	685a      	ldr	r2, [r3, #4]
 8008092:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008096:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8008098:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800809a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800809e:	6423      	str	r3, [r4, #64]	@ 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80080a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80080a2:	05da      	lsls	r2, r3, #23
 80080a4:	d403      	bmi.n	80080ae <HAL_ADC_IRQHandler+0xc4>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80080a6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80080a8:	f043 0301 	orr.w	r3, r3, #1
 80080ac:	6423      	str	r3, [r4, #64]	@ 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80080ae:	4620      	mov	r0, r4
 80080b0:	f000 f8d8 	bl	8008264 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80080b4:	6823      	ldr	r3, [r4, #0]
 80080b6:	f06f 020c 	mvn.w	r2, #12
 80080ba:	601a      	str	r2, [r3, #0]
  if(tmp1 && tmp2)
 80080bc:	07f3      	lsls	r3, r6, #31
 80080be:	d510      	bpl.n	80080e2 <HAL_ADC_IRQHandler+0xf8>
 80080c0:	0668      	lsls	r0, r5, #25
 80080c2:	d50e      	bpl.n	80080e2 <HAL_ADC_IRQHandler+0xf8>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80080c4:	6823      	ldr	r3, [r4, #0]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	07d9      	lsls	r1, r3, #31
 80080ca:	d50a      	bpl.n	80080e2 <HAL_ADC_IRQHandler+0xf8>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80080cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80080ce:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80080d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80080d4:	6423      	str	r3, [r4, #64]	@ 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80080d6:	f7ff ff86 	bl	8007fe6 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80080da:	6823      	ldr	r3, [r4, #0]
 80080dc:	f06f 0201 	mvn.w	r2, #1
 80080e0:	601a      	str	r2, [r3, #0]
  if(tmp1 && tmp2)
 80080e2:	06b2      	lsls	r2, r6, #26
 80080e4:	d50e      	bpl.n	8008104 <HAL_ADC_IRQHandler+0x11a>
 80080e6:	016b      	lsls	r3, r5, #5
 80080e8:	d50c      	bpl.n	8008104 <HAL_ADC_IRQHandler+0x11a>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80080ea:	6c63      	ldr	r3, [r4, #68]	@ 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80080ec:	f06f 0520 	mvn.w	r5, #32
      HAL_ADC_ErrorCallback(hadc);
 80080f0:	4620      	mov	r0, r4
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80080f2:	f043 0302 	orr.w	r3, r3, #2
 80080f6:	6463      	str	r3, [r4, #68]	@ 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80080f8:	6823      	ldr	r3, [r4, #0]
 80080fa:	601d      	str	r5, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 80080fc:	f7ff ff74 	bl	8007fe8 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8008100:	6823      	ldr	r3, [r4, #0]
 8008102:	601d      	str	r5, [r3, #0]
}
 8008104:	bd70      	pop	{r4, r5, r6, pc}
	...

08008108 <HAL_ADC_ConfigChannel>:
  __IO uint32_t counter = 0;
 8008108:	2300      	movs	r3, #0
{
 800810a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0;
 800810c:	9301      	str	r3, [sp, #4]
{
 800810e:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8008110:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8008114:	2b01      	cmp	r3, #1
 8008116:	f000 8098 	beq.w	800824a <HAL_ADC_ConfigChannel+0x142>
 800811a:	2301      	movs	r3, #1
 800811c:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8008120:	6808      	ldr	r0, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8008122:	6823      	ldr	r3, [r4, #0]
 8008124:	b285      	uxth	r5, r0
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8008126:	2809      	cmp	r0, #9
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8008128:	688e      	ldr	r6, [r1, #8]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800812a:	eb05 0245 	add.w	r2, r5, r5, lsl #1
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800812e:	d939      	bls.n	80081a4 <HAL_ADC_ConfigChannel+0x9c>
 8008130:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8008134:	d036      	beq.n	80081a4 <HAL_ADC_ConfigChannel+0x9c>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8008136:	3a1e      	subs	r2, #30
 8008138:	f04f 0c07 	mov.w	ip, #7
 800813c:	68df      	ldr	r7, [r3, #12]
 800813e:	fa0c fc02 	lsl.w	ip, ip, r2
 8008142:	ea27 070c 	bic.w	r7, r7, ip
 8008146:	60df      	str	r7, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008148:	4f41      	ldr	r7, [pc, #260]	@ (8008250 <HAL_ADC_ConfigChannel+0x148>)
 800814a:	42b8      	cmp	r0, r7
 800814c:	d125      	bne.n	800819a <HAL_ADC_ConfigChannel+0x92>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800814e:	68da      	ldr	r2, [r3, #12]
 8008150:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8008154:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7)
 8008156:	6849      	ldr	r1, [r1, #4]
 8008158:	2906      	cmp	r1, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800815a:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  if (sConfig->Rank < 7)
 800815e:	d82e      	bhi.n	80081be <HAL_ADC_ConfigChannel+0xb6>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8008160:	3a05      	subs	r2, #5
 8008162:	261f      	movs	r6, #31
 8008164:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8008166:	4096      	lsls	r6, r2
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8008168:	fa05 f202 	lsl.w	r2, r5, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800816c:	ea21 0106 	bic.w	r1, r1, r6
 8008170:	6359      	str	r1, [r3, #52]	@ 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8008172:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8008174:	430a      	orrs	r2, r1
 8008176:	635a      	str	r2, [r3, #52]	@ 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8008178:	4a36      	ldr	r2, [pc, #216]	@ (8008254 <HAL_ADC_ConfigChannel+0x14c>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d108      	bne.n	8008190 <HAL_ADC_ConfigChannel+0x88>
 800817e:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8008182:	d137      	bne.n	80081f4 <HAL_ADC_ConfigChannel+0xec>
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8008184:	f8d2 3304 	ldr.w	r3, [r2, #772]	@ 0x304
 8008188:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800818c:	f8c2 3304 	str.w	r3, [r2, #772]	@ 0x304
  __HAL_UNLOCK(hadc);
 8008190:	2000      	movs	r0, #0
 8008192:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
}
 8008196:	b003      	add	sp, #12
 8008198:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800819a:	68df      	ldr	r7, [r3, #12]
 800819c:	fa06 f202 	lsl.w	r2, r6, r2
 80081a0:	433a      	orrs	r2, r7
 80081a2:	e7d7      	b.n	8008154 <HAL_ADC_ConfigChannel+0x4c>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80081a4:	f04f 0c07 	mov.w	ip, #7
 80081a8:	691f      	ldr	r7, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80081aa:	4096      	lsls	r6, r2
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80081ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80081b0:	ea27 070c 	bic.w	r7, r7, ip
 80081b4:	611f      	str	r7, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80081b6:	691f      	ldr	r7, [r3, #16]
 80081b8:	433e      	orrs	r6, r7
 80081ba:	611e      	str	r6, [r3, #16]
 80081bc:	e7cb      	b.n	8008156 <HAL_ADC_ConfigChannel+0x4e>
  else if (sConfig->Rank < 13)
 80081be:	290c      	cmp	r1, #12
 80081c0:	f04f 011f 	mov.w	r1, #31
 80081c4:	d80b      	bhi.n	80081de <HAL_ADC_ConfigChannel+0xd6>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80081c6:	3a23      	subs	r2, #35	@ 0x23
 80081c8:	6b1e      	ldr	r6, [r3, #48]	@ 0x30
 80081ca:	4091      	lsls	r1, r2
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80081cc:	fa05 f202 	lsl.w	r2, r5, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80081d0:	ea26 0101 	bic.w	r1, r6, r1
 80081d4:	6319      	str	r1, [r3, #48]	@ 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80081d6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80081d8:	430a      	orrs	r2, r1
 80081da:	631a      	str	r2, [r3, #48]	@ 0x30
 80081dc:	e7cc      	b.n	8008178 <HAL_ADC_ConfigChannel+0x70>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80081de:	3a41      	subs	r2, #65	@ 0x41
 80081e0:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
 80081e2:	4091      	lsls	r1, r2
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80081e4:	4095      	lsls	r5, r2
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80081e6:	ea26 0101 	bic.w	r1, r6, r1
 80081ea:	62d9      	str	r1, [r3, #44]	@ 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80081ec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80081ee:	430d      	orrs	r5, r1
 80081f0:	62dd      	str	r5, [r3, #44]	@ 0x2c
 80081f2:	e7c1      	b.n	8008178 <HAL_ADC_ConfigChannel+0x70>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80081f4:	2812      	cmp	r0, #18
 80081f6:	d109      	bne.n	800820c <HAL_ADC_ConfigChannel+0x104>
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80081f8:	4b17      	ldr	r3, [pc, #92]	@ (8008258 <HAL_ADC_ConfigChannel+0x150>)
 80081fa:	685a      	ldr	r2, [r3, #4]
 80081fc:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 8008200:	605a      	str	r2, [r3, #4]
    ADC->CCR |= ADC_CCR_VBATE;
 8008202:	685a      	ldr	r2, [r3, #4]
 8008204:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8008208:	605a      	str	r2, [r3, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800820a:	e7c1      	b.n	8008190 <HAL_ADC_ConfigChannel+0x88>
 800820c:	4b10      	ldr	r3, [pc, #64]	@ (8008250 <HAL_ADC_ConfigChannel+0x148>)
 800820e:	4298      	cmp	r0, r3
 8008210:	d001      	beq.n	8008216 <HAL_ADC_ConfigChannel+0x10e>
 8008212:	2811      	cmp	r0, #17
 8008214:	d1bc      	bne.n	8008190 <HAL_ADC_ConfigChannel+0x88>
    ADC->CCR &= ~ADC_CCR_VBATE;
 8008216:	4b10      	ldr	r3, [pc, #64]	@ (8008258 <HAL_ADC_ConfigChannel+0x150>)
 8008218:	685a      	ldr	r2, [r3, #4]
 800821a:	f422 0280 	bic.w	r2, r2, #4194304	@ 0x400000
 800821e:	605a      	str	r2, [r3, #4]
    ADC->CCR |= ADC_CCR_TSVREFE;
 8008220:	685a      	ldr	r2, [r3, #4]
 8008222:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8008226:	605a      	str	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008228:	4b09      	ldr	r3, [pc, #36]	@ (8008250 <HAL_ADC_ConfigChannel+0x148>)
 800822a:	4298      	cmp	r0, r3
 800822c:	d1b0      	bne.n	8008190 <HAL_ADC_ConfigChannel+0x88>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800822e:	4b0b      	ldr	r3, [pc, #44]	@ (800825c <HAL_ADC_ConfigChannel+0x154>)
 8008230:	4a0b      	ldr	r2, [pc, #44]	@ (8008260 <HAL_ADC_ConfigChannel+0x158>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	fbb3 f3f2 	udiv	r3, r3, r2
 8008238:	220a      	movs	r2, #10
 800823a:	4353      	muls	r3, r2
        counter--;
 800823c:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 800823e:	9b01      	ldr	r3, [sp, #4]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d0a5      	beq.n	8008190 <HAL_ADC_ConfigChannel+0x88>
        counter--;
 8008244:	9b01      	ldr	r3, [sp, #4]
 8008246:	3b01      	subs	r3, #1
 8008248:	e7f8      	b.n	800823c <HAL_ADC_ConfigChannel+0x134>
  __HAL_LOCK(hadc);
 800824a:	2002      	movs	r0, #2
 800824c:	e7a3      	b.n	8008196 <HAL_ADC_ConfigChannel+0x8e>
 800824e:	bf00      	nop
 8008250:	10000012 	.word	0x10000012
 8008254:	40012000 	.word	0x40012000
 8008258:	40012300 	.word	0x40012300
 800825c:	20000060 	.word	0x20000060
 8008260:	000f4240 	.word	0x000f4240

08008264 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8008264:	4770      	bx	lr
	...

08008268 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008268:	4907      	ldr	r1, [pc, #28]	@ (8008288 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800826a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800826c:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800826e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008272:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008276:	0412      	lsls	r2, r2, #16
 8008278:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800827a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800827c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008280:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8008284:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8008286:	4770      	bx	lr
 8008288:	e000ed00 	.word	0xe000ed00

0800828c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800828c:	4b16      	ldr	r3, [pc, #88]	@ (80082e8 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800828e:	b530      	push	{r4, r5, lr}
 8008290:	68dc      	ldr	r4, [r3, #12]
 8008292:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008296:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800829a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800829c:	2b04      	cmp	r3, #4
 800829e:	bf28      	it	cs
 80082a0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80082a2:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80082a4:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80082a8:	bf8c      	ite	hi
 80082aa:	3c03      	subhi	r4, #3
 80082ac:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80082ae:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 80082b2:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80082b4:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80082b8:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80082bc:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80082c0:	fa03 f304 	lsl.w	r3, r3, r4
 80082c4:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80082c8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80082cc:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80082ce:	db06      	blt.n	80082de <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80082d0:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80082d4:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80082d8:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80082dc:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80082de:	f000 000f 	and.w	r0, r0, #15
 80082e2:	4a02      	ldr	r2, [pc, #8]	@ (80082ec <HAL_NVIC_SetPriority+0x60>)
 80082e4:	5413      	strb	r3, [r2, r0]
 80082e6:	e7f9      	b.n	80082dc <HAL_NVIC_SetPriority+0x50>
 80082e8:	e000ed00 	.word	0xe000ed00
 80082ec:	e000ed14 	.word	0xe000ed14

080082f0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80082f0:	2800      	cmp	r0, #0
 80082f2:	db07      	blt.n	8008304 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80082f4:	0941      	lsrs	r1, r0, #5
 80082f6:	2301      	movs	r3, #1
 80082f8:	f000 001f 	and.w	r0, r0, #31
 80082fc:	4a02      	ldr	r2, [pc, #8]	@ (8008308 <HAL_NVIC_EnableIRQ+0x18>)
 80082fe:	4083      	lsls	r3, r0
 8008300:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8008304:	4770      	bx	lr
 8008306:	bf00      	nop
 8008308:	e000e100 	.word	0xe000e100

0800830c <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800830c:	2800      	cmp	r0, #0
 800830e:	db0c      	blt.n	800832a <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008310:	0943      	lsrs	r3, r0, #5
 8008312:	2201      	movs	r2, #1
 8008314:	f000 001f 	and.w	r0, r0, #31
 8008318:	4904      	ldr	r1, [pc, #16]	@ (800832c <HAL_NVIC_DisableIRQ+0x20>)
 800831a:	3320      	adds	r3, #32
 800831c:	4082      	lsls	r2, r0
 800831e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8008322:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008326:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800832a:	4770      	bx	lr
 800832c:	e000e100 	.word	0xe000e100

08008330 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8008330:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8008334:	4b04      	ldr	r3, [pc, #16]	@ (8008348 <HAL_MPU_Disable+0x18>)
 8008336:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008338:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800833c:	625a      	str	r2, [r3, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800833e:	2200      	movs	r2, #0
 8008340:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 8008344:	4770      	bx	lr
 8008346:	bf00      	nop
 8008348:	e000ed00 	.word	0xe000ed00

0800834c <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800834c:	4b06      	ldr	r3, [pc, #24]	@ (8008368 <HAL_MPU_Enable+0x1c>)
 800834e:	f040 0001 	orr.w	r0, r0, #1
 8008352:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8008356:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008358:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800835c:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800835e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008362:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8008366:	4770      	bx	lr
 8008368:	e000ed00 	.word	0xe000ed00

0800836c <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800836c:	7843      	ldrb	r3, [r0, #1]
 800836e:	4a14      	ldr	r2, [pc, #80]	@ (80083c0 <HAL_MPU_ConfigRegion+0x54>)
{
 8008370:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 8008372:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  if ((MPU_Init->Enable) != RESET)
 8008376:	7801      	ldrb	r1, [r0, #0]
 8008378:	b1e9      	cbz	r1, 80083b6 <HAL_MPU_ConfigRegion+0x4a>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 800837a:	6843      	ldr	r3, [r0, #4]
 800837c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8008380:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008382:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8008384:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008386:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800838a:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800838c:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800838e:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8008392:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8008394:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8008398:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800839a:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800839e:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80083a0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80083a4:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80083a6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80083aa:	7a01      	ldrb	r1, [r0, #8]
 80083ac:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80083b0:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80083b4:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 80083b6:	f8c2 109c 	str.w	r1, [r2, #156]	@ 0x9c
    MPU->RASR = 0x00;
 80083ba:	f8c2 10a0 	str.w	r1, [r2, #160]	@ 0xa0
}
 80083be:	e7f9      	b.n	80083b4 <HAL_MPU_ConfigRegion+0x48>
 80083c0:	e000ed00 	.word	0xe000ed00

080083c4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80083c4:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80083c6:	4604      	mov	r4, r0
 80083c8:	b908      	cbnz	r0, 80083ce <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 80083ca:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 80083cc:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 80083ce:	7f43      	ldrb	r3, [r0, #29]
 80083d0:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80083d4:	b913      	cbnz	r3, 80083dc <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 80083d6:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 80083d8:	f7fc fb80 	bl	8004adc <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 80083dc:	2302      	movs	r3, #2
 80083de:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80083e0:	7923      	ldrb	r3, [r4, #4]
 80083e2:	b9e3      	cbnz	r3, 800841e <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80083e4:	6823      	ldr	r3, [r4, #0]
 80083e6:	4a13      	ldr	r2, [pc, #76]	@ (8008434 <HAL_CRC_Init+0x70>)
 80083e8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80083ea:	689a      	ldr	r2, [r3, #8]
 80083ec:	f022 0218 	bic.w	r2, r2, #24
 80083f0:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80083f2:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80083f4:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80083f6:	b9d2      	cbnz	r2, 800842e <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80083f8:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80083fc:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 80083fe:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8008400:	689a      	ldr	r2, [r3, #8]
 8008402:	6961      	ldr	r1, [r4, #20]
 8008404:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8008408:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800840a:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800840c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800840e:	689a      	ldr	r2, [r3, #8]
 8008410:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008414:	430a      	orrs	r2, r1
 8008416:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8008418:	2301      	movs	r3, #1
 800841a:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 800841c:	e7d6      	b.n	80083cc <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800841e:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8008422:	4620      	mov	r0, r4
 8008424:	f000 f808 	bl	8008438 <HAL_CRCEx_Polynomial_Set>
 8008428:	2800      	cmp	r0, #0
 800842a:	d0e2      	beq.n	80083f2 <HAL_CRC_Init+0x2e>
 800842c:	e7cd      	b.n	80083ca <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800842e:	6922      	ldr	r2, [r4, #16]
 8008430:	e7e4      	b.n	80083fc <HAL_CRC_Init+0x38>
 8008432:	bf00      	nop
 8008434:	04c11db7 	.word	0x04c11db7

08008438 <HAL_CRCEx_Polynomial_Set>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8008438:	231f      	movs	r3, #31
{
 800843a:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800843c:	3b01      	subs	r3, #1
 800843e:	d31d      	bcc.n	800847c <HAL_CRCEx_Polynomial_Set+0x44>
 8008440:	fa21 f403 	lsr.w	r4, r1, r3
 8008444:	07e4      	lsls	r4, r4, #31
 8008446:	d5f9      	bpl.n	800843c <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8008448:	2a10      	cmp	r2, #16
 800844a:	d013      	beq.n	8008474 <HAL_CRCEx_Polynomial_Set+0x3c>
 800844c:	2a10      	cmp	r2, #16
 800844e:	d804      	bhi.n	800845a <HAL_CRCEx_Polynomial_Set+0x22>
 8008450:	b13a      	cbz	r2, 8008462 <HAL_CRCEx_Polynomial_Set+0x2a>
 8008452:	2a08      	cmp	r2, #8
 8008454:	d010      	beq.n	8008478 <HAL_CRCEx_Polynomial_Set+0x40>
 8008456:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 8008458:	e00b      	b.n	8008472 <HAL_CRCEx_Polynomial_Set+0x3a>
  switch (PolyLength)
 800845a:	2a18      	cmp	r2, #24
 800845c:	d1fb      	bne.n	8008456 <HAL_CRCEx_Polynomial_Set+0x1e>
      if (msb >= HAL_CRC_LENGTH_7B)
 800845e:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 8008460:	d8f9      	bhi.n	8008456 <HAL_CRCEx_Polynomial_Set+0x1e>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8008462:	6800      	ldr	r0, [r0, #0]
 8008464:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8008466:	6883      	ldr	r3, [r0, #8]
 8008468:	f023 0318 	bic.w	r3, r3, #24
 800846c:	4313      	orrs	r3, r2
 800846e:	6083      	str	r3, [r0, #8]
 8008470:	2000      	movs	r0, #0
}
 8008472:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 8008474:	2b07      	cmp	r3, #7
 8008476:	e7f3      	b.n	8008460 <HAL_CRCEx_Polynomial_Set+0x28>
      if (msb >= HAL_CRC_LENGTH_16B)
 8008478:	2b0f      	cmp	r3, #15
 800847a:	e7f1      	b.n	8008460 <HAL_CRCEx_Polynomial_Set+0x28>
  switch (PolyLength)
 800847c:	2a10      	cmp	r2, #16
 800847e:	d1e5      	bne.n	800844c <HAL_CRCEx_Polynomial_Set+0x14>
 8008480:	e7e9      	b.n	8008456 <HAL_CRCEx_Polynomial_Set+0x1e>
	...

08008484 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008484:	6803      	ldr	r3, [r0, #0]
{
 8008486:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008488:	2018      	movs	r0, #24
 800848a:	b2d9      	uxtb	r1, r3
 800848c:	3910      	subs	r1, #16
 800848e:	fbb1 f0f0 	udiv	r0, r1, r0
{
 8008492:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008494:	4c05      	ldr	r4, [pc, #20]	@ (80084ac <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8008496:	295f      	cmp	r1, #95	@ 0x5f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008498:	5c20      	ldrb	r0, [r4, r0]
 800849a:	65d0      	str	r0, [r2, #92]	@ 0x5c
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800849c:	f423 707f 	bic.w	r0, r3, #1020	@ 0x3fc
 80084a0:	f020 0003 	bic.w	r0, r0, #3
 80084a4:	bf88      	it	hi
 80084a6:	3004      	addhi	r0, #4
 80084a8:	6590      	str	r0, [r2, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 80084aa:	bd10      	pop	{r4, pc}
 80084ac:	08029e19 	.word	0x08029e19

080084b0 <HAL_DMA_Init>:
{
 80084b0:	b570      	push	{r4, r5, r6, lr}
 80084b2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80084b4:	f7ff fc58 	bl	8007d68 <HAL_GetTick>
 80084b8:	4605      	mov	r5, r0
  if(hdma == NULL)
 80084ba:	2c00      	cmp	r4, #0
 80084bc:	d060      	beq.n	8008580 <HAL_DMA_Init+0xd0>
  hdma->State = HAL_DMA_STATE_BUSY;
 80084be:	2302      	movs	r3, #2
  __HAL_DMA_DISABLE(hdma);
 80084c0:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 80084c2:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 80084c6:	2300      	movs	r3, #0
 80084c8:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 80084cc:	6813      	ldr	r3, [r2, #0]
 80084ce:	f023 0301 	bic.w	r3, r3, #1
 80084d2:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80084d4:	6822      	ldr	r2, [r4, #0]
 80084d6:	6813      	ldr	r3, [r2, #0]
 80084d8:	07d8      	lsls	r0, r3, #31
 80084da:	d42e      	bmi.n	800853a <HAL_DMA_Init+0x8a>
  tmp = hdma->Instance->CR;
 80084dc:	6813      	ldr	r3, [r2, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80084de:	4832      	ldr	r0, [pc, #200]	@ (80085a8 <HAL_DMA_Init+0xf8>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80084e0:	69a1      	ldr	r1, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80084e2:	4018      	ands	r0, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80084e4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80084e8:	432b      	orrs	r3, r5
 80084ea:	68e5      	ldr	r5, [r4, #12]
 80084ec:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80084ee:	6925      	ldr	r5, [r4, #16]
 80084f0:	432b      	orrs	r3, r5
 80084f2:	6965      	ldr	r5, [r4, #20]
 80084f4:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80084f6:	69e5      	ldr	r5, [r4, #28]
 80084f8:	430b      	orrs	r3, r1
 80084fa:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 80084fc:	6a25      	ldr	r5, [r4, #32]
 80084fe:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008500:	4303      	orrs	r3, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008502:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8008504:	2804      	cmp	r0, #4
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008506:	bf02      	ittt	eq
 8008508:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	@ 0x2c
 800850c:	4335      	orreq	r5, r6
 800850e:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008510:	2804      	cmp	r0, #4
  hdma->Instance->CR = tmp;  
 8008512:	6013      	str	r3, [r2, #0]
  tmp = hdma->Instance->FCR;
 8008514:	6953      	ldr	r3, [r2, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008516:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 800851a:	ea43 0300 	orr.w	r3, r3, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800851e:	d135      	bne.n	800858c <HAL_DMA_Init+0xdc>
    tmp |= hdma->Init.FIFOThreshold;
 8008520:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008522:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8008524:	4303      	orrs	r3, r0
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008526:	b38d      	cbz	r5, 800858c <HAL_DMA_Init+0xdc>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008528:	b991      	cbnz	r1, 8008550 <HAL_DMA_Init+0xa0>
  {
    switch (tmp)
 800852a:	2801      	cmp	r0, #1
 800852c:	d020      	beq.n	8008570 <HAL_DMA_Init+0xc0>
 800852e:	f030 0102 	bics.w	r1, r0, #2
 8008532:	d12b      	bne.n	800858c <HAL_DMA_Init+0xdc>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008534:	01e9      	lsls	r1, r5, #7
 8008536:	d529      	bpl.n	800858c <HAL_DMA_Init+0xdc>
 8008538:	e01d      	b.n	8008576 <HAL_DMA_Init+0xc6>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800853a:	f7ff fc15 	bl	8007d68 <HAL_GetTick>
 800853e:	1b40      	subs	r0, r0, r5
 8008540:	2805      	cmp	r0, #5
 8008542:	d9c7      	bls.n	80084d4 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008544:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008546:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008548:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800854a:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 800854e:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008550:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8008554:	d116      	bne.n	8008584 <HAL_DMA_Init+0xd4>
    switch (tmp)
 8008556:	2803      	cmp	r0, #3
 8008558:	d818      	bhi.n	800858c <HAL_DMA_Init+0xdc>
 800855a:	a101      	add	r1, pc, #4	@ (adr r1, 8008560 <HAL_DMA_Init+0xb0>)
 800855c:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
 8008560:	08008577 	.word	0x08008577
 8008564:	08008535 	.word	0x08008535
 8008568:	08008577 	.word	0x08008577
 800856c:	08008571 	.word	0x08008571
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008570:	f1b5 7fc0 	cmp.w	r5, #25165824	@ 0x1800000
 8008574:	d10a      	bne.n	800858c <HAL_DMA_Init+0xdc>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008576:	2340      	movs	r3, #64	@ 0x40
 8008578:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800857a:	2301      	movs	r3, #1
 800857c:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    return HAL_ERROR;
 8008580:	2001      	movs	r0, #1
 8008582:	e7e4      	b.n	800854e <HAL_DMA_Init+0x9e>
    switch (tmp)
 8008584:	2802      	cmp	r0, #2
 8008586:	d9f6      	bls.n	8008576 <HAL_DMA_Init+0xc6>
 8008588:	2803      	cmp	r0, #3
 800858a:	d0d3      	beq.n	8008534 <HAL_DMA_Init+0x84>
  hdma->Instance->FCR = tmp;
 800858c:	6153      	str	r3, [r2, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800858e:	4620      	mov	r0, r4
 8008590:	f7ff ff78 	bl	8008484 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008594:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8008596:	233f      	movs	r3, #63	@ 0x3f
 8008598:	4093      	lsls	r3, r2
 800859a:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800859c:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800859e:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80085a0:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80085a2:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 80085a6:	e7d2      	b.n	800854e <HAL_DMA_Init+0x9e>
 80085a8:	e010803f 	.word	0xe010803f

080085ac <HAL_DMA_Start_IT>:
{
 80085ac:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 80085ae:	f890 4034 	ldrb.w	r4, [r0, #52]	@ 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80085b2:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 80085b4:	2c01      	cmp	r4, #1
 80085b6:	d034      	beq.n	8008622 <HAL_DMA_Start_IT+0x76>
 80085b8:	2401      	movs	r4, #1
 80085ba:	f880 4034 	strb.w	r4, [r0, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80085be:	f890 4035 	ldrb.w	r4, [r0, #53]	@ 0x35
 80085c2:	2c01      	cmp	r4, #1
 80085c4:	f04f 0400 	mov.w	r4, #0
 80085c8:	d129      	bne.n	800861e <HAL_DMA_Start_IT+0x72>
    hdma->State = HAL_DMA_STATE_BUSY;
 80085ca:	2502      	movs	r5, #2
 80085cc:	f880 5035 	strb.w	r5, [r0, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80085d0:	6544      	str	r4, [r0, #84]	@ 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80085d2:	6804      	ldr	r4, [r0, #0]
 80085d4:	6825      	ldr	r5, [r4, #0]
 80085d6:	f425 2580 	bic.w	r5, r5, #262144	@ 0x40000
 80085da:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 80085dc:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80085de:	6883      	ldr	r3, [r0, #8]
 80085e0:	2b40      	cmp	r3, #64	@ 0x40
 80085e2:	d119      	bne.n	8008618 <HAL_DMA_Start_IT+0x6c>
    hdma->Instance->PAR = DstAddress;
 80085e4:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 80085e6:	60e1      	str	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80085e8:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 80085ea:	233f      	movs	r3, #63	@ 0x3f
 80085ec:	4093      	lsls	r3, r2
 80085ee:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80085f0:	6823      	ldr	r3, [r4, #0]
 80085f2:	f043 0316 	orr.w	r3, r3, #22
 80085f6:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80085f8:	6963      	ldr	r3, [r4, #20]
 80085fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085fe:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8008600:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8008602:	b11b      	cbz	r3, 800860c <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 8008604:	6823      	ldr	r3, [r4, #0]
 8008606:	f043 0308 	orr.w	r3, r3, #8
 800860a:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800860c:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800860e:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8008610:	f043 0301 	orr.w	r3, r3, #1
 8008614:	6023      	str	r3, [r4, #0]
}
 8008616:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->PAR = SrcAddress;
 8008618:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 800861a:	60e2      	str	r2, [r4, #12]
 800861c:	e7e4      	b.n	80085e8 <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 800861e:	f880 4034 	strb.w	r4, [r0, #52]	@ 0x34
  __HAL_LOCK(hdma);
 8008622:	2002      	movs	r0, #2
 8008624:	e7f7      	b.n	8008616 <HAL_DMA_Start_IT+0x6a>

08008626 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008626:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 800862a:	2b02      	cmp	r3, #2
 800862c:	d003      	beq.n	8008636 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800862e:	2380      	movs	r3, #128	@ 0x80
 8008630:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 8008632:	2001      	movs	r0, #1
 8008634:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8008636:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8008638:	2305      	movs	r3, #5
 800863a:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
  return HAL_OK;
 800863e:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8008640:	6813      	ldr	r3, [r2, #0]
 8008642:	f023 0301 	bic.w	r3, r3, #1
 8008646:	6013      	str	r3, [r2, #0]
}
 8008648:	4770      	bx	lr
	...

0800864c <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
 800864c:	2300      	movs	r3, #0
{
 800864e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 8008650:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008652:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 8008654:	4b5b      	ldr	r3, [pc, #364]	@ (80087c4 <HAL_DMA_IRQHandler+0x178>)
{
 8008656:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008658:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  uint32_t timeout = SystemCoreClock / 9600;
 800865a:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800865c:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
  tmpisr = regs->ISR;
 800865e:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008660:	409a      	lsls	r2, r3
 8008662:	4232      	tst	r2, r6
 8008664:	d00c      	beq.n	8008680 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008666:	6801      	ldr	r1, [r0, #0]
 8008668:	6808      	ldr	r0, [r1, #0]
 800866a:	0740      	lsls	r0, r0, #29
 800866c:	d508      	bpl.n	8008680 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800866e:	6808      	ldr	r0, [r1, #0]
 8008670:	f020 0004 	bic.w	r0, r0, #4
 8008674:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008676:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008678:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800867a:	f042 0201 	orr.w	r2, r2, #1
 800867e:	6562      	str	r2, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008680:	2201      	movs	r2, #1
 8008682:	409a      	lsls	r2, r3
 8008684:	4232      	tst	r2, r6
 8008686:	d008      	beq.n	800869a <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008688:	6821      	ldr	r1, [r4, #0]
 800868a:	6949      	ldr	r1, [r1, #20]
 800868c:	0609      	lsls	r1, r1, #24
 800868e:	d504      	bpl.n	800869a <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008690:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008692:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008694:	f042 0202 	orr.w	r2, r2, #2
 8008698:	6562      	str	r2, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800869a:	2204      	movs	r2, #4
 800869c:	409a      	lsls	r2, r3
 800869e:	4232      	tst	r2, r6
 80086a0:	d008      	beq.n	80086b4 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80086a2:	6821      	ldr	r1, [r4, #0]
 80086a4:	6809      	ldr	r1, [r1, #0]
 80086a6:	0788      	lsls	r0, r1, #30
 80086a8:	d504      	bpl.n	80086b4 <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80086aa:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80086ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80086ae:	f042 0204 	orr.w	r2, r2, #4
 80086b2:	6562      	str	r2, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80086b4:	2210      	movs	r2, #16
 80086b6:	409a      	lsls	r2, r3
 80086b8:	4232      	tst	r2, r6
 80086ba:	d010      	beq.n	80086de <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80086bc:	6823      	ldr	r3, [r4, #0]
 80086be:	6819      	ldr	r1, [r3, #0]
 80086c0:	0709      	lsls	r1, r1, #28
 80086c2:	d50c      	bpl.n	80086de <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80086c4:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	0350      	lsls	r0, r2, #13
 80086ca:	d537      	bpl.n	800873c <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	0319      	lsls	r1, r3, #12
 80086d0:	d401      	bmi.n	80086d6 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 80086d2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80086d4:	e000      	b.n	80086d8 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80086d6:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 80086d8:	b10b      	cbz	r3, 80086de <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 80086da:	4620      	mov	r0, r4
 80086dc:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80086de:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 80086e0:	2220      	movs	r2, #32
 80086e2:	408a      	lsls	r2, r1
 80086e4:	4232      	tst	r2, r6
 80086e6:	d03a      	beq.n	800875e <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80086e8:	6823      	ldr	r3, [r4, #0]
 80086ea:	6818      	ldr	r0, [r3, #0]
 80086ec:	06c6      	lsls	r6, r0, #27
 80086ee:	d536      	bpl.n	800875e <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80086f0:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80086f2:	f894 2035 	ldrb.w	r2, [r4, #53]	@ 0x35
 80086f6:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80086f8:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80086fa:	d127      	bne.n	800874c <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80086fc:	f022 0216 	bic.w	r2, r2, #22
 8008700:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008702:	695a      	ldr	r2, [r3, #20]
 8008704:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008708:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800870a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800870c:	b90a      	cbnz	r2, 8008712 <HAL_DMA_IRQHandler+0xc6>
 800870e:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8008710:	b11a      	cbz	r2, 800871a <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008712:	681a      	ldr	r2, [r3, #0]
 8008714:	f022 0208 	bic.w	r2, r2, #8
 8008718:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800871a:	233f      	movs	r3, #63	@ 0x3f
 800871c:	408b      	lsls	r3, r1
 800871e:	60ab      	str	r3, [r5, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8008720:	2301      	movs	r3, #1
 8008722:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8008726:	2300      	movs	r3, #0
 8008728:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 800872c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
    if(hdma->XferErrorCallback != NULL)
 800872e:	2b00      	cmp	r3, #0
 8008730:	d045      	beq.n	80087be <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 8008732:	4620      	mov	r0, r4
}
 8008734:	b003      	add	sp, #12
 8008736:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 800873a:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800873c:	681a      	ldr	r2, [r3, #0]
 800873e:	05d2      	lsls	r2, r2, #23
 8008740:	d4c7      	bmi.n	80086d2 <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008742:	681a      	ldr	r2, [r3, #0]
 8008744:	f022 0208 	bic.w	r2, r2, #8
 8008748:	601a      	str	r2, [r3, #0]
 800874a:	e7c2      	b.n	80086d2 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800874c:	0350      	lsls	r0, r2, #13
 800874e:	d527      	bpl.n	80087a0 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	0319      	lsls	r1, r3, #12
 8008754:	d431      	bmi.n	80087ba <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 8008756:	6c63      	ldr	r3, [r4, #68]	@ 0x44
        if(hdma->XferCpltCallback != NULL)
 8008758:	b10b      	cbz	r3, 800875e <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 800875a:	4620      	mov	r0, r4
 800875c:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800875e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008760:	b36b      	cbz	r3, 80087be <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008762:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008764:	07da      	lsls	r2, r3, #31
 8008766:	d519      	bpl.n	800879c <HAL_DMA_IRQHandler+0x150>
  uint32_t timeout = SystemCoreClock / 9600;
 8008768:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
      __HAL_DMA_DISABLE(hdma);
 800876c:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 800876e:	fbb7 f7f3 	udiv	r7, r7, r3
      hdma->State = HAL_DMA_STATE_ABORT;
 8008772:	2305      	movs	r3, #5
 8008774:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 8008778:	6813      	ldr	r3, [r2, #0]
 800877a:	f023 0301 	bic.w	r3, r3, #1
 800877e:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8008780:	9b01      	ldr	r3, [sp, #4]
 8008782:	3301      	adds	r3, #1
 8008784:	42bb      	cmp	r3, r7
 8008786:	9301      	str	r3, [sp, #4]
 8008788:	d802      	bhi.n	8008790 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800878a:	6813      	ldr	r3, [r2, #0]
 800878c:	07db      	lsls	r3, r3, #31
 800878e:	d4f7      	bmi.n	8008780 <HAL_DMA_IRQHandler+0x134>
      hdma->State = HAL_DMA_STATE_READY;
 8008790:	2301      	movs	r3, #1
 8008792:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8008796:	2300      	movs	r3, #0
 8008798:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 800879c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800879e:	e7c6      	b.n	800872e <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80087a0:	681a      	ldr	r2, [r3, #0]
 80087a2:	f412 7280 	ands.w	r2, r2, #256	@ 0x100
 80087a6:	d108      	bne.n	80087ba <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80087a8:	6819      	ldr	r1, [r3, #0]
 80087aa:	f021 0110 	bic.w	r1, r1, #16
 80087ae:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80087b0:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 80087b2:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80087b6:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        if(hdma->XferCpltCallback != NULL)
 80087ba:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80087bc:	e7cc      	b.n	8008758 <HAL_DMA_IRQHandler+0x10c>
}
 80087be:	b003      	add	sp, #12
 80087c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087c2:	bf00      	nop
 80087c4:	20000060 	.word	0x20000060

080087c8 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 80087c8:	6d40      	ldr	r0, [r0, #84]	@ 0x54
}
 80087ca:	4770      	bx	lr

080087cc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80087cc:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80087ce:	4604      	mov	r4, r0
 80087d0:	b380      	cbz	r0, 8008834 <HAL_DMA2D_Init+0x68>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80087d2:	f890 3051 	ldrb.w	r3, [r0, #81]	@ 0x51
 80087d6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80087da:	b91b      	cbnz	r3, 80087e4 <HAL_DMA2D_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80087dc:	f880 2050 	strb.w	r2, [r0, #80]	@ 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80087e0:	f7fc f992 	bl	8004b08 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80087e4:	2302      	movs	r3, #2

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80087e6:	6861      	ldr	r1, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80087e8:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80087ec:	6823      	ldr	r3, [r4, #0]
 80087ee:	681a      	ldr	r2, [r3, #0]
 80087f0:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 80087f4:	430a      	orrs	r2, r1

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80087f6:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80087f8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80087fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80087fc:	f022 0207 	bic.w	r2, r2, #7
 8008800:	430a      	orrs	r2, r1

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8008802:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8008804:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8008806:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008808:	f422 527f 	bic.w	r2, r2, #16320	@ 0x3fc0
 800880c:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8008810:	430a      	orrs	r2, r1
 8008812:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8008814:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8008816:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 800881a:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 800881e:	0552      	lsls	r2, r2, #21
 8008820:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8008824:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8008826:	430a      	orrs	r2, r1
 8008828:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800882a:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800882c:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800882e:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51

  return HAL_OK;
}
 8008832:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8008834:	2001      	movs	r0, #1
 8008836:	e7fc      	b.n	8008832 <HAL_DMA2D_Init+0x66>

08008838 <HAL_DMA2D_LineEventCallback>:
  * @brief  Transfer watermark callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
 8008838:	4770      	bx	lr

0800883a <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @brief  CLUT Transfer Complete callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
 800883a:	4770      	bx	lr

0800883c <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800883c:	6803      	ldr	r3, [r0, #0]
{
 800883e:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8008840:	685e      	ldr	r6, [r3, #4]
{
 8008842:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8008844:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8008846:	07f2      	lsls	r2, r6, #31
 8008848:	d514      	bpl.n	8008874 <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != 0U)
 800884a:	05e9      	lsls	r1, r5, #23
 800884c:	d512      	bpl.n	8008874 <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800884e:	681a      	ldr	r2, [r3, #0]
 8008850:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008854:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8008856:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 8008858:	f042 0201 	orr.w	r2, r2, #1
 800885c:	6542      	str	r2, [r0, #84]	@ 0x54
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800885e:	2201      	movs	r2, #1
 8008860:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008862:	2304      	movs	r3, #4
 8008864:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
      __HAL_UNLOCK(hdma2d);
 8008868:	2300      	movs	r3, #0
 800886a:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
      if (hdma2d->XferErrorCallback != NULL)
 800886e:	69c3      	ldr	r3, [r0, #28]
 8008870:	b103      	cbz	r3, 8008874 <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
 8008872:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8008874:	06b2      	lsls	r2, r6, #26
 8008876:	d516      	bpl.n	80088a6 <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 8008878:	04ab      	lsls	r3, r5, #18
 800887a:	d514      	bpl.n	80088a6 <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800887c:	6823      	ldr	r3, [r4, #0]
 800887e:	681a      	ldr	r2, [r3, #0]
 8008880:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008884:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8008886:	2220      	movs	r2, #32
 8008888:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800888a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800888c:	f043 0302 	orr.w	r3, r3, #2
 8008890:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008892:	2304      	movs	r3, #4
 8008894:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
      __HAL_UNLOCK(hdma2d);
 8008898:	2300      	movs	r3, #0
 800889a:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
      if (hdma2d->XferErrorCallback != NULL)
 800889e:	69e3      	ldr	r3, [r4, #28]
 80088a0:	b10b      	cbz	r3, 80088a6 <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
 80088a2:	4620      	mov	r0, r4
 80088a4:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80088a6:	0730      	lsls	r0, r6, #28
 80088a8:	d516      	bpl.n	80088d8 <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80088aa:	0529      	lsls	r1, r5, #20
 80088ac:	d514      	bpl.n	80088d8 <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80088ae:	6823      	ldr	r3, [r4, #0]
 80088b0:	681a      	ldr	r2, [r3, #0]
 80088b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80088b6:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80088b8:	2208      	movs	r2, #8
 80088ba:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80088bc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80088be:	f043 0304 	orr.w	r3, r3, #4
 80088c2:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80088c4:	2304      	movs	r3, #4
 80088c6:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
      __HAL_UNLOCK(hdma2d);
 80088ca:	2300      	movs	r3, #0
 80088cc:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
      if (hdma2d->XferErrorCallback != NULL)
 80088d0:	69e3      	ldr	r3, [r4, #28]
 80088d2:	b10b      	cbz	r3, 80088d8 <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
 80088d4:	4620      	mov	r0, r4
 80088d6:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80088d8:	0772      	lsls	r2, r6, #29
 80088da:	d50b      	bpl.n	80088f4 <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != 0U)
 80088dc:	056b      	lsls	r3, r5, #21
 80088de:	d509      	bpl.n	80088f4 <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80088e0:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
 80088e2:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80088e4:	681a      	ldr	r2, [r3, #0]
 80088e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80088ea:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80088ec:	2204      	movs	r2, #4
 80088ee:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 80088f0:	f7ff ffa2 	bl	8008838 <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80088f4:	07b0      	lsls	r0, r6, #30
 80088f6:	d514      	bpl.n	8008922 <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != 0U)
 80088f8:	05a9      	lsls	r1, r5, #22
 80088fa:	d512      	bpl.n	8008922 <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80088fc:	6823      	ldr	r3, [r4, #0]
 80088fe:	681a      	ldr	r2, [r3, #0]
 8008900:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8008904:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8008906:	2202      	movs	r2, #2
 8008908:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800890a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800890c:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800890e:	2301      	movs	r3, #1
 8008910:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
      __HAL_UNLOCK(hdma2d);
 8008914:	2300      	movs	r3, #0
 8008916:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
      if (hdma2d->XferCpltCallback != NULL)
 800891a:	69a3      	ldr	r3, [r4, #24]
 800891c:	b10b      	cbz	r3, 8008922 <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
 800891e:	4620      	mov	r0, r4
 8008920:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8008922:	06f2      	lsls	r2, r6, #27
 8008924:	d513      	bpl.n	800894e <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8008926:	04eb      	lsls	r3, r5, #19
 8008928:	d511      	bpl.n	800894e <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800892a:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800892c:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800892e:	681a      	ldr	r2, [r3, #0]
 8008930:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008934:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8008936:	2210      	movs	r2, #16
 8008938:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800893a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800893c:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800893e:	2301      	movs	r3, #1
 8008940:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
      __HAL_UNLOCK(hdma2d);
 8008944:	2300      	movs	r3, #0
 8008946:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800894a:	f7ff ff76 	bl	800883a <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 800894e:	bd70      	pop	{r4, r5, r6, pc}

08008950 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8008950:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8008952:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
{
 8008956:	4602      	mov	r2, r0
 8008958:	2002      	movs	r0, #2
  __HAL_LOCK(hdma2d);
 800895a:	2b01      	cmp	r3, #1
 800895c:	d031      	beq.n	80089c2 <HAL_DMA2D_ConfigLayer+0x72>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800895e:	f882 0051 	strb.w	r0, [r2, #81]	@ 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8008962:	2018      	movs	r0, #24
  __HAL_LOCK(hdma2d);
 8008964:	2301      	movs	r3, #1
 8008966:	4e21      	ldr	r6, [pc, #132]	@ (80089ec <HAL_DMA2D_ConfigLayer+0x9c>)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8008968:	fb00 2001 	mla	r0, r0, r1, r2
  __HAL_LOCK(hdma2d);
 800896c:	f882 3050 	strb.w	r3, [r2, #80]	@ 0x50
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8008970:	6b03      	ldr	r3, [r0, #48]	@ 0x30
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8008972:	e9d0 4509 	ldrd	r4, r5, [r0, #36]	@ 0x24
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8008976:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8008978:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800897c:	6b45      	ldr	r5, [r0, #52]	@ 0x34
 800897e:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8008980:	4323      	orrs	r3, r4
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008982:	3c09      	subs	r4, #9
 8008984:	2c01      	cmp	r4, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8008986:	ea43 5345 	orr.w	r3, r3, r5, lsl #21
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800898a:	bf96      	itet	ls
 800898c:	f000 407f 	andls.w	r0, r0, #4278190080	@ 0xff000000
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8008990:	ea43 6300 	orrhi.w	r3, r3, r0, lsl #24
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8008994:	4303      	orrls	r3, r0

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8008996:	6810      	ldr	r0, [r2, #0]
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8008998:	b9a1      	cbnz	r1, 80089c4 <HAL_DMA2D_ConfigLayer+0x74>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800899a:	6a41      	ldr	r1, [r0, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800899c:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800899e:	ea01 0106 	and.w	r1, r1, r6
 80089a2:	ea43 0301 	orr.w	r3, r3, r1
 80089a6:	6243      	str	r3, [r0, #36]	@ 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80089a8:	6a13      	ldr	r3, [r2, #32]
 80089aa:	6183      	str	r3, [r0, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80089ac:	d803      	bhi.n	80089b6 <HAL_DMA2D_ConfigLayer+0x66>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80089ae:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80089b0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80089b4:	6283      	str	r3, [r0, #40]	@ 0x28
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80089b6:	2301      	movs	r3, #1

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80089b8:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80089ba:	f882 3051 	strb.w	r3, [r2, #81]	@ 0x51
  __HAL_UNLOCK(hdma2d);
 80089be:	f882 0050 	strb.w	r0, [r2, #80]	@ 0x50

  return HAL_OK;
}
 80089c2:	bd70      	pop	{r4, r5, r6, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80089c4:	69c5      	ldr	r5, [r0, #28]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80089c6:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80089c8:	ea05 0506 	and.w	r5, r5, r6
 80089cc:	ea43 0305 	orr.w	r3, r3, r5
 80089d0:	61c3      	str	r3, [r0, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80089d2:	f04f 0318 	mov.w	r3, #24
 80089d6:	fb03 2101 	mla	r1, r3, r1, r2
 80089da:	6a0b      	ldr	r3, [r1, #32]
 80089dc:	6103      	str	r3, [r0, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80089de:	d8ea      	bhi.n	80089b6 <HAL_DMA2D_ConfigLayer+0x66>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80089e0:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 80089e2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80089e6:	6203      	str	r3, [r0, #32]
 80089e8:	e7e5      	b.n	80089b6 <HAL_DMA2D_ConfigLayer+0x66>
 80089ea:	bf00      	nop
 80089ec:	00ccfff0 	.word	0x00ccfff0

080089f0 <DSI_ShortWrite.constprop.0>:
  *                 This parameter can be any value of @arg DSI_DCS_Command or a
  *                 generic command code.
  * @param  Param2  DSC parameter or second generic parameter.
  * @retval HAL status
  */
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
 80089f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089f4:	4607      	mov	r7, r0
 80089f6:	460d      	mov	r5, r1
 80089f8:	4614      	mov	r4, r2
 80089fa:	461e      	mov	r6, r3
                                        uint32_t Param2)
{
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80089fc:	f7ff f9b4 	bl	8007d68 <HAL_GetTick>
 8008a00:	4680      	mov	r8, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8008a06:	07d2      	lsls	r2, r2, #31
 8008a08:	d50a      	bpl.n	8008a20 <DSI_ShortWrite.constprop.0+0x30>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8008a0a:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 8008a0e:	9a06      	ldr	r2, [sp, #24]

  return HAL_OK;
 8008a10:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8008a12:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008a16:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8008a1a:	66dc      	str	r4, [r3, #108]	@ 0x6c
}
 8008a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8008a20:	f7ff f9a2 	bl	8007d68 <HAL_GetTick>
 8008a24:	eba0 0008 	sub.w	r0, r0, r8
 8008a28:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8008a2c:	d9e9      	bls.n	8008a02 <DSI_ShortWrite.constprop.0+0x12>
      return HAL_TIMEOUT;
 8008a2e:	2003      	movs	r0, #3
 8008a30:	e7f4      	b.n	8008a1c <DSI_ShortWrite.constprop.0+0x2c>

08008a32 <HAL_DSI_ConfigErrorMonitor>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008a32:	7c03      	ldrb	r3, [r0, #16]
{
 8008a34:	4602      	mov	r2, r0
  __HAL_LOCK(hdsi);
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	d05b      	beq.n	8008af2 <HAL_DSI_ConfigErrorMonitor+0xc0>

  hdsi->Instance->IER[0U] = 0U;
 8008a3a:	6803      	ldr	r3, [r0, #0]
 8008a3c:	2000      	movs	r0, #0
 8008a3e:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8008a42:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8008a46:	07c8      	lsls	r0, r1, #31
  hdsi->ErrorMsk = ActiveErrors;
 8008a48:	6191      	str	r1, [r2, #24]
  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8008a4a:	d507      	bpl.n	8008a5c <HAL_DSI_ConfigErrorMonitor+0x2a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8008a4c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8008a50:	ea6f 4010 	mvn.w	r0, r0, lsr #16
 8008a54:	ea6f 4000 	mvn.w	r0, r0, lsl #16
 8008a58:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8008a5c:	0788      	lsls	r0, r1, #30
 8008a5e:	d505      	bpl.n	8008a6c <HAL_DSI_ConfigErrorMonitor+0x3a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8008a60:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8008a64:	f440 10f8 	orr.w	r0, r0, #2031616	@ 0x1f0000
 8008a68:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8008a6c:	0748      	lsls	r0, r1, #29
 8008a6e:	d505      	bpl.n	8008a7c <HAL_DSI_ConfigErrorMonitor+0x4a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8008a70:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8008a74:	f040 0001 	orr.w	r0, r0, #1
 8008a78:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8008a7c:	0708      	lsls	r0, r1, #28
 8008a7e:	d505      	bpl.n	8008a8c <HAL_DSI_ConfigErrorMonitor+0x5a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8008a80:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8008a84:	f040 0002 	orr.w	r0, r0, #2
 8008a88:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8008a8c:	06c8      	lsls	r0, r1, #27
 8008a8e:	d505      	bpl.n	8008a9c <HAL_DSI_ConfigErrorMonitor+0x6a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8008a90:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8008a94:	f040 000c 	orr.w	r0, r0, #12
 8008a98:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8008a9c:	0688      	lsls	r0, r1, #26
 8008a9e:	d505      	bpl.n	8008aac <HAL_DSI_ConfigErrorMonitor+0x7a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8008aa0:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8008aa4:	f040 0010 	orr.w	r0, r0, #16
 8008aa8:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8008aac:	0648      	lsls	r0, r1, #25
 8008aae:	d505      	bpl.n	8008abc <HAL_DSI_ConfigErrorMonitor+0x8a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8008ab0:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8008ab4:	f040 0020 	orr.w	r0, r0, #32
 8008ab8:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8008abc:	0608      	lsls	r0, r1, #24
 8008abe:	d505      	bpl.n	8008acc <HAL_DSI_ConfigErrorMonitor+0x9a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8008ac0:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8008ac4:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 8008ac8:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8008acc:	05c8      	lsls	r0, r1, #23
 8008ace:	d505      	bpl.n	8008adc <HAL_DSI_ConfigErrorMonitor+0xaa>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8008ad0:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8008ad4:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 8008ad8:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8008adc:	0589      	lsls	r1, r1, #22
 8008ade:	d505      	bpl.n	8008aec <HAL_DSI_ConfigErrorMonitor+0xba>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8008ae0:	f8d3 10c8 	ldr.w	r1, [r3, #200]	@ 0xc8
 8008ae4:	f441 51f8 	orr.w	r1, r1, #7936	@ 0x1f00
 8008ae8:	f8c3 10c8 	str.w	r1, [r3, #200]	@ 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8008aec:	2000      	movs	r0, #0
 8008aee:	7410      	strb	r0, [r2, #16]

  return HAL_OK;
 8008af0:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8008af2:	2002      	movs	r0, #2
}
 8008af4:	4770      	bx	lr
	...

08008af8 <HAL_DSI_Init>:
{
 8008af8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008afa:	460d      	mov	r5, r1
  if (hdsi == NULL)
 8008afc:	4604      	mov	r4, r0
 8008afe:	2800      	cmp	r0, #0
 8008b00:	f000 80a9 	beq.w	8008c56 <HAL_DSI_Init+0x15e>
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8008b04:	7c43      	ldrb	r3, [r0, #17]
 8008b06:	b90b      	cbnz	r3, 8008b0c <HAL_DSI_Init+0x14>
    HAL_DSI_MspInit(hdsi);
 8008b08:	f7fc f81e 	bl	8004b48 <HAL_DSI_MspInit>
  hdsi->State = HAL_DSI_STATE_BUSY;
 8008b0c:	2303      	movs	r3, #3
 8008b0e:	7463      	strb	r3, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 8008b10:	2300      	movs	r3, #0
 8008b12:	9300      	str	r3, [sp, #0]
 8008b14:	6823      	ldr	r3, [r4, #0]
 8008b16:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8008b1a:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8008b1e:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 8008b22:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8008b26:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008b2a:	9300      	str	r3, [sp, #0]
 8008b2c:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 8008b2e:	f7ff f91b 	bl	8007d68 <HAL_GetTick>
 8008b32:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8008b34:	6822      	ldr	r2, [r4, #0]
 8008b36:	f8d2 340c 	ldr.w	r3, [r2, #1036]	@ 0x40c
 8008b3a:	04d9      	lsls	r1, r3, #19
 8008b3c:	d57a      	bpl.n	8008c34 <HAL_DSI_Init+0x13c>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8008b3e:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 8008b42:	f423 335e 	bic.w	r3, r3, #227328	@ 0x37800
 8008b46:	f423 73fe 	bic.w	r3, r3, #508	@ 0x1fc
 8008b4a:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8008b4e:	f8d2 1430 	ldr.w	r1, [r2, #1072]	@ 0x430
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8008b52:	e9d5 0300 	ldrd	r0, r3, [r5]
 8008b56:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8008b58:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8008b5c:	68a8      	ldr	r0, [r5, #8]
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8008b5e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  HAL_Delay(1);
 8008b62:	2001      	movs	r0, #1
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8008b64:	430b      	orrs	r3, r1
 8008b66:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	9301      	str	r3, [sp, #4]
 8008b6e:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 8008b72:	f043 0301 	orr.w	r3, r3, #1
 8008b76:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
 8008b7a:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 8008b7e:	f003 0301 	and.w	r3, r3, #1
 8008b82:	9301      	str	r3, [sp, #4]
 8008b84:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(1);
 8008b86:	f7ff f8f5 	bl	8007d74 <HAL_Delay>
  tickstart = HAL_GetTick();
 8008b8a:	f7ff f8ed 	bl	8007d68 <HAL_GetTick>
 8008b8e:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8008b90:	6823      	ldr	r3, [r4, #0]
 8008b92:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 8008b96:	05d2      	lsls	r2, r2, #23
 8008b98:	d556      	bpl.n	8008c48 <HAL_DSI_Init+0x150>
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8008b9a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8008b9e:	f246 10a8 	movw	r0, #25000	@ 0x61a8
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8008ba2:	6861      	ldr	r1, [r4, #4]
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8008ba4:	f042 0206 	orr.w	r2, r2, #6
 8008ba8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8008bac:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8008bb0:	f022 0203 	bic.w	r2, r2, #3
 8008bb4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8008bb8:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8008bbc:	430a      	orrs	r2, r1
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8008bbe:	68e1      	ldr	r1, [r4, #12]
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8008bc0:	f042 0201 	orr.w	r2, r2, #1
 8008bc4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8008bc8:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8008bcc:	f022 0203 	bic.w	r2, r2, #3
 8008bd0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8008bd4:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8008bd8:	430a      	orrs	r2, r1
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8008bda:	68a1      	ldr	r1, [r4, #8]
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8008bdc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8008be0:	689a      	ldr	r2, [r3, #8]
 8008be2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8008be6:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8008be8:	689a      	ldr	r2, [r3, #8]
 8008bea:	430a      	orrs	r2, r1
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8008bec:	491b      	ldr	r1, [pc, #108]	@ (8008c5c <HAL_DSI_Init+0x164>)
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8008bee:	609a      	str	r2, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8008bf0:	686a      	ldr	r2, [r5, #4]
 8008bf2:	2a01      	cmp	r2, #1
 8008bf4:	bf38      	it	cc
 8008bf6:	2201      	movcc	r2, #1
 8008bf8:	434a      	muls	r2, r1
 8008bfa:	68a9      	ldr	r1, [r5, #8]
 8008bfc:	f001 0103 	and.w	r1, r1, #3
 8008c00:	408a      	lsls	r2, r1
 8008c02:	6829      	ldr	r1, [r5, #0]
 8008c04:	4341      	muls	r1, r0
  hdsi->Instance->IER[0U] = 0U;
 8008c06:	2000      	movs	r0, #0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8008c08:	fbb2 f2f1 	udiv	r2, r2, r1
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8008c0c:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 8008c10:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8008c14:	f8c3 1418 	str.w	r1, [r3, #1048]	@ 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8008c18:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 8008c1c:	430a      	orrs	r2, r1
 8008c1e:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
  hdsi->Instance->IER[0U] = 0U;
 8008c22:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8008c26:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  hdsi->State = HAL_DSI_STATE_READY;
 8008c2a:	2301      	movs	r3, #1
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8008c2c:	6160      	str	r0, [r4, #20]
  hdsi->ErrorMsk = 0U;
 8008c2e:	61a0      	str	r0, [r4, #24]
  hdsi->State = HAL_DSI_STATE_READY;
 8008c30:	7463      	strb	r3, [r4, #17]
  return HAL_OK;
 8008c32:	e007      	b.n	8008c44 <HAL_DSI_Init+0x14c>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8008c34:	f7ff f898 	bl	8007d68 <HAL_GetTick>
 8008c38:	1b80      	subs	r0, r0, r6
 8008c3a:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8008c3e:	f67f af79 	bls.w	8008b34 <HAL_DSI_Init+0x3c>
      return HAL_TIMEOUT;
 8008c42:	2003      	movs	r0, #3
}
 8008c44:	b002      	add	sp, #8
 8008c46:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8008c48:	f7ff f88e 	bl	8007d68 <HAL_GetTick>
 8008c4c:	1b80      	subs	r0, r0, r6
 8008c4e:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8008c52:	d99d      	bls.n	8008b90 <HAL_DSI_Init+0x98>
 8008c54:	e7f5      	b.n	8008c42 <HAL_DSI_Init+0x14a>
    return HAL_ERROR;
 8008c56:	2001      	movs	r0, #1
 8008c58:	e7f4      	b.n	8008c44 <HAL_DSI_Init+0x14c>
 8008c5a:	bf00      	nop
 8008c5c:	003d0900 	.word	0x003d0900

08008c60 <HAL_DSI_ErrorCallback>:
  * @brief  Operation Error DSI callback.
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
 8008c60:	4770      	bx	lr

08008c62 <HAL_DSI_IRQHandler>:
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8008c62:	6803      	ldr	r3, [r0, #0]
 8008c64:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 8008c68:	07d1      	lsls	r1, r2, #31
{
 8008c6a:	b510      	push	{r4, lr}
 8008c6c:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8008c6e:	d508      	bpl.n	8008c82 <HAL_DSI_IRQHandler+0x20>
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8008c70:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8008c74:	07d2      	lsls	r2, r2, #31
 8008c76:	d504      	bpl.n	8008c82 <HAL_DSI_IRQHandler+0x20>
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8008c78:	2201      	movs	r2, #1
 8008c7a:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
      HAL_DSI_TearingEffectCallback(hdsi);
 8008c7e:	f7f8 f9e3 	bl	8001048 <HAL_DSI_TearingEffectCallback>
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8008c82:	6823      	ldr	r3, [r4, #0]
 8008c84:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 8008c88:	0791      	lsls	r1, r2, #30
 8008c8a:	d509      	bpl.n	8008ca0 <HAL_DSI_IRQHandler+0x3e>
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8008c8c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8008c90:	0792      	lsls	r2, r2, #30
 8008c92:	d505      	bpl.n	8008ca0 <HAL_DSI_IRQHandler+0x3e>
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8008c94:	2202      	movs	r2, #2
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8008c96:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8008c98:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8008c9c:	f7f8 fa08 	bl	80010b0 <HAL_DSI_EndOfRefreshCallback>
  if (hdsi->ErrorMsk != 0U)
 8008ca0:	69a3      	ldr	r3, [r4, #24]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d04e      	beq.n	8008d44 <HAL_DSI_IRQHandler+0xe2>
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8008ca6:	6821      	ldr	r1, [r4, #0]
 8008ca8:	f8d1 20bc 	ldr.w	r2, [r1, #188]	@ 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8008cac:	f8d1 30c4 	ldr.w	r3, [r1, #196]	@ 0xc4
 8008cb0:	401a      	ands	r2, r3
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8008cb2:	f8d1 30c0 	ldr.w	r3, [r1, #192]	@ 0xc0
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8008cb6:	f8d1 10c8 	ldr.w	r1, [r1, #200]	@ 0xc8
 8008cba:	400b      	ands	r3, r1
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8008cbc:	b291      	uxth	r1, r2
 8008cbe:	b119      	cbz	r1, 8008cc8 <HAL_DSI_IRQHandler+0x66>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8008cc0:	6961      	ldr	r1, [r4, #20]
 8008cc2:	f041 0101 	orr.w	r1, r1, #1
 8008cc6:	6161      	str	r1, [r4, #20]
    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8008cc8:	f412 1ff8 	tst.w	r2, #2031616	@ 0x1f0000
 8008ccc:	d003      	beq.n	8008cd6 <HAL_DSI_IRQHandler+0x74>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8008cce:	6962      	ldr	r2, [r4, #20]
 8008cd0:	f042 0202 	orr.w	r2, r2, #2
 8008cd4:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8008cd6:	07d8      	lsls	r0, r3, #31
 8008cd8:	d503      	bpl.n	8008ce2 <HAL_DSI_IRQHandler+0x80>
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8008cda:	6962      	ldr	r2, [r4, #20]
 8008cdc:	f042 0204 	orr.w	r2, r2, #4
 8008ce0:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8008ce2:	0799      	lsls	r1, r3, #30
 8008ce4:	d503      	bpl.n	8008cee <HAL_DSI_IRQHandler+0x8c>
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8008ce6:	6962      	ldr	r2, [r4, #20]
 8008ce8:	f042 0208 	orr.w	r2, r2, #8
 8008cec:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8008cee:	f013 0f0c 	tst.w	r3, #12
 8008cf2:	d003      	beq.n	8008cfc <HAL_DSI_IRQHandler+0x9a>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8008cf4:	6962      	ldr	r2, [r4, #20]
 8008cf6:	f042 0210 	orr.w	r2, r2, #16
 8008cfa:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8008cfc:	06da      	lsls	r2, r3, #27
 8008cfe:	d503      	bpl.n	8008d08 <HAL_DSI_IRQHandler+0xa6>
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8008d00:	6962      	ldr	r2, [r4, #20]
 8008d02:	f042 0220 	orr.w	r2, r2, #32
 8008d06:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8008d08:	0698      	lsls	r0, r3, #26
 8008d0a:	d503      	bpl.n	8008d14 <HAL_DSI_IRQHandler+0xb2>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8008d0c:	6962      	ldr	r2, [r4, #20]
 8008d0e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008d12:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8008d14:	0659      	lsls	r1, r3, #25
 8008d16:	d503      	bpl.n	8008d20 <HAL_DSI_IRQHandler+0xbe>
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8008d18:	6962      	ldr	r2, [r4, #20]
 8008d1a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008d1e:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8008d20:	061a      	lsls	r2, r3, #24
 8008d22:	d503      	bpl.n	8008d2c <HAL_DSI_IRQHandler+0xca>
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8008d24:	6962      	ldr	r2, [r4, #20]
 8008d26:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008d2a:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8008d2c:	f413 5ff8 	tst.w	r3, #7936	@ 0x1f00
 8008d30:	d003      	beq.n	8008d3a <HAL_DSI_IRQHandler+0xd8>
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8008d32:	6963      	ldr	r3, [r4, #20]
 8008d34:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008d38:	6163      	str	r3, [r4, #20]
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8008d3a:	6963      	ldr	r3, [r4, #20]
 8008d3c:	b113      	cbz	r3, 8008d44 <HAL_DSI_IRQHandler+0xe2>
      HAL_DSI_ErrorCallback(hdsi);
 8008d3e:	4620      	mov	r0, r4
 8008d40:	f7ff ff8e 	bl	8008c60 <HAL_DSI_ErrorCallback>
}
 8008d44:	bd10      	pop	{r4, pc}

08008d46 <HAL_DSI_SetGenericVCID>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008d46:	7c02      	ldrb	r2, [r0, #16]
{
 8008d48:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8008d4a:	2a01      	cmp	r2, #1
 8008d4c:	d00a      	beq.n	8008d64 <HAL_DSI_SetGenericVCID+0x1e>

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8008d4e:	6802      	ldr	r2, [r0, #0]
 8008d50:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 8008d52:	f020 0003 	bic.w	r0, r0, #3
 8008d56:	6310      	str	r0, [r2, #48]	@ 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8008d58:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 8008d5a:	4301      	orrs	r1, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8008d5c:	2000      	movs	r0, #0
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8008d5e:	6311      	str	r1, [r2, #48]	@ 0x30
  __HAL_UNLOCK(hdsi);
 8008d60:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 8008d62:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8008d64:	2002      	movs	r0, #2
}
 8008d66:	4770      	bx	lr

08008d68 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8008d68:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008d6a:	7c03      	ldrb	r3, [r0, #16]
{
 8008d6c:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8008d6e:	2b01      	cmp	r3, #1
 8008d70:	d069      	beq.n	8008e46 <HAL_DSI_ConfigAdaptedCommandMode+0xde>
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8008d72:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8008d74:	6808      	ldr	r0, [r1, #0]
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8008d76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008d78:	f042 0201 	orr.w	r2, r2, #1
 8008d7c:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8008d7e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8008d82:	f022 0201 	bic.w	r2, r2, #1
 8008d86:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8008d8a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8008d8e:	f042 0201 	orr.w	r2, r2, #1
 8008d92:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8008d96:	68da      	ldr	r2, [r3, #12]
 8008d98:	f022 0203 	bic.w	r2, r2, #3
 8008d9c:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8008d9e:	68da      	ldr	r2, [r3, #12]
 8008da0:	4302      	orrs	r2, r0
 8008da2:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8008da4:	695a      	ldr	r2, [r3, #20]
 8008da6:	f022 0207 	bic.w	r2, r2, #7
 8008daa:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8008dac:	6958      	ldr	r0, [r3, #20]
 8008dae:	e9d1 5206 	ldrd	r5, r2, [r1, #24]
 8008db2:	432a      	orrs	r2, r5
 8008db4:	694d      	ldr	r5, [r1, #20]
 8008db6:	432a      	orrs	r2, r5
 8008db8:	4302      	orrs	r2, r0

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8008dba:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8008dbc:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8008dbe:	691a      	ldr	r2, [r3, #16]
 8008dc0:	f022 020f 	bic.w	r2, r2, #15
 8008dc4:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8008dc6:	691a      	ldr	r2, [r3, #16]
 8008dc8:	4302      	orrs	r2, r0
 8008dca:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8008dcc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8008dd0:	f022 020e 	bic.w	r2, r2, #14
 8008dd4:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8008dd8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8008ddc:	ea42 0240 	orr.w	r2, r2, r0, lsl #1

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8008de0:	6888      	ldr	r0, [r1, #8]
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8008de2:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8008de6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008de8:	0c12      	lsrs	r2, r2, #16
 8008dea:	0412      	lsls	r2, r2, #16
 8008dec:	665a      	str	r2, [r3, #100]	@ 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8008dee:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008df0:	4302      	orrs	r2, r0
 8008df2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8008df4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8008df8:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8008dfc:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8008e00:	f8d3 0400 	ldr.w	r0, [r3, #1024]	@ 0x400
 8008e04:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
 8008e08:	432a      	orrs	r2, r5
 8008e0a:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 8008e0c:	432a      	orrs	r2, r5
 8008e0e:	6a0d      	ldr	r5, [r1, #32]
                            CmdCfg->VSyncPol);

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8008e10:	6a89      	ldr	r1, [r1, #40]	@ 0x28
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8008e12:	432a      	orrs	r2, r5
 8008e14:	4302      	orrs	r2, r0

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8008e16:	2000      	movs	r0, #0
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8008e18:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8008e1c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8008e1e:	f022 0201 	bic.w	r2, r2, #1
 8008e22:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8008e24:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8008e26:	430a      	orrs	r2, r1
 8008e28:	669a      	str	r2, [r3, #104]	@ 0x68
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8008e2a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8008e2e:	f042 0201 	orr.w	r2, r2, #1
 8008e32:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8008e36:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8008e3a:	f042 0202 	orr.w	r2, r2, #2
 8008e3e:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  __HAL_UNLOCK(hdsi);
 8008e42:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 8008e44:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8008e46:	2002      	movs	r0, #2
 8008e48:	e7fc      	b.n	8008e44 <HAL_DSI_ConfigAdaptedCommandMode+0xdc>
	...

08008e4c <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8008e4c:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008e4e:	7c03      	ldrb	r3, [r0, #16]
{
 8008e50:	4602      	mov	r2, r0
  __HAL_LOCK(hdsi);
 8008e52:	2b01      	cmp	r3, #1
 8008e54:	d029      	beq.n	8008eaa <HAL_DSI_ConfigCommand+0x5e>
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8008e56:	6800      	ldr	r0, [r0, #0]
 8008e58:	4b15      	ldr	r3, [pc, #84]	@ (8008eb0 <HAL_DSI_ConfigCommand+0x64>)
 8008e5a:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 8008e5c:	4023      	ands	r3, r4
 8008e5e:	6683      	str	r3, [r0, #104]	@ 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8008e60:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 8008e62:	e9d1 3500 	ldrd	r3, r5, [r1]
 8008e66:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteOneP | \
 8008e68:	688d      	ldr	r5, [r1, #8]
 8008e6a:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteTwoP | \
 8008e6c:	68cd      	ldr	r5, [r1, #12]
 8008e6e:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadNoP   | \
 8008e70:	690d      	ldr	r5, [r1, #16]
 8008e72:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadOneP  | \
 8008e74:	694d      	ldr	r5, [r1, #20]
 8008e76:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadTwoP  | \
 8008e78:	698d      	ldr	r5, [r1, #24]
 8008e7a:	432b      	orrs	r3, r5
                           LPCmd->LPGenLongWrite      | \
 8008e7c:	69cd      	ldr	r5, [r1, #28]
 8008e7e:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteNoP  | \
 8008e80:	6a0d      	ldr	r5, [r1, #32]
 8008e82:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteOneP | \
 8008e84:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 8008e86:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortReadNoP   | \
 8008e88:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8008e8a:	432b      	orrs	r3, r5
                           LPCmd->LPDcsLongWrite      | \
 8008e8c:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
                           LPCmd->LPMaxReadPacket);

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8008e8e:	6b09      	ldr	r1, [r1, #48]	@ 0x30
                           LPCmd->LPDcsLongWrite      | \
 8008e90:	432b      	orrs	r3, r5
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8008e92:	4323      	orrs	r3, r4
 8008e94:	6683      	str	r3, [r0, #104]	@ 0x68
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8008e96:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8008e98:	f023 0302 	bic.w	r3, r3, #2
 8008e9c:	6683      	str	r3, [r0, #104]	@ 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8008e9e:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8008ea0:	430b      	orrs	r3, r1
 8008ea2:	6683      	str	r3, [r0, #104]	@ 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8008ea4:	2000      	movs	r0, #0
 8008ea6:	7410      	strb	r0, [r2, #16]

  return HAL_OK;
}
 8008ea8:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8008eaa:	2002      	movs	r0, #2
 8008eac:	e7fc      	b.n	8008ea8 <HAL_DSI_ConfigCommand+0x5c>
 8008eae:	bf00      	nop
 8008eb0:	fef080ff 	.word	0xfef080ff

08008eb4 <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008eb4:	7c02      	ldrb	r2, [r0, #16]
{
 8008eb6:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8008eb8:	2a01      	cmp	r2, #1
 8008eba:	d00a      	beq.n	8008ed2 <HAL_DSI_ConfigFlowControl+0x1e>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8008ebc:	6802      	ldr	r2, [r0, #0]
 8008ebe:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8008ec0:	f020 001f 	bic.w	r0, r0, #31
 8008ec4:	62d0      	str	r0, [r2, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8008ec6:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8008ec8:	4301      	orrs	r1, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8008eca:	2000      	movs	r0, #0
  hdsi->Instance->PCR |= FlowControl;
 8008ecc:	62d1      	str	r1, [r2, #44]	@ 0x2c
  __HAL_UNLOCK(hdsi);
 8008ece:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 8008ed0:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8008ed2:	2002      	movs	r0, #2
}
 8008ed4:	4770      	bx	lr

08008ed6 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8008ed6:	b530      	push	{r4, r5, lr}
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008ed8:	7c03      	ldrb	r3, [r0, #16]
{
 8008eda:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	d034      	beq.n	8008f4a <HAL_DSI_ConfigPhyTimer+0x74>

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8008ee0:	e9d1 0300 	ldrd	r0, r3, [r1]
 8008ee4:	4298      	cmp	r0, r3
 8008ee6:	bf38      	it	cc
 8008ee8:	4618      	movcc	r0, r3
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8008eea:	6823      	ldr	r3, [r4, #0]
 8008eec:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8008ef0:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 8008ef4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8008ef8:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8008efc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8008f00:	4302      	orrs	r2, r0
 8008f02:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8008f06:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8008f0a:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 8008f0e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8008f12:	f8d3 009c 	ldr.w	r0, [r3, #156]	@ 0x9c
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8008f16:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8008f1a:	0612      	lsls	r2, r2, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8008f1c:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8008f20:	690d      	ldr	r5, [r1, #16]

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8008f22:	6949      	ldr	r1, [r1, #20]
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8008f24:	432a      	orrs	r2, r5
 8008f26:	4302      	orrs	r2, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8008f28:	2000      	movs	r0, #0
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8008f2a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8008f2e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8008f32:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8008f36:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8008f3a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8008f3e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8008f42:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  __HAL_UNLOCK(hdsi);
 8008f46:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 8008f48:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8008f4a:	2002      	movs	r0, #2
 8008f4c:	e7fc      	b.n	8008f48 <HAL_DSI_ConfigPhyTimer+0x72>
	...

08008f50 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8008f50:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008f52:	7c03      	ldrb	r3, [r0, #16]
{
 8008f54:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8008f56:	2b01      	cmp	r3, #1
 8008f58:	d05b      	beq.n	8009012 <HAL_DSI_ConfigHostTimeouts+0xc2>

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8008f5a:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8008f5c:	6808      	ldr	r0, [r1, #0]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8008f5e:	689a      	ldr	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8008f60:	688d      	ldr	r5, [r1, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8008f62:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8008f66:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8008f68:	689a      	ldr	r2, [r3, #8]
 8008f6a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8008f6e:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8008f70:	609a      	str	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8008f72:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8008f74:	b292      	uxth	r2, r2
 8008f76:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8008f78:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8008f7a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8008f7e:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8008f80:	4a25      	ldr	r2, [pc, #148]	@ (8009018 <HAL_DSI_ConfigHostTimeouts+0xc8>)
 8008f82:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8008f84:	4010      	ands	r0, r2
 8008f86:	6798      	str	r0, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8008f88:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8008f8a:	4328      	orrs	r0, r5

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8008f8c:	68cd      	ldr	r5, [r1, #12]
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8008f8e:	6798      	str	r0, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8008f90:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8008f92:	4010      	ands	r0, r2
 8008f94:	67d8      	str	r0, [r3, #124]	@ 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8008f96:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8008f98:	4328      	orrs	r0, r5

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8008f9a:	690d      	ldr	r5, [r1, #16]
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8008f9c:	67d8      	str	r0, [r3, #124]	@ 0x7c
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8008f9e:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8008fa2:	4010      	ands	r0, r2
 8008fa4:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8008fa8:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8008fac:	4328      	orrs	r0, r5

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8008fae:	694d      	ldr	r5, [r1, #20]
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8008fb0:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8008fb4:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8008fb8:	4010      	ands	r0, r2
 8008fba:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8008fbe:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8008fc2:	4328      	orrs	r0, r5
 8008fc4:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8008fc8:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8008fcc:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
 8008fd0:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8008fd4:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8008fd8:	698d      	ldr	r5, [r1, #24]
 8008fda:	4328      	orrs	r0, r5

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8008fdc:	69cd      	ldr	r5, [r1, #28]

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8008fde:	6a09      	ldr	r1, [r1, #32]
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8008fe0:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8008fe4:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 8008fe8:	4010      	ands	r0, r2
 8008fea:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8008fee:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 8008ff2:	4328      	orrs	r0, r5
 8008ff4:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8008ff8:	f8d3 008c 	ldr.w	r0, [r3, #140]	@ 0x8c
 8008ffc:	4002      	ands	r2, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8008ffe:	2000      	movs	r0, #0
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8009000:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8009004:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8009008:	430a      	orrs	r2, r1
 800900a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  __HAL_UNLOCK(hdsi);
 800900e:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 8009010:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8009012:	2002      	movs	r0, #2
 8009014:	e7fc      	b.n	8009010 <HAL_DSI_ConfigHostTimeouts+0xc0>
 8009016:	bf00      	nop
 8009018:	ffff0000 	.word	0xffff0000

0800901c <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800901c:	7c03      	ldrb	r3, [r0, #16]
{
 800901e:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 8009020:	2b01      	cmp	r3, #1
 8009022:	d01c      	beq.n	800905e <HAL_DSI_Start+0x42>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8009024:	6802      	ldr	r2, [r0, #0]
 8009026:	2300      	movs	r3, #0
 8009028:	9300      	str	r3, [sp, #0]
 800902a:	6851      	ldr	r1, [r2, #4]
 800902c:	f041 0101 	orr.w	r1, r1, #1
 8009030:	6051      	str	r1, [r2, #4]
 8009032:	6851      	ldr	r1, [r2, #4]
 8009034:	f001 0101 	and.w	r1, r1, #1
 8009038:	9100      	str	r1, [sp, #0]
 800903a:	9900      	ldr	r1, [sp, #0]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800903c:	9301      	str	r3, [sp, #4]
 800903e:	f8d2 1404 	ldr.w	r1, [r2, #1028]	@ 0x404
 8009042:	f041 0108 	orr.w	r1, r1, #8
 8009046:	f8c2 1404 	str.w	r1, [r2, #1028]	@ 0x404
 800904a:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800904e:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8009050:	4618      	mov	r0, r3
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8009052:	f002 0208 	and.w	r2, r2, #8
 8009056:	9201      	str	r2, [sp, #4]
 8009058:	9a01      	ldr	r2, [sp, #4]
}
 800905a:	b002      	add	sp, #8
 800905c:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800905e:	2002      	movs	r0, #2
 8009060:	e7fb      	b.n	800905a <HAL_DSI_Start+0x3e>

08009062 <HAL_DSI_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Refresh(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8009062:	7c02      	ldrb	r2, [r0, #16]
{
 8009064:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8009066:	2a01      	cmp	r2, #1
 8009068:	d009      	beq.n	800907e <HAL_DSI_Refresh+0x1c>

  /* Update the display */
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 800906a:	6801      	ldr	r1, [r0, #0]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800906c:	2000      	movs	r0, #0
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 800906e:	f8d1 2404 	ldr.w	r2, [r1, #1028]	@ 0x404
 8009072:	f042 0204 	orr.w	r2, r2, #4
 8009076:	f8c1 2404 	str.w	r2, [r1, #1028]	@ 0x404
  __HAL_UNLOCK(hdsi);
 800907a:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 800907c:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800907e:	2002      	movs	r0, #2
}
 8009080:	4770      	bx	lr

08009082 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8009082:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8009084:	7c05      	ldrb	r5, [r0, #16]
{
 8009086:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8009088:	2d01      	cmp	r5, #1
 800908a:	d009      	beq.n	80090a0 <HAL_DSI_ShortWrite+0x1e>
 800908c:	2501      	movs	r5, #1
 800908e:	7405      	strb	r5, [r0, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8009090:	9d06      	ldr	r5, [sp, #24]
 8009092:	9500      	str	r5, [sp, #0]
 8009094:	f7ff fcac 	bl	80089f0 <DSI_ShortWrite.constprop.0>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009098:	2300      	movs	r3, #0
 800909a:	7423      	strb	r3, [r4, #16]

  return status;
}
 800909c:	b003      	add	sp, #12
 800909e:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 80090a0:	2002      	movs	r0, #2
 80090a2:	e7fb      	b.n	800909c <HAL_DSI_ShortWrite+0x1a>

080090a4 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 80090a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090a8:	461c      	mov	r4, r3
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 80090aa:	7c03      	ldrb	r3, [r0, #16]
{
 80090ac:	4606      	mov	r6, r0
 80090ae:	460f      	mov	r7, r1
  __HAL_LOCK(hdsi);
 80090b0:	2b01      	cmp	r3, #1
{
 80090b2:	4615      	mov	r5, r2
 80090b4:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	@ 0x28
  __HAL_LOCK(hdsi);
 80090b8:	d052      	beq.n	8009160 <HAL_DSI_LongWrite+0xbc>
 80090ba:	2301      	movs	r3, #1
 80090bc:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 80090be:	f7fe fe53 	bl	8007d68 <HAL_GetTick>
 80090c2:	4683      	mov	fp, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80090c4:	6832      	ldr	r2, [r6, #0]
 80090c6:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 80090c8:	f013 0a01 	ands.w	sl, r3, #1
 80090cc:	d019      	beq.n	8009102 <HAL_DSI_LongWrite+0x5e>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 80090ce:	2c03      	cmp	r4, #3
 80090d0:	4620      	mov	r0, r4

  for (count = 0U; count < nbBytes; count++)
 80090d2:	f04f 0300 	mov.w	r3, #0
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 80090d6:	bf28      	it	cs
 80090d8:	2003      	movcs	r0, #3
  for (count = 0U; count < nbBytes; count++)
 80090da:	4283      	cmp	r3, r0
 80090dc:	d11d      	bne.n	800911a <HAL_DSI_LongWrite+0x76>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
 80090de:	1ae0      	subs	r0, r4, r3
  pparams += nbBytes;
 80090e0:	4443      	add	r3, r8
  hdsi->Instance->GPDR = fifoword;
 80090e2:	f8c2 9070 	str.w	r9, [r2, #112]	@ 0x70
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 80090e6:	bb10      	cbnz	r0, 800912e <HAL_DSI_LongWrite+0x8a>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 80090e8:	3401      	adds	r4, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80090ea:	ea45 1587 	orr.w	r5, r5, r7, lsl #6
 80090ee:	0223      	lsls	r3, r4, #8
 80090f0:	0224      	lsls	r4, r4, #8
 80090f2:	b29b      	uxth	r3, r3
 80090f4:	f404 047f 	and.w	r4, r4, #16711680	@ 0xff0000
 80090f8:	431d      	orrs	r5, r3
 80090fa:	4325      	orrs	r5, r4
 80090fc:	66d5      	str	r5, [r2, #108]	@ 0x6c
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80090fe:	7430      	strb	r0, [r6, #16]

  return HAL_OK;
 8009100:	e009      	b.n	8009116 <HAL_DSI_LongWrite+0x72>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8009102:	f7fe fe31 	bl	8007d68 <HAL_GetTick>
 8009106:	eba0 000b 	sub.w	r0, r0, fp
 800910a:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800910e:	d9d9      	bls.n	80090c4 <HAL_DSI_LongWrite+0x20>
      return HAL_TIMEOUT;
 8009110:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 8009112:	f886 a010 	strb.w	sl, [r6, #16]
}
 8009116:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800911a:	f818 1003 	ldrb.w	r1, [r8, r3]
 800911e:	3301      	adds	r3, #1
 8009120:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
 8009124:	fa01 f10c 	lsl.w	r1, r1, ip
 8009128:	ea49 0901 	orr.w	r9, r9, r1
  for (count = 0U; count < nbBytes; count++)
 800912c:	e7d5      	b.n	80090da <HAL_DSI_LongWrite+0x36>
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800912e:	2804      	cmp	r0, #4
    fifoword = 0U;
 8009130:	f04f 0c00 	mov.w	ip, #0
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8009134:	4686      	mov	lr, r0
    for (count = 0U; count < nbBytes; count++)
 8009136:	4661      	mov	r1, ip
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8009138:	bf28      	it	cs
 800913a:	f04f 0e04 	movcs.w	lr, #4
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800913e:	f813 8001 	ldrb.w	r8, [r3, r1]
 8009142:	ea4f 09c1 	mov.w	r9, r1, lsl #3
    for (count = 0U; count < nbBytes; count++)
 8009146:	3101      	adds	r1, #1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8009148:	fa08 f809 	lsl.w	r8, r8, r9
    for (count = 0U; count < nbBytes; count++)
 800914c:	458e      	cmp	lr, r1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800914e:	ea4c 0c08 	orr.w	ip, ip, r8
    for (count = 0U; count < nbBytes; count++)
 8009152:	d1f4      	bne.n	800913e <HAL_DSI_LongWrite+0x9a>
    uicounter -= nbBytes;
 8009154:	eba0 000e 	sub.w	r0, r0, lr
    pparams += nbBytes;
 8009158:	4473      	add	r3, lr
    hdsi->Instance->GPDR = fifoword;
 800915a:	f8c2 c070 	str.w	ip, [r2, #112]	@ 0x70
    pparams += nbBytes;
 800915e:	e7c2      	b.n	80090e6 <HAL_DSI_LongWrite+0x42>
  __HAL_LOCK(hdsi);
 8009160:	2002      	movs	r0, #2
 8009162:	e7d8      	b.n	8009116 <HAL_DSI_LongWrite+0x72>

08009164 <HAL_DSI_SetLowPowerRXFilter>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8009164:	7c02      	ldrb	r2, [r0, #16]
{
 8009166:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8009168:	2a01      	cmp	r2, #1
 800916a:	d00f      	beq.n	800918c <HAL_DSI_SetLowPowerRXFilter+0x28>

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 800916c:	6802      	ldr	r2, [r0, #0]
 800916e:	f8d2 041c 	ldr.w	r0, [r2, #1052]	@ 0x41c
 8009172:	f020 60c0 	bic.w	r0, r0, #100663296	@ 0x6000000
 8009176:	f8c2 041c 	str.w	r0, [r2, #1052]	@ 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 800917a:	f8d2 041c 	ldr.w	r0, [r2, #1052]	@ 0x41c
 800917e:	ea40 6141 	orr.w	r1, r0, r1, lsl #25

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009182:	2000      	movs	r0, #0
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8009184:	f8c2 141c 	str.w	r1, [r2, #1052]	@ 0x41c
  __HAL_UNLOCK(hdsi);
 8009188:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 800918a:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800918c:	2002      	movs	r0, #2
}
 800918e:	4770      	bx	lr

08009190 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009190:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8009194:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009196:	f8df 91bc 	ldr.w	r9, [pc, #444]	@ 8009354 <HAL_GPIO_Init+0x1c4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800919a:	4a6c      	ldr	r2, [pc, #432]	@ (800934c <HAL_GPIO_Init+0x1bc>)
    ioposition = ((uint32_t)0x01) << position;
 800919c:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800919e:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 80091a0:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80091a2:	ea04 0605 	and.w	r6, r4, r5
    if(iocurrent == ioposition)
 80091a6:	43ac      	bics	r4, r5
 80091a8:	f040 80b7 	bne.w	800931a <HAL_GPIO_Init+0x18a>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80091ac:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80091ae:	2703      	movs	r7, #3
 80091b0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80091b4:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80091b8:	fa07 fc0e 	lsl.w	ip, r7, lr
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80091bc:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80091be:	ea6f 0c0c 	mvn.w	ip, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80091c2:	2f01      	cmp	r7, #1
 80091c4:	d834      	bhi.n	8009230 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 80091c6:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80091c8:	ea07 080c 	and.w	r8, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2));
 80091cc:	68cf      	ldr	r7, [r1, #12]
 80091ce:	fa07 f70e 	lsl.w	r7, r7, lr
 80091d2:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OSPEEDR = temp;
 80091d6:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80091d8:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80091da:	ea27 0806 	bic.w	r8, r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80091de:	f3c5 1700 	ubfx	r7, r5, #4, #1
 80091e2:	409f      	lsls	r7, r3
 80091e4:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 80091e8:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80091ea:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80091ec:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80091ee:	ea07 080c 	and.w	r8, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80091f2:	688f      	ldr	r7, [r1, #8]
 80091f4:	fa07 f70e 	lsl.w	r7, r7, lr
 80091f8:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->PUPDR = temp;
 80091fc:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80091fe:	d119      	bne.n	8009234 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3];
 8009200:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8009204:	f003 0a07 	and.w	sl, r3, #7
 8009208:	f04f 0b0f 	mov.w	fp, #15
 800920c:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8009210:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8009214:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8009218:	fa0b fb0a 	lsl.w	fp, fp, sl
 800921c:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8009220:	690f      	ldr	r7, [r1, #16]
 8009222:	fa07 f70a 	lsl.w	r7, r7, sl
 8009226:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3] = temp;
 800922a:	f8c8 7020 	str.w	r7, [r8, #32]
 800922e:	e001      	b.n	8009234 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009230:	2c03      	cmp	r4, #3
 8009232:	d1da      	bne.n	80091ea <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8009234:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8009236:	fa04 f40e 	lsl.w	r4, r4, lr
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800923a:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800923e:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8009242:	ea44 0407 	orr.w	r4, r4, r7
      GPIOx->MODER = temp;
 8009246:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8009248:	d067      	beq.n	800931a <HAL_GPIO_Init+0x18a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800924a:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 800924e:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009252:	f003 0c03 	and.w	ip, r3, #3
 8009256:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800925a:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 800925e:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009262:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009266:	f8c9 4044 	str.w	r4, [r9, #68]	@ 0x44
 800926a:	f507 379c 	add.w	r7, r7, #79872	@ 0x13800
 800926e:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009272:	fa0e fe0c 	lsl.w	lr, lr, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009276:	f404 4480 	and.w	r4, r4, #16384	@ 0x4000
 800927a:	9401      	str	r4, [sp, #4]
 800927c:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 800927e:	68bc      	ldr	r4, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009280:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8009284:	4c32      	ldr	r4, [pc, #200]	@ (8009350 <HAL_GPIO_Init+0x1c0>)
 8009286:	42a0      	cmp	r0, r4
 8009288:	d04e      	beq.n	8009328 <HAL_GPIO_Init+0x198>
 800928a:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800928e:	42a0      	cmp	r0, r4
 8009290:	d04c      	beq.n	800932c <HAL_GPIO_Init+0x19c>
 8009292:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8009296:	42a0      	cmp	r0, r4
 8009298:	d04a      	beq.n	8009330 <HAL_GPIO_Init+0x1a0>
 800929a:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800929e:	42a0      	cmp	r0, r4
 80092a0:	d048      	beq.n	8009334 <HAL_GPIO_Init+0x1a4>
 80092a2:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80092a6:	42a0      	cmp	r0, r4
 80092a8:	d046      	beq.n	8009338 <HAL_GPIO_Init+0x1a8>
 80092aa:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80092ae:	42a0      	cmp	r0, r4
 80092b0:	d044      	beq.n	800933c <HAL_GPIO_Init+0x1ac>
 80092b2:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80092b6:	42a0      	cmp	r0, r4
 80092b8:	d042      	beq.n	8009340 <HAL_GPIO_Init+0x1b0>
 80092ba:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80092be:	42a0      	cmp	r0, r4
 80092c0:	d040      	beq.n	8009344 <HAL_GPIO_Init+0x1b4>
 80092c2:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80092c6:	42a0      	cmp	r0, r4
 80092c8:	d03e      	beq.n	8009348 <HAL_GPIO_Init+0x1b8>
 80092ca:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80092ce:	42a0      	cmp	r0, r4
 80092d0:	bf14      	ite	ne
 80092d2:	240a      	movne	r4, #10
 80092d4:	2409      	moveq	r4, #9
 80092d6:	fa04 f40c 	lsl.w	r4, r4, ip
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80092da:	f415 1f80 	tst.w	r5, #1048576	@ 0x100000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80092de:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 80092e2:	60bc      	str	r4, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 80092e4:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->RTSR;
 80092e8:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80092ea:	bf0c      	ite	eq
 80092ec:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 80092ee:	4334      	orrne	r4, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80092f0:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
        EXTI->RTSR = temp;
 80092f4:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 80092f6:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 80092f8:	bf0c      	ite	eq
 80092fa:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 80092fc:	4334      	orrne	r4, r6
        }
        EXTI->FTSR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80092fe:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
        EXTI->FTSR = temp;
 8009302:	60d4      	str	r4, [r2, #12]
        temp = EXTI->EMR;
 8009304:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8009306:	bf0c      	ite	eq
 8009308:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 800930a:	4334      	orrne	r4, r6
        EXTI->EMR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800930c:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 800930e:	6054      	str	r4, [r2, #4]
        temp = EXTI->IMR;
 8009310:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8009312:	bf54      	ite	pl
 8009314:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8009316:	4334      	orrmi	r4, r6
        }
        EXTI->IMR = temp;
 8009318:	6014      	str	r4, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800931a:	3301      	adds	r3, #1
 800931c:	2b10      	cmp	r3, #16
 800931e:	f47f af3d 	bne.w	800919c <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8009322:	b003      	add	sp, #12
 8009324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8009328:	2400      	movs	r4, #0
 800932a:	e7d4      	b.n	80092d6 <HAL_GPIO_Init+0x146>
 800932c:	2401      	movs	r4, #1
 800932e:	e7d2      	b.n	80092d6 <HAL_GPIO_Init+0x146>
 8009330:	2402      	movs	r4, #2
 8009332:	e7d0      	b.n	80092d6 <HAL_GPIO_Init+0x146>
 8009334:	2403      	movs	r4, #3
 8009336:	e7ce      	b.n	80092d6 <HAL_GPIO_Init+0x146>
 8009338:	2404      	movs	r4, #4
 800933a:	e7cc      	b.n	80092d6 <HAL_GPIO_Init+0x146>
 800933c:	2405      	movs	r4, #5
 800933e:	e7ca      	b.n	80092d6 <HAL_GPIO_Init+0x146>
 8009340:	2406      	movs	r4, #6
 8009342:	e7c8      	b.n	80092d6 <HAL_GPIO_Init+0x146>
 8009344:	2407      	movs	r4, #7
 8009346:	e7c6      	b.n	80092d6 <HAL_GPIO_Init+0x146>
 8009348:	2408      	movs	r4, #8
 800934a:	e7c4      	b.n	80092d6 <HAL_GPIO_Init+0x146>
 800934c:	40013c00 	.word	0x40013c00
 8009350:	40020000 	.word	0x40020000
 8009354:	40023800 	.word	0x40023800

08009358 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800935c:	2200      	movs	r2, #0
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800935e:	f04f 0a01 	mov.w	sl, #1

    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009362:	f04f 080f 	mov.w	r8, #15
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8009366:	f04f 0b03 	mov.w	fp, #3
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800936a:	4c46      	ldr	r4, [pc, #280]	@ (8009484 <HAL_GPIO_DeInit+0x12c>)
    ioposition = ((uint32_t)0x01) << position;
 800936c:	fa0a fc02 	lsl.w	ip, sl, r2
    if(iocurrent == ioposition)
 8009370:	ea3c 0301 	bics.w	r3, ip, r1
    iocurrent = (GPIO_Pin) & ioposition;
 8009374:	ea0c 0601 	and.w	r6, ip, r1
    if(iocurrent == ioposition)
 8009378:	d16c      	bne.n	8009454 <HAL_GPIO_DeInit+0xfc>
      tmp = SYSCFG->EXTICR[position >> 2];
 800937a:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800937e:	f002 0703 	and.w	r7, r2, #3
 8009382:	f105 4580 	add.w	r5, r5, #1073741824	@ 0x40000000
 8009386:	00bf      	lsls	r7, r7, #2
 8009388:	f505 359c 	add.w	r5, r5, #79872	@ 0x13800
 800938c:	fa08 f907 	lsl.w	r9, r8, r7
      tmp = SYSCFG->EXTICR[position >> 2];
 8009390:	68ab      	ldr	r3, [r5, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009392:	ea09 0e03 	and.w	lr, r9, r3
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8009396:	4b3c      	ldr	r3, [pc, #240]	@ (8009488 <HAL_GPIO_DeInit+0x130>)
 8009398:	4298      	cmp	r0, r3
 800939a:	d060      	beq.n	800945e <HAL_GPIO_DeInit+0x106>
 800939c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80093a0:	4298      	cmp	r0, r3
 80093a2:	d05e      	beq.n	8009462 <HAL_GPIO_DeInit+0x10a>
 80093a4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80093a8:	4298      	cmp	r0, r3
 80093aa:	d05c      	beq.n	8009466 <HAL_GPIO_DeInit+0x10e>
 80093ac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80093b0:	4298      	cmp	r0, r3
 80093b2:	d05a      	beq.n	800946a <HAL_GPIO_DeInit+0x112>
 80093b4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80093b8:	4298      	cmp	r0, r3
 80093ba:	d058      	beq.n	800946e <HAL_GPIO_DeInit+0x116>
 80093bc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80093c0:	4298      	cmp	r0, r3
 80093c2:	d056      	beq.n	8009472 <HAL_GPIO_DeInit+0x11a>
 80093c4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80093c8:	4298      	cmp	r0, r3
 80093ca:	d054      	beq.n	8009476 <HAL_GPIO_DeInit+0x11e>
 80093cc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80093d0:	4298      	cmp	r0, r3
 80093d2:	d052      	beq.n	800947a <HAL_GPIO_DeInit+0x122>
 80093d4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80093d8:	4298      	cmp	r0, r3
 80093da:	d050      	beq.n	800947e <HAL_GPIO_DeInit+0x126>
 80093dc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80093e0:	4298      	cmp	r0, r3
 80093e2:	bf0c      	ite	eq
 80093e4:	2309      	moveq	r3, #9
 80093e6:	230a      	movne	r3, #10
 80093e8:	40bb      	lsls	r3, r7
 80093ea:	4573      	cmp	r3, lr
 80093ec:	d113      	bne.n	8009416 <HAL_GPIO_DeInit+0xbe>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80093ee:	6823      	ldr	r3, [r4, #0]
 80093f0:	ea23 0306 	bic.w	r3, r3, r6
 80093f4:	6023      	str	r3, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80093f6:	6863      	ldr	r3, [r4, #4]
 80093f8:	ea23 0306 	bic.w	r3, r3, r6
 80093fc:	6063      	str	r3, [r4, #4]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80093fe:	68e3      	ldr	r3, [r4, #12]
 8009400:	ea23 0306 	bic.w	r3, r3, r6
 8009404:	60e3      	str	r3, [r4, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8009406:	68a3      	ldr	r3, [r4, #8]
 8009408:	ea23 0306 	bic.w	r3, r3, r6
 800940c:	60a3      	str	r3, [r4, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800940e:	68ab      	ldr	r3, [r5, #8]
 8009410:	ea23 0309 	bic.w	r3, r3, r9
 8009414:	60ab      	str	r3, [r5, #8]
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8009416:	0053      	lsls	r3, r2, #1
 8009418:	6805      	ldr	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800941a:	08d6      	lsrs	r6, r2, #3
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800941c:	fa0b f303 	lsl.w	r3, fp, r3
 8009420:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8009424:	ea25 0503 	bic.w	r5, r5, r3
 8009428:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800942a:	f002 0507 	and.w	r5, r2, #7
 800942e:	6a37      	ldr	r7, [r6, #32]
 8009430:	00ad      	lsls	r5, r5, #2
 8009432:	fa08 f505 	lsl.w	r5, r8, r5
 8009436:	ea27 0705 	bic.w	r7, r7, r5
 800943a:	6237      	str	r7, [r6, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800943c:	68c5      	ldr	r5, [r0, #12]
 800943e:	ea25 0503 	bic.w	r5, r5, r3
 8009442:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009444:	6845      	ldr	r5, [r0, #4]
 8009446:	ea25 050c 	bic.w	r5, r5, ip
 800944a:	6045      	str	r5, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800944c:	6885      	ldr	r5, [r0, #8]
 800944e:	ea25 0303 	bic.w	r3, r5, r3
 8009452:	6083      	str	r3, [r0, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8009454:	3201      	adds	r2, #1
 8009456:	2a10      	cmp	r2, #16
 8009458:	d188      	bne.n	800936c <HAL_GPIO_DeInit+0x14>
    }
  }
}
 800945a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800945e:	2300      	movs	r3, #0
 8009460:	e7c2      	b.n	80093e8 <HAL_GPIO_DeInit+0x90>
 8009462:	2301      	movs	r3, #1
 8009464:	e7c0      	b.n	80093e8 <HAL_GPIO_DeInit+0x90>
 8009466:	2302      	movs	r3, #2
 8009468:	e7be      	b.n	80093e8 <HAL_GPIO_DeInit+0x90>
 800946a:	2303      	movs	r3, #3
 800946c:	e7bc      	b.n	80093e8 <HAL_GPIO_DeInit+0x90>
 800946e:	2304      	movs	r3, #4
 8009470:	e7ba      	b.n	80093e8 <HAL_GPIO_DeInit+0x90>
 8009472:	2305      	movs	r3, #5
 8009474:	e7b8      	b.n	80093e8 <HAL_GPIO_DeInit+0x90>
 8009476:	2306      	movs	r3, #6
 8009478:	e7b6      	b.n	80093e8 <HAL_GPIO_DeInit+0x90>
 800947a:	2307      	movs	r3, #7
 800947c:	e7b4      	b.n	80093e8 <HAL_GPIO_DeInit+0x90>
 800947e:	2308      	movs	r3, #8
 8009480:	e7b2      	b.n	80093e8 <HAL_GPIO_DeInit+0x90>
 8009482:	bf00      	nop
 8009484:	40013c00 	.word	0x40013c00
 8009488:	40020000 	.word	0x40020000

0800948c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800948c:	6903      	ldr	r3, [r0, #16]
 800948e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8009490:	bf14      	ite	ne
 8009492:	2001      	movne	r0, #1
 8009494:	2000      	moveq	r0, #0
 8009496:	4770      	bx	lr

08009498 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009498:	b10a      	cbz	r2, 800949e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800949a:	6181      	str	r1, [r0, #24]
  }
}
 800949c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800949e:	0409      	lsls	r1, r1, #16
 80094a0:	e7fb      	b.n	800949a <HAL_GPIO_WritePin+0x2>

080094a2 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80094a2:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80094a4:	ea01 0203 	and.w	r2, r1, r3
 80094a8:	ea21 0103 	bic.w	r1, r1, r3
 80094ac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80094b0:	6181      	str	r1, [r0, #24]
}
 80094b2:	4770      	bx	lr

080094b4 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80094b4:	6803      	ldr	r3, [r0, #0]
 80094b6:	699a      	ldr	r2, [r3, #24]
 80094b8:	0791      	lsls	r1, r2, #30
 80094ba:	d501      	bpl.n	80094c0 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 80094bc:	2200      	movs	r2, #0
 80094be:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80094c0:	699a      	ldr	r2, [r3, #24]
 80094c2:	07d2      	lsls	r2, r2, #31
 80094c4:	d403      	bmi.n	80094ce <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80094c6:	699a      	ldr	r2, [r3, #24]
 80094c8:	f042 0201 	orr.w	r2, r2, #1
 80094cc:	619a      	str	r2, [r3, #24]
  }
}
 80094ce:	4770      	bx	lr

080094d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80094d0:	b530      	push	{r4, r5, lr}
 80094d2:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80094d4:	f3c1 0109 	ubfx	r1, r1, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80094d8:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80094da:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 80094dc:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80094de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 80094e2:	4a05      	ldr	r2, [pc, #20]	@ (80094f8 <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80094e4:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 80094e6:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80094ea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 80094ee:	ea20 0002 	bic.w	r0, r0, r2
 80094f2:	4303      	orrs	r3, r0
 80094f4:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80094f6:	bd30      	pop	{r4, r5, pc}
 80094f8:	03ff63ff 	.word	0x03ff63ff

080094fc <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 80094fc:	6803      	ldr	r3, [r0, #0]
{
 80094fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 8009502:	699c      	ldr	r4, [r3, #24]
{
 8009504:	4605      	mov	r5, r0
 8009506:	460f      	mov	r7, r1
 8009508:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800950a:	f014 0410 	ands.w	r4, r4, #16
 800950e:	d06f      	beq.n	80095f0 <I2C_IsErrorOccurred+0xf4>
  uint32_t error_code = 0;
 8009510:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009512:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 8009514:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009516:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009518:	682b      	ldr	r3, [r5, #0]
 800951a:	699a      	ldr	r2, [r3, #24]
 800951c:	0690      	lsls	r0, r2, #26
 800951e:	d461      	bmi.n	80095e4 <I2C_IsErrorOccurred+0xe8>
 8009520:	f1b8 0f00 	cmp.w	r8, #0
 8009524:	d035      	beq.n	8009592 <I2C_IsErrorOccurred+0x96>
    error_code |= HAL_I2C_ERROR_AF;
 8009526:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 800952a:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 800952c:	682e      	ldr	r6, [r5, #0]
 800952e:	69b3      	ldr	r3, [r6, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009530:	05d9      	lsls	r1, r3, #23
 8009532:	d505      	bpl.n	8009540 <I2C_IsErrorOccurred+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009534:	f44f 7280 	mov.w	r2, #256	@ 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 8009538:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 800953c:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800953e:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009540:	055a      	lsls	r2, r3, #21
 8009542:	d505      	bpl.n	8009550 <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009544:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8009548:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 800954c:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800954e:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009550:	059b      	lsls	r3, r3, #22
 8009552:	d54f      	bpl.n	80095f4 <I2C_IsErrorOccurred+0xf8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009554:	f44f 7300 	mov.w	r3, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8009558:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800955c:	61f3      	str	r3, [r6, #28]
    I2C_Flush_TXDR(hi2c);
 800955e:	4628      	mov	r0, r5
 8009560:	f7ff ffa8 	bl	80094b4 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8009564:	6873      	ldr	r3, [r6, #4]
    __HAL_UNLOCK(hi2c);
 8009566:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8009568:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 800956c:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8009570:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8009574:	f023 0301 	bic.w	r3, r3, #1
 8009578:	6073      	str	r3, [r6, #4]
    hi2c->ErrorCode |= error_code;
 800957a:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 800957c:	4323      	orrs	r3, r4
 800957e:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009580:	2320      	movs	r3, #32
 8009582:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009586:	2300      	movs	r3, #0
 8009588:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 800958c:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
 8009590:	e032      	b.n	80095f8 <I2C_IsErrorOccurred+0xfc>
      if (Timeout != HAL_MAX_DELAY)
 8009592:	1c7a      	adds	r2, r7, #1
 8009594:	d0c1      	beq.n	800951a <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009596:	f7fe fbe7 	bl	8007d68 <HAL_GetTick>
 800959a:	1b80      	subs	r0, r0, r6
 800959c:	42b8      	cmp	r0, r7
 800959e:	d801      	bhi.n	80095a4 <I2C_IsErrorOccurred+0xa8>
 80095a0:	2f00      	cmp	r7, #0
 80095a2:	d1b9      	bne.n	8009518 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80095a4:	682b      	ldr	r3, [r5, #0]
 80095a6:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 80095a8:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80095ac:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 80095ae:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80095b0:	0400      	lsls	r0, r0, #16
 80095b2:	d50a      	bpl.n	80095ca <I2C_IsErrorOccurred+0xce>
 80095b4:	0449      	lsls	r1, r1, #17
 80095b6:	d408      	bmi.n	80095ca <I2C_IsErrorOccurred+0xce>
              (tmp1 != I2C_CR2_STOP) && \
 80095b8:	2a20      	cmp	r2, #32
 80095ba:	d006      	beq.n	80095ca <I2C_IsErrorOccurred+0xce>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80095bc:	685a      	ldr	r2, [r3, #4]
 80095be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80095c2:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 80095c4:	f7fe fbd0 	bl	8007d68 <HAL_GetTick>
 80095c8:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80095ca:	682b      	ldr	r3, [r5, #0]
 80095cc:	699b      	ldr	r3, [r3, #24]
 80095ce:	069b      	lsls	r3, r3, #26
 80095d0:	d4a2      	bmi.n	8009518 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80095d2:	f7fe fbc9 	bl	8007d68 <HAL_GetTick>
 80095d6:	1b80      	subs	r0, r0, r6
 80095d8:	2819      	cmp	r0, #25
 80095da:	d9f6      	bls.n	80095ca <I2C_IsErrorOccurred+0xce>
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80095dc:	2420      	movs	r4, #32
              status = HAL_ERROR;
 80095de:	f04f 0801 	mov.w	r8, #1
 80095e2:	e799      	b.n	8009518 <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 80095e4:	f1b8 0f00 	cmp.w	r8, #0
 80095e8:	d19d      	bne.n	8009526 <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80095ea:	2220      	movs	r2, #32
 80095ec:	61da      	str	r2, [r3, #28]
 80095ee:	e79a      	b.n	8009526 <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 80095f0:	4620      	mov	r0, r4
 80095f2:	e79b      	b.n	800952c <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 80095f4:	2800      	cmp	r0, #0
 80095f6:	d1b2      	bne.n	800955e <I2C_IsErrorOccurred+0x62>
}
 80095f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080095fc <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80095fc:	b570      	push	{r4, r5, r6, lr}
 80095fe:	4604      	mov	r4, r0
 8009600:	460d      	mov	r5, r1
 8009602:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009604:	6823      	ldr	r3, [r4, #0]
 8009606:	699b      	ldr	r3, [r3, #24]
 8009608:	079b      	lsls	r3, r3, #30
 800960a:	d501      	bpl.n	8009610 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 800960c:	2000      	movs	r0, #0
 800960e:	e01b      	b.n	8009648 <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009610:	4632      	mov	r2, r6
 8009612:	4629      	mov	r1, r5
 8009614:	4620      	mov	r0, r4
 8009616:	f7ff ff71 	bl	80094fc <I2C_IsErrorOccurred>
 800961a:	b9a0      	cbnz	r0, 8009646 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 800961c:	1c6a      	adds	r2, r5, #1
 800961e:	d0f1      	beq.n	8009604 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009620:	f7fe fba2 	bl	8007d68 <HAL_GetTick>
 8009624:	1b80      	subs	r0, r0, r6
 8009626:	42a8      	cmp	r0, r5
 8009628:	d801      	bhi.n	800962e <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800962a:	2d00      	cmp	r5, #0
 800962c:	d1ea      	bne.n	8009604 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800962e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8009630:	f043 0320 	orr.w	r3, r3, #32
 8009634:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009636:	2320      	movs	r3, #32
 8009638:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800963c:	2300      	movs	r3, #0
 800963e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 8009642:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8009646:	2001      	movs	r0, #1
}
 8009648:	bd70      	pop	{r4, r5, r6, pc}

0800964a <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800964a:	b570      	push	{r4, r5, r6, lr}
 800964c:	4604      	mov	r4, r0
 800964e:	460d      	mov	r5, r1
 8009650:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009652:	6823      	ldr	r3, [r4, #0]
 8009654:	699b      	ldr	r3, [r3, #24]
 8009656:	069b      	lsls	r3, r3, #26
 8009658:	d501      	bpl.n	800965e <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 800965a:	2000      	movs	r0, #0
 800965c:	e019      	b.n	8009692 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800965e:	4632      	mov	r2, r6
 8009660:	4629      	mov	r1, r5
 8009662:	4620      	mov	r0, r4
 8009664:	f7ff ff4a 	bl	80094fc <I2C_IsErrorOccurred>
 8009668:	b990      	cbnz	r0, 8009690 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800966a:	f7fe fb7d 	bl	8007d68 <HAL_GetTick>
 800966e:	1b80      	subs	r0, r0, r6
 8009670:	42a8      	cmp	r0, r5
 8009672:	d801      	bhi.n	8009678 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8009674:	2d00      	cmp	r5, #0
 8009676:	d1ec      	bne.n	8009652 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009678:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800967a:	f043 0320 	orr.w	r3, r3, #32
 800967e:	6463      	str	r3, [r4, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8009680:	2320      	movs	r3, #32
 8009682:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009686:	2300      	movs	r3, #0
 8009688:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800968c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8009690:	2001      	movs	r0, #1
}
 8009692:	bd70      	pop	{r4, r5, r6, pc}

08009694 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8009694:	b570      	push	{r4, r5, r6, lr}
 8009696:	4604      	mov	r4, r0
 8009698:	460d      	mov	r5, r1
 800969a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800969c:	6823      	ldr	r3, [r4, #0]
 800969e:	699b      	ldr	r3, [r3, #24]
 80096a0:	075b      	lsls	r3, r3, #29
 80096a2:	d40e      	bmi.n	80096c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80096a4:	4632      	mov	r2, r6
 80096a6:	4629      	mov	r1, r5
 80096a8:	4620      	mov	r0, r4
 80096aa:	f7ff ff27 	bl	80094fc <I2C_IsErrorOccurred>
 80096ae:	bb28      	cbnz	r0, 80096fc <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80096b0:	6823      	ldr	r3, [r4, #0]
 80096b2:	699a      	ldr	r2, [r3, #24]
 80096b4:	0691      	lsls	r1, r2, #26
 80096b6:	d523      	bpl.n	8009700 <I2C_WaitOnRXNEFlagUntilTimeout+0x6c>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80096b8:	699a      	ldr	r2, [r3, #24]
 80096ba:	0752      	lsls	r2, r2, #29
 80096bc:	d503      	bpl.n	80096c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
 80096be:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 80096c0:	b10a      	cbz	r2, 80096c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
        return HAL_OK;
 80096c2:	2000      	movs	r0, #0
}
 80096c4:	bd70      	pop	{r4, r5, r6, pc}
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80096c6:	699a      	ldr	r2, [r3, #24]
 80096c8:	f012 0210 	ands.w	r2, r2, #16
 80096cc:	d002      	beq.n	80096d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x40>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80096ce:	2210      	movs	r2, #16
 80096d0:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80096d2:	2204      	movs	r2, #4
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80096d4:	2120      	movs	r1, #32
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80096d6:	6462      	str	r2, [r4, #68]	@ 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80096d8:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 80096da:	685a      	ldr	r2, [r3, #4]
 80096dc:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 80096e0:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 80096e4:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 80096e8:	f022 0201 	bic.w	r2, r2, #1
 80096ec:	605a      	str	r2, [r3, #4]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80096ee:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 80096f0:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80096f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80096f8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 80096fc:	2001      	movs	r0, #1
 80096fe:	e7e1      	b.n	80096c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009700:	f7fe fb32 	bl	8007d68 <HAL_GetTick>
 8009704:	1b80      	subs	r0, r0, r6
 8009706:	42a8      	cmp	r0, r5
 8009708:	d801      	bhi.n	800970e <I2C_WaitOnRXNEFlagUntilTimeout+0x7a>
 800970a:	2d00      	cmp	r5, #0
 800970c:	d1c6      	bne.n	800969c <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800970e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8009710:	f043 0320 	orr.w	r3, r3, #32
 8009714:	6463      	str	r3, [r4, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8009716:	2320      	movs	r3, #32
 8009718:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      __HAL_UNLOCK(hi2c);
 800971c:	2300      	movs	r3, #0
 800971e:	e7eb      	b.n	80096f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x64>

08009720 <I2C_WaitOnFlagUntilTimeout>:
{
 8009720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009724:	9f06      	ldr	r7, [sp, #24]
 8009726:	4604      	mov	r4, r0
 8009728:	4688      	mov	r8, r1
 800972a:	4616      	mov	r6, r2
 800972c:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800972e:	6822      	ldr	r2, [r4, #0]
 8009730:	6993      	ldr	r3, [r2, #24]
 8009732:	ea38 0303 	bics.w	r3, r8, r3
 8009736:	bf0c      	ite	eq
 8009738:	2301      	moveq	r3, #1
 800973a:	2300      	movne	r3, #0
 800973c:	42b3      	cmp	r3, r6
 800973e:	d001      	beq.n	8009744 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8009740:	2000      	movs	r0, #0
 8009742:	e015      	b.n	8009770 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8009744:	1c6b      	adds	r3, r5, #1
 8009746:	d0f3      	beq.n	8009730 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009748:	f7fe fb0e 	bl	8007d68 <HAL_GetTick>
 800974c:	1bc0      	subs	r0, r0, r7
 800974e:	42a8      	cmp	r0, r5
 8009750:	d801      	bhi.n	8009756 <I2C_WaitOnFlagUntilTimeout+0x36>
 8009752:	2d00      	cmp	r5, #0
 8009754:	d1eb      	bne.n	800972e <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009756:	6c63      	ldr	r3, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8009758:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800975a:	f043 0320 	orr.w	r3, r3, #32
 800975e:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009760:	2320      	movs	r3, #32
 8009762:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009766:	2300      	movs	r3, #0
 8009768:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 800976c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 8009770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009774 <HAL_I2C_Init>:
{
 8009774:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8009776:	4604      	mov	r4, r0
 8009778:	2800      	cmp	r0, #0
 800977a:	d04a      	beq.n	8009812 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800977c:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8009780:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8009784:	b91b      	cbnz	r3, 800978e <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8009786:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 800978a:	f7fb fa15 	bl	8004bb8 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800978e:	2324      	movs	r3, #36	@ 0x24
 8009790:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8009794:	6823      	ldr	r3, [r4, #0]
 8009796:	681a      	ldr	r2, [r3, #0]
 8009798:	f022 0201 	bic.w	r2, r2, #1
 800979c:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800979e:	6862      	ldr	r2, [r4, #4]
 80097a0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80097a4:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80097a6:	689a      	ldr	r2, [r3, #8]
 80097a8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80097ac:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80097ae:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80097b2:	2901      	cmp	r1, #1
 80097b4:	d124      	bne.n	8009800 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80097b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80097ba:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80097bc:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80097be:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80097c0:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 80097c4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80097c8:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80097ca:	68da      	ldr	r2, [r3, #12]
 80097cc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80097d0:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80097d2:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 80097d6:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 80097d8:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80097da:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80097de:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80097e0:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 80097e4:	430a      	orrs	r2, r1
 80097e6:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80097e8:	681a      	ldr	r2, [r3, #0]
 80097ea:	f042 0201 	orr.w	r2, r2, #1
 80097ee:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80097f0:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80097f2:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80097f4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80097f8:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80097fa:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 80097fe:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009800:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009804:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009806:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009808:	d1d8      	bne.n	80097bc <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800980a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800980e:	605a      	str	r2, [r3, #4]
 8009810:	e7d4      	b.n	80097bc <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8009812:	2001      	movs	r0, #1
 8009814:	e7f3      	b.n	80097fe <HAL_I2C_Init+0x8a>

08009816 <HAL_I2C_DeInit>:
{
 8009816:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8009818:	4604      	mov	r4, r0
 800981a:	b198      	cbz	r0, 8009844 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 800981c:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800981e:	2324      	movs	r3, #36	@ 0x24
 8009820:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8009824:	6813      	ldr	r3, [r2, #0]
 8009826:	f023 0301 	bic.w	r3, r3, #1
 800982a:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800982c:	f7fb fa58 	bl	8004ce0 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009830:	2000      	movs	r0, #0
 8009832:	6460      	str	r0, [r4, #68]	@ 0x44
  __HAL_UNLOCK(hi2c);
 8009834:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8009838:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800983c:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800983e:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 8009842:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8009844:	2001      	movs	r0, #1
 8009846:	e7fc      	b.n	8009842 <HAL_I2C_DeInit+0x2c>

08009848 <HAL_I2C_Master_Transmit>:
{
 8009848:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800984c:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800984e:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 8009852:	4604      	mov	r4, r0
 8009854:	460e      	mov	r6, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009856:	2b20      	cmp	r3, #32
{
 8009858:	4691      	mov	r9, r2
 800985a:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800985c:	f040 8086 	bne.w	800996c <HAL_I2C_Master_Transmit+0x124>
    __HAL_LOCK(hi2c);
 8009860:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8009864:	2b01      	cmp	r3, #1
 8009866:	f000 8081 	beq.w	800996c <HAL_I2C_Master_Transmit+0x124>
 800986a:	f04f 0a01 	mov.w	sl, #1
 800986e:	f880 a040 	strb.w	sl, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8009872:	f7fe fa79 	bl	8007d68 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009876:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8009878:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800987a:	9000      	str	r0, [sp, #0]
 800987c:	4652      	mov	r2, sl
 800987e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009882:	4620      	mov	r0, r4
 8009884:	f7ff ff4c 	bl	8009720 <I2C_WaitOnFlagUntilTimeout>
 8009888:	b118      	cbz	r0, 8009892 <HAL_I2C_Master_Transmit+0x4a>
      return HAL_ERROR;
 800988a:	2001      	movs	r0, #1
}
 800988c:	b002      	add	sp, #8
 800988e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009892:	2321      	movs	r3, #33	@ 0x21
    hi2c->pBuffPtr  = pData;
 8009894:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
    hi2c->XferISR   = NULL;
 8009898:	6360      	str	r0, [r4, #52]	@ 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800989a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800989e:	2310      	movs	r3, #16
 80098a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80098a4:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->XferCount = Size;
 80098a6:	f8a4 802a 	strh.w	r8, [r4, #42]	@ 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80098aa:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80098ac:	b29b      	uxth	r3, r3
 80098ae:	2bff      	cmp	r3, #255	@ 0xff
 80098b0:	4b2f      	ldr	r3, [pc, #188]	@ (8009970 <HAL_I2C_Master_Transmit+0x128>)
 80098b2:	d926      	bls.n	8009902 <HAL_I2C_Master_Transmit+0xba>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80098b4:	22ff      	movs	r2, #255	@ 0xff
 80098b6:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80098b8:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80098ba:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80098be:	4631      	mov	r1, r6
 80098c0:	4620      	mov	r0, r4
 80098c2:	f7ff fe05 	bl	80094d0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80098c6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80098c8:	462a      	mov	r2, r5
 80098ca:	4639      	mov	r1, r7
 80098cc:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 80098ce:	b29b      	uxth	r3, r3
 80098d0:	b9fb      	cbnz	r3, 8009912 <HAL_I2C_Master_Transmit+0xca>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80098d2:	f7ff feba 	bl	800964a <I2C_WaitOnSTOPFlagUntilTimeout>
 80098d6:	2800      	cmp	r0, #0
 80098d8:	d1d7      	bne.n	800988a <HAL_I2C_Master_Transmit+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80098da:	6823      	ldr	r3, [r4, #0]
 80098dc:	2120      	movs	r1, #32
 80098de:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80098e0:	685a      	ldr	r2, [r3, #4]
 80098e2:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 80098e6:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 80098ea:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 80098ee:	f022 0201 	bic.w	r2, r2, #1
 80098f2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80098f4:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 80098f8:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80098fc:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 8009900:	e7c4      	b.n	800988c <HAL_I2C_Master_Transmit+0x44>
      hi2c->XferSize = hi2c->XferCount;
 8009902:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8009904:	b292      	uxth	r2, r2
 8009906:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009908:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800990a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800990e:	b2d2      	uxtb	r2, r2
 8009910:	e7d5      	b.n	80098be <HAL_I2C_Master_Transmit+0x76>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009912:	f7ff fe73 	bl	80095fc <I2C_WaitOnTXISFlagUntilTimeout>
 8009916:	2800      	cmp	r0, #0
 8009918:	d1b7      	bne.n	800988a <HAL_I2C_Master_Transmit+0x42>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800991a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800991c:	6822      	ldr	r2, [r4, #0]
 800991e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8009922:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8009924:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8009926:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8009928:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 800992a:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800992c:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800992e:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8009930:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8009932:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009934:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8009936:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009938:	b29b      	uxth	r3, r3
 800993a:	2b00      	cmp	r3, #0
 800993c:	d0c3      	beq.n	80098c6 <HAL_I2C_Master_Transmit+0x7e>
 800993e:	2a00      	cmp	r2, #0
 8009940:	d1c1      	bne.n	80098c6 <HAL_I2C_Master_Transmit+0x7e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009942:	463b      	mov	r3, r7
 8009944:	2180      	movs	r1, #128	@ 0x80
 8009946:	4620      	mov	r0, r4
 8009948:	9500      	str	r5, [sp, #0]
 800994a:	f7ff fee9 	bl	8009720 <I2C_WaitOnFlagUntilTimeout>
 800994e:	2800      	cmp	r0, #0
 8009950:	d19b      	bne.n	800988a <HAL_I2C_Master_Transmit+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009952:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8009954:	b29b      	uxth	r3, r3
 8009956:	2bff      	cmp	r3, #255	@ 0xff
 8009958:	d903      	bls.n	8009962 <HAL_I2C_Master_Transmit+0x11a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800995a:	22ff      	movs	r2, #255	@ 0xff
 800995c:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800995e:	9000      	str	r0, [sp, #0]
 8009960:	e7ab      	b.n	80098ba <HAL_I2C_Master_Transmit+0x72>
          hi2c->XferSize = hi2c->XferCount;
 8009962:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8009964:	b292      	uxth	r2, r2
 8009966:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009968:	9000      	str	r0, [sp, #0]
 800996a:	e7ce      	b.n	800990a <HAL_I2C_Master_Transmit+0xc2>
    __HAL_LOCK(hi2c);
 800996c:	2002      	movs	r0, #2
 800996e:	e78d      	b.n	800988c <HAL_I2C_Master_Transmit+0x44>
 8009970:	80002000 	.word	0x80002000

08009974 <HAL_I2C_Master_Receive>:
{
 8009974:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8009978:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800997a:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 800997e:	4604      	mov	r4, r0
 8009980:	460e      	mov	r6, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009982:	2b20      	cmp	r3, #32
{
 8009984:	4691      	mov	r9, r2
 8009986:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009988:	f040 8087 	bne.w	8009a9a <HAL_I2C_Master_Receive+0x126>
    __HAL_LOCK(hi2c);
 800998c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8009990:	2b01      	cmp	r3, #1
 8009992:	f000 8082 	beq.w	8009a9a <HAL_I2C_Master_Receive+0x126>
 8009996:	f04f 0a01 	mov.w	sl, #1
 800999a:	f880 a040 	strb.w	sl, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 800999e:	f7fe f9e3 	bl	8007d68 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80099a2:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 80099a4:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80099a6:	9000      	str	r0, [sp, #0]
 80099a8:	4652      	mov	r2, sl
 80099aa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80099ae:	4620      	mov	r0, r4
 80099b0:	f7ff feb6 	bl	8009720 <I2C_WaitOnFlagUntilTimeout>
 80099b4:	b118      	cbz	r0, 80099be <HAL_I2C_Master_Receive+0x4a>
      return HAL_ERROR;
 80099b6:	2001      	movs	r0, #1
}
 80099b8:	b002      	add	sp, #8
 80099ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80099be:	2322      	movs	r3, #34	@ 0x22
    hi2c->pBuffPtr  = pData;
 80099c0:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
    hi2c->XferISR   = NULL;
 80099c4:	6360      	str	r0, [r4, #52]	@ 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80099c6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80099ca:	2310      	movs	r3, #16
 80099cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80099d0:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->XferCount = Size;
 80099d2:	f8a4 802a 	strh.w	r8, [r4, #42]	@ 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80099d6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80099d8:	b29b      	uxth	r3, r3
 80099da:	2bff      	cmp	r3, #255	@ 0xff
 80099dc:	4b30      	ldr	r3, [pc, #192]	@ (8009aa0 <HAL_I2C_Master_Receive+0x12c>)
 80099de:	d926      	bls.n	8009a2e <HAL_I2C_Master_Receive+0xba>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80099e0:	22ff      	movs	r2, #255	@ 0xff
 80099e2:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80099e4:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80099e6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80099ea:	4631      	mov	r1, r6
 80099ec:	4620      	mov	r0, r4
 80099ee:	f7ff fd6f 	bl	80094d0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80099f2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80099f4:	462a      	mov	r2, r5
 80099f6:	4639      	mov	r1, r7
 80099f8:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 80099fa:	b29b      	uxth	r3, r3
 80099fc:	b9fb      	cbnz	r3, 8009a3e <HAL_I2C_Master_Receive+0xca>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80099fe:	f7ff fe24 	bl	800964a <I2C_WaitOnSTOPFlagUntilTimeout>
 8009a02:	2800      	cmp	r0, #0
 8009a04:	d1d7      	bne.n	80099b6 <HAL_I2C_Master_Receive+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009a06:	6823      	ldr	r3, [r4, #0]
 8009a08:	2120      	movs	r1, #32
 8009a0a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8009a0c:	685a      	ldr	r2, [r3, #4]
 8009a0e:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 8009a12:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 8009a16:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 8009a1a:	f022 0201 	bic.w	r2, r2, #1
 8009a1e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8009a20:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8009a24:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009a28:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 8009a2c:	e7c4      	b.n	80099b8 <HAL_I2C_Master_Receive+0x44>
      hi2c->XferSize = hi2c->XferCount;
 8009a2e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8009a30:	b292      	uxth	r2, r2
 8009a32:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009a34:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009a36:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009a3a:	b2d2      	uxtb	r2, r2
 8009a3c:	e7d5      	b.n	80099ea <HAL_I2C_Master_Receive+0x76>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009a3e:	f7ff fe29 	bl	8009694 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009a42:	2800      	cmp	r0, #0
 8009a44:	d1b7      	bne.n	80099b6 <HAL_I2C_Master_Receive+0x42>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009a46:	6823      	ldr	r3, [r4, #0]
 8009a48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009a4a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009a4c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8009a4e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8009a50:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8009a52:	3301      	adds	r3, #1
      hi2c->XferSize--;
 8009a54:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8009a56:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8009a58:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8009a5a:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8009a5c:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8009a5e:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8009a60:	b29b      	uxth	r3, r3
 8009a62:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009a64:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8009a66:	b29b      	uxth	r3, r3
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d0c2      	beq.n	80099f2 <HAL_I2C_Master_Receive+0x7e>
 8009a6c:	2a00      	cmp	r2, #0
 8009a6e:	d1c0      	bne.n	80099f2 <HAL_I2C_Master_Receive+0x7e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009a70:	463b      	mov	r3, r7
 8009a72:	2180      	movs	r1, #128	@ 0x80
 8009a74:	4620      	mov	r0, r4
 8009a76:	9500      	str	r5, [sp, #0]
 8009a78:	f7ff fe52 	bl	8009720 <I2C_WaitOnFlagUntilTimeout>
 8009a7c:	2800      	cmp	r0, #0
 8009a7e:	d19a      	bne.n	80099b6 <HAL_I2C_Master_Receive+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009a80:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8009a82:	b29b      	uxth	r3, r3
 8009a84:	2bff      	cmp	r3, #255	@ 0xff
 8009a86:	d903      	bls.n	8009a90 <HAL_I2C_Master_Receive+0x11c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009a88:	22ff      	movs	r2, #255	@ 0xff
 8009a8a:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009a8c:	9000      	str	r0, [sp, #0]
 8009a8e:	e7aa      	b.n	80099e6 <HAL_I2C_Master_Receive+0x72>
          hi2c->XferSize = hi2c->XferCount;
 8009a90:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8009a92:	b292      	uxth	r2, r2
 8009a94:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009a96:	9000      	str	r0, [sp, #0]
 8009a98:	e7cd      	b.n	8009a36 <HAL_I2C_Master_Receive+0xc2>
    __HAL_LOCK(hi2c);
 8009a9a:	2002      	movs	r0, #2
 8009a9c:	e78c      	b.n	80099b8 <HAL_I2C_Master_Receive+0x44>
 8009a9e:	bf00      	nop
 8009aa0:	80002400 	.word	0x80002400

08009aa4 <HAL_I2C_Mem_Write>:
{
 8009aa4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aa8:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009aaa:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 8009aae:	4604      	mov	r4, r0
 8009ab0:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ab2:	2b20      	cmp	r3, #32
{
 8009ab4:	4616      	mov	r6, r2
 8009ab6:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8009aba:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009abe:	f040 80c6 	bne.w	8009c4e <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 8009ac2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009ac4:	b113      	cbz	r3, 8009acc <HAL_I2C_Mem_Write+0x28>
 8009ac6:	f1ba 0f00 	cmp.w	sl, #0
 8009aca:	d106      	bne.n	8009ada <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009acc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009ad0:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8009ad2:	2001      	movs	r0, #1
}
 8009ad4:	b003      	add	sp, #12
 8009ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8009ada:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8009ade:	2b01      	cmp	r3, #1
 8009ae0:	f000 80b5 	beq.w	8009c4e <HAL_I2C_Mem_Write+0x1aa>
 8009ae4:	f04f 0b01 	mov.w	fp, #1
 8009ae8:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8009aec:	f7fe f93c 	bl	8007d68 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009af0:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8009af2:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009af4:	9000      	str	r0, [sp, #0]
 8009af6:	465a      	mov	r2, fp
 8009af8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009afc:	4620      	mov	r0, r4
 8009afe:	f7ff fe0f 	bl	8009720 <I2C_WaitOnFlagUntilTimeout>
 8009b02:	2800      	cmp	r0, #0
 8009b04:	d1e5      	bne.n	8009ad2 <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009b06:	2321      	movs	r3, #33	@ 0x21
    hi2c->XferISR   = NULL;
 8009b08:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009b0a:	fa5f f289 	uxtb.w	r2, r9
 8009b0e:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009b10:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009b14:	2340      	movs	r3, #64	@ 0x40
 8009b16:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 8009b1a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009b1c:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009b1e:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8009b20:	6263      	str	r3, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009b22:	4b4c      	ldr	r3, [pc, #304]	@ (8009c54 <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->XferCount = Size;
 8009b24:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009b28:	9300      	str	r3, [sp, #0]
 8009b2a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009b2e:	f7ff fccf 	bl	80094d0 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b32:	462a      	mov	r2, r5
 8009b34:	4641      	mov	r1, r8
 8009b36:	4620      	mov	r0, r4
 8009b38:	f7ff fd60 	bl	80095fc <I2C_WaitOnTXISFlagUntilTimeout>
 8009b3c:	bb18      	cbnz	r0, 8009b86 <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009b3e:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009b42:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009b44:	d115      	bne.n	8009b72 <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009b46:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009b48:	2200      	movs	r2, #0
 8009b4a:	2180      	movs	r1, #128	@ 0x80
 8009b4c:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009b4e:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009b50:	4643      	mov	r3, r8
 8009b52:	9500      	str	r5, [sp, #0]
 8009b54:	f7ff fde4 	bl	8009720 <I2C_WaitOnFlagUntilTimeout>
 8009b58:	b9a8      	cbnz	r0, 8009b86 <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009b5a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8009b5c:	b29b      	uxth	r3, r3
 8009b5e:	2bff      	cmp	r3, #255	@ 0xff
 8009b60:	d815      	bhi.n	8009b8e <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 8009b62:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009b64:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8009b68:	b292      	uxth	r2, r2
 8009b6a:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009b6c:	b2d2      	uxtb	r2, r2
 8009b6e:	9000      	str	r0, [sp, #0]
 8009b70:	e012      	b.n	8009b98 <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009b72:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b74:	4641      	mov	r1, r8
 8009b76:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009b78:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b7a:	462a      	mov	r2, r5
 8009b7c:	f7ff fd3e 	bl	80095fc <I2C_WaitOnTXISFlagUntilTimeout>
 8009b80:	b908      	cbnz	r0, 8009b86 <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009b82:	6823      	ldr	r3, [r4, #0]
 8009b84:	e7df      	b.n	8009b46 <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 8009b86:	2300      	movs	r3, #0
 8009b88:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8009b8c:	e7a1      	b.n	8009ad2 <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009b8e:	22ff      	movs	r2, #255	@ 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009b90:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009b94:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009b96:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009b98:	4639      	mov	r1, r7
 8009b9a:	4620      	mov	r0, r4
 8009b9c:	f7ff fc98 	bl	80094d0 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009ba0:	462a      	mov	r2, r5
 8009ba2:	4641      	mov	r1, r8
 8009ba4:	4620      	mov	r0, r4
 8009ba6:	f7ff fd29 	bl	80095fc <I2C_WaitOnTXISFlagUntilTimeout>
 8009baa:	2800      	cmp	r0, #0
 8009bac:	d191      	bne.n	8009ad2 <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009bae:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009bb0:	6822      	ldr	r2, [r4, #0]
 8009bb2:	f813 1b01 	ldrb.w	r1, [r3], #1
 8009bb6:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8009bb8:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8009bba:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8009bbc:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8009bbe:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8009bc0:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8009bc2:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8009bc4:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8009bc6:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009bc8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8009bca:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009bcc:	b29b      	uxth	r3, r3
 8009bce:	b1b3      	cbz	r3, 8009bfe <HAL_I2C_Mem_Write+0x15a>
 8009bd0:	b9aa      	cbnz	r2, 8009bfe <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009bd2:	4643      	mov	r3, r8
 8009bd4:	2180      	movs	r1, #128	@ 0x80
 8009bd6:	4620      	mov	r0, r4
 8009bd8:	9500      	str	r5, [sp, #0]
 8009bda:	f7ff fda1 	bl	8009720 <I2C_WaitOnFlagUntilTimeout>
 8009bde:	2800      	cmp	r0, #0
 8009be0:	f47f af77 	bne.w	8009ad2 <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009be4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8009be6:	b29b      	uxth	r3, r3
 8009be8:	2bff      	cmp	r3, #255	@ 0xff
 8009bea:	d928      	bls.n	8009c3e <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009bec:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009bee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009bf2:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009bf4:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009bf6:	4639      	mov	r1, r7
 8009bf8:	4620      	mov	r0, r4
 8009bfa:	f7ff fc69 	bl	80094d0 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8009bfe:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8009c00:	b29b      	uxth	r3, r3
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d1cc      	bne.n	8009ba0 <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009c06:	462a      	mov	r2, r5
 8009c08:	4641      	mov	r1, r8
 8009c0a:	4620      	mov	r0, r4
 8009c0c:	f7ff fd1d 	bl	800964a <I2C_WaitOnSTOPFlagUntilTimeout>
 8009c10:	2800      	cmp	r0, #0
 8009c12:	f47f af5e 	bne.w	8009ad2 <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009c16:	6823      	ldr	r3, [r4, #0]
 8009c18:	2120      	movs	r1, #32
 8009c1a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8009c1c:	685a      	ldr	r2, [r3, #4]
 8009c1e:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 8009c22:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 8009c26:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 8009c2a:	f022 0201 	bic.w	r2, r2, #1
 8009c2e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8009c30:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8009c34:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009c38:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 8009c3c:	e74a      	b.n	8009ad4 <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8009c3e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009c40:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 8009c44:	b292      	uxth	r2, r2
 8009c46:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009c48:	b2d2      	uxtb	r2, r2
 8009c4a:	9000      	str	r0, [sp, #0]
 8009c4c:	e7d3      	b.n	8009bf6 <HAL_I2C_Mem_Write+0x152>
    __HAL_LOCK(hi2c);
 8009c4e:	2002      	movs	r0, #2
 8009c50:	e740      	b.n	8009ad4 <HAL_I2C_Mem_Write+0x30>
 8009c52:	bf00      	nop
 8009c54:	80002000 	.word	0x80002000

08009c58 <HAL_I2C_Mem_Read>:
{
 8009c58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c5c:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009c5e:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 8009c62:	4604      	mov	r4, r0
 8009c64:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009c66:	2b20      	cmp	r3, #32
{
 8009c68:	4616      	mov	r6, r2
 8009c6a:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8009c6e:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009c72:	f040 80c9 	bne.w	8009e08 <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 8009c76:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009c78:	b113      	cbz	r3, 8009c80 <HAL_I2C_Mem_Read+0x28>
 8009c7a:	f1ba 0f00 	cmp.w	sl, #0
 8009c7e:	d106      	bne.n	8009c8e <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009c80:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009c84:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8009c86:	2001      	movs	r0, #1
}
 8009c88:	b003      	add	sp, #12
 8009c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8009c8e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8009c92:	2b01      	cmp	r3, #1
 8009c94:	f000 80b8 	beq.w	8009e08 <HAL_I2C_Mem_Read+0x1b0>
 8009c98:	f04f 0b01 	mov.w	fp, #1
 8009c9c:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8009ca0:	f7fe f862 	bl	8007d68 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009ca4:	2319      	movs	r3, #25
 8009ca6:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8009ca8:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009caa:	465a      	mov	r2, fp
 8009cac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009cb0:	4620      	mov	r0, r4
 8009cb2:	f7ff fd35 	bl	8009720 <I2C_WaitOnFlagUntilTimeout>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	2800      	cmp	r0, #0
 8009cba:	d1e4      	bne.n	8009c86 <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009cbc:	2222      	movs	r2, #34	@ 0x22
    hi2c->XferISR   = NULL;
 8009cbe:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009cc0:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009cc2:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009cc6:	2240      	movs	r2, #64	@ 0x40
 8009cc8:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 8009ccc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009cce:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009cd0:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8009cd2:	6262      	str	r2, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009cd4:	4a4d      	ldr	r2, [pc, #308]	@ (8009e0c <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->XferCount = Size;
 8009cd6:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009cda:	9200      	str	r2, [sp, #0]
 8009cdc:	fa5f f289 	uxtb.w	r2, r9
 8009ce0:	f7ff fbf6 	bl	80094d0 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009ce4:	462a      	mov	r2, r5
 8009ce6:	4641      	mov	r1, r8
 8009ce8:	4620      	mov	r0, r4
 8009cea:	f7ff fc87 	bl	80095fc <I2C_WaitOnTXISFlagUntilTimeout>
 8009cee:	bb20      	cbnz	r0, 8009d3a <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009cf0:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009cf4:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009cf6:	d116      	bne.n	8009d26 <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009cf8:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	2140      	movs	r1, #64	@ 0x40
 8009cfe:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009d00:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009d02:	4643      	mov	r3, r8
 8009d04:	9500      	str	r5, [sp, #0]
 8009d06:	f7ff fd0b 	bl	8009720 <I2C_WaitOnFlagUntilTimeout>
 8009d0a:	b9b0      	cbnz	r0, 8009d3a <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009d0c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8009d0e:	b29b      	uxth	r3, r3
 8009d10:	2bff      	cmp	r3, #255	@ 0xff
 8009d12:	4b3f      	ldr	r3, [pc, #252]	@ (8009e10 <HAL_I2C_Mem_Read+0x1b8>)
 8009d14:	d815      	bhi.n	8009d42 <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 8009d16:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8009d18:	b292      	uxth	r2, r2
 8009d1a:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009d1c:	b2d2      	uxtb	r2, r2
 8009d1e:	9300      	str	r3, [sp, #0]
 8009d20:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009d24:	e012      	b.n	8009d4c <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009d26:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009d28:	4641      	mov	r1, r8
 8009d2a:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009d2c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009d2e:	462a      	mov	r2, r5
 8009d30:	f7ff fc64 	bl	80095fc <I2C_WaitOnTXISFlagUntilTimeout>
 8009d34:	b908      	cbnz	r0, 8009d3a <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009d36:	6823      	ldr	r3, [r4, #0]
 8009d38:	e7de      	b.n	8009cf8 <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8009d40:	e7a1      	b.n	8009c86 <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009d42:	22ff      	movs	r2, #255	@ 0xff
 8009d44:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009d46:	9300      	str	r3, [sp, #0]
 8009d48:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009d4c:	4639      	mov	r1, r7
 8009d4e:	4620      	mov	r0, r4
 8009d50:	f7ff fbbe 	bl	80094d0 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8009d54:	4643      	mov	r3, r8
 8009d56:	2200      	movs	r2, #0
 8009d58:	2104      	movs	r1, #4
 8009d5a:	4620      	mov	r0, r4
 8009d5c:	9500      	str	r5, [sp, #0]
 8009d5e:	f7ff fcdf 	bl	8009720 <I2C_WaitOnFlagUntilTimeout>
 8009d62:	2800      	cmp	r0, #0
 8009d64:	d18f      	bne.n	8009c86 <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009d66:	6823      	ldr	r3, [r4, #0]
 8009d68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009d6a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009d6c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8009d6e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8009d70:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8009d72:	3301      	adds	r3, #1
      hi2c->XferSize--;
 8009d74:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8009d76:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8009d78:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8009d7a:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8009d7c:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8009d7e:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8009d80:	b29b      	uxth	r3, r3
 8009d82:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009d84:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8009d86:	b29b      	uxth	r3, r3
 8009d88:	b1b3      	cbz	r3, 8009db8 <HAL_I2C_Mem_Read+0x160>
 8009d8a:	b9aa      	cbnz	r2, 8009db8 <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009d8c:	4643      	mov	r3, r8
 8009d8e:	2180      	movs	r1, #128	@ 0x80
 8009d90:	4620      	mov	r0, r4
 8009d92:	9500      	str	r5, [sp, #0]
 8009d94:	f7ff fcc4 	bl	8009720 <I2C_WaitOnFlagUntilTimeout>
 8009d98:	2800      	cmp	r0, #0
 8009d9a:	f47f af74 	bne.w	8009c86 <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009d9e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8009da0:	b29b      	uxth	r3, r3
 8009da2:	2bff      	cmp	r3, #255	@ 0xff
 8009da4:	d928      	bls.n	8009df8 <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009da6:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8009da8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009dac:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8009dae:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009db0:	4639      	mov	r1, r7
 8009db2:	4620      	mov	r0, r4
 8009db4:	f7ff fb8c 	bl	80094d0 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8009db8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8009dba:	b29b      	uxth	r3, r3
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d1c9      	bne.n	8009d54 <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009dc0:	462a      	mov	r2, r5
 8009dc2:	4641      	mov	r1, r8
 8009dc4:	4620      	mov	r0, r4
 8009dc6:	f7ff fc40 	bl	800964a <I2C_WaitOnSTOPFlagUntilTimeout>
 8009dca:	2800      	cmp	r0, #0
 8009dcc:	f47f af5b 	bne.w	8009c86 <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009dd0:	6823      	ldr	r3, [r4, #0]
 8009dd2:	2120      	movs	r1, #32
 8009dd4:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8009dd6:	685a      	ldr	r2, [r3, #4]
 8009dd8:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 8009ddc:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 8009de0:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 8009de4:	f022 0201 	bic.w	r2, r2, #1
 8009de8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8009dea:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8009dee:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009df2:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 8009df6:	e747      	b.n	8009c88 <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8009df8:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009dfa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 8009dfe:	b292      	uxth	r2, r2
 8009e00:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009e02:	b2d2      	uxtb	r2, r2
 8009e04:	9000      	str	r0, [sp, #0]
 8009e06:	e7d3      	b.n	8009db0 <HAL_I2C_Mem_Read+0x158>
    __HAL_LOCK(hi2c);
 8009e08:	2002      	movs	r0, #2
 8009e0a:	e73d      	b.n	8009c88 <HAL_I2C_Mem_Read+0x30>
 8009e0c:	80002000 	.word	0x80002000
 8009e10:	80002400 	.word	0x80002400

08009e14 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8009e14:	6802      	ldr	r2, [r0, #0]
  if (hi2c->XferISR != NULL)
 8009e16:	6b43      	ldr	r3, [r0, #52]	@ 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8009e18:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8009e1a:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
 8009e1c:	b103      	cbz	r3, 8009e20 <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
 8009e1e:	4718      	bx	r3
}
 8009e20:	4770      	bx	lr

08009e22 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009e22:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009e24:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 8009e28:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009e2a:	2a20      	cmp	r2, #32
 8009e2c:	b2d4      	uxtb	r4, r2
 8009e2e:	d11c      	bne.n	8009e6a <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009e30:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8009e34:	2a01      	cmp	r2, #1
 8009e36:	d018      	beq.n	8009e6a <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009e38:	2224      	movs	r2, #36	@ 0x24
 8009e3a:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009e3e:	6802      	ldr	r2, [r0, #0]
 8009e40:	6810      	ldr	r0, [r2, #0]
 8009e42:	f020 0001 	bic.w	r0, r0, #1
 8009e46:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009e48:	6810      	ldr	r0, [r2, #0]
 8009e4a:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8009e4e:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009e50:	6810      	ldr	r0, [r2, #0]
 8009e52:	4301      	orrs	r1, r0
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e54:	2000      	movs	r0, #0
    hi2c->Instance->CR1 |= AnalogFilter;
 8009e56:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8009e58:	6811      	ldr	r1, [r2, #0]
 8009e5a:	f041 0101 	orr.w	r1, r1, #1
 8009e5e:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8009e60:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8009e64:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8009e68:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 8009e6a:	2002      	movs	r0, #2
 8009e6c:	e7fc      	b.n	8009e68 <HAL_I2CEx_ConfigAnalogFilter+0x46>

08009e6e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009e6e:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009e70:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 8009e74:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009e76:	2a20      	cmp	r2, #32
 8009e78:	b2d4      	uxtb	r4, r2
 8009e7a:	d11b      	bne.n	8009eb4 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009e7c:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8009e80:	2a01      	cmp	r2, #1
 8009e82:	d017      	beq.n	8009eb4 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009e84:	2224      	movs	r2, #36	@ 0x24
 8009e86:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009e8a:	6802      	ldr	r2, [r0, #0]
 8009e8c:	6810      	ldr	r0, [r2, #0]
 8009e8e:	f020 0001 	bic.w	r0, r0, #1
 8009e92:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009e94:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009e96:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009e9a:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e9e:	2000      	movs	r0, #0
    hi2c->Instance->CR1 = tmpreg;
 8009ea0:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8009ea2:	6811      	ldr	r1, [r2, #0]
 8009ea4:	f041 0101 	orr.w	r1, r1, #1
 8009ea8:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8009eaa:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8009eae:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8009eb2:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 8009eb4:	2002      	movs	r0, #2
 8009eb6:	e7fc      	b.n	8009eb2 <HAL_I2CEx_ConfigDigitalFilter+0x44>

08009eb8 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 8009eb8:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
  for (l = 0; l < 16UL; l++)
  {
    i = (uint32_t)Bits[l];
 8009eba:	2401      	movs	r4, #1
 8009ebc:	7807      	ldrb	r7, [r0, #0]
  p = 0;
 8009ebe:	2500      	movs	r5, #0
 8009ec0:	194e      	adds	r6, r1, r5
 8009ec2:	443d      	add	r5, r7
 8009ec4:	194f      	adds	r7, r1, r5
    if ((p + i) > 256UL)
    {
      /* check for table overflow */
      return HAL_ERROR;
    }
    while (i != 0UL)
 8009ec6:	42be      	cmp	r6, r7
 8009ec8:	d112      	bne.n	8009ef0 <JPEG_Bits_To_SizeCodes+0x38>
  for (l = 0; l < 16UL; l++)
 8009eca:	2c10      	cmp	r4, #16
 8009ecc:	d108      	bne.n	8009ee0 <JPEG_Bits_To_SizeCodes+0x28>
      Huffsize[p] = (uint8_t) l + 1U;
      p++;
      i--;
    }
  }
  Huffsize[p] = 0;
 8009ece:	2400      	movs	r4, #0
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
    {
      return HAL_ERROR;
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8009ed0:	2601      	movs	r6, #1
  Huffsize[p] = 0;
 8009ed2:	554c      	strb	r4, [r1, r5]
  *LastK = p;
 8009ed4:	601d      	str	r5, [r3, #0]
  p = 0;
 8009ed6:	4623      	mov	r3, r4
  si = Huffsize[0];
 8009ed8:	780d      	ldrb	r5, [r1, #0]
  while (Huffsize[p] != 0U)
 8009eda:	5cc8      	ldrb	r0, [r1, r3]
 8009edc:	b9d8      	cbnz	r0, 8009f16 <JPEG_Bits_To_SizeCodes+0x5e>
    code <<= 1;
    si++;
  }
  /* Return function status */
  return HAL_OK;
}
 8009ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
    i = (uint32_t)Bits[l];
 8009ee0:	5d07      	ldrb	r7, [r0, r4]
    if ((p + i) > 256UL)
 8009ee2:	3401      	adds	r4, #1
 8009ee4:	19ee      	adds	r6, r5, r7
 8009ee6:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 8009eea:	d9e9      	bls.n	8009ec0 <JPEG_Bits_To_SizeCodes+0x8>
      return HAL_ERROR;
 8009eec:	2001      	movs	r0, #1
 8009eee:	e7f6      	b.n	8009ede <JPEG_Bits_To_SizeCodes+0x26>
      Huffsize[p] = (uint8_t) l + 1U;
 8009ef0:	f806 4b01 	strb.w	r4, [r6], #1
      i--;
 8009ef4:	e7e7      	b.n	8009ec6 <JPEG_Bits_To_SizeCodes+0xe>
      Huffcode[p] = code;
 8009ef6:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
      p++;
 8009efa:	3301      	adds	r3, #1
    while (((uint32_t) Huffsize[p]) == si)
 8009efc:	5cc8      	ldrb	r0, [r1, r3]
 8009efe:	19dc      	adds	r4, r3, r7
 8009f00:	42a8      	cmp	r0, r5
 8009f02:	d0f8      	beq.n	8009ef6 <JPEG_Bits_To_SizeCodes+0x3e>
    if(si > 31UL)
 8009f04:	2d1f      	cmp	r5, #31
 8009f06:	d8f1      	bhi.n	8009eec <JPEG_Bits_To_SizeCodes+0x34>
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8009f08:	fa06 f005 	lsl.w	r0, r6, r5
 8009f0c:	42a0      	cmp	r0, r4
 8009f0e:	d9ed      	bls.n	8009eec <JPEG_Bits_To_SizeCodes+0x34>
    code <<= 1;
 8009f10:	0064      	lsls	r4, r4, #1
    si++;
 8009f12:	3501      	adds	r5, #1
 8009f14:	e7e1      	b.n	8009eda <JPEG_Bits_To_SizeCodes+0x22>
 8009f16:	1ae7      	subs	r7, r4, r3
 8009f18:	e7f0      	b.n	8009efc <JPEG_Bits_To_SizeCodes+0x44>

08009f1a <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 8009f1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f1c:	f2ad 5d14 	subw	sp, sp, #1300	@ 0x514
 8009f20:	460d      	mov	r5, r1
 8009f22:	4604      	mov	r4, r0
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8009f24:	ab01      	add	r3, sp, #4
 8009f26:	aa43      	add	r2, sp, #268	@ 0x10c
 8009f28:	a902      	add	r1, sp, #8
 8009f2a:	f7ff ffc5 	bl	8009eb8 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 8009f2e:	b938      	cbnz	r0, 8009f40 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x26>
 8009f30:	9e01      	ldr	r6, [sp, #4]
 8009f32:	460b      	mov	r3, r1
 8009f34:	f104 010f 	add.w	r1, r4, #15
 8009f38:	360f      	adds	r6, #15
 8009f3a:	4434      	add	r4, r6
    return  error;
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;

  while (k < lastK)
 8009f3c:	42a1      	cmp	r1, r4
 8009f3e:	d102      	bne.n	8009f46 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x2c>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8009f40:	f20d 5d14 	addw	sp, sp, #1300	@ 0x514
 8009f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    l = DC_BitsValsTable->HuffVal[k];
 8009f46:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8009f4a:	2e0b      	cmp	r6, #11
 8009f4c:	d80a      	bhi.n	8009f64 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8009f4e:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 8009f52:	f852 cb04 	ldr.w	ip, [r2], #4
 8009f56:	f8c7 c00c 	str.w	ip, [r7, #12]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8009f5a:	f813 7b01 	ldrb.w	r7, [r3], #1
 8009f5e:	3f01      	subs	r7, #1
 8009f60:	55af      	strb	r7, [r5, r6]
      k++;
 8009f62:	e7eb      	b.n	8009f3c <JPEG_DCHuff_BitsVals_To_SizeCodes+0x22>
      return HAL_ERROR; /* Huffman Table overflow error*/
 8009f64:	2001      	movs	r0, #1
 8009f66:	e7eb      	b.n	8009f40 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x26>

08009f68 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 8009f68:	4603      	mov	r3, r0
 8009f6a:	4608      	mov	r0, r1
 8009f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8009f6e:	681c      	ldr	r4, [r3, #0]
{
 8009f70:	b091      	sub	sp, #68	@ 0x44
  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8009f72:	f504 63f8 	add.w	r3, r4, #1984	@ 0x7c0
 8009f76:	429a      	cmp	r2, r3
 8009f78:	d125      	bne.n	8009fc6 <JPEG_Set_HuffDC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8009f7a:	f504 64fb 	add.w	r4, r4, #2008	@ 0x7d8
    return HAL_ERROR;
  }

  if (HuffTableDC != NULL)
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 8009f7e:	a901      	add	r1, sp, #4
 8009f80:	f7ff ffcb 	bl	8009f1a <JPEG_DCHuff_BitsVals_To_SizeCodes>
    if (error != HAL_OK)
 8009f84:	b9e8      	cbnz	r0, 8009fc2 <JPEG_Set_HuffDC_Mem+0x5a>
    {
      return  error;
    }
    addressDef = address;
    *addressDef = 0x0FFF0FFF;
 8009f86:	aa01      	add	r2, sp, #4
 8009f88:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
 8009f8c:	f1a4 0618 	sub.w	r6, r4, #24
    addressDef++;
    *addressDef = 0x0FFF0FFF;
 8009f90:	4615      	mov	r5, r2
    *addressDef = 0x0FFF0FFF;
 8009f92:	6023      	str	r3, [r4, #0]
    *addressDef = 0x0FFF0FFF;
 8009f94:	6063      	str	r3, [r4, #4]
    i = JPEG_DC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address --;
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8009f96:	7ad1      	ldrb	r1, [r2, #11]
    while (i > 1UL)
 8009f98:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8009f9a:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
    while (i > 1UL)
 8009f9e:	3a02      	subs	r2, #2
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8009fa0:	0209      	lsls	r1, r1, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8009fa2:	f895 703c 	ldrb.w	r7, [r5, #60]	@ 0x3c
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8009fa6:	f401 6170 	and.w	r1, r1, #3840	@ 0xf00
 8009faa:	4319      	orrs	r1, r3
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8009fac:	7b13      	ldrb	r3, [r2, #12]
 8009fae:	021b      	lsls	r3, r3, #8
 8009fb0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8009fb4:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8009fb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8009fba:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 8009fbe:	42b4      	cmp	r4, r6
 8009fc0:	d1e9      	bne.n	8009f96 <JPEG_Set_HuffDC_Mem+0x2e>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8009fc2:	b011      	add	sp, #68	@ 0x44
 8009fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 8009fc6:	f504 63fc 	add.w	r3, r4, #2016	@ 0x7e0
 8009fca:	429a      	cmp	r2, r3
 8009fcc:	d102      	bne.n	8009fd4 <JPEG_Set_HuffDC_Mem+0x6c>
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8009fce:	f504 64ff 	add.w	r4, r4, #2040	@ 0x7f8
  if (HuffTableDC != NULL)
 8009fd2:	e7d4      	b.n	8009f7e <JPEG_Set_HuffDC_Mem+0x16>
    return HAL_ERROR;
 8009fd4:	2001      	movs	r0, #1
 8009fd6:	e7f4      	b.n	8009fc2 <JPEG_Set_HuffDC_Mem+0x5a>

08009fd8 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 8009fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8009fdc:	6804      	ldr	r4, [r0, #0]
{
 8009fde:	f6ad 0d38 	subw	sp, sp, #2104	@ 0x838
 8009fe2:	460e      	mov	r6, r1
  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8009fe4:	f504 63a0 	add.w	r3, r4, #1280	@ 0x500
 8009fe8:	429a      	cmp	r2, r3
 8009fea:	d149      	bne.n	800a080 <JPEG_Set_HuffAC_Mem+0xa8>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8009fec:	f204 6444 	addw	r4, r4, #1604	@ 0x644
  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8009ff0:	466b      	mov	r3, sp
 8009ff2:	f20d 4234 	addw	r2, sp, #1076	@ 0x434
 8009ff6:	a901      	add	r1, sp, #4
 8009ff8:	4630      	mov	r0, r6
 8009ffa:	f7ff ff5d 	bl	8009eb8 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 8009ffe:	2800      	cmp	r0, #0
 800a000:	d13a      	bne.n	800a078 <JPEG_Set_HuffAC_Mem+0xa0>
 800a002:	9b00      	ldr	r3, [sp, #0]
 800a004:	460d      	mov	r5, r1
 800a006:	f106 0c0f 	add.w	ip, r6, #15
 800a00a:	4617      	mov	r7, r2
 800a00c:	330f      	adds	r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 800a00e:	f04f 0e0a 	mov.w	lr, #10
 800a012:	18f1      	adds	r1, r6, r3
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800a014:	ae42      	add	r6, sp, #264	@ 0x108
  while (k < lastK)
 800a016:	4561      	cmp	r1, ip
 800a018:	d139      	bne.n	800a08e <JPEG_Set_HuffAC_Mem+0xb6>
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
    for (i = 0; i < 3UL; i++)
    {
      *addressDef = 0x0FFF0FFF;
 800a01a:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
 800a01e:	a942      	add	r1, sp, #264	@ 0x108
 800a020:	f5a4 76a2 	sub.w	r6, r4, #324	@ 0x144
 800a024:	6023      	str	r3, [r4, #0]
    addressDef++;
    *addressDef = 0x0FD30FD2;
    addressDef++;
    *addressDef = 0x0FD50FD4;
    addressDef++;
    *addressDef = 0x0FD70FD6;
 800a026:	460d      	mov	r5, r1
      *addressDef = 0x0FFF0FFF;
 800a028:	6063      	str	r3, [r4, #4]
 800a02a:	60a3      	str	r3, [r4, #8]
    *addressDef = 0x0FD10FD0;
 800a02c:	f103 33d1 	add.w	r3, r3, #3520188881	@ 0xd1d1d1d1
 800a030:	f103 232e 	add.w	r3, r3, #771763712	@ 0x2e002e00
 800a034:	60e3      	str	r3, [r4, #12]
    *addressDef = 0x0FD30FD2;
 800a036:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 800a03a:	6123      	str	r3, [r4, #16]
    *addressDef = 0x0FD50FD4;
 800a03c:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 800a040:	6163      	str	r3, [r4, #20]
    *addressDef = 0x0FD70FD6;
 800a042:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 800a046:	61a3      	str	r3, [r4, #24]
    i = JPEG_AC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address--;
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800a048:	f891 20a1 	ldrb.w	r2, [r1, #161]	@ 0xa1
    while (i > 1UL)
 800a04c:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800a04e:	f895 3330 	ldrb.w	r3, [r5, #816]	@ 0x330
    while (i > 1UL)
 800a052:	3902      	subs	r1, #2
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800a054:	0212      	lsls	r2, r2, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800a056:	f895 732c 	ldrb.w	r7, [r5, #812]	@ 0x32c
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800a05a:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 800a05e:	431a      	orrs	r2, r3
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800a060:	f891 30a2 	ldrb.w	r3, [r1, #162]	@ 0xa2
 800a064:	021b      	lsls	r3, r3, #8
 800a066:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800a06a:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800a06c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a070:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 800a074:	42b4      	cmp	r4, r6
 800a076:	d1e7      	bne.n	800a048 <JPEG_Set_HuffAC_Mem+0x70>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800a078:	f60d 0d38 	addw	sp, sp, #2104	@ 0x838
 800a07c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 800a080:	f504 63cc 	add.w	r3, r4, #1632	@ 0x660
 800a084:	429a      	cmp	r2, r3
 800a086:	d10f      	bne.n	800a0a8 <JPEG_Set_HuffAC_Mem+0xd0>
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800a088:	f204 74a4 	addw	r4, r4, #1956	@ 0x7a4
  if (HuffTableAC != NULL)
 800a08c:	e7b0      	b.n	8009ff0 <JPEG_Set_HuffAC_Mem+0x18>
    l = AC_BitsValsTable->HuffVal[k];
 800a08e:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    if (l == 0UL)
 800a092:	b15b      	cbz	r3, 800a0ac <JPEG_Set_HuffAC_Mem+0xd4>
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 800a094:	2bf0      	cmp	r3, #240	@ 0xf0
 800a096:	d015      	beq.n	800a0c4 <JPEG_Set_HuffAC_Mem+0xec>
      msb = (l & 0xF0UL) >> 4;
 800a098:	091a      	lsrs	r2, r3, #4
      lsb = (l & 0x0FUL);
 800a09a:	f003 030f 	and.w	r3, r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 800a09e:	3b01      	subs	r3, #1
 800a0a0:	fb0e 3302 	mla	r3, lr, r2, r3
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 800a0a4:	2ba1      	cmp	r3, #161	@ 0xa1
 800a0a6:	d902      	bls.n	800a0ae <JPEG_Set_HuffAC_Mem+0xd6>
    return HAL_ERROR;
 800a0a8:	2001      	movs	r0, #1
 800a0aa:	e7e5      	b.n	800a078 <JPEG_Set_HuffAC_Mem+0xa0>
      l = 160; /*l = 0x00 EOB code*/
 800a0ac:	23a0      	movs	r3, #160	@ 0xa0
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800a0ae:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 800a0b2:	f857 8b04 	ldr.w	r8, [r7], #4
 800a0b6:	f8c2 80a4 	str.w	r8, [r2, #164]	@ 0xa4
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800a0ba:	f815 2b01 	ldrb.w	r2, [r5], #1
 800a0be:	3a01      	subs	r2, #1
 800a0c0:	54f2      	strb	r2, [r6, r3]
      k++;
 800a0c2:	e7a8      	b.n	800a016 <JPEG_Set_HuffAC_Mem+0x3e>
      l = 161;
 800a0c4:	23a1      	movs	r3, #161	@ 0xa1
 800a0c6:	e7f2      	b.n	800a0ae <JPEG_Set_HuffAC_Mem+0xd6>

0800a0c8 <JPEG_Init_Process>:
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 800a0c8:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800a0ca:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800a0ce:	6543      	str	r3, [r0, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a0d0:	6d42      	ldr	r2, [r0, #84]	@ 0x54
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 800a0d2:	6803      	ldr	r3, [r0, #0]
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a0d4:	f002 0203 	and.w	r2, r2, #3
 800a0d8:	2a02      	cmp	r2, #2
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 800a0da:	685a      	ldr	r2, [r3, #4]
 800a0dc:	bf0c      	ite	eq
 800a0de:	f042 0208 	orreq.w	r2, r2, #8
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 800a0e2:	f022 0208 	bicne.w	r2, r2, #8
 800a0e6:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800a0e8:	681a      	ldr	r2, [r3, #0]
 800a0ea:	f022 0201 	bic.w	r2, r2, #1
 800a0ee:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800a0f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a0f2:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800a0f6:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Disable All DMA requests */
  JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_MASK);
 800a0f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a0fa:	f422 52c0 	bic.w	r2, r2, #6144	@ 0x1800
 800a0fe:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800a100:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a102:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a106:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800a108:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a10a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a10e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800a110:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a112:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800a116:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 800a118:	681a      	ldr	r2, [r3, #0]
 800a11a:	f042 0201 	orr.w	r2, r2, #1
 800a11e:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800a120:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 800a122:	f002 020c 	and.w	r2, r2, #12
 800a126:	2a08      	cmp	r2, #8
 800a128:	d104      	bne.n	800a134 <JPEG_Init_Process+0x6c>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 800a12a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a12c:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
  {
    /*Enable End Of Conversation, and End Of Header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800a130:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 800a132:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800a134:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 800a136:	f002 020c 	and.w	r2, r2, #12
 800a13a:	2a0c      	cmp	r2, #12
 800a13c:	d1f9      	bne.n	800a132 <JPEG_Init_Process+0x6a>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800a13e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a140:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800a144:	e7f4      	b.n	800a130 <JPEG_Init_Process+0x68>
	...

0800a148 <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 800a148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hjpeg->InDataLength < 4UL) || (hjpeg->OutDataLength < 4UL))
 800a14a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
{
 800a14c:	4604      	mov	r4, r0
  if ((hjpeg->InDataLength < 4UL) || (hjpeg->OutDataLength < 4UL))
 800a14e:	2b03      	cmp	r3, #3
 800a150:	d927      	bls.n	800a1a2 <JPEG_DMA_StartProcess+0x5a>
 800a152:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800a154:	2903      	cmp	r1, #3
 800a156:	d924      	bls.n	800a1a2 <JPEG_DMA_StartProcess+0x5a>
  {
    return HAL_ERROR;
  }
  /* Reset Ending DMA internal context flag*/
  hjpeg->Context &= ~JPEG_CONTEXT_ENDING_DMA;
 800a158:	6d42      	ldr	r2, [r0, #84]	@ 0x54
  hjpeg->hdmaout->XferErrorCallback = JPEG_DMAErrorCallback;
  /* Set the DMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_DMAOutAbortCallback;

  /*DMA transfer size must be a multiple of 4 bytes i.e multiple of 32bits words*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800a15a:	f023 0303 	bic.w	r3, r3, #3
  hjpeg->hdmain->XferCpltCallback = JPEG_DMAInCpltCallback;
 800a15e:	4d1a      	ldr	r5, [pc, #104]	@ (800a1c8 <JPEG_DMA_StartProcess+0x80>)

  /*DMA transfer size must be a multiple of 4 bytes i.e multiple of 32bits words*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % 4UL);
 800a160:	f021 0103 	bic.w	r1, r1, #3
  hjpeg->Context &= ~JPEG_CONTEXT_ENDING_DMA;
 800a164:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
  hjpeg->hdmain->XferErrorCallback = JPEG_DMAErrorCallback;
 800a168:	4e18      	ldr	r6, [pc, #96]	@ (800a1cc <JPEG_DMA_StartProcess+0x84>)
  hjpeg->hdmaout->XferCpltCallback = JPEG_DMAOutCpltCallback;
 800a16a:	4f19      	ldr	r7, [pc, #100]	@ (800a1d0 <JPEG_DMA_StartProcess+0x88>)
  hjpeg->Context &= ~JPEG_CONTEXT_ENDING_DMA;
 800a16c:	6542      	str	r2, [r0, #84]	@ 0x54
  JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA | JPEG_DMA_IDMA);
 800a16e:	6802      	ldr	r2, [r0, #0]
 800a170:	6b10      	ldr	r0, [r2, #48]	@ 0x30

  /* Start DMA FIFO In transfer */
  if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800a172:	3240      	adds	r2, #64	@ 0x40
  JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA | JPEG_DMA_IDMA);
 800a174:	f420 50c0 	bic.w	r0, r0, #6144	@ 0x1800
 800a178:	f842 0c10 	str.w	r0, [r2, #-16]
  hjpeg->hdmain->XferCpltCallback = JPEG_DMAInCpltCallback;
 800a17c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800a17e:	63c5      	str	r5, [r0, #60]	@ 0x3c
  hjpeg->hdmaout->XferCpltCallback = JPEG_DMAOutCpltCallback;
 800a180:	6b65      	ldr	r5, [r4, #52]	@ 0x34
  hjpeg->hdmain->XferErrorCallback = JPEG_DMAErrorCallback;
 800a182:	64c6      	str	r6, [r0, #76]	@ 0x4c
  hjpeg->hdmaout->XferErrorCallback = JPEG_DMAErrorCallback;
 800a184:	64ee      	str	r6, [r5, #76]	@ 0x4c
  hjpeg->hdmaout->XferAbortCallback = JPEG_DMAOutAbortCallback;
 800a186:	4e13      	ldr	r6, [pc, #76]	@ (800a1d4 <JPEG_DMA_StartProcess+0x8c>)
  hjpeg->hdmaout->XferCpltCallback = JPEG_DMAOutCpltCallback;
 800a188:	63ef      	str	r7, [r5, #60]	@ 0x3c
  hjpeg->hdmaout->XferAbortCallback = JPEG_DMAOutAbortCallback;
 800a18a:	652e      	str	r6, [r5, #80]	@ 0x50
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800a18c:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800a18e:	089b      	lsrs	r3, r3, #2
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % 4UL);
 800a190:	62e1      	str	r1, [r4, #44]	@ 0x2c
  if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800a192:	69a1      	ldr	r1, [r4, #24]
 800a194:	f7fe fa0a 	bl	80085ac <HAL_DMA_Start_IT>
 800a198:	b128      	cbz	r0, 800a1a6 <JPEG_DMA_StartProcess+0x5e>
                       hjpeg->InDataLength >> 2)  != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800a19a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800a19c:	f043 0304 	orr.w	r3, r3, #4
 800a1a0:	6523      	str	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 800a1a2:	2001      	movs	r0, #1

  /* Enable JPEG In/Out DMA requests*/
  JPEG_ENABLE_DMA(hjpeg, JPEG_DMA_IDMA | JPEG_DMA_ODMA);

  return HAL_OK;
}
 800a1a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800a1a6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a1a8:	6821      	ldr	r1, [r4, #0]
 800a1aa:	089b      	lsrs	r3, r3, #2
 800a1ac:	69e2      	ldr	r2, [r4, #28]
 800a1ae:	3144      	adds	r1, #68	@ 0x44
 800a1b0:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800a1b2:	f7fe f9fb 	bl	80085ac <HAL_DMA_Start_IT>
 800a1b6:	2800      	cmp	r0, #0
 800a1b8:	d1ef      	bne.n	800a19a <JPEG_DMA_StartProcess+0x52>
  JPEG_ENABLE_DMA(hjpeg, JPEG_DMA_IDMA | JPEG_DMA_ODMA);
 800a1ba:	6822      	ldr	r2, [r4, #0]
 800a1bc:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800a1be:	f443 53c0 	orr.w	r3, r3, #6144	@ 0x1800
 800a1c2:	6313      	str	r3, [r2, #48]	@ 0x30
  return HAL_OK;
 800a1c4:	e7ee      	b.n	800a1a4 <JPEG_DMA_StartProcess+0x5c>
 800a1c6:	bf00      	nop
 800a1c8:	0800a735 	.word	0x0800a735
 800a1cc:	0800a619 	.word	0x0800a619
 800a1d0:	0800abed 	.word	0x0800abed
 800a1d4:	0800abdd 	.word	0x0800abdd

0800a1d8 <HAL_JPEG_Init>:
{
 800a1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg == NULL)
 800a1da:	4605      	mov	r5, r0
 800a1dc:	2800      	cmp	r0, #0
 800a1de:	f000 80f6 	beq.w	800a3ce <HAL_JPEG_Init+0x1f6>
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 800a1e2:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
 800a1e6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800a1ea:	b91b      	cbnz	r3, 800a1f4 <HAL_JPEG_Init+0x1c>
    hjpeg->Lock = HAL_UNLOCKED;
 800a1ec:	f880 204c 	strb.w	r2, [r0, #76]	@ 0x4c
    HAL_JPEG_MspInit(hjpeg);
 800a1f0:	f7fa fdae 	bl	8004d50 <HAL_JPEG_MspInit>
  __HAL_JPEG_ENABLE(hjpeg);
 800a1f4:	682c      	ldr	r4, [r5, #0]
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 800a1f6:	2302      	movs	r3, #2
 800a1f8:	4a88      	ldr	r2, [pc, #544]	@ (800a41c <HAL_JPEG_Init+0x244>)
 800a1fa:	f885 304d 	strb.w	r3, [r5, #77]	@ 0x4d
  address = (hjpeg->Instance->DHTMEM + 3);
 800a1fe:	f504 715b 	add.w	r1, r4, #876	@ 0x36c
  __HAL_JPEG_ENABLE(hjpeg);
 800a202:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a204:	f504 7057 	add.w	r0, r4, #860	@ 0x35c
 800a208:	f043 0301 	orr.w	r3, r3, #1
 800a20c:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800a20e:	6823      	ldr	r3, [r4, #0]
 800a210:	f023 0301 	bic.w	r3, r3, #1
 800a214:	6023      	str	r3, [r4, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800a216:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a218:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 800a21c:	6323      	str	r3, [r4, #48]	@ 0x30
  JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_MASK);
 800a21e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a220:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 800a224:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800a226:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a228:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800a22c:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800a22e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a230:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a234:	6323      	str	r3, [r4, #48]	@ 0x30
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800a236:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800a238:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800a23c:	63a3      	str	r3, [r4, #56]	@ 0x38
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 800a23e:	4b78      	ldr	r3, [pc, #480]	@ (800a420 <HAL_JPEG_Init+0x248>)
 800a240:	63eb      	str	r3, [r5, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 800a242:	4b78      	ldr	r3, [pc, #480]	@ (800a424 <HAL_JPEG_Init+0x24c>)
 800a244:	642b      	str	r3, [r5, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 800a246:	2300      	movs	r3, #0
  hjpeg->QuantTable3 = NULL;
 800a248:	e9c5 3311 	strd	r3, r3, [r5, #68]	@ 0x44
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800a24c:	7b93      	ldrb	r3, [r2, #14]
  while (index > 3UL)
 800a24e:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a250:	7cd6      	ldrb	r6, [r2, #19]
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800a252:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a254:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 800a258:	7c16      	ldrb	r6, [r2, #16]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800a25a:	4333      	orrs	r3, r6
 800a25c:	7c56      	ldrb	r6, [r2, #17]
 800a25e:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a262:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 800a266:	4281      	cmp	r1, r0
 800a268:	d1f0      	bne.n	800a24c <HAL_JPEG_Init+0x74>
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a26a:	4b6f      	ldr	r3, [pc, #444]	@ (800a428 <HAL_JPEG_Init+0x250>)
  address = (hjpeg->Instance->DHTMEM + 10UL);
 800a26c:	f504 7162 	add.w	r1, r4, #904	@ 0x388
 800a270:	4a6e      	ldr	r2, [pc, #440]	@ (800a42c <HAL_JPEG_Init+0x254>)
 800a272:	f504 775e 	add.w	r7, r4, #888	@ 0x378
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a276:	f8c4 3378 	str.w	r3, [r4, #888]	@ 0x378
 800a27a:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
  address = (hjpeg->Instance->DHTMEM + 10UL);
 800a27e:	4610      	mov	r0, r2
 800a280:	460e      	mov	r6, r1
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a282:	f8c4 3374 	str.w	r3, [r4, #884]	@ 0x374
 800a286:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
 800a28a:	f8c4 3370 	str.w	r3, [r4, #880]	@ 0x370
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800a28e:	7b83      	ldrb	r3, [r0, #14]
  while (index > 3UL)
 800a290:	3804      	subs	r0, #4
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a292:	f890 c013 	ldrb.w	ip, [r0, #19]
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800a296:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a298:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 800a29c:	f890 c010 	ldrb.w	ip, [r0, #16]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800a2a0:	ea43 030c 	orr.w	r3, r3, ip
 800a2a4:	f890 c011 	ldrb.w	ip, [r0, #17]
 800a2a8:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a2ac:	f846 3904 	str.w	r3, [r6], #-4
  while (index > 3UL)
 800a2b0:	42be      	cmp	r6, r7
 800a2b2:	d1ec      	bne.n	800a28e <HAL_JPEG_Init+0xb6>
  value = *address & 0xFFFF0000U;
 800a2b4:	f8d4 342c 	ldr.w	r3, [r4, #1068]	@ 0x42c
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 800a2b8:	f504 6085 	add.w	r0, r4, #1064	@ 0x428
  value = *address & 0xFFFF0000U;
 800a2bc:	0c1b      	lsrs	r3, r3, #16
 800a2be:	041b      	lsls	r3, r3, #16
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 800a2c0:	f443 437a 	orr.w	r3, r3, #64000	@ 0xfa00
 800a2c4:	f043 03f9 	orr.w	r3, r3, #249	@ 0xf9
  *address = value;
 800a2c8:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800a2cc:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
  while (index > 3UL)
 800a2d0:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a2d2:	f892 60b3 	ldrb.w	r6, [r2, #179]	@ 0xb3
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800a2d6:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a2d8:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 800a2dc:	f892 60b0 	ldrb.w	r6, [r2, #176]	@ 0xb0
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800a2e0:	4333      	orrs	r3, r6
 800a2e2:	f892 60b1 	ldrb.w	r6, [r2, #177]	@ 0xb1
 800a2e6:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a2ea:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
 800a2ee:	4281      	cmp	r1, r0
 800a2f0:	d1ec      	bne.n	800a2cc <HAL_JPEG_Init+0xf4>
  value = *address & 0x0000FFFFU;
 800a2f2:	f8d4 342c 	ldr.w	r3, [r4, #1068]	@ 0x42c
  address = (hjpeg->Instance->DHTMEM + 102);
 800a2f6:	f504 619f 	add.w	r1, r4, #1272	@ 0x4f8
  value = *address & 0xFFFF0000U;
 800a2fa:	4a4d      	ldr	r2, [pc, #308]	@ (800a430 <HAL_JPEG_Init+0x258>)
 800a2fc:	f504 608b 	add.w	r0, r4, #1112	@ 0x458
  value = *address & 0x0000FFFFU;
 800a300:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 800a302:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
  *address = value;
 800a306:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
  value = *address & 0xFFFF0000U;
 800a30a:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 800a30e:	4013      	ands	r3, r2
  *address = value;
 800a310:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a314:	2301      	movs	r3, #1
 800a316:	f8c4 3438 	str.w	r3, [r4, #1080]	@ 0x438
 800a31a:	f04f 3301 	mov.w	r3, #16843009	@ 0x1010101
 800a31e:	f8c4 3434 	str.w	r3, [r4, #1076]	@ 0x434
 800a322:	f8c4 3430 	str.w	r3, [r4, #1072]	@ 0x430
  value = *address & 0x0000FFFFUL;
 800a326:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 800a32a:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 800a32c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 800a330:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
  value = *address & 0xFFFF0000UL;
 800a334:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 800a338:	4013      	ands	r3, r2
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 800a33a:	f443 6330 	orr.w	r3, r3, #2816	@ 0xb00
 800a33e:	f043 030a 	orr.w	r3, r3, #10
  *address = value;
 800a342:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a346:	4b3b      	ldr	r3, [pc, #236]	@ (800a434 <HAL_JPEG_Init+0x25c>)
 800a348:	f8c4 3444 	str.w	r3, [r4, #1092]	@ 0x444
 800a34c:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
 800a350:	f8c4 3440 	str.w	r3, [r4, #1088]	@ 0x440
  value = *address & 0x0000FFFFU;
 800a354:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 800a358:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 800a35a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
  *address = value;
 800a35e:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
  value = *address & 0xFFFF0000U;
 800a362:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
 800a366:	4013      	ands	r3, r2
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 800a368:	4a33      	ldr	r2, [pc, #204]	@ (800a438 <HAL_JPEG_Init+0x260>)
 800a36a:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 800a36e:	f043 0302 	orr.w	r3, r3, #2
  *address = value;
 800a372:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a376:	4b31      	ldr	r3, [pc, #196]	@ (800a43c <HAL_JPEG_Init+0x264>)
 800a378:	f8c4 3454 	str.w	r3, [r4, #1108]	@ 0x454
 800a37c:	4b30      	ldr	r3, [pc, #192]	@ (800a440 <HAL_JPEG_Init+0x268>)
 800a37e:	f8c4 3450 	str.w	r3, [r4, #1104]	@ 0x450
 800a382:	4b30      	ldr	r3, [pc, #192]	@ (800a444 <HAL_JPEG_Init+0x26c>)
 800a384:	f8c4 344c 	str.w	r3, [r4, #1100]	@ 0x44c
  value = *address & 0x0000FFFFUL;
 800a388:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
 800a38c:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 800a38e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 800a392:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800a396:	f892 30b0 	ldrb.w	r3, [r2, #176]	@ 0xb0
  while (index > 3UL)
 800a39a:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a39c:	f892 60b5 	ldrb.w	r6, [r2, #181]	@ 0xb5
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800a3a0:	041b      	lsls	r3, r3, #16
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800a3a2:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 800a3a6:	f892 60b2 	ldrb.w	r6, [r2, #178]	@ 0xb2
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800a3aa:	4333      	orrs	r3, r6
 800a3ac:	f892 60b3 	ldrb.w	r6, [r2, #179]	@ 0xb3
 800a3b0:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a3b4:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 800a3b8:	4281      	cmp	r1, r0
 800a3ba:	d1ec      	bne.n	800a396 <HAL_JPEG_Init+0x1be>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 800a3bc:	f504 62a0 	add.w	r2, r4, #1280	@ 0x500
 800a3c0:	491a      	ldr	r1, [pc, #104]	@ (800a42c <HAL_JPEG_Init+0x254>)
 800a3c2:	4628      	mov	r0, r5
 800a3c4:	f7ff fe08 	bl	8009fd8 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 800a3c8:	b118      	cbz	r0, 800a3d2 <HAL_JPEG_Init+0x1fa>
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	652b      	str	r3, [r5, #80]	@ 0x50
    return HAL_ERROR;
 800a3ce:	2001      	movs	r0, #1
}
 800a3d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 800a3d2:	f504 62cc 	add.w	r2, r4, #1632	@ 0x660
 800a3d6:	4918      	ldr	r1, [pc, #96]	@ (800a438 <HAL_JPEG_Init+0x260>)
 800a3d8:	4628      	mov	r0, r5
 800a3da:	f7ff fdfd 	bl	8009fd8 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 800a3de:	2800      	cmp	r0, #0
 800a3e0:	d1f3      	bne.n	800a3ca <HAL_JPEG_Init+0x1f2>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 800a3e2:	f504 62f8 	add.w	r2, r4, #1984	@ 0x7c0
 800a3e6:	490d      	ldr	r1, [pc, #52]	@ (800a41c <HAL_JPEG_Init+0x244>)
 800a3e8:	4628      	mov	r0, r5
 800a3ea:	f7ff fdbd 	bl	8009f68 <JPEG_Set_HuffDC_Mem>
  if (error != HAL_OK)
 800a3ee:	2800      	cmp	r0, #0
 800a3f0:	d1eb      	bne.n	800a3ca <HAL_JPEG_Init+0x1f2>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 800a3f2:	f504 62fc 	add.w	r2, r4, #2016	@ 0x7e0
 800a3f6:	4914      	ldr	r1, [pc, #80]	@ (800a448 <HAL_JPEG_Init+0x270>)
 800a3f8:	4628      	mov	r0, r5
 800a3fa:	f7ff fdb5 	bl	8009f68 <JPEG_Set_HuffDC_Mem>
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 800a3fe:	2800      	cmp	r0, #0
 800a400:	d1e3      	bne.n	800a3ca <HAL_JPEG_Init+0x1f2>
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 800a402:	6863      	ldr	r3, [r4, #4]
 800a404:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a408:	6063      	str	r3, [r4, #4]
  hjpeg->State = HAL_JPEG_STATE_READY;
 800a40a:	2301      	movs	r3, #1
  hjpeg->JpegInCount = 0;
 800a40c:	6228      	str	r0, [r5, #32]
  hjpeg->JpegOutCount = 0;
 800a40e:	6268      	str	r0, [r5, #36]	@ 0x24
  hjpeg->State = HAL_JPEG_STATE_READY;
 800a410:	f885 304d 	strb.w	r3, [r5, #77]	@ 0x4d
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 800a414:	6528      	str	r0, [r5, #80]	@ 0x50
  hjpeg->Context = 0;
 800a416:	6568      	str	r0, [r5, #84]	@ 0x54
  return HAL_OK;
 800a418:	e7da      	b.n	800a3d0 <HAL_JPEG_Init+0x1f8>
 800a41a:	bf00      	nop
 800a41c:	0802a061 	.word	0x0802a061
 800a420:	08029e61 	.word	0x08029e61
 800a424:	08029e21 	.word	0x08029e21
 800a428:	0b0a0908 	.word	0x0b0a0908
 800a42c:	08029f93 	.word	0x08029f93
 800a430:	ffff0000 	.word	0xffff0000
 800a434:	09080706 	.word	0x09080706
 800a438:	08029ee1 	.word	0x08029ee1
 800a43c:	01000404 	.word	0x01000404
 800a440:	05070403 	.word	0x05070403
 800a444:	04040201 	.word	0x04040201
 800a448:	0802a045 	.word	0x0802a045

0800a44c <HAL_JPEG_GetInfo>:
{
 800a44c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((hjpeg == NULL) || (pInfo == NULL))
 800a450:	2800      	cmp	r0, #0
 800a452:	d06f      	beq.n	800a534 <HAL_JPEG_GetInfo+0xe8>
 800a454:	2900      	cmp	r1, #0
 800a456:	d06d      	beq.n	800a534 <HAL_JPEG_GetInfo+0xe8>
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 800a458:	6804      	ldr	r4, [r0, #0]
 800a45a:	6863      	ldr	r3, [r4, #4]
 800a45c:	f003 0303 	and.w	r3, r3, #3
 800a460:	2b02      	cmp	r3, #2
 800a462:	d047      	beq.n	800a4f4 <HAL_JPEG_GetInfo+0xa8>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 800a464:	6863      	ldr	r3, [r4, #4]
 800a466:	f013 0303 	ands.w	r3, r3, #3
 800a46a:	d005      	beq.n	800a478 <HAL_JPEG_GetInfo+0x2c>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 800a46c:	6863      	ldr	r3, [r4, #4]
 800a46e:	f003 0303 	and.w	r3, r3, #3
 800a472:	2b03      	cmp	r3, #3
 800a474:	d15e      	bne.n	800a534 <HAL_JPEG_GetInfo+0xe8>
 800a476:	2330      	movs	r3, #48	@ 0x30
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800a478:	6862      	ldr	r2, [r4, #4]
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 800a47a:	600b      	str	r3, [r1, #0]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 800a47c:	f023 0320 	bic.w	r3, r3, #32
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800a480:	0c12      	lsrs	r2, r2, #16
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 800a482:	2b10      	cmp	r3, #16
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800a484:	608a      	str	r2, [r1, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 800a486:	68e2      	ldr	r2, [r4, #12]
 800a488:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800a48c:	60ca      	str	r2, [r1, #12]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 800a48e:	d13c      	bne.n	800a50a <HAL_JPEG_GetInfo+0xbe>
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 800a490:	6925      	ldr	r5, [r4, #16]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 800a492:	6963      	ldr	r3, [r4, #20]
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 800a494:	f3c5 1503 	ubfx	r5, r5, #4, #4
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 800a498:	69a2      	ldr	r2, [r4, #24]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 800a49a:	091b      	lsrs	r3, r3, #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800a49c:	2d01      	cmp	r5, #1
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 800a49e:	ea4f 1212 	mov.w	r2, r2, lsr #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800a4a2:	d129      	bne.n	800a4f8 <HAL_JPEG_GetInfo+0xac>
 800a4a4:	4313      	orrs	r3, r2
 800a4a6:	f013 0f0f 	tst.w	r3, #15
 800a4aa:	bf0c      	ite	eq
 800a4ac:	2301      	moveq	r3, #1
 800a4ae:	2300      	movne	r3, #0
 800a4b0:	005b      	lsls	r3, r3, #1
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 800a4b2:	604b      	str	r3, [r1, #4]
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
  uint32_t quality = 0;
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	3450      	adds	r4, #80	@ 0x50
 800a4b8:	f8df c07c 	ldr.w	ip, [pc, #124]	@ 800a538 <HAL_JPEG_GetInfo+0xec>
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;

  i = 0;
 800a4bc:	461d      	mov	r5, r3
        quality += 100UL;
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800a4be:	f04f 0e64 	mov.w	lr, #100	@ 0x64
        {
          quality += (200UL - scale) / 2UL;
        }
        else
        {
          quality += 5000UL / scale;
 800a4c2:	f241 3888 	movw	r8, #5000	@ 0x1388
    quantRow = *tableAddress;
 800a4c6:	f854 9005 	ldr.w	r9, [r4, r5]
    for (j = 0; j < 4UL; j++)
 800a4ca:	eb05 070c 	add.w	r7, r5, ip
    quantRow = *tableAddress;
 800a4ce:	2600      	movs	r6, #0
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 800a4d0:	fa29 f206 	lsr.w	r2, r9, r6
 800a4d4:	b2d2      	uxtb	r2, r2
      if (quantVal == 1UL)
 800a4d6:	2a01      	cmp	r2, #1
 800a4d8:	d119      	bne.n	800a50e <HAL_JPEG_GetInfo+0xc2>
        quality += 100UL;
 800a4da:	3364      	adds	r3, #100	@ 0x64
    for (j = 0; j < 4UL; j++)
 800a4dc:	3608      	adds	r6, #8
 800a4de:	3701      	adds	r7, #1
 800a4e0:	2e20      	cmp	r6, #32
 800a4e2:	d1f5      	bne.n	800a4d0 <HAL_JPEG_GetInfo+0x84>
        }
      }
    }

    i += 4UL;
 800a4e4:	3504      	adds	r5, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800a4e6:	2d40      	cmp	r5, #64	@ 0x40
 800a4e8:	d1ed      	bne.n	800a4c6 <HAL_JPEG_GetInfo+0x7a>
    tableAddress ++;
  }

  return (quality / 64UL);
 800a4ea:	099b      	lsrs	r3, r3, #6
  return HAL_OK;
 800a4ec:	2000      	movs	r0, #0
  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 800a4ee:	610b      	str	r3, [r1, #16]
}
 800a4f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4f4:	2310      	movs	r3, #16
 800a4f6:	e7bf      	b.n	800a478 <HAL_JPEG_GetInfo+0x2c>
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800a4f8:	2d03      	cmp	r5, #3
 800a4fa:	d106      	bne.n	800a50a <HAL_JPEG_GetInfo+0xbe>
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800a4fc:	4313      	orrs	r3, r2
 800a4fe:	f013 0f0f 	tst.w	r3, #15
 800a502:	bf0c      	ite	eq
 800a504:	2301      	moveq	r3, #1
 800a506:	2300      	movne	r3, #0
 800a508:	e7d3      	b.n	800a4b2 <HAL_JPEG_GetInfo+0x66>
 800a50a:	2300      	movs	r3, #0
 800a50c:	e7d1      	b.n	800a4b2 <HAL_JPEG_GetInfo+0x66>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800a50e:	fb0e fb02 	mul.w	fp, lr, r2
 800a512:	f897 a000 	ldrb.w	sl, [r7]
 800a516:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a518:	f812 a00a 	ldrb.w	sl, [r2, sl]
 800a51c:	fbbb f2fa 	udiv	r2, fp, sl
        if (scale <= 100UL)
 800a520:	2a64      	cmp	r2, #100	@ 0x64
          quality += 5000UL / scale;
 800a522:	bf8b      	itete	hi
 800a524:	fbb8 f2f2 	udivhi	r2, r8, r2
          quality += (200UL - scale) / 2UL;
 800a528:	f1c2 02c8 	rsbls	r2, r2, #200	@ 0xc8
          quality += 5000UL / scale;
 800a52c:	189b      	addhi	r3, r3, r2
          quality += (200UL - scale) / 2UL;
 800a52e:	eb03 0352 	addls.w	r3, r3, r2, lsr #1
          quality += 5000UL / scale;
 800a532:	e7d3      	b.n	800a4dc <HAL_JPEG_GetInfo+0x90>
    return HAL_ERROR;
 800a534:	2001      	movs	r0, #1
 800a536:	e7db      	b.n	800a4f0 <HAL_JPEG_GetInfo+0xa4>
 800a538:	08029ea1 	.word	0x08029ea1

0800a53c <HAL_JPEG_Decode_DMA>:
{
 800a53c:	b538      	push	{r3, r4, r5, lr}
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 800a53e:	4604      	mov	r4, r0
 800a540:	b348      	cbz	r0, 800a596 <HAL_JPEG_Decode_DMA+0x5a>
 800a542:	b341      	cbz	r1, 800a596 <HAL_JPEG_Decode_DMA+0x5a>
 800a544:	b33b      	cbz	r3, 800a596 <HAL_JPEG_Decode_DMA+0x5a>
  __HAL_LOCK(hjpeg);
 800a546:	f890 504c 	ldrb.w	r5, [r0, #76]	@ 0x4c
 800a54a:	2d01      	cmp	r5, #1
 800a54c:	d028      	beq.n	800a5a0 <HAL_JPEG_Decode_DMA+0x64>
 800a54e:	2501      	movs	r5, #1
 800a550:	f880 504c 	strb.w	r5, [r0, #76]	@ 0x4c
  if (hjpeg->State == HAL_JPEG_STATE_READY)
 800a554:	f890 504d 	ldrb.w	r5, [r0, #77]	@ 0x4d
 800a558:	2d01      	cmp	r5, #1
 800a55a:	d11e      	bne.n	800a59a <HAL_JPEG_Decode_DMA+0x5e>
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 800a55c:	2504      	movs	r5, #4
    hjpeg->InDataLength = InDataLength;
 800a55e:	6282      	str	r2, [r0, #40]	@ 0x28
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 800a560:	f880 504d 	strb.w	r5, [r0, #77]	@ 0x4d
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 800a564:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 800a566:	f025 050f 	bic.w	r5, r5, #15
 800a56a:	6545      	str	r5, [r0, #84]	@ 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 800a56c:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 800a56e:	f045 050e 	orr.w	r5, r5, #14
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 800a572:	e9c0 1306 	strd	r1, r3, [r0, #24]
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 800a576:	6545      	str	r5, [r0, #84]	@ 0x54
    hjpeg->JpegInCount = 0;
 800a578:	2500      	movs	r5, #0
    hjpeg->OutDataLength = OutDataLength;
 800a57a:	9b04      	ldr	r3, [sp, #16]
    hjpeg->JpegInCount = 0;
 800a57c:	6205      	str	r5, [r0, #32]
    hjpeg->OutDataLength = OutDataLength;
 800a57e:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hjpeg->JpegOutCount = 0;
 800a580:	6245      	str	r5, [r0, #36]	@ 0x24
    JPEG_Init_Process(hjpeg);
 800a582:	f7ff fda1 	bl	800a0c8 <JPEG_Init_Process>
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 800a586:	f7ff fddf 	bl	800a148 <JPEG_DMA_StartProcess>
 800a58a:	b128      	cbz	r0, 800a598 <HAL_JPEG_Decode_DMA+0x5c>
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 800a58c:	2306      	movs	r3, #6
      __HAL_UNLOCK(hjpeg);
 800a58e:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 800a592:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    return HAL_ERROR;
 800a596:	2001      	movs	r0, #1
}
 800a598:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UNLOCK(hjpeg);
 800a59a:	2300      	movs	r3, #0
 800a59c:	f880 304c 	strb.w	r3, [r0, #76]	@ 0x4c
  __HAL_LOCK(hjpeg);
 800a5a0:	2002      	movs	r0, #2
 800a5a2:	e7f9      	b.n	800a598 <HAL_JPEG_Decode_DMA+0x5c>

0800a5a4 <HAL_JPEG_Pause>:
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800a5a4:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800a5a6:	f003 030c 	and.w	r3, r3, #12
 800a5aa:	2b0c      	cmp	r3, #12
 800a5ac:	d117      	bne.n	800a5de <HAL_JPEG_Pause+0x3a>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800a5ae:	f011 0301 	ands.w	r3, r1, #1
 800a5b2:	d005      	beq.n	800a5c0 <HAL_JPEG_Pause+0x1c>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800a5b4:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800a5b6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800a5ba:	6543      	str	r3, [r0, #84]	@ 0x54
      mask |= JPEG_DMA_IDMA;
 800a5bc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800a5c0:	0789      	lsls	r1, r1, #30
 800a5c2:	d505      	bpl.n	800a5d0 <HAL_JPEG_Pause+0x2c>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800a5c4:	6d42      	ldr	r2, [r0, #84]	@ 0x54
      mask |= JPEG_DMA_ODMA;
 800a5c6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800a5ca:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a5ce:	6542      	str	r2, [r0, #84]	@ 0x54
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 800a5d0:	6801      	ldr	r1, [r0, #0]
 800a5d2:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800a5d4:	ea22 0303 	bic.w	r3, r2, r3
 800a5d8:	630b      	str	r3, [r1, #48]	@ 0x30
}
 800a5da:	2000      	movs	r0, #0
 800a5dc:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800a5de:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800a5e0:	f003 030c 	and.w	r3, r3, #12
 800a5e4:	2b08      	cmp	r3, #8
 800a5e6:	d1f8      	bne.n	800a5da <HAL_JPEG_Pause+0x36>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800a5e8:	f011 0301 	ands.w	r3, r1, #1
 800a5ec:	d004      	beq.n	800a5f8 <HAL_JPEG_Pause+0x54>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800a5ee:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800a5f0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800a5f4:	6543      	str	r3, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800a5f6:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800a5f8:	078a      	lsls	r2, r1, #30
 800a5fa:	d5e9      	bpl.n	800a5d0 <HAL_JPEG_Pause+0x2c>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800a5fc:	6d42      	ldr	r2, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800a5fe:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800a602:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a606:	6542      	str	r2, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800a608:	e7e2      	b.n	800a5d0 <HAL_JPEG_Pause+0x2c>

0800a60a <HAL_JPEG_ConfigInputBuffer>:
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 800a60a:	6181      	str	r1, [r0, #24]
  hjpeg->InDataLength = InDataLength;
 800a60c:	6282      	str	r2, [r0, #40]	@ 0x28
}
 800a60e:	4770      	bx	lr

0800a610 <HAL_JPEG_ConfigOutputBuffer>:
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 800a610:	61c1      	str	r1, [r0, #28]
  hjpeg->OutDataLength = OutDataLength;
 800a612:	62c2      	str	r2, [r0, #44]	@ 0x2c
}
 800a614:	4770      	bx	lr

0800a616 <HAL_JPEG_EncodeCpltCallback>:
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
 800a616:	4770      	bx	lr

0800a618 <JPEG_DMAErrorCallback>:
{
 800a618:	b510      	push	{r4, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a61a:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800a61c:	f7fe f8d4 	bl	80087c8 <HAL_DMA_GetError>
 800a620:	2802      	cmp	r0, #2
 800a622:	d016      	beq.n	800a652 <JPEG_DMAErrorCallback+0x3a>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800a624:	6823      	ldr	r3, [r4, #0]
    HAL_JPEG_ErrorCallback(hjpeg);
 800a626:	4620      	mov	r0, r4
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800a628:	681a      	ldr	r2, [r3, #0]
 800a62a:	f022 0201 	bic.w	r2, r2, #1
 800a62e:	601a      	str	r2, [r3, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800a630:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a632:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800a636:	631a      	str	r2, [r3, #48]	@ 0x30
    JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_MASK);
 800a638:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a63a:	f422 52c0 	bic.w	r2, r2, #6144	@ 0x1800
 800a63e:	631a      	str	r2, [r3, #48]	@ 0x30
    hjpeg->State = HAL_JPEG_STATE_READY;
 800a640:	2301      	movs	r3, #1
 800a642:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800a646:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800a648:	f043 0304 	orr.w	r3, r3, #4
 800a64c:	6523      	str	r3, [r4, #80]	@ 0x50
    HAL_JPEG_ErrorCallback(hjpeg);
 800a64e:	f7f7 f8d5 	bl	80017fc <HAL_JPEG_ErrorCallback>
}
 800a652:	bd10      	pop	{r4, pc}

0800a654 <JPEG_ReadInputData>:
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800a654:	6a82      	ldr	r2, [r0, #40]	@ 0x28
{
 800a656:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a658:	4604      	mov	r4, r0
 800a65a:	460d      	mov	r5, r1
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800a65c:	b922      	cbnz	r2, 800a668 <JPEG_ReadInputData+0x14>
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 800a65e:	2101      	movs	r1, #1
 800a660:	f7ff ffa0 	bl	800a5a4 <HAL_JPEG_Pause>
  uint32_t nb_bytes = 0;
 800a664:	2200      	movs	r2, #0
 800a666:	e004      	b.n	800a672 <JPEG_ReadInputData+0x1e>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 800a668:	6a03      	ldr	r3, [r0, #32]
 800a66a:	429a      	cmp	r2, r3
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 800a66c:	6a03      	ldr	r3, [r0, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 800a66e:	d924      	bls.n	800a6ba <JPEG_ReadInputData+0x66>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 800a670:	1ad2      	subs	r2, r2, r3
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 800a672:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800a674:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
 800a678:	d11e      	bne.n	800a6b8 <JPEG_ReadInputData+0x64>
 800a67a:	b1ea      	cbz	r2, 800a6b8 <JPEG_ReadInputData+0x64>
    if (nb_words >= nbRequestWords)
 800a67c:	ebb5 0f92 	cmp.w	r5, r2, lsr #2
 800a680:	69a1      	ldr	r1, [r4, #24]
    nb_words = nb_bytes / 4UL;
 800a682:	ea4f 0692 	mov.w	r6, r2, lsr #2
    if (nb_words >= nbRequestWords)
 800a686:	d827      	bhi.n	800a6d8 <JPEG_ReadInputData+0x84>
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a688:	6827      	ldr	r7, [r4, #0]
        input_count = hjpeg->JpegInCount;
 800a68a:	6a26      	ldr	r6, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 800a68c:	3301      	adds	r3, #1
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800a68e:	1988      	adds	r0, r1, r6
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a690:	5d8e      	ldrb	r6, [r1, r6]
      for (index = 0; index < nbRequestWords; index++)
 800a692:	429d      	cmp	r5, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800a694:	7882      	ldrb	r2, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800a696:	f890 c001 	ldrb.w	ip, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800a69a:	ea4f 4202 	mov.w	r2, r2, lsl #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800a69e:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800a6a0:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 800a6a4:	ea42 0206 	orr.w	r2, r2, r6
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800a6a8:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a6ac:	643a      	str	r2, [r7, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 800a6ae:	6a22      	ldr	r2, [r4, #32]
 800a6b0:	f102 0204 	add.w	r2, r2, #4
 800a6b4:	6222      	str	r2, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 800a6b6:	d1e8      	bne.n	800a68a <JPEG_ReadInputData+0x36>
}
 800a6b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 800a6ba:	429a      	cmp	r2, r3
 800a6bc:	d1d2      	bne.n	800a664 <JPEG_ReadInputData+0x10>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800a6be:	6a01      	ldr	r1, [r0, #32]
 800a6c0:	f7f7 f844 	bl	800174c <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
 800a6c4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800a6c6:	2b04      	cmp	r3, #4
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800a6c8:	bf84      	itt	hi
 800a6ca:	f023 0303 	bichi.w	r3, r3, #3
 800a6ce:	62a3      	strhi	r3, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 800a6d0:	2300      	movs	r3, #0
    nb_bytes = hjpeg->InDataLength;
 800a6d2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 800a6d4:	6223      	str	r3, [r4, #32]
    nb_bytes = hjpeg->InDataLength;
 800a6d6:	e7cc      	b.n	800a672 <JPEG_ReadInputData+0x1e>
      if (nb_words > 0UL)
 800a6d8:	2a03      	cmp	r2, #3
 800a6da:	d918      	bls.n	800a70e <JPEG_ReadInputData+0xba>
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a6dc:	6827      	ldr	r7, [r4, #0]
          input_count = hjpeg->JpegInCount;
 800a6de:	6a25      	ldr	r5, [r4, #32]
        for (index = 0; index < nb_words; index++)
 800a6e0:	3301      	adds	r3, #1
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800a6e2:	1948      	adds	r0, r1, r5
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a6e4:	5d4d      	ldrb	r5, [r1, r5]
        for (index = 0; index < nb_words; index++)
 800a6e6:	429e      	cmp	r6, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800a6e8:	7882      	ldrb	r2, [r0, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800a6ea:	f890 c001 	ldrb.w	ip, [r0, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800a6ee:	ea4f 4202 	mov.w	r2, r2, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800a6f2:	78c0      	ldrb	r0, [r0, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800a6f4:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 800a6f8:	ea42 0205 	orr.w	r2, r2, r5
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800a6fc:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a700:	643a      	str	r2, [r7, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 800a702:	6a22      	ldr	r2, [r4, #32]
 800a704:	f102 0204 	add.w	r2, r2, #4
 800a708:	6222      	str	r2, [r4, #32]
        for (index = 0; index < nb_words; index++)
 800a70a:	d1e8      	bne.n	800a6de <JPEG_ReadInputData+0x8a>
 800a70c:	e7d4      	b.n	800a6b8 <JPEG_ReadInputData+0x64>
        for (index = 0; index < nb_bytes; index++)
 800a70e:	4618      	mov	r0, r3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800a710:	6a25      	ldr	r5, [r4, #32]
 800a712:	00c6      	lsls	r6, r0, #3
        for (index = 0; index < nb_bytes; index++)
 800a714:	3001      	adds	r0, #1
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800a716:	5d4d      	ldrb	r5, [r1, r5]
        for (index = 0; index < nb_bytes; index++)
 800a718:	4282      	cmp	r2, r0
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800a71a:	fa05 f506 	lsl.w	r5, r5, r6
 800a71e:	ea43 0305 	orr.w	r3, r3, r5
          hjpeg->JpegInCount++;
 800a722:	6a25      	ldr	r5, [r4, #32]
 800a724:	f105 0501 	add.w	r5, r5, #1
 800a728:	6225      	str	r5, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 800a72a:	d1f1      	bne.n	800a710 <JPEG_ReadInputData+0xbc>
        hjpeg->Instance->DIR = dataword;
 800a72c:	6822      	ldr	r2, [r4, #0]
 800a72e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800a730:	e7c2      	b.n	800a6b8 <JPEG_ReadInputData+0x64>
	...

0800a734 <JPEG_DMAInCpltCallback>:
{
 800a734:	b510      	push	{r4, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a736:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800a738:	6823      	ldr	r3, [r4, #0]
 800a73a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a73c:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800a740:	631a      	str	r2, [r3, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 800a742:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a744:	f422 42ff 	bic.w	r2, r2, #32640	@ 0x7f80
 800a748:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 800a74c:	0412      	lsls	r2, r2, #16
 800a74e:	0c12      	lsrs	r2, r2, #16
 800a750:	2a0c      	cmp	r2, #12
 800a752:	d12c      	bne.n	800a7ae <JPEG_DMAInCpltCallback+0x7a>
    JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_IDMA);
 800a754:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a756:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a75a:	631a      	str	r2, [r3, #48]	@ 0x30
    hjpeg->JpegInCount = hjpeg->InDataLength - ((hdma->Instance->NDTR & DMA_SxNDT) << 2);
 800a75c:	6803      	ldr	r3, [r0, #0]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800a75e:	4620      	mov	r0, r4
    hjpeg->JpegInCount = hjpeg->InDataLength - ((hdma->Instance->NDTR & DMA_SxNDT) << 2);
 800a760:	4a1b      	ldr	r2, [pc, #108]	@ (800a7d0 <JPEG_DMAInCpltCallback+0x9c>)
 800a762:	685b      	ldr	r3, [r3, #4]
 800a764:	ea02 0283 	and.w	r2, r2, r3, lsl #2
 800a768:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800a76a:	1a9b      	subs	r3, r3, r2
 800a76c:	6223      	str	r3, [r4, #32]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800a76e:	6a21      	ldr	r1, [r4, #32]
 800a770:	f7f6 ffec 	bl	800174c <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength >= 4UL)
 800a774:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800a776:	2b03      	cmp	r3, #3
 800a778:	d91a      	bls.n	800a7b0 <JPEG_DMAInCpltCallback+0x7c>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800a77a:	f023 0303 	bic.w	r3, r3, #3
      hjpeg->InDataLength = 4;
 800a77e:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 800a780:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800a782:	6822      	ldr	r2, [r4, #0]
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 800a784:	04db      	lsls	r3, r3, #19
 800a786:	d41c      	bmi.n	800a7c2 <JPEG_DMAInCpltCallback+0x8e>
 800a788:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800a78a:	b1d3      	cbz	r3, 800a7c2 <JPEG_DMAInCpltCallback+0x8e>
      if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800a78c:	089b      	lsrs	r3, r3, #2
 800a78e:	3240      	adds	r2, #64	@ 0x40
 800a790:	69a1      	ldr	r1, [r4, #24]
 800a792:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800a794:	f7fd ff0a 	bl	80085ac <HAL_DMA_Start_IT>
 800a798:	b170      	cbz	r0, 800a7b8 <JPEG_DMAInCpltCallback+0x84>
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800a79a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
        HAL_JPEG_ErrorCallback(hjpeg);
 800a79c:	4620      	mov	r0, r4
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800a79e:	f043 0304 	orr.w	r3, r3, #4
 800a7a2:	6523      	str	r3, [r4, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800a7a4:	2306      	movs	r3, #6
 800a7a6:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
        HAL_JPEG_ErrorCallback(hjpeg);
 800a7aa:	f7f7 f827 	bl	80017fc <HAL_JPEG_ErrorCallback>
}
 800a7ae:	bd10      	pop	{r4, pc}
    else if (hjpeg->InDataLength > 0UL)
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d0e5      	beq.n	800a780 <JPEG_DMAInCpltCallback+0x4c>
      hjpeg->InDataLength = 4;
 800a7b4:	2304      	movs	r3, #4
 800a7b6:	e7e2      	b.n	800a77e <JPEG_DMAInCpltCallback+0x4a>
      JPEG_ENABLE_DMA(hjpeg, JPEG_DMA_IDMA);
 800a7b8:	6822      	ldr	r2, [r4, #0]
 800a7ba:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800a7bc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800a7c0:	6313      	str	r3, [r2, #48]	@ 0x30
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800a7c2:	6822      	ldr	r2, [r4, #0]
 800a7c4:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800a7c6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800a7ca:	6313      	str	r3, [r2, #48]	@ 0x30
 800a7cc:	e7ef      	b.n	800a7ae <JPEG_DMAInCpltCallback+0x7a>
 800a7ce:	bf00      	nop
 800a7d0:	0003fffc 	.word	0x0003fffc

0800a7d4 <JPEG_StoreOutputData>:
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800a7d4:	6a42      	ldr	r2, [r0, #36]	@ 0x24
{
 800a7d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800a7d8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800a7dc:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
{
 800a7de:	4604      	mov	r4, r0
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800a7e0:	4293      	cmp	r3, r2
 800a7e2:	d32a      	bcc.n	800a83a <JPEG_StoreOutputData+0x66>
    for (index = 0; index < nbOutputWords; index++)
 800a7e4:	2200      	movs	r2, #0
      dataword = hjpeg->Instance->DOR;
 800a7e6:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nbOutputWords; index++)
 800a7e8:	3201      	adds	r2, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800a7ea:	69e5      	ldr	r5, [r4, #28]
      dataword = hjpeg->Instance->DOR;
 800a7ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    for (index = 0; index < nbOutputWords; index++)
 800a7ee:	4291      	cmp	r1, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800a7f0:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800a7f2:	542b      	strb	r3, [r5, r0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800a7f4:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800a7f6:	69e0      	ldr	r0, [r4, #28]
 800a7f8:	4428      	add	r0, r5
 800a7fa:	ea4f 2513 	mov.w	r5, r3, lsr #8
 800a7fe:	7045      	strb	r5, [r0, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800a800:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800a802:	69e0      	ldr	r0, [r4, #28]
 800a804:	4428      	add	r0, r5
 800a806:	ea4f 4513 	mov.w	r5, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800a80a:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800a80e:	7085      	strb	r5, [r0, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800a810:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800a812:	69e0      	ldr	r0, [r4, #28]
 800a814:	4428      	add	r0, r5
 800a816:	70c3      	strb	r3, [r0, #3]
      hjpeg->JpegOutCount += 4UL;
 800a818:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a81a:	f103 0304 	add.w	r3, r3, #4
 800a81e:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 800a820:	d1e1      	bne.n	800a7e6 <JPEG_StoreOutputData+0x12>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800a822:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a824:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800a826:	429a      	cmp	r2, r3
 800a828:	d106      	bne.n	800a838 <JPEG_StoreOutputData+0x64>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a82a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800a82c:	69e1      	ldr	r1, [r4, #28]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a82e:	4620      	mov	r0, r4
 800a830:	f7f6 ffaa 	bl	8001788 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800a834:	2300      	movs	r3, #0
 800a836:	6263      	str	r3, [r4, #36]	@ 0x24
}
 800a838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 800a83a:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 800a83c:	4293      	cmp	r3, r2
 800a83e:	d9fb      	bls.n	800a838 <JPEG_StoreOutputData+0x64>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800a840:	6a42      	ldr	r2, [r0, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 800a842:	2000      	movs	r0, #0
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800a844:	1a9b      	subs	r3, r3, r2
 800a846:	089a      	lsrs	r2, r3, #2
    for (index = 0; index < nb_words; index++)
 800a848:	4290      	cmp	r0, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800a84a:	69e1      	ldr	r1, [r4, #28]
    for (index = 0; index < nb_words; index++)
 800a84c:	d105      	bne.n	800a85a <JPEG_StoreOutputData+0x86>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800a84e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800a850:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a852:	429f      	cmp	r7, r3
 800a854:	d119      	bne.n	800a88a <JPEG_StoreOutputData+0xb6>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a856:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800a858:	e7e9      	b.n	800a82e <JPEG_StoreOutputData+0x5a>
      dataword = hjpeg->Instance->DOR;
 800a85a:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nb_words; index++)
 800a85c:	3001      	adds	r0, #1
      dataword = hjpeg->Instance->DOR;
 800a85e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800a860:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800a862:	554b      	strb	r3, [r1, r5]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800a864:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800a866:	69e1      	ldr	r1, [r4, #28]
 800a868:	4429      	add	r1, r5
 800a86a:	0a1d      	lsrs	r5, r3, #8
 800a86c:	704d      	strb	r5, [r1, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800a86e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800a870:	69e1      	ldr	r1, [r4, #28]
 800a872:	4429      	add	r1, r5
 800a874:	0c1d      	lsrs	r5, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800a876:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800a878:	708d      	strb	r5, [r1, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800a87a:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800a87c:	69e1      	ldr	r1, [r4, #28]
 800a87e:	4429      	add	r1, r5
 800a880:	70cb      	strb	r3, [r1, #3]
      hjpeg->JpegOutCount += 4UL;
 800a882:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a884:	3304      	adds	r3, #4
 800a886:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 800a888:	e7de      	b.n	800a848 <JPEG_StoreOutputData+0x74>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800a88a:	6a65      	ldr	r5, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800a88c:	2200      	movs	r2, #0
      dataword = hjpeg->Instance->DOR;
 800a88e:	6823      	ldr	r3, [r4, #0]
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800a890:	1b78      	subs	r0, r7, r5
      dataword = hjpeg->Instance->DOR;
 800a892:	6c5e      	ldr	r6, [r3, #68]	@ 0x44
      for (index = 0; index < nb_bytes; index++)
 800a894:	4282      	cmp	r2, r0
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800a896:	69e1      	ldr	r1, [r4, #28]
      for (index = 0; index < nb_bytes; index++)
 800a898:	d114      	bne.n	800a8c4 <JPEG_StoreOutputData+0xf0>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a89a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800a89c:	4620      	mov	r0, r4
 800a89e:	f7f6 ff73 	bl	8001788 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	6263      	str	r3, [r4, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 800a8a6:	1d2b      	adds	r3, r5, #4
 800a8a8:	1bdb      	subs	r3, r3, r7
      for (index = nb_bytes; index < 4UL; index++)
 800a8aa:	2b03      	cmp	r3, #3
 800a8ac:	d8c4      	bhi.n	800a838 <JPEG_StoreOutputData+0x64>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800a8ae:	00da      	lsls	r2, r3, #3
 800a8b0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800a8b2:	69e0      	ldr	r0, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
 800a8b4:	3301      	adds	r3, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800a8b6:	fa26 f202 	lsr.w	r2, r6, r2
 800a8ba:	5442      	strb	r2, [r0, r1]
        hjpeg->JpegOutCount++;
 800a8bc:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800a8be:	3201      	adds	r2, #1
 800a8c0:	6262      	str	r2, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 800a8c2:	e7f2      	b.n	800a8aa <JPEG_StoreOutputData+0xd6>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800a8c4:	f002 0303 	and.w	r3, r2, #3
 800a8c8:	f8d4 c024 	ldr.w	ip, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800a8cc:	3201      	adds	r2, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800a8ce:	00db      	lsls	r3, r3, #3
 800a8d0:	fa26 f303 	lsr.w	r3, r6, r3
 800a8d4:	f801 300c 	strb.w	r3, [r1, ip]
        hjpeg->JpegOutCount++;
 800a8d8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a8da:	3301      	adds	r3, #1
 800a8dc:	6263      	str	r3, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800a8de:	e7d9      	b.n	800a894 <JPEG_StoreOutputData+0xc0>

0800a8e0 <JPEG_Process>:
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a8e0:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800a8e2:	f003 0303 	and.w	r3, r3, #3
 800a8e6:	2b02      	cmp	r3, #2
{
 800a8e8:	b510      	push	{r4, lr}
 800a8ea:	4604      	mov	r4, r0
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a8ec:	d114      	bne.n	800a918 <JPEG_Process+0x38>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800a8ee:	6803      	ldr	r3, [r0, #0]
 800a8f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8f2:	065b      	lsls	r3, r3, #25
 800a8f4:	d510      	bpl.n	800a918 <JPEG_Process+0x38>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800a8f6:	1d01      	adds	r1, r0, #4
 800a8f8:	f7ff fda8 	bl	800a44c <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 800a8fc:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800a8fe:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 800a900:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800a902:	f7f6 fed5 	bl	80016b0 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800a906:	6823      	ldr	r3, [r4, #0]
 800a908:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a90a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a90e:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800a910:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a912:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a916:	639a      	str	r2, [r3, #56]	@ 0x38
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 800a918:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800a91a:	04d9      	lsls	r1, r3, #19
 800a91c:	d407      	bmi.n	800a92e <JPEG_Process+0x4e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 800a91e:	6823      	ldr	r3, [r4, #0]
 800a920:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a922:	0792      	lsls	r2, r2, #30
 800a924:	d544      	bpl.n	800a9b0 <JPEG_Process+0xd0>
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800a926:	2104      	movs	r1, #4
      JPEG_ReadInputData(hjpeg, 1);
 800a928:	4620      	mov	r0, r4
 800a92a:	f7ff fe93 	bl	800a654 <JPEG_ReadInputData>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800a92e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800a930:	0499      	lsls	r1, r3, #18
 800a932:	d407      	bmi.n	800a944 <JPEG_Process+0x64>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 800a934:	6823      	ldr	r3, [r4, #0]
 800a936:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a938:	0712      	lsls	r2, r2, #28
 800a93a:	d53e      	bpl.n	800a9ba <JPEG_Process+0xda>
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800a93c:	2104      	movs	r1, #4
      JPEG_StoreOutputData(hjpeg, 1);
 800a93e:	4620      	mov	r0, r4
 800a940:	f7ff ff48 	bl	800a7d4 <JPEG_StoreOutputData>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 800a944:	6823      	ldr	r3, [r4, #0]
 800a946:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a948:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 800a94c:	2a20      	cmp	r2, #32
 800a94e:	d13c      	bne.n	800a9ca <JPEG_Process+0xea>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800a950:	681a      	ldr	r2, [r3, #0]
 800a952:	f022 0201 	bic.w	r2, r2, #1
 800a956:	601a      	str	r2, [r3, #0]
    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800a958:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a95a:	f002 020c 	and.w	r2, r2, #12
 800a95e:	2a08      	cmp	r2, #8
 800a960:	d103      	bne.n	800a96a <JPEG_Process+0x8a>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800a962:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a964:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800a968:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800a96a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a96c:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800a970:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->JpegOutCount > 0UL)
 800a972:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a974:	b133      	cbz	r3, 800a984 <JPEG_Process+0xa4>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a976:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800a978:	4620      	mov	r0, r4
 800a97a:	69e1      	ldr	r1, [r4, #28]
 800a97c:	f7f6 ff04 	bl	8001788 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800a980:	2300      	movs	r3, #0
 800a982:	6263      	str	r3, [r4, #36]	@ 0x24
    tmpContext = hjpeg->Context;
 800a984:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800a986:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800a988:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a98a:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800a98e:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a992:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800a994:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 800a996:	f04f 0200 	mov.w	r2, #0
 800a99a:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 800a99e:	f04f 0201 	mov.w	r2, #1
 800a9a2:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a9a6:	d10d      	bne.n	800a9c4 <JPEG_Process+0xe4>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800a9a8:	f7f6 ff2a 	bl	8001800 <HAL_JPEG_DecodeCpltCallback>
    return JPEG_PROCESS_DONE;
 800a9ac:	2001      	movs	r0, #1
}
 800a9ae:	bd10      	pop	{r4, pc}
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 800a9b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9b2:	0758      	lsls	r0, r3, #29
 800a9b4:	d5bb      	bpl.n	800a92e <JPEG_Process+0x4e>
      JPEG_ReadInputData(hjpeg, 1);
 800a9b6:	2101      	movs	r1, #1
 800a9b8:	e7b6      	b.n	800a928 <JPEG_Process+0x48>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800a9ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9bc:	06db      	lsls	r3, r3, #27
 800a9be:	d5c1      	bpl.n	800a944 <JPEG_Process+0x64>
      JPEG_StoreOutputData(hjpeg, 1);
 800a9c0:	2101      	movs	r1, #1
 800a9c2:	e7bc      	b.n	800a93e <JPEG_Process+0x5e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800a9c4:	f7ff fe27 	bl	800a616 <HAL_JPEG_EncodeCpltCallback>
 800a9c8:	e7f0      	b.n	800a9ac <JPEG_Process+0xcc>
  return JPEG_PROCESS_ONGOING;
 800a9ca:	2000      	movs	r0, #0
 800a9cc:	e7ef      	b.n	800a9ae <JPEG_Process+0xce>

0800a9ce <JPEG_DMA_PollResidualData>:
{
 800a9ce:	b570      	push	{r4, r5, r6, lr}
 800a9d0:	4604      	mov	r4, r0
 800a9d2:	2610      	movs	r6, #16
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800a9d4:	6d65      	ldr	r5, [r4, #84]	@ 0x54
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800a9d6:	6823      	ldr	r3, [r4, #0]
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800a9d8:	f415 5500 	ands.w	r5, r5, #8192	@ 0x2000
 800a9dc:	d122      	bne.n	800aa24 <JPEG_DMA_PollResidualData+0x56>
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800a9de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a9e0:	06d0      	lsls	r0, r2, #27
 800a9e2:	d51f      	bpl.n	800aa24 <JPEG_DMA_PollResidualData+0x56>
        dataOut = hjpeg->Instance->DOR;
 800a9e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 800a9e6:	69e1      	ldr	r1, [r4, #28]
 800a9e8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800a9ea:	548b      	strb	r3, [r1, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 800a9ec:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800a9ee:	69e2      	ldr	r2, [r4, #28]
 800a9f0:	440a      	add	r2, r1
 800a9f2:	0a19      	lsrs	r1, r3, #8
 800a9f4:	7051      	strb	r1, [r2, #1]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800a9f6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800a9f8:	69e2      	ldr	r2, [r4, #28]
 800a9fa:	440a      	add	r2, r1
 800a9fc:	0c19      	lsrs	r1, r3, #16
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800a9fe:	0e1b      	lsrs	r3, r3, #24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800aa00:	7091      	strb	r1, [r2, #2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800aa02:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800aa04:	69e2      	ldr	r2, [r4, #28]
 800aa06:	440a      	add	r2, r1
 800aa08:	70d3      	strb	r3, [r2, #3]
        hjpeg->JpegOutCount += 4UL;
 800aa0a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800aa0c:	3304      	adds	r3, #4
 800aa0e:	6263      	str	r3, [r4, #36]	@ 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800aa10:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800aa12:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800aa14:	429a      	cmp	r2, r3
 800aa16:	d105      	bne.n	800aa24 <JPEG_DMA_PollResidualData+0x56>
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800aa18:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800aa1a:	4620      	mov	r0, r4
 800aa1c:	69e1      	ldr	r1, [r4, #28]
 800aa1e:	f7f6 feb3 	bl	8001788 <HAL_JPEG_DataReadyCallback>
          hjpeg->JpegOutCount = 0;
 800aa22:	6265      	str	r5, [r4, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800aa24:	3e01      	subs	r6, #1
 800aa26:	d1d5      	bne.n	800a9d4 <JPEG_DMA_PollResidualData+0x6>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800aa28:	6823      	ldr	r3, [r4, #0]
  tmpContext = hjpeg->Context;
 800aa2a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800aa2c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800aa2e:	06c9      	lsls	r1, r1, #27
 800aa30:	d501      	bpl.n	800aa36 <JPEG_DMA_PollResidualData+0x68>
 800aa32:	0492      	lsls	r2, r2, #18
 800aa34:	d420      	bmi.n	800aa78 <JPEG_DMA_PollResidualData+0xaa>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800aa36:	681a      	ldr	r2, [r3, #0]
 800aa38:	f022 0201 	bic.w	r2, r2, #1
 800aa3c:	601a      	str	r2, [r3, #0]
    if (hjpeg->JpegOutCount > 0UL)
 800aa3e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800aa40:	b133      	cbz	r3, 800aa50 <JPEG_DMA_PollResidualData+0x82>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800aa42:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800aa44:	4620      	mov	r0, r4
 800aa46:	69e1      	ldr	r1, [r4, #28]
 800aa48:	f7f6 fe9e 	bl	8001788 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	6263      	str	r3, [r4, #36]	@ 0x24
    tmpContext = hjpeg->Context;
 800aa50:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800aa52:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800aa54:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800aa56:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800aa5a:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800aa5e:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800aa60:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 800aa62:	f04f 0200 	mov.w	r2, #0
 800aa66:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 800aa6a:	f04f 0201 	mov.w	r2, #1
 800aa6e:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800aa72:	d102      	bne.n	800aa7a <JPEG_DMA_PollResidualData+0xac>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800aa74:	f7f6 fec4 	bl	8001800 <HAL_JPEG_DecodeCpltCallback>
}
 800aa78:	bd70      	pop	{r4, r5, r6, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800aa7a:	f7ff fdcc 	bl	800a616 <HAL_JPEG_EncodeCpltCallback>
}
 800aa7e:	e7fb      	b.n	800aa78 <JPEG_DMA_PollResidualData+0xaa>

0800aa80 <HAL_JPEG_Resume>:
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 800aa80:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800aa82:	f413 5f40 	tst.w	r3, #12288	@ 0x3000
{
 800aa86:	b570      	push	{r4, r5, r6, lr}
 800aa88:	4604      	mov	r4, r0
 800aa8a:	460d      	mov	r5, r1
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 800aa8c:	d034      	beq.n	800aaf8 <HAL_JPEG_Resume+0x78>
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800aa8e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800aa90:	f003 030c 	and.w	r3, r3, #12
 800aa94:	2b0c      	cmp	r3, #12
 800aa96:	d13e      	bne.n	800ab16 <HAL_JPEG_Resume+0x96>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800aa98:	f011 0601 	ands.w	r6, r1, #1
 800aa9c:	d00a      	beq.n	800aab4 <HAL_JPEG_Resume+0x34>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 800aa9e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800aaa0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aaa4:	6543      	str	r3, [r0, #84]	@ 0x54
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800aaa6:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800aaa8:	f023 0303 	bic.w	r3, r3, #3
 800aaac:	6283      	str	r3, [r0, #40]	@ 0x28
      if (hjpeg->InDataLength > 0UL)
 800aaae:	b99b      	cbnz	r3, 800aad8 <HAL_JPEG_Resume+0x58>
      mask |= JPEG_DMA_IDMA;
 800aab0:	f44f 6600 	mov.w	r6, #2048	@ 0x800
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800aab4:	07a8      	lsls	r0, r5, #30
 800aab6:	d509      	bpl.n	800aacc <HAL_JPEG_Resume+0x4c>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800aab8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800aaba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800aabe:	6563      	str	r3, [r4, #84]	@ 0x54
      if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 800aac0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800aac2:	0419      	lsls	r1, r3, #16
 800aac4:	d51a      	bpl.n	800aafc <HAL_JPEG_Resume+0x7c>
        JPEG_DMA_PollResidualData(hjpeg);
 800aac6:	4620      	mov	r0, r4
 800aac8:	f7ff ff81 	bl	800a9ce <JPEG_DMA_PollResidualData>
    JPEG_ENABLE_DMA(hjpeg, mask);
 800aacc:	6822      	ldr	r2, [r4, #0]
 800aace:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800aad0:	4333      	orrs	r3, r6
 800aad2:	6313      	str	r3, [r2, #48]	@ 0x30
  return HAL_OK;
 800aad4:	2000      	movs	r0, #0
}
 800aad6:	bd70      	pop	{r4, r5, r6, pc}
        if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800aad8:	6802      	ldr	r2, [r0, #0]
 800aada:	089b      	lsrs	r3, r3, #2
 800aadc:	6981      	ldr	r1, [r0, #24]
 800aade:	3240      	adds	r2, #64	@ 0x40
 800aae0:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800aae2:	f7fd fd63 	bl	80085ac <HAL_DMA_Start_IT>
 800aae6:	2800      	cmp	r0, #0
 800aae8:	d0e2      	beq.n	800aab0 <HAL_JPEG_Resume+0x30>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800aaea:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800aaec:	f043 0304 	orr.w	r3, r3, #4
 800aaf0:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800aaf2:	2306      	movs	r3, #6
 800aaf4:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    return HAL_ERROR;
 800aaf8:	2001      	movs	r0, #1
 800aafa:	e7ec      	b.n	800aad6 <HAL_JPEG_Resume+0x56>
        if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800aafc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800aafe:	6821      	ldr	r1, [r4, #0]
 800ab00:	089b      	lsrs	r3, r3, #2
 800ab02:	69e2      	ldr	r2, [r4, #28]
 800ab04:	3144      	adds	r1, #68	@ 0x44
 800ab06:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800ab08:	f7fd fd50 	bl	80085ac <HAL_DMA_Start_IT>
 800ab0c:	2800      	cmp	r0, #0
 800ab0e:	d1ec      	bne.n	800aaea <HAL_JPEG_Resume+0x6a>
        mask |= JPEG_DMA_ODMA;
 800ab10:	f446 5680 	orr.w	r6, r6, #4096	@ 0x1000
 800ab14:	e7da      	b.n	800aacc <HAL_JPEG_Resume+0x4c>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800ab16:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800ab18:	f003 030c 	and.w	r3, r3, #12
 800ab1c:	2b08      	cmp	r3, #8
 800ab1e:	d1d9      	bne.n	800aad4 <HAL_JPEG_Resume+0x54>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800ab20:	f011 0301 	ands.w	r3, r1, #1
 800ab24:	d004      	beq.n	800ab30 <HAL_JPEG_Resume+0xb0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 800ab26:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800ab28:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ab2c:	6543      	str	r3, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800ab2e:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800ab30:	07aa      	lsls	r2, r5, #30
 800ab32:	d505      	bpl.n	800ab40 <HAL_JPEG_Resume+0xc0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800ab34:	6d62      	ldr	r2, [r4, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800ab36:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800ab3a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ab3e:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
 800ab40:	6821      	ldr	r1, [r4, #0]
 800ab42:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800ab44:	4313      	orrs	r3, r2
 800ab46:	630b      	str	r3, [r1, #48]	@ 0x30
 800ab48:	e7c4      	b.n	800aad4 <HAL_JPEG_Resume+0x54>
	...

0800ab4c <JPEG_DMA_EndProcess>:
{
 800ab4c:	b538      	push	{r3, r4, r5, lr}
  hjpeg->JpegOutCount = hjpeg->OutDataLength - ((hjpeg->hdmaout->Instance->NDTR & DMA_SxNDT) << 2);
 800ab4e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
{
 800ab50:	4604      	mov	r4, r0
  hjpeg->JpegOutCount = hjpeg->OutDataLength - ((hjpeg->hdmaout->Instance->NDTR & DMA_SxNDT) << 2);
 800ab52:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	6859      	ldr	r1, [r3, #4]
 800ab58:	4b1f      	ldr	r3, [pc, #124]	@ (800abd8 <JPEG_DMA_EndProcess+0x8c>)
 800ab5a:	ea03 0381 	and.w	r3, r3, r1, lsl #2
 800ab5e:	1ad3      	subs	r3, r2, r3
 800ab60:	6243      	str	r3, [r0, #36]	@ 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800ab62:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800ab64:	429a      	cmp	r2, r3
 800ab66:	d105      	bne.n	800ab74 <JPEG_DMA_EndProcess+0x28>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800ab68:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 800ab6a:	69c1      	ldr	r1, [r0, #28]
 800ab6c:	f7f6 fe0c 	bl	8001788 <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
 800ab70:	2300      	movs	r3, #0
 800ab72:	6263      	str	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 800ab74:	6823      	ldr	r3, [r4, #0]
 800ab76:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
 800ab78:	f015 0510 	ands.w	r5, r5, #16
 800ab7c:	d124      	bne.n	800abc8 <JPEG_DMA_EndProcess+0x7c>
    if (hjpeg->JpegOutCount > 0UL)
 800ab7e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800ab80:	b12b      	cbz	r3, 800ab8e <JPEG_DMA_EndProcess+0x42>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800ab82:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800ab84:	4620      	mov	r0, r4
 800ab86:	69e1      	ldr	r1, [r4, #28]
 800ab88:	f7f6 fdfe 	bl	8001788 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800ab8c:	6265      	str	r5, [r4, #36]	@ 0x24
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800ab8e:	6822      	ldr	r2, [r4, #0]
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800ab90:	4620      	mov	r0, r4
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800ab92:	6813      	ldr	r3, [r2, #0]
 800ab94:	f023 0301 	bic.w	r3, r3, #1
 800ab98:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
 800ab9a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800ab9c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800ab9e:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800aba2:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800aba6:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800aba8:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 800abaa:	f04f 0200 	mov.w	r2, #0
 800abae:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 800abb2:	f04f 0201 	mov.w	r2, #1
 800abb6:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800abba:	d102      	bne.n	800abc2 <JPEG_DMA_EndProcess+0x76>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800abbc:	f7f6 fe20 	bl	8001800 <HAL_JPEG_DecodeCpltCallback>
}
 800abc0:	bd38      	pop	{r3, r4, r5, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800abc2:	f7ff fd28 	bl	800a616 <HAL_JPEG_EncodeCpltCallback>
 800abc6:	e7fb      	b.n	800abc0 <JPEG_DMA_EndProcess+0x74>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800abc8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800abca:	049b      	lsls	r3, r3, #18
 800abcc:	d4f8      	bmi.n	800abc0 <JPEG_DMA_EndProcess+0x74>
    JPEG_DMA_PollResidualData(hjpeg);
 800abce:	4620      	mov	r0, r4
}
 800abd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
 800abd4:	f7ff befb 	b.w	800a9ce <JPEG_DMA_PollResidualData>
 800abd8:	0003fffc 	.word	0x0003fffc

0800abdc <JPEG_DMAOutAbortCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800abdc:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 800abde:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800abe0:	041b      	lsls	r3, r3, #16
 800abe2:	d501      	bpl.n	800abe8 <JPEG_DMAOutAbortCallback+0xc>
    JPEG_DMA_EndProcess(hjpeg);
 800abe4:	f7ff bfb2 	b.w	800ab4c <JPEG_DMA_EndProcess>
}
 800abe8:	4770      	bx	lr
	...

0800abec <JPEG_DMAOutCpltCallback>:
{
 800abec:	b510      	push	{r4, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800abee:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800abf0:	6823      	ldr	r3, [r4, #0]
 800abf2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800abf4:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800abf8:	631a      	str	r2, [r3, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 800abfa:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800abfc:	f422 42ff 	bic.w	r2, r2, #32640	@ 0x7f80
 800ac00:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 800ac04:	0412      	lsls	r2, r2, #16
 800ac06:	0c12      	lsrs	r2, r2, #16
 800ac08:	2a0c      	cmp	r2, #12
 800ac0a:	d129      	bne.n	800ac60 <JPEG_DMAOutCpltCallback+0x74>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 800ac0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ac0e:	0692      	lsls	r2, r2, #26
 800ac10:	d42c      	bmi.n	800ac6c <JPEG_DMAOutCpltCallback+0x80>
      JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA);
 800ac12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800ac14:	69e1      	ldr	r1, [r4, #28]
      JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA);
 800ac16:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800ac1a:	631a      	str	r2, [r3, #48]	@ 0x30
      hjpeg->JpegOutCount = hjpeg->OutDataLength - ((hdma->Instance->NDTR & DMA_SxNDT) << 2);
 800ac1c:	6803      	ldr	r3, [r0, #0]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800ac1e:	4620      	mov	r0, r4
      hjpeg->JpegOutCount = hjpeg->OutDataLength - ((hdma->Instance->NDTR & DMA_SxNDT) << 2);
 800ac20:	4a15      	ldr	r2, [pc, #84]	@ (800ac78 <JPEG_DMAOutCpltCallback+0x8c>)
 800ac22:	685b      	ldr	r3, [r3, #4]
 800ac24:	ea02 0283 	and.w	r2, r2, r3, lsl #2
 800ac28:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ac2a:	1a9b      	subs	r3, r3, r2
 800ac2c:	6263      	str	r3, [r4, #36]	@ 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800ac2e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800ac30:	f7f6 fdaa 	bl	8001788 <HAL_JPEG_DataReadyCallback>
      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800ac34:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800ac36:	049b      	lsls	r3, r3, #18
 800ac38:	d418      	bmi.n	800ac6c <JPEG_DMAOutCpltCallback+0x80>
        if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800ac3a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ac3c:	6821      	ldr	r1, [r4, #0]
 800ac3e:	089b      	lsrs	r3, r3, #2
 800ac40:	69e2      	ldr	r2, [r4, #28]
 800ac42:	3144      	adds	r1, #68	@ 0x44
 800ac44:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800ac46:	f7fd fcb1 	bl	80085ac <HAL_DMA_Start_IT>
 800ac4a:	b150      	cbz	r0, 800ac62 <JPEG_DMAOutCpltCallback+0x76>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800ac4c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
          HAL_JPEG_ErrorCallback(hjpeg);
 800ac4e:	4620      	mov	r0, r4
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800ac50:	f043 0304 	orr.w	r3, r3, #4
 800ac54:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800ac56:	2306      	movs	r3, #6
 800ac58:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
          HAL_JPEG_ErrorCallback(hjpeg);
 800ac5c:	f7f6 fdce 	bl	80017fc <HAL_JPEG_ErrorCallback>
}
 800ac60:	bd10      	pop	{r4, pc}
        JPEG_ENABLE_DMA(hjpeg, JPEG_DMA_ODMA);
 800ac62:	6822      	ldr	r2, [r4, #0]
 800ac64:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800ac66:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800ac6a:	6313      	str	r3, [r2, #48]	@ 0x30
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800ac6c:	6822      	ldr	r2, [r4, #0]
 800ac6e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800ac70:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800ac74:	6313      	str	r3, [r2, #48]	@ 0x30
 800ac76:	e7f3      	b.n	800ac60 <JPEG_DMAOutCpltCallback+0x74>
 800ac78:	0003fffc 	.word	0x0003fffc

0800ac7c <HAL_JPEG_IRQHandler>:
{
 800ac7c:	b510      	push	{r4, lr}
  switch (hjpeg->State)
 800ac7e:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
{
 800ac82:	4604      	mov	r4, r0
  switch (hjpeg->State)
 800ac84:	3b03      	subs	r3, #3
 800ac86:	2b01      	cmp	r3, #1
 800ac88:	d854      	bhi.n	800ad34 <HAL_JPEG_IRQHandler+0xb8>
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800ac8a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800ac8c:	f003 030c 	and.w	r3, r3, #12
 800ac90:	2b08      	cmp	r3, #8
 800ac92:	d103      	bne.n	800ac9c <HAL_JPEG_IRQHandler+0x20>
}
 800ac94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void) JPEG_Process(hjpeg);
 800ac98:	f7ff be22 	b.w	800a8e0 <JPEG_Process>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800ac9c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800ac9e:	f003 030c 	and.w	r3, r3, #12
 800aca2:	2b0c      	cmp	r3, #12
 800aca4:	d146      	bne.n	800ad34 <HAL_JPEG_IRQHandler+0xb8>
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800aca6:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800aca8:	f003 0303 	and.w	r3, r3, #3
 800acac:	2b02      	cmp	r3, #2
 800acae:	d114      	bne.n	800acda <HAL_JPEG_IRQHandler+0x5e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800acb0:	6803      	ldr	r3, [r0, #0]
 800acb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800acb4:	0659      	lsls	r1, r3, #25
 800acb6:	d510      	bpl.n	800acda <HAL_JPEG_IRQHandler+0x5e>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800acb8:	1d01      	adds	r1, r0, #4
 800acba:	f7ff fbc7 	bl	800a44c <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 800acbe:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800acc0:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 800acc2:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800acc4:	f7f6 fcf4 	bl	80016b0 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800acc8:	6823      	ldr	r3, [r4, #0]
 800acca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800accc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800acd0:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800acd2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800acd4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800acd8:	639a      	str	r2, [r3, #56]	@ 0x38
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 800acda:	6823      	ldr	r3, [r4, #0]
 800acdc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800acde:	0692      	lsls	r2, r2, #26
 800ace0:	d528      	bpl.n	800ad34 <HAL_JPEG_IRQHandler+0xb8>
    JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA | JPEG_DMA_IDMA);
 800ace2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
    if (hjpeg->hdmain->State == HAL_DMA_STATE_BUSY)
 800ace4:	6b20      	ldr	r0, [r4, #48]	@ 0x30
    JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA | JPEG_DMA_IDMA);
 800ace6:	f422 52c0 	bic.w	r2, r2, #6144	@ 0x1800
 800acea:	631a      	str	r2, [r3, #48]	@ 0x30
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 800acec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800acee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800acf2:	6562      	str	r2, [r4, #84]	@ 0x54
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800acf4:	681a      	ldr	r2, [r3, #0]
 800acf6:	f022 0201 	bic.w	r2, r2, #1
 800acfa:	601a      	str	r2, [r3, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800acfc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800acfe:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800ad02:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800ad04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ad06:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800ad0a:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->hdmain->State == HAL_DMA_STATE_BUSY)
 800ad0c:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 800ad10:	2b02      	cmp	r3, #2
 800ad12:	d101      	bne.n	800ad18 <HAL_JPEG_IRQHandler+0x9c>
      (void) HAL_DMA_Abort_IT(hjpeg->hdmain);
 800ad14:	f7fd fc87 	bl	8008626 <HAL_DMA_Abort_IT>
    if (hjpeg->hdmaout->State == HAL_DMA_STATE_BUSY)
 800ad18:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800ad1a:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 800ad1e:	2b02      	cmp	r3, #2
 800ad20:	d103      	bne.n	800ad2a <HAL_JPEG_IRQHandler+0xae>
}
 800ad22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      (void) HAL_DMA_Abort_IT(hjpeg->hdmaout);
 800ad26:	f7fd bc7e 	b.w	8008626 <HAL_DMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
 800ad2a:	4620      	mov	r0, r4
}
 800ad2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      JPEG_DMA_EndProcess(hjpeg);
 800ad30:	f7ff bf0c 	b.w	800ab4c <JPEG_DMA_EndProcess>
}
 800ad34:	bd10      	pop	{r4, pc}

0800ad36 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800ad36:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800ad38:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800ad3a:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800ad3e:	3284      	adds	r2, #132	@ 0x84
 800ad40:	1883      	adds	r3, r0, r2
{
 800ad42:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800ad46:	68c6      	ldr	r6, [r0, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800ad48:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800ad4c:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800ad4e:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800ad52:	684c      	ldr	r4, [r1, #4]
 800ad54:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800ad58:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800ad5c:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800ad60:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800ad62:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800ad64:	68c5      	ldr	r5, [r0, #12]
 800ad66:	f3c5 450b 	ubfx	r5, r5, #16, #12
 800ad6a:	443d      	add	r5, r7
 800ad6c:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800ad70:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800ad72:	68c6      	ldr	r6, [r0, #12]
 800ad74:	68cd      	ldr	r5, [r1, #12]
 800ad76:	f3c6 060a 	ubfx	r6, r6, #0, #11
 800ad7a:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800ad7c:	689d      	ldr	r5, [r3, #8]
 800ad7e:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
 800ad82:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800ad84:	688d      	ldr	r5, [r1, #8]
 800ad86:	68c7      	ldr	r7, [r0, #12]
 800ad88:	3501      	adds	r5, #1
 800ad8a:	f3c7 070a 	ubfx	r7, r7, #0, #11
 800ad8e:	443d      	add	r5, r7
 800ad90:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800ad94:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800ad96:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800ad98:	691d      	ldr	r5, [r3, #16]
 800ad9a:	f025 0507 	bic.w	r5, r5, #7
 800ad9e:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800ada0:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800ada2:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800ada4:	f891 7032 	ldrb.w	r7, [r1, #50]	@ 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800ada8:	f891 8031 	ldrb.w	r8, [r1, #49]	@ 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800adac:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800adb0:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 800adb4:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 800adb8:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 800adbc:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 800adc0:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800adc2:	695d      	ldr	r5, [r3, #20]
 800adc4:	f025 05ff 	bic.w	r5, r5, #255	@ 0xff
 800adc8:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800adca:	694d      	ldr	r5, [r1, #20]
 800adcc:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800adce:	69dd      	ldr	r5, [r3, #28]
 800add0:	f425 65e0 	bic.w	r5, r5, #1792	@ 0x700
 800add4:	f025 0507 	bic.w	r5, r5, #7
 800add8:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800adda:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 800adde:	433d      	orrs	r5, r7
 800ade0:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800ade2:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800ade4:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800ade6:	f8c3 e028 	str.w	lr, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800adea:	629d      	str	r5, [r3, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800adec:	b31e      	cbz	r6, 800ae36 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800adee:	2e01      	cmp	r6, #1
 800adf0:	d023      	beq.n	800ae3a <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800adf2:	1eb5      	subs	r5, r6, #2
 800adf4:	2d02      	cmp	r5, #2
 800adf6:	d922      	bls.n	800ae3e <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 800adf8:	2e07      	cmp	r6, #7
 800adfa:	bf14      	ite	ne
 800adfc:	2501      	movne	r5, #1
 800adfe:	2502      	moveq	r5, #2
  {
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800ae00:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800ae02:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800ae06:	f006 26e0 	and.w	r6, r6, #3758153728	@ 0xe000e000
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800ae0a:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800ae0c:	62de      	str	r6, [r3, #44]	@ 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800ae0e:	3403      	adds	r4, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800ae10:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800ae12:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800ae14:	436e      	muls	r6, r5
 800ae16:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800ae1a:	62dc      	str	r4, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800ae1c:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 800ae1e:	f424 64ff 	bic.w	r4, r4, #2040	@ 0x7f8
 800ae22:	f024 0407 	bic.w	r4, r4, #7
 800ae26:	631c      	str	r4, [r3, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800ae28:	6319      	str	r1, [r3, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800ae2a:	5883      	ldr	r3, [r0, r2]
 800ae2c:	f043 0301 	orr.w	r3, r3, #1
 800ae30:	5083      	str	r3, [r0, r2]
}
 800ae32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 800ae36:	2504      	movs	r5, #4
 800ae38:	e7e2      	b.n	800ae00 <LTDC_SetConfig+0xca>
    tmp = 3U;
 800ae3a:	2503      	movs	r5, #3
 800ae3c:	e7e0      	b.n	800ae00 <LTDC_SetConfig+0xca>
    tmp = 2U;
 800ae3e:	2502      	movs	r5, #2
 800ae40:	e7de      	b.n	800ae00 <LTDC_SetConfig+0xca>
	...

0800ae44 <HAL_LTDC_Init>:
{
 800ae44:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 800ae46:	4604      	mov	r4, r0
 800ae48:	2800      	cmp	r0, #0
 800ae4a:	d063      	beq.n	800af14 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800ae4c:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 800ae50:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800ae54:	b91b      	cbnz	r3, 800ae5e <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 800ae56:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
 800ae5a:	f7f9 fff1 	bl	8004e40 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800ae5e:	2302      	movs	r3, #2
 800ae60:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800ae64:	6823      	ldr	r3, [r4, #0]
 800ae66:	699a      	ldr	r2, [r3, #24]
 800ae68:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800ae6c:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800ae6e:	6999      	ldr	r1, [r3, #24]
 800ae70:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 800ae74:	4302      	orrs	r2, r0
 800ae76:	68e0      	ldr	r0, [r4, #12]
 800ae78:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800ae7a:	6920      	ldr	r0, [r4, #16]
 800ae7c:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800ae7e:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800ae80:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800ae82:	4925      	ldr	r1, [pc, #148]	@ (800af18 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800ae84:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800ae86:	689a      	ldr	r2, [r3, #8]
 800ae88:	400a      	ands	r2, r1
 800ae8a:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800ae8c:	689a      	ldr	r2, [r3, #8]
 800ae8e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800ae92:	69a0      	ldr	r0, [r4, #24]
 800ae94:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800ae96:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800ae98:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800ae9a:	68da      	ldr	r2, [r3, #12]
 800ae9c:	400a      	ands	r2, r1
 800ae9e:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800aea0:	68da      	ldr	r2, [r3, #12]
 800aea2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800aea6:	6a20      	ldr	r0, [r4, #32]
 800aea8:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800aeaa:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800aeac:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800aeae:	691a      	ldr	r2, [r3, #16]
 800aeb0:	400a      	ands	r2, r1
 800aeb2:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800aeb4:	691a      	ldr	r2, [r3, #16]
 800aeb6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800aeba:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800aebc:	4302      	orrs	r2, r0
 800aebe:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800aec0:	695a      	ldr	r2, [r3, #20]
 800aec2:	400a      	ands	r2, r1
  tmp = (hltdc->Init.TotalWidth << 16U);
 800aec4:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800aec6:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800aec8:	695a      	ldr	r2, [r3, #20]
 800aeca:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800aece:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800aed0:	430a      	orrs	r2, r1
 800aed2:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800aed4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800aed6:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800aeda:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800aede:	f894 1036 	ldrb.w	r1, [r4, #54]	@ 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800aee2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800aee4:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 800aee6:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
 800aeea:	432a      	orrs	r2, r5
 800aeec:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800aef0:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800aef2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800aef6:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800aef8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aefa:	f042 0206 	orr.w	r2, r2, #6
 800aefe:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_LTDC_ENABLE(hltdc);
 800af00:	699a      	ldr	r2, [r3, #24]
 800af02:	f042 0201 	orr.w	r2, r2, #1
 800af06:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 800af08:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800af0a:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 800af0e:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
 800af12:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800af14:	2001      	movs	r0, #1
 800af16:	e7fc      	b.n	800af12 <HAL_LTDC_Init+0xce>
 800af18:	f000f800 	.word	0xf000f800

0800af1c <HAL_LTDC_ErrorCallback>:
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
 800af1c:	4770      	bx	lr

0800af1e <HAL_LTDC_LineEventCallback>:
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
 800af1e:	4770      	bx	lr

0800af20 <HAL_LTDC_ReloadEventCallback>:
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
 800af20:	4770      	bx	lr

0800af22 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800af22:	6803      	ldr	r3, [r0, #0]
{
 800af24:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800af26:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
{
 800af28:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800af2a:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800af2c:	0772      	lsls	r2, r6, #29
 800af2e:	d514      	bpl.n	800af5a <HAL_LTDC_IRQHandler+0x38>
 800af30:	0769      	lsls	r1, r5, #29
 800af32:	d512      	bpl.n	800af5a <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800af34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800af36:	f022 0204 	bic.w	r2, r2, #4
 800af3a:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800af3c:	2204      	movs	r2, #4
 800af3e:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800af40:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 800af44:	f043 0301 	orr.w	r3, r3, #1
 800af48:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
    __HAL_UNLOCK(hltdc);
 800af4c:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800af4e:	f880 20a1 	strb.w	r2, [r0, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800af52:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800af56:	f7ff ffe1 	bl	800af1c <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800af5a:	07b2      	lsls	r2, r6, #30
 800af5c:	d516      	bpl.n	800af8c <HAL_LTDC_IRQHandler+0x6a>
 800af5e:	07ab      	lsls	r3, r5, #30
 800af60:	d514      	bpl.n	800af8c <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800af62:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 800af64:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800af66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800af68:	f022 0202 	bic.w	r2, r2, #2
 800af6c:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800af6e:	2202      	movs	r2, #2
 800af70:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800af72:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 800af76:	4313      	orrs	r3, r2
 800af78:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800af7c:	2304      	movs	r3, #4
 800af7e:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800af82:	2300      	movs	r3, #0
 800af84:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800af88:	f7ff ffc8 	bl	800af1c <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800af8c:	07f0      	lsls	r0, r6, #31
 800af8e:	d510      	bpl.n	800afb2 <HAL_LTDC_IRQHandler+0x90>
 800af90:	07e9      	lsls	r1, r5, #31
 800af92:	d50e      	bpl.n	800afb2 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800af94:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 800af96:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800af98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800af9a:	f022 0201 	bic.w	r2, r2, #1
 800af9e:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800afa0:	2201      	movs	r2, #1
 800afa2:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_UNLOCK(hltdc);
 800afa4:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 800afa6:	f884 20a1 	strb.w	r2, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800afaa:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 800afae:	f7ff ffb6 	bl	800af1e <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800afb2:	0732      	lsls	r2, r6, #28
 800afb4:	d511      	bpl.n	800afda <HAL_LTDC_IRQHandler+0xb8>
 800afb6:	072b      	lsls	r3, r5, #28
 800afb8:	d50f      	bpl.n	800afda <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800afba:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 800afbc:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800afbe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800afc0:	f022 0208 	bic.w	r2, r2, #8
 800afc4:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800afc6:	2208      	movs	r2, #8
 800afc8:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800afca:	2301      	movs	r3, #1
 800afcc:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800afd0:	2300      	movs	r3, #0
 800afd2:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 800afd6:	f7ff ffa3 	bl	800af20 <HAL_LTDC_ReloadEventCallback>
}
 800afda:	bd70      	pop	{r4, r5, r6, pc}

0800afdc <HAL_LTDC_ConfigLayer>:
{
 800afdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 800afe0:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
{
 800afe4:	4606      	mov	r6, r0
 800afe6:	460f      	mov	r7, r1
 800afe8:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 800afea:	2b01      	cmp	r3, #1
 800afec:	f04f 0002 	mov.w	r0, #2
 800aff0:	d01f      	beq.n	800b032 <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800aff2:	2434      	movs	r4, #52	@ 0x34
  __HAL_LOCK(hltdc);
 800aff4:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800aff8:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800affa:	f886 00a1 	strb.w	r0, [r6, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800affe:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 800b002:	f886 80a0 	strb.w	r8, [r6, #160]	@ 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800b006:	3438      	adds	r4, #56	@ 0x38
 800b008:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b00a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b00c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b00e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b010:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b012:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b014:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800b016:	4630      	mov	r0, r6
 800b018:	4662      	mov	r2, ip
 800b01a:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800b01c:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800b01e:	f7ff fe8a 	bl	800ad36 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800b022:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 800b024:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800b026:	f8c3 8024 	str.w	r8, [r3, #36]	@ 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 800b02a:	f886 80a1 	strb.w	r8, [r6, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 800b02e:	f886 00a0 	strb.w	r0, [r6, #160]	@ 0xa0
}
 800b032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800b038 <HAL_LTDC_SetPitch>:
{
 800b038:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hltdc);
 800b03a:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
 800b03e:	2b01      	cmp	r3, #1
 800b040:	f04f 0302 	mov.w	r3, #2
 800b044:	d02c      	beq.n	800b0a0 <HAL_LTDC_SetPitch+0x68>
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 800b046:	2434      	movs	r4, #52	@ 0x34
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800b048:	f880 30a1 	strb.w	r3, [r0, #161]	@ 0xa1
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 800b04c:	fb04 0402 	mla	r4, r4, r2, r0
 800b050:	6ca4      	ldr	r4, [r4, #72]	@ 0x48
  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800b052:	b33c      	cbz	r4, 800b0a4 <HAL_LTDC_SetPitch+0x6c>
  else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800b054:	2c01      	cmp	r4, #1
 800b056:	d027      	beq.n	800b0a8 <HAL_LTDC_SetPitch+0x70>
  else if ((pixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800b058:	1ea5      	subs	r5, r4, #2
 800b05a:	429d      	cmp	r5, r3
 800b05c:	d902      	bls.n	800b064 <HAL_LTDC_SetPitch+0x2c>
    tmp = 2U;
 800b05e:	2c07      	cmp	r4, #7
 800b060:	bf18      	it	ne
 800b062:	2301      	movne	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 800b064:	01d2      	lsls	r2, r2, #7
 800b066:	6804      	ldr	r4, [r0, #0]
  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 800b068:	434b      	muls	r3, r1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 800b06a:	3284      	adds	r2, #132	@ 0x84
 800b06c:	4422      	add	r2, r4
 800b06e:	6ad4      	ldr	r4, [r2, #44]	@ 0x2c
 800b070:	f024 54ff 	bic.w	r4, r4, #534773760	@ 0x1fe00000
 800b074:	f424 14f8 	bic.w	r4, r4, #2031616	@ 0x1f0000
 800b078:	62d4      	str	r4, [r2, #44]	@ 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 800b07a:	4c0c      	ldr	r4, [pc, #48]	@ (800b0ac <HAL_LTDC_SetPitch+0x74>)
 800b07c:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800b07e:	f045 0501 	orr.w	r5, r5, #1
 800b082:	6265      	str	r5, [r4, #36]	@ 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 800b084:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
 800b086:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 800b08a:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 800b08c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b08e:	f043 0301 	orr.w	r3, r3, #1
 800b092:	6263      	str	r3, [r4, #36]	@ 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 800b094:	2301      	movs	r3, #1
 800b096:	f880 30a1 	strb.w	r3, [r0, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 800b09a:	2300      	movs	r3, #0
 800b09c:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
}
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	bd30      	pop	{r4, r5, pc}
    tmp = 4U;
 800b0a4:	2304      	movs	r3, #4
 800b0a6:	e7dd      	b.n	800b064 <HAL_LTDC_SetPitch+0x2c>
    tmp = 3U;
 800b0a8:	2303      	movs	r3, #3
 800b0aa:	e7db      	b.n	800b064 <HAL_LTDC_SetPitch+0x2c>
 800b0ac:	40016800 	.word	0x40016800

0800b0b0 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 800b0b0:	4b19      	ldr	r3, [pc, #100]	@ (800b118 <HAL_PWREx_EnableOverDrive+0x68>)
{
 800b0b2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 800b0b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800b0b6:	4c19      	ldr	r4, [pc, #100]	@ (800b11c <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800b0b8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800b0bc:	641a      	str	r2, [r3, #64]	@ 0x40
 800b0be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b0c4:	9301      	str	r3, [sp, #4]
 800b0c6:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 800b0c8:	6823      	ldr	r3, [r4, #0]
 800b0ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b0ce:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b0d0:	f7fc fe4a 	bl	8007d68 <HAL_GetTick>
 800b0d4:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b0d6:	6863      	ldr	r3, [r4, #4]
 800b0d8:	03da      	lsls	r2, r3, #15
 800b0da:	d50c      	bpl.n	800b0f6 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800b0dc:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b0de:	4d0f      	ldr	r5, [pc, #60]	@ (800b11c <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800b0e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b0e4:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800b0e6:	f7fc fe3f 	bl	8007d68 <HAL_GetTick>
 800b0ea:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b0ec:	686b      	ldr	r3, [r5, #4]
 800b0ee:	039b      	lsls	r3, r3, #14
 800b0f0:	d50a      	bpl.n	800b108 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800b0f2:	2000      	movs	r0, #0
 800b0f4:	e006      	b.n	800b104 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b0f6:	f7fc fe37 	bl	8007d68 <HAL_GetTick>
 800b0fa:	1b40      	subs	r0, r0, r5
 800b0fc:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800b100:	d9e9      	bls.n	800b0d6 <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 800b102:	2003      	movs	r0, #3
}
 800b104:	b003      	add	sp, #12
 800b106:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b108:	f7fc fe2e 	bl	8007d68 <HAL_GetTick>
 800b10c:	1b00      	subs	r0, r0, r4
 800b10e:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800b112:	d9eb      	bls.n	800b0ec <HAL_PWREx_EnableOverDrive+0x3c>
 800b114:	e7f5      	b.n	800b102 <HAL_PWREx_EnableOverDrive+0x52>
 800b116:	bf00      	nop
 800b118:	40023800 	.word	0x40023800
 800b11c:	40007000 	.word	0x40007000

0800b120 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800b120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800b124:	6a4e      	ldr	r6, [r1, #36]	@ 0x24
 800b126:	b136      	cbz	r6, 800b136 <QSPI_Config+0x16>
 800b128:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
 800b12c:	d003      	beq.n	800b136 <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800b12e:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 800b130:	6804      	ldr	r4, [r0, #0]
 800b132:	3b01      	subs	r3, #1
 800b134:	6123      	str	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800b136:	f8d1 a018 	ldr.w	sl, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b13a:	e9d1 7e07 	ldrd	r7, lr, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800b13e:	f1ba 0f00 	cmp.w	sl, #0
 800b142:	d04c      	beq.n	800b1de <QSPI_Config+0xbe>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b144:	694c      	ldr	r4, [r1, #20]
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800b146:	6805      	ldr	r5, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b148:	ea4f 4c84 	mov.w	ip, r4, lsl #18
 800b14c:	ea4a 0406 	orr.w	r4, sl, r6
 800b150:	680b      	ldr	r3, [r1, #0]
 800b152:	f8d1 8034 	ldr.w	r8, [r1, #52]	@ 0x34
 800b156:	ea44 0a02 	orr.w	sl, r4, r2
 800b15a:	e9d1 090b 	ldrd	r0, r9, [r1, #44]	@ 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800b15e:	f1be 0f00 	cmp.w	lr, #0
 800b162:	d024      	beq.n	800b1ae <QSPI_Config+0x8e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800b164:	688e      	ldr	r6, [r1, #8]
 800b166:	ea4a 040e 	orr.w	r4, sl, lr
 800b16a:	61ee      	str	r6, [r5, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b16c:	690e      	ldr	r6, [r1, #16]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b16e:	b19f      	cbz	r7, 800b198 <QSPI_Config+0x78>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b170:	433b      	orrs	r3, r7
 800b172:	4303      	orrs	r3, r0
 800b174:	68c8      	ldr	r0, [r1, #12]
 800b176:	ea43 0309 	orr.w	r3, r3, r9
 800b17a:	ea43 0308 	orr.w	r3, r3, r8
 800b17e:	4333      	orrs	r3, r6
 800b180:	4303      	orrs	r3, r0
 800b182:	ea43 030c 	orr.w	r3, r3, ip
 800b186:	4323      	orrs	r3, r4
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize | cmd->AddressMode |
                                         cmd->InstructionMode | cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b188:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b18c:	616b      	str	r3, [r5, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b18e:	d001      	beq.n	800b194 <QSPI_Config+0x74>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800b190:	684b      	ldr	r3, [r1, #4]
 800b192:	61ab      	str	r3, [r5, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800b194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b198:	4303      	orrs	r3, r0
 800b19a:	ea43 0309 	orr.w	r3, r3, r9
 800b19e:	ea43 0308 	orr.w	r3, r3, r8
 800b1a2:	4333      	orrs	r3, r6
 800b1a4:	ea43 030c 	orr.w	r3, r3, ip
 800b1a8:	4323      	orrs	r3, r4
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b1aa:	616b      	str	r3, [r5, #20]
 800b1ac:	e7f2      	b.n	800b194 <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b1ae:	b167      	cbz	r7, 800b1ca <QSPI_Config+0xaa>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b1b0:	433b      	orrs	r3, r7
 800b1b2:	4303      	orrs	r3, r0
 800b1b4:	68c8      	ldr	r0, [r1, #12]
 800b1b6:	ea43 0309 	orr.w	r3, r3, r9
 800b1ba:	ea43 0308 	orr.w	r3, r3, r8
 800b1be:	4303      	orrs	r3, r0
 800b1c0:	ea43 030c 	orr.w	r3, r3, ip
 800b1c4:	ea43 030a 	orr.w	r3, r3, sl
 800b1c8:	e7de      	b.n	800b188 <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b1ca:	4303      	orrs	r3, r0
 800b1cc:	ea43 0309 	orr.w	r3, r3, r9
 800b1d0:	ea43 0408 	orr.w	r4, r3, r8
 800b1d4:	ea44 030c 	orr.w	r3, r4, ip
 800b1d8:	ea43 030a 	orr.w	r3, r3, sl
 800b1dc:	e7e5      	b.n	800b1aa <QSPI_Config+0x8a>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800b1de:	f1be 0f00 	cmp.w	lr, #0
 800b1e2:	d02c      	beq.n	800b23e <QSPI_Config+0x11e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800b1e4:	ea46 050e 	orr.w	r5, r6, lr
 800b1e8:	688b      	ldr	r3, [r1, #8]
 800b1ea:	6804      	ldr	r4, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b1ec:	694e      	ldr	r6, [r1, #20]
 800b1ee:	4315      	orrs	r5, r2
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800b1f0:	61e3      	str	r3, [r4, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b1f2:	f8d1 c034 	ldr.w	ip, [r1, #52]	@ 0x34
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b1f6:	04b6      	lsls	r6, r6, #18
 800b1f8:	690b      	ldr	r3, [r1, #16]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b1fa:	e9d1 8e0b 	ldrd	r8, lr, [r1, #44]	@ 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b1fe:	b1a7      	cbz	r7, 800b22a <QSPI_Config+0x10a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b200:	433b      	orrs	r3, r7
 800b202:	68c8      	ldr	r0, [r1, #12]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b204:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b208:	ea43 0308 	orr.w	r3, r3, r8
 800b20c:	ea43 030e 	orr.w	r3, r3, lr
 800b210:	ea43 030c 	orr.w	r3, r3, ip
 800b214:	ea43 0300 	orr.w	r3, r3, r0
 800b218:	ea43 0306 	orr.w	r3, r3, r6
 800b21c:	ea43 0305 	orr.w	r3, r3, r5
 800b220:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b222:	d0b7      	beq.n	800b194 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800b224:	684b      	ldr	r3, [r1, #4]
 800b226:	61a3      	str	r3, [r4, #24]
 800b228:	e7b4      	b.n	800b194 <QSPI_Config+0x74>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b22a:	ea43 0308 	orr.w	r3, r3, r8
 800b22e:	ea43 030e 	orr.w	r3, r3, lr
 800b232:	ea43 030c 	orr.w	r3, r3, ip
 800b236:	4333      	orrs	r3, r6
 800b238:	432b      	orrs	r3, r5
 800b23a:	6163      	str	r3, [r4, #20]
 800b23c:	e7aa      	b.n	800b194 <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b23e:	b1d7      	cbz	r7, 800b276 <QSPI_Config+0x156>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b240:	ea46 0307 	orr.w	r3, r6, r7
 800b244:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 800b246:	6800      	ldr	r0, [r0, #0]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b248:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b24c:	ea43 0302 	orr.w	r3, r3, r2
 800b250:	ea43 0304 	orr.w	r3, r3, r4
 800b254:	6b0c      	ldr	r4, [r1, #48]	@ 0x30
 800b256:	ea43 0304 	orr.w	r3, r3, r4
 800b25a:	6b4c      	ldr	r4, [r1, #52]	@ 0x34
 800b25c:	ea43 0304 	orr.w	r3, r3, r4
 800b260:	68cc      	ldr	r4, [r1, #12]
 800b262:	ea43 0304 	orr.w	r3, r3, r4
 800b266:	694c      	ldr	r4, [r1, #20]
 800b268:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 800b26c:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b26e:	d091      	beq.n	800b194 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800b270:	684b      	ldr	r3, [r1, #4]
 800b272:	6183      	str	r3, [r0, #24]
 800b274:	e78e      	b.n	800b194 <QSPI_Config+0x74>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800b276:	2e00      	cmp	r6, #0
 800b278:	d08c      	beq.n	800b194 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b27a:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 800b27c:	6800      	ldr	r0, [r0, #0]
 800b27e:	4333      	orrs	r3, r6
 800b280:	4313      	orrs	r3, r2
 800b282:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800b284:	4313      	orrs	r3, r2
 800b286:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
 800b288:	4313      	orrs	r3, r2
 800b28a:	694a      	ldr	r2, [r1, #20]
 800b28c:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 800b290:	6143      	str	r3, [r0, #20]
}
 800b292:	e77f      	b.n	800b194 <QSPI_Config+0x74>

0800b294 <QSPI_WaitFlagStateUntilTimeout>:
{
 800b294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b298:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800b29c:	4604      	mov	r4, r0
 800b29e:	460e      	mov	r6, r1
 800b2a0:	4615      	mov	r5, r2
 800b2a2:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800b2a4:	6822      	ldr	r2, [r4, #0]
 800b2a6:	6893      	ldr	r3, [r2, #8]
 800b2a8:	4233      	tst	r3, r6
 800b2aa:	bf14      	ite	ne
 800b2ac:	2301      	movne	r3, #1
 800b2ae:	2300      	moveq	r3, #0
 800b2b0:	42ab      	cmp	r3, r5
 800b2b2:	d101      	bne.n	800b2b8 <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 800b2b4:	2000      	movs	r0, #0
 800b2b6:	e012      	b.n	800b2de <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 800b2b8:	f1b8 3fff 	cmp.w	r8, #4294967295
 800b2bc:	d0f3      	beq.n	800b2a6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b2be:	f7fc fd53 	bl	8007d68 <HAL_GetTick>
 800b2c2:	1bc0      	subs	r0, r0, r7
 800b2c4:	4540      	cmp	r0, r8
 800b2c6:	d802      	bhi.n	800b2ce <QSPI_WaitFlagStateUntilTimeout+0x3a>
 800b2c8:	f1b8 0f00 	cmp.w	r8, #0
 800b2cc:	d1ea      	bne.n	800b2a4 <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800b2ce:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800b2d0:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800b2d2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800b2d6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800b2d8:	f043 0301 	orr.w	r3, r3, #1
 800b2dc:	6463      	str	r3, [r4, #68]	@ 0x44
}
 800b2de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800b2e4 <HAL_QSPI_Init>:
{
 800b2e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b2e6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800b2e8:	f7fc fd3e 	bl	8007d68 <HAL_GetTick>
 800b2ec:	4605      	mov	r5, r0
  if(hqspi == NULL)
 800b2ee:	2c00      	cmp	r4, #0
 800b2f0:	d046      	beq.n	800b380 <HAL_QSPI_Init+0x9c>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800b2f2:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800b2f6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800b2fa:	b93b      	cbnz	r3, 800b30c <HAL_QSPI_Init+0x28>
    HAL_QSPI_MspInit(hqspi);
 800b2fc:	4620      	mov	r0, r4
    hqspi->Lock = HAL_UNLOCKED;
 800b2fe:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
    HAL_QSPI_MspInit(hqspi);
 800b302:	f7f9 fdd3 	bl	8004eac <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 800b306:	f241 3388 	movw	r3, #5000	@ 0x1388
 800b30a:	64a3      	str	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800b30c:	6821      	ldr	r1, [r4, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800b30e:	4620      	mov	r0, r4
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800b310:	68a3      	ldr	r3, [r4, #8]
 800b312:	680a      	ldr	r2, [r1, #0]
 800b314:	3b01      	subs	r3, #1
 800b316:	f422 52f8 	bic.w	r2, r2, #7936	@ 0x1f00
 800b31a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800b31e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800b320:	600a      	str	r2, [r1, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800b322:	2200      	movs	r2, #0
 800b324:	9300      	str	r3, [sp, #0]
 800b326:	2120      	movs	r1, #32
 800b328:	462b      	mov	r3, r5
 800b32a:	f7ff ffb3 	bl	800b294 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 800b32e:	bb10      	cbnz	r0, 800b376 <HAL_QSPI_Init+0x92>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800b330:	6822      	ldr	r2, [r4, #0]
 800b332:	69e5      	ldr	r5, [r4, #28]
 800b334:	68e3      	ldr	r3, [r4, #12]
 800b336:	6811      	ldr	r1, [r2, #0]
 800b338:	432b      	orrs	r3, r5
 800b33a:	6a25      	ldr	r5, [r4, #32]
 800b33c:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800b340:	432b      	orrs	r3, r5
 800b342:	6865      	ldr	r5, [r4, #4]
 800b344:	f021 01d0 	bic.w	r1, r1, #208	@ 0xd0
 800b348:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 800b34c:	430b      	orrs	r3, r1
 800b34e:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800b350:	6855      	ldr	r5, [r2, #4]
 800b352:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 800b356:	430b      	orrs	r3, r1
 800b358:	6921      	ldr	r1, [r4, #16]
 800b35a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800b35e:	4909      	ldr	r1, [pc, #36]	@ (800b384 <HAL_QSPI_Init+0xa0>)
 800b360:	4029      	ands	r1, r5
 800b362:	430b      	orrs	r3, r1
 800b364:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 800b366:	6813      	ldr	r3, [r2, #0]
 800b368:	f043 0301 	orr.w	r3, r3, #1
 800b36c:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 800b36e:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b370:	6460      	str	r0, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 800b372:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800b376:	2300      	movs	r3, #0
 800b378:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800b37c:	b003      	add	sp, #12
 800b37e:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800b380:	2001      	movs	r0, #1
 800b382:	e7fb      	b.n	800b37c <HAL_QSPI_Init+0x98>
 800b384:	ffe0f8fe 	.word	0xffe0f8fe

0800b388 <HAL_QSPI_Command>:
{
 800b388:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800b38c:	4604      	mov	r4, r0
 800b38e:	468a      	mov	sl, r1
 800b390:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 800b392:	f7fc fce9 	bl	8007d68 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800b396:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800b39a:	4607      	mov	r7, r0
  __HAL_LOCK(hqspi);
 800b39c:	2b01      	cmp	r3, #1
 800b39e:	d036      	beq.n	800b40e <HAL_QSPI_Command+0x86>
 800b3a0:	2301      	movs	r3, #1
 800b3a2:	2602      	movs	r6, #2
 800b3a4:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800b3a8:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800b3ac:	2b01      	cmp	r3, #1
 800b3ae:	fa5f f983 	uxtb.w	r9, r3
 800b3b2:	d128      	bne.n	800b406 <HAL_QSPI_Command+0x7e>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b3b4:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	2120      	movs	r1, #32
 800b3ba:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b3bc:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800b3be:	f884 6041 	strb.w	r6, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800b3c2:	f8cd 8000 	str.w	r8, [sp]
 800b3c6:	f7ff ff65 	bl	800b294 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800b3ca:	4605      	mov	r5, r0
 800b3cc:	b9a0      	cbnz	r0, 800b3f8 <HAL_QSPI_Command+0x70>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800b3ce:	4602      	mov	r2, r0
 800b3d0:	4651      	mov	r1, sl
 800b3d2:	4620      	mov	r0, r4
 800b3d4:	f7ff fea4 	bl	800b120 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 800b3d8:	f8da 3024 	ldr.w	r3, [sl, #36]	@ 0x24
 800b3dc:	b953      	cbnz	r3, 800b3f4 <HAL_QSPI_Command+0x6c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800b3de:	463b      	mov	r3, r7
 800b3e0:	464a      	mov	r2, r9
 800b3e2:	4631      	mov	r1, r6
 800b3e4:	4620      	mov	r0, r4
 800b3e6:	f8cd 8000 	str.w	r8, [sp]
 800b3ea:	f7ff ff53 	bl	800b294 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800b3ee:	b960      	cbnz	r0, 800b40a <HAL_QSPI_Command+0x82>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800b3f0:	6823      	ldr	r3, [r4, #0]
 800b3f2:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800b3f4:	f884 9041 	strb.w	r9, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800b3fe:	4628      	mov	r0, r5
 800b400:	b002      	add	sp, #8
 800b402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    status = HAL_BUSY;
 800b406:	4635      	mov	r5, r6
 800b408:	e7f6      	b.n	800b3f8 <HAL_QSPI_Command+0x70>
 800b40a:	4605      	mov	r5, r0
 800b40c:	e7f4      	b.n	800b3f8 <HAL_QSPI_Command+0x70>
  __HAL_LOCK(hqspi);
 800b40e:	2502      	movs	r5, #2
 800b410:	e7f5      	b.n	800b3fe <HAL_QSPI_Command+0x76>

0800b412 <HAL_QSPI_Transmit>:
{
 800b412:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b416:	4604      	mov	r4, r0
 800b418:	4688      	mov	r8, r1
 800b41a:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 800b41c:	f7fc fca4 	bl	8007d68 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800b420:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800b424:	4606      	mov	r6, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800b426:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 800b428:	2b01      	cmp	r3, #1
 800b42a:	d04c      	beq.n	800b4c6 <HAL_QSPI_Transmit+0xb4>
 800b42c:	2301      	movs	r3, #1
 800b42e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800b432:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800b436:	2b01      	cmp	r3, #1
 800b438:	b2d8      	uxtb	r0, r3
 800b43a:	d142      	bne.n	800b4c2 <HAL_QSPI_Transmit+0xb0>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b43c:	2300      	movs	r3, #0
 800b43e:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 800b440:	f1b8 0f00 	cmp.w	r8, #0
 800b444:	d038      	beq.n	800b4b8 <HAL_QSPI_Transmit+0xa6>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800b446:	2312      	movs	r3, #18
 800b448:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800b44c:	692b      	ldr	r3, [r5, #16]
 800b44e:	3301      	adds	r3, #1
 800b450:	62e3      	str	r3, [r4, #44]	@ 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800b452:	692b      	ldr	r3, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 800b454:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800b458:	3301      	adds	r3, #1
 800b45a:	62a3      	str	r3, [r4, #40]	@ 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800b45c:	696b      	ldr	r3, [r5, #20]
 800b45e:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800b462:	616b      	str	r3, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 800b464:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b466:	b99b      	cbnz	r3, 800b490 <HAL_QSPI_Transmit+0x7e>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800b468:	4633      	mov	r3, r6
 800b46a:	2201      	movs	r2, #1
 800b46c:	2102      	movs	r1, #2
 800b46e:	4620      	mov	r0, r4
 800b470:	9700      	str	r7, [sp, #0]
 800b472:	f7ff ff0f 	bl	800b294 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800b476:	b910      	cbnz	r0, 800b47e <HAL_QSPI_Transmit+0x6c>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800b478:	6823      	ldr	r3, [r4, #0]
 800b47a:	2202      	movs	r2, #2
 800b47c:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 800b47e:	2301      	movs	r3, #1
 800b480:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800b484:	2300      	movs	r3, #0
 800b486:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800b48a:	b002      	add	sp, #8
 800b48c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800b490:	4633      	mov	r3, r6
 800b492:	2201      	movs	r2, #1
 800b494:	2104      	movs	r1, #4
 800b496:	4620      	mov	r0, r4
 800b498:	9700      	str	r7, [sp, #0]
 800b49a:	f7ff fefb 	bl	800b294 <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 800b49e:	2800      	cmp	r0, #0
 800b4a0:	d1ed      	bne.n	800b47e <HAL_QSPI_Transmit+0x6c>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800b4a2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b4a4:	781b      	ldrb	r3, [r3, #0]
 800b4a6:	f885 3020 	strb.w	r3, [r5, #32]
        hqspi->pTxBuffPtr++;
 800b4aa:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b4ac:	3301      	adds	r3, #1
 800b4ae:	6263      	str	r3, [r4, #36]	@ 0x24
        hqspi->TxXferCount--;
 800b4b0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b4b2:	3b01      	subs	r3, #1
 800b4b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b4b6:	e7d5      	b.n	800b464 <HAL_QSPI_Transmit+0x52>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800b4b8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800b4ba:	f043 0308 	orr.w	r3, r3, #8
 800b4be:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 800b4c0:	e7e0      	b.n	800b484 <HAL_QSPI_Transmit+0x72>
    status = HAL_BUSY;
 800b4c2:	2002      	movs	r0, #2
 800b4c4:	e7de      	b.n	800b484 <HAL_QSPI_Transmit+0x72>
  __HAL_LOCK(hqspi);
 800b4c6:	2002      	movs	r0, #2
 800b4c8:	e7df      	b.n	800b48a <HAL_QSPI_Transmit+0x78>

0800b4ca <HAL_QSPI_Receive>:
{
 800b4ca:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b4ce:	4604      	mov	r4, r0
 800b4d0:	4617      	mov	r7, r2
 800b4d2:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 800b4d4:	f7fc fc48 	bl	8007d68 <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800b4d8:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 800b4da:	4606      	mov	r6, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800b4dc:	69aa      	ldr	r2, [r5, #24]
  __HAL_LOCK(hqspi);
 800b4de:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800b4e2:	2b01      	cmp	r3, #1
 800b4e4:	d04f      	beq.n	800b586 <HAL_QSPI_Receive+0xbc>
 800b4e6:	2301      	movs	r3, #1
 800b4e8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800b4ec:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800b4f0:	2b01      	cmp	r3, #1
 800b4f2:	b2d8      	uxtb	r0, r3
 800b4f4:	d145      	bne.n	800b582 <HAL_QSPI_Receive+0xb8>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 800b4fa:	f1b8 0f00 	cmp.w	r8, #0
 800b4fe:	d03b      	beq.n	800b578 <HAL_QSPI_Receive+0xae>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800b500:	2322      	movs	r3, #34	@ 0x22
 800b502:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800b506:	692b      	ldr	r3, [r5, #16]
 800b508:	3301      	adds	r3, #1
 800b50a:	63a3      	str	r3, [r4, #56]	@ 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800b50c:	692b      	ldr	r3, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 800b50e:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800b512:	3301      	adds	r3, #1
 800b514:	6363      	str	r3, [r4, #52]	@ 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800b516:	6969      	ldr	r1, [r5, #20]
 800b518:	f021 6140 	bic.w	r1, r1, #201326592	@ 0xc000000
 800b51c:	f041 6180 	orr.w	r1, r1, #67108864	@ 0x4000000
 800b520:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800b522:	61aa      	str	r2, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 800b524:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800b526:	b99b      	cbnz	r3, 800b550 <HAL_QSPI_Receive+0x86>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800b528:	4633      	mov	r3, r6
 800b52a:	2201      	movs	r2, #1
 800b52c:	2102      	movs	r1, #2
 800b52e:	4620      	mov	r0, r4
 800b530:	9700      	str	r7, [sp, #0]
 800b532:	f7ff feaf 	bl	800b294 <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 800b536:	b910      	cbnz	r0, 800b53e <HAL_QSPI_Receive+0x74>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800b538:	6823      	ldr	r3, [r4, #0]
 800b53a:	2202      	movs	r2, #2
 800b53c:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 800b53e:	2301      	movs	r3, #1
 800b540:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800b544:	2300      	movs	r3, #0
 800b546:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800b54a:	b002      	add	sp, #8
 800b54c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800b550:	4633      	mov	r3, r6
 800b552:	2201      	movs	r2, #1
 800b554:	2106      	movs	r1, #6
 800b556:	4620      	mov	r0, r4
 800b558:	9700      	str	r7, [sp, #0]
 800b55a:	f7ff fe9b 	bl	800b294 <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 800b55e:	2800      	cmp	r0, #0
 800b560:	d1ed      	bne.n	800b53e <HAL_QSPI_Receive+0x74>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800b562:	f895 2020 	ldrb.w	r2, [r5, #32]
 800b566:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800b568:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800b56a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800b56c:	3301      	adds	r3, #1
 800b56e:	6323      	str	r3, [r4, #48]	@ 0x30
        hqspi->RxXferCount--;
 800b570:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800b572:	3b01      	subs	r3, #1
 800b574:	63a3      	str	r3, [r4, #56]	@ 0x38
 800b576:	e7d5      	b.n	800b524 <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800b578:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800b57a:	f043 0308 	orr.w	r3, r3, #8
 800b57e:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 800b580:	e7e0      	b.n	800b544 <HAL_QSPI_Receive+0x7a>
    status = HAL_BUSY;
 800b582:	2002      	movs	r0, #2
 800b584:	e7de      	b.n	800b544 <HAL_QSPI_Receive+0x7a>
  __HAL_LOCK(hqspi);
 800b586:	2002      	movs	r0, #2
 800b588:	e7df      	b.n	800b54a <HAL_QSPI_Receive+0x80>

0800b58a <HAL_QSPI_AutoPolling>:
{
 800b58a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b58e:	4604      	mov	r4, r0
 800b590:	461f      	mov	r7, r3
 800b592:	4689      	mov	r9, r1
 800b594:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 800b596:	f7fc fbe7 	bl	8007d68 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800b59a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800b59e:	4606      	mov	r6, r0
  __HAL_LOCK(hqspi);
 800b5a0:	2b01      	cmp	r3, #1
 800b5a2:	d041      	beq.n	800b628 <HAL_QSPI_AutoPolling+0x9e>
 800b5a4:	2301      	movs	r3, #1
 800b5a6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800b5aa:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800b5ae:	2b01      	cmp	r3, #1
 800b5b0:	fa5f f883 	uxtb.w	r8, r3
 800b5b4:	d136      	bne.n	800b624 <HAL_QSPI_AutoPolling+0x9a>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800b5b6:	2342      	movs	r3, #66	@ 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b5b8:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800b5ba:	2120      	movs	r1, #32
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b5bc:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800b5be:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	9700      	str	r7, [sp, #0]
 800b5c6:	4620      	mov	r0, r4
 800b5c8:	f7ff fe64 	bl	800b294 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800b5cc:	bb20      	cbnz	r0, 800b618 <HAL_QSPI_AutoPolling+0x8e>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800b5ce:	6822      	ldr	r2, [r4, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800b5d0:	4620      	mov	r0, r4
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800b5d2:	682b      	ldr	r3, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800b5d4:	6929      	ldr	r1, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800b5d6:	6293      	str	r3, [r2, #40]	@ 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800b5d8:	686b      	ldr	r3, [r5, #4]
 800b5da:	6253      	str	r3, [r2, #36]	@ 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800b5dc:	68ab      	ldr	r3, [r5, #8]
 800b5de:	62d3      	str	r3, [r2, #44]	@ 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800b5e0:	6813      	ldr	r3, [r2, #0]
 800b5e2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800b5e6:	430b      	orrs	r3, r1
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800b5e8:	4649      	mov	r1, r9
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800b5ea:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b5ee:	6013      	str	r3, [r2, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800b5f0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
      cmd->NbData = cfg->StatusBytesSize;
 800b5f4:	68eb      	ldr	r3, [r5, #12]
 800b5f6:	f8c9 3028 	str.w	r3, [r9, #40]	@ 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800b5fa:	f7ff fd91 	bl	800b120 <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800b5fe:	4633      	mov	r3, r6
 800b600:	4642      	mov	r2, r8
 800b602:	2108      	movs	r1, #8
 800b604:	4620      	mov	r0, r4
 800b606:	9700      	str	r7, [sp, #0]
 800b608:	f7ff fe44 	bl	800b294 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800b60c:	b920      	cbnz	r0, 800b618 <HAL_QSPI_AutoPolling+0x8e>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800b60e:	6823      	ldr	r3, [r4, #0]
 800b610:	2208      	movs	r2, #8
 800b612:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800b614:	f884 8041 	strb.w	r8, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800b618:	2300      	movs	r3, #0
 800b61a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800b61e:	b003      	add	sp, #12
 800b620:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 800b624:	2002      	movs	r0, #2
 800b626:	e7f7      	b.n	800b618 <HAL_QSPI_AutoPolling+0x8e>
  __HAL_LOCK(hqspi);
 800b628:	2002      	movs	r0, #2
 800b62a:	e7f8      	b.n	800b61e <HAL_QSPI_AutoPolling+0x94>

0800b62c <HAL_QSPI_MemoryMapped>:
{
 800b62c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b62e:	4604      	mov	r4, r0
 800b630:	4616      	mov	r6, r2
 800b632:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800b634:	f7fc fb98 	bl	8007d68 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800b638:	f894 2040 	ldrb.w	r2, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800b63c:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 800b63e:	2a01      	cmp	r2, #1
 800b640:	d033      	beq.n	800b6aa <HAL_QSPI_MemoryMapped+0x7e>
 800b642:	2201      	movs	r2, #1
 800b644:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800b648:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 800b64c:	2a01      	cmp	r2, #1
 800b64e:	d12a      	bne.n	800b6a6 <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b650:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800b652:	2182      	movs	r1, #130	@ 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800b654:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b656:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800b658:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800b65c:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b65e:	9100      	str	r1, [sp, #0]
 800b660:	2120      	movs	r1, #32
 800b662:	f7ff fe17 	bl	800b294 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800b666:	4605      	mov	r5, r0
 800b668:	b9b8      	cbnz	r0, 800b69a <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800b66a:	6823      	ldr	r3, [r4, #0]
 800b66c:	6872      	ldr	r2, [r6, #4]
 800b66e:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800b670:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800b672:	f020 0008 	bic.w	r0, r0, #8
 800b676:	ea40 0002 	orr.w	r0, r0, r2
 800b67a:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800b67c:	d107      	bne.n	800b68e <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800b67e:	6832      	ldr	r2, [r6, #0]
 800b680:	631a      	str	r2, [r3, #48]	@ 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800b682:	2210      	movs	r2, #16
 800b684:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800b686:	681a      	ldr	r2, [r3, #0]
 800b688:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800b68c:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800b68e:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 800b692:	4639      	mov	r1, r7
 800b694:	4620      	mov	r0, r4
 800b696:	f7ff fd43 	bl	800b120 <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 800b69a:	2300      	movs	r3, #0
 800b69c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800b6a0:	4628      	mov	r0, r5
 800b6a2:	b003      	add	sp, #12
 800b6a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 800b6a6:	2502      	movs	r5, #2
 800b6a8:	e7f7      	b.n	800b69a <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 800b6aa:	2502      	movs	r5, #2
 800b6ac:	e7f8      	b.n	800b6a0 <HAL_QSPI_MemoryMapped+0x74>
	...

0800b6b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b6b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b6b4:	4604      	mov	r4, r0
 800b6b6:	b918      	cbnz	r0, 800b6c0 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 800b6b8:	2001      	movs	r0, #1
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
}
 800b6ba:	b002      	add	sp, #8
 800b6bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b6c0:	6803      	ldr	r3, [r0, #0]
 800b6c2:	07de      	lsls	r6, r3, #31
 800b6c4:	d410      	bmi.n	800b6e8 <HAL_RCC_OscConfig+0x38>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b6c6:	6823      	ldr	r3, [r4, #0]
 800b6c8:	079d      	lsls	r5, r3, #30
 800b6ca:	d45e      	bmi.n	800b78a <HAL_RCC_OscConfig+0xda>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b6cc:	6823      	ldr	r3, [r4, #0]
 800b6ce:	0719      	lsls	r1, r3, #28
 800b6d0:	f100 80a3 	bmi.w	800b81a <HAL_RCC_OscConfig+0x16a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b6d4:	6823      	ldr	r3, [r4, #0]
 800b6d6:	075a      	lsls	r2, r3, #29
 800b6d8:	f100 80c4 	bmi.w	800b864 <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b6dc:	69a2      	ldr	r2, [r4, #24]
 800b6de:	2a00      	cmp	r2, #0
 800b6e0:	f040 812e 	bne.w	800b940 <HAL_RCC_OscConfig+0x290>
  return HAL_OK;
 800b6e4:	2000      	movs	r0, #0
 800b6e6:	e7e8      	b.n	800b6ba <HAL_RCC_OscConfig+0xa>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b6e8:	4b93      	ldr	r3, [pc, #588]	@ (800b938 <HAL_RCC_OscConfig+0x288>)
 800b6ea:	689a      	ldr	r2, [r3, #8]
 800b6ec:	f002 020c 	and.w	r2, r2, #12
 800b6f0:	2a04      	cmp	r2, #4
 800b6f2:	d007      	beq.n	800b704 <HAL_RCC_OscConfig+0x54>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b6f4:	689a      	ldr	r2, [r3, #8]
 800b6f6:	f002 020c 	and.w	r2, r2, #12
 800b6fa:	2a08      	cmp	r2, #8
 800b6fc:	d10a      	bne.n	800b714 <HAL_RCC_OscConfig+0x64>
 800b6fe:	685b      	ldr	r3, [r3, #4]
 800b700:	0259      	lsls	r1, r3, #9
 800b702:	d507      	bpl.n	800b714 <HAL_RCC_OscConfig+0x64>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b704:	4b8c      	ldr	r3, [pc, #560]	@ (800b938 <HAL_RCC_OscConfig+0x288>)
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	039a      	lsls	r2, r3, #14
 800b70a:	d5dc      	bpl.n	800b6c6 <HAL_RCC_OscConfig+0x16>
 800b70c:	6863      	ldr	r3, [r4, #4]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d1d9      	bne.n	800b6c6 <HAL_RCC_OscConfig+0x16>
 800b712:	e7d1      	b.n	800b6b8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b714:	6863      	ldr	r3, [r4, #4]
 800b716:	4d88      	ldr	r5, [pc, #544]	@ (800b938 <HAL_RCC_OscConfig+0x288>)
 800b718:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b71c:	d111      	bne.n	800b742 <HAL_RCC_OscConfig+0x92>
 800b71e:	682b      	ldr	r3, [r5, #0]
 800b720:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b724:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800b726:	f7fc fb1f 	bl	8007d68 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b72a:	4e83      	ldr	r6, [pc, #524]	@ (800b938 <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 800b72c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b72e:	6833      	ldr	r3, [r6, #0]
 800b730:	039b      	lsls	r3, r3, #14
 800b732:	d4c8      	bmi.n	800b6c6 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b734:	f7fc fb18 	bl	8007d68 <HAL_GetTick>
 800b738:	1b40      	subs	r0, r0, r5
 800b73a:	2864      	cmp	r0, #100	@ 0x64
 800b73c:	d9f7      	bls.n	800b72e <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 800b73e:	2003      	movs	r0, #3
 800b740:	e7bb      	b.n	800b6ba <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b742:	b99b      	cbnz	r3, 800b76c <HAL_RCC_OscConfig+0xbc>
 800b744:	682b      	ldr	r3, [r5, #0]
 800b746:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b74a:	602b      	str	r3, [r5, #0]
 800b74c:	682b      	ldr	r3, [r5, #0]
 800b74e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b752:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800b754:	f7fc fb08 	bl	8007d68 <HAL_GetTick>
 800b758:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b75a:	682b      	ldr	r3, [r5, #0]
 800b75c:	039f      	lsls	r7, r3, #14
 800b75e:	d5b2      	bpl.n	800b6c6 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b760:	f7fc fb02 	bl	8007d68 <HAL_GetTick>
 800b764:	1b80      	subs	r0, r0, r6
 800b766:	2864      	cmp	r0, #100	@ 0x64
 800b768:	d9f7      	bls.n	800b75a <HAL_RCC_OscConfig+0xaa>
 800b76a:	e7e8      	b.n	800b73e <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b76c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b770:	682b      	ldr	r3, [r5, #0]
 800b772:	d103      	bne.n	800b77c <HAL_RCC_OscConfig+0xcc>
 800b774:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b778:	602b      	str	r3, [r5, #0]
 800b77a:	e7d0      	b.n	800b71e <HAL_RCC_OscConfig+0x6e>
 800b77c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b780:	602b      	str	r3, [r5, #0]
 800b782:	682b      	ldr	r3, [r5, #0]
 800b784:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b788:	e7cc      	b.n	800b724 <HAL_RCC_OscConfig+0x74>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b78a:	4b6b      	ldr	r3, [pc, #428]	@ (800b938 <HAL_RCC_OscConfig+0x288>)
 800b78c:	689a      	ldr	r2, [r3, #8]
 800b78e:	f012 0f0c 	tst.w	r2, #12
 800b792:	d007      	beq.n	800b7a4 <HAL_RCC_OscConfig+0xf4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b794:	689a      	ldr	r2, [r3, #8]
 800b796:	f002 020c 	and.w	r2, r2, #12
 800b79a:	2a08      	cmp	r2, #8
 800b79c:	d111      	bne.n	800b7c2 <HAL_RCC_OscConfig+0x112>
 800b79e:	685b      	ldr	r3, [r3, #4]
 800b7a0:	025d      	lsls	r5, r3, #9
 800b7a2:	d40e      	bmi.n	800b7c2 <HAL_RCC_OscConfig+0x112>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b7a4:	4a64      	ldr	r2, [pc, #400]	@ (800b938 <HAL_RCC_OscConfig+0x288>)
 800b7a6:	6813      	ldr	r3, [r2, #0]
 800b7a8:	0799      	lsls	r1, r3, #30
 800b7aa:	d502      	bpl.n	800b7b2 <HAL_RCC_OscConfig+0x102>
 800b7ac:	68e3      	ldr	r3, [r4, #12]
 800b7ae:	2b01      	cmp	r3, #1
 800b7b0:	d182      	bne.n	800b6b8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b7b2:	6813      	ldr	r3, [r2, #0]
 800b7b4:	6921      	ldr	r1, [r4, #16]
 800b7b6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800b7ba:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800b7be:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b7c0:	e784      	b.n	800b6cc <HAL_RCC_OscConfig+0x1c>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b7c2:	68e3      	ldr	r3, [r4, #12]
 800b7c4:	4d5c      	ldr	r5, [pc, #368]	@ (800b938 <HAL_RCC_OscConfig+0x288>)
 800b7c6:	b1bb      	cbz	r3, 800b7f8 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 800b7c8:	682b      	ldr	r3, [r5, #0]
 800b7ca:	f043 0301 	orr.w	r3, r3, #1
 800b7ce:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800b7d0:	f7fc faca 	bl	8007d68 <HAL_GetTick>
 800b7d4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b7d6:	682b      	ldr	r3, [r5, #0]
 800b7d8:	079b      	lsls	r3, r3, #30
 800b7da:	d507      	bpl.n	800b7ec <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b7dc:	682b      	ldr	r3, [r5, #0]
 800b7de:	6922      	ldr	r2, [r4, #16]
 800b7e0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800b7e4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800b7e8:	602b      	str	r3, [r5, #0]
 800b7ea:	e76f      	b.n	800b6cc <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b7ec:	f7fc fabc 	bl	8007d68 <HAL_GetTick>
 800b7f0:	1b80      	subs	r0, r0, r6
 800b7f2:	2802      	cmp	r0, #2
 800b7f4:	d9ef      	bls.n	800b7d6 <HAL_RCC_OscConfig+0x126>
 800b7f6:	e7a2      	b.n	800b73e <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 800b7f8:	682b      	ldr	r3, [r5, #0]
 800b7fa:	f023 0301 	bic.w	r3, r3, #1
 800b7fe:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800b800:	f7fc fab2 	bl	8007d68 <HAL_GetTick>
 800b804:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b806:	682b      	ldr	r3, [r5, #0]
 800b808:	079f      	lsls	r7, r3, #30
 800b80a:	f57f af5f 	bpl.w	800b6cc <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b80e:	f7fc faab 	bl	8007d68 <HAL_GetTick>
 800b812:	1b80      	subs	r0, r0, r6
 800b814:	2802      	cmp	r0, #2
 800b816:	d9f6      	bls.n	800b806 <HAL_RCC_OscConfig+0x156>
 800b818:	e791      	b.n	800b73e <HAL_RCC_OscConfig+0x8e>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b81a:	6963      	ldr	r3, [r4, #20]
 800b81c:	4d46      	ldr	r5, [pc, #280]	@ (800b938 <HAL_RCC_OscConfig+0x288>)
 800b81e:	b183      	cbz	r3, 800b842 <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 800b820:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800b822:	f043 0301 	orr.w	r3, r3, #1
 800b826:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800b828:	f7fc fa9e 	bl	8007d68 <HAL_GetTick>
 800b82c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b82e:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800b830:	079b      	lsls	r3, r3, #30
 800b832:	f53f af4f 	bmi.w	800b6d4 <HAL_RCC_OscConfig+0x24>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b836:	f7fc fa97 	bl	8007d68 <HAL_GetTick>
 800b83a:	1b80      	subs	r0, r0, r6
 800b83c:	2802      	cmp	r0, #2
 800b83e:	d9f6      	bls.n	800b82e <HAL_RCC_OscConfig+0x17e>
 800b840:	e77d      	b.n	800b73e <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 800b842:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800b844:	f023 0301 	bic.w	r3, r3, #1
 800b848:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800b84a:	f7fc fa8d 	bl	8007d68 <HAL_GetTick>
 800b84e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b850:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800b852:	079f      	lsls	r7, r3, #30
 800b854:	f57f af3e 	bpl.w	800b6d4 <HAL_RCC_OscConfig+0x24>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b858:	f7fc fa86 	bl	8007d68 <HAL_GetTick>
 800b85c:	1b80      	subs	r0, r0, r6
 800b85e:	2802      	cmp	r0, #2
 800b860:	d9f6      	bls.n	800b850 <HAL_RCC_OscConfig+0x1a0>
 800b862:	e76c      	b.n	800b73e <HAL_RCC_OscConfig+0x8e>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b864:	4b34      	ldr	r3, [pc, #208]	@ (800b938 <HAL_RCC_OscConfig+0x288>)
 800b866:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b868:	00d5      	lsls	r5, r2, #3
 800b86a:	d427      	bmi.n	800b8bc <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 800b86c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
      pwrclkchanged = SET;
 800b86e:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800b870:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800b874:	641a      	str	r2, [r3, #64]	@ 0x40
 800b876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b878:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b87c:	9301      	str	r3, [sp, #4]
 800b87e:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b880:	4d2e      	ldr	r5, [pc, #184]	@ (800b93c <HAL_RCC_OscConfig+0x28c>)
 800b882:	682b      	ldr	r3, [r5, #0]
 800b884:	05d8      	lsls	r0, r3, #23
 800b886:	d51b      	bpl.n	800b8c0 <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b888:	68a3      	ldr	r3, [r4, #8]
 800b88a:	4d2b      	ldr	r5, [pc, #172]	@ (800b938 <HAL_RCC_OscConfig+0x288>)
 800b88c:	2b01      	cmp	r3, #1
 800b88e:	d127      	bne.n	800b8e0 <HAL_RCC_OscConfig+0x230>
 800b890:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800b892:	f043 0301 	orr.w	r3, r3, #1
 800b896:	672b      	str	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b898:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 800b89c:	f7fc fa64 	bl	8007d68 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b8a0:	4e25      	ldr	r6, [pc, #148]	@ (800b938 <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 800b8a2:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b8a4:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 800b8a6:	079a      	lsls	r2, r3, #30
 800b8a8:	d53f      	bpl.n	800b92a <HAL_RCC_OscConfig+0x27a>
    if (pwrclkchanged == SET)
 800b8aa:	2f00      	cmp	r7, #0
 800b8ac:	f43f af16 	beq.w	800b6dc <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 800b8b0:	4a21      	ldr	r2, [pc, #132]	@ (800b938 <HAL_RCC_OscConfig+0x288>)
 800b8b2:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800b8b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b8b8:	6413      	str	r3, [r2, #64]	@ 0x40
 800b8ba:	e70f      	b.n	800b6dc <HAL_RCC_OscConfig+0x2c>
  FlagStatus pwrclkchanged = RESET;
 800b8bc:	2700      	movs	r7, #0
 800b8be:	e7df      	b.n	800b880 <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 800b8c0:	682b      	ldr	r3, [r5, #0]
 800b8c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b8c6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800b8c8:	f7fc fa4e 	bl	8007d68 <HAL_GetTick>
 800b8cc:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b8ce:	682b      	ldr	r3, [r5, #0]
 800b8d0:	05d9      	lsls	r1, r3, #23
 800b8d2:	d4d9      	bmi.n	800b888 <HAL_RCC_OscConfig+0x1d8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b8d4:	f7fc fa48 	bl	8007d68 <HAL_GetTick>
 800b8d8:	1b80      	subs	r0, r0, r6
 800b8da:	2864      	cmp	r0, #100	@ 0x64
 800b8dc:	d9f7      	bls.n	800b8ce <HAL_RCC_OscConfig+0x21e>
 800b8de:	e72e      	b.n	800b73e <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b8e0:	b9ab      	cbnz	r3, 800b90e <HAL_RCC_OscConfig+0x25e>
 800b8e2:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b8e4:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b8e8:	f023 0301 	bic.w	r3, r3, #1
 800b8ec:	672b      	str	r3, [r5, #112]	@ 0x70
 800b8ee:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800b8f0:	f023 0304 	bic.w	r3, r3, #4
 800b8f4:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 800b8f6:	f7fc fa37 	bl	8007d68 <HAL_GetTick>
 800b8fa:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b8fc:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800b8fe:	079b      	lsls	r3, r3, #30
 800b900:	d5d3      	bpl.n	800b8aa <HAL_RCC_OscConfig+0x1fa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b902:	f7fc fa31 	bl	8007d68 <HAL_GetTick>
 800b906:	1b80      	subs	r0, r0, r6
 800b908:	4540      	cmp	r0, r8
 800b90a:	d9f7      	bls.n	800b8fc <HAL_RCC_OscConfig+0x24c>
 800b90c:	e717      	b.n	800b73e <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b90e:	2b05      	cmp	r3, #5
 800b910:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800b912:	d103      	bne.n	800b91c <HAL_RCC_OscConfig+0x26c>
 800b914:	f043 0304 	orr.w	r3, r3, #4
 800b918:	672b      	str	r3, [r5, #112]	@ 0x70
 800b91a:	e7b9      	b.n	800b890 <HAL_RCC_OscConfig+0x1e0>
 800b91c:	f023 0301 	bic.w	r3, r3, #1
 800b920:	672b      	str	r3, [r5, #112]	@ 0x70
 800b922:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800b924:	f023 0304 	bic.w	r3, r3, #4
 800b928:	e7b5      	b.n	800b896 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b92a:	f7fc fa1d 	bl	8007d68 <HAL_GetTick>
 800b92e:	1b40      	subs	r0, r0, r5
 800b930:	4540      	cmp	r0, r8
 800b932:	d9b7      	bls.n	800b8a4 <HAL_RCC_OscConfig+0x1f4>
 800b934:	e703      	b.n	800b73e <HAL_RCC_OscConfig+0x8e>
 800b936:	bf00      	nop
 800b938:	40023800 	.word	0x40023800
 800b93c:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b940:	4d3c      	ldr	r5, [pc, #240]	@ (800ba34 <HAL_RCC_OscConfig+0x384>)
 800b942:	68ab      	ldr	r3, [r5, #8]
 800b944:	f003 030c 	and.w	r3, r3, #12
 800b948:	2b08      	cmp	r3, #8
 800b94a:	d042      	beq.n	800b9d2 <HAL_RCC_OscConfig+0x322>
        __HAL_RCC_PLL_DISABLE();
 800b94c:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b94e:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800b950:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b954:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b956:	d12f      	bne.n	800b9b8 <HAL_RCC_OscConfig+0x308>
        tickstart = HAL_GetTick();
 800b958:	f7fc fa06 	bl	8007d68 <HAL_GetTick>
 800b95c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b95e:	682b      	ldr	r3, [r5, #0]
 800b960:	0199      	lsls	r1, r3, #6
 800b962:	d423      	bmi.n	800b9ac <HAL_RCC_OscConfig+0x2fc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b964:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 800b968:	4313      	orrs	r3, r2
 800b96a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800b96c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800b970:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800b972:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800b976:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800b978:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800b97c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800b97e:	0852      	lsrs	r2, r2, #1
 800b980:	3a01      	subs	r2, #1
 800b982:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b986:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800b988:	682b      	ldr	r3, [r5, #0]
 800b98a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b98e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800b990:	f7fc f9ea 	bl	8007d68 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b994:	4d27      	ldr	r5, [pc, #156]	@ (800ba34 <HAL_RCC_OscConfig+0x384>)
        tickstart = HAL_GetTick();
 800b996:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b998:	682b      	ldr	r3, [r5, #0]
 800b99a:	019a      	lsls	r2, r3, #6
 800b99c:	f53f aea2 	bmi.w	800b6e4 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b9a0:	f7fc f9e2 	bl	8007d68 <HAL_GetTick>
 800b9a4:	1b00      	subs	r0, r0, r4
 800b9a6:	2802      	cmp	r0, #2
 800b9a8:	d9f6      	bls.n	800b998 <HAL_RCC_OscConfig+0x2e8>
 800b9aa:	e6c8      	b.n	800b73e <HAL_RCC_OscConfig+0x8e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b9ac:	f7fc f9dc 	bl	8007d68 <HAL_GetTick>
 800b9b0:	1b80      	subs	r0, r0, r6
 800b9b2:	2802      	cmp	r0, #2
 800b9b4:	d9d3      	bls.n	800b95e <HAL_RCC_OscConfig+0x2ae>
 800b9b6:	e6c2      	b.n	800b73e <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
 800b9b8:	f7fc f9d6 	bl	8007d68 <HAL_GetTick>
 800b9bc:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b9be:	682b      	ldr	r3, [r5, #0]
 800b9c0:	019b      	lsls	r3, r3, #6
 800b9c2:	f57f ae8f 	bpl.w	800b6e4 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b9c6:	f7fc f9cf 	bl	8007d68 <HAL_GetTick>
 800b9ca:	1b00      	subs	r0, r0, r4
 800b9cc:	2802      	cmp	r0, #2
 800b9ce:	d9f6      	bls.n	800b9be <HAL_RCC_OscConfig+0x30e>
 800b9d0:	e6b5      	b.n	800b73e <HAL_RCC_OscConfig+0x8e>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b9d2:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 800b9d4:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b9d6:	f43f ae6f 	beq.w	800b6b8 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b9da:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b9de:	69e1      	ldr	r1, [r4, #28]
 800b9e0:	428a      	cmp	r2, r1
 800b9e2:	f47f ae69 	bne.w	800b6b8 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b9e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b9ea:	6a21      	ldr	r1, [r4, #32]
 800b9ec:	428a      	cmp	r2, r1
 800b9ee:	f47f ae63 	bne.w	800b6b8 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b9f2:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b9f6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b9f8:	401a      	ands	r2, r3
 800b9fa:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800b9fe:	f47f ae5b 	bne.w	800b6b8 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800ba02:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800ba04:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 800ba08:	0852      	lsrs	r2, r2, #1
 800ba0a:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ba0c:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800ba10:	f47f ae52 	bne.w	800b6b8 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ba14:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800ba18:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800ba1a:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 800ba1e:	f47f ae4b 	bne.w	800b6b8 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800ba22:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800ba24:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ba28:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 800ba2c:	bf14      	ite	ne
 800ba2e:	2001      	movne	r0, #1
 800ba30:	2000      	moveq	r0, #0
 800ba32:	e642      	b.n	800b6ba <HAL_RCC_OscConfig+0xa>
 800ba34:	40023800 	.word	0x40023800

0800ba38 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ba38:	4913      	ldr	r1, [pc, #76]	@ (800ba88 <HAL_RCC_GetSysClockFreq+0x50>)
{
 800ba3a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ba3c:	688b      	ldr	r3, [r1, #8]
 800ba3e:	f003 030c 	and.w	r3, r3, #12
 800ba42:	2b04      	cmp	r3, #4
 800ba44:	d01b      	beq.n	800ba7e <HAL_RCC_GetSysClockFreq+0x46>
 800ba46:	2b08      	cmp	r3, #8
 800ba48:	d11b      	bne.n	800ba82 <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ba4a:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800ba4c:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ba4e:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ba50:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800ba54:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ba58:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800ba5c:	bf1a      	itte	ne
 800ba5e:	480b      	ldrne	r0, [pc, #44]	@ (800ba8c <HAL_RCC_GetSysClockFreq+0x54>)
 800ba60:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ba62:	480b      	ldreq	r0, [pc, #44]	@ (800ba90 <HAL_RCC_GetSysClockFreq+0x58>)
 800ba64:	fba1 0100 	umull	r0, r1, r1, r0
 800ba68:	f7f4 fc8a 	bl	8000380 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800ba6c:	4b06      	ldr	r3, [pc, #24]	@ (800ba88 <HAL_RCC_GetSysClockFreq+0x50>)
 800ba6e:	685b      	ldr	r3, [r3, #4]
 800ba70:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800ba74:	3301      	adds	r3, #1
 800ba76:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 800ba78:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800ba7c:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ba7e:	4803      	ldr	r0, [pc, #12]	@ (800ba8c <HAL_RCC_GetSysClockFreq+0x54>)
 800ba80:	e7fc      	b.n	800ba7c <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 800ba82:	4803      	ldr	r0, [pc, #12]	@ (800ba90 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 800ba84:	e7fa      	b.n	800ba7c <HAL_RCC_GetSysClockFreq+0x44>
 800ba86:	bf00      	nop
 800ba88:	40023800 	.word	0x40023800
 800ba8c:	017d7840 	.word	0x017d7840
 800ba90:	00f42400 	.word	0x00f42400

0800ba94 <HAL_RCC_ClockConfig>:
{
 800ba94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba98:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800ba9a:	4604      	mov	r4, r0
 800ba9c:	b910      	cbnz	r0, 800baa4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800ba9e:	2001      	movs	r0, #1
}
 800baa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800baa4:	4a45      	ldr	r2, [pc, #276]	@ (800bbbc <HAL_RCC_ClockConfig+0x128>)
 800baa6:	6813      	ldr	r3, [r2, #0]
 800baa8:	f003 030f 	and.w	r3, r3, #15
 800baac:	428b      	cmp	r3, r1
 800baae:	d328      	bcc.n	800bb02 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bab0:	6821      	ldr	r1, [r4, #0]
 800bab2:	078f      	lsls	r7, r1, #30
 800bab4:	d430      	bmi.n	800bb18 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bab6:	07c8      	lsls	r0, r1, #31
 800bab8:	d443      	bmi.n	800bb42 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800baba:	4a40      	ldr	r2, [pc, #256]	@ (800bbbc <HAL_RCC_ClockConfig+0x128>)
 800babc:	6813      	ldr	r3, [r2, #0]
 800babe:	f003 030f 	and.w	r3, r3, #15
 800bac2:	42ab      	cmp	r3, r5
 800bac4:	d866      	bhi.n	800bb94 <HAL_RCC_ClockConfig+0x100>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bac6:	6822      	ldr	r2, [r4, #0]
 800bac8:	0751      	lsls	r1, r2, #29
 800baca:	d46f      	bmi.n	800bbac <HAL_RCC_ClockConfig+0x118>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bacc:	0713      	lsls	r3, r2, #28
 800bace:	d507      	bpl.n	800bae0 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800bad0:	4a3b      	ldr	r2, [pc, #236]	@ (800bbc0 <HAL_RCC_ClockConfig+0x12c>)
 800bad2:	6921      	ldr	r1, [r4, #16]
 800bad4:	6893      	ldr	r3, [r2, #8]
 800bad6:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800bada:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800bade:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800bae0:	f7ff ffaa 	bl	800ba38 <HAL_RCC_GetSysClockFreq>
 800bae4:	4b36      	ldr	r3, [pc, #216]	@ (800bbc0 <HAL_RCC_ClockConfig+0x12c>)
 800bae6:	4a37      	ldr	r2, [pc, #220]	@ (800bbc4 <HAL_RCC_ClockConfig+0x130>)
 800bae8:	689b      	ldr	r3, [r3, #8]
 800baea:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800baee:	5cd3      	ldrb	r3, [r2, r3]
 800baf0:	40d8      	lsrs	r0, r3
 800baf2:	4b35      	ldr	r3, [pc, #212]	@ (800bbc8 <HAL_RCC_ClockConfig+0x134>)
 800baf4:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800baf6:	4b35      	ldr	r3, [pc, #212]	@ (800bbcc <HAL_RCC_ClockConfig+0x138>)
 800baf8:	6818      	ldr	r0, [r3, #0]
 800bafa:	f7f9 fb09 	bl	8005110 <HAL_InitTick>
  return HAL_OK;
 800bafe:	2000      	movs	r0, #0
 800bb00:	e7ce      	b.n	800baa0 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bb02:	6813      	ldr	r3, [r2, #0]
 800bb04:	f023 030f 	bic.w	r3, r3, #15
 800bb08:	430b      	orrs	r3, r1
 800bb0a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bb0c:	6813      	ldr	r3, [r2, #0]
 800bb0e:	f003 030f 	and.w	r3, r3, #15
 800bb12:	428b      	cmp	r3, r1
 800bb14:	d1c3      	bne.n	800ba9e <HAL_RCC_ClockConfig+0xa>
 800bb16:	e7cb      	b.n	800bab0 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bb18:	f011 0f04 	tst.w	r1, #4
 800bb1c:	4b28      	ldr	r3, [pc, #160]	@ (800bbc0 <HAL_RCC_ClockConfig+0x12c>)
 800bb1e:	d003      	beq.n	800bb28 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bb20:	689a      	ldr	r2, [r3, #8]
 800bb22:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 800bb26:	609a      	str	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bb28:	070e      	lsls	r6, r1, #28
 800bb2a:	d503      	bpl.n	800bb34 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800bb2c:	689a      	ldr	r2, [r3, #8]
 800bb2e:	f442 4260 	orr.w	r2, r2, #57344	@ 0xe000
 800bb32:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bb34:	689a      	ldr	r2, [r3, #8]
 800bb36:	68a0      	ldr	r0, [r4, #8]
 800bb38:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800bb3c:	4302      	orrs	r2, r0
 800bb3e:	609a      	str	r2, [r3, #8]
 800bb40:	e7b9      	b.n	800bab6 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bb42:	6861      	ldr	r1, [r4, #4]
 800bb44:	4b1e      	ldr	r3, [pc, #120]	@ (800bbc0 <HAL_RCC_ClockConfig+0x12c>)
 800bb46:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bb48:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bb4a:	d11b      	bne.n	800bb84 <HAL_RCC_ClockConfig+0xf0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bb4c:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bb50:	d0a5      	beq.n	800ba9e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800bb52:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bb54:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bb58:	4f19      	ldr	r7, [pc, #100]	@ (800bbc0 <HAL_RCC_ClockConfig+0x12c>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800bb5a:	f022 0203 	bic.w	r2, r2, #3
 800bb5e:	430a      	orrs	r2, r1
 800bb60:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800bb62:	f7fc f901 	bl	8007d68 <HAL_GetTick>
 800bb66:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bb68:	68bb      	ldr	r3, [r7, #8]
 800bb6a:	6862      	ldr	r2, [r4, #4]
 800bb6c:	f003 030c 	and.w	r3, r3, #12
 800bb70:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800bb74:	d0a1      	beq.n	800baba <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bb76:	f7fc f8f7 	bl	8007d68 <HAL_GetTick>
 800bb7a:	1b80      	subs	r0, r0, r6
 800bb7c:	4540      	cmp	r0, r8
 800bb7e:	d9f3      	bls.n	800bb68 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 800bb80:	2003      	movs	r0, #3
 800bb82:	e78d      	b.n	800baa0 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bb84:	2902      	cmp	r1, #2
 800bb86:	d102      	bne.n	800bb8e <HAL_RCC_ClockConfig+0xfa>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bb88:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800bb8c:	e7e0      	b.n	800bb50 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bb8e:	f012 0f02 	tst.w	r2, #2
 800bb92:	e7dd      	b.n	800bb50 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bb94:	6813      	ldr	r3, [r2, #0]
 800bb96:	f023 030f 	bic.w	r3, r3, #15
 800bb9a:	432b      	orrs	r3, r5
 800bb9c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bb9e:	6813      	ldr	r3, [r2, #0]
 800bba0:	f003 030f 	and.w	r3, r3, #15
 800bba4:	42ab      	cmp	r3, r5
 800bba6:	f47f af7a 	bne.w	800ba9e <HAL_RCC_ClockConfig+0xa>
 800bbaa:	e78c      	b.n	800bac6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bbac:	4904      	ldr	r1, [pc, #16]	@ (800bbc0 <HAL_RCC_ClockConfig+0x12c>)
 800bbae:	68e0      	ldr	r0, [r4, #12]
 800bbb0:	688b      	ldr	r3, [r1, #8]
 800bbb2:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 800bbb6:	4303      	orrs	r3, r0
 800bbb8:	608b      	str	r3, [r1, #8]
 800bbba:	e787      	b.n	800bacc <HAL_RCC_ClockConfig+0x38>
 800bbbc:	40023c00 	.word	0x40023c00
 800bbc0:	40023800 	.word	0x40023800
 800bbc4:	08029e09 	.word	0x08029e09
 800bbc8:	20000060 	.word	0x20000060
 800bbcc:	20000068 	.word	0x20000068

0800bbd0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800bbd0:	4b04      	ldr	r3, [pc, #16]	@ (800bbe4 <HAL_RCC_GetPCLK1Freq+0x14>)
 800bbd2:	4a05      	ldr	r2, [pc, #20]	@ (800bbe8 <HAL_RCC_GetPCLK1Freq+0x18>)
 800bbd4:	689b      	ldr	r3, [r3, #8]
 800bbd6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800bbda:	5cd3      	ldrb	r3, [r2, r3]
 800bbdc:	4a03      	ldr	r2, [pc, #12]	@ (800bbec <HAL_RCC_GetPCLK1Freq+0x1c>)
 800bbde:	6810      	ldr	r0, [r2, #0]
}
 800bbe0:	40d8      	lsrs	r0, r3
 800bbe2:	4770      	bx	lr
 800bbe4:	40023800 	.word	0x40023800
 800bbe8:	08029e01 	.word	0x08029e01
 800bbec:	20000060 	.word	0x20000060

0800bbf0 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800bbf0:	230f      	movs	r3, #15
 800bbf2:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800bbf4:	4b0b      	ldr	r3, [pc, #44]	@ (800bc24 <HAL_RCC_GetClockConfig+0x34>)
 800bbf6:	689a      	ldr	r2, [r3, #8]
 800bbf8:	f002 0203 	and.w	r2, r2, #3
 800bbfc:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800bbfe:	689a      	ldr	r2, [r3, #8]
 800bc00:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 800bc04:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800bc06:	689a      	ldr	r2, [r3, #8]
 800bc08:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 800bc0c:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800bc0e:	689b      	ldr	r3, [r3, #8]
 800bc10:	08db      	lsrs	r3, r3, #3
 800bc12:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800bc16:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800bc18:	4b03      	ldr	r3, [pc, #12]	@ (800bc28 <HAL_RCC_GetClockConfig+0x38>)
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	f003 030f 	and.w	r3, r3, #15
 800bc20:	600b      	str	r3, [r1, #0]
}
 800bc22:	4770      	bx	lr
 800bc24:	40023800 	.word	0x40023800
 800bc28:	40023c00 	.word	0x40023c00

0800bc2c <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800bc2c:	6803      	ldr	r3, [r0, #0]
{
 800bc2e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800bc32:	f013 0601 	ands.w	r6, r3, #1
{
 800bc36:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800bc38:	d00b      	beq.n	800bc52 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800bc3a:	4ab1      	ldr	r2, [pc, #708]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bc3c:	6891      	ldr	r1, [r2, #8]
 800bc3e:	f421 0100 	bic.w	r1, r1, #8388608	@ 0x800000
 800bc42:	6091      	str	r1, [r2, #8]
 800bc44:	6b46      	ldr	r6, [r0, #52]	@ 0x34
 800bc46:	6891      	ldr	r1, [r2, #8]
 800bc48:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800bc4a:	fab6 f686 	clz	r6, r6
 800bc4e:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800bc50:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800bc52:	f413 2500 	ands.w	r5, r3, #524288	@ 0x80000
 800bc56:	d012      	beq.n	800bc7e <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bc58:	49a9      	ldr	r1, [pc, #676]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bc5a:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 800bc5c:	f8d1 208c 	ldr.w	r2, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800bc60:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bc64:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
    {
      plli2sused = 1;
 800bc68:	bf08      	it	eq
 800bc6a:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bc6c:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800bc70:	bf16      	itet	ne
 800bc72:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 800bc76:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800bc78:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bc7a:	f8c1 208c 	str.w	r2, [r1, #140]	@ 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800bc7e:	02d9      	lsls	r1, r3, #11
 800bc80:	d510      	bpl.n	800bca4 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800bc82:	489f      	ldr	r0, [pc, #636]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bc84:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 800bc86:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800bc8a:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800bc8e:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 800bc92:	ea42 0201 	orr.w	r2, r2, r1
 800bc96:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800bc9a:	f000 81aa 	beq.w	800bff2 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 800bc9e:	2900      	cmp	r1, #0
 800bca0:	bf08      	it	eq
 800bca2:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 800bca4:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 800bca8:	bf18      	it	ne
 800bcaa:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800bcac:	069a      	lsls	r2, r3, #26
 800bcae:	d532      	bpl.n	800bd16 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800bcb0:	4b93      	ldr	r3, [pc, #588]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800bcb2:	4f94      	ldr	r7, [pc, #592]	@ (800bf04 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800bcb4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bcb6:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800bcba:	641a      	str	r2, [r3, #64]	@ 0x40
 800bcbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bcbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bcc2:	9301      	str	r3, [sp, #4]
 800bcc4:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bccc:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bcce:	f7fc f84b 	bl	8007d68 <HAL_GetTick>
 800bcd2:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	05db      	lsls	r3, r3, #23
 800bcd8:	f140 818d 	bpl.w	800bff6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800bcdc:	4f88      	ldr	r7, [pc, #544]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800bcde:	6b22      	ldr	r2, [r4, #48]	@ 0x30
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800bce0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800bce2:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 800bce6:	f040 8191 	bne.w	800c00c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bcea:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800bcec:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800bcf0:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 800bcf4:	4a82      	ldr	r2, [pc, #520]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bcf6:	f040 81ae 	bne.w	800c056 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 800bcfa:	6891      	ldr	r1, [r2, #8]
 800bcfc:	f023 4070 	bic.w	r0, r3, #4026531840	@ 0xf0000000
 800bd00:	f421 11f8 	bic.w	r1, r1, #2031616	@ 0x1f0000
 800bd04:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 800bd08:	4301      	orrs	r1, r0
 800bd0a:	6091      	str	r1, [r2, #8]
 800bd0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bd10:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 800bd12:	430b      	orrs	r3, r1
 800bd14:	6713      	str	r3, [r2, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800bd16:	6823      	ldr	r3, [r4, #0]
 800bd18:	06da      	lsls	r2, r3, #27
 800bd1a:	d50c      	bpl.n	800bd36 <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bd1c:	4a78      	ldr	r2, [pc, #480]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bd1e:	f8d2 108c 	ldr.w	r1, [r2, #140]	@ 0x8c
 800bd22:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 800bd26:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
 800bd2a:	f8d2 108c 	ldr.w	r1, [r2, #140]	@ 0x8c
 800bd2e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800bd30:	4301      	orrs	r1, r0
 800bd32:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800bd36:	045f      	lsls	r7, r3, #17
 800bd38:	d508      	bpl.n	800bd4c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800bd3a:	4971      	ldr	r1, [pc, #452]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bd3c:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 800bd3e:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800bd42:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 800bd46:	4302      	orrs	r2, r0
 800bd48:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800bd4c:	0418      	lsls	r0, r3, #16
 800bd4e:	d508      	bpl.n	800bd62 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800bd50:	496b      	ldr	r1, [pc, #428]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bd52:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 800bd54:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800bd58:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 800bd5c:	4302      	orrs	r2, r0
 800bd5e:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800bd62:	03d9      	lsls	r1, r3, #15
 800bd64:	d508      	bpl.n	800bd78 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800bd66:	4966      	ldr	r1, [pc, #408]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bd68:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 800bd6a:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800bd6e:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 800bd72:	4302      	orrs	r2, r0
 800bd74:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bd78:	039a      	lsls	r2, r3, #14
 800bd7a:	d508      	bpl.n	800bd8e <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bd7c:	4960      	ldr	r1, [pc, #384]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bd7e:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 800bd80:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800bd84:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 800bd88:	4302      	orrs	r2, r0
 800bd8a:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800bd8e:	065f      	lsls	r7, r3, #25
 800bd90:	d508      	bpl.n	800bda4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800bd92:	495b      	ldr	r1, [pc, #364]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bd94:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800bd96:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800bd9a:	f022 0203 	bic.w	r2, r2, #3
 800bd9e:	4302      	orrs	r2, r0
 800bda0:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800bda4:	0618      	lsls	r0, r3, #24
 800bda6:	d508      	bpl.n	800bdba <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800bda8:	4955      	ldr	r1, [pc, #340]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bdaa:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 800bdac:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800bdb0:	f022 020c 	bic.w	r2, r2, #12
 800bdb4:	4302      	orrs	r2, r0
 800bdb6:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800bdba:	05d9      	lsls	r1, r3, #23
 800bdbc:	d508      	bpl.n	800bdd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800bdbe:	4950      	ldr	r1, [pc, #320]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bdc0:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800bdc2:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800bdc6:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 800bdca:	4302      	orrs	r2, r0
 800bdcc:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800bdd0:	059a      	lsls	r2, r3, #22
 800bdd2:	d508      	bpl.n	800bde6 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800bdd4:	494a      	ldr	r1, [pc, #296]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bdd6:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 800bdd8:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800bddc:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 800bde0:	4302      	orrs	r2, r0
 800bde2:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800bde6:	055f      	lsls	r7, r3, #21
 800bde8:	d508      	bpl.n	800bdfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800bdea:	4945      	ldr	r1, [pc, #276]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bdec:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 800bdee:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800bdf2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800bdf6:	4302      	orrs	r2, r0
 800bdf8:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800bdfc:	0518      	lsls	r0, r3, #20
 800bdfe:	d508      	bpl.n	800be12 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800be00:	493f      	ldr	r1, [pc, #252]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800be02:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800be04:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800be08:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800be0c:	4302      	orrs	r2, r0
 800be0e:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800be12:	04d9      	lsls	r1, r3, #19
 800be14:	d508      	bpl.n	800be28 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800be16:	493a      	ldr	r1, [pc, #232]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800be18:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 800be1a:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800be1e:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 800be22:	4302      	orrs	r2, r0
 800be24:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800be28:	049a      	lsls	r2, r3, #18
 800be2a:	d508      	bpl.n	800be3e <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800be2c:	4934      	ldr	r1, [pc, #208]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800be2e:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 800be30:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800be34:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800be38:	4302      	orrs	r2, r0
 800be3a:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800be3e:	025f      	lsls	r7, r3, #9
 800be40:	d508      	bpl.n	800be54 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800be42:	492f      	ldr	r1, [pc, #188]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800be44:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 800be46:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800be4a:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 800be4e:	4302      	orrs	r2, r0
 800be50:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800be54:	0298      	lsls	r0, r3, #10
 800be56:	d50c      	bpl.n	800be72 <HAL_RCCEx_PeriphCLKConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800be58:	4829      	ldr	r0, [pc, #164]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800be5a:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 800be5c:	f8d0 2090 	ldr.w	r2, [r0, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 800be60:	f1b1 6f00 	cmp.w	r1, #134217728	@ 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800be64:	f022 6200 	bic.w	r2, r2, #134217728	@ 0x8000000
      pllsaiused = 1;
 800be68:	bf08      	it	eq
 800be6a:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800be6c:	430a      	orrs	r2, r1
 800be6e:	f8c0 2090 	str.w	r2, [r0, #144]	@ 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 800be72:	f013 0f08 	tst.w	r3, #8
 800be76:	bf18      	it	ne
 800be78:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800be7a:	0359      	lsls	r1, r3, #13
 800be7c:	d508      	bpl.n	800be90 <HAL_RCCEx_PeriphCLKConfig+0x264>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800be7e:	4920      	ldr	r1, [pc, #128]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800be80:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800be82:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800be86:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800be8a:	4302      	orrs	r2, r0
 800be8c:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800be90:	021a      	lsls	r2, r3, #8
 800be92:	d509      	bpl.n	800bea8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800be94:	491a      	ldr	r1, [pc, #104]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800be96:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 800be9a:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800be9e:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800bea2:	4302      	orrs	r2, r0
 800bea4:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800bea8:	015f      	lsls	r7, r3, #5
 800beaa:	d509      	bpl.n	800bec0 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800beac:	4914      	ldr	r1, [pc, #80]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800beae:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 800beb2:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800beb6:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 800beba:	4302      	orrs	r2, r0
 800bebc:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bec0:	0118      	lsls	r0, r3, #4
 800bec2:	d509      	bpl.n	800bed8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bec4:	490e      	ldr	r1, [pc, #56]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bec6:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 800beca:	f8d1 208c 	ldr.w	r2, [r1, #140]	@ 0x8c
 800bece:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 800bed2:	4302      	orrs	r2, r0
 800bed4:	f8c1 208c 	str.w	r2, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800bed8:	00d9      	lsls	r1, r3, #3
 800beda:	d509      	bpl.n	800bef0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800bedc:	4908      	ldr	r1, [pc, #32]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bede:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 800bee2:	f8d1 208c 	ldr.w	r2, [r1, #140]	@ 0x8c
 800bee6:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 800beea:	4302      	orrs	r2, r0
 800beec:	f8c1 208c 	str.w	r2, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800bef0:	2e01      	cmp	r6, #1
 800bef2:	f000 80b4 	beq.w	800c05e <HAL_RCCEx_PeriphCLKConfig+0x432>
 800bef6:	019a      	lsls	r2, r3, #6
 800bef8:	f100 80b1 	bmi.w	800c05e <HAL_RCCEx_PeriphCLKConfig+0x432>
 800befc:	e004      	b.n	800bf08 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800befe:	bf00      	nop
 800bf00:	40023800 	.word	0x40023800
 800bf04:	40007000 	.word	0x40007000
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800bf08:	2d01      	cmp	r5, #1
 800bf0a:	d170      	bne.n	800bfee <HAL_RCCEx_PeriphCLKConfig+0x3c2>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800bf0c:	4d9d      	ldr	r5, [pc, #628]	@ (800c184 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800bf0e:	682b      	ldr	r3, [r5, #0]
 800bf10:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bf14:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bf16:	f7fb ff27 	bl	8007d68 <HAL_GetTick>
 800bf1a:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800bf1c:	682b      	ldr	r3, [r5, #0]
 800bf1e:	009f      	lsls	r7, r3, #2
 800bf20:	f100 8121 	bmi.w	800c166 <HAL_RCCEx_PeriphCLKConfig+0x53a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800bf24:	6821      	ldr	r1, [r4, #0]
 800bf26:	030e      	lsls	r6, r1, #12
 800bf28:	d501      	bpl.n	800bf2e <HAL_RCCEx_PeriphCLKConfig+0x302>
 800bf2a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800bf2c:	b11b      	cbz	r3, 800bf36 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 800bf2e:	02cd      	lsls	r5, r1, #11
 800bf30:	d51d      	bpl.n	800bf6e <HAL_RCCEx_PeriphCLKConfig+0x342>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800bf32:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bf34:	b9db      	cbnz	r3, 800bf6e <HAL_RCCEx_PeriphCLKConfig+0x342>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800bf36:	4a93      	ldr	r2, [pc, #588]	@ (800c184 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800bf38:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800bf3c:	f8d2 0088 	ldr.w	r0, [r2, #136]	@ 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800bf40:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800bf44:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 800bf48:	4303      	orrs	r3, r0
 800bf4a:	6960      	ldr	r0, [r4, #20]
 800bf4c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800bf50:	69a0      	ldr	r0, [r4, #24]
 800bf52:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800bf56:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800bf5a:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 800bf5e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800bf60:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 800bf64:	3801      	subs	r0, #1
 800bf66:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800bf6a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800bf6e:	0288      	lsls	r0, r1, #10
 800bf70:	d515      	bpl.n	800bf9e <HAL_RCCEx_PeriphCLKConfig+0x372>
 800bf72:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 800bf74:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bf78:	d111      	bne.n	800bf9e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800bf7a:	4a82      	ldr	r2, [pc, #520]	@ (800c184 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800bf7c:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800bf80:	f8d2 0088 	ldr.w	r0, [r2, #136]	@ 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800bf84:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 800bf88:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 800bf8c:	4303      	orrs	r3, r0
 800bf8e:	6960      	ldr	r0, [r4, #20]
 800bf90:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800bf94:	6a20      	ldr	r0, [r4, #32]
 800bf96:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bf9a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800bf9e:	070a      	lsls	r2, r1, #28
 800bfa0:	d519      	bpl.n	800bfd6 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800bfa2:	4a78      	ldr	r2, [pc, #480]	@ (800c184 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800bfa4:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800bfa8:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800bfac:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 800bfb0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800bfb4:	430b      	orrs	r3, r1
 800bfb6:	6961      	ldr	r1, [r4, #20]
 800bfb8:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800bfbc:	69e1      	ldr	r1, [r4, #28]
 800bfbe:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800bfc2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800bfc6:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 800bfca:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800bfcc:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800bfd0:	430b      	orrs	r3, r1
 800bfd2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800bfd6:	4c6b      	ldr	r4, [pc, #428]	@ (800c184 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800bfd8:	6823      	ldr	r3, [r4, #0]
 800bfda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bfde:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bfe0:	f7fb fec2 	bl	8007d68 <HAL_GetTick>
 800bfe4:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800bfe6:	6823      	ldr	r3, [r4, #0]
 800bfe8:	009b      	lsls	r3, r3, #2
 800bfea:	f140 80c3 	bpl.w	800c174 <HAL_RCCEx_PeriphCLKConfig+0x548>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800bfee:	2000      	movs	r0, #0
 800bff0:	e009      	b.n	800c006 <HAL_RCCEx_PeriphCLKConfig+0x3da>
      plli2sused = 1;
 800bff2:	2601      	movs	r6, #1
 800bff4:	e656      	b.n	800bca4 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bff6:	f7fb feb7 	bl	8007d68 <HAL_GetTick>
 800bffa:	eba0 0008 	sub.w	r0, r0, r8
 800bffe:	2864      	cmp	r0, #100	@ 0x64
 800c000:	f67f ae68 	bls.w	800bcd4 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 800c004:	2003      	movs	r0, #3
}
 800c006:	b003      	add	sp, #12
 800c008:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c00c:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 800c010:	4293      	cmp	r3, r2
 800c012:	f43f ae6a 	beq.w	800bcea <HAL_RCCEx_PeriphCLKConfig+0xbe>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c016:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 800c018:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c01a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800c01e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800c022:	673a      	str	r2, [r7, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c024:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800c026:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800c02a:	673a      	str	r2, [r7, #112]	@ 0x70
      RCC->BDCR = tmpreg0;
 800c02c:	673b      	str	r3, [r7, #112]	@ 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c02e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c030:	07d8      	lsls	r0, r3, #31
 800c032:	f57f ae5a 	bpl.w	800bcea <HAL_RCCEx_PeriphCLKConfig+0xbe>
        tickstart = HAL_GetTick();
 800c036:	f7fb fe97 	bl	8007d68 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c03a:	f241 3988 	movw	r9, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 800c03e:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c040:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c042:	0799      	lsls	r1, r3, #30
 800c044:	f53f ae51 	bmi.w	800bcea <HAL_RCCEx_PeriphCLKConfig+0xbe>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c048:	f7fb fe8e 	bl	8007d68 <HAL_GetTick>
 800c04c:	eba0 0008 	sub.w	r0, r0, r8
 800c050:	4548      	cmp	r0, r9
 800c052:	d9f5      	bls.n	800c040 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800c054:	e7d6      	b.n	800c004 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c056:	6891      	ldr	r1, [r2, #8]
 800c058:	f421 11f8 	bic.w	r1, r1, #2031616	@ 0x1f0000
 800c05c:	e655      	b.n	800bd0a <HAL_RCCEx_PeriphCLKConfig+0xde>
    __HAL_RCC_PLLI2S_DISABLE();
 800c05e:	4e49      	ldr	r6, [pc, #292]	@ (800c184 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800c060:	6833      	ldr	r3, [r6, #0]
 800c062:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c066:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800c068:	f7fb fe7e 	bl	8007d68 <HAL_GetTick>
 800c06c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c06e:	6833      	ldr	r3, [r6, #0]
 800c070:	011b      	lsls	r3, r3, #4
 800c072:	d472      	bmi.n	800c15a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800c074:	6822      	ldr	r2, [r4, #0]
 800c076:	07d7      	lsls	r7, r2, #31
 800c078:	d512      	bpl.n	800c0a0 <HAL_RCCEx_PeriphCLKConfig+0x474>
 800c07a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c07c:	b983      	cbnz	r3, 800c0a0 <HAL_RCCEx_PeriphCLKConfig+0x474>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800c07e:	f8d6 3084 	ldr.w	r3, [r6, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800c082:	f8d6 1084 	ldr.w	r1, [r6, #132]	@ 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800c086:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800c08a:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 800c08e:	430b      	orrs	r3, r1
 800c090:	6861      	ldr	r1, [r4, #4]
 800c092:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800c096:	68a1      	ldr	r1, [r4, #8]
 800c098:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800c09c:	f8c6 3084 	str.w	r3, [r6, #132]	@ 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800c0a0:	0316      	lsls	r6, r2, #12
 800c0a2:	d503      	bpl.n	800c0ac <HAL_RCCEx_PeriphCLKConfig+0x480>
 800c0a4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800c0a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c0aa:	d005      	beq.n	800c0b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800c0ac:	02d0      	lsls	r0, r2, #11
 800c0ae:	d51e      	bpl.n	800c0ee <HAL_RCCEx_PeriphCLKConfig+0x4c2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800c0b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c0b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c0b6:	d11a      	bne.n	800c0ee <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800c0b8:	4932      	ldr	r1, [pc, #200]	@ (800c184 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800c0ba:	f8d1 3084 	ldr.w	r3, [r1, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c0be:	f8d1 0084 	ldr.w	r0, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800c0c2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800c0c6:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 800c0ca:	4303      	orrs	r3, r0
 800c0cc:	6860      	ldr	r0, [r4, #4]
 800c0ce:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800c0d2:	68e0      	ldr	r0, [r4, #12]
 800c0d4:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800c0d8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c0dc:	f8d1 008c 	ldr.w	r0, [r1, #140]	@ 0x8c
 800c0e0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800c0e2:	f020 001f 	bic.w	r0, r0, #31
 800c0e6:	3b01      	subs	r3, #1
 800c0e8:	4303      	orrs	r3, r0
 800c0ea:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c0ee:	01d1      	lsls	r1, r2, #7
 800c0f0:	d511      	bpl.n	800c116 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800c0f2:	4924      	ldr	r1, [pc, #144]	@ (800c184 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800c0f4:	f8d1 3084 	ldr.w	r3, [r1, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c0f8:	f8d1 0084 	ldr.w	r0, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800c0fc:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 800c100:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 800c104:	4303      	orrs	r3, r0
 800c106:	6860      	ldr	r0, [r4, #4]
 800c108:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800c10c:	6920      	ldr	r0, [r4, #16]
 800c10e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c112:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c116:	0192      	lsls	r2, r2, #6
 800c118:	d50d      	bpl.n	800c136 <HAL_RCCEx_PeriphCLKConfig+0x50a>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c11a:	6923      	ldr	r3, [r4, #16]
 800c11c:	6862      	ldr	r2, [r4, #4]
 800c11e:	041b      	lsls	r3, r3, #16
 800c120:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800c124:	68e2      	ldr	r2, [r4, #12]
 800c126:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800c12a:	68a2      	ldr	r2, [r4, #8]
 800c12c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800c130:	4a14      	ldr	r2, [pc, #80]	@ (800c184 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800c132:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800c136:	4e13      	ldr	r6, [pc, #76]	@ (800c184 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800c138:	6833      	ldr	r3, [r6, #0]
 800c13a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c13e:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800c140:	f7fb fe12 	bl	8007d68 <HAL_GetTick>
 800c144:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c146:	6833      	ldr	r3, [r6, #0]
 800c148:	011b      	lsls	r3, r3, #4
 800c14a:	f53f aedd 	bmi.w	800bf08 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800c14e:	f7fb fe0b 	bl	8007d68 <HAL_GetTick>
 800c152:	1bc0      	subs	r0, r0, r7
 800c154:	2864      	cmp	r0, #100	@ 0x64
 800c156:	d9f6      	bls.n	800c146 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800c158:	e754      	b.n	800c004 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800c15a:	f7fb fe05 	bl	8007d68 <HAL_GetTick>
 800c15e:	1bc0      	subs	r0, r0, r7
 800c160:	2864      	cmp	r0, #100	@ 0x64
 800c162:	d984      	bls.n	800c06e <HAL_RCCEx_PeriphCLKConfig+0x442>
 800c164:	e74e      	b.n	800c004 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800c166:	f7fb fdff 	bl	8007d68 <HAL_GetTick>
 800c16a:	1b80      	subs	r0, r0, r6
 800c16c:	2864      	cmp	r0, #100	@ 0x64
 800c16e:	f67f aed5 	bls.w	800bf1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 800c172:	e747      	b.n	800c004 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800c174:	f7fb fdf8 	bl	8007d68 <HAL_GetTick>
 800c178:	1b40      	subs	r0, r0, r5
 800c17a:	2864      	cmp	r0, #100	@ 0x64
 800c17c:	f67f af33 	bls.w	800bfe6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800c180:	e740      	b.n	800c004 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
 800c182:	bf00      	nop
 800c184:	40023800 	.word	0x40023800

0800c188 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800c188:	b538      	push	{r3, r4, r5, lr}
 800c18a:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800c18c:	4604      	mov	r4, r0
 800c18e:	b1c8      	cbz	r0, 800c1c4 <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800c190:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800c194:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800c198:	b91b      	cbnz	r3, 800c1a2 <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800c19a:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800c19e:	f7f8 ff4d 	bl	800503c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c1a2:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800c1a4:	1d21      	adds	r1, r4, #4
 800c1a6:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c1a8:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800c1ac:	f000 fcb9 	bl	800cb22 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800c1b0:	6862      	ldr	r2, [r4, #4]
 800c1b2:	4629      	mov	r1, r5
 800c1b4:	6820      	ldr	r0, [r4, #0]
 800c1b6:	f000 fcec 	bl	800cb92 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800c1ba:	2301      	movs	r3, #1

  return HAL_OK;
 800c1bc:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 800c1be:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
}
 800c1c2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800c1c4:	2001      	movs	r0, #1
 800c1c6:	e7fc      	b.n	800c1c2 <HAL_SDRAM_Init+0x3a>

0800c1c8 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800c1c8:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800c1ca:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 800c1ce:	4605      	mov	r5, r0
 800c1d0:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800c1d2:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800c1d4:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 800c1d6:	d010      	beq.n	800c1fa <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800c1d8:	f000 04fb 	and.w	r4, r0, #251	@ 0xfb
 800c1dc:	2c01      	cmp	r4, #1
 800c1de:	d110      	bne.n	800c202 <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c1e0:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800c1e2:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c1e4:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800c1e8:	f000 fd09 	bl	800cbfe <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800c1ec:	6833      	ldr	r3, [r6, #0]
 800c1ee:	2b02      	cmp	r3, #2
 800c1f0:	d104      	bne.n	800c1fc <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800c1f2:	2305      	movs	r3, #5
 800c1f4:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800c1f8:	2000      	movs	r0, #0
}
 800c1fa:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 800c1fc:	f885 402c 	strb.w	r4, [r5, #44]	@ 0x2c
 800c200:	e7fa      	b.n	800c1f8 <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 800c202:	2001      	movs	r0, #1
 800c204:	e7f9      	b.n	800c1fa <HAL_SDRAM_SendCommand+0x32>

0800c206 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800c206:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800c208:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 800c20c:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800c20e:	2b02      	cmp	r3, #2
 800c210:	b2d8      	uxtb	r0, r3
 800c212:	d00d      	beq.n	800c230 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800c214:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800c218:	2b01      	cmp	r3, #1
 800c21a:	b2dd      	uxtb	r5, r3
 800c21c:	d109      	bne.n	800c232 <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c21e:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800c220:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c222:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800c226:	f000 fcfc 	bl	800cc22 <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800c22a:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 800c22c:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
}
 800c230:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800c232:	2001      	movs	r0, #1
 800c234:	e7fc      	b.n	800c230 <HAL_SDRAM_ProgramRefreshRate+0x2a>
	...

0800c238 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c238:	6a03      	ldr	r3, [r0, #32]
 800c23a:	f023 0301 	bic.w	r3, r3, #1
{
 800c23e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c240:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c242:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c244:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c246:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c248:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx |= OC_Config->OCMode;
 800c24c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c24e:	f424 3480 	bic.w	r4, r4, #65536	@ 0x10000
 800c252:	f024 0473 	bic.w	r4, r4, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 800c256:	432c      	orrs	r4, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c258:	688d      	ldr	r5, [r1, #8]
 800c25a:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c25c:	4d0e      	ldr	r5, [pc, #56]	@ (800c298 <TIM_OC1_SetConfig+0x60>)
 800c25e:	42a8      	cmp	r0, r5
 800c260:	d002      	beq.n	800c268 <TIM_OC1_SetConfig+0x30>
 800c262:	4e0e      	ldr	r6, [pc, #56]	@ (800c29c <TIM_OC1_SetConfig+0x64>)
 800c264:	42b0      	cmp	r0, r6
 800c266:	d111      	bne.n	800c28c <TIM_OC1_SetConfig+0x54>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c268:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c26c:	68ce      	ldr	r6, [r1, #12]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c26e:	42a8      	cmp	r0, r5
    tmpccer |= OC_Config->OCNPolarity;
 800c270:	ea43 0306 	orr.w	r3, r3, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 800c274:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c278:	d002      	beq.n	800c280 <TIM_OC1_SetConfig+0x48>
 800c27a:	4d08      	ldr	r5, [pc, #32]	@ (800c29c <TIM_OC1_SetConfig+0x64>)
 800c27c:	42a8      	cmp	r0, r5
 800c27e:	d105      	bne.n	800c28c <TIM_OC1_SetConfig+0x54>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c280:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c284:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800c288:	4335      	orrs	r5, r6
 800c28a:	432a      	orrs	r2, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c28c:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c28e:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 800c290:	6184      	str	r4, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800c292:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c294:	6203      	str	r3, [r0, #32]
}
 800c296:	bd70      	pop	{r4, r5, r6, pc}
 800c298:	40010000 	.word	0x40010000
 800c29c:	40010400 	.word	0x40010400

0800c2a0 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c2a0:	6a03      	ldr	r3, [r0, #32]
 800c2a2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
{
 800c2a6:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c2a8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c2aa:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c2ac:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c2ae:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c2b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  tmpccmrx |= OC_Config->OCMode;
 800c2b4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c2b6:	f424 3480 	bic.w	r4, r4, #65536	@ 0x10000
 800c2ba:	f024 0473 	bic.w	r4, r4, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 800c2be:	432c      	orrs	r4, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c2c0:	688d      	ldr	r5, [r1, #8]
 800c2c2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c2c6:	4d11      	ldr	r5, [pc, #68]	@ (800c30c <TIM_OC3_SetConfig+0x6c>)
 800c2c8:	42a8      	cmp	r0, r5
 800c2ca:	d003      	beq.n	800c2d4 <TIM_OC3_SetConfig+0x34>
 800c2cc:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800c2d0:	42a8      	cmp	r0, r5
 800c2d2:	d114      	bne.n	800c2fe <TIM_OC3_SetConfig+0x5e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c2d4:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800c2d6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c2da:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c2de:	4d0b      	ldr	r5, [pc, #44]	@ (800c30c <TIM_OC3_SetConfig+0x6c>)
 800c2e0:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 800c2e2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c2e6:	d003      	beq.n	800c2f0 <TIM_OC3_SetConfig+0x50>
 800c2e8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800c2ec:	42a8      	cmp	r0, r5
 800c2ee:	d106      	bne.n	800c2fe <TIM_OC3_SetConfig+0x5e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c2f0:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c2f4:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800c2f8:	4335      	orrs	r5, r6
 800c2fa:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c2fe:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c300:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 800c302:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800c304:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c306:	6203      	str	r3, [r0, #32]
}
 800c308:	bd70      	pop	{r4, r5, r6, pc}
 800c30a:	bf00      	nop
 800c30c:	40010000 	.word	0x40010000

0800c310 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c310:	6a03      	ldr	r3, [r0, #32]
 800c312:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
{
 800c316:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c318:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c31a:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c31c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c31e:	69c3      	ldr	r3, [r0, #28]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c320:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c324:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c326:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c32a:	f423 43e6 	bic.w	r3, r3, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c32e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c332:	688d      	ldr	r5, [r1, #8]
 800c334:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c338:	4d08      	ldr	r5, [pc, #32]	@ (800c35c <TIM_OC4_SetConfig+0x4c>)
 800c33a:	42a8      	cmp	r0, r5
 800c33c:	d003      	beq.n	800c346 <TIM_OC4_SetConfig+0x36>
 800c33e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800c342:	42a8      	cmp	r0, r5
 800c344:	d104      	bne.n	800c350 <TIM_OC4_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c346:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c34a:	694d      	ldr	r5, [r1, #20]
 800c34c:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c350:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c352:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c354:	684b      	ldr	r3, [r1, #4]
 800c356:	6403      	str	r3, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c358:	6202      	str	r2, [r0, #32]
}
 800c35a:	bd30      	pop	{r4, r5, pc}
 800c35c:	40010000 	.word	0x40010000

0800c360 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c360:	6a03      	ldr	r3, [r0, #32]
 800c362:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
{
 800c366:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c368:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c36a:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c36c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c36e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c370:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
  tmpccmrx |= OC_Config->OCMode;
 800c374:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c376:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c37a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpccmrx |= OC_Config->OCMode;
 800c37e:	432b      	orrs	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c380:	688d      	ldr	r5, [r1, #8]
 800c382:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c386:	4d09      	ldr	r5, [pc, #36]	@ (800c3ac <TIM_OC5_SetConfig+0x4c>)
 800c388:	42a8      	cmp	r0, r5
 800c38a:	d003      	beq.n	800c394 <TIM_OC5_SetConfig+0x34>
 800c38c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800c390:	42a8      	cmp	r0, r5
 800c392:	d104      	bne.n	800c39e <TIM_OC5_SetConfig+0x3e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c394:	f424 3480 	bic.w	r4, r4, #65536	@ 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c398:	694d      	ldr	r5, [r1, #20]
 800c39a:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c39e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c3a0:	6543      	str	r3, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c3a2:	684b      	ldr	r3, [r1, #4]
 800c3a4:	6583      	str	r3, [r0, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c3a6:	6202      	str	r2, [r0, #32]
}
 800c3a8:	bd30      	pop	{r4, r5, pc}
 800c3aa:	bf00      	nop
 800c3ac:	40010000 	.word	0x40010000

0800c3b0 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c3b0:	6a03      	ldr	r3, [r0, #32]
 800c3b2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
{
 800c3b6:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c3b8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c3ba:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c3bc:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c3be:	6d43      	ldr	r3, [r0, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c3c0:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c3c4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c3c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c3ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c3ce:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c3d2:	688d      	ldr	r5, [r1, #8]
 800c3d4:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c3d8:	4d08      	ldr	r5, [pc, #32]	@ (800c3fc <TIM_OC6_SetConfig+0x4c>)
 800c3da:	42a8      	cmp	r0, r5
 800c3dc:	d003      	beq.n	800c3e6 <TIM_OC6_SetConfig+0x36>
 800c3de:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800c3e2:	42a8      	cmp	r0, r5
 800c3e4:	d104      	bne.n	800c3f0 <TIM_OC6_SetConfig+0x40>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c3e6:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c3ea:	694d      	ldr	r5, [r1, #20]
 800c3ec:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c3f0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c3f2:	6543      	str	r3, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c3f4:	684b      	ldr	r3, [r1, #4]
 800c3f6:	65c3      	str	r3, [r0, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c3f8:	6202      	str	r2, [r0, #32]
}
 800c3fa:	bd30      	pop	{r4, r5, pc}
 800c3fc:	40010000 	.word	0x40010000

0800c400 <HAL_TIM_Base_MspInit>:
}
 800c400:	4770      	bx	lr
	...

0800c404 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800c404:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800c408:	2b01      	cmp	r3, #1
 800c40a:	d133      	bne.n	800c474 <HAL_TIM_Base_Start_IT+0x70>
  htim->State = HAL_TIM_STATE_BUSY;
 800c40c:	2302      	movs	r3, #2
 800c40e:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c412:	6803      	ldr	r3, [r0, #0]
 800c414:	68da      	ldr	r2, [r3, #12]
 800c416:	f042 0201 	orr.w	r2, r2, #1
 800c41a:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c41c:	4a16      	ldr	r2, [pc, #88]	@ (800c478 <HAL_TIM_Base_Start_IT+0x74>)
 800c41e:	4293      	cmp	r3, r2
 800c420:	d01a      	beq.n	800c458 <HAL_TIM_Base_Start_IT+0x54>
 800c422:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c426:	d017      	beq.n	800c458 <HAL_TIM_Base_Start_IT+0x54>
 800c428:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800c42c:	4293      	cmp	r3, r2
 800c42e:	d013      	beq.n	800c458 <HAL_TIM_Base_Start_IT+0x54>
 800c430:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c434:	4293      	cmp	r3, r2
 800c436:	d00f      	beq.n	800c458 <HAL_TIM_Base_Start_IT+0x54>
 800c438:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c43c:	4293      	cmp	r3, r2
 800c43e:	d00b      	beq.n	800c458 <HAL_TIM_Base_Start_IT+0x54>
 800c440:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800c444:	4293      	cmp	r3, r2
 800c446:	d007      	beq.n	800c458 <HAL_TIM_Base_Start_IT+0x54>
 800c448:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 800c44c:	4293      	cmp	r3, r2
 800c44e:	d003      	beq.n	800c458 <HAL_TIM_Base_Start_IT+0x54>
 800c450:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800c454:	4293      	cmp	r3, r2
 800c456:	d107      	bne.n	800c468 <HAL_TIM_Base_Start_IT+0x64>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c458:	6899      	ldr	r1, [r3, #8]
 800c45a:	4a08      	ldr	r2, [pc, #32]	@ (800c47c <HAL_TIM_Base_Start_IT+0x78>)
 800c45c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c45e:	2a06      	cmp	r2, #6
 800c460:	d006      	beq.n	800c470 <HAL_TIM_Base_Start_IT+0x6c>
 800c462:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800c466:	d003      	beq.n	800c470 <HAL_TIM_Base_Start_IT+0x6c>
      __HAL_TIM_ENABLE(htim);
 800c468:	681a      	ldr	r2, [r3, #0]
 800c46a:	f042 0201 	orr.w	r2, r2, #1
 800c46e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800c470:	2000      	movs	r0, #0
 800c472:	4770      	bx	lr
    return HAL_ERROR;
 800c474:	2001      	movs	r0, #1
}
 800c476:	4770      	bx	lr
 800c478:	40010000 	.word	0x40010000
 800c47c:	00010007 	.word	0x00010007

0800c480 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 800c480:	4770      	bx	lr

0800c482 <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 800c482:	4770      	bx	lr

0800c484 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 800c484:	4770      	bx	lr

0800c486 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 800c486:	4770      	bx	lr

0800c488 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c488:	6803      	ldr	r3, [r0, #0]
 800c48a:	691a      	ldr	r2, [r3, #16]
 800c48c:	0791      	lsls	r1, r2, #30
{
 800c48e:	b510      	push	{r4, lr}
 800c490:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c492:	d50f      	bpl.n	800c4b4 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c494:	68da      	ldr	r2, [r3, #12]
 800c496:	0792      	lsls	r2, r2, #30
 800c498:	d50c      	bpl.n	800c4b4 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c49a:	f06f 0202 	mvn.w	r2, #2
 800c49e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c4a0:	2201      	movs	r2, #1
 800c4a2:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c4a4:	699b      	ldr	r3, [r3, #24]
 800c4a6:	0799      	lsls	r1, r3, #30
 800c4a8:	f000 8085 	beq.w	800c5b6 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 800c4ac:	f7ff ffe9 	bl	800c482 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c4b4:	6823      	ldr	r3, [r4, #0]
 800c4b6:	691a      	ldr	r2, [r3, #16]
 800c4b8:	0752      	lsls	r2, r2, #29
 800c4ba:	d510      	bpl.n	800c4de <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c4bc:	68da      	ldr	r2, [r3, #12]
 800c4be:	0750      	lsls	r0, r2, #29
 800c4c0:	d50d      	bpl.n	800c4de <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c4c2:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800c4c6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c4c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c4ca:	2202      	movs	r2, #2
 800c4cc:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c4ce:	699b      	ldr	r3, [r3, #24]
 800c4d0:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800c4d4:	d075      	beq.n	800c5c2 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 800c4d6:	f7ff ffd4 	bl	800c482 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c4da:	2300      	movs	r3, #0
 800c4dc:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c4de:	6823      	ldr	r3, [r4, #0]
 800c4e0:	691a      	ldr	r2, [r3, #16]
 800c4e2:	0711      	lsls	r1, r2, #28
 800c4e4:	d50f      	bpl.n	800c506 <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c4e6:	68da      	ldr	r2, [r3, #12]
 800c4e8:	0712      	lsls	r2, r2, #28
 800c4ea:	d50c      	bpl.n	800c506 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c4ec:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800c4f0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c4f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c4f4:	2204      	movs	r2, #4
 800c4f6:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c4f8:	69db      	ldr	r3, [r3, #28]
 800c4fa:	079b      	lsls	r3, r3, #30
 800c4fc:	d067      	beq.n	800c5ce <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800c4fe:	f7ff ffc0 	bl	800c482 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c502:	2300      	movs	r3, #0
 800c504:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c506:	6823      	ldr	r3, [r4, #0]
 800c508:	691a      	ldr	r2, [r3, #16]
 800c50a:	06d0      	lsls	r0, r2, #27
 800c50c:	d510      	bpl.n	800c530 <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c50e:	68da      	ldr	r2, [r3, #12]
 800c510:	06d1      	lsls	r1, r2, #27
 800c512:	d50d      	bpl.n	800c530 <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c514:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 800c518:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c51a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c51c:	2208      	movs	r2, #8
 800c51e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c520:	69db      	ldr	r3, [r3, #28]
 800c522:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800c526:	d058      	beq.n	800c5da <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 800c528:	f7ff ffab 	bl	800c482 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c52c:	2300      	movs	r3, #0
 800c52e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c530:	6823      	ldr	r3, [r4, #0]
 800c532:	691a      	ldr	r2, [r3, #16]
 800c534:	07d2      	lsls	r2, r2, #31
 800c536:	d508      	bpl.n	800c54a <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c538:	68da      	ldr	r2, [r3, #12]
 800c53a:	07d0      	lsls	r0, r2, #31
 800c53c:	d505      	bpl.n	800c54a <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c53e:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800c542:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c544:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800c546:	f7f8 fa69 	bl	8004a1c <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c54a:	6823      	ldr	r3, [r4, #0]
 800c54c:	691a      	ldr	r2, [r3, #16]
 800c54e:	0611      	lsls	r1, r2, #24
 800c550:	d508      	bpl.n	800c564 <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c552:	68da      	ldr	r2, [r3, #12]
 800c554:	0612      	lsls	r2, r2, #24
 800c556:	d505      	bpl.n	800c564 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c558:	f06f 0280 	mvn.w	r2, #128	@ 0x80
      HAL_TIMEx_BreakCallback(htim);
 800c55c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c55e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800c560:	f000 fadd 	bl	800cb1e <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c564:	6823      	ldr	r3, [r4, #0]
 800c566:	691a      	ldr	r2, [r3, #16]
 800c568:	05d0      	lsls	r0, r2, #23
 800c56a:	d508      	bpl.n	800c57e <HAL_TIM_IRQHandler+0xf6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c56c:	68da      	ldr	r2, [r3, #12]
 800c56e:	0611      	lsls	r1, r2, #24
 800c570:	d505      	bpl.n	800c57e <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c572:	f46f 7280 	mvn.w	r2, #256	@ 0x100
      HAL_TIMEx_Break2Callback(htim);
 800c576:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c578:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800c57a:	f000 fad1 	bl	800cb20 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c57e:	6823      	ldr	r3, [r4, #0]
 800c580:	691a      	ldr	r2, [r3, #16]
 800c582:	0652      	lsls	r2, r2, #25
 800c584:	d508      	bpl.n	800c598 <HAL_TIM_IRQHandler+0x110>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c586:	68da      	ldr	r2, [r3, #12]
 800c588:	0650      	lsls	r0, r2, #25
 800c58a:	d505      	bpl.n	800c598 <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c58c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
      HAL_TIM_TriggerCallback(htim);
 800c590:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c592:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800c594:	f7ff ff77 	bl	800c486 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c598:	6823      	ldr	r3, [r4, #0]
 800c59a:	691a      	ldr	r2, [r3, #16]
 800c59c:	0691      	lsls	r1, r2, #26
 800c59e:	d522      	bpl.n	800c5e6 <HAL_TIM_IRQHandler+0x15e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c5a0:	68da      	ldr	r2, [r3, #12]
 800c5a2:	0692      	lsls	r2, r2, #26
 800c5a4:	d51f      	bpl.n	800c5e6 <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c5a6:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800c5aa:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c5ac:	611a      	str	r2, [r3, #16]
}
 800c5ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800c5b2:	f000 bab3 	b.w	800cb1c <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c5b6:	f7ff ff63 	bl	800c480 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c5ba:	4620      	mov	r0, r4
 800c5bc:	f7ff ff62 	bl	800c484 <HAL_TIM_PWM_PulseFinishedCallback>
 800c5c0:	e776      	b.n	800c4b0 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c5c2:	f7ff ff5d 	bl	800c480 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c5c6:	4620      	mov	r0, r4
 800c5c8:	f7ff ff5c 	bl	800c484 <HAL_TIM_PWM_PulseFinishedCallback>
 800c5cc:	e785      	b.n	800c4da <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c5ce:	f7ff ff57 	bl	800c480 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c5d2:	4620      	mov	r0, r4
 800c5d4:	f7ff ff56 	bl	800c484 <HAL_TIM_PWM_PulseFinishedCallback>
 800c5d8:	e793      	b.n	800c502 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c5da:	f7ff ff51 	bl	800c480 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c5de:	4620      	mov	r0, r4
 800c5e0:	f7ff ff50 	bl	800c484 <HAL_TIM_PWM_PulseFinishedCallback>
 800c5e4:	e7a2      	b.n	800c52c <HAL_TIM_IRQHandler+0xa4>
}
 800c5e6:	bd10      	pop	{r4, pc}

0800c5e8 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c5e8:	4a30      	ldr	r2, [pc, #192]	@ (800c6ac <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800c5ea:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c5ec:	4290      	cmp	r0, r2
 800c5ee:	d012      	beq.n	800c616 <TIM_Base_SetConfig+0x2e>
 800c5f0:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800c5f4:	d00f      	beq.n	800c616 <TIM_Base_SetConfig+0x2e>
 800c5f6:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800c5fa:	4290      	cmp	r0, r2
 800c5fc:	d00b      	beq.n	800c616 <TIM_Base_SetConfig+0x2e>
 800c5fe:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c602:	4290      	cmp	r0, r2
 800c604:	d007      	beq.n	800c616 <TIM_Base_SetConfig+0x2e>
 800c606:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c60a:	4290      	cmp	r0, r2
 800c60c:	d003      	beq.n	800c616 <TIM_Base_SetConfig+0x2e>
 800c60e:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800c612:	4290      	cmp	r0, r2
 800c614:	d119      	bne.n	800c64a <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 800c616:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c618:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800c61c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c61e:	4a23      	ldr	r2, [pc, #140]	@ (800c6ac <TIM_Base_SetConfig+0xc4>)
 800c620:	4290      	cmp	r0, r2
 800c622:	d029      	beq.n	800c678 <TIM_Base_SetConfig+0x90>
 800c624:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800c628:	d026      	beq.n	800c678 <TIM_Base_SetConfig+0x90>
 800c62a:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800c62e:	4290      	cmp	r0, r2
 800c630:	d022      	beq.n	800c678 <TIM_Base_SetConfig+0x90>
 800c632:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c636:	4290      	cmp	r0, r2
 800c638:	d01e      	beq.n	800c678 <TIM_Base_SetConfig+0x90>
 800c63a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c63e:	4290      	cmp	r0, r2
 800c640:	d01a      	beq.n	800c678 <TIM_Base_SetConfig+0x90>
 800c642:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800c646:	4290      	cmp	r0, r2
 800c648:	d016      	beq.n	800c678 <TIM_Base_SetConfig+0x90>
 800c64a:	4a19      	ldr	r2, [pc, #100]	@ (800c6b0 <TIM_Base_SetConfig+0xc8>)
 800c64c:	4290      	cmp	r0, r2
 800c64e:	d013      	beq.n	800c678 <TIM_Base_SetConfig+0x90>
 800c650:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c654:	4290      	cmp	r0, r2
 800c656:	d00f      	beq.n	800c678 <TIM_Base_SetConfig+0x90>
 800c658:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c65c:	4290      	cmp	r0, r2
 800c65e:	d00b      	beq.n	800c678 <TIM_Base_SetConfig+0x90>
 800c660:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 800c664:	4290      	cmp	r0, r2
 800c666:	d007      	beq.n	800c678 <TIM_Base_SetConfig+0x90>
 800c668:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c66c:	4290      	cmp	r0, r2
 800c66e:	d003      	beq.n	800c678 <TIM_Base_SetConfig+0x90>
 800c670:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c674:	4290      	cmp	r0, r2
 800c676:	d103      	bne.n	800c680 <TIM_Base_SetConfig+0x98>
    tmpcr1 &= ~TIM_CR1_CKD;
 800c678:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c67c:	68ca      	ldr	r2, [r1, #12]
 800c67e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c680:	694a      	ldr	r2, [r1, #20]
 800c682:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c686:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800c688:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c68a:	688b      	ldr	r3, [r1, #8]
 800c68c:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800c68e:	680b      	ldr	r3, [r1, #0]
 800c690:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c692:	4b06      	ldr	r3, [pc, #24]	@ (800c6ac <TIM_Base_SetConfig+0xc4>)
 800c694:	4298      	cmp	r0, r3
 800c696:	d003      	beq.n	800c6a0 <TIM_Base_SetConfig+0xb8>
 800c698:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c69c:	4298      	cmp	r0, r3
 800c69e:	d101      	bne.n	800c6a4 <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 800c6a0:	690b      	ldr	r3, [r1, #16]
 800c6a2:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 800c6a4:	2301      	movs	r3, #1
 800c6a6:	6143      	str	r3, [r0, #20]
}
 800c6a8:	4770      	bx	lr
 800c6aa:	bf00      	nop
 800c6ac:	40010000 	.word	0x40010000
 800c6b0:	40014000 	.word	0x40014000

0800c6b4 <HAL_TIM_Base_Init>:
{
 800c6b4:	b510      	push	{r4, lr}
  if (htim == NULL)
 800c6b6:	4604      	mov	r4, r0
 800c6b8:	b350      	cbz	r0, 800c710 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800c6ba:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800c6be:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800c6c2:	b91b      	cbnz	r3, 800c6cc <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800c6c4:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800c6c8:	f7ff fe9a 	bl	800c400 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800c6cc:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c6ce:	6820      	ldr	r0, [r4, #0]
 800c6d0:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800c6d2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c6d6:	f7ff ff87 	bl	800c5e8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c6da:	2301      	movs	r3, #1
  return HAL_OK;
 800c6dc:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c6de:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c6e2:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800c6e6:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800c6ea:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800c6ee:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800c6f2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c6f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c6fa:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800c6fe:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800c702:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800c706:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800c70a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 800c70e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800c710:	2001      	movs	r0, #1
 800c712:	e7fc      	b.n	800c70e <HAL_TIM_Base_Init+0x5a>

0800c714 <HAL_TIM_PWM_Init>:
{
 800c714:	b510      	push	{r4, lr}
  if (htim == NULL)
 800c716:	4604      	mov	r4, r0
 800c718:	b350      	cbz	r0, 800c770 <HAL_TIM_PWM_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800c71a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800c71e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800c722:	b91b      	cbnz	r3, 800c72c <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800c724:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800c728:	f7f8 fc4c 	bl	8004fc4 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800c72c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c72e:	6820      	ldr	r0, [r4, #0]
 800c730:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800c732:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c736:	f7ff ff57 	bl	800c5e8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c73a:	2301      	movs	r3, #1
  return HAL_OK;
 800c73c:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c73e:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c742:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800c746:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800c74a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800c74e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800c752:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c756:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c75a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800c75e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800c762:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800c766:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800c76a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 800c76e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800c770:	2001      	movs	r0, #1
 800c772:	e7fc      	b.n	800c76e <HAL_TIM_PWM_Init+0x5a>

0800c774 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c774:	6a03      	ldr	r3, [r0, #32]
 800c776:	f023 0310 	bic.w	r3, r3, #16
{
 800c77a:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c77c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800c77e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800c780:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800c782:	6984      	ldr	r4, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 800c784:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c788:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c78a:	f024 7480 	bic.w	r4, r4, #16777216	@ 0x1000000
 800c78e:	f424 44e6 	bic.w	r4, r4, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c792:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c796:	688d      	ldr	r5, [r1, #8]
 800c798:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c79c:	4d10      	ldr	r5, [pc, #64]	@ (800c7e0 <TIM_OC2_SetConfig+0x6c>)
 800c79e:	42a8      	cmp	r0, r5
 800c7a0:	d003      	beq.n	800c7aa <TIM_OC2_SetConfig+0x36>
 800c7a2:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800c7a6:	42a8      	cmp	r0, r5
 800c7a8:	d114      	bne.n	800c7d4 <TIM_OC2_SetConfig+0x60>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c7aa:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800c7ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c7b0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c7b4:	4d0a      	ldr	r5, [pc, #40]	@ (800c7e0 <TIM_OC2_SetConfig+0x6c>)
 800c7b6:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 800c7b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c7bc:	d003      	beq.n	800c7c6 <TIM_OC2_SetConfig+0x52>
 800c7be:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800c7c2:	42a8      	cmp	r0, r5
 800c7c4:	d106      	bne.n	800c7d4 <TIM_OC2_SetConfig+0x60>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c7c6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c7ca:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800c7ce:	4335      	orrs	r5, r6
 800c7d0:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 800c7d4:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 800c7d6:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 800c7d8:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800c7da:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 800c7dc:	6203      	str	r3, [r0, #32]
}
 800c7de:	bd70      	pop	{r4, r5, r6, pc}
 800c7e0:	40010000 	.word	0x40010000

0800c7e4 <HAL_TIM_PWM_ConfigChannel>:
{
 800c7e4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800c7e6:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 800c7ea:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800c7ec:	2b01      	cmp	r3, #1
 800c7ee:	d073      	beq.n	800c8d8 <HAL_TIM_PWM_ConfigChannel+0xf4>
 800c7f0:	2001      	movs	r0, #1
  switch (Channel)
 800c7f2:	2a0c      	cmp	r2, #12
  __HAL_LOCK(htim);
 800c7f4:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
  switch (Channel)
 800c7f8:	d04e      	beq.n	800c898 <HAL_TIM_PWM_ConfigChannel+0xb4>
 800c7fa:	d808      	bhi.n	800c80e <HAL_TIM_PWM_ConfigChannel+0x2a>
 800c7fc:	2a04      	cmp	r2, #4
 800c7fe:	d02b      	beq.n	800c858 <HAL_TIM_PWM_ConfigChannel+0x74>
 800c800:	2a08      	cmp	r2, #8
 800c802:	d039      	beq.n	800c878 <HAL_TIM_PWM_ConfigChannel+0x94>
 800c804:	b1ba      	cbz	r2, 800c836 <HAL_TIM_PWM_ConfigChannel+0x52>
  __HAL_UNLOCK(htim);
 800c806:	2300      	movs	r3, #0
 800c808:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800c80c:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 800c80e:	2a10      	cmp	r2, #16
 800c810:	d052      	beq.n	800c8b8 <HAL_TIM_PWM_ConfigChannel+0xd4>
 800c812:	2a14      	cmp	r2, #20
 800c814:	d1f7      	bne.n	800c806 <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c816:	6820      	ldr	r0, [r4, #0]
 800c818:	f7ff fdca 	bl	800c3b0 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c81c:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c81e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800c820:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800c824:	6543      	str	r3, [r0, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c826:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800c828:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c82c:	6543      	str	r3, [r0, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c82e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800c830:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c834:	e04e      	b.n	800c8d4 <HAL_TIM_PWM_ConfigChannel+0xf0>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c836:	6820      	ldr	r0, [r4, #0]
 800c838:	f7ff fcfe 	bl	800c238 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c83c:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c83e:	6983      	ldr	r3, [r0, #24]
 800c840:	f043 0308 	orr.w	r3, r3, #8
 800c844:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c846:	6983      	ldr	r3, [r0, #24]
 800c848:	f023 0304 	bic.w	r3, r3, #4
 800c84c:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c84e:	6983      	ldr	r3, [r0, #24]
 800c850:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c852:	6183      	str	r3, [r0, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800c854:	2000      	movs	r0, #0
 800c856:	e7d6      	b.n	800c806 <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c858:	6820      	ldr	r0, [r4, #0]
 800c85a:	f7ff ff8b 	bl	800c774 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c85e:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c860:	6983      	ldr	r3, [r0, #24]
 800c862:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800c866:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c868:	6983      	ldr	r3, [r0, #24]
 800c86a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c86e:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c870:	6983      	ldr	r3, [r0, #24]
 800c872:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c876:	e7ec      	b.n	800c852 <HAL_TIM_PWM_ConfigChannel+0x6e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c878:	6820      	ldr	r0, [r4, #0]
 800c87a:	f7ff fd11 	bl	800c2a0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c87e:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c880:	69c3      	ldr	r3, [r0, #28]
 800c882:	f043 0308 	orr.w	r3, r3, #8
 800c886:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c888:	69c3      	ldr	r3, [r0, #28]
 800c88a:	f023 0304 	bic.w	r3, r3, #4
 800c88e:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c890:	69c3      	ldr	r3, [r0, #28]
 800c892:	4313      	orrs	r3, r2
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c894:	61c3      	str	r3, [r0, #28]
      break;
 800c896:	e7dd      	b.n	800c854 <HAL_TIM_PWM_ConfigChannel+0x70>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c898:	6820      	ldr	r0, [r4, #0]
 800c89a:	f7ff fd39 	bl	800c310 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c89e:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c8a0:	69c3      	ldr	r3, [r0, #28]
 800c8a2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800c8a6:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c8a8:	69c3      	ldr	r3, [r0, #28]
 800c8aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c8ae:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c8b0:	69c3      	ldr	r3, [r0, #28]
 800c8b2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c8b6:	e7ed      	b.n	800c894 <HAL_TIM_PWM_ConfigChannel+0xb0>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c8b8:	6820      	ldr	r0, [r4, #0]
 800c8ba:	f7ff fd51 	bl	800c360 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c8be:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c8c0:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800c8c2:	f043 0308 	orr.w	r3, r3, #8
 800c8c6:	6543      	str	r3, [r0, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c8c8:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800c8ca:	f023 0304 	bic.w	r3, r3, #4
 800c8ce:	6543      	str	r3, [r0, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c8d0:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800c8d2:	4313      	orrs	r3, r2
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c8d4:	6543      	str	r3, [r0, #84]	@ 0x54
      break;
 800c8d6:	e7bd      	b.n	800c854 <HAL_TIM_PWM_ConfigChannel+0x70>
  __HAL_LOCK(htim);
 800c8d8:	2002      	movs	r0, #2
 800c8da:	e797      	b.n	800c80c <HAL_TIM_PWM_ConfigChannel+0x28>

0800c8dc <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c8dc:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c8e0:	6a03      	ldr	r3, [r0, #32]
{
 800c8e2:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c8e4:	2401      	movs	r4, #1

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c8e6:	408a      	lsls	r2, r1
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c8e8:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 800c8ea:	ea23 0304 	bic.w	r3, r3, r4
 800c8ee:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c8f0:	6a03      	ldr	r3, [r0, #32]
 800c8f2:	431a      	orrs	r2, r3
 800c8f4:	6202      	str	r2, [r0, #32]
}
 800c8f6:	bd10      	pop	{r4, pc}

0800c8f8 <HAL_TIM_OC_Start>:
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c8f8:	2908      	cmp	r1, #8
{
 800c8fa:	b508      	push	{r3, lr}
 800c8fc:	d018      	beq.n	800c930 <HAL_TIM_OC_Start+0x38>
 800c8fe:	d805      	bhi.n	800c90c <HAL_TIM_OC_Start+0x14>
 800c900:	b159      	cbz	r1, 800c91a <HAL_TIM_OC_Start+0x22>
 800c902:	2904      	cmp	r1, #4
 800c904:	d011      	beq.n	800c92a <HAL_TIM_OC_Start+0x32>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c906:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800c90a:	e008      	b.n	800c91e <HAL_TIM_OC_Start+0x26>
 800c90c:	290c      	cmp	r1, #12
 800c90e:	d012      	beq.n	800c936 <HAL_TIM_OC_Start+0x3e>
 800c910:	2910      	cmp	r1, #16
 800c912:	d1f8      	bne.n	800c906 <HAL_TIM_OC_Start+0xe>
 800c914:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800c918:	e001      	b.n	800c91e <HAL_TIM_OC_Start+0x26>
 800c91a:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 800c91e:	3b01      	subs	r3, #1
 800c920:	bf18      	it	ne
 800c922:	2301      	movne	r3, #1
 800c924:	b153      	cbz	r3, 800c93c <HAL_TIM_OC_Start+0x44>
    return HAL_ERROR;
 800c926:	2001      	movs	r0, #1
 800c928:	e030      	b.n	800c98c <HAL_TIM_OC_Start+0x94>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c92a:	f890 303f 	ldrb.w	r3, [r0, #63]	@ 0x3f
 800c92e:	e7f6      	b.n	800c91e <HAL_TIM_OC_Start+0x26>
 800c930:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800c934:	e7f3      	b.n	800c91e <HAL_TIM_OC_Start+0x26>
 800c936:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800c93a:	e7f0      	b.n	800c91e <HAL_TIM_OC_Start+0x26>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c93c:	2908      	cmp	r1, #8
 800c93e:	f04f 0302 	mov.w	r3, #2
 800c942:	d027      	beq.n	800c994 <HAL_TIM_OC_Start+0x9c>
 800c944:	d806      	bhi.n	800c954 <HAL_TIM_OC_Start+0x5c>
 800c946:	b161      	cbz	r1, 800c962 <HAL_TIM_OC_Start+0x6a>
 800c948:	2904      	cmp	r1, #4
 800c94a:	d020      	beq.n	800c98e <HAL_TIM_OC_Start+0x96>
 800c94c:	2302      	movs	r3, #2
 800c94e:	f880 3043 	strb.w	r3, [r0, #67]	@ 0x43
 800c952:	e008      	b.n	800c966 <HAL_TIM_OC_Start+0x6e>
 800c954:	290c      	cmp	r1, #12
 800c956:	d020      	beq.n	800c99a <HAL_TIM_OC_Start+0xa2>
 800c958:	2910      	cmp	r1, #16
 800c95a:	d1f7      	bne.n	800c94c <HAL_TIM_OC_Start+0x54>
 800c95c:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
 800c960:	e001      	b.n	800c966 <HAL_TIM_OC_Start+0x6e>
 800c962:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c966:	6800      	ldr	r0, [r0, #0]
 800c968:	2201      	movs	r2, #1
 800c96a:	f7ff ffb7 	bl	800c8dc <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c96e:	4a20      	ldr	r2, [pc, #128]	@ (800c9f0 <HAL_TIM_OC_Start+0xf8>)
 800c970:	4290      	cmp	r0, r2
 800c972:	d015      	beq.n	800c9a0 <HAL_TIM_OC_Start+0xa8>
 800c974:	4b1f      	ldr	r3, [pc, #124]	@ (800c9f4 <HAL_TIM_OC_Start+0xfc>)
 800c976:	4298      	cmp	r0, r3
 800c978:	d012      	beq.n	800c9a0 <HAL_TIM_OC_Start+0xa8>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c97a:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800c97e:	d116      	bne.n	800c9ae <HAL_TIM_OC_Start+0xb6>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c980:	6882      	ldr	r2, [r0, #8]
 800c982:	4b1d      	ldr	r3, [pc, #116]	@ (800c9f8 <HAL_TIM_OC_Start+0x100>)
 800c984:	4013      	ands	r3, r2
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c986:	2b06      	cmp	r3, #6
 800c988:	d12d      	bne.n	800c9e6 <HAL_TIM_OC_Start+0xee>
  return HAL_OK;
 800c98a:	2000      	movs	r0, #0
}
 800c98c:	bd08      	pop	{r3, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c98e:	f880 303f 	strb.w	r3, [r0, #63]	@ 0x3f
 800c992:	e7e8      	b.n	800c966 <HAL_TIM_OC_Start+0x6e>
 800c994:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800c998:	e7e5      	b.n	800c966 <HAL_TIM_OC_Start+0x6e>
 800c99a:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
 800c99e:	e7e2      	b.n	800c966 <HAL_TIM_OC_Start+0x6e>
    __HAL_TIM_MOE_ENABLE(htim);
 800c9a0:	6c43      	ldr	r3, [r0, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c9a2:	4290      	cmp	r0, r2
    __HAL_TIM_MOE_ENABLE(htim);
 800c9a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c9a8:	6443      	str	r3, [r0, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c9aa:	d0e9      	beq.n	800c980 <HAL_TIM_OC_Start+0x88>
 800c9ac:	e7e5      	b.n	800c97a <HAL_TIM_OC_Start+0x82>
 800c9ae:	4b13      	ldr	r3, [pc, #76]	@ (800c9fc <HAL_TIM_OC_Start+0x104>)
 800c9b0:	4298      	cmp	r0, r3
 800c9b2:	d0e5      	beq.n	800c980 <HAL_TIM_OC_Start+0x88>
 800c9b4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c9b8:	4298      	cmp	r0, r3
 800c9ba:	d0e1      	beq.n	800c980 <HAL_TIM_OC_Start+0x88>
 800c9bc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c9c0:	4298      	cmp	r0, r3
 800c9c2:	d0dd      	beq.n	800c980 <HAL_TIM_OC_Start+0x88>
 800c9c4:	f503 4378 	add.w	r3, r3, #63488	@ 0xf800
 800c9c8:	4298      	cmp	r0, r3
 800c9ca:	d0d9      	beq.n	800c980 <HAL_TIM_OC_Start+0x88>
 800c9cc:	f503 5370 	add.w	r3, r3, #15360	@ 0x3c00
 800c9d0:	4298      	cmp	r0, r3
 800c9d2:	d0d5      	beq.n	800c980 <HAL_TIM_OC_Start+0x88>
 800c9d4:	f5a3 3394 	sub.w	r3, r3, #75776	@ 0x12800
 800c9d8:	4298      	cmp	r0, r3
 800c9da:	d0d1      	beq.n	800c980 <HAL_TIM_OC_Start+0x88>
      __HAL_TIM_ENABLE(htim);
 800c9dc:	6803      	ldr	r3, [r0, #0]
 800c9de:	f043 0301 	orr.w	r3, r3, #1
 800c9e2:	6003      	str	r3, [r0, #0]
 800c9e4:	e7d1      	b.n	800c98a <HAL_TIM_OC_Start+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c9e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c9ea:	d1f7      	bne.n	800c9dc <HAL_TIM_OC_Start+0xe4>
 800c9ec:	e7cd      	b.n	800c98a <HAL_TIM_OC_Start+0x92>
 800c9ee:	bf00      	nop
 800c9f0:	40010000 	.word	0x40010000
 800c9f4:	40010400 	.word	0x40010400
 800c9f8:	00010007 	.word	0x00010007
 800c9fc:	40000400 	.word	0x40000400

0800ca00 <HAL_TIM_PWM_Start>:
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 800ca00:	f7ff bf7a 	b.w	800c8f8 <HAL_TIM_OC_Start>

0800ca04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ca04:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ca06:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 800ca0a:	4604      	mov	r4, r0
 800ca0c:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 800ca0e:	2b01      	cmp	r3, #1
 800ca10:	d03b      	beq.n	800ca8a <HAL_TIMEx_MasterConfigSynchronization+0x86>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ca12:	6823      	ldr	r3, [r4, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ca14:	4d1d      	ldr	r5, [pc, #116]	@ (800ca8c <HAL_TIMEx_MasterConfigSynchronization+0x88>)
  htim->State = HAL_TIM_STATE_BUSY;
 800ca16:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ca1a:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 800ca1c:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800ca1e:	6898      	ldr	r0, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ca20:	d002      	beq.n	800ca28 <HAL_TIMEx_MasterConfigSynchronization+0x24>
 800ca22:	4e1b      	ldr	r6, [pc, #108]	@ (800ca90 <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
 800ca24:	42b3      	cmp	r3, r6
 800ca26:	d103      	bne.n	800ca30 <HAL_TIMEx_MasterConfigSynchronization+0x2c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ca28:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ca2c:	684e      	ldr	r6, [r1, #4]
 800ca2e:	4332      	orrs	r2, r6
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ca30:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800ca32:	f022 0270 	bic.w	r2, r2, #112	@ 0x70

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ca36:	42ab      	cmp	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ca38:	ea42 0206 	orr.w	r2, r2, r6
  htim->Instance->CR2 = tmpcr2;
 800ca3c:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ca3e:	d019      	beq.n	800ca74 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800ca40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ca44:	d016      	beq.n	800ca74 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800ca46:	4a13      	ldr	r2, [pc, #76]	@ (800ca94 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 800ca48:	4293      	cmp	r3, r2
 800ca4a:	d013      	beq.n	800ca74 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800ca4c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ca50:	4293      	cmp	r3, r2
 800ca52:	d00f      	beq.n	800ca74 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800ca54:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ca58:	4293      	cmp	r3, r2
 800ca5a:	d00b      	beq.n	800ca74 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800ca5c:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800ca60:	4293      	cmp	r3, r2
 800ca62:	d007      	beq.n	800ca74 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800ca64:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 800ca68:	4293      	cmp	r3, r2
 800ca6a:	d003      	beq.n	800ca74 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800ca6c:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800ca70:	4293      	cmp	r3, r2
 800ca72:	d104      	bne.n	800ca7e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ca74:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ca76:	f020 0280 	bic.w	r2, r0, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ca7a:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ca7c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ca7e:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 800ca80:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800ca82:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 800ca86:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c

  return HAL_OK;
}
 800ca8a:	bd70      	pop	{r4, r5, r6, pc}
 800ca8c:	40010000 	.word	0x40010000
 800ca90:	40010400 	.word	0x40010400
 800ca94:	40000400 	.word	0x40000400

0800ca98 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ca98:	b510      	push	{r4, lr}
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ca9a:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 800ca9e:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 800caa0:	2b01      	cmp	r3, #1
 800caa2:	d037      	beq.n	800cb14 <HAL_TIMEx_ConfigBreakDeadTime+0x7c>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800caa4:	68cb      	ldr	r3, [r1, #12]
 800caa6:	6888      	ldr	r0, [r1, #8]
 800caa8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800caac:	4c1a      	ldr	r4, [pc, #104]	@ (800cb18 <HAL_TIMEx_ConfigBreakDeadTime+0x80>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800caae:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800cab0:	6848      	ldr	r0, [r1, #4]
 800cab2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800cab6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800cab8:	6808      	ldr	r0, [r1, #0]
 800caba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800cabe:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800cac0:	6908      	ldr	r0, [r1, #16]
 800cac2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cac6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800cac8:	6948      	ldr	r0, [r1, #20]
 800caca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800cace:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800cad0:	6a88      	ldr	r0, [r1, #40]	@ 0x28
 800cad2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cad6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800cad8:	6988      	ldr	r0, [r1, #24]
 800cada:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 800cade:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800cae2:	6810      	ldr	r0, [r2, #0]
 800cae4:	42a0      	cmp	r0, r4
 800cae6:	d003      	beq.n	800caf0 <HAL_TIMEx_ConfigBreakDeadTime+0x58>
 800cae8:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800caec:	42a0      	cmp	r0, r4
 800caee:	d10c      	bne.n	800cb0a <HAL_TIMEx_ConfigBreakDeadTime+0x72>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800caf0:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
 800caf2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800caf6:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800cafa:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800cafc:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800cafe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800cb02:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800cb04:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800cb08:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800cb0a:	6443      	str	r3, [r0, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800cb0c:	2000      	movs	r0, #0
 800cb0e:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
}
 800cb12:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 800cb14:	2002      	movs	r0, #2
 800cb16:	e7fc      	b.n	800cb12 <HAL_TIMEx_ConfigBreakDeadTime+0x7a>
 800cb18:	40010000 	.word	0x40010000

0800cb1c <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 800cb1c:	4770      	bx	lr

0800cb1e <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 800cb1e:	4770      	bx	lr

0800cb20 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 800cb20:	4770      	bx	lr

0800cb22 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800cb22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800cb26:	e9d1 2c01 	ldrd	r2, ip, [r1, #4]
 800cb2a:	e9d1 3807 	ldrd	r3, r8, [r1, #28]
 800cb2e:	f8d1 e024 	ldr.w	lr, [r1, #36]	@ 0x24
 800cb32:	ea43 0308 	orr.w	r3, r3, r8
 800cb36:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
 800cb3a:	e9d1 5405 	ldrd	r5, r4, [r1, #20]
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800cb3e:	6809      	ldr	r1, [r1, #0]
 800cb40:	b991      	cbnz	r1, 800cb68 <FMC_SDRAM_Init+0x46>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800cb42:	ea43 030e 	orr.w	r3, r3, lr
 800cb46:	6801      	ldr	r1, [r0, #0]
 800cb48:	4313      	orrs	r3, r2
 800cb4a:	f421 41ff 	bic.w	r1, r1, #32640	@ 0x7f80
 800cb4e:	ea43 030c 	orr.w	r3, r3, ip
 800cb52:	f021 017f 	bic.w	r1, r1, #127	@ 0x7f
 800cb56:	433b      	orrs	r3, r7
 800cb58:	4333      	orrs	r3, r6
 800cb5a:	432b      	orrs	r3, r5
 800cb5c:	4323      	orrs	r3, r4
 800cb5e:	430b      	orrs	r3, r1
 800cb60:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800cb62:	2000      	movs	r0, #0
 800cb64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800cb68:	6801      	ldr	r1, [r0, #0]
 800cb6a:	ea43 030e 	orr.w	r3, r3, lr
 800cb6e:	f421 41f8 	bic.w	r1, r1, #31744	@ 0x7c00
 800cb72:	430b      	orrs	r3, r1
 800cb74:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800cb76:	ea42 030c 	orr.w	r3, r2, ip
 800cb7a:	6841      	ldr	r1, [r0, #4]
 800cb7c:	433b      	orrs	r3, r7
 800cb7e:	f421 42ff 	bic.w	r2, r1, #32640	@ 0x7f80
 800cb82:	4333      	orrs	r3, r6
 800cb84:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 800cb88:	432b      	orrs	r3, r5
 800cb8a:	4323      	orrs	r3, r4
 800cb8c:	4313      	orrs	r3, r2
 800cb8e:	6043      	str	r3, [r0, #4]
 800cb90:	e7e7      	b.n	800cb62 <FMC_SDRAM_Init+0x40>

0800cb92 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800cb92:	68cb      	ldr	r3, [r1, #12]
 800cb94:	f103 3cff 	add.w	ip, r3, #4294967295
 800cb98:	694b      	ldr	r3, [r1, #20]
{
 800cb9a:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800cb9c:	3b01      	subs	r3, #1
 800cb9e:	680f      	ldr	r7, [r1, #0]
 800cba0:	684c      	ldr	r4, [r1, #4]
 800cba2:	688e      	ldr	r6, [r1, #8]
 800cba4:	051b      	lsls	r3, r3, #20
 800cba6:	690d      	ldr	r5, [r1, #16]
 800cba8:	3c01      	subs	r4, #1
 800cbaa:	6989      	ldr	r1, [r1, #24]
 800cbac:	3e01      	subs	r6, #1
 800cbae:	3d01      	subs	r5, #1
 800cbb0:	3f01      	subs	r7, #1
 800cbb2:	3901      	subs	r1, #1
 800cbb4:	0124      	lsls	r4, r4, #4
 800cbb6:	0236      	lsls	r6, r6, #8
 800cbb8:	042d      	lsls	r5, r5, #16
 800cbba:	0609      	lsls	r1, r1, #24
 800cbbc:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 800cbc0:	b95a      	cbnz	r2, 800cbda <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800cbc2:	433b      	orrs	r3, r7
 800cbc4:	6882      	ldr	r2, [r0, #8]
 800cbc6:	4323      	orrs	r3, r4
 800cbc8:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800cbcc:	4333      	orrs	r3, r6
 800cbce:	432b      	orrs	r3, r5
 800cbd0:	430b      	orrs	r3, r1
 800cbd2:	4313      	orrs	r3, r2
 800cbd4:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 800cbd6:	2000      	movs	r0, #0
 800cbd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800cbda:	6882      	ldr	r2, [r0, #8]
 800cbdc:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800cbe0:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
 800cbe4:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800cbe6:	ea44 0306 	orr.w	r3, r4, r6
 800cbea:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800cbec:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800cbee:	68c2      	ldr	r2, [r0, #12]
 800cbf0:	432b      	orrs	r3, r5
 800cbf2:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800cbf6:	430b      	orrs	r3, r1
 800cbf8:	4313      	orrs	r3, r2
 800cbfa:	60c3      	str	r3, [r0, #12]
 800cbfc:	e7eb      	b.n	800cbd6 <FMC_SDRAM_Timing_Init+0x44>

0800cbfe <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800cbfe:	6902      	ldr	r2, [r0, #16]
{
 800cc00:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800cc02:	e9d1 3400 	ldrd	r3, r4, [r1]
 800cc06:	0d92      	lsrs	r2, r2, #22
 800cc08:	4323      	orrs	r3, r4
 800cc0a:	68cc      	ldr	r4, [r1, #12]
 800cc0c:	0592      	lsls	r2, r2, #22
 800cc0e:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 800cc12:	4313      	orrs	r3, r2
 800cc14:	688a      	ldr	r2, [r1, #8]
 800cc16:	3a01      	subs	r2, #1
 800cc18:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800cc1c:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800cc1e:	2000      	movs	r0, #0
 800cc20:	bd10      	pop	{r4, pc}

0800cc22 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800cc22:	6943      	ldr	r3, [r0, #20]
 800cc24:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800cc28:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 800cc2c:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800cc30:	6143      	str	r3, [r0, #20]

  return HAL_OK;
}
 800cc32:	2000      	movs	r0, #0
 800cc34:	4770      	bx	lr
	...

0800cc38 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc38:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800cc3c:	b113      	cbz	r3, 800cc44 <osKernelInitialize+0xc>
    stat = osErrorISR;
 800cc3e:	f06f 0005 	mvn.w	r0, #5
 800cc42:	4770      	bx	lr
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc44:	f3ef 8210 	mrs	r2, PRIMASK
  return(result);
 800cc48:	4b07      	ldr	r3, [pc, #28]	@ (800cc68 <osKernelInitialize+0x30>)
  if (IS_IRQ()) {
 800cc4a:	b912      	cbnz	r2, 800cc52 <osKernelInitialize+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cc4c:	f3ef 8211 	mrs	r2, BASEPRI
 800cc50:	b112      	cbz	r2, 800cc58 <osKernelInitialize+0x20>
 800cc52:	681a      	ldr	r2, [r3, #0]
 800cc54:	2a02      	cmp	r2, #2
 800cc56:	d0f2      	beq.n	800cc3e <osKernelInitialize+0x6>
  }
  else {
    if (KernelState == osKernelInactive) {
 800cc58:	6818      	ldr	r0, [r3, #0]
 800cc5a:	b910      	cbnz	r0, 800cc62 <osKernelInitialize+0x2a>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800cc5c:	2201      	movs	r2, #1
 800cc5e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800cc60:	4770      	bx	lr
    } else {
      stat = osError;
 800cc62:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800cc66:	4770      	bx	lr
 800cc68:	20012c3c 	.word	0x20012c3c

0800cc6c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800cc6c:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc6e:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800cc72:	b113      	cbz	r3, 800cc7a <osKernelStart+0xe>
    stat = osErrorISR;
 800cc74:	f06f 0005 	mvn.w	r0, #5
      stat = osError;
    }
  }

  return (stat);
}
 800cc78:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc7a:	f3ef 8210 	mrs	r2, PRIMASK
  return(result);
 800cc7e:	4b0a      	ldr	r3, [pc, #40]	@ (800cca8 <osKernelStart+0x3c>)
  if (IS_IRQ()) {
 800cc80:	b912      	cbnz	r2, 800cc88 <osKernelStart+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cc82:	f3ef 8211 	mrs	r2, BASEPRI
 800cc86:	b112      	cbz	r2, 800cc8e <osKernelStart+0x22>
 800cc88:	681a      	ldr	r2, [r3, #0]
 800cc8a:	2a02      	cmp	r2, #2
 800cc8c:	d0f2      	beq.n	800cc74 <osKernelStart+0x8>
    if (KernelState == osKernelReady) {
 800cc8e:	681a      	ldr	r2, [r3, #0]
 800cc90:	2a01      	cmp	r2, #1
 800cc92:	d105      	bne.n	800cca0 <osKernelStart+0x34>
      KernelState = osKernelRunning;
 800cc94:	2202      	movs	r2, #2
 800cc96:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800cc98:	f001 fe76 	bl	800e988 <vTaskStartScheduler>
      stat = osOK;
 800cc9c:	2000      	movs	r0, #0
 800cc9e:	e7eb      	b.n	800cc78 <osKernelStart+0xc>
      stat = osError;
 800cca0:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 800cca4:	e7e8      	b.n	800cc78 <osKernelStart+0xc>
 800cca6:	bf00      	nop
 800cca8:	20012c3c 	.word	0x20012c3c

0800ccac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ccac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ccae:	4614      	mov	r4, r2
 800ccb0:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ccb2:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ccb4:	460b      	mov	r3, r1
  hTask = NULL;
 800ccb6:	9205      	str	r2, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ccb8:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800ccbc:	bb1a      	cbnz	r2, 800cd06 <osThreadNew+0x5a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ccbe:	f3ef 8210 	mrs	r2, PRIMASK
 800ccc2:	b912      	cbnz	r2, 800ccca <osThreadNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ccc4:	f3ef 8211 	mrs	r2, BASEPRI
 800ccc8:	b11a      	cbz	r2, 800ccd2 <osThreadNew+0x26>
 800ccca:	4a21      	ldr	r2, [pc, #132]	@ (800cd50 <osThreadNew+0xa4>)
 800cccc:	6812      	ldr	r2, [r2, #0]
 800ccce:	2a02      	cmp	r2, #2
 800ccd0:	d019      	beq.n	800cd06 <osThreadNew+0x5a>
 800ccd2:	b1c0      	cbz	r0, 800cd06 <osThreadNew+0x5a>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800ccd4:	b36c      	cbz	r4, 800cd32 <osThreadNew+0x86>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800ccd6:	69a5      	ldr	r5, [r4, #24]
 800ccd8:	2d00      	cmp	r5, #0
 800ccda:	bf08      	it	eq
 800ccdc:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ccde:	1e6a      	subs	r2, r5, #1
 800cce0:	46ac      	mov	ip, r5
 800cce2:	2a37      	cmp	r2, #55	@ 0x37
 800cce4:	d82a      	bhi.n	800cd3c <osThreadNew+0x90>
 800cce6:	6862      	ldr	r2, [r4, #4]
 800cce8:	07d2      	lsls	r2, r2, #31
 800ccea:	d427      	bmi.n	800cd3c <osThreadNew+0x90>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800ccec:	6966      	ldr	r6, [r4, #20]
 800ccee:	b16e      	cbz	r6, 800cd0c <osThreadNew+0x60>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ccf0:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 800ccf2:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ccf4:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 800ccf8:	b157      	cbz	r7, 800cd10 <osThreadNew+0x64>
 800ccfa:	f1be 0fab 	cmp.w	lr, #171	@ 0xab
 800ccfe:	d902      	bls.n	800cd06 <osThreadNew+0x5a>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cd00:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cd02:	b104      	cbz	r4, 800cd06 <osThreadNew+0x5a>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cd04:	b9e6      	cbnz	r6, 800cd40 <osThreadNew+0x94>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800cd06:	9805      	ldr	r0, [sp, #20]
}
 800cd08:	b007      	add	sp, #28
 800cd0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 800cd0c:	2280      	movs	r2, #128	@ 0x80
 800cd0e:	e7f0      	b.n	800ccf2 <osThreadNew+0x46>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800cd10:	f1be 0f00 	cmp.w	lr, #0
 800cd14:	d1f7      	bne.n	800cd06 <osThreadNew+0x5a>
      if (mem == 0) {
 800cd16:	6924      	ldr	r4, [r4, #16]
 800cd18:	2c00      	cmp	r4, #0
 800cd1a:	d1f4      	bne.n	800cd06 <osThreadNew+0x5a>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800cd1c:	ac05      	add	r4, sp, #20
 800cd1e:	b292      	uxth	r2, r2
 800cd20:	e9cd c400 	strd	ip, r4, [sp]
 800cd24:	f001 fca4 	bl	800e670 <xTaskCreate>
 800cd28:	2801      	cmp	r0, #1
          hTask = NULL;
 800cd2a:	bf1c      	itt	ne
 800cd2c:	2300      	movne	r3, #0
 800cd2e:	9305      	strne	r3, [sp, #20]
 800cd30:	e7e9      	b.n	800cd06 <osThreadNew+0x5a>
    name = NULL;
 800cd32:	4621      	mov	r1, r4
    prio  = (UBaseType_t)osPriorityNormal;
 800cd34:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 800cd38:	2280      	movs	r2, #128	@ 0x80
 800cd3a:	e7ef      	b.n	800cd1c <osThreadNew+0x70>
        return (NULL);
 800cd3c:	2000      	movs	r0, #0
 800cd3e:	e7e3      	b.n	800cd08 <osThreadNew+0x5c>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cd40:	e9cd 4701 	strd	r4, r7, [sp, #4]
 800cd44:	9500      	str	r5, [sp, #0]
 800cd46:	f001 fc55 	bl	800e5f4 <xTaskCreateStatic>
 800cd4a:	9005      	str	r0, [sp, #20]
 800cd4c:	e7db      	b.n	800cd06 <osThreadNew+0x5a>
 800cd4e:	bf00      	nop
 800cd50:	20012c3c 	.word	0x20012c3c

0800cd54 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800cd54:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd56:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800cd5a:	b113      	cbz	r3, 800cd62 <osDelay+0xe>
    stat = osErrorISR;
 800cd5c:	f06f 0005 	mvn.w	r0, #5
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 800cd60:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cd62:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800cd66:	b913      	cbnz	r3, 800cd6e <osDelay+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cd68:	f3ef 8311 	mrs	r3, BASEPRI
 800cd6c:	b11b      	cbz	r3, 800cd76 <osDelay+0x22>
 800cd6e:	4b04      	ldr	r3, [pc, #16]	@ (800cd80 <osDelay+0x2c>)
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	2b02      	cmp	r3, #2
 800cd74:	d0f2      	beq.n	800cd5c <osDelay+0x8>
    if (ticks != 0U) {
 800cd76:	b108      	cbz	r0, 800cd7c <osDelay+0x28>
      vTaskDelay(ticks);
 800cd78:	f001 fdc4 	bl	800e904 <vTaskDelay>
    stat = osOK;
 800cd7c:	2000      	movs	r0, #0
  return (stat);
 800cd7e:	e7ef      	b.n	800cd60 <osDelay+0xc>
 800cd80:	20012c3c 	.word	0x20012c3c

0800cd84 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800cd84:	b570      	push	{r4, r5, r6, lr}
 800cd86:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd88:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 800cd8c:	b116      	cbz	r6, 800cd94 <osMutexNew+0x10>
  hMutex = NULL;
 800cd8e:	2400      	movs	r4, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 800cd90:	4620      	mov	r0, r4
 800cd92:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cd94:	f3ef 8210 	mrs	r2, PRIMASK
  if (!IS_IRQ()) {
 800cd98:	b912      	cbnz	r2, 800cda0 <osMutexNew+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cd9a:	f3ef 8211 	mrs	r2, BASEPRI
 800cd9e:	b11a      	cbz	r2, 800cda8 <osMutexNew+0x24>
 800cda0:	4a18      	ldr	r2, [pc, #96]	@ (800ce04 <osMutexNew+0x80>)
 800cda2:	6812      	ldr	r2, [r2, #0]
 800cda4:	2a02      	cmp	r2, #2
 800cda6:	d0f2      	beq.n	800cd8e <osMutexNew+0xa>
    if (attr != NULL) {
 800cda8:	b115      	cbz	r5, 800cdb0 <osMutexNew+0x2c>
      type = attr->attr_bits;
 800cdaa:	686e      	ldr	r6, [r5, #4]
    if ((type & osMutexRobust) != osMutexRobust) {
 800cdac:	0733      	lsls	r3, r6, #28
 800cdae:	d4ee      	bmi.n	800cd8e <osMutexNew+0xa>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 800cdb0:	f006 0601 	and.w	r6, r6, #1
      if (attr != NULL) {
 800cdb4:	b17d      	cbz	r5, 800cdd6 <osMutexNew+0x52>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800cdb6:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
 800cdba:	b151      	cbz	r1, 800cdd2 <osMutexNew+0x4e>
 800cdbc:	2b4f      	cmp	r3, #79	@ 0x4f
 800cdbe:	d9e6      	bls.n	800cd8e <osMutexNew+0xa>
        if (rmtx != 0U) {
 800cdc0:	b1de      	cbz	r6, 800cdfa <osMutexNew+0x76>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800cdc2:	2004      	movs	r0, #4
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800cdc4:	f000 ff4b 	bl	800dc5e <xQueueCreateMutexStatic>
 800cdc8:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 800cdca:	2800      	cmp	r0, #0
 800cdcc:	d0df      	beq.n	800cd8e <osMutexNew+0xa>
          name = attr->name;
 800cdce:	682d      	ldr	r5, [r5, #0]
 800cdd0:	e00a      	b.n	800cde8 <osMutexNew+0x64>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d1db      	bne.n	800cd8e <osMutexNew+0xa>
          if (rmtx != 0U) {
 800cdd6:	b196      	cbz	r6, 800cdfe <osMutexNew+0x7a>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800cdd8:	2004      	movs	r0, #4
            hMutex = xSemaphoreCreateMutex ();
 800cdda:	f000 ff76 	bl	800dcca <xQueueCreateMutex>
 800cdde:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 800cde0:	2800      	cmp	r0, #0
 800cde2:	d0d4      	beq.n	800cd8e <osMutexNew+0xa>
        if (attr != NULL) {
 800cde4:	2d00      	cmp	r5, #0
 800cde6:	d1f2      	bne.n	800cdce <osMutexNew+0x4a>
        vQueueAddToRegistry (hMutex, name);
 800cde8:	4629      	mov	r1, r5
 800cdea:	4620      	mov	r0, r4
 800cdec:	f001 fa26 	bl	800e23c <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 800cdf0:	2e00      	cmp	r6, #0
 800cdf2:	d0cd      	beq.n	800cd90 <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800cdf4:	f044 0401 	orr.w	r4, r4, #1
  return ((osMutexId_t)hMutex);
 800cdf8:	e7ca      	b.n	800cd90 <osMutexNew+0xc>
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800cdfa:	2001      	movs	r0, #1
 800cdfc:	e7e2      	b.n	800cdc4 <osMutexNew+0x40>
            hMutex = xSemaphoreCreateMutex ();
 800cdfe:	2001      	movs	r0, #1
 800ce00:	e7eb      	b.n	800cdda <osMutexNew+0x56>
 800ce02:	bf00      	nop
 800ce04:	20012c3c 	.word	0x20012c3c

0800ce08 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800ce08:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800ce0a:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800ce0e:	b510      	push	{r4, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 800ce10:	f003 0201 	and.w	r2, r3, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800ce14:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ce16:	f3ef 8105 	mrs	r1, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800ce1a:	b111      	cbz	r1, 800ce22 <osMutexAcquire+0x1a>
    stat = osErrorISR;
 800ce1c:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 800ce20:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce22:	f3ef 8110 	mrs	r1, PRIMASK
  if (IS_IRQ()) {
 800ce26:	b911      	cbnz	r1, 800ce2e <osMutexAcquire+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ce28:	f3ef 8111 	mrs	r1, BASEPRI
 800ce2c:	b119      	cbz	r1, 800ce36 <osMutexAcquire+0x2e>
 800ce2e:	490d      	ldr	r1, [pc, #52]	@ (800ce64 <osMutexAcquire+0x5c>)
 800ce30:	6809      	ldr	r1, [r1, #0]
 800ce32:	2902      	cmp	r1, #2
 800ce34:	d0f2      	beq.n	800ce1c <osMutexAcquire+0x14>
  else if (hMutex == NULL) {
 800ce36:	2b01      	cmp	r3, #1
 800ce38:	d911      	bls.n	800ce5e <osMutexAcquire+0x56>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800ce3a:	4621      	mov	r1, r4
    if (rmtx != 0U) {
 800ce3c:	b162      	cbz	r2, 800ce58 <osMutexAcquire+0x50>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800ce3e:	f001 f987 	bl	800e150 <xQueueTakeMutexRecursive>
 800ce42:	2801      	cmp	r0, #1
 800ce44:	d101      	bne.n	800ce4a <osMutexAcquire+0x42>
  stat = osOK;
 800ce46:	2000      	movs	r0, #0
 800ce48:	e7ea      	b.n	800ce20 <osMutexAcquire+0x18>
          stat = osErrorResource;
 800ce4a:	2c00      	cmp	r4, #0
 800ce4c:	bf14      	ite	ne
 800ce4e:	f06f 0001 	mvnne.w	r0, #1
 800ce52:	f06f 0002 	mvneq.w	r0, #2
 800ce56:	e7e3      	b.n	800ce20 <osMutexAcquire+0x18>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800ce58:	f001 f8b5 	bl	800dfc6 <xQueueSemaphoreTake>
 800ce5c:	e7f1      	b.n	800ce42 <osMutexAcquire+0x3a>
    stat = osErrorParameter;
 800ce5e:	f06f 0003 	mvn.w	r0, #3
 800ce62:	e7dd      	b.n	800ce20 <osMutexAcquire+0x18>
 800ce64:	20012c3c 	.word	0x20012c3c

0800ce68 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800ce68:	4602      	mov	r2, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800ce6a:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800ce6e:	b508      	push	{r3, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 800ce70:	f002 0301 	and.w	r3, r2, #1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ce74:	f3ef 8105 	mrs	r1, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800ce78:	b111      	cbz	r1, 800ce80 <osMutexRelease+0x18>
    stat = osErrorISR;
 800ce7a:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 800ce7e:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce80:	f3ef 8110 	mrs	r1, PRIMASK
  if (IS_IRQ()) {
 800ce84:	b911      	cbnz	r1, 800ce8c <osMutexRelease+0x24>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ce86:	f3ef 8111 	mrs	r1, BASEPRI
 800ce8a:	b119      	cbz	r1, 800ce94 <osMutexRelease+0x2c>
 800ce8c:	490b      	ldr	r1, [pc, #44]	@ (800cebc <osMutexRelease+0x54>)
 800ce8e:	6809      	ldr	r1, [r1, #0]
 800ce90:	2902      	cmp	r1, #2
 800ce92:	d0f2      	beq.n	800ce7a <osMutexRelease+0x12>
  else if (hMutex == NULL) {
 800ce94:	2a01      	cmp	r2, #1
 800ce96:	d90d      	bls.n	800ceb4 <osMutexRelease+0x4c>
    if (rmtx != 0U) {
 800ce98:	b13b      	cbz	r3, 800ceaa <osMutexRelease+0x42>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800ce9a:	f000 fef5 	bl	800dc88 <xQueueGiveMutexRecursive>
 800ce9e:	2801      	cmp	r0, #1
  stat = osOK;
 800cea0:	bf0c      	ite	eq
 800cea2:	2000      	moveq	r0, #0
        stat = osErrorResource;
 800cea4:	f06f 0002 	mvnne.w	r0, #2
 800cea8:	e7e9      	b.n	800ce7e <osMutexRelease+0x16>
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800ceaa:	461a      	mov	r2, r3
 800ceac:	4619      	mov	r1, r3
 800ceae:	f000 fe1c 	bl	800daea <xQueueGenericSend>
 800ceb2:	e7f4      	b.n	800ce9e <osMutexRelease+0x36>
    stat = osErrorParameter;
 800ceb4:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800ceb8:	e7e1      	b.n	800ce7e <osMutexRelease+0x16>
 800ceba:	bf00      	nop
 800cebc:	20012c3c 	.word	0x20012c3c

0800cec0 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800cec0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cec2:	460e      	mov	r6, r1
 800cec4:	4615      	mov	r5, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cec6:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800ceca:	b993      	cbnz	r3, 800cef2 <osSemaphoreNew+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cecc:	f3ef 8310 	mrs	r3, PRIMASK
 800ced0:	b913      	cbnz	r3, 800ced8 <osSemaphoreNew+0x18>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ced2:	f3ef 8311 	mrs	r3, BASEPRI
 800ced6:	b11b      	cbz	r3, 800cee0 <osSemaphoreNew+0x20>
 800ced8:	4b24      	ldr	r3, [pc, #144]	@ (800cf6c <osSemaphoreNew+0xac>)
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	2b02      	cmp	r3, #2
 800cede:	d008      	beq.n	800cef2 <osSemaphoreNew+0x32>
 800cee0:	b138      	cbz	r0, 800cef2 <osSemaphoreNew+0x32>
 800cee2:	42b0      	cmp	r0, r6
 800cee4:	d305      	bcc.n	800cef2 <osSemaphoreNew+0x32>
    mem = -1;

    if (attr != NULL) {
 800cee6:	b155      	cbz	r5, 800cefe <osSemaphoreNew+0x3e>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800cee8:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 800ceec:	b12b      	cbz	r3, 800cefa <osSemaphoreNew+0x3a>
 800ceee:	2a4f      	cmp	r2, #79	@ 0x4f
 800cef0:	d823      	bhi.n	800cf3a <osSemaphoreNew+0x7a>
  hSemaphore = NULL;
 800cef2:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800cef4:	4620      	mov	r0, r4
 800cef6:	b002      	add	sp, #8
 800cef8:	bd70      	pop	{r4, r5, r6, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800cefa:	2a00      	cmp	r2, #0
 800cefc:	d1f9      	bne.n	800cef2 <osSemaphoreNew+0x32>
      if (max_count == 1U) {
 800cefe:	2801      	cmp	r0, #1
 800cf00:	d10e      	bne.n	800cf20 <osSemaphoreNew+0x60>
          hSemaphore = xSemaphoreCreateBinary();
 800cf02:	2203      	movs	r2, #3
 800cf04:	2100      	movs	r1, #0
 800cf06:	2001      	movs	r0, #1
 800cf08:	f000 fd7e 	bl	800da08 <xQueueGenericCreate>
 800cf0c:	e01d      	b.n	800cf4a <osSemaphoreNew+0x8a>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800cf0e:	461a      	mov	r2, r3
 800cf10:	4631      	mov	r1, r6
 800cf12:	f000 fda2 	bl	800da5a <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 800cf16:	4604      	mov	r4, r0
 800cf18:	2800      	cmp	r0, #0
 800cf1a:	d0ea      	beq.n	800cef2 <osSemaphoreNew+0x32>
          name = attr->name;
 800cf1c:	682d      	ldr	r5, [r5, #0]
 800cf1e:	e007      	b.n	800cf30 <osSemaphoreNew+0x70>
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800cf20:	4631      	mov	r1, r6
 800cf22:	f000 fdc0 	bl	800daa6 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 800cf26:	4604      	mov	r4, r0
 800cf28:	2800      	cmp	r0, #0
 800cf2a:	d0e2      	beq.n	800cef2 <osSemaphoreNew+0x32>
        if (attr != NULL) {
 800cf2c:	2d00      	cmp	r5, #0
 800cf2e:	d1f5      	bne.n	800cf1c <osSemaphoreNew+0x5c>
        vQueueAddToRegistry (hSemaphore, name);
 800cf30:	4629      	mov	r1, r5
 800cf32:	4620      	mov	r0, r4
 800cf34:	f001 f982 	bl	800e23c <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 800cf38:	e7dc      	b.n	800cef4 <osSemaphoreNew+0x34>
      if (max_count == 1U) {
 800cf3a:	2801      	cmp	r0, #1
 800cf3c:	d1e7      	bne.n	800cf0e <osSemaphoreNew+0x4e>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800cf3e:	2203      	movs	r2, #3
 800cf40:	9200      	str	r2, [sp, #0]
 800cf42:	2200      	movs	r2, #0
 800cf44:	4611      	mov	r1, r2
 800cf46:	f000 fd4b 	bl	800d9e0 <xQueueGenericCreateStatic>
          hSemaphore = xSemaphoreCreateBinary();
 800cf4a:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800cf4c:	2800      	cmp	r0, #0
 800cf4e:	d0d0      	beq.n	800cef2 <osSemaphoreNew+0x32>
 800cf50:	2e00      	cmp	r6, #0
 800cf52:	d0eb      	beq.n	800cf2c <osSemaphoreNew+0x6c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800cf54:	2300      	movs	r3, #0
 800cf56:	461a      	mov	r2, r3
 800cf58:	4619      	mov	r1, r3
 800cf5a:	f000 fdc6 	bl	800daea <xQueueGenericSend>
 800cf5e:	2801      	cmp	r0, #1
 800cf60:	d0e4      	beq.n	800cf2c <osSemaphoreNew+0x6c>
            vSemaphoreDelete (hSemaphore);
 800cf62:	4620      	mov	r0, r4
 800cf64:	f001 f994 	bl	800e290 <vQueueDelete>
      if (hSemaphore != NULL) {
 800cf68:	e7c3      	b.n	800cef2 <osSemaphoreNew+0x32>
 800cf6a:	bf00      	nop
 800cf6c:	20012c3c 	.word	0x20012c3c

0800cf70 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800cf70:	b513      	push	{r0, r1, r4, lr}
 800cf72:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800cf74:	b918      	cbnz	r0, 800cf7e <osSemaphoreAcquire+0xe>
    stat = osErrorParameter;
 800cf76:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 800cf7a:	b002      	add	sp, #8
 800cf7c:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cf7e:	f3ef 8305 	mrs	r3, IPSR
  else if (IS_IRQ()) {
 800cf82:	b15b      	cbz	r3, 800cf9c <osSemaphoreAcquire+0x2c>
    if (timeout != 0U) {
 800cf84:	2c00      	cmp	r4, #0
 800cf86:	d1f6      	bne.n	800cf76 <osSemaphoreAcquire+0x6>
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800cf88:	aa01      	add	r2, sp, #4
 800cf8a:	4621      	mov	r1, r4
      yield = pdFALSE;
 800cf8c:	9401      	str	r4, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800cf8e:	f001 f902 	bl	800e196 <xQueueReceiveFromISR>
 800cf92:	2801      	cmp	r0, #1
 800cf94:	d016      	beq.n	800cfc4 <osSemaphoreAcquire+0x54>
        stat = osErrorResource;
 800cf96:	f06f 0002 	mvn.w	r0, #2
 800cf9a:	e7ee      	b.n	800cf7a <osSemaphoreAcquire+0xa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cf9c:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 800cfa0:	b913      	cbnz	r3, 800cfa8 <osSemaphoreAcquire+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cfa2:	f3ef 8311 	mrs	r3, BASEPRI
 800cfa6:	b11b      	cbz	r3, 800cfb0 <osSemaphoreAcquire+0x40>
 800cfa8:	4b0e      	ldr	r3, [pc, #56]	@ (800cfe4 <osSemaphoreAcquire+0x74>)
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	2b02      	cmp	r3, #2
 800cfae:	d0e9      	beq.n	800cf84 <osSemaphoreAcquire+0x14>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800cfb0:	4621      	mov	r1, r4
 800cfb2:	f001 f808 	bl	800dfc6 <xQueueSemaphoreTake>
 800cfb6:	2801      	cmp	r0, #1
 800cfb8:	d006      	beq.n	800cfc8 <osSemaphoreAcquire+0x58>
      if (timeout != 0U) {
 800cfba:	2c00      	cmp	r4, #0
 800cfbc:	d0eb      	beq.n	800cf96 <osSemaphoreAcquire+0x26>
        stat = osErrorTimeout;
 800cfbe:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800cfc2:	e7da      	b.n	800cf7a <osSemaphoreAcquire+0xa>
        portYIELD_FROM_ISR (yield);
 800cfc4:	9b01      	ldr	r3, [sp, #4]
 800cfc6:	b90b      	cbnz	r3, 800cfcc <osSemaphoreAcquire+0x5c>
  stat = osOK;
 800cfc8:	2000      	movs	r0, #0
 800cfca:	e7d6      	b.n	800cf7a <osSemaphoreAcquire+0xa>
        portYIELD_FROM_ISR (yield);
 800cfcc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800cfd0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cfd4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800cfd8:	f3bf 8f4f 	dsb	sy
 800cfdc:	f3bf 8f6f 	isb	sy
 800cfe0:	e7f2      	b.n	800cfc8 <osSemaphoreAcquire+0x58>
 800cfe2:	bf00      	nop
 800cfe4:	20012c3c 	.word	0x20012c3c

0800cfe8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800cfe8:	b507      	push	{r0, r1, r2, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800cfea:	b370      	cbz	r0, 800d04a <osSemaphoreRelease+0x62>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cfec:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800cff0:	b15b      	cbz	r3, 800d00a <osSemaphoreRelease+0x22>
    yield = pdFALSE;
 800cff2:	2300      	movs	r3, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800cff4:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 800cff6:	9301      	str	r3, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800cff8:	f000 fee8 	bl	800ddcc <xQueueGiveFromISR>
 800cffc:	2801      	cmp	r0, #1
 800cffe:	d016      	beq.n	800d02e <osSemaphoreRelease+0x46>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 800d000:	f06f 0002 	mvn.w	r0, #2
    }
  }

  return (stat);
}
 800d004:	b003      	add	sp, #12
 800d006:	f85d fb04 	ldr.w	pc, [sp], #4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d00a:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 800d00e:	b913      	cbnz	r3, 800d016 <osSemaphoreRelease+0x2e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d010:	f3ef 8311 	mrs	r3, BASEPRI
 800d014:	b11b      	cbz	r3, 800d01e <osSemaphoreRelease+0x36>
 800d016:	4b0e      	ldr	r3, [pc, #56]	@ (800d050 <osSemaphoreRelease+0x68>)
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	2b02      	cmp	r3, #2
 800d01c:	d0e9      	beq.n	800cff2 <osSemaphoreRelease+0xa>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800d01e:	2300      	movs	r3, #0
 800d020:	461a      	mov	r2, r3
 800d022:	4619      	mov	r1, r3
 800d024:	f000 fd61 	bl	800daea <xQueueGenericSend>
 800d028:	2801      	cmp	r0, #1
 800d02a:	d00c      	beq.n	800d046 <osSemaphoreRelease+0x5e>
 800d02c:	e7e8      	b.n	800d000 <osSemaphoreRelease+0x18>
      portYIELD_FROM_ISR (yield);
 800d02e:	9b01      	ldr	r3, [sp, #4]
 800d030:	b14b      	cbz	r3, 800d046 <osSemaphoreRelease+0x5e>
 800d032:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d036:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d03a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d03e:	f3bf 8f4f 	dsb	sy
 800d042:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800d046:	2000      	movs	r0, #0
 800d048:	e7dc      	b.n	800d004 <osSemaphoreRelease+0x1c>
    stat = osErrorParameter;
 800d04a:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800d04e:	e7d9      	b.n	800d004 <osSemaphoreRelease+0x1c>
 800d050:	20012c3c 	.word	0x20012c3c

0800d054 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800d054:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d056:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d058:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800d05c:	b11b      	cbz	r3, 800d066 <osMessageQueueNew+0x12>
  hQueue = NULL;
 800d05e:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800d060:	4628      	mov	r0, r5
 800d062:	b002      	add	sp, #8
 800d064:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d066:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800d06a:	b913      	cbnz	r3, 800d072 <osMessageQueueNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d06c:	f3ef 8311 	mrs	r3, BASEPRI
 800d070:	b11b      	cbz	r3, 800d07a <osMessageQueueNew+0x26>
 800d072:	4b1a      	ldr	r3, [pc, #104]	@ (800d0dc <osMessageQueueNew+0x88>)
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	2b02      	cmp	r3, #2
 800d078:	d0f1      	beq.n	800d05e <osMessageQueueNew+0xa>
 800d07a:	2800      	cmp	r0, #0
 800d07c:	d0ef      	beq.n	800d05e <osMessageQueueNew+0xa>
 800d07e:	2900      	cmp	r1, #0
 800d080:	d0ed      	beq.n	800d05e <osMessageQueueNew+0xa>
    if (attr != NULL) {
 800d082:	b1ec      	cbz	r4, 800d0c0 <osMessageQueueNew+0x6c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d084:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 800d088:	b193      	cbz	r3, 800d0b0 <osMessageQueueNew+0x5c>
 800d08a:	2a4f      	cmp	r2, #79	@ 0x4f
 800d08c:	d9e7      	bls.n	800d05e <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d08e:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d090:	2a00      	cmp	r2, #0
 800d092:	d0e4      	beq.n	800d05e <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d094:	fb01 f500 	mul.w	r5, r1, r0
 800d098:	6966      	ldr	r6, [r4, #20]
 800d09a:	42ae      	cmp	r6, r5
 800d09c:	d3df      	bcc.n	800d05e <osMessageQueueNew+0xa>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800d09e:	2500      	movs	r5, #0
 800d0a0:	9500      	str	r5, [sp, #0]
 800d0a2:	f000 fc9d 	bl	800d9e0 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 800d0a6:	4605      	mov	r5, r0
 800d0a8:	2800      	cmp	r0, #0
 800d0aa:	d0d8      	beq.n	800d05e <osMessageQueueNew+0xa>
        name = attr->name;
 800d0ac:	6824      	ldr	r4, [r4, #0]
 800d0ae:	e00f      	b.n	800d0d0 <osMessageQueueNew+0x7c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d0b0:	2a00      	cmp	r2, #0
 800d0b2:	d1d4      	bne.n	800d05e <osMessageQueueNew+0xa>
 800d0b4:	6923      	ldr	r3, [r4, #16]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d1d1      	bne.n	800d05e <osMessageQueueNew+0xa>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d0ba:	6963      	ldr	r3, [r4, #20]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d1ce      	bne.n	800d05e <osMessageQueueNew+0xa>
        hQueue = xQueueCreate (msg_count, msg_size);
 800d0c0:	2200      	movs	r2, #0
 800d0c2:	f000 fca1 	bl	800da08 <xQueueGenericCreate>
    if (hQueue != NULL) {
 800d0c6:	4605      	mov	r5, r0
 800d0c8:	2800      	cmp	r0, #0
 800d0ca:	d0c8      	beq.n	800d05e <osMessageQueueNew+0xa>
      if (attr != NULL) {
 800d0cc:	2c00      	cmp	r4, #0
 800d0ce:	d1ed      	bne.n	800d0ac <osMessageQueueNew+0x58>
      vQueueAddToRegistry (hQueue, name);
 800d0d0:	4621      	mov	r1, r4
 800d0d2:	4628      	mov	r0, r5
 800d0d4:	f001 f8b2 	bl	800e23c <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 800d0d8:	e7c2      	b.n	800d060 <osMessageQueueNew+0xc>
 800d0da:	bf00      	nop
 800d0dc:	20012c3c 	.word	0x20012c3c

0800d0e0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800d0e0:	b513      	push	{r0, r1, r4, lr}
 800d0e2:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d0e4:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800d0e8:	b123      	cbz	r3, 800d0f4 <osMessageQueuePut+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d0ea:	b9d8      	cbnz	r0, 800d124 <osMessageQueuePut+0x44>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
      stat = osErrorParameter;
 800d0ec:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 800d0f0:	b002      	add	sp, #8
 800d0f2:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d0f4:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800d0f8:	b913      	cbnz	r3, 800d100 <osMessageQueuePut+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d0fa:	f3ef 8311 	mrs	r3, BASEPRI
 800d0fe:	b11b      	cbz	r3, 800d108 <osMessageQueuePut+0x28>
 800d100:	4b17      	ldr	r3, [pc, #92]	@ (800d160 <osMessageQueuePut+0x80>)
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	2b02      	cmp	r3, #2
 800d106:	d0f0      	beq.n	800d0ea <osMessageQueuePut+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d108:	2800      	cmp	r0, #0
 800d10a:	d0ef      	beq.n	800d0ec <osMessageQueuePut+0xc>
 800d10c:	2900      	cmp	r1, #0
 800d10e:	d0ed      	beq.n	800d0ec <osMessageQueuePut+0xc>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d110:	2300      	movs	r3, #0
 800d112:	4622      	mov	r2, r4
 800d114:	f000 fce9 	bl	800daea <xQueueGenericSend>
 800d118:	2801      	cmp	r0, #1
 800d11a:	d013      	beq.n	800d144 <osMessageQueuePut+0x64>
        if (timeout != 0U) {
 800d11c:	b16c      	cbz	r4, 800d13a <osMessageQueuePut+0x5a>
          stat = osErrorTimeout;
 800d11e:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800d122:	e7e5      	b.n	800d0f0 <osMessageQueuePut+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d124:	2900      	cmp	r1, #0
 800d126:	d0e1      	beq.n	800d0ec <osMessageQueuePut+0xc>
 800d128:	2c00      	cmp	r4, #0
 800d12a:	d1df      	bne.n	800d0ec <osMessageQueuePut+0xc>
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800d12c:	4623      	mov	r3, r4
 800d12e:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800d130:	9401      	str	r4, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800d132:	f000 fde7 	bl	800dd04 <xQueueGenericSendFromISR>
 800d136:	2801      	cmp	r0, #1
 800d138:	d002      	beq.n	800d140 <osMessageQueuePut+0x60>
        stat = osErrorResource;
 800d13a:	f06f 0002 	mvn.w	r0, #2
 800d13e:	e7d7      	b.n	800d0f0 <osMessageQueuePut+0x10>
        portYIELD_FROM_ISR (yield);
 800d140:	9b01      	ldr	r3, [sp, #4]
 800d142:	b90b      	cbnz	r3, 800d148 <osMessageQueuePut+0x68>
  stat = osOK;
 800d144:	2000      	movs	r0, #0
 800d146:	e7d3      	b.n	800d0f0 <osMessageQueuePut+0x10>
        portYIELD_FROM_ISR (yield);
 800d148:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d14c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d150:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d154:	f3bf 8f4f 	dsb	sy
 800d158:	f3bf 8f6f 	isb	sy
 800d15c:	e7f2      	b.n	800d144 <osMessageQueuePut+0x64>
 800d15e:	bf00      	nop
 800d160:	20012c3c 	.word	0x20012c3c

0800d164 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800d164:	b513      	push	{r0, r1, r4, lr}
 800d166:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d168:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800d16c:	b123      	cbz	r3, 800d178 <osMessageQueueGet+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d16e:	b9d0      	cbnz	r0, 800d1a6 <osMessageQueueGet+0x42>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
      stat = osErrorParameter;
 800d170:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 800d174:	b002      	add	sp, #8
 800d176:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d178:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800d17c:	b913      	cbnz	r3, 800d184 <osMessageQueueGet+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d17e:	f3ef 8311 	mrs	r3, BASEPRI
 800d182:	b11b      	cbz	r3, 800d18c <osMessageQueueGet+0x28>
 800d184:	4b16      	ldr	r3, [pc, #88]	@ (800d1e0 <osMessageQueueGet+0x7c>)
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	2b02      	cmp	r3, #2
 800d18a:	d0f0      	beq.n	800d16e <osMessageQueueGet+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d18c:	2800      	cmp	r0, #0
 800d18e:	d0ef      	beq.n	800d170 <osMessageQueueGet+0xc>
 800d190:	2900      	cmp	r1, #0
 800d192:	d0ed      	beq.n	800d170 <osMessageQueueGet+0xc>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d194:	4622      	mov	r2, r4
 800d196:	f000 fe72 	bl	800de7e <xQueueReceive>
 800d19a:	2801      	cmp	r0, #1
 800d19c:	d012      	beq.n	800d1c4 <osMessageQueueGet+0x60>
        if (timeout != 0U) {
 800d19e:	b164      	cbz	r4, 800d1ba <osMessageQueueGet+0x56>
          stat = osErrorTimeout;
 800d1a0:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800d1a4:	e7e6      	b.n	800d174 <osMessageQueueGet+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d1a6:	2900      	cmp	r1, #0
 800d1a8:	d0e2      	beq.n	800d170 <osMessageQueueGet+0xc>
 800d1aa:	2c00      	cmp	r4, #0
 800d1ac:	d1e0      	bne.n	800d170 <osMessageQueueGet+0xc>
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800d1ae:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800d1b0:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800d1b2:	f000 fff0 	bl	800e196 <xQueueReceiveFromISR>
 800d1b6:	2801      	cmp	r0, #1
 800d1b8:	d002      	beq.n	800d1c0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800d1ba:	f06f 0002 	mvn.w	r0, #2
 800d1be:	e7d9      	b.n	800d174 <osMessageQueueGet+0x10>
        portYIELD_FROM_ISR (yield);
 800d1c0:	9b01      	ldr	r3, [sp, #4]
 800d1c2:	b90b      	cbnz	r3, 800d1c8 <osMessageQueueGet+0x64>
  stat = osOK;
 800d1c4:	2000      	movs	r0, #0
 800d1c6:	e7d5      	b.n	800d174 <osMessageQueueGet+0x10>
        portYIELD_FROM_ISR (yield);
 800d1c8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d1cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d1d0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d1d4:	f3bf 8f4f 	dsb	sy
 800d1d8:	f3bf 8f6f 	isb	sy
 800d1dc:	e7f2      	b.n	800d1c4 <osMessageQueueGet+0x60>
 800d1de:	bf00      	nop
 800d1e0:	20012c3c 	.word	0x20012c3c

0800d1e4 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d1e4:	4b03      	ldr	r3, [pc, #12]	@ (800d1f4 <vApplicationGetIdleTaskMemory+0x10>)
 800d1e6:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d1e8:	4b03      	ldr	r3, [pc, #12]	@ (800d1f8 <vApplicationGetIdleTaskMemory+0x14>)
 800d1ea:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d1ec:	2380      	movs	r3, #128	@ 0x80
 800d1ee:	6013      	str	r3, [r2, #0]
}
 800d1f0:	4770      	bx	lr
 800d1f2:	bf00      	nop
 800d1f4:	20012b90 	.word	0x20012b90
 800d1f8:	20012990 	.word	0x20012990

0800d1fc <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d1fc:	4b03      	ldr	r3, [pc, #12]	@ (800d20c <vApplicationGetTimerTaskMemory+0x10>)
 800d1fe:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d200:	4b03      	ldr	r3, [pc, #12]	@ (800d210 <vApplicationGetTimerTaskMemory+0x14>)
 800d202:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d204:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d208:	6013      	str	r3, [r2, #0]
}
 800d20a:	4770      	bx	lr
 800d20c:	200128e4 	.word	0x200128e4
 800d210:	200124e4 	.word	0x200124e4

0800d214 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d214:	4b10      	ldr	r3, [pc, #64]	@ (800d258 <prvInsertBlockIntoFreeList+0x44>)
{
 800d216:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d218:	461a      	mov	r2, r3
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	4283      	cmp	r3, r0
 800d21e:	d3fb      	bcc.n	800d218 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d220:	6854      	ldr	r4, [r2, #4]
 800d222:	1911      	adds	r1, r2, r4
 800d224:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d226:	bf01      	itttt	eq
 800d228:	6841      	ldreq	r1, [r0, #4]
 800d22a:	4610      	moveq	r0, r2
 800d22c:	1909      	addeq	r1, r1, r4
 800d22e:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d230:	6844      	ldr	r4, [r0, #4]
 800d232:	1901      	adds	r1, r0, r4
 800d234:	428b      	cmp	r3, r1
 800d236:	d10c      	bne.n	800d252 <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d238:	4908      	ldr	r1, [pc, #32]	@ (800d25c <prvInsertBlockIntoFreeList+0x48>)
 800d23a:	6809      	ldr	r1, [r1, #0]
 800d23c:	428b      	cmp	r3, r1
 800d23e:	d003      	beq.n	800d248 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d240:	6859      	ldr	r1, [r3, #4]
 800d242:	4421      	add	r1, r4
 800d244:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d246:	6819      	ldr	r1, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d248:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d24a:	6001      	str	r1, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d24c:	bf18      	it	ne
 800d24e:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d250:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d252:	4619      	mov	r1, r3
 800d254:	e7f8      	b.n	800d248 <prvInsertBlockIntoFreeList+0x34>
 800d256:	bf00      	nop
 800d258:	20012c50 	.word	0x20012c50
 800d25c:	20012c4c 	.word	0x20012c4c

0800d260 <pvPortMalloc>:
{
 800d260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d264:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800d266:	f001 fa31 	bl	800e6cc <vTaskSuspendAll>
		if( pxEnd == NULL )
 800d26a:	4940      	ldr	r1, [pc, #256]	@ (800d36c <pvPortMalloc+0x10c>)
 800d26c:	4d40      	ldr	r5, [pc, #256]	@ (800d370 <pvPortMalloc+0x110>)
 800d26e:	680b      	ldr	r3, [r1, #0]
 800d270:	b9f3      	cbnz	r3, 800d2b0 <pvPortMalloc+0x50>
	uxAddress = ( size_t ) ucHeap;
 800d272:	4a40      	ldr	r2, [pc, #256]	@ (800d374 <pvPortMalloc+0x114>)
	xStart.xBlockSize = ( size_t ) 0;
 800d274:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d276:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d278:	4e3f      	ldr	r6, [pc, #252]	@ (800d378 <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d27a:	bf1b      	ittet	ne
 800d27c:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d27e:	4b3f      	ldrne	r3, [pc, #252]	@ (800d37c <pvPortMalloc+0x11c>)
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d280:	4b3f      	ldreq	r3, [pc, #252]	@ (800d380 <pvPortMalloc+0x120>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d282:	f022 0207 	bicne.w	r2, r2, #7
	xStart.xBlockSize = ( size_t ) 0;
 800d286:	6070      	str	r0, [r6, #4]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d288:	bf18      	it	ne
 800d28a:	1a9b      	subne	r3, r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d28c:	6032      	str	r2, [r6, #0]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d28e:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800d290:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d292:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 800d296:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d29a:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 800d29c:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d29e:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d2a2:	4b38      	ldr	r3, [pc, #224]	@ (800d384 <pvPortMalloc+0x124>)
 800d2a4:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d2a6:	4b38      	ldr	r3, [pc, #224]	@ (800d388 <pvPortMalloc+0x128>)
 800d2a8:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d2aa:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d2ae:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d2b0:	682e      	ldr	r6, [r5, #0]
 800d2b2:	4226      	tst	r6, r4
 800d2b4:	d154      	bne.n	800d360 <pvPortMalloc+0x100>
			if( xWantedSize > 0 )
 800d2b6:	2c00      	cmp	r4, #0
 800d2b8:	d043      	beq.n	800d342 <pvPortMalloc+0xe2>
				xWantedSize += xHeapStructSize;
 800d2ba:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d2be:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d2c0:	bf1c      	itt	ne
 800d2c2:	f023 0307 	bicne.w	r3, r3, #7
 800d2c6:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d049      	beq.n	800d360 <pvPortMalloc+0x100>
 800d2cc:	4f2e      	ldr	r7, [pc, #184]	@ (800d388 <pvPortMalloc+0x128>)
 800d2ce:	683c      	ldr	r4, [r7, #0]
 800d2d0:	429c      	cmp	r4, r3
 800d2d2:	d345      	bcc.n	800d360 <pvPortMalloc+0x100>
				pxBlock = xStart.pxNextFreeBlock;
 800d2d4:	4a28      	ldr	r2, [pc, #160]	@ (800d378 <pvPortMalloc+0x118>)
 800d2d6:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d2d8:	6868      	ldr	r0, [r5, #4]
 800d2da:	4298      	cmp	r0, r3
 800d2dc:	d204      	bcs.n	800d2e8 <pvPortMalloc+0x88>
 800d2de:	f8d5 c000 	ldr.w	ip, [r5]
 800d2e2:	f1bc 0f00 	cmp.w	ip, #0
 800d2e6:	d117      	bne.n	800d318 <pvPortMalloc+0xb8>
				if( pxBlock != pxEnd )
 800d2e8:	6809      	ldr	r1, [r1, #0]
 800d2ea:	42a9      	cmp	r1, r5
 800d2ec:	d038      	beq.n	800d360 <pvPortMalloc+0x100>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d2ee:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d2f0:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d2f4:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d2f6:	1ac2      	subs	r2, r0, r3
 800d2f8:	2a10      	cmp	r2, #16
 800d2fa:	d914      	bls.n	800d326 <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d2fc:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d2fe:	0741      	lsls	r1, r0, #29
 800d300:	d00d      	beq.n	800d31e <pvPortMalloc+0xbe>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d306:	b672      	cpsid	i
 800d308:	f383 8811 	msr	BASEPRI, r3
 800d30c:	f3bf 8f6f 	isb	sy
 800d310:	f3bf 8f4f 	dsb	sy
 800d314:	b662      	cpsie	i
 800d316:	e7fe      	b.n	800d316 <pvPortMalloc+0xb6>
 800d318:	462a      	mov	r2, r5
 800d31a:	4665      	mov	r5, ip
 800d31c:	e7dc      	b.n	800d2d8 <pvPortMalloc+0x78>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d31e:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d320:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d322:	f7ff ff77 	bl	800d214 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d326:	686a      	ldr	r2, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d328:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d32a:	4916      	ldr	r1, [pc, #88]	@ (800d384 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d32c:	1aa4      	subs	r4, r4, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d32e:	4316      	orrs	r6, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d330:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d332:	603c      	str	r4, [r7, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d334:	4284      	cmp	r4, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d336:	606e      	str	r6, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d338:	602b      	str	r3, [r5, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d33a:	bf38      	it	cc
 800d33c:	600c      	strcc	r4, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d33e:	f108 0408 	add.w	r4, r8, #8
	( void ) xTaskResumeAll();
 800d342:	f001 fa69 	bl	800e818 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d346:	0763      	lsls	r3, r4, #29
 800d348:	d00c      	beq.n	800d364 <pvPortMalloc+0x104>
 800d34a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d34e:	b672      	cpsid	i
 800d350:	f383 8811 	msr	BASEPRI, r3
 800d354:	f3bf 8f6f 	isb	sy
 800d358:	f3bf 8f4f 	dsb	sy
 800d35c:	b662      	cpsie	i
 800d35e:	e7fe      	b.n	800d35e <pvPortMalloc+0xfe>
void *pvReturn = NULL;
 800d360:	2400      	movs	r4, #0
 800d362:	e7ee      	b.n	800d342 <pvPortMalloc+0xe2>
}
 800d364:	4620      	mov	r0, r4
 800d366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d36a:	bf00      	nop
 800d36c:	20012c4c 	.word	0x20012c4c
 800d370:	20012c40 	.word	0x20012c40
 800d374:	20012c58 	.word	0x20012c58
 800d378:	20012c50 	.word	0x20012c50
 800d37c:	200264d8 	.word	0x200264d8
 800d380:	00013880 	.word	0x00013880
 800d384:	20012c44 	.word	0x20012c44
 800d388:	20012c48 	.word	0x20012c48

0800d38c <vPortFree>:
{
 800d38c:	b510      	push	{r4, lr}
	if( pv != NULL )
 800d38e:	4604      	mov	r4, r0
 800d390:	2800      	cmp	r0, #0
 800d392:	d032      	beq.n	800d3fa <vPortFree+0x6e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d394:	4a19      	ldr	r2, [pc, #100]	@ (800d3fc <vPortFree+0x70>)
 800d396:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800d39a:	6812      	ldr	r2, [r2, #0]
 800d39c:	4213      	tst	r3, r2
 800d39e:	d10a      	bne.n	800d3b6 <vPortFree+0x2a>
 800d3a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3a4:	b672      	cpsid	i
 800d3a6:	f383 8811 	msr	BASEPRI, r3
 800d3aa:	f3bf 8f6f 	isb	sy
 800d3ae:	f3bf 8f4f 	dsb	sy
 800d3b2:	b662      	cpsie	i
 800d3b4:	e7fe      	b.n	800d3b4 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d3b6:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800d3ba:	b151      	cbz	r1, 800d3d2 <vPortFree+0x46>
 800d3bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3c0:	b672      	cpsid	i
 800d3c2:	f383 8811 	msr	BASEPRI, r3
 800d3c6:	f3bf 8f6f 	isb	sy
 800d3ca:	f3bf 8f4f 	dsb	sy
 800d3ce:	b662      	cpsie	i
 800d3d0:	e7fe      	b.n	800d3d0 <vPortFree+0x44>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d3d2:	ea23 0302 	bic.w	r3, r3, r2
 800d3d6:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800d3da:	f001 f977 	bl	800e6cc <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d3de:	4a08      	ldr	r2, [pc, #32]	@ (800d400 <vPortFree+0x74>)
 800d3e0:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d3e4:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d3e8:	6811      	ldr	r1, [r2, #0]
 800d3ea:	440b      	add	r3, r1
 800d3ec:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d3ee:	f7ff ff11 	bl	800d214 <prvInsertBlockIntoFreeList>
}
 800d3f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 800d3f6:	f001 ba0f 	b.w	800e818 <xTaskResumeAll>
}
 800d3fa:	bd10      	pop	{r4, pc}
 800d3fc:	20012c40 	.word	0x20012c40
 800d400:	20012c48 	.word	0x20012c48

0800d404 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d404:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d408:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d40c:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d40e:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d410:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d414:	2300      	movs	r3, #0
 800d416:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d418:	4770      	bx	lr

0800d41a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d41a:	2300      	movs	r3, #0
 800d41c:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d41e:	4770      	bx	lr

0800d420 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800d420:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d422:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800d424:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d426:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d428:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d42a:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800d42c:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800d42e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800d430:	3301      	adds	r3, #1
 800d432:	6003      	str	r3, [r0, #0]
}
 800d434:	4770      	bx	lr

0800d436 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d436:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d438:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d43a:	1c63      	adds	r3, r4, #1
 800d43c:	d10a      	bne.n	800d454 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d43e:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d440:	685a      	ldr	r2, [r3, #4]
 800d442:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d444:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d446:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800d448:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800d44a:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800d44c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800d44e:	3301      	adds	r3, #1
 800d450:	6003      	str	r3, [r0, #0]
}
 800d452:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d454:	f100 0208 	add.w	r2, r0, #8
 800d458:	4613      	mov	r3, r2
 800d45a:	6852      	ldr	r2, [r2, #4]
 800d45c:	6815      	ldr	r5, [r2, #0]
 800d45e:	42a5      	cmp	r5, r4
 800d460:	d9fa      	bls.n	800d458 <vListInsert+0x22>
 800d462:	e7ed      	b.n	800d440 <vListInsert+0xa>

0800d464 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d464:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d466:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 800d46a:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d46c:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d46e:	6859      	ldr	r1, [r3, #4]
 800d470:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d472:	bf08      	it	eq
 800d474:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d476:	2200      	movs	r2, #0
 800d478:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800d47a:	681a      	ldr	r2, [r3, #0]
 800d47c:	3a01      	subs	r2, #1
 800d47e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d480:	6818      	ldr	r0, [r3, #0]
}
 800d482:	4770      	bx	lr

0800d484 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d484:	4808      	ldr	r0, [pc, #32]	@ (800d4a8 <prvPortStartFirstTask+0x24>)
 800d486:	6800      	ldr	r0, [r0, #0]
 800d488:	6800      	ldr	r0, [r0, #0]
 800d48a:	f380 8808 	msr	MSP, r0
 800d48e:	f04f 0000 	mov.w	r0, #0
 800d492:	f380 8814 	msr	CONTROL, r0
 800d496:	b662      	cpsie	i
 800d498:	b661      	cpsie	f
 800d49a:	f3bf 8f4f 	dsb	sy
 800d49e:	f3bf 8f6f 	isb	sy
 800d4a2:	df00      	svc	0
 800d4a4:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d4a6:	0000      	.short	0x0000
 800d4a8:	e000ed08 	.word	0xe000ed08

0800d4ac <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d4ac:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d4bc <vPortEnableVFP+0x10>
 800d4b0:	6801      	ldr	r1, [r0, #0]
 800d4b2:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d4b6:	6001      	str	r1, [r0, #0]
 800d4b8:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d4ba:	0000      	.short	0x0000
 800d4bc:	e000ed88 	.word	0xe000ed88

0800d4c0 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 800d4c0:	2300      	movs	r3, #0
{
 800d4c2:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800d4c4:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800d4c6:	4b0f      	ldr	r3, [pc, #60]	@ (800d504 <prvTaskExitError+0x44>)
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	3301      	adds	r3, #1
 800d4cc:	d00a      	beq.n	800d4e4 <prvTaskExitError+0x24>
 800d4ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4d2:	b672      	cpsid	i
 800d4d4:	f383 8811 	msr	BASEPRI, r3
 800d4d8:	f3bf 8f6f 	isb	sy
 800d4dc:	f3bf 8f4f 	dsb	sy
 800d4e0:	b662      	cpsie	i
 800d4e2:	e7fe      	b.n	800d4e2 <prvTaskExitError+0x22>
 800d4e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4e8:	b672      	cpsid	i
 800d4ea:	f383 8811 	msr	BASEPRI, r3
 800d4ee:	f3bf 8f6f 	isb	sy
 800d4f2:	f3bf 8f4f 	dsb	sy
 800d4f6:	b662      	cpsie	i
	while( ulDummy == 0 )
 800d4f8:	9b01      	ldr	r3, [sp, #4]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d0fc      	beq.n	800d4f8 <prvTaskExitError+0x38>
}
 800d4fe:	b002      	add	sp, #8
 800d500:	4770      	bx	lr
 800d502:	bf00      	nop
 800d504:	2000006c 	.word	0x2000006c

0800d508 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d508:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d50c:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d510:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800d514:	3844      	subs	r0, #68	@ 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d516:	6403      	str	r3, [r0, #64]	@ 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d518:	4b03      	ldr	r3, [pc, #12]	@ (800d528 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d51a:	63c1      	str	r1, [r0, #60]	@ 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d51c:	6383      	str	r3, [r0, #56]	@ 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d51e:	f06f 0302 	mvn.w	r3, #2
 800d522:	6203      	str	r3, [r0, #32]
}
 800d524:	4770      	bx	lr
 800d526:	bf00      	nop
 800d528:	0800d4c1 	.word	0x0800d4c1
 800d52c:	00000000 	.word	0x00000000

0800d530 <SVC_Handler>:
	__asm volatile (
 800d530:	4b07      	ldr	r3, [pc, #28]	@ (800d550 <pxCurrentTCBConst2>)
 800d532:	6819      	ldr	r1, [r3, #0]
 800d534:	6808      	ldr	r0, [r1, #0]
 800d536:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d53a:	f380 8809 	msr	PSP, r0
 800d53e:	f3bf 8f6f 	isb	sy
 800d542:	f04f 0000 	mov.w	r0, #0
 800d546:	f380 8811 	msr	BASEPRI, r0
 800d54a:	4770      	bx	lr
 800d54c:	f3af 8000 	nop.w

0800d550 <pxCurrentTCBConst2>:
 800d550:	20026a18 	.word	0x20026a18

0800d554 <vPortEnterCritical>:
 800d554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d558:	b672      	cpsid	i
 800d55a:	f383 8811 	msr	BASEPRI, r3
 800d55e:	f3bf 8f6f 	isb	sy
 800d562:	f3bf 8f4f 	dsb	sy
 800d566:	b662      	cpsie	i
	uxCriticalNesting++;
 800d568:	4a0b      	ldr	r2, [pc, #44]	@ (800d598 <vPortEnterCritical+0x44>)
 800d56a:	6813      	ldr	r3, [r2, #0]
 800d56c:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800d56e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800d570:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800d572:	d110      	bne.n	800d596 <vPortEnterCritical+0x42>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d574:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d578:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800d57c:	b2db      	uxtb	r3, r3
 800d57e:	b153      	cbz	r3, 800d596 <vPortEnterCritical+0x42>
 800d580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d584:	b672      	cpsid	i
 800d586:	f383 8811 	msr	BASEPRI, r3
 800d58a:	f3bf 8f6f 	isb	sy
 800d58e:	f3bf 8f4f 	dsb	sy
 800d592:	b662      	cpsie	i
 800d594:	e7fe      	b.n	800d594 <vPortEnterCritical+0x40>
}
 800d596:	4770      	bx	lr
 800d598:	2000006c 	.word	0x2000006c

0800d59c <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800d59c:	4a09      	ldr	r2, [pc, #36]	@ (800d5c4 <vPortExitCritical+0x28>)
 800d59e:	6813      	ldr	r3, [r2, #0]
 800d5a0:	b953      	cbnz	r3, 800d5b8 <vPortExitCritical+0x1c>
 800d5a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5a6:	b672      	cpsid	i
 800d5a8:	f383 8811 	msr	BASEPRI, r3
 800d5ac:	f3bf 8f6f 	isb	sy
 800d5b0:	f3bf 8f4f 	dsb	sy
 800d5b4:	b662      	cpsie	i
 800d5b6:	e7fe      	b.n	800d5b6 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 800d5b8:	3b01      	subs	r3, #1
 800d5ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d5bc:	b90b      	cbnz	r3, 800d5c2 <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d5be:	f383 8811 	msr	BASEPRI, r3
}
 800d5c2:	4770      	bx	lr
 800d5c4:	2000006c 	.word	0x2000006c
	...

0800d5d0 <PendSV_Handler>:
	__asm volatile
 800d5d0:	f3ef 8009 	mrs	r0, PSP
 800d5d4:	f3bf 8f6f 	isb	sy
 800d5d8:	4b15      	ldr	r3, [pc, #84]	@ (800d630 <pxCurrentTCBConst>)
 800d5da:	681a      	ldr	r2, [r3, #0]
 800d5dc:	f01e 0f10 	tst.w	lr, #16
 800d5e0:	bf08      	it	eq
 800d5e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d5e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5ea:	6010      	str	r0, [r2, #0]
 800d5ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d5f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800d5f4:	b672      	cpsid	i
 800d5f6:	f380 8811 	msr	BASEPRI, r0
 800d5fa:	f3bf 8f4f 	dsb	sy
 800d5fe:	f3bf 8f6f 	isb	sy
 800d602:	b662      	cpsie	i
 800d604:	f001 fa18 	bl	800ea38 <vTaskSwitchContext>
 800d608:	f04f 0000 	mov.w	r0, #0
 800d60c:	f380 8811 	msr	BASEPRI, r0
 800d610:	bc09      	pop	{r0, r3}
 800d612:	6819      	ldr	r1, [r3, #0]
 800d614:	6808      	ldr	r0, [r1, #0]
 800d616:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d61a:	f01e 0f10 	tst.w	lr, #16
 800d61e:	bf08      	it	eq
 800d620:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d624:	f380 8809 	msr	PSP, r0
 800d628:	f3bf 8f6f 	isb	sy
 800d62c:	4770      	bx	lr
 800d62e:	bf00      	nop

0800d630 <pxCurrentTCBConst>:
 800d630:	20026a18 	.word	0x20026a18

0800d634 <SysTick_Handler>:
{
 800d634:	b508      	push	{r3, lr}
	__asm volatile
 800d636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d63a:	b672      	cpsid	i
 800d63c:	f383 8811 	msr	BASEPRI, r3
 800d640:	f3bf 8f6f 	isb	sy
 800d644:	f3bf 8f4f 	dsb	sy
 800d648:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 800d64a:	f001 f84d 	bl	800e6e8 <xTaskIncrementTick>
 800d64e:	b128      	cbz	r0, 800d65c <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d650:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d654:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d658:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 800d65c:	2300      	movs	r3, #0
 800d65e:	f383 8811 	msr	BASEPRI, r3
}
 800d662:	bd08      	pop	{r3, pc}

0800d664 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d664:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 800d668:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d66a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d66e:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d670:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d672:	4b04      	ldr	r3, [pc, #16]	@ (800d684 <vPortSetupTimerInterrupt+0x20>)
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	fbb3 f3f1 	udiv	r3, r3, r1
 800d67a:	3b01      	subs	r3, #1
 800d67c:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d67e:	2307      	movs	r3, #7
 800d680:	6113      	str	r3, [r2, #16]
}
 800d682:	4770      	bx	lr
 800d684:	20000060 	.word	0x20000060

0800d688 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d688:	4b2c      	ldr	r3, [pc, #176]	@ (800d73c <xPortStartScheduler+0xb4>)
{
 800d68a:	b537      	push	{r0, r1, r2, r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d68c:	781a      	ldrb	r2, [r3, #0]
 800d68e:	b2d2      	uxtb	r2, r2
 800d690:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d692:	22ff      	movs	r2, #255	@ 0xff
 800d694:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d696:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d698:	4a29      	ldr	r2, [pc, #164]	@ (800d740 <xPortStartScheduler+0xb8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d69a:	b2db      	uxtb	r3, r3
 800d69c:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d6a0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800d6a4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800d6a8:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d6aa:	2307      	movs	r3, #7
 800d6ac:	4a25      	ldr	r2, [pc, #148]	@ (800d744 <xPortStartScheduler+0xbc>)
 800d6ae:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d6b0:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 800d6b4:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d6b6:	0609      	lsls	r1, r1, #24
 800d6b8:	d40c      	bmi.n	800d6d4 <xPortStartScheduler+0x4c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d6ba:	2b03      	cmp	r3, #3
 800d6bc:	d013      	beq.n	800d6e6 <xPortStartScheduler+0x5e>
	__asm volatile
 800d6be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6c2:	b672      	cpsid	i
 800d6c4:	f383 8811 	msr	BASEPRI, r3
 800d6c8:	f3bf 8f6f 	isb	sy
 800d6cc:	f3bf 8f4f 	dsb	sy
 800d6d0:	b662      	cpsie	i
 800d6d2:	e7fe      	b.n	800d6d2 <xPortStartScheduler+0x4a>
			ulMaxPRIGROUPValue--;
 800d6d4:	3b01      	subs	r3, #1
 800d6d6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d6d8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800d6dc:	005b      	lsls	r3, r3, #1
 800d6de:	b2db      	uxtb	r3, r3
 800d6e0:	f88d 3003 	strb.w	r3, [sp, #3]
 800d6e4:	e7e4      	b.n	800d6b0 <xPortStartScheduler+0x28>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d6e6:	f44f 7340 	mov.w	r3, #768	@ 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d6ea:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
	uxCriticalNesting = 0;
 800d6ee:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d6f0:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d6f2:	9b01      	ldr	r3, [sp, #4]
 800d6f4:	4a11      	ldr	r2, [pc, #68]	@ (800d73c <xPortStartScheduler+0xb4>)
 800d6f6:	b2db      	uxtb	r3, r3
 800d6f8:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d6fa:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800d6fe:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d702:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d706:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800d70a:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800d70e:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 800d712:	f7ff ffa7 	bl	800d664 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800d716:	4b0c      	ldr	r3, [pc, #48]	@ (800d748 <xPortStartScheduler+0xc0>)
 800d718:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800d71a:	f7ff fec7 	bl	800d4ac <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d71e:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 800d722:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800d726:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 800d72a:	f7ff feab 	bl	800d484 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800d72e:	f001 f983 	bl	800ea38 <vTaskSwitchContext>
}
 800d732:	4628      	mov	r0, r5
	prvTaskExitError();
 800d734:	f7ff fec4 	bl	800d4c0 <prvTaskExitError>
}
 800d738:	b003      	add	sp, #12
 800d73a:	bd30      	pop	{r4, r5, pc}
 800d73c:	e000e400 	.word	0xe000e400
 800d740:	200264dc 	.word	0x200264dc
 800d744:	200264d8 	.word	0x200264d8
 800d748:	2000006c 	.word	0x2000006c

0800d74c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d74c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d750:	2b0f      	cmp	r3, #15
 800d752:	d910      	bls.n	800d776 <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d754:	4a13      	ldr	r2, [pc, #76]	@ (800d7a4 <vPortValidateInterruptPriority+0x58>)
 800d756:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d758:	4a13      	ldr	r2, [pc, #76]	@ (800d7a8 <vPortValidateInterruptPriority+0x5c>)
 800d75a:	7812      	ldrb	r2, [r2, #0]
 800d75c:	429a      	cmp	r2, r3
 800d75e:	d90a      	bls.n	800d776 <vPortValidateInterruptPriority+0x2a>
 800d760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d764:	b672      	cpsid	i
 800d766:	f383 8811 	msr	BASEPRI, r3
 800d76a:	f3bf 8f6f 	isb	sy
 800d76e:	f3bf 8f4f 	dsb	sy
 800d772:	b662      	cpsie	i
 800d774:	e7fe      	b.n	800d774 <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d776:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d77a:	4a0c      	ldr	r2, [pc, #48]	@ (800d7ac <vPortValidateInterruptPriority+0x60>)
 800d77c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 800d780:	6812      	ldr	r2, [r2, #0]
 800d782:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d786:	4293      	cmp	r3, r2
 800d788:	d90a      	bls.n	800d7a0 <vPortValidateInterruptPriority+0x54>
 800d78a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d78e:	b672      	cpsid	i
 800d790:	f383 8811 	msr	BASEPRI, r3
 800d794:	f3bf 8f6f 	isb	sy
 800d798:	f3bf 8f4f 	dsb	sy
 800d79c:	b662      	cpsie	i
 800d79e:	e7fe      	b.n	800d79e <vPortValidateInterruptPriority+0x52>
	}
 800d7a0:	4770      	bx	lr
 800d7a2:	bf00      	nop
 800d7a4:	e000e3f0 	.word	0xe000e3f0
 800d7a8:	200264dc 	.word	0x200264dc
 800d7ac:	200264d8 	.word	0x200264d8

0800d7b0 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d7b0:	b510      	push	{r4, lr}
 800d7b2:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d7b4:	f7ff fece 	bl	800d554 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d7b8:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800d7ba:	f7ff feef 	bl	800d59c <vPortExitCritical>

	return xReturn;
}
 800d7be:	fab4 f084 	clz	r0, r4
 800d7c2:	0940      	lsrs	r0, r0, #5
 800d7c4:	bd10      	pop	{r4, pc}

0800d7c6 <prvCopyDataToQueue>:
{
 800d7c6:	b570      	push	{r4, r5, r6, lr}
 800d7c8:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d7ca:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
 800d7cc:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d7ce:	6b85      	ldr	r5, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d7d0:	b942      	cbnz	r2, 800d7e4 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d7d2:	6806      	ldr	r6, [r0, #0]
 800d7d4:	b99e      	cbnz	r6, 800d7fe <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d7d6:	6880      	ldr	r0, [r0, #8]
 800d7d8:	f001 fa9e 	bl	800ed18 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d7dc:	60a6      	str	r6, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d7de:	3501      	adds	r5, #1
 800d7e0:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 800d7e2:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800d7e4:	b96e      	cbnz	r6, 800d802 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d7e6:	6840      	ldr	r0, [r0, #4]
 800d7e8:	f018 fd33 	bl	8026252 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d7ec:	6863      	ldr	r3, [r4, #4]
 800d7ee:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800d7f0:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d7f2:	68a2      	ldr	r2, [r4, #8]
 800d7f4:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d7f6:	6063      	str	r3, [r4, #4]
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d7f8:	bf24      	itt	cs
 800d7fa:	6823      	ldrcs	r3, [r4, #0]
 800d7fc:	6063      	strcs	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 800d7fe:	2000      	movs	r0, #0
 800d800:	e7ed      	b.n	800d7de <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d802:	68c0      	ldr	r0, [r0, #12]
 800d804:	f018 fd25 	bl	8026252 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d808:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800d80a:	68e3      	ldr	r3, [r4, #12]
 800d80c:	4251      	negs	r1, r2
 800d80e:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d810:	6822      	ldr	r2, [r4, #0]
 800d812:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d814:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d816:	bf3e      	ittt	cc
 800d818:	68a3      	ldrcc	r3, [r4, #8]
 800d81a:	185b      	addcc	r3, r3, r1
 800d81c:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800d81e:	2e02      	cmp	r6, #2
 800d820:	d1ed      	bne.n	800d7fe <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d822:	b10d      	cbz	r5, 800d828 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 800d824:	3d01      	subs	r5, #1
 800d826:	e7ea      	b.n	800d7fe <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 800d828:	4628      	mov	r0, r5
 800d82a:	e7d8      	b.n	800d7de <prvCopyDataToQueue+0x18>

0800d82c <prvCopyDataFromQueue>:
{
 800d82c:	4603      	mov	r3, r0
 800d82e:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d830:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 800d832:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d834:	b162      	cbz	r2, 800d850 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d836:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d838:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d83a:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d83c:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d83e:	60dc      	str	r4, [r3, #12]
}
 800d840:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d844:	bf24      	itt	cs
 800d846:	6819      	ldrcs	r1, [r3, #0]
 800d848:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d84a:	68d9      	ldr	r1, [r3, #12]
 800d84c:	f018 bd01 	b.w	8026252 <memcpy>
}
 800d850:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d854:	4770      	bx	lr

0800d856 <prvUnlockQueue>:
{
 800d856:	b570      	push	{r4, r5, r6, lr}
 800d858:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800d85a:	f7ff fe7b 	bl	800d554 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800d85e:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d862:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800d866:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d868:	2d00      	cmp	r5, #0
 800d86a:	dc14      	bgt.n	800d896 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 800d86c:	23ff      	movs	r3, #255	@ 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d86e:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800d872:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 800d876:	f7ff fe91 	bl	800d59c <vPortExitCritical>
	taskENTER_CRITICAL();
 800d87a:	f7ff fe6b 	bl	800d554 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800d87e:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
 800d882:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d884:	2d00      	cmp	r5, #0
 800d886:	dc12      	bgt.n	800d8ae <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 800d888:	23ff      	movs	r3, #255	@ 0xff
 800d88a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 800d88e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800d892:	f7ff be83 	b.w	800d59c <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d896:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d0e7      	beq.n	800d86c <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d89c:	4630      	mov	r0, r6
 800d89e:	f001 f951 	bl	800eb44 <xTaskRemoveFromEventList>
 800d8a2:	b108      	cbz	r0, 800d8a8 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 800d8a4:	f001 f9de 	bl	800ec64 <vTaskMissedYield>
			--cTxLock;
 800d8a8:	3d01      	subs	r5, #1
 800d8aa:	b26d      	sxtb	r5, r5
 800d8ac:	e7dc      	b.n	800d868 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d8ae:	6923      	ldr	r3, [r4, #16]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d0e9      	beq.n	800d888 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d8b4:	4630      	mov	r0, r6
 800d8b6:	f001 f945 	bl	800eb44 <xTaskRemoveFromEventList>
 800d8ba:	b108      	cbz	r0, 800d8c0 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800d8bc:	f001 f9d2 	bl	800ec64 <vTaskMissedYield>
				--cRxLock;
 800d8c0:	3d01      	subs	r5, #1
 800d8c2:	b26d      	sxtb	r5, r5
 800d8c4:	e7de      	b.n	800d884 <prvUnlockQueue+0x2e>

0800d8c6 <xQueueGenericReset>:
{
 800d8c6:	b538      	push	{r3, r4, r5, lr}
 800d8c8:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800d8ca:	4604      	mov	r4, r0
 800d8cc:	b950      	cbnz	r0, 800d8e4 <xQueueGenericReset+0x1e>
 800d8ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8d2:	b672      	cpsid	i
 800d8d4:	f383 8811 	msr	BASEPRI, r3
 800d8d8:	f3bf 8f6f 	isb	sy
 800d8dc:	f3bf 8f4f 	dsb	sy
 800d8e0:	b662      	cpsie	i
 800d8e2:	e7fe      	b.n	800d8e2 <xQueueGenericReset+0x1c>
	taskENTER_CRITICAL();
 800d8e4:	f7ff fe36 	bl	800d554 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d8e8:	6822      	ldr	r2, [r4, #0]
 800d8ea:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d8ee:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d8f0:	434b      	muls	r3, r1
 800d8f2:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d8f4:	1a5b      	subs	r3, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d8f6:	60a0      	str	r0, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d8f8:	441a      	add	r2, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d8fa:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 800d8fc:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d8fe:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d900:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800d902:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d906:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 800d90a:	b9a5      	cbnz	r5, 800d936 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d90c:	6923      	ldr	r3, [r4, #16]
 800d90e:	b173      	cbz	r3, 800d92e <xQueueGenericReset+0x68>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d910:	f104 0010 	add.w	r0, r4, #16
 800d914:	f001 f916 	bl	800eb44 <xTaskRemoveFromEventList>
 800d918:	b148      	cbz	r0, 800d92e <xQueueGenericReset+0x68>
					queueYIELD_IF_USING_PREEMPTION();
 800d91a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d91e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d922:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d926:	f3bf 8f4f 	dsb	sy
 800d92a:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800d92e:	f7ff fe35 	bl	800d59c <vPortExitCritical>
}
 800d932:	2001      	movs	r0, #1
 800d934:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d936:	f104 0010 	add.w	r0, r4, #16
 800d93a:	f7ff fd63 	bl	800d404 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d93e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800d942:	f7ff fd5f 	bl	800d404 <vListInitialise>
 800d946:	e7f2      	b.n	800d92e <xQueueGenericReset+0x68>

0800d948 <xQueueGenericCreateStatic.part.0>:
	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
 800d948:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d94a:	460d      	mov	r5, r1
		configASSERT( pxStaticQueue != NULL );
 800d94c:	461c      	mov	r4, r3
 800d94e:	b953      	cbnz	r3, 800d966 <xQueueGenericCreateStatic.part.0+0x1e>
 800d950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d954:	b672      	cpsid	i
 800d956:	f383 8811 	msr	BASEPRI, r3
 800d95a:	f3bf 8f6f 	isb	sy
 800d95e:	f3bf 8f4f 	dsb	sy
 800d962:	b662      	cpsie	i
 800d964:	e7fe      	b.n	800d964 <xQueueGenericCreateStatic.part.0+0x1c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d966:	b15a      	cbz	r2, 800d980 <xQueueGenericCreateStatic.part.0+0x38>
 800d968:	b9b1      	cbnz	r1, 800d998 <xQueueGenericCreateStatic.part.0+0x50>
 800d96a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d96e:	b672      	cpsid	i
 800d970:	f383 8811 	msr	BASEPRI, r3
 800d974:	f3bf 8f6f 	isb	sy
 800d978:	f3bf 8f4f 	dsb	sy
 800d97c:	b662      	cpsie	i
 800d97e:	e7fe      	b.n	800d97e <xQueueGenericCreateStatic.part.0+0x36>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d980:	b151      	cbz	r1, 800d998 <xQueueGenericCreateStatic.part.0+0x50>
 800d982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d986:	b672      	cpsid	i
 800d988:	f383 8811 	msr	BASEPRI, r3
 800d98c:	f3bf 8f6f 	isb	sy
 800d990:	f3bf 8f4f 	dsb	sy
 800d994:	b662      	cpsie	i
 800d996:	e7fe      	b.n	800d996 <xQueueGenericCreateStatic.part.0+0x4e>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d998:	2350      	movs	r3, #80	@ 0x50
 800d99a:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d99c:	9b01      	ldr	r3, [sp, #4]
 800d99e:	2b50      	cmp	r3, #80	@ 0x50
 800d9a0:	d00a      	beq.n	800d9b8 <xQueueGenericCreateStatic.part.0+0x70>
 800d9a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9a6:	b672      	cpsid	i
 800d9a8:	f383 8811 	msr	BASEPRI, r3
 800d9ac:	f3bf 8f6f 	isb	sy
 800d9b0:	f3bf 8f4f 	dsb	sy
 800d9b4:	b662      	cpsie	i
 800d9b6:	e7fe      	b.n	800d9b6 <xQueueGenericCreateStatic.part.0+0x6e>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d9b8:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d9ba:	2d00      	cmp	r5, #0
 800d9bc:	bf08      	it	eq
 800d9be:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d9c0:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d9c2:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800d9c6:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800d9c8:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d9cc:	4620      	mov	r0, r4
 800d9ce:	f7ff ff7a 	bl	800d8c6 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800d9d2:	f89d 3018 	ldrb.w	r3, [sp, #24]
	}
 800d9d6:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800d9d8:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
	}
 800d9dc:	b003      	add	sp, #12
 800d9de:	bd30      	pop	{r4, r5, pc}

0800d9e0 <xQueueGenericCreateStatic>:
	{
 800d9e0:	b410      	push	{r4}
 800d9e2:	f89d 4004 	ldrb.w	r4, [sp, #4]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d9e6:	b950      	cbnz	r0, 800d9fe <xQueueGenericCreateStatic+0x1e>
 800d9e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9ec:	b672      	cpsid	i
 800d9ee:	f383 8811 	msr	BASEPRI, r3
 800d9f2:	f3bf 8f6f 	isb	sy
 800d9f6:	f3bf 8f4f 	dsb	sy
 800d9fa:	b662      	cpsie	i
 800d9fc:	e7fe      	b.n	800d9fc <xQueueGenericCreateStatic+0x1c>
 800d9fe:	9401      	str	r4, [sp, #4]
	}
 800da00:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da04:	f7ff bfa0 	b.w	800d948 <xQueueGenericCreateStatic.part.0>

0800da08 <xQueueGenericCreate>:
	{
 800da08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da0a:	460d      	mov	r5, r1
 800da0c:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800da0e:	4606      	mov	r6, r0
 800da10:	b950      	cbnz	r0, 800da28 <xQueueGenericCreate+0x20>
 800da12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da16:	b672      	cpsid	i
 800da18:	f383 8811 	msr	BASEPRI, r3
 800da1c:	f3bf 8f6f 	isb	sy
 800da20:	f3bf 8f4f 	dsb	sy
 800da24:	b662      	cpsie	i
 800da26:	e7fe      	b.n	800da26 <xQueueGenericCreate+0x1e>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da28:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800da2a:	3050      	adds	r0, #80	@ 0x50
 800da2c:	f7ff fc18 	bl	800d260 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800da30:	4604      	mov	r4, r0
 800da32:	b170      	cbz	r0, 800da52 <xQueueGenericCreate+0x4a>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800da34:	2300      	movs	r3, #0
 800da36:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800da3a:	b165      	cbz	r5, 800da56 <xQueueGenericCreate+0x4e>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800da3c:	f100 0350 	add.w	r3, r0, #80	@ 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800da40:	2101      	movs	r1, #1
 800da42:	4620      	mov	r0, r4
 800da44:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800da46:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800da4a:	f7ff ff3c 	bl	800d8c6 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800da4e:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
	}
 800da52:	4620      	mov	r0, r4
 800da54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800da56:	4603      	mov	r3, r0
 800da58:	e7f2      	b.n	800da40 <xQueueGenericCreate+0x38>

0800da5a <xQueueCreateCountingSemaphoreStatic>:
	{
 800da5a:	b513      	push	{r0, r1, r4, lr}
 800da5c:	4613      	mov	r3, r2
 800da5e:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800da60:	b950      	cbnz	r0, 800da78 <xQueueCreateCountingSemaphoreStatic+0x1e>
 800da62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da66:	b672      	cpsid	i
 800da68:	f383 8811 	msr	BASEPRI, r3
 800da6c:	f3bf 8f6f 	isb	sy
 800da70:	f3bf 8f4f 	dsb	sy
 800da74:	b662      	cpsie	i
 800da76:	e7fe      	b.n	800da76 <xQueueCreateCountingSemaphoreStatic+0x1c>
		configASSERT( uxInitialCount <= uxMaxCount );
 800da78:	4288      	cmp	r0, r1
 800da7a:	d20a      	bcs.n	800da92 <xQueueCreateCountingSemaphoreStatic+0x38>
 800da7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da80:	b672      	cpsid	i
 800da82:	f383 8811 	msr	BASEPRI, r3
 800da86:	f3bf 8f6f 	isb	sy
 800da8a:	f3bf 8f4f 	dsb	sy
 800da8e:	b662      	cpsie	i
 800da90:	e7fe      	b.n	800da90 <xQueueCreateCountingSemaphoreStatic+0x36>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800da92:	2202      	movs	r2, #2
 800da94:	9200      	str	r2, [sp, #0]
 800da96:	2200      	movs	r2, #0
 800da98:	4611      	mov	r1, r2
 800da9a:	f7ff ffa1 	bl	800d9e0 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800da9e:	b100      	cbz	r0, 800daa2 <xQueueCreateCountingSemaphoreStatic+0x48>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800daa0:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800daa2:	b002      	add	sp, #8
 800daa4:	bd10      	pop	{r4, pc}

0800daa6 <xQueueCreateCountingSemaphore>:
	{
 800daa6:	b510      	push	{r4, lr}
 800daa8:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800daaa:	b950      	cbnz	r0, 800dac2 <xQueueCreateCountingSemaphore+0x1c>
 800daac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dab0:	b672      	cpsid	i
 800dab2:	f383 8811 	msr	BASEPRI, r3
 800dab6:	f3bf 8f6f 	isb	sy
 800daba:	f3bf 8f4f 	dsb	sy
 800dabe:	b662      	cpsie	i
 800dac0:	e7fe      	b.n	800dac0 <xQueueCreateCountingSemaphore+0x1a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800dac2:	4288      	cmp	r0, r1
 800dac4:	d20a      	bcs.n	800dadc <xQueueCreateCountingSemaphore+0x36>
 800dac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800daca:	b672      	cpsid	i
 800dacc:	f383 8811 	msr	BASEPRI, r3
 800dad0:	f3bf 8f6f 	isb	sy
 800dad4:	f3bf 8f4f 	dsb	sy
 800dad8:	b662      	cpsie	i
 800dada:	e7fe      	b.n	800dada <xQueueCreateCountingSemaphore+0x34>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800dadc:	2202      	movs	r2, #2
 800dade:	2100      	movs	r1, #0
 800dae0:	f7ff ff92 	bl	800da08 <xQueueGenericCreate>
		if( xHandle != NULL )
 800dae4:	b100      	cbz	r0, 800dae8 <xQueueCreateCountingSemaphore+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800dae6:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800dae8:	bd10      	pop	{r4, pc}

0800daea <xQueueGenericSend>:
{
 800daea:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800daee:	460f      	mov	r7, r1
 800daf0:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 800daf2:	4604      	mov	r4, r0
{
 800daf4:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800daf6:	b950      	cbnz	r0, 800db0e <xQueueGenericSend+0x24>
 800daf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dafc:	b672      	cpsid	i
 800dafe:	f383 8811 	msr	BASEPRI, r3
 800db02:	f3bf 8f6f 	isb	sy
 800db06:	f3bf 8f4f 	dsb	sy
 800db0a:	b662      	cpsie	i
 800db0c:	e7fe      	b.n	800db0c <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800db0e:	b961      	cbnz	r1, 800db2a <xQueueGenericSend+0x40>
 800db10:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800db12:	b153      	cbz	r3, 800db2a <xQueueGenericSend+0x40>
 800db14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db18:	b672      	cpsid	i
 800db1a:	f383 8811 	msr	BASEPRI, r3
 800db1e:	f3bf 8f6f 	isb	sy
 800db22:	f3bf 8f4f 	dsb	sy
 800db26:	b662      	cpsie	i
 800db28:	e7fe      	b.n	800db28 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800db2a:	2e02      	cmp	r6, #2
 800db2c:	d10d      	bne.n	800db4a <xQueueGenericSend+0x60>
 800db2e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800db30:	2b01      	cmp	r3, #1
 800db32:	d00a      	beq.n	800db4a <xQueueGenericSend+0x60>
 800db34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db38:	b672      	cpsid	i
 800db3a:	f383 8811 	msr	BASEPRI, r3
 800db3e:	f3bf 8f6f 	isb	sy
 800db42:	f3bf 8f4f 	dsb	sy
 800db46:	b662      	cpsie	i
 800db48:	e7fe      	b.n	800db48 <xQueueGenericSend+0x5e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800db4a:	f001 f897 	bl	800ec7c <xTaskGetSchedulerState>
 800db4e:	4605      	mov	r5, r0
 800db50:	b330      	cbz	r0, 800dba0 <xQueueGenericSend+0xb6>
 800db52:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800db54:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 800db58:	f7ff fcfc 	bl	800d554 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800db5c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800db5e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800db60:	429a      	cmp	r2, r3
 800db62:	d301      	bcc.n	800db68 <xQueueGenericSend+0x7e>
 800db64:	2e02      	cmp	r6, #2
 800db66:	d129      	bne.n	800dbbc <xQueueGenericSend+0xd2>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800db68:	4632      	mov	r2, r6
 800db6a:	4639      	mov	r1, r7
 800db6c:	4620      	mov	r0, r4
 800db6e:	f7ff fe2a 	bl	800d7c6 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800db72:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800db74:	b11b      	cbz	r3, 800db7e <xQueueGenericSend+0x94>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800db76:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800db7a:	f000 ffe3 	bl	800eb44 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800db7e:	b148      	cbz	r0, 800db94 <xQueueGenericSend+0xaa>
						queueYIELD_IF_USING_PREEMPTION();
 800db80:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800db84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800db88:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800db8c:	f3bf 8f4f 	dsb	sy
 800db90:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800db94:	f7ff fd02 	bl	800d59c <vPortExitCritical>
				return pdPASS;
 800db98:	2001      	movs	r0, #1
}
 800db9a:	b004      	add	sp, #16
 800db9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dba0:	9b01      	ldr	r3, [sp, #4]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d0d6      	beq.n	800db54 <xQueueGenericSend+0x6a>
 800dba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbaa:	b672      	cpsid	i
 800dbac:	f383 8811 	msr	BASEPRI, r3
 800dbb0:	f3bf 8f6f 	isb	sy
 800dbb4:	f3bf 8f4f 	dsb	sy
 800dbb8:	b662      	cpsie	i
 800dbba:	e7fe      	b.n	800dbba <xQueueGenericSend+0xd0>
				if( xTicksToWait == ( TickType_t ) 0 )
 800dbbc:	9b01      	ldr	r3, [sp, #4]
 800dbbe:	b91b      	cbnz	r3, 800dbc8 <xQueueGenericSend+0xde>
					taskEXIT_CRITICAL();
 800dbc0:	f7ff fcec 	bl	800d59c <vPortExitCritical>
					return errQUEUE_FULL;
 800dbc4:	2000      	movs	r0, #0
 800dbc6:	e7e8      	b.n	800db9a <xQueueGenericSend+0xb0>
				else if( xEntryTimeSet == pdFALSE )
 800dbc8:	b915      	cbnz	r5, 800dbd0 <xQueueGenericSend+0xe6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dbca:	a802      	add	r0, sp, #8
 800dbcc:	f000 fffe 	bl	800ebcc <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800dbd0:	f7ff fce4 	bl	800d59c <vPortExitCritical>
		vTaskSuspendAll();
 800dbd4:	f000 fd7a 	bl	800e6cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dbd8:	f7ff fcbc 	bl	800d554 <vPortEnterCritical>
 800dbdc:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800dbe0:	2bff      	cmp	r3, #255	@ 0xff
 800dbe2:	d101      	bne.n	800dbe8 <xQueueGenericSend+0xfe>
 800dbe4:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 800dbe8:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800dbec:	2bff      	cmp	r3, #255	@ 0xff
 800dbee:	d101      	bne.n	800dbf4 <xQueueGenericSend+0x10a>
 800dbf0:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 800dbf4:	f7ff fcd2 	bl	800d59c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dbf8:	a901      	add	r1, sp, #4
 800dbfa:	a802      	add	r0, sp, #8
 800dbfc:	f000 fff2 	bl	800ebe4 <xTaskCheckForTimeOut>
 800dc00:	bb38      	cbnz	r0, 800dc52 <xQueueGenericSend+0x168>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dc02:	f7ff fca7 	bl	800d554 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dc06:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800dc08:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800dc0a:	429a      	cmp	r2, r3
 800dc0c:	d10e      	bne.n	800dc2c <xQueueGenericSend+0x142>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800dc0e:	f7ff fcc5 	bl	800d59c <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800dc12:	9901      	ldr	r1, [sp, #4]
 800dc14:	f104 0010 	add.w	r0, r4, #16
 800dc18:	f000 ff58 	bl	800eacc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dc1c:	4620      	mov	r0, r4
 800dc1e:	f7ff fe1a 	bl	800d856 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dc22:	f000 fdf9 	bl	800e818 <xTaskResumeAll>
 800dc26:	b148      	cbz	r0, 800dc3c <xQueueGenericSend+0x152>
 800dc28:	2501      	movs	r5, #1
 800dc2a:	e795      	b.n	800db58 <xQueueGenericSend+0x6e>
	taskEXIT_CRITICAL();
 800dc2c:	f7ff fcb6 	bl	800d59c <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800dc30:	4620      	mov	r0, r4
 800dc32:	f7ff fe10 	bl	800d856 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dc36:	f000 fdef 	bl	800e818 <xTaskResumeAll>
 800dc3a:	e7f5      	b.n	800dc28 <xQueueGenericSend+0x13e>
					portYIELD_WITHIN_API();
 800dc3c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800dc40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dc44:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800dc48:	f3bf 8f4f 	dsb	sy
 800dc4c:	f3bf 8f6f 	isb	sy
 800dc50:	e7ea      	b.n	800dc28 <xQueueGenericSend+0x13e>
			prvUnlockQueue( pxQueue );
 800dc52:	4620      	mov	r0, r4
 800dc54:	f7ff fdff 	bl	800d856 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dc58:	f000 fdde 	bl	800e818 <xTaskResumeAll>
			return errQUEUE_FULL;
 800dc5c:	e7b2      	b.n	800dbc4 <xQueueGenericSend+0xda>

0800dc5e <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800dc5e:	2200      	movs	r2, #0
	{
 800dc60:	460b      	mov	r3, r1
 800dc62:	b513      	push	{r0, r1, r4, lr}
 800dc64:	4611      	mov	r1, r2
 800dc66:	9000      	str	r0, [sp, #0]
 800dc68:	2001      	movs	r0, #1
 800dc6a:	f7ff fe6d 	bl	800d948 <xQueueGenericCreateStatic.part.0>
		if( pxNewQueue != NULL )
 800dc6e:	4604      	mov	r4, r0
 800dc70:	b138      	cbz	r0, 800dc82 <xQueueCreateMutexStatic+0x24>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800dc72:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800dc74:	461a      	mov	r2, r3
 800dc76:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800dc78:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800dc7a:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800dc7c:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800dc7e:	f7ff ff34 	bl	800daea <xQueueGenericSend>
	}
 800dc82:	4620      	mov	r0, r4
 800dc84:	b002      	add	sp, #8
 800dc86:	bd10      	pop	{r4, pc}

0800dc88 <xQueueGiveMutexRecursive>:
	{
 800dc88:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 800dc8a:	4604      	mov	r4, r0
 800dc8c:	b950      	cbnz	r0, 800dca4 <xQueueGiveMutexRecursive+0x1c>
 800dc8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc92:	b672      	cpsid	i
 800dc94:	f383 8811 	msr	BASEPRI, r3
 800dc98:	f3bf 8f6f 	isb	sy
 800dc9c:	f3bf 8f4f 	dsb	sy
 800dca0:	b662      	cpsie	i
 800dca2:	e7fe      	b.n	800dca2 <xQueueGiveMutexRecursive+0x1a>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800dca4:	6885      	ldr	r5, [r0, #8]
 800dca6:	f000 ffe3 	bl	800ec70 <xTaskGetCurrentTaskHandle>
 800dcaa:	4285      	cmp	r5, r0
 800dcac:	d10b      	bne.n	800dcc6 <xQueueGiveMutexRecursive+0x3e>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800dcae:	68e3      	ldr	r3, [r4, #12]
 800dcb0:	3b01      	subs	r3, #1
 800dcb2:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800dcb4:	b10b      	cbz	r3, 800dcba <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
 800dcb6:	2001      	movs	r0, #1
	}
 800dcb8:	bd38      	pop	{r3, r4, r5, pc}
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800dcba:	461a      	mov	r2, r3
 800dcbc:	4619      	mov	r1, r3
 800dcbe:	4620      	mov	r0, r4
 800dcc0:	f7ff ff13 	bl	800daea <xQueueGenericSend>
 800dcc4:	e7f7      	b.n	800dcb6 <xQueueGiveMutexRecursive+0x2e>
			xReturn = pdFAIL;
 800dcc6:	2000      	movs	r0, #0
		return xReturn;
 800dcc8:	e7f6      	b.n	800dcb8 <xQueueGiveMutexRecursive+0x30>

0800dcca <xQueueCreateMutex>:
	{
 800dcca:	b570      	push	{r4, r5, r6, lr}
 800dccc:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800dcce:	2050      	movs	r0, #80	@ 0x50
 800dcd0:	f7ff fac6 	bl	800d260 <pvPortMalloc>
 800dcd4:	4604      	mov	r4, r0
		if( pxNewQueue != NULL )
 800dcd6:	b198      	cbz	r0, 800dd00 <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800dcd8:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 800dcda:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800dcdc:	6000      	str	r0, [r0, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800dcde:	f880 5046 	strb.w	r5, [r0, #70]	@ 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800dce2:	e9c0 150f 	strd	r1, r5, [r0, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800dce6:	f7ff fdee 	bl	800d8c6 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800dcea:	462b      	mov	r3, r5
 800dcec:	462a      	mov	r2, r5
 800dcee:	4629      	mov	r1, r5
 800dcf0:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800dcf2:	f884 604c 	strb.w	r6, [r4, #76]	@ 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800dcf6:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800dcf8:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800dcfa:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800dcfc:	f7ff fef5 	bl	800daea <xQueueGenericSend>
	}
 800dd00:	4620      	mov	r0, r4
 800dd02:	bd70      	pop	{r4, r5, r6, pc}

0800dd04 <xQueueGenericSendFromISR>:
{
 800dd04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd08:	4689      	mov	r9, r1
 800dd0a:	4617      	mov	r7, r2
 800dd0c:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 800dd0e:	4604      	mov	r4, r0
 800dd10:	b950      	cbnz	r0, 800dd28 <xQueueGenericSendFromISR+0x24>
 800dd12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd16:	b672      	cpsid	i
 800dd18:	f383 8811 	msr	BASEPRI, r3
 800dd1c:	f3bf 8f6f 	isb	sy
 800dd20:	f3bf 8f4f 	dsb	sy
 800dd24:	b662      	cpsie	i
 800dd26:	e7fe      	b.n	800dd26 <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dd28:	b961      	cbnz	r1, 800dd44 <xQueueGenericSendFromISR+0x40>
 800dd2a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800dd2c:	b153      	cbz	r3, 800dd44 <xQueueGenericSendFromISR+0x40>
 800dd2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd32:	b672      	cpsid	i
 800dd34:	f383 8811 	msr	BASEPRI, r3
 800dd38:	f3bf 8f6f 	isb	sy
 800dd3c:	f3bf 8f4f 	dsb	sy
 800dd40:	b662      	cpsie	i
 800dd42:	e7fe      	b.n	800dd42 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dd44:	2e02      	cmp	r6, #2
 800dd46:	d10d      	bne.n	800dd64 <xQueueGenericSendFromISR+0x60>
 800dd48:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800dd4a:	2b01      	cmp	r3, #1
 800dd4c:	d00a      	beq.n	800dd64 <xQueueGenericSendFromISR+0x60>
 800dd4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd52:	b672      	cpsid	i
 800dd54:	f383 8811 	msr	BASEPRI, r3
 800dd58:	f3bf 8f6f 	isb	sy
 800dd5c:	f3bf 8f4f 	dsb	sy
 800dd60:	b662      	cpsie	i
 800dd62:	e7fe      	b.n	800dd62 <xQueueGenericSendFromISR+0x5e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dd64:	f7ff fcf2 	bl	800d74c <vPortValidateInterruptPriority>
	__asm volatile
 800dd68:	f3ef 8811 	mrs	r8, BASEPRI
 800dd6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd70:	b672      	cpsid	i
 800dd72:	f383 8811 	msr	BASEPRI, r3
 800dd76:	f3bf 8f6f 	isb	sy
 800dd7a:	f3bf 8f4f 	dsb	sy
 800dd7e:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dd80:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800dd82:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800dd84:	429a      	cmp	r2, r3
 800dd86:	d301      	bcc.n	800dd8c <xQueueGenericSendFromISR+0x88>
 800dd88:	2e02      	cmp	r6, #2
 800dd8a:	d11d      	bne.n	800ddc8 <xQueueGenericSendFromISR+0xc4>
			const int8_t cTxLock = pxQueue->cTxLock;
 800dd8c:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dd90:	4632      	mov	r2, r6
 800dd92:	4649      	mov	r1, r9
 800dd94:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800dd96:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dd98:	f7ff fd15 	bl	800d7c6 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800dd9c:	1c6b      	adds	r3, r5, #1
 800dd9e:	d10e      	bne.n	800ddbe <xQueueGenericSendFromISR+0xba>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dda0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800dda2:	b13b      	cbz	r3, 800ddb4 <xQueueGenericSendFromISR+0xb0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dda4:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800dda8:	f000 fecc 	bl	800eb44 <xTaskRemoveFromEventList>
 800ddac:	b110      	cbz	r0, 800ddb4 <xQueueGenericSendFromISR+0xb0>
							if( pxHigherPriorityTaskWoken != NULL )
 800ddae:	b10f      	cbz	r7, 800ddb4 <xQueueGenericSendFromISR+0xb0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ddb0:	2301      	movs	r3, #1
 800ddb2:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 800ddb4:	2001      	movs	r0, #1
	__asm volatile
 800ddb6:	f388 8811 	msr	BASEPRI, r8
}
 800ddba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ddbe:	3501      	adds	r5, #1
 800ddc0:	b26d      	sxtb	r5, r5
 800ddc2:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 800ddc6:	e7f5      	b.n	800ddb4 <xQueueGenericSendFromISR+0xb0>
			xReturn = errQUEUE_FULL;
 800ddc8:	2000      	movs	r0, #0
 800ddca:	e7f4      	b.n	800ddb6 <xQueueGenericSendFromISR+0xb2>

0800ddcc <xQueueGiveFromISR>:
{
 800ddcc:	b570      	push	{r4, r5, r6, lr}
 800ddce:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800ddd0:	4604      	mov	r4, r0
 800ddd2:	b950      	cbnz	r0, 800ddea <xQueueGiveFromISR+0x1e>
	__asm volatile
 800ddd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddd8:	b672      	cpsid	i
 800ddda:	f383 8811 	msr	BASEPRI, r3
 800ddde:	f3bf 8f6f 	isb	sy
 800dde2:	f3bf 8f4f 	dsb	sy
 800dde6:	b662      	cpsie	i
 800dde8:	e7fe      	b.n	800dde8 <xQueueGiveFromISR+0x1c>
	configASSERT( pxQueue->uxItemSize == 0 );
 800ddea:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800ddec:	b153      	cbz	r3, 800de04 <xQueueGiveFromISR+0x38>
 800ddee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddf2:	b672      	cpsid	i
 800ddf4:	f383 8811 	msr	BASEPRI, r3
 800ddf8:	f3bf 8f6f 	isb	sy
 800ddfc:	f3bf 8f4f 	dsb	sy
 800de00:	b662      	cpsie	i
 800de02:	e7fe      	b.n	800de02 <xQueueGiveFromISR+0x36>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800de04:	6803      	ldr	r3, [r0, #0]
 800de06:	b963      	cbnz	r3, 800de22 <xQueueGiveFromISR+0x56>
 800de08:	6883      	ldr	r3, [r0, #8]
 800de0a:	b153      	cbz	r3, 800de22 <xQueueGiveFromISR+0x56>
 800de0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de10:	b672      	cpsid	i
 800de12:	f383 8811 	msr	BASEPRI, r3
 800de16:	f3bf 8f6f 	isb	sy
 800de1a:	f3bf 8f4f 	dsb	sy
 800de1e:	b662      	cpsie	i
 800de20:	e7fe      	b.n	800de20 <xQueueGiveFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800de22:	f7ff fc93 	bl	800d74c <vPortValidateInterruptPriority>
	__asm volatile
 800de26:	f3ef 8611 	mrs	r6, BASEPRI
 800de2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de2e:	b672      	cpsid	i
 800de30:	f383 8811 	msr	BASEPRI, r3
 800de34:	f3bf 8f6f 	isb	sy
 800de38:	f3bf 8f4f 	dsb	sy
 800de3c:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800de3e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800de40:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800de42:	4293      	cmp	r3, r2
 800de44:	d919      	bls.n	800de7a <xQueueGiveFromISR+0xae>
			const int8_t cTxLock = pxQueue->cTxLock;
 800de46:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800de4a:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 800de4c:	29ff      	cmp	r1, #255	@ 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 800de4e:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800de50:	63a2      	str	r2, [r4, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 800de52:	d10d      	bne.n	800de70 <xQueueGiveFromISR+0xa4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800de54:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800de56:	b13b      	cbz	r3, 800de68 <xQueueGiveFromISR+0x9c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800de58:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800de5c:	f000 fe72 	bl	800eb44 <xTaskRemoveFromEventList>
 800de60:	b110      	cbz	r0, 800de68 <xQueueGiveFromISR+0x9c>
							if( pxHigherPriorityTaskWoken != NULL )
 800de62:	b10d      	cbz	r5, 800de68 <xQueueGiveFromISR+0x9c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800de64:	2301      	movs	r3, #1
 800de66:	602b      	str	r3, [r5, #0]
			xReturn = pdPASS;
 800de68:	2001      	movs	r0, #1
	__asm volatile
 800de6a:	f386 8811 	msr	BASEPRI, r6
}
 800de6e:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800de70:	3301      	adds	r3, #1
 800de72:	b25b      	sxtb	r3, r3
 800de74:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800de78:	e7f6      	b.n	800de68 <xQueueGiveFromISR+0x9c>
			xReturn = errQUEUE_FULL;
 800de7a:	2000      	movs	r0, #0
 800de7c:	e7f5      	b.n	800de6a <xQueueGiveFromISR+0x9e>

0800de7e <xQueueReceive>:
{
 800de7e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800de82:	460e      	mov	r6, r1
	configASSERT( ( pxQueue ) );
 800de84:	4604      	mov	r4, r0
{
 800de86:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800de88:	b950      	cbnz	r0, 800dea0 <xQueueReceive+0x22>
	__asm volatile
 800de8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de8e:	b672      	cpsid	i
 800de90:	f383 8811 	msr	BASEPRI, r3
 800de94:	f3bf 8f6f 	isb	sy
 800de98:	f3bf 8f4f 	dsb	sy
 800de9c:	b662      	cpsie	i
 800de9e:	e7fe      	b.n	800de9e <xQueueReceive+0x20>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dea0:	b961      	cbnz	r1, 800debc <xQueueReceive+0x3e>
 800dea2:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800dea4:	b153      	cbz	r3, 800debc <xQueueReceive+0x3e>
 800dea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800deaa:	b672      	cpsid	i
 800deac:	f383 8811 	msr	BASEPRI, r3
 800deb0:	f3bf 8f6f 	isb	sy
 800deb4:	f3bf 8f4f 	dsb	sy
 800deb8:	b662      	cpsie	i
 800deba:	e7fe      	b.n	800deba <xQueueReceive+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800debc:	f000 fede 	bl	800ec7c <xTaskGetSchedulerState>
 800dec0:	4605      	mov	r5, r0
 800dec2:	b318      	cbz	r0, 800df0c <xQueueReceive+0x8e>
 800dec4:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800dec6:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 800deca:	f7ff fb43 	bl	800d554 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dece:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ded0:	b357      	cbz	r7, 800df28 <xQueueReceive+0xaa>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ded2:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ded4:	4631      	mov	r1, r6
 800ded6:	4620      	mov	r0, r4
 800ded8:	f7ff fca8 	bl	800d82c <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dedc:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dede:	6923      	ldr	r3, [r4, #16]
 800dee0:	b173      	cbz	r3, 800df00 <xQueueReceive+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dee2:	f104 0010 	add.w	r0, r4, #16
 800dee6:	f000 fe2d 	bl	800eb44 <xTaskRemoveFromEventList>
 800deea:	b148      	cbz	r0, 800df00 <xQueueReceive+0x82>
						queueYIELD_IF_USING_PREEMPTION();
 800deec:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800def0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800def4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800def8:	f3bf 8f4f 	dsb	sy
 800defc:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800df00:	f7ff fb4c 	bl	800d59c <vPortExitCritical>
				return pdPASS;
 800df04:	2001      	movs	r0, #1
}
 800df06:	b004      	add	sp, #16
 800df08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800df0c:	9b01      	ldr	r3, [sp, #4]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d0d9      	beq.n	800dec6 <xQueueReceive+0x48>
 800df12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df16:	b672      	cpsid	i
 800df18:	f383 8811 	msr	BASEPRI, r3
 800df1c:	f3bf 8f6f 	isb	sy
 800df20:	f3bf 8f4f 	dsb	sy
 800df24:	b662      	cpsie	i
 800df26:	e7fe      	b.n	800df26 <xQueueReceive+0xa8>
				if( xTicksToWait == ( TickType_t ) 0 )
 800df28:	9b01      	ldr	r3, [sp, #4]
 800df2a:	b91b      	cbnz	r3, 800df34 <xQueueReceive+0xb6>
					taskEXIT_CRITICAL();
 800df2c:	f7ff fb36 	bl	800d59c <vPortExitCritical>
					return errQUEUE_EMPTY;
 800df30:	2000      	movs	r0, #0
 800df32:	e7e8      	b.n	800df06 <xQueueReceive+0x88>
				else if( xEntryTimeSet == pdFALSE )
 800df34:	b915      	cbnz	r5, 800df3c <xQueueReceive+0xbe>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800df36:	a802      	add	r0, sp, #8
 800df38:	f000 fe48 	bl	800ebcc <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800df3c:	f7ff fb2e 	bl	800d59c <vPortExitCritical>
		vTaskSuspendAll();
 800df40:	f000 fbc4 	bl	800e6cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800df44:	f7ff fb06 	bl	800d554 <vPortEnterCritical>
 800df48:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800df4c:	2bff      	cmp	r3, #255	@ 0xff
 800df4e:	d101      	bne.n	800df54 <xQueueReceive+0xd6>
 800df50:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 800df54:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800df58:	2bff      	cmp	r3, #255	@ 0xff
 800df5a:	d101      	bne.n	800df60 <xQueueReceive+0xe2>
 800df5c:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 800df60:	f7ff fb1c 	bl	800d59c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800df64:	a901      	add	r1, sp, #4
 800df66:	a802      	add	r0, sp, #8
 800df68:	f000 fe3c 	bl	800ebe4 <xTaskCheckForTimeOut>
 800df6c:	bb00      	cbnz	r0, 800dfb0 <xQueueReceive+0x132>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800df6e:	4620      	mov	r0, r4
 800df70:	f7ff fc1e 	bl	800d7b0 <prvIsQueueEmpty>
 800df74:	b1b0      	cbz	r0, 800dfa4 <xQueueReceive+0x126>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800df76:	9901      	ldr	r1, [sp, #4]
 800df78:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800df7c:	f000 fda6 	bl	800eacc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800df80:	4620      	mov	r0, r4
 800df82:	f7ff fc68 	bl	800d856 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800df86:	f000 fc47 	bl	800e818 <xTaskResumeAll>
 800df8a:	b948      	cbnz	r0, 800dfa0 <xQueueReceive+0x122>
					portYIELD_WITHIN_API();
 800df8c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800df90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800df94:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800df98:	f3bf 8f4f 	dsb	sy
 800df9c:	f3bf 8f6f 	isb	sy
 800dfa0:	2501      	movs	r5, #1
 800dfa2:	e792      	b.n	800deca <xQueueReceive+0x4c>
				prvUnlockQueue( pxQueue );
 800dfa4:	4620      	mov	r0, r4
 800dfa6:	f7ff fc56 	bl	800d856 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dfaa:	f000 fc35 	bl	800e818 <xTaskResumeAll>
 800dfae:	e7f7      	b.n	800dfa0 <xQueueReceive+0x122>
			prvUnlockQueue( pxQueue );
 800dfb0:	4620      	mov	r0, r4
 800dfb2:	f7ff fc50 	bl	800d856 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dfb6:	f000 fc2f 	bl	800e818 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dfba:	4620      	mov	r0, r4
 800dfbc:	f7ff fbf8 	bl	800d7b0 <prvIsQueueEmpty>
 800dfc0:	2800      	cmp	r0, #0
 800dfc2:	d0ed      	beq.n	800dfa0 <xQueueReceive+0x122>
 800dfc4:	e7b4      	b.n	800df30 <xQueueReceive+0xb2>

0800dfc6 <xQueueSemaphoreTake>:
{
 800dfc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dfc8:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 800dfca:	4604      	mov	r4, r0
{
 800dfcc:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800dfce:	b950      	cbnz	r0, 800dfe6 <xQueueSemaphoreTake+0x20>
 800dfd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfd4:	b672      	cpsid	i
 800dfd6:	f383 8811 	msr	BASEPRI, r3
 800dfda:	f3bf 8f6f 	isb	sy
 800dfde:	f3bf 8f4f 	dsb	sy
 800dfe2:	b662      	cpsie	i
 800dfe4:	e7fe      	b.n	800dfe4 <xQueueSemaphoreTake+0x1e>
	configASSERT( pxQueue->uxItemSize == 0 );
 800dfe6:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 800dfe8:	b155      	cbz	r5, 800e000 <xQueueSemaphoreTake+0x3a>
 800dfea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfee:	b672      	cpsid	i
 800dff0:	f383 8811 	msr	BASEPRI, r3
 800dff4:	f3bf 8f6f 	isb	sy
 800dff8:	f3bf 8f4f 	dsb	sy
 800dffc:	b662      	cpsie	i
 800dffe:	e7fe      	b.n	800dffe <xQueueSemaphoreTake+0x38>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e000:	f000 fe3c 	bl	800ec7c <xTaskGetSchedulerState>
 800e004:	4606      	mov	r6, r0
 800e006:	b320      	cbz	r0, 800e052 <xQueueSemaphoreTake+0x8c>
 800e008:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 800e00a:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 800e00c:	f7ff faa2 	bl	800d554 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800e010:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800e012:	b363      	cbz	r3, 800e06e <xQueueSemaphoreTake+0xa8>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800e014:	3b01      	subs	r3, #1
 800e016:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e018:	6823      	ldr	r3, [r4, #0]
 800e01a:	b913      	cbnz	r3, 800e022 <xQueueSemaphoreTake+0x5c>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800e01c:	f000 ff14 	bl	800ee48 <pvTaskIncrementMutexHeldCount>
 800e020:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e022:	6923      	ldr	r3, [r4, #16]
 800e024:	b173      	cbz	r3, 800e044 <xQueueSemaphoreTake+0x7e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e026:	f104 0010 	add.w	r0, r4, #16
 800e02a:	f000 fd8b 	bl	800eb44 <xTaskRemoveFromEventList>
 800e02e:	b148      	cbz	r0, 800e044 <xQueueSemaphoreTake+0x7e>
						queueYIELD_IF_USING_PREEMPTION();
 800e030:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e034:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e038:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800e03c:	f3bf 8f4f 	dsb	sy
 800e040:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800e044:	f7ff faaa 	bl	800d59c <vPortExitCritical>
				return pdPASS;
 800e048:	2001      	movs	r0, #1
}
 800e04a:	b005      	add	sp, #20
 800e04c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e04e:	4635      	mov	r5, r6
 800e050:	e7db      	b.n	800e00a <xQueueSemaphoreTake+0x44>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e052:	9b01      	ldr	r3, [sp, #4]
 800e054:	2b00      	cmp	r3, #0
 800e056:	d0fa      	beq.n	800e04e <xQueueSemaphoreTake+0x88>
 800e058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e05c:	b672      	cpsid	i
 800e05e:	f383 8811 	msr	BASEPRI, r3
 800e062:	f3bf 8f6f 	isb	sy
 800e066:	f3bf 8f4f 	dsb	sy
 800e06a:	b662      	cpsie	i
 800e06c:	e7fe      	b.n	800e06c <xQueueSemaphoreTake+0xa6>
				if( xTicksToWait == ( TickType_t ) 0 )
 800e06e:	9b01      	ldr	r3, [sp, #4]
 800e070:	b963      	cbnz	r3, 800e08c <xQueueSemaphoreTake+0xc6>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800e072:	2d00      	cmp	r5, #0
 800e074:	d068      	beq.n	800e148 <xQueueSemaphoreTake+0x182>
 800e076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e07a:	b672      	cpsid	i
 800e07c:	f383 8811 	msr	BASEPRI, r3
 800e080:	f3bf 8f6f 	isb	sy
 800e084:	f3bf 8f4f 	dsb	sy
 800e088:	b662      	cpsie	i
 800e08a:	e7fe      	b.n	800e08a <xQueueSemaphoreTake+0xc4>
				else if( xEntryTimeSet == pdFALSE )
 800e08c:	b916      	cbnz	r6, 800e094 <xQueueSemaphoreTake+0xce>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e08e:	a802      	add	r0, sp, #8
 800e090:	f000 fd9c 	bl	800ebcc <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800e094:	f7ff fa82 	bl	800d59c <vPortExitCritical>
		vTaskSuspendAll();
 800e098:	f000 fb18 	bl	800e6cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e09c:	f7ff fa5a 	bl	800d554 <vPortEnterCritical>
 800e0a0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800e0a4:	2bff      	cmp	r3, #255	@ 0xff
 800e0a6:	d101      	bne.n	800e0ac <xQueueSemaphoreTake+0xe6>
 800e0a8:	f884 7044 	strb.w	r7, [r4, #68]	@ 0x44
 800e0ac:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800e0b0:	2bff      	cmp	r3, #255	@ 0xff
 800e0b2:	d101      	bne.n	800e0b8 <xQueueSemaphoreTake+0xf2>
 800e0b4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e0b8:	f7ff fa70 	bl	800d59c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e0bc:	a901      	add	r1, sp, #4
 800e0be:	a802      	add	r0, sp, #8
 800e0c0:	f000 fd90 	bl	800ebe4 <xTaskCheckForTimeOut>
 800e0c4:	bb50      	cbnz	r0, 800e11c <xQueueSemaphoreTake+0x156>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e0c6:	4620      	mov	r0, r4
 800e0c8:	f7ff fb72 	bl	800d7b0 <prvIsQueueEmpty>
 800e0cc:	b300      	cbz	r0, 800e110 <xQueueSemaphoreTake+0x14a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e0ce:	6823      	ldr	r3, [r4, #0]
 800e0d0:	b93b      	cbnz	r3, 800e0e2 <xQueueSemaphoreTake+0x11c>
						taskENTER_CRITICAL();
 800e0d2:	f7ff fa3f 	bl	800d554 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e0d6:	68a0      	ldr	r0, [r4, #8]
 800e0d8:	f000 fde0 	bl	800ec9c <xTaskPriorityInherit>
 800e0dc:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800e0de:	f7ff fa5d 	bl	800d59c <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e0e2:	9901      	ldr	r1, [sp, #4]
 800e0e4:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800e0e8:	f000 fcf0 	bl	800eacc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e0ec:	4620      	mov	r0, r4
 800e0ee:	f7ff fbb2 	bl	800d856 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e0f2:	f000 fb91 	bl	800e818 <xTaskResumeAll>
 800e0f6:	b948      	cbnz	r0, 800e10c <xQueueSemaphoreTake+0x146>
					portYIELD_WITHIN_API();
 800e0f8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e0fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e100:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800e104:	f3bf 8f4f 	dsb	sy
 800e108:	f3bf 8f6f 	isb	sy
 800e10c:	2601      	movs	r6, #1
 800e10e:	e77d      	b.n	800e00c <xQueueSemaphoreTake+0x46>
				prvUnlockQueue( pxQueue );
 800e110:	4620      	mov	r0, r4
 800e112:	f7ff fba0 	bl	800d856 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e116:	f000 fb7f 	bl	800e818 <xTaskResumeAll>
 800e11a:	e7f7      	b.n	800e10c <xQueueSemaphoreTake+0x146>
			prvUnlockQueue( pxQueue );
 800e11c:	4620      	mov	r0, r4
 800e11e:	f7ff fb9a 	bl	800d856 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e122:	f000 fb79 	bl	800e818 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e126:	4620      	mov	r0, r4
 800e128:	f7ff fb42 	bl	800d7b0 <prvIsQueueEmpty>
 800e12c:	2800      	cmp	r0, #0
 800e12e:	d0ed      	beq.n	800e10c <xQueueSemaphoreTake+0x146>
					if( xInheritanceOccurred != pdFALSE )
 800e130:	b165      	cbz	r5, 800e14c <xQueueSemaphoreTake+0x186>
						taskENTER_CRITICAL();
 800e132:	f7ff fa0f 	bl	800d554 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800e136:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800e138:	b119      	cbz	r1, 800e142 <xQueueSemaphoreTake+0x17c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e13a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800e13c:	6819      	ldr	r1, [r3, #0]
 800e13e:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800e142:	68a0      	ldr	r0, [r4, #8]
 800e144:	f000 fe2e 	bl	800eda4 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800e148:	f7ff fa28 	bl	800d59c <vPortExitCritical>
					return errQUEUE_EMPTY;
 800e14c:	2000      	movs	r0, #0
 800e14e:	e77c      	b.n	800e04a <xQueueSemaphoreTake+0x84>

0800e150 <xQueueTakeMutexRecursive>:
	{
 800e150:	b570      	push	{r4, r5, r6, lr}
 800e152:	460d      	mov	r5, r1
		configASSERT( pxMutex );
 800e154:	4604      	mov	r4, r0
 800e156:	b950      	cbnz	r0, 800e16e <xQueueTakeMutexRecursive+0x1e>
 800e158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e15c:	b672      	cpsid	i
 800e15e:	f383 8811 	msr	BASEPRI, r3
 800e162:	f3bf 8f6f 	isb	sy
 800e166:	f3bf 8f4f 	dsb	sy
 800e16a:	b662      	cpsie	i
 800e16c:	e7fe      	b.n	800e16c <xQueueTakeMutexRecursive+0x1c>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800e16e:	6886      	ldr	r6, [r0, #8]
 800e170:	f000 fd7e 	bl	800ec70 <xTaskGetCurrentTaskHandle>
 800e174:	4286      	cmp	r6, r0
 800e176:	d104      	bne.n	800e182 <xQueueTakeMutexRecursive+0x32>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e178:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 800e17a:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e17c:	3301      	adds	r3, #1
 800e17e:	60e3      	str	r3, [r4, #12]
	}
 800e180:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800e182:	4629      	mov	r1, r5
 800e184:	4620      	mov	r0, r4
 800e186:	f7ff ff1e 	bl	800dfc6 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 800e18a:	2800      	cmp	r0, #0
 800e18c:	d0f8      	beq.n	800e180 <xQueueTakeMutexRecursive+0x30>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e18e:	68e3      	ldr	r3, [r4, #12]
 800e190:	3301      	adds	r3, #1
 800e192:	60e3      	str	r3, [r4, #12]
 800e194:	e7f4      	b.n	800e180 <xQueueTakeMutexRecursive+0x30>

0800e196 <xQueueReceiveFromISR>:
{
 800e196:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e19a:	4689      	mov	r9, r1
 800e19c:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800e19e:	4604      	mov	r4, r0
 800e1a0:	b950      	cbnz	r0, 800e1b8 <xQueueReceiveFromISR+0x22>
 800e1a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1a6:	b672      	cpsid	i
 800e1a8:	f383 8811 	msr	BASEPRI, r3
 800e1ac:	f3bf 8f6f 	isb	sy
 800e1b0:	f3bf 8f4f 	dsb	sy
 800e1b4:	b662      	cpsie	i
 800e1b6:	e7fe      	b.n	800e1b6 <xQueueReceiveFromISR+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e1b8:	b961      	cbnz	r1, 800e1d4 <xQueueReceiveFromISR+0x3e>
 800e1ba:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800e1bc:	b153      	cbz	r3, 800e1d4 <xQueueReceiveFromISR+0x3e>
 800e1be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1c2:	b672      	cpsid	i
 800e1c4:	f383 8811 	msr	BASEPRI, r3
 800e1c8:	f3bf 8f6f 	isb	sy
 800e1cc:	f3bf 8f4f 	dsb	sy
 800e1d0:	b662      	cpsie	i
 800e1d2:	e7fe      	b.n	800e1d2 <xQueueReceiveFromISR+0x3c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e1d4:	f7ff faba 	bl	800d74c <vPortValidateInterruptPriority>
	__asm volatile
 800e1d8:	f3ef 8711 	mrs	r7, BASEPRI
 800e1dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1e0:	b672      	cpsid	i
 800e1e2:	f383 8811 	msr	BASEPRI, r3
 800e1e6:	f3bf 8f6f 	isb	sy
 800e1ea:	f3bf 8f4f 	dsb	sy
 800e1ee:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e1f0:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e1f2:	b30d      	cbz	r5, 800e238 <xQueueReceiveFromISR+0xa2>
			const int8_t cRxLock = pxQueue->cRxLock;
 800e1f4:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e1f8:	4649      	mov	r1, r9
 800e1fa:	4620      	mov	r0, r4
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e1fc:	3d01      	subs	r5, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 800e1fe:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e200:	f7ff fb14 	bl	800d82c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e204:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 800e206:	1c73      	adds	r3, r6, #1
 800e208:	d111      	bne.n	800e22e <xQueueReceiveFromISR+0x98>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e20a:	6923      	ldr	r3, [r4, #16]
 800e20c:	b153      	cbz	r3, 800e224 <xQueueReceiveFromISR+0x8e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e20e:	f104 0010 	add.w	r0, r4, #16
 800e212:	f000 fc97 	bl	800eb44 <xTaskRemoveFromEventList>
 800e216:	b128      	cbz	r0, 800e224 <xQueueReceiveFromISR+0x8e>
						if( pxHigherPriorityTaskWoken != NULL )
 800e218:	f1b8 0f00 	cmp.w	r8, #0
 800e21c:	d002      	beq.n	800e224 <xQueueReceiveFromISR+0x8e>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e21e:	2301      	movs	r3, #1
 800e220:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 800e224:	2001      	movs	r0, #1
	__asm volatile
 800e226:	f387 8811 	msr	BASEPRI, r7
}
 800e22a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e22e:	3601      	adds	r6, #1
 800e230:	b276      	sxtb	r6, r6
 800e232:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 800e236:	e7f5      	b.n	800e224 <xQueueReceiveFromISR+0x8e>
			xReturn = pdFAIL;
 800e238:	4628      	mov	r0, r5
 800e23a:	e7f4      	b.n	800e226 <xQueueReceiveFromISR+0x90>

0800e23c <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e23c:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e23e:	4a07      	ldr	r2, [pc, #28]	@ (800e25c <vQueueAddToRegistry+0x20>)
	{
 800e240:	b530      	push	{r4, r5, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e242:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 800e246:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 800e24a:	b91d      	cbnz	r5, 800e254 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e24c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e250:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e252:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e254:	3301      	adds	r3, #1
 800e256:	2b08      	cmp	r3, #8
 800e258:	d1f3      	bne.n	800e242 <vQueueAddToRegistry+0x6>
 800e25a:	e7fa      	b.n	800e252 <vQueueAddToRegistry+0x16>
 800e25c:	200264e0 	.word	0x200264e0

0800e260 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e260:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800e262:	4a09      	ldr	r2, [pc, #36]	@ (800e288 <vQueueUnregisterQueue+0x28>)
	{
 800e264:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800e266:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800e26a:	00dc      	lsls	r4, r3, #3
 800e26c:	4281      	cmp	r1, r0
 800e26e:	d106      	bne.n	800e27e <vQueueUnregisterQueue+0x1e>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800e270:	4a06      	ldr	r2, [pc, #24]	@ (800e28c <vQueueUnregisterQueue+0x2c>)
 800e272:	2100      	movs	r1, #0
 800e274:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800e278:	4422      	add	r2, r4
 800e27a:	6051      	str	r1, [r2, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800e27c:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e27e:	3301      	adds	r3, #1
 800e280:	2b08      	cmp	r3, #8
 800e282:	d1f0      	bne.n	800e266 <vQueueUnregisterQueue+0x6>
 800e284:	e7fa      	b.n	800e27c <vQueueUnregisterQueue+0x1c>
 800e286:	bf00      	nop
 800e288:	200264e4 	.word	0x200264e4
 800e28c:	200264e0 	.word	0x200264e0

0800e290 <vQueueDelete>:
{
 800e290:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 800e292:	b950      	cbnz	r0, 800e2aa <vQueueDelete+0x1a>
	__asm volatile
 800e294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e298:	b672      	cpsid	i
 800e29a:	f383 8811 	msr	BASEPRI, r3
 800e29e:	f3bf 8f6f 	isb	sy
 800e2a2:	f3bf 8f4f 	dsb	sy
 800e2a6:	b662      	cpsie	i
 800e2a8:	e7fe      	b.n	800e2a8 <vQueueDelete+0x18>
		vQueueUnregisterQueue( pxQueue );
 800e2aa:	f7ff ffd9 	bl	800e260 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800e2ae:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 800e2b2:	b91b      	cbnz	r3, 800e2bc <vQueueDelete+0x2c>
}
 800e2b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 800e2b8:	f7ff b868 	b.w	800d38c <vPortFree>
}
 800e2bc:	bd10      	pop	{r4, pc}

0800e2be <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e2be:	b570      	push	{r4, r5, r6, lr}
 800e2c0:	4604      	mov	r4, r0
 800e2c2:	460d      	mov	r5, r1
 800e2c4:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e2c6:	f7ff f945 	bl	800d554 <vPortEnterCritical>
 800e2ca:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800e2ce:	2bff      	cmp	r3, #255	@ 0xff
 800e2d0:	d102      	bne.n	800e2d8 <vQueueWaitForMessageRestricted+0x1a>
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800e2d8:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800e2dc:	2bff      	cmp	r3, #255	@ 0xff
 800e2de:	d102      	bne.n	800e2e6 <vQueueWaitForMessageRestricted+0x28>
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800e2e6:	f7ff f959 	bl	800d59c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e2ea:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800e2ec:	b92b      	cbnz	r3, 800e2fa <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e2ee:	4632      	mov	r2, r6
 800e2f0:	4629      	mov	r1, r5
 800e2f2:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800e2f6:	f000 fc05 	bl	800eb04 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e2fa:	4620      	mov	r0, r4
	}
 800e2fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 800e300:	f7ff baa9 	b.w	800d856 <prvUnlockQueue>

0800e304 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e308:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e30a:	f7ff f923 	bl	800d554 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e30e:	4b2f      	ldr	r3, [pc, #188]	@ (800e3cc <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 800e310:	4e2f      	ldr	r6, [pc, #188]	@ (800e3d0 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 800e312:	681a      	ldr	r2, [r3, #0]
 800e314:	4f2f      	ldr	r7, [pc, #188]	@ (800e3d4 <prvAddNewTaskToReadyList+0xd0>)
 800e316:	3201      	adds	r2, #1
 800e318:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800e31a:	6835      	ldr	r5, [r6, #0]
 800e31c:	2d00      	cmp	r5, #0
 800e31e:	d14a      	bne.n	800e3b6 <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e320:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	2b01      	cmp	r3, #1
 800e326:	d11f      	bne.n	800e368 <prvAddNewTaskToReadyList+0x64>
 800e328:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e32a:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e32c:	4640      	mov	r0, r8
 800e32e:	f7ff f869 	bl	800d404 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e332:	f108 0814 	add.w	r8, r8, #20
 800e336:	2d38      	cmp	r5, #56	@ 0x38
 800e338:	d1f7      	bne.n	800e32a <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e33a:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 800e3fc <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 800e33e:	4d26      	ldr	r5, [pc, #152]	@ (800e3d8 <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 800e340:	4640      	mov	r0, r8
 800e342:	f7ff f85f 	bl	800d404 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e346:	4628      	mov	r0, r5
 800e348:	f7ff f85c 	bl	800d404 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e34c:	4823      	ldr	r0, [pc, #140]	@ (800e3dc <prvAddNewTaskToReadyList+0xd8>)
 800e34e:	f7ff f859 	bl	800d404 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e352:	4823      	ldr	r0, [pc, #140]	@ (800e3e0 <prvAddNewTaskToReadyList+0xdc>)
 800e354:	f7ff f856 	bl	800d404 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e358:	4822      	ldr	r0, [pc, #136]	@ (800e3e4 <prvAddNewTaskToReadyList+0xe0>)
 800e35a:	f7ff f853 	bl	800d404 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e35e:	4b22      	ldr	r3, [pc, #136]	@ (800e3e8 <prvAddNewTaskToReadyList+0xe4>)
 800e360:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e364:	4b21      	ldr	r3, [pc, #132]	@ (800e3ec <prvAddNewTaskToReadyList+0xe8>)
 800e366:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800e368:	4a21      	ldr	r2, [pc, #132]	@ (800e3f0 <prvAddNewTaskToReadyList+0xec>)
 800e36a:	6813      	ldr	r3, [r2, #0]
 800e36c:	3301      	adds	r3, #1
 800e36e:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800e370:	4a20      	ldr	r2, [pc, #128]	@ (800e3f4 <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e372:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800e374:	6811      	ldr	r1, [r2, #0]
 800e376:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800e378:	428b      	cmp	r3, r1
 800e37a:	d900      	bls.n	800e37e <prvAddNewTaskToReadyList+0x7a>
 800e37c:	6013      	str	r3, [r2, #0]
 800e37e:	2014      	movs	r0, #20
 800e380:	1d21      	adds	r1, r4, #4
 800e382:	fb00 7003 	mla	r0, r0, r3, r7
 800e386:	f7ff f84b 	bl	800d420 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800e38a:	f7ff f907 	bl	800d59c <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800e38e:	4b1a      	ldr	r3, [pc, #104]	@ (800e3f8 <prvAddNewTaskToReadyList+0xf4>)
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	b173      	cbz	r3, 800e3b2 <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e394:	6833      	ldr	r3, [r6, #0]
 800e396:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e398:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800e39a:	429a      	cmp	r2, r3
 800e39c:	d209      	bcs.n	800e3b2 <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 800e39e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e3a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e3a6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800e3aa:	f3bf 8f4f 	dsb	sy
 800e3ae:	f3bf 8f6f 	isb	sy
}
 800e3b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 800e3b6:	4b10      	ldr	r3, [pc, #64]	@ (800e3f8 <prvAddNewTaskToReadyList+0xf4>)
 800e3b8:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e3ba:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 800e3bc:	2a00      	cmp	r2, #0
 800e3be:	d1d3      	bne.n	800e368 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e3c0:	6832      	ldr	r2, [r6, #0]
 800e3c2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800e3c4:	429a      	cmp	r2, r3
 800e3c6:	d8cf      	bhi.n	800e368 <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 800e3c8:	6034      	str	r4, [r6, #0]
 800e3ca:	e7cd      	b.n	800e368 <prvAddNewTaskToReadyList+0x64>
 800e3cc:	20026544 	.word	0x20026544
 800e3d0:	20026a18 	.word	0x20026a18
 800e3d4:	200265b8 	.word	0x200265b8
 800e3d8:	20026590 	.word	0x20026590
 800e3dc:	20026574 	.word	0x20026574
 800e3e0:	20026560 	.word	0x20026560
 800e3e4:	20026548 	.word	0x20026548
 800e3e8:	2002658c 	.word	0x2002658c
 800e3ec:	20026588 	.word	0x20026588
 800e3f0:	20026528 	.word	0x20026528
 800e3f4:	2002653c 	.word	0x2002653c
 800e3f8:	20026538 	.word	0x20026538
 800e3fc:	200265a4 	.word	0x200265a4

0800e400 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e402:	4b15      	ldr	r3, [pc, #84]	@ (800e458 <prvAddCurrentTaskToDelayedList+0x58>)
{
 800e404:	4606      	mov	r6, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e406:	4d15      	ldr	r5, [pc, #84]	@ (800e45c <prvAddCurrentTaskToDelayedList+0x5c>)
{
 800e408:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 800e40a:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e40c:	6828      	ldr	r0, [r5, #0]
 800e40e:	3004      	adds	r0, #4
 800e410:	f7ff f828 	bl	800d464 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e414:	1c73      	adds	r3, r6, #1
 800e416:	d107      	bne.n	800e428 <prvAddCurrentTaskToDelayedList+0x28>
 800e418:	b137      	cbz	r7, 800e428 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e41a:	6829      	ldr	r1, [r5, #0]
 800e41c:	4810      	ldr	r0, [pc, #64]	@ (800e460 <prvAddCurrentTaskToDelayedList+0x60>)
 800e41e:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e420:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e424:	f7fe bffc 	b.w	800d420 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e428:	19a4      	adds	r4, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e42a:	682b      	ldr	r3, [r5, #0]
 800e42c:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e42e:	d307      	bcc.n	800e440 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e430:	4b0c      	ldr	r3, [pc, #48]	@ (800e464 <prvAddCurrentTaskToDelayedList+0x64>)
 800e432:	6818      	ldr	r0, [r3, #0]
 800e434:	6829      	ldr	r1, [r5, #0]
}
 800e436:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e43a:	3104      	adds	r1, #4
 800e43c:	f7fe bffb 	b.w	800d436 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e440:	4b09      	ldr	r3, [pc, #36]	@ (800e468 <prvAddCurrentTaskToDelayedList+0x68>)
 800e442:	6818      	ldr	r0, [r3, #0]
 800e444:	6829      	ldr	r1, [r5, #0]
 800e446:	3104      	adds	r1, #4
 800e448:	f7fe fff5 	bl	800d436 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e44c:	4b07      	ldr	r3, [pc, #28]	@ (800e46c <prvAddCurrentTaskToDelayedList+0x6c>)
 800e44e:	681a      	ldr	r2, [r3, #0]
 800e450:	42a2      	cmp	r2, r4
 800e452:	d900      	bls.n	800e456 <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 800e454:	601c      	str	r4, [r3, #0]
}
 800e456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e458:	20026540 	.word	0x20026540
 800e45c:	20026a18 	.word	0x20026a18
 800e460:	20026548 	.word	0x20026548
 800e464:	20026588 	.word	0x20026588
 800e468:	2002658c 	.word	0x2002658c
 800e46c:	20026524 	.word	0x20026524

0800e470 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e470:	4a06      	ldr	r2, [pc, #24]	@ (800e48c <prvResetNextTaskUnblockTime+0x1c>)
 800e472:	6813      	ldr	r3, [r2, #0]
 800e474:	6819      	ldr	r1, [r3, #0]
 800e476:	4b06      	ldr	r3, [pc, #24]	@ (800e490 <prvResetNextTaskUnblockTime+0x20>)
 800e478:	b919      	cbnz	r1, 800e482 <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 800e47a:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e47e:	601a      	str	r2, [r3, #0]
}
 800e480:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e482:	6812      	ldr	r2, [r2, #0]
 800e484:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e486:	68d2      	ldr	r2, [r2, #12]
 800e488:	6852      	ldr	r2, [r2, #4]
 800e48a:	e7f8      	b.n	800e47e <prvResetNextTaskUnblockTime+0xe>
 800e48c:	2002658c 	.word	0x2002658c
 800e490:	20026524 	.word	0x20026524

0800e494 <prvDeleteTCB>:
	{
 800e494:	b510      	push	{r4, lr}
 800e496:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e498:	3058      	adds	r0, #88	@ 0x58
 800e49a:	f017 fdfd 	bl	8026098 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e49e:	f894 30a9 	ldrb.w	r3, [r4, #169]	@ 0xa9
 800e4a2:	b93b      	cbnz	r3, 800e4b4 <prvDeleteTCB+0x20>
				vPortFree( pxTCB->pxStack );
 800e4a4:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800e4a6:	f7fe ff71 	bl	800d38c <vPortFree>
				vPortFree( pxTCB );
 800e4aa:	4620      	mov	r0, r4
	}
 800e4ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800e4b0:	f7fe bf6c 	b.w	800d38c <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e4b4:	2b01      	cmp	r3, #1
 800e4b6:	d0f8      	beq.n	800e4aa <prvDeleteTCB+0x16>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e4b8:	2b02      	cmp	r3, #2
 800e4ba:	d00a      	beq.n	800e4d2 <prvDeleteTCB+0x3e>
 800e4bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4c0:	b672      	cpsid	i
 800e4c2:	f383 8811 	msr	BASEPRI, r3
 800e4c6:	f3bf 8f6f 	isb	sy
 800e4ca:	f3bf 8f4f 	dsb	sy
 800e4ce:	b662      	cpsie	i
 800e4d0:	e7fe      	b.n	800e4d0 <prvDeleteTCB+0x3c>
	}
 800e4d2:	bd10      	pop	{r4, pc}

0800e4d4 <prvIdleTask>:
{
 800e4d4:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e4d6:	4c14      	ldr	r4, [pc, #80]	@ (800e528 <prvIdleTask+0x54>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e4d8:	4f14      	ldr	r7, [pc, #80]	@ (800e52c <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 800e4da:	4d15      	ldr	r5, [pc, #84]	@ (800e530 <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e4dc:	6823      	ldr	r3, [r4, #0]
 800e4de:	b983      	cbnz	r3, 800e502 <prvIdleTask+0x2e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e4e0:	4b14      	ldr	r3, [pc, #80]	@ (800e534 <prvIdleTask+0x60>)
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	2b01      	cmp	r3, #1
 800e4e6:	d909      	bls.n	800e4fc <prvIdleTask+0x28>
				taskYIELD();
 800e4e8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e4ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e4f0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800e4f4:	f3bf 8f4f 	dsb	sy
 800e4f8:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 800e4fc:	f7f5 fb22 	bl	8003b44 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800e500:	e7eb      	b.n	800e4da <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 800e502:	f7ff f827 	bl	800d554 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e50a:	1d30      	adds	r0, r6, #4
 800e50c:	f7fe ffaa 	bl	800d464 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e510:	682b      	ldr	r3, [r5, #0]
 800e512:	3b01      	subs	r3, #1
 800e514:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e516:	6823      	ldr	r3, [r4, #0]
 800e518:	3b01      	subs	r3, #1
 800e51a:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800e51c:	f7ff f83e 	bl	800d59c <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800e520:	4630      	mov	r0, r6
 800e522:	f7ff ffb7 	bl	800e494 <prvDeleteTCB>
 800e526:	e7d9      	b.n	800e4dc <prvIdleTask+0x8>
 800e528:	2002655c 	.word	0x2002655c
 800e52c:	20026560 	.word	0x20026560
 800e530:	20026544 	.word	0x20026544
 800e534:	200265b8 	.word	0x200265b8

0800e538 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800e538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e53c:	0096      	lsls	r6, r2, #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800e53e:	4607      	mov	r7, r0
 800e540:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e542:	21a5      	movs	r1, #165	@ 0xa5
 800e544:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800e546:	4698      	mov	r8, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e548:	3e04      	subs	r6, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800e54a:	e9dd 9409 	ldrd	r9, r4, [sp, #36]	@ 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e54e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800e550:	f017 fd48 	bl	8025fe4 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e554:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800e556:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e558:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 800e55c:	2d00      	cmp	r5, #0
 800e55e:	d043      	beq.n	800e5e8 <prvInitialiseNewTask.constprop.0+0xb0>
 800e560:	1e6b      	subs	r3, r5, #1
 800e562:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 800e566:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e568:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800e56c:	f802 1f01 	strb.w	r1, [r2, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 800e570:	b109      	cbz	r1, 800e576 <prvInitialiseNewTask.constprop.0+0x3e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e572:	42ab      	cmp	r3, r5
 800e574:	d1f8      	bne.n	800e568 <prvInitialiseNewTask.constprop.0+0x30>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e576:	2300      	movs	r3, #0
 800e578:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e57c:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 800e57e:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e582:	1d20      	adds	r0, r4, #4
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e584:	2d37      	cmp	r5, #55	@ 0x37
		pxNewTCB->uxMutexesHeld = 0;
 800e586:	f8c4 a050 	str.w	sl, [r4, #80]	@ 0x50
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e58a:	bf28      	it	cs
 800e58c:	2537      	movcs	r5, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 800e58e:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800e590:	64e5      	str	r5, [r4, #76]	@ 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e592:	f1c5 0538 	rsb	r5, r5, #56	@ 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e596:	f7fe ff40 	bl	800d41a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e59a:	f104 0018 	add.w	r0, r4, #24
 800e59e:	f7fe ff3c 	bl	800d41a <vListInitialiseItem>
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e5a2:	224c      	movs	r2, #76	@ 0x4c
 800e5a4:	4651      	mov	r1, sl
		pxNewTCB->ulNotifiedValue = 0;
 800e5a6:	f8c4 a0a4 	str.w	sl, [r4, #164]	@ 0xa4
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e5aa:	f104 0058 	add.w	r0, r4, #88	@ 0x58
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e5ae:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e5b0:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e5b2:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->pxTaskTag = NULL;
 800e5b4:	f8c4 a054 	str.w	sl, [r4, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e5b8:	f884 a0a8 	strb.w	sl, [r4, #168]	@ 0xa8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e5bc:	f017 fd12 	bl	8025fe4 <memset>
 800e5c0:	4b0b      	ldr	r3, [pc, #44]	@ (800e5f0 <prvInitialiseNewTask.constprop.0+0xb8>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e5c2:	4639      	mov	r1, r7
 800e5c4:	4630      	mov	r0, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e5c6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e5ca:	65e3      	str	r3, [r4, #92]	@ 0x5c
 800e5cc:	33d0      	adds	r3, #208	@ 0xd0
 800e5ce:	6622      	str	r2, [r4, #96]	@ 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e5d0:	4642      	mov	r2, r8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e5d2:	6663      	str	r3, [r4, #100]	@ 0x64
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e5d4:	f7fe ff98 	bl	800d508 <pxPortInitialiseStack>
 800e5d8:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800e5da:	f1b9 0f00 	cmp.w	r9, #0
 800e5de:	d001      	beq.n	800e5e4 <prvInitialiseNewTask.constprop.0+0xac>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e5e0:	f8c9 4000 	str.w	r4, [r9]
}
 800e5e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e5e8:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
 800e5ec:	e7c6      	b.n	800e57c <prvInitialiseNewTask.constprop.0+0x44>
 800e5ee:	bf00      	nop
 800e5f0:	20027ca0 	.word	0x20027ca0

0800e5f4 <xTaskCreateStatic>:
	{
 800e5f4:	b570      	push	{r4, r5, r6, lr}
 800e5f6:	b086      	sub	sp, #24
 800e5f8:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 800e5fc:	b955      	cbnz	r5, 800e614 <xTaskCreateStatic+0x20>
 800e5fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e602:	b672      	cpsid	i
 800e604:	f383 8811 	msr	BASEPRI, r3
 800e608:	f3bf 8f6f 	isb	sy
 800e60c:	f3bf 8f4f 	dsb	sy
 800e610:	b662      	cpsie	i
 800e612:	e7fe      	b.n	800e612 <xTaskCreateStatic+0x1e>
		configASSERT( pxTaskBuffer != NULL );
 800e614:	b954      	cbnz	r4, 800e62c <xTaskCreateStatic+0x38>
 800e616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e61a:	b672      	cpsid	i
 800e61c:	f383 8811 	msr	BASEPRI, r3
 800e620:	f3bf 8f6f 	isb	sy
 800e624:	f3bf 8f4f 	dsb	sy
 800e628:	b662      	cpsie	i
 800e62a:	e7fe      	b.n	800e62a <xTaskCreateStatic+0x36>
			volatile size_t xSize = sizeof( StaticTask_t );
 800e62c:	26ac      	movs	r6, #172	@ 0xac
 800e62e:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e630:	9e05      	ldr	r6, [sp, #20]
 800e632:	2eac      	cmp	r6, #172	@ 0xac
 800e634:	d00a      	beq.n	800e64c <xTaskCreateStatic+0x58>
 800e636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e63a:	b672      	cpsid	i
 800e63c:	f383 8811 	msr	BASEPRI, r3
 800e640:	f3bf 8f6f 	isb	sy
 800e644:	f3bf 8f4f 	dsb	sy
 800e648:	b662      	cpsie	i
 800e64a:	e7fe      	b.n	800e64a <xTaskCreateStatic+0x56>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e64c:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e64e:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e650:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e652:	f884 50a9 	strb.w	r5, [r4, #169]	@ 0xa9
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e656:	ad04      	add	r5, sp, #16
 800e658:	9402      	str	r4, [sp, #8]
 800e65a:	9501      	str	r5, [sp, #4]
 800e65c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800e65e:	9500      	str	r5, [sp, #0]
 800e660:	f7ff ff6a 	bl	800e538 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e664:	4620      	mov	r0, r4
 800e666:	f7ff fe4d 	bl	800e304 <prvAddNewTaskToReadyList>
	}
 800e66a:	9804      	ldr	r0, [sp, #16]
 800e66c:	b006      	add	sp, #24
 800e66e:	bd70      	pop	{r4, r5, r6, pc}

0800e670 <xTaskCreate>:
	{
 800e670:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e674:	4607      	mov	r7, r0
 800e676:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e678:	0090      	lsls	r0, r2, #2
	{
 800e67a:	4688      	mov	r8, r1
 800e67c:	4616      	mov	r6, r2
 800e67e:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e680:	f7fe fdee 	bl	800d260 <pvPortMalloc>
			if( pxStack != NULL )
 800e684:	4605      	mov	r5, r0
 800e686:	b920      	cbnz	r0, 800e692 <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e688:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800e68c:	b005      	add	sp, #20
 800e68e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e692:	20ac      	movs	r0, #172	@ 0xac
 800e694:	f7fe fde4 	bl	800d260 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800e698:	4604      	mov	r4, r0
 800e69a:	b198      	cbz	r0, 800e6c4 <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e69c:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 800e69e:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e6a0:	4632      	mov	r2, r6
 800e6a2:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e6a4:	f880 30a9 	strb.w	r3, [r0, #169]	@ 0xa9
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e6a8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e6aa:	9002      	str	r0, [sp, #8]
 800e6ac:	4638      	mov	r0, r7
 800e6ae:	9301      	str	r3, [sp, #4]
 800e6b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e6b2:	9300      	str	r3, [sp, #0]
 800e6b4:	464b      	mov	r3, r9
 800e6b6:	f7ff ff3f 	bl	800e538 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e6ba:	4620      	mov	r0, r4
 800e6bc:	f7ff fe22 	bl	800e304 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e6c0:	2001      	movs	r0, #1
 800e6c2:	e7e3      	b.n	800e68c <xTaskCreate+0x1c>
					vPortFree( pxStack );
 800e6c4:	4628      	mov	r0, r5
 800e6c6:	f7fe fe61 	bl	800d38c <vPortFree>
		if( pxNewTCB != NULL )
 800e6ca:	e7dd      	b.n	800e688 <xTaskCreate+0x18>

0800e6cc <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800e6cc:	4a02      	ldr	r2, [pc, #8]	@ (800e6d8 <vTaskSuspendAll+0xc>)
 800e6ce:	6813      	ldr	r3, [r2, #0]
 800e6d0:	3301      	adds	r3, #1
 800e6d2:	6013      	str	r3, [r2, #0]
}
 800e6d4:	4770      	bx	lr
 800e6d6:	bf00      	nop
 800e6d8:	20026520 	.word	0x20026520

0800e6dc <xTaskGetTickCount>:
		xTicks = xTickCount;
 800e6dc:	4b01      	ldr	r3, [pc, #4]	@ (800e6e4 <xTaskGetTickCount+0x8>)
 800e6de:	6818      	ldr	r0, [r3, #0]
}
 800e6e0:	4770      	bx	lr
 800e6e2:	bf00      	nop
 800e6e4:	20026540 	.word	0x20026540

0800e6e8 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e6e8:	4b40      	ldr	r3, [pc, #256]	@ (800e7ec <xTaskIncrementTick+0x104>)
 800e6ea:	681b      	ldr	r3, [r3, #0]
{
 800e6ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d173      	bne.n	800e7dc <xTaskIncrementTick+0xf4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e6f4:	4b3e      	ldr	r3, [pc, #248]	@ (800e7f0 <xTaskIncrementTick+0x108>)
 800e6f6:	681c      	ldr	r4, [r3, #0]
 800e6f8:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800e6fa:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e6fc:	b9cc      	cbnz	r4, 800e732 <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 800e6fe:	4b3d      	ldr	r3, [pc, #244]	@ (800e7f4 <xTaskIncrementTick+0x10c>)
 800e700:	681a      	ldr	r2, [r3, #0]
 800e702:	6812      	ldr	r2, [r2, #0]
 800e704:	b152      	cbz	r2, 800e71c <xTaskIncrementTick+0x34>
 800e706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e70a:	b672      	cpsid	i
 800e70c:	f383 8811 	msr	BASEPRI, r3
 800e710:	f3bf 8f6f 	isb	sy
 800e714:	f3bf 8f4f 	dsb	sy
 800e718:	b662      	cpsie	i
 800e71a:	e7fe      	b.n	800e71a <xTaskIncrementTick+0x32>
 800e71c:	4a36      	ldr	r2, [pc, #216]	@ (800e7f8 <xTaskIncrementTick+0x110>)
 800e71e:	6819      	ldr	r1, [r3, #0]
 800e720:	6810      	ldr	r0, [r2, #0]
 800e722:	6018      	str	r0, [r3, #0]
 800e724:	6011      	str	r1, [r2, #0]
 800e726:	4a35      	ldr	r2, [pc, #212]	@ (800e7fc <xTaskIncrementTick+0x114>)
 800e728:	6813      	ldr	r3, [r2, #0]
 800e72a:	3301      	adds	r3, #1
 800e72c:	6013      	str	r3, [r2, #0]
 800e72e:	f7ff fe9f 	bl	800e470 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e732:	4d33      	ldr	r5, [pc, #204]	@ (800e800 <xTaskIncrementTick+0x118>)
BaseType_t xSwitchRequired = pdFALSE;
 800e734:	f04f 0b00 	mov.w	fp, #0
 800e738:	4e32      	ldr	r6, [pc, #200]	@ (800e804 <xTaskIncrementTick+0x11c>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e73a:	682b      	ldr	r3, [r5, #0]
 800e73c:	4f32      	ldr	r7, [pc, #200]	@ (800e808 <xTaskIncrementTick+0x120>)
 800e73e:	42a3      	cmp	r3, r4
 800e740:	d911      	bls.n	800e766 <xTaskIncrementTick+0x7e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e742:	683a      	ldr	r2, [r7, #0]
 800e744:	2114      	movs	r1, #20
 800e746:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800e748:	434a      	muls	r2, r1
 800e74a:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 800e74c:	2a02      	cmp	r2, #2
 800e74e:	bf28      	it	cs
 800e750:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 800e754:	4a2d      	ldr	r2, [pc, #180]	@ (800e80c <xTaskIncrementTick+0x124>)
 800e756:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 800e758:	2a00      	cmp	r2, #0
}
 800e75a:	bf0c      	ite	eq
 800e75c:	4658      	moveq	r0, fp
 800e75e:	2001      	movne	r0, #1
 800e760:	b003      	add	sp, #12
 800e762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e766:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 800e7f4 <xTaskIncrementTick+0x10c>
					prvAddTaskToReadyList( pxTCB );
 800e76a:	f8df a0a8 	ldr.w	sl, [pc, #168]	@ 800e814 <xTaskIncrementTick+0x12c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e76e:	f8d9 2000 	ldr.w	r2, [r9]
 800e772:	6812      	ldr	r2, [r2, #0]
 800e774:	b91a      	cbnz	r2, 800e77e <xTaskIncrementTick+0x96>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e776:	f04f 32ff 	mov.w	r2, #4294967295
 800e77a:	602a      	str	r2, [r5, #0]
					break;
 800e77c:	e7e1      	b.n	800e742 <xTaskIncrementTick+0x5a>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e77e:	f8d9 2000 	ldr.w	r2, [r9]
 800e782:	68d2      	ldr	r2, [r2, #12]
 800e784:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e788:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 800e78c:	428c      	cmp	r4, r1
 800e78e:	d201      	bcs.n	800e794 <xTaskIncrementTick+0xac>
						xNextTaskUnblockTime = xItemValue;
 800e790:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e792:	e7d6      	b.n	800e742 <xTaskIncrementTick+0x5a>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e794:	f108 0304 	add.w	r3, r8, #4
 800e798:	4618      	mov	r0, r3
 800e79a:	9301      	str	r3, [sp, #4]
 800e79c:	f7fe fe62 	bl	800d464 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e7a0:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 800e7a4:	b119      	cbz	r1, 800e7ae <xTaskIncrementTick+0xc6>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e7a6:	f108 0018 	add.w	r0, r8, #24
 800e7aa:	f7fe fe5b 	bl	800d464 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e7ae:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 800e7b2:	f8da 1000 	ldr.w	r1, [sl]
 800e7b6:	4288      	cmp	r0, r1
 800e7b8:	d901      	bls.n	800e7be <xTaskIncrementTick+0xd6>
 800e7ba:	f8ca 0000 	str.w	r0, [sl]
 800e7be:	2314      	movs	r3, #20
 800e7c0:	9901      	ldr	r1, [sp, #4]
 800e7c2:	fb03 6000 	mla	r0, r3, r0, r6
 800e7c6:	f7fe fe2b 	bl	800d420 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e7ca:	6838      	ldr	r0, [r7, #0]
 800e7cc:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 800e7d0:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 800e7d2:	4291      	cmp	r1, r2
 800e7d4:	bf28      	it	cs
 800e7d6:	f04f 0b01 	movcs.w	fp, #1
 800e7da:	e7c8      	b.n	800e76e <xTaskIncrementTick+0x86>
		++uxPendedTicks;
 800e7dc:	4a0c      	ldr	r2, [pc, #48]	@ (800e810 <xTaskIncrementTick+0x128>)
BaseType_t xSwitchRequired = pdFALSE;
 800e7de:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 800e7e2:	6813      	ldr	r3, [r2, #0]
 800e7e4:	3301      	adds	r3, #1
 800e7e6:	6013      	str	r3, [r2, #0]
 800e7e8:	e7b4      	b.n	800e754 <xTaskIncrementTick+0x6c>
 800e7ea:	bf00      	nop
 800e7ec:	20026520 	.word	0x20026520
 800e7f0:	20026540 	.word	0x20026540
 800e7f4:	2002658c 	.word	0x2002658c
 800e7f8:	20026588 	.word	0x20026588
 800e7fc:	2002652c 	.word	0x2002652c
 800e800:	20026524 	.word	0x20026524
 800e804:	200265b8 	.word	0x200265b8
 800e808:	20026a18 	.word	0x20026a18
 800e80c:	20026530 	.word	0x20026530
 800e810:	20026534 	.word	0x20026534
 800e814:	2002653c 	.word	0x2002653c

0800e818 <xTaskResumeAll>:
{
 800e818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 800e81c:	4c31      	ldr	r4, [pc, #196]	@ (800e8e4 <xTaskResumeAll+0xcc>)
 800e81e:	6823      	ldr	r3, [r4, #0]
 800e820:	b953      	cbnz	r3, 800e838 <xTaskResumeAll+0x20>
 800e822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e826:	b672      	cpsid	i
 800e828:	f383 8811 	msr	BASEPRI, r3
 800e82c:	f3bf 8f6f 	isb	sy
 800e830:	f3bf 8f4f 	dsb	sy
 800e834:	b662      	cpsie	i
 800e836:	e7fe      	b.n	800e836 <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
 800e838:	f7fe fe8c 	bl	800d554 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800e83c:	6823      	ldr	r3, [r4, #0]
 800e83e:	3b01      	subs	r3, #1
 800e840:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e842:	6824      	ldr	r4, [r4, #0]
 800e844:	b12c      	cbz	r4, 800e852 <xTaskResumeAll+0x3a>
BaseType_t xAlreadyYielded = pdFALSE;
 800e846:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800e848:	f7fe fea8 	bl	800d59c <vPortExitCritical>
}
 800e84c:	4620      	mov	r0, r4
 800e84e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e852:	4b25      	ldr	r3, [pc, #148]	@ (800e8e8 <xTaskResumeAll+0xd0>)
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d0f5      	beq.n	800e846 <xTaskResumeAll+0x2e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e85a:	4d24      	ldr	r5, [pc, #144]	@ (800e8ec <xTaskResumeAll+0xd4>)
					prvAddTaskToReadyList( pxTCB );
 800e85c:	4e24      	ldr	r6, [pc, #144]	@ (800e8f0 <xTaskResumeAll+0xd8>)
 800e85e:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 800e900 <xTaskResumeAll+0xe8>
 800e862:	e01d      	b.n	800e8a0 <xTaskResumeAll+0x88>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e864:	68eb      	ldr	r3, [r5, #12]
 800e866:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e868:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e86a:	f104 0018 	add.w	r0, r4, #24
 800e86e:	f7fe fdf9 	bl	800d464 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e872:	4638      	mov	r0, r7
 800e874:	f7fe fdf6 	bl	800d464 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e878:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800e87a:	6832      	ldr	r2, [r6, #0]
 800e87c:	4293      	cmp	r3, r2
 800e87e:	d900      	bls.n	800e882 <xTaskResumeAll+0x6a>
 800e880:	6033      	str	r3, [r6, #0]
 800e882:	2014      	movs	r0, #20
 800e884:	4639      	mov	r1, r7
 800e886:	fb00 8003 	mla	r0, r0, r3, r8
 800e88a:	f7fe fdc9 	bl	800d420 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e88e:	4b19      	ldr	r3, [pc, #100]	@ (800e8f4 <xTaskResumeAll+0xdc>)
 800e890:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e896:	429a      	cmp	r2, r3
 800e898:	d302      	bcc.n	800e8a0 <xTaskResumeAll+0x88>
						xYieldPending = pdTRUE;
 800e89a:	4b17      	ldr	r3, [pc, #92]	@ (800e8f8 <xTaskResumeAll+0xe0>)
 800e89c:	2201      	movs	r2, #1
 800e89e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e8a0:	682b      	ldr	r3, [r5, #0]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d1de      	bne.n	800e864 <xTaskResumeAll+0x4c>
				if( pxTCB != NULL )
 800e8a6:	b10c      	cbz	r4, 800e8ac <xTaskResumeAll+0x94>
					prvResetNextTaskUnblockTime();
 800e8a8:	f7ff fde2 	bl	800e470 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800e8ac:	4d13      	ldr	r5, [pc, #76]	@ (800e8fc <xTaskResumeAll+0xe4>)
 800e8ae:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800e8b0:	b144      	cbz	r4, 800e8c4 <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 800e8b2:	4e11      	ldr	r6, [pc, #68]	@ (800e8f8 <xTaskResumeAll+0xe0>)
 800e8b4:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800e8b6:	f7ff ff17 	bl	800e6e8 <xTaskIncrementTick>
 800e8ba:	b100      	cbz	r0, 800e8be <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 800e8bc:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800e8be:	3c01      	subs	r4, #1
 800e8c0:	d1f9      	bne.n	800e8b6 <xTaskResumeAll+0x9e>
						uxPendedTicks = 0;
 800e8c2:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800e8c4:	4b0c      	ldr	r3, [pc, #48]	@ (800e8f8 <xTaskResumeAll+0xe0>)
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d0bc      	beq.n	800e846 <xTaskResumeAll+0x2e>
					taskYIELD_IF_USING_PREEMPTION();
 800e8cc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e8d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e8d4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800e8d8:	f3bf 8f4f 	dsb	sy
 800e8dc:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800e8e0:	2401      	movs	r4, #1
 800e8e2:	e7b1      	b.n	800e848 <xTaskResumeAll+0x30>
 800e8e4:	20026520 	.word	0x20026520
 800e8e8:	20026544 	.word	0x20026544
 800e8ec:	20026574 	.word	0x20026574
 800e8f0:	2002653c 	.word	0x2002653c
 800e8f4:	20026a18 	.word	0x20026a18
 800e8f8:	20026530 	.word	0x20026530
 800e8fc:	20026534 	.word	0x20026534
 800e900:	200265b8 	.word	0x200265b8

0800e904 <vTaskDelay>:
	{
 800e904:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e906:	b950      	cbnz	r0, 800e91e <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 800e908:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e90c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e910:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800e914:	f3bf 8f4f 	dsb	sy
 800e918:	f3bf 8f6f 	isb	sy
	}
 800e91c:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800e91e:	4b0b      	ldr	r3, [pc, #44]	@ (800e94c <vTaskDelay+0x48>)
 800e920:	6819      	ldr	r1, [r3, #0]
 800e922:	b151      	cbz	r1, 800e93a <vTaskDelay+0x36>
 800e924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e928:	b672      	cpsid	i
 800e92a:	f383 8811 	msr	BASEPRI, r3
 800e92e:	f3bf 8f6f 	isb	sy
 800e932:	f3bf 8f4f 	dsb	sy
 800e936:	b662      	cpsie	i
 800e938:	e7fe      	b.n	800e938 <vTaskDelay+0x34>
			vTaskSuspendAll();
 800e93a:	f7ff fec7 	bl	800e6cc <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e93e:	f7ff fd5f 	bl	800e400 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800e942:	f7ff ff69 	bl	800e818 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800e946:	2800      	cmp	r0, #0
 800e948:	d0de      	beq.n	800e908 <vTaskDelay+0x4>
 800e94a:	e7e7      	b.n	800e91c <vTaskDelay+0x18>
 800e94c:	20026520 	.word	0x20026520

0800e950 <vTaskSetApplicationTaskTag>:
	{
 800e950:	b538      	push	{r3, r4, r5, lr}
 800e952:	460d      	mov	r5, r1
		if( xTask == NULL )
 800e954:	4604      	mov	r4, r0
 800e956:	b908      	cbnz	r0, 800e95c <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 800e958:	4b04      	ldr	r3, [pc, #16]	@ (800e96c <vTaskSetApplicationTaskTag+0x1c>)
 800e95a:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 800e95c:	f7fe fdfa 	bl	800d554 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 800e960:	6565      	str	r5, [r4, #84]	@ 0x54
	}
 800e962:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 800e966:	f7fe be19 	b.w	800d59c <vPortExitCritical>
 800e96a:	bf00      	nop
 800e96c:	20026a18 	.word	0x20026a18

0800e970 <xTaskCallApplicationTaskHook>:
	{
 800e970:	4603      	mov	r3, r0
 800e972:	4608      	mov	r0, r1
		if( xTask == NULL )
 800e974:	b90b      	cbnz	r3, 800e97a <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 800e976:	4b03      	ldr	r3, [pc, #12]	@ (800e984 <xTaskCallApplicationTaskHook+0x14>)
 800e978:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 800e97a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e97c:	b103      	cbz	r3, 800e980 <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 800e97e:	4718      	bx	r3
	}
 800e980:	4618      	mov	r0, r3
 800e982:	4770      	bx	lr
 800e984:	20026a18 	.word	0x20026a18

0800e988 <vTaskStartScheduler>:
{
 800e988:	b510      	push	{r4, lr}
 800e98a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e98c:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e98e:	aa07      	add	r2, sp, #28
 800e990:	a906      	add	r1, sp, #24
 800e992:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e994:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e998:	f7fe fc24 	bl	800d1e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e99c:	9b05      	ldr	r3, [sp, #20]
 800e99e:	9a07      	ldr	r2, [sp, #28]
 800e9a0:	9302      	str	r3, [sp, #8]
 800e9a2:	9b06      	ldr	r3, [sp, #24]
 800e9a4:	491d      	ldr	r1, [pc, #116]	@ (800ea1c <vTaskStartScheduler+0x94>)
 800e9a6:	481e      	ldr	r0, [pc, #120]	@ (800ea20 <vTaskStartScheduler+0x98>)
 800e9a8:	e9cd 4300 	strd	r4, r3, [sp]
 800e9ac:	4623      	mov	r3, r4
 800e9ae:	f7ff fe21 	bl	800e5f4 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800e9b2:	2800      	cmp	r0, #0
 800e9b4:	d030      	beq.n	800ea18 <vTaskStartScheduler+0x90>
			xReturn = xTimerCreateTimerTask();
 800e9b6:	f000 faa5 	bl	800ef04 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800e9ba:	2801      	cmp	r0, #1
 800e9bc:	d11f      	bne.n	800e9fe <vTaskStartScheduler+0x76>
 800e9be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9c2:	b672      	cpsid	i
 800e9c4:	f383 8811 	msr	BASEPRI, r3
 800e9c8:	f3bf 8f6f 	isb	sy
 800e9cc:	f3bf 8f4f 	dsb	sy
 800e9d0:	b662      	cpsie	i
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e9d2:	4a14      	ldr	r2, [pc, #80]	@ (800ea24 <vTaskStartScheduler+0x9c>)
 800e9d4:	4914      	ldr	r1, [pc, #80]	@ (800ea28 <vTaskStartScheduler+0xa0>)
 800e9d6:	6813      	ldr	r3, [r2, #0]
 800e9d8:	3358      	adds	r3, #88	@ 0x58
 800e9da:	600b      	str	r3, [r1, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 800e9dc:	f04f 31ff 	mov.w	r1, #4294967295
 800e9e0:	4b12      	ldr	r3, [pc, #72]	@ (800ea2c <vTaskStartScheduler+0xa4>)
 800e9e2:	6019      	str	r1, [r3, #0]
		traceTASK_SWITCHED_IN();
 800e9e4:	4621      	mov	r1, r4
		xSchedulerRunning = pdTRUE;
 800e9e6:	4b12      	ldr	r3, [pc, #72]	@ (800ea30 <vTaskStartScheduler+0xa8>)
 800e9e8:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e9ea:	4b12      	ldr	r3, [pc, #72]	@ (800ea34 <vTaskStartScheduler+0xac>)
 800e9ec:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 800e9ee:	6810      	ldr	r0, [r2, #0]
 800e9f0:	f7ff ffbe 	bl	800e970 <xTaskCallApplicationTaskHook>
}
 800e9f4:	b008      	add	sp, #32
 800e9f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 800e9fa:	f7fe be45 	b.w	800d688 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e9fe:	3001      	adds	r0, #1
 800ea00:	d10a      	bne.n	800ea18 <vTaskStartScheduler+0x90>
 800ea02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea06:	b672      	cpsid	i
 800ea08:	f383 8811 	msr	BASEPRI, r3
 800ea0c:	f3bf 8f6f 	isb	sy
 800ea10:	f3bf 8f4f 	dsb	sy
 800ea14:	b662      	cpsie	i
 800ea16:	e7fe      	b.n	800ea16 <vTaskStartScheduler+0x8e>
}
 800ea18:	b008      	add	sp, #32
 800ea1a:	bd10      	pop	{r4, pc}
 800ea1c:	0802a07d 	.word	0x0802a07d
 800ea20:	0800e4d5 	.word	0x0800e4d5
 800ea24:	20026a18 	.word	0x20026a18
 800ea28:	200000f4 	.word	0x200000f4
 800ea2c:	20026524 	.word	0x20026524
 800ea30:	20026538 	.word	0x20026538
 800ea34:	20026540 	.word	0x20026540

0800ea38 <vTaskSwitchContext>:
{
 800ea38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ea3a:	4b1e      	ldr	r3, [pc, #120]	@ (800eab4 <vTaskSwitchContext+0x7c>)
 800ea3c:	681a      	ldr	r2, [r3, #0]
 800ea3e:	4b1e      	ldr	r3, [pc, #120]	@ (800eab8 <vTaskSwitchContext+0x80>)
 800ea40:	b112      	cbz	r2, 800ea48 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800ea42:	2201      	movs	r2, #1
 800ea44:	601a      	str	r2, [r3, #0]
}
 800ea46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 800ea48:	4c1c      	ldr	r4, [pc, #112]	@ (800eabc <vTaskSwitchContext+0x84>)
 800ea4a:	2101      	movs	r1, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea4c:	4e1c      	ldr	r6, [pc, #112]	@ (800eac0 <vTaskSwitchContext+0x88>)
 800ea4e:	2714      	movs	r7, #20
		xYieldPending = pdFALSE;
 800ea50:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 800ea52:	6820      	ldr	r0, [r4, #0]
 800ea54:	f7ff ff8c 	bl	800e970 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea58:	6832      	ldr	r2, [r6, #0]
 800ea5a:	491a      	ldr	r1, [pc, #104]	@ (800eac4 <vTaskSwitchContext+0x8c>)
 800ea5c:	fb07 f302 	mul.w	r3, r7, r2
 800ea60:	58cd      	ldr	r5, [r1, r3]
 800ea62:	18c8      	adds	r0, r1, r3
 800ea64:	b1c5      	cbz	r5, 800ea98 <vTaskSwitchContext+0x60>
 800ea66:	6845      	ldr	r5, [r0, #4]
 800ea68:	3308      	adds	r3, #8
 800ea6a:	686d      	ldr	r5, [r5, #4]
 800ea6c:	440b      	add	r3, r1
 800ea6e:	429d      	cmp	r5, r3
 800ea70:	6045      	str	r5, [r0, #4]
 800ea72:	bf04      	itt	eq
 800ea74:	686b      	ldreq	r3, [r5, #4]
 800ea76:	6043      	streq	r3, [r0, #4]
 800ea78:	2314      	movs	r3, #20
 800ea7a:	fb03 1102 	mla	r1, r3, r2, r1
 800ea7e:	684b      	ldr	r3, [r1, #4]
		traceTASK_SWITCHED_IN();
 800ea80:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea82:	68db      	ldr	r3, [r3, #12]
 800ea84:	6023      	str	r3, [r4, #0]
 800ea86:	6032      	str	r2, [r6, #0]
		traceTASK_SWITCHED_IN();
 800ea88:	6820      	ldr	r0, [r4, #0]
 800ea8a:	f7ff ff71 	bl	800e970 <xTaskCallApplicationTaskHook>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ea8e:	6823      	ldr	r3, [r4, #0]
 800ea90:	4a0d      	ldr	r2, [pc, #52]	@ (800eac8 <vTaskSwitchContext+0x90>)
 800ea92:	3358      	adds	r3, #88	@ 0x58
 800ea94:	6013      	str	r3, [r2, #0]
}
 800ea96:	e7d6      	b.n	800ea46 <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea98:	b952      	cbnz	r2, 800eab0 <vTaskSwitchContext+0x78>
 800ea9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea9e:	b672      	cpsid	i
 800eaa0:	f383 8811 	msr	BASEPRI, r3
 800eaa4:	f3bf 8f6f 	isb	sy
 800eaa8:	f3bf 8f4f 	dsb	sy
 800eaac:	b662      	cpsie	i
 800eaae:	e7fe      	b.n	800eaae <vTaskSwitchContext+0x76>
 800eab0:	3a01      	subs	r2, #1
 800eab2:	e7d3      	b.n	800ea5c <vTaskSwitchContext+0x24>
 800eab4:	20026520 	.word	0x20026520
 800eab8:	20026530 	.word	0x20026530
 800eabc:	20026a18 	.word	0x20026a18
 800eac0:	2002653c 	.word	0x2002653c
 800eac4:	200265b8 	.word	0x200265b8
 800eac8:	200000f4 	.word	0x200000f4

0800eacc <vTaskPlaceOnEventList>:
{
 800eacc:	b510      	push	{r4, lr}
 800eace:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800ead0:	b950      	cbnz	r0, 800eae8 <vTaskPlaceOnEventList+0x1c>
 800ead2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ead6:	b672      	cpsid	i
 800ead8:	f383 8811 	msr	BASEPRI, r3
 800eadc:	f3bf 8f6f 	isb	sy
 800eae0:	f3bf 8f4f 	dsb	sy
 800eae4:	b662      	cpsie	i
 800eae6:	e7fe      	b.n	800eae6 <vTaskPlaceOnEventList+0x1a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800eae8:	4b05      	ldr	r3, [pc, #20]	@ (800eb00 <vTaskPlaceOnEventList+0x34>)
 800eaea:	6819      	ldr	r1, [r3, #0]
 800eaec:	3118      	adds	r1, #24
 800eaee:	f7fe fca2 	bl	800d436 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800eaf2:	4620      	mov	r0, r4
 800eaf4:	2101      	movs	r1, #1
}
 800eaf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800eafa:	f7ff bc81 	b.w	800e400 <prvAddCurrentTaskToDelayedList>
 800eafe:	bf00      	nop
 800eb00:	20026a18 	.word	0x20026a18

0800eb04 <vTaskPlaceOnEventListRestricted>:
	{
 800eb04:	b538      	push	{r3, r4, r5, lr}
 800eb06:	460d      	mov	r5, r1
 800eb08:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800eb0a:	b950      	cbnz	r0, 800eb22 <vTaskPlaceOnEventListRestricted+0x1e>
 800eb0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb10:	b672      	cpsid	i
 800eb12:	f383 8811 	msr	BASEPRI, r3
 800eb16:	f3bf 8f6f 	isb	sy
 800eb1a:	f3bf 8f4f 	dsb	sy
 800eb1e:	b662      	cpsie	i
 800eb20:	e7fe      	b.n	800eb20 <vTaskPlaceOnEventListRestricted+0x1c>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800eb22:	4b07      	ldr	r3, [pc, #28]	@ (800eb40 <vTaskPlaceOnEventListRestricted+0x3c>)
 800eb24:	6819      	ldr	r1, [r3, #0]
 800eb26:	3118      	adds	r1, #24
 800eb28:	f7fe fc7a 	bl	800d420 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 800eb2c:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800eb2e:	4621      	mov	r1, r4
 800eb30:	bf0c      	ite	eq
 800eb32:	4628      	moveq	r0, r5
 800eb34:	f04f 30ff 	movne.w	r0, #4294967295
	}
 800eb38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800eb3c:	f7ff bc60 	b.w	800e400 <prvAddCurrentTaskToDelayedList>
 800eb40:	20026a18 	.word	0x20026a18

0800eb44 <xTaskRemoveFromEventList>:
{
 800eb44:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb46:	68c3      	ldr	r3, [r0, #12]
 800eb48:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800eb4a:	b954      	cbnz	r4, 800eb62 <xTaskRemoveFromEventList+0x1e>
 800eb4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb50:	b672      	cpsid	i
 800eb52:	f383 8811 	msr	BASEPRI, r3
 800eb56:	f3bf 8f6f 	isb	sy
 800eb5a:	f3bf 8f4f 	dsb	sy
 800eb5e:	b662      	cpsie	i
 800eb60:	e7fe      	b.n	800eb60 <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800eb62:	f104 0518 	add.w	r5, r4, #24
 800eb66:	4628      	mov	r0, r5
 800eb68:	f7fe fc7c 	bl	800d464 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eb6c:	4b11      	ldr	r3, [pc, #68]	@ (800ebb4 <xTaskRemoveFromEventList+0x70>)
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	b9d3      	cbnz	r3, 800eba8 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800eb72:	1d25      	adds	r5, r4, #4
 800eb74:	4628      	mov	r0, r5
 800eb76:	f7fe fc75 	bl	800d464 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800eb7a:	4a0f      	ldr	r2, [pc, #60]	@ (800ebb8 <xTaskRemoveFromEventList+0x74>)
 800eb7c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800eb7e:	6811      	ldr	r1, [r2, #0]
 800eb80:	428b      	cmp	r3, r1
 800eb82:	d900      	bls.n	800eb86 <xTaskRemoveFromEventList+0x42>
 800eb84:	6013      	str	r3, [r2, #0]
 800eb86:	2014      	movs	r0, #20
 800eb88:	4a0c      	ldr	r2, [pc, #48]	@ (800ebbc <xTaskRemoveFromEventList+0x78>)
 800eb8a:	4629      	mov	r1, r5
 800eb8c:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800eb90:	f7fe fc46 	bl	800d420 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800eb94:	4b0a      	ldr	r3, [pc, #40]	@ (800ebc0 <xTaskRemoveFromEventList+0x7c>)
 800eb96:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb9c:	429a      	cmp	r2, r3
 800eb9e:	d906      	bls.n	800ebae <xTaskRemoveFromEventList+0x6a>
		xYieldPending = pdTRUE;
 800eba0:	2001      	movs	r0, #1
 800eba2:	4b08      	ldr	r3, [pc, #32]	@ (800ebc4 <xTaskRemoveFromEventList+0x80>)
 800eba4:	6018      	str	r0, [r3, #0]
}
 800eba6:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800eba8:	4629      	mov	r1, r5
 800ebaa:	4807      	ldr	r0, [pc, #28]	@ (800ebc8 <xTaskRemoveFromEventList+0x84>)
 800ebac:	e7f0      	b.n	800eb90 <xTaskRemoveFromEventList+0x4c>
		xReturn = pdFALSE;
 800ebae:	2000      	movs	r0, #0
	return xReturn;
 800ebb0:	e7f9      	b.n	800eba6 <xTaskRemoveFromEventList+0x62>
 800ebb2:	bf00      	nop
 800ebb4:	20026520 	.word	0x20026520
 800ebb8:	2002653c 	.word	0x2002653c
 800ebbc:	200265b8 	.word	0x200265b8
 800ebc0:	20026a18 	.word	0x20026a18
 800ebc4:	20026530 	.word	0x20026530
 800ebc8:	20026574 	.word	0x20026574

0800ebcc <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ebcc:	4b03      	ldr	r3, [pc, #12]	@ (800ebdc <vTaskInternalSetTimeOutState+0x10>)
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ebd2:	4b03      	ldr	r3, [pc, #12]	@ (800ebe0 <vTaskInternalSetTimeOutState+0x14>)
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	6043      	str	r3, [r0, #4]
}
 800ebd8:	4770      	bx	lr
 800ebda:	bf00      	nop
 800ebdc:	2002652c 	.word	0x2002652c
 800ebe0:	20026540 	.word	0x20026540

0800ebe4 <xTaskCheckForTimeOut>:
{
 800ebe4:	b570      	push	{r4, r5, r6, lr}
 800ebe6:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 800ebe8:	4605      	mov	r5, r0
 800ebea:	b950      	cbnz	r0, 800ec02 <xTaskCheckForTimeOut+0x1e>
 800ebec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebf0:	b672      	cpsid	i
 800ebf2:	f383 8811 	msr	BASEPRI, r3
 800ebf6:	f3bf 8f6f 	isb	sy
 800ebfa:	f3bf 8f4f 	dsb	sy
 800ebfe:	b662      	cpsie	i
 800ec00:	e7fe      	b.n	800ec00 <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 800ec02:	b951      	cbnz	r1, 800ec1a <xTaskCheckForTimeOut+0x36>
 800ec04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec08:	b672      	cpsid	i
 800ec0a:	f383 8811 	msr	BASEPRI, r3
 800ec0e:	f3bf 8f6f 	isb	sy
 800ec12:	f3bf 8f4f 	dsb	sy
 800ec16:	b662      	cpsie	i
 800ec18:	e7fe      	b.n	800ec18 <xTaskCheckForTimeOut+0x34>
	taskENTER_CRITICAL();
 800ec1a:	f7fe fc9b 	bl	800d554 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800ec1e:	4b0f      	ldr	r3, [pc, #60]	@ (800ec5c <xTaskCheckForTimeOut+0x78>)
 800ec20:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800ec22:	6823      	ldr	r3, [r4, #0]
 800ec24:	1c5a      	adds	r2, r3, #1
 800ec26:	d010      	beq.n	800ec4a <xTaskCheckForTimeOut+0x66>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ec28:	480d      	ldr	r0, [pc, #52]	@ (800ec60 <xTaskCheckForTimeOut+0x7c>)
 800ec2a:	682e      	ldr	r6, [r5, #0]
 800ec2c:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ec2e:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ec30:	4286      	cmp	r6, r0
 800ec32:	d001      	beq.n	800ec38 <xTaskCheckForTimeOut+0x54>
 800ec34:	428a      	cmp	r2, r1
 800ec36:	d90f      	bls.n	800ec58 <xTaskCheckForTimeOut+0x74>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ec38:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ec3a:	4283      	cmp	r3, r0
 800ec3c:	d90a      	bls.n	800ec54 <xTaskCheckForTimeOut+0x70>
			*pxTicksToWait -= xElapsedTime;
 800ec3e:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ec40:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800ec42:	4413      	add	r3, r2
 800ec44:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ec46:	f7ff ffc1 	bl	800ebcc <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800ec4a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800ec4c:	f7fe fca6 	bl	800d59c <vPortExitCritical>
}
 800ec50:	4620      	mov	r0, r4
 800ec52:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800ec54:	2300      	movs	r3, #0
 800ec56:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800ec58:	2401      	movs	r4, #1
 800ec5a:	e7f7      	b.n	800ec4c <xTaskCheckForTimeOut+0x68>
 800ec5c:	20026540 	.word	0x20026540
 800ec60:	2002652c 	.word	0x2002652c

0800ec64 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800ec64:	4b01      	ldr	r3, [pc, #4]	@ (800ec6c <vTaskMissedYield+0x8>)
 800ec66:	2201      	movs	r2, #1
 800ec68:	601a      	str	r2, [r3, #0]
}
 800ec6a:	4770      	bx	lr
 800ec6c:	20026530 	.word	0x20026530

0800ec70 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 800ec70:	4b01      	ldr	r3, [pc, #4]	@ (800ec78 <xTaskGetCurrentTaskHandle+0x8>)
 800ec72:	6818      	ldr	r0, [r3, #0]
	}
 800ec74:	4770      	bx	lr
 800ec76:	bf00      	nop
 800ec78:	20026a18 	.word	0x20026a18

0800ec7c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800ec7c:	4b05      	ldr	r3, [pc, #20]	@ (800ec94 <xTaskGetSchedulerState+0x18>)
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	b133      	cbz	r3, 800ec90 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ec82:	4b05      	ldr	r3, [pc, #20]	@ (800ec98 <xTaskGetSchedulerState+0x1c>)
 800ec84:	6818      	ldr	r0, [r3, #0]
 800ec86:	fab0 f080 	clz	r0, r0
 800ec8a:	0940      	lsrs	r0, r0, #5
 800ec8c:	0040      	lsls	r0, r0, #1
 800ec8e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ec90:	2001      	movs	r0, #1
	}
 800ec92:	4770      	bx	lr
 800ec94:	20026538 	.word	0x20026538
 800ec98:	20026520 	.word	0x20026520

0800ec9c <xTaskPriorityInherit>:
	{
 800ec9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800ec9e:	4604      	mov	r4, r0
 800eca0:	b338      	cbz	r0, 800ecf2 <xTaskPriorityInherit+0x56>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800eca2:	4d1a      	ldr	r5, [pc, #104]	@ (800ed0c <xTaskPriorityInherit+0x70>)
 800eca4:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800eca6:	682a      	ldr	r2, [r5, #0]
 800eca8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800ecaa:	4293      	cmp	r3, r2
 800ecac:	d226      	bcs.n	800ecfc <xTaskPriorityInherit+0x60>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ecae:	6982      	ldr	r2, [r0, #24]
 800ecb0:	2a00      	cmp	r2, #0
 800ecb2:	db04      	blt.n	800ecbe <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ecb4:	682a      	ldr	r2, [r5, #0]
 800ecb6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800ecb8:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800ecbc:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ecbe:	2214      	movs	r2, #20
 800ecc0:	4e13      	ldr	r6, [pc, #76]	@ (800ed10 <xTaskPriorityInherit+0x74>)
 800ecc2:	fb02 6303 	mla	r3, r2, r3, r6
 800ecc6:	6962      	ldr	r2, [r4, #20]
 800ecc8:	429a      	cmp	r2, r3
 800ecca:	d113      	bne.n	800ecf4 <xTaskPriorityInherit+0x58>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eccc:	1d27      	adds	r7, r4, #4
 800ecce:	4638      	mov	r0, r7
 800ecd0:	f7fe fbc8 	bl	800d464 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ecd4:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ecd6:	4a0f      	ldr	r2, [pc, #60]	@ (800ed14 <xTaskPriorityInherit+0x78>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ecd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ecda:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ecdc:	62e3      	str	r3, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ecde:	428b      	cmp	r3, r1
 800ece0:	d900      	bls.n	800ece4 <xTaskPriorityInherit+0x48>
 800ece2:	6013      	str	r3, [r2, #0]
 800ece4:	2014      	movs	r0, #20
 800ece6:	4639      	mov	r1, r7
 800ece8:	fb00 6003 	mla	r0, r0, r3, r6
 800ecec:	f7fe fb98 	bl	800d420 <vListInsertEnd>
				xReturn = pdTRUE;
 800ecf0:	2001      	movs	r0, #1
	}
 800ecf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ecf4:	682b      	ldr	r3, [r5, #0]
 800ecf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecf8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ecfa:	e7f9      	b.n	800ecf0 <xTaskPriorityInherit+0x54>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ecfc:	682b      	ldr	r3, [r5, #0]
 800ecfe:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 800ed00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed02:	4298      	cmp	r0, r3
 800ed04:	bf2c      	ite	cs
 800ed06:	2000      	movcs	r0, #0
 800ed08:	2001      	movcc	r0, #1
 800ed0a:	e7f2      	b.n	800ecf2 <xTaskPriorityInherit+0x56>
 800ed0c:	20026a18 	.word	0x20026a18
 800ed10:	200265b8 	.word	0x200265b8
 800ed14:	2002653c 	.word	0x2002653c

0800ed18 <xTaskPriorityDisinherit>:
	{
 800ed18:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 800ed1a:	b908      	cbnz	r0, 800ed20 <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 800ed1c:	2000      	movs	r0, #0
	}
 800ed1e:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800ed20:	4b1d      	ldr	r3, [pc, #116]	@ (800ed98 <xTaskPriorityDisinherit+0x80>)
 800ed22:	681c      	ldr	r4, [r3, #0]
 800ed24:	4284      	cmp	r4, r0
 800ed26:	d00a      	beq.n	800ed3e <xTaskPriorityDisinherit+0x26>
 800ed28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed2c:	b672      	cpsid	i
 800ed2e:	f383 8811 	msr	BASEPRI, r3
 800ed32:	f3bf 8f6f 	isb	sy
 800ed36:	f3bf 8f4f 	dsb	sy
 800ed3a:	b662      	cpsie	i
 800ed3c:	e7fe      	b.n	800ed3c <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 800ed3e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800ed40:	b953      	cbnz	r3, 800ed58 <xTaskPriorityDisinherit+0x40>
 800ed42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed46:	b672      	cpsid	i
 800ed48:	f383 8811 	msr	BASEPRI, r3
 800ed4c:	f3bf 8f6f 	isb	sy
 800ed50:	f3bf 8f4f 	dsb	sy
 800ed54:	b662      	cpsie	i
 800ed56:	e7fe      	b.n	800ed56 <xTaskPriorityDisinherit+0x3e>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ed58:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
			( pxTCB->uxMutexesHeld )--;
 800ed5a:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ed5c:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 800ed5e:	6523      	str	r3, [r4, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ed60:	4291      	cmp	r1, r2
 800ed62:	d0db      	beq.n	800ed1c <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d1d9      	bne.n	800ed1c <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ed68:	1d25      	adds	r5, r4, #4
 800ed6a:	4628      	mov	r0, r5
 800ed6c:	f7fe fb7a 	bl	800d464 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ed70:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed72:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ed76:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed78:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800ed7a:	4a08      	ldr	r2, [pc, #32]	@ (800ed9c <xTaskPriorityDisinherit+0x84>)
 800ed7c:	6811      	ldr	r1, [r2, #0]
 800ed7e:	428b      	cmp	r3, r1
 800ed80:	d900      	bls.n	800ed84 <xTaskPriorityDisinherit+0x6c>
 800ed82:	6013      	str	r3, [r2, #0]
 800ed84:	4a06      	ldr	r2, [pc, #24]	@ (800eda0 <xTaskPriorityDisinherit+0x88>)
 800ed86:	2014      	movs	r0, #20
 800ed88:	4629      	mov	r1, r5
 800ed8a:	fb00 2003 	mla	r0, r0, r3, r2
 800ed8e:	f7fe fb47 	bl	800d420 <vListInsertEnd>
					xReturn = pdTRUE;
 800ed92:	2001      	movs	r0, #1
		return xReturn;
 800ed94:	e7c3      	b.n	800ed1e <xTaskPriorityDisinherit+0x6>
 800ed96:	bf00      	nop
 800ed98:	20026a18 	.word	0x20026a18
 800ed9c:	2002653c 	.word	0x2002653c
 800eda0:	200265b8 	.word	0x200265b8

0800eda4 <vTaskPriorityDisinheritAfterTimeout>:
	{
 800eda4:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800eda6:	4604      	mov	r4, r0
 800eda8:	2800      	cmp	r0, #0
 800edaa:	d046      	beq.n	800ee3a <vTaskPriorityDisinheritAfterTimeout+0x96>
			configASSERT( pxTCB->uxMutexesHeld );
 800edac:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800edae:	b952      	cbnz	r2, 800edc6 <vTaskPriorityDisinheritAfterTimeout+0x22>
 800edb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edb4:	b672      	cpsid	i
 800edb6:	f383 8811 	msr	BASEPRI, r3
 800edba:	f3bf 8f6f 	isb	sy
 800edbe:	f3bf 8f4f 	dsb	sy
 800edc2:	b662      	cpsie	i
 800edc4:	e7fe      	b.n	800edc4 <vTaskPriorityDisinheritAfterTimeout+0x20>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800edc6:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800edc8:	4299      	cmp	r1, r3
 800edca:	bf38      	it	cc
 800edcc:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800edce:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800edd0:	428b      	cmp	r3, r1
 800edd2:	d032      	beq.n	800ee3a <vTaskPriorityDisinheritAfterTimeout+0x96>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800edd4:	2a01      	cmp	r2, #1
 800edd6:	d130      	bne.n	800ee3a <vTaskPriorityDisinheritAfterTimeout+0x96>
					configASSERT( pxTCB != pxCurrentTCB );
 800edd8:	4a18      	ldr	r2, [pc, #96]	@ (800ee3c <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800edda:	6812      	ldr	r2, [r2, #0]
 800eddc:	4282      	cmp	r2, r0
 800edde:	d10a      	bne.n	800edf6 <vTaskPriorityDisinheritAfterTimeout+0x52>
 800ede0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ede4:	b672      	cpsid	i
 800ede6:	f383 8811 	msr	BASEPRI, r3
 800edea:	f3bf 8f6f 	isb	sy
 800edee:	f3bf 8f4f 	dsb	sy
 800edf2:	b662      	cpsie	i
 800edf4:	e7fe      	b.n	800edf4 <vTaskPriorityDisinheritAfterTimeout+0x50>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800edf6:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800edf8:	4d11      	ldr	r5, [pc, #68]	@ (800ee40 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800edfa:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800edfc:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 800ee00:	62c1      	str	r1, [r0, #44]	@ 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ee02:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee06:	bfa8      	it	ge
 800ee08:	f1c1 0138 	rsbge	r1, r1, #56	@ 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ee0c:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee0e:	bfa8      	it	ge
 800ee10:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ee12:	429a      	cmp	r2, r3
 800ee14:	d111      	bne.n	800ee3a <vTaskPriorityDisinheritAfterTimeout+0x96>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ee16:	1d06      	adds	r6, r0, #4
 800ee18:	4630      	mov	r0, r6
 800ee1a:	f7fe fb23 	bl	800d464 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800ee1e:	4a09      	ldr	r2, [pc, #36]	@ (800ee44 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 800ee20:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ee22:	6811      	ldr	r1, [r2, #0]
 800ee24:	428b      	cmp	r3, r1
 800ee26:	d900      	bls.n	800ee2a <vTaskPriorityDisinheritAfterTimeout+0x86>
 800ee28:	6013      	str	r3, [r2, #0]
 800ee2a:	2014      	movs	r0, #20
 800ee2c:	4631      	mov	r1, r6
 800ee2e:	fb00 5003 	mla	r0, r0, r3, r5
	}
 800ee32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 800ee36:	f7fe baf3 	b.w	800d420 <vListInsertEnd>
	}
 800ee3a:	bd70      	pop	{r4, r5, r6, pc}
 800ee3c:	20026a18 	.word	0x20026a18
 800ee40:	200265b8 	.word	0x200265b8
 800ee44:	2002653c 	.word	0x2002653c

0800ee48 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800ee48:	4b04      	ldr	r3, [pc, #16]	@ (800ee5c <pvTaskIncrementMutexHeldCount+0x14>)
 800ee4a:	681a      	ldr	r2, [r3, #0]
 800ee4c:	b11a      	cbz	r2, 800ee56 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800ee4e:	6819      	ldr	r1, [r3, #0]
 800ee50:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 800ee52:	3201      	adds	r2, #1
 800ee54:	650a      	str	r2, [r1, #80]	@ 0x50
		return pxCurrentTCB;
 800ee56:	6818      	ldr	r0, [r3, #0]
	}
 800ee58:	4770      	bx	lr
 800ee5a:	bf00      	nop
 800ee5c:	20026a18 	.word	0x20026a18

0800ee60 <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 800ee60:	4291      	cmp	r1, r2
{
 800ee62:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ee64:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ee66:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800ee68:	d80a      	bhi.n	800ee80 <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee6a:	1ad2      	subs	r2, r2, r3
 800ee6c:	6983      	ldr	r3, [r0, #24]
 800ee6e:	429a      	cmp	r2, r3
 800ee70:	d20d      	bcs.n	800ee8e <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ee72:	1d01      	adds	r1, r0, #4
 800ee74:	4b07      	ldr	r3, [pc, #28]	@ (800ee94 <prvInsertTimerInActiveList+0x34>)
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ee76:	6818      	ldr	r0, [r3, #0]
 800ee78:	f7fe fadd 	bl	800d436 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800ee7c:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 800ee7e:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ee80:	429a      	cmp	r2, r3
 800ee82:	d201      	bcs.n	800ee88 <prvInsertTimerInActiveList+0x28>
 800ee84:	4299      	cmp	r1, r3
 800ee86:	d202      	bcs.n	800ee8e <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ee88:	1d01      	adds	r1, r0, #4
 800ee8a:	4b03      	ldr	r3, [pc, #12]	@ (800ee98 <prvInsertTimerInActiveList+0x38>)
 800ee8c:	e7f3      	b.n	800ee76 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 800ee8e:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800ee90:	e7f5      	b.n	800ee7e <prvInsertTimerInActiveList+0x1e>
 800ee92:	bf00      	nop
 800ee94:	20026b18 	.word	0x20026b18
 800ee98:	20026b1c 	.word	0x20026b1c

0800ee9c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ee9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800ee9e:	4c11      	ldr	r4, [pc, #68]	@ (800eee4 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 800eea0:	f7fe fb58 	bl	800d554 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800eea4:	6825      	ldr	r5, [r4, #0]
 800eea6:	b9bd      	cbnz	r5, 800eed8 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 800eea8:	4f0f      	ldr	r7, [pc, #60]	@ (800eee8 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 800eeaa:	4e10      	ldr	r6, [pc, #64]	@ (800eeec <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 800eeac:	4638      	mov	r0, r7
 800eeae:	f7fe faa9 	bl	800d404 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800eeb2:	4630      	mov	r0, r6
 800eeb4:	f7fe faa6 	bl	800d404 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800eeb8:	4b0d      	ldr	r3, [pc, #52]	@ (800eef0 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800eeba:	4a0e      	ldr	r2, [pc, #56]	@ (800eef4 <prvCheckForValidListAndQueue+0x58>)
 800eebc:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 800eebe:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800eec0:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800eec2:	4b0d      	ldr	r3, [pc, #52]	@ (800eef8 <prvCheckForValidListAndQueue+0x5c>)
 800eec4:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800eec6:	4b0d      	ldr	r3, [pc, #52]	@ (800eefc <prvCheckForValidListAndQueue+0x60>)
 800eec8:	9500      	str	r5, [sp, #0]
 800eeca:	f7fe fd89 	bl	800d9e0 <xQueueGenericCreateStatic>
 800eece:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800eed0:	b110      	cbz	r0, 800eed8 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800eed2:	490b      	ldr	r1, [pc, #44]	@ (800ef00 <prvCheckForValidListAndQueue+0x64>)
 800eed4:	f7ff f9b2 	bl	800e23c <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 800eed8:	b003      	add	sp, #12
 800eeda:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 800eede:	f7fe bb5d 	b.w	800d59c <vPortExitCritical>
 800eee2:	bf00      	nop
 800eee4:	20026b14 	.word	0x20026b14
 800eee8:	20026b34 	.word	0x20026b34
 800eeec:	20026b20 	.word	0x20026b20
 800eef0:	20026b1c 	.word	0x20026b1c
 800eef4:	20026a6c 	.word	0x20026a6c
 800eef8:	20026b18 	.word	0x20026b18
 800eefc:	20026a1c 	.word	0x20026a1c
 800ef00:	0802a082 	.word	0x0802a082

0800ef04 <xTimerCreateTimerTask>:
{
 800ef04:	b510      	push	{r4, lr}
 800ef06:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800ef08:	f7ff ffc8 	bl	800ee9c <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800ef0c:	4b13      	ldr	r3, [pc, #76]	@ (800ef5c <xTimerCreateTimerTask+0x58>)
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	b1b3      	cbz	r3, 800ef40 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ef12:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ef14:	aa07      	add	r2, sp, #28
 800ef16:	a906      	add	r1, sp, #24
 800ef18:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ef1a:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ef1e:	f7fe f96d 	bl	800d1fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ef22:	9b05      	ldr	r3, [sp, #20]
 800ef24:	9a07      	ldr	r2, [sp, #28]
 800ef26:	9302      	str	r3, [sp, #8]
 800ef28:	9b06      	ldr	r3, [sp, #24]
 800ef2a:	490d      	ldr	r1, [pc, #52]	@ (800ef60 <xTimerCreateTimerTask+0x5c>)
 800ef2c:	9301      	str	r3, [sp, #4]
 800ef2e:	2302      	movs	r3, #2
 800ef30:	480c      	ldr	r0, [pc, #48]	@ (800ef64 <xTimerCreateTimerTask+0x60>)
 800ef32:	9300      	str	r3, [sp, #0]
 800ef34:	4623      	mov	r3, r4
 800ef36:	f7ff fb5d 	bl	800e5f4 <xTaskCreateStatic>
 800ef3a:	4b0b      	ldr	r3, [pc, #44]	@ (800ef68 <xTimerCreateTimerTask+0x64>)
 800ef3c:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800ef3e:	b950      	cbnz	r0, 800ef56 <xTimerCreateTimerTask+0x52>
 800ef40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef44:	b672      	cpsid	i
 800ef46:	f383 8811 	msr	BASEPRI, r3
 800ef4a:	f3bf 8f6f 	isb	sy
 800ef4e:	f3bf 8f4f 	dsb	sy
 800ef52:	b662      	cpsie	i
	configASSERT( xReturn );
 800ef54:	e7fe      	b.n	800ef54 <xTimerCreateTimerTask+0x50>
}
 800ef56:	2001      	movs	r0, #1
 800ef58:	b008      	add	sp, #32
 800ef5a:	bd10      	pop	{r4, pc}
 800ef5c:	20026b14 	.word	0x20026b14
 800ef60:	0802a087 	.word	0x0802a087
 800ef64:	0800f06d 	.word	0x0800f06d
 800ef68:	20026b10 	.word	0x20026b10

0800ef6c <xTimerGenericCommand>:
{
 800ef6c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ef6e:	4616      	mov	r6, r2
	configASSERT( xTimer );
 800ef70:	4604      	mov	r4, r0
{
 800ef72:	461a      	mov	r2, r3
	configASSERT( xTimer );
 800ef74:	b950      	cbnz	r0, 800ef8c <xTimerGenericCommand+0x20>
 800ef76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef7a:	b672      	cpsid	i
 800ef7c:	f383 8811 	msr	BASEPRI, r3
 800ef80:	f3bf 8f6f 	isb	sy
 800ef84:	f3bf 8f4f 	dsb	sy
 800ef88:	b662      	cpsie	i
 800ef8a:	e7fe      	b.n	800ef8a <xTimerGenericCommand+0x1e>
	if( xTimerQueue != NULL )
 800ef8c:	4d0c      	ldr	r5, [pc, #48]	@ (800efc0 <xTimerGenericCommand+0x54>)
 800ef8e:	6828      	ldr	r0, [r5, #0]
 800ef90:	b178      	cbz	r0, 800efb2 <xTimerGenericCommand+0x46>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ef92:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ef94:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ef96:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ef9a:	dc0c      	bgt.n	800efb6 <xTimerGenericCommand+0x4a>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ef9c:	f7ff fe6e 	bl	800ec7c <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800efa0:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800efa2:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800efa4:	4669      	mov	r1, sp
 800efa6:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800efa8:	bf0c      	ite	eq
 800efaa:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800efac:	461a      	movne	r2, r3
 800efae:	f7fe fd9c 	bl	800daea <xQueueGenericSend>
}
 800efb2:	b004      	add	sp, #16
 800efb4:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800efb6:	2300      	movs	r3, #0
 800efb8:	4669      	mov	r1, sp
 800efba:	f7fe fea3 	bl	800dd04 <xQueueGenericSendFromISR>
 800efbe:	e7f8      	b.n	800efb2 <xTimerGenericCommand+0x46>
 800efc0:	20026b14 	.word	0x20026b14

0800efc4 <prvSampleTimeNow>:
{
 800efc4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 800efc8:	f8df 809c 	ldr.w	r8, [pc, #156]	@ 800f068 <prvSampleTimeNow+0xa4>
{
 800efcc:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 800efce:	f7ff fb85 	bl	800e6dc <xTaskGetTickCount>
 800efd2:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800efd4:	f8d8 3000 	ldr.w	r3, [r8]
 800efd8:	4283      	cmp	r3, r0
 800efda:	d909      	bls.n	800eff0 <prvSampleTimeNow+0x2c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800efdc:	4f20      	ldr	r7, [pc, #128]	@ (800f060 <prvSampleTimeNow+0x9c>)
 800efde:	683b      	ldr	r3, [r7, #0]
 800efe0:	681a      	ldr	r2, [r3, #0]
 800efe2:	b96a      	cbnz	r2, 800f000 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 800efe4:	4a1f      	ldr	r2, [pc, #124]	@ (800f064 <prvSampleTimeNow+0xa0>)
 800efe6:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800efe8:	6013      	str	r3, [r2, #0]
 800efea:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 800efec:	6039      	str	r1, [r7, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800efee:	e000      	b.n	800eff2 <prvSampleTimeNow+0x2e>
 800eff0:	2300      	movs	r3, #0
}
 800eff2:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 800eff4:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 800eff6:	f8c8 5000 	str.w	r5, [r8]
}
 800effa:	b002      	add	sp, #8
 800effc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f000:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f002:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f004:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f008:	f104 0a04 	add.w	sl, r4, #4
 800f00c:	4650      	mov	r0, sl
 800f00e:	f7fe fa29 	bl	800d464 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f012:	6a23      	ldr	r3, [r4, #32]
 800f014:	4620      	mov	r0, r4
 800f016:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f018:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800f01c:	075b      	lsls	r3, r3, #29
 800f01e:	d5de      	bpl.n	800efde <prvSampleTimeNow+0x1a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f020:	69a3      	ldr	r3, [r4, #24]
 800f022:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 800f024:	4599      	cmp	r9, r3
 800f026:	d206      	bcs.n	800f036 <prvSampleTimeNow+0x72>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f028:	4651      	mov	r1, sl
 800f02a:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f02c:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f02e:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f030:	f7fe fa01 	bl	800d436 <vListInsert>
 800f034:	e7d3      	b.n	800efde <prvSampleTimeNow+0x1a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f036:	2300      	movs	r3, #0
 800f038:	464a      	mov	r2, r9
 800f03a:	4620      	mov	r0, r4
 800f03c:	4619      	mov	r1, r3
 800f03e:	9300      	str	r3, [sp, #0]
 800f040:	f7ff ff94 	bl	800ef6c <xTimerGenericCommand>
				configASSERT( xResult );
 800f044:	2800      	cmp	r0, #0
 800f046:	d1ca      	bne.n	800efde <prvSampleTimeNow+0x1a>
 800f048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f04c:	b672      	cpsid	i
 800f04e:	f383 8811 	msr	BASEPRI, r3
 800f052:	f3bf 8f6f 	isb	sy
 800f056:	f3bf 8f4f 	dsb	sy
 800f05a:	b662      	cpsie	i
 800f05c:	e7fe      	b.n	800f05c <prvSampleTimeNow+0x98>
 800f05e:	bf00      	nop
 800f060:	20026b1c 	.word	0x20026b1c
 800f064:	20026b18 	.word	0x20026b18
 800f068:	20026b0c 	.word	0x20026b0c

0800f06c <prvTimerTask>:
{
 800f06c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f070:	4d71      	ldr	r5, [pc, #452]	@ (800f238 <prvTimerTask+0x1cc>)
{
 800f072:	b089      	sub	sp, #36	@ 0x24
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f074:	4e71      	ldr	r6, [pc, #452]	@ (800f23c <prvTimerTask+0x1d0>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f076:	682b      	ldr	r3, [r5, #0]
 800f078:	f8d3 8000 	ldr.w	r8, [r3]
 800f07c:	f1b8 0f00 	cmp.w	r8, #0
 800f080:	d037      	beq.n	800f0f2 <prvTimerTask+0x86>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f082:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f084:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f086:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 800f08a:	f7ff fb1f 	bl	800e6cc <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f08e:	a804      	add	r0, sp, #16
 800f090:	f7ff ff98 	bl	800efc4 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800f094:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f096:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d16b      	bne.n	800f174 <prvTimerTask+0x108>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f09c:	2c00      	cmp	r4, #0
 800f09e:	d14e      	bne.n	800f13e <prvTimerTask+0xd2>
 800f0a0:	4540      	cmp	r0, r8
 800f0a2:	d352      	bcc.n	800f14a <prvTimerTask+0xde>
				( void ) xTaskResumeAll();
 800f0a4:	f7ff fbb8 	bl	800e818 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f0a8:	682b      	ldr	r3, [r5, #0]
 800f0aa:	68db      	ldr	r3, [r3, #12]
 800f0ac:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f0ae:	1d38      	adds	r0, r7, #4
 800f0b0:	f7fe f9d8 	bl	800d464 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f0b4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800f0b8:	0758      	lsls	r0, r3, #29
 800f0ba:	d51c      	bpl.n	800f0f6 <prvTimerTask+0x8a>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f0bc:	69b9      	ldr	r1, [r7, #24]
 800f0be:	4643      	mov	r3, r8
 800f0c0:	464a      	mov	r2, r9
 800f0c2:	4638      	mov	r0, r7
 800f0c4:	4441      	add	r1, r8
 800f0c6:	f7ff fecb 	bl	800ee60 <prvInsertTimerInActiveList>
 800f0ca:	b1c0      	cbz	r0, 800f0fe <prvTimerTask+0x92>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f0cc:	4623      	mov	r3, r4
 800f0ce:	4642      	mov	r2, r8
 800f0d0:	4621      	mov	r1, r4
 800f0d2:	4638      	mov	r0, r7
 800f0d4:	9400      	str	r4, [sp, #0]
 800f0d6:	f7ff ff49 	bl	800ef6c <xTimerGenericCommand>
			configASSERT( xResult );
 800f0da:	b980      	cbnz	r0, 800f0fe <prvTimerTask+0x92>
 800f0dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0e0:	b672      	cpsid	i
 800f0e2:	f383 8811 	msr	BASEPRI, r3
 800f0e6:	f3bf 8f6f 	isb	sy
 800f0ea:	f3bf 8f4f 	dsb	sy
 800f0ee:	b662      	cpsie	i
 800f0f0:	e7fe      	b.n	800f0f0 <prvTimerTask+0x84>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f0f2:	2401      	movs	r4, #1
 800f0f4:	e7c9      	b.n	800f08a <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f0f6:	f023 0301 	bic.w	r3, r3, #1
 800f0fa:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f0fe:	6a3b      	ldr	r3, [r7, #32]
 800f100:	4638      	mov	r0, r7
 800f102:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f104:	2200      	movs	r2, #0
 800f106:	a904      	add	r1, sp, #16
 800f108:	6830      	ldr	r0, [r6, #0]
 800f10a:	f7fe feb8 	bl	800de7e <xQueueReceive>
 800f10e:	2800      	cmp	r0, #0
 800f110:	d0b1      	beq.n	800f076 <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f112:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f114:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f116:	2b00      	cmp	r3, #0
 800f118:	db2f      	blt.n	800f17a <prvTimerTask+0x10e>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f11a:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f11c:	6963      	ldr	r3, [r4, #20]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d132      	bne.n	800f188 <prvTimerTask+0x11c>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f122:	a803      	add	r0, sp, #12
 800f124:	f7ff ff4e 	bl	800efc4 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800f128:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f12a:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 800f12c:	2b09      	cmp	r3, #9
 800f12e:	d8e9      	bhi.n	800f104 <prvTimerTask+0x98>
 800f130:	e8df f003 	tbb	[pc, r3]
 800f134:	592e2e2e 	.word	0x592e2e2e
 800f138:	2e2e7a60 	.word	0x2e2e7a60
 800f13c:	6059      	.short	0x6059
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f13e:	4b40      	ldr	r3, [pc, #256]	@ (800f240 <prvTimerTask+0x1d4>)
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	681c      	ldr	r4, [r3, #0]
 800f144:	fab4 f484 	clz	r4, r4
 800f148:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f14a:	4622      	mov	r2, r4
 800f14c:	eba8 0109 	sub.w	r1, r8, r9
 800f150:	6830      	ldr	r0, [r6, #0]
 800f152:	f7ff f8b4 	bl	800e2be <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f156:	f7ff fb5f 	bl	800e818 <xTaskResumeAll>
 800f15a:	2800      	cmp	r0, #0
 800f15c:	d1d2      	bne.n	800f104 <prvTimerTask+0x98>
					portYIELD_WITHIN_API();
 800f15e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800f162:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f166:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800f16a:	f3bf 8f4f 	dsb	sy
 800f16e:	f3bf 8f6f 	isb	sy
 800f172:	e7c7      	b.n	800f104 <prvTimerTask+0x98>
			( void ) xTaskResumeAll();
 800f174:	f7ff fb50 	bl	800e818 <xTaskResumeAll>
}
 800f178:	e7c4      	b.n	800f104 <prvTimerTask+0x98>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f17a:	9b05      	ldr	r3, [sp, #20]
 800f17c:	9907      	ldr	r1, [sp, #28]
 800f17e:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f180:	9b04      	ldr	r3, [sp, #16]
 800f182:	2b00      	cmp	r3, #0
 800f184:	dbbe      	blt.n	800f104 <prvTimerTask+0x98>
 800f186:	e7c8      	b.n	800f11a <prvTimerTask+0xae>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f188:	1d20      	adds	r0, r4, #4
 800f18a:	f7fe f96b 	bl	800d464 <uxListRemove>
 800f18e:	e7c8      	b.n	800f122 <prvTimerTask+0xb6>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f190:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f194:	4620      	mov	r0, r4
 800f196:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f198:	f043 0301 	orr.w	r3, r3, #1
 800f19c:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f1a0:	9b05      	ldr	r3, [sp, #20]
 800f1a2:	4419      	add	r1, r3
 800f1a4:	f7ff fe5c 	bl	800ee60 <prvInsertTimerInActiveList>
 800f1a8:	2800      	cmp	r0, #0
 800f1aa:	d0ab      	beq.n	800f104 <prvTimerTask+0x98>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f1ac:	6a23      	ldr	r3, [r4, #32]
 800f1ae:	4620      	mov	r0, r4
 800f1b0:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f1b2:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800f1b6:	0759      	lsls	r1, r3, #29
 800f1b8:	d5a4      	bpl.n	800f104 <prvTimerTask+0x98>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f1ba:	69a2      	ldr	r2, [r4, #24]
 800f1bc:	2300      	movs	r3, #0
 800f1be:	9905      	ldr	r1, [sp, #20]
 800f1c0:	4620      	mov	r0, r4
 800f1c2:	9300      	str	r3, [sp, #0]
 800f1c4:	440a      	add	r2, r1
 800f1c6:	4619      	mov	r1, r3
 800f1c8:	f7ff fed0 	bl	800ef6c <xTimerGenericCommand>
							configASSERT( xResult );
 800f1cc:	2800      	cmp	r0, #0
 800f1ce:	d199      	bne.n	800f104 <prvTimerTask+0x98>
 800f1d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1d4:	b672      	cpsid	i
 800f1d6:	f383 8811 	msr	BASEPRI, r3
 800f1da:	f3bf 8f6f 	isb	sy
 800f1de:	f3bf 8f4f 	dsb	sy
 800f1e2:	b662      	cpsie	i
 800f1e4:	e7fe      	b.n	800f1e4 <prvTimerTask+0x178>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f1e6:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f1ea:	f023 0301 	bic.w	r3, r3, #1
 800f1ee:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 800f1f2:	e787      	b.n	800f104 <prvTimerTask+0x98>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f1f4:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800f1f8:	f043 0301 	orr.w	r3, r3, #1
 800f1fc:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f200:	9905      	ldr	r1, [sp, #20]
 800f202:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f204:	b951      	cbnz	r1, 800f21c <prvTimerTask+0x1b0>
 800f206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f20a:	b672      	cpsid	i
 800f20c:	f383 8811 	msr	BASEPRI, r3
 800f210:	f3bf 8f6f 	isb	sy
 800f214:	f3bf 8f4f 	dsb	sy
 800f218:	b662      	cpsie	i
 800f21a:	e7fe      	b.n	800f21a <prvTimerTask+0x1ae>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f21c:	4603      	mov	r3, r0
 800f21e:	4401      	add	r1, r0
 800f220:	4620      	mov	r0, r4
 800f222:	f7ff fe1d 	bl	800ee60 <prvInsertTimerInActiveList>
					break;
 800f226:	e76d      	b.n	800f104 <prvTimerTask+0x98>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f228:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800f22c:	079a      	lsls	r2, r3, #30
 800f22e:	d4dc      	bmi.n	800f1ea <prvTimerTask+0x17e>
							vPortFree( pxTimer );
 800f230:	4620      	mov	r0, r4
 800f232:	f7fe f8ab 	bl	800d38c <vPortFree>
 800f236:	e765      	b.n	800f104 <prvTimerTask+0x98>
 800f238:	20026b1c 	.word	0x20026b1c
 800f23c:	20026b14 	.word	0x20026b14
 800f240:	20026b18 	.word	0x20026b18

0800f244 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 800f244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f248:	b093      	sub	sp, #76	@ 0x4c
 800f24a:	9209      	str	r2, [sp, #36]	@ 0x24
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr, *pOutAddr2;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
 800f24c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
  currentMCU = BlockIndex;
 800f250:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
{  
 800f254:	9111      	str	r1, [sp, #68]	@ 0x44
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
 800f256:	fbb3 f3f2 	udiv	r3, r3, r2
 800f25a:	9308      	str	r3, [sp, #32]
  

  while(currentMCU < (numberMCU + BlockIndex))
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 800f25c:	4b72      	ldr	r3, [pc, #456]	@ (800f428 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1e4>)
 800f25e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f260:	9206      	str	r2, [sp, #24]
    
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f262:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
      if(i == 8)
      {
        pLum = pInBuffer + 128;
      }
      
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800f264:	691b      	ldr	r3, [r3, #16]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f266:	9201      	str	r2, [sp, #4]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800f268:	930c      	str	r3, [sp, #48]	@ 0x30
          pLum += 64;                      
        }

        pLum = pLum - 128 + 16;
        
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
 800f26a:	0053      	lsls	r3, r2, #1
 800f26c:	930d      	str	r3, [sp, #52]	@ 0x34
  while(currentMCU < (numberMCU + BlockIndex))
 800f26e:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 800f272:	4413      	add	r3, r2
 800f274:	455b      	cmp	r3, fp
 800f276:	d803      	bhi.n	800f280 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x3c>
    }   
    
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
  }
  return numberMCU;
}
 800f278:	9808      	ldr	r0, [sp, #32]
 800f27a:	b013      	add	sp, #76	@ 0x4c
 800f27c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 800f280:	ea4f 130b 	mov.w	r3, fp, lsl #4
 800f284:	9a06      	ldr	r2, [sp, #24]
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 800f286:	9c06      	ldr	r4, [sp, #24]
    currentMCU++;
 800f288:	f10b 0b01 	add.w	fp, fp, #1
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f28c:	9901      	ldr	r1, [sp, #4]
    pLum = pInBuffer;
 800f28e:	4680      	mov	r8, r0
    for(i= 0; i <  16; i+=2)
 800f290:	f04f 0e00 	mov.w	lr, #0
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 800f294:	fbb3 f2f2 	udiv	r2, r3, r2
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 800f298:	fb04 3312 	mls	r3, r4, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f29c:	4351      	muls	r1, r2
 800f29e:	005b      	lsls	r3, r3, #1
 800f2a0:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800f2a4:	9300      	str	r3, [sp, #0]
    pChrom = pInBuffer + 256; /* pChroma = pInBuffer + 4*64 */
 800f2a6:	f500 7380 	add.w	r3, r0, #256	@ 0x100
 800f2aa:	9302      	str	r3, [sp, #8]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800f2ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f2ae:	9a00      	ldr	r2, [sp, #0]
 800f2b0:	4293      	cmp	r3, r2
 800f2b2:	f240 80b0 	bls.w	800f416 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1d2>
        pOutAddr = pOutBuffer + refline;
 800f2b6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
 800f2b8:	f04f 0900 	mov.w	r9, #0
 800f2bc:	f8cd 800c 	str.w	r8, [sp, #12]
        pOutAddr = pOutBuffer + refline;
 800f2c0:	4413      	add	r3, r2
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
 800f2c2:	9a01      	ldr	r2, [sp, #4]
        pOutAddr = pOutBuffer + refline;
 800f2c4:	9307      	str	r3, [sp, #28]
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
 800f2c6:	4413      	add	r3, r2
 800f2c8:	930e      	str	r3, [sp, #56]	@ 0x38
 800f2ca:	9b02      	ldr	r3, [sp, #8]
 800f2cc:	9304      	str	r3, [sp, #16]
          for(j=0; j < 8; j+=2)
 800f2ce:	9b04      	ldr	r3, [sp, #16]
    for(i= 0; i <  16; i+=2)
 800f2d0:	2400      	movs	r4, #0
 800f2d2:	9f03      	ldr	r7, [sp, #12]
 800f2d4:	3b01      	subs	r3, #1
 800f2d6:	9305      	str	r3, [sp, #20]
 800f2d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f2da:	444b      	add	r3, r9
 800f2dc:	930a      	str	r3, [sp, #40]	@ 0x28
 800f2de:	9b07      	ldr	r3, [sp, #28]
 800f2e0:	444b      	add	r3, r9
 800f2e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f2e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
          for(j=0; j < 8; j+=2)
 800f2e6:	3702      	adds	r7, #2
            ycomp = (int32_t)(*(pLum +j));
 800f2e8:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 800f2ec:	4423      	add	r3, r4
 800f2ee:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f2f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f2f2:	4423      	add	r3, r4
 800f2f4:	9310      	str	r3, [sp, #64]	@ 0x40
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 800f2f6:	9b05      	ldr	r3, [sp, #20]
 800f2f8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800f2fc:	9305      	str	r3, [sp, #20]
 800f2fe:	4b4b      	ldr	r3, [pc, #300]	@ (800f42c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1e8>)
 800f300:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 800f304:	9b05      	ldr	r3, [sp, #20]
 800f306:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800f30a:	4b49      	ldr	r3, [pc, #292]	@ (800f430 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1ec>)
 800f30c:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 800f310:	4b48      	ldr	r3, [pc, #288]	@ (800f434 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1f0>)
 800f312:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f316:	4b48      	ldr	r3, [pc, #288]	@ (800f438 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1f4>)
 800f318:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800f31c:	440a      	add	r2, r1
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f31e:	4947      	ldr	r1, [pc, #284]	@ (800f43c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1f8>)
 800f320:	460b      	mov	r3, r1
 800f322:	440e      	add	r6, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f324:	eb03 4222 	add.w	r2, r3, r2, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f328:	eb06 010c 	add.w	r1, r6, ip
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 800f32c:	441d      	add	r5, r3
            *(__IO uint16_t *)pOutAddr = 
 800f32e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f330:	f891 a100 	ldrb.w	sl, [r1, #256]	@ 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f334:	eb02 010c 	add.w	r1, r2, ip
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 800f338:	44ac      	add	ip, r5
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f33a:	f891 1100 	ldrb.w	r1, [r1, #256]	@ 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f33e:	ea4f 0ada 	mov.w	sl, sl, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f342:	f89c c100 	ldrb.w	ip, [ip, #256]	@ 0x100
 800f346:	0889      	lsrs	r1, r1, #2
 800f348:	0149      	lsls	r1, r1, #5
 800f34a:	ea41 21ca 	orr.w	r1, r1, sl, lsl #11
 800f34e:	ea41 01dc 	orr.w	r1, r1, ip, lsr #3
            *(__IO uint16_t *)pOutAddr = 
 800f352:	5319      	strh	r1, [r3, r4]
            ycomp = (int32_t)(*(pLum +j +1));
 800f354:	f817 cc01 	ldrb.w	ip, [r7, #-1]
            *((__IO uint16_t *)(pOutAddr + 2)) = 
 800f358:	9b10      	ldr	r3, [sp, #64]	@ 0x40
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f35a:	eb06 010c 	add.w	r1, r6, ip
 800f35e:	f891 a100 	ldrb.w	sl, [r1, #256]	@ 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f362:	eb02 010c 	add.w	r1, r2, ip
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 800f366:	44ac      	add	ip, r5
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f368:	f891 1100 	ldrb.w	r1, [r1, #256]	@ 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f36c:	ea4f 0ada 	mov.w	sl, sl, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f370:	f89c c100 	ldrb.w	ip, [ip, #256]	@ 0x100
 800f374:	0889      	lsrs	r1, r1, #2
 800f376:	0149      	lsls	r1, r1, #5
 800f378:	ea41 21ca 	orr.w	r1, r1, sl, lsl #11
 800f37c:	ea41 01dc 	orr.w	r1, r1, ip, lsr #3
            *((__IO uint16_t *)(pOutAddr + 2)) = 
 800f380:	8059      	strh	r1, [r3, #2]
            ycomp = (int32_t)(*(pLum +j +8));
 800f382:	f897 c006 	ldrb.w	ip, [r7, #6]
            *(__IO uint16_t *)pOutAddr2 = 
 800f386:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f388:	eb06 010c 	add.w	r1, r6, ip
 800f38c:	f891 a100 	ldrb.w	sl, [r1, #256]	@ 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f390:	eb02 010c 	add.w	r1, r2, ip
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 800f394:	44ac      	add	ip, r5
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f396:	f891 1100 	ldrb.w	r1, [r1, #256]	@ 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f39a:	ea4f 0ada 	mov.w	sl, sl, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f39e:	f89c c100 	ldrb.w	ip, [ip, #256]	@ 0x100
 800f3a2:	0889      	lsrs	r1, r1, #2
 800f3a4:	0149      	lsls	r1, r1, #5
 800f3a6:	ea41 21ca 	orr.w	r1, r1, sl, lsl #11
 800f3aa:	ea41 01dc 	orr.w	r1, r1, ip, lsr #3
            *(__IO uint16_t *)pOutAddr2 = 
 800f3ae:	5319      	strh	r1, [r3, r4]
          for(j=0; j < 8; j+=2)
 800f3b0:	3404      	adds	r4, #4
            ycomp = (int32_t)(*(pLum +j +8 +1));
 800f3b2:	79f9      	ldrb	r1, [r7, #7]
          for(j=0; j < 8; j+=2)
 800f3b4:	2c10      	cmp	r4, #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f3b6:	440e      	add	r6, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f3b8:	440a      	add	r2, r1
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
 800f3ba:	440d      	add	r5, r1
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f3bc:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f3c0:	f892 2100 	ldrb.w	r2, [r2, #256]	@ 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f3c4:	ea4f 06d6 	mov.w	r6, r6, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f3c8:	f895 1100 	ldrb.w	r1, [r5, #256]	@ 0x100
 800f3cc:	ea4f 0292 	mov.w	r2, r2, lsr #2
            *((__IO uint16_t *)(pOutAddr2 +2)) = 
 800f3d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f3d2:	ea4f 1242 	mov.w	r2, r2, lsl #5
 800f3d6:	ea42 22c6 	orr.w	r2, r2, r6, lsl #11
 800f3da:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
            *((__IO uint16_t *)(pOutAddr2 +2)) = 
 800f3de:	805a      	strh	r2, [r3, #2]
          for(j=0; j < 8; j+=2)
 800f3e0:	d180      	bne.n	800f2e4 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xa0>
            pChrom++;
 800f3e2:	9b04      	ldr	r3, [sp, #16]
 800f3e4:	3304      	adds	r3, #4
 800f3e6:	9304      	str	r3, [sp, #16]
          pLum += 64;                      
 800f3e8:	9b03      	ldr	r3, [sp, #12]
 800f3ea:	3340      	adds	r3, #64	@ 0x40
 800f3ec:	9303      	str	r3, [sp, #12]
        for(k= 0; k<2; k++)
 800f3ee:	f1b9 0f00 	cmp.w	r9, #0
 800f3f2:	d107      	bne.n	800f404 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1c0>
 800f3f4:	46a1      	mov	r9, r4
 800f3f6:	e76a      	b.n	800f2ce <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x8a>
      if(i == 8)
 800f3f8:	f1be 0f08 	cmp.w	lr, #8
        pLum = pInBuffer + 128;
 800f3fc:	bf08      	it	eq
 800f3fe:	f100 0880 	addeq.w	r8, r0, #128	@ 0x80
 800f402:	e753      	b.n	800f2ac <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x68>
            pChrom++;
 800f404:	9b02      	ldr	r3, [sp, #8]
        pLum = pLum - 128 + 16;
 800f406:	f108 0810 	add.w	r8, r8, #16
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
 800f40a:	9a00      	ldr	r2, [sp, #0]
            pChrom++;
 800f40c:	3308      	adds	r3, #8
 800f40e:	9302      	str	r3, [sp, #8]
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
 800f410:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f412:	441a      	add	r2, r3
 800f414:	9200      	str	r2, [sp, #0]
    for(i= 0; i <  16; i+=2)
 800f416:	f10e 0e02 	add.w	lr, lr, #2
 800f41a:	f1be 0f10 	cmp.w	lr, #16
 800f41e:	d1eb      	bne.n	800f3f8 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1b4>
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
 800f420:	f500 70c0 	add.w	r0, r0, #384	@ 0x180
 800f424:	e723      	b.n	800f26e <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a>
 800f426:	bf00      	nop
 800f428:	20027b48 	.word	0x20027b48
 800f42c:	20027348 	.word	0x20027348
 800f430:	20027748 	.word	0x20027748
 800f434:	20026f48 	.word	0x20026f48
 800f438:	20026b48 	.word	0x20026b48
 800f43c:	0802a08f 	.word	0x0802a08f

0800f440 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 800f440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
 800f444:	0a1b      	lsrs	r3, r3, #8
{  
 800f446:	b08d      	sub	sp, #52	@ 0x34
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
 800f448:	9305      	str	r3, [sp, #20]
  currentMCU = BlockIndex;
  

  while(currentMCU < (numberMCU + BlockIndex))
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 800f44a:	4b4f      	ldr	r3, [pc, #316]	@ (800f588 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x148>)
{  
 800f44c:	9206      	str	r2, [sp, #24]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 800f44e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
  currentMCU = BlockIndex;
 800f450:	f8dd e018 	ldr.w	lr, [sp, #24]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 800f454:	9202      	str	r2, [sp, #8]
    
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f456:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
    
    pLum = pInBuffer;
    
    for(i= 0; i <  8; i++)
    {
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800f458:	691b      	ldr	r3, [r3, #16]
{  
 800f45a:	910a      	str	r1, [sp, #40]	@ 0x28
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f45c:	9203      	str	r2, [sp, #12]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800f45e:	9307      	str	r3, [sp, #28]
  while(currentMCU < (numberMCU + BlockIndex))
 800f460:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 800f464:	4413      	add	r3, r2
 800f466:	4573      	cmp	r3, lr
 800f468:	d803      	bhi.n	800f472 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x32>
    }   
    
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
  }
  return numberMCU;
}
 800f46a:	9805      	ldr	r0, [sp, #20]
 800f46c:	b00d      	add	sp, #52	@ 0x34
 800f46e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 800f472:	ea4f 130e 	mov.w	r3, lr, lsl #4
 800f476:	9a02      	ldr	r2, [sp, #8]
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 800f478:	9c02      	ldr	r4, [sp, #8]
    currentMCU++;
 800f47a:	f10e 0e01 	add.w	lr, lr, #1
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f47e:	9903      	ldr	r1, [sp, #12]
    pChrom = pInBuffer + 128; /* pChroma = pInBuffer + 2*64 */
 800f480:	f100 0780 	add.w	r7, r0, #128	@ 0x80
    pLum = pInBuffer;
 800f484:	4682      	mov	sl, r0
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 800f486:	fbb3 f2f2 	udiv	r2, r3, r2
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 800f48a:	fb04 3312 	mls	r3, r4, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f48e:	4351      	muls	r1, r2
 800f490:	005b      	lsls	r3, r3, #1
 800f492:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800f496:	9300      	str	r3, [sp, #0]
    pChrom = pInBuffer + 128; /* pChroma = pInBuffer + 2*64 */
 800f498:	2308      	movs	r3, #8
 800f49a:	9304      	str	r3, [sp, #16]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800f49c:	9b07      	ldr	r3, [sp, #28]
 800f49e:	9a00      	ldr	r2, [sp, #0]
 800f4a0:	4293      	cmp	r3, r2
 800f4a2:	d969      	bls.n	800f578 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x138>
        pOutAddr = pOutBuffer + refline;
 800f4a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f4a6:	46d0      	mov	r8, sl
 800f4a8:	eb03 0902 	add.w	r9, r3, r2
        for(k= 0; k<2; k++)
 800f4ac:	f107 0308 	add.w	r3, r7, #8
 800f4b0:	9308      	str	r3, [sp, #32]
          for(j=0; j < 8; j+=2)
 800f4b2:	1e7b      	subs	r3, r7, #1
    pChrom = pInBuffer + 128; /* pChroma = pInBuffer + 2*64 */
 800f4b4:	2400      	movs	r4, #0
 800f4b6:	9301      	str	r3, [sp, #4]
            ycomp = (int32_t)(*(pLum +j +1));
 800f4b8:	f108 0301 	add.w	r3, r8, #1
 800f4bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f4be:	eb09 0384 	add.w	r3, r9, r4, lsl #2
            ycomp = (int32_t)(*(pLum +j));
 800f4c2:	f818 c014 	ldrb.w	ip, [r8, r4, lsl #1]
 800f4c6:	9309      	str	r3, [sp, #36]	@ 0x24
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 800f4c8:	9b01      	ldr	r3, [sp, #4]
 800f4ca:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800f4ce:	9301      	str	r3, [sp, #4]
 800f4d0:	4b2e      	ldr	r3, [pc, #184]	@ (800f58c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x14c>)
 800f4d2:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 800f4d6:	9b01      	ldr	r3, [sp, #4]
 800f4d8:	f893 1040 	ldrb.w	r1, [r3, #64]	@ 0x40
 800f4dc:	4b2c      	ldr	r3, [pc, #176]	@ (800f590 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x150>)
 800f4de:	f853 6021 	ldr.w	r6, [r3, r1, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 800f4e2:	4b2c      	ldr	r3, [pc, #176]	@ (800f594 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x154>)
 800f4e4:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800f4e8:	4b2b      	ldr	r3, [pc, #172]	@ (800f598 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x158>)
 800f4ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f4ee:	4411      	add	r1, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f4f0:	4a2a      	ldr	r2, [pc, #168]	@ (800f59c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x15c>)
 800f4f2:	4613      	mov	r3, r2
 800f4f4:	4416      	add	r6, r2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f4f6:	eb03 4121 	add.w	r1, r3, r1, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f4fa:	eb06 020c 	add.w	r2, r6, ip
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 800f4fe:	441d      	add	r5, r3
            ycomp = (int32_t)(*(pLum +j +1));
 800f500:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f502:	f892 b100 	ldrb.w	fp, [r2, #256]	@ 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f506:	eb01 020c 	add.w	r2, r1, ip
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 800f50a:	44ac      	add	ip, r5
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f50c:	f892 2100 	ldrb.w	r2, [r2, #256]	@ 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f510:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f514:	f89c c100 	ldrb.w	ip, [ip, #256]	@ 0x100
 800f518:	0892      	lsrs	r2, r2, #2
 800f51a:	0152      	lsls	r2, r2, #5
 800f51c:	ea42 22cb 	orr.w	r2, r2, fp, lsl #11
 800f520:	ea42 02dc 	orr.w	r2, r2, ip, lsr #3
            *(__IO uint16_t *)pOutAddr = 
 800f524:	f829 2024 	strh.w	r2, [r9, r4, lsl #2]
            ycomp = (int32_t)(*(pLum +j +1));
 800f528:	f813 2014 	ldrb.w	r2, [r3, r4, lsl #1]
          for(j=0; j < 8; j+=2)
 800f52c:	3401      	adds	r4, #1
            *((__IO uint16_t *)(pOutAddr + 2)) = 
 800f52e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f530:	4411      	add	r1, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f532:	4416      	add	r6, r2
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
 800f534:	4415      	add	r5, r2
          for(j=0; j < 8; j+=2)
 800f536:	2c04      	cmp	r4, #4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f538:	f891 1100 	ldrb.w	r1, [r1, #256]	@ 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f53c:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f540:	ea4f 0191 	mov.w	r1, r1, lsr #2
 800f544:	f895 2100 	ldrb.w	r2, [r5, #256]	@ 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f548:	ea4f 06d6 	mov.w	r6, r6, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f54c:	ea4f 1141 	mov.w	r1, r1, lsl #5
 800f550:	ea41 21c6 	orr.w	r1, r1, r6, lsl #11
 800f554:	ea41 01d2 	orr.w	r1, r1, r2, lsr #3
            *((__IO uint16_t *)(pOutAddr + 2)) = 
 800f558:	8059      	strh	r1, [r3, #2]
          for(j=0; j < 8; j+=2)
 800f55a:	d1b0      	bne.n	800f4be <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x7e>
            pChrom++;
 800f55c:	3704      	adds	r7, #4
        for(k= 0; k<2; k++)
 800f55e:	9b08      	ldr	r3, [sp, #32]
            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 800f560:	f109 0910 	add.w	r9, r9, #16
          pLum += 64;                      
 800f564:	f108 0840 	add.w	r8, r8, #64	@ 0x40
        for(k= 0; k<2; k++)
 800f568:	42bb      	cmp	r3, r7
 800f56a:	d1a2      	bne.n	800f4b2 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x72>
        refline += JPEG_ConvertorParams.ScaledWidth;          
 800f56c:	9a00      	ldr	r2, [sp, #0]
        pLum = pLum - 128 + 8;
 800f56e:	f10a 0a08 	add.w	sl, sl, #8
        refline += JPEG_ConvertorParams.ScaledWidth;          
 800f572:	9b03      	ldr	r3, [sp, #12]
 800f574:	441a      	add	r2, r3
 800f576:	9200      	str	r2, [sp, #0]
    for(i= 0; i <  8; i++)
 800f578:	9b04      	ldr	r3, [sp, #16]
 800f57a:	3b01      	subs	r3, #1
 800f57c:	9304      	str	r3, [sp, #16]
 800f57e:	d18d      	bne.n	800f49c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x5c>
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
 800f580:	f500 7080 	add.w	r0, r0, #256	@ 0x100
 800f584:	e76c      	b.n	800f460 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x20>
 800f586:	bf00      	nop
 800f588:	20027b48 	.word	0x20027b48
 800f58c:	20027348 	.word	0x20027348
 800f590:	20027748 	.word	0x20027748
 800f594:	20026f48 	.word	0x20026f48
 800f598:	20026b48 	.word	0x20026b48
 800f59c:	0802a08f 	.word	0x0802a08f

0800f5a0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 800f5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5a4:	4692      	mov	sl, r2
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 800f5a6:	22c0      	movs	r2, #192	@ 0xc0
{  
 800f5a8:	b089      	sub	sp, #36	@ 0x24
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 800f5aa:	fbb3 f3f2 	udiv	r3, r3, r2
 800f5ae:	9304      	str	r3, [sp, #16]
  

  while(currentMCU < (numberMCU + BlockIndex))
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800f5b0:	4b34      	ldr	r3, [pc, #208]	@ (800f684 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xe4>)
{  
 800f5b2:	9107      	str	r1, [sp, #28]
  currentMCU = BlockIndex;
 800f5b4:	4651      	mov	r1, sl
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800f5b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f5b8:	9200      	str	r2, [sp, #0]
    
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f5ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
    
    pLum = pInBuffer;
    
    for(i= 0; i <  8; i++)
    {
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800f5bc:	691b      	ldr	r3, [r3, #16]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f5be:	9201      	str	r2, [sp, #4]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800f5c0:	9305      	str	r3, [sp, #20]
  while(currentMCU < (numberMCU + BlockIndex))
 800f5c2:	9b04      	ldr	r3, [sp, #16]
 800f5c4:	4453      	add	r3, sl
 800f5c6:	428b      	cmp	r3, r1
 800f5c8:	d803      	bhi.n	800f5d2 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x32>
    }   
    
    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
  }
  return numberMCU;
}
 800f5ca:	9804      	ldr	r0, [sp, #16]
 800f5cc:	b009      	add	sp, #36	@ 0x24
 800f5ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800f5d2:	00cb      	lsls	r3, r1, #3
 800f5d4:	9a00      	ldr	r2, [sp, #0]
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 800f5d6:	9d00      	ldr	r5, [sp, #0]
    currentMCU++;   
 800f5d8:	3101      	adds	r1, #1
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f5da:	9c01      	ldr	r4, [sp, #4]
    pChrom = pInBuffer + 64; /* pChroma = pInBuffer + 4*64 */
 800f5dc:	f100 0640 	add.w	r6, r0, #64	@ 0x40
    pLum = pInBuffer;
 800f5e0:	4684      	mov	ip, r0
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800f5e2:	fbb3 f2f2 	udiv	r2, r3, r2
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 800f5e6:	fb05 3312 	mls	r3, r5, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f5ea:	4354      	muls	r4, r2
    pChrom = pInBuffer + 64; /* pChroma = pInBuffer + 4*64 */
 800f5ec:	2208      	movs	r2, #8
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f5ee:	005b      	lsls	r3, r3, #1
    pChrom = pInBuffer + 64; /* pChroma = pInBuffer + 4*64 */
 800f5f0:	9203      	str	r2, [sp, #12]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f5f2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800f5f6:	9a05      	ldr	r2, [sp, #20]
 800f5f8:	429a      	cmp	r2, r3
 800f5fa:	d93c      	bls.n	800f676 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xd6>
        pOutAddr = pOutBuffer+ refline;
 800f5fc:	9a07      	ldr	r2, [sp, #28]
 800f5fe:	f106 3eff 	add.w	lr, r6, #4294967295
 800f602:	18d4      	adds	r4, r2, r3
          for(j=0; j < 8; j++)
 800f604:	f10c 32ff 	add.w	r2, ip, #4294967295
 800f608:	9202      	str	r2, [sp, #8]
 800f60a:	f104 0210 	add.w	r2, r4, #16
 800f60e:	9206      	str	r2, [sp, #24]
            ycomp = (int32_t)(*(pLum +j));
 800f610:	9f02      	ldr	r7, [sp, #8]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 800f612:	f81e 8f01 	ldrb.w	r8, [lr, #1]!
            ycomp = (int32_t)(*(pLum +j));
 800f616:	f817 2f01 	ldrb.w	r2, [r7, #1]!
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 800f61a:	f89e 9040 	ldrb.w	r9, [lr, #64]	@ 0x40
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f61e:	4d1a      	ldr	r5, [pc, #104]	@ (800f688 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xe8>)
            ycomp = (int32_t)(*(pLum +j));
 800f620:	9702      	str	r7, [sp, #8]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f622:	4f1a      	ldr	r7, [pc, #104]	@ (800f68c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xec>)
 800f624:	442a      	add	r2, r5
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
 800f626:	4d1a      	ldr	r5, [pc, #104]	@ (800f690 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xf0>)
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f628:	f857 7029 	ldr.w	r7, [r7, r9, lsl #2]
 800f62c:	4417      	add	r7, r2
 800f62e:	f897 b100 	ldrb.w	fp, [r7, #256]	@ 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
 800f632:	f855 7028 	ldr.w	r7, [r5, r8, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 800f636:	4d17      	ldr	r5, [pc, #92]	@ (800f694 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xf4>)
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f638:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
 800f63c:	4417      	add	r7, r2
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 800f63e:	f855 9029 	ldr.w	r9, [r5, r9, lsl #2]
 800f642:	4d15      	ldr	r5, [pc, #84]	@ (800f698 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xf8>)
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f644:	f897 7100 	ldrb.w	r7, [r7, #256]	@ 0x100
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 800f648:	f855 8028 	ldr.w	r8, [r5, r8, lsl #2]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f64c:	08ff      	lsrs	r7, r7, #3
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 800f64e:	44c1      	add	r9, r8
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f650:	ea47 27cb 	orr.w	r7, r7, fp, lsl #11
 800f654:	eb02 4229 	add.w	r2, r2, r9, asr #16
 800f658:	f892 2100 	ldrb.w	r2, [r2, #256]	@ 0x100
 800f65c:	0892      	lsrs	r2, r2, #2
 800f65e:	ea47 1742 	orr.w	r7, r7, r2, lsl #5
          for(j=0; j < 8; j++)
 800f662:	9a06      	ldr	r2, [sp, #24]
            *(__IO uint16_t *)pOutAddr = 
 800f664:	f824 7b02 	strh.w	r7, [r4], #2
          for(j=0; j < 8; j++)
 800f668:	4294      	cmp	r4, r2
 800f66a:	d1d1      	bne.n	800f610 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x70>
        refline += JPEG_ConvertorParams.ScaledWidth;          
 800f66c:	9a01      	ldr	r2, [sp, #4]
            pChrom++;
 800f66e:	3608      	adds	r6, #8
          pLum += 8;
 800f670:	f10c 0c08 	add.w	ip, ip, #8
        refline += JPEG_ConvertorParams.ScaledWidth;          
 800f674:	4413      	add	r3, r2
    for(i= 0; i <  8; i++)
 800f676:	9a03      	ldr	r2, [sp, #12]
 800f678:	3a01      	subs	r2, #1
 800f67a:	9203      	str	r2, [sp, #12]
 800f67c:	d1bb      	bne.n	800f5f6 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x56>
    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
 800f67e:	30c0      	adds	r0, #192	@ 0xc0
 800f680:	e79f      	b.n	800f5c2 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x22>
 800f682:	bf00      	nop
 800f684:	20027b48 	.word	0x20027b48
 800f688:	0802a08f 	.word	0x0802a08f
 800f68c:	20027748 	.word	0x20027748
 800f690:	20027348 	.word	0x20027348
 800f694:	20026f48 	.word	0x20026f48
 800f698:	20026b48 	.word	0x20026b48

0800f69c <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 800f69c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6a0:	b085      	sub	sp, #20
 800f6a2:	4604      	mov	r4, r0

  uint32_t i,j, ySample;
  uint8_t *pOutAddr,  *pLum;

  
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
 800f6a4:	0998      	lsrs	r0, r3, #6
{
 800f6a6:	9102      	str	r1, [sp, #8]
  currentMCU = BlockIndex;
  
  while(currentMCU < (numberMCU + BlockIndex))
 800f6a8:	eb02 1393 	add.w	r3, r2, r3, lsr #6
  {
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800f6ac:	491a      	ldr	r1, [pc, #104]	@ (800f718 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x7c>)
  while(currentMCU < (numberMCU + BlockIndex))
 800f6ae:	9303      	str	r3, [sp, #12]
    
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f6b0:	e9d1 8909 	ldrd	r8, r9, [r1, #36]	@ 0x24
    pLum = pInBuffer;
    
    for(i= 0; i <  8; i++)
    { 
      pOutAddr = pOutBuffer + refline;
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800f6b4:	6909      	ldr	r1, [r1, #16]
 800f6b6:	9101      	str	r1, [sp, #4]
  while(currentMCU < (numberMCU + BlockIndex))
 800f6b8:	9b03      	ldr	r3, [sp, #12]
 800f6ba:	4293      	cmp	r3, r2
 800f6bc:	d802      	bhi.n	800f6c4 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x28>
    }
    
    pInBuffer +=  GRAY_444_BLOCK_SIZE;    
  }
  return numberMCU;
}
 800f6be:	b005      	add	sp, #20
 800f6c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800f6c4:	00d3      	lsls	r3, r2, #3
    pLum = pInBuffer;
 800f6c6:	46a4      	mov	ip, r4
    currentMCU++;
 800f6c8:	3201      	adds	r2, #1
 800f6ca:	2708      	movs	r7, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800f6cc:	fbb3 f1f8 	udiv	r1, r3, r8
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 800f6d0:	fb08 3311 	mls	r3, r8, r1, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f6d4:	fb09 f501 	mul.w	r5, r9, r1
 800f6d8:	005b      	lsls	r3, r3, #1
 800f6da:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800f6de:	9901      	ldr	r1, [sp, #4]
 800f6e0:	4299      	cmp	r1, r3
 800f6e2:	d915      	bls.n	800f710 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x74>
      pOutAddr = pOutBuffer + refline;
 800f6e4:	9902      	ldr	r1, [sp, #8]
 800f6e6:	46e2      	mov	sl, ip
 800f6e8:	4419      	add	r1, r3
        for(j=0; j < 8; j++)
 800f6ea:	f101 0b10 	add.w	fp, r1, #16
          ySample =   (uint32_t)(*pLum);
 800f6ee:	f81a 6b01 	ldrb.w	r6, [sl], #1
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
 800f6f2:	08f5      	lsrs	r5, r6, #3
 800f6f4:	08b6      	lsrs	r6, r6, #2
 800f6f6:	ea4f 2ec5 	mov.w	lr, r5, lsl #11
 800f6fa:	ea4e 1e46 	orr.w	lr, lr, r6, lsl #5
 800f6fe:	ea45 050e 	orr.w	r5, r5, lr
 800f702:	f821 5b02 	strh.w	r5, [r1], #2
        for(j=0; j < 8; j++)
 800f706:	4559      	cmp	r1, fp
 800f708:	d1f1      	bne.n	800f6ee <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x52>
          pLum++;
 800f70a:	f10c 0c08 	add.w	ip, ip, #8
        refline += JPEG_ConvertorParams.ScaledWidth;        
 800f70e:	444b      	add	r3, r9
    for(i= 0; i <  8; i++)
 800f710:	3f01      	subs	r7, #1
 800f712:	d1e4      	bne.n	800f6de <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x42>
    pInBuffer +=  GRAY_444_BLOCK_SIZE;    
 800f714:	3440      	adds	r4, #64	@ 0x40
 800f716:	e7cf      	b.n	800f6b8 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1c>
 800f718:	20027b48 	.word	0x20027b48

0800f71c <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 800f71c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f720:	b085      	sub	sp, #20
 800f722:	4605      	mov	r5, r0
        pOutAddr = pOutBuffer+ refline;        

          for(j=0; j < 8; j++)
          {           
            color_k = (int32_t)(*(pChrom + 192));
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 800f724:	27ff      	movs	r7, #255	@ 0xff
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
 800f726:	0a18      	lsrs	r0, r3, #8
{  
 800f728:	9102      	str	r1, [sp, #8]
  while(currentMCU < (numberMCU + BlockIndex))
 800f72a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800f72e:	4927      	ldr	r1, [pc, #156]	@ (800f7cc <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0xb0>)
  while(currentMCU < (numberMCU + BlockIndex))
 800f730:	9303      	str	r3, [sp, #12]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f732:	e9d1 9a09 	ldrd	r9, sl, [r1, #36]	@ 0x24
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800f736:	6909      	ldr	r1, [r1, #16]
 800f738:	9100      	str	r1, [sp, #0]
  while(currentMCU < (numberMCU + BlockIndex))
 800f73a:	9b03      	ldr	r3, [sp, #12]
 800f73c:	4293      	cmp	r3, r2
 800f73e:	d802      	bhi.n	800f746 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x2a>
    }   
    
    pInBuffer +=  CMYK_444_BLOCK_SIZE;
  }
  return numberMCU;
}
 800f740:	b005      	add	sp, #20
 800f742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800f746:	00d1      	lsls	r1, r2, #3
    pChrom = pInBuffer;
 800f748:	46ae      	mov	lr, r5
    currentMCU++;
 800f74a:	3201      	adds	r2, #1
 800f74c:	f04f 0c08 	mov.w	ip, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800f750:	fbb1 f3f9 	udiv	r3, r1, r9
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 800f754:	fb09 1113 	mls	r1, r9, r3, r1
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f758:	fb0a f403 	mul.w	r4, sl, r3
 800f75c:	0049      	lsls	r1, r1, #1
 800f75e:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800f762:	9b00      	ldr	r3, [sp, #0]
 800f764:	428b      	cmp	r3, r1
 800f766:	d92b      	bls.n	800f7c0 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0xa4>
        pOutAddr = pOutBuffer+ refline;        
 800f768:	9b02      	ldr	r3, [sp, #8]
 800f76a:	4674      	mov	r4, lr
 800f76c:	185e      	adds	r6, r3, r1
          for(j=0; j < 8; j++)
 800f76e:	f106 0310 	add.w	r3, r6, #16
 800f772:	9301      	str	r3, [sp, #4]
            color_k = (int32_t)(*(pChrom + 192));
 800f774:	f894 80c0 	ldrb.w	r8, [r4, #192]	@ 0xc0
            pChrom++;
 800f778:	3401      	adds	r4, #1
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
 800f77a:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 800f77e:	f814 bc01 	ldrb.w	fp, [r4, #-1]
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
 800f782:	fb13 f308 	smulbb	r3, r3, r8
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 800f786:	fb1b fb08 	smulbb	fp, fp, r8
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
 800f78a:	fbb3 f3f7 	udiv	r3, r3, r7
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 800f78e:	fbbb fbf7 	udiv	fp, fp, r7
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 800f792:	109b      	asrs	r3, r3, #2
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
 800f794:	ea4f 0beb 	mov.w	fp, fp, asr #3
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 800f798:	015b      	lsls	r3, r3, #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
 800f79a:	ea43 23cb 	orr.w	r3, r3, fp, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
 800f79e:	f894 b07f 	ldrb.w	fp, [r4, #127]	@ 0x7f
 800f7a2:	fb1b fb08 	smulbb	fp, fp, r8
 800f7a6:	fbbb fbf7 	udiv	fp, fp, r7
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 800f7aa:	ea43 03db 	orr.w	r3, r3, fp, lsr #3
 800f7ae:	b29b      	uxth	r3, r3
          *(__IO uint16_t *)pOutAddr = 
 800f7b0:	f826 3b02 	strh.w	r3, [r6], #2
          for(j=0; j < 8; j++)
 800f7b4:	9b01      	ldr	r3, [sp, #4]
 800f7b6:	429e      	cmp	r6, r3
 800f7b8:	d1dc      	bne.n	800f774 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x58>
            pChrom++;
 800f7ba:	f10e 0e08 	add.w	lr, lr, #8
        refline += JPEG_ConvertorParams.ScaledWidth;          
 800f7be:	4451      	add	r1, sl
    for(i= 0; i <  8; i++)
 800f7c0:	f1bc 0c01 	subs.w	ip, ip, #1
 800f7c4:	d1cd      	bne.n	800f762 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x46>
    pInBuffer +=  CMYK_444_BLOCK_SIZE;
 800f7c6:	f505 7580 	add.w	r5, r5, #256	@ 0x100
 800f7ca:	e7b6      	b.n	800f73a <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x1e>
 800f7cc:	20027b48 	.word	0x20027b48

0800f7d0 <JPEG_GetDecodeColorConvertFunc>:
  *                      depending of the jpeg image color space and chroma sampling info. 
  * @param ImageNbMCUs : pointer to uint32_t, used to retrive the total number of MCU blocks in the jpeg image.  
  * @retval HAL status : HAL_OK or HAL_ERROR.
  */
HAL_StatusTypeDef JPEG_GetDecodeColorConvertFunc(JPEG_ConfTypeDef *pJpegInfo, JPEG_YCbCrToRGB_Convert_Function *pFunction, uint32_t *ImageNbMCUs)
{
 800f7d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t hMCU, vMCU;

  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
 800f7d2:	68c3      	ldr	r3, [r0, #12]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
 800f7d4:	6886      	ldr	r6, [r0, #8]
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 800f7d6:	6805      	ldr	r5, [r0, #0]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 800f7d8:	fb06 f703 	mul.w	r7, r6, r3
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 800f7dc:	4c27      	ldr	r4, [pc, #156]	@ (800f87c <JPEG_GetDecodeColorConvertFunc+0xac>)
  
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;  
 800f7de:	6840      	ldr	r0, [r0, #4]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
 800f7e0:	2d10      	cmp	r5, #16
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 800f7e2:	ea4f 0747 	mov.w	r7, r7, lsl #1
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 800f7e6:	6025      	str	r5, [r4, #0]
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
 800f7e8:	60a3      	str	r3, [r4, #8]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
 800f7ea:	60e6      	str	r6, [r4, #12]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 800f7ec:	6127      	str	r7, [r4, #16]
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;  
 800f7ee:	6060      	str	r0, [r4, #4]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
 800f7f0:	d13a      	bne.n	800f868 <JPEG_GetDecodeColorConvertFunc+0x98>
  {
    if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
 800f7f2:	2801      	cmp	r0, #1
 800f7f4:	d120      	bne.n	800f838 <JPEG_GetDecodeColorConvertFunc+0x68>
    {
      *pFunction = JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
      
      if(JPEG_ConvertorParams.LineOffset != 0)
 800f7f6:	f013 000f 	ands.w	r0, r3, #15
      *pFunction = JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
 800f7fa:	4f21      	ldr	r7, [pc, #132]	@ (800f880 <JPEG_GetDecodeColorConvertFunc+0xb0>)
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
 800f7fc:	bf18      	it	ne
 800f7fe:	f1c0 0010 	rsbne	r0, r0, #16
      *pFunction = JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
 800f802:	600f      	str	r7, [r1, #0]
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
 800f804:	6160      	str	r0, [r4, #20]
      }
      JPEG_ConvertorParams.H_factor = 16;
      JPEG_ConvertorParams.V_factor  = 16;
 800f806:	2010      	movs	r0, #16
  else
  {  
    return HAL_ERROR; /* Color space Not supported*/
  }
 
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
 800f808:	6961      	ldr	r1, [r4, #20]
 800f80a:	4419      	add	r1, r3
 800f80c:	6261      	str	r1, [r4, #36]	@ 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
 800f80e:	0059      	lsls	r1, r3, #1
 800f810:	62a1      	str	r1, [r4, #40]	@ 0x28
  
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
 800f812:	fbb3 f1f5 	udiv	r1, r3, r5
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
 800f816:	fb05 3311 	mls	r3, r5, r1, r3
      JPEG_ConvertorParams.V_factor  = 8;
 800f81a:	e9c4 5007 	strd	r5, r0, [r4, #28]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
 800f81e:	b103      	cbz	r3, 800f822 <JPEG_GetDecodeColorConvertFunc+0x52>
  {
    hMCU++; /*+1 for horizenatl incomplete MCU */                
 800f820:	3101      	adds	r1, #1
  }

  vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
 800f822:	fbb6 f3f0 	udiv	r3, r6, r0
  if((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
 800f826:	fb00 6613 	mls	r6, r0, r3, r6
 800f82a:	b106      	cbz	r6, 800f82e <JPEG_GetDecodeColorConvertFunc+0x5e>
  {
    vMCU++; /*+1 for vertical incomplete MCU */                
 800f82c:	3301      	adds	r3, #1
  }
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
 800f82e:	4359      	muls	r1, r3
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;

  return HAL_OK;
 800f830:	2000      	movs	r0, #0
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
 800f832:	62e1      	str	r1, [r4, #44]	@ 0x2c
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
 800f834:	6011      	str	r1, [r2, #0]
}
 800f836:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
 800f838:	2802      	cmp	r0, #2
 800f83a:	d109      	bne.n	800f850 <JPEG_GetDecodeColorConvertFunc+0x80>
      if(JPEG_ConvertorParams.LineOffset != 0)
 800f83c:	f013 000f 	ands.w	r0, r3, #15
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
 800f840:	4f10      	ldr	r7, [pc, #64]	@ (800f884 <JPEG_GetDecodeColorConvertFunc+0xb4>)
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
 800f842:	bf18      	it	ne
 800f844:	f1c0 0010 	rsbne	r0, r0, #16
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
 800f848:	600f      	str	r7, [r1, #0]
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
 800f84a:	6160      	str	r0, [r4, #20]
      JPEG_ConvertorParams.V_factor  = 8;
 800f84c:	2008      	movs	r0, #8
 800f84e:	e7db      	b.n	800f808 <JPEG_GetDecodeColorConvertFunc+0x38>
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
 800f850:	480d      	ldr	r0, [pc, #52]	@ (800f888 <JPEG_GetDecodeColorConvertFunc+0xb8>)
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
 800f852:	6008      	str	r0, [r1, #0]
    if(JPEG_ConvertorParams.LineOffset != 0)
 800f854:	f013 0107 	ands.w	r1, r3, #7
 800f858:	d002      	beq.n	800f860 <JPEG_GetDecodeColorConvertFunc+0x90>
        JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
 800f85a:	f1c1 0108 	rsb	r1, r1, #8
 800f85e:	e000      	b.n	800f862 <JPEG_GetDecodeColorConvertFunc+0x92>
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 800f860:	2100      	movs	r1, #0
 800f862:	2508      	movs	r5, #8
        JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
 800f864:	6161      	str	r1, [r4, #20]
      JPEG_ConvertorParams.V_factor  = 8;
 800f866:	e7f1      	b.n	800f84c <JPEG_GetDecodeColorConvertFunc+0x7c>
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
 800f868:	b90d      	cbnz	r5, 800f86e <JPEG_GetDecodeColorConvertFunc+0x9e>
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
 800f86a:	4808      	ldr	r0, [pc, #32]	@ (800f88c <JPEG_GetDecodeColorConvertFunc+0xbc>)
 800f86c:	e7f1      	b.n	800f852 <JPEG_GetDecodeColorConvertFunc+0x82>
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
 800f86e:	2d30      	cmp	r5, #48	@ 0x30
 800f870:	d101      	bne.n	800f876 <JPEG_GetDecodeColorConvertFunc+0xa6>
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
 800f872:	4807      	ldr	r0, [pc, #28]	@ (800f890 <JPEG_GetDecodeColorConvertFunc+0xc0>)
 800f874:	e7ed      	b.n	800f852 <JPEG_GetDecodeColorConvertFunc+0x82>
    return HAL_ERROR; /* Color space Not supported*/
 800f876:	2001      	movs	r0, #1
 800f878:	e7dd      	b.n	800f836 <JPEG_GetDecodeColorConvertFunc+0x66>
 800f87a:	bf00      	nop
 800f87c:	20027b48 	.word	0x20027b48
 800f880:	0800f245 	.word	0x0800f245
 800f884:	0800f441 	.word	0x0800f441
 800f888:	0800f5a1 	.word	0x0800f5a1
 800f88c:	0800f69d 	.word	0x0800f69d
 800f890:	0800f71d 	.word	0x0800f71d

0800f894 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800f894:	8880      	ldrh	r0, [r0, #4]
 800f896:	4770      	bx	lr

0800f898 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800f898:	b570      	push	{r4, r5, r6, lr}
 800f89a:	6803      	ldr	r3, [r0, #0]
 800f89c:	460c      	mov	r4, r1
 800f89e:	2100      	movs	r1, #0
 800f8a0:	4605      	mov	r5, r0
 800f8a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f8a4:	4798      	blx	r3
 800f8a6:	4606      	mov	r6, r0
 800f8a8:	682b      	ldr	r3, [r5, #0]
 800f8aa:	4628      	mov	r0, r5
 800f8ac:	1ba4      	subs	r4, r4, r6
 800f8ae:	6a1b      	ldr	r3, [r3, #32]
 800f8b0:	b2a4      	uxth	r4, r4
 800f8b2:	4798      	blx	r3
 800f8b4:	fbb4 f0f0 	udiv	r0, r4, r0
 800f8b8:	bd70      	pop	{r4, r5, r6, pc}

0800f8ba <_ZN8touchgfx17AbstractPartition5clearEv>:
 800f8ba:	2300      	movs	r3, #0
 800f8bc:	8083      	strh	r3, [r0, #4]
 800f8be:	4770      	bx	lr

0800f8c0 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800f8c0:	b510      	push	{r4, lr}
 800f8c2:	6803      	ldr	r3, [r0, #0]
 800f8c4:	4604      	mov	r4, r0
 800f8c6:	8881      	ldrh	r1, [r0, #4]
 800f8c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f8ca:	4798      	blx	r3
 800f8cc:	88a3      	ldrh	r3, [r4, #4]
 800f8ce:	3301      	adds	r3, #1
 800f8d0:	80a3      	strh	r3, [r4, #4]
 800f8d2:	bd10      	pop	{r4, pc}

0800f8d4 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800f8d4:	6803      	ldr	r3, [r0, #0]
 800f8d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f8d8:	4718      	bx	r3

0800f8da <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800f8da:	4770      	bx	lr

0800f8dc <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800f8dc:	4a02      	ldr	r2, [pc, #8]	@ (800f8e8 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800f8de:	6002      	str	r2, [r0, #0]
 800f8e0:	2200      	movs	r2, #0
 800f8e2:	8082      	strh	r2, [r0, #4]
 800f8e4:	4770      	bx	lr
 800f8e6:	bf00      	nop
 800f8e8:	0802a398 	.word	0x0802a398

0800f8ec <_ZN8touchgfx12LineProgress10setPainterERNS_15AbstractPainterE>:
 800f8ec:	f8c0 10dc 	str.w	r1, [r0, #220]	@ 0xdc
 800f8f0:	4770      	bx	lr

0800f8f2 <_ZNK8touchgfx12LineProgress8getStartERiS1_>:
 800f8f2:	b530      	push	{r4, r5, lr}
 800f8f4:	f8d0 4124 	ldr.w	r4, [r0, #292]	@ 0x124
 800f8f8:	2520      	movs	r5, #32
 800f8fa:	fb94 f4f5 	sdiv	r4, r4, r5
 800f8fe:	600c      	str	r4, [r1, #0]
 800f900:	f8d0 3128 	ldr.w	r3, [r0, #296]	@ 0x128
 800f904:	fb93 f3f5 	sdiv	r3, r3, r5
 800f908:	6013      	str	r3, [r2, #0]
 800f90a:	bd30      	pop	{r4, r5, pc}

0800f90c <_ZN8touchgfx12LineProgress6setEndEii>:
 800f90c:	0149      	lsls	r1, r1, #5
 800f90e:	0152      	lsls	r2, r2, #5
 800f910:	f8c0 112c 	str.w	r1, [r0, #300]	@ 0x12c
 800f914:	f8c0 2130 	str.w	r2, [r0, #304]	@ 0x130
 800f918:	4770      	bx	lr

0800f91a <_ZNK8touchgfx12LineProgress6getEndERiS1_>:
 800f91a:	b530      	push	{r4, r5, lr}
 800f91c:	f8d0 412c 	ldr.w	r4, [r0, #300]	@ 0x12c
 800f920:	2520      	movs	r5, #32
 800f922:	fb94 f4f5 	sdiv	r4, r4, r5
 800f926:	600c      	str	r4, [r1, #0]
 800f928:	f8d0 3130 	ldr.w	r3, [r0, #304]	@ 0x130
 800f92c:	fb93 f3f5 	sdiv	r3, r3, r5
 800f930:	6013      	str	r3, [r2, #0]
 800f932:	bd30      	pop	{r4, r5, pc}

0800f934 <_ZNK8touchgfx12LineProgress12getLineWidthEv>:
 800f934:	f8d0 00f0 	ldr.w	r0, [r0, #240]	@ 0xf0
 800f938:	2320      	movs	r3, #32
 800f93a:	fb90 f0f3 	sdiv	r0, r0, r3
 800f93e:	4770      	bx	lr

0800f940 <_ZN8touchgfx12LineProgressD1Ev>:
 800f940:	4770      	bx	lr

0800f942 <_ZN8touchgfx12LineProgress8setStartEii>:
 800f942:	0149      	lsls	r1, r1, #5
 800f944:	30b4      	adds	r0, #180	@ 0xb4
 800f946:	0152      	lsls	r2, r2, #5
 800f948:	6701      	str	r1, [r0, #112]	@ 0x70
 800f94a:	6742      	str	r2, [r0, #116]	@ 0x74
 800f94c:	f002 b927 	b.w	8011b9e <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>

0800f950 <_ZN8touchgfx12LineProgress12setLineWidthEi>:
 800f950:	0149      	lsls	r1, r1, #5
 800f952:	f8d0 30f0 	ldr.w	r3, [r0, #240]	@ 0xf0
 800f956:	4299      	cmp	r1, r3
 800f958:	d004      	beq.n	800f964 <_ZN8touchgfx12LineProgress12setLineWidthEi+0x14>
 800f95a:	f8c0 10f0 	str.w	r1, [r0, #240]	@ 0xf0
 800f95e:	30b4      	adds	r0, #180	@ 0xb4
 800f960:	f002 b827 	b.w	80119b2 <_ZN8touchgfx4Line17updateCachedShapeEv>
 800f964:	4770      	bx	lr

0800f966 <_ZN8touchgfx12LineProgress18setLineEndingStyleENS_4Line17LINE_ENDING_STYLEE>:
 800f966:	30b4      	adds	r0, #180	@ 0xb4
 800f968:	f002 b93e 	b.w	8011be8 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

0800f96c <_ZNK8touchgfx12LineProgress18getLineEndingStyleEv>:
 800f96c:	30b4      	adds	r0, #180	@ 0xb4
 800f96e:	f002 b81d 	b.w	80119ac <_ZNK8touchgfx4Line18getLineEndingStyleEv>

0800f972 <_ZN8touchgfx12LineProgress8setAlphaEh>:
 800f972:	b538      	push	{r3, r4, r5, lr}
 800f974:	4604      	mov	r4, r0
 800f976:	460d      	mov	r5, r1
 800f978:	f000 f8e2 	bl	800fb40 <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>
 800f97c:	f884 50da 	strb.w	r5, [r4, #218]	@ 0xda
 800f980:	bd38      	pop	{r3, r4, r5, pc}

0800f982 <_ZN8touchgfx12LineProgressD0Ev>:
 800f982:	b510      	push	{r4, lr}
 800f984:	4604      	mov	r4, r0
 800f986:	f44f 719a 	mov.w	r1, #308	@ 0x134
 800f98a:	f016 f860 	bl	8025a4e <_ZdlPvj>
 800f98e:	4620      	mov	r0, r4
 800f990:	bd10      	pop	{r4, pc}

0800f992 <_ZN8touchgfx12LineProgress8setValueEi>:
 800f992:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f994:	f8b0 3090 	ldrh.w	r3, [r0, #144]	@ 0x90
 800f998:	4604      	mov	r4, r0
 800f99a:	b33b      	cbz	r3, 800f9ec <_ZN8touchgfx12LineProgress8setValueEi+0x5a>
 800f99c:	f000 f923 	bl	800fbe6 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 800f9a0:	f8b4 1090 	ldrh.w	r1, [r4, #144]	@ 0x90
 800f9a4:	4620      	mov	r0, r4
 800f9a6:	2720      	movs	r7, #32
 800f9a8:	f000 f93f 	bl	800fc2a <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 800f9ac:	f8d4 1124 	ldr.w	r1, [r4, #292]	@ 0x124
 800f9b0:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
 800f9b4:	f8d4 312c 	ldr.w	r3, [r4, #300]	@ 0x12c
 800f9b8:	f8d4 5130 	ldr.w	r5, [r4, #304]	@ 0x130
 800f9bc:	1a5b      	subs	r3, r3, r1
 800f9be:	f8b4 6090 	ldrh.w	r6, [r4, #144]	@ 0x90
 800f9c2:	1aad      	subs	r5, r5, r2
 800f9c4:	015b      	lsls	r3, r3, #5
 800f9c6:	016d      	lsls	r5, r5, #5
 800f9c8:	fb93 f3f6 	sdiv	r3, r3, r6
 800f9cc:	fb95 f5f6 	sdiv	r5, r5, r6
 800f9d0:	4343      	muls	r3, r0
 800f9d2:	4368      	muls	r0, r5
 800f9d4:	fb93 f3f7 	sdiv	r3, r3, r7
 800f9d8:	fb90 f0f7 	sdiv	r0, r0, r7
 800f9dc:	4419      	add	r1, r3
 800f9de:	4402      	add	r2, r0
 800f9e0:	f104 00b4 	add.w	r0, r4, #180	@ 0xb4
 800f9e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f9e8:	f002 b8e4 	b.w	8011bb4 <_ZN8touchgfx4Line9updateEndENS_7CWRUtil2Q5ES2_>
 800f9ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f9ee <_ZNK8touchgfx25AbstractProgressIndicator17invalidateContentEv>:
 800f9ee:	b510      	push	{r4, lr}
 800f9f0:	6803      	ldr	r3, [r0, #0]
 800f9f2:	4604      	mov	r4, r0
 800f9f4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800f9f8:	4798      	blx	r3
 800f9fa:	b140      	cbz	r0, 800fa0e <_ZNK8touchgfx25AbstractProgressIndicator17invalidateContentEv+0x20>
 800f9fc:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800fa00:	b12b      	cbz	r3, 800fa0e <_ZNK8touchgfx25AbstractProgressIndicator17invalidateContentEv+0x20>
 800fa02:	6823      	ldr	r3, [r4, #0]
 800fa04:	4620      	mov	r0, r4
 800fa06:	695b      	ldr	r3, [r3, #20]
 800fa08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fa0c:	4718      	bx	r3
 800fa0e:	bd10      	pop	{r4, pc}

0800fa10 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 800fa10:	b570      	push	{r4, r5, r6, lr}
 800fa12:	6803      	ldr	r3, [r0, #0]
 800fa14:	4604      	mov	r4, r0
 800fa16:	4615      	mov	r5, r2
 800fa18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa1a:	4798      	blx	r3
 800fa1c:	6823      	ldr	r3, [r4, #0]
 800fa1e:	4629      	mov	r1, r5
 800fa20:	4620      	mov	r0, r4
 800fa22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fa28:	4718      	bx	r3

0800fa2a <_ZN8touchgfx12LineProgress28setProgressIndicatorPositionEssss>:
 800fa2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa2e:	461d      	mov	r5, r3
 800fa30:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
 800fa34:	2300      	movs	r3, #0
 800fa36:	4604      	mov	r4, r0
 800fa38:	460f      	mov	r7, r1
 800fa3a:	4690      	mov	r8, r2
 800fa3c:	f8c0 30b8 	str.w	r3, [r0, #184]	@ 0xb8
 800fa40:	4632      	mov	r2, r6
 800fa42:	4629      	mov	r1, r5
 800fa44:	30b4      	adds	r0, #180	@ 0xb4
 800fa46:	f7ff ffe3 	bl	800fa10 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800fa4a:	9606      	str	r6, [sp, #24]
 800fa4c:	462b      	mov	r3, r5
 800fa4e:	4642      	mov	r2, r8
 800fa50:	4639      	mov	r1, r7
 800fa52:	4620      	mov	r0, r4
 800fa54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa58:	f000 b95a 	b.w	800fd10 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

0800fa5c <_ZN8touchgfx12LineProgressC1Ev>:
 800fa5c:	b570      	push	{r4, r5, r6, lr}
 800fa5e:	4604      	mov	r4, r0
 800fa60:	f000 f982 	bl	800fd68 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 800fa64:	4b0f      	ldr	r3, [pc, #60]	@ (800faa4 <_ZN8touchgfx12LineProgressC1Ev+0x48>)
 800fa66:	2600      	movs	r6, #0
 800fa68:	4625      	mov	r5, r4
 800fa6a:	f845 3bb4 	str.w	r3, [r5], #180
 800fa6e:	4628      	mov	r0, r5
 800fa70:	f001 ff7c 	bl	801196c <_ZN8touchgfx4LineC1Ev>
 800fa74:	4629      	mov	r1, r5
 800fa76:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fa7a:	f8c4 6124 	str.w	r6, [r4, #292]	@ 0x124
 800fa7e:	f8c4 6128 	str.w	r6, [r4, #296]	@ 0x128
 800fa82:	f8c4 612c 	str.w	r6, [r4, #300]	@ 0x12c
 800fa86:	f8c4 6130 	str.w	r6, [r4, #304]	@ 0x130
 800fa8a:	f000 f9cd 	bl	800fe28 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800fa8e:	4628      	mov	r0, r5
 800fa90:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800fa94:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 800fa98:	f8c4 60b8 	str.w	r6, [r4, #184]	@ 0xb8
 800fa9c:	f7ff ffb8 	bl	800fa10 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800faa0:	4620      	mov	r0, r4
 800faa2:	bd70      	pop	{r4, r5, r6, pc}
 800faa4:	0802a3cc 	.word	0x0802a3cc

0800faa8 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 800faa8:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	@ 0x5c
 800faac:	4770      	bx	lr

0800faae <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 800faae:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	@ 0x5e
 800fab2:	4770      	bx	lr

0800fab4 <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 800fab4:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	@ 0x60
 800fab8:	4770      	bx	lr

0800faba <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 800faba:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	@ 0x62
 800fabe:	4770      	bx	lr

0800fac0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>:
 800fac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fac2:	461e      	mov	r6, r3
 800fac4:	6803      	ldr	r3, [r0, #0]
 800fac6:	460f      	mov	r7, r1
 800fac8:	4604      	mov	r4, r0
 800faca:	4615      	mov	r5, r2
 800facc:	e9c0 1221 	strd	r1, r2, [r0, #132]	@ 0x84
 800fad0:	f8d0 108c 	ldr.w	r1, [r0, #140]	@ 0x8c
 800fad4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800fad8:	4798      	blx	r3
 800fada:	b93e      	cbnz	r6, 800faec <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x2c>
 800fadc:	1bed      	subs	r5, r5, r7
 800fade:	f8a4 5090 	strh.w	r5, [r4, #144]	@ 0x90
 800fae2:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800fae6:	f8a4 3092 	strh.w	r3, [r4, #146]	@ 0x92
 800faea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800faec:	f8a4 6090 	strh.w	r6, [r4, #144]	@ 0x90
 800faf0:	e7f7      	b.n	800fae2 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x22>

0800faf2 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_RtS2_>:
 800faf2:	b510      	push	{r4, lr}
 800faf4:	f8d0 4084 	ldr.w	r4, [r0, #132]	@ 0x84
 800faf8:	600c      	str	r4, [r1, #0]
 800fafa:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
 800fafe:	6011      	str	r1, [r2, #0]
 800fb00:	f8b0 2090 	ldrh.w	r2, [r0, #144]	@ 0x90
 800fb04:	801a      	strh	r2, [r3, #0]
 800fb06:	9b02      	ldr	r3, [sp, #8]
 800fb08:	f8b0 2092 	ldrh.w	r2, [r0, #146]	@ 0x92
 800fb0c:	801a      	strh	r2, [r3, #0]
 800fb0e:	bd10      	pop	{r4, pc}

0800fb10 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_Rt>:
 800fb10:	b510      	push	{r4, lr}
 800fb12:	f8d0 4084 	ldr.w	r4, [r0, #132]	@ 0x84
 800fb16:	600c      	str	r4, [r1, #0]
 800fb18:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
 800fb1c:	6011      	str	r1, [r2, #0]
 800fb1e:	f8b0 2090 	ldrh.w	r2, [r0, #144]	@ 0x90
 800fb22:	801a      	strh	r2, [r3, #0]
 800fb24:	bd10      	pop	{r4, pc}

0800fb26 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_>:
 800fb26:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 800fb2a:	600b      	str	r3, [r1, #0]
 800fb2c:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 800fb30:	6013      	str	r3, [r2, #0]
 800fb32:	4770      	bx	lr

0800fb34 <_ZN8touchgfx25AbstractProgressIndicator17setEasingEquationEPFstsstE>:
 800fb34:	f8c0 1094 	str.w	r1, [r0, #148]	@ 0x94
 800fb38:	4770      	bx	lr

0800fb3a <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 800fb3a:	f8d0 008c 	ldr.w	r0, [r0, #140]	@ 0x8c
 800fb3e:	4770      	bx	lr

0800fb40 <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>:
 800fb40:	f880 1054 	strb.w	r1, [r0, #84]	@ 0x54
 800fb44:	4770      	bx	lr

0800fb46 <_ZNK8touchgfx25AbstractProgressIndicator8getAlphaEv>:
 800fb46:	f890 0054 	ldrb.w	r0, [r0, #84]	@ 0x54
 800fb4a:	4770      	bx	lr

0800fb4c <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 800fb4c:	4770      	bx	lr

0800fb4e <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 800fb4e:	b510      	push	{r4, lr}
 800fb50:	4604      	mov	r4, r0
 800fb52:	21b4      	movs	r1, #180	@ 0xb4
 800fb54:	f015 ff7b 	bl	8025a4e <_ZdlPvj>
 800fb58:	4620      	mov	r0, r4
 800fb5a:	bd10      	pop	{r4, pc}

0800fb5c <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit>:
 800fb5c:	b570      	push	{r4, r5, r6, lr}
 800fb5e:	f8d0 5084 	ldr.w	r5, [r0, #132]	@ 0x84
 800fb62:	4604      	mov	r4, r0
 800fb64:	4616      	mov	r6, r2
 800fb66:	428d      	cmp	r5, r1
 800fb68:	bfb8      	it	lt
 800fb6a:	460d      	movlt	r5, r1
 800fb6c:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
 800fb70:	428d      	cmp	r5, r1
 800fb72:	bfa8      	it	ge
 800fb74:	460d      	movge	r5, r1
 800fb76:	b99a      	cbnz	r2, 800fba0 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x44>
 800fb78:	6803      	ldr	r3, [r0, #0]
 800fb7a:	4629      	mov	r1, r5
 800fb7c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800fb80:	4798      	blx	r3
 800fb82:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 800fb86:	b368      	cbz	r0, 800fbe4 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x88>
 800fb88:	6803      	ldr	r3, [r0, #0]
 800fb8a:	68db      	ldr	r3, [r3, #12]
 800fb8c:	4798      	blx	r3
 800fb8e:	b348      	cbz	r0, 800fbe4 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x88>
 800fb90:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 800fb94:	4621      	mov	r1, r4
 800fb96:	6803      	ldr	r3, [r0, #0]
 800fb98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fb9c:	689b      	ldr	r3, [r3, #8]
 800fb9e:	4718      	bx	r3
 800fba0:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	dd08      	ble.n	800fbba <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x5e>
 800fba8:	f006 fa16 	bl	8015fd8 <_ZN8touchgfx11Application11getInstanceEv>
 800fbac:	4621      	mov	r1, r4
 800fbae:	3004      	adds	r0, #4
 800fbb0:	f006 fa5f 	bl	8016072 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 800fbb4:	2300      	movs	r3, #0
 800fbb6:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
 800fbba:	6823      	ldr	r3, [r4, #0]
 800fbbc:	4620      	mov	r0, r4
 800fbbe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800fbc2:	4798      	blx	r3
 800fbc4:	2300      	movs	r3, #0
 800fbc6:	f8c4 60a4 	str.w	r6, [r4, #164]	@ 0xa4
 800fbca:	f8c4 30a8 	str.w	r3, [r4, #168]	@ 0xa8
 800fbce:	e9c4 0527 	strd	r0, r5, [r4, #156]	@ 0x9c
 800fbd2:	f006 fa01 	bl	8015fd8 <_ZN8touchgfx11Application11getInstanceEv>
 800fbd6:	4621      	mov	r1, r4
 800fbd8:	3004      	adds	r0, #4
 800fbda:	f006 faf3 	bl	80161c4 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
 800fbde:	2301      	movs	r3, #1
 800fbe0:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
 800fbe4:	bd70      	pop	{r4, r5, r6, pc}

0800fbe6 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 800fbe6:	b510      	push	{r4, lr}
 800fbe8:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 800fbec:	4604      	mov	r4, r0
 800fbee:	4299      	cmp	r1, r3
 800fbf0:	bfb8      	it	lt
 800fbf2:	4619      	movlt	r1, r3
 800fbf4:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 800fbf8:	4299      	cmp	r1, r3
 800fbfa:	bfa8      	it	ge
 800fbfc:	4619      	movge	r1, r3
 800fbfe:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 800fc02:	428b      	cmp	r3, r1
 800fc04:	d010      	beq.n	800fc28 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 800fc06:	f8c0 108c 	str.w	r1, [r0, #140]	@ 0x8c
 800fc0a:	f8d0 00ac 	ldr.w	r0, [r0, #172]	@ 0xac
 800fc0e:	b158      	cbz	r0, 800fc28 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 800fc10:	6803      	ldr	r3, [r0, #0]
 800fc12:	68db      	ldr	r3, [r3, #12]
 800fc14:	4798      	blx	r3
 800fc16:	b138      	cbz	r0, 800fc28 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 800fc18:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
 800fc1c:	4621      	mov	r1, r4
 800fc1e:	6803      	ldr	r3, [r0, #0]
 800fc20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fc24:	689b      	ldr	r3, [r3, #8]
 800fc26:	4718      	bx	r3
 800fc28:	bd10      	pop	{r4, pc}

0800fc2a <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 800fc2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fc2c:	4604      	mov	r4, r0
 800fc2e:	460d      	mov	r5, r1
 800fc30:	b1a9      	cbz	r1, 800fc5e <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x34>
 800fc32:	f8b0 6092 	ldrh.w	r6, [r0, #146]	@ 0x92
 800fc36:	ab01      	add	r3, sp, #4
 800fc38:	f8b4 1090 	ldrh.w	r1, [r4, #144]	@ 0x90
 800fc3c:	f8d4 708c 	ldr.w	r7, [r4, #140]	@ 0x8c
 800fc40:	1b89      	subs	r1, r1, r6
 800fc42:	e9d0 0221 	ldrd	r0, r2, [r0, #132]	@ 0x84
 800fc46:	1a12      	subs	r2, r2, r0
 800fc48:	1a38      	subs	r0, r7, r0
 800fc4a:	f007 fc24 	bl	8017496 <_ZN8touchgfx6muldivElllRl>
 800fc4e:	4629      	mov	r1, r5
 800fc50:	ab01      	add	r3, sp, #4
 800fc52:	f8b4 2090 	ldrh.w	r2, [r4, #144]	@ 0x90
 800fc56:	4430      	add	r0, r6
 800fc58:	f007 fc1d 	bl	8017496 <_ZN8touchgfx6muldivElllRl>
 800fc5c:	b285      	uxth	r5, r0
 800fc5e:	4628      	mov	r0, r5
 800fc60:	b003      	add	sp, #12
 800fc62:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fc64 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv>:
 800fc64:	b570      	push	{r4, r5, r6, lr}
 800fc66:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
 800fc6a:	4604      	mov	r4, r0
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d035      	beq.n	800fcdc <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 800fc70:	f8d0 00a8 	ldr.w	r0, [r0, #168]	@ 0xa8
 800fc74:	2100      	movs	r1, #0
 800fc76:	f8d4 5094 	ldr.w	r5, [r4, #148]	@ 0x94
 800fc7a:	3001      	adds	r0, #1
 800fc7c:	e9d4 3227 	ldrd	r3, r2, [r4, #156]	@ 0x9c
 800fc80:	f8c4 00a8 	str.w	r0, [r4, #168]	@ 0xa8
 800fc84:	b280      	uxth	r0, r0
 800fc86:	1ad2      	subs	r2, r2, r3
 800fc88:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 800fc8c:	b212      	sxth	r2, r2
 800fc8e:	47a8      	blx	r5
 800fc90:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 800fc94:	6823      	ldr	r3, [r4, #0]
 800fc96:	4401      	add	r1, r0
 800fc98:	4620      	mov	r0, r4
 800fc9a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800fc9e:	4798      	blx	r3
 800fca0:	e9d4 3229 	ldrd	r3, r2, [r4, #164]	@ 0xa4
 800fca4:	429a      	cmp	r2, r3
 800fca6:	db19      	blt.n	800fcdc <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 800fca8:	2500      	movs	r5, #0
 800fcaa:	e9c4 5529 	strd	r5, r5, [r4, #164]	@ 0xa4
 800fcae:	f006 f993 	bl	8015fd8 <_ZN8touchgfx11Application11getInstanceEv>
 800fcb2:	4621      	mov	r1, r4
 800fcb4:	3004      	adds	r0, #4
 800fcb6:	f006 f9dc 	bl	8016072 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 800fcba:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 800fcbe:	f884 5098 	strb.w	r5, [r4, #152]	@ 0x98
 800fcc2:	b158      	cbz	r0, 800fcdc <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 800fcc4:	6803      	ldr	r3, [r0, #0]
 800fcc6:	68db      	ldr	r3, [r3, #12]
 800fcc8:	4798      	blx	r3
 800fcca:	b138      	cbz	r0, 800fcdc <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 800fccc:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 800fcd0:	4621      	mov	r1, r4
 800fcd2:	6803      	ldr	r3, [r0, #0]
 800fcd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fcd8:	689b      	ldr	r3, [r3, #8]
 800fcda:	4718      	bx	r3
 800fcdc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800fce0 <_ZN8touchgfx8DrawableC1Ev>:
 800fce0:	4a0a      	ldr	r2, [pc, #40]	@ (800fd0c <_ZN8touchgfx8DrawableC1Ev+0x2c>)
 800fce2:	6002      	str	r2, [r0, #0]
 800fce4:	2200      	movs	r2, #0
 800fce6:	8082      	strh	r2, [r0, #4]
 800fce8:	80c2      	strh	r2, [r0, #6]
 800fcea:	8102      	strh	r2, [r0, #8]
 800fcec:	8142      	strh	r2, [r0, #10]
 800fcee:	8182      	strh	r2, [r0, #12]
 800fcf0:	81c2      	strh	r2, [r0, #14]
 800fcf2:	8202      	strh	r2, [r0, #16]
 800fcf4:	8242      	strh	r2, [r0, #18]
 800fcf6:	61c2      	str	r2, [r0, #28]
 800fcf8:	8402      	strh	r2, [r0, #32]
 800fcfa:	8442      	strh	r2, [r0, #34]	@ 0x22
 800fcfc:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 800fd00:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800fd04:	2201      	movs	r2, #1
 800fd06:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
 800fd0a:	4770      	bx	lr
 800fd0c:	0802af1c 	.word	0x0802af1c

0800fd10 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 800fd10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd14:	4604      	mov	r4, r0
 800fd16:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
 800fd1a:	4698      	mov	r8, r3
 800fd1c:	460e      	mov	r6, r1
 800fd1e:	4615      	mov	r5, r2
 800fd20:	f8a4 105c 	strh.w	r1, [r4, #92]	@ 0x5c
 800fd24:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
 800fd28:	4619      	mov	r1, r3
 800fd2a:	463a      	mov	r2, r7
 800fd2c:	3058      	adds	r0, #88	@ 0x58
 800fd2e:	f7ff fe6f 	bl	800fa10 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800fd32:	4446      	add	r6, r8
 800fd34:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800fd38:	443d      	add	r5, r7
 800fd3a:	42b3      	cmp	r3, r6
 800fd3c:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800fd40:	bfb8      	it	lt
 800fd42:	8126      	strhlt	r6, [r4, #8]
 800fd44:	42ab      	cmp	r3, r5
 800fd46:	bfb8      	it	lt
 800fd48:	8165      	strhlt	r5, [r4, #10]
 800fd4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fd4e <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 800fd4e:	b510      	push	{r4, lr}
 800fd50:	4604      	mov	r4, r0
 800fd52:	302c      	adds	r0, #44	@ 0x2c
 800fd54:	f003 fdbd 	bl	80138d2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800fd58:	f9b4 2036 	ldrsh.w	r2, [r4, #54]	@ 0x36
 800fd5c:	4620      	mov	r0, r4
 800fd5e:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	@ 0x34
 800fd62:	f7ff fe55 	bl	800fa10 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800fd66:	bd10      	pop	{r4, pc}

0800fd68 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 800fd68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fd6a:	4604      	mov	r4, r0
 800fd6c:	2500      	movs	r5, #0
 800fd6e:	f7ff ffb7 	bl	800fce0 <_ZN8touchgfx8DrawableC1Ev>
 800fd72:	4b24      	ldr	r3, [pc, #144]	@ (800fe04 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x9c>)
 800fd74:	4626      	mov	r6, r4
 800fd76:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 800fd7a:	2226      	movs	r2, #38	@ 0x26
 800fd7c:	4629      	mov	r1, r5
 800fd7e:	62a5      	str	r5, [r4, #40]	@ 0x28
 800fd80:	f846 3b2c 	str.w	r3, [r6], #44
 800fd84:	4630      	mov	r0, r6
 800fd86:	f8ad 7004 	strh.w	r7, [sp, #4]
 800fd8a:	f016 f92b 	bl	8025fe4 <memset>
 800fd8e:	4630      	mov	r0, r6
 800fd90:	f7ff ffa6 	bl	800fce0 <_ZN8touchgfx8DrawableC1Ev>
 800fd94:	a902      	add	r1, sp, #8
 800fd96:	4b1c      	ldr	r3, [pc, #112]	@ (800fe08 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa0>)
 800fd98:	4630      	mov	r0, r6
 800fd9a:	f884 7054 	strb.w	r7, [r4, #84]	@ 0x54
 800fd9e:	f104 0758 	add.w	r7, r4, #88	@ 0x58
 800fda2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fda4:	f831 3d04 	ldrh.w	r3, [r1, #-4]!
 800fda8:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
 800fdac:	f003 fd91 	bl	80138d2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800fdb0:	4638      	mov	r0, r7
 800fdb2:	f7ff ff95 	bl	800fce0 <_ZN8touchgfx8DrawableC1Ev>
 800fdb6:	4b15      	ldr	r3, [pc, #84]	@ (800fe0c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa4>)
 800fdb8:	4629      	mov	r1, r5
 800fdba:	4630      	mov	r0, r6
 800fdbc:	65a3      	str	r3, [r4, #88]	@ 0x58
 800fdbe:	2364      	movs	r3, #100	@ 0x64
 800fdc0:	f884 5098 	strb.w	r5, [r4, #152]	@ 0x98
 800fdc4:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 800fdc8:	e9c4 3522 	strd	r3, r5, [r4, #136]	@ 0x88
 800fdcc:	4b10      	ldr	r3, [pc, #64]	@ (800fe10 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa8>)
 800fdce:	e9c4 5520 	strd	r5, r5, [r4, #128]	@ 0x80
 800fdd2:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
 800fdd6:	e9c4 5527 	strd	r5, r5, [r4, #156]	@ 0x9c
 800fdda:	e9c4 5529 	strd	r5, r5, [r4, #164]	@ 0xa4
 800fdde:	e9c4 552b 	strd	r5, r5, [r4, #172]	@ 0xac
 800fde2:	f7f2 fa05 	bl	80021f0 <_ZN8touchgfx8Drawable4setXEs>
 800fde6:	4629      	mov	r1, r5
 800fde8:	4630      	mov	r0, r6
 800fdea:	f7f2 fa03 	bl	80021f4 <_ZN8touchgfx8Drawable4setYEs>
 800fdee:	4631      	mov	r1, r6
 800fdf0:	4620      	mov	r0, r4
 800fdf2:	f000 f819 	bl	800fe28 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800fdf6:	4620      	mov	r0, r4
 800fdf8:	4639      	mov	r1, r7
 800fdfa:	f000 f815 	bl	800fe28 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800fdfe:	4620      	mov	r0, r4
 800fe00:	b003      	add	sp, #12
 800fe02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe04:	0802a4c4 	.word	0x0802a4c4
 800fe08:	0802ae54 	.word	0x0802ae54
 800fe0c:	0802a598 	.word	0x0802a598
 800fe10:	08017bf3 	.word	0x08017bf3

0800fe14 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800fe14:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800fe16:	2000      	movs	r0, #0
 800fe18:	b12b      	cbz	r3, 800fe26 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800fe1a:	b920      	cbnz	r0, 800fe26 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800fe1c:	1a5a      	subs	r2, r3, r1
 800fe1e:	699b      	ldr	r3, [r3, #24]
 800fe20:	4250      	negs	r0, r2
 800fe22:	4150      	adcs	r0, r2
 800fe24:	e7f8      	b.n	800fe18 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800fe26:	4770      	bx	lr

0800fe28 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800fe28:	2300      	movs	r3, #0
 800fe2a:	6148      	str	r0, [r1, #20]
 800fe2c:	618b      	str	r3, [r1, #24]
 800fe2e:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800fe30:	b913      	cbnz	r3, 800fe38 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 800fe32:	6281      	str	r1, [r0, #40]	@ 0x28
 800fe34:	4770      	bx	lr
 800fe36:	4613      	mov	r3, r2
 800fe38:	699a      	ldr	r2, [r3, #24]
 800fe3a:	2a00      	cmp	r2, #0
 800fe3c:	d1fb      	bne.n	800fe36 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 800fe3e:	6199      	str	r1, [r3, #24]
 800fe40:	4770      	bx	lr

0800fe42 <_ZN8touchgfx9Container9removeAllEv>:
 800fe42:	2200      	movs	r2, #0
 800fe44:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800fe46:	b123      	cbz	r3, 800fe52 <_ZN8touchgfx9Container9removeAllEv+0x10>
 800fe48:	6999      	ldr	r1, [r3, #24]
 800fe4a:	6281      	str	r1, [r0, #40]	@ 0x28
 800fe4c:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800fe50:	e7f8      	b.n	800fe44 <_ZN8touchgfx9Container9removeAllEv+0x2>
 800fe52:	4770      	bx	lr

0800fe54 <_ZN8touchgfx9Container6unlinkEv>:
 800fe54:	2300      	movs	r3, #0
 800fe56:	6283      	str	r3, [r0, #40]	@ 0x28
 800fe58:	4770      	bx	lr

0800fe5a <_ZNK8touchgfx9Container12getSolidRectEv>:
 800fe5a:	2200      	movs	r2, #0
 800fe5c:	8002      	strh	r2, [r0, #0]
 800fe5e:	8042      	strh	r2, [r0, #2]
 800fe60:	8082      	strh	r2, [r0, #4]
 800fe62:	80c2      	strh	r2, [r0, #6]
 800fe64:	4770      	bx	lr

0800fe66 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800fe66:	b570      	push	{r4, r5, r6, lr}
 800fe68:	460d      	mov	r5, r1
 800fe6a:	4616      	mov	r6, r2
 800fe6c:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800fe6e:	b13c      	cbz	r4, 800fe80 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 800fe70:	6823      	ldr	r3, [r4, #0]
 800fe72:	4620      	mov	r0, r4
 800fe74:	4632      	mov	r2, r6
 800fe76:	4629      	mov	r1, r5
 800fe78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fe7a:	4798      	blx	r3
 800fe7c:	69a4      	ldr	r4, [r4, #24]
 800fe7e:	e7f6      	b.n	800fe6e <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800fe80:	bd70      	pop	{r4, r5, r6, pc}

0800fe82 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800fe82:	b538      	push	{r3, r4, r5, lr}
 800fe84:	460d      	mov	r5, r1
 800fe86:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800fe88:	b134      	cbz	r4, 800fe98 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800fe8a:	682b      	ldr	r3, [r5, #0]
 800fe8c:	4621      	mov	r1, r4
 800fe8e:	4628      	mov	r0, r5
 800fe90:	689b      	ldr	r3, [r3, #8]
 800fe92:	4798      	blx	r3
 800fe94:	69a4      	ldr	r4, [r4, #24]
 800fe96:	e7f7      	b.n	800fe88 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800fe98:	bd38      	pop	{r3, r4, r5, pc}

0800fe9a <_ZN8touchgfx9ContainerD1Ev>:
 800fe9a:	4770      	bx	lr

0800fe9c <_ZN8touchgfx9ContainerD0Ev>:
 800fe9c:	b510      	push	{r4, lr}
 800fe9e:	4604      	mov	r4, r0
 800fea0:	212c      	movs	r1, #44	@ 0x2c
 800fea2:	f015 fdd4 	bl	8025a4e <_ZdlPvj>
 800fea6:	4620      	mov	r0, r4
 800fea8:	bd10      	pop	{r4, pc}

0800feaa <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800feaa:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800feac:	b19b      	cbz	r3, 800fed6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800feae:	428b      	cmp	r3, r1
 800feb0:	d109      	bne.n	800fec6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800feb2:	699a      	ldr	r2, [r3, #24]
 800feb4:	2100      	movs	r1, #0
 800feb6:	6159      	str	r1, [r3, #20]
 800feb8:	6282      	str	r2, [r0, #40]	@ 0x28
 800feba:	b902      	cbnz	r2, 800febe <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 800febc:	4770      	bx	lr
 800febe:	6199      	str	r1, [r3, #24]
 800fec0:	4770      	bx	lr
 800fec2:	4613      	mov	r3, r2
 800fec4:	b13a      	cbz	r2, 800fed6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800fec6:	699a      	ldr	r2, [r3, #24]
 800fec8:	428a      	cmp	r2, r1
 800feca:	d1fa      	bne.n	800fec2 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800fecc:	698a      	ldr	r2, [r1, #24]
 800fece:	619a      	str	r2, [r3, #24]
 800fed0:	2300      	movs	r3, #0
 800fed2:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800fed6:	4770      	bx	lr

0800fed8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800fed8:	b410      	push	{r4}
 800feda:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800fedc:	4604      	mov	r4, r0
 800fede:	b92b      	cbnz	r3, 800feec <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 800fee0:	6803      	ldr	r3, [r0, #0]
 800fee2:	4611      	mov	r1, r2
 800fee4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fee8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800feea:	4718      	bx	r3
 800feec:	b941      	cbnz	r1, 800ff00 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 800feee:	6193      	str	r3, [r2, #24]
 800fef0:	6282      	str	r2, [r0, #40]	@ 0x28
 800fef2:	6154      	str	r4, [r2, #20]
 800fef4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fef8:	4770      	bx	lr
 800fefa:	4603      	mov	r3, r0
 800fefc:	2800      	cmp	r0, #0
 800fefe:	d0f9      	beq.n	800fef4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 800ff00:	4299      	cmp	r1, r3
 800ff02:	6998      	ldr	r0, [r3, #24]
 800ff04:	d1f9      	bne.n	800fefa <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800ff06:	6190      	str	r0, [r2, #24]
 800ff08:	618a      	str	r2, [r1, #24]
 800ff0a:	e7f2      	b.n	800fef2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

0800ff0c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 800ff0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff10:	461f      	mov	r7, r3
 800ff12:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800ff16:	460d      	mov	r5, r1
 800ff18:	4616      	mov	r6, r2
 800ff1a:	b103      	cbz	r3, 800ff1e <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 800ff1c:	6038      	str	r0, [r7, #0]
 800ff1e:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800ff20:	b314      	cbz	r4, 800ff68 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800ff22:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800ff26:	b1eb      	cbz	r3, 800ff64 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800ff28:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800ff2c:	428d      	cmp	r5, r1
 800ff2e:	db19      	blt.n	800ff64 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800ff30:	b289      	uxth	r1, r1
 800ff32:	8923      	ldrh	r3, [r4, #8]
 800ff34:	440b      	add	r3, r1
 800ff36:	b21b      	sxth	r3, r3
 800ff38:	429d      	cmp	r5, r3
 800ff3a:	da13      	bge.n	800ff64 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800ff3c:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800ff40:	4296      	cmp	r6, r2
 800ff42:	db0f      	blt.n	800ff64 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800ff44:	b292      	uxth	r2, r2
 800ff46:	8963      	ldrh	r3, [r4, #10]
 800ff48:	4413      	add	r3, r2
 800ff4a:	b21b      	sxth	r3, r3
 800ff4c:	429e      	cmp	r6, r3
 800ff4e:	da09      	bge.n	800ff64 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800ff50:	6823      	ldr	r3, [r4, #0]
 800ff52:	1ab2      	subs	r2, r6, r2
 800ff54:	1a69      	subs	r1, r5, r1
 800ff56:	4620      	mov	r0, r4
 800ff58:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 800ff5c:	b212      	sxth	r2, r2
 800ff5e:	463b      	mov	r3, r7
 800ff60:	b209      	sxth	r1, r1
 800ff62:	47c0      	blx	r8
 800ff64:	69a4      	ldr	r4, [r4, #24]
 800ff66:	e7db      	b.n	800ff20 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800ff68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ff6c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 800ff6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff70:	4c6d      	ldr	r4, [pc, #436]	@ (8010128 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 800ff72:	b0a1      	sub	sp, #132	@ 0x84
 800ff74:	4606      	mov	r6, r0
 800ff76:	6824      	ldr	r4, [r4, #0]
 800ff78:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 800ff7a:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 800ff7e:	2400      	movs	r4, #0
 800ff80:	9303      	str	r3, [sp, #12]
 800ff82:	802c      	strh	r4, [r5, #0]
 800ff84:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 800ff86:	802c      	strh	r4, [r5, #0]
 800ff88:	601c      	str	r4, [r3, #0]
 800ff8a:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800ff8e:	f7ff ffbd 	bl	800ff0c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800ff92:	f1b9 0f03 	cmp.w	r9, #3
 800ff96:	f340 80c1 	ble.w	801011c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 800ff9a:	4631      	mov	r1, r6
 800ff9c:	a80c      	add	r0, sp, #48	@ 0x30
 800ff9e:	f007 f96d 	bl	801727c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800ffa2:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 800ffa6:	9306      	str	r3, [sp, #24]
 800ffa8:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 800ffac:	9307      	str	r3, [sp, #28]
 800ffae:	9b03      	ldr	r3, [sp, #12]
 800ffb0:	f8d3 a000 	ldr.w	sl, [r3]
 800ffb4:	f1ba 0f00 	cmp.w	sl, #0
 800ffb8:	f000 80b3 	beq.w	8010122 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 800ffbc:	4651      	mov	r1, sl
 800ffbe:	a810      	add	r0, sp, #64	@ 0x40
 800ffc0:	f007 f95c 	bl	801727c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800ffc4:	2002      	movs	r0, #2
 800ffc6:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 800ffca:	9b01      	ldr	r3, [sp, #4]
 800ffcc:	9a06      	ldr	r2, [sp, #24]
 800ffce:	fb91 f1f0 	sdiv	r1, r1, r0
 800ffd2:	189d      	adds	r5, r3, r2
 800ffd4:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 800ffd8:	9a07      	ldr	r2, [sp, #28]
 800ffda:	4419      	add	r1, r3
 800ffdc:	9b02      	ldr	r3, [sp, #8]
 800ffde:	4413      	add	r3, r2
 800ffe0:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 800ffe4:	1a6d      	subs	r5, r5, r1
 800ffe6:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 800ffea:	fb92 f2f0 	sdiv	r2, r2, r0
 800ffee:	440a      	add	r2, r1
 800fff0:	1a9b      	subs	r3, r3, r2
 800fff2:	435b      	muls	r3, r3
 800fff4:	fb05 3505 	mla	r5, r5, r5, r3
 800fff8:	4f4c      	ldr	r7, [pc, #304]	@ (801012c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 800fffa:	ac10      	add	r4, sp, #64	@ 0x40
 800fffc:	f1b9 0f0c 	cmp.w	r9, #12
 8010000:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8010002:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010004:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8010006:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010008:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801000a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801000c:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8010010:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8010014:	f04f 0303 	mov.w	r3, #3
 8010018:	bfd8      	it	le
 801001a:	f109 32ff 	addle.w	r2, r9, #4294967295
 801001e:	f04f 0400 	mov.w	r4, #0
 8010022:	f8cd 9000 	str.w	r9, [sp]
 8010026:	bfcc      	ite	gt
 8010028:	4698      	movgt	r8, r3
 801002a:	fb92 f8f3 	sdivle	r8, r2, r3
 801002e:	1c63      	adds	r3, r4, #1
 8010030:	aa10      	add	r2, sp, #64	@ 0x40
 8010032:	f004 0401 	and.w	r4, r4, #1
 8010036:	f04f 0b00 	mov.w	fp, #0
 801003a:	9308      	str	r3, [sp, #32]
 801003c:	9b00      	ldr	r3, [sp, #0]
 801003e:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8010042:	fb93 f3f8 	sdiv	r3, r3, r8
 8010046:	3404      	adds	r4, #4
 8010048:	b29b      	uxth	r3, r3
 801004a:	9304      	str	r3, [sp, #16]
 801004c:	9a04      	ldr	r2, [sp, #16]
 801004e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8010052:	fb13 f302 	smulbb	r3, r3, r2
 8010056:	9a01      	ldr	r2, [sp, #4]
 8010058:	b29b      	uxth	r3, r3
 801005a:	1899      	adds	r1, r3, r2
 801005c:	9305      	str	r3, [sp, #20]
 801005e:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8010062:	b209      	sxth	r1, r1
 8010064:	4299      	cmp	r1, r3
 8010066:	db4d      	blt.n	8010104 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8010068:	8932      	ldrh	r2, [r6, #8]
 801006a:	4413      	add	r3, r2
 801006c:	b21b      	sxth	r3, r3
 801006e:	4299      	cmp	r1, r3
 8010070:	da48      	bge.n	8010104 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8010072:	9b04      	ldr	r3, [sp, #16]
 8010074:	6827      	ldr	r7, [r4, #0]
 8010076:	fb17 f703 	smulbb	r7, r7, r3
 801007a:	9b02      	ldr	r3, [sp, #8]
 801007c:	b2bf      	uxth	r7, r7
 801007e:	18fa      	adds	r2, r7, r3
 8010080:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8010084:	b212      	sxth	r2, r2
 8010086:	429a      	cmp	r2, r3
 8010088:	db3c      	blt.n	8010104 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801008a:	8970      	ldrh	r0, [r6, #10]
 801008c:	4403      	add	r3, r0
 801008e:	b21b      	sxth	r3, r3
 8010090:	429a      	cmp	r2, r3
 8010092:	da37      	bge.n	8010104 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8010094:	2300      	movs	r3, #0
 8010096:	4630      	mov	r0, r6
 8010098:	930b      	str	r3, [sp, #44]	@ 0x2c
 801009a:	ab0b      	add	r3, sp, #44	@ 0x2c
 801009c:	f7ff ff36 	bl	800ff0c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80100a0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80100a2:	b37a      	cbz	r2, 8010104 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80100a4:	4552      	cmp	r2, sl
 80100a6:	d02d      	beq.n	8010104 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80100a8:	4611      	mov	r1, r2
 80100aa:	a80e      	add	r0, sp, #56	@ 0x38
 80100ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80100ae:	f007 f8e5 	bl	801727c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80100b2:	f04f 0e02 	mov.w	lr, #2
 80100b6:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 80100ba:	9a06      	ldr	r2, [sp, #24]
 80100bc:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 80100c0:	9b01      	ldr	r3, [sp, #4]
 80100c2:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 80100c6:	4413      	add	r3, r2
 80100c8:	9a07      	ldr	r2, [sp, #28]
 80100ca:	fb91 f1fe 	sdiv	r1, r1, lr
 80100ce:	fb9c fcfe 	sdiv	ip, ip, lr
 80100d2:	4401      	add	r1, r0
 80100d4:	1a58      	subs	r0, r3, r1
 80100d6:	9b02      	ldr	r3, [sp, #8]
 80100d8:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 80100dc:	4413      	add	r3, r2
 80100de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80100e0:	448c      	add	ip, r1
 80100e2:	eba3 030c 	sub.w	r3, r3, ip
 80100e6:	435b      	muls	r3, r3
 80100e8:	fb00 3300 	mla	r3, r0, r0, r3
 80100ec:	42ab      	cmp	r3, r5
 80100ee:	d208      	bcs.n	8010102 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 80100f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80100f2:	461d      	mov	r5, r3
 80100f4:	9803      	ldr	r0, [sp, #12]
 80100f6:	6001      	str	r1, [r0, #0]
 80100f8:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 80100fa:	9805      	ldr	r0, [sp, #20]
 80100fc:	8008      	strh	r0, [r1, #0]
 80100fe:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8010100:	800f      	strh	r7, [r1, #0]
 8010102:	4692      	mov	sl, r2
 8010104:	f10b 0b01 	add.w	fp, fp, #1
 8010108:	3408      	adds	r4, #8
 801010a:	f1bb 0f04 	cmp.w	fp, #4
 801010e:	d19d      	bne.n	801004c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8010110:	9b00      	ldr	r3, [sp, #0]
 8010112:	9c08      	ldr	r4, [sp, #32]
 8010114:	444b      	add	r3, r9
 8010116:	4544      	cmp	r4, r8
 8010118:	9300      	str	r3, [sp, #0]
 801011a:	d188      	bne.n	801002e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 801011c:	b021      	add	sp, #132	@ 0x84
 801011e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010122:	f04f 35ff 	mov.w	r5, #4294967295
 8010126:	e767      	b.n	800fff8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8010128:	20027b94 	.word	0x20027b94
 801012c:	08026c78 	.word	0x08026c78

08010130 <_ZN8touchgfx4RectaNERKS0_>:
 8010130:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010134:	f9b1 7000 	ldrsh.w	r7, [r1]
 8010138:	888c      	ldrh	r4, [r1, #4]
 801013a:	f9b0 9000 	ldrsh.w	r9, [r0]
 801013e:	443c      	add	r4, r7
 8010140:	b2a4      	uxth	r4, r4
 8010142:	fa0f f884 	sxth.w	r8, r4
 8010146:	45c1      	cmp	r9, r8
 8010148:	da2f      	bge.n	80101aa <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801014a:	8882      	ldrh	r2, [r0, #4]
 801014c:	444a      	add	r2, r9
 801014e:	b292      	uxth	r2, r2
 8010150:	fa0f fe82 	sxth.w	lr, r2
 8010154:	4577      	cmp	r7, lr
 8010156:	da28      	bge.n	80101aa <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8010158:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 801015c:	88cb      	ldrh	r3, [r1, #6]
 801015e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8010162:	442b      	add	r3, r5
 8010164:	b21b      	sxth	r3, r3
 8010166:	429e      	cmp	r6, r3
 8010168:	da1f      	bge.n	80101aa <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801016a:	88c3      	ldrh	r3, [r0, #6]
 801016c:	4433      	add	r3, r6
 801016e:	b29b      	uxth	r3, r3
 8010170:	fa0f fc83 	sxth.w	ip, r3
 8010174:	4565      	cmp	r5, ip
 8010176:	da18      	bge.n	80101aa <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8010178:	454f      	cmp	r7, r9
 801017a:	bfb8      	it	lt
 801017c:	464f      	movlt	r7, r9
 801017e:	42b5      	cmp	r5, r6
 8010180:	bfb8      	it	lt
 8010182:	4635      	movlt	r5, r6
 8010184:	45f0      	cmp	r8, lr
 8010186:	bfd8      	it	le
 8010188:	4622      	movle	r2, r4
 801018a:	1bd2      	subs	r2, r2, r7
 801018c:	8082      	strh	r2, [r0, #4]
 801018e:	884a      	ldrh	r2, [r1, #2]
 8010190:	88c9      	ldrh	r1, [r1, #6]
 8010192:	8007      	strh	r7, [r0, #0]
 8010194:	440a      	add	r2, r1
 8010196:	8045      	strh	r5, [r0, #2]
 8010198:	b292      	uxth	r2, r2
 801019a:	b211      	sxth	r1, r2
 801019c:	458c      	cmp	ip, r1
 801019e:	bfa8      	it	ge
 80101a0:	4613      	movge	r3, r2
 80101a2:	1b5b      	subs	r3, r3, r5
 80101a4:	80c3      	strh	r3, [r0, #6]
 80101a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80101aa:	2300      	movs	r3, #0
 80101ac:	8003      	strh	r3, [r0, #0]
 80101ae:	8043      	strh	r3, [r0, #2]
 80101b0:	8083      	strh	r3, [r0, #4]
 80101b2:	80c3      	strh	r3, [r0, #6]
 80101b4:	e7f7      	b.n	80101a6 <_ZN8touchgfx4RectaNERKS0_+0x76>

080101b6 <_ZNK8touchgfx4Rect7isEmptyEv>:
 80101b6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	dd06      	ble.n	80101cc <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 80101be:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80101c2:	2800      	cmp	r0, #0
 80101c4:	bfcc      	ite	gt
 80101c6:	2000      	movgt	r0, #0
 80101c8:	2001      	movle	r0, #1
 80101ca:	4770      	bx	lr
 80101cc:	2001      	movs	r0, #1
 80101ce:	4770      	bx	lr

080101d0 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 80101d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101d4:	2300      	movs	r3, #0
 80101d6:	4604      	mov	r4, r0
 80101d8:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 80101da:	8003      	strh	r3, [r0, #0]
 80101dc:	8043      	strh	r3, [r0, #2]
 80101de:	8083      	strh	r3, [r0, #4]
 80101e0:	80c3      	strh	r3, [r0, #6]
 80101e2:	2d00      	cmp	r5, #0
 80101e4:	d040      	beq.n	8010268 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 80101e6:	1d28      	adds	r0, r5, #4
 80101e8:	f7ff ffe5 	bl	80101b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 80101ec:	b988      	cbnz	r0, 8010212 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80101ee:	4620      	mov	r0, r4
 80101f0:	f7ff ffe1 	bl	80101b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 80101f4:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80101f8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80101fc:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8010200:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8010204:	b138      	cbz	r0, 8010216 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8010206:	8022      	strh	r2, [r4, #0]
 8010208:	8063      	strh	r3, [r4, #2]
 801020a:	f8a4 e004 	strh.w	lr, [r4, #4]
 801020e:	f8a4 c006 	strh.w	ip, [r4, #6]
 8010212:	69ad      	ldr	r5, [r5, #24]
 8010214:	e7e5      	b.n	80101e2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8010216:	f9b4 0000 	ldrsh.w	r0, [r4]
 801021a:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801021e:	4290      	cmp	r0, r2
 8010220:	4607      	mov	r7, r0
 8010222:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8010226:	460e      	mov	r6, r1
 8010228:	bfa8      	it	ge
 801022a:	4617      	movge	r7, r2
 801022c:	4299      	cmp	r1, r3
 801022e:	4472      	add	r2, lr
 8010230:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8010234:	bfa8      	it	ge
 8010236:	461e      	movge	r6, r3
 8010238:	4440      	add	r0, r8
 801023a:	4471      	add	r1, lr
 801023c:	4463      	add	r3, ip
 801023e:	b200      	sxth	r0, r0
 8010240:	8027      	strh	r7, [r4, #0]
 8010242:	b212      	sxth	r2, r2
 8010244:	8066      	strh	r6, [r4, #2]
 8010246:	b209      	sxth	r1, r1
 8010248:	b21b      	sxth	r3, r3
 801024a:	4290      	cmp	r0, r2
 801024c:	bfac      	ite	ge
 801024e:	ebc7 0200 	rsbge	r2, r7, r0
 8010252:	ebc7 0202 	rsblt	r2, r7, r2
 8010256:	4299      	cmp	r1, r3
 8010258:	bfac      	ite	ge
 801025a:	ebc6 0301 	rsbge	r3, r6, r1
 801025e:	ebc6 0303 	rsblt	r3, r6, r3
 8010262:	80a2      	strh	r2, [r4, #4]
 8010264:	80e3      	strh	r3, [r4, #6]
 8010266:	e7d4      	b.n	8010212 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8010268:	4620      	mov	r0, r4
 801026a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801026e <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 801026e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8010272:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8010276:	b383      	cbz	r3, 80102da <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8010278:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 801027a:	b374      	cbz	r4, 80102da <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 801027c:	f9b1 5000 	ldrsh.w	r5, [r1]
 8010280:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8010284:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8010288:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 801028c:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8010290:	b303      	cbz	r3, 80102d4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8010292:	4668      	mov	r0, sp
 8010294:	1d21      	adds	r1, r4, #4
 8010296:	f8ad 5000 	strh.w	r5, [sp]
 801029a:	f8ad 6002 	strh.w	r6, [sp, #2]
 801029e:	f8ad 7004 	strh.w	r7, [sp, #4]
 80102a2:	f8ad 8006 	strh.w	r8, [sp, #6]
 80102a6:	f7ff ff43 	bl	8010130 <_ZN8touchgfx4RectaNERKS0_>
 80102aa:	4668      	mov	r0, sp
 80102ac:	f7ff ff83 	bl	80101b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 80102b0:	b980      	cbnz	r0, 80102d4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80102b2:	f8bd 3000 	ldrh.w	r3, [sp]
 80102b6:	4669      	mov	r1, sp
 80102b8:	88a2      	ldrh	r2, [r4, #4]
 80102ba:	4620      	mov	r0, r4
 80102bc:	1a9b      	subs	r3, r3, r2
 80102be:	88e2      	ldrh	r2, [r4, #6]
 80102c0:	f8ad 3000 	strh.w	r3, [sp]
 80102c4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80102c8:	1a9b      	subs	r3, r3, r2
 80102ca:	f8ad 3002 	strh.w	r3, [sp, #2]
 80102ce:	6823      	ldr	r3, [r4, #0]
 80102d0:	689b      	ldr	r3, [r3, #8]
 80102d2:	4798      	blx	r3
 80102d4:	69a4      	ldr	r4, [r4, #24]
 80102d6:	2c00      	cmp	r4, #0
 80102d8:	d1d8      	bne.n	801028c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 80102da:	b002      	add	sp, #8
 80102dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080102e0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 80102e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80102e2:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 80102e6:	460d      	mov	r5, r1
 80102e8:	4616      	mov	r6, r2
 80102ea:	b323      	cbz	r3, 8010336 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80102ec:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80102ee:	b314      	cbz	r4, 8010336 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80102f0:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 80102f4:	b1eb      	cbz	r3, 8010332 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80102f6:	6828      	ldr	r0, [r5, #0]
 80102f8:	466b      	mov	r3, sp
 80102fa:	6869      	ldr	r1, [r5, #4]
 80102fc:	c303      	stmia	r3!, {r0, r1}
 80102fe:	4668      	mov	r0, sp
 8010300:	1d21      	adds	r1, r4, #4
 8010302:	f7ff ff15 	bl	8010130 <_ZN8touchgfx4RectaNERKS0_>
 8010306:	4668      	mov	r0, sp
 8010308:	f7ff ff55 	bl	80101b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801030c:	b988      	cbnz	r0, 8010332 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801030e:	f8bd 3000 	ldrh.w	r3, [sp]
 8010312:	4669      	mov	r1, sp
 8010314:	88a2      	ldrh	r2, [r4, #4]
 8010316:	4620      	mov	r0, r4
 8010318:	1a9b      	subs	r3, r3, r2
 801031a:	88e2      	ldrh	r2, [r4, #6]
 801031c:	f8ad 3000 	strh.w	r3, [sp]
 8010320:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8010324:	1a9b      	subs	r3, r3, r2
 8010326:	4632      	mov	r2, r6
 8010328:	f8ad 3002 	strh.w	r3, [sp, #2]
 801032c:	6823      	ldr	r3, [r4, #0]
 801032e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010330:	4798      	blx	r3
 8010332:	69a4      	ldr	r4, [r4, #24]
 8010334:	e7db      	b.n	80102ee <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8010336:	b002      	add	sp, #8
 8010338:	bd70      	pop	{r4, r5, r6, pc}

0801033a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 801033a:	6803      	ldr	r3, [r0, #0]
 801033c:	b513      	push	{r0, r1, r4, lr}
 801033e:	f8d3 40a8 	ldr.w	r4, [r3, #168]	@ 0xa8
 8010342:	2300      	movs	r3, #0
 8010344:	e9cd 3300 	strd	r3, r3, [sp]
 8010348:	466b      	mov	r3, sp
 801034a:	47a0      	blx	r4
 801034c:	b002      	add	sp, #8
 801034e:	bd10      	pop	{r4, pc}

08010350 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8010350:	2301      	movs	r3, #1
 8010352:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8010356:	f880 3069 	strb.w	r3, [r0, #105]	@ 0x69
 801035a:	4770      	bx	lr

0801035c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 801035c:	2301      	movs	r3, #1
 801035e:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8010362:	f880 3069 	strb.w	r3, [r0, #105]	@ 0x69
 8010366:	4770      	bx	lr

08010368 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8010368:	6843      	ldr	r3, [r0, #4]
 801036a:	2201      	movs	r2, #1
 801036c:	725a      	strb	r2, [r3, #9]
 801036e:	6840      	ldr	r0, [r0, #4]
 8010370:	6803      	ldr	r3, [r0, #0]
 8010372:	691b      	ldr	r3, [r3, #16]
 8010374:	4718      	bx	r3

08010376 <_ZN8touchgfx3HAL8flushDMAEv>:
 8010376:	6840      	ldr	r0, [r0, #4]
 8010378:	6803      	ldr	r3, [r0, #0]
 801037a:	689b      	ldr	r3, [r3, #8]
 801037c:	4718      	bx	r3

0801037e <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 801037e:	b530      	push	{r4, r5, lr}
 8010380:	b08b      	sub	sp, #44	@ 0x2c
 8010382:	6804      	ldr	r4, [r0, #0]
 8010384:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 8010388:	9509      	str	r5, [sp, #36]	@ 0x24
 801038a:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 801038e:	9508      	str	r5, [sp, #32]
 8010390:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8010394:	9507      	str	r5, [sp, #28]
 8010396:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 801039a:	9506      	str	r5, [sp, #24]
 801039c:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 80103a0:	9505      	str	r5, [sp, #20]
 80103a2:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 80103a6:	9504      	str	r5, [sp, #16]
 80103a8:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 80103ac:	9503      	str	r5, [sp, #12]
 80103ae:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 80103b2:	9502      	str	r5, [sp, #8]
 80103b4:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 80103b8:	e9cd 3500 	strd	r3, r5, [sp]
 80103bc:	4613      	mov	r3, r2
 80103be:	6be4      	ldr	r4, [r4, #60]	@ 0x3c
 80103c0:	2200      	movs	r2, #0
 80103c2:	47a0      	blx	r4
 80103c4:	b00b      	add	sp, #44	@ 0x2c
 80103c6:	bd30      	pop	{r4, r5, pc}

080103c8 <_ZN8touchgfx3HAL10beginFrameEv>:
 80103c8:	4b04      	ldr	r3, [pc, #16]	@ (80103dc <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 80103ca:	781b      	ldrb	r3, [r3, #0]
 80103cc:	b123      	cbz	r3, 80103d8 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 80103ce:	f890 006a 	ldrb.w	r0, [r0, #106]	@ 0x6a
 80103d2:	f080 0001 	eor.w	r0, r0, #1
 80103d6:	4770      	bx	lr
 80103d8:	2001      	movs	r0, #1
 80103da:	4770      	bx	lr
 80103dc:	20027b92 	.word	0x20027b92

080103e0 <_ZN8touchgfx3HAL8endFrameEv>:
 80103e0:	b510      	push	{r4, lr}
 80103e2:	4604      	mov	r4, r0
 80103e4:	6840      	ldr	r0, [r0, #4]
 80103e6:	6803      	ldr	r3, [r0, #0]
 80103e8:	689b      	ldr	r3, [r3, #8]
 80103ea:	4798      	blx	r3
 80103ec:	f894 3069 	ldrb.w	r3, [r4, #105]	@ 0x69
 80103f0:	b113      	cbz	r3, 80103f8 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 80103f2:	2301      	movs	r3, #1
 80103f4:	f884 306a 	strb.w	r3, [r4, #106]	@ 0x6a
 80103f8:	bd10      	pop	{r4, pc}

080103fa <_ZN8touchgfx3HAL10initializeEv>:
 80103fa:	b510      	push	{r4, lr}
 80103fc:	4604      	mov	r4, r0
 80103fe:	f7f1 fb51 	bl	8001aa4 <_ZN8touchgfx10OSWrappers10initializeEv>
 8010402:	f7f0 fbf3 	bl	8000bec <_ZN8touchgfx4GPIO4initEv>
 8010406:	6860      	ldr	r0, [r4, #4]
 8010408:	6803      	ldr	r3, [r0, #0]
 801040a:	68db      	ldr	r3, [r3, #12]
 801040c:	4798      	blx	r3
 801040e:	68e0      	ldr	r0, [r4, #12]
 8010410:	6803      	ldr	r3, [r0, #0]
 8010412:	689b      	ldr	r3, [r3, #8]
 8010414:	4798      	blx	r3
 8010416:	6823      	ldr	r3, [r4, #0]
 8010418:	4620      	mov	r0, r4
 801041a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801041c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010420:	4718      	bx	r3
	...

08010424 <_ZN8touchgfx3HAL4tickEv>:
 8010424:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8010426:	6803      	ldr	r3, [r0, #0]
 8010428:	4604      	mov	r4, r0
 801042a:	4d5b      	ldr	r5, [pc, #364]	@ (8010598 <_ZN8touchgfx3HAL4tickEv+0x174>)
 801042c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8010430:	4798      	blx	r3
 8010432:	2800      	cmp	r0, #0
 8010434:	f000 8095 	beq.w	8010562 <_ZN8touchgfx3HAL4tickEv+0x13e>
 8010438:	2001      	movs	r0, #1
 801043a:	2600      	movs	r6, #0
 801043c:	f7f0 fb3c 	bl	8000ab8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8010440:	f894 3066 	ldrb.w	r3, [r4, #102]	@ 0x66
 8010444:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 8010448:	f884 3067 	strb.w	r3, [r4, #103]	@ 0x67
 801044c:	f894 3075 	ldrb.w	r3, [r4, #117]	@ 0x75
 8010450:	f884 6066 	strb.w	r6, [r4, #102]	@ 0x66
 8010454:	b133      	cbz	r3, 8010464 <_ZN8touchgfx3HAL4tickEv+0x40>
 8010456:	6823      	ldr	r3, [r4, #0]
 8010458:	4620      	mov	r0, r4
 801045a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 801045e:	4798      	blx	r3
 8010460:	f884 6075 	strb.w	r6, [r4, #117]	@ 0x75
 8010464:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 8010468:	2601      	movs	r6, #1
 801046a:	6862      	ldr	r2, [r4, #4]
 801046c:	f083 0301 	eor.w	r3, r3, #1
 8010470:	702e      	strb	r6, [r5, #0]
 8010472:	7253      	strb	r3, [r2, #9]
 8010474:	f005 fdb0 	bl	8015fd8 <_ZN8touchgfx11Application11getInstanceEv>
 8010478:	6803      	ldr	r3, [r0, #0]
 801047a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801047c:	4798      	blx	r3
 801047e:	f894 3067 	ldrb.w	r3, [r4, #103]	@ 0x67
 8010482:	b90b      	cbnz	r3, 8010488 <_ZN8touchgfx3HAL4tickEv+0x64>
 8010484:	f884 6067 	strb.w	r6, [r4, #103]	@ 0x67
 8010488:	f005 fda6 	bl	8015fd8 <_ZN8touchgfx11Application11getInstanceEv>
 801048c:	6803      	ldr	r3, [r0, #0]
 801048e:	695b      	ldr	r3, [r3, #20]
 8010490:	4798      	blx	r3
 8010492:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010494:	6803      	ldr	r3, [r0, #0]
 8010496:	691b      	ldr	r3, [r3, #16]
 8010498:	4798      	blx	r3
 801049a:	f894 3067 	ldrb.w	r3, [r4, #103]	@ 0x67
 801049e:	f894 2068 	ldrb.w	r2, [r4, #104]	@ 0x68
 80104a2:	3b01      	subs	r3, #1
 80104a4:	b2db      	uxtb	r3, r3
 80104a6:	f884 3067 	strb.w	r3, [r4, #103]	@ 0x67
 80104aa:	b10a      	cbz	r2, 80104b0 <_ZN8touchgfx3HAL4tickEv+0x8c>
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d1eb      	bne.n	8010488 <_ZN8touchgfx3HAL4tickEv+0x64>
 80104b0:	4a3a      	ldr	r2, [pc, #232]	@ (801059c <_ZN8touchgfx3HAL4tickEv+0x178>)
 80104b2:	f994 1064 	ldrsb.w	r1, [r4, #100]	@ 0x64
 80104b6:	7813      	ldrb	r3, [r2, #0]
 80104b8:	3301      	adds	r3, #1
 80104ba:	b25b      	sxtb	r3, r3
 80104bc:	4299      	cmp	r1, r3
 80104be:	7013      	strb	r3, [r2, #0]
 80104c0:	dc10      	bgt.n	80104e4 <_ZN8touchgfx3HAL4tickEv+0xc0>
 80104c2:	2300      	movs	r3, #0
 80104c4:	68e0      	ldr	r0, [r4, #12]
 80104c6:	a902      	add	r1, sp, #8
 80104c8:	7013      	strb	r3, [r2, #0]
 80104ca:	aa03      	add	r2, sp, #12
 80104cc:	6803      	ldr	r3, [r0, #0]
 80104ce:	68db      	ldr	r3, [r3, #12]
 80104d0:	4798      	blx	r3
 80104d2:	6823      	ldr	r3, [r4, #0]
 80104d4:	2800      	cmp	r0, #0
 80104d6:	d050      	beq.n	801057a <_ZN8touchgfx3HAL4tickEv+0x156>
 80104d8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80104dc:	4620      	mov	r0, r4
 80104de:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80104e2:	4798      	blx	r3
 80104e4:	2300      	movs	r3, #0
 80104e6:	6960      	ldr	r0, [r4, #20]
 80104e8:	f88d 3007 	strb.w	r3, [sp, #7]
 80104ec:	b158      	cbz	r0, 8010506 <_ZN8touchgfx3HAL4tickEv+0xe2>
 80104ee:	6803      	ldr	r3, [r0, #0]
 80104f0:	f10d 0107 	add.w	r1, sp, #7
 80104f4:	68db      	ldr	r3, [r3, #12]
 80104f6:	4798      	blx	r3
 80104f8:	b128      	cbz	r0, 8010506 <_ZN8touchgfx3HAL4tickEv+0xe2>
 80104fa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80104fc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8010500:	6803      	ldr	r3, [r0, #0]
 8010502:	68db      	ldr	r3, [r3, #12]
 8010504:	4798      	blx	r3
 8010506:	f104 001c 	add.w	r0, r4, #28
 801050a:	f014 fdff 	bl	802510c <_ZN8touchgfx8Gestures4tickEv>
 801050e:	f894 306c 	ldrb.w	r3, [r4, #108]	@ 0x6c
 8010512:	b30b      	cbz	r3, 8010558 <_ZN8touchgfx3HAL4tickEv+0x134>
 8010514:	6920      	ldr	r0, [r4, #16]
 8010516:	6803      	ldr	r3, [r0, #0]
 8010518:	691b      	ldr	r3, [r3, #16]
 801051a:	4798      	blx	r3
 801051c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801051e:	4606      	mov	r6, r0
 8010520:	b903      	cbnz	r3, 8010524 <_ZN8touchgfx3HAL4tickEv+0x100>
 8010522:	6720      	str	r0, [r4, #112]	@ 0x70
 8010524:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010526:	4a1e      	ldr	r2, [pc, #120]	@ (80105a0 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8010528:	1af3      	subs	r3, r6, r3
 801052a:	4293      	cmp	r3, r2
 801052c:	d914      	bls.n	8010558 <_ZN8touchgfx3HAL4tickEv+0x134>
 801052e:	6920      	ldr	r0, [r4, #16]
 8010530:	6803      	ldr	r3, [r0, #0]
 8010532:	699b      	ldr	r3, [r3, #24]
 8010534:	4798      	blx	r3
 8010536:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010538:	2264      	movs	r2, #100	@ 0x64
 801053a:	1af3      	subs	r3, r6, r3
 801053c:	fbb3 f3f2 	udiv	r3, r3, r2
 8010540:	fbb0 f0f3 	udiv	r0, r0, r3
 8010544:	2800      	cmp	r0, #0
 8010546:	dc1d      	bgt.n	8010584 <_ZN8touchgfx3HAL4tickEv+0x160>
 8010548:	f884 2065 	strb.w	r2, [r4, #101]	@ 0x65
 801054c:	6920      	ldr	r0, [r4, #16]
 801054e:	2100      	movs	r1, #0
 8010550:	6803      	ldr	r3, [r0, #0]
 8010552:	69db      	ldr	r3, [r3, #28]
 8010554:	4798      	blx	r3
 8010556:	6726      	str	r6, [r4, #112]	@ 0x70
 8010558:	f005 fd3e 	bl	8015fd8 <_ZN8touchgfx11Application11getInstanceEv>
 801055c:	6803      	ldr	r3, [r0, #0]
 801055e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010560:	4798      	blx	r3
 8010562:	6823      	ldr	r3, [r4, #0]
 8010564:	4620      	mov	r0, r4
 8010566:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801056a:	4798      	blx	r3
 801056c:	2001      	movs	r0, #1
 801056e:	f7f0 fad3 	bl	8000b18 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8010572:	2300      	movs	r3, #0
 8010574:	702b      	strb	r3, [r5, #0]
 8010576:	b004      	add	sp, #16
 8010578:	bd70      	pop	{r4, r5, r6, pc}
 801057a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 801057e:	4620      	mov	r0, r4
 8010580:	4798      	blx	r3
 8010582:	e7af      	b.n	80104e4 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8010584:	2863      	cmp	r0, #99	@ 0x63
 8010586:	bfcb      	itete	gt
 8010588:	2300      	movgt	r3, #0
 801058a:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 801058e:	f884 3065 	strbgt.w	r3, [r4, #101]	@ 0x65
 8010592:	f884 0065 	strble.w	r0, [r4, #101]	@ 0x65
 8010596:	e7d9      	b.n	801054c <_ZN8touchgfx3HAL4tickEv+0x128>
 8010598:	20027b98 	.word	0x20027b98
 801059c:	20027b99 	.word	0x20027b99
 80105a0:	05f5e100 	.word	0x05f5e100

080105a4 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 80105a4:	f7f1 baae 	b.w	8001b04 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080105a8 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 80105a8:	6581      	str	r1, [r0, #88]	@ 0x58
 80105aa:	301c      	adds	r0, #28
 80105ac:	f014 bdac 	b.w	8025108 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

080105b0 <_ZN8touchgfx3HAL5touchEll>:
 80105b0:	b530      	push	{r4, r5, lr}
 80105b2:	b087      	sub	sp, #28
 80105b4:	4604      	mov	r4, r0
 80105b6:	a804      	add	r0, sp, #16
 80105b8:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80105bc:	f005 fb52 	bl	8015c64 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 80105c0:	9b04      	ldr	r3, [sp, #16]
 80105c2:	a906      	add	r1, sp, #24
 80105c4:	a803      	add	r0, sp, #12
 80105c6:	f8ad 300c 	strh.w	r3, [sp, #12]
 80105ca:	9b05      	ldr	r3, [sp, #20]
 80105cc:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 80105d0:	f005 fb9a 	bl	8015d08 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 80105d4:	f894 106b 	ldrb.w	r1, [r4, #107]	@ 0x6b
 80105d8:	f104 001c 	add.w	r0, r4, #28
 80105dc:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80105e0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80105e4:	b189      	cbz	r1, 801060a <_ZN8touchgfx3HAL5touchEll+0x5a>
 80105e6:	f8b4 5060 	ldrh.w	r5, [r4, #96]	@ 0x60
 80105ea:	9300      	str	r3, [sp, #0]
 80105ec:	4613      	mov	r3, r2
 80105ee:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 80105f2:	462a      	mov	r2, r5
 80105f4:	f014 fd98 	bl	8025128 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 80105f8:	b128      	cbz	r0, 8010606 <_ZN8touchgfx3HAL5touchEll+0x56>
 80105fa:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80105fe:	65e3      	str	r3, [r4, #92]	@ 0x5c
 8010600:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8010604:	6623      	str	r3, [r4, #96]	@ 0x60
 8010606:	b007      	add	sp, #28
 8010608:	bd30      	pop	{r4, r5, pc}
 801060a:	f014 fdcd 	bl	80251a8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801060e:	2301      	movs	r3, #1
 8010610:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8010614:	e7f1      	b.n	80105fa <_ZN8touchgfx3HAL5touchEll+0x4a>

08010616 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8010616:	b510      	push	{r4, lr}
 8010618:	2b00      	cmp	r3, #0
 801061a:	d046      	beq.n	80106aa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 801061c:	ea81 0002 	eor.w	r0, r1, r2
 8010620:	07c4      	lsls	r4, r0, #31
 8010622:	d508      	bpl.n	8010636 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8010624:	440b      	add	r3, r1
 8010626:	3a01      	subs	r2, #1
 8010628:	428b      	cmp	r3, r1
 801062a:	d93e      	bls.n	80106aa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 801062c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8010630:	f801 0b01 	strb.w	r0, [r1], #1
 8010634:	e7f8      	b.n	8010628 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8010636:	07d0      	lsls	r0, r2, #31
 8010638:	bf42      	ittt	mi
 801063a:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 801063e:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8010642:	f801 0b01 	strbmi.w	r0, [r1], #1
 8010646:	2b01      	cmp	r3, #1
 8010648:	d911      	bls.n	801066e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801064a:	ea81 0402 	eor.w	r4, r1, r2
 801064e:	4610      	mov	r0, r2
 8010650:	07a4      	lsls	r4, r4, #30
 8010652:	d022      	beq.n	801069a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8010654:	f023 0401 	bic.w	r4, r3, #1
 8010658:	440c      	add	r4, r1
 801065a:	428c      	cmp	r4, r1
 801065c:	4602      	mov	r2, r0
 801065e:	d904      	bls.n	801066a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8010660:	8812      	ldrh	r2, [r2, #0]
 8010662:	3002      	adds	r0, #2
 8010664:	f821 2b02 	strh.w	r2, [r1], #2
 8010668:	e7f7      	b.n	801065a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 801066a:	f003 0301 	and.w	r3, r3, #1
 801066e:	f023 0003 	bic.w	r0, r3, #3
 8010672:	4408      	add	r0, r1
 8010674:	4288      	cmp	r0, r1
 8010676:	4614      	mov	r4, r2
 8010678:	d904      	bls.n	8010684 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 801067a:	6824      	ldr	r4, [r4, #0]
 801067c:	3204      	adds	r2, #4
 801067e:	f841 4b04 	str.w	r4, [r1], #4
 8010682:	e7f7      	b.n	8010674 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8010684:	f003 0303 	and.w	r3, r3, #3
 8010688:	3a01      	subs	r2, #1
 801068a:	440b      	add	r3, r1
 801068c:	428b      	cmp	r3, r1
 801068e:	d90c      	bls.n	80106aa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8010690:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8010694:	f801 0b01 	strb.w	r0, [r1], #1
 8010698:	e7f8      	b.n	801068c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 801069a:	0790      	lsls	r0, r2, #30
 801069c:	d0e7      	beq.n	801066e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801069e:	f832 0b02 	ldrh.w	r0, [r2], #2
 80106a2:	3b02      	subs	r3, #2
 80106a4:	f821 0b02 	strh.w	r0, [r1], #2
 80106a8:	e7e1      	b.n	801066e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80106aa:	2001      	movs	r0, #1
 80106ac:	bd10      	pop	{r4, pc}

080106ae <_ZN8touchgfx3HAL7noTouchEv>:
 80106ae:	b510      	push	{r4, lr}
 80106b0:	f890 306b 	ldrb.w	r3, [r0, #107]	@ 0x6b
 80106b4:	4604      	mov	r4, r0
 80106b6:	b153      	cbz	r3, 80106ce <_ZN8touchgfx3HAL7noTouchEv+0x20>
 80106b8:	f8b0 3060 	ldrh.w	r3, [r0, #96]	@ 0x60
 80106bc:	2101      	movs	r1, #1
 80106be:	f8b0 205c 	ldrh.w	r2, [r0, #92]	@ 0x5c
 80106c2:	301c      	adds	r0, #28
 80106c4:	f014 fd70 	bl	80251a8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80106c8:	2300      	movs	r3, #0
 80106ca:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 80106ce:	bd10      	pop	{r4, pc}

080106d0 <_ZN8touchgfx3HAL3lcdEv>:
 80106d0:	4b04      	ldr	r3, [pc, #16]	@ (80106e4 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	f893 2076 	ldrb.w	r2, [r3, #118]	@ 0x76
 80106d8:	b10a      	cbz	r2, 80106de <_ZN8touchgfx3HAL3lcdEv+0xe>
 80106da:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80106dc:	b900      	cbnz	r0, 80106e0 <_ZN8touchgfx3HAL3lcdEv+0x10>
 80106de:	6898      	ldr	r0, [r3, #8]
 80106e0:	4770      	bx	lr
 80106e2:	bf00      	nop
 80106e4:	20027b94 	.word	0x20027b94

080106e8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 80106e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80106ec:	b085      	sub	sp, #20
 80106ee:	4604      	mov	r4, r0
 80106f0:	2000      	movs	r0, #0
 80106f2:	4699      	mov	r9, r3
 80106f4:	ad04      	add	r5, sp, #16
 80106f6:	460f      	mov	r7, r1
 80106f8:	4690      	mov	r8, r2
 80106fa:	f845 0d04 	str.w	r0, [r5, #-4]!
 80106fe:	69a0      	ldr	r0, [r4, #24]
 8010700:	6806      	ldr	r6, [r0, #0]
 8010702:	9501      	str	r5, [sp, #4]
 8010704:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 8010708:	9500      	str	r5, [sp, #0]
 801070a:	6835      	ldr	r5, [r6, #0]
 801070c:	47a8      	blx	r5
 801070e:	4d10      	ldr	r5, [pc, #64]	@ (8010750 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8010710:	4606      	mov	r6, r0
 8010712:	f8a5 9000 	strh.w	r9, [r5]
 8010716:	f7ff ffdb 	bl	80106d0 <_ZN8touchgfx3HAL3lcdEv>
 801071a:	6803      	ldr	r3, [r0, #0]
 801071c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801071e:	4798      	blx	r3
 8010720:	b128      	cbz	r0, 801072e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8010722:	2801      	cmp	r0, #1
 8010724:	d00b      	beq.n	801073e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 8010726:	4630      	mov	r0, r6
 8010728:	b005      	add	sp, #20
 801072a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801072e:	882b      	ldrh	r3, [r5, #0]
 8010730:	fb08 7203 	mla	r2, r8, r3, r7
 8010734:	9b03      	ldr	r3, [sp, #12]
 8010736:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 801073a:	63e3      	str	r3, [r4, #60]	@ 0x3c
 801073c:	e7f3      	b.n	8010726 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 801073e:	882a      	ldrh	r2, [r5, #0]
 8010740:	9b03      	ldr	r3, [sp, #12]
 8010742:	fb08 7202 	mla	r2, r8, r2, r7
 8010746:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801074a:	1a9a      	subs	r2, r3, r2
 801074c:	63e2      	str	r2, [r4, #60]	@ 0x3c
 801074e:	e7ea      	b.n	8010726 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8010750:	20027b8e 	.word	0x20027b8e

08010754 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8010754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010756:	b08b      	sub	sp, #44	@ 0x2c
 8010758:	4617      	mov	r7, r2
 801075a:	4604      	mov	r4, r0
 801075c:	460e      	mov	r6, r1
 801075e:	461d      	mov	r5, r3
 8010760:	f7ff ffb6 	bl	80106d0 <_ZN8touchgfx3HAL3lcdEv>
 8010764:	6803      	ldr	r3, [r0, #0]
 8010766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010768:	4798      	blx	r3
 801076a:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 801076e:	9007      	str	r0, [sp, #28]
 8010770:	4631      	mov	r1, r6
 8010772:	6822      	ldr	r2, [r4, #0]
 8010774:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8010778:	4b0c      	ldr	r3, [pc, #48]	@ (80107ac <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 801077a:	4620      	mov	r0, r4
 801077c:	881b      	ldrh	r3, [r3, #0]
 801077e:	9306      	str	r3, [sp, #24]
 8010780:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8010784:	9305      	str	r3, [sp, #20]
 8010786:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 801078a:	9304      	str	r3, [sp, #16]
 801078c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8010790:	9303      	str	r3, [sp, #12]
 8010792:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8010796:	9302      	str	r3, [sp, #8]
 8010798:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 801079c:	e9cd 5300 	strd	r5, r3, [sp]
 80107a0:	463b      	mov	r3, r7
 80107a2:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
 80107a4:	2200      	movs	r2, #0
 80107a6:	47a8      	blx	r5
 80107a8:	b00b      	add	sp, #44	@ 0x2c
 80107aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80107ac:	20027b8e 	.word	0x20027b8e

080107b0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 80107b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80107b4:	4698      	mov	r8, r3
 80107b6:	6803      	ldr	r3, [r0, #0]
 80107b8:	b08b      	sub	sp, #44	@ 0x2c
 80107ba:	4617      	mov	r7, r2
 80107bc:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
 80107be:	460e      	mov	r6, r1
 80107c0:	4b13      	ldr	r3, [pc, #76]	@ (8010810 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 80107c2:	4604      	mov	r4, r0
 80107c4:	f8b3 9000 	ldrh.w	r9, [r3]
 80107c8:	f7ff ff82 	bl	80106d0 <_ZN8touchgfx3HAL3lcdEv>
 80107cc:	6803      	ldr	r3, [r0, #0]
 80107ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80107d0:	4798      	blx	r3
 80107d2:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 80107d6:	2200      	movs	r2, #0
 80107d8:	4631      	mov	r1, r6
 80107da:	e9cd 0308 	strd	r0, r3, [sp, #32]
 80107de:	2302      	movs	r3, #2
 80107e0:	4620      	mov	r0, r4
 80107e2:	e9cd 9306 	strd	r9, r3, [sp, #24]
 80107e6:	2301      	movs	r3, #1
 80107e8:	9305      	str	r3, [sp, #20]
 80107ea:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 80107ee:	9304      	str	r3, [sp, #16]
 80107f0:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 80107f4:	9303      	str	r3, [sp, #12]
 80107f6:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 80107fa:	9302      	str	r3, [sp, #8]
 80107fc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8010800:	e9cd 8300 	strd	r8, r3, [sp]
 8010804:	463b      	mov	r3, r7
 8010806:	47a8      	blx	r5
 8010808:	b00b      	add	sp, #44	@ 0x2c
 801080a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801080e:	bf00      	nop
 8010810:	20027b8e 	.word	0x20027b8e

08010814 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8010814:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010818:	4698      	mov	r8, r3
 801081a:	6803      	ldr	r3, [r0, #0]
 801081c:	b087      	sub	sp, #28
 801081e:	460e      	mov	r6, r1
 8010820:	6d9d      	ldr	r5, [r3, #88]	@ 0x58
 8010822:	4617      	mov	r7, r2
 8010824:	4b0f      	ldr	r3, [pc, #60]	@ (8010864 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8010826:	4604      	mov	r4, r0
 8010828:	f8b3 9000 	ldrh.w	r9, [r3]
 801082c:	f7ff ff50 	bl	80106d0 <_ZN8touchgfx3HAL3lcdEv>
 8010830:	6803      	ldr	r3, [r0, #0]
 8010832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010834:	4798      	blx	r3
 8010836:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 801083a:	463a      	mov	r2, r7
 801083c:	4631      	mov	r1, r6
 801083e:	f8cd 900c 	str.w	r9, [sp, #12]
 8010842:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8010846:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 801084a:	4620      	mov	r0, r4
 801084c:	9302      	str	r3, [sp, #8]
 801084e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 8010852:	9301      	str	r3, [sp, #4]
 8010854:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8010858:	9300      	str	r3, [sp, #0]
 801085a:	4643      	mov	r3, r8
 801085c:	47a8      	blx	r5
 801085e:	b007      	add	sp, #28
 8010860:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010864:	20027b8e 	.word	0x20027b8e

08010868 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8010868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801086c:	4604      	mov	r4, r0
 801086e:	b08f      	sub	sp, #60	@ 0x3c
 8010870:	4610      	mov	r0, r2
 8010872:	460d      	mov	r5, r1
 8010874:	4691      	mov	r9, r2
 8010876:	461e      	mov	r6, r3
 8010878:	f008 fe86 	bl	8019588 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801087c:	2800      	cmp	r0, #0
 801087e:	f000 809d 	beq.w	80109bc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8010882:	6823      	ldr	r3, [r4, #0]
 8010884:	4620      	mov	r0, r4
 8010886:	f8df b198 	ldr.w	fp, [pc, #408]	@ 8010a20 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 801088a:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 801088e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010890:	4798      	blx	r3
 8010892:	6823      	ldr	r3, [r4, #0]
 8010894:	4620      	mov	r0, r4
 8010896:	f8df a18c 	ldr.w	sl, [pc, #396]	@ 8010a24 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 801089a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801089c:	4798      	blx	r3
 801089e:	f8bb 3000 	ldrh.w	r3, [fp]
 80108a2:	4f5c      	ldr	r7, [pc, #368]	@ (8010a14 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80108a4:	9301      	str	r3, [sp, #4]
 80108a6:	f8ba 3000 	ldrh.w	r3, [sl]
 80108aa:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 80108ae:	4640      	mov	r0, r8
 80108b0:	9302      	str	r3, [sp, #8]
 80108b2:	883b      	ldrh	r3, [r7, #0]
 80108b4:	9303      	str	r3, [sp, #12]
 80108b6:	4b58      	ldr	r3, [pc, #352]	@ (8010a18 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80108b8:	881a      	ldrh	r2, [r3, #0]
 80108ba:	9305      	str	r3, [sp, #20]
 80108bc:	9204      	str	r2, [sp, #16]
 80108be:	f008 fef7 	bl	80196b0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80108c2:	8038      	strh	r0, [r7, #0]
 80108c4:	4640      	mov	r0, r8
 80108c6:	f008 ff27 	bl	8019718 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80108ca:	9b05      	ldr	r3, [sp, #20]
 80108cc:	b280      	uxth	r0, r0
 80108ce:	8018      	strh	r0, [r3, #0]
 80108d0:	4b52      	ldr	r3, [pc, #328]	@ (8010a1c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 80108d2:	781b      	ldrb	r3, [r3, #0]
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d174      	bne.n	80109c2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 80108d8:	883b      	ldrh	r3, [r7, #0]
 80108da:	f8aa 0000 	strh.w	r0, [sl]
 80108de:	f8ab 3000 	strh.w	r3, [fp]
 80108e2:	4648      	mov	r0, r9
 80108e4:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 80108e8:	f008 fe4e 	bl	8019588 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80108ec:	2200      	movs	r2, #0
 80108ee:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 80108f2:	4611      	mov	r1, r2
 80108f4:	4628      	mov	r0, r5
 80108f6:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 80108fa:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 80108fe:	f7f5 ff06 	bl	800670e <_ZN8touchgfx8Drawable5setXYEss>
 8010902:	2301      	movs	r3, #1
 8010904:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 8010908:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 801090c:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8010910:	2b00      	cmp	r3, #0
 8010912:	dd5c      	ble.n	80109ce <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8010914:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8010918:	2b00      	cmp	r3, #0
 801091a:	dd58      	ble.n	80109ce <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 801091c:	462a      	mov	r2, r5
 801091e:	ab0a      	add	r3, sp, #40	@ 0x28
 8010920:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8010924:	6851      	ldr	r1, [r2, #4]
 8010926:	c303      	stmia	r3!, {r0, r1}
 8010928:	4631      	mov	r1, r6
 801092a:	a80a      	add	r0, sp, #40	@ 0x28
 801092c:	f7ff fc00 	bl	8010130 <_ZN8touchgfx4RectaNERKS0_>
 8010930:	4b38      	ldr	r3, [pc, #224]	@ (8010a14 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8010932:	2100      	movs	r1, #0
 8010934:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010938:	4b37      	ldr	r3, [pc, #220]	@ (8010a18 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801093a:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 801093e:	aa0a      	add	r2, sp, #40	@ 0x28
 8010940:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010944:	910c      	str	r1, [sp, #48]	@ 0x30
 8010946:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 801094a:	ab08      	add	r3, sp, #32
 801094c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010950:	e883 0003 	stmia.w	r3, {r0, r1}
 8010954:	4618      	mov	r0, r3
 8010956:	a90c      	add	r1, sp, #48	@ 0x30
 8010958:	f7ff fbea 	bl	8010130 <_ZN8touchgfx4RectaNERKS0_>
 801095c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801095e:	2b00      	cmp	r3, #0
 8010960:	d13c      	bne.n	80109dc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8010962:	2000      	movs	r0, #0
 8010964:	f884 0076 	strb.w	r0, [r4, #118]	@ 0x76
 8010968:	2600      	movs	r6, #0
 801096a:	696b      	ldr	r3, [r5, #20]
 801096c:	a908      	add	r1, sp, #32
 801096e:	682a      	ldr	r2, [r5, #0]
 8010970:	4628      	mov	r0, r5
 8010972:	9305      	str	r3, [sp, #20]
 8010974:	616e      	str	r6, [r5, #20]
 8010976:	6892      	ldr	r2, [r2, #8]
 8010978:	4790      	blx	r2
 801097a:	9b05      	ldr	r3, [sp, #20]
 801097c:	4652      	mov	r2, sl
 801097e:	4649      	mov	r1, r9
 8010980:	616b      	str	r3, [r5, #20]
 8010982:	4628      	mov	r0, r5
 8010984:	f884 6076 	strb.w	r6, [r4, #118]	@ 0x76
 8010988:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 801098c:	f7f5 febf 	bl	800670e <_ZN8touchgfx8Drawable5setXYEss>
 8010990:	9a01      	ldr	r2, [sp, #4]
 8010992:	4b23      	ldr	r3, [pc, #140]	@ (8010a20 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8010994:	4620      	mov	r0, r4
 8010996:	801a      	strh	r2, [r3, #0]
 8010998:	9a02      	ldr	r2, [sp, #8]
 801099a:	4b22      	ldr	r3, [pc, #136]	@ (8010a24 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 801099c:	801a      	strh	r2, [r3, #0]
 801099e:	9a03      	ldr	r2, [sp, #12]
 80109a0:	4b1c      	ldr	r3, [pc, #112]	@ (8010a14 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80109a2:	801a      	strh	r2, [r3, #0]
 80109a4:	4b1c      	ldr	r3, [pc, #112]	@ (8010a18 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80109a6:	9a04      	ldr	r2, [sp, #16]
 80109a8:	801a      	strh	r2, [r3, #0]
 80109aa:	6823      	ldr	r3, [r4, #0]
 80109ac:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 80109b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80109b2:	4798      	blx	r3
 80109b4:	6823      	ldr	r3, [r4, #0]
 80109b6:	4620      	mov	r0, r4
 80109b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80109ba:	4798      	blx	r3
 80109bc:	b00f      	add	sp, #60	@ 0x3c
 80109be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109c2:	883b      	ldrh	r3, [r7, #0]
 80109c4:	f8ab 0000 	strh.w	r0, [fp]
 80109c8:	f8aa 3000 	strh.w	r3, [sl]
 80109cc:	e789      	b.n	80108e2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 80109ce:	462a      	mov	r2, r5
 80109d0:	ab0a      	add	r3, sp, #40	@ 0x28
 80109d2:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80109d6:	6851      	ldr	r1, [r2, #4]
 80109d8:	c303      	stmia	r3!, {r0, r1}
 80109da:	e7a9      	b.n	8010930 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 80109dc:	a807      	add	r0, sp, #28
 80109de:	f008 ffd7 	bl	8019990 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80109e2:	4606      	mov	r6, r0
 80109e4:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 80109e6:	6803      	ldr	r3, [r0, #0]
 80109e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80109ea:	4798      	blx	r3
 80109ec:	4286      	cmp	r6, r0
 80109ee:	d1b8      	bne.n	8010962 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 80109f0:	f7ff fe6e 	bl	80106d0 <_ZN8touchgfx3HAL3lcdEv>
 80109f4:	6803      	ldr	r3, [r0, #0]
 80109f6:	4606      	mov	r6, r0
 80109f8:	a807      	add	r0, sp, #28
 80109fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80109fc:	9305      	str	r3, [sp, #20]
 80109fe:	f008 ffc7 	bl	8019990 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8010a02:	9b05      	ldr	r3, [sp, #20]
 8010a04:	4601      	mov	r1, r0
 8010a06:	4630      	mov	r0, r6
 8010a08:	4798      	blx	r3
 8010a0a:	f080 0001 	eor.w	r0, r0, #1
 8010a0e:	b2c0      	uxtb	r0, r0
 8010a10:	e7a8      	b.n	8010964 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 8010a12:	bf00      	nop
 8010a14:	20027b88 	.word	0x20027b88
 8010a18:	20027b8a 	.word	0x20027b8a
 8010a1c:	20027b8c 	.word	0x20027b8c
 8010a20:	20027b8e 	.word	0x20027b8e
 8010a24:	20027b90 	.word	0x20027b90

08010a28 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8010a28:	4b07      	ldr	r3, [pc, #28]	@ (8010a48 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8010a2a:	b510      	push	{r4, lr}
 8010a2c:	781b      	ldrb	r3, [r3, #0]
 8010a2e:	4604      	mov	r4, r0
 8010a30:	b13b      	cbz	r3, 8010a42 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8010a32:	6803      	ldr	r3, [r0, #0]
 8010a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010a36:	4798      	blx	r3
 8010a38:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8010a3a:	4283      	cmp	r3, r0
 8010a3c:	d101      	bne.n	8010a42 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8010a3e:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8010a40:	bd10      	pop	{r4, pc}
 8010a42:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8010a44:	e7fc      	b.n	8010a40 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8010a46:	bf00      	nop
 8010a48:	20027b92 	.word	0x20027b92

08010a4c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8010a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a50:	461d      	mov	r5, r3
 8010a52:	b08a      	sub	sp, #40	@ 0x28
 8010a54:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010a58:	4690      	mov	r8, r2
 8010a5a:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 8010a5e:	2400      	movs	r4, #0
 8010a60:	4607      	mov	r7, r0
 8010a62:	fb06 8505 	mla	r5, r6, r5, r8
 8010a66:	9404      	str	r4, [sp, #16]
 8010a68:	f88d 4020 	strb.w	r4, [sp, #32]
 8010a6c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8010a70:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8010a74:	f8ad 3018 	strh.w	r3, [sp, #24]
 8010a78:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8010a7c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8010a80:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8010a84:	f8ad 301c 	strh.w	r3, [sp, #28]
 8010a88:	f7ff ffce 	bl	8010a28 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010a8c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8010a90:	6878      	ldr	r0, [r7, #4]
 8010a92:	f8ad 601e 	strh.w	r6, [sp, #30]
 8010a96:	a901      	add	r1, sp, #4
 8010a98:	9505      	str	r5, [sp, #20]
 8010a9a:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8010a9e:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 8010aa2:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 8010aa6:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 8010aaa:	6803      	ldr	r3, [r0, #0]
 8010aac:	685b      	ldr	r3, [r3, #4]
 8010aae:	4798      	blx	r3
 8010ab0:	b00a      	add	sp, #40	@ 0x28
 8010ab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010ab6 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8010ab6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010aba:	b08b      	sub	sp, #44	@ 0x2c
 8010abc:	2400      	movs	r4, #0
 8010abe:	4691      	mov	r9, r2
 8010ac0:	461d      	mov	r5, r3
 8010ac2:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 8010ac6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010aca:	4688      	mov	r8, r1
 8010acc:	4607      	mov	r7, r0
 8010ace:	9404      	str	r4, [sp, #16]
 8010ad0:	fb06 9505 	mla	r5, r6, r5, r9
 8010ad4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010ad8:	f7ff ffa6 	bl	8010a28 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010adc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8010ae0:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8010ae4:	6878      	ldr	r0, [r7, #4]
 8010ae6:	f8ad 3018 	strh.w	r3, [sp, #24]
 8010aea:	a901      	add	r1, sp, #4
 8010aec:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8010af0:	9505      	str	r5, [sp, #20]
 8010af2:	f8ad 301a 	strh.w	r3, [sp, #26]
 8010af6:	f8ad 401c 	strh.w	r4, [sp, #28]
 8010afa:	f8ad 601e 	strh.w	r6, [sp, #30]
 8010afe:	f8cd 8010 	str.w	r8, [sp, #16]
 8010b02:	f8ad 4020 	strh.w	r4, [sp, #32]
 8010b06:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8010b0a:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 8010b0e:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 8010b12:	6803      	ldr	r3, [r0, #0]
 8010b14:	685b      	ldr	r3, [r3, #4]
 8010b16:	4798      	blx	r3
 8010b18:	b00b      	add	sp, #44	@ 0x2c
 8010b1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08010b20 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8010b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b24:	b08a      	sub	sp, #40	@ 0x28
 8010b26:	4698      	mov	r8, r3
 8010b28:	2300      	movs	r3, #0
 8010b2a:	4606      	mov	r6, r0
 8010b2c:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 8010b30:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 8010b34:	2d0b      	cmp	r5, #11
 8010b36:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 8010b3a:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 8010b3e:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 8010b42:	9304      	str	r3, [sp, #16]
 8010b44:	d137      	bne.n	8010bb6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 8010b46:	2380      	movs	r3, #128	@ 0x80
 8010b48:	f88d 0020 	strb.w	r0, [sp, #32]
 8010b4c:	4630      	mov	r0, r6
 8010b4e:	9203      	str	r2, [sp, #12]
 8010b50:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8010b54:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8010b58:	f8ad 3018 	strh.w	r3, [sp, #24]
 8010b5c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8010b60:	f8ad 301a 	strh.w	r3, [sp, #26]
 8010b64:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8010b68:	f8ad 301c 	strh.w	r3, [sp, #28]
 8010b6c:	f7ff ff5c 	bl	8010a28 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010b70:	2c0b      	cmp	r4, #11
 8010b72:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8010b76:	f8ad 701e 	strh.w	r7, [sp, #30]
 8010b7a:	bf94      	ite	ls
 8010b7c:	4b19      	ldrls	r3, [pc, #100]	@ (8010be4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8010b7e:	2100      	movhi	r1, #0
 8010b80:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 8010b84:	bf98      	it	ls
 8010b86:	5d19      	ldrbls	r1, [r3, r4]
 8010b88:	fb02 8307 	mla	r3, r2, r7, r8
 8010b8c:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8010b90:	10c9      	asrs	r1, r1, #3
 8010b92:	fb01 0003 	mla	r0, r1, r3, r0
 8010b96:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 8010b9a:	a901      	add	r1, sp, #4
 8010b9c:	9005      	str	r0, [sp, #20]
 8010b9e:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 8010ba2:	2300      	movs	r3, #0
 8010ba4:	6870      	ldr	r0, [r6, #4]
 8010ba6:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8010baa:	6803      	ldr	r3, [r0, #0]
 8010bac:	685b      	ldr	r3, [r3, #4]
 8010bae:	4798      	blx	r3
 8010bb0:	b00a      	add	sp, #40	@ 0x28
 8010bb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bb6:	2d02      	cmp	r5, #2
 8010bb8:	d109      	bne.n	8010bce <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 8010bba:	28ff      	cmp	r0, #255	@ 0xff
 8010bbc:	d105      	bne.n	8010bca <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 8010bbe:	f1bc 0f00 	cmp.w	ip, #0
 8010bc2:	bf14      	ite	ne
 8010bc4:	2340      	movne	r3, #64	@ 0x40
 8010bc6:	2320      	moveq	r3, #32
 8010bc8:	e7be      	b.n	8010b48 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8010bca:	2340      	movs	r3, #64	@ 0x40
 8010bcc:	e7bc      	b.n	8010b48 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8010bce:	28ff      	cmp	r0, #255	@ 0xff
 8010bd0:	d105      	bne.n	8010bde <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 8010bd2:	f1bc 0f00 	cmp.w	ip, #0
 8010bd6:	bf14      	ite	ne
 8010bd8:	2304      	movne	r3, #4
 8010bda:	2301      	moveq	r3, #1
 8010bdc:	e7b4      	b.n	8010b48 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8010bde:	2304      	movs	r3, #4
 8010be0:	e7b2      	b.n	8010b48 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8010be2:	bf00      	nop
 8010be4:	0802a620 	.word	0x0802a620

08010be8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8010be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bec:	b08b      	sub	sp, #44	@ 0x2c
 8010bee:	461d      	mov	r5, r3
 8010bf0:	2400      	movs	r4, #0
 8010bf2:	4688      	mov	r8, r1
 8010bf4:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 8010bf8:	4693      	mov	fp, r2
 8010bfa:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 8010bfe:	4607      	mov	r7, r0
 8010c00:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8010c04:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 8010c08:	9404      	str	r4, [sp, #16]
 8010c0a:	bf14      	ite	ne
 8010c0c:	2308      	movne	r3, #8
 8010c0e:	2302      	moveq	r3, #2
 8010c10:	fb05 b50a 	mla	r5, r5, sl, fp
 8010c14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010c18:	f7ff ff06 	bl	8010a28 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010c1c:	2e0b      	cmp	r6, #11
 8010c1e:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8010c22:	a901      	add	r1, sp, #4
 8010c24:	bf98      	it	ls
 8010c26:	4b13      	ldrls	r3, [pc, #76]	@ (8010c74 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8010c28:	f8ad a01e 	strh.w	sl, [sp, #30]
 8010c2c:	bf98      	it	ls
 8010c2e:	5d9c      	ldrbls	r4, [r3, r6]
 8010c30:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8010c34:	10e4      	asrs	r4, r4, #3
 8010c36:	f8cd 8010 	str.w	r8, [sp, #16]
 8010c3a:	f8ad 3018 	strh.w	r3, [sp, #24]
 8010c3e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8010c42:	fb04 0405 	mla	r4, r4, r5, r0
 8010c46:	6878      	ldr	r0, [r7, #4]
 8010c48:	f8ad 301a 	strh.w	r3, [sp, #26]
 8010c4c:	2300      	movs	r3, #0
 8010c4e:	9405      	str	r4, [sp, #20]
 8010c50:	f8ad 301c 	strh.w	r3, [sp, #28]
 8010c54:	f88d 9020 	strb.w	r9, [sp, #32]
 8010c58:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 8010c5c:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8010c60:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 8010c64:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 8010c68:	6803      	ldr	r3, [r0, #0]
 8010c6a:	685b      	ldr	r3, [r3, #4]
 8010c6c:	4798      	blx	r3
 8010c6e:	b00b      	add	sp, #44	@ 0x2c
 8010c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c74:	0802a620 	.word	0x0802a620

08010c78 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8010c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c7c:	461e      	mov	r6, r3
 8010c7e:	4b0a      	ldr	r3, [pc, #40]	@ (8010ca8 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8010c80:	460f      	mov	r7, r1
 8010c82:	4690      	mov	r8, r2
 8010c84:	881d      	ldrh	r5, [r3, #0]
 8010c86:	f7ff fd23 	bl	80106d0 <_ZN8touchgfx3HAL3lcdEv>
 8010c8a:	6803      	ldr	r3, [r0, #0]
 8010c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c8e:	4798      	blx	r3
 8010c90:	280b      	cmp	r0, #11
 8010c92:	bf96      	itet	ls
 8010c94:	4b05      	ldrls	r3, [pc, #20]	@ (8010cac <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8010c96:	2400      	movhi	r4, #0
 8010c98:	5c1c      	ldrbls	r4, [r3, r0]
 8010c9a:	fb08 7005 	mla	r0, r8, r5, r7
 8010c9e:	10e4      	asrs	r4, r4, #3
 8010ca0:	fb04 6000 	mla	r0, r4, r0, r6
 8010ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ca8:	20027b8e 	.word	0x20027b8e
 8010cac:	0802a620 	.word	0x0802a620

08010cb0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8010cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010cb2:	b08b      	sub	sp, #44	@ 0x2c
 8010cb4:	461f      	mov	r7, r3
 8010cb6:	4604      	mov	r4, r0
 8010cb8:	4616      	mov	r6, r2
 8010cba:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8010cbe:	2500      	movs	r5, #0
 8010cc0:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8010cc4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8010cc8:	9504      	str	r5, [sp, #16]
 8010cca:	f8ad 3018 	strh.w	r3, [sp, #24]
 8010cce:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8010cd2:	f8ad 301a 	strh.w	r3, [sp, #26]
 8010cd6:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8010cda:	f8ad 301c 	strh.w	r3, [sp, #28]
 8010cde:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8010ce2:	f88d 3020 	strb.w	r3, [sp, #32]
 8010ce6:	f7ff fe9f 	bl	8010a28 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010cea:	463a      	mov	r2, r7
 8010cec:	4631      	mov	r1, r6
 8010cee:	4603      	mov	r3, r0
 8010cf0:	4620      	mov	r0, r4
 8010cf2:	f7ff ffc1 	bl	8010c78 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8010cf6:	4b0e      	ldr	r3, [pc, #56]	@ (8010d30 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8010cf8:	9005      	str	r0, [sp, #20]
 8010cfa:	881b      	ldrh	r3, [r3, #0]
 8010cfc:	f8ad 301e 	strh.w	r3, [sp, #30]
 8010d00:	f7ff fce6 	bl	80106d0 <_ZN8touchgfx3HAL3lcdEv>
 8010d04:	6803      	ldr	r3, [r0, #0]
 8010d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d08:	4798      	blx	r3
 8010d0a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010d0c:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 8010d10:	a901      	add	r1, sp, #4
 8010d12:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 8010d16:	9304      	str	r3, [sp, #16]
 8010d18:	6860      	ldr	r0, [r4, #4]
 8010d1a:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 8010d1e:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 8010d22:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 8010d26:	6803      	ldr	r3, [r0, #0]
 8010d28:	685b      	ldr	r3, [r3, #4]
 8010d2a:	4798      	blx	r3
 8010d2c:	b00b      	add	sp, #44	@ 0x2c
 8010d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d30:	20027b8e 	.word	0x20027b8e

08010d34 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8010d34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d36:	b08d      	sub	sp, #52	@ 0x34
 8010d38:	2501      	movs	r5, #1
 8010d3a:	4604      	mov	r4, r0
 8010d3c:	466b      	mov	r3, sp
 8010d3e:	9503      	str	r5, [sp, #12]
 8010d40:	e883 0006 	stmia.w	r3, {r1, r2}
 8010d44:	2300      	movs	r3, #0
 8010d46:	f8bd 6000 	ldrh.w	r6, [sp]
 8010d4a:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8010d4e:	9306      	str	r3, [sp, #24]
 8010d50:	6803      	ldr	r3, [r0, #0]
 8010d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010d54:	4798      	blx	r3
 8010d56:	463a      	mov	r2, r7
 8010d58:	4631      	mov	r1, r6
 8010d5a:	4603      	mov	r3, r0
 8010d5c:	4620      	mov	r0, r4
 8010d5e:	f7ff ff8b 	bl	8010c78 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8010d62:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8010d64:	9004      	str	r0, [sp, #16]
 8010d66:	9307      	str	r3, [sp, #28]
 8010d68:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8010d6c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8010d70:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8010d74:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8010d78:	4b0e      	ldr	r3, [pc, #56]	@ (8010db4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8010d7a:	881b      	ldrh	r3, [r3, #0]
 8010d7c:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8010d80:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8010d84:	f7ff fca4 	bl	80106d0 <_ZN8touchgfx3HAL3lcdEv>
 8010d88:	6803      	ldr	r3, [r0, #0]
 8010d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d8c:	4798      	blx	r3
 8010d8e:	23ff      	movs	r3, #255	@ 0xff
 8010d90:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 8010d94:	a903      	add	r1, sp, #12
 8010d96:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8010d9a:	6860      	ldr	r0, [r4, #4]
 8010d9c:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8010da0:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 8010da4:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 8010da8:	6803      	ldr	r3, [r0, #0]
 8010daa:	685b      	ldr	r3, [r3, #4]
 8010dac:	4798      	blx	r3
 8010dae:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8010db0:	b00d      	add	sp, #52	@ 0x34
 8010db2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010db4:	20027b8e 	.word	0x20027b8e

08010db8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8010db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010dbc:	b08c      	sub	sp, #48	@ 0x30
 8010dbe:	461e      	mov	r6, r3
 8010dc0:	2300      	movs	r3, #0
 8010dc2:	4604      	mov	r4, r0
 8010dc4:	466d      	mov	r5, sp
 8010dc6:	9306      	str	r3, [sp, #24]
 8010dc8:	6803      	ldr	r3, [r0, #0]
 8010dca:	e885 0006 	stmia.w	r5, {r1, r2}
 8010dce:	2501      	movs	r5, #1
 8010dd0:	f8bd 7000 	ldrh.w	r7, [sp]
 8010dd4:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8010dd8:	9503      	str	r5, [sp, #12]
 8010dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010ddc:	4798      	blx	r3
 8010dde:	4642      	mov	r2, r8
 8010de0:	4639      	mov	r1, r7
 8010de2:	4603      	mov	r3, r0
 8010de4:	4620      	mov	r0, r4
 8010de6:	f7ff ff47 	bl	8010c78 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8010dea:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8010dee:	9004      	str	r0, [sp, #16]
 8010df0:	f8ad 3020 	strh.w	r3, [sp, #32]
 8010df4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8010df8:	9607      	str	r6, [sp, #28]
 8010dfa:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8010dfe:	4b10      	ldr	r3, [pc, #64]	@ (8010e40 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8010e00:	881b      	ldrh	r3, [r3, #0]
 8010e02:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8010e06:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010e08:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8010e0c:	f7ff fc60 	bl	80106d0 <_ZN8touchgfx3HAL3lcdEv>
 8010e10:	6803      	ldr	r3, [r0, #0]
 8010e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e14:	4798      	blx	r3
 8010e16:	23ff      	movs	r3, #255	@ 0xff
 8010e18:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 8010e1c:	a903      	add	r1, sp, #12
 8010e1e:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8010e22:	6860      	ldr	r0, [r4, #4]
 8010e24:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8010e28:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 8010e2c:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 8010e30:	6803      	ldr	r3, [r0, #0]
 8010e32:	685b      	ldr	r3, [r3, #4]
 8010e34:	4798      	blx	r3
 8010e36:	4630      	mov	r0, r6
 8010e38:	b00c      	add	sp, #48	@ 0x30
 8010e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e3e:	bf00      	nop
 8010e40:	20027b8e 	.word	0x20027b8e

08010e44 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8010e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e46:	b085      	sub	sp, #20
 8010e48:	4605      	mov	r5, r0
 8010e4a:	ac02      	add	r4, sp, #8
 8010e4c:	e884 0006 	stmia.w	r4, {r1, r2}
 8010e50:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8010e54:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8010e58:	f7ff fde6 	bl	8010a28 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010e5c:	4631      	mov	r1, r6
 8010e5e:	4603      	mov	r3, r0
 8010e60:	463a      	mov	r2, r7
 8010e62:	4628      	mov	r0, r5
 8010e64:	f7ff ff08 	bl	8010c78 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8010e68:	4a05      	ldr	r2, [pc, #20]	@ (8010e80 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8010e6a:	682b      	ldr	r3, [r5, #0]
 8010e6c:	8812      	ldrh	r2, [r2, #0]
 8010e6e:	9200      	str	r2, [sp, #0]
 8010e70:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 8010e72:	4603      	mov	r3, r0
 8010e74:	4628      	mov	r0, r5
 8010e76:	e894 0006 	ldmia.w	r4, {r1, r2}
 8010e7a:	47b0      	blx	r6
 8010e7c:	b005      	add	sp, #20
 8010e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e80:	20027b8e 	.word	0x20027b8e

08010e84 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8010e84:	b570      	push	{r4, r5, r6, lr}
 8010e86:	f890 306a 	ldrb.w	r3, [r0, #106]	@ 0x6a
 8010e8a:	4604      	mov	r4, r0
 8010e8c:	b19b      	cbz	r3, 8010eb6 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8010e8e:	2002      	movs	r0, #2
 8010e90:	f7ef fe72 	bl	8000b78 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8010e94:	2300      	movs	r3, #0
 8010e96:	4620      	mov	r0, r4
 8010e98:	f884 306a 	strb.w	r3, [r4, #106]	@ 0x6a
 8010e9c:	f884 3069 	strb.w	r3, [r4, #105]	@ 0x69
 8010ea0:	6823      	ldr	r3, [r4, #0]
 8010ea2:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 8010ea6:	f7ff fdbf 	bl	8010a28 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010eaa:	4601      	mov	r1, r0
 8010eac:	4620      	mov	r0, r4
 8010eae:	462b      	mov	r3, r5
 8010eb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010eb4:	4718      	bx	r3
 8010eb6:	bd70      	pop	{r4, r5, r6, pc}

08010eb8 <_ZN8touchgfx3HAL12setMCUActiveEb>:
 8010eb8:	b570      	push	{r4, r5, r6, lr}
 8010eba:	4605      	mov	r5, r0
 8010ebc:	460c      	mov	r4, r1
 8010ebe:	2003      	movs	r0, #3
 8010ec0:	b149      	cbz	r1, 8010ed6 <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 8010ec2:	f7ef fdf9 	bl	8000ab8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8010ec6:	6928      	ldr	r0, [r5, #16]
 8010ec8:	b168      	cbz	r0, 8010ee6 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 8010eca:	6803      	ldr	r3, [r0, #0]
 8010ecc:	2101      	movs	r1, #1
 8010ece:	695b      	ldr	r3, [r3, #20]
 8010ed0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010ed4:	4718      	bx	r3
 8010ed6:	f7ef fe1f 	bl	8000b18 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8010eda:	6928      	ldr	r0, [r5, #16]
 8010edc:	b118      	cbz	r0, 8010ee6 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 8010ede:	6803      	ldr	r3, [r0, #0]
 8010ee0:	4621      	mov	r1, r4
 8010ee2:	695b      	ldr	r3, [r3, #20]
 8010ee4:	e7f4      	b.n	8010ed0 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 8010ee6:	bd70      	pop	{r4, r5, r6, pc}

08010ee8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8010ee8:	b538      	push	{r3, r4, r5, lr}
 8010eea:	f890 3078 	ldrb.w	r3, [r0, #120]	@ 0x78
 8010eee:	4604      	mov	r4, r0
 8010ef0:	460d      	mov	r5, r1
 8010ef2:	428b      	cmp	r3, r1
 8010ef4:	d006      	beq.n	8010f04 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8010ef6:	6803      	ldr	r3, [r0, #0]
 8010ef8:	b929      	cbnz	r1, 8010f06 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8010efa:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8010efe:	4798      	blx	r3
 8010f00:	f884 5078 	strb.w	r5, [r4, #120]	@ 0x78
 8010f04:	bd38      	pop	{r3, r4, r5, pc}
 8010f06:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8010f0a:	e7f8      	b.n	8010efe <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08010f0c <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8010f0c:	4b0d      	ldr	r3, [pc, #52]	@ (8010f44 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8010f0e:	b510      	push	{r4, lr}
 8010f10:	781b      	ldrb	r3, [r3, #0]
 8010f12:	4604      	mov	r4, r0
 8010f14:	b95b      	cbnz	r3, 8010f2e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8010f16:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 8010f1a:	2b02      	cmp	r3, #2
 8010f1c:	d007      	beq.n	8010f2e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8010f1e:	6840      	ldr	r0, [r0, #4]
 8010f20:	f000 f92a 	bl	8011178 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8010f24:	b118      	cbz	r0, 8010f2e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8010f26:	6862      	ldr	r2, [r4, #4]
 8010f28:	7a53      	ldrb	r3, [r2, #9]
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d0fc      	beq.n	8010f28 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8010f2e:	f7f0 fde1 	bl	8001af4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8010f32:	4620      	mov	r0, r4
 8010f34:	2100      	movs	r1, #0
 8010f36:	f7ff ffd7 	bl	8010ee8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8010f3a:	4620      	mov	r0, r4
 8010f3c:	f7ff fd74 	bl	8010a28 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010f40:	bd10      	pop	{r4, pc}
 8010f42:	bf00      	nop
 8010f44:	20027b92 	.word	0x20027b92

08010f48 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 8010f48:	b570      	push	{r4, r5, r6, lr}
 8010f4a:	4604      	mov	r4, r0
 8010f4c:	6803      	ldr	r3, [r0, #0]
 8010f4e:	b919      	cbnz	r1, 8010f58 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 8010f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010f56:	4718      	bx	r3
 8010f58:	2200      	movs	r2, #0
 8010f5a:	f890 6078 	ldrb.w	r6, [r0, #120]	@ 0x78
 8010f5e:	f880 2078 	strb.w	r2, [r0, #120]	@ 0x78
 8010f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f64:	4798      	blx	r3
 8010f66:	4605      	mov	r5, r0
 8010f68:	f884 6078 	strb.w	r6, [r4, #120]	@ 0x78
 8010f6c:	4620      	mov	r0, r4
 8010f6e:	2101      	movs	r1, #1
 8010f70:	f7ff ffba 	bl	8010ee8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8010f74:	4628      	mov	r0, r5
 8010f76:	bd70      	pop	{r4, r5, r6, pc}

08010f78 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8010f78:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8010f7c:	1a13      	subs	r3, r2, r0
 8010f7e:	4258      	negs	r0, r3
 8010f80:	4158      	adcs	r0, r3
 8010f82:	4770      	bx	lr

08010f84 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8010f84:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8010f88:	1a9b      	subs	r3, r3, r2
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	bfdc      	itt	le
 8010f8e:	6882      	ldrle	r2, [r0, #8]
 8010f90:	189b      	addle	r3, r3, r2
 8010f92:	2b01      	cmp	r3, #1
 8010f94:	bfcc      	ite	gt
 8010f96:	2000      	movgt	r0, #0
 8010f98:	2001      	movle	r0, #1
 8010f9a:	4770      	bx	lr

08010f9c <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8010f9c:	6902      	ldr	r2, [r0, #16]
 8010f9e:	6843      	ldr	r3, [r0, #4]
 8010fa0:	2024      	movs	r0, #36	@ 0x24
 8010fa2:	fb00 3002 	mla	r0, r0, r2, r3
 8010fa6:	4770      	bx	lr

08010fa8 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8010fa8:	6803      	ldr	r3, [r0, #0]
 8010faa:	691b      	ldr	r3, [r3, #16]
 8010fac:	4718      	bx	r3

08010fae <_ZN8touchgfx13DMA_Interface7executeEv>:
 8010fae:	2301      	movs	r3, #1
 8010fb0:	b570      	push	{r4, r5, r6, lr}
 8010fb2:	7203      	strb	r3, [r0, #8]
 8010fb4:	4604      	mov	r4, r0
 8010fb6:	6840      	ldr	r0, [r0, #4]
 8010fb8:	6803      	ldr	r3, [r0, #0]
 8010fba:	699b      	ldr	r3, [r3, #24]
 8010fbc:	4798      	blx	r3
 8010fbe:	6803      	ldr	r3, [r0, #0]
 8010fc0:	4605      	mov	r5, r0
 8010fc2:	2b40      	cmp	r3, #64	@ 0x40
 8010fc4:	d00c      	beq.n	8010fe0 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8010fc6:	d810      	bhi.n	8010fea <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8010fc8:	2b04      	cmp	r3, #4
 8010fca:	d01d      	beq.n	8011008 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8010fcc:	d804      	bhi.n	8010fd8 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8010fce:	2b01      	cmp	r3, #1
 8010fd0:	d006      	beq.n	8010fe0 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8010fd2:	2b02      	cmp	r3, #2
 8010fd4:	d02c      	beq.n	8011030 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8010fd6:	bd70      	pop	{r4, r5, r6, pc}
 8010fd8:	2b08      	cmp	r3, #8
 8010fda:	d01d      	beq.n	8011018 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8010fdc:	2b20      	cmp	r3, #32
 8010fde:	d1fa      	bne.n	8010fd6 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8010fe0:	6823      	ldr	r3, [r4, #0]
 8010fe2:	4620      	mov	r0, r4
 8010fe4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010fe6:	4798      	blx	r3
 8010fe8:	e013      	b.n	8011012 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8010fea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010fee:	d0f7      	beq.n	8010fe0 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8010ff0:	d804      	bhi.n	8010ffc <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8010ff2:	2b80      	cmp	r3, #128	@ 0x80
 8010ff4:	d0f4      	beq.n	8010fe0 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8010ff6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010ffa:	e7f0      	b.n	8010fde <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8010ffc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011000:	d0ee      	beq.n	8010fe0 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8011002:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011006:	e7e5      	b.n	8010fd4 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8011008:	6823      	ldr	r3, [r4, #0]
 801100a:	7f01      	ldrb	r1, [r0, #28]
 801100c:	4620      	mov	r0, r4
 801100e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011010:	4798      	blx	r3
 8011012:	6823      	ldr	r3, [r4, #0]
 8011014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011016:	e006      	b.n	8011026 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8011018:	6823      	ldr	r3, [r4, #0]
 801101a:	7f01      	ldrb	r1, [r0, #28]
 801101c:	4620      	mov	r0, r4
 801101e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011020:	4798      	blx	r3
 8011022:	6823      	ldr	r3, [r4, #0]
 8011024:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011026:	4629      	mov	r1, r5
 8011028:	4620      	mov	r0, r4
 801102a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801102e:	4718      	bx	r3
 8011030:	6823      	ldr	r3, [r4, #0]
 8011032:	4620      	mov	r0, r4
 8011034:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011036:	4798      	blx	r3
 8011038:	e7f3      	b.n	8011022 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

0801103a <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 801103a:	4770      	bx	lr

0801103c <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 801103c:	4770      	bx	lr

0801103e <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 801103e:	4770      	bx	lr

08011040 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8011040:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8011044:	b510      	push	{r4, lr}
 8011046:	1ad2      	subs	r2, r2, r3
 8011048:	2a00      	cmp	r2, #0
 801104a:	bfdc      	itt	le
 801104c:	6884      	ldrle	r4, [r0, #8]
 801104e:	1912      	addle	r2, r2, r4
 8011050:	2a01      	cmp	r2, #1
 8011052:	dd16      	ble.n	8011082 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8011054:	6842      	ldr	r2, [r0, #4]
 8011056:	2424      	movs	r4, #36	@ 0x24
 8011058:	fb04 2303 	mla	r3, r4, r3, r2
 801105c:	f101 0220 	add.w	r2, r1, #32
 8011060:	f851 4b04 	ldr.w	r4, [r1], #4
 8011064:	4291      	cmp	r1, r2
 8011066:	f843 4b04 	str.w	r4, [r3], #4
 801106a:	d1f9      	bne.n	8011060 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 801106c:	780a      	ldrb	r2, [r1, #0]
 801106e:	701a      	strb	r2, [r3, #0]
 8011070:	68c3      	ldr	r3, [r0, #12]
 8011072:	6882      	ldr	r2, [r0, #8]
 8011074:	f3bf 8f5b 	dmb	ish
 8011078:	3301      	adds	r3, #1
 801107a:	429a      	cmp	r2, r3
 801107c:	bfd8      	it	le
 801107e:	1a9b      	suble	r3, r3, r2
 8011080:	60c3      	str	r3, [r0, #12]
 8011082:	bd10      	pop	{r4, pc}

08011084 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8011084:	6903      	ldr	r3, [r0, #16]
 8011086:	6882      	ldr	r2, [r0, #8]
 8011088:	f3bf 8f5b 	dmb	ish
 801108c:	3301      	adds	r3, #1
 801108e:	429a      	cmp	r2, r3
 8011090:	bfd8      	it	le
 8011092:	1a9b      	suble	r3, r3, r2
 8011094:	6103      	str	r3, [r0, #16]
 8011096:	4770      	bx	lr

08011098 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8011098:	b570      	push	{r4, r5, r6, lr}
 801109a:	4604      	mov	r4, r0
 801109c:	460e      	mov	r6, r1
 801109e:	6860      	ldr	r0, [r4, #4]
 80110a0:	6803      	ldr	r3, [r0, #0]
 80110a2:	685b      	ldr	r3, [r3, #4]
 80110a4:	4798      	blx	r3
 80110a6:	2800      	cmp	r0, #0
 80110a8:	d1f9      	bne.n	801109e <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 80110aa:	4d0d      	ldr	r5, [pc, #52]	@ (80110e0 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 80110ac:	6828      	ldr	r0, [r5, #0]
 80110ae:	6803      	ldr	r3, [r0, #0]
 80110b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80110b2:	4798      	blx	r3
 80110b4:	f7f0 fd2c 	bl	8001b10 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 80110b8:	6828      	ldr	r0, [r5, #0]
 80110ba:	2101      	movs	r1, #1
 80110bc:	f7ff ff14 	bl	8010ee8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80110c0:	6860      	ldr	r0, [r4, #4]
 80110c2:	4631      	mov	r1, r6
 80110c4:	6803      	ldr	r3, [r0, #0]
 80110c6:	689b      	ldr	r3, [r3, #8]
 80110c8:	4798      	blx	r3
 80110ca:	6823      	ldr	r3, [r4, #0]
 80110cc:	4620      	mov	r0, r4
 80110ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80110d0:	4798      	blx	r3
 80110d2:	6828      	ldr	r0, [r5, #0]
 80110d4:	6803      	ldr	r3, [r0, #0]
 80110d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80110da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80110dc:	4718      	bx	r3
 80110de:	bf00      	nop
 80110e0:	20027b94 	.word	0x20027b94

080110e4 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 80110e4:	b508      	push	{r3, lr}
 80110e6:	f7f0 fd05 	bl	8001af4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80110ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80110ee:	f7f0 bd09 	b.w	8001b04 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080110f2 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 80110f2:	b510      	push	{r4, lr}
 80110f4:	4604      	mov	r4, r0
 80110f6:	2114      	movs	r1, #20
 80110f8:	f014 fca9 	bl	8025a4e <_ZdlPvj>
 80110fc:	4620      	mov	r0, r4
 80110fe:	bd10      	pop	{r4, pc}

08011100 <_ZN8touchgfx13DMA_Interface5startEv>:
 8011100:	b510      	push	{r4, lr}
 8011102:	4604      	mov	r4, r0
 8011104:	6840      	ldr	r0, [r0, #4]
 8011106:	6803      	ldr	r3, [r0, #0]
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	4798      	blx	r3
 801110c:	b948      	cbnz	r0, 8011122 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801110e:	7a63      	ldrb	r3, [r4, #9]
 8011110:	b13b      	cbz	r3, 8011122 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8011112:	7a23      	ldrb	r3, [r4, #8]
 8011114:	b92b      	cbnz	r3, 8011122 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8011116:	6823      	ldr	r3, [r4, #0]
 8011118:	4620      	mov	r0, r4
 801111a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801111c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011120:	4718      	bx	r3
 8011122:	bd10      	pop	{r4, pc}

08011124 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8011124:	b570      	push	{r4, r5, r6, lr}
 8011126:	4604      	mov	r4, r0
 8011128:	6840      	ldr	r0, [r0, #4]
 801112a:	6803      	ldr	r3, [r0, #0]
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	4798      	blx	r3
 8011130:	4605      	mov	r5, r0
 8011132:	b930      	cbnz	r0, 8011142 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8011134:	7a23      	ldrb	r3, [r4, #8]
 8011136:	b123      	cbz	r3, 8011142 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8011138:	6860      	ldr	r0, [r4, #4]
 801113a:	6803      	ldr	r3, [r0, #0]
 801113c:	695b      	ldr	r3, [r3, #20]
 801113e:	4798      	blx	r3
 8011140:	7225      	strb	r5, [r4, #8]
 8011142:	6860      	ldr	r0, [r4, #4]
 8011144:	6803      	ldr	r3, [r0, #0]
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	4798      	blx	r3
 801114a:	b928      	cbnz	r0, 8011158 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 801114c:	6823      	ldr	r3, [r4, #0]
 801114e:	4620      	mov	r0, r4
 8011150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011152:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011156:	4718      	bx	r3
 8011158:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801115c:	f7f0 bce0 	b.w	8001b20 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08011160 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8011160:	b510      	push	{r4, lr}
 8011162:	6082      	str	r2, [r0, #8]
 8011164:	2200      	movs	r2, #0
 8011166:	4c03      	ldr	r4, [pc, #12]	@ (8011174 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8011168:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801116c:	e9c0 4100 	strd	r4, r1, [r0]
 8011170:	bd10      	pop	{r4, pc}
 8011172:	bf00      	nop
 8011174:	0802a634 	.word	0x0802a634

08011178 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8011178:	6840      	ldr	r0, [r0, #4]
 801117a:	6803      	ldr	r3, [r0, #0]
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	4718      	bx	r3

08011180 <_ZNK8touchgfx19PainterRGB565Bitmap18getRenderingMethodEv>:
 8011180:	b508      	push	{r3, lr}
 8011182:	4b05      	ldr	r3, [pc, #20]	@ (8011198 <_ZNK8touchgfx19PainterRGB565Bitmap18getRenderingMethodEv+0x18>)
 8011184:	6818      	ldr	r0, [r3, #0]
 8011186:	6803      	ldr	r3, [r0, #0]
 8011188:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801118c:	4798      	blx	r3
 801118e:	1e43      	subs	r3, r0, #1
 8011190:	4258      	negs	r0, r3
 8011192:	4158      	adcs	r0, r3
 8011194:	bd08      	pop	{r3, pc}
 8011196:	bf00      	nop
 8011198:	20027b94 	.word	0x20027b94

0801119c <_ZN8touchgfx19PainterRGB565BitmapD1Ev>:
 801119c:	4770      	bx	lr

0801119e <_ZThn8_N8touchgfx19PainterRGB565BitmapD1Ev>:
 801119e:	3808      	subs	r0, #8
 80111a0:	4770      	bx	lr
	...

080111a4 <_ZNK8touchgfx19PainterRGB565Bitmap5setupERKNS_4RectE>:
 80111a4:	b538      	push	{r3, r4, r5, lr}
 80111a6:	4b10      	ldr	r3, [pc, #64]	@ (80111e8 <_ZNK8touchgfx19PainterRGB565Bitmap5setupERKNS_4RectE+0x44>)
 80111a8:	4604      	mov	r4, r0
 80111aa:	f9b1 5004 	ldrsh.w	r5, [r1, #4]
 80111ae:	781b      	ldrb	r3, [r3, #0]
 80111b0:	8085      	strh	r5, [r0, #4]
 80111b2:	b96b      	cbnz	r3, 80111d0 <_ZNK8touchgfx19PainterRGB565Bitmap5setupERKNS_4RectE+0x2c>
 80111b4:	f9b0 201c 	ldrsh.w	r2, [r0, #28]
 80111b8:	8462      	strh	r2, [r4, #34]	@ 0x22
 80111ba:	b963      	cbnz	r3, 80111d6 <_ZNK8touchgfx19PainterRGB565Bitmap5setupERKNS_4RectE+0x32>
 80111bc:	f9b4 001e 	ldrsh.w	r0, [r4, #30]
 80111c0:	84a0      	strh	r0, [r4, #36]	@ 0x24
 80111c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80111c6:	89a0      	ldrh	r0, [r4, #12]
 80111c8:	1ac0      	subs	r0, r0, r3
 80111ca:	bf18      	it	ne
 80111cc:	2001      	movne	r0, #1
 80111ce:	bd38      	pop	{r3, r4, r5, pc}
 80111d0:	f9b0 201e 	ldrsh.w	r2, [r0, #30]
 80111d4:	e7f0      	b.n	80111b8 <_ZNK8touchgfx19PainterRGB565Bitmap5setupERKNS_4RectE+0x14>
 80111d6:	f104 000c 	add.w	r0, r4, #12
 80111da:	f008 fa69 	bl	80196b0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80111de:	1b40      	subs	r0, r0, r5
 80111e0:	8ba5      	ldrh	r5, [r4, #28]
 80111e2:	1b40      	subs	r0, r0, r5
 80111e4:	b200      	sxth	r0, r0
 80111e6:	e7eb      	b.n	80111c0 <_ZNK8touchgfx19PainterRGB565Bitmap5setupERKNS_4RectE+0x1c>
 80111e8:	20027b8c 	.word	0x20027b8c

080111ec <_ZNK8touchgfx19PainterRGB565Bitmap8tearDownEv>:
 80111ec:	f7f0 be4c 	b.w	8001e88 <_ZN8touchgfx5paint8tearDownEv>

080111f0 <_ZN8touchgfx19PainterRGB565BitmapD0Ev>:
 80111f0:	b510      	push	{r4, lr}
 80111f2:	4604      	mov	r4, r0
 80111f4:	212c      	movs	r1, #44	@ 0x2c
 80111f6:	f014 fc2a 	bl	8025a4e <_ZdlPvj>
 80111fa:	4620      	mov	r0, r4
 80111fc:	bd10      	pop	{r4, pc}

080111fe <_ZThn8_N8touchgfx19PainterRGB565BitmapD0Ev>:
 80111fe:	f1a0 0008 	sub.w	r0, r0, #8
 8011202:	e7f5      	b.n	80111f0 <_ZN8touchgfx19PainterRGB565BitmapD0Ev>

08011204 <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh>:
 8011204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011208:	4606      	mov	r6, r0
 801120a:	b085      	sub	sp, #20
 801120c:	8c77      	ldrh	r7, [r6, #34]	@ 0x22
 801120e:	f89d 0040 	ldrb.w	r0, [sp, #64]	@ 0x40
 8011212:	441f      	add	r7, r3
 8011214:	8cb5      	ldrh	r5, [r6, #36]	@ 0x24
 8011216:	9001      	str	r0, [sp, #4]
 8011218:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 801121c:	b2bf      	uxth	r7, r7
 801121e:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	@ 0x3c
 8011222:	4428      	add	r0, r5
 8011224:	f896 5020 	ldrb.w	r5, [r6, #32]
 8011228:	b23b      	sxth	r3, r7
 801122a:	b200      	sxth	r0, r0
 801122c:	b1a5      	cbz	r5, 8011258 <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0x54>
 801122e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
 8011232:	fb93 f5f7 	sdiv	r5, r3, r7
 8011236:	fb07 3315 	mls	r3, r7, r5, r3
 801123a:	f9b6 5016 	ldrsh.w	r5, [r6, #22]
 801123e:	fb90 fcf5 	sdiv	ip, r0, r5
 8011242:	2b00      	cmp	r3, #0
 8011244:	fb05 001c 	mls	r0, r5, ip, r0
 8011248:	bfb8      	it	lt
 801124a:	19db      	addlt	r3, r3, r7
 801124c:	2800      	cmp	r0, #0
 801124e:	b21b      	sxth	r3, r3
 8011250:	da00      	bge.n	8011254 <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0x50>
 8011252:	4428      	add	r0, r5
 8011254:	b200      	sxth	r0, r0
 8011256:	e018      	b.n	801128a <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0x86>
 8011258:	2b00      	cmp	r3, #0
 801125a:	da07      	bge.n	801126c <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0x68>
 801125c:	4423      	add	r3, r4
 801125e:	2b00      	cmp	r3, #0
 8011260:	dd61      	ble.n	8011326 <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0x122>
 8011262:	443c      	add	r4, r7
 8011264:	1bd7      	subs	r7, r2, r7
 8011266:	462b      	mov	r3, r5
 8011268:	b224      	sxth	r4, r4
 801126a:	b23a      	sxth	r2, r7
 801126c:	f9b6 5014 	ldrsh.w	r5, [r6, #20]
 8011270:	429d      	cmp	r5, r3
 8011272:	dd58      	ble.n	8011326 <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0x122>
 8011274:	2800      	cmp	r0, #0
 8011276:	db56      	blt.n	8011326 <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0x122>
 8011278:	f9b6 7016 	ldrsh.w	r7, [r6, #22]
 801127c:	4287      	cmp	r7, r0
 801127e:	dd52      	ble.n	8011326 <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0x122>
 8011280:	191f      	adds	r7, r3, r4
 8011282:	42af      	cmp	r7, r5
 8011284:	dd01      	ble.n	801128a <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0x86>
 8011286:	1aec      	subs	r4, r5, r3
 8011288:	b224      	sxth	r4, r4
 801128a:	eb01 0542 	add.w	r5, r1, r2, lsl #1
 801128e:	f9b6 1014 	ldrsh.w	r1, [r6, #20]
 8011292:	69b7      	ldr	r7, [r6, #24]
 8011294:	1aca      	subs	r2, r1, r3
 8011296:	4348      	muls	r0, r1
 8011298:	7bb1      	ldrb	r1, [r6, #14]
 801129a:	eb05 0944 	add.w	r9, r5, r4, lsl #1
 801129e:	b212      	sxth	r2, r2
 80112a0:	b1a9      	cbz	r1, 80112ce <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0xca>
 80112a2:	eb07 0780 	add.w	r7, r7, r0, lsl #2
 80112a6:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 80112aa:	42a2      	cmp	r2, r4
 80112ac:	4628      	mov	r0, r5
 80112ae:	9b01      	ldr	r3, [sp, #4]
 80112b0:	bfa8      	it	ge
 80112b2:	4622      	movge	r2, r4
 80112b4:	4690      	mov	r8, r2
 80112b6:	1aa4      	subs	r4, r4, r2
 80112b8:	f7f0 fe40 	bl	8001f3c <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh>
 80112bc:	4639      	mov	r1, r7
 80112be:	eb05 0548 	add.w	r5, r5, r8, lsl #1
 80112c2:	f9b6 2014 	ldrsh.w	r2, [r6, #20]
 80112c6:	b224      	sxth	r4, r4
 80112c8:	45a9      	cmp	r9, r5
 80112ca:	d8ee      	bhi.n	80112aa <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0xa6>
 80112cc:	e02b      	b.n	8011326 <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0x122>
 80112ce:	eb07 0140 	add.w	r1, r7, r0, lsl #1
 80112d2:	6ab7      	ldr	r7, [r6, #40]	@ 0x28
 80112d4:	9100      	str	r1, [sp, #0]
 80112d6:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 80112da:	2f00      	cmp	r7, #0
 80112dc:	d062      	beq.n	80113a4 <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0x1a0>
 80112de:	1838      	adds	r0, r7, r0
 80112e0:	f04f 0aff 	mov.w	sl, #255	@ 0xff
 80112e4:	4403      	add	r3, r0
 80112e6:	9002      	str	r0, [sp, #8]
 80112e8:	42a2      	cmp	r2, r4
 80112ea:	bfa8      	it	ge
 80112ec:	4622      	movge	r2, r4
 80112ee:	1aa4      	subs	r4, r4, r2
 80112f0:	eb05 0042 	add.w	r0, r5, r2, lsl #1
 80112f4:	b224      	sxth	r4, r4
 80112f6:	9003      	str	r0, [sp, #12]
 80112f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80112fc:	9801      	ldr	r0, [sp, #4]
 80112fe:	4342      	muls	r2, r0
 8011300:	1c57      	adds	r7, r2, #1
 8011302:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8011306:	123f      	asrs	r7, r7, #8
 8011308:	2fff      	cmp	r7, #255	@ 0xff
 801130a:	d10f      	bne.n	801132c <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0x128>
 801130c:	880a      	ldrh	r2, [r1, #0]
 801130e:	802a      	strh	r2, [r5, #0]
 8011310:	3502      	adds	r5, #2
 8011312:	9a03      	ldr	r2, [sp, #12]
 8011314:	3102      	adds	r1, #2
 8011316:	42aa      	cmp	r2, r5
 8011318:	d8ee      	bhi.n	80112f8 <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0xf4>
 801131a:	45a9      	cmp	r9, r5
 801131c:	9900      	ldr	r1, [sp, #0]
 801131e:	9b02      	ldr	r3, [sp, #8]
 8011320:	f9b6 2014 	ldrsh.w	r2, [r6, #20]
 8011324:	d8e0      	bhi.n	80112e8 <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0xe4>
 8011326:	b005      	add	sp, #20
 8011328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801132c:	fa5f fc87 	uxtb.w	ip, r7
 8011330:	2f00      	cmp	r7, #0
 8011332:	d0ed      	beq.n	8011310 <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0x10c>
 8011334:	f8b5 8000 	ldrh.w	r8, [r5]
 8011338:	ea6f 0c0c 	mvn.w	ip, ip
 801133c:	8808      	ldrh	r0, [r1, #0]
 801133e:	f428 62ff 	bic.w	r2, r8, #2040	@ 0x7f8
 8011342:	fa5f fc8c 	uxtb.w	ip, ip
 8011346:	f420 6eff 	bic.w	lr, r0, #2040	@ 0x7f8
 801134a:	f408 6bfc 	and.w	fp, r8, #2016	@ 0x7e0
 801134e:	f022 0207 	bic.w	r2, r2, #7
 8011352:	f008 081f 	and.w	r8, r8, #31
 8011356:	f02e 0e07 	bic.w	lr, lr, #7
 801135a:	fb0c fb0b 	mul.w	fp, ip, fp
 801135e:	fb0c f202 	mul.w	r2, ip, r2
 8011362:	fb0c f808 	mul.w	r8, ip, r8
 8011366:	fb07 2e0e 	mla	lr, r7, lr, r2
 801136a:	f400 62fc 	and.w	r2, r0, #2016	@ 0x7e0
 801136e:	f000 001f 	and.w	r0, r0, #31
 8011372:	fb07 b202 	mla	r2, r7, r2, fp
 8011376:	fb07 8000 	mla	r0, r7, r0, r8
 801137a:	fb9e fefa 	sdiv	lr, lr, sl
 801137e:	fb92 f2fa 	sdiv	r2, r2, sl
 8011382:	f42e 6eff 	bic.w	lr, lr, #2040	@ 0x7f8
 8011386:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801138a:	f02e 0e07 	bic.w	lr, lr, #7
 801138e:	ea4e 0e02 	orr.w	lr, lr, r2
 8011392:	fb90 f2fa 	sdiv	r2, r0, sl
 8011396:	f002 021f 	and.w	r2, r2, #31
 801139a:	ea4e 0e02 	orr.w	lr, lr, r2
 801139e:	f8a5 e000 	strh.w	lr, [r5]
 80113a2:	e7b5      	b.n	8011310 <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0x10c>
 80113a4:	42a2      	cmp	r2, r4
 80113a6:	4628      	mov	r0, r5
 80113a8:	9b01      	ldr	r3, [sp, #4]
 80113aa:	bfa8      	it	ge
 80113ac:	4622      	movge	r2, r4
 80113ae:	4617      	mov	r7, r2
 80113b0:	1aa4      	subs	r4, r4, r2
 80113b2:	f7f0 fd9d 	bl	8001ef0 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh>
 80113b6:	9900      	ldr	r1, [sp, #0]
 80113b8:	eb05 0547 	add.w	r5, r5, r7, lsl #1
 80113bc:	f9b6 2014 	ldrsh.w	r2, [r6, #20]
 80113c0:	b224      	sxth	r4, r4
 80113c2:	45a9      	cmp	r9, r5
 80113c4:	d8ee      	bhi.n	80113a4 <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0x1a0>
 80113c6:	e7ae      	b.n	8011326 <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0x122>

080113c8 <_ZN8touchgfx19PainterRGB565Bitmap9setBitmapERKNS_6BitmapE>:
 80113c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113ca:	880b      	ldrh	r3, [r1, #0]
 80113cc:	f100 050c 	add.w	r5, r0, #12
 80113d0:	4604      	mov	r4, r0
 80113d2:	8183      	strh	r3, [r0, #12]
 80113d4:	4628      	mov	r0, r5
 80113d6:	f008 fadb 	bl	8019990 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80113da:	73a0      	strb	r0, [r4, #14]
 80113dc:	4628      	mov	r0, r5
 80113de:	f008 f967 	bl	80196b0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80113e2:	4607      	mov	r7, r0
 80113e4:	4628      	mov	r0, r5
 80113e6:	f008 f997 	bl	8019718 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80113ea:	2300      	movs	r3, #0
 80113ec:	82e0      	strh	r0, [r4, #22]
 80113ee:	f104 0010 	add.w	r0, r4, #16
 80113f2:	6123      	str	r3, [r4, #16]
 80113f4:	82a7      	strh	r7, [r4, #20]
 80113f6:	f004 fcb5 	bl	8015d64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80113fa:	4628      	mov	r0, r5
 80113fc:	f008 fa44 	bl	8019888 <_ZNK8touchgfx6Bitmap7getDataEv>
 8011400:	61a0      	str	r0, [r4, #24]
 8011402:	4628      	mov	r0, r5
 8011404:	f008 fa70 	bl	80198e8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8011408:	62a0      	str	r0, [r4, #40]	@ 0x28
 801140a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801140c <_ZThn8_N8touchgfx19PainterRGB565Bitmap9setBitmapERKNS_6BitmapE>:
 801140c:	f1a0 0008 	sub.w	r0, r0, #8
 8011410:	f7ff bfda 	b.w	80113c8 <_ZN8touchgfx19PainterRGB565Bitmap9setBitmapERKNS_6BitmapE>

08011414 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>:
 8011414:	094a      	lsrs	r2, r1, #5
 8011416:	4b06      	ldr	r3, [pc, #24]	@ (8011430 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE+0x1c>)
 8011418:	60c1      	str	r1, [r0, #12]
 801141a:	ea03 2311 	and.w	r3, r3, r1, lsr #8
 801141e:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8011422:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8011426:	4313      	orrs	r3, r2
 8011428:	4319      	orrs	r1, r3
 801142a:	8201      	strh	r1, [r0, #16]
 801142c:	4770      	bx	lr
 801142e:	bf00      	nop
 8011430:	fffff800 	.word	0xfffff800

08011434 <_ZThn8_N8touchgfx13PainterRGB5658setColorENS_9colortypeE>:
 8011434:	f1a0 0008 	sub.w	r0, r0, #8
 8011438:	e7ec      	b.n	8011414 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>
 801143a:	bf00      	nop

0801143c <_ZNK8touchgfx13PainterRGB56518getRenderingMethodEv>:
 801143c:	b508      	push	{r3, lr}
 801143e:	4b05      	ldr	r3, [pc, #20]	@ (8011454 <_ZNK8touchgfx13PainterRGB56518getRenderingMethodEv+0x18>)
 8011440:	6818      	ldr	r0, [r3, #0]
 8011442:	6803      	ldr	r3, [r0, #0]
 8011444:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8011448:	4798      	blx	r3
 801144a:	1e43      	subs	r3, r0, #1
 801144c:	4258      	negs	r0, r3
 801144e:	4158      	adcs	r0, r3
 8011450:	bd08      	pop	{r3, pc}
 8011452:	bf00      	nop
 8011454:	20027b94 	.word	0x20027b94

08011458 <_ZN8touchgfx13PainterRGB565D1Ev>:
 8011458:	4770      	bx	lr

0801145a <_ZThn8_N8touchgfx13PainterRGB565D1Ev>:
 801145a:	3808      	subs	r0, #8
 801145c:	4770      	bx	lr

0801145e <_ZNK8touchgfx13PainterRGB5655paintEPhssssh>:
 801145e:	b430      	push	{r4, r5}
 8011460:	eb01 0442 	add.w	r4, r1, r2, lsl #1
 8011464:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 8011468:	8a02      	ldrh	r2, [r0, #16]
 801146a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801146e:	4629      	mov	r1, r5
 8011470:	9202      	str	r2, [sp, #8]
 8011472:	68c2      	ldr	r2, [r0, #12]
 8011474:	4620      	mov	r0, r4
 8011476:	bc30      	pop	{r4, r5}
 8011478:	f7f0 bd10 	b.w	8001e9c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm>

0801147c <_ZNK8touchgfx13PainterRGB5658tearDownEv>:
 801147c:	f7f0 bd04 	b.w	8001e88 <_ZN8touchgfx5paint8tearDownEv>

08011480 <_ZN8touchgfx13PainterRGB565D0Ev>:
 8011480:	b510      	push	{r4, lr}
 8011482:	4604      	mov	r4, r0
 8011484:	2114      	movs	r1, #20
 8011486:	f014 fae2 	bl	8025a4e <_ZdlPvj>
 801148a:	4620      	mov	r0, r4
 801148c:	bd10      	pop	{r4, pc}

0801148e <_ZThn8_N8touchgfx13PainterRGB565D0Ev>:
 801148e:	f1a0 0008 	sub.w	r0, r0, #8
 8011492:	e7f5      	b.n	8011480 <_ZN8touchgfx13PainterRGB565D0Ev>

08011494 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8011494:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8011496:	6803      	ldr	r3, [r0, #0]
 8011498:	460d      	mov	r5, r1
 801149a:	4604      	mov	r4, r0
 801149c:	4601      	mov	r1, r0
 801149e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80114a0:	a802      	add	r0, sp, #8
 80114a2:	4798      	blx	r3
 80114a4:	6828      	ldr	r0, [r5, #0]
 80114a6:	6869      	ldr	r1, [r5, #4]
 80114a8:	466b      	mov	r3, sp
 80114aa:	c303      	stmia	r3!, {r0, r1}
 80114ac:	4668      	mov	r0, sp
 80114ae:	4619      	mov	r1, r3
 80114b0:	f7fe fe3e 	bl	8010130 <_ZN8touchgfx4RectaNERKS0_>
 80114b4:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80114b6:	b1a8      	cbz	r0, 80114e4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 80114b8:	6803      	ldr	r3, [r0, #0]
 80114ba:	1d21      	adds	r1, r4, #4
 80114bc:	68db      	ldr	r3, [r3, #12]
 80114be:	4798      	blx	r3
 80114c0:	b180      	cbz	r0, 80114e4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 80114c2:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	dd0c      	ble.n	80114e4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 80114ca:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 80114ce:	2d00      	cmp	r5, #0
 80114d0:	dd08      	ble.n	80114e4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 80114d2:	4a2d      	ldr	r2, [pc, #180]	@ (8011588 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xf4>)
 80114d4:	7812      	ldrb	r2, [r2, #0]
 80114d6:	b13a      	cbz	r2, 80114e8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x54>
 80114d8:	2a01      	cmp	r2, #1
 80114da:	d02d      	beq.n	8011538 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa4>
 80114dc:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80114de:	6803      	ldr	r3, [r0, #0]
 80114e0:	691b      	ldr	r3, [r3, #16]
 80114e2:	4798      	blx	r3
 80114e4:	b004      	add	sp, #16
 80114e6:	bd70      	pop	{r4, r5, r6, pc}
 80114e8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80114ec:	441d      	add	r5, r3
 80114ee:	b2ad      	uxth	r5, r5
 80114f0:	b22e      	sxth	r6, r5
 80114f2:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80114f6:	42b3      	cmp	r3, r6
 80114f8:	daf0      	bge.n	80114dc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80114fa:	6823      	ldr	r3, [r4, #0]
 80114fc:	4669      	mov	r1, sp
 80114fe:	4620      	mov	r0, r4
 8011500:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011502:	4798      	blx	r3
 8011504:	b940      	cbnz	r0, 8011518 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x84>
 8011506:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801150a:	2b01      	cmp	r3, #1
 801150c:	d004      	beq.n	8011518 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x84>
 801150e:	3301      	adds	r3, #1
 8011510:	105b      	asrs	r3, r3, #1
 8011512:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011516:	e7f0      	b.n	80114fa <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x66>
 8011518:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801151c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8011520:	4413      	add	r3, r2
 8011522:	b29b      	uxth	r3, r3
 8011524:	441a      	add	r2, r3
 8011526:	f8ad 3002 	strh.w	r3, [sp, #2]
 801152a:	b212      	sxth	r2, r2
 801152c:	4296      	cmp	r6, r2
 801152e:	dae0      	bge.n	80114f2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8011530:	1aeb      	subs	r3, r5, r3
 8011532:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011536:	e7dc      	b.n	80114f2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8011538:	f8bd 5000 	ldrh.w	r5, [sp]
 801153c:	441d      	add	r5, r3
 801153e:	b2ad      	uxth	r5, r5
 8011540:	b22e      	sxth	r6, r5
 8011542:	f9bd 3000 	ldrsh.w	r3, [sp]
 8011546:	42b3      	cmp	r3, r6
 8011548:	dac8      	bge.n	80114dc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801154a:	6823      	ldr	r3, [r4, #0]
 801154c:	4669      	mov	r1, sp
 801154e:	4620      	mov	r0, r4
 8011550:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011552:	4798      	blx	r3
 8011554:	b940      	cbnz	r0, 8011568 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd4>
 8011556:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801155a:	2b01      	cmp	r3, #1
 801155c:	d004      	beq.n	8011568 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd4>
 801155e:	3301      	adds	r3, #1
 8011560:	105b      	asrs	r3, r3, #1
 8011562:	f8ad 3004 	strh.w	r3, [sp, #4]
 8011566:	e7f0      	b.n	801154a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb6>
 8011568:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801156c:	f8bd 3000 	ldrh.w	r3, [sp]
 8011570:	4413      	add	r3, r2
 8011572:	b29b      	uxth	r3, r3
 8011574:	441a      	add	r2, r3
 8011576:	f8ad 3000 	strh.w	r3, [sp]
 801157a:	b212      	sxth	r2, r2
 801157c:	4296      	cmp	r6, r2
 801157e:	dae0      	bge.n	8011542 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 8011580:	1aeb      	subs	r3, r5, r3
 8011582:	f8ad 3004 	strh.w	r3, [sp, #4]
 8011586:	e7dc      	b.n	8011542 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 8011588:	20027b8c 	.word	0x20027b8c

0801158c <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 801158c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801158e:	6803      	ldr	r3, [r0, #0]
 8011590:	4604      	mov	r4, r0
 8011592:	4601      	mov	r1, r0
 8011594:	4668      	mov	r0, sp
 8011596:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011598:	4798      	blx	r3
 801159a:	2100      	movs	r1, #0
 801159c:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 80115a0:	4668      	mov	r0, sp
 80115a2:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80115a6:	9102      	str	r1, [sp, #8]
 80115a8:	a902      	add	r1, sp, #8
 80115aa:	f8ad 200c 	strh.w	r2, [sp, #12]
 80115ae:	f8ad 300e 	strh.w	r3, [sp, #14]
 80115b2:	f7fe fdbd 	bl	8010130 <_ZN8touchgfx4RectaNERKS0_>
 80115b6:	6823      	ldr	r3, [r4, #0]
 80115b8:	4669      	mov	r1, sp
 80115ba:	4620      	mov	r0, r4
 80115bc:	691b      	ldr	r3, [r3, #16]
 80115be:	4798      	blx	r3
 80115c0:	b004      	add	sp, #16
 80115c2:	bd10      	pop	{r4, pc}

080115c4 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 80115c4:	2101      	movs	r1, #1
 80115c6:	2200      	movs	r2, #0
 80115c8:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 80115cc:	490a      	ldr	r1, [pc, #40]	@ (80115f8 <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 80115ce:	8082      	strh	r2, [r0, #4]
 80115d0:	6001      	str	r1, [r0, #0]
 80115d2:	21ff      	movs	r1, #255	@ 0xff
 80115d4:	80c2      	strh	r2, [r0, #6]
 80115d6:	8102      	strh	r2, [r0, #8]
 80115d8:	8142      	strh	r2, [r0, #10]
 80115da:	8182      	strh	r2, [r0, #12]
 80115dc:	81c2      	strh	r2, [r0, #14]
 80115de:	8202      	strh	r2, [r0, #16]
 80115e0:	8242      	strh	r2, [r0, #18]
 80115e2:	61c2      	str	r2, [r0, #28]
 80115e4:	8402      	strh	r2, [r0, #32]
 80115e6:	8442      	strh	r2, [r0, #34]	@ 0x22
 80115e8:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 80115ec:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
 80115f0:	6282      	str	r2, [r0, #40]	@ 0x28
 80115f2:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80115f6:	4770      	bx	lr
 80115f8:	0802a6d0 	.word	0x0802a6d0

080115fc <_ZNK8touchgfx4Line14getMinimalRectEv>:
 80115fc:	f101 0364 	add.w	r3, r1, #100	@ 0x64
 8011600:	4602      	mov	r2, r0
 8011602:	cb03      	ldmia	r3!, {r0, r1}
 8011604:	6010      	str	r0, [r2, #0]
 8011606:	4610      	mov	r0, r2
 8011608:	6051      	str	r1, [r2, #4]
 801160a:	4770      	bx	lr

0801160c <_ZN8touchgfx4LineD1Ev>:
 801160c:	4770      	bx	lr

0801160e <_ZN8touchgfx4LineD0Ev>:
 801160e:	b510      	push	{r4, lr}
 8011610:	4604      	mov	r4, r0
 8011612:	2170      	movs	r1, #112	@ 0x70
 8011614:	f014 fa1b 	bl	8025a4e <_ZdlPvj>
 8011618:	4620      	mov	r0, r4
 801161a:	bd10      	pop	{r4, pc}

0801161c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 801161c:	b507      	push	{r0, r1, r2, lr}
 801161e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8011622:	ab01      	add	r3, sp, #4
 8011624:	6809      	ldr	r1, [r1, #0]
 8011626:	6800      	ldr	r0, [r0, #0]
 8011628:	f005 ff35 	bl	8017496 <_ZN8touchgfx6muldivElllRl>
 801162c:	b003      	add	sp, #12
 801162e:	f85d fb04 	ldr.w	pc, [sp], #4

08011632 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>:
 8011632:	6800      	ldr	r0, [r0, #0]
 8011634:	2800      	cmp	r0, #0
 8011636:	bfb9      	ittee	lt
 8011638:	2320      	movlt	r3, #32
 801163a:	fb90 f0f3 	sdivlt	r0, r0, r3
 801163e:	301f      	addge	r0, #31
 8011640:	1140      	asrge	r0, r0, #5
 8011642:	4770      	bx	lr

08011644 <_ZNK8touchgfx4Line17invalidateContentEv>:
 8011644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011648:	f890 3026 	ldrb.w	r3, [r0, #38]	@ 0x26
 801164c:	b089      	sub	sp, #36	@ 0x24
 801164e:	4604      	mov	r4, r0
 8011650:	b353      	cbz	r3, 80116a8 <_ZNK8touchgfx4Line17invalidateContentEv+0x64>
 8011652:	6803      	ldr	r3, [r0, #0]
 8011654:	4601      	mov	r1, r0
 8011656:	a802      	add	r0, sp, #8
 8011658:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801165a:	4798      	blx	r3
 801165c:	2220      	movs	r2, #32
 801165e:	f8d4 a02c 	ldr.w	sl, [r4, #44]	@ 0x2c
 8011662:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011664:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8011666:	f8d4 b000 	ldr.w	fp, [r4]
 801166a:	fb9a f0f2 	sdiv	r0, sl, r2
 801166e:	fb91 f5f2 	sdiv	r5, r1, r2
 8011672:	fb93 f6f2 	sdiv	r6, r3, r2
 8011676:	1b40      	subs	r0, r0, r5
 8011678:	0076      	lsls	r6, r6, #1
 801167a:	2800      	cmp	r0, #0
 801167c:	bfb8      	it	lt
 801167e:	4240      	neglt	r0, r0
 8011680:	4286      	cmp	r6, r0
 8011682:	dc0c      	bgt.n	801169e <_ZNK8touchgfx4Line17invalidateContentEv+0x5a>
 8011684:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011686:	f8d4 8038 	ldr.w	r8, [r4, #56]	@ 0x38
 801168a:	fb95 f0f2 	sdiv	r0, r5, r2
 801168e:	fb98 f7f2 	sdiv	r7, r8, r2
 8011692:	1bc0      	subs	r0, r0, r7
 8011694:	2800      	cmp	r0, #0
 8011696:	bfb8      	it	lt
 8011698:	4240      	neglt	r0, r0
 801169a:	4286      	cmp	r6, r0
 801169c:	dd07      	ble.n	80116ae <_ZNK8touchgfx4Line17invalidateContentEv+0x6a>
 801169e:	f8db 3010 	ldr.w	r3, [fp, #16]
 80116a2:	a902      	add	r1, sp, #8
 80116a4:	4620      	mov	r0, r4
 80116a6:	4798      	blx	r3
 80116a8:	b009      	add	sp, #36	@ 0x24
 80116aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116ae:	eb01 060a 	add.w	r6, r1, sl
 80116b2:	2002      	movs	r0, #2
 80116b4:	eb08 0705 	add.w	r7, r8, r5
 80116b8:	3301      	adds	r3, #1
 80116ba:	f10d 0920 	add.w	r9, sp, #32
 80116be:	9101      	str	r1, [sp, #4]
 80116c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80116c4:	fb96 f6f0 	sdiv	r6, r6, r0
 80116c8:	fb97 f7f0 	sdiv	r7, r7, r0
 80116cc:	4103      	asrs	r3, r0
 80116ce:	b236      	sxth	r6, r6
 80116d0:	b23f      	sxth	r7, r7
 80116d2:	f849 3d08 	str.w	r3, [r9, #-8]!
 80116d6:	4648      	mov	r0, r9
 80116d8:	fb96 f6f2 	sdiv	r6, r6, r2
 80116dc:	fb97 f7f2 	sdiv	r7, r7, r2
 80116e0:	f7ff ffa7 	bl	8011632 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 80116e4:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80116e8:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 80116ec:	fa1f fe87 	uxth.w	lr, r7
 80116f0:	9901      	ldr	r1, [sp, #4]
 80116f2:	fa1f fc86 	uxth.w	ip, r6
 80116f6:	4293      	cmp	r3, r2
 80116f8:	b280      	uxth	r0, r0
 80116fa:	eba1 0a0a 	sub.w	sl, r1, sl
 80116fe:	da54      	bge.n	80117aa <_ZNK8touchgfx4Line17invalidateContentEv+0x166>
 8011700:	ebac 0100 	sub.w	r1, ip, r0
 8011704:	f1ba 0f00 	cmp.w	sl, #0
 8011708:	4460      	add	r0, ip
 801170a:	f9bd a008 	ldrsh.w	sl, [sp, #8]
 801170e:	b289      	uxth	r1, r1
 8011710:	f9bd c00a 	ldrsh.w	ip, [sp, #10]
 8011714:	b280      	uxth	r0, r0
 8011716:	b20e      	sxth	r6, r1
 8011718:	da29      	bge.n	801176e <_ZNK8touchgfx4Line17invalidateContentEv+0x12a>
 801171a:	eba8 0505 	sub.w	r5, r8, r5
 801171e:	2d00      	cmp	r5, #0
 8011720:	da2a      	bge.n	8011778 <_ZNK8touchgfx4Line17invalidateContentEv+0x134>
 8011722:	fa1f f88a 	uxth.w	r8, sl
 8011726:	f8ad a010 	strh.w	sl, [sp, #16]
 801172a:	fa1f f58c 	uxth.w	r5, ip
 801172e:	f8ad c012 	strh.w	ip, [sp, #18]
 8011732:	eba0 0008 	sub.w	r0, r0, r8
 8011736:	4443      	add	r3, r8
 8011738:	f8ad 6018 	strh.w	r6, [sp, #24]
 801173c:	f8ad 0014 	strh.w	r0, [sp, #20]
 8011740:	1a59      	subs	r1, r3, r1
 8011742:	ebae 0005 	sub.w	r0, lr, r5
 8011746:	f8ad 701a 	strh.w	r7, [sp, #26]
 801174a:	f8ad 101c 	strh.w	r1, [sp, #28]
 801174e:	f8ad 0016 	strh.w	r0, [sp, #22]
 8011752:	442a      	add	r2, r5
 8011754:	eba2 0e0e 	sub.w	lr, r2, lr
 8011758:	f8ad e01e 	strh.w	lr, [sp, #30]
 801175c:	f8db 3010 	ldr.w	r3, [fp, #16]
 8011760:	a904      	add	r1, sp, #16
 8011762:	4620      	mov	r0, r4
 8011764:	4798      	blx	r3
 8011766:	6823      	ldr	r3, [r4, #0]
 8011768:	4649      	mov	r1, r9
 801176a:	691b      	ldr	r3, [r3, #16]
 801176c:	e79a      	b.n	80116a4 <_ZNK8touchgfx4Line17invalidateContentEv+0x60>
 801176e:	d003      	beq.n	8011778 <_ZNK8touchgfx4Line17invalidateContentEv+0x134>
 8011770:	eba8 0505 	sub.w	r5, r8, r5
 8011774:	2d00      	cmp	r5, #0
 8011776:	dcd4      	bgt.n	8011722 <_ZNK8touchgfx4Line17invalidateContentEv+0xde>
 8011778:	fa1f f88a 	uxth.w	r8, sl
 801177c:	f8ad 6010 	strh.w	r6, [sp, #16]
 8011780:	fa1f f58c 	uxth.w	r5, ip
 8011784:	f8ad c012 	strh.w	ip, [sp, #18]
 8011788:	4443      	add	r3, r8
 801178a:	eba0 0008 	sub.w	r0, r0, r8
 801178e:	f8ad a018 	strh.w	sl, [sp, #24]
 8011792:	1a59      	subs	r1, r3, r1
 8011794:	ebae 0305 	sub.w	r3, lr, r5
 8011798:	f8ad 701a 	strh.w	r7, [sp, #26]
 801179c:	f8ad 1014 	strh.w	r1, [sp, #20]
 80117a0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80117a4:	f8ad 001c 	strh.w	r0, [sp, #28]
 80117a8:	e7d3      	b.n	8011752 <_ZNK8touchgfx4Line17invalidateContentEv+0x10e>
 80117aa:	ebae 0100 	sub.w	r1, lr, r0
 80117ae:	f1ba 0f00 	cmp.w	sl, #0
 80117b2:	4470      	add	r0, lr
 80117b4:	f9bd a00a 	ldrsh.w	sl, [sp, #10]
 80117b8:	b289      	uxth	r1, r1
 80117ba:	f9bd e008 	ldrsh.w	lr, [sp, #8]
 80117be:	b280      	uxth	r0, r0
 80117c0:	b20f      	sxth	r7, r1
 80117c2:	da20      	bge.n	8011806 <_ZNK8touchgfx4Line17invalidateContentEv+0x1c2>
 80117c4:	eba8 0505 	sub.w	r5, r8, r5
 80117c8:	2d00      	cmp	r5, #0
 80117ca:	da21      	bge.n	8011810 <_ZNK8touchgfx4Line17invalidateContentEv+0x1cc>
 80117cc:	fa1f f88e 	uxth.w	r8, lr
 80117d0:	f8ad e010 	strh.w	lr, [sp, #16]
 80117d4:	fa1f f58a 	uxth.w	r5, sl
 80117d8:	f8ad a012 	strh.w	sl, [sp, #18]
 80117dc:	4443      	add	r3, r8
 80117de:	ebac 0e08 	sub.w	lr, ip, r8
 80117e2:	442a      	add	r2, r5
 80117e4:	1b40      	subs	r0, r0, r5
 80117e6:	eba3 0c0c 	sub.w	ip, r3, ip
 80117ea:	f8ad e014 	strh.w	lr, [sp, #20]
 80117ee:	1a51      	subs	r1, r2, r1
 80117f0:	f8ad 0016 	strh.w	r0, [sp, #22]
 80117f4:	f8ad 6018 	strh.w	r6, [sp, #24]
 80117f8:	f8ad 701a 	strh.w	r7, [sp, #26]
 80117fc:	f8ad c01c 	strh.w	ip, [sp, #28]
 8011800:	f8ad 101e 	strh.w	r1, [sp, #30]
 8011804:	e7aa      	b.n	801175c <_ZNK8touchgfx4Line17invalidateContentEv+0x118>
 8011806:	d003      	beq.n	8011810 <_ZNK8touchgfx4Line17invalidateContentEv+0x1cc>
 8011808:	eba8 0505 	sub.w	r5, r8, r5
 801180c:	2d00      	cmp	r5, #0
 801180e:	dcdd      	bgt.n	80117cc <_ZNK8touchgfx4Line17invalidateContentEv+0x188>
 8011810:	fa1f f58e 	uxth.w	r5, lr
 8011814:	f8ad 7012 	strh.w	r7, [sp, #18]
 8011818:	fa1f f88a 	uxth.w	r8, sl
 801181c:	f8ad e010 	strh.w	lr, [sp, #16]
 8011820:	442b      	add	r3, r5
 8011822:	ebac 0705 	sub.w	r7, ip, r5
 8011826:	4442      	add	r2, r8
 8011828:	eba0 0008 	sub.w	r0, r0, r8
 801182c:	eba3 0c0c 	sub.w	ip, r3, ip
 8011830:	f8ad 7014 	strh.w	r7, [sp, #20]
 8011834:	1a51      	subs	r1, r2, r1
 8011836:	f8ad 6018 	strh.w	r6, [sp, #24]
 801183a:	f8ad a01a 	strh.w	sl, [sp, #26]
 801183e:	f8ad 1016 	strh.w	r1, [sp, #22]
 8011842:	f8ad c01c 	strh.w	ip, [sp, #28]
 8011846:	f8ad 001e 	strh.w	r0, [sp, #30]
 801184a:	e787      	b.n	801175c <_ZNK8touchgfx4Line17invalidateContentEv+0x118>

0801184c <_ZN8touchgfx7CWRUtil4sineEi>:
 801184c:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8011850:	fb90 f2f3 	sdiv	r2, r0, r3
 8011854:	fb02 0013 	mls	r0, r2, r3, r0
 8011858:	2800      	cmp	r0, #0
 801185a:	bfb8      	it	lt
 801185c:	18c0      	addlt	r0, r0, r3
 801185e:	4b0a      	ldr	r3, [pc, #40]	@ (8011888 <_ZN8touchgfx7CWRUtil4sineEi+0x3c>)
 8011860:	285a      	cmp	r0, #90	@ 0x5a
 8011862:	dc02      	bgt.n	801186a <_ZN8touchgfx7CWRUtil4sineEi+0x1e>
 8011864:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8011868:	4770      	bx	lr
 801186a:	28b4      	cmp	r0, #180	@ 0xb4
 801186c:	dc02      	bgt.n	8011874 <_ZN8touchgfx7CWRUtil4sineEi+0x28>
 801186e:	f1c0 00b4 	rsb	r0, r0, #180	@ 0xb4
 8011872:	e7f7      	b.n	8011864 <_ZN8touchgfx7CWRUtil4sineEi+0x18>
 8011874:	f5b0 7f87 	cmp.w	r0, #270	@ 0x10e
 8011878:	bfd4      	ite	le
 801187a:	38b4      	suble	r0, #180	@ 0xb4
 801187c:	f5c0 70b4 	rsbgt	r0, r0, #360	@ 0x168
 8011880:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8011884:	4240      	negs	r0, r0
 8011886:	4770      	bx	lr
 8011888:	0802a79c 	.word	0x0802a79c

0801188c <_ZN8touchgfx7CWRUtil5isqrtEm>:
 801188c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011890:	f04f 0300 	mov.w	r3, #0
 8011894:	bf2c      	ite	cs
 8011896:	f04f 4280 	movcs.w	r2, #1073741824	@ 0x40000000
 801189a:	f44f 4280 	movcc.w	r2, #16384	@ 0x4000
 801189e:	1899      	adds	r1, r3, r2
 80118a0:	4288      	cmp	r0, r1
 80118a2:	bf24      	itt	cs
 80118a4:	1853      	addcs	r3, r2, r1
 80118a6:	1a40      	subcs	r0, r0, r1
 80118a8:	0892      	lsrs	r2, r2, #2
 80118aa:	ea4f 0353 	mov.w	r3, r3, lsr #1
 80118ae:	d1f6      	bne.n	801189e <_ZN8touchgfx7CWRUtil5isqrtEm+0x12>
 80118b0:	4618      	mov	r0, r3
 80118b2:	4770      	bx	lr

080118b4 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>:
 80118b4:	b510      	push	{r4, lr}
 80118b6:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 80118ba:	ea81 74e1 	eor.w	r4, r1, r1, asr #31
 80118be:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 80118c2:	eba4 74e1 	sub.w	r4, r4, r1, asr #31
 80118c6:	139b      	asrs	r3, r3, #14
 80118c8:	13a4      	asrs	r4, r4, #14
 80118ca:	429c      	cmp	r4, r3
 80118cc:	bfb8      	it	lt
 80118ce:	461c      	movlt	r4, r3
 80118d0:	2c01      	cmp	r4, #1
 80118d2:	dd07      	ble.n	80118e4 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x30>
 80118d4:	fb91 f1f4 	sdiv	r1, r1, r4
 80118d8:	fb90 f0f4 	sdiv	r0, r0, r4
 80118dc:	f7ff ffea 	bl	80118b4 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 80118e0:	4360      	muls	r0, r4
 80118e2:	bd10      	pop	{r4, pc}
 80118e4:	4340      	muls	r0, r0
 80118e6:	fb01 0001 	mla	r0, r1, r1, r0
 80118ea:	f7ff ffcf 	bl	801188c <_ZN8touchgfx7CWRUtil5isqrtEm>
 80118ee:	e7f8      	b.n	80118e2 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x2e>

080118f0 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>:
 80118f0:	2800      	cmp	r0, #0
 80118f2:	b508      	push	{r3, lr}
 80118f4:	da05      	bge.n	8011902 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x12>
 80118f6:	4240      	negs	r0, r0
 80118f8:	f7ff fffa 	bl	80118f0 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 80118fc:	4240      	negs	r0, r0
 80118fe:	b240      	sxtb	r0, r0
 8011900:	bd08      	pop	{r3, pc}
 8011902:	f5b0 6f80 	cmp.w	r0, #1024	@ 0x400
 8011906:	dc11      	bgt.n	801192c <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x3c>
 8011908:	f5b0 7f35 	cmp.w	r0, #724	@ 0x2d4
 801190c:	dd09      	ble.n	8011922 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x32>
 801190e:	4340      	muls	r0, r0
 8011910:	f5c0 1080 	rsb	r0, r0, #1048576	@ 0x100000
 8011914:	f7ff ffba 	bl	801188c <_ZN8touchgfx7CWRUtil5isqrtEm>
 8011918:	f7ff ffea 	bl	80118f0 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 801191c:	f1c0 005a 	rsb	r0, r0, #90	@ 0x5a
 8011920:	e7ed      	b.n	80118fe <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0xe>
 8011922:	3003      	adds	r0, #3
 8011924:	4b02      	ldr	r3, [pc, #8]	@ (8011930 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x40>)
 8011926:	10c0      	asrs	r0, r0, #3
 8011928:	5618      	ldrsb	r0, [r3, r0]
 801192a:	e7e9      	b.n	8011900 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 801192c:	2000      	movs	r0, #0
 801192e:	e7e7      	b.n	8011900 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 8011930:	0802a740 	.word	0x0802a740

08011934 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>:
 8011934:	4281      	cmp	r1, r0
 8011936:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011938:	460c      	mov	r4, r1
 801193a:	4615      	mov	r5, r2
 801193c:	dd07      	ble.n	801194e <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x1a>
 801193e:	4601      	mov	r1, r0
 8011940:	4620      	mov	r0, r4
 8011942:	f7ff fff7 	bl	8011934 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8011946:	f1c0 005a 	rsb	r0, r0, #90	@ 0x5a
 801194a:	b003      	add	sp, #12
 801194c:	bd30      	pop	{r4, r5, pc}
 801194e:	f7ff ffb1 	bl	80118b4 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8011952:	6028      	str	r0, [r5, #0]
 8011954:	2800      	cmp	r0, #0
 8011956:	d0f8      	beq.n	801194a <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x16>
 8011958:	4602      	mov	r2, r0
 801195a:	ab01      	add	r3, sp, #4
 801195c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8011960:	4620      	mov	r0, r4
 8011962:	f005 fd98 	bl	8017496 <_ZN8touchgfx6muldivElllRl>
 8011966:	f7ff ffc3 	bl	80118f0 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 801196a:	e7ee      	b.n	801194a <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x16>

0801196c <_ZN8touchgfx4LineC1Ev>:
 801196c:	b510      	push	{r4, lr}
 801196e:	4604      	mov	r4, r0
 8011970:	f7ff fe28 	bl	80115c4 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8011974:	4b0c      	ldr	r3, [pc, #48]	@ (80119a8 <_ZN8touchgfx4LineC1Ev+0x3c>)
 8011976:	2220      	movs	r2, #32
 8011978:	4620      	mov	r0, r4
 801197a:	6023      	str	r3, [r4, #0]
 801197c:	2300      	movs	r3, #0
 801197e:	63e2      	str	r2, [r4, #60]	@ 0x3c
 8011980:	2212      	movs	r2, #18
 8011982:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8011986:	66e2      	str	r2, [r4, #108]	@ 0x6c
 8011988:	60a3      	str	r3, [r4, #8]
 801198a:	e9c4 330b 	strd	r3, r3, [r4, #44]	@ 0x2c
 801198e:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 8011992:	e9c4 3311 	strd	r3, r3, [r4, #68]	@ 0x44
 8011996:	e9c4 3313 	strd	r3, r3, [r4, #76]	@ 0x4c
 801199a:	e9c4 3315 	strd	r3, r3, [r4, #84]	@ 0x54
 801199e:	e9c4 3317 	strd	r3, r3, [r4, #92]	@ 0x5c
 80119a2:	e9c4 3319 	strd	r3, r3, [r4, #100]	@ 0x64
 80119a6:	bd10      	pop	{r4, pc}
 80119a8:	0802a85c 	.word	0x0802a85c

080119ac <_ZNK8touchgfx4Line18getLineEndingStyleEv>:
 80119ac:	f890 0040 	ldrb.w	r0, [r0, #64]	@ 0x40
 80119b0:	4770      	bx	lr

080119b2 <_ZN8touchgfx4Line17updateCachedShapeEv>:
 80119b2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80119b6:	6b47      	ldr	r7, [r0, #52]	@ 0x34
 80119b8:	4604      	mov	r4, r0
 80119ba:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80119bc:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 80119be:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 80119c0:	1aff      	subs	r7, r7, r3
 80119c2:	eba5 0502 	sub.w	r5, r5, r2
 80119c6:	d142      	bne.n	8011a4e <_ZN8touchgfx4Line17updateCachedShapeEv+0x9c>
 80119c8:	b955      	cbnz	r5, 80119e0 <_ZN8touchgfx4Line17updateCachedShapeEv+0x2e>
 80119ca:	e9c0 3313 	strd	r3, r3, [r0, #76]	@ 0x4c
 80119ce:	e9c0 3311 	strd	r3, r3, [r0, #68]	@ 0x44
 80119d2:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 80119d6:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 80119da:	b002      	add	sp, #8
 80119dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119e0:	ea85 78e5 	eor.w	r8, r5, r5, asr #31
 80119e4:	eba8 78e5 	sub.w	r8, r8, r5, asr #31
 80119e8:	4629      	mov	r1, r5
 80119ea:	2502      	movs	r5, #2
 80119ec:	4642      	mov	r2, r8
 80119ee:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80119f0:	f005 fd70 	bl	80174d4 <_ZN8touchgfx6muldivElll>
 80119f4:	4642      	mov	r2, r8
 80119f6:	4639      	mov	r1, r7
 80119f8:	fb90 f6f5 	sdiv	r6, r0, r5
 80119fc:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80119fe:	f005 fd69 	bl	80174d4 <_ZN8touchgfx6muldivElll>
 8011a02:	f894 9040 	ldrb.w	r9, [r4, #64]	@ 0x40
 8011a06:	fb90 f5f5 	sdiv	r5, r0, r5
 8011a0a:	f1b9 0f00 	cmp.w	r9, #0
 8011a0e:	d067      	beq.n	8011ae0 <_ZN8touchgfx4Line17updateCachedShapeEv+0x12e>
 8011a10:	f1b9 0f02 	cmp.w	r9, #2
 8011a14:	d878      	bhi.n	8011b08 <_ZN8touchgfx4Line17updateCachedShapeEv+0x156>
 8011a16:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8011a18:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8011a1a:	1b93      	subs	r3, r2, r6
 8011a1c:	4432      	add	r2, r6
 8011a1e:	1b5b      	subs	r3, r3, r5
 8011a20:	1b52      	subs	r2, r2, r5
 8011a22:	6463      	str	r3, [r4, #68]	@ 0x44
 8011a24:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011a26:	6522      	str	r2, [r4, #80]	@ 0x50
 8011a28:	18e9      	adds	r1, r5, r3
 8011a2a:	1b5b      	subs	r3, r3, r5
 8011a2c:	1b89      	subs	r1, r1, r6
 8011a2e:	1b9b      	subs	r3, r3, r6
 8011a30:	6561      	str	r1, [r4, #84]	@ 0x54
 8011a32:	1b81      	subs	r1, r0, r6
 8011a34:	4430      	add	r0, r6
 8011a36:	4429      	add	r1, r5
 8011a38:	4428      	add	r0, r5
 8011a3a:	64a1      	str	r1, [r4, #72]	@ 0x48
 8011a3c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8011a3e:	64e0      	str	r0, [r4, #76]	@ 0x4c
 8011a40:	186f      	adds	r7, r5, r1
 8011a42:	1b49      	subs	r1, r1, r5
 8011a44:	4437      	add	r7, r6
 8011a46:	4431      	add	r1, r6
 8011a48:	65a7      	str	r7, [r4, #88]	@ 0x58
 8011a4a:	65e1      	str	r1, [r4, #92]	@ 0x5c
 8011a4c:	e05b      	b.n	8011b06 <_ZN8touchgfx4Line17updateCachedShapeEv+0x154>
 8011a4e:	ea87 78e7 	eor.w	r8, r7, r7, asr #31
 8011a52:	eba8 78e7 	sub.w	r8, r8, r7, asr #31
 8011a56:	2d00      	cmp	r5, #0
 8011a58:	d0c6      	beq.n	80119e8 <_ZN8touchgfx4Line17updateCachedShapeEv+0x36>
 8011a5a:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
 8011a5e:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
 8011a62:	fb93 f2f8 	sdiv	r2, r3, r8
 8011a66:	fb08 3312 	mls	r3, r8, r2, r3
 8011a6a:	b353      	cbz	r3, 8011ac2 <_ZN8touchgfx4Line17updateCachedShapeEv+0x110>
 8011a6c:	fb98 f2f3 	sdiv	r2, r8, r3
 8011a70:	fb03 8812 	mls	r8, r3, r2, r8
 8011a74:	f1b8 0f00 	cmp.w	r8, #0
 8011a78:	d1f3      	bne.n	8011a62 <_ZN8touchgfx4Line17updateCachedShapeEv+0xb0>
 8011a7a:	2b01      	cmp	r3, #1
 8011a7c:	f24b 5104 	movw	r1, #46340	@ 0xb504
 8011a80:	bf1c      	itt	ne
 8011a82:	fb97 f7f3 	sdivne	r7, r7, r3
 8011a86:	fb95 f5f3 	sdivne	r5, r5, r3
 8011a8a:	ea87 73e7 	eor.w	r3, r7, r7, asr #31
 8011a8e:	4608      	mov	r0, r1
 8011a90:	ea85 72e5 	eor.w	r2, r5, r5, asr #31
 8011a94:	eba3 73e7 	sub.w	r3, r3, r7, asr #31
 8011a98:	eba2 72e5 	sub.w	r2, r2, r5, asr #31
 8011a9c:	428b      	cmp	r3, r1
 8011a9e:	dd01      	ble.n	8011aa4 <_ZN8touchgfx4Line17updateCachedShapeEv+0xf2>
 8011aa0:	428a      	cmp	r2, r1
 8011aa2:	dc10      	bgt.n	8011ac6 <_ZN8touchgfx4Line17updateCachedShapeEv+0x114>
 8011aa4:	fb90 f3f3 	sdiv	r3, r0, r3
 8011aa8:	fb90 f2f2 	sdiv	r2, r0, r2
 8011aac:	4293      	cmp	r3, r2
 8011aae:	bfa8      	it	ge
 8011ab0:	4613      	movge	r3, r2
 8011ab2:	435f      	muls	r7, r3
 8011ab4:	435d      	muls	r5, r3
 8011ab6:	4629      	mov	r1, r5
 8011ab8:	4638      	mov	r0, r7
 8011aba:	f7ff fefb 	bl	80118b4 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8011abe:	4680      	mov	r8, r0
 8011ac0:	e792      	b.n	80119e8 <_ZN8touchgfx4Line17updateCachedShapeEv+0x36>
 8011ac2:	4643      	mov	r3, r8
 8011ac4:	e7d9      	b.n	8011a7a <_ZN8touchgfx4Line17updateCachedShapeEv+0xc8>
 8011ac6:	fb93 f3f1 	sdiv	r3, r3, r1
 8011aca:	fb92 f2f1 	sdiv	r2, r2, r1
 8011ace:	4293      	cmp	r3, r2
 8011ad0:	bfcc      	ite	gt
 8011ad2:	3301      	addgt	r3, #1
 8011ad4:	1c53      	addle	r3, r2, #1
 8011ad6:	fb97 f7f3 	sdiv	r7, r7, r3
 8011ada:	fb95 f5f3 	sdiv	r5, r5, r3
 8011ade:	e7ea      	b.n	8011ab6 <_ZN8touchgfx4Line17updateCachedShapeEv+0x104>
 8011ae0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8011ae2:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8011ae4:	1b93      	subs	r3, r2, r6
 8011ae6:	4432      	add	r2, r6
 8011ae8:	6463      	str	r3, [r4, #68]	@ 0x44
 8011aea:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011aec:	6522      	str	r2, [r4, #80]	@ 0x50
 8011aee:	18e9      	adds	r1, r5, r3
 8011af0:	1b5b      	subs	r3, r3, r5
 8011af2:	6561      	str	r1, [r4, #84]	@ 0x54
 8011af4:	1b81      	subs	r1, r0, r6
 8011af6:	4430      	add	r0, r6
 8011af8:	64a1      	str	r1, [r4, #72]	@ 0x48
 8011afa:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8011afc:	64e0      	str	r0, [r4, #76]	@ 0x4c
 8011afe:	186f      	adds	r7, r5, r1
 8011b00:	1b49      	subs	r1, r1, r5
 8011b02:	65a7      	str	r7, [r4, #88]	@ 0x58
 8011b04:	65e1      	str	r1, [r4, #92]	@ 0x5c
 8011b06:	6623      	str	r3, [r4, #96]	@ 0x60
 8011b08:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8011b0a:	f104 0148 	add.w	r1, r4, #72	@ 0x48
 8011b0e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8011b10:	f104 0c54 	add.w	ip, r4, #84	@ 0x54
 8011b14:	9200      	str	r2, [sp, #0]
 8011b16:	9301      	str	r3, [sp, #4]
 8011b18:	680f      	ldr	r7, [r1, #0]
 8011b1a:	3104      	adds	r1, #4
 8011b1c:	9800      	ldr	r0, [sp, #0]
 8011b1e:	42ba      	cmp	r2, r7
 8011b20:	bfa8      	it	ge
 8011b22:	463a      	movge	r2, r7
 8011b24:	4287      	cmp	r7, r0
 8011b26:	9801      	ldr	r0, [sp, #4]
 8011b28:	bfc8      	it	gt
 8011b2a:	9700      	strgt	r7, [sp, #0]
 8011b2c:	68cf      	ldr	r7, [r1, #12]
 8011b2e:	42bb      	cmp	r3, r7
 8011b30:	bfa8      	it	ge
 8011b32:	463b      	movge	r3, r7
 8011b34:	4287      	cmp	r7, r0
 8011b36:	bfc8      	it	gt
 8011b38:	9701      	strgt	r7, [sp, #4]
 8011b3a:	458c      	cmp	ip, r1
 8011b3c:	d1ec      	bne.n	8011b18 <_ZN8touchgfx4Line17updateCachedShapeEv+0x166>
 8011b3e:	2720      	movs	r7, #32
 8011b40:	4668      	mov	r0, sp
 8011b42:	fb92 f8f7 	sdiv	r8, r2, r7
 8011b46:	fb93 f7f7 	sdiv	r7, r3, r7
 8011b4a:	f7ff fd72 	bl	8011632 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8011b4e:	4682      	mov	sl, r0
 8011b50:	a801      	add	r0, sp, #4
 8011b52:	f7ff fd6e 	bl	8011632 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8011b56:	ebaa 0208 	sub.w	r2, sl, r8
 8011b5a:	1bc0      	subs	r0, r0, r7
 8011b5c:	f1b9 0f01 	cmp.w	r9, #1
 8011b60:	f8a4 8064 	strh.w	r8, [r4, #100]	@ 0x64
 8011b64:	f8a4 7066 	strh.w	r7, [r4, #102]	@ 0x66
 8011b68:	f8a4 2068 	strh.w	r2, [r4, #104]	@ 0x68
 8011b6c:	f8a4 006a 	strh.w	r0, [r4, #106]	@ 0x6a
 8011b70:	f47f af33 	bne.w	80119da <_ZN8touchgfx4Line17updateCachedShapeEv+0x28>
 8011b74:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8011b76:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011b78:	1b83      	subs	r3, r0, r6
 8011b7a:	6463      	str	r3, [r4, #68]	@ 0x44
 8011b7c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011b7e:	18ea      	adds	r2, r5, r3
 8011b80:	6562      	str	r2, [r4, #84]	@ 0x54
 8011b82:	1b8a      	subs	r2, r1, r6
 8011b84:	4431      	add	r1, r6
 8011b86:	4406      	add	r6, r0
 8011b88:	64a2      	str	r2, [r4, #72]	@ 0x48
 8011b8a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8011b8c:	64e1      	str	r1, [r4, #76]	@ 0x4c
 8011b8e:	18af      	adds	r7, r5, r2
 8011b90:	1b52      	subs	r2, r2, r5
 8011b92:	1b5d      	subs	r5, r3, r5
 8011b94:	6526      	str	r6, [r4, #80]	@ 0x50
 8011b96:	65a7      	str	r7, [r4, #88]	@ 0x58
 8011b98:	65e2      	str	r2, [r4, #92]	@ 0x5c
 8011b9a:	6625      	str	r5, [r4, #96]	@ 0x60
 8011b9c:	e71d      	b.n	80119da <_ZN8touchgfx4Line17updateCachedShapeEv+0x28>

08011b9e <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>:
 8011b9e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8011ba0:	428b      	cmp	r3, r1
 8011ba2:	d102      	bne.n	8011baa <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0xc>
 8011ba4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011ba6:	4293      	cmp	r3, r2
 8011ba8:	d003      	beq.n	8011bb2 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0x14>
 8011baa:	e9c0 120b 	strd	r1, r2, [r0, #44]	@ 0x2c
 8011bae:	f7ff bf00 	b.w	80119b2 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8011bb2:	4770      	bx	lr

08011bb4 <_ZN8touchgfx4Line9updateEndENS_7CWRUtil2Q5ES2_>:
 8011bb4:	b570      	push	{r4, r5, r6, lr}
 8011bb6:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8011bb8:	4604      	mov	r4, r0
 8011bba:	460e      	mov	r6, r1
 8011bbc:	4615      	mov	r5, r2
 8011bbe:	428b      	cmp	r3, r1
 8011bc0:	d102      	bne.n	8011bc8 <_ZN8touchgfx4Line9updateEndENS_7CWRUtil2Q5ES2_+0x14>
 8011bc2:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8011bc4:	4293      	cmp	r3, r2
 8011bc6:	d00e      	beq.n	8011be6 <_ZN8touchgfx4Line9updateEndENS_7CWRUtil2Q5ES2_+0x32>
 8011bc8:	6823      	ldr	r3, [r4, #0]
 8011bca:	4620      	mov	r0, r4
 8011bcc:	699b      	ldr	r3, [r3, #24]
 8011bce:	4798      	blx	r3
 8011bd0:	4620      	mov	r0, r4
 8011bd2:	e9c4 650d 	strd	r6, r5, [r4, #52]	@ 0x34
 8011bd6:	f7ff feec 	bl	80119b2 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8011bda:	6823      	ldr	r3, [r4, #0]
 8011bdc:	4620      	mov	r0, r4
 8011bde:	699b      	ldr	r3, [r3, #24]
 8011be0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011be4:	4718      	bx	r3
 8011be6:	bd70      	pop	{r4, r5, r6, pc}

08011be8 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>:
 8011be8:	f880 1040 	strb.w	r1, [r0, #64]	@ 0x40
 8011bec:	f7ff bee1 	b.w	80119b2 <_ZN8touchgfx4Line17updateCachedShapeEv>

08011bf0 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE>:
 8011bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bf4:	b0a0      	sub	sp, #128	@ 0x80
 8011bf6:	4604      	mov	r4, r0
 8011bf8:	460a      	mov	r2, r1
 8011bfa:	4601      	mov	r1, r0
 8011bfc:	a804      	add	r0, sp, #16
 8011bfe:	f013 fc21 	bl	8025444 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 8011c02:	2300      	movs	r3, #0
 8011c04:	9301      	str	r3, [sp, #4]
 8011c06:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8011c0a:	2b01      	cmp	r3, #1
 8011c0c:	d17c      	bne.n	8011d08 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x118>
 8011c0e:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8011c10:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8011c12:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8011c14:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8011c16:	1ac0      	subs	r0, r0, r3
 8011c18:	eba1 0102 	sub.w	r1, r1, r2
 8011c1c:	d437      	bmi.n	8011c8e <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x9e>
 8011c1e:	2900      	cmp	r1, #0
 8011c20:	aa01      	add	r2, sp, #4
 8011c22:	db2e      	blt.n	8011c82 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x92>
 8011c24:	f7ff fe86 	bl	8011934 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8011c28:	f100 065a 	add.w	r6, r0, #90	@ 0x5a
 8011c2c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011c2e:	a804      	add	r0, sp, #16
 8011c30:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8011c32:	f013 fd81 	bl	8025738 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8011c36:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8011c38:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8011c3a:	a804      	add	r0, sp, #16
 8011c3c:	f013 fdc9 	bl	80257d2 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8011c40:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
 8011c42:	2db3      	cmp	r5, #179	@ 0xb3
 8011c44:	dc33      	bgt.n	8011cae <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xbe>
 8011c46:	eba6 0805 	sub.w	r8, r6, r5
 8011c4a:	4640      	mov	r0, r8
 8011c4c:	f7ff fdfe 	bl	801184c <_ZN8touchgfx7CWRUtil4sineEi>
 8011c50:	a902      	add	r1, sp, #8
 8011c52:	9002      	str	r0, [sp, #8]
 8011c54:	a801      	add	r0, sp, #4
 8011c56:	f7ff fce1 	bl	801161c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8011c5a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011c5c:	1847      	adds	r7, r0, r1
 8011c5e:	f1c8 005a 	rsb	r0, r8, #90	@ 0x5a
 8011c62:	f7ff fdf3 	bl	801184c <_ZN8touchgfx7CWRUtil4sineEi>
 8011c66:	a903      	add	r1, sp, #12
 8011c68:	9003      	str	r0, [sp, #12]
 8011c6a:	a801      	add	r0, sp, #4
 8011c6c:	f7ff fcd6 	bl	801161c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8011c70:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8011c72:	4639      	mov	r1, r7
 8011c74:	1a12      	subs	r2, r2, r0
 8011c76:	a804      	add	r0, sp, #16
 8011c78:	f013 fdab 	bl	80257d2 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8011c7c:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8011c7e:	441d      	add	r5, r3
 8011c80:	e7df      	b.n	8011c42 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x52>
 8011c82:	4249      	negs	r1, r1
 8011c84:	f7ff fe56 	bl	8011934 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8011c88:	f1c0 065a 	rsb	r6, r0, #90	@ 0x5a
 8011c8c:	e7ce      	b.n	8011c2c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x3c>
 8011c8e:	2900      	cmp	r1, #0
 8011c90:	f1c0 0000 	rsb	r0, r0, #0
 8011c94:	aa01      	add	r2, sp, #4
 8011c96:	db04      	blt.n	8011ca2 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xb2>
 8011c98:	f7ff fe4c 	bl	8011934 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8011c9c:	f5c0 7687 	rsb	r6, r0, #270	@ 0x10e
 8011ca0:	e7c4      	b.n	8011c2c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x3c>
 8011ca2:	4249      	negs	r1, r1
 8011ca4:	f7ff fe46 	bl	8011934 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8011ca8:	f500 7687 	add.w	r6, r0, #270	@ 0x10e
 8011cac:	e7be      	b.n	8011c2c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x3c>
 8011cae:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8011cb0:	a804      	add	r0, sp, #16
 8011cb2:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8011cb4:	f013 fd8d 	bl	80257d2 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8011cb8:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8011cba:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8011cbc:	a804      	add	r0, sp, #16
 8011cbe:	f013 fd88 	bl	80257d2 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8011cc2:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
 8011cc4:	f1c5 05b4 	rsb	r5, r5, #180	@ 0xb4
 8011cc8:	2d00      	cmp	r5, #0
 8011cca:	dd31      	ble.n	8011d30 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x140>
 8011ccc:	eb05 0806 	add.w	r8, r5, r6
 8011cd0:	4640      	mov	r0, r8
 8011cd2:	f7ff fdbb 	bl	801184c <_ZN8touchgfx7CWRUtil4sineEi>
 8011cd6:	a902      	add	r1, sp, #8
 8011cd8:	9002      	str	r0, [sp, #8]
 8011cda:	a801      	add	r0, sp, #4
 8011cdc:	f7ff fc9e 	bl	801161c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8011ce0:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8011ce2:	1847      	adds	r7, r0, r1
 8011ce4:	f1c8 005a 	rsb	r0, r8, #90	@ 0x5a
 8011ce8:	f7ff fdb0 	bl	801184c <_ZN8touchgfx7CWRUtil4sineEi>
 8011cec:	a903      	add	r1, sp, #12
 8011cee:	9003      	str	r0, [sp, #12]
 8011cf0:	a801      	add	r0, sp, #4
 8011cf2:	f7ff fc93 	bl	801161c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8011cf6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8011cf8:	4639      	mov	r1, r7
 8011cfa:	1a12      	subs	r2, r2, r0
 8011cfc:	a804      	add	r0, sp, #16
 8011cfe:	f013 fd68 	bl	80257d2 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8011d02:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8011d04:	1aed      	subs	r5, r5, r3
 8011d06:	e7df      	b.n	8011cc8 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xd8>
 8011d08:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011d0a:	a804      	add	r0, sp, #16
 8011d0c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8011d0e:	f013 fd13 	bl	8025738 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8011d12:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8011d14:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8011d16:	a804      	add	r0, sp, #16
 8011d18:	f013 fd5b 	bl	80257d2 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8011d1c:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8011d1e:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8011d20:	a804      	add	r0, sp, #16
 8011d22:	f013 fd56 	bl	80257d2 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8011d26:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8011d28:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8011d2a:	a804      	add	r0, sp, #16
 8011d2c:	f013 fd51 	bl	80257d2 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8011d30:	21ff      	movs	r1, #255	@ 0xff
 8011d32:	a804      	add	r0, sp, #16
 8011d34:	f013 fc42 	bl	80255bc <_ZN8touchgfx6Canvas6renderEh>
 8011d38:	4b04      	ldr	r3, [pc, #16]	@ (8011d4c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x15c>)
 8011d3a:	4604      	mov	r4, r0
 8011d3c:	a80c      	add	r0, sp, #48	@ 0x30
 8011d3e:	9304      	str	r3, [sp, #16]
 8011d40:	f001 fe44 	bl	80139cc <_ZN8touchgfx7OutlineD1Ev>
 8011d44:	4620      	mov	r0, r4
 8011d46:	b020      	add	sp, #128	@ 0x80
 8011d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d4c:	0802b2dc 	.word	0x0802b2dc

08011d50 <_ZN8touchgfx17AbstractDataGraph9setScaleXEib>:
 8011d50:	6301      	str	r1, [r0, #48]	@ 0x30
 8011d52:	4770      	bx	lr

08011d54 <_ZNK8touchgfx17AbstractDataGraph9getScaleXEv>:
 8011d54:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8011d56:	4770      	bx	lr

08011d58 <_ZN8touchgfx17AbstractDataGraph9setScaleYEib>:
 8011d58:	6341      	str	r1, [r0, #52]	@ 0x34
 8011d5a:	4770      	bx	lr

08011d5c <_ZNK8touchgfx17AbstractDataGraph9getScaleYEv>:
 8011d5c:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8011d5e:	4770      	bx	lr

08011d60 <_ZN8touchgfx16DynamicDataGraph14beforeAddValueEv>:
 8011d60:	4770      	bx	lr

08011d62 <_ZNK8touchgfx16DynamicDataGraph9dataIndexEs>:
 8011d62:	4608      	mov	r0, r1
 8011d64:	4770      	bx	lr

08011d66 <_ZNK8touchgfx16DynamicDataGraph18indexToGlobalIndexEs>:
 8011d66:	4608      	mov	r0, r1
 8011d68:	4770      	bx	lr

08011d6a <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE>:
 8011d6a:	b530      	push	{r4, r5, lr}
 8011d6c:	460d      	mov	r5, r1
 8011d6e:	8f83      	ldrh	r3, [r0, #60]	@ 0x3c
 8011d70:	8949      	ldrh	r1, [r1, #10]
 8011d72:	b085      	sub	sp, #20
 8011d74:	4604      	mov	r4, r0
 8011d76:	1ac9      	subs	r1, r1, r3
 8011d78:	6803      	ldr	r3, [r0, #0]
 8011d7a:	f10d 0206 	add.w	r2, sp, #6
 8011d7e:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8011d82:	b209      	sxth	r1, r1
 8011d84:	4798      	blx	r3
 8011d86:	b1a0      	cbz	r0, 8011db2 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 8011d88:	792b      	ldrb	r3, [r5, #4]
 8011d8a:	b993      	cbnz	r3, 8011db2 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 8011d8c:	f8d4 0128 	ldr.w	r0, [r4, #296]	@ 0x128
 8011d90:	b178      	cbz	r0, 8011db2 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 8011d92:	6803      	ldr	r3, [r0, #0]
 8011d94:	68db      	ldr	r3, [r3, #12]
 8011d96:	4798      	blx	r3
 8011d98:	b158      	cbz	r0, 8011db2 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 8011d9a:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8011d9e:	aa02      	add	r2, sp, #8
 8011da0:	f8d4 0128 	ldr.w	r0, [r4, #296]	@ 0x128
 8011da4:	4621      	mov	r1, r4
 8011da6:	f8ad 3008 	strh.w	r3, [sp, #8]
 8011daa:	9503      	str	r5, [sp, #12]
 8011dac:	6803      	ldr	r3, [r0, #0]
 8011dae:	689b      	ldr	r3, [r3, #8]
 8011db0:	4798      	blx	r3
 8011db2:	b005      	add	sp, #20
 8011db4:	bd30      	pop	{r4, r5, pc}

08011db6 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii>:
 8011db6:	428a      	cmp	r2, r1
 8011db8:	bfbc      	itt	lt
 8011dba:	460b      	movlt	r3, r1
 8011dbc:	4611      	movlt	r1, r2
 8011dbe:	b510      	push	{r4, lr}
 8011dc0:	bfb8      	it	lt
 8011dc2:	461a      	movlt	r2, r3
 8011dc4:	f8d0 312c 	ldr.w	r3, [r0, #300]	@ 0x12c
 8011dc8:	4604      	mov	r4, r0
 8011dca:	428b      	cmp	r3, r1
 8011dcc:	d103      	bne.n	8011dd6 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x20>
 8011dce:	f8d0 3130 	ldr.w	r3, [r0, #304]	@ 0x130
 8011dd2:	4293      	cmp	r3, r2
 8011dd4:	d011      	beq.n	8011dfa <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x44>
 8011dd6:	f8c4 112c 	str.w	r1, [r4, #300]	@ 0x12c
 8011dda:	f104 00bc 	add.w	r0, r4, #188	@ 0xbc
 8011dde:	f8c4 2130 	str.w	r2, [r4, #304]	@ 0x130
 8011de2:	f005 f9b0 	bl	8017146 <_ZNK8touchgfx8Drawable10invalidateEv>
 8011de6:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8011dea:	f005 f9ac 	bl	8017146 <_ZNK8touchgfx8Drawable10invalidateEv>
 8011dee:	f104 00e8 	add.w	r0, r4, #232	@ 0xe8
 8011df2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011df6:	f005 b9a6 	b.w	8017146 <_ZNK8touchgfx8Drawable10invalidateEv>
 8011dfa:	bd10      	pop	{r4, pc}

08011dfc <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii>:
 8011dfc:	428a      	cmp	r2, r1
 8011dfe:	bfbc      	itt	lt
 8011e00:	460b      	movlt	r3, r1
 8011e02:	4611      	movlt	r1, r2
 8011e04:	b510      	push	{r4, lr}
 8011e06:	bfb8      	it	lt
 8011e08:	461a      	movlt	r2, r3
 8011e0a:	f8d0 3134 	ldr.w	r3, [r0, #308]	@ 0x134
 8011e0e:	4604      	mov	r4, r0
 8011e10:	428b      	cmp	r3, r1
 8011e12:	d103      	bne.n	8011e1c <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x20>
 8011e14:	f8d0 3138 	ldr.w	r3, [r0, #312]	@ 0x138
 8011e18:	4293      	cmp	r3, r2
 8011e1a:	d011      	beq.n	8011e40 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x44>
 8011e1c:	f8c4 1134 	str.w	r1, [r4, #308]	@ 0x134
 8011e20:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 8011e24:	f8c4 2138 	str.w	r2, [r4, #312]	@ 0x138
 8011e28:	f005 f98d 	bl	8017146 <_ZNK8touchgfx8Drawable10invalidateEv>
 8011e2c:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8011e30:	f005 f989 	bl	8017146 <_ZNK8touchgfx8Drawable10invalidateEv>
 8011e34:	f104 0090 	add.w	r0, r4, #144	@ 0x90
 8011e38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011e3c:	f005 b983 	b.w	8017146 <_ZNK8touchgfx8Drawable10invalidateEv>
 8011e40:	bd10      	pop	{r4, pc}

08011e42 <_ZN8touchgfx17AbstractDataGraph5clearEv>:
 8011e42:	2300      	movs	r3, #0
 8011e44:	3038      	adds	r0, #56	@ 0x38
 8011e46:	f8a0 30e6 	strh.w	r3, [r0, #230]	@ 0xe6
 8011e4a:	f005 b97c 	b.w	8017146 <_ZNK8touchgfx8Drawable10invalidateEv>

08011e4e <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi>:
 8011e4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e52:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	@ 0x11e
 8011e56:	4605      	mov	r5, r0
 8011e58:	4688      	mov	r8, r1
 8011e5a:	4617      	mov	r7, r2
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d03e      	beq.n	8011ede <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x90>
 8011e60:	6803      	ldr	r3, [r0, #0]
 8011e62:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 8011e66:	4798      	blx	r3
 8011e68:	682b      	ldr	r3, [r5, #0]
 8011e6a:	4604      	mov	r4, r0
 8011e6c:	4628      	mov	r0, r5
 8011e6e:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8011e72:	4798      	blx	r3
 8011e74:	4284      	cmp	r4, r0
 8011e76:	f9b5 611e 	ldrsh.w	r6, [r5, #286]	@ 0x11e
 8011e7a:	bfc2      	ittt	gt
 8011e7c:	4623      	movgt	r3, r4
 8011e7e:	4604      	movgt	r4, r0
 8011e80:	4618      	movgt	r0, r3
 8011e82:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 8011e86:	42b3      	cmp	r3, r6
 8011e88:	da29      	bge.n	8011ede <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x90>
 8011e8a:	42b0      	cmp	r0, r6
 8011e8c:	bfa8      	it	ge
 8011e8e:	4630      	movge	r0, r6
 8011e90:	2800      	cmp	r0, #0
 8011e92:	db24      	blt.n	8011ede <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x90>
 8011e94:	f1b8 0f00 	cmp.w	r8, #0
 8011e98:	d11e      	bne.n	8011ed8 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x8a>
 8011e9a:	f8d5 2144 	ldr.w	r2, [r5, #324]	@ 0x144
 8011e9e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8011ea2:	460c      	mov	r4, r1
 8011ea4:	009a      	lsls	r2, r3, #2
 8011ea6:	4298      	cmp	r0, r3
 8011ea8:	dd0b      	ble.n	8011ec2 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x74>
 8011eaa:	f8d5 6144 	ldr.w	r6, [r5, #324]	@ 0x144
 8011eae:	3301      	adds	r3, #1
 8011eb0:	58b6      	ldr	r6, [r6, r2]
 8011eb2:	3204      	adds	r2, #4
 8011eb4:	42b1      	cmp	r1, r6
 8011eb6:	bfa8      	it	ge
 8011eb8:	4631      	movge	r1, r6
 8011eba:	42b4      	cmp	r4, r6
 8011ebc:	bfb8      	it	lt
 8011ebe:	4634      	movlt	r4, r6
 8011ec0:	e7f1      	b.n	8011ea6 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x58>
 8011ec2:	1bc9      	subs	r1, r1, r7
 8011ec4:	193a      	adds	r2, r7, r4
 8011ec6:	4291      	cmp	r1, r2
 8011ec8:	d009      	beq.n	8011ede <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x90>
 8011eca:	682b      	ldr	r3, [r5, #0]
 8011ecc:	4628      	mov	r0, r5
 8011ece:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8011ed2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011ed6:	4718      	bx	r3
 8011ed8:	427c      	negs	r4, r7
 8011eda:	4639      	mov	r1, r7
 8011edc:	e7e2      	b.n	8011ea4 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x56>
 8011ede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011ee2 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE>:
 8011ee2:	b530      	push	{r4, r5, lr}
 8011ee4:	790b      	ldrb	r3, [r1, #4]
 8011ee6:	b085      	sub	sp, #20
 8011ee8:	4604      	mov	r4, r0
 8011eea:	460d      	mov	r5, r1
 8011eec:	2b02      	cmp	r3, #2
 8011eee:	d020      	beq.n	8011f32 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8011ef0:	8f83      	ldrh	r3, [r0, #60]	@ 0x3c
 8011ef2:	f10d 0206 	add.w	r2, sp, #6
 8011ef6:	88c9      	ldrh	r1, [r1, #6]
 8011ef8:	1ac9      	subs	r1, r1, r3
 8011efa:	6803      	ldr	r3, [r0, #0]
 8011efc:	b209      	sxth	r1, r1
 8011efe:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8011f02:	4798      	blx	r3
 8011f04:	b1a8      	cbz	r0, 8011f32 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8011f06:	792b      	ldrb	r3, [r5, #4]
 8011f08:	2b01      	cmp	r3, #1
 8011f0a:	d812      	bhi.n	8011f32 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8011f0c:	f8d4 0124 	ldr.w	r0, [r4, #292]	@ 0x124
 8011f10:	b178      	cbz	r0, 8011f32 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8011f12:	6803      	ldr	r3, [r0, #0]
 8011f14:	68db      	ldr	r3, [r3, #12]
 8011f16:	4798      	blx	r3
 8011f18:	b158      	cbz	r0, 8011f32 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8011f1a:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8011f1e:	aa02      	add	r2, sp, #8
 8011f20:	f8d4 0124 	ldr.w	r0, [r4, #292]	@ 0x124
 8011f24:	4621      	mov	r1, r4
 8011f26:	f8ad 3008 	strh.w	r3, [sp, #8]
 8011f2a:	9503      	str	r5, [sp, #12]
 8011f2c:	6803      	ldr	r3, [r0, #0]
 8011f2e:	689b      	ldr	r3, [r3, #8]
 8011f30:	4798      	blx	r3
 8011f32:	b005      	add	sp, #20
 8011f34:	bd30      	pop	{r4, r5, pc}

08011f36 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_>:
 8011f36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f3a:	4604      	mov	r4, r0
 8011f3c:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	@ 0x11e
 8011f40:	4690      	mov	r8, r2
 8011f42:	461f      	mov	r7, r3
 8011f44:	9e06      	ldr	r6, [sp, #24]
 8011f46:	b928      	cbnz	r0, 8011f54 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1e>
 8011f48:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011f4c:	8033      	strh	r3, [r6, #0]
 8011f4e:	803b      	strh	r3, [r7, #0]
 8011f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f54:	f8b4 2118 	ldrh.w	r2, [r4, #280]	@ 0x118
 8011f58:	f9b4 0116 	ldrsh.w	r0, [r4, #278]	@ 0x116
 8011f5c:	1883      	adds	r3, r0, r2
 8011f5e:	f8b4 2040 	ldrh.w	r2, [r4, #64]	@ 0x40
 8011f62:	1ad2      	subs	r2, r2, r3
 8011f64:	b212      	sxth	r2, r2
 8011f66:	2a01      	cmp	r2, #1
 8011f68:	dc07      	bgt.n	8011f7a <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x44>
 8011f6a:	2300      	movs	r3, #0
 8011f6c:	803b      	strh	r3, [r7, #0]
 8011f6e:	f8b4 311e 	ldrh.w	r3, [r4, #286]	@ 0x11e
 8011f72:	3b01      	subs	r3, #1
 8011f74:	8033      	strh	r3, [r6, #0]
 8011f76:	2001      	movs	r0, #1
 8011f78:	e7ea      	b.n	8011f50 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 8011f7a:	1a08      	subs	r0, r1, r0
 8011f7c:	f8d4 3130 	ldr.w	r3, [r4, #304]	@ 0x130
 8011f80:	f8d4 112c 	ldr.w	r1, [r4, #300]	@ 0x12c
 8011f84:	0140      	lsls	r0, r0, #5
 8011f86:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011f88:	1a5b      	subs	r3, r3, r1
 8011f8a:	d459      	bmi.n	8012040 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x10a>
 8011f8c:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8011f90:	fb93 f1f5 	sdiv	r1, r3, r5
 8011f94:	2302      	movs	r3, #2
 8011f96:	fb91 f1f3 	sdiv	r1, r1, r3
 8011f9a:	3a01      	subs	r2, #1
 8011f9c:	f005 fa9a 	bl	80174d4 <_ZN8touchgfx6muldivElll>
 8011fa0:	f8d4 112c 	ldr.w	r1, [r4, #300]	@ 0x12c
 8011fa4:	f8d4 c030 	ldr.w	ip, [r4, #48]	@ 0x30
 8011fa8:	2900      	cmp	r1, #0
 8011faa:	db55      	blt.n	8012058 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x122>
 8011fac:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
 8011fb0:	2502      	movs	r5, #2
 8011fb2:	fb93 f3fc 	sdiv	r3, r3, ip
 8011fb6:	fb93 f3f5 	sdiv	r3, r3, r5
 8011fba:	eb00 1543 	add.w	r5, r0, r3, lsl #5
 8011fbe:	f8d4 2130 	ldr.w	r2, [r4, #304]	@ 0x130
 8011fc2:	f9b4 3116 	ldrsh.w	r3, [r4, #278]	@ 0x116
 8011fc6:	1a52      	subs	r2, r2, r1
 8011fc8:	eba8 0003 	sub.w	r0, r8, r3
 8011fcc:	ea4f 1040 	mov.w	r0, r0, lsl #5
 8011fd0:	d44e      	bmi.n	8012070 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x13a>
 8011fd2:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8011fd6:	fb92 f1fc 	sdiv	r1, r2, ip
 8011fda:	2202      	movs	r2, #2
 8011fdc:	fb91 f1f2 	sdiv	r1, r1, r2
 8011fe0:	f8b4 2118 	ldrh.w	r2, [r4, #280]	@ 0x118
 8011fe4:	4413      	add	r3, r2
 8011fe6:	f8b4 2040 	ldrh.w	r2, [r4, #64]	@ 0x40
 8011fea:	1ad2      	subs	r2, r2, r3
 8011fec:	b212      	sxth	r2, r2
 8011fee:	3a01      	subs	r2, #1
 8011ff0:	f005 fa70 	bl	80174d4 <_ZN8touchgfx6muldivElll>
 8011ff4:	f8d4 312c 	ldr.w	r3, [r4, #300]	@ 0x12c
 8011ff8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	db44      	blt.n	8012088 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x152>
 8011ffe:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8012002:	fb93 f3f2 	sdiv	r3, r3, r2
 8012006:	2202      	movs	r2, #2
 8012008:	fb93 f3f2 	sdiv	r3, r3, r2
 801200c:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8012010:	2020      	movs	r0, #32
 8012012:	429d      	cmp	r5, r3
 8012014:	bfde      	ittt	le
 8012016:	461a      	movle	r2, r3
 8012018:	462b      	movle	r3, r5
 801201a:	4615      	movle	r5, r2
 801201c:	b21b      	sxth	r3, r3
 801201e:	2d00      	cmp	r5, #0
 8012020:	bfaa      	itet	ge
 8012022:	351f      	addge	r5, #31
 8012024:	fb95 f5f0 	sdivlt	r5, r5, r0
 8012028:	116d      	asrge	r5, r5, #5
 801202a:	fb93 f3f0 	sdiv	r3, r3, r0
 801202e:	b22d      	sxth	r5, r5
 8012030:	803b      	strh	r3, [r7, #0]
 8012032:	2d00      	cmp	r5, #0
 8012034:	8035      	strh	r5, [r6, #0]
 8012036:	da33      	bge.n	80120a0 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x16a>
 8012038:	2000      	movs	r0, #0
 801203a:	8030      	strh	r0, [r6, #0]
 801203c:	8038      	strh	r0, [r7, #0]
 801203e:	e787      	b.n	8011f50 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 8012040:	f06f 0101 	mvn.w	r1, #1
 8012044:	fb01 5303 	mla	r3, r1, r3, r5
 8012048:	1e59      	subs	r1, r3, #1
 801204a:	2302      	movs	r3, #2
 801204c:	fb91 f1f5 	sdiv	r1, r1, r5
 8012050:	fb91 f1f3 	sdiv	r1, r1, r3
 8012054:	4249      	negs	r1, r1
 8012056:	e7a0      	b.n	8011f9a <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x64>
 8012058:	f06f 0301 	mvn.w	r3, #1
 801205c:	2502      	movs	r5, #2
 801205e:	fb03 c301 	mla	r3, r3, r1, ip
 8012062:	3b01      	subs	r3, #1
 8012064:	fb93 f3fc 	sdiv	r3, r3, ip
 8012068:	fb93 f3f5 	sdiv	r3, r3, r5
 801206c:	425b      	negs	r3, r3
 801206e:	e7a4      	b.n	8011fba <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x84>
 8012070:	f06f 0101 	mvn.w	r1, #1
 8012074:	fb01 c202 	mla	r2, r1, r2, ip
 8012078:	1e51      	subs	r1, r2, #1
 801207a:	2202      	movs	r2, #2
 801207c:	fb91 f1fc 	sdiv	r1, r1, ip
 8012080:	fb91 f1f2 	sdiv	r1, r1, r2
 8012084:	4249      	negs	r1, r1
 8012086:	e7ab      	b.n	8011fe0 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xaa>
 8012088:	f06f 0101 	mvn.w	r1, #1
 801208c:	fb01 2303 	mla	r3, r1, r3, r2
 8012090:	3b01      	subs	r3, #1
 8012092:	fb93 f3f2 	sdiv	r3, r3, r2
 8012096:	2202      	movs	r2, #2
 8012098:	fb93 f3f2 	sdiv	r3, r3, r2
 801209c:	425b      	negs	r3, r3
 801209e:	e7b5      	b.n	801200c <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xd6>
 80120a0:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 80120a4:	f9b7 2000 	ldrsh.w	r2, [r7]
 80120a8:	4293      	cmp	r3, r2
 80120aa:	dc05      	bgt.n	80120b8 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x182>
 80120ac:	3b01      	subs	r3, #1
 80120ae:	2000      	movs	r0, #0
 80120b0:	b21b      	sxth	r3, r3
 80120b2:	8033      	strh	r3, [r6, #0]
 80120b4:	803b      	strh	r3, [r7, #0]
 80120b6:	e74b      	b.n	8011f50 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 80120b8:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80120bc:	803a      	strh	r2, [r7, #0]
 80120be:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 80120c2:	f9b6 2000 	ldrsh.w	r2, [r6]
 80120c6:	4293      	cmp	r3, r2
 80120c8:	bfdc      	itt	le
 80120ca:	f103 33ff 	addle.w	r3, r3, #4294967295
 80120ce:	b21a      	sxthle	r2, r3
 80120d0:	8032      	strh	r2, [r6, #0]
 80120d2:	e750      	b.n	8011f76 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x40>

080120d4 <_ZN8touchgfx9ContainerC1Ev>:
 80120d4:	2101      	movs	r1, #1
 80120d6:	2200      	movs	r2, #0
 80120d8:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 80120dc:	4909      	ldr	r1, [pc, #36]	@ (8012104 <_ZN8touchgfx9ContainerC1Ev+0x30>)
 80120de:	8082      	strh	r2, [r0, #4]
 80120e0:	80c2      	strh	r2, [r0, #6]
 80120e2:	8102      	strh	r2, [r0, #8]
 80120e4:	8142      	strh	r2, [r0, #10]
 80120e6:	8182      	strh	r2, [r0, #12]
 80120e8:	81c2      	strh	r2, [r0, #14]
 80120ea:	8202      	strh	r2, [r0, #16]
 80120ec:	8242      	strh	r2, [r0, #18]
 80120ee:	61c2      	str	r2, [r0, #28]
 80120f0:	8402      	strh	r2, [r0, #32]
 80120f2:	8442      	strh	r2, [r0, #34]	@ 0x22
 80120f4:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 80120f8:	6001      	str	r1, [r0, #0]
 80120fa:	6282      	str	r2, [r0, #40]	@ 0x28
 80120fc:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8012100:	4770      	bx	lr
 8012102:	bf00      	nop
 8012104:	0802a598 	.word	0x0802a598

08012108 <_ZNK8touchgfx7CWRUtil2Q55roundEv>:
 8012108:	6800      	ldr	r0, [r0, #0]
 801210a:	2800      	cmp	r0, #0
 801210c:	bfbd      	ittte	lt
 801210e:	380f      	sublt	r0, #15
 8012110:	2320      	movlt	r3, #32
 8012112:	fb90 f0f3 	sdivlt	r0, r0, r3
 8012116:	3010      	addge	r0, #16
 8012118:	bfa8      	it	ge
 801211a:	1140      	asrge	r0, r0, #5
 801211c:	4770      	bx	lr

0801211e <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs>:
 801211e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012122:	4605      	mov	r5, r0
 8012124:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	@ 0x11e
 8012128:	4688      	mov	r8, r1
 801212a:	4691      	mov	r9, r2
 801212c:	469a      	mov	sl, r3
 801212e:	b360      	cbz	r0, 801218a <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x6c>
 8012130:	2700      	movs	r7, #0
 8012132:	f04f 3bff 	mov.w	fp, #4294967295
 8012136:	b23e      	sxth	r6, r7
 8012138:	f9b5 311e 	ldrsh.w	r3, [r5, #286]	@ 0x11e
 801213c:	42b3      	cmp	r3, r6
 801213e:	dd23      	ble.n	8012188 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x6a>
 8012140:	682b      	ldr	r3, [r5, #0]
 8012142:	4631      	mov	r1, r6
 8012144:	4628      	mov	r0, r5
 8012146:	3701      	adds	r7, #1
 8012148:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 801214c:	4798      	blx	r3
 801214e:	9001      	str	r0, [sp, #4]
 8012150:	a801      	add	r0, sp, #4
 8012152:	f7ff ffd9 	bl	8012108 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8012156:	682b      	ldr	r3, [r5, #0]
 8012158:	eba0 0008 	sub.w	r0, r0, r8
 801215c:	4631      	mov	r1, r6
 801215e:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8012162:	b204      	sxth	r4, r0
 8012164:	4628      	mov	r0, r5
 8012166:	4798      	blx	r3
 8012168:	9001      	str	r0, [sp, #4]
 801216a:	a801      	add	r0, sp, #4
 801216c:	f7ff ffcc 	bl	8012108 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8012170:	eba0 0009 	sub.w	r0, r0, r9
 8012174:	fb10 f000 	smulbb	r0, r0, r0
 8012178:	fb04 0404 	mla	r4, r4, r4, r0
 801217c:	455c      	cmp	r4, fp
 801217e:	bf3c      	itt	cc
 8012180:	f8aa 6000 	strhcc.w	r6, [sl]
 8012184:	46a3      	movcc	fp, r4
 8012186:	e7d6      	b.n	8012136 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x18>
 8012188:	2001      	movs	r0, #1
 801218a:	b003      	add	sp, #12
 801218c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012190 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs>:
 8012190:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012194:	4604      	mov	r4, r0
 8012196:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	@ 0x11e
 801219a:	4688      	mov	r8, r1
 801219c:	4691      	mov	r9, r2
 801219e:	b1f8      	cbz	r0, 80121e0 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x50>
 80121a0:	2500      	movs	r5, #0
 80121a2:	f04f 37ff 	mov.w	r7, #4294967295
 80121a6:	b22e      	sxth	r6, r5
 80121a8:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 80121ac:	42b3      	cmp	r3, r6
 80121ae:	dd16      	ble.n	80121de <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x4e>
 80121b0:	6823      	ldr	r3, [r4, #0]
 80121b2:	4631      	mov	r1, r6
 80121b4:	4620      	mov	r0, r4
 80121b6:	3501      	adds	r5, #1
 80121b8:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80121bc:	4798      	blx	r3
 80121be:	9001      	str	r0, [sp, #4]
 80121c0:	a801      	add	r0, sp, #4
 80121c2:	f7ff ffa1 	bl	8012108 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80121c6:	b200      	sxth	r0, r0
 80121c8:	eba0 0008 	sub.w	r0, r0, r8
 80121cc:	2800      	cmp	r0, #0
 80121ce:	bfb8      	it	lt
 80121d0:	4240      	neglt	r0, r0
 80121d2:	42b8      	cmp	r0, r7
 80121d4:	bf3c      	itt	cc
 80121d6:	f8a9 6000 	strhcc.w	r6, [r9]
 80121da:	4607      	movcc	r7, r0
 80121dc:	e7e3      	b.n	80121a6 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x16>
 80121de:	2001      	movs	r0, #1
 80121e0:	b003      	add	sp, #12
 80121e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080121e6 <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>:
 80121e6:	f8a0 3118 	strh.w	r3, [r0, #280]	@ 0x118
 80121ea:	f9bd 3000 	ldrsh.w	r3, [sp]
 80121ee:	f8a0 1114 	strh.w	r1, [r0, #276]	@ 0x114
 80121f2:	f8a0 2116 	strh.w	r2, [r0, #278]	@ 0x116
 80121f6:	f8a0 311a 	strh.w	r3, [r0, #282]	@ 0x11a
 80121fa:	4770      	bx	lr

080121fc <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>:
 80121fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80121fe:	4604      	mov	r4, r0
 8012200:	3038      	adds	r0, #56	@ 0x38
 8012202:	460d      	mov	r5, r1
 8012204:	f7fd fe10 	bl	800fe28 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8012208:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	@ 0x42
 801220c:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 8012210:	4628      	mov	r0, r5
 8012212:	9200      	str	r2, [sp, #0]
 8012214:	2200      	movs	r2, #0
 8012216:	4611      	mov	r1, r2
 8012218:	f7f3 fab6 	bl	8005788 <_ZN8touchgfx8Drawable11setPositionEssss>
 801221c:	b003      	add	sp, #12
 801221e:	bd30      	pop	{r4, r5, pc}

08012220 <_ZN8touchgfx17AbstractDataGraph14addLeftElementERNS_23AbstractGraphDecorationE>:
 8012220:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012222:	4604      	mov	r4, r0
 8012224:	3064      	adds	r0, #100	@ 0x64
 8012226:	460d      	mov	r5, r1
 8012228:	f7fd fdfe 	bl	800fe28 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801222c:	f9b4 206e 	ldrsh.w	r2, [r4, #110]	@ 0x6e
 8012230:	f9b4 306c 	ldrsh.w	r3, [r4, #108]	@ 0x6c
 8012234:	4628      	mov	r0, r5
 8012236:	9200      	str	r2, [sp, #0]
 8012238:	2200      	movs	r2, #0
 801223a:	4611      	mov	r1, r2
 801223c:	f7f3 faa4 	bl	8005788 <_ZN8touchgfx8Drawable11setPositionEssss>
 8012240:	b003      	add	sp, #12
 8012242:	bd30      	pop	{r4, r5, pc}

08012244 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>:
 8012244:	b538      	push	{r3, r4, r5, lr}
 8012246:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	@ 0x11e
 801224a:	460d      	mov	r5, r1
 801224c:	428b      	cmp	r3, r1
 801224e:	dd08      	ble.n	8012262 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
 8012250:	6e04      	ldr	r4, [r0, #96]	@ 0x60
 8012252:	b134      	cbz	r4, 8012262 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
 8012254:	6823      	ldr	r3, [r4, #0]
 8012256:	4620      	mov	r0, r4
 8012258:	4629      	mov	r1, r5
 801225a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801225c:	4798      	blx	r3
 801225e:	69a4      	ldr	r4, [r4, #24]
 8012260:	e7f7      	b.n	8012252 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0xe>
 8012262:	bd38      	pop	{r3, r4, r5, pc}

08012264 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>:
 8012264:	b570      	push	{r4, r5, r6, lr}
 8012266:	4606      	mov	r6, r0
 8012268:	460d      	mov	r5, r1
 801226a:	f8d0 40e4 	ldr.w	r4, [r0, #228]	@ 0xe4
 801226e:	b134      	cbz	r4, 801227e <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x1a>
 8012270:	6823      	ldr	r3, [r4, #0]
 8012272:	4620      	mov	r0, r4
 8012274:	4629      	mov	r1, r5
 8012276:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012278:	4798      	blx	r3
 801227a:	69a4      	ldr	r4, [r4, #24]
 801227c:	e7f7      	b.n	801226e <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0xa>
 801227e:	f8d6 4110 	ldr.w	r4, [r6, #272]	@ 0x110
 8012282:	b134      	cbz	r4, 8012292 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x2e>
 8012284:	6823      	ldr	r3, [r4, #0]
 8012286:	4620      	mov	r0, r4
 8012288:	4629      	mov	r1, r5
 801228a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801228c:	4798      	blx	r3
 801228e:	69a4      	ldr	r4, [r4, #24]
 8012290:	e7f7      	b.n	8012282 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x1e>
 8012292:	bd70      	pop	{r4, r5, r6, pc}

08012294 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>:
 8012294:	b538      	push	{r3, r4, r5, lr}
 8012296:	4604      	mov	r4, r0
 8012298:	2500      	movs	r5, #0
 801229a:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 801229e:	42ab      	cmp	r3, r5
 80122a0:	db05      	blt.n	80122ae <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv+0x1a>
 80122a2:	b229      	sxth	r1, r5
 80122a4:	4620      	mov	r0, r4
 80122a6:	f7ff ffdd 	bl	8012264 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>
 80122aa:	3501      	adds	r5, #1
 80122ac:	e7f5      	b.n	801229a <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv+0x6>
 80122ae:	f104 00bc 	add.w	r0, r4, #188	@ 0xbc
 80122b2:	f004 ff48 	bl	8017146 <_ZNK8touchgfx8Drawable10invalidateEv>
 80122b6:	f104 00e8 	add.w	r0, r4, #232	@ 0xe8
 80122ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80122be:	f004 bf42 	b.w	8017146 <_ZNK8touchgfx8Drawable10invalidateEv>

080122c2 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>:
 80122c2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80122c4:	4604      	mov	r4, r0
 80122c6:	6e05      	ldr	r5, [r0, #96]	@ 0x60
 80122c8:	b15d      	cbz	r5, 80122e2 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x20>
 80122ca:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	@ 0x42
 80122ce:	4628      	mov	r0, r5
 80122d0:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 80122d4:	9200      	str	r2, [sp, #0]
 80122d6:	2200      	movs	r2, #0
 80122d8:	4611      	mov	r1, r2
 80122da:	f7f3 fa55 	bl	8005788 <_ZN8touchgfx8Drawable11setPositionEssss>
 80122de:	69ad      	ldr	r5, [r5, #24]
 80122e0:	e7f2      	b.n	80122c8 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x6>
 80122e2:	f8d4 50e4 	ldr.w	r5, [r4, #228]	@ 0xe4
 80122e6:	b15d      	cbz	r5, 8012300 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x3e>
 80122e8:	f9b4 20c6 	ldrsh.w	r2, [r4, #198]	@ 0xc6
 80122ec:	4628      	mov	r0, r5
 80122ee:	f9b4 30c4 	ldrsh.w	r3, [r4, #196]	@ 0xc4
 80122f2:	9200      	str	r2, [sp, #0]
 80122f4:	2200      	movs	r2, #0
 80122f6:	4611      	mov	r1, r2
 80122f8:	f7f3 fa46 	bl	8005788 <_ZN8touchgfx8Drawable11setPositionEssss>
 80122fc:	69ad      	ldr	r5, [r5, #24]
 80122fe:	e7f2      	b.n	80122e6 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x24>
 8012300:	f8d4 508c 	ldr.w	r5, [r4, #140]	@ 0x8c
 8012304:	b15d      	cbz	r5, 801231e <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x5c>
 8012306:	f9b4 206e 	ldrsh.w	r2, [r4, #110]	@ 0x6e
 801230a:	4628      	mov	r0, r5
 801230c:	f9b4 306c 	ldrsh.w	r3, [r4, #108]	@ 0x6c
 8012310:	9200      	str	r2, [sp, #0]
 8012312:	2200      	movs	r2, #0
 8012314:	4611      	mov	r1, r2
 8012316:	f7f3 fa37 	bl	8005788 <_ZN8touchgfx8Drawable11setPositionEssss>
 801231a:	69ad      	ldr	r5, [r5, #24]
 801231c:	e7f2      	b.n	8012304 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x42>
 801231e:	f8d4 50b8 	ldr.w	r5, [r4, #184]	@ 0xb8
 8012322:	b15d      	cbz	r5, 801233c <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7a>
 8012324:	f9b4 209a 	ldrsh.w	r2, [r4, #154]	@ 0x9a
 8012328:	4628      	mov	r0, r5
 801232a:	f9b4 3098 	ldrsh.w	r3, [r4, #152]	@ 0x98
 801232e:	9200      	str	r2, [sp, #0]
 8012330:	2200      	movs	r2, #0
 8012332:	4611      	mov	r1, r2
 8012334:	f7f3 fa28 	bl	8005788 <_ZN8touchgfx8Drawable11setPositionEssss>
 8012338:	69ad      	ldr	r5, [r5, #24]
 801233a:	e7f2      	b.n	8012322 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x60>
 801233c:	f8d4 5110 	ldr.w	r5, [r4, #272]	@ 0x110
 8012340:	b15d      	cbz	r5, 801235a <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x98>
 8012342:	f9b4 20f2 	ldrsh.w	r2, [r4, #242]	@ 0xf2
 8012346:	4628      	mov	r0, r5
 8012348:	f9b4 30f0 	ldrsh.w	r3, [r4, #240]	@ 0xf0
 801234c:	9200      	str	r2, [sp, #0]
 801234e:	2200      	movs	r2, #0
 8012350:	4611      	mov	r1, r2
 8012352:	f7f3 fa19 	bl	8005788 <_ZN8touchgfx8Drawable11setPositionEssss>
 8012356:	69ad      	ldr	r5, [r5, #24]
 8012358:	e7f2      	b.n	8012340 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7e>
 801235a:	6823      	ldr	r3, [r4, #0]
 801235c:	4620      	mov	r0, r4
 801235e:	695b      	ldr	r3, [r3, #20]
 8012360:	b003      	add	sp, #12
 8012362:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012366:	4718      	bx	r3

08012368 <_ZN8touchgfx17AbstractDataGraph8setWidthEs>:
 8012368:	b430      	push	{r4, r5}
 801236a:	b28a      	uxth	r2, r1
 801236c:	f8b0 4098 	ldrh.w	r4, [r0, #152]	@ 0x98
 8012370:	f8a0 10c4 	strh.w	r1, [r0, #196]	@ 0xc4
 8012374:	1b15      	subs	r5, r2, r4
 8012376:	f8a0 10f0 	strh.w	r1, [r0, #240]	@ 0xf0
 801237a:	8101      	strh	r1, [r0, #8]
 801237c:	f8a0 5094 	strh.w	r5, [r0, #148]	@ 0x94
 8012380:	f8b0 506c 	ldrh.w	r5, [r0, #108]	@ 0x6c
 8012384:	442c      	add	r4, r5
 8012386:	1b12      	subs	r2, r2, r4
 8012388:	bc30      	pop	{r4, r5}
 801238a:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 801238e:	f7ff bf98 	b.w	80122c2 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

08012392 <_ZN8touchgfx17AbstractDataGraph9setHeightEs>:
 8012392:	b430      	push	{r4, r5}
 8012394:	b28a      	uxth	r2, r1
 8012396:	f8b0 40f2 	ldrh.w	r4, [r0, #242]	@ 0xf2
 801239a:	f8a0 106e 	strh.w	r1, [r0, #110]	@ 0x6e
 801239e:	1b15      	subs	r5, r2, r4
 80123a0:	f8a0 109a 	strh.w	r1, [r0, #154]	@ 0x9a
 80123a4:	8141      	strh	r1, [r0, #10]
 80123a6:	f8a0 50ee 	strh.w	r5, [r0, #238]	@ 0xee
 80123aa:	f8b0 50c6 	ldrh.w	r5, [r0, #198]	@ 0xc6
 80123ae:	442c      	add	r4, r5
 80123b0:	1b12      	subs	r2, r2, r4
 80123b2:	bc30      	pop	{r4, r5}
 80123b4:	f8a0 2042 	strh.w	r2, [r0, #66]	@ 0x42
 80123b8:	f7ff bf83 	b.w	80122c2 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

080123bc <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>:
 80123bc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80123c0:	fa1f fa83 	uxth.w	sl, r3
 80123c4:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	@ 0x28
 80123c8:	4615      	mov	r5, r2
 80123ca:	4699      	mov	r9, r3
 80123cc:	fa1f f887 	uxth.w	r8, r7
 80123d0:	8903      	ldrh	r3, [r0, #8]
 80123d2:	4452      	add	r2, sl
 80123d4:	4604      	mov	r4, r0
 80123d6:	8940      	ldrh	r0, [r0, #10]
 80123d8:	460e      	mov	r6, r1
 80123da:	1a9b      	subs	r3, r3, r2
 80123dc:	eb08 0201 	add.w	r2, r8, r1
 80123e0:	1a80      	subs	r0, r0, r2
 80123e2:	b21b      	sxth	r3, r3
 80123e4:	460a      	mov	r2, r1
 80123e6:	4629      	mov	r1, r5
 80123e8:	b200      	sxth	r0, r0
 80123ea:	9000      	str	r0, [sp, #0]
 80123ec:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 80123f0:	f7f3 f9ca 	bl	8005788 <_ZN8touchgfx8Drawable11setPositionEssss>
 80123f4:	2200      	movs	r2, #0
 80123f6:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80123fa:	f104 00bc 	add.w	r0, r4, #188	@ 0xbc
 80123fe:	4611      	mov	r1, r2
 8012400:	9600      	str	r6, [sp, #0]
 8012402:	f7f3 f9c1 	bl	8005788 <_ZN8touchgfx8Drawable11setPositionEssss>
 8012406:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801240a:	2200      	movs	r2, #0
 801240c:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 8012410:	9300      	str	r3, [sp, #0]
 8012412:	462b      	mov	r3, r5
 8012414:	4611      	mov	r1, r2
 8012416:	f7f3 f9b7 	bl	8005788 <_ZN8touchgfx8Drawable11setPositionEssss>
 801241a:	8921      	ldrh	r1, [r4, #8]
 801241c:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8012420:	f104 0090 	add.w	r0, r4, #144	@ 0x90
 8012424:	eba1 010a 	sub.w	r1, r1, sl
 8012428:	2200      	movs	r2, #0
 801242a:	9300      	str	r3, [sp, #0]
 801242c:	464b      	mov	r3, r9
 801242e:	b209      	sxth	r1, r1
 8012430:	f7f3 f9aa 	bl	8005788 <_ZN8touchgfx8Drawable11setPositionEssss>
 8012434:	8962      	ldrh	r2, [r4, #10]
 8012436:	f104 00e8 	add.w	r0, r4, #232	@ 0xe8
 801243a:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 801243e:	eba2 0208 	sub.w	r2, r2, r8
 8012442:	9700      	str	r7, [sp, #0]
 8012444:	2100      	movs	r1, #0
 8012446:	b212      	sxth	r2, r2
 8012448:	f7f3 f99e 	bl	8005788 <_ZN8touchgfx8Drawable11setPositionEssss>
 801244c:	4620      	mov	r0, r4
 801244e:	b002      	add	sp, #8
 8012450:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012454:	f7ff bf35 	b.w	80122c2 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

08012458 <_ZN8touchgfx17AbstractDataGraphC1Es>:
 8012458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801245c:	b085      	sub	sp, #20
 801245e:	4604      	mov	r4, r0
 8012460:	2601      	movs	r6, #1
 8012462:	2500      	movs	r5, #0
 8012464:	9103      	str	r1, [sp, #12]
 8012466:	f7ff fe35 	bl	80120d4 <_ZN8touchgfx9ContainerC1Ev>
 801246a:	4b2c      	ldr	r3, [pc, #176]	@ (801251c <_ZN8touchgfx17AbstractDataGraphC1Es+0xc4>)
 801246c:	f104 0b38 	add.w	fp, r4, #56	@ 0x38
 8012470:	f104 0964 	add.w	r9, r4, #100	@ 0x64
 8012474:	f104 0890 	add.w	r8, r4, #144	@ 0x90
 8012478:	6023      	str	r3, [r4, #0]
 801247a:	23ff      	movs	r3, #255	@ 0xff
 801247c:	4658      	mov	r0, fp
 801247e:	f104 0abc 	add.w	sl, r4, #188	@ 0xbc
 8012482:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8012486:	f104 07e8 	add.w	r7, r4, #232	@ 0xe8
 801248a:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 801248e:	f7ff fe21 	bl	80120d4 <_ZN8touchgfx9ContainerC1Ev>
 8012492:	4648      	mov	r0, r9
 8012494:	f7ff fe1e 	bl	80120d4 <_ZN8touchgfx9ContainerC1Ev>
 8012498:	4640      	mov	r0, r8
 801249a:	f7ff fe1b 	bl	80120d4 <_ZN8touchgfx9ContainerC1Ev>
 801249e:	4650      	mov	r0, sl
 80124a0:	f7ff fe18 	bl	80120d4 <_ZN8touchgfx9ContainerC1Ev>
 80124a4:	4638      	mov	r0, r7
 80124a6:	f7ff fe15 	bl	80120d4 <_ZN8touchgfx9ContainerC1Ev>
 80124aa:	9903      	ldr	r1, [sp, #12]
 80124ac:	4620      	mov	r0, r4
 80124ae:	f8c4 5114 	str.w	r5, [r4, #276]	@ 0x114
 80124b2:	f8a4 111c 	strh.w	r1, [r4, #284]	@ 0x11c
 80124b6:	4659      	mov	r1, fp
 80124b8:	f8c4 5118 	str.w	r5, [r4, #280]	@ 0x118
 80124bc:	f8a4 511e 	strh.w	r5, [r4, #286]	@ 0x11e
 80124c0:	f8a4 5120 	strh.w	r5, [r4, #288]	@ 0x120
 80124c4:	f8c4 5124 	str.w	r5, [r4, #292]	@ 0x124
 80124c8:	f8c4 5128 	str.w	r5, [r4, #296]	@ 0x128
 80124cc:	f8c4 512c 	str.w	r5, [r4, #300]	@ 0x12c
 80124d0:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 80124d4:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 80124d8:	f8c4 5138 	str.w	r5, [r4, #312]	@ 0x138
 80124dc:	f7fd fca4 	bl	800fe28 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80124e0:	4651      	mov	r1, sl
 80124e2:	4620      	mov	r0, r4
 80124e4:	f7fd fca0 	bl	800fe28 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80124e8:	4649      	mov	r1, r9
 80124ea:	4620      	mov	r0, r4
 80124ec:	f7fd fc9c 	bl	800fe28 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80124f0:	4641      	mov	r1, r8
 80124f2:	4620      	mov	r0, r4
 80124f4:	f7fd fc98 	bl	800fe28 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80124f8:	4639      	mov	r1, r7
 80124fa:	4620      	mov	r0, r4
 80124fc:	f7fd fc94 	bl	800fe28 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8012500:	4620      	mov	r0, r4
 8012502:	9500      	str	r5, [sp, #0]
 8012504:	462b      	mov	r3, r5
 8012506:	462a      	mov	r2, r5
 8012508:	4629      	mov	r1, r5
 801250a:	f7ff ff57 	bl	80123bc <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
 801250e:	4620      	mov	r0, r4
 8012510:	f884 6024 	strb.w	r6, [r4, #36]	@ 0x24
 8012514:	b005      	add	sp, #20
 8012516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801251a:	bf00      	nop
 801251c:	0802aa6c 	.word	0x0802aa6c

08012520 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>:
 8012520:	4291      	cmp	r1, r2
 8012522:	4613      	mov	r3, r2
 8012524:	d003      	beq.n	801252e <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii+0xe>
 8012526:	460a      	mov	r2, r1
 8012528:	4619      	mov	r1, r3
 801252a:	f004 bfd3 	b.w	80174d4 <_ZN8touchgfx6muldivElll>
 801252e:	4770      	bx	lr

08012530 <_ZN8touchgfx16DynamicDataGraph9setScaleXEib>:
 8012530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012534:	6803      	ldr	r3, [r0, #0]
 8012536:	460d      	mov	r5, r1
 8012538:	4604      	mov	r4, r0
 801253a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801253e:	4798      	blx	r3
 8012540:	42a8      	cmp	r0, r5
 8012542:	4606      	mov	r6, r0
 8012544:	d024      	beq.n	8012590 <_ZN8touchgfx16DynamicDataGraph9setScaleXEib+0x60>
 8012546:	6823      	ldr	r3, [r4, #0]
 8012548:	4601      	mov	r1, r0
 801254a:	462a      	mov	r2, r5
 801254c:	f8d4 012c 	ldr.w	r0, [r4, #300]	@ 0x12c
 8012550:	f8d3 70a4 	ldr.w	r7, [r3, #164]	@ 0xa4
 8012554:	f7ff ffe4 	bl	8012520 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 8012558:	4680      	mov	r8, r0
 801255a:	462a      	mov	r2, r5
 801255c:	4631      	mov	r1, r6
 801255e:	f8d4 0130 	ldr.w	r0, [r4, #304]	@ 0x130
 8012562:	f7ff ffdd 	bl	8012520 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 8012566:	4641      	mov	r1, r8
 8012568:	4602      	mov	r2, r0
 801256a:	4620      	mov	r0, r4
 801256c:	47b8      	blx	r7
 801256e:	462a      	mov	r2, r5
 8012570:	4631      	mov	r1, r6
 8012572:	f8d4 013c 	ldr.w	r0, [r4, #316]	@ 0x13c
 8012576:	f7ff ffd3 	bl	8012520 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 801257a:	462a      	mov	r2, r5
 801257c:	f8c4 013c 	str.w	r0, [r4, #316]	@ 0x13c
 8012580:	4631      	mov	r1, r6
 8012582:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
 8012586:	f7ff ffcb 	bl	8012520 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 801258a:	6325      	str	r5, [r4, #48]	@ 0x30
 801258c:	f8c4 0140 	str.w	r0, [r4, #320]	@ 0x140
 8012590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012594 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib>:
 8012594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012598:	4604      	mov	r4, r0
 801259a:	460f      	mov	r7, r1
 801259c:	b1b2      	cbz	r2, 80125cc <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x38>
 801259e:	6803      	ldr	r3, [r0, #0]
 80125a0:	2600      	movs	r6, #0
 80125a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80125a6:	4798      	blx	r3
 80125a8:	4681      	mov	r9, r0
 80125aa:	b235      	sxth	r5, r6
 80125ac:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 80125b0:	3601      	adds	r6, #1
 80125b2:	42ab      	cmp	r3, r5
 80125b4:	dd0a      	ble.n	80125cc <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x38>
 80125b6:	f8d4 8144 	ldr.w	r8, [r4, #324]	@ 0x144
 80125ba:	463a      	mov	r2, r7
 80125bc:	4649      	mov	r1, r9
 80125be:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]
 80125c2:	f7ff ffad 	bl	8012520 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 80125c6:	f848 0025 	str.w	r0, [r8, r5, lsl #2]
 80125ca:	e7ee      	b.n	80125aa <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x16>
 80125cc:	6367      	str	r7, [r4, #52]	@ 0x34
 80125ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080125d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>:
 80125d2:	b570      	push	{r4, r5, r6, lr}
 80125d4:	6803      	ldr	r3, [r0, #0]
 80125d6:	4604      	mov	r4, r0
 80125d8:	460d      	mov	r5, r1
 80125da:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 80125de:	4798      	blx	r3
 80125e0:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
 80125e4:	4629      	mov	r1, r5
 80125e6:	4620      	mov	r0, r4
 80125e8:	3301      	adds	r3, #1
 80125ea:	f8c4 3148 	str.w	r3, [r4, #328]	@ 0x148
 80125ee:	6823      	ldr	r3, [r4, #0]
 80125f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80125f4:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 80125f8:	4718      	bx	r3

080125fa <_ZN8touchgfx16GraphElementLineD1Ev>:
 80125fa:	4770      	bx	lr

080125fc <_ZN8touchgfx16GraphElementLineD0Ev>:
 80125fc:	b510      	push	{r4, lr}
 80125fe:	4604      	mov	r4, r0
 8012600:	2130      	movs	r1, #48	@ 0x30
 8012602:	f013 fa24 	bl	8025a4e <_ZdlPvj>
 8012606:	4620      	mov	r0, r4
 8012608:	bd10      	pop	{r4, pc}

0801260a <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801260a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801260c:	4604      	mov	r4, r0
 801260e:	4608      	mov	r0, r1
 8012610:	460d      	mov	r5, r1
 8012612:	f7fd fdd0 	bl	80101b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012616:	b978      	cbnz	r0, 8012638 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8012618:	4620      	mov	r0, r4
 801261a:	f7fd fdcc 	bl	80101b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801261e:	f9b5 6000 	ldrsh.w	r6, [r5]
 8012622:	b150      	cbz	r0, 801263a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8012624:	8026      	strh	r6, [r4, #0]
 8012626:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801262a:	8063      	strh	r3, [r4, #2]
 801262c:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8012630:	80a3      	strh	r3, [r4, #4]
 8012632:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8012636:	80e3      	strh	r3, [r4, #6]
 8012638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801263a:	f9b4 1000 	ldrsh.w	r1, [r4]
 801263e:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8012642:	42b1      	cmp	r1, r6
 8012644:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8012648:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801264c:	460f      	mov	r7, r1
 801264e:	88ed      	ldrh	r5, [r5, #6]
 8012650:	bfa8      	it	ge
 8012652:	4637      	movge	r7, r6
 8012654:	4293      	cmp	r3, r2
 8012656:	4618      	mov	r0, r3
 8012658:	4466      	add	r6, ip
 801265a:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801265e:	bfa8      	it	ge
 8012660:	4610      	movge	r0, r2
 8012662:	442a      	add	r2, r5
 8012664:	88e5      	ldrh	r5, [r4, #6]
 8012666:	4461      	add	r1, ip
 8012668:	b236      	sxth	r6, r6
 801266a:	8027      	strh	r7, [r4, #0]
 801266c:	442b      	add	r3, r5
 801266e:	b209      	sxth	r1, r1
 8012670:	b212      	sxth	r2, r2
 8012672:	8060      	strh	r0, [r4, #2]
 8012674:	b21b      	sxth	r3, r3
 8012676:	428e      	cmp	r6, r1
 8012678:	bfac      	ite	ge
 801267a:	ebc7 0106 	rsbge	r1, r7, r6
 801267e:	ebc7 0101 	rsblt	r1, r7, r1
 8012682:	429a      	cmp	r2, r3
 8012684:	bfac      	ite	ge
 8012686:	ebc0 0202 	rsbge	r2, r0, r2
 801268a:	ebc0 0203 	rsblt	r2, r0, r3
 801268e:	80a1      	strh	r1, [r4, #4]
 8012690:	80e2      	strh	r2, [r4, #6]
 8012692:	e7d1      	b.n	8012638 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>

08012694 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE>:
 8012694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012698:	6803      	ldr	r3, [r0, #0]
 801269a:	b093      	sub	sp, #76	@ 0x4c
 801269c:	6945      	ldr	r5, [r0, #20]
 801269e:	4604      	mov	r4, r0
 80126a0:	460f      	mov	r7, r1
 80126a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80126a4:	2d00      	cmp	r5, #0
 80126a6:	f000 81ad 	beq.w	8012a04 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x370>
 80126aa:	696d      	ldr	r5, [r5, #20]
 80126ac:	4798      	blx	r3
 80126ae:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d077      	beq.n	80127a6 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 80126b6:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 80126ba:	fb13 f000 	smulbb	r0, r3, r0
 80126be:	b283      	uxth	r3, r0
 80126c0:	1c58      	adds	r0, r3, #1
 80126c2:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80126c6:	1200      	asrs	r0, r0, #8
 80126c8:	d06d      	beq.n	80127a6 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 80126ca:	b2c3      	uxtb	r3, r0
 80126cc:	f10d 0840 	add.w	r8, sp, #64	@ 0x40
 80126d0:	462a      	mov	r2, r5
 80126d2:	4621      	mov	r1, r4
 80126d4:	9308      	str	r3, [sp, #32]
 80126d6:	4640      	mov	r0, r8
 80126d8:	6823      	ldr	r3, [r4, #0]
 80126da:	ae0e      	add	r6, sp, #56	@ 0x38
 80126dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80126e0:	4798      	blx	r3
 80126e2:	e898 0003 	ldmia.w	r8, {r0, r1}
 80126e6:	e886 0003 	stmia.w	r6, {r0, r1}
 80126ea:	4639      	mov	r1, r7
 80126ec:	4630      	mov	r0, r6
 80126ee:	f7fd fd1f 	bl	8010130 <_ZN8touchgfx4RectaNERKS0_>
 80126f2:	6823      	ldr	r3, [r4, #0]
 80126f4:	4629      	mov	r1, r5
 80126f6:	4620      	mov	r0, r4
 80126f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80126fc:	4798      	blx	r3
 80126fe:	6823      	ldr	r3, [r4, #0]
 8012700:	4607      	mov	r7, r0
 8012702:	4629      	mov	r1, r5
 8012704:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012708:	4620      	mov	r0, r4
 801270a:	4798      	blx	r3
 801270c:	4681      	mov	r9, r0
 801270e:	f894 0038 	ldrb.w	r0, [r4, #56]	@ 0x38
 8012712:	4629      	mov	r1, r5
 8012714:	0103      	lsls	r3, r0, #4
 8012716:	4620      	mov	r0, r4
 8012718:	9309      	str	r3, [sp, #36]	@ 0x24
 801271a:	6823      	ldr	r3, [r4, #0]
 801271c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8012720:	4798      	blx	r3
 8012722:	4629      	mov	r1, r5
 8012724:	b203      	sxth	r3, r0
 8012726:	4620      	mov	r0, r4
 8012728:	9306      	str	r3, [sp, #24]
 801272a:	6823      	ldr	r3, [r4, #0]
 801272c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012730:	4798      	blx	r3
 8012732:	2f00      	cmp	r7, #0
 8012734:	b203      	sxth	r3, r0
 8012736:	9307      	str	r3, [sp, #28]
 8012738:	d138      	bne.n	80127ac <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x118>
 801273a:	f1b9 0f00 	cmp.w	r9, #0
 801273e:	d132      	bne.n	80127a6 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8012740:	6823      	ldr	r3, [r4, #0]
 8012742:	464a      	mov	r2, r9
 8012744:	4629      	mov	r1, r5
 8012746:	4620      	mov	r0, r4
 8012748:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801274c:	4798      	blx	r3
 801274e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012750:	1ac0      	subs	r0, r0, r3
 8012752:	9010      	str	r0, [sp, #64]	@ 0x40
 8012754:	4640      	mov	r0, r8
 8012756:	f7ff fcd7 	bl	8012108 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801275a:	6823      	ldr	r3, [r4, #0]
 801275c:	4607      	mov	r7, r0
 801275e:	4629      	mov	r1, r5
 8012760:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8012764:	4620      	mov	r0, r4
 8012766:	4798      	blx	r3
 8012768:	1a38      	subs	r0, r7, r0
 801276a:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801276e:	fa0f f880 	sxth.w	r8, r0
 8012772:	eb13 0f08 	cmn.w	r3, r8
 8012776:	d416      	bmi.n	80127a6 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8012778:	6823      	ldr	r3, [r4, #0]
 801277a:	4629      	mov	r1, r5
 801277c:	4620      	mov	r0, r4
 801277e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8012782:	4798      	blx	r3
 8012784:	4580      	cmp	r8, r0
 8012786:	da0e      	bge.n	80127a6 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8012788:	9a08      	ldr	r2, [sp, #32]
 801278a:	b23f      	sxth	r7, r7
 801278c:	6823      	ldr	r3, [r4, #0]
 801278e:	4631      	mov	r1, r6
 8012790:	9202      	str	r2, [sp, #8]
 8012792:	4620      	mov	r0, r4
 8012794:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 8012798:	9700      	str	r7, [sp, #0]
 801279a:	9201      	str	r2, [sp, #4]
 801279c:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 80127a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80127a4:	47a8      	blx	r5
 80127a6:	b013      	add	sp, #76	@ 0x4c
 80127a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127ac:	ddfb      	ble.n	80127a6 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 80127ae:	6823      	ldr	r3, [r4, #0]
 80127b0:	4629      	mov	r1, r5
 80127b2:	4620      	mov	r0, r4
 80127b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80127b8:	4798      	blx	r3
 80127ba:	6823      	ldr	r3, [r4, #0]
 80127bc:	4683      	mov	fp, r0
 80127be:	4629      	mov	r1, r5
 80127c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80127c4:	4620      	mov	r0, r4
 80127c6:	4798      	blx	r3
 80127c8:	eba0 030b 	sub.w	r3, r0, fp
 80127cc:	4680      	mov	r8, r0
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	bfb8      	it	lt
 80127d2:	425b      	neglt	r3, r3
 80127d4:	fb93 f3f7 	sdiv	r3, r3, r7
 80127d8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80127dc:	dce3      	bgt.n	80127a6 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 80127de:	6823      	ldr	r3, [r4, #0]
 80127e0:	465a      	mov	r2, fp
 80127e2:	4629      	mov	r1, r5
 80127e4:	4620      	mov	r0, r4
 80127e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80127ea:	4798      	blx	r3
 80127ec:	6823      	ldr	r3, [r4, #0]
 80127ee:	4606      	mov	r6, r0
 80127f0:	4642      	mov	r2, r8
 80127f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80127f6:	4629      	mov	r1, r5
 80127f8:	4620      	mov	r0, r4
 80127fa:	4798      	blx	r3
 80127fc:	42b0      	cmp	r0, r6
 80127fe:	bfa2      	ittt	ge
 8012800:	4643      	movge	r3, r8
 8012802:	46d8      	movge	r8, fp
 8012804:	469b      	movge	fp, r3
 8012806:	fb98 f6f7 	sdiv	r6, r8, r7
 801280a:	fb9b f2f7 	sdiv	r2, fp, r7
 801280e:	45d8      	cmp	r8, fp
 8012810:	bfac      	ite	ge
 8012812:	f04f 33ff 	movge.w	r3, #4294967295
 8012816:	2301      	movlt	r3, #1
 8012818:	1af6      	subs	r6, r6, r3
 801281a:	441a      	add	r2, r3
 801281c:	4296      	cmp	r6, r2
 801281e:	bfac      	ite	ge
 8012820:	f04f 3aff 	movge.w	sl, #4294967295
 8012824:	f04f 0a01 	movlt.w	sl, #1
 8012828:	f1b9 0f00 	cmp.w	r9, #0
 801282c:	d13e      	bne.n	80128ac <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x218>
 801282e:	fb07 fb0a 	mul.w	fp, r7, sl
 8012832:	eb0a 0802 	add.w	r8, sl, r2
 8012836:	4377      	muls	r7, r6
 8012838:	45b0      	cmp	r8, r6
 801283a:	d0b4      	beq.n	80127a6 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 801283c:	6823      	ldr	r3, [r4, #0]
 801283e:	463a      	mov	r2, r7
 8012840:	4629      	mov	r1, r5
 8012842:	4620      	mov	r0, r4
 8012844:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8012848:	4798      	blx	r3
 801284a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801284c:	1ac0      	subs	r0, r0, r3
 801284e:	9010      	str	r0, [sp, #64]	@ 0x40
 8012850:	a810      	add	r0, sp, #64	@ 0x40
 8012852:	f7ff fc59 	bl	8012108 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8012856:	6823      	ldr	r3, [r4, #0]
 8012858:	4681      	mov	r9, r0
 801285a:	4629      	mov	r1, r5
 801285c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8012860:	4620      	mov	r0, r4
 8012862:	4798      	blx	r3
 8012864:	eba9 0000 	sub.w	r0, r9, r0
 8012868:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 801286c:	b203      	sxth	r3, r0
 801286e:	42da      	cmn	r2, r3
 8012870:	9304      	str	r3, [sp, #16]
 8012872:	d418      	bmi.n	80128a6 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x212>
 8012874:	6822      	ldr	r2, [r4, #0]
 8012876:	4629      	mov	r1, r5
 8012878:	4620      	mov	r0, r4
 801287a:	f8d2 20a8 	ldr.w	r2, [r2, #168]	@ 0xa8
 801287e:	4790      	blx	r2
 8012880:	9b04      	ldr	r3, [sp, #16]
 8012882:	4283      	cmp	r3, r0
 8012884:	da0f      	bge.n	80128a6 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x212>
 8012886:	9b08      	ldr	r3, [sp, #32]
 8012888:	a90e      	add	r1, sp, #56	@ 0x38
 801288a:	6822      	ldr	r2, [r4, #0]
 801288c:	4620      	mov	r0, r4
 801288e:	9302      	str	r3, [sp, #8]
 8012890:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8012894:	9301      	str	r3, [sp, #4]
 8012896:	fa0f f389 	sxth.w	r3, r9
 801289a:	9300      	str	r3, [sp, #0]
 801289c:	f8d2 9088 	ldr.w	r9, [r2, #136]	@ 0x88
 80128a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80128a4:	47c8      	blx	r9
 80128a6:	4456      	add	r6, sl
 80128a8:	445f      	add	r7, fp
 80128aa:	e7c5      	b.n	8012838 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x1a4>
 80128ac:	fb98 f8f9 	sdiv	r8, r8, r9
 80128b0:	eba8 0203 	sub.w	r2, r8, r3
 80128b4:	4629      	mov	r1, r5
 80128b6:	4620      	mov	r0, r4
 80128b8:	9204      	str	r2, [sp, #16]
 80128ba:	fb9b f8f9 	sdiv	r8, fp, r9
 80128be:	4498      	add	r8, r3
 80128c0:	f10d 0b48 	add.w	fp, sp, #72	@ 0x48
 80128c4:	4542      	cmp	r2, r8
 80128c6:	bfac      	ite	ge
 80128c8:	f04f 33ff 	movge.w	r3, #4294967295
 80128cc:	2301      	movlt	r3, #1
 80128ce:	fb02 f209 	mul.w	r2, r2, r9
 80128d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80128d4:	6823      	ldr	r3, [r4, #0]
 80128d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80128da:	4798      	blx	r3
 80128dc:	f84b 0d08 	str.w	r0, [fp, #-8]!
 80128e0:	4658      	mov	r0, fp
 80128e2:	f7ff fc11 	bl	8012108 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80128e6:	fb06 f207 	mul.w	r2, r6, r7
 80128ea:	b203      	sxth	r3, r0
 80128ec:	4629      	mov	r1, r5
 80128ee:	4620      	mov	r0, r4
 80128f0:	9305      	str	r3, [sp, #20]
 80128f2:	6823      	ldr	r3, [r4, #0]
 80128f4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80128f8:	4798      	blx	r3
 80128fa:	9010      	str	r0, [sp, #64]	@ 0x40
 80128fc:	4658      	mov	r0, fp
 80128fe:	f7ff fc03 	bl	8012108 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8012902:	fb07 f20a 	mul.w	r2, r7, sl
 8012906:	b203      	sxth	r3, r0
 8012908:	920b      	str	r2, [sp, #44]	@ 0x2c
 801290a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801290c:	4442      	add	r2, r8
 801290e:	920c      	str	r2, [sp, #48]	@ 0x30
 8012910:	9a05      	ldr	r2, [sp, #20]
 8012912:	429a      	cmp	r2, r3
 8012914:	dc16      	bgt.n	8012944 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x2b0>
 8012916:	eb06 080a 	add.w	r8, r6, sl
 801291a:	fb07 f808 	mul.w	r8, r7, r8
 801291e:	9a05      	ldr	r2, [sp, #20]
 8012920:	429a      	cmp	r2, r3
 8012922:	db54      	blt.n	80129ce <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x33a>
 8012924:	6823      	ldr	r3, [r4, #0]
 8012926:	4642      	mov	r2, r8
 8012928:	4629      	mov	r1, r5
 801292a:	4620      	mov	r0, r4
 801292c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8012930:	4456      	add	r6, sl
 8012932:	4798      	blx	r3
 8012934:	9010      	str	r0, [sp, #64]	@ 0x40
 8012936:	4658      	mov	r0, fp
 8012938:	f7ff fbe6 	bl	8012108 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801293c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801293e:	b203      	sxth	r3, r0
 8012940:	4490      	add	r8, r2
 8012942:	e7ec      	b.n	801291e <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x28a>
 8012944:	6823      	ldr	r3, [r4, #0]
 8012946:	fb07 f206 	mul.w	r2, r7, r6
 801294a:	4629      	mov	r1, r5
 801294c:	4620      	mov	r0, r4
 801294e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8012952:	4798      	blx	r3
 8012954:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012956:	1ac0      	subs	r0, r0, r3
 8012958:	9010      	str	r0, [sp, #64]	@ 0x40
 801295a:	4658      	mov	r0, fp
 801295c:	f7ff fbd4 	bl	8012108 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8012960:	6823      	ldr	r3, [r4, #0]
 8012962:	4680      	mov	r8, r0
 8012964:	4629      	mov	r1, r5
 8012966:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801296a:	4620      	mov	r0, r4
 801296c:	4798      	blx	r3
 801296e:	eba8 0000 	sub.w	r0, r8, r0
 8012972:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 8012976:	b203      	sxth	r3, r0
 8012978:	42da      	cmn	r2, r3
 801297a:	930d      	str	r3, [sp, #52]	@ 0x34
 801297c:	d418      	bmi.n	80129b0 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x31c>
 801297e:	6822      	ldr	r2, [r4, #0]
 8012980:	4629      	mov	r1, r5
 8012982:	4620      	mov	r0, r4
 8012984:	f8d2 20a8 	ldr.w	r2, [r2, #168]	@ 0xa8
 8012988:	4790      	blx	r2
 801298a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801298c:	4283      	cmp	r3, r0
 801298e:	da0f      	bge.n	80129b0 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x31c>
 8012990:	9b08      	ldr	r3, [sp, #32]
 8012992:	a90e      	add	r1, sp, #56	@ 0x38
 8012994:	6822      	ldr	r2, [r4, #0]
 8012996:	4620      	mov	r0, r4
 8012998:	9302      	str	r3, [sp, #8]
 801299a:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801299e:	9301      	str	r3, [sp, #4]
 80129a0:	fa0f f388 	sxth.w	r3, r8
 80129a4:	9300      	str	r3, [sp, #0]
 80129a6:	f8d2 8088 	ldr.w	r8, [r2, #136]	@ 0x88
 80129aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80129ae:	47c0      	blx	r8
 80129b0:	6823      	ldr	r3, [r4, #0]
 80129b2:	4456      	add	r6, sl
 80129b4:	4629      	mov	r1, r5
 80129b6:	4620      	mov	r0, r4
 80129b8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80129bc:	fb06 f207 	mul.w	r2, r6, r7
 80129c0:	4798      	blx	r3
 80129c2:	9010      	str	r0, [sp, #64]	@ 0x40
 80129c4:	4658      	mov	r0, fp
 80129c6:	f7ff fb9f 	bl	8012108 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80129ca:	b203      	sxth	r3, r0
 80129cc:	e7a0      	b.n	8012910 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x27c>
 80129ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80129d0:	930d      	str	r3, [sp, #52]	@ 0x34
 80129d2:	9b04      	ldr	r3, [sp, #16]
 80129d4:	4413      	add	r3, r2
 80129d6:	9304      	str	r3, [sp, #16]
 80129d8:	9a04      	ldr	r2, [sp, #16]
 80129da:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80129dc:	4293      	cmp	r3, r2
 80129de:	f43f aee2 	beq.w	80127a6 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 80129e2:	9b04      	ldr	r3, [sp, #16]
 80129e4:	4629      	mov	r1, r5
 80129e6:	6822      	ldr	r2, [r4, #0]
 80129e8:	4620      	mov	r0, r4
 80129ea:	f8d2 80ac 	ldr.w	r8, [r2, #172]	@ 0xac
 80129ee:	fb03 f209 	mul.w	r2, r3, r9
 80129f2:	47c0      	blx	r8
 80129f4:	9010      	str	r0, [sp, #64]	@ 0x40
 80129f6:	4658      	mov	r0, fp
 80129f8:	f7ff fb86 	bl	8012108 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80129fc:	b203      	sxth	r3, r0
 80129fe:	9305      	str	r3, [sp, #20]
 8012a00:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012a02:	e785      	b.n	8012910 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x27c>
 8012a04:	4798      	blx	r3
 8012a06:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8012a0a:	deff      	udf	#255	@ 0xff

08012a0c <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>:
 8012a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a0e:	9906      	ldr	r1, [sp, #24]
 8012a10:	4606      	mov	r6, r0
 8012a12:	461c      	mov	r4, r3
 8012a14:	2020      	movs	r0, #32
 8012a16:	4291      	cmp	r1, r2
 8012a18:	bfbc      	itt	lt
 8012a1a:	9206      	strlt	r2, [sp, #24]
 8012a1c:	460a      	movlt	r2, r1
 8012a1e:	9907      	ldr	r1, [sp, #28]
 8012a20:	428b      	cmp	r3, r1
 8012a22:	bfc4      	itt	gt
 8012a24:	460c      	movgt	r4, r1
 8012a26:	9307      	strgt	r3, [sp, #28]
 8012a28:	fb92 f5f0 	sdiv	r5, r2, r0
 8012a2c:	fb94 f4f0 	sdiv	r4, r4, r0
 8012a30:	a806      	add	r0, sp, #24
 8012a32:	f7fe fdfe 	bl	8011632 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8012a36:	4607      	mov	r7, r0
 8012a38:	a807      	add	r0, sp, #28
 8012a3a:	f7fe fdfa 	bl	8011632 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8012a3e:	1b7a      	subs	r2, r7, r5
 8012a40:	1b00      	subs	r0, r0, r4
 8012a42:	8035      	strh	r5, [r6, #0]
 8012a44:	8074      	strh	r4, [r6, #2]
 8012a46:	80f0      	strh	r0, [r6, #6]
 8012a48:	4630      	mov	r0, r6
 8012a4a:	80b2      	strh	r2, [r6, #4]
 8012a4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012a4e <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>:
 8012a4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012a50:	9c08      	ldr	r4, [sp, #32]
 8012a52:	2602      	movs	r6, #2
 8012a54:	4605      	mov	r5, r0
 8012a56:	3401      	adds	r4, #1
 8012a58:	fb94 f4f6 	sdiv	r4, r4, r6
 8012a5c:	18a6      	adds	r6, r4, r2
 8012a5e:	191f      	adds	r7, r3, r4
 8012a60:	1b12      	subs	r2, r2, r4
 8012a62:	1b1b      	subs	r3, r3, r4
 8012a64:	e9cd 6700 	strd	r6, r7, [sp]
 8012a68:	f7ff ffd0 	bl	8012a0c <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>
 8012a6c:	4628      	mov	r0, r5
 8012a6e:	b003      	add	sp, #12
 8012a70:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012a72 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs>:
 8012a72:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012a76:	6943      	ldr	r3, [r0, #20]
 8012a78:	b087      	sub	sp, #28
 8012a7a:	4606      	mov	r6, r0
 8012a7c:	460d      	mov	r5, r1
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d072      	beq.n	8012b68 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0xf6>
 8012a82:	695c      	ldr	r4, [r3, #20]
 8012a84:	f890 702c 	ldrb.w	r7, [r0, #44]	@ 0x2c
 8012a88:	6823      	ldr	r3, [r4, #0]
 8012a8a:	4620      	mov	r0, r4
 8012a8c:	017f      	lsls	r7, r7, #5
 8012a8e:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8012a92:	4798      	blx	r3
 8012a94:	6823      	ldr	r3, [r4, #0]
 8012a96:	4680      	mov	r8, r0
 8012a98:	4629      	mov	r1, r5
 8012a9a:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8012a9e:	4620      	mov	r0, r4
 8012aa0:	4798      	blx	r3
 8012aa2:	9700      	str	r7, [sp, #0]
 8012aa4:	4603      	mov	r3, r0
 8012aa6:	4642      	mov	r2, r8
 8012aa8:	4631      	mov	r1, r6
 8012aaa:	a802      	add	r0, sp, #8
 8012aac:	f7ff ffcf 	bl	8012a4e <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 8012ab0:	2d00      	cmp	r5, #0
 8012ab2:	dd1b      	ble.n	8012aec <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0x7a>
 8012ab4:	f105 38ff 	add.w	r8, r5, #4294967295
 8012ab8:	6823      	ldr	r3, [r4, #0]
 8012aba:	4620      	mov	r0, r4
 8012abc:	fa0f f888 	sxth.w	r8, r8
 8012ac0:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8012ac4:	4641      	mov	r1, r8
 8012ac6:	4798      	blx	r3
 8012ac8:	6823      	ldr	r3, [r4, #0]
 8012aca:	4681      	mov	r9, r0
 8012acc:	4641      	mov	r1, r8
 8012ace:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8012ad2:	4620      	mov	r0, r4
 8012ad4:	4798      	blx	r3
 8012ad6:	4631      	mov	r1, r6
 8012ad8:	4603      	mov	r3, r0
 8012ada:	9700      	str	r7, [sp, #0]
 8012adc:	a804      	add	r0, sp, #16
 8012ade:	464a      	mov	r2, r9
 8012ae0:	f7ff ffb5 	bl	8012a4e <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 8012ae4:	a904      	add	r1, sp, #16
 8012ae6:	a802      	add	r0, sp, #8
 8012ae8:	f7ff fd8f 	bl	801260a <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8012aec:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 8012af0:	3b01      	subs	r3, #1
 8012af2:	429d      	cmp	r5, r3
 8012af4:	da19      	bge.n	8012b2a <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0xb8>
 8012af6:	3501      	adds	r5, #1
 8012af8:	6823      	ldr	r3, [r4, #0]
 8012afa:	4620      	mov	r0, r4
 8012afc:	b22d      	sxth	r5, r5
 8012afe:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8012b02:	4629      	mov	r1, r5
 8012b04:	4798      	blx	r3
 8012b06:	6823      	ldr	r3, [r4, #0]
 8012b08:	4680      	mov	r8, r0
 8012b0a:	4629      	mov	r1, r5
 8012b0c:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8012b10:	4620      	mov	r0, r4
 8012b12:	4798      	blx	r3
 8012b14:	4631      	mov	r1, r6
 8012b16:	4603      	mov	r3, r0
 8012b18:	9700      	str	r7, [sp, #0]
 8012b1a:	a804      	add	r0, sp, #16
 8012b1c:	4642      	mov	r2, r8
 8012b1e:	f7ff ff96 	bl	8012a4e <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 8012b22:	a904      	add	r1, sp, #16
 8012b24:	a802      	add	r0, sp, #8
 8012b26:	f7ff fd70 	bl	801260a <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8012b2a:	f9b4 1114 	ldrsh.w	r1, [r4, #276]	@ 0x114
 8012b2e:	f8b4 311a 	ldrh.w	r3, [r4, #282]	@ 0x11a
 8012b32:	f9b4 0040 	ldrsh.w	r0, [r4, #64]	@ 0x40
 8012b36:	18ca      	adds	r2, r1, r3
 8012b38:	f8b4 3042 	ldrh.w	r3, [r4, #66]	@ 0x42
 8012b3c:	f8ad 1012 	strh.w	r1, [sp, #18]
 8012b40:	a904      	add	r1, sp, #16
 8012b42:	1a9b      	subs	r3, r3, r2
 8012b44:	2200      	movs	r2, #0
 8012b46:	f8ad 0014 	strh.w	r0, [sp, #20]
 8012b4a:	a802      	add	r0, sp, #8
 8012b4c:	f8ad 2010 	strh.w	r2, [sp, #16]
 8012b50:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012b54:	f7fd faec 	bl	8010130 <_ZN8touchgfx4RectaNERKS0_>
 8012b58:	6833      	ldr	r3, [r6, #0]
 8012b5a:	a902      	add	r1, sp, #8
 8012b5c:	4630      	mov	r0, r6
 8012b5e:	691b      	ldr	r3, [r3, #16]
 8012b60:	4798      	blx	r3
 8012b62:	b007      	add	sp, #28
 8012b64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012b68:	681b      	ldr	r3, [r3, #0]
 8012b6a:	deff      	udf	#255	@ 0xff

08012b6c <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE>:
 8012b6c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	da05      	bge.n	8012b80 <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE+0x14>
 8012b74:	b29b      	uxth	r3, r3
 8012b76:	880a      	ldrh	r2, [r1, #0]
 8012b78:	441a      	add	r2, r3
 8012b7a:	425b      	negs	r3, r3
 8012b7c:	800a      	strh	r2, [r1, #0]
 8012b7e:	808b      	strh	r3, [r1, #4]
 8012b80:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	da05      	bge.n	8012b94 <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE+0x28>
 8012b88:	b29b      	uxth	r3, r3
 8012b8a:	884a      	ldrh	r2, [r1, #2]
 8012b8c:	441a      	add	r2, r3
 8012b8e:	425b      	negs	r3, r3
 8012b90:	804a      	strh	r2, [r1, #2]
 8012b92:	80cb      	strh	r3, [r1, #6]
 8012b94:	4770      	bx	lr

08012b96 <_ZNK8touchgfx20GraphElementGridBase8drawLineERKNS_4RectEssssh>:
 8012b96:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8012b98:	4604      	mov	r4, r0
 8012b9a:	460d      	mov	r5, r1
 8012b9c:	6801      	ldr	r1, [r0, #0]
 8012b9e:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	@ 0x24
 8012ba2:	9001      	str	r0, [sp, #4]
 8012ba4:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 8012ba8:	9000      	str	r0, [sp, #0]
 8012baa:	a802      	add	r0, sp, #8
 8012bac:	f8d1 6090 	ldr.w	r6, [r1, #144]	@ 0x90
 8012bb0:	4621      	mov	r1, r4
 8012bb2:	47b0      	blx	r6
 8012bb4:	a902      	add	r1, sp, #8
 8012bb6:	4620      	mov	r0, r4
 8012bb8:	f7ff ffd8 	bl	8012b6c <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE>
 8012bbc:	a802      	add	r0, sp, #8
 8012bbe:	4629      	mov	r1, r5
 8012bc0:	f7fd fab6 	bl	8010130 <_ZN8touchgfx4RectaNERKS0_>
 8012bc4:	a802      	add	r0, sp, #8
 8012bc6:	f7fd faf6 	bl	80101b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012bca:	b968      	cbnz	r0, 8012be8 <_ZNK8touchgfx20GraphElementGridBase8drawLineERKNS_4RectEssssh+0x52>
 8012bcc:	6823      	ldr	r3, [r4, #0]
 8012bce:	a902      	add	r1, sp, #8
 8012bd0:	4620      	mov	r0, r4
 8012bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012bd4:	4798      	blx	r3
 8012bd6:	f7fd fd7b 	bl	80106d0 <_ZN8touchgfx3HAL3lcdEv>
 8012bda:	6803      	ldr	r3, [r0, #0]
 8012bdc:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8012bde:	a902      	add	r1, sp, #8
 8012be0:	6a1d      	ldr	r5, [r3, #32]
 8012be2:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 8012be6:	47a8      	blx	r5
 8012be8:	b004      	add	sp, #16
 8012bea:	bd70      	pop	{r4, r5, r6, pc}

08012bec <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>:
 8012bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bf0:	b08b      	sub	sp, #44	@ 0x2c
 8012bf2:	461e      	mov	r6, r3
 8012bf4:	460f      	mov	r7, r1
 8012bf6:	4615      	mov	r5, r2
 8012bf8:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	@ 0x50
 8012bfc:	429e      	cmp	r6, r3
 8012bfe:	9304      	str	r3, [sp, #16]
 8012c00:	d074      	beq.n	8012cec <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x100>
 8012c02:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8012c06:	4631      	mov	r1, r6
 8012c08:	4610      	mov	r0, r2
 8012c0a:	4634      	mov	r4, r6
 8012c0c:	015b      	lsls	r3, r3, #5
 8012c0e:	9303      	str	r3, [sp, #12]
 8012c10:	6813      	ldr	r3, [r2, #0]
 8012c12:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8012c16:	4798      	blx	r3
 8012c18:	ab0a      	add	r3, sp, #40	@ 0x28
 8012c1a:	f843 0d10 	str.w	r0, [r3, #-16]!
 8012c1e:	4618      	mov	r0, r3
 8012c20:	f7ff fa72 	bl	8012108 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8012c24:	682b      	ldr	r3, [r5, #0]
 8012c26:	4631      	mov	r1, r6
 8012c28:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8012c2c:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8012c30:	4628      	mov	r0, r5
 8012c32:	4798      	blx	r3
 8012c34:	ab0a      	add	r3, sp, #40	@ 0x28
 8012c36:	f843 0d0c 	str.w	r0, [r3, #-12]!
 8012c3a:	4618      	mov	r0, r3
 8012c3c:	f7ff fa64 	bl	8012108 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8012c40:	4641      	mov	r1, r8
 8012c42:	ea4f 1940 	mov.w	r9, r0, lsl #5
 8012c46:	4638      	mov	r0, r7
 8012c48:	464a      	mov	r2, r9
 8012c4a:	f012 fd75 	bl	8025738 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8012c4e:	2301      	movs	r3, #1
 8012c50:	9300      	str	r3, [sp, #0]
 8012c52:	4628      	mov	r0, r5
 8012c54:	9b00      	ldr	r3, [sp, #0]
 8012c56:	441c      	add	r4, r3
 8012c58:	682b      	ldr	r3, [r5, #0]
 8012c5a:	b224      	sxth	r4, r4
 8012c5c:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8012c60:	4621      	mov	r1, r4
 8012c62:	4798      	blx	r3
 8012c64:	9008      	str	r0, [sp, #32]
 8012c66:	a808      	add	r0, sp, #32
 8012c68:	f7ff fa4e 	bl	8012108 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8012c6c:	4621      	mov	r1, r4
 8012c6e:	0143      	lsls	r3, r0, #5
 8012c70:	4628      	mov	r0, r5
 8012c72:	9301      	str	r3, [sp, #4]
 8012c74:	682b      	ldr	r3, [r5, #0]
 8012c76:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8012c7a:	4798      	blx	r3
 8012c7c:	9009      	str	r0, [sp, #36]	@ 0x24
 8012c7e:	a809      	add	r0, sp, #36	@ 0x24
 8012c80:	f7ff fa42 	bl	8012108 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8012c84:	0143      	lsls	r3, r0, #5
 8012c86:	9302      	str	r3, [sp, #8]
 8012c88:	9b01      	ldr	r3, [sp, #4]
 8012c8a:	eba3 0b08 	sub.w	fp, r3, r8
 8012c8e:	9b02      	ldr	r3, [sp, #8]
 8012c90:	eba3 0a09 	sub.w	sl, r3, r9
 8012c94:	4658      	mov	r0, fp
 8012c96:	4651      	mov	r1, sl
 8012c98:	f7fe fe0c 	bl	80118b4 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8012c9c:	b320      	cbz	r0, 8012ce8 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0xfc>
 8012c9e:	4602      	mov	r2, r0
 8012ca0:	4651      	mov	r1, sl
 8012ca2:	9005      	str	r0, [sp, #20]
 8012ca4:	9803      	ldr	r0, [sp, #12]
 8012ca6:	f004 fc15 	bl	80174d4 <_ZN8touchgfx6muldivElll>
 8012caa:	2302      	movs	r3, #2
 8012cac:	4659      	mov	r1, fp
 8012cae:	fb90 faf3 	sdiv	sl, r0, r3
 8012cb2:	9b05      	ldr	r3, [sp, #20]
 8012cb4:	9803      	ldr	r0, [sp, #12]
 8012cb6:	461a      	mov	r2, r3
 8012cb8:	f004 fc0c 	bl	80174d4 <_ZN8touchgfx6muldivElll>
 8012cbc:	2302      	movs	r3, #2
 8012cbe:	eba8 010a 	sub.w	r1, r8, sl
 8012cc2:	fb90 fbf3 	sdiv	fp, r0, r3
 8012cc6:	683b      	ldr	r3, [r7, #0]
 8012cc8:	eb0b 0209 	add.w	r2, fp, r9
 8012ccc:	4638      	mov	r0, r7
 8012cce:	689b      	ldr	r3, [r3, #8]
 8012cd0:	4798      	blx	r3
 8012cd2:	683b      	ldr	r3, [r7, #0]
 8012cd4:	9a02      	ldr	r2, [sp, #8]
 8012cd6:	4638      	mov	r0, r7
 8012cd8:	9901      	ldr	r1, [sp, #4]
 8012cda:	689b      	ldr	r3, [r3, #8]
 8012cdc:	445a      	add	r2, fp
 8012cde:	eba1 010a 	sub.w	r1, r1, sl
 8012ce2:	4798      	blx	r3
 8012ce4:	e9dd 8901 	ldrd	r8, r9, [sp, #4]
 8012ce8:	42a6      	cmp	r6, r4
 8012cea:	db02      	blt.n	8012cf2 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x106>
 8012cec:	b00b      	add	sp, #44	@ 0x2c
 8012cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cf2:	9b00      	ldr	r3, [sp, #0]
 8012cf4:	9a04      	ldr	r2, [sp, #16]
 8012cf6:	42a2      	cmp	r2, r4
 8012cf8:	bf08      	it	eq
 8012cfa:	f04f 33ff 	moveq.w	r3, #4294967295
 8012cfe:	e7a7      	b.n	8012c50 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x64>

08012d00 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE>:
 8012d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d04:	6943      	ldr	r3, [r0, #20]
 8012d06:	b0a2      	sub	sp, #136	@ 0x88
 8012d08:	4606      	mov	r6, r0
 8012d0a:	460f      	mov	r7, r1
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d06c      	beq.n	8012dea <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xea>
 8012d10:	695c      	ldr	r4, [r3, #20]
 8012d12:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 8012d16:	2b01      	cmp	r3, #1
 8012d18:	dc04      	bgt.n	8012d24 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x24>
 8012d1a:	2401      	movs	r4, #1
 8012d1c:	4620      	mov	r0, r4
 8012d1e:	b022      	add	sp, #136	@ 0x88
 8012d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d24:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8012d28:	ad22      	add	r5, sp, #136	@ 0x88
 8012d2a:	011b      	lsls	r3, r3, #4
 8012d2c:	f845 3d70 	str.w	r3, [r5, #-112]!
 8012d30:	4628      	mov	r0, r5
 8012d32:	f7fe fc7e 	bl	8011632 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8012d36:	8839      	ldrh	r1, [r7, #0]
 8012d38:	88ba      	ldrh	r2, [r7, #4]
 8012d3a:	b280      	uxth	r0, r0
 8012d3c:	6823      	ldr	r3, [r4, #0]
 8012d3e:	440a      	add	r2, r1
 8012d40:	1a09      	subs	r1, r1, r0
 8012d42:	4402      	add	r2, r0
 8012d44:	f10d 000e 	add.w	r0, sp, #14
 8012d48:	b209      	sxth	r1, r1
 8012d4a:	9000      	str	r0, [sp, #0]
 8012d4c:	b212      	sxth	r2, r2
 8012d4e:	f8d3 8124 	ldr.w	r8, [r3, #292]	@ 0x124
 8012d52:	4620      	mov	r0, r4
 8012d54:	ab03      	add	r3, sp, #12
 8012d56:	47c0      	blx	r8
 8012d58:	2800      	cmp	r0, #0
 8012d5a:	d0de      	beq.n	8012d1a <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x1a>
 8012d5c:	f9b4 1114 	ldrsh.w	r1, [r4, #276]	@ 0x114
 8012d60:	f8b4 311a 	ldrh.w	r3, [r4, #282]	@ 0x11a
 8012d64:	f9b4 0040 	ldrsh.w	r0, [r4, #64]	@ 0x40
 8012d68:	18ca      	adds	r2, r1, r3
 8012d6a:	f8b4 3042 	ldrh.w	r3, [r4, #66]	@ 0x42
 8012d6e:	f8ad 1012 	strh.w	r1, [sp, #18]
 8012d72:	4639      	mov	r1, r7
 8012d74:	1a9b      	subs	r3, r3, r2
 8012d76:	2200      	movs	r2, #0
 8012d78:	f8ad 0014 	strh.w	r0, [sp, #20]
 8012d7c:	a804      	add	r0, sp, #16
 8012d7e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012d82:	f8ad 2010 	strh.w	r2, [sp, #16]
 8012d86:	f7fd f9d3 	bl	8010130 <_ZN8touchgfx4RectaNERKS0_>
 8012d8a:	aa04      	add	r2, sp, #16
 8012d8c:	4631      	mov	r1, r6
 8012d8e:	4628      	mov	r0, r5
 8012d90:	f012 fb58 	bl	8025444 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 8012d94:	f9b4 7120 	ldrsh.w	r7, [r4, #288]	@ 0x120
 8012d98:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8012d9c:	2f00      	cmp	r7, #0
 8012d9e:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 8012da2:	dd03      	ble.n	8012dac <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xac>
 8012da4:	42bb      	cmp	r3, r7
 8012da6:	da01      	bge.n	8012dac <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xac>
 8012da8:	42ba      	cmp	r2, r7
 8012daa:	da11      	bge.n	8012dd0 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xd0>
 8012dac:	9200      	str	r2, [sp, #0]
 8012dae:	4622      	mov	r2, r4
 8012db0:	4629      	mov	r1, r5
 8012db2:	4630      	mov	r0, r6
 8012db4:	f7ff ff1a 	bl	8012bec <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
 8012db8:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012dbc:	4628      	mov	r0, r5
 8012dbe:	f012 fbfd 	bl	80255bc <_ZN8touchgfx6Canvas6renderEh>
 8012dc2:	4b0b      	ldr	r3, [pc, #44]	@ (8012df0 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xf0>)
 8012dc4:	4604      	mov	r4, r0
 8012dc6:	a80e      	add	r0, sp, #56	@ 0x38
 8012dc8:	9306      	str	r3, [sp, #24]
 8012dca:	f000 fdff 	bl	80139cc <_ZN8touchgfx7OutlineD1Ev>
 8012dce:	e7a5      	b.n	8012d1c <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x1c>
 8012dd0:	1e7a      	subs	r2, r7, #1
 8012dd2:	4629      	mov	r1, r5
 8012dd4:	4630      	mov	r0, r6
 8012dd6:	b212      	sxth	r2, r2
 8012dd8:	9200      	str	r2, [sp, #0]
 8012dda:	4622      	mov	r2, r4
 8012ddc:	f7ff ff06 	bl	8012bec <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
 8012de0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8012de4:	9300      	str	r3, [sp, #0]
 8012de6:	463b      	mov	r3, r7
 8012de8:	e7e1      	b.n	8012dae <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xae>
 8012dea:	f8b3 311e 	ldrh.w	r3, [r3, #286]	@ 0x11e
 8012dee:	deff      	udf	#255	@ 0xff
 8012df0:	0802b2dc 	.word	0x0802b2dc

08012df4 <_ZN8touchgfx15GraphLabelsBase22invalidateGraphPointAtEs>:
 8012df4:	4770      	bx	lr

08012df6 <_ZNK8touchgfx15GraphLabelsBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE>:
 8012df6:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 8012df8:	b118      	cbz	r0, 8012e02 <_ZNK8touchgfx15GraphLabelsBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE+0xc>
 8012dfa:	6803      	ldr	r3, [r0, #0]
 8012dfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012e00:	4718      	bx	r3
 8012e02:	4770      	bx	lr

08012e04 <_ZNK8touchgfx12GraphLabelsY22getGraphRangeMinScaledEPKNS_17AbstractDataGraphE>:
 8012e04:	680b      	ldr	r3, [r1, #0]
 8012e06:	4608      	mov	r0, r1
 8012e08:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8012e0c:	4718      	bx	r3

08012e0e <_ZNK8touchgfx12GraphLabelsY22getGraphRangeMaxScaledEPKNS_17AbstractDataGraphE>:
 8012e0e:	680b      	ldr	r3, [r1, #0]
 8012e10:	4608      	mov	r0, r1
 8012e12:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8012e16:	4718      	bx	r3

08012e18 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE>:
 8012e18:	4a38      	ldr	r2, [pc, #224]	@ (8012efc <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0xe4>)
 8012e1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e1e:	8f83      	ldrh	r3, [r0, #60]	@ 0x3c
 8012e20:	b087      	sub	sp, #28
 8012e22:	8812      	ldrh	r2, [r2, #0]
 8012e24:	4604      	mov	r4, r0
 8012e26:	4689      	mov	r9, r1
 8012e28:	429a      	cmp	r2, r3
 8012e2a:	d937      	bls.n	8012e9c <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 8012e2c:	4a34      	ldr	r2, [pc, #208]	@ (8012f00 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0xe8>)
 8012e2e:	6812      	ldr	r2, [r2, #0]
 8012e30:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8012e34:	4b33      	ldr	r3, [pc, #204]	@ (8012f04 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0xec>)
 8012e36:	681b      	ldr	r3, [r3, #0]
 8012e38:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 8012e3c:	f1b8 0f00 	cmp.w	r8, #0
 8012e40:	d02c      	beq.n	8012e9c <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 8012e42:	6803      	ldr	r3, [r0, #0]
 8012e44:	6945      	ldr	r5, [r0, #20]
 8012e46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012e48:	2d00      	cmp	r5, #0
 8012e4a:	d052      	beq.n	8012ef2 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0xda>
 8012e4c:	696f      	ldr	r7, [r5, #20]
 8012e4e:	4798      	blx	r3
 8012e50:	f897 502c 	ldrb.w	r5, [r7, #44]	@ 0x2c
 8012e54:	fb15 f000 	smulbb	r0, r5, r0
 8012e58:	b280      	uxth	r0, r0
 8012e5a:	1c45      	adds	r5, r0, #1
 8012e5c:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8012e60:	122d      	asrs	r5, r5, #8
 8012e62:	d01b      	beq.n	8012e9c <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 8012e64:	6823      	ldr	r3, [r4, #0]
 8012e66:	4639      	mov	r1, r7
 8012e68:	4620      	mov	r0, r4
 8012e6a:	b2ed      	uxtb	r5, r5
 8012e6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012e70:	4798      	blx	r3
 8012e72:	6823      	ldr	r3, [r4, #0]
 8012e74:	4606      	mov	r6, r0
 8012e76:	4639      	mov	r1, r7
 8012e78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012e7c:	4620      	mov	r0, r4
 8012e7e:	4798      	blx	r3
 8012e80:	4683      	mov	fp, r0
 8012e82:	b970      	cbnz	r0, 8012ea2 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x8a>
 8012e84:	b96e      	cbnz	r6, 8012ea2 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x8a>
 8012e86:	6823      	ldr	r3, [r4, #0]
 8012e88:	4642      	mov	r2, r8
 8012e8a:	9600      	str	r6, [sp, #0]
 8012e8c:	4649      	mov	r1, r9
 8012e8e:	4620      	mov	r0, r4
 8012e90:	e9cd 6501 	strd	r6, r5, [sp, #4]
 8012e94:	f8d3 508c 	ldr.w	r5, [r3, #140]	@ 0x8c
 8012e98:	463b      	mov	r3, r7
 8012e9a:	47a8      	blx	r5
 8012e9c:	b007      	add	sp, #28
 8012e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ea2:	2e00      	cmp	r6, #0
 8012ea4:	ddfa      	ble.n	8012e9c <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 8012ea6:	6823      	ldr	r3, [r4, #0]
 8012ea8:	4639      	mov	r1, r7
 8012eaa:	4620      	mov	r0, r4
 8012eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012eb0:	4798      	blx	r3
 8012eb2:	6823      	ldr	r3, [r4, #0]
 8012eb4:	4682      	mov	sl, r0
 8012eb6:	4639      	mov	r1, r7
 8012eb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012ebc:	4620      	mov	r0, r4
 8012ebe:	4798      	blx	r3
 8012ec0:	4582      	cmp	sl, r0
 8012ec2:	bfde      	ittt	le
 8012ec4:	4603      	movle	r3, r0
 8012ec6:	4650      	movle	r0, sl
 8012ec8:	469a      	movle	sl, r3
 8012eca:	ebaa 0300 	sub.w	r3, sl, r0
 8012ece:	fb93 f3f6 	sdiv	r3, r3, r6
 8012ed2:	2b64      	cmp	r3, #100	@ 0x64
 8012ed4:	dce2      	bgt.n	8012e9c <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 8012ed6:	6823      	ldr	r3, [r4, #0]
 8012ed8:	4642      	mov	r2, r8
 8012eda:	9000      	str	r0, [sp, #0]
 8012edc:	4649      	mov	r1, r9
 8012ede:	4620      	mov	r0, r4
 8012ee0:	e9cd b503 	strd	fp, r5, [sp, #12]
 8012ee4:	e9cd a601 	strd	sl, r6, [sp, #4]
 8012ee8:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 8012eec:	463b      	mov	r3, r7
 8012eee:	47a8      	blx	r5
 8012ef0:	e7d4      	b.n	8012e9c <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 8012ef2:	4798      	blx	r3
 8012ef4:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8012ef8:	deff      	udf	#255	@ 0xff
 8012efa:	bf00      	nop
 8012efc:	20027bf0 	.word	0x20027bf0
 8012f00:	20027bec 	.word	0x20027bec
 8012f04:	20027bf4 	.word	0x20027bf4

08012f08 <_ZN8touchgfx12GraphLabelsYD1Ev>:
 8012f08:	4770      	bx	lr

08012f0a <_ZNK8touchgfx12GraphLabelsY31getCorrectlyScaledLabelIntervalEPKNS_17AbstractDataGraphE>:
 8012f0a:	b538      	push	{r3, r4, r5, lr}
 8012f0c:	680a      	ldr	r2, [r1, #0]
 8012f0e:	e9d0 540c 	ldrd	r5, r4, [r0, #48]	@ 0x30
 8012f12:	f8d2 2094 	ldr.w	r2, [r2, #148]	@ 0x94
 8012f16:	4608      	mov	r0, r1
 8012f18:	4790      	blx	r2
 8012f1a:	4629      	mov	r1, r5
 8012f1c:	4602      	mov	r2, r0
 8012f1e:	4620      	mov	r0, r4
 8012f20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012f24:	f7ff bafc 	b.w	8012520 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>

08012f28 <_ZN8touchgfx12GraphLabelsYD0Ev>:
 8012f28:	b510      	push	{r4, lr}
 8012f2a:	4604      	mov	r4, r0
 8012f2c:	214c      	movs	r1, #76	@ 0x4c
 8012f2e:	f012 fd8e 	bl	8025a4e <_ZdlPvj>
 8012f32:	4620      	mov	r0, r4
 8012f34:	bd10      	pop	{r4, pc}

08012f36 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih>:
 8012f36:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f3a:	b08d      	sub	sp, #52	@ 0x34
 8012f3c:	4606      	mov	r6, r0
 8012f3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8012f40:	f89d 3068 	ldrb.w	r3, [sp, #104]	@ 0x68
 8012f44:	e9dd 9a18 	ldrd	r9, sl, [sp, #96]	@ 0x60
 8012f48:	e9cd 1207 	strd	r1, r2, [sp, #28]
 8012f4c:	e9dd 7816 	ldrd	r7, r8, [sp, #88]	@ 0x58
 8012f50:	930a      	str	r3, [sp, #40]	@ 0x28
 8012f52:	f1b9 0f00 	cmp.w	r9, #0
 8012f56:	d117      	bne.n	8012f88 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x52>
 8012f58:	2f00      	cmp	r7, #0
 8012f5a:	dc7c      	bgt.n	8013056 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x120>
 8012f5c:	f1b8 0f00 	cmp.w	r8, #0
 8012f60:	da01      	bge.n	8012f66 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x30>
 8012f62:	2f00      	cmp	r7, #0
 8012f64:	d17a      	bne.n	801305c <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x126>
 8012f66:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012f68:	4630      	mov	r0, r6
 8012f6a:	6832      	ldr	r2, [r6, #0]
 8012f6c:	9318      	str	r3, [sp, #96]	@ 0x60
 8012f6e:	2300      	movs	r3, #0
 8012f70:	9907      	ldr	r1, [sp, #28]
 8012f72:	e9cd 3316 	strd	r3, r3, [sp, #88]	@ 0x58
 8012f76:	f8d2 408c 	ldr.w	r4, [r2, #140]	@ 0x8c
 8012f7a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012f7e:	46a4      	mov	ip, r4
 8012f80:	b00d      	add	sp, #52	@ 0x34
 8012f82:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f86:	4760      	bx	ip
 8012f88:	fb97 f4f9 	sdiv	r4, r7, r9
 8012f8c:	1e63      	subs	r3, r4, #1
 8012f8e:	9305      	str	r3, [sp, #20]
 8012f90:	f1ba 0f00 	cmp.w	sl, #0
 8012f94:	d122      	bne.n	8012fdc <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xa6>
 8012f96:	fb03 f509 	mul.w	r5, r3, r9
 8012f9a:	fb98 faf9 	sdiv	sl, r8, r9
 8012f9e:	f10a 0a02 	add.w	sl, sl, #2
 8012fa2:	9b05      	ldr	r3, [sp, #20]
 8012fa4:	459a      	cmp	sl, r3
 8012fa6:	d059      	beq.n	801305c <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x126>
 8012fa8:	42af      	cmp	r7, r5
 8012faa:	dc5a      	bgt.n	8013062 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x12c>
 8012fac:	45a8      	cmp	r8, r5
 8012fae:	da01      	bge.n	8012fb4 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x7e>
 8012fb0:	42af      	cmp	r7, r5
 8012fb2:	db0e      	blt.n	8012fd2 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x9c>
 8012fb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012fb6:	4630      	mov	r0, r6
 8012fb8:	9905      	ldr	r1, [sp, #20]
 8012fba:	9302      	str	r3, [sp, #8]
 8012fbc:	6b73      	ldr	r3, [r6, #52]	@ 0x34
 8012fbe:	6832      	ldr	r2, [r6, #0]
 8012fc0:	434b      	muls	r3, r1
 8012fc2:	9907      	ldr	r1, [sp, #28]
 8012fc4:	e9cd 5300 	strd	r5, r3, [sp]
 8012fc8:	f8d2 b08c 	ldr.w	fp, [r2, #140]	@ 0x8c
 8012fcc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012fd0:	47d8      	blx	fp
 8012fd2:	9b05      	ldr	r3, [sp, #20]
 8012fd4:	444d      	add	r5, r9
 8012fd6:	3301      	adds	r3, #1
 8012fd8:	9305      	str	r3, [sp, #20]
 8012fda:	e7e2      	b.n	8012fa2 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x6c>
 8012fdc:	fb97 f3fa 	sdiv	r3, r7, sl
 8012fe0:	3b01      	subs	r3, #1
 8012fe2:	9306      	str	r3, [sp, #24]
 8012fe4:	9a06      	ldr	r2, [sp, #24]
 8012fe6:	fb98 f3fa 	sdiv	r3, r8, sl
 8012fea:	fb02 fb0a 	mul.w	fp, r2, sl
 8012fee:	9a05      	ldr	r2, [sp, #20]
 8012ff0:	3302      	adds	r3, #2
 8012ff2:	fb02 f509 	mul.w	r5, r2, r9
 8012ff6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012ff8:	45ab      	cmp	fp, r5
 8012ffa:	dd1d      	ble.n	8013038 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x102>
 8012ffc:	42af      	cmp	r7, r5
 8012ffe:	dc08      	bgt.n	8013012 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xdc>
 8013000:	45a8      	cmp	r8, r5
 8013002:	da08      	bge.n	8013016 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xe0>
 8013004:	42af      	cmp	r7, r5
 8013006:	da06      	bge.n	8013016 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xe0>
 8013008:	9b05      	ldr	r3, [sp, #20]
 801300a:	444d      	add	r5, r9
 801300c:	3301      	adds	r3, #1
 801300e:	9305      	str	r3, [sp, #20]
 8013010:	e7f2      	b.n	8012ff8 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xc2>
 8013012:	45a8      	cmp	r8, r5
 8013014:	dcf8      	bgt.n	8013008 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xd2>
 8013016:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013018:	4630      	mov	r0, r6
 801301a:	9905      	ldr	r1, [sp, #20]
 801301c:	9302      	str	r3, [sp, #8]
 801301e:	6b73      	ldr	r3, [r6, #52]	@ 0x34
 8013020:	6832      	ldr	r2, [r6, #0]
 8013022:	434b      	muls	r3, r1
 8013024:	9907      	ldr	r1, [sp, #28]
 8013026:	e9cd 5300 	strd	r5, r3, [sp]
 801302a:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 801302e:	461c      	mov	r4, r3
 8013030:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013034:	47a0      	blx	r4
 8013036:	e7e7      	b.n	8013008 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xd2>
 8013038:	45ab      	cmp	fp, r5
 801303a:	db04      	blt.n	8013046 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x110>
 801303c:	9b05      	ldr	r3, [sp, #20]
 801303e:	444d      	add	r5, r9
 8013040:	3301      	adds	r3, #1
 8013042:	9305      	str	r3, [sp, #20]
 8013044:	e7f8      	b.n	8013038 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x102>
 8013046:	9b06      	ldr	r3, [sp, #24]
 8013048:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801304a:	3301      	adds	r3, #1
 801304c:	4293      	cmp	r3, r2
 801304e:	9306      	str	r3, [sp, #24]
 8013050:	d004      	beq.n	801305c <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x126>
 8013052:	44d3      	add	fp, sl
 8013054:	e7d0      	b.n	8012ff8 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xc2>
 8013056:	f1b8 0f00 	cmp.w	r8, #0
 801305a:	dd84      	ble.n	8012f66 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x30>
 801305c:	b00d      	add	sp, #52	@ 0x34
 801305e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013062:	45a8      	cmp	r8, r5
 8013064:	dcb5      	bgt.n	8012fd2 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x9c>
 8013066:	e7a5      	b.n	8012fb4 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x7e>

08013068 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti>:
 8013068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801306c:	f1b3 0900 	subs.w	r9, r3, #0
 8013070:	460d      	mov	r5, r1
 8013072:	4690      	mov	r8, r2
 8013074:	9f08      	ldr	r7, [sp, #32]
 8013076:	f8bd a024 	ldrh.w	sl, [sp, #36]	@ 0x24
 801307a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801307c:	da18      	bge.n	80130b0 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x48>
 801307e:	2a01      	cmp	r2, #1
 8013080:	dd16      	ble.n	80130b0 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x48>
 8013082:	232d      	movs	r3, #45	@ 0x2d
 8013084:	f1c9 0900 	rsb	r9, r9, #0
 8013088:	2001      	movs	r0, #1
 801308a:	800b      	strh	r3, [r1, #0]
 801308c:	2f00      	cmp	r7, #0
 801308e:	d111      	bne.n	80130b4 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x4c>
 8013090:	2302      	movs	r3, #2
 8013092:	eba8 0100 	sub.w	r1, r8, r0
 8013096:	4a26      	ldr	r2, [pc, #152]	@ (8013130 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xc8>)
 8013098:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 801309c:	b289      	uxth	r1, r1
 801309e:	fb96 f3f3 	sdiv	r3, r6, r3
 80130a2:	444b      	add	r3, r9
 80130a4:	fb93 f3f6 	sdiv	r3, r3, r6
 80130a8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80130ac:	f006 b88e 	b.w	80191cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80130b0:	2000      	movs	r0, #0
 80130b2:	e7eb      	b.n	801308c <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x24>
 80130b4:	dd39      	ble.n	801312a <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xc2>
 80130b6:	eba8 0100 	sub.w	r1, r8, r0
 80130ba:	4a1d      	ldr	r2, [pc, #116]	@ (8013130 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xc8>)
 80130bc:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 80130c0:	f108 38ff 	add.w	r8, r8, #4294967295
 80130c4:	b289      	uxth	r1, r1
 80130c6:	fb99 f4f6 	sdiv	r4, r9, r6
 80130ca:	4623      	mov	r3, r4
 80130cc:	f006 f87e 	bl	80191cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80130d0:	4628      	mov	r0, r5
 80130d2:	f005 fd09 	bl	8018ae8 <_ZN8touchgfx7Unicode6strlenEPKt>
 80130d6:	4580      	cmp	r8, r0
 80130d8:	dd27      	ble.n	801312a <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xc2>
 80130da:	f04f 0e02 	mov.w	lr, #2
 80130de:	f825 a010 	strh.w	sl, [r5, r0, lsl #1]
 80130e2:	fb06 9314 	mls	r3, r6, r4, r9
 80130e6:	3001      	adds	r0, #1
 80130e8:	2200      	movs	r2, #0
 80130ea:	f04f 090a 	mov.w	r9, #10
 80130ee:	f107 3aff 	add.w	sl, r7, #4294967295
 80130f2:	fb96 fefe 	sdiv	lr, r6, lr
 80130f6:	4580      	cmp	r8, r0
 80130f8:	4684      	mov	ip, r0
 80130fa:	dd13      	ble.n	8013124 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xbc>
 80130fc:	fb09 f303 	mul.w	r3, r9, r3
 8013100:	4592      	cmp	sl, r2
 8013102:	f102 0201 	add.w	r2, r2, #1
 8013106:	f100 0c01 	add.w	ip, r0, #1
 801310a:	bf08      	it	eq
 801310c:	4473      	addeq	r3, lr
 801310e:	4297      	cmp	r7, r2
 8013110:	fb93 f4f6 	sdiv	r4, r3, r6
 8013114:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8013118:	fb06 3314 	mls	r3, r6, r4, r3
 801311c:	f825 1010 	strh.w	r1, [r5, r0, lsl #1]
 8013120:	4660      	mov	r0, ip
 8013122:	d1e8      	bne.n	80130f6 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x8e>
 8013124:	2300      	movs	r3, #0
 8013126:	f825 301c 	strh.w	r3, [r5, ip, lsl #1]
 801312a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801312e:	bf00      	nop
 8013130:	0802acc8 	.word	0x0802acc8

08013134 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih>:
 8013134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013138:	b09b      	sub	sp, #108	@ 0x6c
 801313a:	4698      	mov	r8, r3
 801313c:	681b      	ldr	r3, [r3, #0]
 801313e:	4604      	mov	r4, r0
 8013140:	ae1a      	add	r6, sp, #104	@ 0x68
 8013142:	9104      	str	r1, [sp, #16]
 8013144:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8013148:	4640      	mov	r0, r8
 801314a:	9924      	ldr	r1, [sp, #144]	@ 0x90
 801314c:	4617      	mov	r7, r2
 801314e:	4798      	blx	r3
 8013150:	f846 0d28 	str.w	r0, [r6, #-40]!
 8013154:	4630      	mov	r0, r6
 8013156:	f7fe ffd7 	bl	8012108 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801315a:	f8b8 3114 	ldrh.w	r3, [r8, #276]	@ 0x114
 801315e:	1ac0      	subs	r0, r0, r3
 8013160:	b200      	sxth	r0, r0
 8013162:	2800      	cmp	r0, #0
 8013164:	f2c0 80ba 	blt.w	80132dc <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a8>
 8013168:	f8b8 211a 	ldrh.w	r2, [r8, #282]	@ 0x11a
 801316c:	441a      	add	r2, r3
 801316e:	f8b8 3042 	ldrh.w	r3, [r8, #66]	@ 0x42
 8013172:	1a9b      	subs	r3, r3, r2
 8013174:	b21b      	sxth	r3, r3
 8013176:	4298      	cmp	r0, r3
 8013178:	f280 80b0 	bge.w	80132dc <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a8>
 801317c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801317e:	2214      	movs	r2, #20
 8013180:	4631      	mov	r1, r6
 8013182:	4620      	mov	r0, r4
 8013184:	9302      	str	r3, [sp, #8]
 8013186:	f8b4 3044 	ldrh.w	r3, [r4, #68]	@ 0x44
 801318a:	9301      	str	r3, [sp, #4]
 801318c:	f8b4 3042 	ldrh.w	r3, [r4, #66]	@ 0x42
 8013190:	9300      	str	r3, [sp, #0]
 8013192:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8013194:	f7ff ff68 	bl	8013068 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti>
 8013198:	4b55      	ldr	r3, [pc, #340]	@ (80132f0 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1bc>)
 801319a:	8fa1      	ldrh	r1, [r4, #60]	@ 0x3c
 801319c:	6818      	ldr	r0, [r3, #0]
 801319e:	f7f4 f92b 	bl	80073f8 <_ZNK8touchgfx5Texts7getTextEt>
 80131a2:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80131a6:	4681      	mov	r9, r0
 80131a8:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 80131ac:	683b      	ldr	r3, [r7, #0]
 80131ae:	f040 8098 	bne.w	80132e2 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1ae>
 80131b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80131b4:	4638      	mov	r0, r7
 80131b6:	4798      	blx	r3
 80131b8:	683b      	ldr	r3, [r7, #0]
 80131ba:	4605      	mov	r5, r0
 80131bc:	4632      	mov	r2, r6
 80131be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80131c0:	4649      	mov	r1, r9
 80131c2:	4638      	mov	r0, r7
 80131c4:	4798      	blx	r3
 80131c6:	fb15 f500 	smulbb	r5, r5, r0
 80131ca:	683b      	ldr	r3, [r7, #0]
 80131cc:	4632      	mov	r2, r6
 80131ce:	b2ad      	uxth	r5, r5
 80131d0:	4649      	mov	r1, r9
 80131d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80131d4:	4638      	mov	r0, r7
 80131d6:	4798      	blx	r3
 80131d8:	4405      	add	r5, r0
 80131da:	b22d      	sxth	r5, r5
 80131dc:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80131e0:	2002      	movs	r0, #2
 80131e2:	f8d8 2000 	ldr.w	r2, [r8]
 80131e6:	f10d 0a68 	add.w	sl, sp, #104	@ 0x68
 80131ea:	2b01      	cmp	r3, #1
 80131ec:	f8b8 30c6 	ldrh.w	r3, [r8, #198]	@ 0xc6
 80131f0:	f8d2 2118 	ldr.w	r2, [r2, #280]	@ 0x118
 80131f4:	bf88      	it	hi
 80131f6:	f105 0b01 	addhi.w	fp, r5, #1
 80131fa:	9305      	str	r3, [sp, #20]
 80131fc:	9924      	ldr	r1, [sp, #144]	@ 0x90
 80131fe:	bf8c      	ite	hi
 8013200:	fb9b fbf0 	sdivhi	fp, fp, r0
 8013204:	fb95 fbf0 	sdivls	fp, r5, r0
 8013208:	4640      	mov	r0, r8
 801320a:	bf88      	it	hi
 801320c:	fa0f fb8b 	sxthhi.w	fp, fp
 8013210:	4790      	blx	r2
 8013212:	f84a 0d3c 	str.w	r0, [sl, #-60]!
 8013216:	4650      	mov	r0, sl
 8013218:	f04f 0800 	mov.w	r8, #0
 801321c:	f7fe ff74 	bl	8012108 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8013220:	9b05      	ldr	r3, [sp, #20]
 8013222:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8013226:	4418      	add	r0, r3
 8013228:	f8ad 5022 	strh.w	r5, [sp, #34]	@ 0x22
 801322c:	ad07      	add	r5, sp, #28
 801322e:	f8ad 801c 	strh.w	r8, [sp, #28]
 8013232:	eba0 0b0b 	sub.w	fp, r0, fp
 8013236:	f8ad 1020 	strh.w	r1, [sp, #32]
 801323a:	f8ad b01e 	strh.w	fp, [sp, #30]
 801323e:	f10d 0b24 	add.w	fp, sp, #36	@ 0x24
 8013242:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013246:	e88b 0003 	stmia.w	fp, {r0, r1}
 801324a:	9904      	ldr	r1, [sp, #16]
 801324c:	4658      	mov	r0, fp
 801324e:	f7fc ff6f 	bl	8010130 <_ZN8touchgfx4RectaNERKS0_>
 8013252:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 8013256:	4543      	cmp	r3, r8
 8013258:	dd40      	ble.n	80132dc <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a8>
 801325a:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	@ 0x2a
 801325e:	4543      	cmp	r3, r8
 8013260:	dd3c      	ble.n	80132dc <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a8>
 8013262:	f8bd 3024 	ldrh.w	r3, [sp, #36]	@ 0x24
 8013266:	4620      	mov	r0, r4
 8013268:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801326c:	1a5b      	subs	r3, r3, r1
 801326e:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 8013272:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8013276:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 801327a:	1a5b      	subs	r3, r3, r1
 801327c:	4629      	mov	r1, r5
 801327e:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8013282:	6823      	ldr	r3, [r4, #0]
 8013284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013286:	4798      	blx	r3
 8013288:	4b1a      	ldr	r3, [pc, #104]	@ (80132f4 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1c0>)
 801328a:	8fa1      	ldrh	r1, [r4, #60]	@ 0x3c
 801328c:	681b      	ldr	r3, [r3, #0]
 801328e:	f894 0040 	ldrb.w	r0, [r4, #64]	@ 0x40
 8013292:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8013296:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8013298:	785b      	ldrb	r3, [r3, #1]
 801329a:	910d      	str	r1, [sp, #52]	@ 0x34
 801329c:	f3c3 0c01 	ubfx	ip, r3, #0, #2
 80132a0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80132a4:	970b      	str	r7, [sp, #44]	@ 0x2c
 80132a6:	f88d 3031 	strb.w	r3, [sp, #49]	@ 0x31
 80132aa:	f89d 3098 	ldrb.w	r3, [sp, #152]	@ 0x98
 80132ae:	f88d c030 	strb.w	ip, [sp, #48]	@ 0x30
 80132b2:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 80132b6:	f88d 0032 	strb.w	r0, [sp, #50]	@ 0x32
 80132ba:	f8ad 8038 	strh.w	r8, [sp, #56]	@ 0x38
 80132be:	f88d 803b 	strb.w	r8, [sp, #59]	@ 0x3b
 80132c2:	f88d 803c 	strb.w	r8, [sp, #60]	@ 0x3c
 80132c6:	f7fd fa03 	bl	80106d0 <_ZN8touchgfx3HAL3lcdEv>
 80132ca:	465b      	mov	r3, fp
 80132cc:	e9cd 6802 	strd	r6, r8, [sp, #8]
 80132d0:	e9cd a900 	strd	sl, r9, [sp]
 80132d4:	e895 0006 	ldmia.w	r5, {r1, r2}
 80132d8:	f7f4 f840 	bl	800735c <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80132dc:	b01b      	add	sp, #108	@ 0x6c
 80132de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132e2:	4601      	mov	r1, r0
 80132e4:	699b      	ldr	r3, [r3, #24]
 80132e6:	4632      	mov	r2, r6
 80132e8:	4638      	mov	r0, r7
 80132ea:	4798      	blx	r3
 80132ec:	b205      	sxth	r5, r0
 80132ee:	e775      	b.n	80131dc <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0xa8>
 80132f0:	20027bf8 	.word	0x20027bf8
 80132f4:	20027bec 	.word	0x20027bec

080132f8 <_ZN8touchgfx15GraphScrollData5clearEv>:
 80132f8:	b510      	push	{r4, lr}
 80132fa:	4604      	mov	r4, r0
 80132fc:	f7fe fda1 	bl	8011e42 <_ZN8touchgfx17AbstractDataGraph5clearEv>
 8013300:	2300      	movs	r3, #0
 8013302:	f8a4 314c 	strh.w	r3, [r4, #332]	@ 0x14c
 8013306:	bd10      	pop	{r4, pc}

08013308 <_ZN8touchgfx15GraphScrollData14beforeAddValueEv>:
 8013308:	f9b0 211e 	ldrsh.w	r2, [r0, #286]	@ 0x11e
 801330c:	f9b0 311c 	ldrsh.w	r3, [r0, #284]	@ 0x11c
 8013310:	429a      	cmp	r2, r3
 8013312:	d101      	bne.n	8013318 <_ZN8touchgfx15GraphScrollData14beforeAddValueEv+0x10>
 8013314:	f7fe bfbe 	b.w	8012294 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>
 8013318:	4770      	bx	lr

0801331a <_ZNK8touchgfx15GraphScrollData18indexToGlobalIndexEs>:
 801331a:	b538      	push	{r3, r4, r5, lr}
 801331c:	f9b0 411c 	ldrsh.w	r4, [r0, #284]	@ 0x11c
 8013320:	f9b0 511e 	ldrsh.w	r5, [r0, #286]	@ 0x11e
 8013324:	42a5      	cmp	r5, r4
 8013326:	da04      	bge.n	8013332 <_ZNK8touchgfx15GraphScrollData18indexToGlobalIndexEs+0x18>
 8013328:	6803      	ldr	r3, [r0, #0]
 801332a:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 801332e:	4798      	blx	r3
 8013330:	bd38      	pop	{r3, r4, r5, pc}
 8013332:	f8d0 0148 	ldr.w	r0, [r0, #328]	@ 0x148
 8013336:	4408      	add	r0, r1
 8013338:	1b00      	subs	r0, r0, r4
 801333a:	e7f9      	b.n	8013330 <_ZNK8touchgfx15GraphScrollData18indexToGlobalIndexEs+0x16>

0801333c <_ZN8touchgfx15GraphScrollData8addValueEi>:
 801333c:	b570      	push	{r4, r5, r6, lr}
 801333e:	f9b0 514c 	ldrsh.w	r5, [r0, #332]	@ 0x14c
 8013342:	4604      	mov	r4, r0
 8013344:	f9b0 211c 	ldrsh.w	r2, [r0, #284]	@ 0x11c
 8013348:	1c6b      	adds	r3, r5, #1
 801334a:	f9b0 611e 	ldrsh.w	r6, [r0, #286]	@ 0x11e
 801334e:	b21b      	sxth	r3, r3
 8013350:	42ae      	cmp	r6, r5
 8013352:	fb93 f0f2 	sdiv	r0, r3, r2
 8013356:	bf08      	it	eq
 8013358:	f8a4 311e 	strheq.w	r3, [r4, #286]	@ 0x11e
 801335c:	4296      	cmp	r6, r2
 801335e:	fb02 3010 	mls	r0, r2, r0, r3
 8013362:	f8d4 3144 	ldr.w	r3, [r4, #324]	@ 0x144
 8013366:	f8a4 014c 	strh.w	r0, [r4, #332]	@ 0x14c
 801336a:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801336e:	d108      	bne.n	8013382 <_ZN8touchgfx15GraphScrollData8addValueEi+0x46>
 8013370:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8013374:	f003 fee7 	bl	8017146 <_ZNK8touchgfx8Drawable10invalidateEv>
 8013378:	4620      	mov	r0, r4
 801337a:	f7fe ff8b 	bl	8012294 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>
 801337e:	4628      	mov	r0, r5
 8013380:	bd70      	pop	{r4, r5, r6, pc}
 8013382:	4629      	mov	r1, r5
 8013384:	4620      	mov	r0, r4
 8013386:	f7fe ff5d 	bl	8012244 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>
 801338a:	e7f8      	b.n	801337e <_ZN8touchgfx15GraphScrollData8addValueEi+0x42>

0801338c <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 801338c:	4b07      	ldr	r3, [pc, #28]	@ (80133ac <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 801338e:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8013390:	881b      	ldrh	r3, [r3, #0]
 8013392:	4293      	cmp	r3, r2
 8013394:	bf81      	itttt	hi
 8013396:	4b06      	ldrhi	r3, [pc, #24]	@ (80133b0 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 8013398:	681b      	ldrhi	r3, [r3, #0]
 801339a:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 801339e:	7858      	ldrbhi	r0, [r3, #1]
 80133a0:	bf8c      	ite	hi
 80133a2:	f000 0003 	andhi.w	r0, r0, #3
 80133a6:	2000      	movls	r0, #0
 80133a8:	4770      	bx	lr
 80133aa:	bf00      	nop
 80133ac:	20027bf0 	.word	0x20027bf0
 80133b0:	20027bec 	.word	0x20027bec

080133b4 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 80133b4:	4b11      	ldr	r3, [pc, #68]	@ (80133fc <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 80133b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133ba:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 80133bc:	4604      	mov	r4, r0
 80133be:	881b      	ldrh	r3, [r3, #0]
 80133c0:	428b      	cmp	r3, r1
 80133c2:	d918      	bls.n	80133f6 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 80133c4:	6803      	ldr	r3, [r0, #0]
 80133c6:	6f9d      	ldr	r5, [r3, #120]	@ 0x78
 80133c8:	4b0d      	ldr	r3, [pc, #52]	@ (8013400 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 80133ca:	6818      	ldr	r0, [r3, #0]
 80133cc:	f7f4 f814 	bl	80073f8 <_ZNK8touchgfx5Texts7getTextEt>
 80133d0:	6823      	ldr	r3, [r4, #0]
 80133d2:	4606      	mov	r6, r0
 80133d4:	4620      	mov	r0, r4
 80133d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80133d8:	4798      	blx	r3
 80133da:	6823      	ldr	r3, [r4, #0]
 80133dc:	4607      	mov	r7, r0
 80133de:	4620      	mov	r0, r4
 80133e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80133e4:	4798      	blx	r3
 80133e6:	463a      	mov	r2, r7
 80133e8:	4603      	mov	r3, r0
 80133ea:	4631      	mov	r1, r6
 80133ec:	4620      	mov	r0, r4
 80133ee:	46ac      	mov	ip, r5
 80133f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80133f4:	4760      	bx	ip
 80133f6:	2000      	movs	r0, #0
 80133f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133fc:	20027bf0 	.word	0x20027bf0
 8013400:	20027bf8 	.word	0x20027bf8

08013404 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8013404:	4b18      	ldr	r3, [pc, #96]	@ (8013468 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8013406:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801340a:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 801340c:	4604      	mov	r4, r0
 801340e:	881b      	ldrh	r3, [r3, #0]
 8013410:	428b      	cmp	r3, r1
 8013412:	d926      	bls.n	8013462 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 8013414:	4b15      	ldr	r3, [pc, #84]	@ (801346c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8013416:	681b      	ldr	r3, [r3, #0]
 8013418:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 801341c:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8013420:	4b13      	ldr	r3, [pc, #76]	@ (8013470 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8013422:	7855      	ldrb	r5, [r2, #1]
 8013424:	681b      	ldr	r3, [r3, #0]
 8013426:	f3c5 0581 	ubfx	r5, r5, #2, #2
 801342a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 801342e:	6833      	ldr	r3, [r6, #0]
 8013430:	69df      	ldr	r7, [r3, #28]
 8013432:	4b10      	ldr	r3, [pc, #64]	@ (8013474 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8013434:	6818      	ldr	r0, [r3, #0]
 8013436:	f7f3 ffdf 	bl	80073f8 <_ZNK8touchgfx5Texts7getTextEt>
 801343a:	6823      	ldr	r3, [r4, #0]
 801343c:	4680      	mov	r8, r0
 801343e:	4620      	mov	r0, r4
 8013440:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013442:	4798      	blx	r3
 8013444:	6823      	ldr	r3, [r4, #0]
 8013446:	4681      	mov	r9, r0
 8013448:	4620      	mov	r0, r4
 801344a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801344e:	4798      	blx	r3
 8013450:	464b      	mov	r3, r9
 8013452:	9000      	str	r0, [sp, #0]
 8013454:	4642      	mov	r2, r8
 8013456:	4629      	mov	r1, r5
 8013458:	4630      	mov	r0, r6
 801345a:	47b8      	blx	r7
 801345c:	b003      	add	sp, #12
 801345e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013462:	2000      	movs	r0, #0
 8013464:	e7fa      	b.n	801345c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 8013466:	bf00      	nop
 8013468:	20027bf0 	.word	0x20027bf0
 801346c:	20027bec 	.word	0x20027bec
 8013470:	20027bf4 	.word	0x20027bf4
 8013474:	20027bf8 	.word	0x20027bf8

08013478 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8013478:	b40e      	push	{r1, r2, r3}
 801347a:	4b30      	ldr	r3, [pc, #192]	@ (801353c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 801347c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013480:	881a      	ldrh	r2, [r3, #0]
 8013482:	b09d      	sub	sp, #116	@ 0x74
 8013484:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
 8013486:	4604      	mov	r4, r0
 8013488:	429a      	cmp	r2, r3
 801348a:	d954      	bls.n	8013536 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 801348c:	aa26      	add	r2, sp, #152	@ 0x98
 801348e:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8013540 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8013492:	f8df 80b0 	ldr.w	r8, [pc, #176]	@ 8013544 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 8013496:	9202      	str	r2, [sp, #8]
 8013498:	f8d9 2000 	ldr.w	r2, [r9]
 801349c:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80134a0:	f8d8 3000 	ldr.w	r3, [r8]
 80134a4:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80134a8:	682b      	ldr	r3, [r5, #0]
 80134aa:	4628      	mov	r0, r5
 80134ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80134ae:	4798      	blx	r3
 80134b0:	4606      	mov	r6, r0
 80134b2:	b207      	sxth	r7, r0
 80134b4:	a803      	add	r0, sp, #12
 80134b6:	f004 fbc9 	bl	8017c4c <_ZN8touchgfx12TextProviderC1Ev>
 80134ba:	682b      	ldr	r3, [r5, #0]
 80134bc:	4628      	mov	r0, r5
 80134be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80134c0:	4798      	blx	r3
 80134c2:	682b      	ldr	r3, [r5, #0]
 80134c4:	4682      	mov	sl, r0
 80134c6:	4628      	mov	r0, r5
 80134c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80134ca:	4798      	blx	r3
 80134cc:	4653      	mov	r3, sl
 80134ce:	9000      	str	r0, [sp, #0]
 80134d0:	a803      	add	r0, sp, #12
 80134d2:	9a02      	ldr	r2, [sp, #8]
 80134d4:	9925      	ldr	r1, [sp, #148]	@ 0x94
 80134d6:	f004 fc0c 	bl	8017cf2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80134da:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 80134dc:	f8d9 3000 	ldr.w	r3, [r9]
 80134e0:	f894 c037 	ldrb.w	ip, [r4, #55]	@ 0x37
 80134e4:	8925      	ldrh	r5, [r4, #8]
 80134e6:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 80134ea:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 80134ee:	eba5 050c 	sub.w	r5, r5, ip
 80134f2:	784a      	ldrb	r2, [r1, #1]
 80134f4:	f8d8 3000 	ldr.w	r3, [r8]
 80134f8:	b22d      	sxth	r5, r5
 80134fa:	f894 1039 	ldrb.w	r1, [r4, #57]	@ 0x39
 80134fe:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8013502:	9500      	str	r5, [sp, #0]
 8013504:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8013508:	a803      	add	r0, sp, #12
 801350a:	f002 f939 	bl	8015780 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 801350e:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	@ 0x34
 8013512:	b203      	sxth	r3, r0
 8013514:	18b9      	adds	r1, r7, r2
 8013516:	2900      	cmp	r1, #0
 8013518:	dd0b      	ble.n	8013532 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 801351a:	3b01      	subs	r3, #1
 801351c:	fb13 f302 	smulbb	r3, r3, r2
 8013520:	fb16 3300 	smlabb	r3, r6, r0, r3
 8013524:	b21f      	sxth	r7, r3
 8013526:	4638      	mov	r0, r7
 8013528:	b01d      	add	sp, #116	@ 0x74
 801352a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801352e:	b003      	add	sp, #12
 8013530:	4770      	bx	lr
 8013532:	2b00      	cmp	r3, #0
 8013534:	dcf7      	bgt.n	8013526 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8013536:	2700      	movs	r7, #0
 8013538:	e7f5      	b.n	8013526 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 801353a:	bf00      	nop
 801353c:	20027bf0 	.word	0x20027bf0
 8013540:	20027bec 	.word	0x20027bec
 8013544:	20027bf4 	.word	0x20027bf4

08013548 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8013548:	b538      	push	{r3, r4, r5, lr}
 801354a:	4b0e      	ldr	r3, [pc, #56]	@ (8013584 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 801354c:	4604      	mov	r4, r0
 801354e:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8013550:	881b      	ldrh	r3, [r3, #0]
 8013552:	429a      	cmp	r2, r3
 8013554:	d214      	bcs.n	8013580 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 8013556:	6803      	ldr	r3, [r0, #0]
 8013558:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801355a:	4798      	blx	r3
 801355c:	6823      	ldr	r3, [r4, #0]
 801355e:	4605      	mov	r5, r0
 8013560:	4620      	mov	r0, r4
 8013562:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013564:	4798      	blx	r3
 8013566:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801356a:	b22d      	sxth	r5, r5
 801356c:	4601      	mov	r1, r0
 801356e:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8013572:	bf06      	itte	eq
 8013574:	4602      	moveq	r2, r0
 8013576:	4629      	moveq	r1, r5
 8013578:	462a      	movne	r2, r5
 801357a:	4620      	mov	r0, r4
 801357c:	f7fc fa48 	bl	800fa10 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8013580:	bd38      	pop	{r3, r4, r5, pc}
 8013582:	bf00      	nop
 8013584:	20027bf0 	.word	0x20027bf0

08013588 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 8013588:	b530      	push	{r4, r5, lr}
 801358a:	888b      	ldrh	r3, [r1, #4]
 801358c:	b085      	sub	sp, #20
 801358e:	4604      	mov	r4, r0
 8013590:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8013592:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8013596:	b923      	cbnz	r3, 80135a2 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8013598:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801359c:	b90b      	cbnz	r3, 80135a2 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 801359e:	f7ff ffd3 	bl	8013548 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 80135a2:	6823      	ldr	r3, [r4, #0]
 80135a4:	466d      	mov	r5, sp
 80135a6:	4621      	mov	r1, r4
 80135a8:	343c      	adds	r4, #60	@ 0x3c
 80135aa:	4628      	mov	r0, r5
 80135ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80135b0:	4798      	blx	r3
 80135b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80135b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80135ba:	b005      	add	sp, #20
 80135bc:	bd30      	pop	{r4, r5, pc}

080135be <_ZNK8touchgfx3Box12getSolidRectEv>:
 80135be:	2300      	movs	r3, #0
 80135c0:	8083      	strh	r3, [r0, #4]
 80135c2:	80c3      	strh	r3, [r0, #6]
 80135c4:	8003      	strh	r3, [r0, #0]
 80135c6:	8043      	strh	r3, [r0, #2]
 80135c8:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 80135cc:	2bff      	cmp	r3, #255	@ 0xff
 80135ce:	bf01      	itttt	eq
 80135d0:	890b      	ldrheq	r3, [r1, #8]
 80135d2:	8083      	strheq	r3, [r0, #4]
 80135d4:	894b      	ldrheq	r3, [r1, #10]
 80135d6:	80c3      	strheq	r3, [r0, #6]
 80135d8:	4770      	bx	lr
	...

080135dc <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 80135dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80135de:	4604      	mov	r4, r0
 80135e0:	466b      	mov	r3, sp
 80135e2:	6808      	ldr	r0, [r1, #0]
 80135e4:	6849      	ldr	r1, [r1, #4]
 80135e6:	c303      	stmia	r3!, {r0, r1}
 80135e8:	6823      	ldr	r3, [r4, #0]
 80135ea:	4669      	mov	r1, sp
 80135ec:	4620      	mov	r0, r4
 80135ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80135f0:	4798      	blx	r3
 80135f2:	4b08      	ldr	r3, [pc, #32]	@ (8013614 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 80135f4:	681b      	ldr	r3, [r3, #0]
 80135f6:	f893 2076 	ldrb.w	r2, [r3, #118]	@ 0x76
 80135fa:	b10a      	cbz	r2, 8013600 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 80135fc:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80135fe:	b900      	cbnz	r0, 8013602 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8013600:	6898      	ldr	r0, [r3, #8]
 8013602:	6803      	ldr	r3, [r0, #0]
 8013604:	4669      	mov	r1, sp
 8013606:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8013608:	6a1d      	ldr	r5, [r3, #32]
 801360a:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 801360e:	47a8      	blx	r5
 8013610:	b003      	add	sp, #12
 8013612:	bd30      	pop	{r4, r5, pc}
 8013614:	20027b94 	.word	0x20027b94

08013618 <_ZN8touchgfx3BoxD1Ev>:
 8013618:	4770      	bx	lr

0801361a <_ZN8touchgfx3BoxD0Ev>:
 801361a:	b510      	push	{r4, lr}
 801361c:	4604      	mov	r4, r0
 801361e:	212c      	movs	r1, #44	@ 0x2c
 8013620:	f012 fa15 	bl	8025a4e <_ZdlPvj>
 8013624:	4620      	mov	r0, r4
 8013626:	bd10      	pop	{r4, pc}

08013628 <_ZNK8touchgfx3Box17invalidateContentEv>:
 8013628:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 801362c:	b12a      	cbz	r2, 801363a <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 801362e:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8013632:	b112      	cbz	r2, 801363a <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8013634:	6803      	ldr	r3, [r0, #0]
 8013636:	695b      	ldr	r3, [r3, #20]
 8013638:	4718      	bx	r3
 801363a:	4770      	bx	lr

0801363c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 801363c:	4b30      	ldr	r3, [pc, #192]	@ (8013700 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 801363e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013642:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8013644:	b08d      	sub	sp, #52	@ 0x34
 8013646:	881b      	ldrh	r3, [r3, #0]
 8013648:	4604      	mov	r4, r0
 801364a:	460f      	mov	r7, r1
 801364c:	4293      	cmp	r3, r2
 801364e:	d954      	bls.n	80136fa <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8013650:	4b2c      	ldr	r3, [pc, #176]	@ (8013704 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 8013652:	6819      	ldr	r1, [r3, #0]
 8013654:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 8013658:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 801365c:	4a2a      	ldr	r2, [pc, #168]	@ (8013708 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 801365e:	6812      	ldr	r2, [r2, #0]
 8013660:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8013664:	2900      	cmp	r1, #0
 8013666:	d048      	beq.n	80136fa <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8013668:	785a      	ldrb	r2, [r3, #1]
 801366a:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 801366e:	f3c2 0801 	ubfx	r8, r2, #0, #2
 8013672:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8013676:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 801367a:	4b24      	ldr	r3, [pc, #144]	@ (801370c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 801367c:	f88d 2021 	strb.w	r2, [sp, #33]	@ 0x21
 8013680:	681a      	ldr	r2, [r3, #0]
 8013682:	f890 5036 	ldrb.w	r5, [r0, #54]	@ 0x36
 8013686:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	@ 0x34
 801368a:	f890 e038 	ldrb.w	lr, [r0, #56]	@ 0x38
 801368e:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8013690:	f890 0037 	ldrb.w	r0, [r0, #55]	@ 0x37
 8013694:	f892 3076 	ldrb.w	r3, [r2, #118]	@ 0x76
 8013698:	9107      	str	r1, [sp, #28]
 801369a:	f88d 8020 	strb.w	r8, [sp, #32]
 801369e:	f88d e022 	strb.w	lr, [sp, #34]	@ 0x22
 80136a2:	9609      	str	r6, [sp, #36]	@ 0x24
 80136a4:	f8ad c028 	strh.w	ip, [sp, #40]	@ 0x28
 80136a8:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 80136ac:	f88d 002b 	strb.w	r0, [sp, #43]	@ 0x2b
 80136b0:	b10b      	cbz	r3, 80136b6 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 80136b2:	6cd5      	ldr	r5, [r2, #76]	@ 0x4c
 80136b4:	b905      	cbnz	r5, 80136b8 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 80136b6:	6895      	ldr	r5, [r2, #8]
 80136b8:	ae05      	add	r6, sp, #20
 80136ba:	4621      	mov	r1, r4
 80136bc:	4630      	mov	r0, r6
 80136be:	f003 fddd 	bl	801727c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80136c2:	4b13      	ldr	r3, [pc, #76]	@ (8013710 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 80136c4:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80136c6:	6818      	ldr	r0, [r3, #0]
 80136c8:	f7f3 fe96 	bl	80073f8 <_ZNK8touchgfx5Texts7getTextEt>
 80136cc:	6823      	ldr	r3, [r4, #0]
 80136ce:	4680      	mov	r8, r0
 80136d0:	4620      	mov	r0, r4
 80136d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80136d4:	4798      	blx	r3
 80136d6:	6823      	ldr	r3, [r4, #0]
 80136d8:	4681      	mov	r9, r0
 80136da:	4620      	mov	r0, r4
 80136dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80136e0:	4798      	blx	r3
 80136e2:	ab07      	add	r3, sp, #28
 80136e4:	f8cd 8004 	str.w	r8, [sp, #4]
 80136e8:	9300      	str	r3, [sp, #0]
 80136ea:	463b      	mov	r3, r7
 80136ec:	e9cd 9002 	strd	r9, r0, [sp, #8]
 80136f0:	4628      	mov	r0, r5
 80136f2:	e896 0006 	ldmia.w	r6, {r1, r2}
 80136f6:	f7f3 fe31 	bl	800735c <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80136fa:	b00d      	add	sp, #52	@ 0x34
 80136fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013700:	20027bf0 	.word	0x20027bf0
 8013704:	20027bec 	.word	0x20027bec
 8013708:	20027bf4 	.word	0x20027bf4
 801370c:	20027b94 	.word	0x20027b94
 8013710:	20027bf8 	.word	0x20027bf8

08013714 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 8013714:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 8013718:	4770      	bx	lr

0801371a <_ZNK8touchgfx6Button17invalidateContentEv>:
 801371a:	b508      	push	{r3, lr}
 801371c:	f890 3032 	ldrb.w	r3, [r0, #50]	@ 0x32
 8013720:	b10b      	cbz	r3, 8013726 <_ZNK8touchgfx6Button17invalidateContentEv+0xc>
 8013722:	f7ee fe36 	bl	8002392 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 8013726:	bd08      	pop	{r3, pc}

08013728 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_>:
 8013728:	4770      	bx	lr

0801372a <_ZN8touchgfx14ButtonWithIconD1Ev>:
 801372a:	4770      	bx	lr

0801372c <_ZN8touchgfx14ButtonWithIconD0Ev>:
 801372c:	b510      	push	{r4, lr}
 801372e:	4604      	mov	r4, r0
 8013730:	213c      	movs	r1, #60	@ 0x3c
 8013732:	f012 f98c 	bl	8025a4e <_ZdlPvj>
 8013736:	4620      	mov	r0, r4
 8013738:	bd10      	pop	{r4, pc}

0801373a <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>:
 801373a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801373e:	461c      	mov	r4, r3
 8013740:	4606      	mov	r6, r0
 8013742:	9f06      	ldr	r7, [sp, #24]
 8013744:	f012 f8d3 	bl	80258ee <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8013748:	8823      	ldrh	r3, [r4, #0]
 801374a:	f04f 0802 	mov.w	r8, #2
 801374e:	f9b6 5008 	ldrsh.w	r5, [r6, #8]
 8013752:	4638      	mov	r0, r7
 8013754:	86b3      	strh	r3, [r6, #52]	@ 0x34
 8013756:	883b      	ldrh	r3, [r7, #0]
 8013758:	fb95 f5f8 	sdiv	r5, r5, r8
 801375c:	86f3      	strh	r3, [r6, #54]	@ 0x36
 801375e:	b2ad      	uxth	r5, r5
 8013760:	f005 ffa6 	bl	80196b0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8013764:	f9b6 400a 	ldrsh.w	r4, [r6, #10]
 8013768:	fb90 f0f8 	sdiv	r0, r0, r8
 801376c:	1a2d      	subs	r5, r5, r0
 801376e:	4638      	mov	r0, r7
 8013770:	fb94 f4f8 	sdiv	r4, r4, r8
 8013774:	8735      	strh	r5, [r6, #56]	@ 0x38
 8013776:	b2a4      	uxth	r4, r4
 8013778:	f005 ffce 	bl	8019718 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801377c:	fb90 f0f8 	sdiv	r0, r0, r8
 8013780:	1a24      	subs	r4, r4, r0
 8013782:	8774      	strh	r4, [r6, #58]	@ 0x3a
 8013784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013788 <_ZN8touchgfx14AbstractButton13executeActionEv>:
 8013788:	b510      	push	{r4, lr}
 801378a:	4604      	mov	r4, r0
 801378c:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 801378e:	b150      	cbz	r0, 80137a6 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8013790:	6803      	ldr	r3, [r0, #0]
 8013792:	68db      	ldr	r3, [r3, #12]
 8013794:	4798      	blx	r3
 8013796:	b130      	cbz	r0, 80137a6 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8013798:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801379a:	4621      	mov	r1, r4
 801379c:	6803      	ldr	r3, [r0, #0]
 801379e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80137a2:	689b      	ldr	r3, [r3, #8]
 80137a4:	4718      	bx	r3
 80137a6:	bd10      	pop	{r4, pc}

080137a8 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE>:
 80137a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137ac:	4604      	mov	r4, r0
 80137ae:	b08c      	sub	sp, #48	@ 0x30
 80137b0:	460d      	mov	r5, r1
 80137b2:	f012 f8cf 	bl	8025954 <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 80137b6:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d05d      	beq.n	801387a <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xd2>
 80137be:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80137c0:	a805      	add	r0, sp, #20
 80137c2:	f8ad 3014 	strh.w	r3, [sp, #20]
 80137c6:	f9b4 8038 	ldrsh.w	r8, [r4, #56]	@ 0x38
 80137ca:	f9b4 703a 	ldrsh.w	r7, [r4, #58]	@ 0x3a
 80137ce:	f005 ff6f 	bl	80196b0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80137d2:	4606      	mov	r6, r0
 80137d4:	a805      	add	r0, sp, #20
 80137d6:	f005 ff9f 	bl	8019718 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80137da:	6869      	ldr	r1, [r5, #4]
 80137dc:	f8ad 001e 	strh.w	r0, [sp, #30]
 80137e0:	ab08      	add	r3, sp, #32
 80137e2:	6828      	ldr	r0, [r5, #0]
 80137e4:	ad08      	add	r5, sp, #32
 80137e6:	f8ad 8018 	strh.w	r8, [sp, #24]
 80137ea:	f8ad 701a 	strh.w	r7, [sp, #26]
 80137ee:	f8ad 601c 	strh.w	r6, [sp, #28]
 80137f2:	c303      	stmia	r3!, {r0, r1}
 80137f4:	a906      	add	r1, sp, #24
 80137f6:	4628      	mov	r0, r5
 80137f8:	f7fc fc9a 	bl	8010130 <_ZN8touchgfx4RectaNERKS0_>
 80137fc:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8013800:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013804:	429a      	cmp	r2, r3
 8013806:	d035      	beq.n	8013874 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xcc>
 8013808:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 801380c:	2b00      	cmp	r3, #0
 801380e:	dd31      	ble.n	8013874 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xcc>
 8013810:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	@ 0x26
 8013814:	2b00      	cmp	r3, #0
 8013816:	dd2d      	ble.n	8013874 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xcc>
 8013818:	2300      	movs	r3, #0
 801381a:	a90a      	add	r1, sp, #40	@ 0x28
 801381c:	4620      	mov	r0, r4
 801381e:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
 8013822:	6823      	ldr	r3, [r4, #0]
 8013824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013826:	4798      	blx	r3
 8013828:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801382c:	8f22      	ldrh	r2, [r4, #56]	@ 0x38
 801382e:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 8013832:	1a9b      	subs	r3, r3, r2
 8013834:	f8ad 3020 	strh.w	r3, [sp, #32]
 8013838:	8f63      	ldrh	r3, [r4, #58]	@ 0x3a
 801383a:	1ac9      	subs	r1, r1, r3
 801383c:	f8ad 1022 	strh.w	r1, [sp, #34]	@ 0x22
 8013840:	490f      	ldr	r1, [pc, #60]	@ (8013880 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xd8>)
 8013842:	6809      	ldr	r1, [r1, #0]
 8013844:	f891 0076 	ldrb.w	r0, [r1, #118]	@ 0x76
 8013848:	b108      	cbz	r0, 801384e <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xa6>
 801384a:	6cc8      	ldr	r0, [r1, #76]	@ 0x4c
 801384c:	b900      	cbnz	r0, 8013850 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xa8>
 801384e:	6888      	ldr	r0, [r1, #8]
 8013850:	f8bd 102a 	ldrh.w	r1, [sp, #42]	@ 0x2a
 8013854:	2601      	movs	r6, #1
 8013856:	440b      	add	r3, r1
 8013858:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 801385c:	440a      	add	r2, r1
 801385e:	6801      	ldr	r1, [r0, #0]
 8013860:	9602      	str	r6, [sp, #8]
 8013862:	b21b      	sxth	r3, r3
 8013864:	f894 4032 	ldrb.w	r4, [r4, #50]	@ 0x32
 8013868:	b212      	sxth	r2, r2
 801386a:	e9cd 5400 	strd	r5, r4, [sp]
 801386e:	688c      	ldr	r4, [r1, #8]
 8013870:	a905      	add	r1, sp, #20
 8013872:	47a0      	blx	r4
 8013874:	b00c      	add	sp, #48	@ 0x30
 8013876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801387a:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801387c:	e7a0      	b.n	80137c0 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x18>
 801387e:	bf00      	nop
 8013880:	20027b94 	.word	0x20027b94

08013884 <_ZN8touchgfx14ButtonWithIconC1Ev>:
 8013884:	2101      	movs	r1, #1
 8013886:	2200      	movs	r2, #0
 8013888:	b510      	push	{r4, lr}
 801388a:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 801388e:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 8013892:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8013896:	4c0d      	ldr	r4, [pc, #52]	@ (80138cc <_ZN8touchgfx14ButtonWithIconC1Ev+0x48>)
 8013898:	8082      	strh	r2, [r0, #4]
 801389a:	80c2      	strh	r2, [r0, #6]
 801389c:	8102      	strh	r2, [r0, #8]
 801389e:	8142      	strh	r2, [r0, #10]
 80138a0:	8182      	strh	r2, [r0, #12]
 80138a2:	81c2      	strh	r2, [r0, #14]
 80138a4:	8202      	strh	r2, [r0, #16]
 80138a6:	8242      	strh	r2, [r0, #18]
 80138a8:	61c2      	str	r2, [r0, #28]
 80138aa:	8402      	strh	r2, [r0, #32]
 80138ac:	8442      	strh	r2, [r0, #34]	@ 0x22
 80138ae:	6282      	str	r2, [r0, #40]	@ 0x28
 80138b0:	f880 202c 	strb.w	r2, [r0, #44]	@ 0x2c
 80138b4:	85c1      	strh	r1, [r0, #46]	@ 0x2e
 80138b6:	8601      	strh	r1, [r0, #48]	@ 0x30
 80138b8:	f880 1032 	strb.w	r1, [r0, #50]	@ 0x32
 80138bc:	6004      	str	r4, [r0, #0]
 80138be:	8681      	strh	r1, [r0, #52]	@ 0x34
 80138c0:	86c1      	strh	r1, [r0, #54]	@ 0x36
 80138c2:	8702      	strh	r2, [r0, #56]	@ 0x38
 80138c4:	8742      	strh	r2, [r0, #58]	@ 0x3a
 80138c6:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80138ca:	bd10      	pop	{r4, pc}
 80138cc:	0802addc 	.word	0x0802addc

080138d0 <_ZN8touchgfx5ImageD1Ev>:
 80138d0:	4770      	bx	lr

080138d2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 80138d2:	b570      	push	{r4, r5, r6, lr}
 80138d4:	880b      	ldrh	r3, [r1, #0]
 80138d6:	460d      	mov	r5, r1
 80138d8:	4604      	mov	r4, r0
 80138da:	84c3      	strh	r3, [r0, #38]	@ 0x26
 80138dc:	4608      	mov	r0, r1
 80138de:	f005 fee7 	bl	80196b0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80138e2:	4606      	mov	r6, r0
 80138e4:	4628      	mov	r0, r5
 80138e6:	f005 ff17 	bl	8019718 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80138ea:	6823      	ldr	r3, [r4, #0]
 80138ec:	4605      	mov	r5, r0
 80138ee:	4631      	mov	r1, r6
 80138f0:	4620      	mov	r0, r4
 80138f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80138f4:	4798      	blx	r3
 80138f6:	6823      	ldr	r3, [r4, #0]
 80138f8:	4629      	mov	r1, r5
 80138fa:	4620      	mov	r0, r4
 80138fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80138fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013902:	4718      	bx	r3

08013904 <_ZN8touchgfx5ImageD0Ev>:
 8013904:	b510      	push	{r4, lr}
 8013906:	4604      	mov	r4, r0
 8013908:	212c      	movs	r1, #44	@ 0x2c
 801390a:	f012 f8a0 	bl	8025a4e <_ZdlPvj>
 801390e:	4620      	mov	r0, r4
 8013910:	bd10      	pop	{r4, pc}

08013912 <_ZNK8touchgfx5Image12getSolidRectEv>:
 8013912:	b510      	push	{r4, lr}
 8013914:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 8013918:	4604      	mov	r4, r0
 801391a:	2bff      	cmp	r3, #255	@ 0xff
 801391c:	d006      	beq.n	801392c <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 801391e:	2300      	movs	r3, #0
 8013920:	8003      	strh	r3, [r0, #0]
 8013922:	8043      	strh	r3, [r0, #2]
 8013924:	8083      	strh	r3, [r0, #4]
 8013926:	80c3      	strh	r3, [r0, #6]
 8013928:	4620      	mov	r0, r4
 801392a:	bd10      	pop	{r4, pc}
 801392c:	3126      	adds	r1, #38	@ 0x26
 801392e:	f005 ff27 	bl	8019780 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8013932:	e7f9      	b.n	8013928 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08013934 <_ZNK8touchgfx5Image17invalidateContentEv>:
 8013934:	f890 2028 	ldrb.w	r2, [r0, #40]	@ 0x28
 8013938:	b12a      	cbz	r2, 8013946 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 801393a:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 801393e:	b112      	cbz	r2, 8013946 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8013940:	6803      	ldr	r3, [r0, #0]
 8013942:	695b      	ldr	r3, [r3, #20]
 8013944:	4718      	bx	r3
 8013946:	4770      	bx	lr

08013948 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8013948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801394c:	4604      	mov	r4, r0
 801394e:	b088      	sub	sp, #32
 8013950:	2500      	movs	r5, #0
 8013952:	460f      	mov	r7, r1
 8013954:	f854 3b26 	ldr.w	r3, [r4], #38
 8013958:	a904      	add	r1, sp, #16
 801395a:	4606      	mov	r6, r0
 801395c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801395e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8013962:	4798      	blx	r3
 8013964:	4620      	mov	r0, r4
 8013966:	f005 fea3 	bl	80196b0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801396a:	4680      	mov	r8, r0
 801396c:	4620      	mov	r0, r4
 801396e:	f005 fed3 	bl	8019718 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8013972:	9506      	str	r5, [sp, #24]
 8013974:	ad06      	add	r5, sp, #24
 8013976:	f8ad 001e 	strh.w	r0, [sp, #30]
 801397a:	4639      	mov	r1, r7
 801397c:	f8ad 801c 	strh.w	r8, [sp, #28]
 8013980:	4628      	mov	r0, r5
 8013982:	f7fc fbd5 	bl	8010130 <_ZN8touchgfx4RectaNERKS0_>
 8013986:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801398a:	2b00      	cmp	r3, #0
 801398c:	dd19      	ble.n	80139c2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801398e:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8013992:	2b00      	cmp	r3, #0
 8013994:	dd15      	ble.n	80139c2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8013996:	4b0c      	ldr	r3, [pc, #48]	@ (80139c8 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8013998:	681b      	ldr	r3, [r3, #0]
 801399a:	f893 2076 	ldrb.w	r2, [r3, #118]	@ 0x76
 801399e:	b10a      	cbz	r2, 80139a4 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 80139a0:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80139a2:	b900      	cbnz	r0, 80139a6 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 80139a4:	6898      	ldr	r0, [r3, #8]
 80139a6:	2701      	movs	r7, #1
 80139a8:	6801      	ldr	r1, [r0, #0]
 80139aa:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80139ae:	9702      	str	r7, [sp, #8]
 80139b0:	f896 6028 	ldrb.w	r6, [r6, #40]	@ 0x28
 80139b4:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80139b8:	e9cd 5600 	strd	r5, r6, [sp]
 80139bc:	688d      	ldr	r5, [r1, #8]
 80139be:	4621      	mov	r1, r4
 80139c0:	47a8      	blx	r5
 80139c2:	b008      	add	sp, #32
 80139c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80139c8:	20027b94 	.word	0x20027b94

080139cc <_ZN8touchgfx7OutlineD1Ev>:
 80139cc:	4770      	bx	lr

080139ce <_ZN8touchgfx7OutlineD0Ev>:
 80139ce:	b510      	push	{r4, lr}
 80139d0:	4604      	mov	r4, r0
 80139d2:	2130      	movs	r1, #48	@ 0x30
 80139d4:	f012 f83b 	bl	8025a4e <_ZdlPvj>
 80139d8:	4620      	mov	r0, r4
 80139da:	bd10      	pop	{r4, pc}

080139dc <_ZN8touchgfx7Outline5resetEv>:
 80139dc:	b510      	push	{r4, lr}
 80139de:	4604      	mov	r4, r0
 80139e0:	f000 fe86 	bl	80146f0 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 80139e4:	60e0      	str	r0, [r4, #12]
 80139e6:	f000 fe89 	bl	80146fc <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 80139ea:	68e3      	ldr	r3, [r4, #12]
 80139ec:	08c0      	lsrs	r0, r0, #3
 80139ee:	2200      	movs	r2, #0
 80139f0:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80139f4:	6123      	str	r3, [r4, #16]
 80139f6:	3801      	subs	r0, #1
 80139f8:	60a2      	str	r2, [r4, #8]
 80139fa:	6060      	str	r0, [r4, #4]
 80139fc:	8019      	strh	r1, [r3, #0]
 80139fe:	8059      	strh	r1, [r3, #2]
 8013a00:	809a      	strh	r2, [r3, #4]
 8013a02:	80da      	strh	r2, [r3, #6]
 8013a04:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8013a06:	f023 0301 	bic.w	r3, r3, #1
 8013a0a:	f043 0302 	orr.w	r3, r3, #2
 8013a0e:	6263      	str	r3, [r4, #36]	@ 0x24
 8013a10:	bd10      	pop	{r4, pc}
	...

08013a14 <_ZN8touchgfx7OutlineC1Ev>:
 8013a14:	4b0a      	ldr	r3, [pc, #40]	@ (8013a40 <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 8013a16:	b510      	push	{r4, lr}
 8013a18:	6003      	str	r3, [r0, #0]
 8013a1a:	2300      	movs	r3, #0
 8013a1c:	4604      	mov	r4, r0
 8013a1e:	6243      	str	r3, [r0, #36]	@ 0x24
 8013a20:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8013a24:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013a28:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8013a2c:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8013a30:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8013a34:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 8013a38:	f7ff ffd0 	bl	80139dc <_ZN8touchgfx7Outline5resetEv>
 8013a3c:	4620      	mov	r0, r4
 8013a3e:	bd10      	pop	{r4, pc}
 8013a40:	0802aec0 	.word	0x0802aec0

08013a44 <_ZN8touchgfx7Outline10renderLineEiiii>:
 8013a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a48:	b093      	sub	sp, #76	@ 0x4c
 8013a4a:	1156      	asrs	r6, r2, #5
 8013a4c:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8013a4e:	9305      	str	r3, [sp, #20]
 8013a50:	1153      	asrs	r3, r2, #5
 8013a52:	f004 051f 	and.w	r5, r4, #31
 8013a56:	9303      	str	r3, [sp, #12]
 8013a58:	1163      	asrs	r3, r4, #5
 8013a5a:	9504      	str	r5, [sp, #16]
 8013a5c:	1165      	asrs	r5, r4, #5
 8013a5e:	9306      	str	r3, [sp, #24]
 8013a60:	f002 031f 	and.w	r3, r2, #31
 8013a64:	42ae      	cmp	r6, r5
 8013a66:	f040 80f4 	bne.w	8013c52 <_ZN8touchgfx7Outline10renderLineEiiii+0x20e>
 8013a6a:	9c04      	ldr	r4, [sp, #16]
 8013a6c:	9a05      	ldr	r2, [sp, #20]
 8013a6e:	42a3      	cmp	r3, r4
 8013a70:	ea4f 1e62 	mov.w	lr, r2, asr #5
 8013a74:	6902      	ldr	r2, [r0, #16]
 8013a76:	d125      	bne.n	8013ac4 <_ZN8touchgfx7Outline10renderLineEiiii+0x80>
 8013a78:	f9b2 3000 	ldrsh.w	r3, [r2]
 8013a7c:	459e      	cmp	lr, r3
 8013a7e:	d103      	bne.n	8013a88 <_ZN8touchgfx7Outline10renderLineEiiii+0x44>
 8013a80:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8013a84:	429e      	cmp	r6, r3
 8013a86:	d035      	beq.n	8013af4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8013a88:	88d1      	ldrh	r1, [r2, #6]
 8013a8a:	8893      	ldrh	r3, [r2, #4]
 8013a8c:	430b      	orrs	r3, r1
 8013a8e:	d010      	beq.n	8013ab2 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8013a90:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	db0c      	blt.n	8013ab2 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8013a98:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8013a9a:	428b      	cmp	r3, r1
 8013a9c:	da09      	bge.n	8013ab2 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8013a9e:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8013aa2:	428b      	cmp	r3, r1
 8013aa4:	f103 0301 	add.w	r3, r3, #1
 8013aa8:	bf38      	it	cc
 8013aaa:	3208      	addcc	r2, #8
 8013aac:	6083      	str	r3, [r0, #8]
 8013aae:	bf38      	it	cc
 8013ab0:	6102      	strcc	r2, [r0, #16]
 8013ab2:	6903      	ldr	r3, [r0, #16]
 8013ab4:	9a03      	ldr	r2, [sp, #12]
 8013ab6:	f8a3 e000 	strh.w	lr, [r3]
 8013aba:	805a      	strh	r2, [r3, #2]
 8013abc:	2200      	movs	r2, #0
 8013abe:	809a      	strh	r2, [r3, #4]
 8013ac0:	80da      	strh	r2, [r3, #6]
 8013ac2:	e017      	b.n	8013af4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8013ac4:	9c05      	ldr	r4, [sp, #20]
 8013ac6:	114e      	asrs	r6, r1, #5
 8013ac8:	f001 0c1f 	and.w	ip, r1, #31
 8013acc:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 8013ad0:	f004 041f 	and.w	r4, r4, #31
 8013ad4:	4576      	cmp	r6, lr
 8013ad6:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 8013ada:	9402      	str	r4, [sp, #8]
 8013adc:	9c04      	ldr	r4, [sp, #16]
 8013ade:	eba4 0403 	sub.w	r4, r4, r3
 8013ae2:	d10a      	bne.n	8013afa <_ZN8touchgfx7Outline10renderLineEiiii+0xb6>
 8013ae4:	9b02      	ldr	r3, [sp, #8]
 8013ae6:	44a0      	add	r8, r4
 8013ae8:	449c      	add	ip, r3
 8013aea:	f8a2 8004 	strh.w	r8, [r2, #4]
 8013aee:	fb04 a40c 	mla	r4, r4, ip, sl
 8013af2:	80d4      	strh	r4, [r2, #6]
 8013af4:	b013      	add	sp, #76	@ 0x4c
 8013af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013afa:	9d05      	ldr	r5, [sp, #20]
 8013afc:	1a69      	subs	r1, r5, r1
 8013afe:	bf51      	iteee	pl
 8013b00:	f1cc 0520 	rsbpl	r5, ip, #32
 8013b04:	fb04 f40c 	mulmi.w	r4, r4, ip
 8013b08:	4249      	negmi	r1, r1
 8013b0a:	2500      	movmi	r5, #0
 8013b0c:	bf5d      	ittte	pl
 8013b0e:	436c      	mulpl	r4, r5
 8013b10:	2520      	movpl	r5, #32
 8013b12:	f04f 0901 	movpl.w	r9, #1
 8013b16:	f04f 39ff 	movmi.w	r9, #4294967295
 8013b1a:	9501      	str	r5, [sp, #4]
 8013b1c:	9f01      	ldr	r7, [sp, #4]
 8013b1e:	444e      	add	r6, r9
 8013b20:	fb94 f5f1 	sdiv	r5, r4, r1
 8013b24:	fb01 4415 	mls	r4, r1, r5, r4
 8013b28:	44bc      	add	ip, r7
 8013b2a:	2c00      	cmp	r4, #0
 8013b2c:	bfbc      	itt	lt
 8013b2e:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8013b32:	1864      	addlt	r4, r4, r1
 8013b34:	44a8      	add	r8, r5
 8013b36:	fb05 ac0c 	mla	ip, r5, ip, sl
 8013b3a:	f8a2 8004 	strh.w	r8, [r2, #4]
 8013b3e:	f8a2 c006 	strh.w	ip, [r2, #6]
 8013b42:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8013b46:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8013b4a:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 8013b4e:	ea58 0202 	orrs.w	r2, r8, r2
 8013b52:	d011      	beq.n	8013b78 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8013b54:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8013b58:	f1b8 0f00 	cmp.w	r8, #0
 8013b5c:	db0c      	blt.n	8013b78 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8013b5e:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8013b60:	4590      	cmp	r8, r2
 8013b62:	da09      	bge.n	8013b78 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8013b64:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 8013b68:	4590      	cmp	r8, r2
 8013b6a:	bf3c      	itt	cc
 8013b6c:	f10c 0208 	addcc.w	r2, ip, #8
 8013b70:	6102      	strcc	r2, [r0, #16]
 8013b72:	f108 0201 	add.w	r2, r8, #1
 8013b76:	6082      	str	r2, [r0, #8]
 8013b78:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8013b7c:	2700      	movs	r7, #0
 8013b7e:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8013b82:	45b6      	cmp	lr, r6
 8013b84:	f8ac 6000 	strh.w	r6, [ip]
 8013b88:	442b      	add	r3, r5
 8013b8a:	f8ac 2002 	strh.w	r2, [ip, #2]
 8013b8e:	f8ac 7004 	strh.w	r7, [ip, #4]
 8013b92:	f8ac 7006 	strh.w	r7, [ip, #6]
 8013b96:	d04b      	beq.n	8013c30 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ec>
 8013b98:	9f04      	ldr	r7, [sp, #16]
 8013b9a:	1a64      	subs	r4, r4, r1
 8013b9c:	f04f 0a00 	mov.w	sl, #0
 8013ba0:	1aff      	subs	r7, r7, r3
 8013ba2:	443d      	add	r5, r7
 8013ba4:	016d      	lsls	r5, r5, #5
 8013ba6:	fb95 f8f1 	sdiv	r8, r5, r1
 8013baa:	fb01 5518 	mls	r5, r1, r8, r5
 8013bae:	2d00      	cmp	r5, #0
 8013bb0:	bfbc      	itt	lt
 8013bb2:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8013bb6:	186d      	addlt	r5, r5, r1
 8013bb8:	f108 0701 	add.w	r7, r8, #1
 8013bbc:	9703      	str	r7, [sp, #12]
 8013bbe:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8013bc2:	1964      	adds	r4, r4, r5
 8013bc4:	444e      	add	r6, r9
 8013bc6:	bf54      	ite	pl
 8013bc8:	9f03      	ldrpl	r7, [sp, #12]
 8013bca:	4647      	movmi	r7, r8
 8013bcc:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8013bd0:	bf58      	it	pl
 8013bd2:	1a64      	subpl	r4, r4, r1
 8013bd4:	443b      	add	r3, r7
 8013bd6:	44bb      	add	fp, r7
 8013bd8:	f8ac b004 	strh.w	fp, [ip, #4]
 8013bdc:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8013be0:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8013be4:	f8ac b006 	strh.w	fp, [ip, #6]
 8013be8:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8013bec:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8013bf0:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8013bf4:	ea5b 0707 	orrs.w	r7, fp, r7
 8013bf8:	d011      	beq.n	8013c1e <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8013bfa:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8013bfe:	f1bb 0f00 	cmp.w	fp, #0
 8013c02:	db0c      	blt.n	8013c1e <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8013c04:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8013c06:	45bb      	cmp	fp, r7
 8013c08:	da09      	bge.n	8013c1e <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8013c0a:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8013c0e:	45bb      	cmp	fp, r7
 8013c10:	bf3c      	itt	cc
 8013c12:	f10c 0708 	addcc.w	r7, ip, #8
 8013c16:	6107      	strcc	r7, [r0, #16]
 8013c18:	f10b 0701 	add.w	r7, fp, #1
 8013c1c:	6087      	str	r7, [r0, #8]
 8013c1e:	6907      	ldr	r7, [r0, #16]
 8013c20:	45b6      	cmp	lr, r6
 8013c22:	803e      	strh	r6, [r7, #0]
 8013c24:	807a      	strh	r2, [r7, #2]
 8013c26:	f8a7 a004 	strh.w	sl, [r7, #4]
 8013c2a:	f8a7 a006 	strh.w	sl, [r7, #6]
 8013c2e:	d1c6      	bne.n	8013bbe <_ZN8touchgfx7Outline10renderLineEiiii+0x17a>
 8013c30:	9a04      	ldr	r2, [sp, #16]
 8013c32:	1ad3      	subs	r3, r2, r3
 8013c34:	6902      	ldr	r2, [r0, #16]
 8013c36:	8891      	ldrh	r1, [r2, #4]
 8013c38:	88d6      	ldrh	r6, [r2, #6]
 8013c3a:	4419      	add	r1, r3
 8013c3c:	8091      	strh	r1, [r2, #4]
 8013c3e:	9902      	ldr	r1, [sp, #8]
 8013c40:	f101 0c20 	add.w	ip, r1, #32
 8013c44:	9901      	ldr	r1, [sp, #4]
 8013c46:	ebac 0c01 	sub.w	ip, ip, r1
 8013c4a:	fb03 630c 	mla	r3, r3, ip, r6
 8013c4e:	80d3      	strh	r3, [r2, #6]
 8013c50:	e750      	b.n	8013af4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8013c52:	9d05      	ldr	r5, [sp, #20]
 8013c54:	1aa2      	subs	r2, r4, r2
 8013c56:	eba5 0501 	sub.w	r5, r5, r1
 8013c5a:	9202      	str	r2, [sp, #8]
 8013c5c:	9508      	str	r5, [sp, #32]
 8013c5e:	f140 8128 	bpl.w	8013eb2 <_ZN8touchgfx7Outline10renderLineEiiii+0x46e>
 8013c62:	9a03      	ldr	r2, [sp, #12]
 8013c64:	2a00      	cmp	r2, #0
 8013c66:	f6ff af45 	blt.w	8013af4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8013c6a:	9a02      	ldr	r2, [sp, #8]
 8013c6c:	f04f 34ff 	mov.w	r4, #4294967295
 8013c70:	4252      	negs	r2, r2
 8013c72:	940b      	str	r4, [sp, #44]	@ 0x2c
 8013c74:	2400      	movs	r4, #0
 8013c76:	9202      	str	r2, [sp, #8]
 8013c78:	9a06      	ldr	r2, [sp, #24]
 8013c7a:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 8013c7e:	9206      	str	r2, [sp, #24]
 8013c80:	462a      	mov	r2, r5
 8013c82:	435a      	muls	r2, r3
 8013c84:	9401      	str	r4, [sp, #4]
 8013c86:	9c02      	ldr	r4, [sp, #8]
 8013c88:	9d02      	ldr	r5, [sp, #8]
 8013c8a:	fb92 f4f4 	sdiv	r4, r2, r4
 8013c8e:	fb05 2214 	mls	r2, r5, r4, r2
 8013c92:	2a00      	cmp	r2, #0
 8013c94:	9207      	str	r2, [sp, #28]
 8013c96:	bfbc      	itt	lt
 8013c98:	1952      	addlt	r2, r2, r5
 8013c9a:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8013c9e:	6905      	ldr	r5, [r0, #16]
 8013ca0:	bfb8      	it	lt
 8013ca2:	9207      	strlt	r2, [sp, #28]
 8013ca4:	eb04 0901 	add.w	r9, r4, r1
 8013ca8:	9a01      	ldr	r2, [sp, #4]
 8013caa:	ea4f 1669 	mov.w	r6, r9, asr #5
 8013cae:	429a      	cmp	r2, r3
 8013cb0:	f040 8111 	bne.w	8013ed6 <_ZN8touchgfx7Outline10renderLineEiiii+0x492>
 8013cb4:	f9b5 3000 	ldrsh.w	r3, [r5]
 8013cb8:	429e      	cmp	r6, r3
 8013cba:	d104      	bne.n	8013cc6 <_ZN8touchgfx7Outline10renderLineEiiii+0x282>
 8013cbc:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8013cc0:	9a03      	ldr	r2, [sp, #12]
 8013cc2:	429a      	cmp	r2, r3
 8013cc4:	d01b      	beq.n	8013cfe <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8013cc6:	88ea      	ldrh	r2, [r5, #6]
 8013cc8:	88ab      	ldrh	r3, [r5, #4]
 8013cca:	4313      	orrs	r3, r2
 8013ccc:	d010      	beq.n	8013cf0 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8013cce:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8013cd2:	2a00      	cmp	r2, #0
 8013cd4:	db0c      	blt.n	8013cf0 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8013cd6:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8013cd8:	429a      	cmp	r2, r3
 8013cda:	da09      	bge.n	8013cf0 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8013cdc:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8013ce0:	429a      	cmp	r2, r3
 8013ce2:	f102 0201 	add.w	r2, r2, #1
 8013ce6:	bf38      	it	cc
 8013ce8:	3508      	addcc	r5, #8
 8013cea:	6082      	str	r2, [r0, #8]
 8013cec:	bf38      	it	cc
 8013cee:	6105      	strcc	r5, [r0, #16]
 8013cf0:	6903      	ldr	r3, [r0, #16]
 8013cf2:	9a03      	ldr	r2, [sp, #12]
 8013cf4:	801e      	strh	r6, [r3, #0]
 8013cf6:	805a      	strh	r2, [r3, #2]
 8013cf8:	2200      	movs	r2, #0
 8013cfa:	809a      	strh	r2, [r3, #4]
 8013cfc:	80da      	strh	r2, [r3, #6]
 8013cfe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013d00:	9a03      	ldr	r2, [sp, #12]
 8013d02:	6901      	ldr	r1, [r0, #16]
 8013d04:	441a      	add	r2, r3
 8013d06:	f9b1 3000 	ldrsh.w	r3, [r1]
 8013d0a:	42b3      	cmp	r3, r6
 8013d0c:	d103      	bne.n	8013d16 <_ZN8touchgfx7Outline10renderLineEiiii+0x2d2>
 8013d0e:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8013d12:	429a      	cmp	r2, r3
 8013d14:	d01a      	beq.n	8013d4c <_ZN8touchgfx7Outline10renderLineEiiii+0x308>
 8013d16:	88cc      	ldrh	r4, [r1, #6]
 8013d18:	888b      	ldrh	r3, [r1, #4]
 8013d1a:	4323      	orrs	r3, r4
 8013d1c:	d010      	beq.n	8013d40 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8013d1e:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8013d22:	2c00      	cmp	r4, #0
 8013d24:	db0c      	blt.n	8013d40 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8013d26:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8013d28:	429c      	cmp	r4, r3
 8013d2a:	da09      	bge.n	8013d40 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8013d2c:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8013d30:	429c      	cmp	r4, r3
 8013d32:	f104 0401 	add.w	r4, r4, #1
 8013d36:	bf38      	it	cc
 8013d38:	3108      	addcc	r1, #8
 8013d3a:	6084      	str	r4, [r0, #8]
 8013d3c:	bf38      	it	cc
 8013d3e:	6101      	strcc	r1, [r0, #16]
 8013d40:	6903      	ldr	r3, [r0, #16]
 8013d42:	2100      	movs	r1, #0
 8013d44:	801e      	strh	r6, [r3, #0]
 8013d46:	805a      	strh	r2, [r3, #2]
 8013d48:	8099      	strh	r1, [r3, #4]
 8013d4a:	80d9      	strh	r1, [r3, #6]
 8013d4c:	9b06      	ldr	r3, [sp, #24]
 8013d4e:	4293      	cmp	r3, r2
 8013d50:	f000 8082 	beq.w	8013e58 <_ZN8touchgfx7Outline10renderLineEiiii+0x414>
 8013d54:	9b08      	ldr	r3, [sp, #32]
 8013d56:	9902      	ldr	r1, [sp, #8]
 8013d58:	015b      	lsls	r3, r3, #5
 8013d5a:	9c02      	ldr	r4, [sp, #8]
 8013d5c:	fb93 f1f1 	sdiv	r1, r3, r1
 8013d60:	fb04 3311 	mls	r3, r4, r1, r3
 8013d64:	9103      	str	r1, [sp, #12]
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	9308      	str	r3, [sp, #32]
 8013d6a:	da04      	bge.n	8013d76 <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
 8013d6c:	1e4b      	subs	r3, r1, #1
 8013d6e:	9303      	str	r3, [sp, #12]
 8013d70:	9b08      	ldr	r3, [sp, #32]
 8013d72:	4423      	add	r3, r4
 8013d74:	9308      	str	r3, [sp, #32]
 8013d76:	9b07      	ldr	r3, [sp, #28]
 8013d78:	464f      	mov	r7, r9
 8013d7a:	9902      	ldr	r1, [sp, #8]
 8013d7c:	2600      	movs	r6, #0
 8013d7e:	1a5b      	subs	r3, r3, r1
 8013d80:	9307      	str	r3, [sp, #28]
 8013d82:	9b01      	ldr	r3, [sp, #4]
 8013d84:	f1c3 0320 	rsb	r3, r3, #32
 8013d88:	930e      	str	r3, [sp, #56]	@ 0x38
 8013d8a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8013d8c:	9b01      	ldr	r3, [sp, #4]
 8013d8e:	1a5b      	subs	r3, r3, r1
 8013d90:	930a      	str	r3, [sp, #40]	@ 0x28
 8013d92:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 8013d96:	185b      	adds	r3, r3, r1
 8013d98:	bf58      	it	pl
 8013d9a:	9902      	ldrpl	r1, [sp, #8]
 8013d9c:	9307      	str	r3, [sp, #28]
 8013d9e:	bf57      	itett	pl
 8013da0:	1a5b      	subpl	r3, r3, r1
 8013da2:	9903      	ldrmi	r1, [sp, #12]
 8013da4:	9307      	strpl	r3, [sp, #28]
 8013da6:	9b03      	ldrpl	r3, [sp, #12]
 8013da8:	bf58      	it	pl
 8013daa:	1c59      	addpl	r1, r3, #1
 8013dac:	2a00      	cmp	r2, #0
 8013dae:	4489      	add	r9, r1
 8013db0:	ea4f 1a69 	mov.w	sl, r9, asr #5
 8013db4:	db2e      	blt.n	8013e14 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8013db6:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8013db8:	4293      	cmp	r3, r2
 8013dba:	dd2b      	ble.n	8013e14 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8013dbc:	9c01      	ldr	r4, [sp, #4]
 8013dbe:	6905      	ldr	r5, [r0, #16]
 8013dc0:	46a0      	mov	r8, r4
 8013dc2:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8013dc4:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 8013dc8:	45a0      	cmp	r8, r4
 8013dca:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 8013dce:	f040 814c 	bne.w	801406a <_ZN8touchgfx7Outline10renderLineEiiii+0x626>
 8013dd2:	f9b5 1000 	ldrsh.w	r1, [r5]
 8013dd6:	4551      	cmp	r1, sl
 8013dd8:	d103      	bne.n	8013de2 <_ZN8touchgfx7Outline10renderLineEiiii+0x39e>
 8013dda:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8013dde:	4291      	cmp	r1, r2
 8013de0:	d018      	beq.n	8013e14 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8013de2:	ea5c 010e 	orrs.w	r1, ip, lr
 8013de6:	d00f      	beq.n	8013e08 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8013de8:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8013dec:	2900      	cmp	r1, #0
 8013dee:	db0b      	blt.n	8013e08 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8013df0:	428b      	cmp	r3, r1
 8013df2:	dd09      	ble.n	8013e08 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8013df4:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 8013df8:	4299      	cmp	r1, r3
 8013dfa:	f101 0101 	add.w	r1, r1, #1
 8013dfe:	bf38      	it	cc
 8013e00:	3508      	addcc	r5, #8
 8013e02:	6081      	str	r1, [r0, #8]
 8013e04:	bf38      	it	cc
 8013e06:	6105      	strcc	r5, [r0, #16]
 8013e08:	6903      	ldr	r3, [r0, #16]
 8013e0a:	f8a3 a000 	strh.w	sl, [r3]
 8013e0e:	805a      	strh	r2, [r3, #2]
 8013e10:	809e      	strh	r6, [r3, #4]
 8013e12:	80de      	strh	r6, [r3, #6]
 8013e14:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013e16:	6901      	ldr	r1, [r0, #16]
 8013e18:	441a      	add	r2, r3
 8013e1a:	88cc      	ldrh	r4, [r1, #6]
 8013e1c:	888b      	ldrh	r3, [r1, #4]
 8013e1e:	4323      	orrs	r3, r4
 8013e20:	d010      	beq.n	8013e44 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8013e22:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8013e26:	2c00      	cmp	r4, #0
 8013e28:	db0c      	blt.n	8013e44 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8013e2a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8013e2c:	429c      	cmp	r4, r3
 8013e2e:	da09      	bge.n	8013e44 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8013e30:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8013e34:	429c      	cmp	r4, r3
 8013e36:	f104 0401 	add.w	r4, r4, #1
 8013e3a:	bf38      	it	cc
 8013e3c:	3108      	addcc	r1, #8
 8013e3e:	6084      	str	r4, [r0, #8]
 8013e40:	bf38      	it	cc
 8013e42:	6101      	strcc	r1, [r0, #16]
 8013e44:	6903      	ldr	r3, [r0, #16]
 8013e46:	464f      	mov	r7, r9
 8013e48:	f8a3 a000 	strh.w	sl, [r3]
 8013e4c:	805a      	strh	r2, [r3, #2]
 8013e4e:	809e      	strh	r6, [r3, #4]
 8013e50:	80de      	strh	r6, [r3, #6]
 8013e52:	9b06      	ldr	r3, [sp, #24]
 8013e54:	4293      	cmp	r3, r2
 8013e56:	d19c      	bne.n	8013d92 <_ZN8touchgfx7Outline10renderLineEiiii+0x34e>
 8013e58:	9b01      	ldr	r3, [sp, #4]
 8013e5a:	6907      	ldr	r7, [r0, #16]
 8013e5c:	f1c3 0620 	rsb	r6, r3, #32
 8013e60:	9b05      	ldr	r3, [sp, #20]
 8013e62:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8013e66:	9b04      	ldr	r3, [sp, #16]
 8013e68:	429e      	cmp	r6, r3
 8013e6a:	f040 81c7 	bne.w	80141fc <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 8013e6e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8013e72:	459e      	cmp	lr, r3
 8013e74:	d104      	bne.n	8013e80 <_ZN8touchgfx7Outline10renderLineEiiii+0x43c>
 8013e76:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013e7a:	429a      	cmp	r2, r3
 8013e7c:	f43f ae3a 	beq.w	8013af4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8013e80:	88f9      	ldrh	r1, [r7, #6]
 8013e82:	88bb      	ldrh	r3, [r7, #4]
 8013e84:	430b      	orrs	r3, r1
 8013e86:	d010      	beq.n	8013eaa <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8013e88:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	db0c      	blt.n	8013eaa <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8013e90:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8013e92:	428b      	cmp	r3, r1
 8013e94:	da09      	bge.n	8013eaa <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8013e96:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8013e9a:	428b      	cmp	r3, r1
 8013e9c:	f103 0301 	add.w	r3, r3, #1
 8013ea0:	bf38      	it	cc
 8013ea2:	3708      	addcc	r7, #8
 8013ea4:	6083      	str	r3, [r0, #8]
 8013ea6:	bf38      	it	cc
 8013ea8:	6107      	strcc	r7, [r0, #16]
 8013eaa:	6903      	ldr	r3, [r0, #16]
 8013eac:	f8a3 e000 	strh.w	lr, [r3]
 8013eb0:	e603      	b.n	8013aba <_ZN8touchgfx7Outline10renderLineEiiii+0x76>
 8013eb2:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8013eb4:	9c03      	ldr	r4, [sp, #12]
 8013eb6:	42a2      	cmp	r2, r4
 8013eb8:	f6ff ae1c 	blt.w	8013af4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8013ebc:	9c06      	ldr	r4, [sp, #24]
 8013ebe:	42a2      	cmp	r2, r4
 8013ec0:	9c08      	ldr	r4, [sp, #32]
 8013ec2:	bfbc      	itt	lt
 8013ec4:	3201      	addlt	r2, #1
 8013ec6:	9206      	strlt	r2, [sp, #24]
 8013ec8:	f1c3 0220 	rsb	r2, r3, #32
 8013ecc:	4362      	muls	r2, r4
 8013ece:	2401      	movs	r4, #1
 8013ed0:	940b      	str	r4, [sp, #44]	@ 0x2c
 8013ed2:	2420      	movs	r4, #32
 8013ed4:	e6d6      	b.n	8013c84 <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 8013ed6:	ea4f 1861 	mov.w	r8, r1, asr #5
 8013eda:	f009 021f 	and.w	r2, r9, #31
 8013ede:	f001 011f 	and.w	r1, r1, #31
 8013ee2:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8013ee6:	920c      	str	r2, [sp, #48]	@ 0x30
 8013ee8:	45b0      	cmp	r8, r6
 8013eea:	9a01      	ldr	r2, [sp, #4]
 8013eec:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 8013ef0:	eba2 0203 	sub.w	r2, r2, r3
 8013ef4:	d108      	bne.n	8013f08 <_ZN8touchgfx7Outline10renderLineEiiii+0x4c4>
 8013ef6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013ef8:	4496      	add	lr, r2
 8013efa:	4419      	add	r1, r3
 8013efc:	f8a5 e004 	strh.w	lr, [r5, #4]
 8013f00:	fb02 a101 	mla	r1, r2, r1, sl
 8013f04:	80e9      	strh	r1, [r5, #6]
 8013f06:	e6fa      	b.n	8013cfe <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8013f08:	2c00      	cmp	r4, #0
 8013f0a:	f2c0 80a7 	blt.w	801405c <_ZN8touchgfx7Outline10renderLineEiiii+0x618>
 8013f0e:	2701      	movs	r7, #1
 8013f10:	f1c1 0c20 	rsb	ip, r1, #32
 8013f14:	970a      	str	r7, [sp, #40]	@ 0x28
 8013f16:	2720      	movs	r7, #32
 8013f18:	fb02 f20c 	mul.w	r2, r2, ip
 8013f1c:	9709      	str	r7, [sp, #36]	@ 0x24
 8013f1e:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8013f20:	fb92 fcf4 	sdiv	ip, r2, r4
 8013f24:	fb04 221c 	mls	r2, r4, ip, r2
 8013f28:	4439      	add	r1, r7
 8013f2a:	2a00      	cmp	r2, #0
 8013f2c:	bfbc      	itt	lt
 8013f2e:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8013f32:	1912      	addlt	r2, r2, r4
 8013f34:	fb0c a101 	mla	r1, ip, r1, sl
 8013f38:	44e6      	add	lr, ip
 8013f3a:	80e9      	strh	r1, [r5, #6]
 8013f3c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013f3e:	f8a5 e004 	strh.w	lr, [r5, #4]
 8013f42:	eb08 0501 	add.w	r5, r8, r1
 8013f46:	6901      	ldr	r1, [r0, #16]
 8013f48:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 8013f4c:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 8013f50:	ea58 070e 	orrs.w	r7, r8, lr
 8013f54:	d010      	beq.n	8013f78 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8013f56:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 8013f5a:	f1be 0f00 	cmp.w	lr, #0
 8013f5e:	db0b      	blt.n	8013f78 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8013f60:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8013f62:	45be      	cmp	lr, r7
 8013f64:	da08      	bge.n	8013f78 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8013f66:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8013f6a:	45be      	cmp	lr, r7
 8013f6c:	bf3c      	itt	cc
 8013f6e:	3108      	addcc	r1, #8
 8013f70:	6101      	strcc	r1, [r0, #16]
 8013f72:	f10e 0101 	add.w	r1, lr, #1
 8013f76:	6081      	str	r1, [r0, #8]
 8013f78:	6901      	ldr	r1, [r0, #16]
 8013f7a:	f04f 0e00 	mov.w	lr, #0
 8013f7e:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 8013f82:	42ae      	cmp	r6, r5
 8013f84:	800d      	strh	r5, [r1, #0]
 8013f86:	4463      	add	r3, ip
 8013f88:	f8a1 8002 	strh.w	r8, [r1, #2]
 8013f8c:	f8a1 e004 	strh.w	lr, [r1, #4]
 8013f90:	f8a1 e006 	strh.w	lr, [r1, #6]
 8013f94:	d053      	beq.n	801403e <_ZN8touchgfx7Outline10renderLineEiiii+0x5fa>
 8013f96:	9901      	ldr	r1, [sp, #4]
 8013f98:	1b12      	subs	r2, r2, r4
 8013f9a:	1ac9      	subs	r1, r1, r3
 8013f9c:	4461      	add	r1, ip
 8013f9e:	0149      	lsls	r1, r1, #5
 8013fa0:	fb91 fef4 	sdiv	lr, r1, r4
 8013fa4:	fb04 111e 	mls	r1, r4, lr, r1
 8013fa8:	2900      	cmp	r1, #0
 8013faa:	bfbc      	itt	lt
 8013fac:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8013fb0:	1909      	addlt	r1, r1, r4
 8013fb2:	f10e 0701 	add.w	r7, lr, #1
 8013fb6:	970d      	str	r7, [sp, #52]	@ 0x34
 8013fb8:	f8d0 a010 	ldr.w	sl, [r0, #16]
 8013fbc:	1852      	adds	r2, r2, r1
 8013fbe:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8013fc0:	bf54      	ite	pl
 8013fc2:	f8dd c034 	ldrpl.w	ip, [sp, #52]	@ 0x34
 8013fc6:	46f4      	movmi	ip, lr
 8013fc8:	f8ba b004 	ldrh.w	fp, [sl, #4]
 8013fcc:	bf58      	it	pl
 8013fce:	1b12      	subpl	r2, r2, r4
 8013fd0:	4463      	add	r3, ip
 8013fd2:	443d      	add	r5, r7
 8013fd4:	44e3      	add	fp, ip
 8013fd6:	f8aa b004 	strh.w	fp, [sl, #4]
 8013fda:	f8ba b006 	ldrh.w	fp, [sl, #6]
 8013fde:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 8013fe2:	f8aa b006 	strh.w	fp, [sl, #6]
 8013fe6:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8013fea:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8013fee:	f8bc a004 	ldrh.w	sl, [ip, #4]
 8013ff2:	ea5b 070a 	orrs.w	r7, fp, sl
 8013ff6:	d014      	beq.n	8014022 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8013ff8:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 8013ffc:	f1ba 0f00 	cmp.w	sl, #0
 8014000:	db0f      	blt.n	8014022 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8014002:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8014004:	45ba      	cmp	sl, r7
 8014006:	da0c      	bge.n	8014022 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8014008:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 801400c:	45ba      	cmp	sl, r7
 801400e:	f10a 0a01 	add.w	sl, sl, #1
 8014012:	bf38      	it	cc
 8014014:	f10c 0c08 	addcc.w	ip, ip, #8
 8014018:	f8c0 a008 	str.w	sl, [r0, #8]
 801401c:	bf38      	it	cc
 801401e:	f8c0 c010 	strcc.w	ip, [r0, #16]
 8014022:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8014026:	f04f 0700 	mov.w	r7, #0
 801402a:	42ae      	cmp	r6, r5
 801402c:	f8ac 5000 	strh.w	r5, [ip]
 8014030:	f8ac 8002 	strh.w	r8, [ip, #2]
 8014034:	f8ac 7004 	strh.w	r7, [ip, #4]
 8014038:	f8ac 7006 	strh.w	r7, [ip, #6]
 801403c:	d1bc      	bne.n	8013fb8 <_ZN8touchgfx7Outline10renderLineEiiii+0x574>
 801403e:	6904      	ldr	r4, [r0, #16]
 8014040:	9a01      	ldr	r2, [sp, #4]
 8014042:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014044:	1ad3      	subs	r3, r2, r3
 8014046:	88a2      	ldrh	r2, [r4, #4]
 8014048:	3120      	adds	r1, #32
 801404a:	441a      	add	r2, r3
 801404c:	80a2      	strh	r2, [r4, #4]
 801404e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014050:	1a89      	subs	r1, r1, r2
 8014052:	88e2      	ldrh	r2, [r4, #6]
 8014054:	fb03 2301 	mla	r3, r3, r1, r2
 8014058:	80e3      	strh	r3, [r4, #6]
 801405a:	e650      	b.n	8013cfe <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 801405c:	f04f 37ff 	mov.w	r7, #4294967295
 8014060:	434a      	muls	r2, r1
 8014062:	4264      	negs	r4, r4
 8014064:	970a      	str	r7, [sp, #40]	@ 0x28
 8014066:	2700      	movs	r7, #0
 8014068:	e758      	b.n	8013f1c <_ZN8touchgfx7Outline10renderLineEiiii+0x4d8>
 801406a:	ea4f 1867 	mov.w	r8, r7, asr #5
 801406e:	f009 031f 	and.w	r3, r9, #31
 8014072:	f007 071f 	and.w	r7, r7, #31
 8014076:	fa1f fc8c 	uxth.w	ip, ip
 801407a:	45d0      	cmp	r8, sl
 801407c:	930f      	str	r3, [sp, #60]	@ 0x3c
 801407e:	fa1f fe8e 	uxth.w	lr, lr
 8014082:	d10a      	bne.n	801409a <_ZN8touchgfx7Outline10renderLineEiiii+0x656>
 8014084:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014086:	449c      	add	ip, r3
 8014088:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801408a:	441f      	add	r7, r3
 801408c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801408e:	f8a5 c004 	strh.w	ip, [r5, #4]
 8014092:	fb03 e707 	mla	r7, r3, r7, lr
 8014096:	80ef      	strh	r7, [r5, #6]
 8014098:	e6bc      	b.n	8013e14 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 801409a:	2900      	cmp	r1, #0
 801409c:	f2c0 80a6 	blt.w	80141ec <_ZN8touchgfx7Outline10renderLineEiiii+0x7a8>
 80140a0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80140a2:	f1c7 0320 	rsb	r3, r7, #32
 80140a6:	4363      	muls	r3, r4
 80140a8:	2401      	movs	r4, #1
 80140aa:	940d      	str	r4, [sp, #52]	@ 0x34
 80140ac:	2420      	movs	r4, #32
 80140ae:	940c      	str	r4, [sp, #48]	@ 0x30
 80140b0:	fb93 f4f1 	sdiv	r4, r3, r1
 80140b4:	fb01 3b14 	mls	fp, r1, r4, r3
 80140b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80140ba:	f1bb 0f00 	cmp.w	fp, #0
 80140be:	441f      	add	r7, r3
 80140c0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80140c2:	bfbc      	itt	lt
 80140c4:	f104 34ff 	addlt.w	r4, r4, #4294967295
 80140c8:	448b      	addlt	fp, r1
 80140ca:	fb04 e707 	mla	r7, r4, r7, lr
 80140ce:	44a4      	add	ip, r4
 80140d0:	80ef      	strh	r7, [r5, #6]
 80140d2:	f8a5 c004 	strh.w	ip, [r5, #4]
 80140d6:	eb08 0503 	add.w	r5, r8, r3
 80140da:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80140de:	f8bc e006 	ldrh.w	lr, [ip, #6]
 80140e2:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 80140e6:	ea5e 0307 	orrs.w	r3, lr, r7
 80140ea:	d011      	beq.n	8014110 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 80140ec:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 80140f0:	f1be 0f00 	cmp.w	lr, #0
 80140f4:	db0c      	blt.n	8014110 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 80140f6:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80140f8:	45be      	cmp	lr, r7
 80140fa:	da09      	bge.n	8014110 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 80140fc:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8014100:	45be      	cmp	lr, r7
 8014102:	bf3c      	itt	cc
 8014104:	f10c 0708 	addcc.w	r7, ip, #8
 8014108:	6107      	strcc	r7, [r0, #16]
 801410a:	f10e 0701 	add.w	r7, lr, #1
 801410e:	6087      	str	r7, [r0, #8]
 8014110:	6907      	ldr	r7, [r0, #16]
 8014112:	b213      	sxth	r3, r2
 8014114:	4555      	cmp	r5, sl
 8014116:	9310      	str	r3, [sp, #64]	@ 0x40
 8014118:	807b      	strh	r3, [r7, #2]
 801411a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801411c:	803d      	strh	r5, [r7, #0]
 801411e:	80be      	strh	r6, [r7, #4]
 8014120:	eb04 0c03 	add.w	ip, r4, r3
 8014124:	80fe      	strh	r6, [r7, #6]
 8014126:	d050      	beq.n	80141ca <_ZN8touchgfx7Outline10renderLineEiiii+0x786>
 8014128:	9b01      	ldr	r3, [sp, #4]
 801412a:	eba3 070c 	sub.w	r7, r3, ip
 801412e:	ebab 0301 	sub.w	r3, fp, r1
 8014132:	443c      	add	r4, r7
 8014134:	9309      	str	r3, [sp, #36]	@ 0x24
 8014136:	0164      	lsls	r4, r4, #5
 8014138:	fb94 f8f1 	sdiv	r8, r4, r1
 801413c:	fb01 4418 	mls	r4, r1, r8, r4
 8014140:	2c00      	cmp	r4, #0
 8014142:	bfbc      	itt	lt
 8014144:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8014148:	1864      	addlt	r4, r4, r1
 801414a:	f108 0701 	add.w	r7, r8, #1
 801414e:	9711      	str	r7, [sp, #68]	@ 0x44
 8014150:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014152:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8014156:	191b      	adds	r3, r3, r4
 8014158:	f8be b004 	ldrh.w	fp, [lr, #4]
 801415c:	bf54      	ite	pl
 801415e:	9f11      	ldrpl	r7, [sp, #68]	@ 0x44
 8014160:	4647      	movmi	r7, r8
 8014162:	9309      	str	r3, [sp, #36]	@ 0x24
 8014164:	bf58      	it	pl
 8014166:	1a5b      	subpl	r3, r3, r1
 8014168:	44bb      	add	fp, r7
 801416a:	44bc      	add	ip, r7
 801416c:	bf58      	it	pl
 801416e:	9309      	strpl	r3, [sp, #36]	@ 0x24
 8014170:	f8ae b004 	strh.w	fp, [lr, #4]
 8014174:	f8be b006 	ldrh.w	fp, [lr, #6]
 8014178:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 801417c:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801417e:	f8ae b006 	strh.w	fp, [lr, #6]
 8014182:	443d      	add	r5, r7
 8014184:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8014188:	f8be b006 	ldrh.w	fp, [lr, #6]
 801418c:	f8be 7004 	ldrh.w	r7, [lr, #4]
 8014190:	ea5b 0307 	orrs.w	r3, fp, r7
 8014194:	d011      	beq.n	80141ba <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8014196:	f9be b002 	ldrsh.w	fp, [lr, #2]
 801419a:	f1bb 0f00 	cmp.w	fp, #0
 801419e:	db0c      	blt.n	80141ba <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 80141a0:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80141a2:	45bb      	cmp	fp, r7
 80141a4:	da09      	bge.n	80141ba <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 80141a6:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 80141aa:	45bb      	cmp	fp, r7
 80141ac:	bf3c      	itt	cc
 80141ae:	f10e 0708 	addcc.w	r7, lr, #8
 80141b2:	6107      	strcc	r7, [r0, #16]
 80141b4:	f10b 0701 	add.w	r7, fp, #1
 80141b8:	6087      	str	r7, [r0, #8]
 80141ba:	6907      	ldr	r7, [r0, #16]
 80141bc:	4555      	cmp	r5, sl
 80141be:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80141c0:	803d      	strh	r5, [r7, #0]
 80141c2:	807b      	strh	r3, [r7, #2]
 80141c4:	80be      	strh	r6, [r7, #4]
 80141c6:	80fe      	strh	r6, [r7, #6]
 80141c8:	d1c2      	bne.n	8014150 <_ZN8touchgfx7Outline10renderLineEiiii+0x70c>
 80141ca:	9b01      	ldr	r3, [sp, #4]
 80141cc:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 80141ce:	eba3 0c0c 	sub.w	ip, r3, ip
 80141d2:	6903      	ldr	r3, [r0, #16]
 80141d4:	3720      	adds	r7, #32
 80141d6:	8899      	ldrh	r1, [r3, #4]
 80141d8:	4461      	add	r1, ip
 80141da:	8099      	strh	r1, [r3, #4]
 80141dc:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80141de:	1a7f      	subs	r7, r7, r1
 80141e0:	88d9      	ldrh	r1, [r3, #6]
 80141e2:	fb0c 1c07 	mla	ip, ip, r7, r1
 80141e6:	f8a3 c006 	strh.w	ip, [r3, #6]
 80141ea:	e613      	b.n	8013e14 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 80141ec:	f04f 34ff 	mov.w	r4, #4294967295
 80141f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80141f2:	4249      	negs	r1, r1
 80141f4:	940d      	str	r4, [sp, #52]	@ 0x34
 80141f6:	2400      	movs	r4, #0
 80141f8:	437b      	muls	r3, r7
 80141fa:	e758      	b.n	80140ae <_ZN8touchgfx7Outline10renderLineEiiii+0x66a>
 80141fc:	9905      	ldr	r1, [sp, #20]
 80141fe:	ea4f 1b69 	mov.w	fp, r9, asr #5
 8014202:	f009 0c1f 	and.w	ip, r9, #31
 8014206:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 801420a:	f001 011f 	and.w	r1, r1, #31
 801420e:	45f3      	cmp	fp, lr
 8014210:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 8014214:	9102      	str	r1, [sp, #8]
 8014216:	9904      	ldr	r1, [sp, #16]
 8014218:	eba1 0406 	sub.w	r4, r1, r6
 801421c:	d108      	bne.n	8014230 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ec>
 801421e:	9b02      	ldr	r3, [sp, #8]
 8014220:	44a0      	add	r8, r4
 8014222:	449c      	add	ip, r3
 8014224:	f8a7 8004 	strh.w	r8, [r7, #4]
 8014228:	fb04 a40c 	mla	r4, r4, ip, sl
 801422c:	80fc      	strh	r4, [r7, #6]
 801422e:	e461      	b.n	8013af4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8014230:	9905      	ldr	r1, [sp, #20]
 8014232:	ebb1 0109 	subs.w	r1, r1, r9
 8014236:	bf51      	iteee	pl
 8014238:	f1cc 0520 	rsbpl	r5, ip, #32
 801423c:	fb04 f40c 	mulmi.w	r4, r4, ip
 8014240:	4249      	negmi	r1, r1
 8014242:	2500      	movmi	r5, #0
 8014244:	bf5d      	ittte	pl
 8014246:	436c      	mulpl	r4, r5
 8014248:	2520      	movpl	r5, #32
 801424a:	f04f 0901 	movpl.w	r9, #1
 801424e:	f04f 39ff 	movmi.w	r9, #4294967295
 8014252:	9501      	str	r5, [sp, #4]
 8014254:	9b01      	ldr	r3, [sp, #4]
 8014256:	fb94 f5f1 	sdiv	r5, r4, r1
 801425a:	fb01 4415 	mls	r4, r1, r5, r4
 801425e:	449c      	add	ip, r3
 8014260:	eb0b 0309 	add.w	r3, fp, r9
 8014264:	2c00      	cmp	r4, #0
 8014266:	bfbc      	itt	lt
 8014268:	f105 35ff 	addlt.w	r5, r5, #4294967295
 801426c:	1864      	addlt	r4, r4, r1
 801426e:	44a8      	add	r8, r5
 8014270:	fb05 ac0c 	mla	ip, r5, ip, sl
 8014274:	f8a7 8004 	strh.w	r8, [r7, #4]
 8014278:	f8a7 c006 	strh.w	ip, [r7, #6]
 801427c:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8014280:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8014284:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8014288:	ea58 0707 	orrs.w	r7, r8, r7
 801428c:	d011      	beq.n	80142b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 801428e:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8014292:	f1b8 0f00 	cmp.w	r8, #0
 8014296:	db0c      	blt.n	80142b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8014298:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801429a:	45b8      	cmp	r8, r7
 801429c:	da09      	bge.n	80142b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 801429e:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 80142a2:	45b8      	cmp	r8, r7
 80142a4:	bf3c      	itt	cc
 80142a6:	f10c 0708 	addcc.w	r7, ip, #8
 80142aa:	6107      	strcc	r7, [r0, #16]
 80142ac:	f108 0701 	add.w	r7, r8, #1
 80142b0:	6087      	str	r7, [r0, #8]
 80142b2:	6907      	ldr	r7, [r0, #16]
 80142b4:	f04f 0c00 	mov.w	ip, #0
 80142b8:	b212      	sxth	r2, r2
 80142ba:	459e      	cmp	lr, r3
 80142bc:	803b      	strh	r3, [r7, #0]
 80142be:	442e      	add	r6, r5
 80142c0:	807a      	strh	r2, [r7, #2]
 80142c2:	f8a7 c004 	strh.w	ip, [r7, #4]
 80142c6:	f8a7 c006 	strh.w	ip, [r7, #6]
 80142ca:	d04b      	beq.n	8014364 <_ZN8touchgfx7Outline10renderLineEiiii+0x920>
 80142cc:	9f04      	ldr	r7, [sp, #16]
 80142ce:	1a64      	subs	r4, r4, r1
 80142d0:	f04f 0a00 	mov.w	sl, #0
 80142d4:	1bbf      	subs	r7, r7, r6
 80142d6:	443d      	add	r5, r7
 80142d8:	016d      	lsls	r5, r5, #5
 80142da:	fb95 f8f1 	sdiv	r8, r5, r1
 80142de:	fb01 5518 	mls	r5, r1, r8, r5
 80142e2:	4565      	cmp	r5, ip
 80142e4:	bfbc      	itt	lt
 80142e6:	f108 38ff 	addlt.w	r8, r8, #4294967295
 80142ea:	186d      	addlt	r5, r5, r1
 80142ec:	f108 0701 	add.w	r7, r8, #1
 80142f0:	9703      	str	r7, [sp, #12]
 80142f2:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80142f6:	1964      	adds	r4, r4, r5
 80142f8:	444b      	add	r3, r9
 80142fa:	bf54      	ite	pl
 80142fc:	9f03      	ldrpl	r7, [sp, #12]
 80142fe:	4647      	movmi	r7, r8
 8014300:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8014304:	bf58      	it	pl
 8014306:	1a64      	subpl	r4, r4, r1
 8014308:	443e      	add	r6, r7
 801430a:	44bb      	add	fp, r7
 801430c:	f8ac b004 	strh.w	fp, [ip, #4]
 8014310:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8014314:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8014318:	f8ac b006 	strh.w	fp, [ip, #6]
 801431c:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8014320:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8014324:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8014328:	ea5b 0707 	orrs.w	r7, fp, r7
 801432c:	d011      	beq.n	8014352 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 801432e:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8014332:	f1bb 0f00 	cmp.w	fp, #0
 8014336:	db0c      	blt.n	8014352 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8014338:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801433a:	45bb      	cmp	fp, r7
 801433c:	da09      	bge.n	8014352 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 801433e:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8014342:	45bb      	cmp	fp, r7
 8014344:	bf3c      	itt	cc
 8014346:	f10c 0708 	addcc.w	r7, ip, #8
 801434a:	6107      	strcc	r7, [r0, #16]
 801434c:	f10b 0701 	add.w	r7, fp, #1
 8014350:	6087      	str	r7, [r0, #8]
 8014352:	6907      	ldr	r7, [r0, #16]
 8014354:	459e      	cmp	lr, r3
 8014356:	803b      	strh	r3, [r7, #0]
 8014358:	807a      	strh	r2, [r7, #2]
 801435a:	f8a7 a004 	strh.w	sl, [r7, #4]
 801435e:	f8a7 a006 	strh.w	sl, [r7, #6]
 8014362:	d1c6      	bne.n	80142f2 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ae>
 8014364:	9b04      	ldr	r3, [sp, #16]
 8014366:	1b9e      	subs	r6, r3, r6
 8014368:	6903      	ldr	r3, [r0, #16]
 801436a:	889a      	ldrh	r2, [r3, #4]
 801436c:	4432      	add	r2, r6
 801436e:	809a      	strh	r2, [r3, #4]
 8014370:	9a02      	ldr	r2, [sp, #8]
 8014372:	f102 0c20 	add.w	ip, r2, #32
 8014376:	9a01      	ldr	r2, [sp, #4]
 8014378:	ebac 0c02 	sub.w	ip, ip, r2
 801437c:	88da      	ldrh	r2, [r3, #6]
 801437e:	fb06 260c 	mla	r6, r6, ip, r2
 8014382:	80de      	strh	r6, [r3, #6]
 8014384:	f7ff bbb6 	b.w	8013af4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>

08014388 <_ZN8touchgfx7Outline6lineToEii>:
 8014388:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801438a:	079b      	lsls	r3, r3, #30
 801438c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801438e:	460e      	mov	r6, r1
 8014390:	4615      	mov	r5, r2
 8014392:	d511      	bpl.n	80143b8 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8014394:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 8014398:	ea86 0701 	eor.w	r7, r6, r1
 801439c:	ea85 0302 	eor.w	r3, r5, r2
 80143a0:	433b      	orrs	r3, r7
 80143a2:	d009      	beq.n	80143b8 <_ZN8touchgfx7Outline6lineToEii+0x30>
 80143a4:	4633      	mov	r3, r6
 80143a6:	9500      	str	r5, [sp, #0]
 80143a8:	f7ff fb4c 	bl	8013a44 <_ZN8touchgfx7Outline10renderLineEiiii>
 80143ac:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80143ae:	f043 0301 	orr.w	r3, r3, #1
 80143b2:	e9c0 6505 	strd	r6, r5, [r0, #20]
 80143b6:	6243      	str	r3, [r0, #36]	@ 0x24
 80143b8:	b003      	add	sp, #12
 80143ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080143bc <_ZN8touchgfx7Outline6moveToEii>:
 80143bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143be:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80143c0:	4615      	mov	r5, r2
 80143c2:	4604      	mov	r4, r0
 80143c4:	460e      	mov	r6, r1
 80143c6:	079a      	lsls	r2, r3, #30
 80143c8:	d401      	bmi.n	80143ce <_ZN8touchgfx7Outline6moveToEii+0x12>
 80143ca:	f7ff fb07 	bl	80139dc <_ZN8touchgfx7Outline5resetEv>
 80143ce:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80143d0:	07db      	lsls	r3, r3, #31
 80143d2:	d504      	bpl.n	80143de <_ZN8touchgfx7Outline6moveToEii+0x22>
 80143d4:	4620      	mov	r0, r4
 80143d6:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 80143da:	f7ff ffd5 	bl	8014388 <_ZN8touchgfx7Outline6lineToEii>
 80143de:	6923      	ldr	r3, [r4, #16]
 80143e0:	1170      	asrs	r0, r6, #5
 80143e2:	1169      	asrs	r1, r5, #5
 80143e4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80143e8:	4290      	cmp	r0, r2
 80143ea:	d103      	bne.n	80143f4 <_ZN8touchgfx7Outline6moveToEii+0x38>
 80143ec:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80143f0:	4291      	cmp	r1, r2
 80143f2:	d01a      	beq.n	801442a <_ZN8touchgfx7Outline6moveToEii+0x6e>
 80143f4:	88df      	ldrh	r7, [r3, #6]
 80143f6:	889a      	ldrh	r2, [r3, #4]
 80143f8:	433a      	orrs	r2, r7
 80143fa:	d010      	beq.n	801441e <_ZN8touchgfx7Outline6moveToEii+0x62>
 80143fc:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8014400:	2a00      	cmp	r2, #0
 8014402:	db0c      	blt.n	801441e <_ZN8touchgfx7Outline6moveToEii+0x62>
 8014404:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8014406:	42ba      	cmp	r2, r7
 8014408:	da09      	bge.n	801441e <_ZN8touchgfx7Outline6moveToEii+0x62>
 801440a:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 801440e:	42ba      	cmp	r2, r7
 8014410:	f102 0201 	add.w	r2, r2, #1
 8014414:	bf38      	it	cc
 8014416:	3308      	addcc	r3, #8
 8014418:	60a2      	str	r2, [r4, #8]
 801441a:	bf38      	it	cc
 801441c:	6123      	strcc	r3, [r4, #16]
 801441e:	6923      	ldr	r3, [r4, #16]
 8014420:	2200      	movs	r2, #0
 8014422:	8018      	strh	r0, [r3, #0]
 8014424:	8059      	strh	r1, [r3, #2]
 8014426:	809a      	strh	r2, [r3, #4]
 8014428:	80da      	strh	r2, [r3, #6]
 801442a:	6166      	str	r6, [r4, #20]
 801442c:	6225      	str	r5, [r4, #32]
 801442e:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8014432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014434 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8014434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014438:	b0d0      	sub	sp, #320	@ 0x140
 801443a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801443e:	466c      	mov	r4, sp
 8014440:	4627      	mov	r7, r4
 8014442:	1a0d      	subs	r5, r1, r0
 8014444:	f100 0308 	add.w	r3, r0, #8
 8014448:	2d48      	cmp	r5, #72	@ 0x48
 801444a:	f340 80d5 	ble.w	80145f8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 801444e:	112d      	asrs	r5, r5, #4
 8014450:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8014454:	f9b0 9000 	ldrsh.w	r9, [r0]
 8014458:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 801445c:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 8014460:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8014464:	6816      	ldr	r6, [r2, #0]
 8014466:	6006      	str	r6, [r0, #0]
 8014468:	6856      	ldr	r6, [r2, #4]
 801446a:	6046      	str	r6, [r0, #4]
 801446c:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8014470:	f8a2 8002 	strh.w	r8, [r2, #2]
 8014474:	f8a2 e004 	strh.w	lr, [r2, #4]
 8014478:	f8a2 c006 	strh.w	ip, [r2, #6]
 801447c:	f1a1 0208 	sub.w	r2, r1, #8
 8014480:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8014484:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 8014488:	4565      	cmp	r5, ip
 801448a:	db06      	blt.n	801449a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 801448c:	d119      	bne.n	80144c2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 801448e:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 8014492:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8014496:	42ae      	cmp	r6, r5
 8014498:	dd13      	ble.n	80144c2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 801449a:	460e      	mov	r6, r1
 801449c:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 80144a0:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 80144a4:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 80144a8:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 80144ac:	601d      	str	r5, [r3, #0]
 80144ae:	6875      	ldr	r5, [r6, #4]
 80144b0:	605d      	str	r5, [r3, #4]
 80144b2:	f821 9c08 	strh.w	r9, [r1, #-8]
 80144b6:	f821 cc06 	strh.w	ip, [r1, #-6]
 80144ba:	f821 8c04 	strh.w	r8, [r1, #-4]
 80144be:	f821 ec02 	strh.w	lr, [r1, #-2]
 80144c2:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80144c6:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 80144ca:	42ae      	cmp	r6, r5
 80144cc:	db06      	blt.n	80144dc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 80144ce:	d116      	bne.n	80144fe <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 80144d0:	f9b0 c000 	ldrsh.w	ip, [r0]
 80144d4:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 80144d8:	45ac      	cmp	ip, r5
 80144da:	da10      	bge.n	80144fe <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 80144dc:	681d      	ldr	r5, [r3, #0]
 80144de:	f9b0 8000 	ldrsh.w	r8, [r0]
 80144e2:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 80144e6:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 80144ea:	6005      	str	r5, [r0, #0]
 80144ec:	685d      	ldr	r5, [r3, #4]
 80144ee:	f8a0 8008 	strh.w	r8, [r0, #8]
 80144f2:	6045      	str	r5, [r0, #4]
 80144f4:	8146      	strh	r6, [r0, #10]
 80144f6:	f8a0 e00c 	strh.w	lr, [r0, #12]
 80144fa:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80144fe:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8014502:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8014506:	4565      	cmp	r5, ip
 8014508:	db06      	blt.n	8014518 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 801450a:	d119      	bne.n	8014540 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801450c:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 8014510:	f9b0 5000 	ldrsh.w	r5, [r0]
 8014514:	42ae      	cmp	r6, r5
 8014516:	da13      	bge.n	8014540 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8014518:	460e      	mov	r6, r1
 801451a:	f9b0 9000 	ldrsh.w	r9, [r0]
 801451e:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8014522:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8014526:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 801452a:	6005      	str	r5, [r0, #0]
 801452c:	6875      	ldr	r5, [r6, #4]
 801452e:	6045      	str	r5, [r0, #4]
 8014530:	f821 9c08 	strh.w	r9, [r1, #-8]
 8014534:	f821 cc06 	strh.w	ip, [r1, #-6]
 8014538:	f821 8c04 	strh.w	r8, [r1, #-4]
 801453c:	f821 ec02 	strh.w	lr, [r1, #-2]
 8014540:	3308      	adds	r3, #8
 8014542:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8014546:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 801454a:	45e6      	cmp	lr, ip
 801454c:	dbf8      	blt.n	8014540 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801454e:	d105      	bne.n	801455c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8014550:	f9b3 6000 	ldrsh.w	r6, [r3]
 8014554:	f9b0 5000 	ldrsh.w	r5, [r0]
 8014558:	42ae      	cmp	r6, r5
 801455a:	dbf1      	blt.n	8014540 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801455c:	4615      	mov	r5, r2
 801455e:	3a08      	subs	r2, #8
 8014560:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 8014564:	45b4      	cmp	ip, r6
 8014566:	dbf9      	blt.n	801455c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8014568:	d105      	bne.n	8014576 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 801456a:	f9b0 8000 	ldrsh.w	r8, [r0]
 801456e:	f9b2 6000 	ldrsh.w	r6, [r2]
 8014572:	45b0      	cmp	r8, r6
 8014574:	dbf2      	blt.n	801455c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8014576:	4293      	cmp	r3, r2
 8014578:	f1a5 0608 	sub.w	r6, r5, #8
 801457c:	d816      	bhi.n	80145ac <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 801457e:	f8d6 c000 	ldr.w	ip, [r6]
 8014582:	f9b3 a000 	ldrsh.w	sl, [r3]
 8014586:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 801458a:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 801458e:	f8c3 c000 	str.w	ip, [r3]
 8014592:	f8d6 c004 	ldr.w	ip, [r6, #4]
 8014596:	f8c3 c004 	str.w	ip, [r3, #4]
 801459a:	f825 ac08 	strh.w	sl, [r5, #-8]
 801459e:	f825 ec06 	strh.w	lr, [r5, #-6]
 80145a2:	f825 9c04 	strh.w	r9, [r5, #-4]
 80145a6:	f825 8c02 	strh.w	r8, [r5, #-2]
 80145aa:	e7c9      	b.n	8014540 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 80145ac:	f8d6 e000 	ldr.w	lr, [r6]
 80145b0:	f9b0 a000 	ldrsh.w	sl, [r0]
 80145b4:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 80145b8:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 80145bc:	f8c0 e000 	str.w	lr, [r0]
 80145c0:	f8d6 e004 	ldr.w	lr, [r6, #4]
 80145c4:	1a16      	subs	r6, r2, r0
 80145c6:	f8c0 e004 	str.w	lr, [r0, #4]
 80145ca:	f825 ac08 	strh.w	sl, [r5, #-8]
 80145ce:	f825 cc06 	strh.w	ip, [r5, #-6]
 80145d2:	f825 9c04 	strh.w	r9, [r5, #-4]
 80145d6:	f825 8c02 	strh.w	r8, [r5, #-2]
 80145da:	1acd      	subs	r5, r1, r3
 80145dc:	10ed      	asrs	r5, r5, #3
 80145de:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 80145e2:	bfb5      	itete	lt
 80145e4:	e9c4 0200 	strdlt	r0, r2, [r4]
 80145e8:	e9c4 3100 	strdge	r3, r1, [r4]
 80145ec:	460a      	movlt	r2, r1
 80145ee:	4603      	movge	r3, r0
 80145f0:	3408      	adds	r4, #8
 80145f2:	4618      	mov	r0, r3
 80145f4:	4611      	mov	r1, r2
 80145f6:	e724      	b.n	8014442 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 80145f8:	4299      	cmp	r1, r3
 80145fa:	d927      	bls.n	801464c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x218>
 80145fc:	f1a3 0210 	sub.w	r2, r3, #16
 8014600:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 8014604:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 8014608:	45ac      	cmp	ip, r5
 801460a:	db06      	blt.n	801461a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 801460c:	d11c      	bne.n	8014648 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 801460e:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 8014612:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 8014616:	42ae      	cmp	r6, r5
 8014618:	da16      	bge.n	8014648 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 801461a:	4615      	mov	r5, r2
 801461c:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 8014620:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 8014624:	3a08      	subs	r2, #8
 8014626:	f855 6f08 	ldr.w	r6, [r5, #8]!
 801462a:	f9b2 e01e 	ldrsh.w	lr, [r2, #30]
 801462e:	6196      	str	r6, [r2, #24]
 8014630:	42a8      	cmp	r0, r5
 8014632:	686e      	ldr	r6, [r5, #4]
 8014634:	f8a2 9010 	strh.w	r9, [r2, #16]
 8014638:	61d6      	str	r6, [r2, #28]
 801463a:	f8a2 c012 	strh.w	ip, [r2, #18]
 801463e:	f8a2 8014 	strh.w	r8, [r2, #20]
 8014642:	f8a2 e016 	strh.w	lr, [r2, #22]
 8014646:	d1db      	bne.n	8014600 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 8014648:	3308      	adds	r3, #8
 801464a:	e7d5      	b.n	80145f8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 801464c:	42bc      	cmp	r4, r7
 801464e:	d903      	bls.n	8014658 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x224>
 8014650:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8014654:	3c08      	subs	r4, #8
 8014656:	e6f4      	b.n	8014442 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8014658:	b050      	add	sp, #320	@ 0x140
 801465a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801465e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 801465e:	b510      	push	{r4, lr}
 8014660:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8014662:	4604      	mov	r4, r0
 8014664:	07da      	lsls	r2, r3, #31
 8014666:	d507      	bpl.n	8014678 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 8014668:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 801466c:	f7ff fe8c 	bl	8014388 <_ZN8touchgfx7Outline6lineToEii>
 8014670:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8014672:	f023 0301 	bic.w	r3, r3, #1
 8014676:	6243      	str	r3, [r0, #36]	@ 0x24
 8014678:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801467a:	079b      	lsls	r3, r3, #30
 801467c:	d521      	bpl.n	80146c2 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 801467e:	6923      	ldr	r3, [r4, #16]
 8014680:	88d9      	ldrh	r1, [r3, #6]
 8014682:	889a      	ldrh	r2, [r3, #4]
 8014684:	430a      	orrs	r2, r1
 8014686:	d010      	beq.n	80146aa <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8014688:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801468c:	2a00      	cmp	r2, #0
 801468e:	db0c      	blt.n	80146aa <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8014690:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8014692:	428a      	cmp	r2, r1
 8014694:	da09      	bge.n	80146aa <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8014696:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 801469a:	4291      	cmp	r1, r2
 801469c:	f102 0201 	add.w	r2, r2, #1
 80146a0:	bf88      	it	hi
 80146a2:	3308      	addhi	r3, #8
 80146a4:	60a2      	str	r2, [r4, #8]
 80146a6:	bf88      	it	hi
 80146a8:	6123      	strhi	r3, [r4, #16]
 80146aa:	68a1      	ldr	r1, [r4, #8]
 80146ac:	b129      	cbz	r1, 80146ba <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 80146ae:	6863      	ldr	r3, [r4, #4]
 80146b0:	4299      	cmp	r1, r3
 80146b2:	d802      	bhi.n	80146ba <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 80146b4:	68e0      	ldr	r0, [r4, #12]
 80146b6:	f7ff febd 	bl	8014434 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 80146ba:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80146bc:	f023 0302 	bic.w	r3, r3, #2
 80146c0:	6263      	str	r3, [r4, #36]	@ 0x24
 80146c2:	68e0      	ldr	r0, [r4, #12]
 80146c4:	bd10      	pop	{r4, pc}
	...

080146c8 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 80146c8:	4b02      	ldr	r3, [pc, #8]	@ (80146d4 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 80146ca:	6018      	str	r0, [r3, #0]
 80146cc:	4b02      	ldr	r3, [pc, #8]	@ (80146d8 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 80146ce:	6019      	str	r1, [r3, #0]
 80146d0:	4770      	bx	lr
 80146d2:	bf00      	nop
 80146d4:	20027b9c 	.word	0x20027b9c
 80146d8:	20027ba0 	.word	0x20027ba0

080146dc <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>:
 80146dc:	2300      	movs	r3, #0
 80146de:	4a02      	ldr	r2, [pc, #8]	@ (80146e8 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0xc>)
 80146e0:	6013      	str	r3, [r2, #0]
 80146e2:	4a02      	ldr	r2, [pc, #8]	@ (80146ec <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0x10>)
 80146e4:	6013      	str	r3, [r2, #0]
 80146e6:	4770      	bx	lr
 80146e8:	20027b9c 	.word	0x20027b9c
 80146ec:	20027ba0 	.word	0x20027ba0

080146f0 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 80146f0:	4b01      	ldr	r3, [pc, #4]	@ (80146f8 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 80146f2:	6818      	ldr	r0, [r3, #0]
 80146f4:	4770      	bx	lr
 80146f6:	bf00      	nop
 80146f8:	20027b9c 	.word	0x20027b9c

080146fc <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 80146fc:	4b01      	ldr	r3, [pc, #4]	@ (8014704 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 80146fe:	6818      	ldr	r0, [r3, #0]
 8014700:	4770      	bx	lr
 8014702:	bf00      	nop
 8014704:	20027ba0 	.word	0x20027ba0

08014708 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8014708:	b510      	push	{r4, lr}
 801470a:	6803      	ldr	r3, [r0, #0]
 801470c:	460c      	mov	r4, r1
 801470e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014710:	4798      	blx	r3
 8014712:	1b03      	subs	r3, r0, r4
 8014714:	4258      	negs	r0, r3
 8014716:	4158      	adcs	r0, r3
 8014718:	bd10      	pop	{r4, pc}
	...

0801471c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 801471c:	4b01      	ldr	r3, [pc, #4]	@ (8014724 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 801471e:	6019      	str	r1, [r3, #0]
 8014720:	4770      	bx	lr
 8014722:	bf00      	nop
 8014724:	20027ba4 	.word	0x20027ba4

08014728 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8014728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801472c:	4696      	mov	lr, r2
 801472e:	b097      	sub	sp, #92	@ 0x5c
 8014730:	4605      	mov	r5, r0
 8014732:	4614      	mov	r4, r2
 8014734:	460e      	mov	r6, r1
 8014736:	461f      	mov	r7, r3
 8014738:	f10d 0c1c 	add.w	ip, sp, #28
 801473c:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 8014740:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 8014744:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 8014748:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801474c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014750:	f8de 3000 	ldr.w	r3, [lr]
 8014754:	f104 0e14 	add.w	lr, r4, #20
 8014758:	f8cc 3000 	str.w	r3, [ip]
 801475c:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8014760:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014764:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014768:	f8de 3000 	ldr.w	r3, [lr]
 801476c:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 8014770:	f8cc 3000 	str.w	r3, [ip]
 8014774:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8014778:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801477c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014780:	f8de 3000 	ldr.w	r3, [lr]
 8014784:	4631      	mov	r1, r6
 8014786:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8014788:	4628      	mov	r0, r5
 801478a:	f8cc 3000 	str.w	r3, [ip]
 801478e:	682b      	ldr	r3, [r5, #0]
 8014790:	9201      	str	r2, [sp, #4]
 8014792:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8014794:	f8cd 8008 	str.w	r8, [sp, #8]
 8014798:	9200      	str	r2, [sp, #0]
 801479a:	aa07      	add	r2, sp, #28
 801479c:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80147a0:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 80147a4:	463b      	mov	r3, r7
 80147a6:	47d8      	blx	fp
 80147a8:	46a6      	mov	lr, r4
 80147aa:	f10d 0c1c 	add.w	ip, sp, #28
 80147ae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80147b2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80147b6:	f8de 3000 	ldr.w	r3, [lr]
 80147ba:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 80147be:	343c      	adds	r4, #60	@ 0x3c
 80147c0:	f8cc 3000 	str.w	r3, [ip]
 80147c4:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80147c8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80147cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80147d0:	f8de 3000 	ldr.w	r3, [lr]
 80147d4:	f8cc 3000 	str.w	r3, [ip]
 80147d8:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 80147dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80147de:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80147e2:	6823      	ldr	r3, [r4, #0]
 80147e4:	4631      	mov	r1, r6
 80147e6:	4628      	mov	r0, r5
 80147e8:	f8cc 3000 	str.w	r3, [ip]
 80147ec:	682b      	ldr	r3, [r5, #0]
 80147ee:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80147f2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80147f4:	f8cd 8008 	str.w	r8, [sp, #8]
 80147f8:	9201      	str	r2, [sp, #4]
 80147fa:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80147fc:	9200      	str	r2, [sp, #0]
 80147fe:	aa07      	add	r2, sp, #28
 8014800:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8014802:	463b      	mov	r3, r7
 8014804:	47a0      	blx	r4
 8014806:	b017      	add	sp, #92	@ 0x5c
 8014808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801480c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801480c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014810:	b08d      	sub	sp, #52	@ 0x34
 8014812:	4688      	mov	r8, r1
 8014814:	f8d3 c000 	ldr.w	ip, [r3]
 8014818:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801481a:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 801481e:	680f      	ldr	r7, [r1, #0]
 8014820:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 8014824:	eba7 070c 	sub.w	r7, r7, ip
 8014828:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 801482c:	edd3 6a07 	vldr	s13, [r3, #28]
 8014830:	42bc      	cmp	r4, r7
 8014832:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8014834:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 8014838:	bfa8      	it	ge
 801483a:	463c      	movge	r4, r7
 801483c:	f9b1 9000 	ldrsh.w	r9, [r1]
 8014840:	f9ba 1000 	ldrsh.w	r1, [sl]
 8014844:	ee07 4a90 	vmov	s15, r4
 8014848:	eb09 0e0c 	add.w	lr, r9, ip
 801484c:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 8014850:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8014854:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 8014858:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 801485c:	4571      	cmp	r1, lr
 801485e:	ee25 4a04 	vmul.f32	s8, s10, s8
 8014862:	ee65 4a24 	vmul.f32	s9, s10, s9
 8014866:	ee25 5a27 	vmul.f32	s10, s10, s15
 801486a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801486e:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8014872:	ee32 1a05 	vadd.f32	s2, s4, s10
 8014876:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801487a:	ee36 0a84 	vadd.f32	s0, s13, s8
 801487e:	ee61 1a87 	vmul.f32	s3, s3, s14
 8014882:	ee22 2a07 	vmul.f32	s4, s4, s14
 8014886:	f340 808c 	ble.w	80149a2 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 801488a:	eba1 060e 	sub.w	r6, r1, lr
 801488e:	fb96 f5f4 	sdiv	r5, r6, r4
 8014892:	ee07 5a10 	vmov	s14, r5
 8014896:	2d00      	cmp	r5, #0
 8014898:	fb04 6615 	mls	r6, r4, r5, r6
 801489c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80148a0:	eea7 0a04 	vfma.f32	s0, s14, s8
 80148a4:	eee7 0a24 	vfma.f32	s1, s14, s9
 80148a8:	eea7 1a05 	vfma.f32	s2, s14, s10
 80148ac:	dd12      	ble.n	80148d4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 80148ae:	ee70 6a44 	vsub.f32	s13, s0, s8
 80148b2:	ee70 1ae4 	vsub.f32	s3, s1, s9
 80148b6:	ee31 2a45 	vsub.f32	s4, s2, s10
 80148ba:	eef5 6a40 	vcmp.f32	s13, #0.0
 80148be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148c2:	bf14      	ite	ne
 80148c4:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 80148c8:	eeb0 7a67 	vmoveq.f32	s14, s15
 80148cc:	ee61 1a87 	vmul.f32	s3, s3, s14
 80148d0:	ee22 2a07 	vmul.f32	s4, s4, s14
 80148d4:	fb05 f204 	mul.w	r2, r5, r4
 80148d8:	1abf      	subs	r7, r7, r2
 80148da:	4494      	add	ip, r2
 80148dc:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 80148e0:	4411      	add	r1, r2
 80148e2:	eb09 020c 	add.w	r2, r9, ip
 80148e6:	b209      	sxth	r1, r1
 80148e8:	443a      	add	r2, r7
 80148ea:	428a      	cmp	r2, r1
 80148ec:	bfc4      	itt	gt
 80148ee:	eba1 0209 	subgt.w	r2, r1, r9
 80148f2:	eba2 070c 	subgt.w	r7, r2, ip
 80148f6:	2f00      	cmp	r7, #0
 80148f8:	dd50      	ble.n	801499c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 80148fa:	fb97 f1f4 	sdiv	r1, r7, r4
 80148fe:	fb04 7211 	mls	r2, r4, r1, r7
 8014902:	b90a      	cbnz	r2, 8014908 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8014904:	3901      	subs	r1, #1
 8014906:	4622      	mov	r2, r4
 8014908:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801490c:	6840      	ldr	r0, [r0, #4]
 801490e:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 8014912:	44b6      	add	lr, r6
 8014914:	f8d0 a000 	ldr.w	sl, [r0]
 8014918:	2900      	cmp	r1, #0
 801491a:	bfcc      	ite	gt
 801491c:	46a1      	movgt	r9, r4
 801491e:	4691      	movle	r9, r2
 8014920:	900b      	str	r0, [sp, #44]	@ 0x2c
 8014922:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8014924:	fb04 e505 	mla	r5, r4, r5, lr
 8014928:	eef0 6a42 	vmov.f32	s13, s4
 801492c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8014930:	9008      	str	r0, [sp, #32]
 8014932:	eeb0 7a61 	vmov.f32	s14, s3
 8014936:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8014938:	695b      	ldr	r3, [r3, #20]
 801493a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801493e:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8014942:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8014946:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8014948:	445b      	add	r3, fp
 801494a:	9307      	str	r3, [sp, #28]
 801494c:	ee16 3a90 	vmov	r3, s13
 8014950:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8014954:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8014958:	ee21 3a23 	vmul.f32	s6, s2, s7
 801495c:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8014960:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8014964:	ee17 7a90 	vmov	r7, s15
 8014968:	ee73 7a42 	vsub.f32	s15, s6, s4
 801496c:	fb97 f7f4 	sdiv	r7, r7, r4
 8014970:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8014974:	ee17 ca90 	vmov	ip, s15
 8014978:	fb9c fcf4 	sdiv	ip, ip, r4
 801497c:	fb0c 3306 	mla	r3, ip, r6, r3
 8014980:	9302      	str	r3, [sp, #8]
 8014982:	ee17 3a10 	vmov	r3, s14
 8014986:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 801498a:	fb07 3706 	mla	r7, r7, r6, r3
 801498e:	eba9 0306 	sub.w	r3, r9, r6
 8014992:	e9cd 4700 	strd	r4, r7, [sp]
 8014996:	f8da 4008 	ldr.w	r4, [sl, #8]
 801499a:	47a0      	blx	r4
 801499c:	b00d      	add	sp, #52	@ 0x34
 801499e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149a2:	2500      	movs	r5, #0
 80149a4:	462e      	mov	r6, r5
 80149a6:	e799      	b.n	80148dc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

080149a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80149a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149ac:	b0db      	sub	sp, #364	@ 0x16c
 80149ae:	461d      	mov	r5, r3
 80149b0:	4614      	mov	r4, r2
 80149b2:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 80149b6:	910f      	str	r1, [sp, #60]	@ 0x3c
 80149b8:	4629      	mov	r1, r5
 80149ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80149bc:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 80149c0:	9009      	str	r0, [sp, #36]	@ 0x24
 80149c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80149c4:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 80149c8:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 80149cc:	9310      	str	r3, [sp, #64]	@ 0x40
 80149ce:	6803      	ldr	r3, [r0, #0]
 80149d0:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 80149d2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 80149d6:	47b8      	blx	r7
 80149d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80149da:	6058      	str	r0, [r3, #4]
 80149dc:	2800      	cmp	r0, #0
 80149de:	f000 83a1 	beq.w	8015124 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80149e2:	682b      	ldr	r3, [r5, #0]
 80149e4:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 80149e8:	ed94 7a02 	vldr	s14, [r4, #8]
 80149ec:	9314      	str	r3, [sp, #80]	@ 0x50
 80149ee:	686b      	ldr	r3, [r5, #4]
 80149f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80149f4:	9315      	str	r3, [sp, #84]	@ 0x54
 80149f6:	4bc1      	ldr	r3, [pc, #772]	@ (8014cfc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 80149f8:	7819      	ldrb	r1, [r3, #0]
 80149fa:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 80149fe:	2900      	cmp	r1, #0
 8014a00:	bf16      	itet	ne
 8014a02:	4619      	movne	r1, r3
 8014a04:	4611      	moveq	r1, r2
 8014a06:	4613      	movne	r3, r2
 8014a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a0c:	9116      	str	r1, [sp, #88]	@ 0x58
 8014a0e:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 8014a12:	f240 8387 	bls.w	8015124 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014a16:	ed94 7a07 	vldr	s14, [r4, #28]
 8014a1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a22:	f240 837f 	bls.w	8015124 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014a26:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 8014a2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a32:	f240 8377 	bls.w	8015124 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014a36:	6822      	ldr	r2, [r4, #0]
 8014a38:	4bb1      	ldr	r3, [pc, #708]	@ (8014d00 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8014a3a:	429a      	cmp	r2, r3
 8014a3c:	f2c0 8372 	blt.w	8015124 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014a40:	49b0      	ldr	r1, [pc, #704]	@ (8014d04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8014a42:	6963      	ldr	r3, [r4, #20]
 8014a44:	428a      	cmp	r2, r1
 8014a46:	f300 836d 	bgt.w	8015124 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014a4a:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8014a4e:	48ae      	ldr	r0, [pc, #696]	@ (8014d08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8014a50:	33ff      	adds	r3, #255	@ 0xff
 8014a52:	4283      	cmp	r3, r0
 8014a54:	f200 8366 	bhi.w	8015124 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014a58:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8014a5a:	4dac      	ldr	r5, [pc, #688]	@ (8014d0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8014a5c:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8014a60:	33ff      	adds	r3, #255	@ 0xff
 8014a62:	42ab      	cmp	r3, r5
 8014a64:	f200 835e 	bhi.w	8015124 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014a68:	6862      	ldr	r2, [r4, #4]
 8014a6a:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 8014a6e:	33ff      	adds	r3, #255	@ 0xff
 8014a70:	4283      	cmp	r3, r0
 8014a72:	f200 8357 	bhi.w	8015124 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014a76:	69a1      	ldr	r1, [r4, #24]
 8014a78:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 8014a7c:	33ff      	adds	r3, #255	@ 0xff
 8014a7e:	4283      	cmp	r3, r0
 8014a80:	f200 8350 	bhi.w	8015124 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014a84:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8014a86:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 8014a8a:	30ff      	adds	r0, #255	@ 0xff
 8014a8c:	42a8      	cmp	r0, r5
 8014a8e:	f200 8349 	bhi.w	8015124 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014a92:	428a      	cmp	r2, r1
 8014a94:	f280 8110 	bge.w	8014cb8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8014a98:	429a      	cmp	r2, r3
 8014a9a:	f300 8119 	bgt.w	8014cd0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8014a9e:	4299      	cmp	r1, r3
 8014aa0:	f280 811d 	bge.w	8014cde <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8014aa4:	2502      	movs	r5, #2
 8014aa6:	2701      	movs	r7, #1
 8014aa8:	46a9      	mov	r9, r5
 8014aaa:	46b8      	mov	r8, r7
 8014aac:	f04f 0a00 	mov.w	sl, #0
 8014ab0:	4621      	mov	r1, r4
 8014ab2:	a849      	add	r0, sp, #292	@ 0x124
 8014ab4:	f003 fdfc 	bl	80186b0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8014ab8:	4622      	mov	r2, r4
 8014aba:	4653      	mov	r3, sl
 8014abc:	a949      	add	r1, sp, #292	@ 0x124
 8014abe:	f8cd 9000 	str.w	r9, [sp]
 8014ac2:	a819      	add	r0, sp, #100	@ 0x64
 8014ac4:	f003 ff24 	bl	8018910 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8014ac8:	4622      	mov	r2, r4
 8014aca:	4653      	mov	r3, sl
 8014acc:	a949      	add	r1, sp, #292	@ 0x124
 8014ace:	f8cd 8000 	str.w	r8, [sp]
 8014ad2:	a829      	add	r0, sp, #164	@ 0xa4
 8014ad4:	f003 ff1c 	bl	8018910 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8014ad8:	4643      	mov	r3, r8
 8014ada:	4622      	mov	r2, r4
 8014adc:	a949      	add	r1, sp, #292	@ 0x124
 8014ade:	f8cd 9000 	str.w	r9, [sp]
 8014ae2:	a839      	add	r0, sp, #228	@ 0xe4
 8014ae4:	f003 ff14 	bl	8018910 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8014ae8:	42af      	cmp	r7, r5
 8014aea:	af12      	add	r7, sp, #72	@ 0x48
 8014aec:	bfb7      	itett	lt
 8014aee:	2300      	movlt	r3, #0
 8014af0:	2301      	movge	r3, #1
 8014af2:	ad29      	addlt	r5, sp, #164	@ 0xa4
 8014af4:	ac19      	addlt	r4, sp, #100	@ 0x64
 8014af6:	bfb1      	iteee	lt
 8014af8:	930e      	strlt	r3, [sp, #56]	@ 0x38
 8014afa:	ad19      	addge	r5, sp, #100	@ 0x64
 8014afc:	930e      	strge	r3, [sp, #56]	@ 0x38
 8014afe:	ac29      	addge	r4, sp, #164	@ 0xa4
 8014b00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014b02:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014b06:	e887 0003 	stmia.w	r7, {r0, r1}
 8014b0a:	b928      	cbnz	r0, 8014b18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8014b0c:	4b80      	ldr	r3, [pc, #512]	@ (8014d10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8014b0e:	6818      	ldr	r0, [r3, #0]
 8014b10:	6803      	ldr	r3, [r0, #0]
 8014b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014b14:	4798      	blx	r3
 8014b16:	6038      	str	r0, [r7, #0]
 8014b18:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8014b1a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8014b1e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014b22:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 8014b24:	930c      	str	r3, [sp, #48]	@ 0x30
 8014b26:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014b28:	6963      	ldr	r3, [r4, #20]
 8014b2a:	440b      	add	r3, r1
 8014b2c:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8014b30:	4408      	add	r0, r1
 8014b32:	b200      	sxth	r0, r0
 8014b34:	4283      	cmp	r3, r0
 8014b36:	900d      	str	r0, [sp, #52]	@ 0x34
 8014b38:	f280 80dd 	bge.w	8014cf6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8014b3c:	428b      	cmp	r3, r1
 8014b3e:	da08      	bge.n	8014b52 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8014b40:	2a00      	cmp	r2, #0
 8014b42:	dd06      	ble.n	8014b52 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8014b44:	1acb      	subs	r3, r1, r3
 8014b46:	429a      	cmp	r2, r3
 8014b48:	f2c0 80e4 	blt.w	8014d14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8014b4c:	2b00      	cmp	r3, #0
 8014b4e:	f300 80e2 	bgt.w	8014d16 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8014b52:	6967      	ldr	r7, [r4, #20]
 8014b54:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8014b58:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014b5a:	443b      	add	r3, r7
 8014b5c:	461f      	mov	r7, r3
 8014b5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014b60:	1bdf      	subs	r7, r3, r7
 8014b62:	4297      	cmp	r7, r2
 8014b64:	bfa8      	it	ge
 8014b66:	4617      	movge	r7, r2
 8014b68:	2f00      	cmp	r7, #0
 8014b6a:	f340 8166 	ble.w	8014e3a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8014b6e:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8014b70:	6829      	ldr	r1, [r5, #0]
 8014b72:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014b76:	f9bb 3000 	ldrsh.w	r3, [fp]
 8014b7a:	4411      	add	r1, r2
 8014b7c:	6820      	ldr	r0, [r4, #0]
 8014b7e:	4299      	cmp	r1, r3
 8014b80:	dd1a      	ble.n	8014bb8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8014b82:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8014b86:	4402      	add	r2, r0
 8014b88:	440b      	add	r3, r1
 8014b8a:	b21b      	sxth	r3, r3
 8014b8c:	429a      	cmp	r2, r3
 8014b8e:	dc13      	bgt.n	8014bb8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8014b90:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8014b92:	a912      	add	r1, sp, #72	@ 0x48
 8014b94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014b96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014b98:	681b      	ldr	r3, [r3, #0]
 8014b9a:	9206      	str	r2, [sp, #24]
 8014b9c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8014b9e:	9500      	str	r5, [sp, #0]
 8014ba0:	9205      	str	r2, [sp, #20]
 8014ba2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014ba4:	e9cd b203 	strd	fp, r2, [sp, #12]
 8014ba8:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8014baa:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8014bae:	aa49      	add	r2, sp, #292	@ 0x124
 8014bb0:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8014bb4:	4623      	mov	r3, r4
 8014bb6:	47c8      	blx	r9
 8014bb8:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8014bbc:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8014bc0:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8014bc4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014bc8:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8014bcc:	68a1      	ldr	r1, [r4, #8]
 8014bce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014bd2:	ed94 6a08 	vldr	s12, [r4, #32]
 8014bd6:	edd4 6a07 	vldr	s13, [r4, #28]
 8014bda:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8014bde:	ee76 6a86 	vadd.f32	s13, s13, s12
 8014be2:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8014be6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014bea:	edc4 6a07 	vstr	s13, [r4, #28]
 8014bee:	441a      	add	r2, r3
 8014bf0:	6963      	ldr	r3, [r4, #20]
 8014bf2:	3301      	adds	r3, #1
 8014bf4:	6022      	str	r2, [r4, #0]
 8014bf6:	6163      	str	r3, [r4, #20]
 8014bf8:	69a3      	ldr	r3, [r4, #24]
 8014bfa:	3b01      	subs	r3, #1
 8014bfc:	61a3      	str	r3, [r4, #24]
 8014bfe:	6923      	ldr	r3, [r4, #16]
 8014c00:	440b      	add	r3, r1
 8014c02:	68e1      	ldr	r1, [r4, #12]
 8014c04:	428b      	cmp	r3, r1
 8014c06:	6123      	str	r3, [r4, #16]
 8014c08:	db15      	blt.n	8014c36 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8014c0a:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8014c0e:	3201      	adds	r2, #1
 8014c10:	1a5b      	subs	r3, r3, r1
 8014c12:	ee76 6a26 	vadd.f32	s13, s12, s13
 8014c16:	6022      	str	r2, [r4, #0]
 8014c18:	6123      	str	r3, [r4, #16]
 8014c1a:	edc4 6a07 	vstr	s13, [r4, #28]
 8014c1e:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8014c22:	ee36 7a87 	vadd.f32	s14, s13, s14
 8014c26:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8014c2a:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8014c2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014c32:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8014c36:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8014c3a:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8014c3e:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8014c42:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014c46:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8014c4a:	68a9      	ldr	r1, [r5, #8]
 8014c4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014c50:	ed95 6a08 	vldr	s12, [r5, #32]
 8014c54:	edd5 6a07 	vldr	s13, [r5, #28]
 8014c58:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8014c5c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8014c60:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8014c64:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014c68:	edc5 6a07 	vstr	s13, [r5, #28]
 8014c6c:	441a      	add	r2, r3
 8014c6e:	696b      	ldr	r3, [r5, #20]
 8014c70:	3301      	adds	r3, #1
 8014c72:	602a      	str	r2, [r5, #0]
 8014c74:	616b      	str	r3, [r5, #20]
 8014c76:	69ab      	ldr	r3, [r5, #24]
 8014c78:	3b01      	subs	r3, #1
 8014c7a:	61ab      	str	r3, [r5, #24]
 8014c7c:	692b      	ldr	r3, [r5, #16]
 8014c7e:	440b      	add	r3, r1
 8014c80:	68e9      	ldr	r1, [r5, #12]
 8014c82:	428b      	cmp	r3, r1
 8014c84:	612b      	str	r3, [r5, #16]
 8014c86:	db15      	blt.n	8014cb4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8014c88:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8014c8c:	3201      	adds	r2, #1
 8014c8e:	1a5b      	subs	r3, r3, r1
 8014c90:	ee76 6a26 	vadd.f32	s13, s12, s13
 8014c94:	602a      	str	r2, [r5, #0]
 8014c96:	612b      	str	r3, [r5, #16]
 8014c98:	edc5 6a07 	vstr	s13, [r5, #28]
 8014c9c:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8014ca0:	ee36 7a87 	vadd.f32	s14, s13, s14
 8014ca4:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8014ca8:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 8014cac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014cb0:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8014cb4:	3f01      	subs	r7, #1
 8014cb6:	e757      	b.n	8014b68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8014cb8:	4299      	cmp	r1, r3
 8014cba:	dc13      	bgt.n	8014ce4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8014cbc:	429a      	cmp	r2, r3
 8014cbe:	da14      	bge.n	8014cea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8014cc0:	2502      	movs	r5, #2
 8014cc2:	2703      	movs	r7, #3
 8014cc4:	f04f 0800 	mov.w	r8, #0
 8014cc8:	46a9      	mov	r9, r5
 8014cca:	f04f 0a01 	mov.w	sl, #1
 8014cce:	e6ef      	b.n	8014ab0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8014cd0:	2501      	movs	r5, #1
 8014cd2:	2700      	movs	r7, #0
 8014cd4:	46a9      	mov	r9, r5
 8014cd6:	46b8      	mov	r8, r7
 8014cd8:	f04f 0a02 	mov.w	sl, #2
 8014cdc:	e6e8      	b.n	8014ab0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8014cde:	2501      	movs	r5, #1
 8014ce0:	2702      	movs	r7, #2
 8014ce2:	e6e1      	b.n	8014aa8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8014ce4:	2500      	movs	r5, #0
 8014ce6:	2701      	movs	r7, #1
 8014ce8:	e7f4      	b.n	8014cd4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8014cea:	2702      	movs	r7, #2
 8014cec:	2503      	movs	r5, #3
 8014cee:	f04f 0900 	mov.w	r9, #0
 8014cf2:	46b8      	mov	r8, r7
 8014cf4:	e7e9      	b.n	8014cca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8014cf6:	4613      	mov	r3, r2
 8014cf8:	e728      	b.n	8014b4c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8014cfa:	bf00      	nop
 8014cfc:	20027b8c 	.word	0x20027b8c
 8014d00:	fffd8f01 	.word	0xfffd8f01
 8014d04:	00027100 	.word	0x00027100
 8014d08:	0004e1ff 	.word	0x0004e1ff
 8014d0c:	0004e1fe 	.word	0x0004e1fe
 8014d10:	20027b94 	.word	0x20027b94
 8014d14:	4613      	mov	r3, r2
 8014d16:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8014d18:	469e      	mov	lr, r3
 8014d1a:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 8014d1c:	469c      	mov	ip, r3
 8014d1e:	9111      	str	r1, [sp, #68]	@ 0x44
 8014d20:	f04f 0900 	mov.w	r9, #0
 8014d24:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 8014d28:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 8014d2c:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 8014d30:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 8014d34:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 8014d38:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8014d3c:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 8014d40:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 8014d44:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 8014d48:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 8014d4c:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 8014d50:	f1bc 0f00 	cmp.w	ip, #0
 8014d54:	d147      	bne.n	8014de6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8014d56:	eb03 0c07 	add.w	ip, r3, r7
 8014d5a:	1ad7      	subs	r7, r2, r3
 8014d5c:	f1b9 0f00 	cmp.w	r9, #0
 8014d60:	d009      	beq.n	8014d76 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8014d62:	9029      	str	r0, [sp, #164]	@ 0xa4
 8014d64:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 8014d68:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 8014d6c:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 8014d70:	912d      	str	r1, [sp, #180]	@ 0xb4
 8014d72:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 8014d76:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8014d78:	f04f 0800 	mov.w	r8, #0
 8014d7c:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8014d80:	9111      	str	r1, [sp, #68]	@ 0x44
 8014d82:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 8014d86:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 8014d8a:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 8014d8e:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 8014d92:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 8014d96:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 8014d9a:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 8014d9e:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 8014da2:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 8014da6:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 8014daa:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 8014dae:	f1be 0f00 	cmp.w	lr, #0
 8014db2:	d031      	beq.n	8014e18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8014db4:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8014db6:	4450      	add	r0, sl
 8014db8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8014dbc:	4431      	add	r1, r6
 8014dbe:	ee37 7a04 	vadd.f32	s14, s14, s8
 8014dc2:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8014dc6:	4549      	cmp	r1, r9
 8014dc8:	db08      	blt.n	8014ddc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8014dca:	ee77 7a85 	vadd.f32	s15, s15, s10
 8014dce:	3001      	adds	r0, #1
 8014dd0:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8014dd4:	eba1 0109 	sub.w	r1, r1, r9
 8014dd8:	ee37 7a06 	vadd.f32	s14, s14, s12
 8014ddc:	f10e 3eff 	add.w	lr, lr, #4294967295
 8014de0:	f04f 0801 	mov.w	r8, #1
 8014de4:	e7e3      	b.n	8014dae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8014de6:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8014de8:	4450      	add	r0, sl
 8014dea:	ee37 7a24 	vadd.f32	s14, s14, s9
 8014dee:	4431      	add	r1, r6
 8014df0:	ee77 7a84 	vadd.f32	s15, s15, s8
 8014df4:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8014df8:	4541      	cmp	r1, r8
 8014dfa:	db08      	blt.n	8014e0e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8014dfc:	ee76 6a85 	vadd.f32	s13, s13, s10
 8014e00:	3001      	adds	r0, #1
 8014e02:	ee37 7a25 	vadd.f32	s14, s14, s11
 8014e06:	eba1 0108 	sub.w	r1, r1, r8
 8014e0a:	ee77 7a86 	vadd.f32	s15, s15, s12
 8014e0e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8014e12:	f04f 0901 	mov.w	r9, #1
 8014e16:	e79b      	b.n	8014d50 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8014e18:	449c      	add	ip, r3
 8014e1a:	1aff      	subs	r7, r7, r3
 8014e1c:	f1b8 0f00 	cmp.w	r8, #0
 8014e20:	d009      	beq.n	8014e36 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8014e22:	9019      	str	r0, [sp, #100]	@ 0x64
 8014e24:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 8014e28:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 8014e2c:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 8014e30:	911d      	str	r1, [sp, #116]	@ 0x74
 8014e32:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 8014e36:	1ad2      	subs	r2, r2, r3
 8014e38:	e68b      	b.n	8014b52 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8014e3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014e3c:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 8014e3e:	2b00      	cmp	r3, #0
 8014e40:	f000 80d1 	beq.w	8014fe6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8014e44:	ad19      	add	r5, sp, #100	@ 0x64
 8014e46:	ac39      	add	r4, sp, #228	@ 0xe4
 8014e48:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8014e4a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8014e4e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014e52:	930c      	str	r3, [sp, #48]	@ 0x30
 8014e54:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014e56:	6963      	ldr	r3, [r4, #20]
 8014e58:	440b      	add	r3, r1
 8014e5a:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8014e5e:	4408      	add	r0, r1
 8014e60:	b200      	sxth	r0, r0
 8014e62:	4283      	cmp	r3, r0
 8014e64:	900d      	str	r0, [sp, #52]	@ 0x34
 8014e66:	f280 80c1 	bge.w	8014fec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8014e6a:	428b      	cmp	r3, r1
 8014e6c:	da08      	bge.n	8014e80 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8014e6e:	2a00      	cmp	r2, #0
 8014e70:	dd06      	ble.n	8014e80 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8014e72:	1acb      	subs	r3, r1, r3
 8014e74:	429a      	cmp	r2, r3
 8014e76:	f2c0 80bb 	blt.w	8014ff0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	f300 80b9 	bgt.w	8014ff2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8014e80:	6967      	ldr	r7, [r4, #20]
 8014e82:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8014e86:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014e88:	443b      	add	r3, r7
 8014e8a:	461f      	mov	r7, r3
 8014e8c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014e8e:	1bdf      	subs	r7, r3, r7
 8014e90:	4297      	cmp	r7, r2
 8014e92:	bfa8      	it	ge
 8014e94:	4617      	movge	r7, r2
 8014e96:	2f00      	cmp	r7, #0
 8014e98:	f340 813c 	ble.w	8015114 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8014e9c:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8014e9e:	6829      	ldr	r1, [r5, #0]
 8014ea0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014ea4:	f9bb 3000 	ldrsh.w	r3, [fp]
 8014ea8:	4411      	add	r1, r2
 8014eaa:	6820      	ldr	r0, [r4, #0]
 8014eac:	4299      	cmp	r1, r3
 8014eae:	dd1a      	ble.n	8014ee6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8014eb0:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8014eb4:	4402      	add	r2, r0
 8014eb6:	440b      	add	r3, r1
 8014eb8:	b21b      	sxth	r3, r3
 8014eba:	429a      	cmp	r2, r3
 8014ebc:	dc13      	bgt.n	8014ee6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8014ebe:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8014ec0:	a912      	add	r1, sp, #72	@ 0x48
 8014ec2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014ec4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014ec6:	681b      	ldr	r3, [r3, #0]
 8014ec8:	9206      	str	r2, [sp, #24]
 8014eca:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8014ecc:	9500      	str	r5, [sp, #0]
 8014ece:	9205      	str	r2, [sp, #20]
 8014ed0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014ed2:	e9cd b203 	strd	fp, r2, [sp, #12]
 8014ed6:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8014ed8:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8014edc:	aa49      	add	r2, sp, #292	@ 0x124
 8014ede:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8014ee2:	4623      	mov	r3, r4
 8014ee4:	47c8      	blx	r9
 8014ee6:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8014eea:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8014eee:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8014ef2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014ef6:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8014efa:	68a1      	ldr	r1, [r4, #8]
 8014efc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014f00:	ed94 6a08 	vldr	s12, [r4, #32]
 8014f04:	edd4 6a07 	vldr	s13, [r4, #28]
 8014f08:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8014f0c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8014f10:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8014f14:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014f18:	edc4 6a07 	vstr	s13, [r4, #28]
 8014f1c:	441a      	add	r2, r3
 8014f1e:	6963      	ldr	r3, [r4, #20]
 8014f20:	3301      	adds	r3, #1
 8014f22:	6022      	str	r2, [r4, #0]
 8014f24:	6163      	str	r3, [r4, #20]
 8014f26:	69a3      	ldr	r3, [r4, #24]
 8014f28:	3b01      	subs	r3, #1
 8014f2a:	61a3      	str	r3, [r4, #24]
 8014f2c:	6923      	ldr	r3, [r4, #16]
 8014f2e:	440b      	add	r3, r1
 8014f30:	68e1      	ldr	r1, [r4, #12]
 8014f32:	428b      	cmp	r3, r1
 8014f34:	6123      	str	r3, [r4, #16]
 8014f36:	db15      	blt.n	8014f64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8014f38:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8014f3c:	3201      	adds	r2, #1
 8014f3e:	1a5b      	subs	r3, r3, r1
 8014f40:	ee76 6a26 	vadd.f32	s13, s12, s13
 8014f44:	6022      	str	r2, [r4, #0]
 8014f46:	6123      	str	r3, [r4, #16]
 8014f48:	edc4 6a07 	vstr	s13, [r4, #28]
 8014f4c:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8014f50:	ee36 7a87 	vadd.f32	s14, s13, s14
 8014f54:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8014f58:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8014f5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014f60:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8014f64:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8014f68:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8014f6c:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8014f70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014f74:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8014f78:	68a9      	ldr	r1, [r5, #8]
 8014f7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014f7e:	ed95 6a08 	vldr	s12, [r5, #32]
 8014f82:	edd5 6a07 	vldr	s13, [r5, #28]
 8014f86:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8014f8a:	ee76 6a86 	vadd.f32	s13, s13, s12
 8014f8e:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8014f92:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014f96:	edc5 6a07 	vstr	s13, [r5, #28]
 8014f9a:	441a      	add	r2, r3
 8014f9c:	696b      	ldr	r3, [r5, #20]
 8014f9e:	3301      	adds	r3, #1
 8014fa0:	602a      	str	r2, [r5, #0]
 8014fa2:	616b      	str	r3, [r5, #20]
 8014fa4:	69ab      	ldr	r3, [r5, #24]
 8014fa6:	3b01      	subs	r3, #1
 8014fa8:	61ab      	str	r3, [r5, #24]
 8014faa:	692b      	ldr	r3, [r5, #16]
 8014fac:	440b      	add	r3, r1
 8014fae:	68e9      	ldr	r1, [r5, #12]
 8014fb0:	428b      	cmp	r3, r1
 8014fb2:	612b      	str	r3, [r5, #16]
 8014fb4:	db15      	blt.n	8014fe2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8014fb6:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8014fba:	3201      	adds	r2, #1
 8014fbc:	1a5b      	subs	r3, r3, r1
 8014fbe:	ee76 6a26 	vadd.f32	s13, s12, s13
 8014fc2:	602a      	str	r2, [r5, #0]
 8014fc4:	612b      	str	r3, [r5, #16]
 8014fc6:	edc5 6a07 	vstr	s13, [r5, #28]
 8014fca:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8014fce:	ee36 7a87 	vadd.f32	s14, s13, s14
 8014fd2:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8014fd6:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 8014fda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014fde:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8014fe2:	3f01      	subs	r7, #1
 8014fe4:	e757      	b.n	8014e96 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8014fe6:	ad39      	add	r5, sp, #228	@ 0xe4
 8014fe8:	ac19      	add	r4, sp, #100	@ 0x64
 8014fea:	e72d      	b.n	8014e48 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8014fec:	4613      	mov	r3, r2
 8014fee:	e744      	b.n	8014e7a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8014ff0:	4613      	mov	r3, r2
 8014ff2:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 8014ff4:	469e      	mov	lr, r3
 8014ff6:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 8014ffa:	461f      	mov	r7, r3
 8014ffc:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 8015000:	f04f 0900 	mov.w	r9, #0
 8015004:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 8015008:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 801500c:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 8015010:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 8015014:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 8015018:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 801501a:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 801501e:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 8015022:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 8015026:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 801502a:	960e      	str	r6, [sp, #56]	@ 0x38
 801502c:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 8015030:	2f00      	cmp	r7, #0
 8015032:	d146      	bne.n	80150c2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8015034:	449c      	add	ip, r3
 8015036:	1ad7      	subs	r7, r2, r3
 8015038:	f1b9 0f00 	cmp.w	r9, #0
 801503c:	d009      	beq.n	8015052 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801503e:	9039      	str	r0, [sp, #228]	@ 0xe4
 8015040:	913d      	str	r1, [sp, #244]	@ 0xf4
 8015042:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 8015046:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 801504a:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 801504e:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 8015052:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8015054:	f04f 0800 	mov.w	r8, #0
 8015058:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 801505c:	910e      	str	r1, [sp, #56]	@ 0x38
 801505e:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 8015062:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 8015066:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 801506a:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 801506e:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 8015072:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 8015076:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 801507a:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 801507e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 8015082:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 8015086:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 801508a:	f1be 0f00 	cmp.w	lr, #0
 801508e:	d030      	beq.n	80150f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8015090:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8015092:	4450      	add	r0, sl
 8015094:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8015098:	4431      	add	r1, r6
 801509a:	ee37 7a04 	vadd.f32	s14, s14, s8
 801509e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80150a2:	4549      	cmp	r1, r9
 80150a4:	db08      	blt.n	80150b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 80150a6:	ee77 7a85 	vadd.f32	s15, s15, s10
 80150aa:	3001      	adds	r0, #1
 80150ac:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80150b0:	eba1 0109 	sub.w	r1, r1, r9
 80150b4:	ee37 7a06 	vadd.f32	s14, s14, s12
 80150b8:	f10e 3eff 	add.w	lr, lr, #4294967295
 80150bc:	f04f 0801 	mov.w	r8, #1
 80150c0:	e7e3      	b.n	801508a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 80150c2:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 80150c4:	4450      	add	r0, sl
 80150c6:	ee37 7a24 	vadd.f32	s14, s14, s9
 80150ca:	4431      	add	r1, r6
 80150cc:	ee77 7a84 	vadd.f32	s15, s15, s8
 80150d0:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80150d4:	4541      	cmp	r1, r8
 80150d6:	db08      	blt.n	80150ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 80150d8:	ee76 6a85 	vadd.f32	s13, s13, s10
 80150dc:	3001      	adds	r0, #1
 80150de:	ee37 7a25 	vadd.f32	s14, s14, s11
 80150e2:	eba1 0108 	sub.w	r1, r1, r8
 80150e6:	ee77 7a86 	vadd.f32	s15, s15, s12
 80150ea:	3f01      	subs	r7, #1
 80150ec:	f04f 0901 	mov.w	r9, #1
 80150f0:	e79e      	b.n	8015030 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 80150f2:	449c      	add	ip, r3
 80150f4:	1aff      	subs	r7, r7, r3
 80150f6:	f1b8 0f00 	cmp.w	r8, #0
 80150fa:	d009      	beq.n	8015110 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 80150fc:	9019      	str	r0, [sp, #100]	@ 0x64
 80150fe:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 8015102:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 8015106:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 801510a:	911d      	str	r1, [sp, #116]	@ 0x74
 801510c:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 8015110:	1ad2      	subs	r2, r2, r3
 8015112:	e6b5      	b.n	8014e80 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8015114:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015116:	681b      	ldr	r3, [r3, #0]
 8015118:	b923      	cbnz	r3, 8015124 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801511a:	4b04      	ldr	r3, [pc, #16]	@ (801512c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 801511c:	6818      	ldr	r0, [r3, #0]
 801511e:	6803      	ldr	r3, [r0, #0]
 8015120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015122:	4798      	blx	r3
 8015124:	b05b      	add	sp, #364	@ 0x16c
 8015126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801512a:	bf00      	nop
 801512c:	20027b94 	.word	0x20027b94

08015130 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 8015130:	b570      	push	{r4, r5, r6, lr}
 8015132:	4604      	mov	r4, r0
 8015134:	2500      	movs	r5, #0
 8015136:	9805      	ldr	r0, [sp, #20]
 8015138:	f89d 601c 	ldrb.w	r6, [sp, #28]
 801513c:	6061      	str	r1, [r4, #4]
 801513e:	8263      	strh	r3, [r4, #18]
 8015140:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8015144:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8015148:	8025      	strh	r5, [r4, #0]
 801514a:	7221      	strb	r1, [r4, #8]
 801514c:	7266      	strb	r6, [r4, #9]
 801514e:	60e0      	str	r0, [r4, #12]
 8015150:	8222      	strh	r2, [r4, #16]
 8015152:	82a3      	strh	r3, [r4, #20]
 8015154:	82e5      	strh	r5, [r4, #22]
 8015156:	8325      	strh	r5, [r4, #24]
 8015158:	8365      	strh	r5, [r4, #26]
 801515a:	83a5      	strh	r5, [r4, #28]
 801515c:	83e5      	strh	r5, [r4, #30]
 801515e:	8425      	strh	r5, [r4, #32]
 8015160:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
 8015164:	b32e      	cbz	r6, 80151b2 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8015166:	6803      	ldr	r3, [r0, #0]
 8015168:	695b      	ldr	r3, [r3, #20]
 801516a:	4798      	blx	r3
 801516c:	4606      	mov	r6, r0
 801516e:	b300      	cbz	r0, 80151b2 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8015170:	68e0      	ldr	r0, [r4, #12]
 8015172:	4631      	mov	r1, r6
 8015174:	6803      	ldr	r3, [r0, #0]
 8015176:	68db      	ldr	r3, [r3, #12]
 8015178:	4798      	blx	r3
 801517a:	4605      	mov	r5, r0
 801517c:	b1c8      	cbz	r0, 80151b2 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801517e:	7b43      	ldrb	r3, [r0, #13]
 8015180:	7a82      	ldrb	r2, [r0, #10]
 8015182:	005b      	lsls	r3, r3, #1
 8015184:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015188:	4313      	orrs	r3, r2
 801518a:	8423      	strh	r3, [r4, #32]
 801518c:	7a63      	ldrb	r3, [r4, #9]
 801518e:	2b06      	cmp	r3, #6
 8015190:	d10f      	bne.n	80151b2 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8015192:	68e0      	ldr	r0, [r4, #12]
 8015194:	462a      	mov	r2, r5
 8015196:	4631      	mov	r1, r6
 8015198:	6803      	ldr	r3, [r0, #0]
 801519a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801519c:	4798      	blx	r3
 801519e:	7b6b      	ldrb	r3, [r5, #13]
 80151a0:	005b      	lsls	r3, r3, #1
 80151a2:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80151a6:	7aab      	ldrb	r3, [r5, #10]
 80151a8:	4313      	orrs	r3, r2
 80151aa:	4418      	add	r0, r3
 80151ac:	8c23      	ldrh	r3, [r4, #32]
 80151ae:	4418      	add	r0, r3
 80151b0:	8420      	strh	r0, [r4, #32]
 80151b2:	4620      	mov	r0, r4
 80151b4:	bd70      	pop	{r4, r5, r6, pc}

080151b6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 80151b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151ba:	2400      	movs	r4, #0
 80151bc:	b085      	sub	sp, #20
 80151be:	4681      	mov	r9, r0
 80151c0:	4688      	mov	r8, r1
 80151c2:	4692      	mov	sl, r2
 80151c4:	469b      	mov	fp, r3
 80151c6:	4627      	mov	r7, r4
 80151c8:	4625      	mov	r5, r4
 80151ca:	4626      	mov	r6, r4
 80151cc:	4554      	cmp	r4, sl
 80151ce:	da2a      	bge.n	8015226 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80151d0:	2300      	movs	r3, #0
 80151d2:	9303      	str	r3, [sp, #12]
 80151d4:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 80151d8:	429d      	cmp	r5, r3
 80151da:	d004      	beq.n	80151e6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 80151dc:	f242 030b 	movw	r3, #8203	@ 0x200b
 80151e0:	429d      	cmp	r5, r3
 80151e2:	bf18      	it	ne
 80151e4:	462f      	movne	r7, r5
 80151e6:	ab03      	add	r3, sp, #12
 80151e8:	4642      	mov	r2, r8
 80151ea:	4659      	mov	r1, fp
 80151ec:	4648      	mov	r0, r9
 80151ee:	f003 f875 	bl	80182dc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80151f2:	4605      	mov	r5, r0
 80151f4:	b1b8      	cbz	r0, 8015226 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80151f6:	280a      	cmp	r0, #10
 80151f8:	d015      	beq.n	8015226 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80151fa:	9a03      	ldr	r2, [sp, #12]
 80151fc:	b18a      	cbz	r2, 8015222 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 80151fe:	7b50      	ldrb	r0, [r2, #13]
 8015200:	4639      	mov	r1, r7
 8015202:	7a93      	ldrb	r3, [r2, #10]
 8015204:	0040      	lsls	r0, r0, #1
 8015206:	8895      	ldrh	r5, [r2, #4]
 8015208:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 801520c:	4303      	orrs	r3, r0
 801520e:	4640      	mov	r0, r8
 8015210:	9301      	str	r3, [sp, #4]
 8015212:	f8d8 3000 	ldr.w	r3, [r8]
 8015216:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015218:	4798      	blx	r3
 801521a:	9b01      	ldr	r3, [sp, #4]
 801521c:	4418      	add	r0, r3
 801521e:	4406      	add	r6, r0
 8015220:	b2b6      	uxth	r6, r6
 8015222:	3401      	adds	r4, #1
 8015224:	e7d2      	b.n	80151cc <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 8015226:	4630      	mov	r0, r6
 8015228:	b005      	add	sp, #20
 801522a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801522e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801522e:	2a02      	cmp	r2, #2
 8015230:	b530      	push	{r4, r5, lr}
 8015232:	d011      	beq.n	8015258 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8015234:	2a03      	cmp	r2, #3
 8015236:	d01c      	beq.n	8015272 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8015238:	2a01      	cmp	r2, #1
 801523a:	d10c      	bne.n	8015256 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801523c:	888b      	ldrh	r3, [r1, #4]
 801523e:	8801      	ldrh	r1, [r0, #0]
 8015240:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8015244:	1a5b      	subs	r3, r3, r1
 8015246:	8844      	ldrh	r4, [r0, #2]
 8015248:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801524c:	1a9b      	subs	r3, r3, r2
 801524e:	8004      	strh	r4, [r0, #0]
 8015250:	8081      	strh	r1, [r0, #4]
 8015252:	8043      	strh	r3, [r0, #2]
 8015254:	80c2      	strh	r2, [r0, #6]
 8015256:	bd30      	pop	{r4, r5, pc}
 8015258:	88cb      	ldrh	r3, [r1, #6]
 801525a:	8842      	ldrh	r2, [r0, #2]
 801525c:	1a9b      	subs	r3, r3, r2
 801525e:	88c2      	ldrh	r2, [r0, #6]
 8015260:	1a9b      	subs	r3, r3, r2
 8015262:	888a      	ldrh	r2, [r1, #4]
 8015264:	8801      	ldrh	r1, [r0, #0]
 8015266:	8043      	strh	r3, [r0, #2]
 8015268:	1a52      	subs	r2, r2, r1
 801526a:	8881      	ldrh	r1, [r0, #4]
 801526c:	1a52      	subs	r2, r2, r1
 801526e:	8002      	strh	r2, [r0, #0]
 8015270:	e7f1      	b.n	8015256 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8015272:	88cb      	ldrh	r3, [r1, #6]
 8015274:	8841      	ldrh	r1, [r0, #2]
 8015276:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801527a:	1a5b      	subs	r3, r3, r1
 801527c:	f9b0 5000 	ldrsh.w	r5, [r0]
 8015280:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8015284:	1a9b      	subs	r3, r3, r2
 8015286:	8045      	strh	r5, [r0, #2]
 8015288:	8082      	strh	r2, [r0, #4]
 801528a:	8003      	strh	r3, [r0, #0]
 801528c:	80c4      	strh	r4, [r0, #6]
 801528e:	e7e2      	b.n	8015256 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08015290 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8015290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015294:	b09f      	sub	sp, #124	@ 0x7c
 8015296:	9116      	str	r1, [sp, #88]	@ 0x58
 8015298:	9317      	str	r3, [sp, #92]	@ 0x5c
 801529a:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 801529c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801529e:	8809      	ldrh	r1, [r1, #0]
 80152a0:	889b      	ldrh	r3, [r3, #4]
 80152a2:	f8dd 80a8 	ldr.w	r8, [sp, #168]	@ 0xa8
 80152a6:	440b      	add	r3, r1
 80152a8:	9212      	str	r2, [sp, #72]	@ 0x48
 80152aa:	f89d 20b8 	ldrb.w	r2, [sp, #184]	@ 0xb8
 80152ae:	b21b      	sxth	r3, r3
 80152b0:	9011      	str	r0, [sp, #68]	@ 0x44
 80152b2:	f89d b0ac 	ldrb.w	fp, [sp, #172]	@ 0xac
 80152b6:	9310      	str	r3, [sp, #64]	@ 0x40
 80152b8:	f8d8 3000 	ldr.w	r3, [r8]
 80152bc:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	@ 0xa0
 80152c0:	7b19      	ldrb	r1, [r3, #12]
 80152c2:	7adb      	ldrb	r3, [r3, #11]
 80152c4:	9114      	str	r1, [sp, #80]	@ 0x50
 80152c6:	9315      	str	r3, [sp, #84]	@ 0x54
 80152c8:	2a00      	cmp	r2, #0
 80152ca:	d06a      	beq.n	80153a2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 80152cc:	f898 3010 	ldrb.w	r3, [r8, #16]
 80152d0:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 80152d2:	2b06      	cmp	r3, #6
 80152d4:	bf14      	ite	ne
 80152d6:	2301      	movne	r3, #1
 80152d8:	2302      	moveq	r3, #2
 80152da:	4413      	add	r3, r2
 80152dc:	f04f 0900 	mov.w	r9, #0
 80152e0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80152e2:	464c      	mov	r4, r9
 80152e4:	f8cd 9038 	str.w	r9, [sp, #56]	@ 0x38
 80152e8:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 80152ec:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	@ 0x38
 80152f0:	4293      	cmp	r3, r2
 80152f2:	f280 808f 	bge.w	8015414 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 80152f6:	2300      	movs	r3, #0
 80152f8:	e9cd 331c 	strd	r3, r3, [sp, #112]	@ 0x70
 80152fc:	f88d 306f 	strb.w	r3, [sp, #111]	@ 0x6f
 8015300:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8015304:	429c      	cmp	r4, r3
 8015306:	d006      	beq.n	8015316 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 8015308:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801530a:	f242 020b 	movw	r2, #8203	@ 0x200b
 801530e:	4294      	cmp	r4, r2
 8015310:	bf18      	it	ne
 8015312:	4623      	movne	r3, r4
 8015314:	930d      	str	r3, [sp, #52]	@ 0x34
 8015316:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015318:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 801531a:	f8d8 2000 	ldr.w	r2, [r8]
 801531e:	428b      	cmp	r3, r1
 8015320:	db41      	blt.n	80153a6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 8015322:	6813      	ldr	r3, [r2, #0]
 8015324:	4610      	mov	r0, r2
 8015326:	695b      	ldr	r3, [r3, #20]
 8015328:	4798      	blx	r3
 801532a:	4604      	mov	r4, r0
 801532c:	f8d8 0000 	ldr.w	r0, [r8]
 8015330:	aa1d      	add	r2, sp, #116	@ 0x74
 8015332:	4621      	mov	r1, r4
 8015334:	6803      	ldr	r3, [r0, #0]
 8015336:	689d      	ldr	r5, [r3, #8]
 8015338:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 801533c:	47a8      	blx	r5
 801533e:	901c      	str	r0, [sp, #112]	@ 0x70
 8015340:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8015344:	429c      	cmp	r4, r3
 8015346:	f000 80ec 	beq.w	8015522 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801534a:	f242 030b 	movw	r3, #8203	@ 0x200b
 801534e:	429c      	cmp	r4, r3
 8015350:	f000 80e7 	beq.w	8015522 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8015354:	2c00      	cmp	r4, #0
 8015356:	f000 80f9 	beq.w	801554c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 801535a:	2c0a      	cmp	r4, #10
 801535c:	d060      	beq.n	8015420 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 801535e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8015360:	b36a      	cbz	r2, 80153be <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 8015362:	8894      	ldrh	r4, [r2, #4]
 8015364:	f1bb 0f00 	cmp.w	fp, #0
 8015368:	d03b      	beq.n	80153e2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 801536a:	f892 900d 	ldrb.w	r9, [r2, #13]
 801536e:	f1bb 0f01 	cmp.w	fp, #1
 8015372:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8015376:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 801537a:	f892 900a 	ldrb.w	r9, [r2, #10]
 801537e:	ea49 0903 	orr.w	r9, r9, r3
 8015382:	d134      	bne.n	80153ee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
 8015384:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015386:	eba6 0609 	sub.w	r6, r6, r9
 801538a:	2b00      	cmp	r3, #0
 801538c:	d14f      	bne.n	801542e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 801538e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8015390:	eb09 0306 	add.w	r3, r9, r6
 8015394:	4413      	add	r3, r2
 8015396:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8015398:	f9b2 2000 	ldrsh.w	r2, [r2]
 801539c:	4293      	cmp	r3, r2
 801539e:	da51      	bge.n	8015444 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 80153a0:	e038      	b.n	8015414 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 80153a2:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 80153a4:	e79a      	b.n	80152dc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
 80153a6:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 80153aa:	4659      	mov	r1, fp
 80153ac:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 80153ae:	9301      	str	r3, [sp, #4]
 80153b0:	ab1d      	add	r3, sp, #116	@ 0x74
 80153b2:	9300      	str	r3, [sp, #0]
 80153b4:	ab1c      	add	r3, sp, #112	@ 0x70
 80153b6:	f002 ffda 	bl	801836e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 80153ba:	4604      	mov	r4, r0
 80153bc:	e7c0      	b.n	8015340 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 80153be:	f8d8 0000 	ldr.w	r0, [r8]
 80153c2:	6803      	ldr	r3, [r0, #0]
 80153c4:	691b      	ldr	r3, [r3, #16]
 80153c6:	4798      	blx	r3
 80153c8:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 80153cc:	4298      	cmp	r0, r3
 80153ce:	f000 80a8 	beq.w	8015522 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 80153d2:	f242 030b 	movw	r3, #8203	@ 0x200b
 80153d6:	4298      	cmp	r0, r3
 80153d8:	f000 80a3 	beq.w	8015522 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 80153dc:	f1bb 0f00 	cmp.w	fp, #0
 80153e0:	d100      	bne.n	80153e4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 80153e2:	444e      	add	r6, r9
 80153e4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80153e6:	2a00      	cmp	r2, #0
 80153e8:	d1bf      	bne.n	801536a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 80153ea:	4691      	mov	r9, r2
 80153ec:	e099      	b.n	8015522 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 80153ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80153f0:	2b00      	cmp	r3, #0
 80153f2:	f000 80ad 	beq.w	8015550 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c0>
 80153f6:	f1bb 0f00 	cmp.w	fp, #0
 80153fa:	d118      	bne.n	801542e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 80153fc:	f8d8 0000 	ldr.w	r0, [r8]
 8015400:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8015402:	6803      	ldr	r3, [r0, #0]
 8015404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015406:	4798      	blx	r3
 8015408:	4406      	add	r6, r0
 801540a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801540c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801540e:	1af3      	subs	r3, r6, r3
 8015410:	4293      	cmp	r3, r2
 8015412:	dd17      	ble.n	8015444 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 8015414:	2c00      	cmp	r4, #0
 8015416:	f000 8099 	beq.w	801554c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 801541a:	2c0a      	cmp	r4, #10
 801541c:	f040 8087 	bne.w	801552e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29e>
 8015420:	240a      	movs	r4, #10
 8015422:	fab4 f084 	clz	r0, r4
 8015426:	0940      	lsrs	r0, r0, #5
 8015428:	b01f      	add	sp, #124	@ 0x7c
 801542a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801542e:	f8d8 0000 	ldr.w	r0, [r8]
 8015432:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8015434:	6803      	ldr	r3, [r0, #0]
 8015436:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015438:	4798      	blx	r3
 801543a:	f1bb 0f01 	cmp.w	fp, #1
 801543e:	eba6 0600 	sub.w	r6, r6, r0
 8015442:	d0a4      	beq.n	801538e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 8015444:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8015446:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8015448:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801544c:	f9b3 7000 	ldrsh.w	r7, [r3]
 8015450:	7b43      	ldrb	r3, [r0, #13]
 8015452:	4431      	add	r1, r6
 8015454:	015b      	lsls	r3, r3, #5
 8015456:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801545a:	7983      	ldrb	r3, [r0, #6]
 801545c:	4313      	orrs	r3, r2
 801545e:	440b      	add	r3, r1
 8015460:	42bb      	cmp	r3, r7
 8015462:	db5e      	blt.n	8015522 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8015464:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015466:	4299      	cmp	r1, r3
 8015468:	da5b      	bge.n	8015522 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801546a:	f8d8 0000 	ldr.w	r0, [r8]
 801546e:	42b7      	cmp	r7, r6
 8015470:	6803      	ldr	r3, [r0, #0]
 8015472:	bfcc      	ite	gt
 8015474:	1bbf      	subgt	r7, r7, r6
 8015476:	2700      	movle	r7, #0
 8015478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801547a:	bfc8      	it	gt
 801547c:	b2bf      	uxthgt	r7, r7
 801547e:	4798      	blx	r3
 8015480:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8015482:	7b5a      	ldrb	r2, [r3, #13]
 8015484:	00d1      	lsls	r1, r2, #3
 8015486:	f401 7580 	and.w	r5, r1, #256	@ 0x100
 801548a:	7a19      	ldrb	r1, [r3, #8]
 801548c:	4329      	orrs	r1, r5
 801548e:	0655      	lsls	r5, r2, #25
 8015490:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 8015492:	bf48      	it	mi
 8015494:	f5a1 7100 	submi.w	r1, r1, #512	@ 0x200
 8015498:	4405      	add	r5, r0
 801549a:	bf48      	it	mi
 801549c:	b209      	sxthmi	r1, r1
 801549e:	1a6d      	subs	r5, r5, r1
 80154a0:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 80154a2:	b2ad      	uxth	r5, r5
 80154a4:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 80154a8:	fa0f fa85 	sxth.w	sl, r5
 80154ac:	4551      	cmp	r1, sl
 80154ae:	dd3c      	ble.n	801552a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 80154b0:	0112      	lsls	r2, r2, #4
 80154b2:	79d8      	ldrb	r0, [r3, #7]
 80154b4:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 80154b8:	4302      	orrs	r2, r0
 80154ba:	4492      	add	sl, r2
 80154bc:	4551      	cmp	r1, sl
 80154be:	dc30      	bgt.n	8015522 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 80154c0:	1b4d      	subs	r5, r1, r5
 80154c2:	468a      	mov	sl, r1
 80154c4:	b22d      	sxth	r5, r5
 80154c6:	9319      	str	r3, [sp, #100]	@ 0x64
 80154c8:	b2ad      	uxth	r5, r5
 80154ca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80154cc:	f8d8 0000 	ldr.w	r0, [r8]
 80154d0:	681a      	ldr	r2, [r3, #0]
 80154d2:	6801      	ldr	r1, [r0, #0]
 80154d4:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 80154d6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80154d8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80154da:	9218      	str	r2, [sp, #96]	@ 0x60
 80154dc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80154de:	4788      	blx	r1
 80154e0:	f898 1006 	ldrb.w	r1, [r8, #6]
 80154e4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80154e6:	910b      	str	r1, [sp, #44]	@ 0x2c
 80154e8:	f898 100e 	ldrb.w	r1, [r8, #14]
 80154ec:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80154ee:	910a      	str	r1, [sp, #40]	@ 0x28
 80154f0:	f89d 106f 	ldrb.w	r1, [sp, #111]	@ 0x6f
 80154f4:	9109      	str	r1, [sp, #36]	@ 0x24
 80154f6:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80154fa:	9305      	str	r3, [sp, #20]
 80154fc:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80154fe:	9206      	str	r2, [sp, #24]
 8015500:	9304      	str	r3, [sp, #16]
 8015502:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8015504:	f8cd a004 	str.w	sl, [sp, #4]
 8015508:	e9cd 7502 	strd	r7, r5, [sp, #8]
 801550c:	4437      	add	r7, r6
 801550e:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8015510:	b23f      	sxth	r7, r7
 8015512:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8015516:	9700      	str	r7, [sp, #0]
 8015518:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801551a:	681a      	ldr	r2, [r3, #0]
 801551c:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801551e:	685b      	ldr	r3, [r3, #4]
 8015520:	47a8      	blx	r5
 8015522:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015524:	3301      	adds	r3, #1
 8015526:	930e      	str	r3, [sp, #56]	@ 0x38
 8015528:	e6e0      	b.n	80152ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
 801552a:	2500      	movs	r5, #0
 801552c:	e7cb      	b.n	80154c6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x236>
 801552e:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8015530:	3501      	adds	r5, #1
 8015532:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8015534:	429d      	cmp	r5, r3
 8015536:	f6bf af74 	bge.w	8015422 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 801553a:	4659      	mov	r1, fp
 801553c:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 801553e:	f7f1 fec9 	bl	80072d4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8015542:	4604      	mov	r4, r0
 8015544:	b110      	cbz	r0, 801554c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 8015546:	280a      	cmp	r0, #10
 8015548:	d1f2      	bne.n	8015530 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2a0>
 801554a:	e769      	b.n	8015420 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 801554c:	2400      	movs	r4, #0
 801554e:	e768      	b.n	8015422 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 8015550:	f1bb 0f00 	cmp.w	fp, #0
 8015554:	f43f af59 	beq.w	801540a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
 8015558:	e774      	b.n	8015444 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

0801555a <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801555a:	b530      	push	{r4, r5, lr}
 801555c:	8ac4      	ldrh	r4, [r0, #22]
 801555e:	8b45      	ldrh	r5, [r0, #26]
 8015560:	8343      	strh	r3, [r0, #26]
 8015562:	442c      	add	r4, r5
 8015564:	1ae4      	subs	r4, r4, r3
 8015566:	8b83      	ldrh	r3, [r0, #28]
 8015568:	82c4      	strh	r4, [r0, #22]
 801556a:	8b04      	ldrh	r4, [r0, #24]
 801556c:	4422      	add	r2, r4
 801556e:	440c      	add	r4, r1
 8015570:	1a59      	subs	r1, r3, r1
 8015572:	83c2      	strh	r2, [r0, #30]
 8015574:	8304      	strh	r4, [r0, #24]
 8015576:	8381      	strh	r1, [r0, #28]
 8015578:	bd30      	pop	{r4, r5, pc}

0801557a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 801557a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801557e:	4604      	mov	r4, r0
 8015580:	8a47      	ldrh	r7, [r0, #18]
 8015582:	68c0      	ldr	r0, [r0, #12]
 8015584:	b085      	sub	sp, #20
 8015586:	6803      	ldr	r3, [r0, #0]
 8015588:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801558a:	4798      	blx	r3
 801558c:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 8015590:	7a63      	ldrb	r3, [r4, #9]
 8015592:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 8015596:	3b01      	subs	r3, #1
 8015598:	42b7      	cmp	r7, r6
 801559a:	bfac      	ite	ge
 801559c:	f04f 0900 	movge.w	r9, #0
 80155a0:	f04f 0901 	movlt.w	r9, #1
 80155a4:	2b05      	cmp	r3, #5
 80155a6:	d804      	bhi.n	80155b2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
 80155a8:	e8df f003 	tbb	[pc, r3]
 80155ac:	470f0854 	.word	0x470f0854
 80155b0:	4c4c      	.short	0x4c4c
 80155b2:	2500      	movs	r5, #0
 80155b4:	46a9      	mov	r9, r5
 80155b6:	462e      	mov	r6, r5
 80155b8:	462f      	mov	r7, r5
 80155ba:	e00e      	b.n	80155da <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 80155bc:	42b7      	cmp	r7, r6
 80155be:	f04f 0500 	mov.w	r5, #0
 80155c2:	bfb4      	ite	lt
 80155c4:	2600      	movlt	r6, #0
 80155c6:	2601      	movge	r6, #1
 80155c8:	e7f6      	b.n	80155b8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 80155ca:	42b7      	cmp	r7, r6
 80155cc:	464d      	mov	r5, r9
 80155ce:	f04f 0900 	mov.w	r9, #0
 80155d2:	bfb4      	ite	lt
 80155d4:	2600      	movlt	r6, #0
 80155d6:	2601      	movge	r6, #1
 80155d8:	464f      	mov	r7, r9
 80155da:	f04f 0800 	mov.w	r8, #0
 80155de:	f8a4 8016 	strh.w	r8, [r4, #22]
 80155e2:	f8a4 8018 	strh.w	r8, [r4, #24]
 80155e6:	f8cd 8004 	str.w	r8, [sp, #4]
 80155ea:	2300      	movs	r3, #0
 80155ec:	9303      	str	r3, [sp, #12]
 80155ee:	8823      	ldrh	r3, [r4, #0]
 80155f0:	2b20      	cmp	r3, #32
 80155f2:	d033      	beq.n	801565c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
 80155f4:	f242 010b 	movw	r1, #8203	@ 0x200b
 80155f8:	1a5a      	subs	r2, r3, r1
 80155fa:	f1d2 0a00 	rsbs	sl, r2, #0
 80155fe:	eb4a 0a02 	adc.w	sl, sl, r2
 8015602:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 8015606:	4293      	cmp	r3, r2
 8015608:	d008      	beq.n	801561c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 801560a:	428b      	cmp	r3, r1
 801560c:	9a01      	ldr	r2, [sp, #4]
 801560e:	bf0e      	itee	eq
 8015610:	f04f 0a01 	moveq.w	sl, #1
 8015614:	461a      	movne	r2, r3
 8015616:	f04f 0a00 	movne.w	sl, #0
 801561a:	9201      	str	r2, [sp, #4]
 801561c:	ab03      	add	r3, sp, #12
 801561e:	68e2      	ldr	r2, [r4, #12]
 8015620:	7a21      	ldrb	r1, [r4, #8]
 8015622:	6860      	ldr	r0, [r4, #4]
 8015624:	f002 fe5a 	bl	80182dc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8015628:	8020      	strh	r0, [r4, #0]
 801562a:	b9d8      	cbnz	r0, 8015664 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
 801562c:	8ba2      	ldrh	r2, [r4, #28]
 801562e:	2300      	movs	r3, #0
 8015630:	4611      	mov	r1, r2
 8015632:	4620      	mov	r0, r4
 8015634:	f7ff ff91 	bl	801555a <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8015638:	e06e      	b.n	8015718 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 801563a:	2500      	movs	r5, #0
 801563c:	2701      	movs	r7, #1
 801563e:	46a9      	mov	r9, r5
 8015640:	462e      	mov	r6, r5
 8015642:	e7ca      	b.n	80155da <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8015644:	42b7      	cmp	r7, r6
 8015646:	f04f 0500 	mov.w	r5, #0
 801564a:	bfb4      	ite	lt
 801564c:	2700      	movlt	r7, #0
 801564e:	2701      	movge	r7, #1
 8015650:	462e      	mov	r6, r5
 8015652:	e7c2      	b.n	80155da <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8015654:	2500      	movs	r5, #0
 8015656:	2601      	movs	r6, #1
 8015658:	46a9      	mov	r9, r5
 801565a:	e7ad      	b.n	80155b8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 801565c:	9301      	str	r3, [sp, #4]
 801565e:	f04f 0a01 	mov.w	sl, #1
 8015662:	e7db      	b.n	801561c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 8015664:	8b63      	ldrh	r3, [r4, #26]
 8015666:	280a      	cmp	r0, #10
 8015668:	f103 0301 	add.w	r3, r3, #1
 801566c:	8363      	strh	r3, [r4, #26]
 801566e:	d0dd      	beq.n	801562c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
 8015670:	9a03      	ldr	r2, [sp, #12]
 8015672:	bb62      	cbnz	r2, 80156ce <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
 8015674:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8015678:	4298      	cmp	r0, r3
 801567a:	d003      	beq.n	8015684 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 801567c:	f242 030b 	movw	r3, #8203	@ 0x200b
 8015680:	4298      	cmp	r0, r3
 8015682:	d1b2      	bne.n	80155ea <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015684:	8823      	ldrh	r3, [r4, #0]
 8015686:	8ba1      	ldrh	r1, [r4, #28]
 8015688:	2b20      	cmp	r3, #32
 801568a:	d003      	beq.n	8015694 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
 801568c:	f242 000b 	movw	r0, #8203	@ 0x200b
 8015690:	4283      	cmp	r3, r0
 8015692:	d131      	bne.n	80156f8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
 8015694:	f1ba 0f00 	cmp.w	sl, #0
 8015698:	bf0a      	itet	eq
 801569a:	4688      	moveq	r8, r1
 801569c:	4650      	movne	r0, sl
 801569e:	2001      	moveq	r0, #1
 80156a0:	440a      	add	r2, r1
 80156a2:	8b23      	ldrh	r3, [r4, #24]
 80156a4:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 80156a8:	b292      	uxth	r2, r2
 80156aa:	83a2      	strh	r2, [r4, #28]
 80156ac:	4413      	add	r3, r2
 80156ae:	f1b9 0f00 	cmp.w	r9, #0
 80156b2:	d102      	bne.n	80156ba <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
 80156b4:	2d00      	cmp	r5, #0
 80156b6:	d042      	beq.n	801573e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
 80156b8:	b300      	cbz	r0, 80156fc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
 80156ba:	8c21      	ldrh	r1, [r4, #32]
 80156bc:	4419      	add	r1, r3
 80156be:	458c      	cmp	ip, r1
 80156c0:	da37      	bge.n	8015732 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 80156c2:	8ae1      	ldrh	r1, [r4, #22]
 80156c4:	2900      	cmp	r1, #0
 80156c6:	d034      	beq.n	8015732 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 80156c8:	4563      	cmp	r3, ip
 80156ca:	dd8e      	ble.n	80155ea <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80156cc:	e01d      	b.n	801570a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
 80156ce:	8893      	ldrh	r3, [r2, #4]
 80156d0:	9901      	ldr	r1, [sp, #4]
 80156d2:	8023      	strh	r3, [r4, #0]
 80156d4:	f892 b00d 	ldrb.w	fp, [r2, #13]
 80156d8:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 80156dc:	f40b 7080 	and.w	r0, fp, #256	@ 0x100
 80156e0:	f892 b00a 	ldrb.w	fp, [r2, #10]
 80156e4:	ea4b 0b00 	orr.w	fp, fp, r0
 80156e8:	68e0      	ldr	r0, [r4, #12]
 80156ea:	6803      	ldr	r3, [r0, #0]
 80156ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80156ee:	4798      	blx	r3
 80156f0:	eb0b 0200 	add.w	r2, fp, r0
 80156f4:	b292      	uxth	r2, r2
 80156f6:	e7c5      	b.n	8015684 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 80156f8:	2000      	movs	r0, #0
 80156fa:	e7d1      	b.n	80156a0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
 80156fc:	4563      	cmp	r3, ip
 80156fe:	f77f af74 	ble.w	80155ea <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015702:	8ae3      	ldrh	r3, [r4, #22]
 8015704:	2b00      	cmp	r3, #0
 8015706:	f43f af70 	beq.w	80155ea <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801570a:	2301      	movs	r3, #1
 801570c:	8c22      	ldrh	r2, [r4, #32]
 801570e:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
 8015712:	8be3      	ldrh	r3, [r4, #30]
 8015714:	4413      	add	r3, r2
 8015716:	83e3      	strh	r3, [r4, #30]
 8015718:	68e0      	ldr	r0, [r4, #12]
 801571a:	6803      	ldr	r3, [r0, #0]
 801571c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801571e:	4798      	blx	r3
 8015720:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8015724:	4418      	add	r0, r3
 8015726:	8a63      	ldrh	r3, [r4, #18]
 8015728:	1a18      	subs	r0, r3, r0
 801572a:	8260      	strh	r0, [r4, #18]
 801572c:	b005      	add	sp, #20
 801572e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015732:	2300      	movs	r3, #0
 8015734:	4611      	mov	r1, r2
 8015736:	4620      	mov	r0, r4
 8015738:	f7ff ff0f 	bl	801555a <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801573c:	e755      	b.n	80155ea <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801573e:	4563      	cmp	r3, ip
 8015740:	dd14      	ble.n	801576c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
 8015742:	b117      	cbz	r7, 801574a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
 8015744:	2301      	movs	r3, #1
 8015746:	460a      	mov	r2, r1
 8015748:	e772      	b.n	8015630 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
 801574a:	2e00      	cmp	r6, #0
 801574c:	f43f af4d 	beq.w	80155ea <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015750:	2800      	cmp	r0, #0
 8015752:	f47f af4a 	bne.w	80155ea <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015756:	f1ba 0f00 	cmp.w	sl, #0
 801575a:	d002      	beq.n	8015762 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
 801575c:	2301      	movs	r3, #1
 801575e:	4642      	mov	r2, r8
 8015760:	e767      	b.n	8015632 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 8015762:	8ae3      	ldrh	r3, [r4, #22]
 8015764:	2b00      	cmp	r3, #0
 8015766:	f43f af40 	beq.w	80155ea <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801576a:	e7d5      	b.n	8015718 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 801576c:	2800      	cmp	r0, #0
 801576e:	f47f af3c 	bne.w	80155ea <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015772:	f1ba 0f00 	cmp.w	sl, #0
 8015776:	f43f af38 	beq.w	80155ea <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801577a:	2301      	movs	r3, #1
 801577c:	4642      	mov	r2, r8
 801577e:	e7da      	b.n	8015736 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

08015780 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8015780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015782:	4605      	mov	r5, r0
 8015784:	b08f      	sub	sp, #60	@ 0x3c
 8015786:	4617      	mov	r7, r2
 8015788:	461c      	mov	r4, r3
 801578a:	460e      	mov	r6, r1
 801578c:	b1d1      	cbz	r1, 80157c4 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 801578e:	681b      	ldr	r3, [r3, #0]
 8015790:	4620      	mov	r0, r4
 8015792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015794:	4798      	blx	r3
 8015796:	4240      	negs	r0, r0
 8015798:	9603      	str	r6, [sp, #12]
 801579a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801579e:	b200      	sxth	r0, r0
 80157a0:	9700      	str	r7, [sp, #0]
 80157a2:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 80157a6:	4629      	mov	r1, r5
 80157a8:	e9cd 4001 	strd	r4, r0, [sp, #4]
 80157ac:	2401      	movs	r4, #1
 80157ae:	a805      	add	r0, sp, #20
 80157b0:	f7ff fcbe 	bl	8015130 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 80157b4:	a805      	add	r0, sp, #20
 80157b6:	f7ff fee0 	bl	801557a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 80157ba:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80157be:	b163      	cbz	r3, 80157da <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 80157c0:	3401      	adds	r4, #1
 80157c2:	e7f7      	b.n	80157b4 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 80157c4:	2401      	movs	r4, #1
 80157c6:	f002 fe55 	bl	8018474 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80157ca:	280a      	cmp	r0, #10
 80157cc:	4628      	mov	r0, r5
 80157ce:	bf08      	it	eq
 80157d0:	3401      	addeq	r4, #1
 80157d2:	f002 fe4f 	bl	8018474 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80157d6:	2800      	cmp	r0, #0
 80157d8:	d1f7      	bne.n	80157ca <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 80157da:	b2a0      	uxth	r0, r4
 80157dc:	b00f      	add	sp, #60	@ 0x3c
 80157de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080157e0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 80157e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157e4:	b0e3      	sub	sp, #396	@ 0x18c
 80157e6:	461c      	mov	r4, r3
 80157e8:	4683      	mov	fp, r0
 80157ea:	4688      	mov	r8, r1
 80157ec:	9b6c      	ldr	r3, [sp, #432]	@ 0x1b0
 80157ee:	2b00      	cmp	r3, #0
 80157f0:	f000 810f 	beq.w	8015a12 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 80157f4:	6823      	ldr	r3, [r4, #0]
 80157f6:	2b00      	cmp	r3, #0
 80157f8:	f000 810b 	beq.w	8015a12 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 80157fc:	7ba3      	ldrb	r3, [r4, #14]
 80157fe:	2b00      	cmp	r3, #0
 8015800:	f000 8107 	beq.w	8015a12 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8015804:	ad0a      	add	r5, sp, #40	@ 0x28
 8015806:	6810      	ldr	r0, [r2, #0]
 8015808:	6851      	ldr	r1, [r2, #4]
 801580a:	462b      	mov	r3, r5
 801580c:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 8015810:	c303      	stmia	r3!, {r0, r1}
 8015812:	2100      	movs	r1, #0
 8015814:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8015818:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 801581c:	4628      	mov	r0, r5
 801581e:	910c      	str	r1, [sp, #48]	@ 0x30
 8015820:	a90c      	add	r1, sp, #48	@ 0x30
 8015822:	79a2      	ldrb	r2, [r4, #6]
 8015824:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8015828:	f7ff fd01 	bl	801522e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801582c:	a90c      	add	r1, sp, #48	@ 0x30
 801582e:	79a2      	ldrb	r2, [r4, #6]
 8015830:	4608      	mov	r0, r1
 8015832:	f7ff fcfc 	bl	801522e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8015836:	a817      	add	r0, sp, #92	@ 0x5c
 8015838:	f002 fa08 	bl	8017c4c <_ZN8touchgfx12TextProviderC1Ev>
 801583c:	6820      	ldr	r0, [r4, #0]
 801583e:	6803      	ldr	r3, [r0, #0]
 8015840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015842:	4798      	blx	r3
 8015844:	4606      	mov	r6, r0
 8015846:	6820      	ldr	r0, [r4, #0]
 8015848:	6803      	ldr	r3, [r0, #0]
 801584a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801584c:	4798      	blx	r3
 801584e:	4633      	mov	r3, r6
 8015850:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 8015852:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 8015854:	9000      	str	r0, [sp, #0]
 8015856:	a817      	add	r0, sp, #92	@ 0x5c
 8015858:	f002 fa4b 	bl	8017cf2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801585c:	6820      	ldr	r0, [r4, #0]
 801585e:	f894 a004 	ldrb.w	sl, [r4, #4]
 8015862:	6803      	ldr	r3, [r0, #0]
 8015864:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015866:	4798      	blx	r3
 8015868:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 801586c:	6823      	ldr	r3, [r4, #0]
 801586e:	4607      	mov	r7, r0
 8015870:	4406      	add	r6, r0
 8015872:	a830      	add	r0, sp, #192	@ 0xc0
 8015874:	f893 9009 	ldrb.w	r9, [r3, #9]
 8015878:	f002 f9e8 	bl	8017c4c <_ZN8touchgfx12TextProviderC1Ev>
 801587c:	7c23      	ldrb	r3, [r4, #16]
 801587e:	b17b      	cbz	r3, 80158a0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 8015880:	6820      	ldr	r0, [r4, #0]
 8015882:	6803      	ldr	r3, [r0, #0]
 8015884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015886:	4798      	blx	r3
 8015888:	9009      	str	r0, [sp, #36]	@ 0x24
 801588a:	6820      	ldr	r0, [r4, #0]
 801588c:	6802      	ldr	r2, [r0, #0]
 801588e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8015890:	4790      	blx	r2
 8015892:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015894:	9000      	str	r0, [sp, #0]
 8015896:	a830      	add	r0, sp, #192	@ 0xc0
 8015898:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 801589a:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 801589c:	f002 fa29 	bl	8017cf2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80158a0:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 80158a4:	a80e      	add	r0, sp, #56	@ 0x38
 80158a6:	7be2      	ldrb	r2, [r4, #15]
 80158a8:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 80158ac:	1a8a      	subs	r2, r1, r2
 80158ae:	7c21      	ldrb	r1, [r4, #16]
 80158b0:	9103      	str	r1, [sp, #12]
 80158b2:	b292      	uxth	r2, r2
 80158b4:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 80158b8:	9102      	str	r1, [sp, #8]
 80158ba:	6821      	ldr	r1, [r4, #0]
 80158bc:	9101      	str	r1, [sp, #4]
 80158be:	7961      	ldrb	r1, [r4, #5]
 80158c0:	9100      	str	r1, [sp, #0]
 80158c2:	a930      	add	r1, sp, #192	@ 0xc0
 80158c4:	f7ff fc34 	bl	8015130 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 80158c8:	2e00      	cmp	r6, #0
 80158ca:	dc5b      	bgt.n	8015984 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 80158cc:	af17      	add	r7, sp, #92	@ 0x5c
 80158ce:	f04f 0900 	mov.w	r9, #0
 80158d2:	7c23      	ldrb	r3, [r4, #16]
 80158d4:	2b00      	cmp	r3, #0
 80158d6:	f000 80ae 	beq.w	8015a36 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 80158da:	a80e      	add	r0, sp, #56	@ 0x38
 80158dc:	f7ff fe4d 	bl	801557a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 80158e0:	f1ba 0f00 	cmp.w	sl, #0
 80158e4:	f000 80a2 	beq.w	8015a2c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24c>
 80158e8:	7c23      	ldrb	r3, [r4, #16]
 80158ea:	2264      	movs	r2, #100	@ 0x64
 80158ec:	4639      	mov	r1, r7
 80158ee:	a849      	add	r0, sp, #292	@ 0x124
 80158f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80158f2:	f010 fcae 	bl	8026252 <memcpy>
 80158f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80158f8:	2b00      	cmp	r3, #0
 80158fa:	f000 80a4 	beq.w	8015a46 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x266>
 80158fe:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 8015902:	7922      	ldrb	r2, [r4, #4]
 8015904:	2a01      	cmp	r2, #1
 8015906:	f040 8087 	bne.w	8015a18 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801590a:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	@ 0x34
 801590e:	1ac0      	subs	r0, r0, r3
 8015910:	2302      	movs	r3, #2
 8015912:	fb90 f0f3 	sdiv	r0, r0, r3
 8015916:	b200      	sxth	r0, r0
 8015918:	7c23      	ldrb	r3, [r4, #16]
 801591a:	2b00      	cmp	r3, #0
 801591c:	f000 8088 	beq.w	8015a30 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x250>
 8015920:	f8bd 204e 	ldrh.w	r2, [sp, #78]	@ 0x4e
 8015924:	f89d 105a 	ldrb.w	r1, [sp, #90]	@ 0x5a
 8015928:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801592c:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8015930:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 8015934:	2100      	movs	r1, #0
 8015936:	4410      	add	r0, r2
 8015938:	4642      	mov	r2, r8
 801593a:	b200      	sxth	r0, r0
 801593c:	e9cd 9703 	strd	r9, r7, [sp, #12]
 8015940:	9000      	str	r0, [sp, #0]
 8015942:	4658      	mov	r0, fp
 8015944:	e9cd 5401 	strd	r5, r4, [sp, #4]
 8015948:	f7ff fca2 	bl	8015290 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801594c:	2800      	cmp	r0, #0
 801594e:	d160      	bne.n	8015a12 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8015950:	b2b2      	uxth	r2, r6
 8015952:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8015956:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 801595a:	4413      	add	r3, r2
 801595c:	1a8a      	subs	r2, r1, r2
 801595e:	b21b      	sxth	r3, r3
 8015960:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 8015964:	f89d 205a 	ldrb.w	r2, [sp, #90]	@ 0x5a
 8015968:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801596c:	2a00      	cmp	r2, #0
 801596e:	d150      	bne.n	8015a12 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8015970:	6822      	ldr	r2, [r4, #0]
 8015972:	8869      	ldrh	r1, [r5, #2]
 8015974:	7a12      	ldrb	r2, [r2, #8]
 8015976:	1a9b      	subs	r3, r3, r2
 8015978:	88ea      	ldrh	r2, [r5, #6]
 801597a:	440a      	add	r2, r1
 801597c:	b212      	sxth	r2, r2
 801597e:	4293      	cmp	r3, r2
 8015980:	dda7      	ble.n	80158d2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 8015982:	e046      	b.n	8015a12 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8015984:	7c23      	ldrb	r3, [r4, #16]
 8015986:	444f      	add	r7, r9
 8015988:	b1c3      	cbz	r3, 80159bc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 801598a:	f64f 79ff 	movw	r9, #65535	@ 0xffff
 801598e:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8015992:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8015996:	443b      	add	r3, r7
 8015998:	4293      	cmp	r3, r2
 801599a:	da97      	bge.n	80158cc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 801599c:	a80e      	add	r0, sp, #56	@ 0x38
 801599e:	f7ff fdec 	bl	801557a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 80159a2:	f8bd 304e 	ldrh.w	r3, [sp, #78]	@ 0x4e
 80159a6:	3b01      	subs	r3, #1
 80159a8:	b29b      	uxth	r3, r3
 80159aa:	454b      	cmp	r3, r9
 80159ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80159ae:	d021      	beq.n	80159f4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 80159b0:	7961      	ldrb	r1, [r4, #5]
 80159b2:	a817      	add	r0, sp, #92	@ 0x5c
 80159b4:	f7f1 fc8e 	bl	80072d4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80159b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80159ba:	e7f4      	b.n	80159a6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 80159bc:	fa1f f986 	uxth.w	r9, r6
 80159c0:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 80159c4:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80159c8:	443b      	add	r3, r7
 80159ca:	4293      	cmp	r3, r2
 80159cc:	f6bf af7e 	bge.w	80158cc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 80159d0:	a817      	add	r0, sp, #92	@ 0x5c
 80159d2:	f002 fd4f 	bl	8018474 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80159d6:	b1e0      	cbz	r0, 8015a12 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 80159d8:	280a      	cmp	r0, #10
 80159da:	d1f1      	bne.n	80159c0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 80159dc:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 80159e0:	444b      	add	r3, r9
 80159e2:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 80159e6:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 80159ea:	eba3 0309 	sub.w	r3, r3, r9
 80159ee:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 80159f2:	e7e5      	b.n	80159c0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 80159f4:	b2b3      	uxth	r3, r6
 80159f6:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 80159fa:	441a      	add	r2, r3
 80159fc:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8015a00:	f8bd 2036 	ldrh.w	r2, [sp, #54]	@ 0x36
 8015a04:	1ad3      	subs	r3, r2, r3
 8015a06:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8015a0a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8015a0e:	2b00      	cmp	r3, #0
 8015a10:	d1bd      	bne.n	801598e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 8015a12:	b063      	add	sp, #396	@ 0x18c
 8015a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a18:	2a02      	cmp	r2, #2
 8015a1a:	d105      	bne.n	8015a28 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 8015a1c:	7be2      	ldrb	r2, [r4, #15]
 8015a1e:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 8015a22:	1a80      	subs	r0, r0, r2
 8015a24:	1ac0      	subs	r0, r0, r3
 8015a26:	e776      	b.n	8015916 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 8015a28:	2000      	movs	r0, #0
 8015a2a:	e775      	b.n	8015918 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 8015a2c:	7be0      	ldrb	r0, [r4, #15]
 8015a2e:	e773      	b.n	8015918 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 8015a30:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8015a34:	e776      	b.n	8015924 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 8015a36:	f1ba 0f00 	cmp.w	sl, #0
 8015a3a:	d0f7      	beq.n	8015a2c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24c>
 8015a3c:	2264      	movs	r2, #100	@ 0x64
 8015a3e:	4639      	mov	r1, r7
 8015a40:	a849      	add	r0, sp, #292	@ 0x124
 8015a42:	f010 fc06 	bl	8026252 <memcpy>
 8015a46:	2300      	movs	r3, #0
 8015a48:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8015a4c:	6821      	ldr	r1, [r4, #0]
 8015a4e:	a849      	add	r0, sp, #292	@ 0x124
 8015a50:	f7ff fbb1 	bl	80151b6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8015a54:	b203      	sxth	r3, r0
 8015a56:	e754      	b.n	8015902 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

08015a58 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8015a58:	2b03      	cmp	r3, #3
 8015a5a:	d818      	bhi.n	8015a8e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 8015a5c:	e8df f003 	tbb	[pc, r3]
 8015a60:	130d0602 	.word	0x130d0602
 8015a64:	f9b0 2000 	ldrsh.w	r2, [r0]
 8015a68:	1850      	adds	r0, r2, r1
 8015a6a:	4770      	bx	lr
 8015a6c:	8803      	ldrh	r3, [r0, #0]
 8015a6e:	8880      	ldrh	r0, [r0, #4]
 8015a70:	4418      	add	r0, r3
 8015a72:	b200      	sxth	r0, r0
 8015a74:	1a80      	subs	r0, r0, r2
 8015a76:	3801      	subs	r0, #1
 8015a78:	4770      	bx	lr
 8015a7a:	8803      	ldrh	r3, [r0, #0]
 8015a7c:	8880      	ldrh	r0, [r0, #4]
 8015a7e:	4418      	add	r0, r3
 8015a80:	b200      	sxth	r0, r0
 8015a82:	1a40      	subs	r0, r0, r1
 8015a84:	e7f7      	b.n	8015a76 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8015a86:	f9b0 0000 	ldrsh.w	r0, [r0]
 8015a8a:	4410      	add	r0, r2
 8015a8c:	4770      	bx	lr
 8015a8e:	2000      	movs	r0, #0
 8015a90:	4770      	bx	lr

08015a92 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8015a92:	2b03      	cmp	r3, #3
 8015a94:	d817      	bhi.n	8015ac6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 8015a96:	e8df f003 	tbb	[pc, r3]
 8015a9a:	0602      	.short	0x0602
 8015a9c:	1009      	.short	0x1009
 8015a9e:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8015aa2:	1850      	adds	r0, r2, r1
 8015aa4:	4770      	bx	lr
 8015aa6:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8015aaa:	e7fa      	b.n	8015aa2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 8015aac:	8843      	ldrh	r3, [r0, #2]
 8015aae:	88c0      	ldrh	r0, [r0, #6]
 8015ab0:	4418      	add	r0, r3
 8015ab2:	b200      	sxth	r0, r0
 8015ab4:	1a80      	subs	r0, r0, r2
 8015ab6:	3801      	subs	r0, #1
 8015ab8:	4770      	bx	lr
 8015aba:	8843      	ldrh	r3, [r0, #2]
 8015abc:	88c0      	ldrh	r0, [r0, #6]
 8015abe:	4418      	add	r0, r3
 8015ac0:	b200      	sxth	r0, r0
 8015ac2:	1a40      	subs	r0, r0, r1
 8015ac4:	e7f7      	b.n	8015ab6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8015ac6:	2000      	movs	r0, #0
 8015ac8:	4770      	bx	lr
	...

08015acc <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8015acc:	4b01      	ldr	r3, [pc, #4]	@ (8015ad4 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8015ace:	2200      	movs	r2, #0
 8015ad0:	601a      	str	r2, [r3, #0]
 8015ad2:	4770      	bx	lr
 8015ad4:	20027ba4 	.word	0x20027ba4

08015ad8 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8015ad8:	4603      	mov	r3, r0
 8015ada:	b1c8      	cbz	r0, 8015b10 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8015adc:	0c02      	lsrs	r2, r0, #16
 8015ade:	0412      	lsls	r2, r2, #16
 8015ae0:	b9a2      	cbnz	r2, 8015b0c <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 8015ae2:	0403      	lsls	r3, r0, #16
 8015ae4:	2010      	movs	r0, #16
 8015ae6:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 8015aea:	bf04      	itt	eq
 8015aec:	021b      	lsleq	r3, r3, #8
 8015aee:	3008      	addeq	r0, #8
 8015af0:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 8015af4:	bf04      	itt	eq
 8015af6:	011b      	lsleq	r3, r3, #4
 8015af8:	3004      	addeq	r0, #4
 8015afa:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 8015afe:	bf04      	itt	eq
 8015b00:	009b      	lsleq	r3, r3, #2
 8015b02:	3002      	addeq	r0, #2
 8015b04:	2b00      	cmp	r3, #0
 8015b06:	db04      	blt.n	8015b12 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8015b08:	3001      	adds	r0, #1
 8015b0a:	4770      	bx	lr
 8015b0c:	2000      	movs	r0, #0
 8015b0e:	e7ea      	b.n	8015ae6 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8015b10:	2020      	movs	r0, #32
 8015b12:	4770      	bx	lr

08015b14 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8015b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b18:	b087      	sub	sp, #28
 8015b1a:	4681      	mov	r9, r0
 8015b1c:	4698      	mov	r8, r3
 8015b1e:	4610      	mov	r0, r2
 8015b20:	460d      	mov	r5, r1
 8015b22:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 8015b26:	b981      	cbnz	r1, 8015b4a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 8015b28:	b14b      	cbz	r3, 8015b3e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 8015b2a:	460b      	mov	r3, r1
 8015b2c:	464a      	mov	r2, r9
 8015b2e:	4641      	mov	r1, r8
 8015b30:	e9cd 4700 	strd	r4, r7, [sp]
 8015b34:	f7ff ffee 	bl	8015b14 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8015b38:	b007      	add	sp, #28
 8015b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8015b42:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8015b46:	603b      	str	r3, [r7, #0]
 8015b48:	e7f6      	b.n	8015b38 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8015b4a:	fa32 fa01 	lsrs.w	sl, r2, r1
 8015b4e:	d107      	bne.n	8015b60 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 8015b50:	fb09 f602 	mul.w	r6, r9, r2
 8015b54:	fbb6 f0f4 	udiv	r0, r6, r4
 8015b58:	fb04 6610 	mls	r6, r4, r0, r6
 8015b5c:	603e      	str	r6, [r7, #0]
 8015b5e:	e7eb      	b.n	8015b38 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8015b60:	2601      	movs	r6, #1
 8015b62:	fa09 fb01 	lsl.w	fp, r9, r1
 8015b66:	408e      	lsls	r6, r1
 8015b68:	fbbb f3f4 	udiv	r3, fp, r4
 8015b6c:	3e01      	subs	r6, #1
 8015b6e:	9302      	str	r3, [sp, #8]
 8015b70:	fb0a f303 	mul.w	r3, sl, r3
 8015b74:	4016      	ands	r6, r2
 8015b76:	9303      	str	r3, [sp, #12]
 8015b78:	4630      	mov	r0, r6
 8015b7a:	f7ff ffad 	bl	8015ad8 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8015b7e:	464a      	mov	r2, r9
 8015b80:	460b      	mov	r3, r1
 8015b82:	4601      	mov	r1, r0
 8015b84:	4630      	mov	r0, r6
 8015b86:	e9cd 4700 	strd	r4, r7, [sp]
 8015b8a:	f7ff ffc3 	bl	8015b14 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8015b8e:	9b02      	ldr	r3, [sp, #8]
 8015b90:	4606      	mov	r6, r0
 8015b92:	eb05 0108 	add.w	r1, r5, r8
 8015b96:	fb04 bb13 	mls	fp, r4, r3, fp
 8015b9a:	4658      	mov	r0, fp
 8015b9c:	f7ff ff9c 	bl	8015ad8 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8015ba0:	ab05      	add	r3, sp, #20
 8015ba2:	465a      	mov	r2, fp
 8015ba4:	e9cd 4300 	strd	r4, r3, [sp]
 8015ba8:	4603      	mov	r3, r0
 8015baa:	4650      	mov	r0, sl
 8015bac:	f7ff ffb2 	bl	8015b14 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8015bb0:	6839      	ldr	r1, [r7, #0]
 8015bb2:	9a05      	ldr	r2, [sp, #20]
 8015bb4:	9b03      	ldr	r3, [sp, #12]
 8015bb6:	4411      	add	r1, r2
 8015bb8:	fbb1 f2f4 	udiv	r2, r1, r4
 8015bbc:	18d3      	adds	r3, r2, r3
 8015bbe:	fb04 1412 	mls	r4, r4, r2, r1
 8015bc2:	441e      	add	r6, r3
 8015bc4:	603c      	str	r4, [r7, #0]
 8015bc6:	4430      	add	r0, r6
 8015bc8:	e7b6      	b.n	8015b38 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

08015bca <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8015bca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015bce:	b085      	sub	sp, #20
 8015bd0:	f1b0 0900 	subs.w	r9, r0, #0
 8015bd4:	461d      	mov	r5, r3
 8015bd6:	4617      	mov	r7, r2
 8015bd8:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8015bda:	bfbb      	ittet	lt
 8015bdc:	f1c9 0900 	rsblt	r9, r9, #0
 8015be0:	f04f 36ff 	movlt.w	r6, #4294967295
 8015be4:	2601      	movge	r6, #1
 8015be6:	6823      	ldrlt	r3, [r4, #0]
 8015be8:	bfbc      	itt	lt
 8015bea:	425b      	neglt	r3, r3
 8015bec:	6023      	strlt	r3, [r4, #0]
 8015bee:	2a00      	cmp	r2, #0
 8015bf0:	da04      	bge.n	8015bfc <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8015bf2:	6823      	ldr	r3, [r4, #0]
 8015bf4:	4257      	negs	r7, r2
 8015bf6:	4276      	negs	r6, r6
 8015bf8:	425b      	negs	r3, r3
 8015bfa:	6023      	str	r3, [r4, #0]
 8015bfc:	2d00      	cmp	r5, #0
 8015bfe:	4638      	mov	r0, r7
 8015c00:	bfba      	itte	lt
 8015c02:	426d      	neglt	r5, r5
 8015c04:	f04f 38ff 	movlt.w	r8, #4294967295
 8015c08:	f04f 0801 	movge.w	r8, #1
 8015c0c:	f7ff ff64 	bl	8015ad8 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8015c10:	ab03      	add	r3, sp, #12
 8015c12:	463a      	mov	r2, r7
 8015c14:	e9cd 5300 	strd	r5, r3, [sp]
 8015c18:	4603      	mov	r3, r0
 8015c1a:	4648      	mov	r0, r9
 8015c1c:	f7ff ff7a 	bl	8015b14 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8015c20:	6823      	ldr	r3, [r4, #0]
 8015c22:	9a03      	ldr	r2, [sp, #12]
 8015c24:	4546      	cmp	r6, r8
 8015c26:	441a      	add	r2, r3
 8015c28:	fb92 f3f5 	sdiv	r3, r2, r5
 8015c2c:	4418      	add	r0, r3
 8015c2e:	fb05 2313 	mls	r3, r5, r3, r2
 8015c32:	bf18      	it	ne
 8015c34:	4240      	negne	r0, r0
 8015c36:	1c72      	adds	r2, r6, #1
 8015c38:	6023      	str	r3, [r4, #0]
 8015c3a:	d105      	bne.n	8015c48 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8015c3c:	2b00      	cmp	r3, #0
 8015c3e:	f1c3 0200 	rsb	r2, r3, #0
 8015c42:	db0b      	blt.n	8015c5c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8015c44:	6022      	str	r2, [r4, #0]
 8015c46:	e006      	b.n	8015c56 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8015c48:	2e01      	cmp	r6, #1
 8015c4a:	d104      	bne.n	8015c56 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8015c4c:	2b00      	cmp	r3, #0
 8015c4e:	da02      	bge.n	8015c56 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8015c50:	442b      	add	r3, r5
 8015c52:	3801      	subs	r0, #1
 8015c54:	6023      	str	r3, [r4, #0]
 8015c56:	b005      	add	sp, #20
 8015c58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015c5c:	3801      	subs	r0, #1
 8015c5e:	1b52      	subs	r2, r2, r5
 8015c60:	e7f0      	b.n	8015c44 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

08015c64 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8015c64:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8015c68:	4c1c      	ldr	r4, [pc, #112]	@ (8015cdc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8015c6a:	4605      	mov	r5, r0
 8015c6c:	6807      	ldr	r7, [r0, #0]
 8015c6e:	69a3      	ldr	r3, [r4, #24]
 8015c70:	b92b      	cbnz	r3, 8015c7e <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8015c72:	6840      	ldr	r0, [r0, #4]
 8015c74:	e9c5 7000 	strd	r7, r0, [r5]
 8015c78:	b004      	add	sp, #16
 8015c7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c7e:	f04f 0802 	mov.w	r8, #2
 8015c82:	68a2      	ldr	r2, [r4, #8]
 8015c84:	ae04      	add	r6, sp, #16
 8015c86:	6820      	ldr	r0, [r4, #0]
 8015c88:	fb93 f1f8 	sdiv	r1, r3, r8
 8015c8c:	440a      	add	r2, r1
 8015c8e:	69e1      	ldr	r1, [r4, #28]
 8015c90:	f846 2d04 	str.w	r2, [r6, #-4]!
 8015c94:	463a      	mov	r2, r7
 8015c96:	9600      	str	r6, [sp, #0]
 8015c98:	f7ff ff97 	bl	8015bca <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8015c9c:	69a3      	ldr	r3, [r4, #24]
 8015c9e:	4607      	mov	r7, r0
 8015ca0:	686a      	ldr	r2, [r5, #4]
 8015ca2:	6a21      	ldr	r1, [r4, #32]
 8015ca4:	9600      	str	r6, [sp, #0]
 8015ca6:	6860      	ldr	r0, [r4, #4]
 8015ca8:	f7ff ff8f 	bl	8015bca <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8015cac:	69a3      	ldr	r3, [r4, #24]
 8015cae:	6962      	ldr	r2, [r4, #20]
 8015cb0:	4407      	add	r7, r0
 8015cb2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8015cb4:	9600      	str	r6, [sp, #0]
 8015cb6:	68e0      	ldr	r0, [r4, #12]
 8015cb8:	fb93 f8f8 	sdiv	r8, r3, r8
 8015cbc:	4442      	add	r2, r8
 8015cbe:	9203      	str	r2, [sp, #12]
 8015cc0:	682a      	ldr	r2, [r5, #0]
 8015cc2:	f7ff ff82 	bl	8015bca <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8015cc6:	4680      	mov	r8, r0
 8015cc8:	9600      	str	r6, [sp, #0]
 8015cca:	69a3      	ldr	r3, [r4, #24]
 8015ccc:	686a      	ldr	r2, [r5, #4]
 8015cce:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8015cd0:	6920      	ldr	r0, [r4, #16]
 8015cd2:	f7ff ff7a 	bl	8015bca <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8015cd6:	4440      	add	r0, r8
 8015cd8:	e7cc      	b.n	8015c74 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8015cda:	bf00      	nop
 8015cdc:	20027ba8 	.word	0x20027ba8

08015ce0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8015ce0:	4b07      	ldr	r3, [pc, #28]	@ (8015d00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 8015ce2:	781b      	ldrb	r3, [r3, #0]
 8015ce4:	2b01      	cmp	r3, #1
 8015ce6:	d109      	bne.n	8015cfc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8015ce8:	f9b1 3000 	ldrsh.w	r3, [r1]
 8015cec:	f9b0 2000 	ldrsh.w	r2, [r0]
 8015cf0:	8003      	strh	r3, [r0, #0]
 8015cf2:	4b04      	ldr	r3, [pc, #16]	@ (8015d04 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8015cf4:	881b      	ldrh	r3, [r3, #0]
 8015cf6:	3b01      	subs	r3, #1
 8015cf8:	1a9b      	subs	r3, r3, r2
 8015cfa:	800b      	strh	r3, [r1, #0]
 8015cfc:	4770      	bx	lr
 8015cfe:	bf00      	nop
 8015d00:	20027b8c 	.word	0x20027b8c
 8015d04:	20027b88 	.word	0x20027b88

08015d08 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8015d08:	4b07      	ldr	r3, [pc, #28]	@ (8015d28 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8015d0a:	b510      	push	{r4, lr}
 8015d0c:	781b      	ldrb	r3, [r3, #0]
 8015d0e:	2b01      	cmp	r3, #1
 8015d10:	d108      	bne.n	8015d24 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8015d12:	4b06      	ldr	r3, [pc, #24]	@ (8015d2c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8015d14:	880c      	ldrh	r4, [r1, #0]
 8015d16:	881b      	ldrh	r3, [r3, #0]
 8015d18:	f9b0 2000 	ldrsh.w	r2, [r0]
 8015d1c:	3b01      	subs	r3, #1
 8015d1e:	1b1b      	subs	r3, r3, r4
 8015d20:	8003      	strh	r3, [r0, #0]
 8015d22:	800a      	strh	r2, [r1, #0]
 8015d24:	bd10      	pop	{r4, pc}
 8015d26:	bf00      	nop
 8015d28:	20027b8c 	.word	0x20027b8c
 8015d2c:	20027b88 	.word	0x20027b88

08015d30 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8015d30:	4b0a      	ldr	r3, [pc, #40]	@ (8015d5c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8015d32:	b510      	push	{r4, lr}
 8015d34:	781b      	ldrb	r3, [r3, #0]
 8015d36:	2b01      	cmp	r3, #1
 8015d38:	d10e      	bne.n	8015d58 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8015d3a:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8015d3e:	8843      	ldrh	r3, [r0, #2]
 8015d40:	f9b0 4000 	ldrsh.w	r4, [r0]
 8015d44:	18ca      	adds	r2, r1, r3
 8015d46:	4b06      	ldr	r3, [pc, #24]	@ (8015d60 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8015d48:	8044      	strh	r4, [r0, #2]
 8015d4a:	881b      	ldrh	r3, [r3, #0]
 8015d4c:	1a9b      	subs	r3, r3, r2
 8015d4e:	8003      	strh	r3, [r0, #0]
 8015d50:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8015d54:	8081      	strh	r1, [r0, #4]
 8015d56:	80c3      	strh	r3, [r0, #6]
 8015d58:	bd10      	pop	{r4, pc}
 8015d5a:	bf00      	nop
 8015d5c:	20027b8c 	.word	0x20027b8c
 8015d60:	20027b88 	.word	0x20027b88

08015d64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8015d64:	4b08      	ldr	r3, [pc, #32]	@ (8015d88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 8015d66:	781b      	ldrb	r3, [r3, #0]
 8015d68:	2b01      	cmp	r3, #1
 8015d6a:	d10c      	bne.n	8015d86 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8015d6c:	8803      	ldrh	r3, [r0, #0]
 8015d6e:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8015d72:	8842      	ldrh	r2, [r0, #2]
 8015d74:	8002      	strh	r2, [r0, #0]
 8015d76:	185a      	adds	r2, r3, r1
 8015d78:	4b04      	ldr	r3, [pc, #16]	@ (8015d8c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8015d7a:	881b      	ldrh	r3, [r3, #0]
 8015d7c:	1a9b      	subs	r3, r3, r2
 8015d7e:	8043      	strh	r3, [r0, #2]
 8015d80:	88c3      	ldrh	r3, [r0, #6]
 8015d82:	80c1      	strh	r1, [r0, #6]
 8015d84:	8083      	strh	r3, [r0, #4]
 8015d86:	4770      	bx	lr
 8015d88:	20027b8c 	.word	0x20027b8c
 8015d8c:	20027b88 	.word	0x20027b88

08015d90 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8015d90:	4b07      	ldr	r3, [pc, #28]	@ (8015db0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8015d92:	b510      	push	{r4, lr}
 8015d94:	781b      	ldrb	r3, [r3, #0]
 8015d96:	2b01      	cmp	r3, #1
 8015d98:	d108      	bne.n	8015dac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8015d9a:	f9b1 3000 	ldrsh.w	r3, [r1]
 8015d9e:	f9b0 4000 	ldrsh.w	r4, [r0]
 8015da2:	8003      	strh	r3, [r0, #0]
 8015da4:	8893      	ldrh	r3, [r2, #4]
 8015da6:	3b01      	subs	r3, #1
 8015da8:	1b1b      	subs	r3, r3, r4
 8015daa:	800b      	strh	r3, [r1, #0]
 8015dac:	bd10      	pop	{r4, pc}
 8015dae:	bf00      	nop
 8015db0:	20027b8c 	.word	0x20027b8c

08015db4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8015db4:	4b0a      	ldr	r3, [pc, #40]	@ (8015de0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8015db6:	460a      	mov	r2, r1
 8015db8:	b510      	push	{r4, lr}
 8015dba:	781b      	ldrb	r3, [r3, #0]
 8015dbc:	2b01      	cmp	r3, #1
 8015dbe:	d10d      	bne.n	8015ddc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8015dc0:	8881      	ldrh	r1, [r0, #4]
 8015dc2:	8803      	ldrh	r3, [r0, #0]
 8015dc4:	440b      	add	r3, r1
 8015dc6:	4601      	mov	r1, r0
 8015dc8:	3b01      	subs	r3, #1
 8015dca:	f821 3b02 	strh.w	r3, [r1], #2
 8015dce:	f7ff ffdf 	bl	8015d90 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8015dd2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8015dd6:	88c2      	ldrh	r2, [r0, #6]
 8015dd8:	80c3      	strh	r3, [r0, #6]
 8015dda:	8082      	strh	r2, [r0, #4]
 8015ddc:	bd10      	pop	{r4, pc}
 8015dde:	bf00      	nop
 8015de0:	20027b8c 	.word	0x20027b8c

08015de4 <_ZN8touchgfx11Application13requestRedrawEv>:
 8015de4:	4b06      	ldr	r3, [pc, #24]	@ (8015e00 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8015de6:	2100      	movs	r1, #0
 8015de8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015dec:	4b05      	ldr	r3, [pc, #20]	@ (8015e04 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8015dee:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 8015df2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015df6:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 8015dfa:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 8015dfe:	4770      	bx	lr
 8015e00:	20027b88 	.word	0x20027b88
 8015e04:	20027b8a 	.word	0x20027b8a

08015e08 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8015e08:	4b03      	ldr	r3, [pc, #12]	@ (8015e18 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8015e0a:	6818      	ldr	r0, [r3, #0]
 8015e0c:	b110      	cbz	r0, 8015e14 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8015e0e:	6803      	ldr	r3, [r0, #0]
 8015e10:	699b      	ldr	r3, [r3, #24]
 8015e12:	4718      	bx	r3
 8015e14:	4770      	bx	lr
 8015e16:	bf00      	nop
 8015e18:	20027bd8 	.word	0x20027bd8

08015e1c <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8015e1c:	4770      	bx	lr
	...

08015e20 <_ZN8touchgfx11Application4drawEv>:
 8015e20:	4b09      	ldr	r3, [pc, #36]	@ (8015e48 <_ZN8touchgfx11Application4drawEv+0x28>)
 8015e22:	b507      	push	{r0, r1, r2, lr}
 8015e24:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015e28:	2100      	movs	r1, #0
 8015e2a:	4b08      	ldr	r3, [pc, #32]	@ (8015e4c <_ZN8touchgfx11Application4drawEv+0x2c>)
 8015e2c:	9100      	str	r1, [sp, #0]
 8015e2e:	4669      	mov	r1, sp
 8015e30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015e34:	f8ad 2004 	strh.w	r2, [sp, #4]
 8015e38:	f8ad 3006 	strh.w	r3, [sp, #6]
 8015e3c:	6803      	ldr	r3, [r0, #0]
 8015e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015e40:	4798      	blx	r3
 8015e42:	b003      	add	sp, #12
 8015e44:	f85d fb04 	ldr.w	pc, [sp], #4
 8015e48:	20027b88 	.word	0x20027b88
 8015e4c:	20027b8a 	.word	0x20027b8a

08015e50 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8015e50:	4b03      	ldr	r3, [pc, #12]	@ (8015e60 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8015e52:	6818      	ldr	r0, [r3, #0]
 8015e54:	b110      	cbz	r0, 8015e5c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8015e56:	6803      	ldr	r3, [r0, #0]
 8015e58:	69db      	ldr	r3, [r3, #28]
 8015e5a:	4718      	bx	r3
 8015e5c:	4770      	bx	lr
 8015e5e:	bf00      	nop
 8015e60:	20027bd8 	.word	0x20027bd8

08015e64 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8015e64:	4b03      	ldr	r3, [pc, #12]	@ (8015e74 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8015e66:	6818      	ldr	r0, [r3, #0]
 8015e68:	b110      	cbz	r0, 8015e70 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8015e6a:	6803      	ldr	r3, [r0, #0]
 8015e6c:	6a1b      	ldr	r3, [r3, #32]
 8015e6e:	4718      	bx	r3
 8015e70:	4770      	bx	lr
 8015e72:	bf00      	nop
 8015e74:	20027bd8 	.word	0x20027bd8

08015e78 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 8015e78:	2300      	movs	r3, #0
 8015e7a:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 8015e7e:	4770      	bx	lr

08015e80 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8015e80:	4b03      	ldr	r3, [pc, #12]	@ (8015e90 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8015e82:	6818      	ldr	r0, [r3, #0]
 8015e84:	b110      	cbz	r0, 8015e8c <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8015e86:	6803      	ldr	r3, [r0, #0]
 8015e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015e8a:	4718      	bx	r3
 8015e8c:	4770      	bx	lr
 8015e8e:	bf00      	nop
 8015e90:	20027bd8 	.word	0x20027bd8

08015e94 <_ZN8touchgfx11ApplicationD1Ev>:
 8015e94:	4770      	bx	lr

08015e96 <_ZN8touchgfx11ApplicationD0Ev>:
 8015e96:	b510      	push	{r4, lr}
 8015e98:	4604      	mov	r4, r0
 8015e9a:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 8015e9e:	f00f fdd6 	bl	8025a4e <_ZdlPvj>
 8015ea2:	4620      	mov	r0, r4
 8015ea4:	bd10      	pop	{r4, pc}

08015ea6 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8015ea6:	b510      	push	{r4, lr}
 8015ea8:	f9b1 4000 	ldrsh.w	r4, [r1]
 8015eac:	888a      	ldrh	r2, [r1, #4]
 8015eae:	f9b0 3000 	ldrsh.w	r3, [r0]
 8015eb2:	4422      	add	r2, r4
 8015eb4:	b212      	sxth	r2, r2
 8015eb6:	4293      	cmp	r3, r2
 8015eb8:	da15      	bge.n	8015ee6 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8015eba:	8882      	ldrh	r2, [r0, #4]
 8015ebc:	4413      	add	r3, r2
 8015ebe:	b21b      	sxth	r3, r3
 8015ec0:	429c      	cmp	r4, r3
 8015ec2:	da10      	bge.n	8015ee6 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8015ec4:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8015ec8:	88c9      	ldrh	r1, [r1, #6]
 8015eca:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8015ece:	4419      	add	r1, r3
 8015ed0:	b209      	sxth	r1, r1
 8015ed2:	428a      	cmp	r2, r1
 8015ed4:	da07      	bge.n	8015ee6 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8015ed6:	88c0      	ldrh	r0, [r0, #6]
 8015ed8:	4410      	add	r0, r2
 8015eda:	b200      	sxth	r0, r0
 8015edc:	4283      	cmp	r3, r0
 8015ede:	bfac      	ite	ge
 8015ee0:	2000      	movge	r0, #0
 8015ee2:	2001      	movlt	r0, #1
 8015ee4:	bd10      	pop	{r4, pc}
 8015ee6:	2000      	movs	r0, #0
 8015ee8:	e7fc      	b.n	8015ee4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08015eea <_ZN8touchgfx4Rect10restrictToEss>:
 8015eea:	f9b0 3000 	ldrsh.w	r3, [r0]
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	b510      	push	{r4, lr}
 8015ef2:	da04      	bge.n	8015efe <_ZN8touchgfx4Rect10restrictToEss+0x14>
 8015ef4:	8884      	ldrh	r4, [r0, #4]
 8015ef6:	4423      	add	r3, r4
 8015ef8:	8083      	strh	r3, [r0, #4]
 8015efa:	2300      	movs	r3, #0
 8015efc:	8003      	strh	r3, [r0, #0]
 8015efe:	f9b0 4000 	ldrsh.w	r4, [r0]
 8015f02:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8015f06:	1b09      	subs	r1, r1, r4
 8015f08:	428b      	cmp	r3, r1
 8015f0a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8015f0e:	bfc8      	it	gt
 8015f10:	8081      	strhgt	r1, [r0, #4]
 8015f12:	2b00      	cmp	r3, #0
 8015f14:	da04      	bge.n	8015f20 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8015f16:	88c1      	ldrh	r1, [r0, #6]
 8015f18:	440b      	add	r3, r1
 8015f1a:	80c3      	strh	r3, [r0, #6]
 8015f1c:	2300      	movs	r3, #0
 8015f1e:	8043      	strh	r3, [r0, #2]
 8015f20:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8015f24:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8015f28:	1a52      	subs	r2, r2, r1
 8015f2a:	4293      	cmp	r3, r2
 8015f2c:	bfc8      	it	gt
 8015f2e:	80c2      	strhgt	r2, [r0, #6]
 8015f30:	bd10      	pop	{r4, pc}
	...

08015f34 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8015f34:	4b10      	ldr	r3, [pc, #64]	@ (8015f78 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 8015f36:	b510      	push	{r4, lr}
 8015f38:	460c      	mov	r4, r1
 8015f3a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015f3e:	4b0f      	ldr	r3, [pc, #60]	@ (8015f7c <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8015f40:	4620      	mov	r0, r4
 8015f42:	f9b3 1000 	ldrsh.w	r1, [r3]
 8015f46:	f7ff ffd0 	bl	8015eea <_ZN8touchgfx4Rect10restrictToEss>
 8015f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8015f80 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 8015f4c:	6818      	ldr	r0, [r3, #0]
 8015f4e:	b190      	cbz	r0, 8015f76 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8015f50:	6803      	ldr	r3, [r0, #0]
 8015f52:	4621      	mov	r1, r4
 8015f54:	689b      	ldr	r3, [r3, #8]
 8015f56:	4798      	blx	r3
 8015f58:	4b0a      	ldr	r3, [pc, #40]	@ (8015f84 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 8015f5a:	6818      	ldr	r0, [r3, #0]
 8015f5c:	b118      	cbz	r0, 8015f66 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 8015f5e:	6803      	ldr	r3, [r0, #0]
 8015f60:	4621      	mov	r1, r4
 8015f62:	689b      	ldr	r3, [r3, #8]
 8015f64:	4798      	blx	r3
 8015f66:	4b08      	ldr	r3, [pc, #32]	@ (8015f88 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8015f68:	4621      	mov	r1, r4
 8015f6a:	6818      	ldr	r0, [r3, #0]
 8015f6c:	6803      	ldr	r3, [r0, #0]
 8015f6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015f72:	69db      	ldr	r3, [r3, #28]
 8015f74:	4718      	bx	r3
 8015f76:	bd10      	pop	{r4, pc}
 8015f78:	20027b8a 	.word	0x20027b8a
 8015f7c:	20027b88 	.word	0x20027b88
 8015f80:	20027bd8 	.word	0x20027bd8
 8015f84:	20027bd4 	.word	0x20027bd4
 8015f88:	20027b94 	.word	0x20027b94

08015f8c <_ZNK8touchgfx4Rect8includesERKS0_>:
 8015f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f8e:	4606      	mov	r6, r0
 8015f90:	4608      	mov	r0, r1
 8015f92:	460f      	mov	r7, r1
 8015f94:	f7fa f90f 	bl	80101b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015f98:	b9e8      	cbnz	r0, 8015fd6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8015f9a:	f9b7 5000 	ldrsh.w	r5, [r7]
 8015f9e:	f9b6 4000 	ldrsh.w	r4, [r6]
 8015fa2:	42a5      	cmp	r5, r4
 8015fa4:	db17      	blt.n	8015fd6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8015fa6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8015faa:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8015fae:	429a      	cmp	r2, r3
 8015fb0:	db11      	blt.n	8015fd6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8015fb2:	88b9      	ldrh	r1, [r7, #4]
 8015fb4:	440d      	add	r5, r1
 8015fb6:	88b1      	ldrh	r1, [r6, #4]
 8015fb8:	440c      	add	r4, r1
 8015fba:	b22d      	sxth	r5, r5
 8015fbc:	b224      	sxth	r4, r4
 8015fbe:	42a5      	cmp	r5, r4
 8015fc0:	dc09      	bgt.n	8015fd6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8015fc2:	88f8      	ldrh	r0, [r7, #6]
 8015fc4:	4410      	add	r0, r2
 8015fc6:	88f2      	ldrh	r2, [r6, #6]
 8015fc8:	4413      	add	r3, r2
 8015fca:	b200      	sxth	r0, r0
 8015fcc:	b21b      	sxth	r3, r3
 8015fce:	4298      	cmp	r0, r3
 8015fd0:	bfcc      	ite	gt
 8015fd2:	2000      	movgt	r0, #0
 8015fd4:	2001      	movle	r0, #1
 8015fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015fd8 <_ZN8touchgfx11Application11getInstanceEv>:
 8015fd8:	4b01      	ldr	r3, [pc, #4]	@ (8015fe0 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8015fda:	6818      	ldr	r0, [r3, #0]
 8015fdc:	4770      	bx	lr
 8015fde:	bf00      	nop
 8015fe0:	20027be8 	.word	0x20027be8

08015fe4 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>:
 8015fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015fe6:	4b10      	ldr	r3, [pc, #64]	@ (8016028 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x44>)
 8015fe8:	4605      	mov	r5, r0
 8015fea:	781b      	ldrb	r3, [r3, #0]
 8015fec:	b1d3      	cbz	r3, 8016024 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x40>
 8015fee:	4b0f      	ldr	r3, [pc, #60]	@ (801602c <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x48>)
 8015ff0:	f100 06ee 	add.w	r6, r0, #238	@ 0xee
 8015ff4:	4f0e      	ldr	r7, [pc, #56]	@ (8016030 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x4c>)
 8015ff6:	881c      	ldrh	r4, [r3, #0]
 8015ff8:	f8b5 312e 	ldrh.w	r3, [r5, #302]	@ 0x12e
 8015ffc:	42a3      	cmp	r3, r4
 8015ffe:	d90e      	bls.n	801601e <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x3a>
 8016000:	683b      	ldr	r3, [r7, #0]
 8016002:	f893 2076 	ldrb.w	r2, [r3, #118]	@ 0x76
 8016006:	b10a      	cbz	r2, 801600c <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x28>
 8016008:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 801600a:	b900      	cbnz	r0, 801600e <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x2a>
 801600c:	6898      	ldr	r0, [r3, #8]
 801600e:	6803      	ldr	r3, [r0, #0]
 8016010:	eb06 01c4 	add.w	r1, r6, r4, lsl #3
 8016014:	3401      	adds	r4, #1
 8016016:	69db      	ldr	r3, [r3, #28]
 8016018:	4798      	blx	r3
 801601a:	b2a4      	uxth	r4, r4
 801601c:	e7ec      	b.n	8015ff8 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x14>
 801601e:	2300      	movs	r3, #0
 8016020:	f8a5 312e 	strh.w	r3, [r5, #302]	@ 0x12e
 8016024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016026:	bf00      	nop
 8016028:	20027b92 	.word	0x20027b92
 801602c:	20000070 	.word	0x20000070
 8016030:	20027b94 	.word	0x20027b94

08016034 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 8016034:	2300      	movs	r3, #0
 8016036:	b510      	push	{r4, lr}
 8016038:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 801603c:	4604      	mov	r4, r0
 801603e:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 8016042:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 8016046:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 801604a:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 801604e:	429a      	cmp	r2, r3
 8016050:	d90e      	bls.n	8016070 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 8016052:	18e2      	adds	r2, r4, r3
 8016054:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 8016058:	b122      	cbz	r2, 8016064 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 801605a:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 801605e:	6803      	ldr	r3, [r0, #0]
 8016060:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016062:	4798      	blx	r3
 8016064:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 8016068:	3301      	adds	r3, #1
 801606a:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 801606e:	e7ea      	b.n	8016046 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 8016070:	bd10      	pop	{r4, pc}

08016072 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>:
 8016072:	b530      	push	{r4, r5, lr}
 8016074:	2200      	movs	r2, #0
 8016076:	f8b0 5080 	ldrh.w	r5, [r0, #128]	@ 0x80
 801607a:	b293      	uxth	r3, r2
 801607c:	429d      	cmp	r5, r3
 801607e:	d90e      	bls.n	801609e <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 8016080:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8016084:	428b      	cmp	r3, r1
 8016086:	d10b      	bne.n	80160a0 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 8016088:	1884      	adds	r4, r0, r2
 801608a:	f894 3084 	ldrb.w	r3, [r4, #132]	@ 0x84
 801608e:	b13b      	cbz	r3, 80160a0 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 8016090:	3b01      	subs	r3, #1
 8016092:	b2db      	uxtb	r3, r3
 8016094:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
 8016098:	b90b      	cbnz	r3, 801609e <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 801609a:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801609e:	bd30      	pop	{r4, r5, pc}
 80160a0:	3201      	adds	r2, #1
 80160a2:	e7ea      	b.n	801607a <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x8>

080160a4 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 80160a4:	2300      	movs	r3, #0
 80160a6:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 80160aa:	30a4      	adds	r0, #164	@ 0xa4
 80160ac:	f820 3c24 	strh.w	r3, [r0, #-36]
 80160b0:	f802 3b01 	strb.w	r3, [r2], #1
 80160b4:	4282      	cmp	r2, r0
 80160b6:	d1fb      	bne.n	80160b0 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 80160b8:	4770      	bx	lr
	...

080160bc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 80160bc:	b570      	push	{r4, r5, r6, lr}
 80160be:	4c0b      	ldr	r4, [pc, #44]	@ (80160ec <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 80160c0:	4605      	mov	r5, r0
 80160c2:	460e      	mov	r6, r1
 80160c4:	6820      	ldr	r0, [r4, #0]
 80160c6:	b110      	cbz	r0, 80160ce <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 80160c8:	6803      	ldr	r3, [r0, #0]
 80160ca:	695b      	ldr	r3, [r3, #20]
 80160cc:	4798      	blx	r3
 80160ce:	1d28      	adds	r0, r5, #4
 80160d0:	f7ff ffe8 	bl	80160a4 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 80160d4:	6026      	str	r6, [r4, #0]
 80160d6:	6833      	ldr	r3, [r6, #0]
 80160d8:	4630      	mov	r0, r6
 80160da:	68db      	ldr	r3, [r3, #12]
 80160dc:	4798      	blx	r3
 80160de:	682b      	ldr	r3, [r5, #0]
 80160e0:	4628      	mov	r0, r5
 80160e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80160e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80160e8:	4718      	bx	r3
 80160ea:	bf00      	nop
 80160ec:	20027bd8 	.word	0x20027bd8

080160f0 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 80160f0:	2300      	movs	r3, #0
 80160f2:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 80160f6:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 80160fa:	461a      	mov	r2, r3
 80160fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80160fe:	461c      	mov	r4, r3
 8016100:	461d      	mov	r5, r3
 8016102:	459c      	cmp	ip, r3
 8016104:	dd1a      	ble.n	801613c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 8016106:	18c6      	adds	r6, r0, r3
 8016108:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 801610c:	b16e      	cbz	r6, 801612a <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 801610e:	429a      	cmp	r2, r3
 8016110:	d008      	beq.n	8016124 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 8016112:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 8016116:	fa1f fe82 	uxth.w	lr, r2
 801611a:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 801611e:	1887      	adds	r7, r0, r2
 8016120:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 8016124:	3201      	adds	r2, #1
 8016126:	3301      	adds	r3, #1
 8016128:	e7eb      	b.n	8016102 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 801612a:	4299      	cmp	r1, r3
 801612c:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 8016130:	bfa8      	it	ge
 8016132:	3501      	addge	r5, #1
 8016134:	429e      	cmp	r6, r3
 8016136:	bfc8      	it	gt
 8016138:	3401      	addgt	r4, #1
 801613a:	e7f4      	b.n	8016126 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 801613c:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 8016140:	1b49      	subs	r1, r1, r5
 8016142:	1b1b      	subs	r3, r3, r4
 8016144:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 8016148:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 801614c:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 8016150:	4293      	cmp	r3, r2
 8016152:	dd03      	ble.n	801615c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 8016154:	3b01      	subs	r3, #1
 8016156:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 801615a:	e7f7      	b.n	801614c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 801615c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08016160 <_ZN8touchgfx11Application15handleTickEventEv>:
 8016160:	b570      	push	{r4, r5, r6, lr}
 8016162:	4d16      	ldr	r5, [pc, #88]	@ (80161bc <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 8016164:	4604      	mov	r4, r0
 8016166:	6828      	ldr	r0, [r5, #0]
 8016168:	b140      	cbz	r0, 801617c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801616a:	7a03      	ldrb	r3, [r0, #8]
 801616c:	b933      	cbnz	r3, 801617c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801616e:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 8016172:	6803      	ldr	r3, [r0, #0]
 8016174:	689b      	ldr	r3, [r3, #8]
 8016176:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801617a:	4718      	bx	r3
 801617c:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 8016180:	4e0f      	ldr	r6, [pc, #60]	@ (80161c0 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 8016182:	b973      	cbnz	r3, 80161a2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8016184:	b168      	cbz	r0, 80161a2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8016186:	7a03      	ldrb	r3, [r0, #8]
 8016188:	b15b      	cbz	r3, 80161a2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801618a:	6830      	ldr	r0, [r6, #0]
 801618c:	b110      	cbz	r0, 8016194 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801618e:	6803      	ldr	r3, [r0, #0]
 8016190:	691b      	ldr	r3, [r3, #16]
 8016192:	4798      	blx	r3
 8016194:	6828      	ldr	r0, [r5, #0]
 8016196:	6803      	ldr	r3, [r0, #0]
 8016198:	68db      	ldr	r3, [r3, #12]
 801619a:	4798      	blx	r3
 801619c:	2301      	movs	r3, #1
 801619e:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 80161a2:	3404      	adds	r4, #4
 80161a4:	4620      	mov	r0, r4
 80161a6:	f7ff ff45 	bl	8016034 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 80161aa:	4620      	mov	r0, r4
 80161ac:	f7ff ffa0 	bl	80160f0 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 80161b0:	6830      	ldr	r0, [r6, #0]
 80161b2:	b110      	cbz	r0, 80161ba <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 80161b4:	6803      	ldr	r3, [r0, #0]
 80161b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80161b8:	e7dd      	b.n	8016176 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 80161ba:	bd70      	pop	{r4, r5, r6, pc}
 80161bc:	20027bdc 	.word	0x20027bdc
 80161c0:	20027bd8 	.word	0x20027bd8

080161c4 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>:
 80161c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80161c6:	2300      	movs	r3, #0
 80161c8:	4604      	mov	r4, r0
 80161ca:	460d      	mov	r5, r1
 80161cc:	f8b0 1080 	ldrh.w	r1, [r0, #128]	@ 0x80
 80161d0:	4618      	mov	r0, r3
 80161d2:	b29a      	uxth	r2, r3
 80161d4:	4291      	cmp	r1, r2
 80161d6:	d912      	bls.n	80161fe <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x3a>
 80161d8:	f854 7023 	ldr.w	r7, [r4, r3, lsl #2]
 80161dc:	18e6      	adds	r6, r4, r3
 80161de:	42af      	cmp	r7, r5
 80161e0:	f896 2084 	ldrb.w	r2, [r6, #132]	@ 0x84
 80161e4:	d105      	bne.n	80161f2 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2e>
 80161e6:	2aff      	cmp	r2, #255	@ 0xff
 80161e8:	d002      	beq.n	80161f0 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 80161ea:	3201      	adds	r2, #1
 80161ec:	f886 2084 	strb.w	r2, [r6, #132]	@ 0x84
 80161f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80161f2:	2a00      	cmp	r2, #0
 80161f4:	f103 0301 	add.w	r3, r3, #1
 80161f8:	bf08      	it	eq
 80161fa:	2001      	moveq	r0, #1
 80161fc:	e7e9      	b.n	80161d2 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0xe>
 80161fe:	b120      	cbz	r0, 801620a <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x46>
 8016200:	2920      	cmp	r1, #32
 8016202:	d102      	bne.n	801620a <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x46>
 8016204:	4620      	mov	r0, r4
 8016206:	f7ff ff73 	bl	80160f0 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 801620a:	f8b4 3080 	ldrh.w	r3, [r4, #128]	@ 0x80
 801620e:	2b1f      	cmp	r3, #31
 8016210:	d8ee      	bhi.n	80161f0 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 8016212:	18e2      	adds	r2, r4, r3
 8016214:	2101      	movs	r1, #1
 8016216:	f882 1084 	strb.w	r1, [r2, #132]	@ 0x84
 801621a:	185a      	adds	r2, r3, r1
 801621c:	f8a4 2080 	strh.w	r2, [r4, #128]	@ 0x80
 8016220:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8016224:	e7e4      	b.n	80161f0 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>

08016226 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8016226:	4603      	mov	r3, r0
 8016228:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 801622c:	2200      	movs	r2, #0
 801622e:	801a      	strh	r2, [r3, #0]
 8016230:	3308      	adds	r3, #8
 8016232:	f823 2c06 	strh.w	r2, [r3, #-6]
 8016236:	f823 2c04 	strh.w	r2, [r3, #-4]
 801623a:	f823 2c02 	strh.w	r2, [r3, #-2]
 801623e:	428b      	cmp	r3, r1
 8016240:	d1f5      	bne.n	801622e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8016242:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 8016246:	4770      	bx	lr

08016248 <_ZN8touchgfx11ApplicationC1Ev>:
 8016248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801624a:	4b1d      	ldr	r3, [pc, #116]	@ (80162c0 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801624c:	4606      	mov	r6, r0
 801624e:	4604      	mov	r4, r0
 8016250:	2500      	movs	r5, #0
 8016252:	f846 3b04 	str.w	r3, [r6], #4
 8016256:	22a8      	movs	r2, #168	@ 0xa8
 8016258:	2100      	movs	r1, #0
 801625a:	4630      	mov	r0, r6
 801625c:	f00f fec2 	bl	8025fe4 <memset>
 8016260:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 8016264:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 8016268:	4f16      	ldr	r7, [pc, #88]	@ (80162c4 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801626a:	f7ff ffdc 	bl	8016226 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801626e:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 8016272:	f7ff ffd8 	bl	8016226 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8016276:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 801627a:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 801627e:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 8016282:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 8016286:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 801628a:	490f      	ldr	r1, [pc, #60]	@ (80162c8 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801628c:	480f      	ldr	r0, [pc, #60]	@ (80162cc <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801628e:	f00e fee9 	bl	8025064 <CRC_Lock>
 8016292:	4b0f      	ldr	r3, [pc, #60]	@ (80162d0 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 8016294:	b158      	cbz	r0, 80162ae <_ZN8touchgfx11ApplicationC1Ev+0x66>
 8016296:	801d      	strh	r5, [r3, #0]
 8016298:	2300      	movs	r3, #0
 801629a:	4a0e      	ldr	r2, [pc, #56]	@ (80162d4 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 801629c:	4630      	mov	r0, r6
 801629e:	6013      	str	r3, [r2, #0]
 80162a0:	4a0d      	ldr	r2, [pc, #52]	@ (80162d8 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 80162a2:	603b      	str	r3, [r7, #0]
 80162a4:	6013      	str	r3, [r2, #0]
 80162a6:	f7ff fefd 	bl	80160a4 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 80162aa:	4620      	mov	r0, r4
 80162ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80162ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80162b2:	2002      	movs	r0, #2
 80162b4:	801a      	strh	r2, [r3, #0]
 80162b6:	6038      	str	r0, [r7, #0]
 80162b8:	f001 faee 	bl	8017898 <_ZN8touchgfx6Screen4drawEv>
 80162bc:	e7ec      	b.n	8016298 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 80162be:	bf00      	nop
 80162c0:	0802aed0 	.word	0x0802aed0
 80162c4:	20027bd8 	.word	0x20027bd8
 80162c8:	b5e8b5cd 	.word	0xb5e8b5cd
 80162cc:	f407a5c2 	.word	0xf407a5c2
 80162d0:	20000070 	.word	0x20000070
 80162d4:	20027be8 	.word	0x20027be8
 80162d8:	20027bdc 	.word	0x20027bdc

080162dc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 80162dc:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 80162e0:	3b01      	subs	r3, #1
 80162e2:	b29b      	uxth	r3, r3
 80162e4:	428b      	cmp	r3, r1
 80162e6:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 80162ea:	b510      	push	{r4, lr}
 80162ec:	d908      	bls.n	8016300 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 80162ee:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80162f2:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 80162f6:	681a      	ldr	r2, [r3, #0]
 80162f8:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 80162fc:	685a      	ldr	r2, [r3, #4]
 80162fe:	6062      	str	r2, [r4, #4]
 8016300:	bd10      	pop	{r4, pc}
	...

08016304 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8016304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016308:	b08f      	sub	sp, #60	@ 0x3c
 801630a:	4b8f      	ldr	r3, [pc, #572]	@ (8016548 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 801630c:	4683      	mov	fp, r0
 801630e:	ac0a      	add	r4, sp, #40	@ 0x28
 8016310:	e884 0006 	stmia.w	r4, {r1, r2}
 8016314:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016318:	4620      	mov	r0, r4
 801631a:	4b8c      	ldr	r3, [pc, #560]	@ (801654c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 801631c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8016320:	f7ff fde3 	bl	8015eea <_ZN8touchgfx4Rect10restrictToEss>
 8016324:	4620      	mov	r0, r4
 8016326:	f7f9 ff46 	bl	80101b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801632a:	2800      	cmp	r0, #0
 801632c:	d16a      	bne.n	8016404 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801632e:	9403      	str	r4, [sp, #12]
 8016330:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 8016334:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 8016338:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 801633c:	9301      	str	r3, [sp, #4]
 801633e:	35a4      	adds	r5, #164	@ 0xa4
 8016340:	b15c      	cbz	r4, 801635a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8016342:	4629      	mov	r1, r5
 8016344:	9803      	ldr	r0, [sp, #12]
 8016346:	f7ff fe21 	bl	8015f8c <_ZNK8touchgfx4Rect8includesERKS0_>
 801634a:	3c01      	subs	r4, #1
 801634c:	b118      	cbz	r0, 8016356 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 801634e:	b2a1      	uxth	r1, r4
 8016350:	9801      	ldr	r0, [sp, #4]
 8016352:	f7ff ffc3 	bl	80162dc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8016356:	3d08      	subs	r5, #8
 8016358:	e7f2      	b.n	8016340 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 801635a:	f8bb 80ec 	ldrh.w	r8, [fp, #236]	@ 0xec
 801635e:	f108 33ff 	add.w	r3, r8, #4294967295
 8016362:	f8cd 8010 	str.w	r8, [sp, #16]
 8016366:	9302      	str	r3, [sp, #8]
 8016368:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 801636c:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 8016370:	9306      	str	r3, [sp, #24]
 8016372:	445c      	add	r4, fp
 8016374:	2500      	movs	r5, #0
 8016376:	4626      	mov	r6, r4
 8016378:	f8cd 8014 	str.w	r8, [sp, #20]
 801637c:	462f      	mov	r7, r5
 801637e:	9b05      	ldr	r3, [sp, #20]
 8016380:	2b00      	cmp	r3, #0
 8016382:	d073      	beq.n	801646c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8016384:	9903      	ldr	r1, [sp, #12]
 8016386:	4630      	mov	r0, r6
 8016388:	f7ff fd8d 	bl	8015ea6 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801638c:	b350      	cbz	r0, 80163e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801638e:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 8016392:	f9b6 c000 	ldrsh.w	ip, [r6]
 8016396:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	@ 0x2a
 801639a:	45e6      	cmp	lr, ip
 801639c:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 80163a0:	db33      	blt.n	801640a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 80163a2:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 80163a6:	88b3      	ldrh	r3, [r6, #4]
 80163a8:	4472      	add	r2, lr
 80163aa:	4463      	add	r3, ip
 80163ac:	b212      	sxth	r2, r2
 80163ae:	b21b      	sxth	r3, r3
 80163b0:	429a      	cmp	r2, r3
 80163b2:	dc2a      	bgt.n	801640a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 80163b4:	fa1f f289 	uxth.w	r2, r9
 80163b8:	88f3      	ldrh	r3, [r6, #6]
 80163ba:	45ca      	cmp	sl, r9
 80163bc:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 80163c0:	4413      	add	r3, r2
 80163c2:	fa1f fc8a 	uxth.w	ip, sl
 80163c6:	b29b      	uxth	r3, r3
 80163c8:	fa0f fe83 	sxth.w	lr, r3
 80163cc:	db0f      	blt.n	80163ee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 80163ce:	eba3 030c 	sub.w	r3, r3, ip
 80163d2:	1ac9      	subs	r1, r1, r3
 80163d4:	b209      	sxth	r1, r1
 80163d6:	2900      	cmp	r1, #0
 80163d8:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 80163dc:	dd12      	ble.n	8016404 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80163de:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 80163e2:	4605      	mov	r5, r0
 80163e4:	9b05      	ldr	r3, [sp, #20]
 80163e6:	3e08      	subs	r6, #8
 80163e8:	3b01      	subs	r3, #1
 80163ea:	9305      	str	r3, [sp, #20]
 80163ec:	e7c7      	b.n	801637e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 80163ee:	4461      	add	r1, ip
 80163f0:	b209      	sxth	r1, r1
 80163f2:	4571      	cmp	r1, lr
 80163f4:	dc38      	bgt.n	8016468 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 80163f6:	eba2 020c 	sub.w	r2, r2, ip
 80163fa:	b212      	sxth	r2, r2
 80163fc:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 8016400:	2a00      	cmp	r2, #0
 8016402:	dcee      	bgt.n	80163e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8016404:	b00f      	add	sp, #60	@ 0x3c
 8016406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801640a:	45ca      	cmp	sl, r9
 801640c:	db2c      	blt.n	8016468 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801640e:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 8016412:	449a      	add	sl, r3
 8016414:	88f3      	ldrh	r3, [r6, #6]
 8016416:	4499      	add	r9, r3
 8016418:	fa0f fa8a 	sxth.w	sl, sl
 801641c:	fa0f f989 	sxth.w	r9, r9
 8016420:	45ca      	cmp	sl, r9
 8016422:	dc21      	bgt.n	8016468 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8016424:	fa1f f28c 	uxth.w	r2, ip
 8016428:	88b3      	ldrh	r3, [r6, #4]
 801642a:	45e6      	cmp	lr, ip
 801642c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8016430:	4413      	add	r3, r2
 8016432:	fa1f f98e 	uxth.w	r9, lr
 8016436:	b29b      	uxth	r3, r3
 8016438:	fa0f fa83 	sxth.w	sl, r3
 801643c:	db0a      	blt.n	8016454 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 801643e:	eba3 0309 	sub.w	r3, r3, r9
 8016442:	1ac9      	subs	r1, r1, r3
 8016444:	b209      	sxth	r1, r1
 8016446:	2900      	cmp	r1, #0
 8016448:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 801644c:	ddda      	ble.n	8016404 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801644e:	f8ad a028 	strh.w	sl, [sp, #40]	@ 0x28
 8016452:	e7c6      	b.n	80163e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8016454:	4449      	add	r1, r9
 8016456:	b209      	sxth	r1, r1
 8016458:	4551      	cmp	r1, sl
 801645a:	dc05      	bgt.n	8016468 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801645c:	eba2 0209 	sub.w	r2, r2, r9
 8016460:	b212      	sxth	r2, r2
 8016462:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 8016466:	e7cb      	b.n	8016400 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 8016468:	4607      	mov	r7, r0
 801646a:	e7bb      	b.n	80163e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801646c:	2d00      	cmp	r5, #0
 801646e:	d181      	bne.n	8016374 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 8016470:	2f00      	cmp	r7, #0
 8016472:	f000 81dd 	beq.w	8016830 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8016476:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 801647a:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 801647e:	b2b3      	uxth	r3, r6
 8016480:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8016484:	b2b9      	uxth	r1, r7
 8016486:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 801648a:	441a      	add	r2, r3
 801648c:	448a      	add	sl, r1
 801648e:	9105      	str	r1, [sp, #20]
 8016490:	b292      	uxth	r2, r2
 8016492:	fa1f fa8a 	uxth.w	sl, sl
 8016496:	fa0f f882 	sxth.w	r8, r2
 801649a:	fa0f f98a 	sxth.w	r9, sl
 801649e:	e9cd 2307 	strd	r2, r3, [sp, #28]
 80164a2:	9b04      	ldr	r3, [sp, #16]
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	d053      	beq.n	8016550 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 80164a8:	9903      	ldr	r1, [sp, #12]
 80164aa:	4620      	mov	r0, r4
 80164ac:	f7ff fcfb 	bl	8015ea6 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80164b0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80164b4:	b1c0      	cbz	r0, 80164e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 80164b6:	f9b4 e000 	ldrsh.w	lr, [r4]
 80164ba:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80164be:	4576      	cmp	r6, lr
 80164c0:	dc23      	bgt.n	801650a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 80164c2:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 80164c6:	44f4      	add	ip, lr
 80164c8:	fa0f fc8c 	sxth.w	ip, ip
 80164cc:	45e0      	cmp	r8, ip
 80164ce:	db1c      	blt.n	801650a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 80164d0:	428f      	cmp	r7, r1
 80164d2:	fa1f fc81 	uxth.w	ip, r1
 80164d6:	88e1      	ldrh	r1, [r4, #6]
 80164d8:	dc0d      	bgt.n	80164f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 80164da:	ebaa 0c0c 	sub.w	ip, sl, ip
 80164de:	f8a4 9002 	strh.w	r9, [r4, #2]
 80164e2:	eba1 010c 	sub.w	r1, r1, ip
 80164e6:	80e1      	strh	r1, [r4, #6]
 80164e8:	4628      	mov	r0, r5
 80164ea:	9904      	ldr	r1, [sp, #16]
 80164ec:	3c08      	subs	r4, #8
 80164ee:	4605      	mov	r5, r0
 80164f0:	3901      	subs	r1, #1
 80164f2:	9104      	str	r1, [sp, #16]
 80164f4:	e7d3      	b.n	801649e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19a>
 80164f6:	4461      	add	r1, ip
 80164f8:	b209      	sxth	r1, r1
 80164fa:	4549      	cmp	r1, r9
 80164fc:	dcf5      	bgt.n	80164ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 80164fe:	9905      	ldr	r1, [sp, #20]
 8016500:	eba1 0c0c 	sub.w	ip, r1, ip
 8016504:	f8a4 c006 	strh.w	ip, [r4, #6]
 8016508:	e7ee      	b.n	80164e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801650a:	428f      	cmp	r7, r1
 801650c:	dced      	bgt.n	80164ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801650e:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 8016512:	4461      	add	r1, ip
 8016514:	b209      	sxth	r1, r1
 8016516:	4589      	cmp	r9, r1
 8016518:	dbe7      	blt.n	80164ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801651a:	4576      	cmp	r6, lr
 801651c:	fa1f fc8e 	uxth.w	ip, lr
 8016520:	88a1      	ldrh	r1, [r4, #4]
 8016522:	dc07      	bgt.n	8016534 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 8016524:	eba2 0c0c 	sub.w	ip, r2, ip
 8016528:	f8a4 8000 	strh.w	r8, [r4]
 801652c:	eba1 010c 	sub.w	r1, r1, ip
 8016530:	80a1      	strh	r1, [r4, #4]
 8016532:	e7d9      	b.n	80164e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8016534:	4461      	add	r1, ip
 8016536:	b209      	sxth	r1, r1
 8016538:	4588      	cmp	r8, r1
 801653a:	dbd6      	blt.n	80164ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801653c:	eba3 0c0c 	sub.w	ip, r3, ip
 8016540:	f8a4 c004 	strh.w	ip, [r4, #4]
 8016544:	e7d0      	b.n	80164e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8016546:	bf00      	nop
 8016548:	20027b8a 	.word	0x20027b8a
 801654c:	20027b88 	.word	0x20027b88
 8016550:	2d00      	cmp	r5, #0
 8016552:	f000 816d 	beq.w	8016830 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8016556:	9b06      	ldr	r3, [sp, #24]
 8016558:	445b      	add	r3, fp
 801655a:	461c      	mov	r4, r3
 801655c:	9b02      	ldr	r3, [sp, #8]
 801655e:	3301      	adds	r3, #1
 8016560:	f000 8166 	beq.w	8016830 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8016564:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 8016568:	9803      	ldr	r0, [sp, #12]
 801656a:	4629      	mov	r1, r5
 801656c:	f7ff fd0e 	bl	8015f8c <_ZNK8touchgfx4Rect8includesERKS0_>
 8016570:	b120      	cbz	r0, 801657c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 8016572:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8016576:	9801      	ldr	r0, [sp, #4]
 8016578:	f7ff feb0 	bl	80162dc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801657c:	9903      	ldr	r1, [sp, #12]
 801657e:	4628      	mov	r0, r5
 8016580:	f7ff fc91 	bl	8015ea6 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8016584:	2800      	cmp	r0, #0
 8016586:	f000 809c 	beq.w	80166c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801658a:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 801658e:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8016592:	fa1f f189 	uxth.w	r1, r9
 8016596:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 801659a:	9309      	str	r3, [sp, #36]	@ 0x24
 801659c:	eb01 0c03 	add.w	ip, r1, r3
 80165a0:	b283      	uxth	r3, r0
 80165a2:	4548      	cmp	r0, r9
 80165a4:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 80165a8:	fa1f fa8c 	uxth.w	sl, ip
 80165ac:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 80165b0:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 80165b4:	eb03 050c 	add.w	r5, r3, ip
 80165b8:	b2ad      	uxth	r5, r5
 80165ba:	9505      	str	r5, [sp, #20]
 80165bc:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 80165c0:	9504      	str	r5, [sp, #16]
 80165c2:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 80165c6:	f340 8099 	ble.w	80166fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 80165ca:	1a5b      	subs	r3, r3, r1
 80165cc:	4596      	cmp	lr, r2
 80165ce:	fa0f f08a 	sxth.w	r0, sl
 80165d2:	b29b      	uxth	r3, r3
 80165d4:	b21e      	sxth	r6, r3
 80165d6:	dd2e      	ble.n	8016636 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 80165d8:	9f02      	ldr	r7, [sp, #8]
 80165da:	fa1f fe8e 	uxth.w	lr, lr
 80165de:	b292      	uxth	r2, r2
 80165e0:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 80165e4:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 80165e8:	9f04      	ldr	r7, [sp, #16]
 80165ea:	ebae 0102 	sub.w	r1, lr, r2
 80165ee:	44a6      	add	lr, r4
 80165f0:	1a3f      	subs	r7, r7, r0
 80165f2:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 80165f6:	b289      	uxth	r1, r1
 80165f8:	4402      	add	r2, r0
 80165fa:	fa0f fe8e 	sxth.w	lr, lr
 80165fe:	b20d      	sxth	r5, r1
 8016600:	b212      	sxth	r2, r2
 8016602:	436f      	muls	r7, r5
 8016604:	ebae 0202 	sub.w	r2, lr, r2
 8016608:	4372      	muls	r2, r6
 801660a:	4297      	cmp	r7, r2
 801660c:	db09      	blt.n	8016622 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 801660e:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 8016612:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 8016616:	449c      	add	ip, r3
 8016618:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 801661c:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 8016620:	e686      	b.n	8016330 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8016622:	4421      	add	r1, r4
 8016624:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 8016628:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 801662c:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8016630:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8016634:	e67c      	b.n	8016330 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8016636:	9f04      	ldr	r7, [sp, #16]
 8016638:	42b8      	cmp	r0, r7
 801663a:	da27      	bge.n	801668c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 801663c:	9902      	ldr	r1, [sp, #8]
 801663e:	1a3f      	subs	r7, r7, r0
 8016640:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 8016644:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 8016648:	eb05 010e 	add.w	r1, r5, lr
 801664c:	fa1f f881 	uxth.w	r8, r1
 8016650:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 8016654:	4411      	add	r1, r2
 8016656:	fa0f f988 	sxth.w	r9, r8
 801665a:	eba2 020e 	sub.w	r2, r2, lr
 801665e:	eba1 0108 	sub.w	r1, r1, r8
 8016662:	4372      	muls	r2, r6
 8016664:	b289      	uxth	r1, r1
 8016666:	fa0f f881 	sxth.w	r8, r1
 801666a:	fb08 f707 	mul.w	r7, r8, r7
 801666e:	42ba      	cmp	r2, r7
 8016670:	dc06      	bgt.n	8016680 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 8016672:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 8016676:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 801667a:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 801667e:	e7ca      	b.n	8016616 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 8016680:	4429      	add	r1, r5
 8016682:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 8016686:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801668a:	e651      	b.n	8016330 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801668c:	9805      	ldr	r0, [sp, #20]
 801668e:	2d06      	cmp	r5, #6
 8016690:	ebaa 0000 	sub.w	r0, sl, r0
 8016694:	b280      	uxth	r0, r0
 8016696:	fa0f fe80 	sxth.w	lr, r0
 801669a:	d817      	bhi.n	80166cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 801669c:	9b04      	ldr	r3, [sp, #16]
 801669e:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 80166a2:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 80166a6:	1c6b      	adds	r3, r5, #1
 80166a8:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 80166ac:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 80166b0:	9b01      	ldr	r3, [sp, #4]
 80166b2:	9801      	ldr	r0, [sp, #4]
 80166b4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80166b8:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 80166bc:	805a      	strh	r2, [r3, #2]
 80166be:	809e      	strh	r6, [r3, #4]
 80166c0:	80d9      	strh	r1, [r3, #6]
 80166c2:	9b02      	ldr	r3, [sp, #8]
 80166c4:	3c08      	subs	r4, #8
 80166c6:	3b01      	subs	r3, #1
 80166c8:	9302      	str	r3, [sp, #8]
 80166ca:	e747      	b.n	801655c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 80166cc:	9a02      	ldr	r2, [sp, #8]
 80166ce:	45b6      	cmp	lr, r6
 80166d0:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80166d4:	db0d      	blt.n	80166f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 80166d6:	449c      	add	ip, r3
 80166d8:	445a      	add	r2, fp
 80166da:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 80166de:	fa1f fc8c 	uxth.w	ip, ip
 80166e2:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 80166e6:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 80166ea:	448c      	add	ip, r1
 80166ec:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 80166f0:	e61e      	b.n	8016330 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80166f2:	445a      	add	r2, fp
 80166f4:	4484      	add	ip, r0
 80166f6:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 80166fa:	e78f      	b.n	801661c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 80166fc:	fa1f f18e 	uxth.w	r1, lr
 8016700:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 8016704:	b293      	uxth	r3, r2
 8016706:	4596      	cmp	lr, r2
 8016708:	eb01 0806 	add.w	r8, r1, r6
 801670c:	9306      	str	r3, [sp, #24]
 801670e:	fa1f f888 	uxth.w	r8, r8
 8016712:	9f06      	ldr	r7, [sp, #24]
 8016714:	fa0f f388 	sxth.w	r3, r8
 8016718:	9307      	str	r3, [sp, #28]
 801671a:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 801671e:	443b      	add	r3, r7
 8016720:	b29b      	uxth	r3, r3
 8016722:	9308      	str	r3, [sp, #32]
 8016724:	da24      	bge.n	8016770 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 8016726:	9905      	ldr	r1, [sp, #20]
 8016728:	eba3 0308 	sub.w	r3, r3, r8
 801672c:	eba2 020e 	sub.w	r2, r2, lr
 8016730:	eba9 0000 	sub.w	r0, r9, r0
 8016734:	ebaa 0401 	sub.w	r4, sl, r1
 8016738:	b29b      	uxth	r3, r3
 801673a:	b2a4      	uxth	r4, r4
 801673c:	b219      	sxth	r1, r3
 801673e:	b225      	sxth	r5, r4
 8016740:	4348      	muls	r0, r1
 8016742:	436a      	muls	r2, r5
 8016744:	4282      	cmp	r2, r0
 8016746:	9a02      	ldr	r2, [sp, #8]
 8016748:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801674c:	445a      	add	r2, fp
 801674e:	dc06      	bgt.n	801675e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 8016750:	9b07      	ldr	r3, [sp, #28]
 8016752:	44a4      	add	ip, r4
 8016754:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 8016758:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 801675c:	e75e      	b.n	801661c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801675e:	9904      	ldr	r1, [sp, #16]
 8016760:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 8016764:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 8016768:	4433      	add	r3, r6
 801676a:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 801676e:	e5df      	b.n	8016330 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8016770:	9f06      	ldr	r7, [sp, #24]
 8016772:	9b04      	ldr	r3, [sp, #16]
 8016774:	1bc9      	subs	r1, r1, r7
 8016776:	fa0f f78a 	sxth.w	r7, sl
 801677a:	b289      	uxth	r1, r1
 801677c:	429f      	cmp	r7, r3
 801677e:	fa0f fe81 	sxth.w	lr, r1
 8016782:	dd23      	ble.n	80167cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 8016784:	9a05      	ldr	r2, [sp, #20]
 8016786:	eba9 0000 	sub.w	r0, r9, r0
 801678a:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801678e:	ebaa 0202 	sub.w	r2, sl, r2
 8016792:	9d07      	ldr	r5, [sp, #28]
 8016794:	fb0e f000 	mul.w	r0, lr, r0
 8016798:	b292      	uxth	r2, r2
 801679a:	eba5 0a03 	sub.w	sl, r5, r3
 801679e:	9b02      	ldr	r3, [sp, #8]
 80167a0:	b214      	sxth	r4, r2
 80167a2:	00db      	lsls	r3, r3, #3
 80167a4:	fb04 fa0a 	mul.w	sl, r4, sl
 80167a8:	445b      	add	r3, fp
 80167aa:	4550      	cmp	r0, sl
 80167ac:	db03      	blt.n	80167b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 80167ae:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 80167b2:	4494      	add	ip, r2
 80167b4:	e732      	b.n	801661c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 80167b6:	9a04      	ldr	r2, [sp, #16]
 80167b8:	4431      	add	r1, r6
 80167ba:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 80167be:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 80167c2:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 80167c6:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 80167ca:	e75c      	b.n	8016686 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 80167cc:	9b08      	ldr	r3, [sp, #32]
 80167ce:	2d06      	cmp	r5, #6
 80167d0:	eba3 0308 	sub.w	r3, r3, r8
 80167d4:	b29b      	uxth	r3, r3
 80167d6:	b218      	sxth	r0, r3
 80167d8:	d813      	bhi.n	8016802 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 80167da:	9b07      	ldr	r3, [sp, #28]
 80167dc:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 80167e0:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 80167e4:	1c6b      	adds	r3, r5, #1
 80167e6:	9901      	ldr	r1, [sp, #4]
 80167e8:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 80167ec:	9b01      	ldr	r3, [sp, #4]
 80167ee:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 80167f2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80167f6:	805a      	strh	r2, [r3, #2]
 80167f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80167fa:	f8a3 e006 	strh.w	lr, [r3, #6]
 80167fe:	809a      	strh	r2, [r3, #4]
 8016800:	e75f      	b.n	80166c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8016802:	9c02      	ldr	r4, [sp, #8]
 8016804:	4570      	cmp	r0, lr
 8016806:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801680a:	db0d      	blt.n	8016828 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 801680c:	4431      	add	r1, r6
 801680e:	9b06      	ldr	r3, [sp, #24]
 8016810:	445c      	add	r4, fp
 8016812:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 8016816:	b289      	uxth	r1, r1
 8016818:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 801681c:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8016820:	4419      	add	r1, r3
 8016822:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 8016826:	e583      	b.n	8016330 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8016828:	445c      	add	r4, fp
 801682a:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 801682e:	e79b      	b.n	8016768 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 8016830:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 8016834:	2e07      	cmp	r6, #7
 8016836:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 801683a:	d812      	bhi.n	8016862 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x55e>
 801683c:	1c75      	adds	r5, r6, #1
 801683e:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 8016842:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 8016846:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 801684a:	9d01      	ldr	r5, [sp, #4]
 801684c:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 8016850:	442c      	add	r4, r5
 8016852:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 8016856:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 801685a:	8061      	strh	r1, [r4, #2]
 801685c:	80a2      	strh	r2, [r4, #4]
 801685e:	80e3      	strh	r3, [r4, #6]
 8016860:	e5d0      	b.n	8016404 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8016862:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 8016866:	3e01      	subs	r6, #1
 8016868:	445c      	add	r4, fp
 801686a:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 801686e:	f04f 37ff 	mov.w	r7, #4294967295
 8016872:	2500      	movs	r5, #0
 8016874:	9305      	str	r3, [sp, #20]
 8016876:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 801687a:	1e72      	subs	r2, r6, #1
 801687c:	9302      	str	r3, [sp, #8]
 801687e:	4691      	mov	r9, r2
 8016880:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 8016884:	9304      	str	r3, [sp, #16]
 8016886:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 801688a:	f1b9 3fff 	cmp.w	r9, #4294967295
 801688e:	6818      	ldr	r0, [r3, #0]
 8016890:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8016894:	9207      	str	r2, [sp, #28]
 8016896:	bf16      	itet	ne
 8016898:	9905      	ldrne	r1, [sp, #20]
 801689a:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 801689e:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 80168a2:	9306      	str	r3, [sp, #24]
 80168a4:	f8be 1006 	ldrh.w	r1, [lr, #6]
 80168a8:	f8be 8004 	ldrh.w	r8, [lr, #4]
 80168ac:	fb18 f801 	smulbb	r8, r8, r1
 80168b0:	6859      	ldr	r1, [r3, #4]
 80168b2:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80168b6:	4671      	mov	r1, lr
 80168b8:	a80c      	add	r0, sp, #48	@ 0x30
 80168ba:	f7fb fea6 	bl	801260a <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80168be:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 80168c2:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 80168c6:	f04f 0c08 	mov.w	ip, #8
 80168ca:	9b04      	ldr	r3, [sp, #16]
 80168cc:	9a02      	ldr	r2, [sp, #8]
 80168ce:	fb10 f001 	smulbb	r0, r0, r1
 80168d2:	fb02 8803 	mla	r8, r2, r3, r8
 80168d6:	eba0 0108 	sub.w	r1, r0, r8
 80168da:	fb90 f0fc 	sdiv	r0, r0, ip
 80168de:	4288      	cmp	r0, r1
 80168e0:	dc20      	bgt.n	8016924 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
 80168e2:	4551      	cmp	r1, sl
 80168e4:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80168e8:	da03      	bge.n	80168f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ee>
 80168ea:	b1d9      	cbz	r1, 8016924 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
 80168ec:	468a      	mov	sl, r1
 80168ee:	464f      	mov	r7, r9
 80168f0:	4635      	mov	r5, r6
 80168f2:	f109 39ff 	add.w	r9, r9, #4294967295
 80168f6:	f119 0f02 	cmn.w	r9, #2
 80168fa:	d1c6      	bne.n	801688a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x586>
 80168fc:	4616      	mov	r6, r2
 80168fe:	3201      	adds	r2, #1
 8016900:	f1a4 0408 	sub.w	r4, r4, #8
 8016904:	d1b7      	bne.n	8016876 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x572>
 8016906:	9b01      	ldr	r3, [sp, #4]
 8016908:	b2ac      	uxth	r4, r5
 801690a:	00ed      	lsls	r5, r5, #3
 801690c:	1958      	adds	r0, r3, r5
 801690e:	1c7b      	adds	r3, r7, #1
 8016910:	d10b      	bne.n	801692a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x626>
 8016912:	4601      	mov	r1, r0
 8016914:	9803      	ldr	r0, [sp, #12]
 8016916:	f7fb fe78 	bl	801260a <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801691a:	4621      	mov	r1, r4
 801691c:	9801      	ldr	r0, [sp, #4]
 801691e:	f7ff fcdd 	bl	80162dc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8016922:	e505      	b.n	8016330 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8016924:	464f      	mov	r7, r9
 8016926:	4635      	mov	r5, r6
 8016928:	e7ed      	b.n	8016906 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x602>
 801692a:	9b01      	ldr	r3, [sp, #4]
 801692c:	00ff      	lsls	r7, r7, #3
 801692e:	445d      	add	r5, fp
 8016930:	19d9      	adds	r1, r3, r7
 8016932:	445f      	add	r7, fp
 8016934:	f7fb fe69 	bl	801260a <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8016938:	9b03      	ldr	r3, [sp, #12]
 801693a:	cb03      	ldmia	r3!, {r0, r1}
 801693c:	9b03      	ldr	r3, [sp, #12]
 801693e:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 8016942:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 8016946:	f855 0fac 	ldr.w	r0, [r5, #172]!
 801694a:	6869      	ldr	r1, [r5, #4]
 801694c:	c303      	stmia	r3!, {r0, r1}
 801694e:	e7e4      	b.n	801691a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x616>

08016950 <_ZN8touchgfx11Application10invalidateEv>:
 8016950:	4b09      	ldr	r3, [pc, #36]	@ (8016978 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 8016952:	b082      	sub	sp, #8
 8016954:	2100      	movs	r1, #0
 8016956:	f9b3 2000 	ldrsh.w	r2, [r3]
 801695a:	4b08      	ldr	r3, [pc, #32]	@ (801697c <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 801695c:	9100      	str	r1, [sp, #0]
 801695e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016962:	f8ad 2004 	strh.w	r2, [sp, #4]
 8016966:	f8ad 3006 	strh.w	r3, [sp, #6]
 801696a:	ab02      	add	r3, sp, #8
 801696c:	e913 0006 	ldmdb	r3, {r1, r2}
 8016970:	b002      	add	sp, #8
 8016972:	f7ff bcc7 	b.w	8016304 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8016976:	bf00      	nop
 8016978:	20027b88 	.word	0x20027b88
 801697c:	20027b8a 	.word	0x20027b8a

08016980 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 8016980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016984:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 8016988:	b09b      	sub	sp, #108	@ 0x6c
 801698a:	4604      	mov	r4, r0
 801698c:	4630      	mov	r0, r6
 801698e:	f7f9 fc12 	bl	80101b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016992:	4605      	mov	r5, r0
 8016994:	b940      	cbnz	r0, 80169a8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 8016996:	4620      	mov	r0, r4
 8016998:	e896 0006 	ldmia.w	r6, {r1, r2}
 801699c:	f7ff fcb2 	bl	8016304 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80169a0:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 80169a4:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 80169a8:	4bc8      	ldr	r3, [pc, #800]	@ (8016ccc <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 80169aa:	681b      	ldr	r3, [r3, #0]
 80169ac:	2b00      	cmp	r3, #0
 80169ae:	d03e      	beq.n	8016a2e <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 80169b0:	4dc7      	ldr	r5, [pc, #796]	@ (8016cd0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 80169b2:	4628      	mov	r0, r5
 80169b4:	f7f9 fbff 	bl	80101b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 80169b8:	4606      	mov	r6, r0
 80169ba:	2800      	cmp	r0, #0
 80169bc:	d137      	bne.n	8016a2e <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 80169be:	4628      	mov	r0, r5
 80169c0:	f7ff f9b6 	bl	8015d30 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80169c4:	6829      	ldr	r1, [r5, #0]
 80169c6:	686a      	ldr	r2, [r5, #4]
 80169c8:	4620      	mov	r0, r4
 80169ca:	f7ff fc9b 	bl	8016304 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80169ce:	802e      	strh	r6, [r5, #0]
 80169d0:	806e      	strh	r6, [r5, #2]
 80169d2:	80ae      	strh	r6, [r5, #4]
 80169d4:	80ee      	strh	r6, [r5, #6]
 80169d6:	ae09      	add	r6, sp, #36	@ 0x24
 80169d8:	4630      	mov	r0, r6
 80169da:	f7ff fc24 	bl	8016226 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80169de:	4abd      	ldr	r2, [pc, #756]	@ (8016cd4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 80169e0:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 80169e4:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 80169e8:	8815      	ldrh	r5, [r2, #0]
 80169ea:	9202      	str	r2, [sp, #8]
 80169ec:	462b      	mov	r3, r5
 80169ee:	429f      	cmp	r7, r3
 80169f0:	d924      	bls.n	8016a3c <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 80169f2:	f8bd 1064 	ldrh.w	r1, [sp, #100]	@ 0x64
 80169f6:	2907      	cmp	r1, #7
 80169f8:	d816      	bhi.n	8016a28 <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 80169fa:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 80169fe:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 8016a02:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 8016a06:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 8016a0a:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 8016a0e:	1c4a      	adds	r2, r1, #1
 8016a10:	f8ad 2064 	strh.w	r2, [sp, #100]	@ 0x64
 8016a14:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 8016a18:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 8016a1c:	f8a2 9002 	strh.w	r9, [r2, #2]
 8016a20:	f8a2 e004 	strh.w	lr, [r2, #4]
 8016a24:	f8a2 c006 	strh.w	ip, [r2, #6]
 8016a28:	3301      	adds	r3, #1
 8016a2a:	b29b      	uxth	r3, r3
 8016a2c:	e7df      	b.n	80169ee <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 8016a2e:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8016a32:	2b00      	cmp	r3, #0
 8016a34:	d1cf      	bne.n	80169d6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 8016a36:	b01b      	add	sp, #108	@ 0x6c
 8016a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a3c:	462f      	mov	r7, r5
 8016a3e:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 8016a42:	42bb      	cmp	r3, r7
 8016a44:	d90b      	bls.n	8016a5e <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 8016a46:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 8016a4a:	3701      	adds	r7, #1
 8016a4c:	4620      	mov	r0, r4
 8016a4e:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 8016a52:	b2bf      	uxth	r7, r7
 8016a54:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 8016a58:	f7ff fc54 	bl	8016304 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8016a5c:	e7ef      	b.n	8016a3e <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 8016a5e:	4a9e      	ldr	r2, [pc, #632]	@ (8016cd8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 8016a60:	6813      	ldr	r3, [r2, #0]
 8016a62:	4690      	mov	r8, r2
 8016a64:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8016a68:	2b01      	cmp	r3, #1
 8016a6a:	f040 80e4 	bne.w	8016c36 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 8016a6e:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8016a72:	4629      	mov	r1, r5
 8016a74:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 8016a78:	2500      	movs	r5, #0
 8016a7a:	33ae      	adds	r3, #174	@ 0xae
 8016a7c:	428f      	cmp	r7, r1
 8016a7e:	f103 0308 	add.w	r3, r3, #8
 8016a82:	dd0a      	ble.n	8016a9a <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 8016a84:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 8016a88:	3101      	adds	r1, #1
 8016a8a:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 8016a8e:	4402      	add	r2, r0
 8016a90:	b212      	sxth	r2, r2
 8016a92:	4295      	cmp	r5, r2
 8016a94:	bfb8      	it	lt
 8016a96:	4615      	movlt	r5, r2
 8016a98:	e7f0      	b.n	8016a7c <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 8016a9a:	4b90      	ldr	r3, [pc, #576]	@ (8016cdc <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 8016a9c:	f8df b238 	ldr.w	fp, [pc, #568]	@ 8016cd8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>
 8016aa0:	881b      	ldrh	r3, [r3, #0]
 8016aa2:	46d8      	mov	r8, fp
 8016aa4:	2b0f      	cmp	r3, #15
 8016aa6:	bf8c      	ite	hi
 8016aa8:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 8016aac:	f04f 0a01 	movls.w	sl, #1
 8016ab0:	2300      	movs	r3, #0
 8016ab2:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8016ab6:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 8016aba:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8016abe:	4438      	add	r0, r7
 8016ac0:	b207      	sxth	r7, r0
 8016ac2:	f8db 0000 	ldr.w	r0, [fp]
 8016ac6:	42bd      	cmp	r5, r7
 8016ac8:	6803      	ldr	r3, [r0, #0]
 8016aca:	f340 8084 	ble.w	8016bd6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 8016ace:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8016ad2:	4798      	blx	r3
 8016ad4:	eb07 030a 	add.w	r3, r7, sl
 8016ad8:	4298      	cmp	r0, r3
 8016ada:	da07      	bge.n	8016aec <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 8016adc:	4285      	cmp	r5, r0
 8016ade:	dd05      	ble.n	8016aec <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 8016ae0:	4287      	cmp	r7, r0
 8016ae2:	dd6d      	ble.n	8016bc0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8016ae4:	2f00      	cmp	r7, #0
 8016ae6:	dd6b      	ble.n	8016bc0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8016ae8:	4628      	mov	r0, r5
 8016aea:	e004      	b.n	8016af6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x176>
 8016aec:	4287      	cmp	r7, r0
 8016aee:	dcfb      	bgt.n	8016ae8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x168>
 8016af0:	42a8      	cmp	r0, r5
 8016af2:	bfa8      	it	ge
 8016af4:	4628      	movge	r0, r5
 8016af6:	4b7a      	ldr	r3, [pc, #488]	@ (8016ce0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 8016af8:	1bc0      	subs	r0, r0, r7
 8016afa:	2200      	movs	r2, #0
 8016afc:	f8ad 7016 	strh.w	r7, [sp, #22]
 8016b00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b04:	f8ad 2014 	strh.w	r2, [sp, #20]
 8016b08:	f8ad 3018 	strh.w	r3, [sp, #24]
 8016b0c:	9b02      	ldr	r3, [sp, #8]
 8016b0e:	f8ad 001a 	strh.w	r0, [sp, #26]
 8016b12:	881f      	ldrh	r7, [r3, #0]
 8016b14:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8016b18:	42bb      	cmp	r3, r7
 8016b1a:	d9cc      	bls.n	8016ab6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 8016b1c:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 8016b20:	ab07      	add	r3, sp, #28
 8016b22:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8016b26:	6851      	ldr	r1, [r2, #4]
 8016b28:	c303      	stmia	r3!, {r0, r1}
 8016b2a:	a905      	add	r1, sp, #20
 8016b2c:	a807      	add	r0, sp, #28
 8016b2e:	f7ff f9ba 	bl	8015ea6 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8016b32:	2800      	cmp	r0, #0
 8016b34:	d04c      	beq.n	8016bd0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 8016b36:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8016b3a:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8016b3e:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 8016b42:	4686      	mov	lr, r0
 8016b44:	4290      	cmp	r0, r2
 8016b46:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 8016b4a:	4448      	add	r0, r9
 8016b4c:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 8016b50:	bfb8      	it	lt
 8016b52:	4696      	movlt	lr, r2
 8016b54:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8016b58:	444a      	add	r2, r9
 8016b5a:	b280      	uxth	r0, r0
 8016b5c:	4299      	cmp	r1, r3
 8016b5e:	468c      	mov	ip, r1
 8016b60:	b292      	uxth	r2, r2
 8016b62:	9303      	str	r3, [sp, #12]
 8016b64:	bfb8      	it	lt
 8016b66:	469c      	movlt	ip, r3
 8016b68:	b203      	sxth	r3, r0
 8016b6a:	fa0f f982 	sxth.w	r9, r2
 8016b6e:	f8ad e01c 	strh.w	lr, [sp, #28]
 8016b72:	f8ad c01e 	strh.w	ip, [sp, #30]
 8016b76:	454b      	cmp	r3, r9
 8016b78:	bfb8      	it	lt
 8016b7a:	4602      	movlt	r2, r0
 8016b7c:	9b03      	ldr	r3, [sp, #12]
 8016b7e:	eba2 020e 	sub.w	r2, r2, lr
 8016b82:	f8ad 2020 	strh.w	r2, [sp, #32]
 8016b86:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 8016b8a:	4411      	add	r1, r2
 8016b8c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8016b90:	4413      	add	r3, r2
 8016b92:	b289      	uxth	r1, r1
 8016b94:	b29b      	uxth	r3, r3
 8016b96:	b208      	sxth	r0, r1
 8016b98:	b21a      	sxth	r2, r3
 8016b9a:	4290      	cmp	r0, r2
 8016b9c:	bfb8      	it	lt
 8016b9e:	460b      	movlt	r3, r1
 8016ba0:	eba3 030c 	sub.w	r3, r3, ip
 8016ba4:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8016ba8:	a807      	add	r0, sp, #28
 8016baa:	f7f9 fb04 	bl	80101b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016bae:	b920      	cbnz	r0, 8016bba <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 8016bb0:	6823      	ldr	r3, [r4, #0]
 8016bb2:	a907      	add	r1, sp, #28
 8016bb4:	4620      	mov	r0, r4
 8016bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016bb8:	4798      	blx	r3
 8016bba:	3701      	adds	r7, #1
 8016bbc:	b2bf      	uxth	r7, r7
 8016bbe:	e7a9      	b.n	8016b14 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 8016bc0:	f8d8 0000 	ldr.w	r0, [r8]
 8016bc4:	2101      	movs	r1, #1
 8016bc6:	6803      	ldr	r3, [r0, #0]
 8016bc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8016bcc:	4798      	blx	r3
 8016bce:	e772      	b.n	8016ab6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 8016bd0:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8016bd4:	e7e8      	b.n	8016ba8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 8016bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016bd8:	4798      	blx	r3
 8016bda:	4b42      	ldr	r3, [pc, #264]	@ (8016ce4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 8016bdc:	781b      	ldrb	r3, [r3, #0]
 8016bde:	2b00      	cmp	r3, #0
 8016be0:	f43f af29 	beq.w	8016a36 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 8016be4:	2300      	movs	r3, #0
 8016be6:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 8016bea:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 8016bee:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 8016bf2:	9b02      	ldr	r3, [sp, #8]
 8016bf4:	881b      	ldrh	r3, [r3, #0]
 8016bf6:	429d      	cmp	r5, r3
 8016bf8:	f67f af1d 	bls.w	8016a36 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 8016bfc:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 8016c00:	2907      	cmp	r1, #7
 8016c02:	d815      	bhi.n	8016c30 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 8016c04:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8016c08:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 8016c0c:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 8016c10:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 8016c14:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 8016c18:	1c4a      	adds	r2, r1, #1
 8016c1a:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 8016c1e:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 8016c22:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 8016c26:	f8a2 e002 	strh.w	lr, [r2, #2]
 8016c2a:	f8a2 c004 	strh.w	ip, [r2, #4]
 8016c2e:	80d7      	strh	r7, [r2, #6]
 8016c30:	3301      	adds	r3, #1
 8016c32:	b29b      	uxth	r3, r3
 8016c34:	e7df      	b.n	8016bf6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x276>
 8016c36:	2b02      	cmp	r3, #2
 8016c38:	f040 8135 	bne.w	8016ea6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 8016c3c:	4b2a      	ldr	r3, [pc, #168]	@ (8016ce8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 8016c3e:	f104 09ac 	add.w	r9, r4, #172	@ 0xac
 8016c42:	781b      	ldrb	r3, [r3, #0]
 8016c44:	2b01      	cmp	r3, #1
 8016c46:	f000 809c 	beq.w	8016d82 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 8016c4a:	9b02      	ldr	r3, [sp, #8]
 8016c4c:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	@ 0xec
 8016c50:	f8b3 b000 	ldrh.w	fp, [r3]
 8016c54:	f10b 0b01 	add.w	fp, fp, #1
 8016c58:	fa1f fb8b 	uxth.w	fp, fp
 8016c5c:	2a00      	cmp	r2, #0
 8016c5e:	d0bc      	beq.n	8016bda <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8016c60:	f8b4 50ae 	ldrh.w	r5, [r4, #174]	@ 0xae
 8016c64:	4659      	mov	r1, fp
 8016c66:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
 8016c6a:	f04f 0800 	mov.w	r8, #0
 8016c6e:	441d      	add	r5, r3
 8016c70:	b22d      	sxth	r5, r5
 8016c72:	b28b      	uxth	r3, r1
 8016c74:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 8016c78:	429a      	cmp	r2, r3
 8016c7a:	f240 80c0 	bls.w	8016dfe <_ZN8touchgfx11Application15drawCachedAreasEv+0x47e>
 8016c7e:	4427      	add	r7, r4
 8016c80:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 8016c84:	4608      	mov	r0, r1
 8016c86:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8016c8a:	f9be c0ae 	ldrsh.w	ip, [lr, #174]	@ 0xae
 8016c8e:	4563      	cmp	r3, ip
 8016c90:	f340 80a2 	ble.w	8016dd8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 8016c94:	f8be 50b2 	ldrh.w	r5, [lr, #178]	@ 0xb2
 8016c98:	4465      	add	r5, ip
 8016c9a:	b22d      	sxth	r5, r5
 8016c9c:	429d      	cmp	r5, r3
 8016c9e:	bfa8      	it	ge
 8016ca0:	461d      	movge	r5, r3
 8016ca2:	3101      	adds	r1, #1
 8016ca4:	4680      	mov	r8, r0
 8016ca6:	e7e4      	b.n	8016c72 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
 8016ca8:	d10b      	bne.n	8016cc2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x342>
 8016caa:	f9b5 c0b2 	ldrsh.w	ip, [r5, #178]	@ 0xb2
 8016cae:	f9ba 10b2 	ldrsh.w	r1, [sl, #178]	@ 0xb2
 8016cb2:	458c      	cmp	ip, r1
 8016cb4:	bfb4      	ite	lt
 8016cb6:	469c      	movlt	ip, r3
 8016cb8:	46bc      	movge	ip, r7
 8016cba:	4572      	cmp	r2, lr
 8016cbc:	bfb8      	it	lt
 8016cbe:	4672      	movlt	r2, lr
 8016cc0:	e087      	b.n	8016dd2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 8016cc2:	428a      	cmp	r2, r1
 8016cc4:	46bc      	mov	ip, r7
 8016cc6:	bfb8      	it	lt
 8016cc8:	460a      	movlt	r2, r1
 8016cca:	e082      	b.n	8016dd2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 8016ccc:	20027bd4 	.word	0x20027bd4
 8016cd0:	20027be0 	.word	0x20027be0
 8016cd4:	20000070 	.word	0x20000070
 8016cd8:	20027b94 	.word	0x20027b94
 8016cdc:	20027b8a 	.word	0x20027b8a
 8016ce0:	20027b88 	.word	0x20027b88
 8016ce4:	20027b92 	.word	0x20027b92
 8016ce8:	20027b8c 	.word	0x20027b8c
 8016cec:	1961      	adds	r1, r4, r5
 8016cee:	ab07      	add	r3, sp, #28
 8016cf0:	f851 0fac 	ldr.w	r0, [r1, #172]!
 8016cf4:	6849      	ldr	r1, [r1, #4]
 8016cf6:	c303      	stmia	r3!, {r0, r1}
 8016cf8:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8016cfc:	a807      	add	r0, sp, #28
 8016cfe:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8016d02:	2b13      	cmp	r3, #19
 8016d04:	440b      	add	r3, r1
 8016d06:	bfd8      	it	le
 8016d08:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8016d0c:	1a9b      	subs	r3, r3, r2
 8016d0e:	f8ad 201c 	strh.w	r2, [sp, #28]
 8016d12:	f8ad 3020 	strh.w	r3, [sp, #32]
 8016d16:	f7ff f825 	bl	8015d64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8016d1a:	a807      	add	r0, sp, #28
 8016d1c:	f7f9 fa4b 	bl	80101b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016d20:	bb78      	cbnz	r0, 8016d82 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 8016d22:	f9bd c022 	ldrsh.w	ip, [sp, #34]	@ 0x22
 8016d26:	4425      	add	r5, r4
 8016d28:	f8d8 0000 	ldr.w	r0, [r8]
 8016d2c:	f1bc 0f14 	cmp.w	ip, #20
 8016d30:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8016d34:	f8d0 e000 	ldr.w	lr, [r0]
 8016d38:	bfa8      	it	ge
 8016d3a:	f04f 0c14 	movge.w	ip, #20
 8016d3e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8016d42:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8016d46:	fa1f fc8c 	uxth.w	ip, ip
 8016d4a:	f8cd c000 	str.w	ip, [sp]
 8016d4e:	f8de a090 	ldr.w	sl, [lr, #144]	@ 0x90
 8016d52:	47d0      	blx	sl
 8016d54:	4682      	mov	sl, r0
 8016d56:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 8016d5a:	a807      	add	r0, sp, #28
 8016d5c:	f7fe ffe8 	bl	8015d30 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8016d60:	6823      	ldr	r3, [r4, #0]
 8016d62:	4620      	mov	r0, r4
 8016d64:	a907      	add	r1, sp, #28
 8016d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016d68:	4798      	blx	r3
 8016d6a:	f8b5 00b0 	ldrh.w	r0, [r5, #176]	@ 0xb0
 8016d6e:	eba0 000a 	sub.w	r0, r0, sl
 8016d72:	b200      	sxth	r0, r0
 8016d74:	f8a5 00b0 	strh.w	r0, [r5, #176]	@ 0xb0
 8016d78:	b918      	cbnz	r0, 8016d82 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 8016d7a:	b2b9      	uxth	r1, r7
 8016d7c:	4648      	mov	r0, r9
 8016d7e:	f7ff faad 	bl	80162dc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8016d82:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 8016d86:	f1bb 0f00 	cmp.w	fp, #0
 8016d8a:	f43f af26 	beq.w	8016bda <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8016d8e:	9b02      	ldr	r3, [sp, #8]
 8016d90:	2700      	movs	r7, #0
 8016d92:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 8016d96:	881b      	ldrh	r3, [r3, #0]
 8016d98:	3301      	adds	r3, #1
 8016d9a:	b29b      	uxth	r3, r3
 8016d9c:	b299      	uxth	r1, r3
 8016d9e:	00fd      	lsls	r5, r7, #3
 8016da0:	458b      	cmp	fp, r1
 8016da2:	d9a3      	bls.n	8016cec <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>
 8016da4:	4425      	add	r5, r4
 8016da6:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 8016daa:	469c      	mov	ip, r3
 8016dac:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	@ 0xb0
 8016db0:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	@ 0xac
 8016db4:	f9ba e0ac 	ldrsh.w	lr, [sl, #172]	@ 0xac
 8016db8:	4408      	add	r0, r1
 8016dba:	f8ba 10b0 	ldrh.w	r1, [sl, #176]	@ 0xb0
 8016dbe:	4471      	add	r1, lr
 8016dc0:	b200      	sxth	r0, r0
 8016dc2:	b209      	sxth	r1, r1
 8016dc4:	4288      	cmp	r0, r1
 8016dc6:	f6bf af6f 	bge.w	8016ca8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x328>
 8016dca:	4586      	cmp	lr, r0
 8016dcc:	4672      	mov	r2, lr
 8016dce:	bfb8      	it	lt
 8016dd0:	4602      	movlt	r2, r0
 8016dd2:	3301      	adds	r3, #1
 8016dd4:	4667      	mov	r7, ip
 8016dd6:	e7e1      	b.n	8016d9c <_ZN8touchgfx11Application15drawCachedAreasEv+0x41c>
 8016dd8:	d10c      	bne.n	8016df4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x474>
 8016dda:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 8016dde:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 8016de2:	4287      	cmp	r7, r0
 8016de4:	bfb4      	ite	lt
 8016de6:	4608      	movlt	r0, r1
 8016de8:	4640      	movge	r0, r8
 8016dea:	f8be 70b2 	ldrh.w	r7, [lr, #178]	@ 0xb2
 8016dee:	443b      	add	r3, r7
 8016df0:	b21b      	sxth	r3, r3
 8016df2:	e753      	b.n	8016c9c <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 8016df4:	4565      	cmp	r5, ip
 8016df6:	4640      	mov	r0, r8
 8016df8:	bfa8      	it	ge
 8016dfa:	4665      	movge	r5, ip
 8016dfc:	e751      	b.n	8016ca2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 8016dfe:	eb09 0007 	add.w	r0, r9, r7
 8016e02:	4427      	add	r7, r4
 8016e04:	9203      	str	r2, [sp, #12]
 8016e06:	f9b7 a0b2 	ldrsh.w	sl, [r7, #178]	@ 0xb2
 8016e0a:	f1ba 0f13 	cmp.w	sl, #19
 8016e0e:	bfde      	ittt	le
 8016e10:	f8b7 50ae 	ldrhle.w	r5, [r7, #174]	@ 0xae
 8016e14:	4455      	addle	r5, sl
 8016e16:	b22d      	sxthle	r5, r5
 8016e18:	f7f9 f9cd 	bl	80101b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016e1c:	9a03      	ldr	r2, [sp, #12]
 8016e1e:	2800      	cmp	r0, #0
 8016e20:	f47f af1c 	bne.w	8016c5c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2dc>
 8016e24:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 8016e28:	fa1f fa8a 	uxth.w	sl, sl
 8016e2c:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 8016e30:	1aad      	subs	r5, r5, r2
 8016e32:	4829      	ldr	r0, [pc, #164]	@ (8016ed8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x558>)
 8016e34:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 8016e38:	2d14      	cmp	r5, #20
 8016e3a:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 8016e3e:	6800      	ldr	r0, [r0, #0]
 8016e40:	bfa8      	it	ge
 8016e42:	2514      	movge	r5, #20
 8016e44:	f8ad 101c 	strh.w	r1, [sp, #28]
 8016e48:	f8ad 201e 	strh.w	r2, [sp, #30]
 8016e4c:	b289      	uxth	r1, r1
 8016e4e:	f8ad 3020 	strh.w	r3, [sp, #32]
 8016e52:	b2ad      	uxth	r5, r5
 8016e54:	f8d0 c000 	ldr.w	ip, [r0]
 8016e58:	b292      	uxth	r2, r2
 8016e5a:	4555      	cmp	r5, sl
 8016e5c:	bf94      	ite	ls
 8016e5e:	9500      	strls	r5, [sp, #0]
 8016e60:	f8cd a000 	strhi.w	sl, [sp]
 8016e64:	b29b      	uxth	r3, r3
 8016e66:	f8dc 5090 	ldr.w	r5, [ip, #144]	@ 0x90
 8016e6a:	47a8      	blx	r5
 8016e6c:	6823      	ldr	r3, [r4, #0]
 8016e6e:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 8016e72:	a907      	add	r1, sp, #28
 8016e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016e76:	4620      	mov	r0, r4
 8016e78:	4798      	blx	r3
 8016e7a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 8016e7e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8016e82:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 8016e86:	1a5b      	subs	r3, r3, r1
 8016e88:	440a      	add	r2, r1
 8016e8a:	b21b      	sxth	r3, r3
 8016e8c:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 8016e90:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 8016e94:	2b00      	cmp	r3, #0
 8016e96:	f47f aed8 	bne.w	8016c4a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 8016e9a:	fa1f f188 	uxth.w	r1, r8
 8016e9e:	4648      	mov	r0, r9
 8016ea0:	f7ff fa1c 	bl	80162dc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8016ea4:	e6d1      	b.n	8016c4a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 8016ea6:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8016eaa:	42ab      	cmp	r3, r5
 8016eac:	f67f ae95 	bls.w	8016bda <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8016eb0:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8016eb4:	ab07      	add	r3, sp, #28
 8016eb6:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8016eba:	6851      	ldr	r1, [r2, #4]
 8016ebc:	c303      	stmia	r3!, {r0, r1}
 8016ebe:	a807      	add	r0, sp, #28
 8016ec0:	f7f9 f979 	bl	80101b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016ec4:	b920      	cbnz	r0, 8016ed0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>
 8016ec6:	6823      	ldr	r3, [r4, #0]
 8016ec8:	a907      	add	r1, sp, #28
 8016eca:	4620      	mov	r0, r4
 8016ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016ece:	4798      	blx	r3
 8016ed0:	3501      	adds	r5, #1
 8016ed2:	b2ad      	uxth	r5, r5
 8016ed4:	e7e7      	b.n	8016ea6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 8016ed6:	bf00      	nop
 8016ed8:	20027b94 	.word	0x20027b94

08016edc <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8016edc:	4b03      	ldr	r3, [pc, #12]	@ (8016eec <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8016ede:	2200      	movs	r2, #0
 8016ee0:	801a      	strh	r2, [r3, #0]
 8016ee2:	805a      	strh	r2, [r3, #2]
 8016ee4:	809a      	strh	r2, [r3, #4]
 8016ee6:	80da      	strh	r2, [r3, #6]
 8016ee8:	4770      	bx	lr
 8016eea:	bf00      	nop
 8016eec:	20027be0 	.word	0x20027be0

08016ef0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8016ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ef4:	b09d      	sub	sp, #116	@ 0x74
 8016ef6:	4606      	mov	r6, r0
 8016ef8:	4614      	mov	r4, r2
 8016efa:	468a      	mov	sl, r1
 8016efc:	a803      	add	r0, sp, #12
 8016efe:	461d      	mov	r5, r3
 8016f00:	f000 fea4 	bl	8017c4c <_ZN8touchgfx12TextProviderC1Ev>
 8016f04:	6833      	ldr	r3, [r6, #0]
 8016f06:	4630      	mov	r0, r6
 8016f08:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 8016f0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016f0e:	4798      	blx	r3
 8016f10:	6833      	ldr	r3, [r6, #0]
 8016f12:	4607      	mov	r7, r0
 8016f14:	4630      	mov	r0, r6
 8016f16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016f18:	4798      	blx	r3
 8016f1a:	462a      	mov	r2, r5
 8016f1c:	2500      	movs	r5, #0
 8016f1e:	4621      	mov	r1, r4
 8016f20:	9000      	str	r0, [sp, #0]
 8016f22:	463b      	mov	r3, r7
 8016f24:	462c      	mov	r4, r5
 8016f26:	46a9      	mov	r9, r5
 8016f28:	46a8      	mov	r8, r5
 8016f2a:	a803      	add	r0, sp, #12
 8016f2c:	f000 fee1 	bl	8017cf2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8016f30:	2300      	movs	r3, #0
 8016f32:	9302      	str	r3, [sp, #8]
 8016f34:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8016f38:	429c      	cmp	r4, r3
 8016f3a:	d002      	beq.n	8016f42 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8016f3c:	455c      	cmp	r4, fp
 8016f3e:	bf18      	it	ne
 8016f40:	4625      	movne	r5, r4
 8016f42:	ab02      	add	r3, sp, #8
 8016f44:	4632      	mov	r2, r6
 8016f46:	4651      	mov	r1, sl
 8016f48:	a803      	add	r0, sp, #12
 8016f4a:	f001 f9c7 	bl	80182dc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8016f4e:	4604      	mov	r4, r0
 8016f50:	b108      	cbz	r0, 8016f56 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8016f52:	280a      	cmp	r0, #10
 8016f54:	d10a      	bne.n	8016f6c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8016f56:	45c1      	cmp	r9, r8
 8016f58:	bf38      	it	cc
 8016f5a:	46c1      	movcc	r9, r8
 8016f5c:	f04f 0800 	mov.w	r8, #0
 8016f60:	2c00      	cmp	r4, #0
 8016f62:	d1e5      	bne.n	8016f30 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8016f64:	4648      	mov	r0, r9
 8016f66:	b01d      	add	sp, #116	@ 0x74
 8016f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f6c:	9a02      	ldr	r2, [sp, #8]
 8016f6e:	2a00      	cmp	r2, #0
 8016f70:	d0de      	beq.n	8016f30 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8016f72:	7b57      	ldrb	r7, [r2, #13]
 8016f74:	4629      	mov	r1, r5
 8016f76:	6833      	ldr	r3, [r6, #0]
 8016f78:	007f      	lsls	r7, r7, #1
 8016f7a:	8894      	ldrh	r4, [r2, #4]
 8016f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016f7e:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 8016f82:	7a97      	ldrb	r7, [r2, #10]
 8016f84:	4307      	orrs	r7, r0
 8016f86:	4630      	mov	r0, r6
 8016f88:	4798      	blx	r3
 8016f8a:	4438      	add	r0, r7
 8016f8c:	4480      	add	r8, r0
 8016f8e:	fa1f f888 	uxth.w	r8, r8
 8016f92:	e7e5      	b.n	8016f60 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08016f94 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8016f94:	b508      	push	{r3, lr}
 8016f96:	6803      	ldr	r3, [r0, #0]
 8016f98:	68db      	ldr	r3, [r3, #12]
 8016f9a:	4798      	blx	r3
 8016f9c:	b128      	cbz	r0, 8016faa <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8016f9e:	7b43      	ldrb	r3, [r0, #13]
 8016fa0:	7a80      	ldrb	r0, [r0, #10]
 8016fa2:	005b      	lsls	r3, r3, #1
 8016fa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016fa8:	4318      	orrs	r0, r3
 8016faa:	bd08      	pop	{r3, pc}

08016fac <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8016fac:	b40e      	push	{r1, r2, r3}
 8016fae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016fb0:	b09e      	sub	sp, #120	@ 0x78
 8016fb2:	4605      	mov	r5, r0
 8016fb4:	ab23      	add	r3, sp, #140	@ 0x8c
 8016fb6:	a805      	add	r0, sp, #20
 8016fb8:	f853 4b04 	ldr.w	r4, [r3], #4
 8016fbc:	9303      	str	r3, [sp, #12]
 8016fbe:	f000 fe45 	bl	8017c4c <_ZN8touchgfx12TextProviderC1Ev>
 8016fc2:	682b      	ldr	r3, [r5, #0]
 8016fc4:	4628      	mov	r0, r5
 8016fc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016fc8:	4798      	blx	r3
 8016fca:	682b      	ldr	r3, [r5, #0]
 8016fcc:	4606      	mov	r6, r0
 8016fce:	4628      	mov	r0, r5
 8016fd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016fd2:	4798      	blx	r3
 8016fd4:	4633      	mov	r3, r6
 8016fd6:	4621      	mov	r1, r4
 8016fd8:	ae1e      	add	r6, sp, #120	@ 0x78
 8016fda:	2400      	movs	r4, #0
 8016fdc:	9000      	str	r0, [sp, #0]
 8016fde:	9a03      	ldr	r2, [sp, #12]
 8016fe0:	a805      	add	r0, sp, #20
 8016fe2:	f000 fe86 	bl	8017cf2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8016fe6:	f846 4d68 	str.w	r4, [r6, #-104]!
 8016fea:	462a      	mov	r2, r5
 8016fec:	4633      	mov	r3, r6
 8016fee:	4621      	mov	r1, r4
 8016ff0:	a805      	add	r0, sp, #20
 8016ff2:	f001 f973 	bl	80182dc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8016ff6:	b300      	cbz	r0, 801703a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 8016ff8:	280a      	cmp	r0, #10
 8016ffa:	d01a      	beq.n	8017032 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8016ffc:	9f04      	ldr	r7, [sp, #16]
 8016ffe:	b1c7      	cbz	r7, 8017032 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8017000:	7b78      	ldrb	r0, [r7, #13]
 8017002:	7a3b      	ldrb	r3, [r7, #8]
 8017004:	00c1      	lsls	r1, r0, #3
 8017006:	88ea      	ldrh	r2, [r5, #6]
 8017008:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801700c:	4319      	orrs	r1, r3
 801700e:	0643      	lsls	r3, r0, #25
 8017010:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8017014:	bf48      	it	mi
 8017016:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 801701a:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 801701e:	bf48      	it	mi
 8017020:	b219      	sxthmi	r1, r3
 8017022:	79fb      	ldrb	r3, [r7, #7]
 8017024:	4303      	orrs	r3, r0
 8017026:	4413      	add	r3, r2
 8017028:	1a5b      	subs	r3, r3, r1
 801702a:	b21b      	sxth	r3, r3
 801702c:	429c      	cmp	r4, r3
 801702e:	bfb8      	it	lt
 8017030:	461c      	movlt	r4, r3
 8017032:	4633      	mov	r3, r6
 8017034:	462a      	mov	r2, r5
 8017036:	2100      	movs	r1, #0
 8017038:	e7da      	b.n	8016ff0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801703a:	b2a0      	uxth	r0, r4
 801703c:	b01e      	add	sp, #120	@ 0x78
 801703e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017042:	b003      	add	sp, #12
 8017044:	4770      	bx	lr

08017046 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 8017046:	7a43      	ldrb	r3, [r0, #9]
 8017048:	8880      	ldrh	r0, [r0, #4]
 801704a:	4418      	add	r0, r3
 801704c:	b280      	uxth	r0, r0
 801704e:	4770      	bx	lr

08017050 <_ZNK8touchgfx4Font13getFontHeightEv>:
 8017050:	6803      	ldr	r3, [r0, #0]
 8017052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017054:	4718      	bx	r3

08017056 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8017056:	b40e      	push	{r1, r2, r3}
 8017058:	b570      	push	{r4, r5, r6, lr}
 801705a:	b09d      	sub	sp, #116	@ 0x74
 801705c:	4604      	mov	r4, r0
 801705e:	ab21      	add	r3, sp, #132	@ 0x84
 8017060:	a803      	add	r0, sp, #12
 8017062:	f853 5b04 	ldr.w	r5, [r3], #4
 8017066:	9302      	str	r3, [sp, #8]
 8017068:	f000 fdf0 	bl	8017c4c <_ZN8touchgfx12TextProviderC1Ev>
 801706c:	6823      	ldr	r3, [r4, #0]
 801706e:	4620      	mov	r0, r4
 8017070:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017072:	4798      	blx	r3
 8017074:	6823      	ldr	r3, [r4, #0]
 8017076:	4606      	mov	r6, r0
 8017078:	4620      	mov	r0, r4
 801707a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801707c:	2401      	movs	r4, #1
 801707e:	4798      	blx	r3
 8017080:	4633      	mov	r3, r6
 8017082:	9000      	str	r0, [sp, #0]
 8017084:	4629      	mov	r1, r5
 8017086:	9a02      	ldr	r2, [sp, #8]
 8017088:	a803      	add	r0, sp, #12
 801708a:	f000 fe32 	bl	8017cf2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801708e:	a803      	add	r0, sp, #12
 8017090:	f001 f9f0 	bl	8018474 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8017094:	b2a3      	uxth	r3, r4
 8017096:	b138      	cbz	r0, 80170a8 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 8017098:	280a      	cmp	r0, #10
 801709a:	a803      	add	r0, sp, #12
 801709c:	bf04      	itt	eq
 801709e:	3301      	addeq	r3, #1
 80170a0:	b21c      	sxtheq	r4, r3
 80170a2:	f001 f9e7 	bl	8018474 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80170a6:	e7f5      	b.n	8017094 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 80170a8:	4618      	mov	r0, r3
 80170aa:	b01d      	add	sp, #116	@ 0x74
 80170ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80170b0:	b003      	add	sp, #12
 80170b2:	4770      	bx	lr

080170b4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 80170b4:	b40e      	push	{r1, r2, r3}
 80170b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80170b8:	b09e      	sub	sp, #120	@ 0x78
 80170ba:	4604      	mov	r4, r0
 80170bc:	ab23      	add	r3, sp, #140	@ 0x8c
 80170be:	a805      	add	r0, sp, #20
 80170c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80170c4:	9303      	str	r3, [sp, #12]
 80170c6:	f000 fdc1 	bl	8017c4c <_ZN8touchgfx12TextProviderC1Ev>
 80170ca:	6823      	ldr	r3, [r4, #0]
 80170cc:	4620      	mov	r0, r4
 80170ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80170d0:	4798      	blx	r3
 80170d2:	6823      	ldr	r3, [r4, #0]
 80170d4:	4606      	mov	r6, r0
 80170d6:	4620      	mov	r0, r4
 80170d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80170da:	4798      	blx	r3
 80170dc:	4633      	mov	r3, r6
 80170de:	4629      	mov	r1, r5
 80170e0:	9000      	str	r0, [sp, #0]
 80170e2:	9a03      	ldr	r2, [sp, #12]
 80170e4:	a805      	add	r0, sp, #20
 80170e6:	f000 fe04 	bl	8017cf2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80170ea:	ad1e      	add	r5, sp, #120	@ 0x78
 80170ec:	2100      	movs	r1, #0
 80170ee:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 80170f2:	4622      	mov	r2, r4
 80170f4:	a805      	add	r0, sp, #20
 80170f6:	f845 1d68 	str.w	r1, [r5, #-104]!
 80170fa:	462b      	mov	r3, r5
 80170fc:	f001 f8ee 	bl	80182dc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017100:	b1d8      	cbz	r0, 801713a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 8017102:	280a      	cmp	r0, #10
 8017104:	d012      	beq.n	801712c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8017106:	9804      	ldr	r0, [sp, #16]
 8017108:	b180      	cbz	r0, 801712c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801710a:	7b47      	ldrb	r7, [r0, #13]
 801710c:	88e2      	ldrh	r2, [r4, #6]
 801710e:	00fb      	lsls	r3, r7, #3
 8017110:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8017114:	7a03      	ldrb	r3, [r0, #8]
 8017116:	430b      	orrs	r3, r1
 8017118:	0679      	lsls	r1, r7, #25
 801711a:	bf44      	itt	mi
 801711c:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8017120:	b21b      	sxthmi	r3, r3
 8017122:	1ad3      	subs	r3, r2, r3
 8017124:	b21b      	sxth	r3, r3
 8017126:	429e      	cmp	r6, r3
 8017128:	bfa8      	it	ge
 801712a:	461e      	movge	r6, r3
 801712c:	462b      	mov	r3, r5
 801712e:	4622      	mov	r2, r4
 8017130:	2100      	movs	r1, #0
 8017132:	a805      	add	r0, sp, #20
 8017134:	f001 f8d2 	bl	80182dc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017138:	e7e2      	b.n	8017100 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 801713a:	4630      	mov	r0, r6
 801713c:	b01e      	add	sp, #120	@ 0x78
 801713e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017142:	b003      	add	sp, #12
 8017144:	4770      	bx	lr

08017146 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8017146:	b513      	push	{r0, r1, r4, lr}
 8017148:	6803      	ldr	r3, [r0, #0]
 801714a:	2400      	movs	r4, #0
 801714c:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8017150:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8017154:	f8ad 1004 	strh.w	r1, [sp, #4]
 8017158:	4669      	mov	r1, sp
 801715a:	691b      	ldr	r3, [r3, #16]
 801715c:	9400      	str	r4, [sp, #0]
 801715e:	f8ad 2006 	strh.w	r2, [sp, #6]
 8017162:	4798      	blx	r3
 8017164:	b002      	add	sp, #8
 8017166:	bd10      	pop	{r4, pc}

08017168 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8017168:	b538      	push	{r3, r4, r5, lr}
 801716a:	680b      	ldr	r3, [r1, #0]
 801716c:	460c      	mov	r4, r1
 801716e:	4605      	mov	r5, r0
 8017170:	68db      	ldr	r3, [r3, #12]
 8017172:	4798      	blx	r3
 8017174:	6823      	ldr	r3, [r4, #0]
 8017176:	4620      	mov	r0, r4
 8017178:	4629      	mov	r1, r5
 801717a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801717c:	4798      	blx	r3
 801717e:	4628      	mov	r0, r5
 8017180:	bd38      	pop	{r3, r4, r5, pc}

08017182 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8017182:	b410      	push	{r4}
 8017184:	880a      	ldrh	r2, [r1, #0]
 8017186:	8884      	ldrh	r4, [r0, #4]
 8017188:	4422      	add	r2, r4
 801718a:	800a      	strh	r2, [r1, #0]
 801718c:	884a      	ldrh	r2, [r1, #2]
 801718e:	88c4      	ldrh	r4, [r0, #6]
 8017190:	4422      	add	r2, r4
 8017192:	804a      	strh	r2, [r1, #2]
 8017194:	6940      	ldr	r0, [r0, #20]
 8017196:	b120      	cbz	r0, 80171a2 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8017198:	6803      	ldr	r3, [r0, #0]
 801719a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801719e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80171a0:	4718      	bx	r3
 80171a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80171a6:	4770      	bx	lr

080171a8 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 80171a8:	b570      	push	{r4, r5, r6, lr}
 80171aa:	8882      	ldrh	r2, [r0, #4]
 80171ac:	460c      	mov	r4, r1
 80171ae:	880b      	ldrh	r3, [r1, #0]
 80171b0:	4605      	mov	r5, r0
 80171b2:	4413      	add	r3, r2
 80171b4:	800b      	strh	r3, [r1, #0]
 80171b6:	884b      	ldrh	r3, [r1, #2]
 80171b8:	88c2      	ldrh	r2, [r0, #6]
 80171ba:	4413      	add	r3, r2
 80171bc:	804b      	strh	r3, [r1, #2]
 80171be:	1d01      	adds	r1, r0, #4
 80171c0:	4620      	mov	r0, r4
 80171c2:	f7f8 ffb5 	bl	8010130 <_ZN8touchgfx4RectaNERKS0_>
 80171c6:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80171ca:	2b00      	cmp	r3, #0
 80171cc:	dd0b      	ble.n	80171e6 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80171ce:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80171d2:	2b00      	cmp	r3, #0
 80171d4:	dd07      	ble.n	80171e6 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80171d6:	6968      	ldr	r0, [r5, #20]
 80171d8:	b128      	cbz	r0, 80171e6 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80171da:	6803      	ldr	r3, [r0, #0]
 80171dc:	4621      	mov	r1, r4
 80171de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80171e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80171e4:	4718      	bx	r3
 80171e6:	bd70      	pop	{r4, r5, r6, pc}

080171e8 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 80171e8:	b570      	push	{r4, r5, r6, lr}
 80171ea:	8882      	ldrh	r2, [r0, #4]
 80171ec:	460c      	mov	r4, r1
 80171ee:	880b      	ldrh	r3, [r1, #0]
 80171f0:	4605      	mov	r5, r0
 80171f2:	4413      	add	r3, r2
 80171f4:	800b      	strh	r3, [r1, #0]
 80171f6:	884b      	ldrh	r3, [r1, #2]
 80171f8:	88c2      	ldrh	r2, [r0, #6]
 80171fa:	4413      	add	r3, r2
 80171fc:	804b      	strh	r3, [r1, #2]
 80171fe:	1d01      	adds	r1, r0, #4
 8017200:	4620      	mov	r0, r4
 8017202:	f7f8 ff95 	bl	8010130 <_ZN8touchgfx4RectaNERKS0_>
 8017206:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801720a:	2b00      	cmp	r3, #0
 801720c:	dd18      	ble.n	8017240 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801720e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8017212:	2b00      	cmp	r3, #0
 8017214:	dd14      	ble.n	8017240 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8017216:	6968      	ldr	r0, [r5, #20]
 8017218:	b128      	cbz	r0, 8017226 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801721a:	6803      	ldr	r3, [r0, #0]
 801721c:	4621      	mov	r1, r4
 801721e:	691b      	ldr	r3, [r3, #16]
 8017220:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017224:	4718      	bx	r3
 8017226:	4b07      	ldr	r3, [pc, #28]	@ (8017244 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 8017228:	681b      	ldr	r3, [r3, #0]
 801722a:	3304      	adds	r3, #4
 801722c:	429d      	cmp	r5, r3
 801722e:	d107      	bne.n	8017240 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8017230:	f7fe fed2 	bl	8015fd8 <_ZN8touchgfx11Application11getInstanceEv>
 8017234:	6821      	ldr	r1, [r4, #0]
 8017236:	6862      	ldr	r2, [r4, #4]
 8017238:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801723c:	f7ff b862 	b.w	8016304 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8017240:	bd70      	pop	{r4, r5, r6, pc}
 8017242:	bf00      	nop
 8017244:	20027bd8 	.word	0x20027bd8

08017248 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8017248:	b570      	push	{r4, r5, r6, lr}
 801724a:	4604      	mov	r4, r0
 801724c:	4616      	mov	r6, r2
 801724e:	460d      	mov	r5, r1
 8017250:	b901      	cbnz	r1, 8017254 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8017252:	b192      	cbz	r2, 801727a <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8017254:	6823      	ldr	r3, [r4, #0]
 8017256:	4620      	mov	r0, r4
 8017258:	699b      	ldr	r3, [r3, #24]
 801725a:	4798      	blx	r3
 801725c:	88e2      	ldrh	r2, [r4, #6]
 801725e:	88a1      	ldrh	r1, [r4, #4]
 8017260:	4620      	mov	r0, r4
 8017262:	4432      	add	r2, r6
 8017264:	4429      	add	r1, r5
 8017266:	b212      	sxth	r2, r2
 8017268:	b209      	sxth	r1, r1
 801726a:	f7ef fa50 	bl	800670e <_ZN8touchgfx8Drawable5setXYEss>
 801726e:	6823      	ldr	r3, [r4, #0]
 8017270:	4620      	mov	r0, r4
 8017272:	699b      	ldr	r3, [r3, #24]
 8017274:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017278:	4718      	bx	r3
 801727a:	bd70      	pop	{r4, r5, r6, pc}

0801727c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801727c:	b510      	push	{r4, lr}
 801727e:	2300      	movs	r3, #0
 8017280:	4604      	mov	r4, r0
 8017282:	4608      	mov	r0, r1
 8017284:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8017288:	8023      	strh	r3, [r4, #0]
 801728a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801728e:	8063      	strh	r3, [r4, #2]
 8017290:	6803      	ldr	r3, [r0, #0]
 8017292:	80a1      	strh	r1, [r4, #4]
 8017294:	4621      	mov	r1, r4
 8017296:	80e2      	strh	r2, [r4, #6]
 8017298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801729a:	4798      	blx	r3
 801729c:	4620      	mov	r0, r4
 801729e:	bd10      	pop	{r4, pc}

080172a0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 80172a0:	b530      	push	{r4, r5, lr}
 80172a2:	8083      	strh	r3, [r0, #4]
 80172a4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80172a8:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80172ac:	80c3      	strh	r3, [r0, #6]
 80172ae:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80172b2:	6141      	str	r1, [r0, #20]
 80172b4:	7203      	strb	r3, [r0, #8]
 80172b6:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80172ba:	8302      	strh	r2, [r0, #24]
 80172bc:	7243      	strb	r3, [r0, #9]
 80172be:	7a83      	ldrb	r3, [r0, #10]
 80172c0:	f365 0306 	bfi	r3, r5, #0, #7
 80172c4:	f89d 501c 	ldrb.w	r5, [sp, #28]
 80172c8:	f365 13c7 	bfi	r3, r5, #7, #1
 80172cc:	7283      	strb	r3, [r0, #10]
 80172ce:	f89d 3020 	ldrb.w	r3, [sp, #32]
 80172d2:	72c3      	strb	r3, [r0, #11]
 80172d4:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80172d8:	7303      	strb	r3, [r0, #12]
 80172da:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 80172de:	81c3      	strh	r3, [r0, #14]
 80172e0:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 80172e4:	8203      	strh	r3, [r0, #16]
 80172e6:	4b01      	ldr	r3, [pc, #4]	@ (80172ec <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 80172e8:	6003      	str	r3, [r0, #0]
 80172ea:	bd30      	pop	{r4, r5, pc}
 80172ec:	0802af84 	.word	0x0802af84

080172f0 <_ZNK8touchgfx9ConstFont4findEt>:
 80172f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80172f2:	6944      	ldr	r4, [r0, #20]
 80172f4:	b3bc      	cbz	r4, 8017366 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80172f6:	88a3      	ldrh	r3, [r4, #4]
 80172f8:	8b02      	ldrh	r2, [r0, #24]
 80172fa:	1acb      	subs	r3, r1, r3
 80172fc:	f102 32ff 	add.w	r2, r2, #4294967295
 8017300:	d431      	bmi.n	8017366 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017302:	4293      	cmp	r3, r2
 8017304:	dd0c      	ble.n	8017320 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8017306:	230e      	movs	r3, #14
 8017308:	fb03 4302 	mla	r3, r3, r2, r4
 801730c:	889b      	ldrh	r3, [r3, #4]
 801730e:	1a5b      	subs	r3, r3, r1
 8017310:	1ad3      	subs	r3, r2, r3
 8017312:	429a      	cmp	r2, r3
 8017314:	db27      	blt.n	8017366 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017316:	2b00      	cmp	r3, #0
 8017318:	bfbc      	itt	lt
 801731a:	2302      	movlt	r3, #2
 801731c:	fb92 f3f3 	sdivlt	r3, r2, r3
 8017320:	2500      	movs	r5, #0
 8017322:	260e      	movs	r6, #14
 8017324:	4295      	cmp	r5, r2
 8017326:	dc1e      	bgt.n	8017366 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017328:	fb06 4003 	mla	r0, r6, r3, r4
 801732c:	8887      	ldrh	r7, [r0, #4]
 801732e:	42b9      	cmp	r1, r7
 8017330:	d01a      	beq.n	8017368 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8017332:	d20d      	bcs.n	8017350 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8017334:	1e5a      	subs	r2, r3, #1
 8017336:	4295      	cmp	r5, r2
 8017338:	dc15      	bgt.n	8017366 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801733a:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801733e:	1a5b      	subs	r3, r3, r1
 8017340:	1ad3      	subs	r3, r2, r3
 8017342:	429a      	cmp	r2, r3
 8017344:	db0f      	blt.n	8017366 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017346:	429d      	cmp	r5, r3
 8017348:	ddec      	ble.n	8017324 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801734a:	1953      	adds	r3, r2, r5
 801734c:	105b      	asrs	r3, r3, #1
 801734e:	e7e9      	b.n	8017324 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8017350:	1c5d      	adds	r5, r3, #1
 8017352:	42aa      	cmp	r2, r5
 8017354:	db07      	blt.n	8017366 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017356:	8a43      	ldrh	r3, [r0, #18]
 8017358:	1acb      	subs	r3, r1, r3
 801735a:	442b      	add	r3, r5
 801735c:	429d      	cmp	r5, r3
 801735e:	dc02      	bgt.n	8017366 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017360:	429a      	cmp	r2, r3
 8017362:	dadf      	bge.n	8017324 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8017364:	e7f1      	b.n	801734a <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8017366:	2000      	movs	r0, #0
 8017368:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801736a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801736a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801736c:	4604      	mov	r4, r0
 801736e:	4617      	mov	r7, r2
 8017370:	461e      	mov	r6, r3
 8017372:	b911      	cbnz	r1, 801737a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8017374:	2500      	movs	r5, #0
 8017376:	4628      	mov	r0, r5
 8017378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801737a:	290a      	cmp	r1, #10
 801737c:	d0fa      	beq.n	8017374 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801737e:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 8017382:	4291      	cmp	r1, r2
 8017384:	d0f6      	beq.n	8017374 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8017386:	f242 020b 	movw	r2, #8203	@ 0x200b
 801738a:	4291      	cmp	r1, r2
 801738c:	d0f2      	beq.n	8017374 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801738e:	f7ff ffaf 	bl	80172f0 <_ZNK8touchgfx9ConstFont4findEt>
 8017392:	4605      	mov	r5, r0
 8017394:	b950      	cbnz	r0, 80173ac <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8017396:	6823      	ldr	r3, [r4, #0]
 8017398:	4620      	mov	r0, r4
 801739a:	691b      	ldr	r3, [r3, #16]
 801739c:	4798      	blx	r3
 801739e:	4601      	mov	r1, r0
 80173a0:	4620      	mov	r0, r4
 80173a2:	f7ff ffa5 	bl	80172f0 <_ZNK8touchgfx9ConstFont4findEt>
 80173a6:	4605      	mov	r5, r0
 80173a8:	2800      	cmp	r0, #0
 80173aa:	d0e3      	beq.n	8017374 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80173ac:	6823      	ldr	r3, [r4, #0]
 80173ae:	4629      	mov	r1, r5
 80173b0:	4620      	mov	r0, r4
 80173b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80173b4:	4798      	blx	r3
 80173b6:	6038      	str	r0, [r7, #0]
 80173b8:	6823      	ldr	r3, [r4, #0]
 80173ba:	4620      	mov	r0, r4
 80173bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80173be:	4798      	blx	r3
 80173c0:	7030      	strb	r0, [r6, #0]
 80173c2:	e7d8      	b.n	8017376 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

080173c4 <_ZN8touchgfx4clzuEm>:
 80173c4:	4603      	mov	r3, r0
 80173c6:	b1c8      	cbz	r0, 80173fc <_ZN8touchgfx4clzuEm+0x38>
 80173c8:	0c02      	lsrs	r2, r0, #16
 80173ca:	0412      	lsls	r2, r2, #16
 80173cc:	b9a2      	cbnz	r2, 80173f8 <_ZN8touchgfx4clzuEm+0x34>
 80173ce:	0403      	lsls	r3, r0, #16
 80173d0:	2010      	movs	r0, #16
 80173d2:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 80173d6:	bf04      	itt	eq
 80173d8:	021b      	lsleq	r3, r3, #8
 80173da:	3008      	addeq	r0, #8
 80173dc:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 80173e0:	bf04      	itt	eq
 80173e2:	011b      	lsleq	r3, r3, #4
 80173e4:	3004      	addeq	r0, #4
 80173e6:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 80173ea:	bf04      	itt	eq
 80173ec:	009b      	lsleq	r3, r3, #2
 80173ee:	3002      	addeq	r0, #2
 80173f0:	2b00      	cmp	r3, #0
 80173f2:	db04      	blt.n	80173fe <_ZN8touchgfx4clzuEm+0x3a>
 80173f4:	3001      	adds	r0, #1
 80173f6:	4770      	bx	lr
 80173f8:	2000      	movs	r0, #0
 80173fa:	e7ea      	b.n	80173d2 <_ZN8touchgfx4clzuEm+0xe>
 80173fc:	2020      	movs	r0, #32
 80173fe:	4770      	bx	lr

08017400 <_ZN8touchgfx7muldivuEmmmRm>:
 8017400:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017404:	4680      	mov	r8, r0
 8017406:	460f      	mov	r7, r1
 8017408:	4615      	mov	r5, r2
 801740a:	461e      	mov	r6, r3
 801740c:	f7ff ffda 	bl	80173c4 <_ZN8touchgfx4clzuEm>
 8017410:	b998      	cbnz	r0, 801743a <_ZN8touchgfx7muldivuEmmmRm+0x3a>
 8017412:	4608      	mov	r0, r1
 8017414:	f7ff ffd6 	bl	80173c4 <_ZN8touchgfx4clzuEm>
 8017418:	2800      	cmp	r0, #0
 801741a:	dd08      	ble.n	801742e <_ZN8touchgfx7muldivuEmmmRm+0x2e>
 801741c:	4633      	mov	r3, r6
 801741e:	462a      	mov	r2, r5
 8017420:	4641      	mov	r1, r8
 8017422:	4638      	mov	r0, r7
 8017424:	f7ff ffec 	bl	8017400 <_ZN8touchgfx7muldivuEmmmRm>
 8017428:	b003      	add	sp, #12
 801742a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801742e:	f04f 33ff 	mov.w	r3, #4294967295
 8017432:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8017436:	6033      	str	r3, [r6, #0]
 8017438:	e7f6      	b.n	8017428 <_ZN8touchgfx7muldivuEmmmRm+0x28>
 801743a:	fa31 f900 	lsrs.w	r9, r1, r0
 801743e:	fb01 f308 	mul.w	r3, r1, r8
 8017442:	d105      	bne.n	8017450 <_ZN8touchgfx7muldivuEmmmRm+0x50>
 8017444:	fbb3 f0f5 	udiv	r0, r3, r5
 8017448:	fb05 3510 	mls	r5, r5, r0, r3
 801744c:	6035      	str	r5, [r6, #0]
 801744e:	e7eb      	b.n	8017428 <_ZN8touchgfx7muldivuEmmmRm+0x28>
 8017450:	2301      	movs	r3, #1
 8017452:	fa08 fb00 	lsl.w	fp, r8, r0
 8017456:	462a      	mov	r2, r5
 8017458:	4641      	mov	r1, r8
 801745a:	fa03 f000 	lsl.w	r0, r3, r0
 801745e:	4633      	mov	r3, r6
 8017460:	fbbb faf5 	udiv	sl, fp, r5
 8017464:	3801      	subs	r0, #1
 8017466:	fb09 f40a 	mul.w	r4, r9, sl
 801746a:	4038      	ands	r0, r7
 801746c:	f7ff ffc8 	bl	8017400 <_ZN8touchgfx7muldivuEmmmRm>
 8017470:	462a      	mov	r2, r5
 8017472:	4607      	mov	r7, r0
 8017474:	ab01      	add	r3, sp, #4
 8017476:	fb05 b11a 	mls	r1, r5, sl, fp
 801747a:	4648      	mov	r0, r9
 801747c:	f7ff ffc0 	bl	8017400 <_ZN8touchgfx7muldivuEmmmRm>
 8017480:	9b01      	ldr	r3, [sp, #4]
 8017482:	6832      	ldr	r2, [r6, #0]
 8017484:	441a      	add	r2, r3
 8017486:	fbb2 f3f5 	udiv	r3, r2, r5
 801748a:	441c      	add	r4, r3
 801748c:	fb05 2513 	mls	r5, r5, r3, r2
 8017490:	443c      	add	r4, r7
 8017492:	4420      	add	r0, r4
 8017494:	e7da      	b.n	801744c <_ZN8touchgfx7muldivuEmmmRm+0x4c>

08017496 <_ZN8touchgfx6muldivElllRl>:
 8017496:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017498:	2800      	cmp	r0, #0
 801749a:	461e      	mov	r6, r3
 801749c:	bfba      	itte	lt
 801749e:	4240      	neglt	r0, r0
 80174a0:	f04f 34ff 	movlt.w	r4, #4294967295
 80174a4:	2401      	movge	r4, #1
 80174a6:	2900      	cmp	r1, #0
 80174a8:	bfbc      	itt	lt
 80174aa:	4249      	neglt	r1, r1
 80174ac:	4264      	neglt	r4, r4
 80174ae:	2a00      	cmp	r2, #0
 80174b0:	bfb6      	itet	lt
 80174b2:	4265      	neglt	r5, r4
 80174b4:	4625      	movge	r5, r4
 80174b6:	4252      	neglt	r2, r2
 80174b8:	4288      	cmp	r0, r1
 80174ba:	bfc2      	ittt	gt
 80174bc:	4603      	movgt	r3, r0
 80174be:	4608      	movgt	r0, r1
 80174c0:	4619      	movgt	r1, r3
 80174c2:	ab01      	add	r3, sp, #4
 80174c4:	f7ff ff9c 	bl	8017400 <_ZN8touchgfx7muldivuEmmmRm>
 80174c8:	9b01      	ldr	r3, [sp, #4]
 80174ca:	4368      	muls	r0, r5
 80174cc:	435c      	muls	r4, r3
 80174ce:	6034      	str	r4, [r6, #0]
 80174d0:	b002      	add	sp, #8
 80174d2:	bd70      	pop	{r4, r5, r6, pc}

080174d4 <_ZN8touchgfx6muldivElll>:
 80174d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80174d6:	4606      	mov	r6, r0
 80174d8:	ab01      	add	r3, sp, #4
 80174da:	460d      	mov	r5, r1
 80174dc:	4614      	mov	r4, r2
 80174de:	f7ff ffda 	bl	8017496 <_ZN8touchgfx6muldivElllRl>
 80174e2:	2e00      	cmp	r6, #0
 80174e4:	db20      	blt.n	8017528 <_ZN8touchgfx6muldivElll+0x54>
 80174e6:	bf14      	ite	ne
 80174e8:	2301      	movne	r3, #1
 80174ea:	2300      	moveq	r3, #0
 80174ec:	2d00      	cmp	r5, #0
 80174ee:	db1e      	blt.n	801752e <_ZN8touchgfx6muldivElll+0x5a>
 80174f0:	bf14      	ite	ne
 80174f2:	2201      	movne	r2, #1
 80174f4:	2200      	moveq	r2, #0
 80174f6:	2c00      	cmp	r4, #0
 80174f8:	fb03 f202 	mul.w	r2, r3, r2
 80174fc:	db1a      	blt.n	8017534 <_ZN8touchgfx6muldivElll+0x60>
 80174fe:	bf14      	ite	ne
 8017500:	2301      	movne	r3, #1
 8017502:	2300      	moveq	r3, #0
 8017504:	4353      	muls	r3, r2
 8017506:	2b01      	cmp	r3, #1
 8017508:	d117      	bne.n	801753a <_ZN8touchgfx6muldivElll+0x66>
 801750a:	2c00      	cmp	r4, #0
 801750c:	9b01      	ldr	r3, [sp, #4]
 801750e:	bfb8      	it	lt
 8017510:	4264      	neglt	r4, r4
 8017512:	2b00      	cmp	r3, #0
 8017514:	f104 0401 	add.w	r4, r4, #1
 8017518:	bfb8      	it	lt
 801751a:	425b      	neglt	r3, r3
 801751c:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 8017520:	db00      	blt.n	8017524 <_ZN8touchgfx6muldivElll+0x50>
 8017522:	3001      	adds	r0, #1
 8017524:	b002      	add	sp, #8
 8017526:	bd70      	pop	{r4, r5, r6, pc}
 8017528:	f04f 33ff 	mov.w	r3, #4294967295
 801752c:	e7de      	b.n	80174ec <_ZN8touchgfx6muldivElll+0x18>
 801752e:	f04f 32ff 	mov.w	r2, #4294967295
 8017532:	e7e0      	b.n	80174f6 <_ZN8touchgfx6muldivElll+0x22>
 8017534:	f04f 33ff 	mov.w	r3, #4294967295
 8017538:	e7e4      	b.n	8017504 <_ZN8touchgfx6muldivElll+0x30>
 801753a:	3301      	adds	r3, #1
 801753c:	d1f2      	bne.n	8017524 <_ZN8touchgfx6muldivElll+0x50>
 801753e:	9b01      	ldr	r3, [sp, #4]
 8017540:	2c00      	cmp	r4, #0
 8017542:	bfb8      	it	lt
 8017544:	4264      	neglt	r4, r4
 8017546:	2b00      	cmp	r3, #0
 8017548:	bfb8      	it	lt
 801754a:	425b      	neglt	r3, r3
 801754c:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 8017550:	bfc8      	it	gt
 8017552:	f100 30ff 	addgt.w	r0, r0, #4294967295
 8017556:	e7e5      	b.n	8017524 <_ZN8touchgfx6muldivElll+0x50>

08017558 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 8017558:	2000      	movs	r0, #0
 801755a:	4770      	bx	lr

0801755c <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 801755c:	2001      	movs	r0, #1
 801755e:	4770      	bx	lr

08017560 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 8017560:	2002      	movs	r0, #2
 8017562:	4770      	bx	lr

08017564 <_ZN8touchgfx6ScreenD1Ev>:
 8017564:	4770      	bx	lr

08017566 <_ZN8touchgfx12GestureEventD1Ev>:
 8017566:	4770      	bx	lr

08017568 <_ZN8touchgfx9DragEventD1Ev>:
 8017568:	4770      	bx	lr

0801756a <_ZN8touchgfx10ClickEventD1Ev>:
 801756a:	4770      	bx	lr

0801756c <_ZN8touchgfx10ClickEventD0Ev>:
 801756c:	b510      	push	{r4, lr}
 801756e:	4604      	mov	r4, r0
 8017570:	210c      	movs	r1, #12
 8017572:	f00e fa6c 	bl	8025a4e <_ZdlPvj>
 8017576:	4620      	mov	r0, r4
 8017578:	bd10      	pop	{r4, pc}

0801757a <_ZN8touchgfx9DragEventD0Ev>:
 801757a:	b510      	push	{r4, lr}
 801757c:	4604      	mov	r4, r0
 801757e:	2110      	movs	r1, #16
 8017580:	f00e fa65 	bl	8025a4e <_ZdlPvj>
 8017584:	4620      	mov	r0, r4
 8017586:	bd10      	pop	{r4, pc}

08017588 <_ZN8touchgfx12GestureEventD0Ev>:
 8017588:	b510      	push	{r4, lr}
 801758a:	4604      	mov	r4, r0
 801758c:	210c      	movs	r1, #12
 801758e:	f00e fa5e 	bl	8025a4e <_ZdlPvj>
 8017592:	4620      	mov	r0, r4
 8017594:	bd10      	pop	{r4, pc}

08017596 <_ZN8touchgfx6ScreenD0Ev>:
 8017596:	b510      	push	{r4, lr}
 8017598:	4604      	mov	r4, r0
 801759a:	213c      	movs	r1, #60	@ 0x3c
 801759c:	f00e fa57 	bl	8025a4e <_ZdlPvj>
 80175a0:	4620      	mov	r0, r4
 80175a2:	bd10      	pop	{r4, pc}

080175a4 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 80175a4:	b530      	push	{r4, r5, lr}
 80175a6:	460d      	mov	r5, r1
 80175a8:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 80175aa:	b087      	sub	sp, #28
 80175ac:	4604      	mov	r4, r0
 80175ae:	b301      	cbz	r1, 80175f2 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 80175b0:	a801      	add	r0, sp, #4
 80175b2:	f7ff fe63 	bl	801727c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80175b6:	892a      	ldrh	r2, [r5, #8]
 80175b8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80175bc:	7928      	ldrb	r0, [r5, #4]
 80175be:	1ad2      	subs	r2, r2, r3
 80175c0:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 80175c2:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 80175c6:	441a      	add	r2, r3
 80175c8:	896b      	ldrh	r3, [r5, #10]
 80175ca:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 80175ce:	f88d 0010 	strb.w	r0, [sp, #16]
 80175d2:	1b5b      	subs	r3, r3, r5
 80175d4:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 80175d6:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80175d8:	442b      	add	r3, r5
 80175da:	4d07      	ldr	r5, [pc, #28]	@ (80175f8 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 80175dc:	f8ad 1012 	strh.w	r1, [sp, #18]
 80175e0:	a903      	add	r1, sp, #12
 80175e2:	9503      	str	r5, [sp, #12]
 80175e4:	f8ad 2014 	strh.w	r2, [sp, #20]
 80175e8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80175ec:	6803      	ldr	r3, [r0, #0]
 80175ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80175f0:	4798      	blx	r3
 80175f2:	b007      	add	sp, #28
 80175f4:	bd30      	pop	{r4, r5, pc}
 80175f6:	bf00      	nop
 80175f8:	0802b00c 	.word	0x0802b00c

080175fc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 80175fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017600:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8017602:	b08a      	sub	sp, #40	@ 0x28
 8017604:	4604      	mov	r4, r0
 8017606:	460d      	mov	r5, r1
 8017608:	b113      	cbz	r3, 8017610 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801760a:	790b      	ldrb	r3, [r1, #4]
 801760c:	2b00      	cmp	r3, #0
 801760e:	d044      	beq.n	801769a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8017610:	f104 0804 	add.w	r8, r4, #4
 8017614:	a803      	add	r0, sp, #12
 8017616:	4641      	mov	r1, r8
 8017618:	f7ff fe30 	bl	801727c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801761c:	792b      	ldrb	r3, [r5, #4]
 801761e:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8017622:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8017626:	b983      	cbnz	r3, 801764a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 8017628:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 801762c:	892a      	ldrh	r2, [r5, #8]
 801762e:	88e9      	ldrh	r1, [r5, #6]
 8017630:	4640      	mov	r0, r8
 8017632:	1b92      	subs	r2, r2, r6
 8017634:	9301      	str	r3, [sp, #4]
 8017636:	1bc9      	subs	r1, r1, r7
 8017638:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 801763c:	b212      	sxth	r2, r2
 801763e:	9300      	str	r3, [sp, #0]
 8017640:	b209      	sxth	r1, r1
 8017642:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 8017646:	f7f8 fc91 	bl	800ff6c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801764a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801764c:	b329      	cbz	r1, 801769a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801764e:	a805      	add	r0, sp, #20
 8017650:	f7ff fe14 	bl	801727c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017654:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8017658:	792b      	ldrb	r3, [r5, #4]
 801765a:	a907      	add	r1, sp, #28
 801765c:	1abf      	subs	r7, r7, r2
 801765e:	88ea      	ldrh	r2, [r5, #6]
 8017660:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8017662:	4417      	add	r7, r2
 8017664:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 8017666:	f88d 3020 	strb.w	r3, [sp, #32]
 801766a:	4417      	add	r7, r2
 801766c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8017670:	1ab6      	subs	r6, r6, r2
 8017672:	892a      	ldrh	r2, [r5, #8]
 8017674:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 8017678:	4416      	add	r6, r2
 801767a:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801767c:	4416      	add	r6, r2
 801767e:	4a08      	ldr	r2, [pc, #32]	@ (80176a0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 8017680:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 8017684:	2600      	movs	r6, #0
 8017686:	9207      	str	r2, [sp, #28]
 8017688:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 801768c:	6803      	ldr	r3, [r0, #0]
 801768e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017690:	4798      	blx	r3
 8017692:	792b      	ldrb	r3, [r5, #4]
 8017694:	b10b      	cbz	r3, 801769a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8017696:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 801769a:	b00a      	add	sp, #40	@ 0x28
 801769c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80176a0:	0802afe4 	.word	0x0802afe4

080176a4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 80176a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80176a8:	460c      	mov	r4, r1
 80176aa:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 80176ac:	b088      	sub	sp, #32
 80176ae:	4605      	mov	r5, r0
 80176b0:	2900      	cmp	r1, #0
 80176b2:	d06d      	beq.n	8017790 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 80176b4:	4668      	mov	r0, sp
 80176b6:	f7ff fde1 	bl	801727c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80176ba:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 80176bc:	88e3      	ldrh	r3, [r4, #6]
 80176be:	f9bd 8000 	ldrsh.w	r8, [sp]
 80176c2:	440b      	add	r3, r1
 80176c4:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 80176c8:	b21b      	sxth	r3, r3
 80176ca:	4543      	cmp	r3, r8
 80176cc:	db31      	blt.n	8017732 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80176ce:	f8bd c004 	ldrh.w	ip, [sp, #4]
 80176d2:	44c4      	add	ip, r8
 80176d4:	fa0f fc8c 	sxth.w	ip, ip
 80176d8:	4563      	cmp	r3, ip
 80176da:	da2a      	bge.n	8017732 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80176dc:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 80176de:	8926      	ldrh	r6, [r4, #8]
 80176e0:	4416      	add	r6, r2
 80176e2:	b236      	sxth	r6, r6
 80176e4:	42be      	cmp	r6, r7
 80176e6:	db24      	blt.n	8017732 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80176e8:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80176ec:	4438      	add	r0, r7
 80176ee:	b200      	sxth	r0, r0
 80176f0:	4286      	cmp	r6, r0
 80176f2:	da1e      	bge.n	8017732 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80176f4:	8963      	ldrh	r3, [r4, #10]
 80176f6:	4419      	add	r1, r3
 80176f8:	b209      	sxth	r1, r1
 80176fa:	4541      	cmp	r1, r8
 80176fc:	db08      	blt.n	8017710 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 80176fe:	4561      	cmp	r1, ip
 8017700:	da06      	bge.n	8017710 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8017702:	89a3      	ldrh	r3, [r4, #12]
 8017704:	441a      	add	r2, r3
 8017706:	b212      	sxth	r2, r2
 8017708:	42ba      	cmp	r2, r7
 801770a:	db01      	blt.n	8017710 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801770c:	4282      	cmp	r2, r0
 801770e:	db10      	blt.n	8017732 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8017710:	4b21      	ldr	r3, [pc, #132]	@ (8017798 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 8017712:	a904      	add	r1, sp, #16
 8017714:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8017716:	9304      	str	r3, [sp, #16]
 8017718:	2302      	movs	r3, #2
 801771a:	f88d 3014 	strb.w	r3, [sp, #20]
 801771e:	2300      	movs	r3, #0
 8017720:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017724:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017728:	f8ad 301a 	strh.w	r3, [sp, #26]
 801772c:	6803      	ldr	r3, [r0, #0]
 801772e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017730:	4798      	blx	r3
 8017732:	1d29      	adds	r1, r5, #4
 8017734:	a802      	add	r0, sp, #8
 8017736:	f7ff fda1 	bl	801727c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801773a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801773e:	88e0      	ldrh	r0, [r4, #6]
 8017740:	eba3 0808 	sub.w	r8, r3, r8
 8017744:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8017748:	7921      	ldrb	r1, [r4, #4]
 801774a:	fa1f f888 	uxth.w	r8, r8
 801774e:	1bdf      	subs	r7, r3, r7
 8017750:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 8017754:	b2bb      	uxth	r3, r7
 8017756:	4440      	add	r0, r8
 8017758:	8922      	ldrh	r2, [r4, #8]
 801775a:	8967      	ldrh	r7, [r4, #10]
 801775c:	4460      	add	r0, ip
 801775e:	89a4      	ldrh	r4, [r4, #12]
 8017760:	441a      	add	r2, r3
 8017762:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 8017764:	44b8      	add	r8, r7
 8017766:	4423      	add	r3, r4
 8017768:	f8ad 0016 	strh.w	r0, [sp, #22]
 801776c:	4432      	add	r2, r6
 801776e:	44e0      	add	r8, ip
 8017770:	4433      	add	r3, r6
 8017772:	4c0a      	ldr	r4, [pc, #40]	@ (801779c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8017774:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8017776:	f88d 1014 	strb.w	r1, [sp, #20]
 801777a:	a904      	add	r1, sp, #16
 801777c:	9404      	str	r4, [sp, #16]
 801777e:	f8ad 2018 	strh.w	r2, [sp, #24]
 8017782:	f8ad 801a 	strh.w	r8, [sp, #26]
 8017786:	f8ad 301c 	strh.w	r3, [sp, #28]
 801778a:	6803      	ldr	r3, [r0, #0]
 801778c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801778e:	4798      	blx	r3
 8017790:	b008      	add	sp, #32
 8017792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017796:	bf00      	nop
 8017798:	0802afe4 	.word	0x0802afe4
 801779c:	0802aff8 	.word	0x0802aff8

080177a0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 80177a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80177a2:	4604      	mov	r4, r0
 80177a4:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 80177a8:	3201      	adds	r2, #1
 80177aa:	d112      	bne.n	80177d2 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 80177ac:	2500      	movs	r5, #0
 80177ae:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80177b2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80177b6:	6803      	ldr	r3, [r0, #0]
 80177b8:	9500      	str	r5, [sp, #0]
 80177ba:	466d      	mov	r5, sp
 80177bc:	f8ad 1004 	strh.w	r1, [sp, #4]
 80177c0:	f8ad 2006 	strh.w	r2, [sp, #6]
 80177c4:	4629      	mov	r1, r5
 80177c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80177c8:	4798      	blx	r3
 80177ca:	e895 0003 	ldmia.w	r5, {r0, r1}
 80177ce:	e884 0003 	stmia.w	r4, {r0, r1}
 80177d2:	4620      	mov	r0, r4
 80177d4:	b003      	add	sp, #12
 80177d6:	bd30      	pop	{r4, r5, pc}

080177d8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 80177d8:	b513      	push	{r0, r1, r4, lr}
 80177da:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 80177de:	4604      	mov	r4, r0
 80177e0:	3301      	adds	r3, #1
 80177e2:	d109      	bne.n	80177f8 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 80177e4:	4601      	mov	r1, r0
 80177e6:	4668      	mov	r0, sp
 80177e8:	f7ff fd48 	bl	801727c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80177ec:	f8bd 3000 	ldrh.w	r3, [sp]
 80177f0:	8423      	strh	r3, [r4, #32]
 80177f2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80177f6:	8463      	strh	r3, [r4, #34]	@ 0x22
 80177f8:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 80177fc:	b002      	add	sp, #8
 80177fe:	bd10      	pop	{r4, pc}

08017800 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8017800:	b513      	push	{r0, r1, r4, lr}
 8017802:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 8017806:	4604      	mov	r4, r0
 8017808:	3301      	adds	r3, #1
 801780a:	d109      	bne.n	8017820 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801780c:	4601      	mov	r1, r0
 801780e:	4668      	mov	r0, sp
 8017810:	f7ff fd34 	bl	801727c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017814:	f8bd 3000 	ldrh.w	r3, [sp]
 8017818:	8423      	strh	r3, [r4, #32]
 801781a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801781e:	8463      	strh	r3, [r4, #34]	@ 0x22
 8017820:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 8017824:	b002      	add	sp, #8
 8017826:	bd10      	pop	{r4, pc}

08017828 <_ZN8touchgfx6ScreenC1Ev>:
 8017828:	b570      	push	{r4, r5, r6, lr}
 801782a:	4b17      	ldr	r3, [pc, #92]	@ (8017888 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801782c:	4605      	mov	r5, r0
 801782e:	4a17      	ldr	r2, [pc, #92]	@ (801788c <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8017830:	2101      	movs	r1, #1
 8017832:	f845 3b04 	str.w	r3, [r5], #4
 8017836:	2300      	movs	r3, #0
 8017838:	6042      	str	r2, [r0, #4]
 801783a:	4604      	mov	r4, r0
 801783c:	8103      	strh	r3, [r0, #8]
 801783e:	8143      	strh	r3, [r0, #10]
 8017840:	8183      	strh	r3, [r0, #12]
 8017842:	81c3      	strh	r3, [r0, #14]
 8017844:	8203      	strh	r3, [r0, #16]
 8017846:	8243      	strh	r3, [r0, #18]
 8017848:	8283      	strh	r3, [r0, #20]
 801784a:	82c3      	strh	r3, [r0, #22]
 801784c:	6203      	str	r3, [r0, #32]
 801784e:	8483      	strh	r3, [r0, #36]	@ 0x24
 8017850:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8017852:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 8017856:	6343      	str	r3, [r0, #52]	@ 0x34
 8017858:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 801785c:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8017860:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8017864:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 8017868:	4b09      	ldr	r3, [pc, #36]	@ (8017890 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801786a:	4628      	mov	r0, r5
 801786c:	f9b3 6000 	ldrsh.w	r6, [r3]
 8017870:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8017872:	4a08      	ldr	r2, [pc, #32]	@ (8017894 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8017874:	f9b2 1000 	ldrsh.w	r1, [r2]
 8017878:	4798      	blx	r3
 801787a:	6863      	ldr	r3, [r4, #4]
 801787c:	4628      	mov	r0, r5
 801787e:	4631      	mov	r1, r6
 8017880:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017882:	4798      	blx	r3
 8017884:	4620      	mov	r0, r4
 8017886:	bd70      	pop	{r4, r5, r6, pc}
 8017888:	0802b020 	.word	0x0802b020
 801788c:	0802a598 	.word	0x0802a598
 8017890:	20027b8a 	.word	0x20027b8a
 8017894:	20027b88 	.word	0x20027b88

08017898 <_ZN8touchgfx6Screen4drawEv>:
 8017898:	4b09      	ldr	r3, [pc, #36]	@ (80178c0 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801789a:	b507      	push	{r0, r1, r2, lr}
 801789c:	f9b3 2000 	ldrsh.w	r2, [r3]
 80178a0:	2100      	movs	r1, #0
 80178a2:	4b08      	ldr	r3, [pc, #32]	@ (80178c4 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 80178a4:	9100      	str	r1, [sp, #0]
 80178a6:	4669      	mov	r1, sp
 80178a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80178ac:	f8ad 2004 	strh.w	r2, [sp, #4]
 80178b0:	f8ad 3006 	strh.w	r3, [sp, #6]
 80178b4:	6803      	ldr	r3, [r0, #0]
 80178b6:	689b      	ldr	r3, [r3, #8]
 80178b8:	4798      	blx	r3
 80178ba:	b003      	add	sp, #12
 80178bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80178c0:	20027b88 	.word	0x20027b88
 80178c4:	20027b8a 	.word	0x20027b8a

080178c8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 80178c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178cc:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80178d0:	b089      	sub	sp, #36	@ 0x24
 80178d2:	4680      	mov	r8, r0
 80178d4:	460c      	mov	r4, r1
 80178d6:	2b00      	cmp	r3, #0
 80178d8:	4615      	mov	r5, r2
 80178da:	dd0e      	ble.n	80178fa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80178dc:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80178e0:	2b00      	cmp	r3, #0
 80178e2:	dd0a      	ble.n	80178fa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80178e4:	4628      	mov	r0, r5
 80178e6:	f7ff ff5b 	bl	80177a0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80178ea:	4621      	mov	r1, r4
 80178ec:	f7fe fadb 	bl	8015ea6 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80178f0:	69eb      	ldr	r3, [r5, #28]
 80178f2:	b928      	cbnz	r0, 8017900 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 80178f4:	461d      	mov	r5, r3
 80178f6:	2b00      	cmp	r3, #0
 80178f8:	d1f4      	bne.n	80178e4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 80178fa:	b009      	add	sp, #36	@ 0x24
 80178fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017900:	ae04      	add	r6, sp, #16
 8017902:	2b00      	cmp	r3, #0
 8017904:	f000 80b5 	beq.w	8017a72 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8017908:	682b      	ldr	r3, [r5, #0]
 801790a:	4629      	mov	r1, r5
 801790c:	a802      	add	r0, sp, #8
 801790e:	68db      	ldr	r3, [r3, #12]
 8017910:	4798      	blx	r3
 8017912:	4628      	mov	r0, r5
 8017914:	f7ff ff60 	bl	80177d8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8017918:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801791c:	4407      	add	r7, r0
 801791e:	4628      	mov	r0, r5
 8017920:	f7ff ff6e 	bl	8017800 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8017924:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8017928:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801792c:	b23f      	sxth	r7, r7
 801792e:	4418      	add	r0, r3
 8017930:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8017934:	4621      	mov	r1, r4
 8017936:	f8ad 2014 	strh.w	r2, [sp, #20]
 801793a:	f8ad 0012 	strh.w	r0, [sp, #18]
 801793e:	4630      	mov	r0, r6
 8017940:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017944:	f8ad 7010 	strh.w	r7, [sp, #16]
 8017948:	f7f8 fbf2 	bl	8010130 <_ZN8touchgfx4RectaNERKS0_>
 801794c:	4628      	mov	r0, r5
 801794e:	f7ff ff27 	bl	80177a0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8017952:	ab06      	add	r3, sp, #24
 8017954:	4602      	mov	r2, r0
 8017956:	e896 0003 	ldmia.w	r6, {r0, r1}
 801795a:	e883 0003 	stmia.w	r3, {r0, r1}
 801795e:	4611      	mov	r1, r2
 8017960:	4618      	mov	r0, r3
 8017962:	f7f8 fbe5 	bl	8010130 <_ZN8touchgfx4RectaNERKS0_>
 8017966:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801796a:	f9b4 1000 	ldrsh.w	r1, [r4]
 801796e:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8017972:	4299      	cmp	r1, r3
 8017974:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8017978:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801797c:	d10b      	bne.n	8017996 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801797e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8017982:	4552      	cmp	r2, sl
 8017984:	d107      	bne.n	8017996 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8017986:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801798a:	455a      	cmp	r2, fp
 801798c:	d103      	bne.n	8017996 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801798e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8017992:	454a      	cmp	r2, r9
 8017994:	d06d      	beq.n	8017a72 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8017996:	f1bb 0f00 	cmp.w	fp, #0
 801799a:	dd65      	ble.n	8017a68 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801799c:	f1b9 0f00 	cmp.w	r9, #0
 80179a0:	dd62      	ble.n	8017a68 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 80179a2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80179a6:	fa1f f08a 	uxth.w	r0, sl
 80179aa:	4552      	cmp	r2, sl
 80179ac:	9000      	str	r0, [sp, #0]
 80179ae:	da12      	bge.n	80179d6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 80179b0:	9301      	str	r3, [sp, #4]
 80179b2:	9b00      	ldr	r3, [sp, #0]
 80179b4:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80179b8:	f8ad 2012 	strh.w	r2, [sp, #18]
 80179bc:	1a9a      	subs	r2, r3, r2
 80179be:	f8ad 1010 	strh.w	r1, [sp, #16]
 80179c2:	4631      	mov	r1, r6
 80179c4:	f8ad 0014 	strh.w	r0, [sp, #20]
 80179c8:	4640      	mov	r0, r8
 80179ca:	f8ad 2016 	strh.w	r2, [sp, #22]
 80179ce:	69ea      	ldr	r2, [r5, #28]
 80179d0:	f7ff ff7a 	bl	80178c8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80179d4:	9b01      	ldr	r3, [sp, #4]
 80179d6:	f9b4 2000 	ldrsh.w	r2, [r4]
 80179da:	b29f      	uxth	r7, r3
 80179dc:	429a      	cmp	r2, r3
 80179de:	da0d      	bge.n	80179fc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 80179e0:	f8ad 2010 	strh.w	r2, [sp, #16]
 80179e4:	1aba      	subs	r2, r7, r2
 80179e6:	f8ad a012 	strh.w	sl, [sp, #18]
 80179ea:	4631      	mov	r1, r6
 80179ec:	f8ad 2014 	strh.w	r2, [sp, #20]
 80179f0:	4640      	mov	r0, r8
 80179f2:	f8ad 9016 	strh.w	r9, [sp, #22]
 80179f6:	69ea      	ldr	r2, [r5, #28]
 80179f8:	f7ff ff66 	bl	80178c8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80179fc:	8822      	ldrh	r2, [r4, #0]
 80179fe:	445f      	add	r7, fp
 8017a00:	88a3      	ldrh	r3, [r4, #4]
 8017a02:	b2bf      	uxth	r7, r7
 8017a04:	4413      	add	r3, r2
 8017a06:	b23a      	sxth	r2, r7
 8017a08:	b29b      	uxth	r3, r3
 8017a0a:	b219      	sxth	r1, r3
 8017a0c:	4291      	cmp	r1, r2
 8017a0e:	dd0d      	ble.n	8017a2c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8017a10:	1bdb      	subs	r3, r3, r7
 8017a12:	f8ad 2010 	strh.w	r2, [sp, #16]
 8017a16:	f8ad a012 	strh.w	sl, [sp, #18]
 8017a1a:	4631      	mov	r1, r6
 8017a1c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017a20:	4640      	mov	r0, r8
 8017a22:	f8ad 9016 	strh.w	r9, [sp, #22]
 8017a26:	69ea      	ldr	r2, [r5, #28]
 8017a28:	f7ff ff4e 	bl	80178c8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8017a2c:	88e2      	ldrh	r2, [r4, #6]
 8017a2e:	8863      	ldrh	r3, [r4, #2]
 8017a30:	4413      	add	r3, r2
 8017a32:	9a00      	ldr	r2, [sp, #0]
 8017a34:	444a      	add	r2, r9
 8017a36:	b29b      	uxth	r3, r3
 8017a38:	fa1f f982 	uxth.w	r9, r2
 8017a3c:	b219      	sxth	r1, r3
 8017a3e:	fa0f f289 	sxth.w	r2, r9
 8017a42:	428a      	cmp	r2, r1
 8017a44:	da15      	bge.n	8017a72 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8017a46:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8017a4a:	eba3 0309 	sub.w	r3, r3, r9
 8017a4e:	f9b4 0000 	ldrsh.w	r0, [r4]
 8017a52:	f8ad 1014 	strh.w	r1, [sp, #20]
 8017a56:	4631      	mov	r1, r6
 8017a58:	f8ad 0010 	strh.w	r0, [sp, #16]
 8017a5c:	f8ad 2012 	strh.w	r2, [sp, #18]
 8017a60:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017a64:	69ea      	ldr	r2, [r5, #28]
 8017a66:	e001      	b.n	8017a6c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8017a68:	69ea      	ldr	r2, [r5, #28]
 8017a6a:	4621      	mov	r1, r4
 8017a6c:	4640      	mov	r0, r8
 8017a6e:	f7ff ff2b 	bl	80178c8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8017a72:	4628      	mov	r0, r5
 8017a74:	f7ff fe94 	bl	80177a0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8017a78:	6861      	ldr	r1, [r4, #4]
 8017a7a:	4602      	mov	r2, r0
 8017a7c:	4633      	mov	r3, r6
 8017a7e:	6820      	ldr	r0, [r4, #0]
 8017a80:	c303      	stmia	r3!, {r0, r1}
 8017a82:	4611      	mov	r1, r2
 8017a84:	4630      	mov	r0, r6
 8017a86:	f7f8 fb53 	bl	8010130 <_ZN8touchgfx4RectaNERKS0_>
 8017a8a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8017a8e:	2b00      	cmp	r3, #0
 8017a90:	f77f af33 	ble.w	80178fa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8017a94:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8017a98:	2b00      	cmp	r3, #0
 8017a9a:	f77f af2e 	ble.w	80178fa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8017a9e:	4628      	mov	r0, r5
 8017aa0:	f7ff fe9a 	bl	80177d8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8017aa4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8017aa8:	1a18      	subs	r0, r3, r0
 8017aaa:	f8ad 0010 	strh.w	r0, [sp, #16]
 8017aae:	4628      	mov	r0, r5
 8017ab0:	f7ff fea6 	bl	8017800 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8017ab4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8017ab8:	4631      	mov	r1, r6
 8017aba:	1a18      	subs	r0, r3, r0
 8017abc:	f8ad 0012 	strh.w	r0, [sp, #18]
 8017ac0:	4628      	mov	r0, r5
 8017ac2:	682b      	ldr	r3, [r5, #0]
 8017ac4:	689b      	ldr	r3, [r3, #8]
 8017ac6:	4798      	blx	r3
 8017ac8:	e717      	b.n	80178fa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

08017aca <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8017aca:	b570      	push	{r4, r5, r6, lr}
 8017acc:	1d06      	adds	r6, r0, #4
 8017ace:	b086      	sub	sp, #24
 8017ad0:	460c      	mov	r4, r1
 8017ad2:	2300      	movs	r3, #0
 8017ad4:	4631      	mov	r1, r6
 8017ad6:	4605      	mov	r5, r0
 8017ad8:	a802      	add	r0, sp, #8
 8017ada:	9301      	str	r3, [sp, #4]
 8017adc:	f7ff fbce 	bl	801727c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017ae0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8017ae4:	8822      	ldrh	r2, [r4, #0]
 8017ae6:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8017aea:	1ad2      	subs	r2, r2, r3
 8017aec:	8863      	ldrh	r3, [r4, #2]
 8017aee:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8017af2:	1a5b      	subs	r3, r3, r1
 8017af4:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8017af8:	f8ad 2010 	strh.w	r2, [sp, #16]
 8017afc:	aa01      	add	r2, sp, #4
 8017afe:	f8ad 0014 	strh.w	r0, [sp, #20]
 8017b02:	4630      	mov	r0, r6
 8017b04:	f8ad 1016 	strh.w	r1, [sp, #22]
 8017b08:	a904      	add	r1, sp, #16
 8017b0a:	f8ad 3012 	strh.w	r3, [sp, #18]
 8017b0e:	f7f8 fbe7 	bl	80102e0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8017b12:	9a01      	ldr	r2, [sp, #4]
 8017b14:	b11a      	cbz	r2, 8017b1e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 8017b16:	4621      	mov	r1, r4
 8017b18:	4628      	mov	r0, r5
 8017b1a:	f7ff fed5 	bl	80178c8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8017b1e:	b006      	add	sp, #24
 8017b20:	bd70      	pop	{r4, r5, r6, pc}

08017b22 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8017b22:	4602      	mov	r2, r0
 8017b24:	b530      	push	{r4, r5, lr}
 8017b26:	4604      	mov	r4, r0
 8017b28:	b085      	sub	sp, #20
 8017b2a:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8017b2e:	460d      	mov	r5, r1
 8017b30:	466b      	mov	r3, sp
 8017b32:	6851      	ldr	r1, [r2, #4]
 8017b34:	c303      	stmia	r3!, {r0, r1}
 8017b36:	4629      	mov	r1, r5
 8017b38:	4668      	mov	r0, sp
 8017b3a:	f7f8 faf9 	bl	8010130 <_ZN8touchgfx4RectaNERKS0_>
 8017b3e:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8017b42:	b12b      	cbz	r3, 8017b50 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8017b44:	4669      	mov	r1, sp
 8017b46:	4620      	mov	r0, r4
 8017b48:	f7ff ffbf 	bl	8017aca <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8017b4c:	b005      	add	sp, #20
 8017b4e:	bd30      	pop	{r4, r5, pc}
 8017b50:	3404      	adds	r4, #4
 8017b52:	a802      	add	r0, sp, #8
 8017b54:	4621      	mov	r1, r4
 8017b56:	f7ff fb91 	bl	801727c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017b5a:	f8bd 3000 	ldrh.w	r3, [sp]
 8017b5e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8017b62:	4669      	mov	r1, sp
 8017b64:	4620      	mov	r0, r4
 8017b66:	1a9b      	subs	r3, r3, r2
 8017b68:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8017b6c:	f8ad 3000 	strh.w	r3, [sp]
 8017b70:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017b74:	1a9b      	subs	r3, r3, r2
 8017b76:	f8ad 3002 	strh.w	r3, [sp, #2]
 8017b7a:	f7f8 fb78 	bl	801026e <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8017b7e:	e7e5      	b.n	8017b4c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08017b80 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8017b80:	460b      	mov	r3, r1
 8017b82:	680a      	ldr	r2, [r1, #0]
 8017b84:	1d01      	adds	r1, r0, #4
 8017b86:	6992      	ldr	r2, [r2, #24]
 8017b88:	4618      	mov	r0, r3
 8017b8a:	4710      	bx	r2

08017b8c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 8017b8c:	4298      	cmp	r0, r3
 8017b8e:	d200      	bcs.n	8017b92 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
 8017b90:	b913      	cbnz	r3, 8017b98 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
 8017b92:	440a      	add	r2, r1
 8017b94:	b210      	sxth	r0, r2
 8017b96:	4770      	bx	lr
 8017b98:	ee07 0a90 	vmov	s15, r0
 8017b9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8017ba0:	ee07 3a90 	vmov	s15, r3
 8017ba4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017ba8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8017bac:	ee07 2a90 	vmov	s15, r2
 8017bb0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8017bb4:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8017bb8:	ee07 1a90 	vmov	s15, r1
 8017bbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017bc0:	ee37 7a66 	vsub.f32	s14, s14, s13
 8017bc4:	ee67 5a07 	vmul.f32	s11, s14, s14
 8017bc8:	eee5 6a87 	vfma.f32	s13, s11, s14
 8017bcc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8017bd0:	eee6 7a26 	vfma.f32	s15, s12, s13
 8017bd4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017bdc:	bfcc      	ite	gt
 8017bde:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 8017be2:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 8017be6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017bea:	ee17 3a90 	vmov	r3, s15
 8017bee:	b218      	sxth	r0, r3
 8017bf0:	4770      	bx	lr

08017bf2 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>:
 8017bf2:	4298      	cmp	r0, r3
 8017bf4:	d200      	bcs.n	8017bf8 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0x6>
 8017bf6:	b913      	cbnz	r3, 8017bfe <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0xc>
 8017bf8:	440a      	add	r2, r1
 8017bfa:	b210      	sxth	r0, r2
 8017bfc:	4770      	bx	lr
 8017bfe:	ee07 2a90 	vmov	s15, r2
 8017c02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8017c06:	ee07 0a90 	vmov	s15, r0
 8017c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017c12:	ee07 3a10 	vmov	s14, r3
 8017c16:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8017c1a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8017c1e:	ee07 1a90 	vmov	s15, r1
 8017c22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017c26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017c2a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8017c2e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c36:	bfcc      	ite	gt
 8017c38:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 8017c3c:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 8017c40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017c44:	ee17 3a90 	vmov	r3, s15
 8017c48:	b218      	sxth	r0, r3
 8017c4a:	4770      	bx	lr

08017c4c <_ZN8touchgfx12TextProviderC1Ev>:
 8017c4c:	b538      	push	{r3, r4, r5, lr}
 8017c4e:	2500      	movs	r5, #0
 8017c50:	2302      	movs	r3, #2
 8017c52:	4604      	mov	r4, r0
 8017c54:	220e      	movs	r2, #14
 8017c56:	7403      	strb	r3, [r0, #16]
 8017c58:	4629      	mov	r1, r5
 8017c5a:	6145      	str	r5, [r0, #20]
 8017c5c:	7605      	strb	r5, [r0, #24]
 8017c5e:	83c5      	strh	r5, [r0, #30]
 8017c60:	8405      	strh	r5, [r0, #32]
 8017c62:	86c5      	strh	r5, [r0, #54]	@ 0x36
 8017c64:	8705      	strh	r5, [r0, #56]	@ 0x38
 8017c66:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 8017c68:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 8017c6c:	e9c0 5500 	strd	r5, r5, [r0]
 8017c70:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 8017c74:	304c      	adds	r0, #76	@ 0x4c
 8017c76:	f00e f9b5 	bl	8025fe4 <memset>
 8017c7a:	2301      	movs	r3, #1
 8017c7c:	4620      	mov	r0, r4
 8017c7e:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 8017c82:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8017c86:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 8017c8a:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 8017c8e:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 8017c92:	f7ef fb61 	bl	8007358 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8017c96:	4620      	mov	r0, r4
 8017c98:	bd38      	pop	{r3, r4, r5, pc}

08017c9a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8017c9a:	b530      	push	{r4, r5, lr}
 8017c9c:	2500      	movs	r5, #0
 8017c9e:	2401      	movs	r4, #1
 8017ca0:	6843      	ldr	r3, [r0, #4]
 8017ca2:	b913      	cbnz	r3, 8017caa <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8017ca4:	6803      	ldr	r3, [r0, #0]
 8017ca6:	b313      	cbz	r3, 8017cee <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8017ca8:	6043      	str	r3, [r0, #4]
 8017caa:	7e03      	ldrb	r3, [r0, #24]
 8017cac:	b143      	cbz	r3, 8017cc0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8017cae:	6943      	ldr	r3, [r0, #20]
 8017cb0:	b12b      	cbz	r3, 8017cbe <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8017cb2:	881a      	ldrh	r2, [r3, #0]
 8017cb4:	b11a      	cbz	r2, 8017cbe <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8017cb6:	1c9a      	adds	r2, r3, #2
 8017cb8:	6142      	str	r2, [r0, #20]
 8017cba:	8818      	ldrh	r0, [r3, #0]
 8017cbc:	bd30      	pop	{r4, r5, pc}
 8017cbe:	7605      	strb	r5, [r0, #24]
 8017cc0:	6843      	ldr	r3, [r0, #4]
 8017cc2:	8819      	ldrh	r1, [r3, #0]
 8017cc4:	b199      	cbz	r1, 8017cee <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8017cc6:	1c9a      	adds	r2, r3, #2
 8017cc8:	2902      	cmp	r1, #2
 8017cca:	6042      	str	r2, [r0, #4]
 8017ccc:	d1f5      	bne.n	8017cba <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8017cce:	7c03      	ldrb	r3, [r0, #16]
 8017cd0:	2b01      	cmp	r3, #1
 8017cd2:	d8e5      	bhi.n	8017ca0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8017cd4:	1c5a      	adds	r2, r3, #1
 8017cd6:	3302      	adds	r3, #2
 8017cd8:	7402      	strb	r2, [r0, #16]
 8017cda:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8017cde:	6143      	str	r3, [r0, #20]
 8017ce0:	2b00      	cmp	r3, #0
 8017ce2:	d0dd      	beq.n	8017ca0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8017ce4:	881b      	ldrh	r3, [r3, #0]
 8017ce6:	2b00      	cmp	r3, #0
 8017ce8:	d0da      	beq.n	8017ca0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8017cea:	7604      	strb	r4, [r0, #24]
 8017cec:	e7d8      	b.n	8017ca0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8017cee:	2000      	movs	r0, #0
 8017cf0:	e7e4      	b.n	8017cbc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08017cf2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8017cf2:	6001      	str	r1, [r0, #0]
 8017cf4:	2100      	movs	r1, #0
 8017cf6:	b430      	push	{r4, r5}
 8017cf8:	6041      	str	r1, [r0, #4]
 8017cfa:	6815      	ldr	r5, [r2, #0]
 8017cfc:	6085      	str	r5, [r0, #8]
 8017cfe:	6852      	ldr	r2, [r2, #4]
 8017d00:	6443      	str	r3, [r0, #68]	@ 0x44
 8017d02:	9b02      	ldr	r3, [sp, #8]
 8017d04:	60c2      	str	r2, [r0, #12]
 8017d06:	7401      	strb	r1, [r0, #16]
 8017d08:	6141      	str	r1, [r0, #20]
 8017d0a:	7601      	strb	r1, [r0, #24]
 8017d0c:	8701      	strh	r1, [r0, #56]	@ 0x38
 8017d0e:	8401      	strh	r1, [r0, #32]
 8017d10:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 8017d14:	6483      	str	r3, [r0, #72]	@ 0x48
 8017d16:	bc30      	pop	{r4, r5}
 8017d18:	f7ef bb1e 	b.w	8007358 <_ZN8touchgfx12TextProvider18initializeInternalEv>

08017d1c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8017d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017d1e:	4605      	mov	r5, r0
 8017d20:	4608      	mov	r0, r1
 8017d22:	b1f1      	cbz	r1, 8017d62 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 8017d24:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 8017d28:	460b      	mov	r3, r1
 8017d2a:	f101 0708 	add.w	r7, r1, #8
 8017d2e:	4622      	mov	r2, r4
 8017d30:	6818      	ldr	r0, [r3, #0]
 8017d32:	3308      	adds	r3, #8
 8017d34:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8017d38:	4626      	mov	r6, r4
 8017d3a:	42bb      	cmp	r3, r7
 8017d3c:	c603      	stmia	r6!, {r0, r1}
 8017d3e:	4634      	mov	r4, r6
 8017d40:	d1f6      	bne.n	8017d30 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8017d42:	6818      	ldr	r0, [r3, #0]
 8017d44:	6030      	str	r0, [r6, #0]
 8017d46:	4610      	mov	r0, r2
 8017d48:	889b      	ldrh	r3, [r3, #4]
 8017d4a:	80b3      	strh	r3, [r6, #4]
 8017d4c:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 8017d50:	015b      	lsls	r3, r3, #5
 8017d52:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8017d56:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 8017d5a:	430b      	orrs	r3, r1
 8017d5c:	425b      	negs	r3, r3
 8017d5e:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 8017d62:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017d64 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8017d64:	b538      	push	{r3, r4, r5, lr}
 8017d66:	460c      	mov	r4, r1
 8017d68:	6811      	ldr	r1, [r2, #0]
 8017d6a:	4610      	mov	r0, r2
 8017d6c:	68cd      	ldr	r5, [r1, #12]
 8017d6e:	4619      	mov	r1, r3
 8017d70:	47a8      	blx	r5
 8017d72:	2800      	cmp	r0, #0
 8017d74:	bf08      	it	eq
 8017d76:	4620      	moveq	r0, r4
 8017d78:	bd38      	pop	{r3, r4, r5, pc}
	...

08017d7c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8017d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d7e:	4604      	mov	r4, r0
 8017d80:	4615      	mov	r5, r2
 8017d82:	4608      	mov	r0, r1
 8017d84:	b93a      	cbnz	r2, 8017d96 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8017d86:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 8017d8a:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 8017d8e:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
 8017d92:	4628      	mov	r0, r5
 8017d94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017d96:	f892 c00d 	ldrb.w	ip, [r2, #13]
 8017d9a:	f46f 6763 	mvn.w	r7, #3632	@ 0xe30
 8017d9e:	8893      	ldrh	r3, [r2, #4]
 8017da0:	ea4f 160c 	mov.w	r6, ip, lsl #4
 8017da4:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 8017da8:	79ee      	ldrb	r6, [r5, #7]
 8017daa:	4316      	orrs	r6, r2
 8017dac:	19da      	adds	r2, r3, r7
 8017dae:	b291      	uxth	r1, r2
 8017db0:	b2b7      	uxth	r7, r6
 8017db2:	291d      	cmp	r1, #29
 8017db4:	d87b      	bhi.n	8017eae <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 8017db6:	2201      	movs	r2, #1
 8017db8:	10f6      	asrs	r6, r6, #3
 8017dba:	408a      	lsls	r2, r1
 8017dbc:	4974      	ldr	r1, [pc, #464]	@ (8017f90 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 8017dbe:	420a      	tst	r2, r1
 8017dc0:	d12e      	bne.n	8017e20 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 8017dc2:	f412 7f60 	tst.w	r2, #896	@ 0x380
 8017dc6:	d072      	beq.n	8017eae <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 8017dc8:	f104 024c 	add.w	r2, r4, #76	@ 0x4c
 8017dcc:	462b      	mov	r3, r5
 8017dce:	f105 0e08 	add.w	lr, r5, #8
 8017dd2:	4615      	mov	r5, r2
 8017dd4:	6818      	ldr	r0, [r3, #0]
 8017dd6:	3308      	adds	r3, #8
 8017dd8:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8017ddc:	4694      	mov	ip, r2
 8017dde:	4573      	cmp	r3, lr
 8017de0:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8017de4:	4662      	mov	r2, ip
 8017de6:	d1f5      	bne.n	8017dd4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 8017de8:	6818      	ldr	r0, [r3, #0]
 8017dea:	f8cc 0000 	str.w	r0, [ip]
 8017dee:	889b      	ldrh	r3, [r3, #4]
 8017df0:	f8ac 3004 	strh.w	r3, [ip, #4]
 8017df4:	b2b3      	uxth	r3, r6
 8017df6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8017dfa:	f894 0059 	ldrb.w	r0, [r4, #89]	@ 0x59
 8017dfe:	1aca      	subs	r2, r1, r3
 8017e00:	1bcf      	subs	r7, r1, r7
 8017e02:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 8017e06:	b292      	uxth	r2, r2
 8017e08:	1afb      	subs	r3, r7, r3
 8017e0a:	f884 2054 	strb.w	r2, [r4, #84]	@ 0x54
 8017e0e:	10d2      	asrs	r2, r2, #3
 8017e10:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 8017e14:	4302      	orrs	r2, r0
 8017e16:	f884 2059 	strb.w	r2, [r4, #89]	@ 0x59
 8017e1a:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 8017e1e:	e7b8      	b.n	8017d92 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8017e20:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8017e22:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8017e26:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 8017e28:	f640 6333 	movw	r3, #3635	@ 0xe33
 8017e2c:	4299      	cmp	r1, r3
 8017e2e:	d110      	bne.n	8017e52 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 8017e30:	6803      	ldr	r3, [r0, #0]
 8017e32:	68db      	ldr	r3, [r3, #12]
 8017e34:	4798      	blx	r3
 8017e36:	7b41      	ldrb	r1, [r0, #13]
 8017e38:	00cb      	lsls	r3, r1, #3
 8017e3a:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8017e3e:	7a03      	ldrb	r3, [r0, #8]
 8017e40:	0648      	lsls	r0, r1, #25
 8017e42:	ea43 0302 	orr.w	r3, r3, r2
 8017e46:	bf44      	itt	mi
 8017e48:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8017e4c:	b21b      	sxthmi	r3, r3
 8017e4e:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8017e52:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 8017e56:	462a      	mov	r2, r5
 8017e58:	f105 0c08 	add.w	ip, r5, #8
 8017e5c:	443b      	add	r3, r7
 8017e5e:	4433      	add	r3, r6
 8017e60:	f104 064c 	add.w	r6, r4, #76	@ 0x4c
 8017e64:	b29b      	uxth	r3, r3
 8017e66:	4635      	mov	r5, r6
 8017e68:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8017e6c:	6810      	ldr	r0, [r2, #0]
 8017e6e:	3208      	adds	r2, #8
 8017e70:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8017e74:	4637      	mov	r7, r6
 8017e76:	4562      	cmp	r2, ip
 8017e78:	c703      	stmia	r7!, {r0, r1}
 8017e7a:	463e      	mov	r6, r7
 8017e7c:	d1f6      	bne.n	8017e6c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 8017e7e:	6810      	ldr	r0, [r2, #0]
 8017e80:	6038      	str	r0, [r7, #0]
 8017e82:	8892      	ldrh	r2, [r2, #4]
 8017e84:	80ba      	strh	r2, [r7, #4]
 8017e86:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8017e8a:	10db      	asrs	r3, r3, #3
 8017e8c:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 8017e90:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8017e94:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8017e98:	4313      	orrs	r3, r2
 8017e9a:	f894 205e 	ldrb.w	r2, [r4, #94]	@ 0x5e
 8017e9e:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 8017ea2:	f894 3055 	ldrb.w	r3, [r4, #85]	@ 0x55
 8017ea6:	1a9b      	subs	r3, r3, r2
 8017ea8:	f884 3055 	strb.w	r3, [r4, #85]	@ 0x55
 8017eac:	e771      	b.n	8017d92 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8017eae:	f023 0204 	bic.w	r2, r3, #4
 8017eb2:	f640 611b 	movw	r1, #3611	@ 0xe1b
 8017eb6:	428a      	cmp	r2, r1
 8017eb8:	d003      	beq.n	8017ec2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 8017eba:	f640 621d 	movw	r2, #3613	@ 0xe1d
 8017ebe:	4293      	cmp	r3, r2
 8017ec0:	d120      	bne.n	8017f04 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 8017ec2:	3b01      	subs	r3, #1
 8017ec4:	4602      	mov	r2, r0
 8017ec6:	4629      	mov	r1, r5
 8017ec8:	4620      	mov	r0, r4
 8017eca:	b29b      	uxth	r3, r3
 8017ecc:	f7ff ff4a 	bl	8017d64 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8017ed0:	7b41      	ldrb	r1, [r0, #13]
 8017ed2:	00cb      	lsls	r3, r1, #3
 8017ed4:	0649      	lsls	r1, r1, #25
 8017ed6:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8017eda:	7a03      	ldrb	r3, [r0, #8]
 8017edc:	ea43 0302 	orr.w	r3, r3, r2
 8017ee0:	bf44      	itt	mi
 8017ee2:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8017ee6:	b21b      	sxthmi	r3, r3
 8017ee8:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8017eec:	7b6b      	ldrb	r3, [r5, #13]
 8017eee:	7aaa      	ldrb	r2, [r5, #10]
 8017ef0:	005b      	lsls	r3, r3, #1
 8017ef2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8017ef6:	4313      	orrs	r3, r2
 8017ef8:	115a      	asrs	r2, r3, #5
 8017efa:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8017efe:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 8017f02:	e035      	b.n	8017f70 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 8017f04:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8017f08:	f01c 0f40 	tst.w	ip, #64	@ 0x40
 8017f0c:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 8017f10:	7a2a      	ldrb	r2, [r5, #8]
 8017f12:	ea42 0201 	orr.w	r2, r2, r1
 8017f16:	f640 6109 	movw	r1, #3593	@ 0xe09
 8017f1a:	bf1c      	itt	ne
 8017f1c:	f5a2 7200 	subne.w	r2, r2, #512	@ 0x200
 8017f20:	b212      	sxthne	r2, r2
 8017f22:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 8017f26:	f023 0210 	bic.w	r2, r3, #16
 8017f2a:	428a      	cmp	r2, r1
 8017f2c:	d003      	beq.n	8017f36 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 8017f2e:	f640 6213 	movw	r2, #3603	@ 0xe13
 8017f32:	4293      	cmp	r3, r2
 8017f34:	d129      	bne.n	8017f8a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 8017f36:	7b6e      	ldrb	r6, [r5, #13]
 8017f38:	4629      	mov	r1, r5
 8017f3a:	0076      	lsls	r6, r6, #1
 8017f3c:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 8017f40:	7aae      	ldrb	r6, [r5, #10]
 8017f42:	4316      	orrs	r6, r2
 8017f44:	f640 6213 	movw	r2, #3603	@ 0xe13
 8017f48:	4293      	cmp	r3, r2
 8017f4a:	4602      	mov	r2, r0
 8017f4c:	4620      	mov	r0, r4
 8017f4e:	bf16      	itet	ne
 8017f50:	f103 33ff 	addne.w	r3, r3, #4294967295
 8017f54:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 8017f58:	b29b      	uxthne	r3, r3
 8017f5a:	f7ff ff03 	bl	8017d64 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8017f5e:	7b43      	ldrb	r3, [r0, #13]
 8017f60:	7a82      	ldrb	r2, [r0, #10]
 8017f62:	005b      	lsls	r3, r3, #1
 8017f64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8017f68:	4313      	orrs	r3, r2
 8017f6a:	1af6      	subs	r6, r6, r3
 8017f6c:	f8a4 605e 	strh.w	r6, [r4, #94]	@ 0x5e
 8017f70:	7b69      	ldrb	r1, [r5, #13]
 8017f72:	00cb      	lsls	r3, r1, #3
 8017f74:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8017f78:	7a2b      	ldrb	r3, [r5, #8]
 8017f7a:	4313      	orrs	r3, r2
 8017f7c:	064a      	lsls	r2, r1, #25
 8017f7e:	bf44      	itt	mi
 8017f80:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8017f84:	b21b      	sxthmi	r3, r3
 8017f86:	1bdb      	subs	r3, r3, r7
 8017f88:	e747      	b.n	8017e1a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 8017f8a:	2300      	movs	r3, #0
 8017f8c:	e7b7      	b.n	8017efe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 8017f8e:	bf00      	nop
 8017f90:	3fc00079 	.word	0x3fc00079

08017f94 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8017f94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017f98:	4604      	mov	r4, r0
 8017f9a:	b942      	cbnz	r2, 8017fae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8017f9c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8017fa0:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 8017fa4:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 8017fa8:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 8017fac:	e047      	b.n	801803e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8017fae:	7b51      	ldrb	r1, [r2, #13]
 8017fb0:	8893      	ldrh	r3, [r2, #4]
 8017fb2:	010d      	lsls	r5, r1, #4
 8017fb4:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 8017fb8:	79d5      	ldrb	r5, [r2, #7]
 8017fba:	4305      	orrs	r5, r0
 8017fbc:	2d04      	cmp	r5, #4
 8017fbe:	bfcc      	ite	gt
 8017fc0:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 8017fc4:	f04f 0e01 	movle.w	lr, #1
 8017fc8:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 8017fcc:	f200 80ab 	bhi.w	8018126 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 8017fd0:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 8017fd4:	4283      	cmp	r3, r0
 8017fd6:	d216      	bcs.n	8018006 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017fd8:	f240 605b 	movw	r0, #1627	@ 0x65b
 8017fdc:	4283      	cmp	r3, r0
 8017fde:	d859      	bhi.n	8018094 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 8017fe0:	f240 6057 	movw	r0, #1623	@ 0x657
 8017fe4:	4283      	cmp	r3, r0
 8017fe6:	d20e      	bcs.n	8018006 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017fe8:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 8017fec:	d24a      	bcs.n	8018084 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 8017fee:	f240 604e 	movw	r0, #1614	@ 0x64e
 8017ff2:	4283      	cmp	r3, r0
 8017ff4:	d207      	bcs.n	8018006 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017ff6:	f240 601a 	movw	r0, #1562	@ 0x61a
 8017ffa:	4283      	cmp	r3, r0
 8017ffc:	d02a      	beq.n	8018054 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8017ffe:	d821      	bhi.n	8018044 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 8018000:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 8018004:	d35b      	bcc.n	80180be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8018006:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 801800a:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801800e:	f040 80d0 	bne.w	80181b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8018012:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 8018016:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801801a:	f040 80ca 	bne.w	80181b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801801e:	00cb      	lsls	r3, r1, #3
 8018020:	0649      	lsls	r1, r1, #25
 8018022:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8018026:	7a13      	ldrb	r3, [r2, #8]
 8018028:	ea43 0300 	orr.w	r3, r3, r0
 801802c:	bf44      	itt	mi
 801802e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8018032:	b21b      	sxthmi	r3, r3
 8018034:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8018038:	1b5d      	subs	r5, r3, r5
 801803a:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801803e:	4610      	mov	r0, r2
 8018040:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018044:	f240 604b 	movw	r0, #1611	@ 0x64b
 8018048:	4283      	cmp	r3, r0
 801804a:	d338      	bcc.n	80180be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801804c:	f240 604c 	movw	r0, #1612	@ 0x64c
 8018050:	4283      	cmp	r3, r0
 8018052:	d9d8      	bls.n	8018006 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018054:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 8018058:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 801805c:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8018060:	f040 80f3 	bne.w	801824a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8018064:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8018068:	f040 80ef 	bne.w	801824a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801806c:	00cb      	lsls	r3, r1, #3
 801806e:	064e      	lsls	r6, r1, #25
 8018070:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8018074:	7a13      	ldrb	r3, [r2, #8]
 8018076:	ea43 0300 	orr.w	r3, r3, r0
 801807a:	bf44      	itt	mi
 801807c:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8018080:	b21b      	sxthmi	r3, r3
 8018082:	e7d9      	b.n	8018038 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 8018084:	f240 6054 	movw	r0, #1620	@ 0x654
 8018088:	4283      	cmp	r3, r0
 801808a:	d8e3      	bhi.n	8018054 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801808c:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 8018090:	d9e0      	bls.n	8018054 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018092:	e7b8      	b.n	8018006 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018094:	f240 6074 	movw	r0, #1652	@ 0x674
 8018098:	4283      	cmp	r3, r0
 801809a:	d0b4      	beq.n	8018006 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801809c:	d82d      	bhi.n	80180fa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801809e:	f240 605e 	movw	r0, #1630	@ 0x65e
 80180a2:	4283      	cmp	r3, r0
 80180a4:	d804      	bhi.n	80180b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 80180a6:	f240 605d 	movw	r0, #1629	@ 0x65d
 80180aa:	4283      	cmp	r3, r0
 80180ac:	d3d2      	bcc.n	8018054 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80180ae:	e7aa      	b.n	8018006 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80180b0:	f240 605f 	movw	r0, #1631	@ 0x65f
 80180b4:	4283      	cmp	r3, r0
 80180b6:	d0cd      	beq.n	8018054 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80180b8:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 80180bc:	d0a3      	beq.n	8018006 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80180be:	00cb      	lsls	r3, r1, #3
 80180c0:	0649      	lsls	r1, r1, #25
 80180c2:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 80180c6:	7a13      	ldrb	r3, [r2, #8]
 80180c8:	ea43 0300 	orr.w	r3, r3, r0
 80180cc:	bf44      	itt	mi
 80180ce:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80180d2:	b21b      	sxthmi	r3, r3
 80180d4:	1b5d      	subs	r5, r3, r5
 80180d6:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 80180da:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 80180de:	7b53      	ldrb	r3, [r2, #13]
 80180e0:	015b      	lsls	r3, r3, #5
 80180e2:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 80180e6:	7993      	ldrb	r3, [r2, #6]
 80180e8:	430b      	orrs	r3, r1
 80180ea:	2105      	movs	r1, #5
 80180ec:	005b      	lsls	r3, r3, #1
 80180ee:	fb93 f3f1 	sdiv	r3, r3, r1
 80180f2:	f992 1009 	ldrsb.w	r1, [r2, #9]
 80180f6:	440b      	add	r3, r1
 80180f8:	e756      	b.n	8017fa8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 80180fa:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 80180fe:	4283      	cmp	r3, r0
 8018100:	d809      	bhi.n	8018116 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 8018102:	f240 60df 	movw	r0, #1759	@ 0x6df
 8018106:	4283      	cmp	r3, r0
 8018108:	f4bf af7d 	bcs.w	8018006 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801810c:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 8018110:	2b05      	cmp	r3, #5
 8018112:	d8d4      	bhi.n	80180be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8018114:	e777      	b.n	8018006 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018116:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 801811a:	4283      	cmp	r3, r0
 801811c:	d09a      	beq.n	8018054 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801811e:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 8018122:	4283      	cmp	r3, r0
 8018124:	e7ca      	b.n	80180bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8018126:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 801812a:	d22b      	bcs.n	8018184 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 801812c:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 8018130:	4283      	cmp	r3, r0
 8018132:	d28f      	bcs.n	8018054 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018134:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8018138:	4283      	cmp	r3, r0
 801813a:	d816      	bhi.n	801816a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 801813c:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 8018140:	4283      	cmp	r3, r0
 8018142:	f4bf af60 	bcs.w	8018006 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018146:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 801814a:	4283      	cmp	r3, r0
 801814c:	d80a      	bhi.n	8018164 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801814e:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 8018152:	4283      	cmp	r3, r0
 8018154:	f4bf af57 	bcs.w	8018006 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018158:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 801815c:	4283      	cmp	r3, r0
 801815e:	f43f af79 	beq.w	8018054 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018162:	e7ac      	b.n	80180be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8018164:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 8018168:	e7f8      	b.n	801815c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801816a:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 801816e:	4283      	cmp	r3, r0
 8018170:	d802      	bhi.n	8018178 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 8018172:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8018176:	e798      	b.n	80180aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 8018178:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 801817c:	4283      	cmp	r3, r0
 801817e:	f47f af42 	bne.w	8018006 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018182:	e767      	b.n	8018054 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018184:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 8018188:	4283      	cmp	r3, r0
 801818a:	f43f af63 	beq.w	8018054 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801818e:	d802      	bhi.n	8018196 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 8018190:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 8018194:	e7f2      	b.n	801817c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 8018196:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 801819a:	4283      	cmp	r3, r0
 801819c:	d805      	bhi.n	80181aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801819e:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 80181a2:	4283      	cmp	r3, r0
 80181a4:	f4ff af2f 	bcc.w	8018006 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80181a8:	e754      	b.n	8018054 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80181aa:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 80181ae:	4283      	cmp	r3, r0
 80181b0:	e7af      	b.n	8018112 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 80181b2:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 80181b6:	4617      	mov	r7, r2
 80181b8:	f102 0808 	add.w	r8, r2, #8
 80181bc:	4666      	mov	r6, ip
 80181be:	6838      	ldr	r0, [r7, #0]
 80181c0:	3708      	adds	r7, #8
 80181c2:	f857 1c04 	ldr.w	r1, [r7, #-4]
 80181c6:	46e6      	mov	lr, ip
 80181c8:	4547      	cmp	r7, r8
 80181ca:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 80181ce:	46f4      	mov	ip, lr
 80181d0:	d1f5      	bne.n	80181be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 80181d2:	6838      	ldr	r0, [r7, #0]
 80181d4:	f8ce 0000 	str.w	r0, [lr]
 80181d8:	88b9      	ldrh	r1, [r7, #4]
 80181da:	f8ae 1004 	strh.w	r1, [lr, #4]
 80181de:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 80181e2:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 80181e6:	d009      	beq.n	80181fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 80181e8:	7b51      	ldrb	r1, [r2, #13]
 80181ea:	7992      	ldrb	r2, [r2, #6]
 80181ec:	0149      	lsls	r1, r1, #5
 80181ee:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 80181f2:	4311      	orrs	r1, r2
 80181f4:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 80181f8:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 80181fc:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8018200:	b2ad      	uxth	r5, r5
 8018202:	d00d      	beq.n	8018220 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 8018204:	442b      	add	r3, r5
 8018206:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801820a:	b29b      	uxth	r3, r3
 801820c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8018210:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8018214:	10db      	asrs	r3, r3, #3
 8018216:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801821a:	4313      	orrs	r3, r2
 801821c:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 8018220:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 8018224:	00cb      	lsls	r3, r1, #3
 8018226:	064f      	lsls	r7, r1, #25
 8018228:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801822c:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8018230:	ea43 0302 	orr.w	r3, r3, r2
 8018234:	bf44      	itt	mi
 8018236:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801823a:	b21b      	sxthmi	r3, r3
 801823c:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8018240:	1b5b      	subs	r3, r3, r5
 8018242:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 8018246:	4632      	mov	r2, r6
 8018248:	e6f9      	b.n	801803e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801824a:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 801824e:	4617      	mov	r7, r2
 8018250:	f102 0908 	add.w	r9, r2, #8
 8018254:	4666      	mov	r6, ip
 8018256:	6838      	ldr	r0, [r7, #0]
 8018258:	3708      	adds	r7, #8
 801825a:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801825e:	46e0      	mov	r8, ip
 8018260:	454f      	cmp	r7, r9
 8018262:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8018266:	46c4      	mov	ip, r8
 8018268:	d1f5      	bne.n	8018256 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 801826a:	6838      	ldr	r0, [r7, #0]
 801826c:	f8c8 0000 	str.w	r0, [r8]
 8018270:	88b9      	ldrh	r1, [r7, #4]
 8018272:	f8a8 1004 	strh.w	r1, [r8, #4]
 8018276:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 801827a:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801827e:	d009      	beq.n	8018294 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 8018280:	7b51      	ldrb	r1, [r2, #13]
 8018282:	7992      	ldrb	r2, [r2, #6]
 8018284:	0149      	lsls	r1, r1, #5
 8018286:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801828a:	4311      	orrs	r1, r2
 801828c:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8018290:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 8018294:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8018298:	d00e      	beq.n	80182b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 801829a:	eba3 030e 	sub.w	r3, r3, lr
 801829e:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 80182a2:	b29b      	uxth	r3, r3
 80182a4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80182a8:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 80182ac:	10db      	asrs	r3, r3, #3
 80182ae:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80182b2:	4313      	orrs	r3, r2
 80182b4:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 80182b8:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 80182bc:	00cb      	lsls	r3, r1, #3
 80182be:	0648      	lsls	r0, r1, #25
 80182c0:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80182c4:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 80182c8:	ea43 0302 	orr.w	r3, r3, r2
 80182cc:	bf44      	itt	mi
 80182ce:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80182d2:	b21b      	sxthmi	r3, r3
 80182d4:	1b5d      	subs	r5, r3, r5
 80182d6:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 80182da:	e7b4      	b.n	8018246 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

080182dc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 80182dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80182e0:	461e      	mov	r6, r3
 80182e2:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 80182e4:	4604      	mov	r4, r0
 80182e6:	4617      	mov	r7, r2
 80182e8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80182ec:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 80182f0:	f7ee fff0 	bl	80072d4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80182f4:	4605      	mov	r5, r0
 80182f6:	b918      	cbnz	r0, 8018300 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 80182f8:	6030      	str	r0, [r6, #0]
 80182fa:	4628      	mov	r0, r5
 80182fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018300:	683b      	ldr	r3, [r7, #0]
 8018302:	4601      	mov	r1, r0
 8018304:	4638      	mov	r0, r7
 8018306:	68db      	ldr	r3, [r3, #12]
 8018308:	4798      	blx	r3
 801830a:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 801830e:	4602      	mov	r2, r0
 8018310:	6030      	str	r0, [r6, #0]
 8018312:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8018316:	d213      	bcs.n	8018340 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 8018318:	4643      	mov	r3, r8
 801831a:	4639      	mov	r1, r7
 801831c:	4620      	mov	r0, r4
 801831e:	f7ff fe39 	bl	8017f94 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8018322:	6030      	str	r0, [r6, #0]
 8018324:	6833      	ldr	r3, [r6, #0]
 8018326:	b143      	cbz	r3, 801833a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 8018328:	7b5a      	ldrb	r2, [r3, #13]
 801832a:	7a9b      	ldrb	r3, [r3, #10]
 801832c:	0052      	lsls	r2, r2, #1
 801832e:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8018332:	4313      	orrs	r3, r2
 8018334:	bf0c      	ite	eq
 8018336:	2301      	moveq	r3, #1
 8018338:	2300      	movne	r3, #0
 801833a:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 801833e:	e7dc      	b.n	80182fa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 8018340:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 8018344:	b29b      	uxth	r3, r3
 8018346:	2b7f      	cmp	r3, #127	@ 0x7f
 8018348:	d804      	bhi.n	8018354 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801834a:	4639      	mov	r1, r7
 801834c:	4620      	mov	r0, r4
 801834e:	f7ff fd15 	bl	8017d7c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8018352:	e7e6      	b.n	8018322 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8018354:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 8018358:	2b00      	cmp	r3, #0
 801835a:	d0e3      	beq.n	8018324 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801835c:	f640 1302 	movw	r3, #2306	@ 0x902
 8018360:	429d      	cmp	r5, r3
 8018362:	d1df      	bne.n	8018324 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8018364:	4601      	mov	r1, r0
 8018366:	4620      	mov	r0, r4
 8018368:	f7ff fcd8 	bl	8017d1c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801836c:	e7d9      	b.n	8018322 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801836e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801836e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018372:	461e      	mov	r6, r3
 8018374:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8018376:	4604      	mov	r4, r0
 8018378:	4617      	mov	r7, r2
 801837a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801837e:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 8018382:	f7ee ffa7 	bl	80072d4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018386:	4605      	mov	r5, r0
 8018388:	b918      	cbnz	r0, 8018392 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 801838a:	6030      	str	r0, [r6, #0]
 801838c:	4628      	mov	r0, r5
 801838e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018392:	683b      	ldr	r3, [r7, #0]
 8018394:	4601      	mov	r1, r0
 8018396:	4638      	mov	r0, r7
 8018398:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801839c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80183a0:	47c8      	blx	r9
 80183a2:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 80183a6:	4602      	mov	r2, r0
 80183a8:	6030      	str	r0, [r6, #0]
 80183aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80183ae:	d213      	bcs.n	80183d8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 80183b0:	4643      	mov	r3, r8
 80183b2:	4639      	mov	r1, r7
 80183b4:	4620      	mov	r0, r4
 80183b6:	f7ff fded 	bl	8017f94 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 80183ba:	6030      	str	r0, [r6, #0]
 80183bc:	6833      	ldr	r3, [r6, #0]
 80183be:	b143      	cbz	r3, 80183d2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 80183c0:	7b5a      	ldrb	r2, [r3, #13]
 80183c2:	7a9b      	ldrb	r3, [r3, #10]
 80183c4:	0052      	lsls	r2, r2, #1
 80183c6:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 80183ca:	4313      	orrs	r3, r2
 80183cc:	bf0c      	ite	eq
 80183ce:	2301      	moveq	r3, #1
 80183d0:	2300      	movne	r3, #0
 80183d2:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 80183d6:	e7d9      	b.n	801838c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 80183d8:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 80183dc:	b29b      	uxth	r3, r3
 80183de:	2b7f      	cmp	r3, #127	@ 0x7f
 80183e0:	d804      	bhi.n	80183ec <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 80183e2:	4639      	mov	r1, r7
 80183e4:	4620      	mov	r0, r4
 80183e6:	f7ff fcc9 	bl	8017d7c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 80183ea:	e7e6      	b.n	80183ba <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 80183ec:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 80183f0:	2b00      	cmp	r3, #0
 80183f2:	d0e3      	beq.n	80183bc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 80183f4:	f640 1302 	movw	r3, #2306	@ 0x902
 80183f8:	429d      	cmp	r5, r3
 80183fa:	d1df      	bne.n	80183bc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 80183fc:	4601      	mov	r1, r0
 80183fe:	4620      	mov	r0, r4
 8018400:	f7ff fc8c 	bl	8017d1c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8018404:	e7d9      	b.n	80183ba <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

08018406 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8018406:	b510      	push	{r4, lr}
 8018408:	4604      	mov	r4, r0
 801840a:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 801840e:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8018410:	b1e1      	cbz	r1, 801844c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 8018412:	2b0a      	cmp	r3, #10
 8018414:	d02d      	beq.n	8018472 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 8018416:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8018418:	3901      	subs	r1, #1
 801841a:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801841e:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 8018420:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 8018424:	1c51      	adds	r1, r2, #1
 8018426:	b289      	uxth	r1, r1
 8018428:	2901      	cmp	r1, #1
 801842a:	bf8a      	itet	hi
 801842c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8018430:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 8018432:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 8018434:	1c5a      	adds	r2, r3, #1
 8018436:	8722      	strh	r2, [r4, #56]	@ 0x38
 8018438:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801843a:	4413      	add	r3, r2
 801843c:	b29b      	uxth	r3, r3
 801843e:	2b09      	cmp	r3, #9
 8018440:	bf88      	it	hi
 8018442:	3b0a      	subhi	r3, #10
 8018444:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8018448:	8458      	strh	r0, [r3, #34]	@ 0x22
 801844a:	e7de      	b.n	801840a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801844c:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801844e:	2b0a      	cmp	r3, #10
 8018450:	d00f      	beq.n	8018472 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 8018452:	4620      	mov	r0, r4
 8018454:	f7ff fc21 	bl	8017c9a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8018458:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801845a:	1c5a      	adds	r2, r3, #1
 801845c:	8722      	strh	r2, [r4, #56]	@ 0x38
 801845e:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8018460:	4413      	add	r3, r2
 8018462:	b29b      	uxth	r3, r3
 8018464:	2b09      	cmp	r3, #9
 8018466:	bf88      	it	hi
 8018468:	3b0a      	subhi	r3, #10
 801846a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801846e:	8458      	strh	r0, [r3, #34]	@ 0x22
 8018470:	e7ec      	b.n	801844c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 8018472:	bd10      	pop	{r4, pc}

08018474 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8018474:	b538      	push	{r3, r4, r5, lr}
 8018476:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8018478:	4604      	mov	r4, r0
 801847a:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801847e:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 8018480:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 8018482:	3a01      	subs	r2, #1
 8018484:	8702      	strh	r2, [r0, #56]	@ 0x38
 8018486:	1c5a      	adds	r2, r3, #1
 8018488:	b292      	uxth	r2, r2
 801848a:	2a09      	cmp	r2, #9
 801848c:	bf8a      	itet	hi
 801848e:	3b09      	subhi	r3, #9
 8018490:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 8018492:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 8018494:	f7ff ffb7 	bl	8018406 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8018498:	8c23      	ldrh	r3, [r4, #32]
 801849a:	2b01      	cmp	r3, #1
 801849c:	bf9c      	itt	ls
 801849e:	3301      	addls	r3, #1
 80184a0:	8423      	strhls	r3, [r4, #32]
 80184a2:	8be3      	ldrh	r3, [r4, #30]
 80184a4:	b90b      	cbnz	r3, 80184aa <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 80184a6:	2302      	movs	r3, #2
 80184a8:	83e3      	strh	r3, [r4, #30]
 80184aa:	8be3      	ldrh	r3, [r4, #30]
 80184ac:	4628      	mov	r0, r5
 80184ae:	3b01      	subs	r3, #1
 80184b0:	b29b      	uxth	r3, r3
 80184b2:	83e3      	strh	r3, [r4, #30]
 80184b4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80184b8:	8365      	strh	r5, [r4, #26]
 80184ba:	bd38      	pop	{r3, r4, r5, pc}

080184bc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 80184bc:	428a      	cmp	r2, r1
 80184be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80184c2:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 80184c4:	d932      	bls.n	801852c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 80184c6:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 80184c8:	1a54      	subs	r4, r2, r1
 80184ca:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 80184ce:	19ee      	adds	r6, r5, r7
 80184d0:	fa1f fe84 	uxth.w	lr, r4
 80184d4:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 80184d8:	3e01      	subs	r6, #1
 80184da:	b2b4      	uxth	r4, r6
 80184dc:	eba4 090e 	sub.w	r9, r4, lr
 80184e0:	fa1f f989 	uxth.w	r9, r9
 80184e4:	2c09      	cmp	r4, #9
 80184e6:	4626      	mov	r6, r4
 80184e8:	bf88      	it	hi
 80184ea:	f1a4 060a 	subhi.w	r6, r4, #10
 80184ee:	f1bc 0f00 	cmp.w	ip, #0
 80184f2:	f104 34ff 	add.w	r4, r4, #4294967295
 80184f6:	bf08      	it	eq
 80184f8:	f04f 0c02 	moveq.w	ip, #2
 80184fc:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8018500:	b2a4      	uxth	r4, r4
 8018502:	f10c 3cff 	add.w	ip, ip, #4294967295
 8018506:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 801850a:	454c      	cmp	r4, r9
 801850c:	fa1f fc8c 	uxth.w	ip, ip
 8018510:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 8018514:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 8018518:	d1e4      	bne.n	80184e4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801851a:	eba5 050e 	sub.w	r5, r5, lr
 801851e:	eb0e 0408 	add.w	r4, lr, r8
 8018522:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 8018526:	8705      	strh	r5, [r0, #56]	@ 0x38
 8018528:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 801852c:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 801852e:	250a      	movs	r5, #10
 8018530:	1a64      	subs	r4, r4, r1
 8018532:	4439      	add	r1, r7
 8018534:	b289      	uxth	r1, r1
 8018536:	8704      	strh	r4, [r0, #56]	@ 0x38
 8018538:	2909      	cmp	r1, #9
 801853a:	bf88      	it	hi
 801853c:	390a      	subhi	r1, #10
 801853e:	86c1      	strh	r1, [r0, #54]	@ 0x36
 8018540:	b18a      	cbz	r2, 8018566 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 8018542:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 8018544:	3a01      	subs	r2, #1
 8018546:	3101      	adds	r1, #1
 8018548:	b292      	uxth	r2, r2
 801854a:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801854e:	8701      	strh	r1, [r0, #56]	@ 0x38
 8018550:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 8018552:	b901      	cbnz	r1, 8018556 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 8018554:	86c5      	strh	r5, [r0, #54]	@ 0x36
 8018556:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 8018558:	3901      	subs	r1, #1
 801855a:	b289      	uxth	r1, r1
 801855c:	86c1      	strh	r1, [r0, #54]	@ 0x36
 801855e:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8018562:	844c      	strh	r4, [r1, #34]	@ 0x22
 8018564:	e7ec      	b.n	8018540 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 8018566:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801856a:	f7ff bf4c 	b.w	8018406 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801856e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801856e:	b570      	push	{r4, r5, r6, lr}
 8018570:	2500      	movs	r5, #0
 8018572:	4295      	cmp	r5, r2
 8018574:	d011      	beq.n	801859a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 8018576:	8bc4      	ldrh	r4, [r0, #30]
 8018578:	f831 6b02 	ldrh.w	r6, [r1], #2
 801857c:	4414      	add	r4, r2
 801857e:	3c01      	subs	r4, #1
 8018580:	1b64      	subs	r4, r4, r5
 8018582:	b2a4      	uxth	r4, r4
 8018584:	2c01      	cmp	r4, #1
 8018586:	bf88      	it	hi
 8018588:	3c02      	subhi	r4, #2
 801858a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801858e:	8b64      	ldrh	r4, [r4, #26]
 8018590:	42b4      	cmp	r4, r6
 8018592:	d117      	bne.n	80185c4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 8018594:	3501      	adds	r5, #1
 8018596:	b2ad      	uxth	r5, r5
 8018598:	e7eb      	b.n	8018572 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801859a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801859e:	2400      	movs	r4, #0
 80185a0:	4413      	add	r3, r2
 80185a2:	b2a2      	uxth	r2, r4
 80185a4:	429a      	cmp	r2, r3
 80185a6:	da0f      	bge.n	80185c8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 80185a8:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 80185aa:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 80185ae:	3401      	adds	r4, #1
 80185b0:	4432      	add	r2, r6
 80185b2:	b292      	uxth	r2, r2
 80185b4:	2a09      	cmp	r2, #9
 80185b6:	bf88      	it	hi
 80185b8:	3a0a      	subhi	r2, #10
 80185ba:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80185be:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 80185c0:	42aa      	cmp	r2, r5
 80185c2:	d0ee      	beq.n	80185a2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 80185c4:	2000      	movs	r0, #0
 80185c6:	bd70      	pop	{r4, r5, r6, pc}
 80185c8:	2001      	movs	r0, #1
 80185ca:	e7fc      	b.n	80185c6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

080185cc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 80185cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185d0:	4605      	mov	r5, r0
 80185d2:	4616      	mov	r6, r2
 80185d4:	1c8c      	adds	r4, r1, #2
 80185d6:	8809      	ldrh	r1, [r1, #0]
 80185d8:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 80185dc:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 80185e0:	42b3      	cmp	r3, r6
 80185e2:	d124      	bne.n	801862e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 80185e4:	f3c1 2903 	ubfx	r9, r1, #8, #4
 80185e8:	f3c1 1803 	ubfx	r8, r1, #4, #4
 80185ec:	f001 070f 	and.w	r7, r1, #15
 80185f0:	4652      	mov	r2, sl
 80185f2:	f8cd 8000 	str.w	r8, [sp]
 80185f6:	464b      	mov	r3, r9
 80185f8:	4621      	mov	r1, r4
 80185fa:	4628      	mov	r0, r5
 80185fc:	f7ff ffb7 	bl	801856e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8018600:	4683      	mov	fp, r0
 8018602:	b168      	cbz	r0, 8018620 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8018604:	eb0a 0109 	add.w	r1, sl, r9
 8018608:	463a      	mov	r2, r7
 801860a:	4628      	mov	r0, r5
 801860c:	4441      	add	r1, r8
 801860e:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8018612:	4649      	mov	r1, r9
 8018614:	f7ff ff52 	bl	80184bc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8018618:	4658      	mov	r0, fp
 801861a:	b003      	add	sp, #12
 801861c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018620:	eb07 010a 	add.w	r1, r7, sl
 8018624:	4449      	add	r1, r9
 8018626:	4441      	add	r1, r8
 8018628:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801862c:	e7d2      	b.n	80185d4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801862e:	f04f 0b00 	mov.w	fp, #0
 8018632:	e7f1      	b.n	8018618 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08018634 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8018634:	b570      	push	{r4, r5, r6, lr}
 8018636:	8810      	ldrh	r0, [r2, #0]
 8018638:	4298      	cmp	r0, r3
 801863a:	d817      	bhi.n	801866c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801863c:	1e48      	subs	r0, r1, #1
 801863e:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8018642:	4298      	cmp	r0, r3
 8018644:	d312      	bcc.n	801866c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8018646:	2400      	movs	r4, #0
 8018648:	428c      	cmp	r4, r1
 801864a:	d20f      	bcs.n	801866c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801864c:	1860      	adds	r0, r4, r1
 801864e:	1040      	asrs	r0, r0, #1
 8018650:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8018654:	0085      	lsls	r5, r0, #2
 8018656:	42b3      	cmp	r3, r6
 8018658:	d902      	bls.n	8018660 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801865a:	3001      	adds	r0, #1
 801865c:	b284      	uxth	r4, r0
 801865e:	e7f3      	b.n	8018648 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8018660:	d201      	bcs.n	8018666 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8018662:	b281      	uxth	r1, r0
 8018664:	e7f0      	b.n	8018648 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8018666:	442a      	add	r2, r5
 8018668:	8850      	ldrh	r0, [r2, #2]
 801866a:	bd70      	pop	{r4, r5, r6, pc}
 801866c:	2000      	movs	r0, #0
 801866e:	e7fc      	b.n	801866a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08018670 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8018670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018674:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 8018676:	4604      	mov	r4, r0
 8018678:	260b      	movs	r6, #11
 801867a:	886f      	ldrh	r7, [r5, #2]
 801867c:	087f      	lsrs	r7, r7, #1
 801867e:	3e01      	subs	r6, #1
 8018680:	d013      	beq.n	80186aa <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8018682:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8018684:	462a      	mov	r2, r5
 8018686:	4639      	mov	r1, r7
 8018688:	4620      	mov	r0, r4
 801868a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801868e:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 8018692:	4643      	mov	r3, r8
 8018694:	f7ff ffce 	bl	8018634 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8018698:	b138      	cbz	r0, 80186aa <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801869a:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801869e:	4642      	mov	r2, r8
 80186a0:	4620      	mov	r0, r4
 80186a2:	f7ff ff93 	bl	80185cc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 80186a6:	2800      	cmp	r0, #0
 80186a8:	d1e9      	bne.n	801867e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 80186aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080186b0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 80186b0:	b570      	push	{r4, r5, r6, lr}
 80186b2:	694a      	ldr	r2, [r1, #20]
 80186b4:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 80186b6:	684b      	ldr	r3, [r1, #4]
 80186b8:	1b54      	subs	r4, r2, r5
 80186ba:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 80186bc:	f000 8106 	beq.w	80188cc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 80186c0:	1b9b      	subs	r3, r3, r6
 80186c2:	d003      	beq.n	80186cc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 80186c4:	4363      	muls	r3, r4
 80186c6:	2210      	movs	r2, #16
 80186c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80186cc:	680c      	ldr	r4, [r1, #0]
 80186ce:	698a      	ldr	r2, [r1, #24]
 80186d0:	1b65      	subs	r5, r4, r5
 80186d2:	f000 80fd 	beq.w	80188d0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 80186d6:	1b92      	subs	r2, r2, r6
 80186d8:	d003      	beq.n	80186e2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 80186da:	436a      	muls	r2, r5
 80186dc:	2410      	movs	r4, #16
 80186de:	fb92 f2f4 	sdiv	r2, r2, r4
 80186e2:	1a9b      	subs	r3, r3, r2
 80186e4:	ed9f 4a89 	vldr	s8, [pc, #548]	@ 801890c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 80186e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80186ec:	460a      	mov	r2, r1
 80186ee:	ee07 3a90 	vmov	s15, r3
 80186f2:	f100 040c 	add.w	r4, r0, #12
 80186f6:	4603      	mov	r3, r0
 80186f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80186fc:	ee67 7a84 	vmul.f32	s15, s15, s8
 8018700:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8018704:	eeb1 6a43 	vneg.f32	s12, s6
 8018708:	edd2 7a02 	vldr	s15, [r2, #8]
 801870c:	3214      	adds	r2, #20
 801870e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8018712:	ece3 6a01 	vstmia	r3!, {s13}
 8018716:	429c      	cmp	r4, r3
 8018718:	ed52 7a02 	vldr	s15, [r2, #-8]
 801871c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018720:	edc3 7a02 	vstr	s15, [r3, #8]
 8018724:	ed52 7a01 	vldr	s15, [r2, #-4]
 8018728:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801872c:	edc3 7a05 	vstr	s15, [r3, #20]
 8018730:	d1ea      	bne.n	8018708 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8018732:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8018734:	698b      	ldr	r3, [r1, #24]
 8018736:	edd0 4a02 	vldr	s9, [r0, #8]
 801873a:	1a9b      	subs	r3, r3, r2
 801873c:	edd0 3a00 	vldr	s7, [r0]
 8018740:	edd0 6a01 	vldr	s13, [r0, #4]
 8018744:	ee07 3a90 	vmov	s15, r3
 8018748:	684b      	ldr	r3, [r1, #4]
 801874a:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801874e:	ed90 5a05 	vldr	s10, [r0, #20]
 8018752:	1a9b      	subs	r3, r3, r2
 8018754:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018758:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801875c:	ed90 2a03 	vldr	s4, [r0, #12]
 8018760:	ee07 3a10 	vmov	s14, r3
 8018764:	edd0 5a04 	vldr	s11, [r0, #16]
 8018768:	ee67 7a84 	vmul.f32	s15, s15, s8
 801876c:	ed90 1a07 	vldr	s2, [r0, #28]
 8018770:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018774:	edd0 2a06 	vldr	s5, [r0, #24]
 8018778:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801877c:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8018780:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018784:	ee32 5a45 	vsub.f32	s10, s4, s10
 8018788:	eee6 7a87 	vfma.f32	s15, s13, s14
 801878c:	ee67 7a83 	vmul.f32	s15, s15, s6
 8018790:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 8018794:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8018796:	694a      	ldr	r2, [r1, #20]
 8018798:	1b13      	subs	r3, r2, r4
 801879a:	ee07 3a10 	vmov	s14, r3
 801879e:	680b      	ldr	r3, [r1, #0]
 80187a0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80187a4:	1b1b      	subs	r3, r3, r4
 80187a6:	ee27 7a04 	vmul.f32	s14, s14, s8
 80187aa:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 80187ae:	ee07 3a10 	vmov	s14, r3
 80187b2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80187b6:	ee27 7a04 	vmul.f32	s14, s14, s8
 80187ba:	eee6 4a87 	vfma.f32	s9, s13, s14
 80187be:	ee64 4a86 	vmul.f32	s9, s9, s12
 80187c2:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 80187c6:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80187c8:	698b      	ldr	r3, [r1, #24]
 80187ca:	1a9b      	subs	r3, r3, r2
 80187cc:	ee06 3a90 	vmov	s13, r3
 80187d0:	684b      	ldr	r3, [r1, #4]
 80187d2:	1a9b      	subs	r3, r3, r2
 80187d4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80187d8:	ee07 3a10 	vmov	s14, r3
 80187dc:	ee66 6a84 	vmul.f32	s13, s13, s8
 80187e0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80187e4:	ee65 6a66 	vnmul.f32	s13, s10, s13
 80187e8:	ee27 7a04 	vmul.f32	s14, s14, s8
 80187ec:	eee5 6a87 	vfma.f32	s13, s11, s14
 80187f0:	ee66 6a83 	vmul.f32	s13, s13, s6
 80187f4:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 80187f8:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 80187fa:	694a      	ldr	r2, [r1, #20]
 80187fc:	1b13      	subs	r3, r2, r4
 80187fe:	ee07 3a10 	vmov	s14, r3
 8018802:	680b      	ldr	r3, [r1, #0]
 8018804:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018808:	1b1b      	subs	r3, r3, r4
 801880a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801880e:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8018812:	ee07 3a10 	vmov	s14, r3
 8018816:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801881a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801881e:	eea5 5a87 	vfma.f32	s10, s11, s14
 8018822:	edd0 5a08 	vldr	s11, [r0, #32]
 8018826:	ee31 1a65 	vsub.f32	s2, s2, s11
 801882a:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801882e:	ee25 5a06 	vmul.f32	s10, s10, s12
 8018832:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 8018836:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8018838:	698b      	ldr	r3, [r1, #24]
 801883a:	1a9b      	subs	r3, r3, r2
 801883c:	ee07 3a10 	vmov	s14, r3
 8018840:	684b      	ldr	r3, [r1, #4]
 8018842:	1a9b      	subs	r3, r3, r2
 8018844:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018848:	ee01 3a90 	vmov	s3, r3
 801884c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018850:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8018854:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8018858:	ee61 1a84 	vmul.f32	s3, s3, s8
 801885c:	eea1 7a21 	vfma.f32	s14, s2, s3
 8018860:	ee27 7a03 	vmul.f32	s14, s14, s6
 8018864:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 8018868:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801886a:	694a      	ldr	r2, [r1, #20]
 801886c:	1b13      	subs	r3, r2, r4
 801886e:	ee03 3a10 	vmov	s6, r3
 8018872:	680b      	ldr	r3, [r1, #0]
 8018874:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8018878:	1b1b      	subs	r3, r3, r4
 801887a:	ee23 3a04 	vmul.f32	s6, s6, s8
 801887e:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8018882:	ee03 3a10 	vmov	s6, r3
 8018886:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801888a:	ee23 4a04 	vmul.f32	s8, s6, s8
 801888e:	eee1 5a04 	vfma.f32	s11, s2, s8
 8018892:	ee25 6a86 	vmul.f32	s12, s11, s12
 8018896:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801889a:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 801889e:	eee3 5aa6 	vfma.f32	s11, s7, s13
 80188a2:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 80188a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188aa:	dd13      	ble.n	80188d4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 80188ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80188b0:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 80188b4:	63c3      	str	r3, [r0, #60]	@ 0x3c
 80188b6:	eee3 7a87 	vfma.f32	s15, s7, s14
 80188ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80188be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188c2:	dd15      	ble.n	80188f0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 80188c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80188c8:	6403      	str	r3, [r0, #64]	@ 0x40
 80188ca:	bd70      	pop	{r4, r5, r6, pc}
 80188cc:	4623      	mov	r3, r4
 80188ce:	e6fd      	b.n	80186cc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 80188d0:	462a      	mov	r2, r5
 80188d2:	e706      	b.n	80186e2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 80188d4:	d502      	bpl.n	80188dc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 80188d6:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80188da:	e7e9      	b.n	80188b0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 80188dc:	ee22 2a64 	vnmul.f32	s4, s4, s9
 80188e0:	eea3 2a85 	vfma.f32	s4, s7, s10
 80188e4:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 80188e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188ec:	dade      	bge.n	80188ac <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 80188ee:	e7f2      	b.n	80188d6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 80188f0:	d502      	bpl.n	80188f8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 80188f2:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80188f6:	e7e7      	b.n	80188c8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 80188f8:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 80188fc:	eee3 4a86 	vfma.f32	s9, s7, s12
 8018900:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8018904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018908:	dadc      	bge.n	80188c4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801890a:	e7f2      	b.n	80188f2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801890c:	3d800000 	.word	0x3d800000

08018910 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8018910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018914:	2714      	movs	r7, #20
 8018916:	435f      	muls	r7, r3
 8018918:	eb02 0c07 	add.w	ip, r2, r7
 801891c:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8018920:	f115 0e0f 	adds.w	lr, r5, #15
 8018924:	f100 80a2 	bmi.w	8018a6c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8018928:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801892c:	9c08      	ldr	r4, [sp, #32]
 801892e:	2614      	movs	r6, #20
 8018930:	f8c0 e014 	str.w	lr, [r0, #20]
 8018934:	4366      	muls	r6, r4
 8018936:	eb02 0806 	add.w	r8, r2, r6
 801893a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801893e:	f115 040f 	adds.w	r4, r5, #15
 8018942:	f100 809f 	bmi.w	8018a84 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 8018946:	1124      	asrs	r4, r4, #4
 8018948:	eba4 040e 	sub.w	r4, r4, lr
 801894c:	6184      	str	r4, [r0, #24]
 801894e:	2c00      	cmp	r4, #0
 8018950:	f000 808a 	beq.w	8018a68 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 8018954:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8018958:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801895c:	5995      	ldr	r5, [r2, r6]
 801895e:	eba4 0809 	sub.w	r8, r4, r9
 8018962:	59d4      	ldr	r4, [r2, r7]
 8018964:	eba5 0a04 	sub.w	sl, r5, r4
 8018968:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801896c:	ea4f 150a 	mov.w	r5, sl, lsl #4
 8018970:	fb0e fe05 	mul.w	lr, lr, r5
 8018974:	fb0a ee19 	mls	lr, sl, r9, lr
 8018978:	fb08 e404 	mla	r4, r8, r4, lr
 801897c:	3c01      	subs	r4, #1
 801897e:	19a4      	adds	r4, r4, r6
 8018980:	f100 808c 	bmi.w	8018a9c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 8018984:	fb94 fef6 	sdiv	lr, r4, r6
 8018988:	fb06 441e 	mls	r4, r6, lr, r4
 801898c:	f8c0 e000 	str.w	lr, [r0]
 8018990:	6104      	str	r4, [r0, #16]
 8018992:	2d00      	cmp	r5, #0
 8018994:	f2c0 8095 	blt.w	8018ac2 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 8018998:	fb95 f4f6 	sdiv	r4, r5, r6
 801899c:	fb06 5514 	mls	r5, r6, r4, r5
 80189a0:	6044      	str	r4, [r0, #4]
 80189a2:	6085      	str	r5, [r0, #8]
 80189a4:	60c6      	str	r6, [r0, #12]
 80189a6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80189aa:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80189ae:	6945      	ldr	r5, [r0, #20]
 80189b0:	59d2      	ldr	r2, [r2, r7]
 80189b2:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 80189b6:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 8018ae4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 80189ba:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 80189be:	ee07 4a10 	vmov	s14, r4
 80189c2:	6804      	ldr	r4, [r0, #0]
 80189c4:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 80189c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80189cc:	ee07 2a90 	vmov	s15, r2
 80189d0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80189d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80189d8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80189dc:	edd3 6a00 	vldr	s13, [r3]
 80189e0:	eee6 6a07 	vfma.f32	s13, s12, s14
 80189e4:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 80189e8:	eee6 6a27 	vfma.f32	s13, s12, s15
 80189ec:	edc0 6a07 	vstr	s13, [r0, #28]
 80189f0:	edd0 6a01 	vldr	s13, [r0, #4]
 80189f4:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 80189f8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80189fc:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 8018a00:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8018a04:	ed80 6a08 	vstr	s12, [r0, #32]
 8018a08:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 8018a0a:	6242      	str	r2, [r0, #36]	@ 0x24
 8018a0c:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 8018a10:	ed93 6a03 	vldr	s12, [r3, #12]
 8018a14:	eea5 6a87 	vfma.f32	s12, s11, s14
 8018a18:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 8018a1c:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8018a20:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 8018a24:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 8018a28:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 8018a2c:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8018a30:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 8018a34:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8018a36:	6302      	str	r2, [r0, #48]	@ 0x30
 8018a38:	ed93 6a06 	vldr	s12, [r3, #24]
 8018a3c:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 8018a40:	eea5 6a87 	vfma.f32	s12, s11, s14
 8018a44:	eeb0 7a46 	vmov.f32	s14, s12
 8018a48:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 8018a4c:	eea6 7a27 	vfma.f32	s14, s12, s15
 8018a50:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 8018a54:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 8018a58:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 8018a5c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8018a60:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 8018a64:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8018a66:	63c3      	str	r3, [r0, #60]	@ 0x3c
 8018a68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018a6c:	2410      	movs	r4, #16
 8018a6e:	f1c5 0501 	rsb	r5, r5, #1
 8018a72:	fb9e fef4 	sdiv	lr, lr, r4
 8018a76:	f015 050f 	ands.w	r5, r5, #15
 8018a7a:	bf18      	it	ne
 8018a7c:	2501      	movne	r5, #1
 8018a7e:	ebae 0e05 	sub.w	lr, lr, r5
 8018a82:	e753      	b.n	801892c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 8018a84:	f04f 0910 	mov.w	r9, #16
 8018a88:	f1c5 0501 	rsb	r5, r5, #1
 8018a8c:	fb94 f4f9 	sdiv	r4, r4, r9
 8018a90:	f015 050f 	ands.w	r5, r5, #15
 8018a94:	bf18      	it	ne
 8018a96:	2501      	movne	r5, #1
 8018a98:	1b64      	subs	r4, r4, r5
 8018a9a:	e755      	b.n	8018948 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 8018a9c:	4264      	negs	r4, r4
 8018a9e:	fb94 fef6 	sdiv	lr, r4, r6
 8018aa2:	f1ce 0800 	rsb	r8, lr, #0
 8018aa6:	fb06 441e 	mls	r4, r6, lr, r4
 8018aaa:	f8c0 8000 	str.w	r8, [r0]
 8018aae:	6104      	str	r4, [r0, #16]
 8018ab0:	2c00      	cmp	r4, #0
 8018ab2:	f43f af6e 	beq.w	8018992 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 8018ab6:	ea6f 0e0e 	mvn.w	lr, lr
 8018aba:	1b34      	subs	r4, r6, r4
 8018abc:	f8c0 e000 	str.w	lr, [r0]
 8018ac0:	e766      	b.n	8018990 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 8018ac2:	426d      	negs	r5, r5
 8018ac4:	fb95 f4f6 	sdiv	r4, r5, r6
 8018ac8:	f1c4 0e00 	rsb	lr, r4, #0
 8018acc:	fb06 5514 	mls	r5, r6, r4, r5
 8018ad0:	f8c0 e004 	str.w	lr, [r0, #4]
 8018ad4:	6085      	str	r5, [r0, #8]
 8018ad6:	2d00      	cmp	r5, #0
 8018ad8:	f43f af64 	beq.w	80189a4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 8018adc:	43e4      	mvns	r4, r4
 8018ade:	1b75      	subs	r5, r6, r5
 8018ae0:	6044      	str	r4, [r0, #4]
 8018ae2:	e75e      	b.n	80189a2 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 8018ae4:	3d800000 	.word	0x3d800000

08018ae8 <_ZN8touchgfx7Unicode6strlenEPKt>:
 8018ae8:	4602      	mov	r2, r0
 8018aea:	b148      	cbz	r0, 8018b00 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 8018aec:	2300      	movs	r3, #0
 8018aee:	b298      	uxth	r0, r3
 8018af0:	3301      	adds	r3, #1
 8018af2:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8018af6:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 8018afa:	2900      	cmp	r1, #0
 8018afc:	d1f7      	bne.n	8018aee <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 8018afe:	4770      	bx	lr
 8018b00:	4770      	bx	lr

08018b02 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 8018b02:	b530      	push	{r4, r5, lr}
 8018b04:	4604      	mov	r4, r0
 8018b06:	b159      	cbz	r1, 8018b20 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 8018b08:	b148      	cbz	r0, 8018b1e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8018b0a:	2300      	movs	r3, #0
 8018b0c:	b298      	uxth	r0, r3
 8018b0e:	4282      	cmp	r2, r0
 8018b10:	d905      	bls.n	8018b1e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8018b12:	5ccd      	ldrb	r5, [r1, r3]
 8018b14:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 8018b18:	3301      	adds	r3, #1
 8018b1a:	2d00      	cmp	r5, #0
 8018b1c:	d1f6      	bne.n	8018b0c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 8018b1e:	bd30      	pop	{r4, r5, pc}
 8018b20:	4608      	mov	r0, r1
 8018b22:	e7fc      	b.n	8018b1e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

08018b24 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 8018b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018b26:	468c      	mov	ip, r1
 8018b28:	b08b      	sub	sp, #44	@ 0x2c
 8018b2a:	2100      	movs	r1, #0
 8018b2c:	ae01      	add	r6, sp, #4
 8018b2e:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8018b32:	211f      	movs	r1, #31
 8018b34:	fbb0 f7f3 	udiv	r7, r0, r3
 8018b38:	fb03 0517 	mls	r5, r3, r7, r0
 8018b3c:	4638      	mov	r0, r7
 8018b3e:	b2ec      	uxtb	r4, r5
 8018b40:	2d09      	cmp	r5, #9
 8018b42:	bfd4      	ite	le
 8018b44:	3430      	addle	r4, #48	@ 0x30
 8018b46:	3457      	addgt	r4, #87	@ 0x57
 8018b48:	b2e4      	uxtb	r4, r4
 8018b4a:	558c      	strb	r4, [r1, r6]
 8018b4c:	1e4c      	subs	r4, r1, #1
 8018b4e:	b92f      	cbnz	r7, 8018b5c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 8018b50:	4431      	add	r1, r6
 8018b52:	4660      	mov	r0, ip
 8018b54:	f7ff ffd5 	bl	8018b02 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8018b58:	b00b      	add	sp, #44	@ 0x2c
 8018b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018b5c:	4621      	mov	r1, r4
 8018b5e:	e7e9      	b.n	8018b34 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

08018b60 <_ZN8touchgfx7Unicode4itoaElPtti>:
 8018b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018b62:	4607      	mov	r7, r0
 8018b64:	b08b      	sub	sp, #44	@ 0x2c
 8018b66:	4608      	mov	r0, r1
 8018b68:	b341      	cbz	r1, 8018bbc <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8018b6a:	1e99      	subs	r1, r3, #2
 8018b6c:	2922      	cmp	r1, #34	@ 0x22
 8018b6e:	d825      	bhi.n	8018bbc <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8018b70:	2100      	movs	r1, #0
 8018b72:	463c      	mov	r4, r7
 8018b74:	261f      	movs	r6, #31
 8018b76:	f10d 0c04 	add.w	ip, sp, #4
 8018b7a:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8018b7e:	1e71      	subs	r1, r6, #1
 8018b80:	fb94 fef3 	sdiv	lr, r4, r3
 8018b84:	fb03 441e 	mls	r4, r3, lr, r4
 8018b88:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 8018b8c:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 8018b90:	b2ec      	uxtb	r4, r5
 8018b92:	2d09      	cmp	r5, #9
 8018b94:	bfd4      	ite	le
 8018b96:	3430      	addle	r4, #48	@ 0x30
 8018b98:	3457      	addgt	r4, #87	@ 0x57
 8018b9a:	b2e4      	uxtb	r4, r4
 8018b9c:	f80c 4006 	strb.w	r4, [ip, r6]
 8018ba0:	4674      	mov	r4, lr
 8018ba2:	b96c      	cbnz	r4, 8018bc0 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 8018ba4:	2f00      	cmp	r7, #0
 8018ba6:	da05      	bge.n	8018bb4 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 8018ba8:	ab0a      	add	r3, sp, #40	@ 0x28
 8018baa:	4419      	add	r1, r3
 8018bac:	232d      	movs	r3, #45	@ 0x2d
 8018bae:	f801 3c24 	strb.w	r3, [r1, #-36]
 8018bb2:	1eb1      	subs	r1, r6, #2
 8018bb4:	3101      	adds	r1, #1
 8018bb6:	4461      	add	r1, ip
 8018bb8:	f7ff ffa3 	bl	8018b02 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8018bbc:	b00b      	add	sp, #44	@ 0x2c
 8018bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018bc0:	460e      	mov	r6, r1
 8018bc2:	e7dc      	b.n	8018b7e <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

08018bc4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 8018bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018bc8:	b085      	sub	sp, #20
 8018bca:	4691      	mov	r9, r2
 8018bcc:	6802      	ldr	r2, [r0, #0]
 8018bce:	4688      	mov	r8, r1
 8018bd0:	461c      	mov	r4, r3
 8018bd2:	f89d 1040 	ldrb.w	r1, [sp, #64]	@ 0x40
 8018bd6:	f89d 3048 	ldrb.w	r3, [sp, #72]	@ 0x48
 8018bda:	4683      	mov	fp, r0
 8018bdc:	4610      	mov	r0, r2
 8018bde:	9103      	str	r1, [sp, #12]
 8018be0:	9302      	str	r3, [sp, #8]
 8018be2:	9201      	str	r2, [sp, #4]
 8018be4:	f7ff ff80 	bl	8018ae8 <_ZN8touchgfx7Unicode6strlenEPKt>
 8018be8:	f1b8 0f00 	cmp.w	r8, #0
 8018bec:	bf0c      	ite	eq
 8018bee:	4684      	moveq	ip, r0
 8018bf0:	f100 0c01 	addne.w	ip, r0, #1
 8018bf4:	f1b9 0f69 	cmp.w	r9, #105	@ 0x69
 8018bf8:	f89d 6038 	ldrb.w	r6, [sp, #56]	@ 0x38
 8018bfc:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8018bfe:	fa1f fc8c 	uxth.w	ip, ip
 8018c02:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8018c04:	f8dd a054 	ldr.w	sl, [sp, #84]	@ 0x54
 8018c08:	9903      	ldr	r1, [sp, #12]
 8018c0a:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8018c0e:	d041      	beq.n	8018c94 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8018c10:	d834      	bhi.n	8018c7c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 8018c12:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 8018c16:	d059      	beq.n	8018ccc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 8018c18:	f1b9 0f64 	cmp.w	r9, #100	@ 0x64
 8018c1c:	d03a      	beq.n	8018c94 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8018c1e:	f1b9 0f58 	cmp.w	r9, #88	@ 0x58
 8018c22:	d034      	beq.n	8018c8e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 8018c24:	2400      	movs	r4, #0
 8018c26:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 8018c2a:	3a01      	subs	r2, #1
 8018c2c:	b169      	cbz	r1, 8018c4a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8018c2e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8018c30:	458c      	cmp	ip, r1
 8018c32:	da09      	bge.n	8018c48 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8018c34:	eba1 010c 	sub.w	r1, r1, ip
 8018c38:	b289      	uxth	r1, r1
 8018c3a:	b933      	cbnz	r3, 8018c4a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8018c3c:	2e00      	cmp	r6, #0
 8018c3e:	d051      	beq.n	8018ce4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 8018c40:	2800      	cmp	r0, #0
 8018c42:	d04f      	beq.n	8018ce4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 8018c44:	440c      	add	r4, r1
 8018c46:	b2a4      	uxth	r4, r4
 8018c48:	2100      	movs	r1, #0
 8018c4a:	682b      	ldr	r3, [r5, #0]
 8018c4c:	4293      	cmp	r3, r2
 8018c4e:	da07      	bge.n	8018c60 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 8018c50:	f1b8 0f00 	cmp.w	r8, #0
 8018c54:	d004      	beq.n	8018c60 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 8018c56:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 8018c5a:	682b      	ldr	r3, [r5, #0]
 8018c5c:	3301      	adds	r3, #1
 8018c5e:	602b      	str	r3, [r5, #0]
 8018c60:	2730      	movs	r7, #48	@ 0x30
 8018c62:	2c00      	cmp	r4, #0
 8018c64:	d04e      	beq.n	8018d04 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8018c66:	682e      	ldr	r6, [r5, #0]
 8018c68:	3c01      	subs	r4, #1
 8018c6a:	42b2      	cmp	r2, r6
 8018c6c:	b2a4      	uxth	r4, r4
 8018c6e:	dd49      	ble.n	8018d04 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8018c70:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 8018c74:	682b      	ldr	r3, [r5, #0]
 8018c76:	3301      	adds	r3, #1
 8018c78:	602b      	str	r3, [r5, #0]
 8018c7a:	e7f2      	b.n	8018c62 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 8018c7c:	f1b9 0f73 	cmp.w	r9, #115	@ 0x73
 8018c80:	d01d      	beq.n	8018cbe <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 8018c82:	f1b9 0f78 	cmp.w	r9, #120	@ 0x78
 8018c86:	d002      	beq.n	8018c8e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 8018c88:	f1b9 0f6f 	cmp.w	r9, #111	@ 0x6f
 8018c8c:	e7c9      	b.n	8018c22 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 8018c8e:	4684      	mov	ip, r0
 8018c90:	f04f 0800 	mov.w	r8, #0
 8018c94:	2c00      	cmp	r4, #0
 8018c96:	d0c6      	beq.n	8018c26 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8018c98:	b947      	cbnz	r7, 8018cac <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 8018c9a:	2801      	cmp	r0, #1
 8018c9c:	d106      	bne.n	8018cac <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 8018c9e:	8814      	ldrh	r4, [r2, #0]
 8018ca0:	2c30      	cmp	r4, #48	@ 0x30
 8018ca2:	bf02      	ittt	eq
 8018ca4:	3202      	addeq	r2, #2
 8018ca6:	4638      	moveq	r0, r7
 8018ca8:	f8cb 2000 	streq.w	r2, [fp]
 8018cac:	45bc      	cmp	ip, r7
 8018cae:	da14      	bge.n	8018cda <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 8018cb0:	b2bf      	uxth	r7, r7
 8018cb2:	eba7 040c 	sub.w	r4, r7, ip
 8018cb6:	46bc      	mov	ip, r7
 8018cb8:	b2a4      	uxth	r4, r4
 8018cba:	2600      	movs	r6, #0
 8018cbc:	e7b3      	b.n	8018c26 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8018cbe:	4684      	mov	ip, r0
 8018cc0:	b16c      	cbz	r4, 8018cde <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 8018cc2:	42b8      	cmp	r0, r7
 8018cc4:	dd00      	ble.n	8018cc8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 8018cc6:	b2b8      	uxth	r0, r7
 8018cc8:	2400      	movs	r4, #0
 8018cca:	e003      	b.n	8018cd4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 8018ccc:	f04f 0c01 	mov.w	ip, #1
 8018cd0:	2400      	movs	r4, #0
 8018cd2:	4660      	mov	r0, ip
 8018cd4:	4626      	mov	r6, r4
 8018cd6:	46a0      	mov	r8, r4
 8018cd8:	e7a5      	b.n	8018c26 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8018cda:	2400      	movs	r4, #0
 8018cdc:	e7ed      	b.n	8018cba <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 8018cde:	4626      	mov	r6, r4
 8018ce0:	46a0      	mov	r8, r4
 8018ce2:	e7a0      	b.n	8018c26 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8018ce4:	2900      	cmp	r1, #0
 8018ce6:	d0b0      	beq.n	8018c4a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8018ce8:	2720      	movs	r7, #32
 8018cea:	682e      	ldr	r6, [r5, #0]
 8018cec:	2900      	cmp	r1, #0
 8018cee:	d0ac      	beq.n	8018c4a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8018cf0:	3901      	subs	r1, #1
 8018cf2:	4296      	cmp	r6, r2
 8018cf4:	b289      	uxth	r1, r1
 8018cf6:	daa7      	bge.n	8018c48 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8018cf8:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 8018cfc:	682b      	ldr	r3, [r5, #0]
 8018cfe:	3301      	adds	r3, #1
 8018d00:	602b      	str	r3, [r5, #0]
 8018d02:	e7f2      	b.n	8018cea <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 8018d04:	b188      	cbz	r0, 8018d2a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 8018d06:	682b      	ldr	r3, [r5, #0]
 8018d08:	3801      	subs	r0, #1
 8018d0a:	429a      	cmp	r2, r3
 8018d0c:	b280      	uxth	r0, r0
 8018d0e:	dd0c      	ble.n	8018d2a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 8018d10:	f8db 3000 	ldr.w	r3, [fp]
 8018d14:	1c9c      	adds	r4, r3, #2
 8018d16:	f8cb 4000 	str.w	r4, [fp]
 8018d1a:	881c      	ldrh	r4, [r3, #0]
 8018d1c:	682b      	ldr	r3, [r5, #0]
 8018d1e:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 8018d22:	682b      	ldr	r3, [r5, #0]
 8018d24:	3301      	adds	r3, #1
 8018d26:	602b      	str	r3, [r5, #0]
 8018d28:	e7ec      	b.n	8018d04 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8018d2a:	2620      	movs	r6, #32
 8018d2c:	b151      	cbz	r1, 8018d44 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8018d2e:	6828      	ldr	r0, [r5, #0]
 8018d30:	3901      	subs	r1, #1
 8018d32:	4282      	cmp	r2, r0
 8018d34:	b289      	uxth	r1, r1
 8018d36:	dd05      	ble.n	8018d44 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8018d38:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 8018d3c:	682b      	ldr	r3, [r5, #0]
 8018d3e:	3301      	adds	r3, #1
 8018d40:	602b      	str	r3, [r5, #0]
 8018d42:	e7f3      	b.n	8018d2c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 8018d44:	b005      	add	sp, #20
 8018d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018d4a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 8018d4a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018d4e:	2400      	movs	r4, #0
 8018d50:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 8018d54:	e9dd e609 	ldrd	lr, r6, [sp, #36]	@ 0x24
 8018d58:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	@ 0x2c
 8018d5c:	8014      	strh	r4, [r2, #0]
 8018d5e:	701c      	strb	r4, [r3, #0]
 8018d60:	f888 4000 	strb.w	r4, [r8]
 8018d64:	f88c 4000 	strb.w	r4, [ip]
 8018d68:	f88e 4000 	strb.w	r4, [lr]
 8018d6c:	703c      	strb	r4, [r7, #0]
 8018d6e:	6804      	ldr	r4, [r0, #0]
 8018d70:	b1a4      	cbz	r4, 8018d9c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 8018d72:	8824      	ldrh	r4, [r4, #0]
 8018d74:	f04f 0901 	mov.w	r9, #1
 8018d78:	b314      	cbz	r4, 8018dc0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8018d7a:	2c2b      	cmp	r4, #43	@ 0x2b
 8018d7c:	d001      	beq.n	8018d82 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 8018d7e:	2c20      	cmp	r4, #32
 8018d80:	d110      	bne.n	8018da4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 8018d82:	8014      	strh	r4, [r2, #0]
 8018d84:	6804      	ldr	r4, [r0, #0]
 8018d86:	b10c      	cbz	r4, 8018d8c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 8018d88:	3402      	adds	r4, #2
 8018d8a:	6004      	str	r4, [r0, #0]
 8018d8c:	680c      	ldr	r4, [r1, #0]
 8018d8e:	b10c      	cbz	r4, 8018d94 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 8018d90:	3401      	adds	r4, #1
 8018d92:	600c      	str	r4, [r1, #0]
 8018d94:	6804      	ldr	r4, [r0, #0]
 8018d96:	b17c      	cbz	r4, 8018db8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 8018d98:	8824      	ldrh	r4, [r4, #0]
 8018d9a:	e7ed      	b.n	8018d78 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8018d9c:	680c      	ldr	r4, [r1, #0]
 8018d9e:	b17c      	cbz	r4, 8018dc0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8018da0:	7824      	ldrb	r4, [r4, #0]
 8018da2:	e7e7      	b.n	8018d74 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 8018da4:	2c2d      	cmp	r4, #45	@ 0x2d
 8018da6:	d102      	bne.n	8018dae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 8018da8:	f883 9000 	strb.w	r9, [r3]
 8018dac:	e7ea      	b.n	8018d84 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8018dae:	2c23      	cmp	r4, #35	@ 0x23
 8018db0:	d107      	bne.n	8018dc2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 8018db2:	f888 9000 	strb.w	r9, [r8]
 8018db6:	e7e5      	b.n	8018d84 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8018db8:	680c      	ldr	r4, [r1, #0]
 8018dba:	b10c      	cbz	r4, 8018dc0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8018dbc:	7824      	ldrb	r4, [r4, #0]
 8018dbe:	e7db      	b.n	8018d78 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8018dc0:	2400      	movs	r4, #0
 8018dc2:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8018dc6:	2b09      	cmp	r3, #9
 8018dc8:	d901      	bls.n	8018dce <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 8018dca:	2c2a      	cmp	r4, #42	@ 0x2a
 8018dcc:	d122      	bne.n	8018e14 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8018dce:	2301      	movs	r3, #1
 8018dd0:	2c30      	cmp	r4, #48	@ 0x30
 8018dd2:	f88e 3000 	strb.w	r3, [lr]
 8018dd6:	d10d      	bne.n	8018df4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 8018dd8:	f88c 3000 	strb.w	r3, [ip]
 8018ddc:	6803      	ldr	r3, [r0, #0]
 8018dde:	b10b      	cbz	r3, 8018de4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 8018de0:	3302      	adds	r3, #2
 8018de2:	6003      	str	r3, [r0, #0]
 8018de4:	680b      	ldr	r3, [r1, #0]
 8018de6:	b10b      	cbz	r3, 8018dec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 8018de8:	3301      	adds	r3, #1
 8018dea:	600b      	str	r3, [r1, #0]
 8018dec:	6803      	ldr	r3, [r0, #0]
 8018dee:	2b00      	cmp	r3, #0
 8018df0:	d02f      	beq.n	8018e52 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 8018df2:	881c      	ldrh	r4, [r3, #0]
 8018df4:	2c2a      	cmp	r4, #42	@ 0x2a
 8018df6:	d135      	bne.n	8018e64 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 8018df8:	f04f 33ff 	mov.w	r3, #4294967295
 8018dfc:	6033      	str	r3, [r6, #0]
 8018dfe:	6803      	ldr	r3, [r0, #0]
 8018e00:	b10b      	cbz	r3, 8018e06 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 8018e02:	3302      	adds	r3, #2
 8018e04:	6003      	str	r3, [r0, #0]
 8018e06:	680b      	ldr	r3, [r1, #0]
 8018e08:	b10b      	cbz	r3, 8018e0e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 8018e0a:	3301      	adds	r3, #1
 8018e0c:	600b      	str	r3, [r1, #0]
 8018e0e:	6803      	ldr	r3, [r0, #0]
 8018e10:	b31b      	cbz	r3, 8018e5a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 8018e12:	881c      	ldrh	r4, [r3, #0]
 8018e14:	2c2e      	cmp	r4, #46	@ 0x2e
 8018e16:	d11a      	bne.n	8018e4e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8018e18:	2301      	movs	r3, #1
 8018e1a:	703b      	strb	r3, [r7, #0]
 8018e1c:	6803      	ldr	r3, [r0, #0]
 8018e1e:	b10b      	cbz	r3, 8018e24 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 8018e20:	3302      	adds	r3, #2
 8018e22:	6003      	str	r3, [r0, #0]
 8018e24:	680b      	ldr	r3, [r1, #0]
 8018e26:	b10b      	cbz	r3, 8018e2c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 8018e28:	3301      	adds	r3, #1
 8018e2a:	600b      	str	r3, [r1, #0]
 8018e2c:	6803      	ldr	r3, [r0, #0]
 8018e2e:	2b00      	cmp	r3, #0
 8018e30:	d036      	beq.n	8018ea0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 8018e32:	881b      	ldrh	r3, [r3, #0]
 8018e34:	2b2a      	cmp	r3, #42	@ 0x2a
 8018e36:	d137      	bne.n	8018ea8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 8018e38:	f04f 33ff 	mov.w	r3, #4294967295
 8018e3c:	602b      	str	r3, [r5, #0]
 8018e3e:	6803      	ldr	r3, [r0, #0]
 8018e40:	b10b      	cbz	r3, 8018e46 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 8018e42:	3302      	adds	r3, #2
 8018e44:	6003      	str	r3, [r0, #0]
 8018e46:	680b      	ldr	r3, [r1, #0]
 8018e48:	b10b      	cbz	r3, 8018e4e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8018e4a:	3301      	adds	r3, #1
 8018e4c:	600b      	str	r3, [r1, #0]
 8018e4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018e52:	680c      	ldr	r4, [r1, #0]
 8018e54:	b134      	cbz	r4, 8018e64 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 8018e56:	7824      	ldrb	r4, [r4, #0]
 8018e58:	e7cc      	b.n	8018df4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 8018e5a:	680b      	ldr	r3, [r1, #0]
 8018e5c:	2b00      	cmp	r3, #0
 8018e5e:	d0f6      	beq.n	8018e4e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8018e60:	781c      	ldrb	r4, [r3, #0]
 8018e62:	e7d7      	b.n	8018e14 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8018e64:	2300      	movs	r3, #0
 8018e66:	220a      	movs	r2, #10
 8018e68:	6033      	str	r3, [r6, #0]
 8018e6a:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8018e6e:	fa1f f38c 	uxth.w	r3, ip
 8018e72:	2b09      	cmp	r3, #9
 8018e74:	d8ce      	bhi.n	8018e14 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8018e76:	6833      	ldr	r3, [r6, #0]
 8018e78:	fb02 c303 	mla	r3, r2, r3, ip
 8018e7c:	6033      	str	r3, [r6, #0]
 8018e7e:	6803      	ldr	r3, [r0, #0]
 8018e80:	b10b      	cbz	r3, 8018e86 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 8018e82:	3302      	adds	r3, #2
 8018e84:	6003      	str	r3, [r0, #0]
 8018e86:	680b      	ldr	r3, [r1, #0]
 8018e88:	b10b      	cbz	r3, 8018e8e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 8018e8a:	3301      	adds	r3, #1
 8018e8c:	600b      	str	r3, [r1, #0]
 8018e8e:	6803      	ldr	r3, [r0, #0]
 8018e90:	b10b      	cbz	r3, 8018e96 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 8018e92:	881c      	ldrh	r4, [r3, #0]
 8018e94:	e7e9      	b.n	8018e6a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8018e96:	680c      	ldr	r4, [r1, #0]
 8018e98:	2c00      	cmp	r4, #0
 8018e9a:	d0e6      	beq.n	8018e6a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8018e9c:	7824      	ldrb	r4, [r4, #0]
 8018e9e:	e7e4      	b.n	8018e6a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8018ea0:	680b      	ldr	r3, [r1, #0]
 8018ea2:	b10b      	cbz	r3, 8018ea8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 8018ea4:	781b      	ldrb	r3, [r3, #0]
 8018ea6:	e7c5      	b.n	8018e34 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 8018ea8:	2200      	movs	r2, #0
 8018eaa:	240a      	movs	r4, #10
 8018eac:	602a      	str	r2, [r5, #0]
 8018eae:	3b30      	subs	r3, #48	@ 0x30
 8018eb0:	682a      	ldr	r2, [r5, #0]
 8018eb2:	b29e      	uxth	r6, r3
 8018eb4:	2e09      	cmp	r6, #9
 8018eb6:	d813      	bhi.n	8018ee0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 8018eb8:	fb04 3302 	mla	r3, r4, r2, r3
 8018ebc:	602b      	str	r3, [r5, #0]
 8018ebe:	6803      	ldr	r3, [r0, #0]
 8018ec0:	b10b      	cbz	r3, 8018ec6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 8018ec2:	3302      	adds	r3, #2
 8018ec4:	6003      	str	r3, [r0, #0]
 8018ec6:	680b      	ldr	r3, [r1, #0]
 8018ec8:	b10b      	cbz	r3, 8018ece <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 8018eca:	3301      	adds	r3, #1
 8018ecc:	600b      	str	r3, [r1, #0]
 8018ece:	6803      	ldr	r3, [r0, #0]
 8018ed0:	b10b      	cbz	r3, 8018ed6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 8018ed2:	881b      	ldrh	r3, [r3, #0]
 8018ed4:	e7eb      	b.n	8018eae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8018ed6:	680b      	ldr	r3, [r1, #0]
 8018ed8:	2b00      	cmp	r3, #0
 8018eda:	d0e8      	beq.n	8018eae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8018edc:	781b      	ldrb	r3, [r3, #0]
 8018ede:	e7e6      	b.n	8018eae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8018ee0:	2a06      	cmp	r2, #6
 8018ee2:	bfa8      	it	ge
 8018ee4:	2206      	movge	r2, #6
 8018ee6:	602a      	str	r2, [r5, #0]
 8018ee8:	e7b1      	b.n	8018e4e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

08018eea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 8018eea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018eee:	b0a3      	sub	sp, #140	@ 0x8c
 8018ef0:	2600      	movs	r6, #0
 8018ef2:	4607      	mov	r7, r0
 8018ef4:	4688      	mov	r8, r1
 8018ef6:	f10d 0944 	add.w	r9, sp, #68	@ 0x44
 8018efa:	4631      	mov	r1, r6
 8018efc:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 8018efe:	4648      	mov	r0, r9
 8018f00:	960d      	str	r6, [sp, #52]	@ 0x34
 8018f02:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8018f06:	2242      	movs	r2, #66	@ 0x42
 8018f08:	f00d f86c 	bl	8025fe4 <memset>
 8018f0c:	b15f      	cbz	r7, 8018f26 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 8018f0e:	f108 3aff 	add.w	sl, r8, #4294967295
 8018f12:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018f14:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018f16:	b152      	cbz	r2, 8018f2e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 8018f18:	8812      	ldrh	r2, [r2, #0]
 8018f1a:	b10a      	cbz	r2, 8018f20 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8018f1c:	459a      	cmp	sl, r3
 8018f1e:	dc2e      	bgt.n	8018f7e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 8018f20:	2200      	movs	r2, #0
 8018f22:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8018f26:	4638      	mov	r0, r7
 8018f28:	b023      	add	sp, #140	@ 0x8c
 8018f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f2e:	9a08      	ldr	r2, [sp, #32]
 8018f30:	2a00      	cmp	r2, #0
 8018f32:	d0f5      	beq.n	8018f20 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8018f34:	7812      	ldrb	r2, [r2, #0]
 8018f36:	e7f0      	b.n	8018f1a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 8018f38:	2d00      	cmp	r5, #0
 8018f3a:	d0ea      	beq.n	8018f12 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8018f3c:	782a      	ldrb	r2, [r5, #0]
 8018f3e:	b142      	cbz	r2, 8018f52 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 8018f40:	2a25      	cmp	r2, #37	@ 0x25
 8018f42:	d001      	beq.n	8018f48 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 8018f44:	459a      	cmp	sl, r3
 8018f46:	dc08      	bgt.n	8018f5a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 8018f48:	f1bb 0f00 	cmp.w	fp, #0
 8018f4c:	d121      	bne.n	8018f92 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 8018f4e:	2d00      	cmp	r5, #0
 8018f50:	d0df      	beq.n	8018f12 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8018f52:	782a      	ldrb	r2, [r5, #0]
 8018f54:	f04f 0b00 	mov.w	fp, #0
 8018f58:	e01d      	b.n	8018f96 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 8018f5a:	f1bb 0f00 	cmp.w	fp, #0
 8018f5e:	d077      	beq.n	8019050 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 8018f60:	f8bb 2000 	ldrh.w	r2, [fp]
 8018f64:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8018f68:	f1bb 0f00 	cmp.w	fp, #0
 8018f6c:	d002      	beq.n	8018f74 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 8018f6e:	f10b 0202 	add.w	r2, fp, #2
 8018f72:	9209      	str	r2, [sp, #36]	@ 0x24
 8018f74:	b10d      	cbz	r5, 8018f7a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 8018f76:	3501      	adds	r5, #1
 8018f78:	9508      	str	r5, [sp, #32]
 8018f7a:	3301      	adds	r3, #1
 8018f7c:	930d      	str	r3, [sp, #52]	@ 0x34
 8018f7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018f80:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 8018f84:	f1bb 0f00 	cmp.w	fp, #0
 8018f88:	d0d6      	beq.n	8018f38 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 8018f8a:	f8bb 2000 	ldrh.w	r2, [fp]
 8018f8e:	2a00      	cmp	r2, #0
 8018f90:	d1d6      	bne.n	8018f40 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 8018f92:	f8bb 2000 	ldrh.w	r2, [fp]
 8018f96:	2a00      	cmp	r2, #0
 8018f98:	d0bb      	beq.n	8018f12 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8018f9a:	459a      	cmp	sl, r3
 8018f9c:	ddb9      	ble.n	8018f12 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8018f9e:	f8ad 6032 	strh.w	r6, [sp, #50]	@ 0x32
 8018fa2:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8018fa6:	f88d 602e 	strb.w	r6, [sp, #46]	@ 0x2e
 8018faa:	f88d 602f 	strb.w	r6, [sp, #47]	@ 0x2f
 8018fae:	f88d 6030 	strb.w	r6, [sp, #48]	@ 0x30
 8018fb2:	960e      	str	r6, [sp, #56]	@ 0x38
 8018fb4:	f88d 6031 	strb.w	r6, [sp, #49]	@ 0x31
 8018fb8:	960f      	str	r6, [sp, #60]	@ 0x3c
 8018fba:	f1bb 0f00 	cmp.w	fp, #0
 8018fbe:	d002      	beq.n	8018fc6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 8018fc0:	f10b 0302 	add.w	r3, fp, #2
 8018fc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8018fc6:	b10d      	cbz	r5, 8018fcc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 8018fc8:	1c6b      	adds	r3, r5, #1
 8018fca:	9308      	str	r3, [sp, #32]
 8018fcc:	ab0f      	add	r3, sp, #60	@ 0x3c
 8018fce:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8018fd2:	a908      	add	r1, sp, #32
 8018fd4:	a809      	add	r0, sp, #36	@ 0x24
 8018fd6:	9305      	str	r3, [sp, #20]
 8018fd8:	f10d 0331 	add.w	r3, sp, #49	@ 0x31
 8018fdc:	9304      	str	r3, [sp, #16]
 8018fde:	ab0e      	add	r3, sp, #56	@ 0x38
 8018fe0:	9303      	str	r3, [sp, #12]
 8018fe2:	ab0c      	add	r3, sp, #48	@ 0x30
 8018fe4:	9302      	str	r3, [sp, #8]
 8018fe6:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 8018fea:	9301      	str	r3, [sp, #4]
 8018fec:	f10d 032e 	add.w	r3, sp, #46	@ 0x2e
 8018ff0:	9300      	str	r3, [sp, #0]
 8018ff2:	f10d 032d 	add.w	r3, sp, #45	@ 0x2d
 8018ff6:	f7ff fea8 	bl	8018d4a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 8018ffa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018ffc:	2b00      	cmp	r3, #0
 8018ffe:	bfbf      	itttt	lt
 8019000:	6823      	ldrlt	r3, [r4, #0]
 8019002:	3404      	addlt	r4, #4
 8019004:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8019008:	930e      	strlt	r3, [sp, #56]	@ 0x38
 801900a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801900c:	2b00      	cmp	r3, #0
 801900e:	bfbe      	ittt	lt
 8019010:	6823      	ldrlt	r3, [r4, #0]
 8019012:	3404      	addlt	r4, #4
 8019014:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8019018:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801901c:	bfb8      	it	lt
 801901e:	930f      	strlt	r3, [sp, #60]	@ 0x3c
 8019020:	b1d9      	cbz	r1, 801905a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 8019022:	880b      	ldrh	r3, [r1, #0]
 8019024:	2b69      	cmp	r3, #105	@ 0x69
 8019026:	d01f      	beq.n	8019068 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8019028:	d82f      	bhi.n	801908a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 801902a:	2b58      	cmp	r3, #88	@ 0x58
 801902c:	d01c      	beq.n	8019068 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801902e:	d818      	bhi.n	8019062 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 8019030:	2b25      	cmp	r3, #37	@ 0x25
 8019032:	d034      	beq.n	801909e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 8019034:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019036:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801903a:	f1bb 0f00 	cmp.w	fp, #0
 801903e:	f000 80b7 	beq.w	80191b0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 8019042:	f8bb 5000 	ldrh.w	r5, [fp]
 8019046:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801904a:	3301      	adds	r3, #1
 801904c:	930d      	str	r3, [sp, #52]	@ 0x34
 801904e:	e029      	b.n	80190a4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 8019050:	b10d      	cbz	r5, 8019056 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 8019052:	782a      	ldrb	r2, [r5, #0]
 8019054:	e786      	b.n	8018f64 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 8019056:	462a      	mov	r2, r5
 8019058:	e784      	b.n	8018f64 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801905a:	2a00      	cmp	r2, #0
 801905c:	d0ea      	beq.n	8019034 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801905e:	7813      	ldrb	r3, [r2, #0]
 8019060:	e7e0      	b.n	8019024 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 8019062:	3b63      	subs	r3, #99	@ 0x63
 8019064:	2b01      	cmp	r3, #1
 8019066:	d8e5      	bhi.n	8019034 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 8019068:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 801906c:	b329      	cbz	r1, 80190ba <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 801906e:	880b      	ldrh	r3, [r1, #0]
 8019070:	2b69      	cmp	r3, #105	@ 0x69
 8019072:	d063      	beq.n	801913c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 8019074:	d825      	bhi.n	80190c2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 8019076:	2b63      	cmp	r3, #99	@ 0x63
 8019078:	d038      	beq.n	80190ec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 801907a:	2b64      	cmp	r3, #100	@ 0x64
 801907c:	d05e      	beq.n	801913c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801907e:	2b58      	cmp	r3, #88	@ 0x58
 8019080:	d07a      	beq.n	8019178 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 8019082:	f8ad 6044 	strh.w	r6, [sp, #68]	@ 0x44
 8019086:	4625      	mov	r5, r4
 8019088:	e036      	b.n	80190f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801908a:	2b73      	cmp	r3, #115	@ 0x73
 801908c:	d0ec      	beq.n	8019068 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801908e:	d802      	bhi.n	8019096 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 8019090:	2b6f      	cmp	r3, #111	@ 0x6f
 8019092:	d1cf      	bne.n	8019034 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 8019094:	e7e8      	b.n	8019068 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8019096:	2b75      	cmp	r3, #117	@ 0x75
 8019098:	d0e6      	beq.n	8019068 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801909a:	2b78      	cmp	r3, #120	@ 0x78
 801909c:	e7f9      	b.n	8019092 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 801909e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80190a0:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 80190a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80190a6:	b10b      	cbz	r3, 80190ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 80190a8:	3302      	adds	r3, #2
 80190aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80190ac:	9b08      	ldr	r3, [sp, #32]
 80190ae:	2b00      	cmp	r3, #0
 80190b0:	f43f af2f 	beq.w	8018f12 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 80190b4:	3301      	adds	r3, #1
 80190b6:	9308      	str	r3, [sp, #32]
 80190b8:	e72b      	b.n	8018f12 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 80190ba:	2a00      	cmp	r2, #0
 80190bc:	d0e1      	beq.n	8019082 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 80190be:	7813      	ldrb	r3, [r2, #0]
 80190c0:	e7d6      	b.n	8019070 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 80190c2:	2b73      	cmp	r3, #115	@ 0x73
 80190c4:	d036      	beq.n	8019134 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 80190c6:	d807      	bhi.n	80190d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 80190c8:	2b6f      	cmp	r3, #111	@ 0x6f
 80190ca:	d1da      	bne.n	8019082 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 80190cc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80190ce:	1d25      	adds	r5, r4, #4
 80190d0:	2308      	movs	r3, #8
 80190d2:	eba8 0202 	sub.w	r2, r8, r2
 80190d6:	e049      	b.n	801916c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 80190d8:	2b75      	cmp	r3, #117	@ 0x75
 80190da:	d042      	beq.n	8019162 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 80190dc:	2b78      	cmp	r3, #120	@ 0x78
 80190de:	d1d0      	bne.n	8019082 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 80190e0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80190e2:	1d25      	adds	r5, r4, #4
 80190e4:	2310      	movs	r3, #16
 80190e6:	eba8 0202 	sub.w	r2, r8, r2
 80190ea:	e03f      	b.n	801916c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 80190ec:	6823      	ldr	r3, [r4, #0]
 80190ee:	1d25      	adds	r5, r4, #4
 80190f0:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 80190f4:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 80190f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80190fa:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 80190fe:	2b00      	cmp	r3, #0
 8019100:	d051      	beq.n	80191a6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 8019102:	881a      	ldrh	r2, [r3, #0]
 8019104:	a80d      	add	r0, sp, #52	@ 0x34
 8019106:	f89d 3031 	ldrb.w	r3, [sp, #49]	@ 0x31
 801910a:	462c      	mov	r4, r5
 801910c:	9005      	str	r0, [sp, #20]
 801910e:	f89d 002d 	ldrb.w	r0, [sp, #45]	@ 0x2d
 8019112:	9004      	str	r0, [sp, #16]
 8019114:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8019116:	9003      	str	r0, [sp, #12]
 8019118:	f89d 0030 	ldrb.w	r0, [sp, #48]	@ 0x30
 801911c:	9002      	str	r0, [sp, #8]
 801911e:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8019120:	9001      	str	r0, [sp, #4]
 8019122:	f89d 002f 	ldrb.w	r0, [sp, #47]	@ 0x2f
 8019126:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801912a:	9000      	str	r0, [sp, #0]
 801912c:	a810      	add	r0, sp, #64	@ 0x40
 801912e:	f7ff fd49 	bl	8018bc4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 8019132:	e7b7      	b.n	80190a4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 8019134:	1d25      	adds	r5, r4, #4
 8019136:	6823      	ldr	r3, [r4, #0]
 8019138:	9310      	str	r3, [sp, #64]	@ 0x40
 801913a:	e7dd      	b.n	80190f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801913c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801913e:	230a      	movs	r3, #10
 8019140:	4649      	mov	r1, r9
 8019142:	6820      	ldr	r0, [r4, #0]
 8019144:	eba8 0202 	sub.w	r2, r8, r2
 8019148:	1d25      	adds	r5, r4, #4
 801914a:	b292      	uxth	r2, r2
 801914c:	f7ff fd08 	bl	8018b60 <_ZN8touchgfx7Unicode4itoaElPtti>
 8019150:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8019154:	2b2d      	cmp	r3, #45	@ 0x2d
 8019156:	d1cf      	bne.n	80190f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8019158:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801915c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801915e:	3302      	adds	r3, #2
 8019160:	e7ea      	b.n	8019138 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 8019162:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019164:	1d25      	adds	r5, r4, #4
 8019166:	230a      	movs	r3, #10
 8019168:	eba8 0202 	sub.w	r2, r8, r2
 801916c:	b292      	uxth	r2, r2
 801916e:	4649      	mov	r1, r9
 8019170:	6820      	ldr	r0, [r4, #0]
 8019172:	f7ff fcd7 	bl	8018b24 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 8019176:	e7bf      	b.n	80190f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8019178:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801917a:	2310      	movs	r3, #16
 801917c:	4649      	mov	r1, r9
 801917e:	6820      	ldr	r0, [r4, #0]
 8019180:	eba8 0202 	sub.w	r2, r8, r2
 8019184:	1d25      	adds	r5, r4, #4
 8019186:	b292      	uxth	r2, r2
 8019188:	f7ff fccc 	bl	8018b24 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801918c:	f10d 0242 	add.w	r2, sp, #66	@ 0x42
 8019190:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 8019194:	2b00      	cmp	r3, #0
 8019196:	d0af      	beq.n	80190f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8019198:	f1a3 0161 	sub.w	r1, r3, #97	@ 0x61
 801919c:	2919      	cmp	r1, #25
 801919e:	d8f7      	bhi.n	8019190 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 80191a0:	3b20      	subs	r3, #32
 80191a2:	8013      	strh	r3, [r2, #0]
 80191a4:	e7f4      	b.n	8019190 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 80191a6:	9a08      	ldr	r2, [sp, #32]
 80191a8:	2a00      	cmp	r2, #0
 80191aa:	d0ab      	beq.n	8019104 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 80191ac:	7812      	ldrb	r2, [r2, #0]
 80191ae:	e7a9      	b.n	8019104 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 80191b0:	2d00      	cmp	r5, #0
 80191b2:	f43f af48 	beq.w	8019046 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 80191b6:	782d      	ldrb	r5, [r5, #0]
 80191b8:	e745      	b.n	8019046 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

080191ba <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 80191ba:	b507      	push	{r0, r1, r2, lr}
 80191bc:	9300      	str	r3, [sp, #0]
 80191be:	4613      	mov	r3, r2
 80191c0:	2200      	movs	r2, #0
 80191c2:	f7ff fe92 	bl	8018eea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 80191c6:	b003      	add	sp, #12
 80191c8:	f85d fb04 	ldr.w	pc, [sp], #4

080191cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 80191cc:	b40c      	push	{r2, r3}
 80191ce:	b507      	push	{r0, r1, r2, lr}
 80191d0:	ab04      	add	r3, sp, #16
 80191d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80191d6:	9301      	str	r3, [sp, #4]
 80191d8:	f7ff ffef 	bl	80191ba <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 80191dc:	b003      	add	sp, #12
 80191de:	f85d eb04 	ldr.w	lr, [sp], #4
 80191e2:	b002      	add	sp, #8
 80191e4:	4770      	bx	lr
	...

080191e8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf>:
 80191e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80191ec:	b0c3      	sub	sp, #268	@ 0x10c
 80191ee:	2600      	movs	r6, #0
 80191f0:	4607      	mov	r7, r0
 80191f2:	4689      	mov	r9, r1
 80191f4:	f10d 0840 	add.w	r8, sp, #64	@ 0x40
 80191f8:	4631      	mov	r1, r6
 80191fa:	f8dd a130 	ldr.w	sl, [sp, #304]	@ 0x130
 80191fe:	4640      	mov	r0, r8
 8019200:	960c      	str	r6, [sp, #48]	@ 0x30
 8019202:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8019206:	22c8      	movs	r2, #200	@ 0xc8
 8019208:	f00c feec 	bl	8025fe4 <memset>
 801920c:	b17f      	cbz	r7, 801922e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x46>
 801920e:	eddf 5aa3 	vldr	s11, [pc, #652]	@ 801949c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2b4>
 8019212:	f8df b294 	ldr.w	fp, [pc, #660]	@ 80194a8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2c0>
 8019216:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019218:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801921a:	b162      	cbz	r2, 8019236 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x4e>
 801921c:	8812      	ldrh	r2, [r2, #0]
 801921e:	b11a      	cbz	r2, 8019228 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x40>
 8019220:	f109 31ff 	add.w	r1, r9, #4294967295
 8019224:	4299      	cmp	r1, r3
 8019226:	dc26      	bgt.n	8019276 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x8e>
 8019228:	2200      	movs	r2, #0
 801922a:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801922e:	4638      	mov	r0, r7
 8019230:	b043      	add	sp, #268	@ 0x10c
 8019232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019236:	9a08      	ldr	r2, [sp, #32]
 8019238:	2a00      	cmp	r2, #0
 801923a:	d0f5      	beq.n	8019228 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x40>
 801923c:	7812      	ldrb	r2, [r2, #0]
 801923e:	e7ee      	b.n	801921e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x36>
 8019240:	2c00      	cmp	r4, #0
 8019242:	d0e8      	beq.n	8019216 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2e>
 8019244:	7822      	ldrb	r2, [r4, #0]
 8019246:	b132      	cbz	r2, 8019256 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x6e>
 8019248:	2a25      	cmp	r2, #37	@ 0x25
 801924a:	d001      	beq.n	8019250 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x68>
 801924c:	4299      	cmp	r1, r3
 801924e:	dc05      	bgt.n	801925c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x74>
 8019250:	b9cd      	cbnz	r5, 8019286 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x9e>
 8019252:	2c00      	cmp	r4, #0
 8019254:	d0df      	beq.n	8019216 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2e>
 8019256:	7822      	ldrb	r2, [r4, #0]
 8019258:	2500      	movs	r5, #0
 801925a:	e015      	b.n	8019288 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0xa0>
 801925c:	2d00      	cmp	r5, #0
 801925e:	d073      	beq.n	8019348 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x160>
 8019260:	882a      	ldrh	r2, [r5, #0]
 8019262:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8019266:	b10d      	cbz	r5, 801926c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x84>
 8019268:	3502      	adds	r5, #2
 801926a:	9509      	str	r5, [sp, #36]	@ 0x24
 801926c:	b10c      	cbz	r4, 8019272 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x8a>
 801926e:	3401      	adds	r4, #1
 8019270:	9408      	str	r4, [sp, #32]
 8019272:	3301      	adds	r3, #1
 8019274:	930c      	str	r3, [sp, #48]	@ 0x30
 8019276:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019278:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 801927c:	2d00      	cmp	r5, #0
 801927e:	d0df      	beq.n	8019240 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x58>
 8019280:	882a      	ldrh	r2, [r5, #0]
 8019282:	2a00      	cmp	r2, #0
 8019284:	d1e0      	bne.n	8019248 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x60>
 8019286:	882a      	ldrh	r2, [r5, #0]
 8019288:	2a00      	cmp	r2, #0
 801928a:	d0c4      	beq.n	8019216 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2e>
 801928c:	4299      	cmp	r1, r3
 801928e:	ddc2      	ble.n	8019216 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2e>
 8019290:	2300      	movs	r3, #0
 8019292:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8019296:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801929a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801929e:	f88d 302b 	strb.w	r3, [sp, #43]	@ 0x2b
 80192a2:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 80192a6:	930d      	str	r3, [sp, #52]	@ 0x34
 80192a8:	f88d 302d 	strb.w	r3, [sp, #45]	@ 0x2d
 80192ac:	930e      	str	r3, [sp, #56]	@ 0x38
 80192ae:	b10d      	cbz	r5, 80192b4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0xcc>
 80192b0:	1cab      	adds	r3, r5, #2
 80192b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80192b4:	b10c      	cbz	r4, 80192ba <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0xd2>
 80192b6:	1c63      	adds	r3, r4, #1
 80192b8:	9308      	str	r3, [sp, #32]
 80192ba:	ab0e      	add	r3, sp, #56	@ 0x38
 80192bc:	f10d 022e 	add.w	r2, sp, #46	@ 0x2e
 80192c0:	a908      	add	r1, sp, #32
 80192c2:	a809      	add	r0, sp, #36	@ 0x24
 80192c4:	9305      	str	r3, [sp, #20]
 80192c6:	f10d 032d 	add.w	r3, sp, #45	@ 0x2d
 80192ca:	9304      	str	r3, [sp, #16]
 80192cc:	ab0d      	add	r3, sp, #52	@ 0x34
 80192ce:	9303      	str	r3, [sp, #12]
 80192d0:	ab0b      	add	r3, sp, #44	@ 0x2c
 80192d2:	9302      	str	r3, [sp, #8]
 80192d4:	f10d 032b 	add.w	r3, sp, #43	@ 0x2b
 80192d8:	9301      	str	r3, [sp, #4]
 80192da:	f10d 032a 	add.w	r3, sp, #42	@ 0x2a
 80192de:	9300      	str	r3, [sp, #0]
 80192e0:	f10d 0329 	add.w	r3, sp, #41	@ 0x29
 80192e4:	f7ff fd31 	bl	8018d4a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 80192e8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80192ea:	2b00      	cmp	r3, #0
 80192ec:	da0b      	bge.n	8019306 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x11e>
 80192ee:	eb0a 0386 	add.w	r3, sl, r6, lsl #2
 80192f2:	3601      	adds	r6, #1
 80192f4:	edd3 7a00 	vldr	s15, [r3]
 80192f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80192fc:	ee17 3a90 	vmov	r3, s15
 8019300:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019304:	930d      	str	r3, [sp, #52]	@ 0x34
 8019306:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019308:	2b00      	cmp	r3, #0
 801930a:	da0b      	bge.n	8019324 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x13c>
 801930c:	eb0a 0386 	add.w	r3, sl, r6, lsl #2
 8019310:	3601      	adds	r6, #1
 8019312:	edd3 7a00 	vldr	s15, [r3]
 8019316:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801931a:	ee17 3a90 	vmov	r3, s15
 801931e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019322:	930e      	str	r3, [sp, #56]	@ 0x38
 8019324:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019326:	b1a3      	cbz	r3, 8019352 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x16a>
 8019328:	881a      	ldrh	r2, [r3, #0]
 801932a:	2a25      	cmp	r2, #37	@ 0x25
 801932c:	d016      	beq.n	801935c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x174>
 801932e:	2a66      	cmp	r2, #102	@ 0x66
 8019330:	d01a      	beq.n	8019368 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x180>
 8019332:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019334:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8019338:	2d00      	cmp	r5, #0
 801933a:	f000 80fd 	beq.w	8019538 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x350>
 801933e:	882c      	ldrh	r4, [r5, #0]
 8019340:	f827 4013 	strh.w	r4, [r7, r3, lsl #1]
 8019344:	3301      	adds	r3, #1
 8019346:	e00d      	b.n	8019364 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x17c>
 8019348:	b10c      	cbz	r4, 801934e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x166>
 801934a:	7822      	ldrb	r2, [r4, #0]
 801934c:	e789      	b.n	8019262 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x7a>
 801934e:	4622      	mov	r2, r4
 8019350:	e787      	b.n	8019262 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x7a>
 8019352:	9b08      	ldr	r3, [sp, #32]
 8019354:	2b00      	cmp	r3, #0
 8019356:	d0ec      	beq.n	8019332 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x14a>
 8019358:	781a      	ldrb	r2, [r3, #0]
 801935a:	e7e6      	b.n	801932a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x142>
 801935c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801935e:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8019362:	3302      	adds	r3, #2
 8019364:	930c      	str	r3, [sp, #48]	@ 0x30
 8019366:	e040      	b.n	80193ea <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x202>
 8019368:	eb0a 0386 	add.w	r3, sl, r6, lsl #2
 801936c:	f8cd 803c 	str.w	r8, [sp, #60]	@ 0x3c
 8019370:	3601      	adds	r6, #1
 8019372:	edd3 7a00 	vldr	s15, [r3]
 8019376:	f89d 302d 	ldrb.w	r3, [sp, #45]	@ 0x2d
 801937a:	b923      	cbnz	r3, 8019386 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x19e>
 801937c:	2301      	movs	r3, #1
 801937e:	f88d 302d 	strb.w	r3, [sp, #45]	@ 0x2d
 8019382:	2306      	movs	r3, #6
 8019384:	930e      	str	r3, [sp, #56]	@ 0x38
 8019386:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801938a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801938e:	bf42      	ittt	mi
 8019390:	eef1 7a67 	vnegmi.f32	s15, s15
 8019394:	232d      	movmi	r3, #45	@ 0x2d
 8019396:	f8ad 302e 	strhmi.w	r3, [sp, #46]	@ 0x2e
 801939a:	eeb0 7ae7 	vabs.f32	s14, s15
 801939e:	eeb4 7a65 	vcmp.f32	s14, s11
 80193a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80193a6:	dd2b      	ble.n	8019400 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x218>
 80193a8:	2366      	movs	r3, #102	@ 0x66
 80193aa:	f8cd b040 	str.w	fp, [sp, #64]	@ 0x40
 80193ae:	9311      	str	r3, [sp, #68]	@ 0x44
 80193b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80193b2:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 80193b6:	2b00      	cmp	r3, #0
 80193b8:	f000 80b8 	beq.w	801952c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x344>
 80193bc:	881a      	ldrh	r2, [r3, #0]
 80193be:	a80c      	add	r0, sp, #48	@ 0x30
 80193c0:	f89d 302d 	ldrb.w	r3, [sp, #45]	@ 0x2d
 80193c4:	9005      	str	r0, [sp, #20]
 80193c6:	f89d 0029 	ldrb.w	r0, [sp, #41]	@ 0x29
 80193ca:	9004      	str	r0, [sp, #16]
 80193cc:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80193ce:	9003      	str	r0, [sp, #12]
 80193d0:	f89d 002c 	ldrb.w	r0, [sp, #44]	@ 0x2c
 80193d4:	9002      	str	r0, [sp, #8]
 80193d6:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80193d8:	9001      	str	r0, [sp, #4]
 80193da:	f89d 002b 	ldrb.w	r0, [sp, #43]	@ 0x2b
 80193de:	e9cd 9706 	strd	r9, r7, [sp, #24]
 80193e2:	9000      	str	r0, [sp, #0]
 80193e4:	a80f      	add	r0, sp, #60	@ 0x3c
 80193e6:	f7ff fbed 	bl	8018bc4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 80193ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80193ec:	b10b      	cbz	r3, 80193f2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x20a>
 80193ee:	3302      	adds	r3, #2
 80193f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80193f2:	9b08      	ldr	r3, [sp, #32]
 80193f4:	2b00      	cmp	r3, #0
 80193f6:	f43f af0e 	beq.w	8019216 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2e>
 80193fa:	3301      	adds	r3, #1
 80193fc:	9308      	str	r3, [sp, #32]
 80193fe:	e70a      	b.n	8019216 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2e>
 8019400:	eef4 7a67 	vcmp.f32	s15, s15
 8019404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019408:	d60b      	bvs.n	8019422 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x23a>
 801940a:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 801940e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8019410:	2300      	movs	r3, #0
 8019412:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 80194a0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2b8>
 8019416:	4283      	cmp	r3, r0
 8019418:	da07      	bge.n	801942a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x242>
 801941a:	ee87 7a06 	vdiv.f32	s14, s14, s12
 801941e:	3301      	adds	r3, #1
 8019420:	e7f9      	b.n	8019416 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x22e>
 8019422:	4b20      	ldr	r3, [pc, #128]	@ (80194a4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2bc>)
 8019424:	9310      	str	r3, [sp, #64]	@ 0x40
 8019426:	236e      	movs	r3, #110	@ 0x6e
 8019428:	e7c1      	b.n	80193ae <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1c6>
 801942a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801942e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8019432:	eeb0 7a67 	vmov.f32	s14, s15
 8019436:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801943a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801943e:	da27      	bge.n	8019490 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a8>
 8019440:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8019442:	eeb6 5a00 	vmov.f32	s10, #96	@ 0x3f000000  0.5
 8019446:	2100      	movs	r1, #0
 8019448:	eba9 0202 	sub.w	r2, r9, r2
 801944c:	eef4 6ac5 	vcmpe.f32	s13, s10
 8019450:	b28c      	uxth	r4, r1
 8019452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019456:	db2a      	blt.n	80194ae <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2c6>
 8019458:	1a53      	subs	r3, r2, r1
 801945a:	2b00      	cmp	r3, #0
 801945c:	dd27      	ble.n	80194ae <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2c6>
 801945e:	2963      	cmp	r1, #99	@ 0x63
 8019460:	d024      	beq.n	80194ac <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2c4>
 8019462:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8019466:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801946a:	ee17 3a10 	vmov	r3, s14
 801946e:	2b09      	cmp	r3, #9
 8019470:	bfa8      	it	ge
 8019472:	2309      	movge	r3, #9
 8019474:	ee07 3a10 	vmov	s14, r3
 8019478:	f103 0430 	add.w	r4, r3, #48	@ 0x30
 801947c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019480:	f828 4011 	strh.w	r4, [r8, r1, lsl #1]
 8019484:	3101      	adds	r1, #1
 8019486:	eee7 7a66 	vfms.f32	s15, s14, s13
 801948a:	eec6 6a86 	vdiv.f32	s13, s13, s12
 801948e:	e7dd      	b.n	801944c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x264>
 8019490:	ee66 6a86 	vmul.f32	s13, s13, s12
 8019494:	ee87 7a06 	vdiv.f32	s14, s14, s12
 8019498:	e7cd      	b.n	8019436 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x24e>
 801949a:	bf00      	nop
 801949c:	7f7fffff 	.word	0x7f7fffff
 80194a0:	3f000002 	.word	0x3f000002
 80194a4:	0061006e 	.word	0x0061006e
 80194a8:	006e0069 	.word	0x006e0069
 80194ac:	460c      	mov	r4, r1
 80194ae:	2a63      	cmp	r2, #99	@ 0x63
 80194b0:	bfd4      	ite	le
 80194b2:	ebc4 0202 	rsble	r2, r4, r2
 80194b6:	f1c4 0263 	rsbgt	r2, r4, #99	@ 0x63
 80194ba:	2a00      	cmp	r2, #0
 80194bc:	dd31      	ble.n	8019522 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x33a>
 80194be:	4603      	mov	r3, r0
 80194c0:	2501      	movs	r5, #1
 80194c2:	210a      	movs	r1, #10
 80194c4:	2b00      	cmp	r3, #0
 80194c6:	dd0d      	ble.n	80194e4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2fc>
 80194c8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80194cc:	3b01      	subs	r3, #1
 80194ce:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80194d2:	ee17 ca10 	vmov	ip, s14
 80194d6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80194da:	fb01 c505 	mla	r5, r1, r5, ip
 80194de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80194e2:	e7ef      	b.n	80194c4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2dc>
 80194e4:	2800      	cmp	r0, #0
 80194e6:	f100 33ff 	add.w	r3, r0, #4294967295
 80194ea:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80194ee:	bfac      	ite	ge
 80194f0:	1a18      	subge	r0, r3, r0
 80194f2:	4618      	movlt	r0, r3
 80194f4:	b292      	uxth	r2, r2
 80194f6:	230a      	movs	r3, #10
 80194f8:	900e      	str	r0, [sp, #56]	@ 0x38
 80194fa:	eb08 0104 	add.w	r1, r8, r4
 80194fe:	4628      	mov	r0, r5
 8019500:	f7ff fb2e 	bl	8018b60 <_ZN8touchgfx7Unicode4itoaElPtti>
 8019504:	2d01      	cmp	r5, #1
 8019506:	dc0a      	bgt.n	801951e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x336>
 8019508:	f89d 302a 	ldrb.w	r3, [sp, #42]	@ 0x2a
 801950c:	2b00      	cmp	r3, #0
 801950e:	bf0c      	ite	eq
 8019510:	2300      	moveq	r3, #0
 8019512:	232e      	movne	r3, #46	@ 0x2e
 8019514:	aa42      	add	r2, sp, #264	@ 0x108
 8019516:	4414      	add	r4, r2
 8019518:	f824 3cc8 	strh.w	r3, [r4, #-200]
 801951c:	e748      	b.n	80193b0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1c8>
 801951e:	232e      	movs	r3, #46	@ 0x2e
 8019520:	e7f8      	b.n	8019514 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x32c>
 8019522:	ab42      	add	r3, sp, #264	@ 0x108
 8019524:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 8019528:	2300      	movs	r3, #0
 801952a:	e7f5      	b.n	8019518 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x330>
 801952c:	9a08      	ldr	r2, [sp, #32]
 801952e:	2a00      	cmp	r2, #0
 8019530:	f43f af45 	beq.w	80193be <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1d6>
 8019534:	7812      	ldrb	r2, [r2, #0]
 8019536:	e742      	b.n	80193be <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1d6>
 8019538:	2c00      	cmp	r4, #0
 801953a:	f43f af01 	beq.w	8019340 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x158>
 801953e:	7824      	ldrb	r4, [r4, #0]
 8019540:	e6fe      	b.n	8019340 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x158>
 8019542:	bf00      	nop

08019544 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>:
 8019544:	b507      	push	{r0, r1, r2, lr}
 8019546:	9300      	str	r3, [sp, #0]
 8019548:	4613      	mov	r3, r2
 801954a:	2200      	movs	r2, #0
 801954c:	f7ff fe4c 	bl	80191e8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf>
 8019550:	b003      	add	sp, #12
 8019552:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08019558 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8019558:	4b01      	ldr	r3, [pc, #4]	@ (8019560 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801955a:	6018      	str	r0, [r3, #0]
 801955c:	4770      	bx	lr
 801955e:	bf00      	nop
 8019560:	20027bfc 	.word	0x20027bfc

08019564 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8019564:	4b06      	ldr	r3, [pc, #24]	@ (8019580 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 8019566:	881a      	ldrh	r2, [r3, #0]
 8019568:	4282      	cmp	r2, r0
 801956a:	d807      	bhi.n	801957c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801956c:	4b05      	ldr	r3, [pc, #20]	@ (8019584 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801956e:	881b      	ldrh	r3, [r3, #0]
 8019570:	4413      	add	r3, r2
 8019572:	4298      	cmp	r0, r3
 8019574:	bfac      	ite	ge
 8019576:	2000      	movge	r0, #0
 8019578:	2001      	movlt	r0, #1
 801957a:	4770      	bx	lr
 801957c:	2000      	movs	r0, #0
 801957e:	4770      	bx	lr
 8019580:	20027c1c 	.word	0x20027c1c
 8019584:	20027c20 	.word	0x20027c20

08019588 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8019588:	b508      	push	{r3, lr}
 801958a:	4601      	mov	r1, r0
 801958c:	f7ff ffea 	bl	8019564 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8019590:	b118      	cbz	r0, 801959a <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 8019592:	4b02      	ldr	r3, [pc, #8]	@ (801959c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8019594:	681b      	ldr	r3, [r3, #0]
 8019596:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801959a:	bd08      	pop	{r3, pc}
 801959c:	20027c00 	.word	0x20027c00

080195a0 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 80195a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80195a2:	4c24      	ldr	r4, [pc, #144]	@ (8019634 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 80195a4:	6823      	ldr	r3, [r4, #0]
 80195a6:	2b00      	cmp	r3, #0
 80195a8:	d042      	beq.n	8019630 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 80195aa:	4a23      	ldr	r2, [pc, #140]	@ (8019638 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 80195ac:	4d23      	ldr	r5, [pc, #140]	@ (801963c <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 80195ae:	8811      	ldrh	r1, [r2, #0]
 80195b0:	f8b5 c000 	ldrh.w	ip, [r5]
 80195b4:	4822      	ldr	r0, [pc, #136]	@ (8019640 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 80195b6:	4461      	add	r1, ip
 80195b8:	1c4a      	adds	r2, r1, #1
 80195ba:	008f      	lsls	r7, r1, #2
 80195bc:	f022 0201 	bic.w	r2, r2, #1
 80195c0:	19de      	adds	r6, r3, r7
 80195c2:	0412      	lsls	r2, r2, #16
 80195c4:	6006      	str	r6, [r0, #0]
 80195c6:	4e1f      	ldr	r6, [pc, #124]	@ (8019644 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 80195c8:	0c12      	lsrs	r2, r2, #16
 80195ca:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 80195ce:	19da      	adds	r2, r3, r7
 80195d0:	6032      	str	r2, [r6, #0]
 80195d2:	220e      	movs	r2, #14
 80195d4:	fb02 f20c 	mul.w	r2, r2, ip
 80195d8:	3203      	adds	r2, #3
 80195da:	f022 0203 	bic.w	r2, r2, #3
 80195de:	443a      	add	r2, r7
 80195e0:	4f19      	ldr	r7, [pc, #100]	@ (8019648 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 80195e2:	4413      	add	r3, r2
 80195e4:	603b      	str	r3, [r7, #0]
 80195e6:	2300      	movs	r3, #0
 80195e8:	4f18      	ldr	r7, [pc, #96]	@ (801964c <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 80195ea:	469c      	mov	ip, r3
 80195ec:	803b      	strh	r3, [r7, #0]
 80195ee:	4f18      	ldr	r7, [pc, #96]	@ (8019650 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 80195f0:	683f      	ldr	r7, [r7, #0]
 80195f2:	1aba      	subs	r2, r7, r2
 80195f4:	4f17      	ldr	r7, [pc, #92]	@ (8019654 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 80195f6:	603a      	str	r2, [r7, #0]
 80195f8:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 80195fc:	4a16      	ldr	r2, [pc, #88]	@ (8019658 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 80195fe:	8013      	strh	r3, [r2, #0]
 8019600:	428b      	cmp	r3, r1
 8019602:	d10d      	bne.n	8019620 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 8019604:	882d      	ldrh	r5, [r5, #0]
 8019606:	2300      	movs	r3, #0
 8019608:	6830      	ldr	r0, [r6, #0]
 801960a:	240e      	movs	r4, #14
 801960c:	429d      	cmp	r5, r3
 801960e:	d90f      	bls.n	8019630 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8019610:	fb04 0203 	mla	r2, r4, r3, r0
 8019614:	3301      	adds	r3, #1
 8019616:	7b11      	ldrb	r1, [r2, #12]
 8019618:	f36f 1145 	bfc	r1, #5, #1
 801961c:	7311      	strb	r1, [r2, #12]
 801961e:	e7f5      	b.n	801960c <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 8019620:	6822      	ldr	r2, [r4, #0]
 8019622:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8019626:	6802      	ldr	r2, [r0, #0]
 8019628:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801962c:	3301      	adds	r3, #1
 801962e:	e7e7      	b.n	8019600 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 8019630:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019632:	bf00      	nop
 8019634:	20027c00 	.word	0x20027c00
 8019638:	20027c1c 	.word	0x20027c1c
 801963c:	20027c20 	.word	0x20027c20
 8019640:	20027c14 	.word	0x20027c14
 8019644:	20027c04 	.word	0x20027c04
 8019648:	20027c0c 	.word	0x20027c0c
 801964c:	20027c1e 	.word	0x20027c1e
 8019650:	20027c08 	.word	0x20027c08
 8019654:	20027c18 	.word	0x20027c18
 8019658:	20027c10 	.word	0x20027c10

0801965c <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801965c:	4b06      	ldr	r3, [pc, #24]	@ (8019678 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801965e:	681b      	ldr	r3, [r3, #0]
 8019660:	b943      	cbnz	r3, 8019674 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8019662:	b139      	cbz	r1, 8019674 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8019664:	4b05      	ldr	r3, [pc, #20]	@ (801967c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 8019666:	801a      	strh	r2, [r3, #0]
 8019668:	4b05      	ldr	r3, [pc, #20]	@ (8019680 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801966a:	6019      	str	r1, [r3, #0]
 801966c:	4b05      	ldr	r3, [pc, #20]	@ (8019684 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801966e:	6018      	str	r0, [r3, #0]
 8019670:	f7ff bf96 	b.w	80195a0 <_ZN8touchgfx6Bitmap10clearCacheEv>
 8019674:	4770      	bx	lr
 8019676:	bf00      	nop
 8019678:	20027c0c 	.word	0x20027c0c
 801967c:	20027c20 	.word	0x20027c20
 8019680:	20027c08 	.word	0x20027c08
 8019684:	20027c00 	.word	0x20027c00

08019688 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8019688:	b470      	push	{r4, r5, r6}
 801968a:	4c07      	ldr	r4, [pc, #28]	@ (80196a8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801968c:	4605      	mov	r5, r0
 801968e:	4610      	mov	r0, r2
 8019690:	9a03      	ldr	r2, [sp, #12]
 8019692:	6826      	ldr	r6, [r4, #0]
 8019694:	b936      	cbnz	r6, 80196a4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8019696:	6025      	str	r5, [r4, #0]
 8019698:	4c04      	ldr	r4, [pc, #16]	@ (80196ac <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801969a:	8021      	strh	r1, [r4, #0]
 801969c:	4619      	mov	r1, r3
 801969e:	bc70      	pop	{r4, r5, r6}
 80196a0:	f7ff bfdc 	b.w	801965c <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 80196a4:	bc70      	pop	{r4, r5, r6}
 80196a6:	4770      	bx	lr
 80196a8:	20027c24 	.word	0x20027c24
 80196ac:	20027c1c 	.word	0x20027c1c

080196b0 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 80196b0:	4a12      	ldr	r2, [pc, #72]	@ (80196fc <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 80196b2:	8803      	ldrh	r3, [r0, #0]
 80196b4:	8812      	ldrh	r2, [r2, #0]
 80196b6:	4293      	cmp	r3, r2
 80196b8:	d207      	bcs.n	80196ca <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 80196ba:	4a11      	ldr	r2, [pc, #68]	@ (8019700 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 80196bc:	2114      	movs	r1, #20
 80196be:	6812      	ldr	r2, [r2, #0]
 80196c0:	fb01 2303 	mla	r3, r1, r3, r2
 80196c4:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 80196c8:	4770      	bx	lr
 80196ca:	490e      	ldr	r1, [pc, #56]	@ (8019704 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 80196cc:	8809      	ldrh	r1, [r1, #0]
 80196ce:	4411      	add	r1, r2
 80196d0:	428b      	cmp	r3, r1
 80196d2:	da04      	bge.n	80196de <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 80196d4:	1a9b      	subs	r3, r3, r2
 80196d6:	4a0c      	ldr	r2, [pc, #48]	@ (8019708 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 80196d8:	210e      	movs	r1, #14
 80196da:	6812      	ldr	r2, [r2, #0]
 80196dc:	e7f0      	b.n	80196c0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 80196de:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80196e2:	4293      	cmp	r3, r2
 80196e4:	d108      	bne.n	80196f8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 80196e6:	4b09      	ldr	r3, [pc, #36]	@ (801970c <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 80196e8:	781b      	ldrb	r3, [r3, #0]
 80196ea:	b91b      	cbnz	r3, 80196f4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 80196ec:	4b08      	ldr	r3, [pc, #32]	@ (8019710 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 80196ee:	f9b3 0000 	ldrsh.w	r0, [r3]
 80196f2:	4770      	bx	lr
 80196f4:	4b07      	ldr	r3, [pc, #28]	@ (8019714 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 80196f6:	e7fa      	b.n	80196ee <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 80196f8:	2000      	movs	r0, #0
 80196fa:	4770      	bx	lr
 80196fc:	20027c1c 	.word	0x20027c1c
 8019700:	20027c24 	.word	0x20027c24
 8019704:	20027c20 	.word	0x20027c20
 8019708:	20027c04 	.word	0x20027c04
 801970c:	20027b8c 	.word	0x20027b8c
 8019710:	20027b8e 	.word	0x20027b8e
 8019714:	20027b90 	.word	0x20027b90

08019718 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8019718:	4a12      	ldr	r2, [pc, #72]	@ (8019764 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801971a:	8803      	ldrh	r3, [r0, #0]
 801971c:	8812      	ldrh	r2, [r2, #0]
 801971e:	4293      	cmp	r3, r2
 8019720:	d207      	bcs.n	8019732 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 8019722:	4a11      	ldr	r2, [pc, #68]	@ (8019768 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 8019724:	2114      	movs	r1, #20
 8019726:	6812      	ldr	r2, [r2, #0]
 8019728:	fb01 2303 	mla	r3, r1, r3, r2
 801972c:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 8019730:	4770      	bx	lr
 8019732:	490e      	ldr	r1, [pc, #56]	@ (801976c <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8019734:	8809      	ldrh	r1, [r1, #0]
 8019736:	4411      	add	r1, r2
 8019738:	428b      	cmp	r3, r1
 801973a:	da04      	bge.n	8019746 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801973c:	1a9b      	subs	r3, r3, r2
 801973e:	4a0c      	ldr	r2, [pc, #48]	@ (8019770 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8019740:	210e      	movs	r1, #14
 8019742:	6812      	ldr	r2, [r2, #0]
 8019744:	e7f0      	b.n	8019728 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 8019746:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801974a:	4293      	cmp	r3, r2
 801974c:	d108      	bne.n	8019760 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801974e:	4b09      	ldr	r3, [pc, #36]	@ (8019774 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8019750:	781b      	ldrb	r3, [r3, #0]
 8019752:	b91b      	cbnz	r3, 801975c <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 8019754:	4b08      	ldr	r3, [pc, #32]	@ (8019778 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8019756:	f9b3 0000 	ldrsh.w	r0, [r3]
 801975a:	4770      	bx	lr
 801975c:	4b07      	ldr	r3, [pc, #28]	@ (801977c <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801975e:	e7fa      	b.n	8019756 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 8019760:	2000      	movs	r0, #0
 8019762:	4770      	bx	lr
 8019764:	20027c1c 	.word	0x20027c1c
 8019768:	20027c24 	.word	0x20027c24
 801976c:	20027c20 	.word	0x20027c20
 8019770:	20027c04 	.word	0x20027c04
 8019774:	20027b8c 	.word	0x20027b8c
 8019778:	20027b90 	.word	0x20027b90
 801977c:	20027b8e 	.word	0x20027b8e

08019780 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8019780:	4a1f      	ldr	r2, [pc, #124]	@ (8019800 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 8019782:	b510      	push	{r4, lr}
 8019784:	880b      	ldrh	r3, [r1, #0]
 8019786:	8812      	ldrh	r2, [r2, #0]
 8019788:	4293      	cmp	r3, r2
 801978a:	d213      	bcs.n	80197b4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 801978c:	4a1d      	ldr	r2, [pc, #116]	@ (8019804 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 801978e:	2114      	movs	r1, #20
 8019790:	6812      	ldr	r2, [r2, #0]
 8019792:	fb01 2303 	mla	r3, r1, r3, r2
 8019796:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801979a:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801979e:	8a1a      	ldrh	r2, [r3, #16]
 80197a0:	8a5b      	ldrh	r3, [r3, #18]
 80197a2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80197a6:	8004      	strh	r4, [r0, #0]
 80197a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80197ac:	8041      	strh	r1, [r0, #2]
 80197ae:	8082      	strh	r2, [r0, #4]
 80197b0:	80c3      	strh	r3, [r0, #6]
 80197b2:	e00e      	b.n	80197d2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 80197b4:	4914      	ldr	r1, [pc, #80]	@ (8019808 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 80197b6:	8809      	ldrh	r1, [r1, #0]
 80197b8:	4411      	add	r1, r2
 80197ba:	428b      	cmp	r3, r1
 80197bc:	da0a      	bge.n	80197d4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 80197be:	1a9b      	subs	r3, r3, r2
 80197c0:	4a12      	ldr	r2, [pc, #72]	@ (801980c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 80197c2:	210e      	movs	r1, #14
 80197c4:	6812      	ldr	r2, [r2, #0]
 80197c6:	fb01 2303 	mla	r3, r1, r3, r2
 80197ca:	681a      	ldr	r2, [r3, #0]
 80197cc:	6002      	str	r2, [r0, #0]
 80197ce:	685a      	ldr	r2, [r3, #4]
 80197d0:	6042      	str	r2, [r0, #4]
 80197d2:	bd10      	pop	{r4, pc}
 80197d4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80197d8:	4293      	cmp	r3, r2
 80197da:	d10b      	bne.n	80197f4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 80197dc:	4b0c      	ldr	r3, [pc, #48]	@ (8019810 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 80197de:	f9b3 1000 	ldrsh.w	r1, [r3]
 80197e2:	4b0c      	ldr	r3, [pc, #48]	@ (8019814 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 80197e4:	8081      	strh	r1, [r0, #4]
 80197e6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80197ea:	2300      	movs	r3, #0
 80197ec:	80c2      	strh	r2, [r0, #6]
 80197ee:	8003      	strh	r3, [r0, #0]
 80197f0:	8043      	strh	r3, [r0, #2]
 80197f2:	e7ee      	b.n	80197d2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 80197f4:	2300      	movs	r3, #0
 80197f6:	8003      	strh	r3, [r0, #0]
 80197f8:	8043      	strh	r3, [r0, #2]
 80197fa:	8083      	strh	r3, [r0, #4]
 80197fc:	e7d8      	b.n	80197b0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 80197fe:	bf00      	nop
 8019800:	20027c1c 	.word	0x20027c1c
 8019804:	20027c24 	.word	0x20027c24
 8019808:	20027c20 	.word	0x20027c20
 801980c:	20027c04 	.word	0x20027c04
 8019810:	20027b88 	.word	0x20027b88
 8019814:	20027b8a 	.word	0x20027b8a

08019818 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 8019818:	4a17      	ldr	r2, [pc, #92]	@ (8019878 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 801981a:	8803      	ldrh	r3, [r0, #0]
 801981c:	8812      	ldrh	r2, [r2, #0]
 801981e:	4293      	cmp	r3, r2
 8019820:	d213      	bcs.n	801984a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 8019822:	4a16      	ldr	r2, [pc, #88]	@ (801987c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 8019824:	2114      	movs	r1, #20
 8019826:	6812      	ldr	r2, [r2, #0]
 8019828:	fb01 2303 	mla	r3, r1, r3, r2
 801982c:	8a1a      	ldrh	r2, [r3, #16]
 801982e:	8919      	ldrh	r1, [r3, #8]
 8019830:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8019834:	428a      	cmp	r2, r1
 8019836:	db1d      	blt.n	8019874 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 8019838:	8a58      	ldrh	r0, [r3, #18]
 801983a:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801983e:	895b      	ldrh	r3, [r3, #10]
 8019840:	4298      	cmp	r0, r3
 8019842:	bfac      	ite	ge
 8019844:	2000      	movge	r0, #0
 8019846:	2001      	movlt	r0, #1
 8019848:	4770      	bx	lr
 801984a:	490d      	ldr	r1, [pc, #52]	@ (8019880 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801984c:	8809      	ldrh	r1, [r1, #0]
 801984e:	4411      	add	r1, r2
 8019850:	428b      	cmp	r3, r1
 8019852:	da0d      	bge.n	8019870 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 8019854:	1a9b      	subs	r3, r3, r2
 8019856:	4a0b      	ldr	r2, [pc, #44]	@ (8019884 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 8019858:	210e      	movs	r1, #14
 801985a:	6812      	ldr	r2, [r2, #0]
 801985c:	fb01 2303 	mla	r3, r1, r3, r2
 8019860:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8019864:	891a      	ldrh	r2, [r3, #8]
 8019866:	4291      	cmp	r1, r2
 8019868:	db04      	blt.n	8019874 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801986a:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801986e:	e7e6      	b.n	801983e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 8019870:	2000      	movs	r0, #0
 8019872:	4770      	bx	lr
 8019874:	2001      	movs	r0, #1
 8019876:	4770      	bx	lr
 8019878:	20027c1c 	.word	0x20027c1c
 801987c:	20027c24 	.word	0x20027c24
 8019880:	20027c20 	.word	0x20027c20
 8019884:	20027c04 	.word	0x20027c04

08019888 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8019888:	4a12      	ldr	r2, [pc, #72]	@ (80198d4 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801988a:	8803      	ldrh	r3, [r0, #0]
 801988c:	8811      	ldrh	r1, [r2, #0]
 801988e:	428b      	cmp	r3, r1
 8019890:	d20b      	bcs.n	80198aa <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 8019892:	4a11      	ldr	r2, [pc, #68]	@ (80198d8 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8019894:	6812      	ldr	r2, [r2, #0]
 8019896:	b112      	cbz	r2, 801989e <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8019898:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801989c:	b9c0      	cbnz	r0, 80198d0 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801989e:	4a0f      	ldr	r2, [pc, #60]	@ (80198dc <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 80198a0:	6811      	ldr	r1, [r2, #0]
 80198a2:	2214      	movs	r2, #20
 80198a4:	4353      	muls	r3, r2
 80198a6:	58c8      	ldr	r0, [r1, r3]
 80198a8:	4770      	bx	lr
 80198aa:	4a0d      	ldr	r2, [pc, #52]	@ (80198e0 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 80198ac:	8812      	ldrh	r2, [r2, #0]
 80198ae:	440a      	add	r2, r1
 80198b0:	4293      	cmp	r3, r2
 80198b2:	da04      	bge.n	80198be <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 80198b4:	4a08      	ldr	r2, [pc, #32]	@ (80198d8 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 80198b6:	6812      	ldr	r2, [r2, #0]
 80198b8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80198bc:	4770      	bx	lr
 80198be:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80198c2:	4293      	cmp	r3, r2
 80198c4:	d103      	bne.n	80198ce <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 80198c6:	4b07      	ldr	r3, [pc, #28]	@ (80198e4 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 80198c8:	681b      	ldr	r3, [r3, #0]
 80198ca:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80198cc:	4770      	bx	lr
 80198ce:	2000      	movs	r0, #0
 80198d0:	4770      	bx	lr
 80198d2:	bf00      	nop
 80198d4:	20027c1c 	.word	0x20027c1c
 80198d8:	20027c00 	.word	0x20027c00
 80198dc:	20027c24 	.word	0x20027c24
 80198e0:	20027c20 	.word	0x20027c20
 80198e4:	20027b94 	.word	0x20027b94

080198e8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 80198e8:	4b24      	ldr	r3, [pc, #144]	@ (801997c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 80198ea:	8802      	ldrh	r2, [r0, #0]
 80198ec:	8818      	ldrh	r0, [r3, #0]
 80198ee:	4282      	cmp	r2, r0
 80198f0:	d221      	bcs.n	8019936 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 80198f2:	4b23      	ldr	r3, [pc, #140]	@ (8019980 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 80198f4:	6819      	ldr	r1, [r3, #0]
 80198f6:	2314      	movs	r3, #20
 80198f8:	fb03 1302 	mla	r3, r3, r2, r1
 80198fc:	6858      	ldr	r0, [r3, #4]
 80198fe:	2800      	cmp	r0, #0
 8019900:	d03a      	beq.n	8019978 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8019902:	4920      	ldr	r1, [pc, #128]	@ (8019984 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8019904:	6809      	ldr	r1, [r1, #0]
 8019906:	2900      	cmp	r1, #0
 8019908:	d036      	beq.n	8019978 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801990a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801990e:	2900      	cmp	r1, #0
 8019910:	d032      	beq.n	8019978 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8019912:	891a      	ldrh	r2, [r3, #8]
 8019914:	8958      	ldrh	r0, [r3, #10]
 8019916:	4350      	muls	r0, r2
 8019918:	7c5a      	ldrb	r2, [r3, #17]
 801991a:	7cdb      	ldrb	r3, [r3, #19]
 801991c:	0952      	lsrs	r2, r2, #5
 801991e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8019922:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8019926:	2b0b      	cmp	r3, #11
 8019928:	bf18      	it	ne
 801992a:	0040      	lslne	r0, r0, #1
 801992c:	3003      	adds	r0, #3
 801992e:	f020 0003 	bic.w	r0, r0, #3
 8019932:	4408      	add	r0, r1
 8019934:	4770      	bx	lr
 8019936:	4b14      	ldr	r3, [pc, #80]	@ (8019988 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8019938:	881b      	ldrh	r3, [r3, #0]
 801993a:	4403      	add	r3, r0
 801993c:	429a      	cmp	r2, r3
 801993e:	da1a      	bge.n	8019976 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8019940:	4b12      	ldr	r3, [pc, #72]	@ (801998c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8019942:	1a10      	subs	r0, r2, r0
 8019944:	210e      	movs	r1, #14
 8019946:	681b      	ldr	r3, [r3, #0]
 8019948:	fb01 3000 	mla	r0, r1, r0, r3
 801994c:	7b03      	ldrb	r3, [r0, #12]
 801994e:	f003 031f 	and.w	r3, r3, #31
 8019952:	2b0b      	cmp	r3, #11
 8019954:	d10b      	bne.n	801996e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 8019956:	8903      	ldrh	r3, [r0, #8]
 8019958:	8940      	ldrh	r0, [r0, #10]
 801995a:	4358      	muls	r0, r3
 801995c:	4b09      	ldr	r3, [pc, #36]	@ (8019984 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801995e:	3003      	adds	r0, #3
 8019960:	6819      	ldr	r1, [r3, #0]
 8019962:	f020 0303 	bic.w	r3, r0, #3
 8019966:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801996a:	4418      	add	r0, r3
 801996c:	4770      	bx	lr
 801996e:	2b0d      	cmp	r3, #13
 8019970:	d101      	bne.n	8019976 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8019972:	300d      	adds	r0, #13
 8019974:	4770      	bx	lr
 8019976:	2000      	movs	r0, #0
 8019978:	4770      	bx	lr
 801997a:	bf00      	nop
 801997c:	20027c1c 	.word	0x20027c1c
 8019980:	20027c24 	.word	0x20027c24
 8019984:	20027c00 	.word	0x20027c00
 8019988:	20027c20 	.word	0x20027c20
 801998c:	20027c04 	.word	0x20027c04

08019990 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8019990:	4a17      	ldr	r2, [pc, #92]	@ (80199f0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 8019992:	b510      	push	{r4, lr}
 8019994:	8803      	ldrh	r3, [r0, #0]
 8019996:	8812      	ldrh	r2, [r2, #0]
 8019998:	4293      	cmp	r3, r2
 801999a:	d20c      	bcs.n	80199b6 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801999c:	4a15      	ldr	r2, [pc, #84]	@ (80199f4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801999e:	2114      	movs	r1, #20
 80199a0:	6812      	ldr	r2, [r2, #0]
 80199a2:	fb01 2303 	mla	r3, r1, r3, r2
 80199a6:	7c58      	ldrb	r0, [r3, #17]
 80199a8:	0942      	lsrs	r2, r0, #5
 80199aa:	7cd8      	ldrb	r0, [r3, #19]
 80199ac:	f3c0 1042 	ubfx	r0, r0, #5, #3
 80199b0:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 80199b4:	bd10      	pop	{r4, pc}
 80199b6:	4910      	ldr	r1, [pc, #64]	@ (80199f8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 80199b8:	8809      	ldrh	r1, [r1, #0]
 80199ba:	4411      	add	r1, r2
 80199bc:	428b      	cmp	r3, r1
 80199be:	da09      	bge.n	80199d4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 80199c0:	1a9b      	subs	r3, r3, r2
 80199c2:	4a0e      	ldr	r2, [pc, #56]	@ (80199fc <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 80199c4:	210e      	movs	r1, #14
 80199c6:	6812      	ldr	r2, [r2, #0]
 80199c8:	fb01 2303 	mla	r3, r1, r3, r2
 80199cc:	7b18      	ldrb	r0, [r3, #12]
 80199ce:	f000 001f 	and.w	r0, r0, #31
 80199d2:	e7ef      	b.n	80199b4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 80199d4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80199d8:	4293      	cmp	r3, r2
 80199da:	d106      	bne.n	80199ea <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 80199dc:	f7f6 fe78 	bl	80106d0 <_ZN8touchgfx3HAL3lcdEv>
 80199e0:	6803      	ldr	r3, [r0, #0]
 80199e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80199e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80199e8:	4718      	bx	r3
 80199ea:	2000      	movs	r0, #0
 80199ec:	e7e2      	b.n	80199b4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 80199ee:	bf00      	nop
 80199f0:	20027c1c 	.word	0x20027c1c
 80199f4:	20027c24 	.word	0x20027c24
 80199f8:	20027c20 	.word	0x20027c20
 80199fc:	20027c04 	.word	0x20027c04

08019a00 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 8019a00:	2010      	movs	r0, #16
 8019a02:	4770      	bx	lr

08019a04 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 8019a04:	2000      	movs	r0, #0
 8019a06:	4770      	bx	lr

08019a08 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 8019a08:	4b02      	ldr	r3, [pc, #8]	@ (8019a14 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 8019a0a:	8818      	ldrh	r0, [r3, #0]
 8019a0c:	0040      	lsls	r0, r0, #1
 8019a0e:	b280      	uxth	r0, r0
 8019a10:	4770      	bx	lr
 8019a12:	bf00      	nop
 8019a14:	20027b8e 	.word	0x20027b8e

08019a18 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8019a18:	2bff      	cmp	r3, #255	@ 0xff
 8019a1a:	d050      	beq.n	8019abe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 8019a1c:	2a0b      	cmp	r2, #11
 8019a1e:	d04a      	beq.n	8019ab6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8019a20:	d80e      	bhi.n	8019a40 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 8019a22:	2a03      	cmp	r2, #3
 8019a24:	d03f      	beq.n	8019aa6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 8019a26:	d804      	bhi.n	8019a32 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8019a28:	2a01      	cmp	r2, #1
 8019a2a:	d03e      	beq.n	8019aaa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 8019a2c:	d93f      	bls.n	8019aae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 8019a2e:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8019a30:	4770      	bx	lr
 8019a32:	2a09      	cmp	r2, #9
 8019a34:	d03f      	beq.n	8019ab6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8019a36:	d83c      	bhi.n	8019ab2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8019a38:	2a08      	cmp	r2, #8
 8019a3a:	d03a      	beq.n	8019ab2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8019a3c:	2000      	movs	r0, #0
 8019a3e:	4770      	bx	lr
 8019a40:	2a2f      	cmp	r2, #47	@ 0x2f
 8019a42:	d024      	beq.n	8019a8e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 8019a44:	d80d      	bhi.n	8019a62 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 8019a46:	2a2d      	cmp	r2, #45	@ 0x2d
 8019a48:	d014      	beq.n	8019a74 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 8019a4a:	d826      	bhi.n	8019a9a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8019a4c:	2a2c      	cmp	r2, #44	@ 0x2c
 8019a4e:	d1f5      	bne.n	8019a3c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019a50:	684b      	ldr	r3, [r1, #4]
 8019a52:	781b      	ldrb	r3, [r3, #0]
 8019a54:	2b01      	cmp	r3, #1
 8019a56:	d018      	beq.n	8019a8a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 8019a58:	d323      	bcc.n	8019aa2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 8019a5a:	2b02      	cmp	r3, #2
 8019a5c:	d1ee      	bne.n	8019a3c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019a5e:	6880      	ldr	r0, [r0, #8]
 8019a60:	4770      	bx	lr
 8019a62:	2a31      	cmp	r2, #49	@ 0x31
 8019a64:	d004      	beq.n	8019a70 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 8019a66:	d328      	bcc.n	8019aba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8019a68:	2a32      	cmp	r2, #50	@ 0x32
 8019a6a:	d026      	beq.n	8019aba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8019a6c:	2a33      	cmp	r2, #51	@ 0x33
 8019a6e:	d1e5      	bne.n	8019a3c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019a70:	6f00      	ldr	r0, [r0, #112]	@ 0x70
 8019a72:	4770      	bx	lr
 8019a74:	684b      	ldr	r3, [r1, #4]
 8019a76:	781b      	ldrb	r3, [r3, #0]
 8019a78:	2b01      	cmp	r3, #1
 8019a7a:	d004      	beq.n	8019a86 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8019a7c:	d30b      	bcc.n	8019a96 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8019a7e:	2b02      	cmp	r3, #2
 8019a80:	d1dc      	bne.n	8019a3c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019a82:	6900      	ldr	r0, [r0, #16]
 8019a84:	4770      	bx	lr
 8019a86:	6a00      	ldr	r0, [r0, #32]
 8019a88:	4770      	bx	lr
 8019a8a:	6980      	ldr	r0, [r0, #24]
 8019a8c:	4770      	bx	lr
 8019a8e:	684b      	ldr	r3, [r1, #4]
 8019a90:	781b      	ldrb	r3, [r3, #0]
 8019a92:	2b00      	cmp	r3, #0
 8019a94:	d1d2      	bne.n	8019a3c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019a96:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8019a98:	4770      	bx	lr
 8019a9a:	684b      	ldr	r3, [r1, #4]
 8019a9c:	781b      	ldrb	r3, [r3, #0]
 8019a9e:	2b00      	cmp	r3, #0
 8019aa0:	d1cc      	bne.n	8019a3c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019aa2:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8019aa4:	4770      	bx	lr
 8019aa6:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 8019aa8:	4770      	bx	lr
 8019aaa:	6d00      	ldr	r0, [r0, #80]	@ 0x50
 8019aac:	4770      	bx	lr
 8019aae:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 8019ab0:	4770      	bx	lr
 8019ab2:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 8019ab4:	4770      	bx	lr
 8019ab6:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 8019ab8:	4770      	bx	lr
 8019aba:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8019abc:	4770      	bx	lr
 8019abe:	2a0b      	cmp	r2, #11
 8019ac0:	d049      	beq.n	8019b56 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8019ac2:	d80e      	bhi.n	8019ae2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 8019ac4:	2a03      	cmp	r2, #3
 8019ac6:	d040      	beq.n	8019b4a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8019ac8:	d804      	bhi.n	8019ad4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 8019aca:	2a01      	cmp	r2, #1
 8019acc:	d03f      	beq.n	8019b4e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 8019ace:	d940      	bls.n	8019b52 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 8019ad0:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 8019ad2:	4770      	bx	lr
 8019ad4:	2a09      	cmp	r2, #9
 8019ad6:	d03e      	beq.n	8019b56 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8019ad8:	d801      	bhi.n	8019ade <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 8019ada:	2a08      	cmp	r2, #8
 8019adc:	d1ae      	bne.n	8019a3c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019ade:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 8019ae0:	4770      	bx	lr
 8019ae2:	2a2f      	cmp	r2, #47	@ 0x2f
 8019ae4:	d024      	beq.n	8019b30 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 8019ae6:	d80d      	bhi.n	8019b04 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 8019ae8:	2a2d      	cmp	r2, #45	@ 0x2d
 8019aea:	d014      	beq.n	8019b16 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 8019aec:	d826      	bhi.n	8019b3c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 8019aee:	2a2c      	cmp	r2, #44	@ 0x2c
 8019af0:	d1a4      	bne.n	8019a3c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019af2:	684b      	ldr	r3, [r1, #4]
 8019af4:	781b      	ldrb	r3, [r3, #0]
 8019af6:	2b01      	cmp	r3, #1
 8019af8:	d018      	beq.n	8019b2c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 8019afa:	d324      	bcc.n	8019b46 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 8019afc:	2b02      	cmp	r3, #2
 8019afe:	d19d      	bne.n	8019a3c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019b00:	68c0      	ldr	r0, [r0, #12]
 8019b02:	4770      	bx	lr
 8019b04:	2a31      	cmp	r2, #49	@ 0x31
 8019b06:	d004      	beq.n	8019b12 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 8019b08:	d327      	bcc.n	8019b5a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8019b0a:	2a32      	cmp	r2, #50	@ 0x32
 8019b0c:	d025      	beq.n	8019b5a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8019b0e:	2a33      	cmp	r2, #51	@ 0x33
 8019b10:	d194      	bne.n	8019a3c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019b12:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 8019b14:	4770      	bx	lr
 8019b16:	684b      	ldr	r3, [r1, #4]
 8019b18:	781b      	ldrb	r3, [r3, #0]
 8019b1a:	2b01      	cmp	r3, #1
 8019b1c:	d004      	beq.n	8019b28 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 8019b1e:	d30b      	bcc.n	8019b38 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 8019b20:	2b02      	cmp	r3, #2
 8019b22:	d18b      	bne.n	8019a3c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019b24:	6940      	ldr	r0, [r0, #20]
 8019b26:	4770      	bx	lr
 8019b28:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8019b2a:	4770      	bx	lr
 8019b2c:	69c0      	ldr	r0, [r0, #28]
 8019b2e:	4770      	bx	lr
 8019b30:	684b      	ldr	r3, [r1, #4]
 8019b32:	781b      	ldrb	r3, [r3, #0]
 8019b34:	2b00      	cmp	r3, #0
 8019b36:	d181      	bne.n	8019a3c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019b38:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8019b3a:	4770      	bx	lr
 8019b3c:	684b      	ldr	r3, [r1, #4]
 8019b3e:	781b      	ldrb	r3, [r3, #0]
 8019b40:	2b00      	cmp	r3, #0
 8019b42:	f47f af7b 	bne.w	8019a3c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019b46:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8019b48:	4770      	bx	lr
 8019b4a:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 8019b4c:	4770      	bx	lr
 8019b4e:	6d40      	ldr	r0, [r0, #84]	@ 0x54
 8019b50:	4770      	bx	lr
 8019b52:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 8019b54:	4770      	bx	lr
 8019b56:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 8019b58:	4770      	bx	lr
 8019b5a:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
 8019b5c:	4770      	bx	lr

08019b5e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019b5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b62:	b087      	sub	sp, #28
 8019b64:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8019b66:	9205      	str	r2, [sp, #20]
 8019b68:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8019b6c:	9101      	str	r1, [sp, #4]
 8019b6e:	9202      	str	r2, [sp, #8]
 8019b70:	6841      	ldr	r1, [r0, #4]
 8019b72:	f8dd e060 	ldr.w	lr, [sp, #96]	@ 0x60
 8019b76:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 8019b7a:	fb01 2404 	mla	r4, r1, r4, r2
 8019b7e:	6802      	ldr	r2, [r0, #0]
 8019b80:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8019b84:	f8de 2000 	ldr.w	r2, [lr]
 8019b88:	9203      	str	r2, [sp, #12]
 8019b8a:	f8de 2004 	ldr.w	r2, [lr, #4]
 8019b8e:	3204      	adds	r2, #4
 8019b90:	9204      	str	r2, [sp, #16]
 8019b92:	9a02      	ldr	r2, [sp, #8]
 8019b94:	43d6      	mvns	r6, r2
 8019b96:	b2f6      	uxtb	r6, r6
 8019b98:	9a01      	ldr	r2, [sp, #4]
 8019b9a:	2a00      	cmp	r2, #0
 8019b9c:	dc03      	bgt.n	8019ba6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8019b9e:	9a05      	ldr	r2, [sp, #20]
 8019ba0:	2a00      	cmp	r2, #0
 8019ba2:	f340 8129 	ble.w	8019df8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8019ba6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8019ba8:	f9be c008 	ldrsh.w	ip, [lr, #8]
 8019bac:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 8019bb0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8019bb2:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 8019bb6:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8019bba:	2b00      	cmp	r3, #0
 8019bbc:	dd0e      	ble.n	8019bdc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8019bbe:	1408      	asrs	r0, r1, #16
 8019bc0:	d405      	bmi.n	8019bce <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019bc2:	4560      	cmp	r0, ip
 8019bc4:	da03      	bge.n	8019bce <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019bc6:	1410      	asrs	r0, r2, #16
 8019bc8:	d401      	bmi.n	8019bce <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019bca:	42b8      	cmp	r0, r7
 8019bcc:	db07      	blt.n	8019bde <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8019bce:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8019bd0:	3b01      	subs	r3, #1
 8019bd2:	3402      	adds	r4, #2
 8019bd4:	4401      	add	r1, r0
 8019bd6:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8019bd8:	4402      	add	r2, r0
 8019bda:	e7ee      	b.n	8019bba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8019bdc:	d071      	beq.n	8019cc2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8019bde:	1e58      	subs	r0, r3, #1
 8019be0:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8019be2:	fb05 1500 	mla	r5, r5, r0, r1
 8019be6:	142d      	asrs	r5, r5, #16
 8019be8:	d45f      	bmi.n	8019caa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8019bea:	4565      	cmp	r5, ip
 8019bec:	da5d      	bge.n	8019caa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8019bee:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8019bf0:	fb05 2000 	mla	r0, r5, r0, r2
 8019bf4:	1400      	asrs	r0, r0, #16
 8019bf6:	d458      	bmi.n	8019caa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8019bf8:	42b8      	cmp	r0, r7
 8019bfa:	da56      	bge.n	8019caa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8019bfc:	4699      	mov	r9, r3
 8019bfe:	46a2      	mov	sl, r4
 8019c00:	f8bd b008 	ldrh.w	fp, [sp, #8]
 8019c04:	f1b9 0f00 	cmp.w	r9, #0
 8019c08:	dd57      	ble.n	8019cba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8019c0a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8019c0e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8019c12:	9803      	ldr	r0, [sp, #12]
 8019c14:	140d      	asrs	r5, r1, #16
 8019c16:	f109 39ff 	add.w	r9, r9, #4294967295
 8019c1a:	fb07 000c 	mla	r0, r7, ip, r0
 8019c1e:	5d40      	ldrb	r0, [r0, r5]
 8019c20:	9d04      	ldr	r5, [sp, #16]
 8019c22:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 8019c26:	f8ba 5000 	ldrh.w	r5, [sl]
 8019c2a:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8019c2e:	122f      	asrs	r7, r5, #8
 8019c30:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8019c34:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8019c38:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8019c3c:	00ed      	lsls	r5, r5, #3
 8019c3e:	f008 08fc 	and.w	r8, r8, #252	@ 0xfc
 8019c42:	fb17 f706 	smulbb	r7, r7, r6
 8019c46:	b2ed      	uxtb	r5, r5
 8019c48:	fb18 f806 	smulbb	r8, r8, r6
 8019c4c:	fb0c 7c0b 	mla	ip, ip, fp, r7
 8019c50:	10c7      	asrs	r7, r0, #3
 8019c52:	fb15 f506 	smulbb	r5, r5, r6
 8019c56:	00c0      	lsls	r0, r0, #3
 8019c58:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8019c5c:	fa1f fc8c 	uxth.w	ip, ip
 8019c60:	b2c0      	uxtb	r0, r0
 8019c62:	fb07 870b 	mla	r7, r7, fp, r8
 8019c66:	fb00 500b 	mla	r0, r0, fp, r5
 8019c6a:	f10c 0501 	add.w	r5, ip, #1
 8019c6e:	b2bf      	uxth	r7, r7
 8019c70:	b280      	uxth	r0, r0
 8019c72:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8019c76:	f107 0801 	add.w	r8, r7, #1
 8019c7a:	1c45      	adds	r5, r0, #1
 8019c7c:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 8019c80:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8019c84:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8019c88:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8019c8a:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8019c8e:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8019c92:	4401      	add	r1, r0
 8019c94:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 8019c98:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8019c9a:	ea45 0c0c 	orr.w	ip, r5, ip
 8019c9e:	4402      	add	r2, r0
 8019ca0:	ea4c 0c08 	orr.w	ip, ip, r8
 8019ca4:	f82a cb02 	strh.w	ip, [sl], #2
 8019ca8:	e7ac      	b.n	8019c04 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8019caa:	f04f 0800 	mov.w	r8, #0
 8019cae:	f8bd a008 	ldrh.w	sl, [sp, #8]
 8019cb2:	eb03 0008 	add.w	r0, r3, r8
 8019cb6:	2800      	cmp	r0, #0
 8019cb8:	dc41      	bgt.n	8019d3e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8019cba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019cbe:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019cc2:	9b01      	ldr	r3, [sp, #4]
 8019cc4:	2b00      	cmp	r3, #0
 8019cc6:	f340 8097 	ble.w	8019df8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8019cca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8019cce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8019cd0:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019cd4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019cd8:	eef0 6a62 	vmov.f32	s13, s5
 8019cdc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019ce0:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019ce4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019ce8:	edcd 6a11 	vstr	s13, [sp, #68]	@ 0x44
 8019cec:	eef0 6a43 	vmov.f32	s13, s6
 8019cf0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019cf4:	edcd 6a12 	vstr	s13, [sp, #72]	@ 0x48
 8019cf8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019cfc:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019d00:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019d04:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019d08:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019d0c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019d10:	ee12 2a90 	vmov	r2, s5
 8019d14:	eef0 2a47 	vmov.f32	s5, s14
 8019d18:	fb92 f3f3 	sdiv	r3, r2, r3
 8019d1c:	ee13 2a10 	vmov	r2, s6
 8019d20:	9313      	str	r3, [sp, #76]	@ 0x4c
 8019d22:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8019d24:	eeb0 3a67 	vmov.f32	s6, s15
 8019d28:	fb92 f3f3 	sdiv	r3, r2, r3
 8019d2c:	9314      	str	r3, [sp, #80]	@ 0x50
 8019d2e:	9b01      	ldr	r3, [sp, #4]
 8019d30:	9a05      	ldr	r2, [sp, #20]
 8019d32:	3b01      	subs	r3, #1
 8019d34:	9301      	str	r3, [sp, #4]
 8019d36:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8019d38:	bf08      	it	eq
 8019d3a:	4613      	moveq	r3, r2
 8019d3c:	e72c      	b.n	8019b98 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8019d3e:	140f      	asrs	r7, r1, #16
 8019d40:	d453      	bmi.n	8019dea <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8019d42:	f8de 5008 	ldr.w	r5, [lr, #8]
 8019d46:	42bd      	cmp	r5, r7
 8019d48:	dd4f      	ble.n	8019dea <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8019d4a:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8019d4e:	d44c      	bmi.n	8019dea <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8019d50:	f8de 000c 	ldr.w	r0, [lr, #12]
 8019d54:	4560      	cmp	r0, ip
 8019d56:	dd48      	ble.n	8019dea <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8019d58:	9803      	ldr	r0, [sp, #12]
 8019d5a:	b22d      	sxth	r5, r5
 8019d5c:	fb0c 0505 	mla	r5, ip, r5, r0
 8019d60:	5de8      	ldrb	r0, [r5, r7]
 8019d62:	9d04      	ldr	r5, [sp, #16]
 8019d64:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 8019d68:	f06f 0501 	mvn.w	r5, #1
 8019d6c:	fb05 fb08 	mul.w	fp, r5, r8
 8019d70:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8019d74:	f834 500b 	ldrh.w	r5, [r4, fp]
 8019d78:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8019d7c:	122f      	asrs	r7, r5, #8
 8019d7e:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8019d82:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8019d86:	00ed      	lsls	r5, r5, #3
 8019d88:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 8019d8c:	fb17 f706 	smulbb	r7, r7, r6
 8019d90:	b2ed      	uxtb	r5, r5
 8019d92:	fb19 f906 	smulbb	r9, r9, r6
 8019d96:	fb0c 7c0a 	mla	ip, ip, sl, r7
 8019d9a:	10c7      	asrs	r7, r0, #3
 8019d9c:	fb15 f506 	smulbb	r5, r5, r6
 8019da0:	00c0      	lsls	r0, r0, #3
 8019da2:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8019da6:	fa1f fc8c 	uxth.w	ip, ip
 8019daa:	b2c0      	uxtb	r0, r0
 8019dac:	fb07 970a 	mla	r7, r7, sl, r9
 8019db0:	fb00 500a 	mla	r0, r0, sl, r5
 8019db4:	f10c 0501 	add.w	r5, ip, #1
 8019db8:	b2bf      	uxth	r7, r7
 8019dba:	b280      	uxth	r0, r0
 8019dbc:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8019dc0:	f107 0901 	add.w	r9, r7, #1
 8019dc4:	1c45      	adds	r5, r0, #1
 8019dc6:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 8019dca:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8019dce:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8019dd2:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8019dd6:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8019dda:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8019dde:	ea45 0c0c 	orr.w	ip, r5, ip
 8019de2:	ea4c 0c09 	orr.w	ip, ip, r9
 8019de6:	f824 c00b 	strh.w	ip, [r4, fp]
 8019dea:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8019dec:	f108 38ff 	add.w	r8, r8, #4294967295
 8019df0:	4401      	add	r1, r0
 8019df2:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8019df4:	4402      	add	r2, r0
 8019df6:	e75c      	b.n	8019cb2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8019df8:	b007      	add	sp, #28
 8019dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019dfe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019dfe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e02:	b085      	sub	sp, #20
 8019e04:	4693      	mov	fp, r2
 8019e06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8019e0a:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8019e0c:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8019e0e:	6870      	ldr	r0, [r6, #4]
 8019e10:	9100      	str	r1, [sp, #0]
 8019e12:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 8019e16:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	@ 0x44
 8019e1a:	fb00 2404 	mla	r4, r0, r4, r2
 8019e1e:	6832      	ldr	r2, [r6, #0]
 8019e20:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8019e24:	682a      	ldr	r2, [r5, #0]
 8019e26:	9201      	str	r2, [sp, #4]
 8019e28:	686a      	ldr	r2, [r5, #4]
 8019e2a:	3204      	adds	r2, #4
 8019e2c:	9202      	str	r2, [sp, #8]
 8019e2e:	9a00      	ldr	r2, [sp, #0]
 8019e30:	2a00      	cmp	r2, #0
 8019e32:	dc03      	bgt.n	8019e3c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8019e34:	f1bb 0f00 	cmp.w	fp, #0
 8019e38:	f340 80a0 	ble.w	8019f7c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 8019e3c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8019e3e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8019e42:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8019e46:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8019e48:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8019e4c:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8019e50:	2b00      	cmp	r3, #0
 8019e52:	dd0c      	ble.n	8019e6e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019e54:	1406      	asrs	r6, r0, #16
 8019e56:	d405      	bmi.n	8019e64 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8019e58:	454e      	cmp	r6, r9
 8019e5a:	da03      	bge.n	8019e64 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8019e5c:	1416      	asrs	r6, r2, #16
 8019e5e:	d401      	bmi.n	8019e64 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8019e60:	4546      	cmp	r6, r8
 8019e62:	db05      	blt.n	8019e70 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019e64:	4470      	add	r0, lr
 8019e66:	4462      	add	r2, ip
 8019e68:	3b01      	subs	r3, #1
 8019e6a:	3402      	adds	r4, #2
 8019e6c:	e7f0      	b.n	8019e50 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8019e6e:	d00f      	beq.n	8019e90 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8019e70:	1e5e      	subs	r6, r3, #1
 8019e72:	fb0e 0706 	mla	r7, lr, r6, r0
 8019e76:	143f      	asrs	r7, r7, #16
 8019e78:	d541      	bpl.n	8019efe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 8019e7a:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 8019e7e:	4698      	mov	r8, r3
 8019e80:	9603      	str	r6, [sp, #12]
 8019e82:	f1b8 0f00 	cmp.w	r8, #0
 8019e86:	dc59      	bgt.n	8019f3c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8019e88:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019e8c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019e90:	9b00      	ldr	r3, [sp, #0]
 8019e92:	2b00      	cmp	r3, #0
 8019e94:	dd72      	ble.n	8019f7c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 8019e96:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019e9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019e9c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019ea0:	eeb0 6a62 	vmov.f32	s12, s5
 8019ea4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019ea8:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019eac:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019eb0:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8019eb4:	eeb0 6a43 	vmov.f32	s12, s6
 8019eb8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019ebc:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8019ec0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019ec4:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019ec8:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019ecc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019ed0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019ed4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019ed8:	ee12 2a90 	vmov	r2, s5
 8019edc:	eef0 2a47 	vmov.f32	s5, s14
 8019ee0:	fb92 fef3 	sdiv	lr, r2, r3
 8019ee4:	ee13 2a10 	vmov	r2, s6
 8019ee8:	eeb0 3a67 	vmov.f32	s6, s15
 8019eec:	fb92 fcf3 	sdiv	ip, r2, r3
 8019ef0:	9b00      	ldr	r3, [sp, #0]
 8019ef2:	3b01      	subs	r3, #1
 8019ef4:	9300      	str	r3, [sp, #0]
 8019ef6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019ef8:	bf08      	it	eq
 8019efa:	465b      	moveq	r3, fp
 8019efc:	e797      	b.n	8019e2e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8019efe:	454f      	cmp	r7, r9
 8019f00:	dabb      	bge.n	8019e7a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8019f02:	fb0c 2606 	mla	r6, ip, r6, r2
 8019f06:	1436      	asrs	r6, r6, #16
 8019f08:	d4b7      	bmi.n	8019e7a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8019f0a:	4546      	cmp	r6, r8
 8019f0c:	dab5      	bge.n	8019e7a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8019f0e:	461e      	mov	r6, r3
 8019f10:	46a0      	mov	r8, r4
 8019f12:	2e00      	cmp	r6, #0
 8019f14:	ddb8      	ble.n	8019e88 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8019f16:	1417      	asrs	r7, r2, #16
 8019f18:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 8019f1c:	9901      	ldr	r1, [sp, #4]
 8019f1e:	ea4f 4920 	mov.w	r9, r0, asr #16
 8019f22:	4462      	add	r2, ip
 8019f24:	4470      	add	r0, lr
 8019f26:	fb0a 1707 	mla	r7, sl, r7, r1
 8019f2a:	9902      	ldr	r1, [sp, #8]
 8019f2c:	3e01      	subs	r6, #1
 8019f2e:	f817 7009 	ldrb.w	r7, [r7, r9]
 8019f32:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 8019f36:	f828 7b02 	strh.w	r7, [r8], #2
 8019f3a:	e7ea      	b.n	8019f12 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 8019f3c:	ea5f 4920 	movs.w	r9, r0, asr #16
 8019f40:	d417      	bmi.n	8019f72 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8019f42:	68ae      	ldr	r6, [r5, #8]
 8019f44:	454e      	cmp	r6, r9
 8019f46:	dd14      	ble.n	8019f72 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8019f48:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8019f4c:	d411      	bmi.n	8019f72 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8019f4e:	68ef      	ldr	r7, [r5, #12]
 8019f50:	4557      	cmp	r7, sl
 8019f52:	dd0e      	ble.n	8019f72 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8019f54:	9f01      	ldr	r7, [sp, #4]
 8019f56:	b236      	sxth	r6, r6
 8019f58:	f06f 0101 	mvn.w	r1, #1
 8019f5c:	fb0a 7606 	mla	r6, sl, r6, r7
 8019f60:	9f02      	ldr	r7, [sp, #8]
 8019f62:	f816 6009 	ldrb.w	r6, [r6, r9]
 8019f66:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 8019f6a:	fb01 f608 	mul.w	r6, r1, r8
 8019f6e:	9903      	ldr	r1, [sp, #12]
 8019f70:	538f      	strh	r7, [r1, r6]
 8019f72:	4470      	add	r0, lr
 8019f74:	4462      	add	r2, ip
 8019f76:	f108 38ff 	add.w	r8, r8, #4294967295
 8019f7a:	e782      	b.n	8019e82 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8019f7c:	b005      	add	sp, #20
 8019f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019f82 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019f82:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f86:	b087      	sub	sp, #28
 8019f88:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8019f8a:	9205      	str	r2, [sp, #20]
 8019f8c:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8019f90:	9102      	str	r1, [sp, #8]
 8019f92:	9203      	str	r2, [sp, #12]
 8019f94:	6861      	ldr	r1, [r4, #4]
 8019f96:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 8019f9a:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	@ 0x58
 8019f9e:	fb01 2000 	mla	r0, r1, r0, r2
 8019fa2:	6822      	ldr	r2, [r4, #0]
 8019fa4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8019fa8:	9200      	str	r2, [sp, #0]
 8019faa:	f8dc 2000 	ldr.w	r2, [ip]
 8019fae:	9204      	str	r2, [sp, #16]
 8019fb0:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8019fb4:	3204      	adds	r2, #4
 8019fb6:	9201      	str	r2, [sp, #4]
 8019fb8:	9a03      	ldr	r2, [sp, #12]
 8019fba:	43d5      	mvns	r5, r2
 8019fbc:	b2ed      	uxtb	r5, r5
 8019fbe:	9a02      	ldr	r2, [sp, #8]
 8019fc0:	2a00      	cmp	r2, #0
 8019fc2:	dc03      	bgt.n	8019fcc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8019fc4:	9a05      	ldr	r2, [sp, #20]
 8019fc6:	2a00      	cmp	r2, #0
 8019fc8:	f340 812c 	ble.w	801a224 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8019fcc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8019fce:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8019fd2:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 8019fd6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8019fd8:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8019fdc:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8019fe0:	2b00      	cmp	r3, #0
 8019fe2:	dd10      	ble.n	801a006 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8019fe4:	140c      	asrs	r4, r1, #16
 8019fe6:	d405      	bmi.n	8019ff4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019fe8:	4574      	cmp	r4, lr
 8019fea:	da03      	bge.n	8019ff4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019fec:	1414      	asrs	r4, r2, #16
 8019fee:	d401      	bmi.n	8019ff4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019ff0:	42bc      	cmp	r4, r7
 8019ff2:	db09      	blt.n	801a008 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8019ff4:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8019ff6:	3b01      	subs	r3, #1
 8019ff8:	9800      	ldr	r0, [sp, #0]
 8019ffa:	4421      	add	r1, r4
 8019ffc:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8019ffe:	3002      	adds	r0, #2
 801a000:	4422      	add	r2, r4
 801a002:	9000      	str	r0, [sp, #0]
 801a004:	e7ec      	b.n	8019fe0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801a006:	d071      	beq.n	801a0ec <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801a008:	1e5c      	subs	r4, r3, #1
 801a00a:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801a00c:	fb06 1604 	mla	r6, r6, r4, r1
 801a010:	1436      	asrs	r6, r6, #16
 801a012:	d45d      	bmi.n	801a0d0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801a014:	4576      	cmp	r6, lr
 801a016:	da5b      	bge.n	801a0d0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801a018:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801a01a:	fb06 2404 	mla	r4, r6, r4, r2
 801a01e:	1424      	asrs	r4, r4, #16
 801a020:	d456      	bmi.n	801a0d0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801a022:	42bc      	cmp	r4, r7
 801a024:	da54      	bge.n	801a0d0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801a026:	4698      	mov	r8, r3
 801a028:	f8dd 9000 	ldr.w	r9, [sp]
 801a02c:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 801a030:	f1b8 0f00 	cmp.w	r8, #0
 801a034:	dd54      	ble.n	801a0e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801a036:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801a03a:	1414      	asrs	r4, r2, #16
 801a03c:	9804      	ldr	r0, [sp, #16]
 801a03e:	140e      	asrs	r6, r1, #16
 801a040:	f108 38ff 	add.w	r8, r8, #4294967295
 801a044:	fb07 0404 	mla	r4, r7, r4, r0
 801a048:	9801      	ldr	r0, [sp, #4]
 801a04a:	f814 e006 	ldrb.w	lr, [r4, r6]
 801a04e:	f8b9 4000 	ldrh.w	r4, [r9]
 801a052:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801a056:	1227      	asrs	r7, r4, #8
 801a058:	eb00 0b0e 	add.w	fp, r0, lr
 801a05c:	f810 e00e 	ldrb.w	lr, [r0, lr]
 801a060:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801a064:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801a066:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801a06a:	f89b b001 	ldrb.w	fp, [fp, #1]
 801a06e:	4401      	add	r1, r0
 801a070:	fb16 f60a 	smulbb	r6, r6, sl
 801a074:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801a076:	fb1b fb0a 	smulbb	fp, fp, sl
 801a07a:	fb07 6705 	mla	r7, r7, r5, r6
 801a07e:	10e6      	asrs	r6, r4, #3
 801a080:	00e4      	lsls	r4, r4, #3
 801a082:	4402      	add	r2, r0
 801a084:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801a088:	b2bf      	uxth	r7, r7
 801a08a:	b2e4      	uxtb	r4, r4
 801a08c:	fb06 b605 	mla	r6, r6, r5, fp
 801a090:	fb14 f405 	smulbb	r4, r4, r5
 801a094:	b2b6      	uxth	r6, r6
 801a096:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801a09a:	1c7c      	adds	r4, r7, #1
 801a09c:	f106 0b01 	add.w	fp, r6, #1
 801a0a0:	fa1f fe8e 	uxth.w	lr, lr
 801a0a4:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801a0a8:	f10e 0401 	add.w	r4, lr, #1
 801a0ac:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801a0b0:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801a0b4:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 801a0b8:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801a0bc:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801a0c0:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 801a0c4:	4327      	orrs	r7, r4
 801a0c6:	ea47 070b 	orr.w	r7, r7, fp
 801a0ca:	f829 7b02 	strh.w	r7, [r9], #2
 801a0ce:	e7af      	b.n	801a030 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801a0d0:	f04f 0e00 	mov.w	lr, #0
 801a0d4:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 801a0d8:	eb03 040e 	add.w	r4, r3, lr
 801a0dc:	2c00      	cmp	r4, #0
 801a0de:	dc43      	bgt.n	801a168 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801a0e0:	9a00      	ldr	r2, [sp, #0]
 801a0e2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a0e6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801a0ea:	9300      	str	r3, [sp, #0]
 801a0ec:	9b02      	ldr	r3, [sp, #8]
 801a0ee:	2b00      	cmp	r3, #0
 801a0f0:	f340 8098 	ble.w	801a224 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801a0f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801a0f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a0fa:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a0fe:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a102:	eef0 6a62 	vmov.f32	s13, s5
 801a106:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a10a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a10e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a112:	edcd 6a11 	vstr	s13, [sp, #68]	@ 0x44
 801a116:	eef0 6a43 	vmov.f32	s13, s6
 801a11a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a11e:	edcd 6a12 	vstr	s13, [sp, #72]	@ 0x48
 801a122:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a126:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a12a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a12e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a132:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a136:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a13a:	ee12 2a90 	vmov	r2, s5
 801a13e:	eef0 2a47 	vmov.f32	s5, s14
 801a142:	fb92 f3f3 	sdiv	r3, r2, r3
 801a146:	ee13 2a10 	vmov	r2, s6
 801a14a:	9313      	str	r3, [sp, #76]	@ 0x4c
 801a14c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a14e:	eeb0 3a67 	vmov.f32	s6, s15
 801a152:	fb92 f3f3 	sdiv	r3, r2, r3
 801a156:	9314      	str	r3, [sp, #80]	@ 0x50
 801a158:	9b02      	ldr	r3, [sp, #8]
 801a15a:	9a05      	ldr	r2, [sp, #20]
 801a15c:	3b01      	subs	r3, #1
 801a15e:	9302      	str	r3, [sp, #8]
 801a160:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a162:	bf08      	it	eq
 801a164:	4613      	moveq	r3, r2
 801a166:	e72a      	b.n	8019fbe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801a168:	140f      	asrs	r7, r1, #16
 801a16a:	d454      	bmi.n	801a216 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801a16c:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801a170:	42be      	cmp	r6, r7
 801a172:	dd50      	ble.n	801a216 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801a174:	ea5f 4822 	movs.w	r8, r2, asr #16
 801a178:	d44d      	bmi.n	801a216 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801a17a:	f8dc 400c 	ldr.w	r4, [ip, #12]
 801a17e:	4544      	cmp	r4, r8
 801a180:	dd49      	ble.n	801a216 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801a182:	9c04      	ldr	r4, [sp, #16]
 801a184:	b236      	sxth	r6, r6
 801a186:	f06f 0001 	mvn.w	r0, #1
 801a18a:	fb08 4606 	mla	r6, r8, r6, r4
 801a18e:	9c01      	ldr	r4, [sp, #4]
 801a190:	fb00 fa0e 	mul.w	sl, r0, lr
 801a194:	9800      	ldr	r0, [sp, #0]
 801a196:	f816 8007 	ldrb.w	r8, [r6, r7]
 801a19a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801a19e:	eb04 0b08 	add.w	fp, r4, r8
 801a1a2:	f830 400a 	ldrh.w	r4, [r0, sl]
 801a1a6:	9801      	ldr	r0, [sp, #4]
 801a1a8:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801a1ac:	1227      	asrs	r7, r4, #8
 801a1ae:	f89b b001 	ldrb.w	fp, [fp, #1]
 801a1b2:	fb16 f609 	smulbb	r6, r6, r9
 801a1b6:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801a1ba:	f810 8008 	ldrb.w	r8, [r0, r8]
 801a1be:	fb1b fb09 	smulbb	fp, fp, r9
 801a1c2:	fb07 6705 	mla	r7, r7, r5, r6
 801a1c6:	10e6      	asrs	r6, r4, #3
 801a1c8:	00e4      	lsls	r4, r4, #3
 801a1ca:	9800      	ldr	r0, [sp, #0]
 801a1cc:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801a1d0:	b2bf      	uxth	r7, r7
 801a1d2:	b2e4      	uxtb	r4, r4
 801a1d4:	fb06 b605 	mla	r6, r6, r5, fp
 801a1d8:	fb14 f405 	smulbb	r4, r4, r5
 801a1dc:	b2b6      	uxth	r6, r6
 801a1de:	fb08 4809 	mla	r8, r8, r9, r4
 801a1e2:	1c7c      	adds	r4, r7, #1
 801a1e4:	f106 0b01 	add.w	fp, r6, #1
 801a1e8:	fa1f f888 	uxth.w	r8, r8
 801a1ec:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801a1f0:	f108 0401 	add.w	r4, r8, #1
 801a1f4:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801a1f8:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801a1fc:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 801a200:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801a204:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801a208:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 801a20c:	4327      	orrs	r7, r4
 801a20e:	ea47 070b 	orr.w	r7, r7, fp
 801a212:	f820 700a 	strh.w	r7, [r0, sl]
 801a216:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801a218:	f10e 3eff 	add.w	lr, lr, #4294967295
 801a21c:	4401      	add	r1, r0
 801a21e:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801a220:	4402      	add	r2, r0
 801a222:	e759      	b.n	801a0d8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801a224:	b007      	add	sp, #28
 801a226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801a22c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a22c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a230:	b085      	sub	sp, #20
 801a232:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801a236:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801a238:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 801a23a:	9203      	str	r2, [sp, #12]
 801a23c:	6870      	ldr	r0, [r6, #4]
 801a23e:	686f      	ldr	r7, [r5, #4]
 801a240:	f8dd c044 	ldr.w	ip, [sp, #68]	@ 0x44
 801a244:	3704      	adds	r7, #4
 801a246:	9101      	str	r1, [sp, #4]
 801a248:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801a24c:	fb00 2404 	mla	r4, r0, r4, r2
 801a250:	6832      	ldr	r2, [r6, #0]
 801a252:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801a256:	682a      	ldr	r2, [r5, #0]
 801a258:	9202      	str	r2, [sp, #8]
 801a25a:	9a01      	ldr	r2, [sp, #4]
 801a25c:	2a00      	cmp	r2, #0
 801a25e:	dc03      	bgt.n	801a268 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801a260:	9a03      	ldr	r2, [sp, #12]
 801a262:	2a00      	cmp	r2, #0
 801a264:	f340 80cc 	ble.w	801a400 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801a268:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801a26a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801a26e:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801a272:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801a274:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801a278:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801a27c:	2b00      	cmp	r3, #0
 801a27e:	dd0d      	ble.n	801a29c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801a280:	1406      	asrs	r6, r0, #16
 801a282:	d405      	bmi.n	801a290 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801a284:	454e      	cmp	r6, r9
 801a286:	da03      	bge.n	801a290 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801a288:	1416      	asrs	r6, r2, #16
 801a28a:	d401      	bmi.n	801a290 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801a28c:	4546      	cmp	r6, r8
 801a28e:	db06      	blt.n	801a29e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a290:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801a292:	4460      	add	r0, ip
 801a294:	3b01      	subs	r3, #1
 801a296:	3402      	adds	r4, #2
 801a298:	4432      	add	r2, r6
 801a29a:	e7ef      	b.n	801a27c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801a29c:	d00f      	beq.n	801a2be <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801a29e:	1e5e      	subs	r6, r3, #1
 801a2a0:	fb0c 0e06 	mla	lr, ip, r6, r0
 801a2a4:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801a2a8:	d543      	bpl.n	801a332 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801a2aa:	4698      	mov	r8, r3
 801a2ac:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 801a2b0:	f1b8 0f00 	cmp.w	r8, #0
 801a2b4:	dc71      	bgt.n	801a39a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801a2b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a2ba:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a2be:	9b01      	ldr	r3, [sp, #4]
 801a2c0:	2b00      	cmp	r3, #0
 801a2c2:	f340 809d 	ble.w	801a400 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801a2c6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a2ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a2cc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a2d0:	eeb0 6a62 	vmov.f32	s12, s5
 801a2d4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a2d8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a2dc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a2e0:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801a2e4:	eeb0 6a43 	vmov.f32	s12, s6
 801a2e8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a2ec:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801a2f0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a2f4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a2f8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a2fc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a300:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a304:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a308:	ee12 2a90 	vmov	r2, s5
 801a30c:	eef0 2a47 	vmov.f32	s5, s14
 801a310:	fb92 fcf3 	sdiv	ip, r2, r3
 801a314:	ee13 2a10 	vmov	r2, s6
 801a318:	eeb0 3a67 	vmov.f32	s6, s15
 801a31c:	fb92 f3f3 	sdiv	r3, r2, r3
 801a320:	9312      	str	r3, [sp, #72]	@ 0x48
 801a322:	9b01      	ldr	r3, [sp, #4]
 801a324:	9a03      	ldr	r2, [sp, #12]
 801a326:	3b01      	subs	r3, #1
 801a328:	9301      	str	r3, [sp, #4]
 801a32a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a32c:	bf08      	it	eq
 801a32e:	4613      	moveq	r3, r2
 801a330:	e793      	b.n	801a25a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801a332:	45ce      	cmp	lr, r9
 801a334:	dab9      	bge.n	801a2aa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801a336:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801a338:	fb01 2606 	mla	r6, r1, r6, r2
 801a33c:	1436      	asrs	r6, r6, #16
 801a33e:	d4b4      	bmi.n	801a2aa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801a340:	4546      	cmp	r6, r8
 801a342:	dab2      	bge.n	801a2aa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801a344:	4698      	mov	r8, r3
 801a346:	46a2      	mov	sl, r4
 801a348:	f1b8 0f00 	cmp.w	r8, #0
 801a34c:	ddb3      	ble.n	801a2b6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801a34e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801a352:	1416      	asrs	r6, r2, #16
 801a354:	9902      	ldr	r1, [sp, #8]
 801a356:	ea4f 4e20 	mov.w	lr, r0, asr #16
 801a35a:	f108 38ff 	add.w	r8, r8, #4294967295
 801a35e:	4460      	add	r0, ip
 801a360:	fb09 1606 	mla	r6, r9, r6, r1
 801a364:	4928      	ldr	r1, [pc, #160]	@ (801a408 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 801a366:	f816 e00e 	ldrb.w	lr, [r6, lr]
 801a36a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801a36e:	eb07 0b0e 	add.w	fp, r7, lr
 801a372:	f89b 6001 	ldrb.w	r6, [fp, #1]
 801a376:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801a37a:	00f6      	lsls	r6, r6, #3
 801a37c:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 801a380:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801a382:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801a386:	440a      	add	r2, r1
 801a388:	ea49 0606 	orr.w	r6, r9, r6
 801a38c:	f817 900e 	ldrb.w	r9, [r7, lr]
 801a390:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 801a394:	f82a 6b02 	strh.w	r6, [sl], #2
 801a398:	e7d6      	b.n	801a348 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801a39a:	ea5f 4920 	movs.w	r9, r0, asr #16
 801a39e:	d429      	bmi.n	801a3f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801a3a0:	68ae      	ldr	r6, [r5, #8]
 801a3a2:	454e      	cmp	r6, r9
 801a3a4:	dd26      	ble.n	801a3f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801a3a6:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801a3aa:	d423      	bmi.n	801a3f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801a3ac:	68e9      	ldr	r1, [r5, #12]
 801a3ae:	4559      	cmp	r1, fp
 801a3b0:	dd20      	ble.n	801a3f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801a3b2:	fa0f fe86 	sxth.w	lr, r6
 801a3b6:	9902      	ldr	r1, [sp, #8]
 801a3b8:	fb0b 1e0e 	mla	lr, fp, lr, r1
 801a3bc:	f06f 0101 	mvn.w	r1, #1
 801a3c0:	f81e e009 	ldrb.w	lr, [lr, r9]
 801a3c4:	fb01 f908 	mul.w	r9, r1, r8
 801a3c8:	f2a1 71fe 	subw	r1, r1, #2046	@ 0x7fe
 801a3cc:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801a3d0:	eb07 060e 	add.w	r6, r7, lr
 801a3d4:	f896 b002 	ldrb.w	fp, [r6, #2]
 801a3d8:	7876      	ldrb	r6, [r6, #1]
 801a3da:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 801a3de:	00f6      	lsls	r6, r6, #3
 801a3e0:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801a3e4:	ea4b 0606 	orr.w	r6, fp, r6
 801a3e8:	f817 b00e 	ldrb.w	fp, [r7, lr]
 801a3ec:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 801a3f0:	f82a 6009 	strh.w	r6, [sl, r9]
 801a3f4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801a3f6:	4460      	add	r0, ip
 801a3f8:	f108 38ff 	add.w	r8, r8, #4294967295
 801a3fc:	440a      	add	r2, r1
 801a3fe:	e757      	b.n	801a2b0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801a400:	b005      	add	sp, #20
 801a402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a406:	bf00      	nop
 801a408:	fffff800 	.word	0xfffff800

0801a40c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a40c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a410:	b087      	sub	sp, #28
 801a412:	468b      	mov	fp, r1
 801a414:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801a418:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801a41a:	9204      	str	r2, [sp, #16]
 801a41c:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801a420:	6841      	ldr	r1, [r0, #4]
 801a422:	9205      	str	r2, [sp, #20]
 801a424:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 801a428:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 801a42c:	fb01 2404 	mla	r4, r1, r4, r2
 801a430:	6802      	ldr	r2, [r0, #0]
 801a432:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801a436:	f8dc 2000 	ldr.w	r2, [ip]
 801a43a:	9201      	str	r2, [sp, #4]
 801a43c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801a440:	3204      	adds	r2, #4
 801a442:	9202      	str	r2, [sp, #8]
 801a444:	f1bb 0f00 	cmp.w	fp, #0
 801a448:	dc03      	bgt.n	801a452 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801a44a:	9a04      	ldr	r2, [sp, #16]
 801a44c:	2a00      	cmp	r2, #0
 801a44e:	f340 8138 	ble.w	801a6c2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801a452:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801a454:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801a458:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801a45c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801a45e:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 801a462:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801a466:	2b00      	cmp	r3, #0
 801a468:	dd0e      	ble.n	801a488 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801a46a:	1402      	asrs	r2, r0, #16
 801a46c:	d405      	bmi.n	801a47a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801a46e:	42ba      	cmp	r2, r7
 801a470:	da03      	bge.n	801a47a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801a472:	140a      	asrs	r2, r1, #16
 801a474:	d401      	bmi.n	801a47a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801a476:	42b2      	cmp	r2, r6
 801a478:	db07      	blt.n	801a48a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801a47a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801a47c:	3b01      	subs	r3, #1
 801a47e:	3402      	adds	r4, #2
 801a480:	4410      	add	r0, r2
 801a482:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801a484:	4411      	add	r1, r2
 801a486:	e7ee      	b.n	801a466 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801a488:	d019      	beq.n	801a4be <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801a48a:	1e5a      	subs	r2, r3, #1
 801a48c:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801a48e:	fb05 0502 	mla	r5, r5, r2, r0
 801a492:	142d      	asrs	r5, r5, #16
 801a494:	d409      	bmi.n	801a4aa <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801a496:	42bd      	cmp	r5, r7
 801a498:	da07      	bge.n	801a4aa <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801a49a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801a49c:	fb05 1202 	mla	r2, r5, r2, r1
 801a4a0:	1412      	asrs	r2, r2, #16
 801a4a2:	d402      	bmi.n	801a4aa <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801a4a4:	42b2      	cmp	r2, r6
 801a4a6:	f2c0 80ac 	blt.w	801a602 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801a4aa:	f04f 0e00 	mov.w	lr, #0
 801a4ae:	eb03 020e 	add.w	r2, r3, lr
 801a4b2:	2a00      	cmp	r2, #0
 801a4b4:	dc3e      	bgt.n	801a534 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801a4b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a4ba:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a4be:	f1bb 0f00 	cmp.w	fp, #0
 801a4c2:	f340 80fe 	ble.w	801a6c2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801a4c6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a4ca:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a4cc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a4d0:	f1bb 0b01 	subs.w	fp, fp, #1
 801a4d4:	eeb0 6a62 	vmov.f32	s12, s5
 801a4d8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a4dc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a4e0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a4e4:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801a4e8:	eeb0 6a43 	vmov.f32	s12, s6
 801a4ec:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a4f0:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801a4f4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a4f8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a4fc:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a500:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a504:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a508:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a50c:	ee12 2a90 	vmov	r2, s5
 801a510:	eef0 2a47 	vmov.f32	s5, s14
 801a514:	fb92 f3f3 	sdiv	r3, r2, r3
 801a518:	ee13 2a10 	vmov	r2, s6
 801a51c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801a51e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a520:	eeb0 3a67 	vmov.f32	s6, s15
 801a524:	fb92 f3f3 	sdiv	r3, r2, r3
 801a528:	9a04      	ldr	r2, [sp, #16]
 801a52a:	9314      	str	r3, [sp, #80]	@ 0x50
 801a52c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a52e:	bf08      	it	eq
 801a530:	4613      	moveq	r3, r2
 801a532:	e787      	b.n	801a444 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801a534:	1406      	asrs	r6, r0, #16
 801a536:	d45d      	bmi.n	801a5f4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801a538:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801a53c:	42b5      	cmp	r5, r6
 801a53e:	dd59      	ble.n	801a5f4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801a540:	140f      	asrs	r7, r1, #16
 801a542:	d457      	bmi.n	801a5f4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801a544:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801a548:	42ba      	cmp	r2, r7
 801a54a:	dd53      	ble.n	801a5f4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801a54c:	9a01      	ldr	r2, [sp, #4]
 801a54e:	b22d      	sxth	r5, r5
 801a550:	fb07 2505 	mla	r5, r7, r5, r2
 801a554:	5daa      	ldrb	r2, [r5, r6]
 801a556:	9d02      	ldr	r5, [sp, #8]
 801a558:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801a55c:	0e2e      	lsrs	r6, r5, #24
 801a55e:	d049      	beq.n	801a5f4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801a560:	f06f 0201 	mvn.w	r2, #1
 801a564:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801a568:	fb02 f20e 	mul.w	r2, r2, lr
 801a56c:	f834 8002 	ldrh.w	r8, [r4, r2]
 801a570:	9203      	str	r2, [sp, #12]
 801a572:	9a05      	ldr	r2, [sp, #20]
 801a574:	ea4f 2728 	mov.w	r7, r8, asr #8
 801a578:	4356      	muls	r6, r2
 801a57a:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801a57e:	1c72      	adds	r2, r6, #1
 801a580:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801a584:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801a588:	b2ed      	uxtb	r5, r5
 801a58a:	1212      	asrs	r2, r2, #8
 801a58c:	fa1f f982 	uxth.w	r9, r2
 801a590:	43d2      	mvns	r2, r2
 801a592:	fb16 f609 	smulbb	r6, r6, r9
 801a596:	b2d2      	uxtb	r2, r2
 801a598:	fb15 f509 	smulbb	r5, r5, r9
 801a59c:	fb07 6702 	mla	r7, r7, r2, r6
 801a5a0:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801a5a4:	fb1a fa09 	smulbb	sl, sl, r9
 801a5a8:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801a5ac:	b2bf      	uxth	r7, r7
 801a5ae:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801a5b2:	fa5f f888 	uxtb.w	r8, r8
 801a5b6:	fb06 a602 	mla	r6, r6, r2, sl
 801a5ba:	fb08 5502 	mla	r5, r8, r2, r5
 801a5be:	1c7a      	adds	r2, r7, #1
 801a5c0:	b2b6      	uxth	r6, r6
 801a5c2:	b2ad      	uxth	r5, r5
 801a5c4:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801a5c8:	9a03      	ldr	r2, [sp, #12]
 801a5ca:	f105 0a01 	add.w	sl, r5, #1
 801a5ce:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801a5d2:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801a5d6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801a5da:	ea4a 0707 	orr.w	r7, sl, r7
 801a5de:	f106 0a01 	add.w	sl, r6, #1
 801a5e2:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801a5e6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801a5ea:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801a5ee:	ea47 070a 	orr.w	r7, r7, sl
 801a5f2:	52a7      	strh	r7, [r4, r2]
 801a5f4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801a5f6:	f10e 3eff 	add.w	lr, lr, #4294967295
 801a5fa:	4410      	add	r0, r2
 801a5fc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801a5fe:	4411      	add	r1, r2
 801a600:	e755      	b.n	801a4ae <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801a602:	f04f 0800 	mov.w	r8, #0
 801a606:	eba3 0208 	sub.w	r2, r3, r8
 801a60a:	2a00      	cmp	r2, #0
 801a60c:	f77f af53 	ble.w	801a4b6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801a610:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 801a614:	140a      	asrs	r2, r1, #16
 801a616:	9f01      	ldr	r7, [sp, #4]
 801a618:	1405      	asrs	r5, r0, #16
 801a61a:	fb06 7202 	mla	r2, r6, r2, r7
 801a61e:	5d52      	ldrb	r2, [r2, r5]
 801a620:	9d02      	ldr	r5, [sp, #8]
 801a622:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801a626:	0e2e      	lsrs	r6, r5, #24
 801a628:	d044      	beq.n	801a6b4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801a62a:	9a05      	ldr	r2, [sp, #20]
 801a62c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801a630:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801a634:	4356      	muls	r6, r2
 801a636:	ea4f 272e 	mov.w	r7, lr, asr #8
 801a63a:	1c72      	adds	r2, r6, #1
 801a63c:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801a640:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801a644:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801a648:	b2ed      	uxtb	r5, r5
 801a64a:	1212      	asrs	r2, r2, #8
 801a64c:	fa1f f982 	uxth.w	r9, r2
 801a650:	43d2      	mvns	r2, r2
 801a652:	fb16 f609 	smulbb	r6, r6, r9
 801a656:	b2d2      	uxtb	r2, r2
 801a658:	fb15 f509 	smulbb	r5, r5, r9
 801a65c:	fb07 6702 	mla	r7, r7, r2, r6
 801a660:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801a664:	fb1a fa09 	smulbb	sl, sl, r9
 801a668:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801a66c:	b2bf      	uxth	r7, r7
 801a66e:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801a672:	fa5f fe8e 	uxtb.w	lr, lr
 801a676:	fb06 a602 	mla	r6, r6, r2, sl
 801a67a:	fb0e 5502 	mla	r5, lr, r2, r5
 801a67e:	1c7a      	adds	r2, r7, #1
 801a680:	b2b6      	uxth	r6, r6
 801a682:	b2ad      	uxth	r5, r5
 801a684:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801a688:	f105 0a01 	add.w	sl, r5, #1
 801a68c:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801a690:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801a694:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801a698:	ea4a 0707 	orr.w	r7, sl, r7
 801a69c:	f106 0a01 	add.w	sl, r6, #1
 801a6a0:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801a6a4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801a6a8:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801a6ac:	ea47 070a 	orr.w	r7, r7, sl
 801a6b0:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801a6b4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801a6b6:	f108 0801 	add.w	r8, r8, #1
 801a6ba:	4410      	add	r0, r2
 801a6bc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801a6be:	4411      	add	r1, r2
 801a6c0:	e7a1      	b.n	801a606 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801a6c2:	b007      	add	sp, #28
 801a6c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a6c8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a6cc:	b085      	sub	sp, #20
 801a6ce:	468b      	mov	fp, r1
 801a6d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801a6d4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801a6d6:	9203      	str	r2, [sp, #12]
 801a6d8:	6841      	ldr	r1, [r0, #4]
 801a6da:	f8dd e058 	ldr.w	lr, [sp, #88]	@ 0x58
 801a6de:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801a6e2:	fb01 2404 	mla	r4, r1, r4, r2
 801a6e6:	6802      	ldr	r2, [r0, #0]
 801a6e8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801a6ec:	f8de 2000 	ldr.w	r2, [lr]
 801a6f0:	9200      	str	r2, [sp, #0]
 801a6f2:	f8de 2004 	ldr.w	r2, [lr, #4]
 801a6f6:	3204      	adds	r2, #4
 801a6f8:	9201      	str	r2, [sp, #4]
 801a6fa:	f1bb 0f00 	cmp.w	fp, #0
 801a6fe:	dc03      	bgt.n	801a708 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801a700:	9a03      	ldr	r2, [sp, #12]
 801a702:	2a00      	cmp	r2, #0
 801a704:	f340 8153 	ble.w	801a9ae <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801a708:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801a70a:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801a70e:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801a712:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801a714:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801a718:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801a71c:	2b00      	cmp	r3, #0
 801a71e:	dd0e      	ble.n	801a73e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801a720:	1408      	asrs	r0, r1, #16
 801a722:	d405      	bmi.n	801a730 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801a724:	42b8      	cmp	r0, r7
 801a726:	da03      	bge.n	801a730 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801a728:	1410      	asrs	r0, r2, #16
 801a72a:	d401      	bmi.n	801a730 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801a72c:	42b0      	cmp	r0, r6
 801a72e:	db07      	blt.n	801a740 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801a730:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801a732:	3b01      	subs	r3, #1
 801a734:	3402      	adds	r4, #2
 801a736:	4401      	add	r1, r0
 801a738:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801a73a:	4402      	add	r2, r0
 801a73c:	e7ee      	b.n	801a71c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801a73e:	d017      	beq.n	801a770 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801a740:	1e58      	subs	r0, r3, #1
 801a742:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801a744:	fb05 1500 	mla	r5, r5, r0, r1
 801a748:	142d      	asrs	r5, r5, #16
 801a74a:	d409      	bmi.n	801a760 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801a74c:	42bd      	cmp	r5, r7
 801a74e:	da07      	bge.n	801a760 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801a750:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801a752:	fb05 2000 	mla	r0, r5, r0, r2
 801a756:	1400      	asrs	r0, r0, #16
 801a758:	d402      	bmi.n	801a760 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801a75a:	42b0      	cmp	r0, r6
 801a75c:	f2c0 80bc 	blt.w	801a8d8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801a760:	2600      	movs	r6, #0
 801a762:	1998      	adds	r0, r3, r6
 801a764:	2800      	cmp	r0, #0
 801a766:	dc3e      	bgt.n	801a7e6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801a768:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a76c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a770:	f1bb 0f00 	cmp.w	fp, #0
 801a774:	f340 811b 	ble.w	801a9ae <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801a778:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a77c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a77e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a782:	f1bb 0b01 	subs.w	fp, fp, #1
 801a786:	eeb0 6a62 	vmov.f32	s12, s5
 801a78a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a78e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a792:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a796:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801a79a:	eeb0 6a43 	vmov.f32	s12, s6
 801a79e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a7a2:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801a7a6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a7aa:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a7ae:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a7b2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a7b6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a7ba:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a7be:	ee12 2a90 	vmov	r2, s5
 801a7c2:	eef0 2a47 	vmov.f32	s5, s14
 801a7c6:	fb92 f3f3 	sdiv	r3, r2, r3
 801a7ca:	ee13 2a10 	vmov	r2, s6
 801a7ce:	9311      	str	r3, [sp, #68]	@ 0x44
 801a7d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a7d2:	eeb0 3a67 	vmov.f32	s6, s15
 801a7d6:	fb92 f3f3 	sdiv	r3, r2, r3
 801a7da:	9a03      	ldr	r2, [sp, #12]
 801a7dc:	9312      	str	r3, [sp, #72]	@ 0x48
 801a7de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a7e0:	bf08      	it	eq
 801a7e2:	4613      	moveq	r3, r2
 801a7e4:	e789      	b.n	801a6fa <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801a7e6:	140f      	asrs	r7, r1, #16
 801a7e8:	d426      	bmi.n	801a838 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801a7ea:	f8de 5008 	ldr.w	r5, [lr, #8]
 801a7ee:	42bd      	cmp	r5, r7
 801a7f0:	dd22      	ble.n	801a838 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801a7f2:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801a7f6:	d41f      	bmi.n	801a838 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801a7f8:	f8de 000c 	ldr.w	r0, [lr, #12]
 801a7fc:	4560      	cmp	r0, ip
 801a7fe:	dd1b      	ble.n	801a838 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801a800:	9800      	ldr	r0, [sp, #0]
 801a802:	b22d      	sxth	r5, r5
 801a804:	fb0c 0505 	mla	r5, ip, r5, r0
 801a808:	5de8      	ldrb	r0, [r5, r7]
 801a80a:	9d01      	ldr	r5, [sp, #4]
 801a80c:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801a810:	0e07      	lsrs	r7, r0, #24
 801a812:	2fff      	cmp	r7, #255	@ 0xff
 801a814:	d116      	bne.n	801a844 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801a816:	f06f 0501 	mvn.w	r5, #1
 801a81a:	fb05 f706 	mul.w	r7, r5, r6
 801a81e:	f2a5 75fe 	subw	r5, r5, #2046	@ 0x7fe
 801a822:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801a826:	0945      	lsrs	r5, r0, #5
 801a828:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801a82c:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801a830:	ea4c 0505 	orr.w	r5, ip, r5
 801a834:	4305      	orrs	r5, r0
 801a836:	53e5      	strh	r5, [r4, r7]
 801a838:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801a83a:	3e01      	subs	r6, #1
 801a83c:	4401      	add	r1, r0
 801a83e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801a840:	4402      	add	r2, r0
 801a842:	e78e      	b.n	801a762 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801a844:	b2fd      	uxtb	r5, r7
 801a846:	2f00      	cmp	r7, #0
 801a848:	d0f6      	beq.n	801a838 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801a84a:	f06f 0701 	mvn.w	r7, #1
 801a84e:	fa1f f985 	uxth.w	r9, r5
 801a852:	43ed      	mvns	r5, r5
 801a854:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801a858:	4377      	muls	r7, r6
 801a85a:	fb1a fa09 	smulbb	sl, sl, r9
 801a85e:	b2ed      	uxtb	r5, r5
 801a860:	f834 8007 	ldrh.w	r8, [r4, r7]
 801a864:	9702      	str	r7, [sp, #8]
 801a866:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801a86a:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801a86e:	fb17 f709 	smulbb	r7, r7, r9
 801a872:	b2c0      	uxtb	r0, r0
 801a874:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801a878:	fb10 f009 	smulbb	r0, r0, r9
 801a87c:	fb0c 7c05 	mla	ip, ip, r5, r7
 801a880:	ea4f 07e8 	mov.w	r7, r8, asr #3
 801a884:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801a888:	fa1f fc8c 	uxth.w	ip, ip
 801a88c:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801a890:	fa5f f888 	uxtb.w	r8, r8
 801a894:	fb07 a705 	mla	r7, r7, r5, sl
 801a898:	fb08 0005 	mla	r0, r8, r5, r0
 801a89c:	f10c 0501 	add.w	r5, ip, #1
 801a8a0:	b2bf      	uxth	r7, r7
 801a8a2:	b280      	uxth	r0, r0
 801a8a4:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801a8a8:	f100 0a01 	add.w	sl, r0, #1
 801a8ac:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801a8b0:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801a8b4:	9802      	ldr	r0, [sp, #8]
 801a8b6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801a8ba:	ea4a 0c0c 	orr.w	ip, sl, ip
 801a8be:	f107 0a01 	add.w	sl, r7, #1
 801a8c2:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801a8c6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801a8ca:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801a8ce:	ea4c 0c0a 	orr.w	ip, ip, sl
 801a8d2:	f824 c000 	strh.w	ip, [r4, r0]
 801a8d6:	e7af      	b.n	801a838 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801a8d8:	f04f 0800 	mov.w	r8, #0
 801a8dc:	eba3 0008 	sub.w	r0, r3, r8
 801a8e0:	2800      	cmp	r0, #0
 801a8e2:	f77f af41 	ble.w	801a768 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801a8e6:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801a8ea:	1410      	asrs	r0, r2, #16
 801a8ec:	9f00      	ldr	r7, [sp, #0]
 801a8ee:	140d      	asrs	r5, r1, #16
 801a8f0:	fb06 7000 	mla	r0, r6, r0, r7
 801a8f4:	5d40      	ldrb	r0, [r0, r5]
 801a8f6:	9d01      	ldr	r5, [sp, #4]
 801a8f8:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801a8fc:	0e2e      	lsrs	r6, r5, #24
 801a8fe:	2eff      	cmp	r6, #255	@ 0xff
 801a900:	d112      	bne.n	801a928 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 801a902:	482c      	ldr	r0, [pc, #176]	@ (801a9b4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801a904:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801a908:	0968      	lsrs	r0, r5, #5
 801a90a:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801a90e:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801a912:	4330      	orrs	r0, r6
 801a914:	4328      	orrs	r0, r5
 801a916:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 801a91a:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801a91c:	f108 0801 	add.w	r8, r8, #1
 801a920:	4401      	add	r1, r0
 801a922:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801a924:	4402      	add	r2, r0
 801a926:	e7d9      	b.n	801a8dc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801a928:	b2f0      	uxtb	r0, r6
 801a92a:	2e00      	cmp	r6, #0
 801a92c:	d0f5      	beq.n	801a91a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801a92e:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 801a932:	fa1f f980 	uxth.w	r9, r0
 801a936:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801a93a:	43c0      	mvns	r0, r0
 801a93c:	ea4f 272c 	mov.w	r7, ip, asr #8
 801a940:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801a944:	fb16 f609 	smulbb	r6, r6, r9
 801a948:	b2c0      	uxtb	r0, r0
 801a94a:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801a94e:	b2ed      	uxtb	r5, r5
 801a950:	fb1a fa09 	smulbb	sl, sl, r9
 801a954:	fb07 6700 	mla	r7, r7, r0, r6
 801a958:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801a95c:	fb15 f509 	smulbb	r5, r5, r9
 801a960:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801a964:	b2bf      	uxth	r7, r7
 801a966:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801a96a:	fa5f fc8c 	uxtb.w	ip, ip
 801a96e:	fb06 a600 	mla	r6, r6, r0, sl
 801a972:	fb0c 5500 	mla	r5, ip, r0, r5
 801a976:	1c78      	adds	r0, r7, #1
 801a978:	b2b6      	uxth	r6, r6
 801a97a:	b2ad      	uxth	r5, r5
 801a97c:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801a980:	f105 0a01 	add.w	sl, r5, #1
 801a984:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801a988:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801a98c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801a990:	ea4a 0707 	orr.w	r7, sl, r7
 801a994:	f106 0a01 	add.w	sl, r6, #1
 801a998:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801a99c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801a9a0:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801a9a4:	ea47 070a 	orr.w	r7, r7, sl
 801a9a8:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801a9ac:	e7b5      	b.n	801a91a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801a9ae:	b005      	add	sp, #20
 801a9b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a9b4:	fffff800 	.word	0xfffff800

0801a9b8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a9b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9bc:	b087      	sub	sp, #28
 801a9be:	468b      	mov	fp, r1
 801a9c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801a9c4:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801a9c6:	9204      	str	r2, [sp, #16]
 801a9c8:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801a9cc:	6861      	ldr	r1, [r4, #4]
 801a9ce:	9205      	str	r2, [sp, #20]
 801a9d0:	f8dd e060 	ldr.w	lr, [sp, #96]	@ 0x60
 801a9d4:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	@ 0x58
 801a9d8:	fb01 2000 	mla	r0, r1, r0, r2
 801a9dc:	6822      	ldr	r2, [r4, #0]
 801a9de:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801a9e2:	f8de 2000 	ldr.w	r2, [lr]
 801a9e6:	9201      	str	r2, [sp, #4]
 801a9e8:	f8de 2004 	ldr.w	r2, [lr, #4]
 801a9ec:	9202      	str	r2, [sp, #8]
 801a9ee:	f1bb 0f00 	cmp.w	fp, #0
 801a9f2:	dc03      	bgt.n	801a9fc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801a9f4:	9a04      	ldr	r2, [sp, #16]
 801a9f6:	2a00      	cmp	r2, #0
 801a9f8:	f340 8142 	ble.w	801ac80 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801a9fc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801a9fe:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801aa02:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801aa06:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801aa08:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801aa0c:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801aa10:	2b00      	cmp	r3, #0
 801aa12:	dd0e      	ble.n	801aa32 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801aa14:	140c      	asrs	r4, r1, #16
 801aa16:	d405      	bmi.n	801aa24 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801aa18:	42bc      	cmp	r4, r7
 801aa1a:	da03      	bge.n	801aa24 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801aa1c:	1414      	asrs	r4, r2, #16
 801aa1e:	d401      	bmi.n	801aa24 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801aa20:	42b4      	cmp	r4, r6
 801aa22:	db07      	blt.n	801aa34 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801aa24:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801aa26:	3b01      	subs	r3, #1
 801aa28:	3002      	adds	r0, #2
 801aa2a:	4421      	add	r1, r4
 801aa2c:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801aa2e:	4422      	add	r2, r4
 801aa30:	e7ee      	b.n	801aa10 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801aa32:	d019      	beq.n	801aa68 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801aa34:	1e5c      	subs	r4, r3, #1
 801aa36:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801aa38:	fb05 1504 	mla	r5, r5, r4, r1
 801aa3c:	142d      	asrs	r5, r5, #16
 801aa3e:	d409      	bmi.n	801aa54 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801aa40:	42bd      	cmp	r5, r7
 801aa42:	da07      	bge.n	801aa54 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801aa44:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801aa46:	fb05 2404 	mla	r4, r5, r4, r2
 801aa4a:	1424      	asrs	r4, r4, #16
 801aa4c:	d402      	bmi.n	801aa54 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801aa4e:	42b4      	cmp	r4, r6
 801aa50:	f2c0 80b1 	blt.w	801abb6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801aa54:	f04f 0800 	mov.w	r8, #0
 801aa58:	eb03 0408 	add.w	r4, r3, r8
 801aa5c:	2c00      	cmp	r4, #0
 801aa5e:	dc3e      	bgt.n	801aade <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801aa60:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801aa64:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801aa68:	f1bb 0f00 	cmp.w	fp, #0
 801aa6c:	f340 8108 	ble.w	801ac80 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801aa70:	ee30 0a04 	vadd.f32	s0, s0, s8
 801aa74:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801aa76:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801aa7a:	f1bb 0b01 	subs.w	fp, fp, #1
 801aa7e:	eeb0 6a62 	vmov.f32	s12, s5
 801aa82:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801aa86:	ee31 1a05 	vadd.f32	s2, s2, s10
 801aa8a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801aa8e:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801aa92:	eeb0 6a43 	vmov.f32	s12, s6
 801aa96:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801aa9a:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801aa9e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801aaa2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801aaa6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801aaaa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801aaae:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801aab2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801aab6:	ee12 2a90 	vmov	r2, s5
 801aaba:	eef0 2a47 	vmov.f32	s5, s14
 801aabe:	fb92 f3f3 	sdiv	r3, r2, r3
 801aac2:	ee13 2a10 	vmov	r2, s6
 801aac6:	9313      	str	r3, [sp, #76]	@ 0x4c
 801aac8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801aaca:	eeb0 3a67 	vmov.f32	s6, s15
 801aace:	fb92 f3f3 	sdiv	r3, r2, r3
 801aad2:	9a04      	ldr	r2, [sp, #16]
 801aad4:	9314      	str	r3, [sp, #80]	@ 0x50
 801aad6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801aad8:	bf08      	it	eq
 801aada:	4613      	moveq	r3, r2
 801aadc:	e787      	b.n	801a9ee <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801aade:	140e      	asrs	r6, r1, #16
 801aae0:	d462      	bmi.n	801aba8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801aae2:	f8de 5008 	ldr.w	r5, [lr, #8]
 801aae6:	42b5      	cmp	r5, r6
 801aae8:	dd5e      	ble.n	801aba8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801aaea:	1417      	asrs	r7, r2, #16
 801aaec:	d45c      	bmi.n	801aba8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801aaee:	f8de 400c 	ldr.w	r4, [lr, #12]
 801aaf2:	42bc      	cmp	r4, r7
 801aaf4:	dd58      	ble.n	801aba8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801aaf6:	b22d      	sxth	r5, r5
 801aaf8:	9c02      	ldr	r4, [sp, #8]
 801aafa:	fb07 6505 	mla	r5, r7, r5, r6
 801aafe:	5d66      	ldrb	r6, [r4, r5]
 801ab00:	2e00      	cmp	r6, #0
 801ab02:	d051      	beq.n	801aba8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801ab04:	9c01      	ldr	r4, [sp, #4]
 801ab06:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 801ab0a:	f06f 0401 	mvn.w	r4, #1
 801ab0e:	fb04 f408 	mul.w	r4, r4, r8
 801ab12:	ea4f 2c29 	mov.w	ip, r9, asr #8
 801ab16:	5b05      	ldrh	r5, [r0, r4]
 801ab18:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801ab1c:	9403      	str	r4, [sp, #12]
 801ab1e:	9c05      	ldr	r4, [sp, #20]
 801ab20:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801ab24:	4366      	muls	r6, r4
 801ab26:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801ab2a:	1c74      	adds	r4, r6, #1
 801ab2c:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801ab30:	122e      	asrs	r6, r5, #8
 801ab32:	1224      	asrs	r4, r4, #8
 801ab34:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801ab38:	00ed      	lsls	r5, r5, #3
 801ab3a:	b2a7      	uxth	r7, r4
 801ab3c:	43e4      	mvns	r4, r4
 801ab3e:	b2ed      	uxtb	r5, r5
 801ab40:	b2e4      	uxtb	r4, r4
 801ab42:	fb16 f604 	smulbb	r6, r6, r4
 801ab46:	fb15 f504 	smulbb	r5, r5, r4
 801ab4a:	fb0c 6c07 	mla	ip, ip, r7, r6
 801ab4e:	ea4f 06e9 	mov.w	r6, r9, asr #3
 801ab52:	fb1a fa04 	smulbb	sl, sl, r4
 801ab56:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801ab5a:	fa1f fc8c 	uxth.w	ip, ip
 801ab5e:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801ab62:	fa5f f989 	uxtb.w	r9, r9
 801ab66:	fb06 a607 	mla	r6, r6, r7, sl
 801ab6a:	f10c 0401 	add.w	r4, ip, #1
 801ab6e:	fb09 5507 	mla	r5, r9, r7, r5
 801ab72:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801ab76:	9c03      	ldr	r4, [sp, #12]
 801ab78:	b2ad      	uxth	r5, r5
 801ab7a:	b2b6      	uxth	r6, r6
 801ab7c:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801ab80:	f105 0a01 	add.w	sl, r5, #1
 801ab84:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801ab88:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ab8c:	ea4a 0c0c 	orr.w	ip, sl, ip
 801ab90:	f106 0a01 	add.w	sl, r6, #1
 801ab94:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801ab98:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ab9c:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801aba0:	ea4c 0c0a 	orr.w	ip, ip, sl
 801aba4:	f820 c004 	strh.w	ip, [r0, r4]
 801aba8:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801abaa:	f108 38ff 	add.w	r8, r8, #4294967295
 801abae:	4421      	add	r1, r4
 801abb0:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801abb2:	4422      	add	r2, r4
 801abb4:	e750      	b.n	801aa58 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801abb6:	f04f 0900 	mov.w	r9, #0
 801abba:	eba3 0409 	sub.w	r4, r3, r9
 801abbe:	2c00      	cmp	r4, #0
 801abc0:	f77f af4e 	ble.w	801aa60 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801abc4:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801abc8:	140d      	asrs	r5, r1, #16
 801abca:	1414      	asrs	r4, r2, #16
 801abcc:	fb06 5404 	mla	r4, r6, r4, r5
 801abd0:	9d02      	ldr	r5, [sp, #8]
 801abd2:	5d2e      	ldrb	r6, [r5, r4]
 801abd4:	2e00      	cmp	r6, #0
 801abd6:	d04c      	beq.n	801ac72 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801abd8:	9d01      	ldr	r5, [sp, #4]
 801abda:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 801abde:	9c05      	ldr	r4, [sp, #20]
 801abe0:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801abe4:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801abe8:	4366      	muls	r6, r4
 801abea:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801abee:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801abf2:	1c74      	adds	r4, r6, #1
 801abf4:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801abf8:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801abfc:	122e      	asrs	r6, r5, #8
 801abfe:	1224      	asrs	r4, r4, #8
 801ac00:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801ac04:	00ed      	lsls	r5, r5, #3
 801ac06:	b2a7      	uxth	r7, r4
 801ac08:	43e4      	mvns	r4, r4
 801ac0a:	b2ed      	uxtb	r5, r5
 801ac0c:	b2e4      	uxtb	r4, r4
 801ac0e:	fb16 f604 	smulbb	r6, r6, r4
 801ac12:	fb15 f504 	smulbb	r5, r5, r4
 801ac16:	fb0c 6c07 	mla	ip, ip, r7, r6
 801ac1a:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801ac1e:	fb1a fa04 	smulbb	sl, sl, r4
 801ac22:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801ac26:	fa1f fc8c 	uxth.w	ip, ip
 801ac2a:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801ac2e:	fa5f f888 	uxtb.w	r8, r8
 801ac32:	fb06 a607 	mla	r6, r6, r7, sl
 801ac36:	f10c 0401 	add.w	r4, ip, #1
 801ac3a:	fb08 5507 	mla	r5, r8, r7, r5
 801ac3e:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801ac42:	b2ad      	uxth	r5, r5
 801ac44:	b2b6      	uxth	r6, r6
 801ac46:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801ac4a:	f105 0a01 	add.w	sl, r5, #1
 801ac4e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801ac52:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ac56:	ea4a 0c0c 	orr.w	ip, sl, ip
 801ac5a:	f106 0a01 	add.w	sl, r6, #1
 801ac5e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801ac62:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ac66:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801ac6a:	ea4c 0c0a 	orr.w	ip, ip, sl
 801ac6e:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801ac72:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801ac74:	f109 0901 	add.w	r9, r9, #1
 801ac78:	4421      	add	r1, r4
 801ac7a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801ac7c:	4422      	add	r2, r4
 801ac7e:	e79c      	b.n	801abba <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801ac80:	b007      	add	sp, #28
 801ac82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ac86 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ac86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac8a:	b085      	sub	sp, #20
 801ac8c:	468b      	mov	fp, r1
 801ac8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ac92:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801ac94:	9203      	str	r2, [sp, #12]
 801ac96:	6861      	ldr	r1, [r4, #4]
 801ac98:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801ac9c:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	@ 0x50
 801aca0:	fb01 2000 	mla	r0, r1, r0, r2
 801aca4:	6822      	ldr	r2, [r4, #0]
 801aca6:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801acaa:	f8d8 2000 	ldr.w	r2, [r8]
 801acae:	9200      	str	r2, [sp, #0]
 801acb0:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801acb4:	9201      	str	r2, [sp, #4]
 801acb6:	f1bb 0f00 	cmp.w	fp, #0
 801acba:	dc03      	bgt.n	801acc4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801acbc:	9a03      	ldr	r2, [sp, #12]
 801acbe:	2a00      	cmp	r2, #0
 801acc0:	f340 8146 	ble.w	801af50 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801acc4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801acc6:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801acca:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801acce:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801acd0:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801acd4:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801acd8:	2b00      	cmp	r3, #0
 801acda:	dd0e      	ble.n	801acfa <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801acdc:	140c      	asrs	r4, r1, #16
 801acde:	d405      	bmi.n	801acec <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801ace0:	42bc      	cmp	r4, r7
 801ace2:	da03      	bge.n	801acec <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801ace4:	1414      	asrs	r4, r2, #16
 801ace6:	d401      	bmi.n	801acec <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801ace8:	42b4      	cmp	r4, r6
 801acea:	db07      	blt.n	801acfc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801acec:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801acee:	3b01      	subs	r3, #1
 801acf0:	3002      	adds	r0, #2
 801acf2:	4421      	add	r1, r4
 801acf4:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801acf6:	4422      	add	r2, r4
 801acf8:	e7ee      	b.n	801acd8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801acfa:	d017      	beq.n	801ad2c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801acfc:	1e5c      	subs	r4, r3, #1
 801acfe:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801ad00:	fb05 1504 	mla	r5, r5, r4, r1
 801ad04:	142d      	asrs	r5, r5, #16
 801ad06:	d409      	bmi.n	801ad1c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801ad08:	42bd      	cmp	r5, r7
 801ad0a:	da07      	bge.n	801ad1c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801ad0c:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801ad0e:	fb05 2404 	mla	r4, r5, r4, r2
 801ad12:	1424      	asrs	r4, r4, #16
 801ad14:	d402      	bmi.n	801ad1c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801ad16:	42b4      	cmp	r4, r6
 801ad18:	f2c0 80b3 	blt.w	801ae82 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801ad1c:	2600      	movs	r6, #0
 801ad1e:	199c      	adds	r4, r3, r6
 801ad20:	2c00      	cmp	r4, #0
 801ad22:	dc3e      	bgt.n	801ada2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801ad24:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ad28:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801ad2c:	f1bb 0f00 	cmp.w	fp, #0
 801ad30:	f340 810e 	ble.w	801af50 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801ad34:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ad38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ad3a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ad3e:	f1bb 0b01 	subs.w	fp, fp, #1
 801ad42:	eeb0 6a62 	vmov.f32	s12, s5
 801ad46:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ad4a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ad4e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ad52:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801ad56:	eeb0 6a43 	vmov.f32	s12, s6
 801ad5a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ad5e:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801ad62:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ad66:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ad6a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ad6e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ad72:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ad76:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ad7a:	ee12 2a90 	vmov	r2, s5
 801ad7e:	eef0 2a47 	vmov.f32	s5, s14
 801ad82:	fb92 f3f3 	sdiv	r3, r2, r3
 801ad86:	ee13 2a10 	vmov	r2, s6
 801ad8a:	9311      	str	r3, [sp, #68]	@ 0x44
 801ad8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ad8e:	eeb0 3a67 	vmov.f32	s6, s15
 801ad92:	fb92 f3f3 	sdiv	r3, r2, r3
 801ad96:	9a03      	ldr	r2, [sp, #12]
 801ad98:	9312      	str	r3, [sp, #72]	@ 0x48
 801ad9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ad9c:	bf08      	it	eq
 801ad9e:	4613      	moveq	r3, r2
 801ada0:	e789      	b.n	801acb6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801ada2:	140f      	asrs	r7, r1, #16
 801ada4:	d418      	bmi.n	801add8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801ada6:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801adaa:	42bd      	cmp	r5, r7
 801adac:	dd14      	ble.n	801add8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801adae:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801adb2:	d411      	bmi.n	801add8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801adb4:	f8d8 400c 	ldr.w	r4, [r8, #12]
 801adb8:	4564      	cmp	r4, ip
 801adba:	dd0d      	ble.n	801add8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801adbc:	b22d      	sxth	r5, r5
 801adbe:	9c01      	ldr	r4, [sp, #4]
 801adc0:	fb0c 7505 	mla	r5, ip, r5, r7
 801adc4:	5d64      	ldrb	r4, [r4, r5]
 801adc6:	2cff      	cmp	r4, #255	@ 0xff
 801adc8:	d10c      	bne.n	801ade4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801adca:	9c00      	ldr	r4, [sp, #0]
 801adcc:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 801add0:	f06f 0401 	mvn.w	r4, #1
 801add4:	4374      	muls	r4, r6
 801add6:	5305      	strh	r5, [r0, r4]
 801add8:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801adda:	3e01      	subs	r6, #1
 801addc:	4421      	add	r1, r4
 801adde:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801ade0:	4422      	add	r2, r4
 801ade2:	e79c      	b.n	801ad1e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ade4:	2c00      	cmp	r4, #0
 801ade6:	d0f7      	beq.n	801add8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801ade8:	9f00      	ldr	r7, [sp, #0]
 801adea:	fa1f fc84 	uxth.w	ip, r4
 801adee:	43e4      	mvns	r4, r4
 801adf0:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 801adf4:	f06f 0501 	mvn.w	r5, #1
 801adf8:	b2e4      	uxtb	r4, r4
 801adfa:	4375      	muls	r5, r6
 801adfc:	ea4f 2e29 	mov.w	lr, r9, asr #8
 801ae00:	9502      	str	r5, [sp, #8]
 801ae02:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 801ae06:	5b45      	ldrh	r5, [r0, r5]
 801ae08:	122f      	asrs	r7, r5, #8
 801ae0a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801ae0e:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801ae12:	00ed      	lsls	r5, r5, #3
 801ae14:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801ae18:	fb17 f704 	smulbb	r7, r7, r4
 801ae1c:	b2ed      	uxtb	r5, r5
 801ae1e:	fb1a fa04 	smulbb	sl, sl, r4
 801ae22:	fb0e 7e0c 	mla	lr, lr, ip, r7
 801ae26:	ea4f 07e9 	mov.w	r7, r9, asr #3
 801ae2a:	fb15 f504 	smulbb	r5, r5, r4
 801ae2e:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801ae32:	fa1f fe8e 	uxth.w	lr, lr
 801ae36:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801ae3a:	fa5f f989 	uxtb.w	r9, r9
 801ae3e:	fb07 a70c 	mla	r7, r7, ip, sl
 801ae42:	f10e 0401 	add.w	r4, lr, #1
 801ae46:	fb09 550c 	mla	r5, r9, ip, r5
 801ae4a:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 801ae4e:	9c02      	ldr	r4, [sp, #8]
 801ae50:	b2ad      	uxth	r5, r5
 801ae52:	b2bf      	uxth	r7, r7
 801ae54:	f40e 4e78 	and.w	lr, lr, #63488	@ 0xf800
 801ae58:	f105 0a01 	add.w	sl, r5, #1
 801ae5c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801ae60:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ae64:	ea4a 0e0e 	orr.w	lr, sl, lr
 801ae68:	f107 0a01 	add.w	sl, r7, #1
 801ae6c:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801ae70:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ae74:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801ae78:	ea4e 0e0a 	orr.w	lr, lr, sl
 801ae7c:	f820 e004 	strh.w	lr, [r0, r4]
 801ae80:	e7aa      	b.n	801add8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801ae82:	f04f 0900 	mov.w	r9, #0
 801ae86:	eba3 0409 	sub.w	r4, r3, r9
 801ae8a:	2c00      	cmp	r4, #0
 801ae8c:	f77f af4a 	ble.w	801ad24 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801ae90:	1414      	asrs	r4, r2, #16
 801ae92:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801ae96:	140d      	asrs	r5, r1, #16
 801ae98:	fb06 5504 	mla	r5, r6, r4, r5
 801ae9c:	9c01      	ldr	r4, [sp, #4]
 801ae9e:	5d64      	ldrb	r4, [r4, r5]
 801aea0:	2cff      	cmp	r4, #255	@ 0xff
 801aea2:	d10b      	bne.n	801aebc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801aea4:	9c00      	ldr	r4, [sp, #0]
 801aea6:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801aeaa:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 801aeae:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801aeb0:	f109 0901 	add.w	r9, r9, #1
 801aeb4:	4421      	add	r1, r4
 801aeb6:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801aeb8:	4422      	add	r2, r4
 801aeba:	e7e4      	b.n	801ae86 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801aebc:	2c00      	cmp	r4, #0
 801aebe:	d0f6      	beq.n	801aeae <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801aec0:	9e00      	ldr	r6, [sp, #0]
 801aec2:	b2a7      	uxth	r7, r4
 801aec4:	43e4      	mvns	r4, r4
 801aec6:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 801aeca:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801aece:	b2e4      	uxtb	r4, r4
 801aed0:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801aed4:	122e      	asrs	r6, r5, #8
 801aed6:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801aeda:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801aede:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801aee2:	00ed      	lsls	r5, r5, #3
 801aee4:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801aee8:	fb16 f604 	smulbb	r6, r6, r4
 801aeec:	b2ed      	uxtb	r5, r5
 801aeee:	fb1a fa04 	smulbb	sl, sl, r4
 801aef2:	fb0c 6c07 	mla	ip, ip, r7, r6
 801aef6:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801aefa:	fb15 f504 	smulbb	r5, r5, r4
 801aefe:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801af02:	fa1f fc8c 	uxth.w	ip, ip
 801af06:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801af0a:	fa5f fe8e 	uxtb.w	lr, lr
 801af0e:	fb06 a607 	mla	r6, r6, r7, sl
 801af12:	f10c 0401 	add.w	r4, ip, #1
 801af16:	fb0e 5507 	mla	r5, lr, r7, r5
 801af1a:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801af1e:	b2ad      	uxth	r5, r5
 801af20:	b2b6      	uxth	r6, r6
 801af22:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801af26:	f105 0a01 	add.w	sl, r5, #1
 801af2a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801af2e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801af32:	ea4a 0c0c 	orr.w	ip, sl, ip
 801af36:	f106 0a01 	add.w	sl, r6, #1
 801af3a:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801af3e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801af42:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801af46:	ea4c 0c0a 	orr.w	ip, ip, sl
 801af4a:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801af4e:	e7ae      	b.n	801aeae <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801af50:	b005      	add	sp, #20
 801af52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801af56 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801af56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af5a:	b085      	sub	sp, #20
 801af5c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801af5e:	9203      	str	r2, [sp, #12]
 801af60:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 801af64:	9100      	str	r1, [sp, #0]
 801af66:	9201      	str	r2, [sp, #4]
 801af68:	6841      	ldr	r1, [r0, #4]
 801af6a:	f8dd e058 	ldr.w	lr, [sp, #88]	@ 0x58
 801af6e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801af72:	fb01 2404 	mla	r4, r1, r4, r2
 801af76:	6802      	ldr	r2, [r0, #0]
 801af78:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801af7c:	f8de 2000 	ldr.w	r2, [lr]
 801af80:	9202      	str	r2, [sp, #8]
 801af82:	9a01      	ldr	r2, [sp, #4]
 801af84:	43d6      	mvns	r6, r2
 801af86:	b2f6      	uxtb	r6, r6
 801af88:	9a00      	ldr	r2, [sp, #0]
 801af8a:	2a00      	cmp	r2, #0
 801af8c:	dc03      	bgt.n	801af96 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801af8e:	9a03      	ldr	r2, [sp, #12]
 801af90:	2a00      	cmp	r2, #0
 801af92:	f340 8124 	ble.w	801b1de <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801af96:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801af98:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801af9c:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801afa0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801afa2:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801afa6:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801afaa:	2b00      	cmp	r3, #0
 801afac:	dd0e      	ble.n	801afcc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801afae:	1408      	asrs	r0, r1, #16
 801afb0:	d405      	bmi.n	801afbe <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801afb2:	4560      	cmp	r0, ip
 801afb4:	da03      	bge.n	801afbe <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801afb6:	1410      	asrs	r0, r2, #16
 801afb8:	d401      	bmi.n	801afbe <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801afba:	42b8      	cmp	r0, r7
 801afbc:	db07      	blt.n	801afce <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801afbe:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801afc0:	3b01      	subs	r3, #1
 801afc2:	3402      	adds	r4, #2
 801afc4:	4401      	add	r1, r0
 801afc6:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801afc8:	4402      	add	r2, r0
 801afca:	e7ee      	b.n	801afaa <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801afcc:	d06e      	beq.n	801b0ac <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801afce:	1e58      	subs	r0, r3, #1
 801afd0:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801afd2:	fb05 1500 	mla	r5, r5, r0, r1
 801afd6:	142d      	asrs	r5, r5, #16
 801afd8:	d45c      	bmi.n	801b094 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801afda:	4565      	cmp	r5, ip
 801afdc:	da5a      	bge.n	801b094 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801afde:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801afe0:	fb05 2000 	mla	r0, r5, r0, r2
 801afe4:	1400      	asrs	r0, r0, #16
 801afe6:	d455      	bmi.n	801b094 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801afe8:	42b8      	cmp	r0, r7
 801afea:	da53      	bge.n	801b094 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801afec:	4699      	mov	r9, r3
 801afee:	46a2      	mov	sl, r4
 801aff0:	f8bd b004 	ldrh.w	fp, [sp, #4]
 801aff4:	f1b9 0f00 	cmp.w	r9, #0
 801aff8:	dd54      	ble.n	801b0a4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801affa:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801affe:	140d      	asrs	r5, r1, #16
 801b000:	1410      	asrs	r0, r2, #16
 801b002:	f109 39ff 	add.w	r9, r9, #4294967295
 801b006:	fb07 5000 	mla	r0, r7, r0, r5
 801b00a:	9d02      	ldr	r5, [sp, #8]
 801b00c:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801b010:	f8ba 5000 	ldrh.w	r5, [sl]
 801b014:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801b018:	122f      	asrs	r7, r5, #8
 801b01a:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801b01e:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801b022:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801b026:	00ed      	lsls	r5, r5, #3
 801b028:	f008 08fc 	and.w	r8, r8, #252	@ 0xfc
 801b02c:	fb17 f706 	smulbb	r7, r7, r6
 801b030:	b2ed      	uxtb	r5, r5
 801b032:	fb18 f806 	smulbb	r8, r8, r6
 801b036:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801b03a:	10c7      	asrs	r7, r0, #3
 801b03c:	fb15 f506 	smulbb	r5, r5, r6
 801b040:	00c0      	lsls	r0, r0, #3
 801b042:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801b046:	fa1f fc8c 	uxth.w	ip, ip
 801b04a:	b2c0      	uxtb	r0, r0
 801b04c:	fb07 870b 	mla	r7, r7, fp, r8
 801b050:	fb00 500b 	mla	r0, r0, fp, r5
 801b054:	f10c 0501 	add.w	r5, ip, #1
 801b058:	b2bf      	uxth	r7, r7
 801b05a:	b280      	uxth	r0, r0
 801b05c:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801b060:	f107 0801 	add.w	r8, r7, #1
 801b064:	1c45      	adds	r5, r0, #1
 801b066:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801b06a:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801b06e:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801b072:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801b074:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801b078:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801b07c:	4401      	add	r1, r0
 801b07e:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 801b082:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801b084:	ea45 0c0c 	orr.w	ip, r5, ip
 801b088:	4402      	add	r2, r0
 801b08a:	ea4c 0c08 	orr.w	ip, ip, r8
 801b08e:	f82a cb02 	strh.w	ip, [sl], #2
 801b092:	e7af      	b.n	801aff4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801b094:	f04f 0800 	mov.w	r8, #0
 801b098:	f8bd a004 	ldrh.w	sl, [sp, #4]
 801b09c:	eb03 0008 	add.w	r0, r3, r8
 801b0a0:	2800      	cmp	r0, #0
 801b0a2:	dc41      	bgt.n	801b128 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801b0a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b0a8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b0ac:	9b00      	ldr	r3, [sp, #0]
 801b0ae:	2b00      	cmp	r3, #0
 801b0b0:	f340 8095 	ble.w	801b1de <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801b0b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801b0b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b0ba:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b0be:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b0c2:	eef0 6a62 	vmov.f32	s13, s5
 801b0c6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b0ca:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b0ce:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b0d2:	edcd 6a0f 	vstr	s13, [sp, #60]	@ 0x3c
 801b0d6:	eef0 6a43 	vmov.f32	s13, s6
 801b0da:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b0de:	edcd 6a10 	vstr	s13, [sp, #64]	@ 0x40
 801b0e2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b0e6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b0ea:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b0ee:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b0f2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b0f6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b0fa:	ee12 2a90 	vmov	r2, s5
 801b0fe:	eef0 2a47 	vmov.f32	s5, s14
 801b102:	fb92 f3f3 	sdiv	r3, r2, r3
 801b106:	ee13 2a10 	vmov	r2, s6
 801b10a:	9311      	str	r3, [sp, #68]	@ 0x44
 801b10c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b10e:	eeb0 3a67 	vmov.f32	s6, s15
 801b112:	fb92 f3f3 	sdiv	r3, r2, r3
 801b116:	9312      	str	r3, [sp, #72]	@ 0x48
 801b118:	9b00      	ldr	r3, [sp, #0]
 801b11a:	9a03      	ldr	r2, [sp, #12]
 801b11c:	3b01      	subs	r3, #1
 801b11e:	9300      	str	r3, [sp, #0]
 801b120:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b122:	bf08      	it	eq
 801b124:	4613      	moveq	r3, r2
 801b126:	e72f      	b.n	801af88 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801b128:	140f      	asrs	r7, r1, #16
 801b12a:	d451      	bmi.n	801b1d0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801b12c:	f8de 5008 	ldr.w	r5, [lr, #8]
 801b130:	42bd      	cmp	r5, r7
 801b132:	dd4d      	ble.n	801b1d0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801b134:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801b138:	d44a      	bmi.n	801b1d0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801b13a:	f8de 000c 	ldr.w	r0, [lr, #12]
 801b13e:	4560      	cmp	r0, ip
 801b140:	dd46      	ble.n	801b1d0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801b142:	b22d      	sxth	r5, r5
 801b144:	9802      	ldr	r0, [sp, #8]
 801b146:	fb0c 7505 	mla	r5, ip, r5, r7
 801b14a:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 801b14e:	f06f 0501 	mvn.w	r5, #1
 801b152:	fb05 fb08 	mul.w	fp, r5, r8
 801b156:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801b15a:	f834 500b 	ldrh.w	r5, [r4, fp]
 801b15e:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801b162:	122f      	asrs	r7, r5, #8
 801b164:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801b168:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801b16c:	00ed      	lsls	r5, r5, #3
 801b16e:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 801b172:	fb17 f706 	smulbb	r7, r7, r6
 801b176:	b2ed      	uxtb	r5, r5
 801b178:	fb19 f906 	smulbb	r9, r9, r6
 801b17c:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801b180:	10c7      	asrs	r7, r0, #3
 801b182:	fb15 f506 	smulbb	r5, r5, r6
 801b186:	00c0      	lsls	r0, r0, #3
 801b188:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801b18c:	fa1f fc8c 	uxth.w	ip, ip
 801b190:	b2c0      	uxtb	r0, r0
 801b192:	fb07 970a 	mla	r7, r7, sl, r9
 801b196:	fb00 500a 	mla	r0, r0, sl, r5
 801b19a:	f10c 0501 	add.w	r5, ip, #1
 801b19e:	b2bf      	uxth	r7, r7
 801b1a0:	b280      	uxth	r0, r0
 801b1a2:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801b1a6:	f107 0901 	add.w	r9, r7, #1
 801b1aa:	1c45      	adds	r5, r0, #1
 801b1ac:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801b1b0:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801b1b4:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801b1b8:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801b1bc:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801b1c0:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 801b1c4:	ea45 0c0c 	orr.w	ip, r5, ip
 801b1c8:	ea4c 0c09 	orr.w	ip, ip, r9
 801b1cc:	f824 c00b 	strh.w	ip, [r4, fp]
 801b1d0:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801b1d2:	f108 38ff 	add.w	r8, r8, #4294967295
 801b1d6:	4401      	add	r1, r0
 801b1d8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801b1da:	4402      	add	r2, r0
 801b1dc:	e75e      	b.n	801b09c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801b1de:	b005      	add	sp, #20
 801b1e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b1e4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b1e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b1e8:	b085      	sub	sp, #20
 801b1ea:	4693      	mov	fp, r2
 801b1ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801b1f0:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801b1f2:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 801b1f4:	6870      	ldr	r0, [r6, #4]
 801b1f6:	9101      	str	r1, [sp, #4]
 801b1f8:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801b1fc:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	@ 0x44
 801b200:	fb00 2404 	mla	r4, r0, r4, r2
 801b204:	6832      	ldr	r2, [r6, #0]
 801b206:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801b20a:	682a      	ldr	r2, [r5, #0]
 801b20c:	9202      	str	r2, [sp, #8]
 801b20e:	9a01      	ldr	r2, [sp, #4]
 801b210:	2a00      	cmp	r2, #0
 801b212:	dc03      	bgt.n	801b21c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801b214:	f1bb 0f00 	cmp.w	fp, #0
 801b218:	f340 809a 	ble.w	801b350 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801b21c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801b21e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801b222:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801b226:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801b228:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801b22c:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801b230:	2b00      	cmp	r3, #0
 801b232:	dd0c      	ble.n	801b24e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801b234:	1406      	asrs	r6, r0, #16
 801b236:	d405      	bmi.n	801b244 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801b238:	454e      	cmp	r6, r9
 801b23a:	da03      	bge.n	801b244 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801b23c:	1416      	asrs	r6, r2, #16
 801b23e:	d401      	bmi.n	801b244 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801b240:	4546      	cmp	r6, r8
 801b242:	db05      	blt.n	801b250 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801b244:	4470      	add	r0, lr
 801b246:	4462      	add	r2, ip
 801b248:	3b01      	subs	r3, #1
 801b24a:	3402      	adds	r4, #2
 801b24c:	e7f0      	b.n	801b230 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801b24e:	d00f      	beq.n	801b270 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801b250:	1e5e      	subs	r6, r3, #1
 801b252:	fb0e 0706 	mla	r7, lr, r6, r0
 801b256:	143f      	asrs	r7, r7, #16
 801b258:	d541      	bpl.n	801b2de <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801b25a:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801b25e:	4698      	mov	r8, r3
 801b260:	9603      	str	r6, [sp, #12]
 801b262:	f1b8 0f00 	cmp.w	r8, #0
 801b266:	dc56      	bgt.n	801b316 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 801b268:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b26c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b270:	9b01      	ldr	r3, [sp, #4]
 801b272:	2b00      	cmp	r3, #0
 801b274:	dd6c      	ble.n	801b350 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801b276:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b27a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b27c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b280:	eeb0 6a62 	vmov.f32	s12, s5
 801b284:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b288:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b28c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b290:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801b294:	eeb0 6a43 	vmov.f32	s12, s6
 801b298:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b29c:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801b2a0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b2a4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b2a8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b2ac:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b2b0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b2b4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b2b8:	ee12 2a90 	vmov	r2, s5
 801b2bc:	eef0 2a47 	vmov.f32	s5, s14
 801b2c0:	fb92 fef3 	sdiv	lr, r2, r3
 801b2c4:	ee13 2a10 	vmov	r2, s6
 801b2c8:	eeb0 3a67 	vmov.f32	s6, s15
 801b2cc:	fb92 fcf3 	sdiv	ip, r2, r3
 801b2d0:	9b01      	ldr	r3, [sp, #4]
 801b2d2:	3b01      	subs	r3, #1
 801b2d4:	9301      	str	r3, [sp, #4]
 801b2d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b2d8:	bf08      	it	eq
 801b2da:	465b      	moveq	r3, fp
 801b2dc:	e797      	b.n	801b20e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801b2de:	454f      	cmp	r7, r9
 801b2e0:	dabb      	bge.n	801b25a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b2e2:	fb0c 2606 	mla	r6, ip, r6, r2
 801b2e6:	1436      	asrs	r6, r6, #16
 801b2e8:	d4b7      	bmi.n	801b25a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b2ea:	4546      	cmp	r6, r8
 801b2ec:	dab5      	bge.n	801b25a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b2ee:	461e      	mov	r6, r3
 801b2f0:	46a0      	mov	r8, r4
 801b2f2:	2e00      	cmp	r6, #0
 801b2f4:	ddb8      	ble.n	801b268 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801b2f6:	1417      	asrs	r7, r2, #16
 801b2f8:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801b2fc:	ea4f 4920 	mov.w	r9, r0, asr #16
 801b300:	9902      	ldr	r1, [sp, #8]
 801b302:	4470      	add	r0, lr
 801b304:	4462      	add	r2, ip
 801b306:	fb0a 9707 	mla	r7, sl, r7, r9
 801b30a:	3e01      	subs	r6, #1
 801b30c:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801b310:	f828 7b02 	strh.w	r7, [r8], #2
 801b314:	e7ed      	b.n	801b2f2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801b316:	ea5f 4920 	movs.w	r9, r0, asr #16
 801b31a:	d414      	bmi.n	801b346 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801b31c:	68ae      	ldr	r6, [r5, #8]
 801b31e:	454e      	cmp	r6, r9
 801b320:	dd11      	ble.n	801b346 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801b322:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801b326:	d40e      	bmi.n	801b346 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801b328:	68ef      	ldr	r7, [r5, #12]
 801b32a:	4557      	cmp	r7, sl
 801b32c:	dd0b      	ble.n	801b346 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801b32e:	b236      	sxth	r6, r6
 801b330:	f06f 0101 	mvn.w	r1, #1
 801b334:	9f02      	ldr	r7, [sp, #8]
 801b336:	fb0a 9606 	mla	r6, sl, r6, r9
 801b33a:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801b33e:	fb01 f608 	mul.w	r6, r1, r8
 801b342:	9903      	ldr	r1, [sp, #12]
 801b344:	538f      	strh	r7, [r1, r6]
 801b346:	4470      	add	r0, lr
 801b348:	4462      	add	r2, ip
 801b34a:	f108 38ff 	add.w	r8, r8, #4294967295
 801b34e:	e788      	b.n	801b262 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801b350:	b005      	add	sp, #20
 801b352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b356 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b356:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b35a:	b087      	sub	sp, #28
 801b35c:	468b      	mov	fp, r1
 801b35e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801b362:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801b364:	9203      	str	r2, [sp, #12]
 801b366:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801b36a:	6841      	ldr	r1, [r0, #4]
 801b36c:	9204      	str	r2, [sp, #16]
 801b36e:	f8dd 9060 	ldr.w	r9, [sp, #96]	@ 0x60
 801b372:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	@ 0x58
 801b376:	fb01 2505 	mla	r5, r1, r5, r2
 801b37a:	6802      	ldr	r2, [r0, #0]
 801b37c:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801b380:	f8d9 2000 	ldr.w	r2, [r9]
 801b384:	9201      	str	r2, [sp, #4]
 801b386:	f1bb 0f00 	cmp.w	fp, #0
 801b38a:	dc03      	bgt.n	801b394 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801b38c:	9a03      	ldr	r2, [sp, #12]
 801b38e:	2a00      	cmp	r2, #0
 801b390:	f340 8158 	ble.w	801b644 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 801b394:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801b396:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801b39a:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801b39e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801b3a0:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801b3a4:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801b3a8:	2b00      	cmp	r3, #0
 801b3aa:	dd0e      	ble.n	801b3ca <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801b3ac:	1402      	asrs	r2, r0, #16
 801b3ae:	d405      	bmi.n	801b3bc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801b3b0:	42ba      	cmp	r2, r7
 801b3b2:	da03      	bge.n	801b3bc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801b3b4:	140a      	asrs	r2, r1, #16
 801b3b6:	d401      	bmi.n	801b3bc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801b3b8:	42b2      	cmp	r2, r6
 801b3ba:	db07      	blt.n	801b3cc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b3bc:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801b3be:	3b01      	subs	r3, #1
 801b3c0:	3502      	adds	r5, #2
 801b3c2:	4410      	add	r0, r2
 801b3c4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801b3c6:	4411      	add	r1, r2
 801b3c8:	e7ee      	b.n	801b3a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801b3ca:	d017      	beq.n	801b3fc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801b3cc:	1e5a      	subs	r2, r3, #1
 801b3ce:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801b3d0:	fb04 0402 	mla	r4, r4, r2, r0
 801b3d4:	1424      	asrs	r4, r4, #16
 801b3d6:	d409      	bmi.n	801b3ec <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b3d8:	42bc      	cmp	r4, r7
 801b3da:	da07      	bge.n	801b3ec <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b3dc:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801b3de:	fb04 1202 	mla	r2, r4, r2, r1
 801b3e2:	1412      	asrs	r2, r2, #16
 801b3e4:	d402      	bmi.n	801b3ec <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b3e6:	42b2      	cmp	r2, r6
 801b3e8:	f2c0 80bf 	blt.w	801b56a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801b3ec:	2700      	movs	r7, #0
 801b3ee:	19da      	adds	r2, r3, r7
 801b3f0:	2a00      	cmp	r2, #0
 801b3f2:	dc3e      	bgt.n	801b472 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801b3f4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b3f8:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801b3fc:	f1bb 0f00 	cmp.w	fp, #0
 801b400:	f340 8120 	ble.w	801b644 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 801b404:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b408:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b40a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b40e:	f1bb 0b01 	subs.w	fp, fp, #1
 801b412:	eeb0 6a62 	vmov.f32	s12, s5
 801b416:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b41a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b41e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b422:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801b426:	eeb0 6a43 	vmov.f32	s12, s6
 801b42a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b42e:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801b432:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b436:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b43a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b43e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b442:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b446:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b44a:	ee12 2a90 	vmov	r2, s5
 801b44e:	eef0 2a47 	vmov.f32	s5, s14
 801b452:	fb92 f3f3 	sdiv	r3, r2, r3
 801b456:	ee13 2a10 	vmov	r2, s6
 801b45a:	9313      	str	r3, [sp, #76]	@ 0x4c
 801b45c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b45e:	eeb0 3a67 	vmov.f32	s6, s15
 801b462:	fb92 f3f3 	sdiv	r3, r2, r3
 801b466:	9a03      	ldr	r2, [sp, #12]
 801b468:	9314      	str	r3, [sp, #80]	@ 0x50
 801b46a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b46c:	bf08      	it	eq
 801b46e:	4613      	moveq	r3, r2
 801b470:	e789      	b.n	801b386 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801b472:	1406      	asrs	r6, r0, #16
 801b474:	d42d      	bmi.n	801b4d2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801b476:	f8d9 4008 	ldr.w	r4, [r9, #8]
 801b47a:	42b4      	cmp	r4, r6
 801b47c:	dd29      	ble.n	801b4d2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801b47e:	ea5f 4c21 	movs.w	ip, r1, asr #16
 801b482:	d426      	bmi.n	801b4d2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801b484:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801b488:	4562      	cmp	r2, ip
 801b48a:	dd22      	ble.n	801b4d2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801b48c:	b224      	sxth	r4, r4
 801b48e:	9a01      	ldr	r2, [sp, #4]
 801b490:	fb0c 6404 	mla	r4, ip, r4, r6
 801b494:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 801b498:	0e22      	lsrs	r2, r4, #24
 801b49a:	d01a      	beq.n	801b4d2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801b49c:	9e04      	ldr	r6, [sp, #16]
 801b49e:	4372      	muls	r2, r6
 801b4a0:	1c56      	adds	r6, r2, #1
 801b4a2:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801b4a6:	0a26      	lsrs	r6, r4, #8
 801b4a8:	1212      	asrs	r2, r2, #8
 801b4aa:	9605      	str	r6, [sp, #20]
 801b4ac:	2aff      	cmp	r2, #255	@ 0xff
 801b4ae:	d116      	bne.n	801b4de <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801b4b0:	f06f 0201 	mvn.w	r2, #1
 801b4b4:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 801b4b8:	fb02 fc07 	mul.w	ip, r2, r7
 801b4bc:	0962      	lsrs	r2, r4, #5
 801b4be:	f026 0607 	bic.w	r6, r6, #7
 801b4c2:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801b4c6:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801b4ca:	4316      	orrs	r6, r2
 801b4cc:	4326      	orrs	r6, r4
 801b4ce:	f825 600c 	strh.w	r6, [r5, ip]
 801b4d2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801b4d4:	3f01      	subs	r7, #1
 801b4d6:	4410      	add	r0, r2
 801b4d8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801b4da:	4411      	add	r1, r2
 801b4dc:	e787      	b.n	801b3ee <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801b4de:	f06f 0601 	mvn.w	r6, #1
 801b4e2:	fa1f fa82 	uxth.w	sl, r2
 801b4e6:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 801b4ea:	43d2      	mvns	r2, r2
 801b4ec:	437e      	muls	r6, r7
 801b4ee:	b2e4      	uxtb	r4, r4
 801b4f0:	fb1c fc0a 	smulbb	ip, ip, sl
 801b4f4:	b2d2      	uxtb	r2, r2
 801b4f6:	f835 8006 	ldrh.w	r8, [r5, r6]
 801b4fa:	fb14 f40a 	smulbb	r4, r4, sl
 801b4fe:	9602      	str	r6, [sp, #8]
 801b500:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801b504:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801b508:	fb16 f60a 	smulbb	r6, r6, sl
 801b50c:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 801b510:	fb0e ce02 	mla	lr, lr, r2, ip
 801b514:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801b518:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801b51c:	fa1f fe8e 	uxth.w	lr, lr
 801b520:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 801b524:	fa5f f888 	uxtb.w	r8, r8
 801b528:	fb0c 6c02 	mla	ip, ip, r2, r6
 801b52c:	fb08 4402 	mla	r4, r8, r2, r4
 801b530:	f10e 0201 	add.w	r2, lr, #1
 801b534:	fa1f fc8c 	uxth.w	ip, ip
 801b538:	b2a4      	uxth	r4, r4
 801b53a:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801b53e:	9a02      	ldr	r2, [sp, #8]
 801b540:	1c66      	adds	r6, r4, #1
 801b542:	f40e 4e78 	and.w	lr, lr, #63488	@ 0xf800
 801b546:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801b54a:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801b54e:	ea46 0e0e 	orr.w	lr, r6, lr
 801b552:	f10c 0601 	add.w	r6, ip, #1
 801b556:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801b55a:	0976      	lsrs	r6, r6, #5
 801b55c:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801b560:	ea4e 0e06 	orr.w	lr, lr, r6
 801b564:	f825 e002 	strh.w	lr, [r5, r2]
 801b568:	e7b3      	b.n	801b4d2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801b56a:	f04f 0800 	mov.w	r8, #0
 801b56e:	eba3 0208 	sub.w	r2, r3, r8
 801b572:	2a00      	cmp	r2, #0
 801b574:	f77f af3e 	ble.w	801b3f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801b578:	1404      	asrs	r4, r0, #16
 801b57a:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 801b57e:	140a      	asrs	r2, r1, #16
 801b580:	fb06 4202 	mla	r2, r6, r2, r4
 801b584:	9c01      	ldr	r4, [sp, #4]
 801b586:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 801b58a:	0e22      	lsrs	r2, r4, #24
 801b58c:	d015      	beq.n	801b5ba <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801b58e:	9e04      	ldr	r6, [sp, #16]
 801b590:	4372      	muls	r2, r6
 801b592:	1c56      	adds	r6, r2, #1
 801b594:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801b598:	0a26      	lsrs	r6, r4, #8
 801b59a:	1212      	asrs	r2, r2, #8
 801b59c:	2aff      	cmp	r2, #255	@ 0xff
 801b59e:	d113      	bne.n	801b5c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 801b5a0:	0962      	lsrs	r2, r4, #5
 801b5a2:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 801b5a6:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801b5aa:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801b5ae:	f026 0607 	bic.w	r6, r6, #7
 801b5b2:	4316      	orrs	r6, r2
 801b5b4:	4326      	orrs	r6, r4
 801b5b6:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 801b5ba:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801b5bc:	f108 0801 	add.w	r8, r8, #1
 801b5c0:	4410      	add	r0, r2
 801b5c2:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801b5c4:	4411      	add	r1, r2
 801b5c6:	e7d2      	b.n	801b56e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801b5c8:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 801b5cc:	fa1f fa82 	uxth.w	sl, r2
 801b5d0:	f3c4 4707 	ubfx	r7, r4, #16, #8
 801b5d4:	43d2      	mvns	r2, r2
 801b5d6:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801b5da:	fb17 f70a 	smulbb	r7, r7, sl
 801b5de:	b2d2      	uxtb	r2, r2
 801b5e0:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801b5e4:	b2e4      	uxtb	r4, r4
 801b5e6:	b2f6      	uxtb	r6, r6
 801b5e8:	fb0c 7c02 	mla	ip, ip, r2, r7
 801b5ec:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801b5f0:	fb14 f40a 	smulbb	r4, r4, sl
 801b5f4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801b5f8:	fa1f fc8c 	uxth.w	ip, ip
 801b5fc:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801b600:	fb16 f60a 	smulbb	r6, r6, sl
 801b604:	fa5f fe8e 	uxtb.w	lr, lr
 801b608:	fb0e 4402 	mla	r4, lr, r2, r4
 801b60c:	fb07 6702 	mla	r7, r7, r2, r6
 801b610:	f10c 0201 	add.w	r2, ip, #1
 801b614:	b2a4      	uxth	r4, r4
 801b616:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801b61a:	1c66      	adds	r6, r4, #1
 801b61c:	b2bf      	uxth	r7, r7
 801b61e:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801b622:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801b626:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801b62a:	ea46 0c0c 	orr.w	ip, r6, ip
 801b62e:	1c7e      	adds	r6, r7, #1
 801b630:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801b634:	0976      	lsrs	r6, r6, #5
 801b636:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801b63a:	ea4c 0c06 	orr.w	ip, ip, r6
 801b63e:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 801b642:	e7ba      	b.n	801b5ba <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801b644:	b007      	add	sp, #28
 801b646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801b64c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b64c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b650:	b085      	sub	sp, #20
 801b652:	468b      	mov	fp, r1
 801b654:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801b658:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801b65a:	9203      	str	r2, [sp, #12]
 801b65c:	6841      	ldr	r1, [r0, #4]
 801b65e:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801b662:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801b666:	fb01 2404 	mla	r4, r1, r4, r2
 801b66a:	6802      	ldr	r2, [r0, #0]
 801b66c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801b670:	f8d8 2000 	ldr.w	r2, [r8]
 801b674:	9201      	str	r2, [sp, #4]
 801b676:	f1bb 0f00 	cmp.w	fp, #0
 801b67a:	dc03      	bgt.n	801b684 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801b67c:	9a03      	ldr	r2, [sp, #12]
 801b67e:	2a00      	cmp	r2, #0
 801b680:	f340 814f 	ble.w	801b922 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801b684:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801b686:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801b68a:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801b68e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801b690:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801b694:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801b698:	2b00      	cmp	r3, #0
 801b69a:	dd0e      	ble.n	801b6ba <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801b69c:	1408      	asrs	r0, r1, #16
 801b69e:	d405      	bmi.n	801b6ac <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801b6a0:	42b8      	cmp	r0, r7
 801b6a2:	da03      	bge.n	801b6ac <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801b6a4:	1410      	asrs	r0, r2, #16
 801b6a6:	d401      	bmi.n	801b6ac <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801b6a8:	42b0      	cmp	r0, r6
 801b6aa:	db07      	blt.n	801b6bc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b6ac:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801b6ae:	3b01      	subs	r3, #1
 801b6b0:	3402      	adds	r4, #2
 801b6b2:	4401      	add	r1, r0
 801b6b4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801b6b6:	4402      	add	r2, r0
 801b6b8:	e7ee      	b.n	801b698 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801b6ba:	d017      	beq.n	801b6ec <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801b6bc:	1e58      	subs	r0, r3, #1
 801b6be:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801b6c0:	fb05 1500 	mla	r5, r5, r0, r1
 801b6c4:	142d      	asrs	r5, r5, #16
 801b6c6:	d409      	bmi.n	801b6dc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801b6c8:	42bd      	cmp	r5, r7
 801b6ca:	da07      	bge.n	801b6dc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801b6cc:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801b6ce:	fb05 2000 	mla	r0, r5, r0, r2
 801b6d2:	1400      	asrs	r0, r0, #16
 801b6d4:	d402      	bmi.n	801b6dc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801b6d6:	42b0      	cmp	r0, r6
 801b6d8:	f2c0 80ba 	blt.w	801b850 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801b6dc:	2600      	movs	r6, #0
 801b6de:	1998      	adds	r0, r3, r6
 801b6e0:	2800      	cmp	r0, #0
 801b6e2:	dc3e      	bgt.n	801b762 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801b6e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b6e8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b6ec:	f1bb 0f00 	cmp.w	fp, #0
 801b6f0:	f340 8117 	ble.w	801b922 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801b6f4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b6f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b6fa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b6fe:	f1bb 0b01 	subs.w	fp, fp, #1
 801b702:	eeb0 6a62 	vmov.f32	s12, s5
 801b706:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b70a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b70e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b712:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801b716:	eeb0 6a43 	vmov.f32	s12, s6
 801b71a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b71e:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801b722:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b726:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b72a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b72e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b732:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b736:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b73a:	ee12 2a90 	vmov	r2, s5
 801b73e:	eef0 2a47 	vmov.f32	s5, s14
 801b742:	fb92 f3f3 	sdiv	r3, r2, r3
 801b746:	ee13 2a10 	vmov	r2, s6
 801b74a:	9311      	str	r3, [sp, #68]	@ 0x44
 801b74c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b74e:	eeb0 3a67 	vmov.f32	s6, s15
 801b752:	fb92 f3f3 	sdiv	r3, r2, r3
 801b756:	9a03      	ldr	r2, [sp, #12]
 801b758:	9312      	str	r3, [sp, #72]	@ 0x48
 801b75a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b75c:	bf08      	it	eq
 801b75e:	4613      	moveq	r3, r2
 801b760:	e789      	b.n	801b676 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801b762:	140f      	asrs	r7, r1, #16
 801b764:	d424      	bmi.n	801b7b0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801b766:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801b76a:	42bd      	cmp	r5, r7
 801b76c:	dd20      	ble.n	801b7b0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801b76e:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801b772:	d41d      	bmi.n	801b7b0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801b774:	f8d8 000c 	ldr.w	r0, [r8, #12]
 801b778:	4560      	cmp	r0, ip
 801b77a:	dd19      	ble.n	801b7b0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801b77c:	b22d      	sxth	r5, r5
 801b77e:	9801      	ldr	r0, [sp, #4]
 801b780:	fb0c 7505 	mla	r5, ip, r5, r7
 801b784:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801b788:	0e07      	lsrs	r7, r0, #24
 801b78a:	2fff      	cmp	r7, #255	@ 0xff
 801b78c:	d116      	bne.n	801b7bc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801b78e:	f06f 0501 	mvn.w	r5, #1
 801b792:	fb05 f706 	mul.w	r7, r5, r6
 801b796:	f2a5 75fe 	subw	r5, r5, #2046	@ 0x7fe
 801b79a:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801b79e:	0945      	lsrs	r5, r0, #5
 801b7a0:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801b7a4:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801b7a8:	ea4c 0505 	orr.w	r5, ip, r5
 801b7ac:	4305      	orrs	r5, r0
 801b7ae:	53e5      	strh	r5, [r4, r7]
 801b7b0:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801b7b2:	3e01      	subs	r6, #1
 801b7b4:	4401      	add	r1, r0
 801b7b6:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801b7b8:	4402      	add	r2, r0
 801b7ba:	e790      	b.n	801b6de <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801b7bc:	b2fd      	uxtb	r5, r7
 801b7be:	2f00      	cmp	r7, #0
 801b7c0:	d0f6      	beq.n	801b7b0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801b7c2:	f06f 0701 	mvn.w	r7, #1
 801b7c6:	fa1f f985 	uxth.w	r9, r5
 801b7ca:	43ed      	mvns	r5, r5
 801b7cc:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801b7d0:	4377      	muls	r7, r6
 801b7d2:	fb1a fa09 	smulbb	sl, sl, r9
 801b7d6:	b2ed      	uxtb	r5, r5
 801b7d8:	f834 e007 	ldrh.w	lr, [r4, r7]
 801b7dc:	9702      	str	r7, [sp, #8]
 801b7de:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801b7e2:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801b7e6:	fb17 f709 	smulbb	r7, r7, r9
 801b7ea:	b2c0      	uxtb	r0, r0
 801b7ec:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801b7f0:	fb10 f009 	smulbb	r0, r0, r9
 801b7f4:	fb0c 7c05 	mla	ip, ip, r5, r7
 801b7f8:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801b7fc:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801b800:	fa1f fc8c 	uxth.w	ip, ip
 801b804:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801b808:	fa5f fe8e 	uxtb.w	lr, lr
 801b80c:	fb07 a705 	mla	r7, r7, r5, sl
 801b810:	fb0e 0005 	mla	r0, lr, r5, r0
 801b814:	f10c 0501 	add.w	r5, ip, #1
 801b818:	b2bf      	uxth	r7, r7
 801b81a:	b280      	uxth	r0, r0
 801b81c:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801b820:	f100 0a01 	add.w	sl, r0, #1
 801b824:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801b828:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801b82c:	9802      	ldr	r0, [sp, #8]
 801b82e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801b832:	ea4a 0c0c 	orr.w	ip, sl, ip
 801b836:	f107 0a01 	add.w	sl, r7, #1
 801b83a:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801b83e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b842:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801b846:	ea4c 0c0a 	orr.w	ip, ip, sl
 801b84a:	f824 c000 	strh.w	ip, [r4, r0]
 801b84e:	e7af      	b.n	801b7b0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801b850:	f04f 0e00 	mov.w	lr, #0
 801b854:	eba3 000e 	sub.w	r0, r3, lr
 801b858:	2800      	cmp	r0, #0
 801b85a:	f77f af43 	ble.w	801b6e4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801b85e:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801b862:	140d      	asrs	r5, r1, #16
 801b864:	1410      	asrs	r0, r2, #16
 801b866:	fb06 5000 	mla	r0, r6, r0, r5
 801b86a:	9d01      	ldr	r5, [sp, #4]
 801b86c:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801b870:	0e2e      	lsrs	r6, r5, #24
 801b872:	2eff      	cmp	r6, #255	@ 0xff
 801b874:	d112      	bne.n	801b89c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801b876:	482c      	ldr	r0, [pc, #176]	@ (801b928 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 801b878:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801b87c:	0968      	lsrs	r0, r5, #5
 801b87e:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801b882:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801b886:	4330      	orrs	r0, r6
 801b888:	4328      	orrs	r0, r5
 801b88a:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 801b88e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801b890:	f10e 0e01 	add.w	lr, lr, #1
 801b894:	4401      	add	r1, r0
 801b896:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801b898:	4402      	add	r2, r0
 801b89a:	e7db      	b.n	801b854 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801b89c:	b2f0      	uxtb	r0, r6
 801b89e:	2e00      	cmp	r6, #0
 801b8a0:	d0f5      	beq.n	801b88e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801b8a2:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801b8a6:	fa1f f980 	uxth.w	r9, r0
 801b8aa:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801b8ae:	43c0      	mvns	r0, r0
 801b8b0:	ea4f 272c 	mov.w	r7, ip, asr #8
 801b8b4:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801b8b8:	fb16 f609 	smulbb	r6, r6, r9
 801b8bc:	b2c0      	uxtb	r0, r0
 801b8be:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801b8c2:	b2ed      	uxtb	r5, r5
 801b8c4:	fb1a fa09 	smulbb	sl, sl, r9
 801b8c8:	fb07 6700 	mla	r7, r7, r0, r6
 801b8cc:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801b8d0:	fb15 f509 	smulbb	r5, r5, r9
 801b8d4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801b8d8:	b2bf      	uxth	r7, r7
 801b8da:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801b8de:	fa5f fc8c 	uxtb.w	ip, ip
 801b8e2:	fb06 a600 	mla	r6, r6, r0, sl
 801b8e6:	fb0c 5500 	mla	r5, ip, r0, r5
 801b8ea:	1c78      	adds	r0, r7, #1
 801b8ec:	b2b6      	uxth	r6, r6
 801b8ee:	b2ad      	uxth	r5, r5
 801b8f0:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801b8f4:	f105 0a01 	add.w	sl, r5, #1
 801b8f8:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801b8fc:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801b900:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801b904:	ea4a 0707 	orr.w	r7, sl, r7
 801b908:	f106 0a01 	add.w	sl, r6, #1
 801b90c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801b910:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b914:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801b918:	ea47 070a 	orr.w	r7, r7, sl
 801b91c:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 801b920:	e7b5      	b.n	801b88e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801b922:	b005      	add	sp, #20
 801b924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b928:	fffff800 	.word	0xfffff800

0801b92c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b92c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b930:	b087      	sub	sp, #28
 801b932:	468b      	mov	fp, r1
 801b934:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801b938:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801b93a:	9203      	str	r2, [sp, #12]
 801b93c:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801b940:	6841      	ldr	r1, [r0, #4]
 801b942:	9204      	str	r2, [sp, #16]
 801b944:	f8dd 9060 	ldr.w	r9, [sp, #96]	@ 0x60
 801b948:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 801b94c:	fb01 2404 	mla	r4, r1, r4, r2
 801b950:	6802      	ldr	r2, [r0, #0]
 801b952:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801b956:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801b95a:	3201      	adds	r2, #1
 801b95c:	f022 0201 	bic.w	r2, r2, #1
 801b960:	9200      	str	r2, [sp, #0]
 801b962:	f8d9 2000 	ldr.w	r2, [r9]
 801b966:	9201      	str	r2, [sp, #4]
 801b968:	f1bb 0f00 	cmp.w	fp, #0
 801b96c:	dc03      	bgt.n	801b976 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801b96e:	9a03      	ldr	r2, [sp, #12]
 801b970:	2a00      	cmp	r2, #0
 801b972:	f340 816a 	ble.w	801bc4a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801b976:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801b978:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801b97c:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801b980:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801b982:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801b986:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801b98a:	2b00      	cmp	r3, #0
 801b98c:	dd0e      	ble.n	801b9ac <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801b98e:	1402      	asrs	r2, r0, #16
 801b990:	d405      	bmi.n	801b99e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b992:	42ba      	cmp	r2, r7
 801b994:	da03      	bge.n	801b99e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b996:	140a      	asrs	r2, r1, #16
 801b998:	d401      	bmi.n	801b99e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b99a:	42b2      	cmp	r2, r6
 801b99c:	db07      	blt.n	801b9ae <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801b99e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801b9a0:	3b01      	subs	r3, #1
 801b9a2:	3402      	adds	r4, #2
 801b9a4:	4410      	add	r0, r2
 801b9a6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801b9a8:	4411      	add	r1, r2
 801b9aa:	e7ee      	b.n	801b98a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801b9ac:	d017      	beq.n	801b9de <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801b9ae:	1e5a      	subs	r2, r3, #1
 801b9b0:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801b9b2:	fb05 0502 	mla	r5, r5, r2, r0
 801b9b6:	142d      	asrs	r5, r5, #16
 801b9b8:	d409      	bmi.n	801b9ce <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801b9ba:	42bd      	cmp	r5, r7
 801b9bc:	da07      	bge.n	801b9ce <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801b9be:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801b9c0:	fb05 1202 	mla	r2, r5, r2, r1
 801b9c4:	1412      	asrs	r2, r2, #16
 801b9c6:	d402      	bmi.n	801b9ce <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801b9c8:	42b2      	cmp	r2, r6
 801b9ca:	f2c0 80c8 	blt.w	801bb5e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801b9ce:	2700      	movs	r7, #0
 801b9d0:	19da      	adds	r2, r3, r7
 801b9d2:	2a00      	cmp	r2, #0
 801b9d4:	dc3e      	bgt.n	801ba54 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801b9d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b9da:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b9de:	f1bb 0f00 	cmp.w	fp, #0
 801b9e2:	f340 8132 	ble.w	801bc4a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801b9e6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b9ea:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b9ec:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b9f0:	f1bb 0b01 	subs.w	fp, fp, #1
 801b9f4:	eeb0 6a62 	vmov.f32	s12, s5
 801b9f8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b9fc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ba00:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ba04:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801ba08:	eeb0 6a43 	vmov.f32	s12, s6
 801ba0c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ba10:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801ba14:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ba18:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ba1c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ba20:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ba24:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ba28:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ba2c:	ee12 2a90 	vmov	r2, s5
 801ba30:	eef0 2a47 	vmov.f32	s5, s14
 801ba34:	fb92 f3f3 	sdiv	r3, r2, r3
 801ba38:	ee13 2a10 	vmov	r2, s6
 801ba3c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801ba3e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ba40:	eeb0 3a67 	vmov.f32	s6, s15
 801ba44:	fb92 f3f3 	sdiv	r3, r2, r3
 801ba48:	9a03      	ldr	r2, [sp, #12]
 801ba4a:	9314      	str	r3, [sp, #80]	@ 0x50
 801ba4c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ba4e:	bf08      	it	eq
 801ba50:	4613      	moveq	r3, r2
 801ba52:	e789      	b.n	801b968 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801ba54:	1405      	asrs	r5, r0, #16
 801ba56:	d436      	bmi.n	801bac6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801ba58:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801ba5c:	42aa      	cmp	r2, r5
 801ba5e:	dd32      	ble.n	801bac6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801ba60:	140e      	asrs	r6, r1, #16
 801ba62:	d430      	bmi.n	801bac6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801ba64:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801ba68:	42b2      	cmp	r2, r6
 801ba6a:	dd2c      	ble.n	801bac6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801ba6c:	9a00      	ldr	r2, [sp, #0]
 801ba6e:	fb06 5502 	mla	r5, r6, r2, r5
 801ba72:	9e01      	ldr	r6, [sp, #4]
 801ba74:	086a      	lsrs	r2, r5, #1
 801ba76:	5cb2      	ldrb	r2, [r6, r2]
 801ba78:	07ee      	lsls	r6, r5, #31
 801ba7a:	bf54      	ite	pl
 801ba7c:	f002 020f 	andpl.w	r2, r2, #15
 801ba80:	1112      	asrmi	r2, r2, #4
 801ba82:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801ba86:	b2d2      	uxtb	r2, r2
 801ba88:	b1ea      	cbz	r2, 801bac6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801ba8a:	9d04      	ldr	r5, [sp, #16]
 801ba8c:	436a      	muls	r2, r5
 801ba8e:	1c55      	adds	r5, r2, #1
 801ba90:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801ba94:	4d6e      	ldr	r5, [pc, #440]	@ (801bc50 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801ba96:	1212      	asrs	r2, r2, #8
 801ba98:	682d      	ldr	r5, [r5, #0]
 801ba9a:	2aff      	cmp	r2, #255	@ 0xff
 801ba9c:	ea4f 2615 	mov.w	r6, r5, lsr #8
 801baa0:	9605      	str	r6, [sp, #20]
 801baa2:	d116      	bne.n	801bad2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801baa4:	f06f 0201 	mvn.w	r2, #1
 801baa8:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 801baac:	fb02 fc07 	mul.w	ip, r2, r7
 801bab0:	096a      	lsrs	r2, r5, #5
 801bab2:	f026 0607 	bic.w	r6, r6, #7
 801bab6:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801baba:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801babe:	4316      	orrs	r6, r2
 801bac0:	432e      	orrs	r6, r5
 801bac2:	f824 600c 	strh.w	r6, [r4, ip]
 801bac6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801bac8:	3f01      	subs	r7, #1
 801baca:	4410      	add	r0, r2
 801bacc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801bace:	4411      	add	r1, r2
 801bad0:	e77e      	b.n	801b9d0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801bad2:	f06f 0601 	mvn.w	r6, #1
 801bad6:	fa1f fa82 	uxth.w	sl, r2
 801bada:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 801bade:	43d2      	mvns	r2, r2
 801bae0:	437e      	muls	r6, r7
 801bae2:	b2ed      	uxtb	r5, r5
 801bae4:	fb1c fc0a 	smulbb	ip, ip, sl
 801bae8:	b2d2      	uxtb	r2, r2
 801baea:	f834 8006 	ldrh.w	r8, [r4, r6]
 801baee:	fb15 f50a 	smulbb	r5, r5, sl
 801baf2:	9602      	str	r6, [sp, #8]
 801baf4:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801baf8:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801bafc:	fb16 f60a 	smulbb	r6, r6, sl
 801bb00:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 801bb04:	fb0e ce02 	mla	lr, lr, r2, ip
 801bb08:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801bb0c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801bb10:	fa1f fe8e 	uxth.w	lr, lr
 801bb14:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 801bb18:	fa5f f888 	uxtb.w	r8, r8
 801bb1c:	fb0c 6c02 	mla	ip, ip, r2, r6
 801bb20:	fb08 5502 	mla	r5, r8, r2, r5
 801bb24:	f10e 0201 	add.w	r2, lr, #1
 801bb28:	fa1f fc8c 	uxth.w	ip, ip
 801bb2c:	b2ad      	uxth	r5, r5
 801bb2e:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801bb32:	9a02      	ldr	r2, [sp, #8]
 801bb34:	1c6e      	adds	r6, r5, #1
 801bb36:	f40e 4e78 	and.w	lr, lr, #63488	@ 0xf800
 801bb3a:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 801bb3e:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801bb42:	ea46 0e0e 	orr.w	lr, r6, lr
 801bb46:	f10c 0601 	add.w	r6, ip, #1
 801bb4a:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801bb4e:	0976      	lsrs	r6, r6, #5
 801bb50:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801bb54:	ea4e 0e06 	orr.w	lr, lr, r6
 801bb58:	f824 e002 	strh.w	lr, [r4, r2]
 801bb5c:	e7b3      	b.n	801bac6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801bb5e:	f04f 0800 	mov.w	r8, #0
 801bb62:	eba3 0208 	sub.w	r2, r3, r8
 801bb66:	2a00      	cmp	r2, #0
 801bb68:	f77f af35 	ble.w	801b9d6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801bb6c:	1402      	asrs	r2, r0, #16
 801bb6e:	9e00      	ldr	r6, [sp, #0]
 801bb70:	140d      	asrs	r5, r1, #16
 801bb72:	fb06 2505 	mla	r5, r6, r5, r2
 801bb76:	9e01      	ldr	r6, [sp, #4]
 801bb78:	086a      	lsrs	r2, r5, #1
 801bb7a:	07ed      	lsls	r5, r5, #31
 801bb7c:	5cb2      	ldrb	r2, [r6, r2]
 801bb7e:	bf54      	ite	pl
 801bb80:	f002 020f 	andpl.w	r2, r2, #15
 801bb84:	1112      	asrmi	r2, r2, #4
 801bb86:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801bb8a:	b2d2      	uxtb	r2, r2
 801bb8c:	b1c2      	cbz	r2, 801bbc0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801bb8e:	9d04      	ldr	r5, [sp, #16]
 801bb90:	436a      	muls	r2, r5
 801bb92:	1c55      	adds	r5, r2, #1
 801bb94:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801bb98:	4d2d      	ldr	r5, [pc, #180]	@ (801bc50 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801bb9a:	1212      	asrs	r2, r2, #8
 801bb9c:	682e      	ldr	r6, [r5, #0]
 801bb9e:	2aff      	cmp	r2, #255	@ 0xff
 801bba0:	ea4f 2516 	mov.w	r5, r6, lsr #8
 801bba4:	d113      	bne.n	801bbce <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801bba6:	0972      	lsrs	r2, r6, #5
 801bba8:	f425 65ff 	bic.w	r5, r5, #2040	@ 0x7f8
 801bbac:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801bbb0:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801bbb4:	f025 0507 	bic.w	r5, r5, #7
 801bbb8:	4315      	orrs	r5, r2
 801bbba:	4335      	orrs	r5, r6
 801bbbc:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 801bbc0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801bbc2:	f108 0801 	add.w	r8, r8, #1
 801bbc6:	4410      	add	r0, r2
 801bbc8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801bbca:	4411      	add	r1, r2
 801bbcc:	e7c9      	b.n	801bb62 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801bbce:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801bbd2:	fa1f fa82 	uxth.w	sl, r2
 801bbd6:	f3c6 4707 	ubfx	r7, r6, #16, #8
 801bbda:	43d2      	mvns	r2, r2
 801bbdc:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801bbe0:	fb17 f70a 	smulbb	r7, r7, sl
 801bbe4:	b2d2      	uxtb	r2, r2
 801bbe6:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801bbea:	b2f6      	uxtb	r6, r6
 801bbec:	b2ed      	uxtb	r5, r5
 801bbee:	fb0c 7c02 	mla	ip, ip, r2, r7
 801bbf2:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801bbf6:	fb16 f60a 	smulbb	r6, r6, sl
 801bbfa:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801bbfe:	fa1f fc8c 	uxth.w	ip, ip
 801bc02:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801bc06:	fb15 f50a 	smulbb	r5, r5, sl
 801bc0a:	fa5f fe8e 	uxtb.w	lr, lr
 801bc0e:	fb0e 6602 	mla	r6, lr, r2, r6
 801bc12:	fb07 5702 	mla	r7, r7, r2, r5
 801bc16:	f10c 0201 	add.w	r2, ip, #1
 801bc1a:	b2b6      	uxth	r6, r6
 801bc1c:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801bc20:	1c75      	adds	r5, r6, #1
 801bc22:	b2bf      	uxth	r7, r7
 801bc24:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801bc28:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 801bc2c:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801bc30:	ea45 0c0c 	orr.w	ip, r5, ip
 801bc34:	1c7d      	adds	r5, r7, #1
 801bc36:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 801bc3a:	096d      	lsrs	r5, r5, #5
 801bc3c:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801bc40:	ea4c 0c05 	orr.w	ip, ip, r5
 801bc44:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 801bc48:	e7ba      	b.n	801bbc0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801bc4a:	b007      	add	sp, #28
 801bc4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc50:	20027ba4 	.word	0x20027ba4

0801bc54 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bc54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc58:	b087      	sub	sp, #28
 801bc5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801bc5e:	f8df 8308 	ldr.w	r8, [pc, #776]	@ 801bf68 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 801bc62:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801bc64:	9101      	str	r1, [sp, #4]
 801bc66:	9205      	str	r2, [sp, #20]
 801bc68:	6841      	ldr	r1, [r0, #4]
 801bc6a:	f8dd b060 	ldr.w	fp, [sp, #96]	@ 0x60
 801bc6e:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 801bc72:	fb01 2404 	mla	r4, r1, r4, r2
 801bc76:	6802      	ldr	r2, [r0, #0]
 801bc78:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801bc7c:	f8db 2008 	ldr.w	r2, [fp, #8]
 801bc80:	3201      	adds	r2, #1
 801bc82:	f022 0201 	bic.w	r2, r2, #1
 801bc86:	9202      	str	r2, [sp, #8]
 801bc88:	f8db 2000 	ldr.w	r2, [fp]
 801bc8c:	9203      	str	r2, [sp, #12]
 801bc8e:	9a01      	ldr	r2, [sp, #4]
 801bc90:	2a00      	cmp	r2, #0
 801bc92:	dc03      	bgt.n	801bc9c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801bc94:	9a05      	ldr	r2, [sp, #20]
 801bc96:	2a00      	cmp	r2, #0
 801bc98:	f340 8162 	ble.w	801bf60 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801bc9c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801bc9e:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 801bca2:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801bca6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801bca8:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 801bcac:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801bcb0:	2b00      	cmp	r3, #0
 801bcb2:	dd0e      	ble.n	801bcd2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801bcb4:	1402      	asrs	r2, r0, #16
 801bcb6:	d405      	bmi.n	801bcc4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801bcb8:	42ba      	cmp	r2, r7
 801bcba:	da03      	bge.n	801bcc4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801bcbc:	140a      	asrs	r2, r1, #16
 801bcbe:	d401      	bmi.n	801bcc4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801bcc0:	42b2      	cmp	r2, r6
 801bcc2:	db07      	blt.n	801bcd4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801bcc4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801bcc6:	3b01      	subs	r3, #1
 801bcc8:	3402      	adds	r4, #2
 801bcca:	4410      	add	r0, r2
 801bccc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801bcce:	4411      	add	r1, r2
 801bcd0:	e7ee      	b.n	801bcb0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801bcd2:	d017      	beq.n	801bd04 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801bcd4:	1e5a      	subs	r2, r3, #1
 801bcd6:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801bcd8:	fb05 0502 	mla	r5, r5, r2, r0
 801bcdc:	142d      	asrs	r5, r5, #16
 801bcde:	d409      	bmi.n	801bcf4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801bce0:	42bd      	cmp	r5, r7
 801bce2:	da07      	bge.n	801bcf4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801bce4:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801bce6:	fb05 1202 	mla	r2, r5, r2, r1
 801bcea:	1412      	asrs	r2, r2, #16
 801bcec:	d402      	bmi.n	801bcf4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801bcee:	42b2      	cmp	r2, r6
 801bcf0:	f2c0 80c3 	blt.w	801be7a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 801bcf4:	2500      	movs	r5, #0
 801bcf6:	195a      	adds	r2, r3, r5
 801bcf8:	2a00      	cmp	r2, #0
 801bcfa:	dc3f      	bgt.n	801bd7c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801bcfc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bd00:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801bd04:	9b01      	ldr	r3, [sp, #4]
 801bd06:	2b00      	cmp	r3, #0
 801bd08:	f340 812a 	ble.w	801bf60 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801bd0c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bd10:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801bd12:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bd16:	eeb0 6a62 	vmov.f32	s12, s5
 801bd1a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801bd1e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bd22:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bd26:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801bd2a:	eeb0 6a43 	vmov.f32	s12, s6
 801bd2e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bd32:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801bd36:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bd3a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bd3e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bd42:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bd46:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bd4a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bd4e:	ee12 2a90 	vmov	r2, s5
 801bd52:	eef0 2a47 	vmov.f32	s5, s14
 801bd56:	fb92 f3f3 	sdiv	r3, r2, r3
 801bd5a:	ee13 2a10 	vmov	r2, s6
 801bd5e:	9313      	str	r3, [sp, #76]	@ 0x4c
 801bd60:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801bd62:	eeb0 3a67 	vmov.f32	s6, s15
 801bd66:	fb92 f3f3 	sdiv	r3, r2, r3
 801bd6a:	9314      	str	r3, [sp, #80]	@ 0x50
 801bd6c:	9b01      	ldr	r3, [sp, #4]
 801bd6e:	9a05      	ldr	r2, [sp, #20]
 801bd70:	3b01      	subs	r3, #1
 801bd72:	9301      	str	r3, [sp, #4]
 801bd74:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801bd76:	bf08      	it	eq
 801bd78:	4613      	moveq	r3, r2
 801bd7a:	e788      	b.n	801bc8e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801bd7c:	1406      	asrs	r6, r0, #16
 801bd7e:	d42c      	bmi.n	801bdda <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801bd80:	f8db 2008 	ldr.w	r2, [fp, #8]
 801bd84:	42b2      	cmp	r2, r6
 801bd86:	dd28      	ble.n	801bdda <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801bd88:	140f      	asrs	r7, r1, #16
 801bd8a:	d426      	bmi.n	801bdda <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801bd8c:	f8db 200c 	ldr.w	r2, [fp, #12]
 801bd90:	42ba      	cmp	r2, r7
 801bd92:	dd22      	ble.n	801bdda <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801bd94:	9a02      	ldr	r2, [sp, #8]
 801bd96:	fb07 6602 	mla	r6, r7, r2, r6
 801bd9a:	9f03      	ldr	r7, [sp, #12]
 801bd9c:	0872      	lsrs	r2, r6, #1
 801bd9e:	07f6      	lsls	r6, r6, #31
 801bda0:	5cba      	ldrb	r2, [r7, r2]
 801bda2:	bf54      	ite	pl
 801bda4:	f002 020f 	andpl.w	r2, r2, #15
 801bda8:	1112      	asrmi	r2, r2, #4
 801bdaa:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801bdae:	b2d2      	uxtb	r2, r2
 801bdb0:	2aff      	cmp	r2, #255	@ 0xff
 801bdb2:	d118      	bne.n	801bde6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801bdb4:	f06f 0601 	mvn.w	r6, #1
 801bdb8:	f8d8 2000 	ldr.w	r2, [r8]
 801bdbc:	fb06 f705 	mul.w	r7, r6, r5
 801bdc0:	f2a6 76fe 	subw	r6, r6, #2046	@ 0x7fe
 801bdc4:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 801bdc8:	0956      	lsrs	r6, r2, #5
 801bdca:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801bdce:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801bdd2:	ea4c 0606 	orr.w	r6, ip, r6
 801bdd6:	4316      	orrs	r6, r2
 801bdd8:	53e6      	strh	r6, [r4, r7]
 801bdda:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801bddc:	3d01      	subs	r5, #1
 801bdde:	4410      	add	r0, r2
 801bde0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801bde2:	4411      	add	r1, r2
 801bde4:	e787      	b.n	801bcf6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801bde6:	2a00      	cmp	r2, #0
 801bde8:	d0f7      	beq.n	801bdda <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801bdea:	f06f 0601 	mvn.w	r6, #1
 801bdee:	f8d8 c000 	ldr.w	ip, [r8]
 801bdf2:	fa1f f982 	uxth.w	r9, r2
 801bdf6:	43d2      	mvns	r2, r2
 801bdf8:	436e      	muls	r6, r5
 801bdfa:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 801bdfe:	b2d2      	uxtb	r2, r2
 801be00:	f834 e006 	ldrh.w	lr, [r4, r6]
 801be04:	fb1a fa09 	smulbb	sl, sl, r9
 801be08:	9604      	str	r6, [sp, #16]
 801be0a:	f3cc 4607 	ubfx	r6, ip, #16, #8
 801be0e:	ea4f 272e 	mov.w	r7, lr, asr #8
 801be12:	fb16 f609 	smulbb	r6, r6, r9
 801be16:	fa5f fc8c 	uxtb.w	ip, ip
 801be1a:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801be1e:	fb1c fc09 	smulbb	ip, ip, r9
 801be22:	fb07 6702 	mla	r7, r7, r2, r6
 801be26:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801be2a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801be2e:	b2bf      	uxth	r7, r7
 801be30:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801be34:	fa5f fe8e 	uxtb.w	lr, lr
 801be38:	fb06 a602 	mla	r6, r6, r2, sl
 801be3c:	fb0e cc02 	mla	ip, lr, r2, ip
 801be40:	1c7a      	adds	r2, r7, #1
 801be42:	b2b6      	uxth	r6, r6
 801be44:	fa1f fc8c 	uxth.w	ip, ip
 801be48:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801be4c:	9a04      	ldr	r2, [sp, #16]
 801be4e:	f10c 0a01 	add.w	sl, ip, #1
 801be52:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801be56:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801be5a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801be5e:	ea4a 0707 	orr.w	r7, sl, r7
 801be62:	f106 0a01 	add.w	sl, r6, #1
 801be66:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801be6a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801be6e:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801be72:	ea47 070a 	orr.w	r7, r7, sl
 801be76:	52a7      	strh	r7, [r4, r2]
 801be78:	e7af      	b.n	801bdda <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801be7a:	f04f 0e00 	mov.w	lr, #0
 801be7e:	eba3 020e 	sub.w	r2, r3, lr
 801be82:	2a00      	cmp	r2, #0
 801be84:	f77f af3a 	ble.w	801bcfc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801be88:	1402      	asrs	r2, r0, #16
 801be8a:	9e02      	ldr	r6, [sp, #8]
 801be8c:	140d      	asrs	r5, r1, #16
 801be8e:	fb06 2505 	mla	r5, r6, r5, r2
 801be92:	9e03      	ldr	r6, [sp, #12]
 801be94:	086a      	lsrs	r2, r5, #1
 801be96:	07ed      	lsls	r5, r5, #31
 801be98:	5cb2      	ldrb	r2, [r6, r2]
 801be9a:	bf54      	ite	pl
 801be9c:	f002 020f 	andpl.w	r2, r2, #15
 801bea0:	1112      	asrmi	r2, r2, #4
 801bea2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801bea6:	b2d2      	uxtb	r2, r2
 801bea8:	2aff      	cmp	r2, #255	@ 0xff
 801beaa:	d115      	bne.n	801bed8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801beac:	f8d8 5000 	ldr.w	r5, [r8]
 801beb0:	f6a2 02ff 	subw	r2, r2, #2303	@ 0x8ff
 801beb4:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 801beb8:	096a      	lsrs	r2, r5, #5
 801beba:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801bebe:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801bec2:	4332      	orrs	r2, r6
 801bec4:	432a      	orrs	r2, r5
 801bec6:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 801beca:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801becc:	f10e 0e01 	add.w	lr, lr, #1
 801bed0:	4410      	add	r0, r2
 801bed2:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801bed4:	4411      	add	r1, r2
 801bed6:	e7d2      	b.n	801be7e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801bed8:	2a00      	cmp	r2, #0
 801beda:	d0f6      	beq.n	801beca <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801bedc:	f8d8 7000 	ldr.w	r7, [r8]
 801bee0:	fa1f f982 	uxth.w	r9, r2
 801bee4:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801bee8:	43d2      	mvns	r2, r2
 801beea:	f3c7 4507 	ubfx	r5, r7, #16, #8
 801beee:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801bef2:	ea4f 262c 	mov.w	r6, ip, asr #8
 801bef6:	fb15 f509 	smulbb	r5, r5, r9
 801befa:	b2d2      	uxtb	r2, r2
 801befc:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801bf00:	b2ff      	uxtb	r7, r7
 801bf02:	fb1a fa09 	smulbb	sl, sl, r9
 801bf06:	fb06 5602 	mla	r6, r6, r2, r5
 801bf0a:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801bf0e:	fb17 f709 	smulbb	r7, r7, r9
 801bf12:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801bf16:	b2b6      	uxth	r6, r6
 801bf18:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 801bf1c:	fa5f fc8c 	uxtb.w	ip, ip
 801bf20:	fb05 a502 	mla	r5, r5, r2, sl
 801bf24:	fb0c 7702 	mla	r7, ip, r2, r7
 801bf28:	1c72      	adds	r2, r6, #1
 801bf2a:	b2ad      	uxth	r5, r5
 801bf2c:	b2bf      	uxth	r7, r7
 801bf2e:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 801bf32:	f107 0a01 	add.w	sl, r7, #1
 801bf36:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 801bf3a:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801bf3e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801bf42:	ea4a 0606 	orr.w	r6, sl, r6
 801bf46:	f105 0a01 	add.w	sl, r5, #1
 801bf4a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801bf4e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801bf52:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801bf56:	ea46 060a 	orr.w	r6, r6, sl
 801bf5a:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 801bf5e:	e7b4      	b.n	801beca <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801bf60:	b007      	add	sp, #28
 801bf62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bf66:	bf00      	nop
 801bf68:	20027ba4 	.word	0x20027ba4

0801bf6c <_ZN8touchgfx8LCD16bppD1Ev>:
 801bf6c:	4770      	bx	lr

0801bf6e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801bf6e:	4770      	bx	lr

0801bf70 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801bf70:	4770      	bx	lr

0801bf72 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801bf72:	4770      	bx	lr

0801bf74 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801bf74:	4770      	bx	lr

0801bf76 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801bf76:	4770      	bx	lr

0801bf78 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801bf78:	4770      	bx	lr

0801bf7a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801bf7a:	4770      	bx	lr

0801bf7c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801bf7c:	4770      	bx	lr

0801bf7e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801bf7e:	4770      	bx	lr

0801bf80 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801bf80:	4770      	bx	lr

0801bf82 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801bf82:	4770      	bx	lr

0801bf84 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801bf84:	4770      	bx	lr

0801bf86 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801bf86:	4770      	bx	lr

0801bf88 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801bf88:	4770      	bx	lr

0801bf8a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801bf8a:	4770      	bx	lr

0801bf8c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 801bf8c:	4770      	bx	lr

0801bf8e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801bf8e:	4770      	bx	lr

0801bf90 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801bf90:	4770      	bx	lr

0801bf92 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801bf92:	4770      	bx	lr

0801bf94 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801bf94:	4770      	bx	lr

0801bf96 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801bf96:	4770      	bx	lr

0801bf98 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801bf98:	4770      	bx	lr

0801bf9a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801bf9a:	4770      	bx	lr

0801bf9c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801bf9c:	4770      	bx	lr

0801bf9e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801bf9e:	4770      	bx	lr

0801bfa0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801bfa0:	4770      	bx	lr

0801bfa2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801bfa2:	4770      	bx	lr

0801bfa4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801bfa4:	4770      	bx	lr

0801bfa6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801bfa6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bfaa:	b088      	sub	sp, #32
 801bfac:	4606      	mov	r6, r0
 801bfae:	4688      	mov	r8, r1
 801bfb0:	4691      	mov	r9, r2
 801bfb2:	ac08      	add	r4, sp, #32
 801bfb4:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801bfb8:	4620      	mov	r0, r4
 801bfba:	f7fd fc65 	bl	8019888 <_ZNK8touchgfx6Bitmap7getDataEv>
 801bfbe:	6833      	ldr	r3, [r6, #0]
 801bfc0:	4605      	mov	r5, r0
 801bfc2:	4620      	mov	r0, r4
 801bfc4:	699f      	ldr	r7, [r3, #24]
 801bfc6:	f7fd fb73 	bl	80196b0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801bfca:	4682      	mov	sl, r0
 801bfcc:	4620      	mov	r0, r4
 801bfce:	f7fd fba3 	bl	8019718 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801bfd2:	9500      	str	r5, [sp, #0]
 801bfd4:	464b      	mov	r3, r9
 801bfd6:	4642      	mov	r2, r8
 801bfd8:	4631      	mov	r1, r6
 801bfda:	e9cd a001 	strd	sl, r0, [sp, #4]
 801bfde:	a806      	add	r0, sp, #24
 801bfe0:	47b8      	blx	r7
 801bfe2:	4628      	mov	r0, r5
 801bfe4:	b008      	add	sp, #32
 801bfe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801bfec <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801bfec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801bff0:	2300      	movs	r3, #0
 801bff2:	9300      	str	r3, [sp, #0]
 801bff4:	4b3d      	ldr	r3, [pc, #244]	@ (801c0ec <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 801bff6:	781b      	ldrb	r3, [r3, #0]
 801bff8:	2b00      	cmp	r3, #0
 801bffa:	d137      	bne.n	801c06c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 801bffc:	4a3c      	ldr	r2, [pc, #240]	@ (801c0f0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801bffe:	f9b2 2000 	ldrsh.w	r2, [r2]
 801c002:	f8ad 2004 	strh.w	r2, [sp, #4]
 801c006:	2b00      	cmp	r3, #0
 801c008:	d132      	bne.n	801c070 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 801c00a:	4b3a      	ldr	r3, [pc, #232]	@ (801c0f4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801c00c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c010:	ac02      	add	r4, sp, #8
 801c012:	6808      	ldr	r0, [r1, #0]
 801c014:	f8ad 3006 	strh.w	r3, [sp, #6]
 801c018:	ab02      	add	r3, sp, #8
 801c01a:	6849      	ldr	r1, [r1, #4]
 801c01c:	4d36      	ldr	r5, [pc, #216]	@ (801c0f8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 801c01e:	c303      	stmia	r3!, {r0, r1}
 801c020:	4669      	mov	r1, sp
 801c022:	4620      	mov	r0, r4
 801c024:	f7f9 fec6 	bl	8015db4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c028:	4668      	mov	r0, sp
 801c02a:	f7f9 fe9b 	bl	8015d64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c02e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801c032:	f8bd 2000 	ldrh.w	r2, [sp]
 801c036:	462f      	mov	r7, r5
 801c038:	6828      	ldr	r0, [r5, #0]
 801c03a:	4413      	add	r3, r2
 801c03c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801c040:	f8ad 3008 	strh.w	r3, [sp, #8]
 801c044:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801c048:	4413      	add	r3, r2
 801c04a:	f8ad 300a 	strh.w	r3, [sp, #10]
 801c04e:	6803      	ldr	r3, [r0, #0]
 801c050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801c052:	4798      	blx	r3
 801c054:	f010 0f01 	tst.w	r0, #1
 801c058:	d00c      	beq.n	801c074 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 801c05a:	6828      	ldr	r0, [r5, #0]
 801c05c:	6803      	ldr	r3, [r0, #0]
 801c05e:	e894 0006 	ldmia.w	r4, {r1, r2}
 801c062:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801c064:	4798      	blx	r3
 801c066:	b004      	add	sp, #16
 801c068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c06c:	4a21      	ldr	r2, [pc, #132]	@ (801c0f4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801c06e:	e7c6      	b.n	801bffe <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801c070:	4b1f      	ldr	r3, [pc, #124]	@ (801c0f0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801c072:	e7cb      	b.n	801c00c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801c074:	6838      	ldr	r0, [r7, #0]
 801c076:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801c07a:	6803      	ldr	r3, [r0, #0]
 801c07c:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 801c080:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801c084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c086:	4798      	blx	r3
 801c088:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801c08c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801c090:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 801c094:	fb16 3602 	smlabb	r6, r6, r2, r3
 801c098:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801c09c:	6838      	ldr	r0, [r7, #0]
 801c09e:	6803      	ldr	r3, [r0, #0]
 801c0a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c0a2:	4798      	blx	r3
 801c0a4:	4a12      	ldr	r2, [pc, #72]	@ (801c0f0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801c0a6:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 801c0aa:	8813      	ldrh	r3, [r2, #0]
 801c0ac:	4691      	mov	r9, r2
 801c0ae:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801c0b2:	435d      	muls	r5, r3
 801c0b4:	fb03 1404 	mla	r4, r3, r4, r1
 801c0b8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801c0bc:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801c0c0:	6838      	ldr	r0, [r7, #0]
 801c0c2:	42ac      	cmp	r4, r5
 801c0c4:	6803      	ldr	r3, [r0, #0]
 801c0c6:	d20e      	bcs.n	801c0e6 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 801c0c8:	f8d3 a034 	ldr.w	sl, [r3, #52]	@ 0x34
 801c0cc:	4632      	mov	r2, r6
 801c0ce:	4643      	mov	r3, r8
 801c0d0:	4621      	mov	r1, r4
 801c0d2:	47d0      	blx	sl
 801c0d4:	f8b9 3000 	ldrh.w	r3, [r9]
 801c0d8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c0dc:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801c0e0:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801c0e4:	e7ec      	b.n	801c0c0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 801c0e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c0e8:	4798      	blx	r3
 801c0ea:	e7bc      	b.n	801c066 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801c0ec:	20027b8c 	.word	0x20027b8c
 801c0f0:	20027b8e 	.word	0x20027b8e
 801c0f4:	20027b90 	.word	0x20027b90
 801c0f8:	20027b94 	.word	0x20027b94

0801c0fc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801c0fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c100:	b08b      	sub	sp, #44	@ 0x2c
 801c102:	460f      	mov	r7, r1
 801c104:	4616      	mov	r6, r2
 801c106:	f89d b050 	ldrb.w	fp, [sp, #80]	@ 0x50
 801c10a:	f89d 4054 	ldrb.w	r4, [sp, #84]	@ 0x54
 801c10e:	f1bb 0f00 	cmp.w	fp, #0
 801c112:	d049      	beq.n	801c1a8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801c114:	6810      	ldr	r0, [r2, #0]
 801c116:	ad06      	add	r5, sp, #24
 801c118:	6851      	ldr	r1, [r2, #4]
 801c11a:	c503      	stmia	r5!, {r0, r1}
 801c11c:	6818      	ldr	r0, [r3, #0]
 801c11e:	ad08      	add	r5, sp, #32
 801c120:	6859      	ldr	r1, [r3, #4]
 801c122:	c503      	stmia	r5!, {r0, r1}
 801c124:	a806      	add	r0, sp, #24
 801c126:	f7f9 fe1d 	bl	8015d64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c12a:	4631      	mov	r1, r6
 801c12c:	a808      	add	r0, sp, #32
 801c12e:	f7f9 fe41 	bl	8015db4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c132:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801c136:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801c13a:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801c13e:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 801c142:	fb16 2103 	smlabb	r1, r6, r3, r2
 801c146:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 801c14a:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 801c14e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801c152:	4f5f      	ldr	r7, [pc, #380]	@ (801c2d0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801c154:	440a      	add	r2, r1
 801c156:	6838      	ldr	r0, [r7, #0]
 801c158:	46b9      	mov	r9, r7
 801c15a:	f8ad 2020 	strh.w	r2, [sp, #32]
 801c15e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801c162:	4413      	add	r3, r2
 801c164:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801c168:	6803      	ldr	r3, [r0, #0]
 801c16a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801c16c:	4798      	blx	r3
 801c16e:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801c172:	d01c      	beq.n	801c1ae <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801c174:	f010 0f04 	tst.w	r0, #4
 801c178:	d01d      	beq.n	801c1b6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801c17a:	f8d9 0000 	ldr.w	r0, [r9]
 801c17e:	2700      	movs	r7, #0
 801c180:	b2ad      	uxth	r5, r5
 801c182:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 801c186:	6801      	ldr	r1, [r0, #0]
 801c188:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801c18c:	f8cd b00c 	str.w	fp, [sp, #12]
 801c190:	9501      	str	r5, [sp, #4]
 801c192:	e9cd 4704 	strd	r4, r7, [sp, #16]
 801c196:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801c19a:	9402      	str	r4, [sp, #8]
 801c19c:	fa1f f488 	uxth.w	r4, r8
 801c1a0:	9400      	str	r4, [sp, #0]
 801c1a2:	6c4c      	ldr	r4, [r1, #68]	@ 0x44
 801c1a4:	4631      	mov	r1, r6
 801c1a6:	47a0      	blx	r4
 801c1a8:	b00b      	add	sp, #44	@ 0x2c
 801c1aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c1ae:	b914      	cbnz	r4, 801c1b6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801c1b0:	f010 0f01 	tst.w	r0, #1
 801c1b4:	e7e0      	b.n	801c178 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 801c1b6:	f8d9 0000 	ldr.w	r0, [r9]
 801c1ba:	ea4f 0748 	mov.w	r7, r8, lsl #1
 801c1be:	6803      	ldr	r3, [r0, #0]
 801c1c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c1c2:	4798      	blx	r3
 801c1c4:	4b43      	ldr	r3, [pc, #268]	@ (801c2d4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 801c1c6:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 801c1ca:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801c1ce:	881a      	ldrh	r2, [r3, #0]
 801c1d0:	469a      	mov	sl, r3
 801c1d2:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801c1d6:	fb05 f502 	mul.w	r5, r5, r2
 801c1da:	fb02 1404 	mla	r4, r2, r4, r1
 801c1de:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801c1e2:	d059      	beq.n	801c298 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 801c1e4:	f1cb 09ff 	rsb	r9, fp, #255	@ 0xff
 801c1e8:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801c1ec:	fa1f f28b 	uxth.w	r2, fp
 801c1f0:	469e      	mov	lr, r3
 801c1f2:	fa1f f989 	uxth.w	r9, r9
 801c1f6:	42ac      	cmp	r4, r5
 801c1f8:	d264      	bcs.n	801c2c4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801c1fa:	eb04 0a07 	add.w	sl, r4, r7
 801c1fe:	4554      	cmp	r4, sl
 801c200:	d23d      	bcs.n	801c27e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 801c202:	8821      	ldrh	r1, [r4, #0]
 801c204:	f836 3b02 	ldrh.w	r3, [r6], #2
 801c208:	1208      	asrs	r0, r1, #8
 801c20a:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801c20e:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 801c212:	ea4f 0be1 	mov.w	fp, r1, asr #3
 801c216:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801c21a:	00c9      	lsls	r1, r1, #3
 801c21c:	fb10 f009 	smulbb	r0, r0, r9
 801c220:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 801c224:	b2c9      	uxtb	r1, r1
 801c226:	fb0c 0c02 	mla	ip, ip, r2, r0
 801c22a:	10d8      	asrs	r0, r3, #3
 801c22c:	fb1b fb09 	smulbb	fp, fp, r9
 801c230:	00db      	lsls	r3, r3, #3
 801c232:	fa1f fc8c 	uxth.w	ip, ip
 801c236:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 801c23a:	fb11 f109 	smulbb	r1, r1, r9
 801c23e:	b2db      	uxtb	r3, r3
 801c240:	fb00 b002 	mla	r0, r0, r2, fp
 801c244:	f10c 0b01 	add.w	fp, ip, #1
 801c248:	fb03 1302 	mla	r3, r3, r2, r1
 801c24c:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c250:	b29b      	uxth	r3, r3
 801c252:	b280      	uxth	r0, r0
 801c254:	f40c 4b78 	and.w	fp, ip, #63488	@ 0xf800
 801c258:	f103 0c01 	add.w	ip, r3, #1
 801c25c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801c260:	1c43      	adds	r3, r0, #1
 801c262:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801c266:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801c26a:	0940      	lsrs	r0, r0, #5
 801c26c:	ea4c 0c0b 	orr.w	ip, ip, fp
 801c270:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801c274:	ea4c 0c00 	orr.w	ip, ip, r0
 801c278:	f824 cb02 	strh.w	ip, [r4], #2
 801c27c:	e7bf      	b.n	801c1fe <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 801c27e:	f8be 3000 	ldrh.w	r3, [lr]
 801c282:	eba3 0308 	sub.w	r3, r3, r8
 801c286:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c28a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801c28e:	eba3 0308 	sub.w	r3, r3, r8
 801c292:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801c296:	e7ae      	b.n	801c1f6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 801c298:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801c29c:	f8d9 0000 	ldr.w	r0, [r9]
 801c2a0:	42ac      	cmp	r4, r5
 801c2a2:	6803      	ldr	r3, [r0, #0]
 801c2a4:	d20e      	bcs.n	801c2c4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801c2a6:	f8d3 8034 	ldr.w	r8, [r3, #52]	@ 0x34
 801c2aa:	4632      	mov	r2, r6
 801c2ac:	463b      	mov	r3, r7
 801c2ae:	4621      	mov	r1, r4
 801c2b0:	47c0      	blx	r8
 801c2b2:	f8ba 3000 	ldrh.w	r3, [sl]
 801c2b6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c2ba:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801c2be:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801c2c2:	e7eb      	b.n	801c29c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 801c2c4:	4b02      	ldr	r3, [pc, #8]	@ (801c2d0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801c2c6:	6818      	ldr	r0, [r3, #0]
 801c2c8:	6803      	ldr	r3, [r0, #0]
 801c2ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c2cc:	4798      	blx	r3
 801c2ce:	e76b      	b.n	801c1a8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801c2d0:	20027b94 	.word	0x20027b94
 801c2d4:	20027b8e 	.word	0x20027b8e

0801c2d8 <_ZN8touchgfx8LCD16bppD0Ev>:
 801c2d8:	b510      	push	{r4, lr}
 801c2da:	4604      	mov	r4, r0
 801c2dc:	2178      	movs	r1, #120	@ 0x78
 801c2de:	f009 fbb6 	bl	8025a4e <_ZdlPvj>
 801c2e2:	4620      	mov	r0, r4
 801c2e4:	bd10      	pop	{r4, pc}

0801c2e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801c2e6:	b510      	push	{r4, lr}
 801c2e8:	4604      	mov	r4, r0
 801c2ea:	2104      	movs	r1, #4
 801c2ec:	f009 fbaf 	bl	8025a4e <_ZdlPvj>
 801c2f0:	4620      	mov	r0, r4
 801c2f2:	bd10      	pop	{r4, pc}

0801c2f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801c2f4:	b510      	push	{r4, lr}
 801c2f6:	4604      	mov	r4, r0
 801c2f8:	2104      	movs	r1, #4
 801c2fa:	f009 fba8 	bl	8025a4e <_ZdlPvj>
 801c2fe:	4620      	mov	r0, r4
 801c300:	bd10      	pop	{r4, pc}

0801c302 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801c302:	b510      	push	{r4, lr}
 801c304:	4604      	mov	r4, r0
 801c306:	2104      	movs	r1, #4
 801c308:	f009 fba1 	bl	8025a4e <_ZdlPvj>
 801c30c:	4620      	mov	r0, r4
 801c30e:	bd10      	pop	{r4, pc}

0801c310 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801c310:	b510      	push	{r4, lr}
 801c312:	4604      	mov	r4, r0
 801c314:	2104      	movs	r1, #4
 801c316:	f009 fb9a 	bl	8025a4e <_ZdlPvj>
 801c31a:	4620      	mov	r0, r4
 801c31c:	bd10      	pop	{r4, pc}

0801c31e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801c31e:	b510      	push	{r4, lr}
 801c320:	4604      	mov	r4, r0
 801c322:	2104      	movs	r1, #4
 801c324:	f009 fb93 	bl	8025a4e <_ZdlPvj>
 801c328:	4620      	mov	r0, r4
 801c32a:	bd10      	pop	{r4, pc}

0801c32c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801c32c:	b510      	push	{r4, lr}
 801c32e:	4604      	mov	r4, r0
 801c330:	2104      	movs	r1, #4
 801c332:	f009 fb8c 	bl	8025a4e <_ZdlPvj>
 801c336:	4620      	mov	r0, r4
 801c338:	bd10      	pop	{r4, pc}

0801c33a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801c33a:	b510      	push	{r4, lr}
 801c33c:	4604      	mov	r4, r0
 801c33e:	2104      	movs	r1, #4
 801c340:	f009 fb85 	bl	8025a4e <_ZdlPvj>
 801c344:	4620      	mov	r0, r4
 801c346:	bd10      	pop	{r4, pc}

0801c348 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801c348:	b510      	push	{r4, lr}
 801c34a:	4604      	mov	r4, r0
 801c34c:	2104      	movs	r1, #4
 801c34e:	f009 fb7e 	bl	8025a4e <_ZdlPvj>
 801c352:	4620      	mov	r0, r4
 801c354:	bd10      	pop	{r4, pc}

0801c356 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801c356:	b510      	push	{r4, lr}
 801c358:	4604      	mov	r4, r0
 801c35a:	2104      	movs	r1, #4
 801c35c:	f009 fb77 	bl	8025a4e <_ZdlPvj>
 801c360:	4620      	mov	r0, r4
 801c362:	bd10      	pop	{r4, pc}

0801c364 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801c364:	b510      	push	{r4, lr}
 801c366:	4604      	mov	r4, r0
 801c368:	2104      	movs	r1, #4
 801c36a:	f009 fb70 	bl	8025a4e <_ZdlPvj>
 801c36e:	4620      	mov	r0, r4
 801c370:	bd10      	pop	{r4, pc}

0801c372 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801c372:	b510      	push	{r4, lr}
 801c374:	4604      	mov	r4, r0
 801c376:	2104      	movs	r1, #4
 801c378:	f009 fb69 	bl	8025a4e <_ZdlPvj>
 801c37c:	4620      	mov	r0, r4
 801c37e:	bd10      	pop	{r4, pc}

0801c380 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801c380:	b510      	push	{r4, lr}
 801c382:	4604      	mov	r4, r0
 801c384:	2104      	movs	r1, #4
 801c386:	f009 fb62 	bl	8025a4e <_ZdlPvj>
 801c38a:	4620      	mov	r0, r4
 801c38c:	bd10      	pop	{r4, pc}

0801c38e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801c38e:	b510      	push	{r4, lr}
 801c390:	4604      	mov	r4, r0
 801c392:	2104      	movs	r1, #4
 801c394:	f009 fb5b 	bl	8025a4e <_ZdlPvj>
 801c398:	4620      	mov	r0, r4
 801c39a:	bd10      	pop	{r4, pc}

0801c39c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801c39c:	b510      	push	{r4, lr}
 801c39e:	4604      	mov	r4, r0
 801c3a0:	2104      	movs	r1, #4
 801c3a2:	f009 fb54 	bl	8025a4e <_ZdlPvj>
 801c3a6:	4620      	mov	r0, r4
 801c3a8:	bd10      	pop	{r4, pc}

0801c3aa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801c3aa:	b510      	push	{r4, lr}
 801c3ac:	4604      	mov	r4, r0
 801c3ae:	2104      	movs	r1, #4
 801c3b0:	f009 fb4d 	bl	8025a4e <_ZdlPvj>
 801c3b4:	4620      	mov	r0, r4
 801c3b6:	bd10      	pop	{r4, pc}

0801c3b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801c3b8:	b510      	push	{r4, lr}
 801c3ba:	4604      	mov	r4, r0
 801c3bc:	2104      	movs	r1, #4
 801c3be:	f009 fb46 	bl	8025a4e <_ZdlPvj>
 801c3c2:	4620      	mov	r0, r4
 801c3c4:	bd10      	pop	{r4, pc}

0801c3c6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801c3c6:	b510      	push	{r4, lr}
 801c3c8:	4604      	mov	r4, r0
 801c3ca:	2104      	movs	r1, #4
 801c3cc:	f009 fb3f 	bl	8025a4e <_ZdlPvj>
 801c3d0:	4620      	mov	r0, r4
 801c3d2:	bd10      	pop	{r4, pc}

0801c3d4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801c3d4:	b510      	push	{r4, lr}
 801c3d6:	4604      	mov	r4, r0
 801c3d8:	2104      	movs	r1, #4
 801c3da:	f009 fb38 	bl	8025a4e <_ZdlPvj>
 801c3de:	4620      	mov	r0, r4
 801c3e0:	bd10      	pop	{r4, pc}

0801c3e2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801c3e2:	b510      	push	{r4, lr}
 801c3e4:	4604      	mov	r4, r0
 801c3e6:	2104      	movs	r1, #4
 801c3e8:	f009 fb31 	bl	8025a4e <_ZdlPvj>
 801c3ec:	4620      	mov	r0, r4
 801c3ee:	bd10      	pop	{r4, pc}

0801c3f0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 801c3f0:	b510      	push	{r4, lr}
 801c3f2:	4604      	mov	r4, r0
 801c3f4:	2104      	movs	r1, #4
 801c3f6:	f009 fb2a 	bl	8025a4e <_ZdlPvj>
 801c3fa:	4620      	mov	r0, r4
 801c3fc:	bd10      	pop	{r4, pc}

0801c3fe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801c3fe:	b510      	push	{r4, lr}
 801c400:	4604      	mov	r4, r0
 801c402:	2104      	movs	r1, #4
 801c404:	f009 fb23 	bl	8025a4e <_ZdlPvj>
 801c408:	4620      	mov	r0, r4
 801c40a:	bd10      	pop	{r4, pc}

0801c40c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801c40c:	b510      	push	{r4, lr}
 801c40e:	4604      	mov	r4, r0
 801c410:	2104      	movs	r1, #4
 801c412:	f009 fb1c 	bl	8025a4e <_ZdlPvj>
 801c416:	4620      	mov	r0, r4
 801c418:	bd10      	pop	{r4, pc}

0801c41a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801c41a:	b510      	push	{r4, lr}
 801c41c:	4604      	mov	r4, r0
 801c41e:	2104      	movs	r1, #4
 801c420:	f009 fb15 	bl	8025a4e <_ZdlPvj>
 801c424:	4620      	mov	r0, r4
 801c426:	bd10      	pop	{r4, pc}

0801c428 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801c428:	b510      	push	{r4, lr}
 801c42a:	4604      	mov	r4, r0
 801c42c:	2104      	movs	r1, #4
 801c42e:	f009 fb0e 	bl	8025a4e <_ZdlPvj>
 801c432:	4620      	mov	r0, r4
 801c434:	bd10      	pop	{r4, pc}

0801c436 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801c436:	b510      	push	{r4, lr}
 801c438:	4604      	mov	r4, r0
 801c43a:	2104      	movs	r1, #4
 801c43c:	f009 fb07 	bl	8025a4e <_ZdlPvj>
 801c440:	4620      	mov	r0, r4
 801c442:	bd10      	pop	{r4, pc}

0801c444 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801c444:	b510      	push	{r4, lr}
 801c446:	4604      	mov	r4, r0
 801c448:	2104      	movs	r1, #4
 801c44a:	f009 fb00 	bl	8025a4e <_ZdlPvj>
 801c44e:	4620      	mov	r0, r4
 801c450:	bd10      	pop	{r4, pc}

0801c452 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801c452:	b510      	push	{r4, lr}
 801c454:	4604      	mov	r4, r0
 801c456:	2104      	movs	r1, #4
 801c458:	f009 faf9 	bl	8025a4e <_ZdlPvj>
 801c45c:	4620      	mov	r0, r4
 801c45e:	bd10      	pop	{r4, pc}

0801c460 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801c460:	b510      	push	{r4, lr}
 801c462:	4604      	mov	r4, r0
 801c464:	2104      	movs	r1, #4
 801c466:	f009 faf2 	bl	8025a4e <_ZdlPvj>
 801c46a:	4620      	mov	r0, r4
 801c46c:	bd10      	pop	{r4, pc}
	...

0801c470 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 801c470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c474:	b091      	sub	sp, #68	@ 0x44
 801c476:	469b      	mov	fp, r3
 801c478:	4616      	mov	r6, r2
 801c47a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c47e:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 801c482:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801c486:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	@ 0x6c
 801c48a:	4604      	mov	r4, r0
 801c48c:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	@ 0x70
 801c490:	4640      	mov	r0, r8
 801c492:	460d      	mov	r5, r1
 801c494:	4659      	mov	r1, fp
 801c496:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 801c49a:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 801c49e:	f8ad 902c 	strh.w	r9, [sp, #44]	@ 0x2c
 801c4a2:	f8ad 702e 	strh.w	r7, [sp, #46]	@ 0x2e
 801c4a6:	f7f3 fe43 	bl	8010130 <_ZN8touchgfx4RectaNERKS0_>
 801c4aa:	4631      	mov	r1, r6
 801c4ac:	4640      	mov	r0, r8
 801c4ae:	f7f3 fe3f 	bl	8010130 <_ZN8touchgfx4RectaNERKS0_>
 801c4b2:	4b74      	ldr	r3, [pc, #464]	@ (801c684 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 801c4b4:	8818      	ldrh	r0, [r3, #0]
 801c4b6:	4b74      	ldr	r3, [pc, #464]	@ (801c688 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 801c4b8:	b202      	sxth	r2, r0
 801c4ba:	8819      	ldrh	r1, [r3, #0]
 801c4bc:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 801c4c0:	b20e      	sxth	r6, r1
 801c4c2:	2b00      	cmp	r3, #0
 801c4c4:	da07      	bge.n	801c4d6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 801c4c6:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 801c4ca:	4463      	add	r3, ip
 801c4cc:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 801c4d0:	2300      	movs	r3, #0
 801c4d2:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 801c4d6:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 801c4da:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 801c4de:	1ad2      	subs	r2, r2, r3
 801c4e0:	4594      	cmp	ip, r2
 801c4e2:	bfc4      	itt	gt
 801c4e4:	1ac2      	subgt	r2, r0, r3
 801c4e6:	f8ad 202c 	strhgt.w	r2, [sp, #44]	@ 0x2c
 801c4ea:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 801c4ee:	2a00      	cmp	r2, #0
 801c4f0:	da07      	bge.n	801c502 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 801c4f2:	f8bd c02e 	ldrh.w	ip, [sp, #46]	@ 0x2e
 801c4f6:	4462      	add	r2, ip
 801c4f8:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 801c4fc:	2200      	movs	r2, #0
 801c4fe:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 801c502:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	@ 0x2a
 801c506:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	@ 0x2e
 801c50a:	eba6 060a 	sub.w	r6, r6, sl
 801c50e:	42b2      	cmp	r2, r6
 801c510:	bfc4      	itt	gt
 801c512:	eba1 020a 	subgt.w	r2, r1, sl
 801c516:	f8ad 202e 	strhgt.w	r2, [sp, #46]	@ 0x2e
 801c51a:	4a5c      	ldr	r2, [pc, #368]	@ (801c68c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 801c51c:	7812      	ldrb	r2, [r2, #0]
 801c51e:	b9a2      	cbnz	r2, 801c54a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 801c520:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 801c524:	4286      	cmp	r6, r0
 801c526:	4640      	mov	r0, r8
 801c528:	9303      	str	r3, [sp, #12]
 801c52a:	bf14      	ite	ne
 801c52c:	2600      	movne	r6, #0
 801c52e:	2601      	moveq	r6, #1
 801c530:	f7f3 fe41 	bl	80101b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801c534:	9b03      	ldr	r3, [sp, #12]
 801c536:	b160      	cbz	r0, 801c552 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 801c538:	2300      	movs	r3, #0
 801c53a:	8023      	strh	r3, [r4, #0]
 801c53c:	8063      	strh	r3, [r4, #2]
 801c53e:	80a3      	strh	r3, [r4, #4]
 801c540:	4620      	mov	r0, r4
 801c542:	80e3      	strh	r3, [r4, #6]
 801c544:	b011      	add	sp, #68	@ 0x44
 801c546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c54a:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	@ 0x2e
 801c54e:	428e      	cmp	r6, r1
 801c550:	e7e9      	b.n	801c526 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 801c552:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 801c556:	a90e      	add	r1, sp, #56	@ 0x38
 801c558:	900e      	str	r0, [sp, #56]	@ 0x38
 801c55a:	a80c      	add	r0, sp, #48	@ 0x30
 801c55c:	9205      	str	r2, [sp, #20]
 801c55e:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	@ 0x2e
 801c562:	f8ad 903c 	strh.w	r9, [sp, #60]	@ 0x3c
 801c566:	9206      	str	r2, [sp, #24]
 801c568:	f8bb 2000 	ldrh.w	r2, [fp]
 801c56c:	f8ad 703e 	strh.w	r7, [sp, #62]	@ 0x3e
 801c570:	1a9b      	subs	r3, r3, r2
 801c572:	b21b      	sxth	r3, r3
 801c574:	9303      	str	r3, [sp, #12]
 801c576:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 801c57a:	f8df b118 	ldr.w	fp, [pc, #280]	@ 801c694 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 801c57e:	ebaa 0a03 	sub.w	sl, sl, r3
 801c582:	fa0f f38a 	sxth.w	r3, sl
 801c586:	9304      	str	r3, [sp, #16]
 801c588:	9b03      	ldr	r3, [sp, #12]
 801c58a:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 801c58e:	9b04      	ldr	r3, [sp, #16]
 801c590:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801c594:	9b05      	ldr	r3, [sp, #20]
 801c596:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 801c59a:	9b06      	ldr	r3, [sp, #24]
 801c59c:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 801c5a0:	f7f9 fc08 	bl	8015db4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c5a4:	4640      	mov	r0, r8
 801c5a6:	f7f9 fbdd 	bl	8015d64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c5aa:	a80e      	add	r0, sp, #56	@ 0x38
 801c5ac:	f7f9 fbda 	bl	8015d64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c5b0:	4b37      	ldr	r3, [pc, #220]	@ (801c690 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 801c5b2:	4628      	mov	r0, r5
 801c5b4:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	@ 0x3c
 801c5b8:	881b      	ldrh	r3, [r3, #0]
 801c5ba:	9307      	str	r3, [sp, #28]
 801c5bc:	682b      	ldr	r3, [r5, #0]
 801c5be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c5c0:	4798      	blx	r3
 801c5c2:	f8bd 5032 	ldrh.w	r5, [sp, #50]	@ 0x32
 801c5c6:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 801c5ca:	4681      	mov	r9, r0
 801c5cc:	f8db 0000 	ldr.w	r0, [fp]
 801c5d0:	fb1a 3305 	smlabb	r3, sl, r5, r3
 801c5d4:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 801c5d6:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801c5da:	6803      	ldr	r3, [r0, #0]
 801c5dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c5de:	4798      	blx	r3
 801c5e0:	4607      	mov	r7, r0
 801c5e2:	f8db 0000 	ldr.w	r0, [fp]
 801c5e6:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 801c5ea:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 801c5ee:	6803      	ldr	r3, [r0, #0]
 801c5f0:	9109      	str	r1, [sp, #36]	@ 0x24
 801c5f2:	9208      	str	r2, [sp, #32]
 801c5f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801c5f6:	4798      	blx	r3
 801c5f8:	f010 0f01 	tst.w	r0, #1
 801c5fc:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801c600:	d012      	beq.n	801c628 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 801c602:	f8db 0000 	ldr.w	r0, [fp]
 801c606:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 801c60a:	6803      	ldr	r3, [r0, #0]
 801c60c:	9200      	str	r2, [sp, #0]
 801c60e:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 801c610:	462b      	mov	r3, r5
 801c612:	e898 0006 	ldmia.w	r8, {r1, r2}
 801c616:	47b0      	blx	r6
 801c618:	9b03      	ldr	r3, [sp, #12]
 801c61a:	8023      	strh	r3, [r4, #0]
 801c61c:	9b04      	ldr	r3, [sp, #16]
 801c61e:	8063      	strh	r3, [r4, #2]
 801c620:	9b05      	ldr	r3, [sp, #20]
 801c622:	80a3      	strh	r3, [r4, #4]
 801c624:	9b06      	ldr	r3, [sp, #24]
 801c626:	e78b      	b.n	801c540 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 801c628:	fb09 f202 	mul.w	r2, r9, r2
 801c62c:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	@ 0x36
 801c630:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801c634:	440f      	add	r7, r1
 801c636:	b166      	cbz	r6, 801c652 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 801c638:	9a07      	ldr	r2, [sp, #28]
 801c63a:	4592      	cmp	sl, r2
 801c63c:	d109      	bne.n	801c652 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 801c63e:	f8db 0000 	ldr.w	r0, [fp]
 801c642:	fb09 f303 	mul.w	r3, r9, r3
 801c646:	4629      	mov	r1, r5
 801c648:	6802      	ldr	r2, [r0, #0]
 801c64a:	6b56      	ldr	r6, [r2, #52]	@ 0x34
 801c64c:	463a      	mov	r2, r7
 801c64e:	47b0      	blx	r6
 801c650:	e7e2      	b.n	801c618 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 801c652:	fb0a f303 	mul.w	r3, sl, r3
 801c656:	ea4f 064a 	mov.w	r6, sl, lsl #1
 801c65a:	f8df b038 	ldr.w	fp, [pc, #56]	@ 801c694 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 801c65e:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 801c662:	4545      	cmp	r5, r8
 801c664:	d2d8      	bcs.n	801c618 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 801c666:	f8db 0000 	ldr.w	r0, [fp]
 801c66a:	4629      	mov	r1, r5
 801c66c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801c670:	4435      	add	r5, r6
 801c672:	6802      	ldr	r2, [r0, #0]
 801c674:	005b      	lsls	r3, r3, #1
 801c676:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 801c67a:	463a      	mov	r2, r7
 801c67c:	47d0      	blx	sl
 801c67e:	444f      	add	r7, r9
 801c680:	e7ef      	b.n	801c662 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 801c682:	bf00      	nop
 801c684:	20027b88 	.word	0x20027b88
 801c688:	20027b8a 	.word	0x20027b8a
 801c68c:	20027b8c 	.word	0x20027b8c
 801c690:	20027b8e 	.word	0x20027b8e
 801c694:	20027b94 	.word	0x20027b94

0801c698 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801c698:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c69a:	4606      	mov	r6, r0
 801c69c:	b087      	sub	sp, #28
 801c69e:	460c      	mov	r4, r1
 801c6a0:	4617      	mov	r7, r2
 801c6a2:	461d      	mov	r5, r3
 801c6a4:	b333      	cbz	r3, 801c6f4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801c6a6:	4608      	mov	r0, r1
 801c6a8:	f7f3 fd85 	bl	80101b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801c6ac:	bb10      	cbnz	r0, 801c6f4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801c6ae:	6820      	ldr	r0, [r4, #0]
 801c6b0:	ab04      	add	r3, sp, #16
 801c6b2:	6861      	ldr	r1, [r4, #4]
 801c6b4:	4c1b      	ldr	r4, [pc, #108]	@ (801c724 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 801c6b6:	c303      	stmia	r3!, {r0, r1}
 801c6b8:	a804      	add	r0, sp, #16
 801c6ba:	f7f9 fb53 	bl	8015d64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c6be:	6820      	ldr	r0, [r4, #0]
 801c6c0:	6803      	ldr	r3, [r0, #0]
 801c6c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801c6c4:	4798      	blx	r3
 801c6c6:	2dff      	cmp	r5, #255	@ 0xff
 801c6c8:	d016      	beq.n	801c6f8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801c6ca:	f010 0f08 	tst.w	r0, #8
 801c6ce:	6820      	ldr	r0, [r4, #0]
 801c6d0:	d015      	beq.n	801c6fe <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801c6d2:	2400      	movs	r4, #0
 801c6d4:	6801      	ldr	r1, [r0, #0]
 801c6d6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801c6da:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801c6de:	e9cd 5402 	strd	r5, r4, [sp, #8]
 801c6e2:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801c6e6:	9401      	str	r4, [sp, #4]
 801c6e8:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801c6ec:	9400      	str	r4, [sp, #0]
 801c6ee:	6e0c      	ldr	r4, [r1, #96]	@ 0x60
 801c6f0:	4639      	mov	r1, r7
 801c6f2:	47a0      	blx	r4
 801c6f4:	b007      	add	sp, #28
 801c6f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c6f8:	f010 0f02 	tst.w	r0, #2
 801c6fc:	e7e7      	b.n	801c6ce <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 801c6fe:	6803      	ldr	r3, [r0, #0]
 801c700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c702:	4798      	blx	r3
 801c704:	4b08      	ldr	r3, [pc, #32]	@ (801c728 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801c706:	4601      	mov	r1, r0
 801c708:	4630      	mov	r0, r6
 801c70a:	881a      	ldrh	r2, [r3, #0]
 801c70c:	6833      	ldr	r3, [r6, #0]
 801c70e:	e9cd 7500 	strd	r7, r5, [sp]
 801c712:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 801c714:	ab04      	add	r3, sp, #16
 801c716:	47a8      	blx	r5
 801c718:	6820      	ldr	r0, [r4, #0]
 801c71a:	6803      	ldr	r3, [r0, #0]
 801c71c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c71e:	4798      	blx	r3
 801c720:	e7e8      	b.n	801c6f4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801c722:	bf00      	nop
 801c724:	20027b94 	.word	0x20027b94
 801c728:	20027b8e 	.word	0x20027b8e

0801c72c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801c72c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c730:	f89d 7024 	ldrb.w	r7, [sp, #36]	@ 0x24
 801c734:	4688      	mov	r8, r1
 801c736:	4614      	mov	r4, r2
 801c738:	461d      	mov	r5, r3
 801c73a:	9e08      	ldr	r6, [sp, #32]
 801c73c:	2f00      	cmp	r7, #0
 801c73e:	f000 80ab 	beq.w	801c898 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801c742:	4618      	mov	r0, r3
 801c744:	f7f3 fd37 	bl	80101b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801c748:	2800      	cmp	r0, #0
 801c74a:	f040 80a5 	bne.w	801c898 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801c74e:	f9b5 1000 	ldrsh.w	r1, [r5]
 801c752:	2fff      	cmp	r7, #255	@ 0xff
 801c754:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801c758:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 801c75c:	fb04 1303 	mla	r3, r4, r3, r1
 801c760:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 801c764:	eba4 0200 	sub.w	r2, r4, r0
 801c768:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 801c76c:	fb04 f505 	mul.w	r5, r4, r5
 801c770:	ea4f 2816 	mov.w	r8, r6, lsr #8
 801c774:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 801c778:	d04a      	beq.n	801c810 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe4>
 801c77a:	b2bc      	uxth	r4, r7
 801c77c:	f1c7 0cff 	rsb	ip, r7, #255	@ 0xff
 801c780:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 801c784:	fa5f f788 	uxtb.w	r7, r8
 801c788:	b2f3      	uxtb	r3, r6
 801c78a:	0040      	lsls	r0, r0, #1
 801c78c:	fb0e fe04 	mul.w	lr, lr, r4
 801c790:	4367      	muls	r7, r4
 801c792:	ea4f 0842 	mov.w	r8, r2, lsl #1
 801c796:	4363      	muls	r3, r4
 801c798:	fa1f fc8c 	uxth.w	ip, ip
 801c79c:	42a9      	cmp	r1, r5
 801c79e:	d27b      	bcs.n	801c898 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801c7a0:	eb01 0900 	add.w	r9, r1, r0
 801c7a4:	4549      	cmp	r1, r9
 801c7a6:	d231      	bcs.n	801c80c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe0>
 801c7a8:	880a      	ldrh	r2, [r1, #0]
 801c7aa:	1214      	asrs	r4, r2, #8
 801c7ac:	10d6      	asrs	r6, r2, #3
 801c7ae:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 801c7b2:	00d2      	lsls	r2, r2, #3
 801c7b4:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801c7b8:	b2d2      	uxtb	r2, r2
 801c7ba:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801c7be:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801c7c2:	fb14 f40c 	smulbb	r4, r4, ip
 801c7c6:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 801c7ca:	fb12 f20c 	smulbb	r2, r2, ip
 801c7ce:	fb16 f60c 	smulbb	r6, r6, ip
 801c7d2:	4474      	add	r4, lr
 801c7d4:	441a      	add	r2, r3
 801c7d6:	b2a4      	uxth	r4, r4
 801c7d8:	443e      	add	r6, r7
 801c7da:	b292      	uxth	r2, r2
 801c7dc:	f104 0a01 	add.w	sl, r4, #1
 801c7e0:	b2b6      	uxth	r6, r6
 801c7e2:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801c7e6:	f102 0a01 	add.w	sl, r2, #1
 801c7ea:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 801c7ee:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 801c7f2:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801c7f6:	4322      	orrs	r2, r4
 801c7f8:	1c74      	adds	r4, r6, #1
 801c7fa:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 801c7fe:	0976      	lsrs	r6, r6, #5
 801c800:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801c804:	4332      	orrs	r2, r6
 801c806:	f821 2b02 	strh.w	r2, [r1], #2
 801c80a:	e7cb      	b.n	801c7a4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x78>
 801c80c:	4441      	add	r1, r8
 801c80e:	e7c5      	b.n	801c79c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 801c810:	0973      	lsrs	r3, r6, #5
 801c812:	4f22      	ldr	r7, [pc, #136]	@ (801c89c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x170>)
 801c814:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801c818:	ea08 0707 	and.w	r7, r8, r7
 801c81c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801c820:	433b      	orrs	r3, r7
 801c822:	07e7      	lsls	r7, r4, #31
 801c824:	ea43 0306 	orr.w	r3, r3, r6
 801c828:	b29b      	uxth	r3, r3
 801c82a:	d50b      	bpl.n	801c844 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
 801c82c:	0040      	lsls	r0, r0, #1
 801c82e:	0052      	lsls	r2, r2, #1
 801c830:	42a9      	cmp	r1, r5
 801c832:	d231      	bcs.n	801c898 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801c834:	180c      	adds	r4, r1, r0
 801c836:	42a1      	cmp	r1, r4
 801c838:	d202      	bcs.n	801c840 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 801c83a:	f821 3b02 	strh.w	r3, [r1], #2
 801c83e:	e7fa      	b.n	801c836 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
 801c840:	4411      	add	r1, r2
 801c842:	e7f5      	b.n	801c830 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x104>
 801c844:	078e      	lsls	r6, r1, #30
 801c846:	d008      	beq.n	801c85a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12e>
 801c848:	0066      	lsls	r6, r4, #1
 801c84a:	460a      	mov	r2, r1
 801c84c:	42aa      	cmp	r2, r5
 801c84e:	d202      	bcs.n	801c856 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 801c850:	8013      	strh	r3, [r2, #0]
 801c852:	4432      	add	r2, r6
 801c854:	e7fa      	b.n	801c84c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x120>
 801c856:	3102      	adds	r1, #2
 801c858:	3801      	subs	r0, #1
 801c85a:	07c2      	lsls	r2, r0, #31
 801c85c:	d50b      	bpl.n	801c876 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
 801c85e:	f100 4200 	add.w	r2, r0, #2147483648	@ 0x80000000
 801c862:	0066      	lsls	r6, r4, #1
 801c864:	3a01      	subs	r2, #1
 801c866:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 801c86a:	42aa      	cmp	r2, r5
 801c86c:	d202      	bcs.n	801c874 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
 801c86e:	8013      	strh	r3, [r2, #0]
 801c870:	4432      	add	r2, r6
 801c872:	e7fa      	b.n	801c86a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13e>
 801c874:	3801      	subs	r0, #1
 801c876:	b178      	cbz	r0, 801c898 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801c878:	1040      	asrs	r0, r0, #1
 801c87a:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 801c87e:	0080      	lsls	r0, r0, #2
 801c880:	0064      	lsls	r4, r4, #1
 801c882:	42a9      	cmp	r1, r5
 801c884:	d208      	bcs.n	801c898 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801c886:	180e      	adds	r6, r1, r0
 801c888:	460a      	mov	r2, r1
 801c88a:	42b2      	cmp	r2, r6
 801c88c:	d202      	bcs.n	801c894 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801c88e:	f842 3b04 	str.w	r3, [r2], #4
 801c892:	e7fa      	b.n	801c88a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15e>
 801c894:	4421      	add	r1, r4
 801c896:	e7f4      	b.n	801c882 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
 801c898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c89c:	00fff800 	.word	0x00fff800

0801c8a0 <_ZN8touchgfx8LCD16bppC1Ev>:
 801c8a0:	2200      	movs	r2, #0
 801c8a2:	4910      	ldr	r1, [pc, #64]	@ (801c8e4 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 801c8a4:	6042      	str	r2, [r0, #4]
 801c8a6:	6001      	str	r1, [r0, #0]
 801c8a8:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801c8ac:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801c8b0:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801c8b4:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801c8b8:	e9c0 220a 	strd	r2, r2, [r0, #40]	@ 0x28
 801c8bc:	e9c0 220c 	strd	r2, r2, [r0, #48]	@ 0x30
 801c8c0:	e9c0 220e 	strd	r2, r2, [r0, #56]	@ 0x38
 801c8c4:	e9c0 2210 	strd	r2, r2, [r0, #64]	@ 0x40
 801c8c8:	e9c0 2212 	strd	r2, r2, [r0, #72]	@ 0x48
 801c8cc:	e9c0 2214 	strd	r2, r2, [r0, #80]	@ 0x50
 801c8d0:	e9c0 2216 	strd	r2, r2, [r0, #88]	@ 0x58
 801c8d4:	e9c0 2218 	strd	r2, r2, [r0, #96]	@ 0x60
 801c8d8:	e9c0 221a 	strd	r2, r2, [r0, #104]	@ 0x68
 801c8dc:	e9c0 221c 	strd	r2, r2, [r0, #112]	@ 0x70
 801c8e0:	4770      	bx	lr
 801c8e2:	bf00      	nop
 801c8e4:	0802b284 	.word	0x0802b284

0801c8e8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801c8e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c8ec:	b08d      	sub	sp, #52	@ 0x34
 801c8ee:	460d      	mov	r5, r1
 801c8f0:	4604      	mov	r4, r0
 801c8f2:	4699      	mov	r9, r3
 801c8f4:	6808      	ldr	r0, [r1, #0]
 801c8f6:	ab08      	add	r3, sp, #32
 801c8f8:	6849      	ldr	r1, [r1, #4]
 801c8fa:	c303      	stmia	r3!, {r0, r1}
 801c8fc:	6810      	ldr	r0, [r2, #0]
 801c8fe:	ab0a      	add	r3, sp, #40	@ 0x28
 801c900:	6851      	ldr	r1, [r2, #4]
 801c902:	c303      	stmia	r3!, {r0, r1}
 801c904:	a808      	add	r0, sp, #32
 801c906:	f7f9 fa2d 	bl	8015d64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c90a:	4629      	mov	r1, r5
 801c90c:	a80a      	add	r0, sp, #40	@ 0x28
 801c90e:	4d67      	ldr	r5, [pc, #412]	@ (801caac <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801c910:	f7f9 fa50 	bl	8015db4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c914:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	@ 0x28
 801c918:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	@ 0x2a
 801c91c:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 801c920:	6828      	ldr	r0, [r5, #0]
 801c922:	fb11 2103 	smlabb	r1, r1, r3, r2
 801c926:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	@ 0x2c
 801c92a:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	@ 0x2e
 801c92e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801c932:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801c936:	440a      	add	r2, r1
 801c938:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 801c93c:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 801c940:	4413      	add	r3, r2
 801c942:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 801c946:	6803      	ldr	r3, [r0, #0]
 801c948:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801c94a:	4798      	blx	r3
 801c94c:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 801c950:	d119      	bne.n	801c986 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 801c952:	f010 0f20 	tst.w	r0, #32
 801c956:	6828      	ldr	r0, [r5, #0]
 801c958:	d018      	beq.n	801c98c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 801c95a:	2500      	movs	r5, #0
 801c95c:	6801      	ldr	r1, [r0, #0]
 801c95e:	b2b6      	uxth	r6, r6
 801c960:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801c964:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 801c968:	9601      	str	r6, [sp, #4]
 801c96a:	e9cd 9503 	strd	r9, r5, [sp, #12]
 801c96e:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 801c972:	9502      	str	r5, [sp, #8]
 801c974:	fa1f f588 	uxth.w	r5, r8
 801c978:	9500      	str	r5, [sp, #0]
 801c97a:	6d0d      	ldr	r5, [r1, #80]	@ 0x50
 801c97c:	4621      	mov	r1, r4
 801c97e:	47a8      	blx	r5
 801c980:	b00d      	add	sp, #52	@ 0x34
 801c982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c986:	f010 0f40 	tst.w	r0, #64	@ 0x40
 801c98a:	e7e4      	b.n	801c956 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801c98c:	6803      	ldr	r3, [r0, #0]
 801c98e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c990:	4798      	blx	r3
 801c992:	4947      	ldr	r1, [pc, #284]	@ (801cab0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 801c994:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 801c998:	880b      	ldrh	r3, [r1, #0]
 801c99a:	468a      	mov	sl, r1
 801c99c:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	@ 0x28
 801c9a0:	fb03 5202 	mla	r2, r3, r2, r5
 801c9a4:	4373      	muls	r3, r6
 801c9a6:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801c9aa:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801c9ae:	9307      	str	r3, [sp, #28]
 801c9b0:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801c9b4:	9306      	str	r3, [sp, #24]
 801c9b6:	9b07      	ldr	r3, [sp, #28]
 801c9b8:	4298      	cmp	r0, r3
 801c9ba:	d270      	bcs.n	801ca9e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 801c9bc:	9b06      	ldr	r3, [sp, #24]
 801c9be:	4621      	mov	r1, r4
 801c9c0:	eb00 0b03 	add.w	fp, r0, r3
 801c9c4:	4558      	cmp	r0, fp
 801c9c6:	d25d      	bcs.n	801ca84 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 801c9c8:	f851 4b04 	ldr.w	r4, [r1], #4
 801c9cc:	0e23      	lsrs	r3, r4, #24
 801c9ce:	d014      	beq.n	801c9fa <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801c9d0:	2bff      	cmp	r3, #255	@ 0xff
 801c9d2:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 801c9d6:	d112      	bne.n	801c9fe <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801c9d8:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 801c9dc:	d10f      	bne.n	801c9fe <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801c9de:	0963      	lsrs	r3, r4, #5
 801c9e0:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 801c9e4:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801c9e8:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801c9ec:	f02c 0c07 	bic.w	ip, ip, #7
 801c9f0:	ea43 0c0c 	orr.w	ip, r3, ip
 801c9f4:	ea4c 0404 	orr.w	r4, ip, r4
 801c9f8:	8004      	strh	r4, [r0, #0]
 801c9fa:	3002      	adds	r0, #2
 801c9fc:	e7e2      	b.n	801c9c4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 801c9fe:	fb09 f303 	mul.w	r3, r9, r3
 801ca02:	8807      	ldrh	r7, [r0, #0]
 801ca04:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 801ca08:	fa5f fc8c 	uxtb.w	ip, ip
 801ca0c:	1c5a      	adds	r2, r3, #1
 801ca0e:	123e      	asrs	r6, r7, #8
 801ca10:	10fd      	asrs	r5, r7, #3
 801ca12:	eb02 2223 	add.w	r2, r2, r3, asr #8
 801ca16:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801ca1a:	00ff      	lsls	r7, r7, #3
 801ca1c:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 801ca20:	1212      	asrs	r2, r2, #8
 801ca22:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801ca26:	b293      	uxth	r3, r2
 801ca28:	43d2      	mvns	r2, r2
 801ca2a:	b2ff      	uxtb	r7, r7
 801ca2c:	fb1e fe03 	smulbb	lr, lr, r3
 801ca30:	b2d2      	uxtb	r2, r2
 801ca32:	fb1c fc03 	smulbb	ip, ip, r3
 801ca36:	b2e4      	uxtb	r4, r4
 801ca38:	fb06 e602 	mla	r6, r6, r2, lr
 801ca3c:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801ca40:	fb14 f403 	smulbb	r4, r4, r3
 801ca44:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 801ca48:	b2b6      	uxth	r6, r6
 801ca4a:	fb05 c502 	mla	r5, r5, r2, ip
 801ca4e:	fb07 4702 	mla	r7, r7, r2, r4
 801ca52:	f106 0e01 	add.w	lr, r6, #1
 801ca56:	b2ad      	uxth	r5, r5
 801ca58:	b2bf      	uxth	r7, r7
 801ca5a:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 801ca5e:	f105 0c01 	add.w	ip, r5, #1
 801ca62:	f406 4e78 	and.w	lr, r6, #63488	@ 0xf800
 801ca66:	1c7e      	adds	r6, r7, #1
 801ca68:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801ca6c:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801ca70:	096d      	lsrs	r5, r5, #5
 801ca72:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801ca76:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801ca7a:	ea46 060e 	orr.w	r6, r6, lr
 801ca7e:	432e      	orrs	r6, r5
 801ca80:	8006      	strh	r6, [r0, #0]
 801ca82:	e7ba      	b.n	801c9fa <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801ca84:	f8ba 3000 	ldrh.w	r3, [sl]
 801ca88:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	@ 0x24
 801ca8c:	eba3 0308 	sub.w	r3, r3, r8
 801ca90:	eba4 0408 	sub.w	r4, r4, r8
 801ca94:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801ca98:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801ca9c:	e78b      	b.n	801c9b6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 801ca9e:	4b03      	ldr	r3, [pc, #12]	@ (801caac <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801caa0:	6818      	ldr	r0, [r3, #0]
 801caa2:	6803      	ldr	r3, [r0, #0]
 801caa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801caa6:	4798      	blx	r3
 801caa8:	e76a      	b.n	801c980 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 801caaa:	bf00      	nop
 801caac:	20027b94 	.word	0x20027b94
 801cab0:	20027b8e 	.word	0x20027b8e

0801cab4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 801cab4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801cab8:	b085      	sub	sp, #20
 801caba:	6810      	ldr	r0, [r2, #0]
 801cabc:	460c      	mov	r4, r1
 801cabe:	6851      	ldr	r1, [r2, #4]
 801cac0:	466d      	mov	r5, sp
 801cac2:	4616      	mov	r6, r2
 801cac4:	c503      	stmia	r5!, {r0, r1}
 801cac6:	6818      	ldr	r0, [r3, #0]
 801cac8:	6859      	ldr	r1, [r3, #4]
 801caca:	c503      	stmia	r5!, {r0, r1}
 801cacc:	4668      	mov	r0, sp
 801cace:	4d2e      	ldr	r5, [pc, #184]	@ (801cb88 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 801cad0:	f7f9 f948 	bl	8015d64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cad4:	4631      	mov	r1, r6
 801cad6:	a802      	add	r0, sp, #8
 801cad8:	4e2c      	ldr	r6, [pc, #176]	@ (801cb8c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 801cada:	f7f9 f96b 	bl	8015db4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801cade:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801cae2:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801cae6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801caea:	6828      	ldr	r0, [r5, #0]
 801caec:	fb11 2103 	smlabb	r1, r1, r3, r2
 801caf0:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801caf4:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 801caf8:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801cafc:	f8bd 1000 	ldrh.w	r1, [sp]
 801cb00:	440a      	add	r2, r1
 801cb02:	f8ad 2008 	strh.w	r2, [sp, #8]
 801cb06:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801cb0a:	4413      	add	r3, r2
 801cb0c:	f8ad 300a 	strh.w	r3, [sp, #10]
 801cb10:	6803      	ldr	r3, [r0, #0]
 801cb12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cb14:	4798      	blx	r3
 801cb16:	8833      	ldrh	r3, [r6, #0]
 801cb18:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801cb1c:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 801cb20:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801cb24:	f8df e068 	ldr.w	lr, [pc, #104]	@ 801cb90 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 801cb28:	fb03 1202 	mla	r2, r3, r2, r1
 801cb2c:	fb08 f303 	mul.w	r3, r8, r3
 801cb30:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801cb34:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801cb38:	4298      	cmp	r0, r3
 801cb3a:	d21d      	bcs.n	801cb78 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 801cb3c:	eb00 080c 	add.w	r8, r0, ip
 801cb40:	4540      	cmp	r0, r8
 801cb42:	d20f      	bcs.n	801cb64 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 801cb44:	f854 1b04 	ldr.w	r1, [r4], #4
 801cb48:	ea4f 1951 	mov.w	r9, r1, lsr #5
 801cb4c:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 801cb50:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 801cb54:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 801cb58:	ea42 0209 	orr.w	r2, r2, r9
 801cb5c:	430a      	orrs	r2, r1
 801cb5e:	f820 2b02 	strh.w	r2, [r0], #2
 801cb62:	e7ed      	b.n	801cb40 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 801cb64:	8832      	ldrh	r2, [r6, #0]
 801cb66:	1bd2      	subs	r2, r2, r7
 801cb68:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801cb6c:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801cb70:	1bd2      	subs	r2, r2, r7
 801cb72:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 801cb76:	e7df      	b.n	801cb38 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 801cb78:	6828      	ldr	r0, [r5, #0]
 801cb7a:	6803      	ldr	r3, [r0, #0]
 801cb7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cb7e:	4798      	blx	r3
 801cb80:	b005      	add	sp, #20
 801cb82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cb86:	bf00      	nop
 801cb88:	20027b94 	.word	0x20027b94
 801cb8c:	20027b8e 	.word	0x20027b8e
 801cb90:	fffff800 	.word	0xfffff800

0801cb94 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 801cb94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cb98:	b08e      	sub	sp, #56	@ 0x38
 801cb9a:	460e      	mov	r6, r1
 801cb9c:	4604      	mov	r4, r0
 801cb9e:	461d      	mov	r5, r3
 801cba0:	6808      	ldr	r0, [r1, #0]
 801cba2:	ab0a      	add	r3, sp, #40	@ 0x28
 801cba4:	6849      	ldr	r1, [r1, #4]
 801cba6:	f8df 81d4 	ldr.w	r8, [pc, #468]	@ 801cd7c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 801cbaa:	f8df 91d4 	ldr.w	r9, [pc, #468]	@ 801cd80 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 801cbae:	c303      	stmia	r3!, {r0, r1}
 801cbb0:	6810      	ldr	r0, [r2, #0]
 801cbb2:	ab0c      	add	r3, sp, #48	@ 0x30
 801cbb4:	6851      	ldr	r1, [r2, #4]
 801cbb6:	c303      	stmia	r3!, {r0, r1}
 801cbb8:	a80a      	add	r0, sp, #40	@ 0x28
 801cbba:	f7f9 f8d3 	bl	8015d64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cbbe:	4631      	mov	r1, r6
 801cbc0:	a80c      	add	r0, sp, #48	@ 0x30
 801cbc2:	f7f9 f8f7 	bl	8015db4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801cbc6:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801cbca:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801cbce:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801cbd2:	f8d8 0000 	ldr.w	r0, [r8]
 801cbd6:	fb11 2103 	smlabb	r1, r1, r3, r2
 801cbda:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 801cbde:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 801cbe2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801cbe6:	440c      	add	r4, r1
 801cbe8:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 801cbec:	440a      	add	r2, r1
 801cbee:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 801cbf2:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 801cbf6:	4413      	add	r3, r2
 801cbf8:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801cbfc:	6803      	ldr	r3, [r0, #0]
 801cbfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801cc00:	4798      	blx	r3
 801cc02:	2dff      	cmp	r5, #255	@ 0xff
 801cc04:	d124      	bne.n	801cc50 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 801cc06:	f010 0f01 	tst.w	r0, #1
 801cc0a:	f8d8 0000 	ldr.w	r0, [r8]
 801cc0e:	d022      	beq.n	801cc56 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 801cc10:	2100      	movs	r1, #0
 801cc12:	f04f 0e01 	mov.w	lr, #1
 801cc16:	f8d0 c000 	ldr.w	ip, [r0]
 801cc1a:	b2b6      	uxth	r6, r6
 801cc1c:	f8cd e018 	str.w	lr, [sp, #24]
 801cc20:	b2bf      	uxth	r7, r7
 801cc22:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 801cc26:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 801cc2a:	e9cd 1107 	strd	r1, r1, [sp, #28]
 801cc2e:	f8b9 e000 	ldrh.w	lr, [r9]
 801cc32:	9503      	str	r5, [sp, #12]
 801cc34:	9601      	str	r6, [sp, #4]
 801cc36:	9700      	str	r7, [sp, #0]
 801cc38:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801cc3c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801cc40:	9102      	str	r1, [sp, #8]
 801cc42:	4621      	mov	r1, r4
 801cc44:	f8dc 5040 	ldr.w	r5, [ip, #64]	@ 0x40
 801cc48:	47a8      	blx	r5
 801cc4a:	b00e      	add	sp, #56	@ 0x38
 801cc4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cc50:	f010 0f04 	tst.w	r0, #4
 801cc54:	e7d9      	b.n	801cc0a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 801cc56:	6803      	ldr	r3, [r0, #0]
 801cc58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cc5a:	4798      	blx	r3
 801cc5c:	f8b9 3000 	ldrh.w	r3, [r9]
 801cc60:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801cc64:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 801cc68:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 801cc6c:	435e      	muls	r6, r3
 801cc6e:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 801cc72:	2dff      	cmp	r5, #255	@ 0xff
 801cc74:	fb03 1202 	mla	r2, r3, r2, r1
 801cc78:	ebac 0c07 	sub.w	ip, ip, r7
 801cc7c:	eba3 0707 	sub.w	r7, r3, r7
 801cc80:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801cc84:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801cc88:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801cc8c:	ea4f 0747 	mov.w	r7, r7, lsl #1
 801cc90:	d049      	beq.n	801cd26 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 801cc92:	43eb      	mvns	r3, r5
 801cc94:	fa1f f985 	uxth.w	r9, r5
 801cc98:	b2db      	uxtb	r3, r3
 801cc9a:	42b0      	cmp	r0, r6
 801cc9c:	d266      	bcs.n	801cd6c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801cc9e:	eb00 0a0e 	add.w	sl, r0, lr
 801cca2:	4550      	cmp	r0, sl
 801cca4:	4621      	mov	r1, r4
 801cca6:	f104 0403 	add.w	r4, r4, #3
 801ccaa:	d25b      	bcs.n	801cd64 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 801ccac:	8802      	ldrh	r2, [r0, #0]
 801ccae:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801ccb2:	ea4f 2822 	mov.w	r8, r2, asr #8
 801ccb6:	fb11 f109 	smulbb	r1, r1, r9
 801ccba:	10d5      	asrs	r5, r2, #3
 801ccbc:	f008 08f8 	and.w	r8, r8, #248	@ 0xf8
 801ccc0:	00d2      	lsls	r2, r2, #3
 801ccc2:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 801ccc6:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 801ccca:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801ccce:	fb08 1803 	mla	r8, r8, r3, r1
 801ccd2:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 801ccd6:	b2d2      	uxtb	r2, r2
 801ccd8:	fb11 f109 	smulbb	r1, r1, r9
 801ccdc:	fa1f f888 	uxth.w	r8, r8
 801cce0:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801cce4:	fb05 1503 	mla	r5, r5, r3, r1
 801cce8:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801ccec:	fb11 f109 	smulbb	r1, r1, r9
 801ccf0:	b2ad      	uxth	r5, r5
 801ccf2:	fb02 1203 	mla	r2, r2, r3, r1
 801ccf6:	f108 0101 	add.w	r1, r8, #1
 801ccfa:	b292      	uxth	r2, r2
 801ccfc:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 801cd00:	1c51      	adds	r1, r2, #1
 801cd02:	f408 4878 	and.w	r8, r8, #63488	@ 0xf800
 801cd06:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801cd0a:	1c69      	adds	r1, r5, #1
 801cd0c:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801cd10:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801cd14:	096d      	lsrs	r5, r5, #5
 801cd16:	ea42 0208 	orr.w	r2, r2, r8
 801cd1a:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801cd1e:	432a      	orrs	r2, r5
 801cd20:	f820 2b02 	strh.w	r2, [r0], #2
 801cd24:	e7bd      	b.n	801cca2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 801cd26:	4a14      	ldr	r2, [pc, #80]	@ (801cd78 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 801cd28:	42b0      	cmp	r0, r6
 801cd2a:	d21f      	bcs.n	801cd6c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801cd2c:	eb00 050e 	add.w	r5, r0, lr
 801cd30:	42a8      	cmp	r0, r5
 801cd32:	4621      	mov	r1, r4
 801cd34:	f104 0403 	add.w	r4, r4, #3
 801cd38:	d210      	bcs.n	801cd5c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 801cd3a:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 801cd3e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801cd42:	00db      	lsls	r3, r3, #3
 801cd44:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 801cd48:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801cd4c:	430b      	orrs	r3, r1
 801cd4e:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801cd52:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 801cd56:	f820 3b02 	strh.w	r3, [r0], #2
 801cd5a:	e7e9      	b.n	801cd30 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 801cd5c:	4438      	add	r0, r7
 801cd5e:	eb01 040c 	add.w	r4, r1, ip
 801cd62:	e7e1      	b.n	801cd28 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 801cd64:	4438      	add	r0, r7
 801cd66:	eb01 040c 	add.w	r4, r1, ip
 801cd6a:	e796      	b.n	801cc9a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 801cd6c:	4b03      	ldr	r3, [pc, #12]	@ (801cd7c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 801cd6e:	6818      	ldr	r0, [r3, #0]
 801cd70:	6803      	ldr	r3, [r0, #0]
 801cd72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cd74:	4798      	blx	r3
 801cd76:	e768      	b.n	801cc4a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 801cd78:	fffff800 	.word	0xfffff800
 801cd7c:	20027b94 	.word	0x20027b94
 801cd80:	20027b8e 	.word	0x20027b8e

0801cd84 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801cd84:	b4f0      	push	{r4, r5, r6, r7}
 801cd86:	4616      	mov	r6, r2
 801cd88:	461c      	mov	r4, r3
 801cd8a:	460d      	mov	r5, r1
 801cd8c:	9a04      	ldr	r2, [sp, #16]
 801cd8e:	2e01      	cmp	r6, #1
 801cd90:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801cd94:	f89d 7018 	ldrb.w	r7, [sp, #24]
 801cd98:	d012      	beq.n	801cdc0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 801cd9a:	d303      	bcc.n	801cda4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 801cd9c:	2e02      	cmp	r6, #2
 801cd9e:	d00a      	beq.n	801cdb6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 801cda0:	bcf0      	pop	{r4, r5, r6, r7}
 801cda2:	4770      	bx	lr
 801cda4:	6805      	ldr	r5, [r0, #0]
 801cda6:	e9cd 3704 	strd	r3, r7, [sp, #16]
 801cdaa:	68ed      	ldr	r5, [r5, #12]
 801cdac:	4613      	mov	r3, r2
 801cdae:	4622      	mov	r2, r4
 801cdb0:	46ac      	mov	ip, r5
 801cdb2:	bcf0      	pop	{r4, r5, r6, r7}
 801cdb4:	4760      	bx	ip
 801cdb6:	4621      	mov	r1, r4
 801cdb8:	4628      	mov	r0, r5
 801cdba:	bcf0      	pop	{r4, r5, r6, r7}
 801cdbc:	f7ff bd94 	b.w	801c8e8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801cdc0:	4621      	mov	r1, r4
 801cdc2:	4628      	mov	r0, r5
 801cdc4:	bcf0      	pop	{r4, r5, r6, r7}
 801cdc6:	f7ff bee5 	b.w	801cb94 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

0801cdcc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801cdcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cdd0:	b093      	sub	sp, #76	@ 0x4c
 801cdd2:	4681      	mov	r9, r0
 801cdd4:	4688      	mov	r8, r1
 801cdd6:	6810      	ldr	r0, [r2, #0]
 801cdd8:	6851      	ldr	r1, [r2, #4]
 801cdda:	ac0e      	add	r4, sp, #56	@ 0x38
 801cddc:	4616      	mov	r6, r2
 801cdde:	f89d a070 	ldrb.w	sl, [sp, #112]	@ 0x70
 801cde2:	4f6b      	ldr	r7, [pc, #428]	@ (801cf90 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 801cde4:	c403      	stmia	r4!, {r0, r1}
 801cde6:	6818      	ldr	r0, [r3, #0]
 801cde8:	ac10      	add	r4, sp, #64	@ 0x40
 801cdea:	6859      	ldr	r1, [r3, #4]
 801cdec:	c403      	stmia	r4!, {r0, r1}
 801cdee:	a80e      	add	r0, sp, #56	@ 0x38
 801cdf0:	f7f8 ffb8 	bl	8015d64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cdf4:	4631      	mov	r1, r6
 801cdf6:	a810      	add	r0, sp, #64	@ 0x40
 801cdf8:	4e66      	ldr	r6, [pc, #408]	@ (801cf94 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801cdfa:	f7f8 ffdb 	bl	8015db4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801cdfe:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 801ce02:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 801ce06:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 801ce0a:	6830      	ldr	r0, [r6, #0]
 801ce0c:	fb11 2103 	smlabb	r1, r1, r3, r2
 801ce10:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	@ 0x44
 801ce14:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 801ce18:	4489      	add	r9, r1
 801ce1a:	f8bd 1038 	ldrh.w	r1, [sp, #56]	@ 0x38
 801ce1e:	440a      	add	r2, r1
 801ce20:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 801ce24:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801ce28:	4413      	add	r3, r2
 801ce2a:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 801ce2e:	6803      	ldr	r3, [r0, #0]
 801ce30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ce32:	4798      	blx	r3
 801ce34:	f010 0f80 	tst.w	r0, #128	@ 0x80
 801ce38:	6830      	ldr	r0, [r6, #0]
 801ce3a:	d01d      	beq.n	801ce78 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 801ce3c:	2200      	movs	r2, #0
 801ce3e:	6801      	ldr	r1, [r0, #0]
 801ce40:	b2a4      	uxth	r4, r4
 801ce42:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 801ce46:	b2ad      	uxth	r5, r5
 801ce48:	e9cd 2208 	strd	r2, r2, [sp, #32]
 801ce4c:	220b      	movs	r2, #11
 801ce4e:	9207      	str	r2, [sp, #28]
 801ce50:	883a      	ldrh	r2, [r7, #0]
 801ce52:	9502      	str	r5, [sp, #8]
 801ce54:	9206      	str	r2, [sp, #24]
 801ce56:	2201      	movs	r2, #1
 801ce58:	9401      	str	r4, [sp, #4]
 801ce5a:	e9cd a204 	strd	sl, r2, [sp, #16]
 801ce5e:	f8bd 203c 	ldrh.w	r2, [sp, #60]	@ 0x3c
 801ce62:	9203      	str	r2, [sp, #12]
 801ce64:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 801ce68:	9200      	str	r2, [sp, #0]
 801ce6a:	4642      	mov	r2, r8
 801ce6c:	6bcc      	ldr	r4, [r1, #60]	@ 0x3c
 801ce6e:	4649      	mov	r1, r9
 801ce70:	47a0      	blx	r4
 801ce72:	b013      	add	sp, #76	@ 0x4c
 801ce74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce78:	6803      	ldr	r3, [r0, #0]
 801ce7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ce7c:	4798      	blx	r3
 801ce7e:	883b      	ldrh	r3, [r7, #0]
 801ce80:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 801ce84:	f04f 0e04 	mov.w	lr, #4
 801ce88:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	@ 0x40
 801ce8c:	435d      	muls	r5, r3
 801ce8e:	fb03 1202 	mla	r2, r3, r2, r1
 801ce92:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801ce96:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 801ce9a:	920c      	str	r2, [sp, #48]	@ 0x30
 801ce9c:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 801cea0:	1b12      	subs	r2, r2, r4
 801cea2:	920d      	str	r2, [sp, #52]	@ 0x34
 801cea4:	0062      	lsls	r2, r4, #1
 801cea6:	1b1c      	subs	r4, r3, r4
 801cea8:	920a      	str	r2, [sp, #40]	@ 0x28
 801ceaa:	0063      	lsls	r3, r4, #1
 801ceac:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ceae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ceb0:	4298      	cmp	r0, r3
 801ceb2:	d266      	bcs.n	801cf82 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 801ceb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ceb6:	eb00 0b03 	add.w	fp, r0, r3
 801ceba:	4558      	cmp	r0, fp
 801cebc:	d25c      	bcs.n	801cf78 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801cebe:	f819 3b01 	ldrb.w	r3, [r9], #1
 801cec2:	fb1e e303 	smlabb	r3, lr, r3, lr
 801cec6:	f858 2003 	ldr.w	r2, [r8, r3]
 801ceca:	0e11      	lsrs	r1, r2, #24
 801cecc:	d012      	beq.n	801cef4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801cece:	29ff      	cmp	r1, #255	@ 0xff
 801ced0:	ea4f 2712 	mov.w	r7, r2, lsr #8
 801ced4:	d110      	bne.n	801cef8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801ced6:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 801ceda:	d10d      	bne.n	801cef8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801cedc:	0953      	lsrs	r3, r2, #5
 801cede:	f427 67ff 	bic.w	r7, r7, #2040	@ 0x7f8
 801cee2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801cee6:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801ceea:	f027 0707 	bic.w	r7, r7, #7
 801ceee:	431f      	orrs	r7, r3
 801cef0:	433a      	orrs	r2, r7
 801cef2:	8002      	strh	r2, [r0, #0]
 801cef4:	3002      	adds	r0, #2
 801cef6:	e7e0      	b.n	801ceba <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 801cef8:	fb0a f101 	mul.w	r1, sl, r1
 801cefc:	8806      	ldrh	r6, [r0, #0]
 801cefe:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801cf02:	b2d2      	uxtb	r2, r2
 801cf04:	1c4b      	adds	r3, r1, #1
 801cf06:	1235      	asrs	r5, r6, #8
 801cf08:	10f4      	asrs	r4, r6, #3
 801cf0a:	eb03 2321 	add.w	r3, r3, r1, asr #8
 801cf0e:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 801cf12:	00f6      	lsls	r6, r6, #3
 801cf14:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 801cf18:	121b      	asrs	r3, r3, #8
 801cf1a:	b2f6      	uxtb	r6, r6
 801cf1c:	b299      	uxth	r1, r3
 801cf1e:	43db      	mvns	r3, r3
 801cf20:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801cf24:	fb1c fc01 	smulbb	ip, ip, r1
 801cf28:	b2db      	uxtb	r3, r3
 801cf2a:	fb12 f201 	smulbb	r2, r2, r1
 801cf2e:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801cf32:	fb05 c503 	mla	r5, r5, r3, ip
 801cf36:	b2ff      	uxtb	r7, r7
 801cf38:	fb06 2203 	mla	r2, r6, r3, r2
 801cf3c:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 801cf40:	fb17 f701 	smulbb	r7, r7, r1
 801cf44:	b2ad      	uxth	r5, r5
 801cf46:	b292      	uxth	r2, r2
 801cf48:	fb04 7403 	mla	r4, r4, r3, r7
 801cf4c:	f105 0c01 	add.w	ip, r5, #1
 801cf50:	1c57      	adds	r7, r2, #1
 801cf52:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801cf56:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801cf5a:	b2a4      	uxth	r4, r4
 801cf5c:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 801cf60:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801cf64:	433d      	orrs	r5, r7
 801cf66:	1c67      	adds	r7, r4, #1
 801cf68:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 801cf6c:	0964      	lsrs	r4, r4, #5
 801cf6e:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 801cf72:	4325      	orrs	r5, r4
 801cf74:	8005      	strh	r5, [r0, #0]
 801cf76:	e7bd      	b.n	801cef4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801cf78:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801cf7a:	4418      	add	r0, r3
 801cf7c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801cf7e:	4499      	add	r9, r3
 801cf80:	e795      	b.n	801ceae <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 801cf82:	4b04      	ldr	r3, [pc, #16]	@ (801cf94 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801cf84:	6818      	ldr	r0, [r3, #0]
 801cf86:	6803      	ldr	r3, [r0, #0]
 801cf88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cf8a:	4798      	blx	r3
 801cf8c:	e771      	b.n	801ce72 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 801cf8e:	bf00      	nop
 801cf90:	20027b8e 	.word	0x20027b8e
 801cf94:	20027b94 	.word	0x20027b94

0801cf98 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 801cf98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf9c:	b087      	sub	sp, #28
 801cf9e:	4680      	mov	r8, r0
 801cfa0:	460d      	mov	r5, r1
 801cfa2:	4614      	mov	r4, r2
 801cfa4:	f89d 6040 	ldrb.w	r6, [sp, #64]	@ 0x40
 801cfa8:	2e00      	cmp	r6, #0
 801cfaa:	f000 80b9 	beq.w	801d120 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 801cfae:	6810      	ldr	r0, [r2, #0]
 801cfb0:	af02      	add	r7, sp, #8
 801cfb2:	6851      	ldr	r1, [r2, #4]
 801cfb4:	c703      	stmia	r7!, {r0, r1}
 801cfb6:	6818      	ldr	r0, [r3, #0]
 801cfb8:	af04      	add	r7, sp, #16
 801cfba:	6859      	ldr	r1, [r3, #4]
 801cfbc:	c703      	stmia	r7!, {r0, r1}
 801cfbe:	a802      	add	r0, sp, #8
 801cfc0:	f7f8 fed0 	bl	8015d64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cfc4:	4621      	mov	r1, r4
 801cfc6:	a804      	add	r0, sp, #16
 801cfc8:	f7f8 fef4 	bl	8015db4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801cfcc:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801cfd0:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801cfd4:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 801cfd8:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 801cfdc:	fb14 2103 	smlabb	r1, r4, r3, r2
 801cfe0:	eb08 0401 	add.w	r4, r8, r1
 801cfe4:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801cfe8:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801cfec:	440a      	add	r2, r1
 801cfee:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 801cff2:	f8ad 2010 	strh.w	r2, [sp, #16]
 801cff6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801cffa:	4413      	add	r3, r2
 801cffc:	f8ad 3012 	strh.w	r3, [sp, #18]
 801d000:	4b49      	ldr	r3, [pc, #292]	@ (801d128 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 801d002:	6818      	ldr	r0, [r3, #0]
 801d004:	6803      	ldr	r3, [r0, #0]
 801d006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d008:	4798      	blx	r3
 801d00a:	4b48      	ldr	r3, [pc, #288]	@ (801d12c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 801d00c:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 801d010:	2eff      	cmp	r6, #255	@ 0xff
 801d012:	881a      	ldrh	r2, [r3, #0]
 801d014:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 801d018:	fb02 c101 	mla	r1, r2, r1, ip
 801d01c:	fb02 f207 	mul.w	r2, r2, r7
 801d020:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801d024:	f105 0104 	add.w	r1, r5, #4
 801d028:	461d      	mov	r5, r3
 801d02a:	d05a      	beq.n	801d0e2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 801d02c:	f1c6 0eff 	rsb	lr, r6, #255	@ 0xff
 801d030:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801d034:	b2b6      	uxth	r6, r6
 801d036:	9301      	str	r3, [sp, #4]
 801d038:	fa1f fe8e 	uxth.w	lr, lr
 801d03c:	4282      	cmp	r2, r0
 801d03e:	d96a      	bls.n	801d116 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 801d040:	eb00 0b0a 	add.w	fp, r0, sl
 801d044:	4583      	cmp	fp, r0
 801d046:	d940      	bls.n	801d0ca <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 801d048:	8805      	ldrh	r5, [r0, #0]
 801d04a:	f814 3b01 	ldrb.w	r3, [r4], #1
 801d04e:	122f      	asrs	r7, r5, #8
 801d050:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801d054:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801d058:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801d05c:	00ed      	lsls	r5, r5, #3
 801d05e:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801d062:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 801d066:	fb17 f70e 	smulbb	r7, r7, lr
 801d06a:	b2ed      	uxtb	r5, r5
 801d06c:	fb19 f90e 	smulbb	r9, r9, lr
 801d070:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801d074:	fb15 f50e 	smulbb	r5, r5, lr
 801d078:	fb0c 7c06 	mla	ip, ip, r6, r7
 801d07c:	10df      	asrs	r7, r3, #3
 801d07e:	00db      	lsls	r3, r3, #3
 801d080:	fa1f fc8c 	uxth.w	ip, ip
 801d084:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801d088:	b2db      	uxtb	r3, r3
 801d08a:	fb07 9706 	mla	r7, r7, r6, r9
 801d08e:	f10c 0901 	add.w	r9, ip, #1
 801d092:	fb03 5306 	mla	r3, r3, r6, r5
 801d096:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 801d09a:	b29b      	uxth	r3, r3
 801d09c:	f40c 4978 	and.w	r9, ip, #63488	@ 0xf800
 801d0a0:	b2bf      	uxth	r7, r7
 801d0a2:	f103 0c01 	add.w	ip, r3, #1
 801d0a6:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801d0aa:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801d0ae:	ea4c 0c09 	orr.w	ip, ip, r9
 801d0b2:	f107 0901 	add.w	r9, r7, #1
 801d0b6:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801d0ba:	097f      	lsrs	r7, r7, #5
 801d0bc:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 801d0c0:	ea4c 0c07 	orr.w	ip, ip, r7
 801d0c4:	f820 cb02 	strh.w	ip, [r0], #2
 801d0c8:	e7bc      	b.n	801d044 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 801d0ca:	9b01      	ldr	r3, [sp, #4]
 801d0cc:	881b      	ldrh	r3, [r3, #0]
 801d0ce:	eba3 0308 	sub.w	r3, r3, r8
 801d0d2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d0d6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801d0da:	eba3 0308 	sub.w	r3, r3, r8
 801d0de:	441c      	add	r4, r3
 801d0e0:	e7ac      	b.n	801d03c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 801d0e2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801d0e6:	4282      	cmp	r2, r0
 801d0e8:	d915      	bls.n	801d116 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 801d0ea:	eb00 060a 	add.w	r6, r0, sl
 801d0ee:	4286      	cmp	r6, r0
 801d0f0:	d906      	bls.n	801d100 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 801d0f2:	f814 3b01 	ldrb.w	r3, [r4], #1
 801d0f6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801d0fa:	f820 3b02 	strh.w	r3, [r0], #2
 801d0fe:	e7f6      	b.n	801d0ee <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 801d100:	882b      	ldrh	r3, [r5, #0]
 801d102:	eba3 0308 	sub.w	r3, r3, r8
 801d106:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d10a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801d10e:	eba3 0308 	sub.w	r3, r3, r8
 801d112:	441c      	add	r4, r3
 801d114:	e7e7      	b.n	801d0e6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 801d116:	4b04      	ldr	r3, [pc, #16]	@ (801d128 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 801d118:	6818      	ldr	r0, [r3, #0]
 801d11a:	6803      	ldr	r3, [r0, #0]
 801d11c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d11e:	4798      	blx	r3
 801d120:	b007      	add	sp, #28
 801d122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d126:	bf00      	nop
 801d128:	20027b94 	.word	0x20027b94
 801d12c:	20027b8e 	.word	0x20027b8e

0801d130 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801d130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d134:	b091      	sub	sp, #68	@ 0x44
 801d136:	4680      	mov	r8, r0
 801d138:	460f      	mov	r7, r1
 801d13a:	4614      	mov	r4, r2
 801d13c:	f89d 5068 	ldrb.w	r5, [sp, #104]	@ 0x68
 801d140:	2d00      	cmp	r5, #0
 801d142:	d051      	beq.n	801d1e8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 801d144:	6810      	ldr	r0, [r2, #0]
 801d146:	ae0c      	add	r6, sp, #48	@ 0x30
 801d148:	6851      	ldr	r1, [r2, #4]
 801d14a:	f8df 9200 	ldr.w	r9, [pc, #512]	@ 801d34c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 801d14e:	c603      	stmia	r6!, {r0, r1}
 801d150:	6818      	ldr	r0, [r3, #0]
 801d152:	ae0e      	add	r6, sp, #56	@ 0x38
 801d154:	6859      	ldr	r1, [r3, #4]
 801d156:	c603      	stmia	r6!, {r0, r1}
 801d158:	a80c      	add	r0, sp, #48	@ 0x30
 801d15a:	f7f8 fe03 	bl	8015d64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d15e:	4621      	mov	r1, r4
 801d160:	a80e      	add	r0, sp, #56	@ 0x38
 801d162:	f7f8 fe27 	bl	8015db4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d166:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801d16a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801d16e:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801d172:	f8d9 0000 	ldr.w	r0, [r9]
 801d176:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d17a:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	@ 0x3c
 801d17e:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	@ 0x3e
 801d182:	eb08 0401 	add.w	r4, r8, r1
 801d186:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801d18a:	f8df 81c4 	ldr.w	r8, [pc, #452]	@ 801d350 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 801d18e:	440a      	add	r2, r1
 801d190:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 801d194:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 801d198:	4413      	add	r3, r2
 801d19a:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801d19e:	6803      	ldr	r3, [r0, #0]
 801d1a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d1a2:	4798      	blx	r3
 801d1a4:	f010 0f80 	tst.w	r0, #128	@ 0x80
 801d1a8:	f8d9 0000 	ldr.w	r0, [r9]
 801d1ac:	d01f      	beq.n	801d1ee <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 801d1ae:	2200      	movs	r2, #0
 801d1b0:	6801      	ldr	r1, [r0, #0]
 801d1b2:	b2b6      	uxth	r6, r6
 801d1b4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801d1b8:	e9cd 2208 	strd	r2, r2, [sp, #32]
 801d1bc:	220b      	movs	r2, #11
 801d1be:	9207      	str	r2, [sp, #28]
 801d1c0:	f8b8 2000 	ldrh.w	r2, [r8]
 801d1c4:	9601      	str	r6, [sp, #4]
 801d1c6:	9206      	str	r2, [sp, #24]
 801d1c8:	2201      	movs	r2, #1
 801d1ca:	e9cd 5204 	strd	r5, r2, [sp, #16]
 801d1ce:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 801d1d2:	9203      	str	r2, [sp, #12]
 801d1d4:	fa1f f28a 	uxth.w	r2, sl
 801d1d8:	9202      	str	r2, [sp, #8]
 801d1da:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801d1de:	9200      	str	r2, [sp, #0]
 801d1e0:	463a      	mov	r2, r7
 801d1e2:	6bcd      	ldr	r5, [r1, #60]	@ 0x3c
 801d1e4:	4621      	mov	r1, r4
 801d1e6:	47a8      	blx	r5
 801d1e8:	b011      	add	sp, #68	@ 0x44
 801d1ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d1ee:	6803      	ldr	r3, [r0, #0]
 801d1f0:	ea4f 0946 	mov.w	r9, r6, lsl #1
 801d1f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d1f6:	4798      	blx	r3
 801d1f8:	f8b8 2000 	ldrh.w	r2, [r8]
 801d1fc:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801d200:	2dff      	cmp	r5, #255	@ 0xff
 801d202:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 801d206:	fb0a fa02 	mul.w	sl, sl, r2
 801d20a:	fb02 1303 	mla	r3, r2, r3, r1
 801d20e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d212:	d062      	beq.n	801d2da <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 801d214:	ea6f 0c05 	mvn.w	ip, r5
 801d218:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 801d21c:	b2ad      	uxth	r5, r5
 801d21e:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
 801d222:	fa5f fc8c 	uxtb.w	ip, ip
 801d226:	930a      	str	r3, [sp, #40]	@ 0x28
 801d228:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d22a:	4298      	cmp	r0, r3
 801d22c:	f080 8085 	bcs.w	801d33a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 801d230:	eb00 0b09 	add.w	fp, r0, r9
 801d234:	4558      	cmp	r0, fp
 801d236:	d246      	bcs.n	801d2c6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 801d238:	f814 eb01 	ldrb.w	lr, [r4], #1
 801d23c:	2303      	movs	r3, #3
 801d23e:	2204      	movs	r2, #4
 801d240:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 801d244:	8803      	ldrh	r3, [r0, #0]
 801d246:	eb07 0a0e 	add.w	sl, r7, lr
 801d24a:	1219      	asrs	r1, r3, #8
 801d24c:	10da      	asrs	r2, r3, #3
 801d24e:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801d252:	f89a 8002 	ldrb.w	r8, [sl, #2]
 801d256:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 801d25a:	00db      	lsls	r3, r3, #3
 801d25c:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 801d260:	fb18 f805 	smulbb	r8, r8, r5
 801d264:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 801d268:	fb1e fe05 	smulbb	lr, lr, r5
 801d26c:	b2db      	uxtb	r3, r3
 801d26e:	fb01 810c 	mla	r1, r1, ip, r8
 801d272:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801d276:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801d27a:	fb18 f805 	smulbb	r8, r8, r5
 801d27e:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801d282:	b289      	uxth	r1, r1
 801d284:	fb02 820c 	mla	r2, r2, ip, r8
 801d288:	fb03 e30c 	mla	r3, r3, ip, lr
 801d28c:	f101 0801 	add.w	r8, r1, #1
 801d290:	b292      	uxth	r2, r2
 801d292:	b29b      	uxth	r3, r3
 801d294:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801d298:	f102 0801 	add.w	r8, r2, #1
 801d29c:	f103 0e01 	add.w	lr, r3, #1
 801d2a0:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 801d2a4:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 801d2a8:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 801d2ac:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801d2b0:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801d2b4:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 801d2b8:	ea4e 0101 	orr.w	r1, lr, r1
 801d2bc:	ea41 0108 	orr.w	r1, r1, r8
 801d2c0:	f820 1b02 	strh.w	r1, [r0], #2
 801d2c4:	e7b6      	b.n	801d234 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 801d2c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d2c8:	881b      	ldrh	r3, [r3, #0]
 801d2ca:	1b9b      	subs	r3, r3, r6
 801d2cc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d2d0:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801d2d4:	1b9b      	subs	r3, r3, r6
 801d2d6:	441c      	add	r4, r3
 801d2d8:	e7a6      	b.n	801d228 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 801d2da:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 801d2de:	2203      	movs	r2, #3
 801d2e0:	2504      	movs	r5, #4
 801d2e2:	4919      	ldr	r1, [pc, #100]	@ (801d348 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 801d2e4:	4550      	cmp	r0, sl
 801d2e6:	d228      	bcs.n	801d33a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 801d2e8:	eb00 0c09 	add.w	ip, r0, r9
 801d2ec:	4560      	cmp	r0, ip
 801d2ee:	4623      	mov	r3, r4
 801d2f0:	d219      	bcs.n	801d326 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 801d2f2:	f893 e000 	ldrb.w	lr, [r3]
 801d2f6:	3401      	adds	r4, #1
 801d2f8:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 801d2fc:	eb07 0b0e 	add.w	fp, r7, lr
 801d300:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801d304:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801d308:	f89b b001 	ldrb.w	fp, [fp, #1]
 801d30c:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 801d310:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801d314:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 801d318:	ea43 030b 	orr.w	r3, r3, fp
 801d31c:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 801d320:	f820 3b02 	strh.w	r3, [r0], #2
 801d324:	e7e2      	b.n	801d2ec <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 801d326:	f8b8 3000 	ldrh.w	r3, [r8]
 801d32a:	1b9b      	subs	r3, r3, r6
 801d32c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d330:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801d334:	1b9b      	subs	r3, r3, r6
 801d336:	441c      	add	r4, r3
 801d338:	e7d4      	b.n	801d2e4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 801d33a:	4b04      	ldr	r3, [pc, #16]	@ (801d34c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 801d33c:	6818      	ldr	r0, [r3, #0]
 801d33e:	6803      	ldr	r3, [r0, #0]
 801d340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d342:	4798      	blx	r3
 801d344:	e750      	b.n	801d1e8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 801d346:	bf00      	nop
 801d348:	fffff800 	.word	0xfffff800
 801d34c:	20027b94 	.word	0x20027b94
 801d350:	20027b8e 	.word	0x20027b8e

0801d354 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801d354:	b430      	push	{r4, r5}
 801d356:	780d      	ldrb	r5, [r1, #0]
 801d358:	f89d 4008 	ldrb.w	r4, [sp, #8]
 801d35c:	2d01      	cmp	r5, #1
 801d35e:	d00a      	beq.n	801d376 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 801d360:	d305      	bcc.n	801d36e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 801d362:	2d02      	cmp	r5, #2
 801d364:	d10b      	bne.n	801d37e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 801d366:	9402      	str	r4, [sp, #8]
 801d368:	bc30      	pop	{r4, r5}
 801d36a:	f7ff be15 	b.w	801cf98 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 801d36e:	9402      	str	r4, [sp, #8]
 801d370:	bc30      	pop	{r4, r5}
 801d372:	f7ff bd2b 	b.w	801cdcc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801d376:	9402      	str	r4, [sp, #8]
 801d378:	bc30      	pop	{r4, r5}
 801d37a:	f7ff bed9 	b.w	801d130 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801d37e:	bc30      	pop	{r4, r5}
 801d380:	4770      	bx	lr
	...

0801d384 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 801d384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d388:	b087      	sub	sp, #28
 801d38a:	4604      	mov	r4, r0
 801d38c:	460e      	mov	r6, r1
 801d38e:	6810      	ldr	r0, [r2, #0]
 801d390:	6851      	ldr	r1, [r2, #4]
 801d392:	ad02      	add	r5, sp, #8
 801d394:	4617      	mov	r7, r2
 801d396:	f89d a040 	ldrb.w	sl, [sp, #64]	@ 0x40
 801d39a:	f8df 9230 	ldr.w	r9, [pc, #560]	@ 801d5cc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 801d39e:	c503      	stmia	r5!, {r0, r1}
 801d3a0:	6818      	ldr	r0, [r3, #0]
 801d3a2:	ad04      	add	r5, sp, #16
 801d3a4:	6859      	ldr	r1, [r3, #4]
 801d3a6:	c503      	stmia	r5!, {r0, r1}
 801d3a8:	a802      	add	r0, sp, #8
 801d3aa:	f7f8 fcdb 	bl	8015d64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d3ae:	4639      	mov	r1, r7
 801d3b0:	a804      	add	r0, sp, #16
 801d3b2:	f7f8 fcff 	bl	8015db4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d3b6:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801d3ba:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801d3be:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801d3c2:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801d3c6:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d3ca:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801d3ce:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 801d3d2:	440e      	add	r6, r1
 801d3d4:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801d3d8:	440a      	add	r2, r1
 801d3da:	f8ad 2010 	strh.w	r2, [sp, #16]
 801d3de:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801d3e2:	4413      	add	r3, r2
 801d3e4:	f8ad 3012 	strh.w	r3, [sp, #18]
 801d3e8:	4b77      	ldr	r3, [pc, #476]	@ (801d5c8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801d3ea:	6818      	ldr	r0, [r3, #0]
 801d3ec:	6803      	ldr	r3, [r0, #0]
 801d3ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d3f0:	4798      	blx	r3
 801d3f2:	f8b9 b000 	ldrh.w	fp, [r9]
 801d3f6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801d3fa:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 801d3fe:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801d402:	fb05 f50b 	mul.w	r5, r5, fp
 801d406:	fb0b 2303 	mla	r3, fp, r3, r2
 801d40a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d40e:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801d412:	9300      	str	r3, [sp, #0]
 801d414:	d069      	beq.n	801d4ea <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 801d416:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 801d41a:	4558      	cmp	r0, fp
 801d41c:	f080 80cc 	bcs.w	801d5b8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801d420:	9b00      	ldr	r3, [sp, #0]
 801d422:	4631      	mov	r1, r6
 801d424:	18c3      	adds	r3, r0, r3
 801d426:	9301      	str	r3, [sp, #4]
 801d428:	9b01      	ldr	r3, [sp, #4]
 801d42a:	4298      	cmp	r0, r3
 801d42c:	d24f      	bcs.n	801d4ce <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 801d42e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d432:	2a00      	cmp	r2, #0
 801d434:	d048      	beq.n	801d4c8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801d436:	fb0a f202 	mul.w	r2, sl, r2
 801d43a:	1c53      	adds	r3, r2, #1
 801d43c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801d440:	121b      	asrs	r3, r3, #8
 801d442:	d041      	beq.n	801d4c8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801d444:	8802      	ldrh	r2, [r0, #0]
 801d446:	b29e      	uxth	r6, r3
 801d448:	f8b4 c000 	ldrh.w	ip, [r4]
 801d44c:	43db      	mvns	r3, r3
 801d44e:	1215      	asrs	r5, r2, #8
 801d450:	b2db      	uxtb	r3, r3
 801d452:	ea4f 272c 	mov.w	r7, ip, asr #8
 801d456:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 801d45a:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 801d45e:	fb15 f503 	smulbb	r5, r5, r3
 801d462:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801d466:	00d2      	lsls	r2, r2, #3
 801d468:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 801d46c:	fb07 5706 	mla	r7, r7, r6, r5
 801d470:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801d474:	b2d2      	uxtb	r2, r2
 801d476:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801d47a:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 801d47e:	fb1e fe03 	smulbb	lr, lr, r3
 801d482:	b2bf      	uxth	r7, r7
 801d484:	fb12 f203 	smulbb	r2, r2, r3
 801d488:	fa5f fc8c 	uxtb.w	ip, ip
 801d48c:	fb05 e506 	mla	r5, r5, r6, lr
 801d490:	f107 0e01 	add.w	lr, r7, #1
 801d494:	fb0c 2c06 	mla	ip, ip, r6, r2
 801d498:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801d49c:	fa1f fc8c 	uxth.w	ip, ip
 801d4a0:	f407 4e78 	and.w	lr, r7, #63488	@ 0xf800
 801d4a4:	b2ad      	uxth	r5, r5
 801d4a6:	f10c 0701 	add.w	r7, ip, #1
 801d4aa:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801d4ae:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801d4b2:	ea47 070e 	orr.w	r7, r7, lr
 801d4b6:	f105 0e01 	add.w	lr, r5, #1
 801d4ba:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 801d4be:	096d      	lsrs	r5, r5, #5
 801d4c0:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801d4c4:	432f      	orrs	r7, r5
 801d4c6:	8007      	strh	r7, [r0, #0]
 801d4c8:	3002      	adds	r0, #2
 801d4ca:	3402      	adds	r4, #2
 801d4cc:	e7ac      	b.n	801d428 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 801d4ce:	f8b9 3000 	ldrh.w	r3, [r9]
 801d4d2:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801d4d6:	eba3 0308 	sub.w	r3, r3, r8
 801d4da:	eba6 0608 	sub.w	r6, r6, r8
 801d4de:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d4e2:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801d4e6:	440e      	add	r6, r1
 801d4e8:	e797      	b.n	801d41a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 801d4ea:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801d4ee:	42a8      	cmp	r0, r5
 801d4f0:	d262      	bcs.n	801d5b8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801d4f2:	9b00      	ldr	r3, [sp, #0]
 801d4f4:	4631      	mov	r1, r6
 801d4f6:	eb00 0b03 	add.w	fp, r0, r3
 801d4fa:	4558      	cmp	r0, fp
 801d4fc:	d24e      	bcs.n	801d59c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 801d4fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d502:	b12b      	cbz	r3, 801d510 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801d504:	2bff      	cmp	r3, #255	@ 0xff
 801d506:	f8b4 e000 	ldrh.w	lr, [r4]
 801d50a:	d104      	bne.n	801d516 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 801d50c:	f8a0 e000 	strh.w	lr, [r0]
 801d510:	3002      	adds	r0, #2
 801d512:	3402      	adds	r4, #2
 801d514:	e7f1      	b.n	801d4fa <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 801d516:	8802      	ldrh	r2, [r0, #0]
 801d518:	b29f      	uxth	r7, r3
 801d51a:	43db      	mvns	r3, r3
 801d51c:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801d520:	1216      	asrs	r6, r2, #8
 801d522:	b2db      	uxtb	r3, r3
 801d524:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801d528:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801d52c:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 801d530:	00d2      	lsls	r2, r2, #3
 801d532:	fb16 f603 	smulbb	r6, r6, r3
 801d536:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801d53a:	b2d2      	uxtb	r2, r2
 801d53c:	fb0c 6c07 	mla	ip, ip, r7, r6
 801d540:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801d544:	fb1a fa03 	smulbb	sl, sl, r3
 801d548:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801d54c:	fa1f fc8c 	uxth.w	ip, ip
 801d550:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801d554:	fb12 f303 	smulbb	r3, r2, r3
 801d558:	fa5f fe8e 	uxtb.w	lr, lr
 801d55c:	fb06 a607 	mla	r6, r6, r7, sl
 801d560:	f10c 0201 	add.w	r2, ip, #1
 801d564:	fb0e 3307 	mla	r3, lr, r7, r3
 801d568:	b2b6      	uxth	r6, r6
 801d56a:	b29b      	uxth	r3, r3
 801d56c:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801d570:	f106 0a01 	add.w	sl, r6, #1
 801d574:	f40c 4278 	and.w	r2, ip, #63488	@ 0xf800
 801d578:	f103 0c01 	add.w	ip, r3, #1
 801d57c:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 801d580:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801d584:	0976      	lsrs	r6, r6, #5
 801d586:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801d58a:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801d58e:	ea4c 0c02 	orr.w	ip, ip, r2
 801d592:	ea4c 0c06 	orr.w	ip, ip, r6
 801d596:	f8a0 c000 	strh.w	ip, [r0]
 801d59a:	e7b9      	b.n	801d510 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801d59c:	f8b9 3000 	ldrh.w	r3, [r9]
 801d5a0:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801d5a4:	eba3 0308 	sub.w	r3, r3, r8
 801d5a8:	eba6 0608 	sub.w	r6, r6, r8
 801d5ac:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d5b0:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801d5b4:	440e      	add	r6, r1
 801d5b6:	e79a      	b.n	801d4ee <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 801d5b8:	4b03      	ldr	r3, [pc, #12]	@ (801d5c8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801d5ba:	6818      	ldr	r0, [r3, #0]
 801d5bc:	6803      	ldr	r3, [r0, #0]
 801d5be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d5c0:	4798      	blx	r3
 801d5c2:	b007      	add	sp, #28
 801d5c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d5c8:	20027b94 	.word	0x20027b94
 801d5cc:	20027b8e 	.word	0x20027b8e

0801d5d0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801d5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d5d4:	b089      	sub	sp, #36	@ 0x24
 801d5d6:	4682      	mov	sl, r0
 801d5d8:	460f      	mov	r7, r1
 801d5da:	4691      	mov	r9, r2
 801d5dc:	f89d 604c 	ldrb.w	r6, [sp, #76]	@ 0x4c
 801d5e0:	4698      	mov	r8, r3
 801d5e2:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801d5e4:	2e00      	cmp	r6, #0
 801d5e6:	d036      	beq.n	801d656 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801d5e8:	4608      	mov	r0, r1
 801d5ea:	f7fc f861 	bl	80196b0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801d5ee:	4605      	mov	r5, r0
 801d5f0:	4638      	mov	r0, r7
 801d5f2:	f7fc f891 	bl	8019718 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801d5f6:	f8ad 000e 	strh.w	r0, [sp, #14]
 801d5fa:	4638      	mov	r0, r7
 801d5fc:	f8ad 9008 	strh.w	r9, [sp, #8]
 801d600:	f8ad 500c 	strh.w	r5, [sp, #12]
 801d604:	f8ad 800a 	strh.w	r8, [sp, #10]
 801d608:	f7fc f93e 	bl	8019888 <_ZNK8touchgfx6Bitmap7getDataEv>
 801d60c:	4605      	mov	r5, r0
 801d60e:	4638      	mov	r0, r7
 801d610:	f7fc f96a 	bl	80198e8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801d614:	4681      	mov	r9, r0
 801d616:	4638      	mov	r0, r7
 801d618:	f7fc f9ba 	bl	8019990 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801d61c:	280b      	cmp	r0, #11
 801d61e:	d81a      	bhi.n	801d656 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801d620:	e8df f000 	tbb	[pc, r0]
 801d624:	1906aebd 	.word	0x1906aebd
 801d628:	19191919 	.word	0x19191919
 801d62c:	b5191919 	.word	0xb5191919
 801d630:	4bb0      	ldr	r3, [pc, #704]	@ (801d8f4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x324>)
 801d632:	6818      	ldr	r0, [r3, #0]
 801d634:	6803      	ldr	r3, [r0, #0]
 801d636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d638:	4798      	blx	r3
 801d63a:	2eff      	cmp	r6, #255	@ 0xff
 801d63c:	d121      	bne.n	801d682 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 801d63e:	0683      	lsls	r3, r0, #26
 801d640:	d41f      	bmi.n	801d682 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 801d642:	4638      	mov	r0, r7
 801d644:	f7fc f8e8 	bl	8019818 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801d648:	b940      	cbnz	r0, 801d65c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
 801d64a:	4623      	mov	r3, r4
 801d64c:	aa02      	add	r2, sp, #8
 801d64e:	4629      	mov	r1, r5
 801d650:	4650      	mov	r0, sl
 801d652:	f7ff fa2f 	bl	801cab4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801d656:	b009      	add	sp, #36	@ 0x24
 801d658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d65c:	f10d 0818 	add.w	r8, sp, #24
 801d660:	4639      	mov	r1, r7
 801d662:	af04      	add	r7, sp, #16
 801d664:	4640      	mov	r0, r8
 801d666:	f7fc f88b 	bl	8019780 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801d66a:	e898 0003 	ldmia.w	r8, {r0, r1}
 801d66e:	e887 0003 	stmia.w	r7, {r0, r1}
 801d672:	4638      	mov	r0, r7
 801d674:	4621      	mov	r1, r4
 801d676:	f7f2 fd5b 	bl	8010130 <_ZN8touchgfx4RectaNERKS0_>
 801d67a:	4638      	mov	r0, r7
 801d67c:	f7f2 fd9b 	bl	80101b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801d680:	b130      	cbz	r0, 801d690 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 801d682:	4633      	mov	r3, r6
 801d684:	4622      	mov	r2, r4
 801d686:	a902      	add	r1, sp, #8
 801d688:	4628      	mov	r0, r5
 801d68a:	f7ff f92d 	bl	801c8e8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801d68e:	e7e2      	b.n	801d656 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801d690:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801d694:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801d698:	4293      	cmp	r3, r2
 801d69a:	dd12      	ble.n	801d6c2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf2>
 801d69c:	1a9b      	subs	r3, r3, r2
 801d69e:	f9b4 0000 	ldrsh.w	r0, [r4]
 801d6a2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801d6a6:	f8ad 0018 	strh.w	r0, [sp, #24]
 801d6aa:	4628      	mov	r0, r5
 801d6ac:	f8ad 201a 	strh.w	r2, [sp, #26]
 801d6b0:	4642      	mov	r2, r8
 801d6b2:	f8ad 101c 	strh.w	r1, [sp, #28]
 801d6b6:	a902      	add	r1, sp, #8
 801d6b8:	f8ad 301e 	strh.w	r3, [sp, #30]
 801d6bc:	4633      	mov	r3, r6
 801d6be:	f7ff f913 	bl	801c8e8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801d6c2:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801d6c6:	f9b4 2000 	ldrsh.w	r2, [r4]
 801d6ca:	4293      	cmp	r3, r2
 801d6cc:	dd12      	ble.n	801d6f4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x124>
 801d6ce:	1a9b      	subs	r3, r3, r2
 801d6d0:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801d6d4:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801d6d8:	f8ad 2018 	strh.w	r2, [sp, #24]
 801d6dc:	4642      	mov	r2, r8
 801d6de:	f8ad 001a 	strh.w	r0, [sp, #26]
 801d6e2:	4628      	mov	r0, r5
 801d6e4:	f8ad 301c 	strh.w	r3, [sp, #28]
 801d6e8:	23ff      	movs	r3, #255	@ 0xff
 801d6ea:	f8ad 101e 	strh.w	r1, [sp, #30]
 801d6ee:	a902      	add	r1, sp, #8
 801d6f0:	f7ff f8fa 	bl	801c8e8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801d6f4:	463b      	mov	r3, r7
 801d6f6:	aa02      	add	r2, sp, #8
 801d6f8:	4629      	mov	r1, r5
 801d6fa:	4650      	mov	r0, sl
 801d6fc:	f7ff f9da 	bl	801cab4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801d700:	88a2      	ldrh	r2, [r4, #4]
 801d702:	8823      	ldrh	r3, [r4, #0]
 801d704:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801d708:	4413      	add	r3, r2
 801d70a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801d70e:	440a      	add	r2, r1
 801d710:	b29b      	uxth	r3, r3
 801d712:	b292      	uxth	r2, r2
 801d714:	b218      	sxth	r0, r3
 801d716:	b211      	sxth	r1, r2
 801d718:	4288      	cmp	r0, r1
 801d71a:	dd12      	ble.n	801d742 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x172>
 801d71c:	1a9b      	subs	r3, r3, r2
 801d71e:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801d722:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 801d726:	4642      	mov	r2, r8
 801d728:	f8ad 1018 	strh.w	r1, [sp, #24]
 801d72c:	a902      	add	r1, sp, #8
 801d72e:	f8ad 301c 	strh.w	r3, [sp, #28]
 801d732:	23ff      	movs	r3, #255	@ 0xff
 801d734:	f8ad 001e 	strh.w	r0, [sp, #30]
 801d738:	4628      	mov	r0, r5
 801d73a:	f8ad 601a 	strh.w	r6, [sp, #26]
 801d73e:	f7ff f8d3 	bl	801c8e8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801d742:	88e2      	ldrh	r2, [r4, #6]
 801d744:	8863      	ldrh	r3, [r4, #2]
 801d746:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801d74a:	4413      	add	r3, r2
 801d74c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801d750:	440a      	add	r2, r1
 801d752:	b29b      	uxth	r3, r3
 801d754:	b292      	uxth	r2, r2
 801d756:	b218      	sxth	r0, r3
 801d758:	b211      	sxth	r1, r2
 801d75a:	4288      	cmp	r0, r1
 801d75c:	f77f af7b 	ble.w	801d656 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801d760:	1a9b      	subs	r3, r3, r2
 801d762:	f9b4 6000 	ldrsh.w	r6, [r4]
 801d766:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801d76a:	4642      	mov	r2, r8
 801d76c:	f8ad 301e 	strh.w	r3, [sp, #30]
 801d770:	23ff      	movs	r3, #255	@ 0xff
 801d772:	f8ad 6018 	strh.w	r6, [sp, #24]
 801d776:	f8ad 101a 	strh.w	r1, [sp, #26]
 801d77a:	f8ad 001c 	strh.w	r0, [sp, #28]
 801d77e:	e782      	b.n	801d686 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb6>
 801d780:	4633      	mov	r3, r6
 801d782:	4622      	mov	r2, r4
 801d784:	a902      	add	r1, sp, #8
 801d786:	4628      	mov	r0, r5
 801d788:	f7ff fa04 	bl	801cb94 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 801d78c:	e763      	b.n	801d656 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801d78e:	9600      	str	r6, [sp, #0]
 801d790:	4623      	mov	r3, r4
 801d792:	aa02      	add	r2, sp, #8
 801d794:	4649      	mov	r1, r9
 801d796:	4628      	mov	r0, r5
 801d798:	f7ff fddc 	bl	801d354 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801d79c:	e75b      	b.n	801d656 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801d79e:	4638      	mov	r0, r7
 801d7a0:	f7fc f83a 	bl	8019818 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801d7a4:	b950      	cbnz	r0, 801d7bc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1ec>
 801d7a6:	f8da 3000 	ldr.w	r3, [sl]
 801d7aa:	aa02      	add	r2, sp, #8
 801d7ac:	4629      	mov	r1, r5
 801d7ae:	e9cd 6000 	strd	r6, r0, [sp]
 801d7b2:	4650      	mov	r0, sl
 801d7b4:	68de      	ldr	r6, [r3, #12]
 801d7b6:	4623      	mov	r3, r4
 801d7b8:	47b0      	blx	r6
 801d7ba:	e74c      	b.n	801d656 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801d7bc:	f10d 0818 	add.w	r8, sp, #24
 801d7c0:	4639      	mov	r1, r7
 801d7c2:	af04      	add	r7, sp, #16
 801d7c4:	4640      	mov	r0, r8
 801d7c6:	f7fb ffdb 	bl	8019780 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801d7ca:	e898 0003 	ldmia.w	r8, {r0, r1}
 801d7ce:	e887 0003 	stmia.w	r7, {r0, r1}
 801d7d2:	4638      	mov	r0, r7
 801d7d4:	4621      	mov	r1, r4
 801d7d6:	f7f2 fcab 	bl	8010130 <_ZN8touchgfx4RectaNERKS0_>
 801d7da:	4638      	mov	r0, r7
 801d7dc:	f7f2 fceb 	bl	80101b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801d7e0:	b138      	cbz	r0, 801d7f2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x222>
 801d7e2:	4623      	mov	r3, r4
 801d7e4:	9600      	str	r6, [sp, #0]
 801d7e6:	aa02      	add	r2, sp, #8
 801d7e8:	4649      	mov	r1, r9
 801d7ea:	4628      	mov	r0, r5
 801d7ec:	f7ff fdca 	bl	801d384 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801d7f0:	e731      	b.n	801d656 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801d7f2:	f8da 3000 	ldr.w	r3, [sl]
 801d7f6:	aa02      	add	r2, sp, #8
 801d7f8:	4629      	mov	r1, r5
 801d7fa:	e9cd 6000 	strd	r6, r0, [sp]
 801d7fe:	4650      	mov	r0, sl
 801d800:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 801d804:	463b      	mov	r3, r7
 801d806:	47d8      	blx	fp
 801d808:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801d80c:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801d810:	4293      	cmp	r3, r2
 801d812:	dd13      	ble.n	801d83c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x26c>
 801d814:	f9b4 0000 	ldrsh.w	r0, [r4]
 801d818:	1a9b      	subs	r3, r3, r2
 801d81a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801d81e:	f8ad 0018 	strh.w	r0, [sp, #24]
 801d822:	4628      	mov	r0, r5
 801d824:	f8ad 201a 	strh.w	r2, [sp, #26]
 801d828:	aa02      	add	r2, sp, #8
 801d82a:	f8ad 101c 	strh.w	r1, [sp, #28]
 801d82e:	4649      	mov	r1, r9
 801d830:	f8ad 301e 	strh.w	r3, [sp, #30]
 801d834:	4643      	mov	r3, r8
 801d836:	9600      	str	r6, [sp, #0]
 801d838:	f7ff fda4 	bl	801d384 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801d83c:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801d840:	f9b4 2000 	ldrsh.w	r2, [r4]
 801d844:	4293      	cmp	r3, r2
 801d846:	dd13      	ble.n	801d870 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2a0>
 801d848:	1a9b      	subs	r3, r3, r2
 801d84a:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801d84e:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801d852:	f8ad 2018 	strh.w	r2, [sp, #24]
 801d856:	aa02      	add	r2, sp, #8
 801d858:	f8ad 001a 	strh.w	r0, [sp, #26]
 801d85c:	4628      	mov	r0, r5
 801d85e:	f8ad 301c 	strh.w	r3, [sp, #28]
 801d862:	4643      	mov	r3, r8
 801d864:	f8ad 101e 	strh.w	r1, [sp, #30]
 801d868:	4649      	mov	r1, r9
 801d86a:	9600      	str	r6, [sp, #0]
 801d86c:	f7ff fd8a 	bl	801d384 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801d870:	88a2      	ldrh	r2, [r4, #4]
 801d872:	8823      	ldrh	r3, [r4, #0]
 801d874:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801d878:	4413      	add	r3, r2
 801d87a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801d87e:	440a      	add	r2, r1
 801d880:	b29b      	uxth	r3, r3
 801d882:	b292      	uxth	r2, r2
 801d884:	b218      	sxth	r0, r3
 801d886:	b211      	sxth	r1, r2
 801d888:	4288      	cmp	r0, r1
 801d88a:	dd13      	ble.n	801d8b4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2e4>
 801d88c:	1a9b      	subs	r3, r3, r2
 801d88e:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801d892:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 801d896:	aa02      	add	r2, sp, #8
 801d898:	f8ad 1018 	strh.w	r1, [sp, #24]
 801d89c:	4649      	mov	r1, r9
 801d89e:	f8ad 301c 	strh.w	r3, [sp, #28]
 801d8a2:	4643      	mov	r3, r8
 801d8a4:	f8ad 001e 	strh.w	r0, [sp, #30]
 801d8a8:	4628      	mov	r0, r5
 801d8aa:	9600      	str	r6, [sp, #0]
 801d8ac:	f8ad 701a 	strh.w	r7, [sp, #26]
 801d8b0:	f7ff fd68 	bl	801d384 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801d8b4:	88e2      	ldrh	r2, [r4, #6]
 801d8b6:	8863      	ldrh	r3, [r4, #2]
 801d8b8:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801d8bc:	4413      	add	r3, r2
 801d8be:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801d8c2:	440a      	add	r2, r1
 801d8c4:	b29b      	uxth	r3, r3
 801d8c6:	b292      	uxth	r2, r2
 801d8c8:	b218      	sxth	r0, r3
 801d8ca:	b211      	sxth	r1, r2
 801d8cc:	4288      	cmp	r0, r1
 801d8ce:	f77f aec2 	ble.w	801d656 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801d8d2:	f9b4 7000 	ldrsh.w	r7, [r4]
 801d8d6:	1a9b      	subs	r3, r3, r2
 801d8d8:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801d8dc:	f8ad 301e 	strh.w	r3, [sp, #30]
 801d8e0:	4643      	mov	r3, r8
 801d8e2:	f8ad 7018 	strh.w	r7, [sp, #24]
 801d8e6:	f8ad 101a 	strh.w	r1, [sp, #26]
 801d8ea:	f8ad 001c 	strh.w	r0, [sp, #28]
 801d8ee:	9600      	str	r6, [sp, #0]
 801d8f0:	e779      	b.n	801d7e6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x216>
 801d8f2:	bf00      	nop
 801d8f4:	20027b94 	.word	0x20027b94

0801d8f8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 801d8f8:	b180      	cbz	r0, 801d91c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 801d8fa:	2903      	cmp	r1, #3
 801d8fc:	d81c      	bhi.n	801d938 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801d8fe:	e8df f001 	tbb	[pc, r1]
 801d902:	1d02      	.short	0x1d02
 801d904:	1f08      	.short	0x1f08
 801d906:	4b10      	ldr	r3, [pc, #64]	@ (801d948 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801d908:	8818      	ldrh	r0, [r3, #0]
 801d90a:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801d90e:	4240      	negs	r0, r0
 801d910:	4770      	bx	lr
 801d912:	4b0d      	ldr	r3, [pc, #52]	@ (801d948 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801d914:	8818      	ldrh	r0, [r3, #0]
 801d916:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801d91a:	4770      	bx	lr
 801d91c:	2903      	cmp	r1, #3
 801d91e:	d80b      	bhi.n	801d938 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801d920:	a301      	add	r3, pc, #4	@ (adr r3, 801d928 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 801d922:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801d926:	bf00      	nop
 801d928:	0801d93d 	.word	0x0801d93d
 801d92c:	0801d913 	.word	0x0801d913
 801d930:	0801d941 	.word	0x0801d941
 801d934:	0801d907 	.word	0x0801d907
 801d938:	2000      	movs	r0, #0
 801d93a:	4770      	bx	lr
 801d93c:	2001      	movs	r0, #1
 801d93e:	4770      	bx	lr
 801d940:	f04f 30ff 	mov.w	r0, #4294967295
 801d944:	4770      	bx	lr
 801d946:	bf00      	nop
 801d948:	20027b8e 	.word	0x20027b8e

0801d94c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 801d94c:	b180      	cbz	r0, 801d970 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 801d94e:	2903      	cmp	r1, #3
 801d950:	d81c      	bhi.n	801d98c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 801d952:	e8df f001 	tbb	[pc, r1]
 801d956:	021d      	.short	0x021d
 801d958:	071f      	.short	0x071f
 801d95a:	4b10      	ldr	r3, [pc, #64]	@ (801d99c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801d95c:	8818      	ldrh	r0, [r3, #0]
 801d95e:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801d962:	4770      	bx	lr
 801d964:	4b0d      	ldr	r3, [pc, #52]	@ (801d99c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801d966:	8818      	ldrh	r0, [r3, #0]
 801d968:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801d96c:	4240      	negs	r0, r0
 801d96e:	4770      	bx	lr
 801d970:	2903      	cmp	r1, #3
 801d972:	d80b      	bhi.n	801d98c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 801d974:	a301      	add	r3, pc, #4	@ (adr r3, 801d97c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 801d976:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801d97a:	bf00      	nop
 801d97c:	0801d95b 	.word	0x0801d95b
 801d980:	0801d995 	.word	0x0801d995
 801d984:	0801d965 	.word	0x0801d965
 801d988:	0801d991 	.word	0x0801d991
 801d98c:	2000      	movs	r0, #0
 801d98e:	4770      	bx	lr
 801d990:	2001      	movs	r0, #1
 801d992:	4770      	bx	lr
 801d994:	f04f 30ff 	mov.w	r0, #4294967295
 801d998:	4770      	bx	lr
 801d99a:	bf00      	nop
 801d99c:	20027b8e 	.word	0x20027b8e

0801d9a0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801d9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d9a4:	b099      	sub	sp, #100	@ 0x64
 801d9a6:	910b      	str	r1, [sp, #44]	@ 0x2c
 801d9a8:	a914      	add	r1, sp, #80	@ 0x50
 801d9aa:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	@ 0x88
 801d9ae:	f8bd 5090 	ldrh.w	r5, [sp, #144]	@ 0x90
 801d9b2:	f8bd 6094 	ldrh.w	r6, [sp, #148]	@ 0x94
 801d9b6:	f89d 80ac 	ldrb.w	r8, [sp, #172]	@ 0xac
 801d9ba:	f89d a0b4 	ldrb.w	sl, [sp, #180]	@ 0xb4
 801d9be:	e881 000c 	stmia.w	r1, {r2, r3}
 801d9c2:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	@ 0x8c
 801d9c6:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	@ 0x98
 801d9ca:	9309      	str	r3, [sp, #36]	@ 0x24
 801d9cc:	f891 900d 	ldrb.w	r9, [r1, #13]
 801d9d0:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 801d9d4:	ea4f 1749 	mov.w	r7, r9, lsl #5
 801d9d8:	9310      	str	r3, [sp, #64]	@ 0x40
 801d9da:	f89d 30b0 	ldrb.w	r3, [sp, #176]	@ 0xb0
 801d9de:	930c      	str	r3, [sp, #48]	@ 0x30
 801d9e0:	f407 7380 	and.w	r3, r7, #256	@ 0x100
 801d9e4:	798f      	ldrb	r7, [r1, #6]
 801d9e6:	431f      	orrs	r7, r3
 801d9e8:	f000 8195 	beq.w	801dd16 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801d9ec:	ea4f 1909 	mov.w	r9, r9, lsl #4
 801d9f0:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 801d9f4:	f891 9007 	ldrb.w	r9, [r1, #7]
 801d9f8:	ea59 0903 	orrs.w	r9, r9, r3
 801d9fc:	f000 818b 	beq.w	801dd16 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801da00:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801da04:	b29b      	uxth	r3, r3
 801da06:	2d00      	cmp	r5, #0
 801da08:	f000 812e 	beq.w	801dc68 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c8>
 801da0c:	1aed      	subs	r5, r5, r3
 801da0e:	b2ad      	uxth	r5, r5
 801da10:	042b      	lsls	r3, r5, #16
 801da12:	d502      	bpl.n	801da1a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801da14:	1b64      	subs	r4, r4, r5
 801da16:	2500      	movs	r5, #0
 801da18:	b224      	sxth	r4, r4
 801da1a:	f9b2 1000 	ldrsh.w	r1, [r2]
 801da1e:	a814      	add	r0, sp, #80	@ 0x50
 801da20:	f8cd 9028 	str.w	r9, [sp, #40]	@ 0x28
 801da24:	428c      	cmp	r4, r1
 801da26:	b28b      	uxth	r3, r1
 801da28:	bfbf      	itttt	lt
 801da2a:	18ed      	addlt	r5, r5, r3
 801da2c:	1b2c      	sublt	r4, r5, r4
 801da2e:	b2a5      	uxthlt	r5, r4
 801da30:	460c      	movlt	r4, r1
 801da32:	8891      	ldrh	r1, [r2, #4]
 801da34:	440b      	add	r3, r1
 801da36:	4621      	mov	r1, r4
 801da38:	b21b      	sxth	r3, r3
 801da3a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801da3c:	88d3      	ldrh	r3, [r2, #6]
 801da3e:	8852      	ldrh	r2, [r2, #2]
 801da40:	4413      	add	r3, r2
 801da42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801da44:	b21b      	sxth	r3, r3
 801da46:	930d      	str	r3, [sp, #52]	@ 0x34
 801da48:	4bbd      	ldr	r3, [pc, #756]	@ (801dd40 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 801da4a:	f893 b000 	ldrb.w	fp, [r3]
 801da4e:	f10b 3cff 	add.w	ip, fp, #4294967295
 801da52:	f1dc 0300 	rsbs	r3, ip, #0
 801da56:	eb43 030c 	adc.w	r3, r3, ip
 801da5a:	930e      	str	r3, [sp, #56]	@ 0x38
 801da5c:	4653      	mov	r3, sl
 801da5e:	f7f7 fffb 	bl	8015a58 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801da62:	4621      	mov	r1, r4
 801da64:	f8ad 005c 	strh.w	r0, [sp, #92]	@ 0x5c
 801da68:	4653      	mov	r3, sl
 801da6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801da6c:	a814      	add	r0, sp, #80	@ 0x50
 801da6e:	f7f8 f810 	bl	8015a92 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801da72:	a918      	add	r1, sp, #96	@ 0x60
 801da74:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801da78:	a817      	add	r0, sp, #92	@ 0x5c
 801da7a:	f7f8 f931 	bl	8015ce0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801da7e:	f1ba 0f00 	cmp.w	sl, #0
 801da82:	f040 80f4 	bne.w	801dc6e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 801da86:	f1bb 0f01 	cmp.w	fp, #1
 801da8a:	f040 80f8 	bne.w	801dc7e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 801da8e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801da90:	2b00      	cmp	r3, #0
 801da92:	f040 8145 	bne.w	801dd20 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 801da96:	b2ba      	uxth	r2, r7
 801da98:	b905      	cbnz	r5, 801da9c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
 801da9a:	b16e      	cbz	r6, 801dab8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
 801da9c:	fb06 5302 	mla	r3, r6, r2, r5
 801daa0:	9828      	ldr	r0, [sp, #160]	@ 0xa0
 801daa2:	4631      	mov	r1, r6
 801daa4:	fb08 f303 	mul.w	r3, r8, r3
 801daa8:	f003 0607 	and.w	r6, r3, #7
 801daac:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
 801dab0:	9328      	str	r3, [sp, #160]	@ 0xa0
 801dab2:	eba9 0301 	sub.w	r3, r9, r1
 801dab6:	930a      	str	r3, [sp, #40]	@ 0x28
 801dab8:	4651      	mov	r1, sl
 801daba:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801dabc:	f7ff ff1c 	bl	801d8f8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 801dac0:	4681      	mov	r9, r0
 801dac2:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801dac4:	f7ff ff42 	bl	801d94c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 801dac8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801daca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801dacc:	4683      	mov	fp, r0
 801dace:	eba3 0a01 	sub.w	sl, r3, r1
 801dad2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801dad4:	459a      	cmp	sl, r3
 801dad6:	bfa8      	it	ge
 801dad8:	469a      	movge	sl, r3
 801dada:	f1ba 0f00 	cmp.w	sl, #0
 801dade:	f340 811a 	ble.w	801dd16 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801dae2:	1b64      	subs	r4, r4, r5
 801dae4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801dae6:	1b1c      	subs	r4, r3, r4
 801dae8:	42bc      	cmp	r4, r7
 801daea:	bfd4      	ite	le
 801daec:	ebc5 0504 	rsble	r5, r5, r4
 801daf0:	ebc5 0507 	rsbgt	r5, r5, r7
 801daf4:	2d00      	cmp	r5, #0
 801daf6:	f340 810e 	ble.w	801dd16 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801dafa:	1b52      	subs	r2, r2, r5
 801dafc:	fb08 f302 	mul.w	r3, r8, r2
 801db00:	930f      	str	r3, [sp, #60]	@ 0x3c
 801db02:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801db04:	2b00      	cmp	r3, #0
 801db06:	f040 8116 	bne.w	801dd36 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 801db0a:	4b8e      	ldr	r3, [pc, #568]	@ (801dd44 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 801db0c:	6818      	ldr	r0, [r3, #0]
 801db0e:	6803      	ldr	r3, [r0, #0]
 801db10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801db12:	4798      	blx	r3
 801db14:	2301      	movs	r3, #1
 801db16:	4a8c      	ldr	r2, [pc, #560]	@ (801dd48 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 801db18:	fa03 f308 	lsl.w	r3, r3, r8
 801db1c:	8811      	ldrh	r1, [r2, #0]
 801db1e:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	@ 0x5c
 801db22:	3b01      	subs	r3, #1
 801db24:	b2db      	uxtb	r3, r3
 801db26:	930e      	str	r3, [sp, #56]	@ 0x38
 801db28:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	@ 0x5e
 801db2c:	fb01 2303 	mla	r3, r1, r3, r2
 801db30:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801db34:	930a      	str	r3, [sp, #40]	@ 0x28
 801db36:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801db38:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801db3c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801db3e:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801db40:	0a19      	lsrs	r1, r3, #8
 801db42:	b2cb      	uxtb	r3, r1
 801db44:	9312      	str	r3, [sp, #72]	@ 0x48
 801db46:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801db48:	b2db      	uxtb	r3, r3
 801db4a:	9311      	str	r3, [sp, #68]	@ 0x44
 801db4c:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801db4e:	095a      	lsrs	r2, r3, #5
 801db50:	4b7e      	ldr	r3, [pc, #504]	@ (801dd4c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 801db52:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801db56:	400b      	ands	r3, r1
 801db58:	4313      	orrs	r3, r2
 801db5a:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 801db5c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801db60:	4313      	orrs	r3, r2
 801db62:	b29b      	uxth	r3, r3
 801db64:	9310      	str	r3, [sp, #64]	@ 0x40
 801db66:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801db68:	781a      	ldrb	r2, [r3, #0]
 801db6a:	ea4f 0349 	mov.w	r3, r9, lsl #1
 801db6e:	fb05 b919 	mls	r9, r5, r9, fp
 801db72:	4132      	asrs	r2, r6
 801db74:	fb03 fb05 	mul.w	fp, r3, r5
 801db78:	930d      	str	r3, [sp, #52]	@ 0x34
 801db7a:	b2d2      	uxtb	r2, r2
 801db7c:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 801db80:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801db84:	f0c0 80f5 	bcc.w	801dd72 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d2>
 801db88:	46ae      	mov	lr, r5
 801db8a:	f8dd c028 	ldr.w	ip, [sp, #40]	@ 0x28
 801db8e:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801db92:	f0c0 80dd 	bcc.w	801dd50 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 801db96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801db98:	4013      	ands	r3, r2
 801db9a:	d055      	beq.n	801dc48 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 801db9c:	20ff      	movs	r0, #255	@ 0xff
 801db9e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801dba0:	fb90 f1f1 	sdiv	r1, r0, r1
 801dba4:	434b      	muls	r3, r1
 801dba6:	2bfe      	cmp	r3, #254	@ 0xfe
 801dba8:	dd03      	ble.n	801dbb2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
 801dbaa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801dbac:	4281      	cmp	r1, r0
 801dbae:	f000 80c4 	beq.w	801dd3a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 801dbb2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801dbb4:	f8bc 4000 	ldrh.w	r4, [ip]
 801dbb8:	fb11 f303 	smulbb	r3, r1, r3
 801dbbc:	1220      	asrs	r0, r4, #8
 801dbbe:	b29b      	uxth	r3, r3
 801dbc0:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 801dbc4:	1c59      	adds	r1, r3, #1
 801dbc6:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801dbca:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801dbce:	10e1      	asrs	r1, r4, #3
 801dbd0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801dbd4:	00e4      	lsls	r4, r4, #3
 801dbd6:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 801dbda:	b29f      	uxth	r7, r3
 801dbdc:	43db      	mvns	r3, r3
 801dbde:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 801dbe2:	b2db      	uxtb	r3, r3
 801dbe4:	b2e4      	uxtb	r4, r4
 801dbe6:	9309      	str	r3, [sp, #36]	@ 0x24
 801dbe8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801dbea:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801dbee:	fb13 f907 	smulbb	r9, r3, r7
 801dbf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dbf4:	fb00 9003 	mla	r0, r0, r3, r9
 801dbf8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801dbfa:	fb13 f907 	smulbb	r9, r3, r7
 801dbfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dc00:	b280      	uxth	r0, r0
 801dc02:	fb01 9103 	mla	r1, r1, r3, r9
 801dc06:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801dc08:	fb13 f707 	smulbb	r7, r3, r7
 801dc0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dc0e:	b289      	uxth	r1, r1
 801dc10:	fb04 7403 	mla	r4, r4, r3, r7
 801dc14:	1c43      	adds	r3, r0, #1
 801dc16:	b2a4      	uxth	r4, r4
 801dc18:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801dc1c:	f104 0901 	add.w	r9, r4, #1
 801dc20:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 801dc24:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 801dc28:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 801dc2c:	ea49 0000 	orr.w	r0, r9, r0
 801dc30:	f101 0901 	add.w	r9, r1, #1
 801dc34:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 801dc38:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801dc3c:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 801dc40:	ea40 0009 	orr.w	r0, r0, r9
 801dc44:	f8ac 0000 	strh.w	r0, [ip]
 801dc48:	4446      	add	r6, r8
 801dc4a:	b2b6      	uxth	r6, r6
 801dc4c:	2e07      	cmp	r6, #7
 801dc4e:	bf89      	itett	hi
 801dc50:	9b28      	ldrhi	r3, [sp, #160]	@ 0xa0
 801dc52:	fa42 f208 	asrls.w	r2, r2, r8
 801dc56:	2600      	movhi	r6, #0
 801dc58:	785a      	ldrbhi	r2, [r3, #1]
 801dc5a:	bf8a      	itet	hi
 801dc5c:	3301      	addhi	r3, #1
 801dc5e:	b2d2      	uxtbls	r2, r2
 801dc60:	9328      	strhi	r3, [sp, #160]	@ 0xa0
 801dc62:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801dc64:	449c      	add	ip, r3
 801dc66:	e792      	b.n	801db8e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 801dc68:	441c      	add	r4, r3
 801dc6a:	b224      	sxth	r4, r4
 801dc6c:	e6d5      	b.n	801da1a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801dc6e:	f1ba 0f01 	cmp.w	sl, #1
 801dc72:	f47f af0c 	bne.w	801da8e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801dc76:	f1bb 0f01 	cmp.w	fp, #1
 801dc7a:	f47f af08 	bne.w	801da8e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801dc7e:	f8df b0c4 	ldr.w	fp, [pc, #196]	@ 801dd44 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>
 801dc82:	f8db 0000 	ldr.w	r0, [fp]
 801dc86:	6803      	ldr	r3, [r0, #0]
 801dc88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801dc8a:	4798      	blx	r3
 801dc8c:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 801dc90:	465a      	mov	r2, fp
 801dc92:	d006      	beq.n	801dca2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 801dc94:	f1b8 0f04 	cmp.w	r8, #4
 801dc98:	d140      	bne.n	801dd1c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 801dc9a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801dc9c:	3300      	adds	r3, #0
 801dc9e:	bf18      	it	ne
 801dca0:	2301      	movne	r3, #1
 801dca2:	0580      	lsls	r0, r0, #22
 801dca4:	d56e      	bpl.n	801dd84 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 801dca6:	f1b8 0f08 	cmp.w	r8, #8
 801dcaa:	d16b      	bne.n	801dd84 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 801dcac:	2b00      	cmp	r3, #0
 801dcae:	bf0c      	ite	eq
 801dcb0:	f44f 7100 	moveq.w	r1, #512	@ 0x200
 801dcb4:	f44f 7180 	movne.w	r1, #256	@ 0x100
 801dcb8:	2d00      	cmp	r5, #0
 801dcba:	f47f aee8 	bne.w	801da8e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801dcbe:	2e00      	cmp	r6, #0
 801dcc0:	f47f aee5 	bne.w	801da8e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801dcc4:	19e3      	adds	r3, r4, r7
 801dcc6:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801dcc8:	4283      	cmp	r3, r0
 801dcca:	f73f aee0 	bgt.w	801da8e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801dcce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dcd0:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801dcd2:	444b      	add	r3, r9
 801dcd4:	4283      	cmp	r3, r0
 801dcd6:	f73f aeda 	bgt.w	801da8e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801dcda:	b2bf      	uxth	r7, r7
 801dcdc:	f1b8 0f08 	cmp.w	r8, #8
 801dce0:	6810      	ldr	r0, [r2, #0]
 801dce2:	f04f 0500 	mov.w	r5, #0
 801dce6:	bf18      	it	ne
 801dce8:	3701      	addne	r7, #1
 801dcea:	f8bd 305e 	ldrh.w	r3, [sp, #94]	@ 0x5e
 801dcee:	6804      	ldr	r4, [r0, #0]
 801dcf0:	bf18      	it	ne
 801dcf2:	f027 0701 	bicne.w	r7, r7, #1
 801dcf6:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 801dcfa:	e9cd 1505 	strd	r1, r5, [sp, #20]
 801dcfe:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801dd00:	bf18      	it	ne
 801dd02:	b2bf      	uxthne	r7, r7
 801dd04:	9104      	str	r1, [sp, #16]
 801dd06:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 801dd08:	e9cd 7900 	strd	r7, r9, [sp]
 801dd0c:	e9cd 7102 	strd	r7, r1, [sp, #8]
 801dd10:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 801dd12:	6d64      	ldr	r4, [r4, #84]	@ 0x54
 801dd14:	47a0      	blx	r4
 801dd16:	b019      	add	sp, #100	@ 0x64
 801dd18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dd1c:	2300      	movs	r3, #0
 801dd1e:	e7c0      	b.n	801dca2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 801dd20:	2208      	movs	r2, #8
 801dd22:	fb92 f3f8 	sdiv	r3, r2, r8
 801dd26:	1e5a      	subs	r2, r3, #1
 801dd28:	443a      	add	r2, r7
 801dd2a:	fb92 f2f3 	sdiv	r2, r2, r3
 801dd2e:	fb12 f203 	smulbb	r2, r2, r3
 801dd32:	b292      	uxth	r2, r2
 801dd34:	e6b0      	b.n	801da98 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
 801dd36:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801dd38:	e6ec      	b.n	801db14 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
 801dd3a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801dd3c:	e782      	b.n	801dc44 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
 801dd3e:	bf00      	nop
 801dd40:	20027b8c 	.word	0x20027b8c
 801dd44:	20027b94 	.word	0x20027b94
 801dd48:	20027b8e 	.word	0x20027b8e
 801dd4c:	00fff800 	.word	0x00fff800
 801dd50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801dd52:	b153      	cbz	r3, 801dd6a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
 801dd54:	441e      	add	r6, r3
 801dd56:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801dd58:	b2b6      	uxth	r6, r6
 801dd5a:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
 801dd5e:	f006 0607 	and.w	r6, r6, #7
 801dd62:	781a      	ldrb	r2, [r3, #0]
 801dd64:	9328      	str	r3, [sp, #160]	@ 0xa0
 801dd66:	4132      	asrs	r2, r6
 801dd68:	b2d2      	uxtb	r2, r2
 801dd6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801dd6c:	445b      	add	r3, fp
 801dd6e:	930a      	str	r3, [sp, #40]	@ 0x28
 801dd70:	e706      	b.n	801db80 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
 801dd72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801dd74:	2b00      	cmp	r3, #0
 801dd76:	d1ce      	bne.n	801dd16 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801dd78:	4b05      	ldr	r3, [pc, #20]	@ (801dd90 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f0>)
 801dd7a:	6818      	ldr	r0, [r3, #0]
 801dd7c:	6803      	ldr	r3, [r0, #0]
 801dd7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dd80:	4798      	blx	r3
 801dd82:	e7c8      	b.n	801dd16 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801dd84:	2b00      	cmp	r3, #0
 801dd86:	f43f ae82 	beq.w	801da8e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801dd8a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801dd8e:	e793      	b.n	801dcb8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
 801dd90:	20027b94 	.word	0x20027b94

0801dd94 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 801dd94:	b538      	push	{r3, r4, r5, lr}
 801dd96:	4c15      	ldr	r4, [pc, #84]	@ (801ddec <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 801dd98:	4605      	mov	r5, r0
 801dd9a:	7823      	ldrb	r3, [r4, #0]
 801dd9c:	f3bf 8f5b 	dmb	ish
 801dda0:	07da      	lsls	r2, r3, #31
 801dda2:	d40b      	bmi.n	801ddbc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 801dda4:	4620      	mov	r0, r4
 801dda6:	f007 fe54 	bl	8025a52 <__cxa_guard_acquire>
 801ddaa:	b138      	cbz	r0, 801ddbc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 801ddac:	4620      	mov	r0, r4
 801ddae:	f007 fe5c 	bl	8025a6a <__cxa_guard_release>
 801ddb2:	4a0f      	ldr	r2, [pc, #60]	@ (801ddf0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801ddb4:	490f      	ldr	r1, [pc, #60]	@ (801ddf4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 801ddb6:	4810      	ldr	r0, [pc, #64]	@ (801ddf8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801ddb8:	f007 fe44 	bl	8025a44 <__aeabi_atexit>
 801ddbc:	4c0f      	ldr	r4, [pc, #60]	@ (801ddfc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 801ddbe:	7823      	ldrb	r3, [r4, #0]
 801ddc0:	f3bf 8f5b 	dmb	ish
 801ddc4:	07db      	lsls	r3, r3, #31
 801ddc6:	d40b      	bmi.n	801dde0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 801ddc8:	4620      	mov	r0, r4
 801ddca:	f007 fe42 	bl	8025a52 <__cxa_guard_acquire>
 801ddce:	b138      	cbz	r0, 801dde0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 801ddd0:	4620      	mov	r0, r4
 801ddd2:	f007 fe4a 	bl	8025a6a <__cxa_guard_release>
 801ddd6:	4a06      	ldr	r2, [pc, #24]	@ (801ddf0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801ddd8:	4909      	ldr	r1, [pc, #36]	@ (801de00 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 801ddda:	480a      	ldr	r0, [pc, #40]	@ (801de04 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801dddc:	f007 fe32 	bl	8025a44 <__aeabi_atexit>
 801dde0:	4b05      	ldr	r3, [pc, #20]	@ (801ddf8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801dde2:	612b      	str	r3, [r5, #16]
 801dde4:	4b07      	ldr	r3, [pc, #28]	@ (801de04 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801dde6:	616b      	str	r3, [r5, #20]
 801dde8:	bd38      	pop	{r3, r4, r5, pc}
 801ddea:	bf00      	nop
 801ddec:	20027c68 	.word	0x20027c68
 801ddf0:	20000000 	.word	0x20000000
 801ddf4:	0801bfa1 	.word	0x0801bfa1
 801ddf8:	200000b4 	.word	0x200000b4
 801ddfc:	20027c6c 	.word	0x20027c6c
 801de00:	0801bf9f 	.word	0x0801bf9f
 801de04:	200000b8 	.word	0x200000b8

0801de08 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 801de08:	b538      	push	{r3, r4, r5, lr}
 801de0a:	4c15      	ldr	r4, [pc, #84]	@ (801de60 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 801de0c:	4605      	mov	r5, r0
 801de0e:	7823      	ldrb	r3, [r4, #0]
 801de10:	f3bf 8f5b 	dmb	ish
 801de14:	07da      	lsls	r2, r3, #31
 801de16:	d40b      	bmi.n	801de30 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 801de18:	4620      	mov	r0, r4
 801de1a:	f007 fe1a 	bl	8025a52 <__cxa_guard_acquire>
 801de1e:	b138      	cbz	r0, 801de30 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 801de20:	4620      	mov	r0, r4
 801de22:	f007 fe22 	bl	8025a6a <__cxa_guard_release>
 801de26:	4a0f      	ldr	r2, [pc, #60]	@ (801de64 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801de28:	490f      	ldr	r1, [pc, #60]	@ (801de68 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 801de2a:	4810      	ldr	r0, [pc, #64]	@ (801de6c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801de2c:	f007 fe0a 	bl	8025a44 <__aeabi_atexit>
 801de30:	4c0f      	ldr	r4, [pc, #60]	@ (801de70 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 801de32:	7823      	ldrb	r3, [r4, #0]
 801de34:	f3bf 8f5b 	dmb	ish
 801de38:	07db      	lsls	r3, r3, #31
 801de3a:	d40b      	bmi.n	801de54 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 801de3c:	4620      	mov	r0, r4
 801de3e:	f007 fe08 	bl	8025a52 <__cxa_guard_acquire>
 801de42:	b138      	cbz	r0, 801de54 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 801de44:	4620      	mov	r0, r4
 801de46:	f007 fe10 	bl	8025a6a <__cxa_guard_release>
 801de4a:	4a06      	ldr	r2, [pc, #24]	@ (801de64 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801de4c:	4909      	ldr	r1, [pc, #36]	@ (801de74 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 801de4e:	480a      	ldr	r0, [pc, #40]	@ (801de78 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801de50:	f007 fdf8 	bl	8025a44 <__aeabi_atexit>
 801de54:	4b05      	ldr	r3, [pc, #20]	@ (801de6c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801de56:	60ab      	str	r3, [r5, #8]
 801de58:	4b07      	ldr	r3, [pc, #28]	@ (801de78 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801de5a:	60eb      	str	r3, [r5, #12]
 801de5c:	bd38      	pop	{r3, r4, r5, pc}
 801de5e:	bf00      	nop
 801de60:	20027c40 	.word	0x20027c40
 801de64:	20000000 	.word	0x20000000
 801de68:	0801bfa5 	.word	0x0801bfa5
 801de6c:	2000008c 	.word	0x2000008c
 801de70:	20027c44 	.word	0x20027c44
 801de74:	0801bfa3 	.word	0x0801bfa3
 801de78:	20000090 	.word	0x20000090

0801de7c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 801de7c:	b510      	push	{r4, lr}
 801de7e:	4604      	mov	r4, r0
 801de80:	f7ff ff88 	bl	801dd94 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 801de84:	4620      	mov	r0, r4
 801de86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801de8a:	f7ff bfbd 	b.w	801de08 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

0801de90 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801de90:	b538      	push	{r3, r4, r5, lr}
 801de92:	4c15      	ldr	r4, [pc, #84]	@ (801dee8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801de94:	4605      	mov	r5, r0
 801de96:	7823      	ldrb	r3, [r4, #0]
 801de98:	f3bf 8f5b 	dmb	ish
 801de9c:	07da      	lsls	r2, r3, #31
 801de9e:	d40b      	bmi.n	801deb8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801dea0:	4620      	mov	r0, r4
 801dea2:	f007 fdd6 	bl	8025a52 <__cxa_guard_acquire>
 801dea6:	b138      	cbz	r0, 801deb8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801dea8:	4620      	mov	r0, r4
 801deaa:	f007 fdde 	bl	8025a6a <__cxa_guard_release>
 801deae:	4a0f      	ldr	r2, [pc, #60]	@ (801deec <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801deb0:	490f      	ldr	r1, [pc, #60]	@ (801def0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801deb2:	4810      	ldr	r0, [pc, #64]	@ (801def4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801deb4:	f007 fdc6 	bl	8025a44 <__aeabi_atexit>
 801deb8:	4c0f      	ldr	r4, [pc, #60]	@ (801def8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801deba:	7823      	ldrb	r3, [r4, #0]
 801debc:	f3bf 8f5b 	dmb	ish
 801dec0:	07db      	lsls	r3, r3, #31
 801dec2:	d40b      	bmi.n	801dedc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801dec4:	4620      	mov	r0, r4
 801dec6:	f007 fdc4 	bl	8025a52 <__cxa_guard_acquire>
 801deca:	b138      	cbz	r0, 801dedc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801decc:	4620      	mov	r0, r4
 801dece:	f007 fdcc 	bl	8025a6a <__cxa_guard_release>
 801ded2:	4a06      	ldr	r2, [pc, #24]	@ (801deec <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801ded4:	4909      	ldr	r1, [pc, #36]	@ (801defc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801ded6:	480a      	ldr	r0, [pc, #40]	@ (801df00 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801ded8:	f007 fdb4 	bl	8025a44 <__aeabi_atexit>
 801dedc:	4b05      	ldr	r3, [pc, #20]	@ (801def4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801dede:	622b      	str	r3, [r5, #32]
 801dee0:	4b07      	ldr	r3, [pc, #28]	@ (801df00 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801dee2:	626b      	str	r3, [r5, #36]	@ 0x24
 801dee4:	bd38      	pop	{r3, r4, r5, pc}
 801dee6:	bf00      	nop
 801dee8:	20027c70 	.word	0x20027c70
 801deec:	20000000 	.word	0x20000000
 801def0:	0801bf99 	.word	0x0801bf99
 801def4:	200000bc 	.word	0x200000bc
 801def8:	20027c74 	.word	0x20027c74
 801defc:	0801bf97 	.word	0x0801bf97
 801df00:	200000c0 	.word	0x200000c0

0801df04 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801df04:	b538      	push	{r3, r4, r5, lr}
 801df06:	4c15      	ldr	r4, [pc, #84]	@ (801df5c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801df08:	4605      	mov	r5, r0
 801df0a:	7823      	ldrb	r3, [r4, #0]
 801df0c:	f3bf 8f5b 	dmb	ish
 801df10:	07da      	lsls	r2, r3, #31
 801df12:	d40b      	bmi.n	801df2c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801df14:	4620      	mov	r0, r4
 801df16:	f007 fd9c 	bl	8025a52 <__cxa_guard_acquire>
 801df1a:	b138      	cbz	r0, 801df2c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801df1c:	4620      	mov	r0, r4
 801df1e:	f007 fda4 	bl	8025a6a <__cxa_guard_release>
 801df22:	4a0f      	ldr	r2, [pc, #60]	@ (801df60 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801df24:	490f      	ldr	r1, [pc, #60]	@ (801df64 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801df26:	4810      	ldr	r0, [pc, #64]	@ (801df68 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801df28:	f007 fd8c 	bl	8025a44 <__aeabi_atexit>
 801df2c:	4c0f      	ldr	r4, [pc, #60]	@ (801df6c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801df2e:	7823      	ldrb	r3, [r4, #0]
 801df30:	f3bf 8f5b 	dmb	ish
 801df34:	07db      	lsls	r3, r3, #31
 801df36:	d40b      	bmi.n	801df50 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801df38:	4620      	mov	r0, r4
 801df3a:	f007 fd8a 	bl	8025a52 <__cxa_guard_acquire>
 801df3e:	b138      	cbz	r0, 801df50 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801df40:	4620      	mov	r0, r4
 801df42:	f007 fd92 	bl	8025a6a <__cxa_guard_release>
 801df46:	4a06      	ldr	r2, [pc, #24]	@ (801df60 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801df48:	4909      	ldr	r1, [pc, #36]	@ (801df70 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801df4a:	480a      	ldr	r0, [pc, #40]	@ (801df74 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801df4c:	f007 fd7a 	bl	8025a44 <__aeabi_atexit>
 801df50:	4b05      	ldr	r3, [pc, #20]	@ (801df68 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801df52:	61ab      	str	r3, [r5, #24]
 801df54:	4b07      	ldr	r3, [pc, #28]	@ (801df74 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801df56:	61eb      	str	r3, [r5, #28]
 801df58:	bd38      	pop	{r3, r4, r5, pc}
 801df5a:	bf00      	nop
 801df5c:	20027c48 	.word	0x20027c48
 801df60:	20000000 	.word	0x20000000
 801df64:	0801bf9d 	.word	0x0801bf9d
 801df68:	20000094 	.word	0x20000094
 801df6c:	20027c4c 	.word	0x20027c4c
 801df70:	0801bf9b 	.word	0x0801bf9b
 801df74:	20000098 	.word	0x20000098

0801df78 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 801df78:	b510      	push	{r4, lr}
 801df7a:	4604      	mov	r4, r0
 801df7c:	f7ff ff88 	bl	801de90 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801df80:	4620      	mov	r0, r4
 801df82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801df86:	f7ff bfbd 	b.w	801df04 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801df8c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801df8c:	b538      	push	{r3, r4, r5, lr}
 801df8e:	4c15      	ldr	r4, [pc, #84]	@ (801dfe4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801df90:	4605      	mov	r5, r0
 801df92:	7823      	ldrb	r3, [r4, #0]
 801df94:	f3bf 8f5b 	dmb	ish
 801df98:	07da      	lsls	r2, r3, #31
 801df9a:	d40b      	bmi.n	801dfb4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801df9c:	4620      	mov	r0, r4
 801df9e:	f007 fd58 	bl	8025a52 <__cxa_guard_acquire>
 801dfa2:	b138      	cbz	r0, 801dfb4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801dfa4:	4620      	mov	r0, r4
 801dfa6:	f007 fd60 	bl	8025a6a <__cxa_guard_release>
 801dfaa:	4a0f      	ldr	r2, [pc, #60]	@ (801dfe8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801dfac:	490f      	ldr	r1, [pc, #60]	@ (801dfec <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801dfae:	4810      	ldr	r0, [pc, #64]	@ (801dff0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801dfb0:	f007 fd48 	bl	8025a44 <__aeabi_atexit>
 801dfb4:	4c0f      	ldr	r4, [pc, #60]	@ (801dff4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801dfb6:	7823      	ldrb	r3, [r4, #0]
 801dfb8:	f3bf 8f5b 	dmb	ish
 801dfbc:	07db      	lsls	r3, r3, #31
 801dfbe:	d40b      	bmi.n	801dfd8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801dfc0:	4620      	mov	r0, r4
 801dfc2:	f007 fd46 	bl	8025a52 <__cxa_guard_acquire>
 801dfc6:	b138      	cbz	r0, 801dfd8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801dfc8:	4620      	mov	r0, r4
 801dfca:	f007 fd4e 	bl	8025a6a <__cxa_guard_release>
 801dfce:	4a06      	ldr	r2, [pc, #24]	@ (801dfe8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801dfd0:	4909      	ldr	r1, [pc, #36]	@ (801dff8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801dfd2:	480a      	ldr	r0, [pc, #40]	@ (801dffc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801dfd4:	f007 fd36 	bl	8025a44 <__aeabi_atexit>
 801dfd8:	4b05      	ldr	r3, [pc, #20]	@ (801dff0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801dfda:	632b      	str	r3, [r5, #48]	@ 0x30
 801dfdc:	4b07      	ldr	r3, [pc, #28]	@ (801dffc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801dfde:	636b      	str	r3, [r5, #52]	@ 0x34
 801dfe0:	bd38      	pop	{r3, r4, r5, pc}
 801dfe2:	bf00      	nop
 801dfe4:	20027c80 	.word	0x20027c80
 801dfe8:	20000000 	.word	0x20000000
 801dfec:	0801bf91 	.word	0x0801bf91
 801dff0:	200000cc 	.word	0x200000cc
 801dff4:	20027c84 	.word	0x20027c84
 801dff8:	0801bf8f 	.word	0x0801bf8f
 801dffc:	200000d0 	.word	0x200000d0

0801e000 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801e000:	b538      	push	{r3, r4, r5, lr}
 801e002:	4c15      	ldr	r4, [pc, #84]	@ (801e058 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801e004:	4605      	mov	r5, r0
 801e006:	7823      	ldrb	r3, [r4, #0]
 801e008:	f3bf 8f5b 	dmb	ish
 801e00c:	07da      	lsls	r2, r3, #31
 801e00e:	d40b      	bmi.n	801e028 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801e010:	4620      	mov	r0, r4
 801e012:	f007 fd1e 	bl	8025a52 <__cxa_guard_acquire>
 801e016:	b138      	cbz	r0, 801e028 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801e018:	4620      	mov	r0, r4
 801e01a:	f007 fd26 	bl	8025a6a <__cxa_guard_release>
 801e01e:	4a0f      	ldr	r2, [pc, #60]	@ (801e05c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801e020:	490f      	ldr	r1, [pc, #60]	@ (801e060 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801e022:	4810      	ldr	r0, [pc, #64]	@ (801e064 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801e024:	f007 fd0e 	bl	8025a44 <__aeabi_atexit>
 801e028:	4c0f      	ldr	r4, [pc, #60]	@ (801e068 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801e02a:	7823      	ldrb	r3, [r4, #0]
 801e02c:	f3bf 8f5b 	dmb	ish
 801e030:	07db      	lsls	r3, r3, #31
 801e032:	d40b      	bmi.n	801e04c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801e034:	4620      	mov	r0, r4
 801e036:	f007 fd0c 	bl	8025a52 <__cxa_guard_acquire>
 801e03a:	b138      	cbz	r0, 801e04c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801e03c:	4620      	mov	r0, r4
 801e03e:	f007 fd14 	bl	8025a6a <__cxa_guard_release>
 801e042:	4a06      	ldr	r2, [pc, #24]	@ (801e05c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801e044:	4909      	ldr	r1, [pc, #36]	@ (801e06c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801e046:	480a      	ldr	r0, [pc, #40]	@ (801e070 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801e048:	f007 fcfc 	bl	8025a44 <__aeabi_atexit>
 801e04c:	4b05      	ldr	r3, [pc, #20]	@ (801e064 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801e04e:	62ab      	str	r3, [r5, #40]	@ 0x28
 801e050:	4b07      	ldr	r3, [pc, #28]	@ (801e070 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801e052:	62eb      	str	r3, [r5, #44]	@ 0x2c
 801e054:	bd38      	pop	{r3, r4, r5, pc}
 801e056:	bf00      	nop
 801e058:	20027c50 	.word	0x20027c50
 801e05c:	20000000 	.word	0x20000000
 801e060:	0801bf95 	.word	0x0801bf95
 801e064:	2000009c 	.word	0x2000009c
 801e068:	20027c54 	.word	0x20027c54
 801e06c:	0801bf93 	.word	0x0801bf93
 801e070:	200000a0 	.word	0x200000a0

0801e074 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 801e074:	b510      	push	{r4, lr}
 801e076:	4604      	mov	r4, r0
 801e078:	f7ff ff88 	bl	801df8c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801e07c:	4620      	mov	r0, r4
 801e07e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e082:	f7ff bfbd 	b.w	801e000 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801e088 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 801e088:	b538      	push	{r3, r4, r5, lr}
 801e08a:	4c15      	ldr	r4, [pc, #84]	@ (801e0e0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 801e08c:	4605      	mov	r5, r0
 801e08e:	7823      	ldrb	r3, [r4, #0]
 801e090:	f3bf 8f5b 	dmb	ish
 801e094:	07da      	lsls	r2, r3, #31
 801e096:	d40b      	bmi.n	801e0b0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 801e098:	4620      	mov	r0, r4
 801e09a:	f007 fcda 	bl	8025a52 <__cxa_guard_acquire>
 801e09e:	b138      	cbz	r0, 801e0b0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 801e0a0:	4620      	mov	r0, r4
 801e0a2:	f007 fce2 	bl	8025a6a <__cxa_guard_release>
 801e0a6:	4a0f      	ldr	r2, [pc, #60]	@ (801e0e4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801e0a8:	490f      	ldr	r1, [pc, #60]	@ (801e0e8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 801e0aa:	4810      	ldr	r0, [pc, #64]	@ (801e0ec <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801e0ac:	f007 fcca 	bl	8025a44 <__aeabi_atexit>
 801e0b0:	4c0f      	ldr	r4, [pc, #60]	@ (801e0f0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 801e0b2:	7823      	ldrb	r3, [r4, #0]
 801e0b4:	f3bf 8f5b 	dmb	ish
 801e0b8:	07db      	lsls	r3, r3, #31
 801e0ba:	d40b      	bmi.n	801e0d4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 801e0bc:	4620      	mov	r0, r4
 801e0be:	f007 fcc8 	bl	8025a52 <__cxa_guard_acquire>
 801e0c2:	b138      	cbz	r0, 801e0d4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 801e0c4:	4620      	mov	r0, r4
 801e0c6:	f007 fcd0 	bl	8025a6a <__cxa_guard_release>
 801e0ca:	4a06      	ldr	r2, [pc, #24]	@ (801e0e4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801e0cc:	4909      	ldr	r1, [pc, #36]	@ (801e0f4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 801e0ce:	480a      	ldr	r0, [pc, #40]	@ (801e0f8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 801e0d0:	f007 fcb8 	bl	8025a44 <__aeabi_atexit>
 801e0d4:	4b05      	ldr	r3, [pc, #20]	@ (801e0ec <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801e0d6:	652b      	str	r3, [r5, #80]	@ 0x50
 801e0d8:	4b07      	ldr	r3, [pc, #28]	@ (801e0f8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 801e0da:	656b      	str	r3, [r5, #84]	@ 0x54
 801e0dc:	bd38      	pop	{r3, r4, r5, pc}
 801e0de:	bf00      	nop
 801e0e0:	20027c88 	.word	0x20027c88
 801e0e4:	20000000 	.word	0x20000000
 801e0e8:	0801bf81 	.word	0x0801bf81
 801e0ec:	200000d4 	.word	0x200000d4
 801e0f0:	20027c8c 	.word	0x20027c8c
 801e0f4:	0801bf7f 	.word	0x0801bf7f
 801e0f8:	200000d8 	.word	0x200000d8

0801e0fc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 801e0fc:	b538      	push	{r3, r4, r5, lr}
 801e0fe:	4c15      	ldr	r4, [pc, #84]	@ (801e154 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 801e100:	4605      	mov	r5, r0
 801e102:	7823      	ldrb	r3, [r4, #0]
 801e104:	f3bf 8f5b 	dmb	ish
 801e108:	07da      	lsls	r2, r3, #31
 801e10a:	d40b      	bmi.n	801e124 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 801e10c:	4620      	mov	r0, r4
 801e10e:	f007 fca0 	bl	8025a52 <__cxa_guard_acquire>
 801e112:	b138      	cbz	r0, 801e124 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 801e114:	4620      	mov	r0, r4
 801e116:	f007 fca8 	bl	8025a6a <__cxa_guard_release>
 801e11a:	4a0f      	ldr	r2, [pc, #60]	@ (801e158 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801e11c:	490f      	ldr	r1, [pc, #60]	@ (801e15c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 801e11e:	4810      	ldr	r0, [pc, #64]	@ (801e160 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801e120:	f007 fc90 	bl	8025a44 <__aeabi_atexit>
 801e124:	4c0f      	ldr	r4, [pc, #60]	@ (801e164 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 801e126:	7823      	ldrb	r3, [r4, #0]
 801e128:	f3bf 8f5b 	dmb	ish
 801e12c:	07db      	lsls	r3, r3, #31
 801e12e:	d40b      	bmi.n	801e148 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 801e130:	4620      	mov	r0, r4
 801e132:	f007 fc8e 	bl	8025a52 <__cxa_guard_acquire>
 801e136:	b138      	cbz	r0, 801e148 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 801e138:	4620      	mov	r0, r4
 801e13a:	f007 fc96 	bl	8025a6a <__cxa_guard_release>
 801e13e:	4a06      	ldr	r2, [pc, #24]	@ (801e158 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801e140:	4909      	ldr	r1, [pc, #36]	@ (801e168 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 801e142:	480a      	ldr	r0, [pc, #40]	@ (801e16c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 801e144:	f007 fc7e 	bl	8025a44 <__aeabi_atexit>
 801e148:	4b05      	ldr	r3, [pc, #20]	@ (801e160 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801e14a:	64ab      	str	r3, [r5, #72]	@ 0x48
 801e14c:	4b07      	ldr	r3, [pc, #28]	@ (801e16c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 801e14e:	64eb      	str	r3, [r5, #76]	@ 0x4c
 801e150:	bd38      	pop	{r3, r4, r5, pc}
 801e152:	bf00      	nop
 801e154:	20027c90 	.word	0x20027c90
 801e158:	20000000 	.word	0x20000000
 801e15c:	0801bf85 	.word	0x0801bf85
 801e160:	200000dc 	.word	0x200000dc
 801e164:	20027c94 	.word	0x20027c94
 801e168:	0801bf83 	.word	0x0801bf83
 801e16c:	200000e0 	.word	0x200000e0

0801e170 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 801e170:	b538      	push	{r3, r4, r5, lr}
 801e172:	4c15      	ldr	r4, [pc, #84]	@ (801e1c8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 801e174:	4605      	mov	r5, r0
 801e176:	7823      	ldrb	r3, [r4, #0]
 801e178:	f3bf 8f5b 	dmb	ish
 801e17c:	07da      	lsls	r2, r3, #31
 801e17e:	d40b      	bmi.n	801e198 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 801e180:	4620      	mov	r0, r4
 801e182:	f007 fc66 	bl	8025a52 <__cxa_guard_acquire>
 801e186:	b138      	cbz	r0, 801e198 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 801e188:	4620      	mov	r0, r4
 801e18a:	f007 fc6e 	bl	8025a6a <__cxa_guard_release>
 801e18e:	4a0f      	ldr	r2, [pc, #60]	@ (801e1cc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801e190:	490f      	ldr	r1, [pc, #60]	@ (801e1d0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 801e192:	4810      	ldr	r0, [pc, #64]	@ (801e1d4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801e194:	f007 fc56 	bl	8025a44 <__aeabi_atexit>
 801e198:	4c0f      	ldr	r4, [pc, #60]	@ (801e1d8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 801e19a:	7823      	ldrb	r3, [r4, #0]
 801e19c:	f3bf 8f5b 	dmb	ish
 801e1a0:	07db      	lsls	r3, r3, #31
 801e1a2:	d40b      	bmi.n	801e1bc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 801e1a4:	4620      	mov	r0, r4
 801e1a6:	f007 fc54 	bl	8025a52 <__cxa_guard_acquire>
 801e1aa:	b138      	cbz	r0, 801e1bc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 801e1ac:	4620      	mov	r0, r4
 801e1ae:	f007 fc5c 	bl	8025a6a <__cxa_guard_release>
 801e1b2:	4a06      	ldr	r2, [pc, #24]	@ (801e1cc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801e1b4:	4909      	ldr	r1, [pc, #36]	@ (801e1dc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 801e1b6:	480a      	ldr	r0, [pc, #40]	@ (801e1e0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 801e1b8:	f007 fc44 	bl	8025a44 <__aeabi_atexit>
 801e1bc:	4b05      	ldr	r3, [pc, #20]	@ (801e1d4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801e1be:	642b      	str	r3, [r5, #64]	@ 0x40
 801e1c0:	4b07      	ldr	r3, [pc, #28]	@ (801e1e0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 801e1c2:	646b      	str	r3, [r5, #68]	@ 0x44
 801e1c4:	bd38      	pop	{r3, r4, r5, pc}
 801e1c6:	bf00      	nop
 801e1c8:	20027c58 	.word	0x20027c58
 801e1cc:	20000000 	.word	0x20000000
 801e1d0:	0801bf89 	.word	0x0801bf89
 801e1d4:	200000a4 	.word	0x200000a4
 801e1d8:	20027c5c 	.word	0x20027c5c
 801e1dc:	0801bf87 	.word	0x0801bf87
 801e1e0:	200000a8 	.word	0x200000a8

0801e1e4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 801e1e4:	b538      	push	{r3, r4, r5, lr}
 801e1e6:	4c15      	ldr	r4, [pc, #84]	@ (801e23c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 801e1e8:	4605      	mov	r5, r0
 801e1ea:	7823      	ldrb	r3, [r4, #0]
 801e1ec:	f3bf 8f5b 	dmb	ish
 801e1f0:	07da      	lsls	r2, r3, #31
 801e1f2:	d40b      	bmi.n	801e20c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 801e1f4:	4620      	mov	r0, r4
 801e1f6:	f007 fc2c 	bl	8025a52 <__cxa_guard_acquire>
 801e1fa:	b138      	cbz	r0, 801e20c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 801e1fc:	4620      	mov	r0, r4
 801e1fe:	f007 fc34 	bl	8025a6a <__cxa_guard_release>
 801e202:	4a0f      	ldr	r2, [pc, #60]	@ (801e240 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801e204:	490f      	ldr	r1, [pc, #60]	@ (801e244 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 801e206:	4810      	ldr	r0, [pc, #64]	@ (801e248 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801e208:	f007 fc1c 	bl	8025a44 <__aeabi_atexit>
 801e20c:	4c0f      	ldr	r4, [pc, #60]	@ (801e24c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 801e20e:	7823      	ldrb	r3, [r4, #0]
 801e210:	f3bf 8f5b 	dmb	ish
 801e214:	07db      	lsls	r3, r3, #31
 801e216:	d40b      	bmi.n	801e230 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 801e218:	4620      	mov	r0, r4
 801e21a:	f007 fc1a 	bl	8025a52 <__cxa_guard_acquire>
 801e21e:	b138      	cbz	r0, 801e230 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 801e220:	4620      	mov	r0, r4
 801e222:	f007 fc22 	bl	8025a6a <__cxa_guard_release>
 801e226:	4a06      	ldr	r2, [pc, #24]	@ (801e240 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801e228:	4909      	ldr	r1, [pc, #36]	@ (801e250 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 801e22a:	480a      	ldr	r0, [pc, #40]	@ (801e254 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 801e22c:	f007 fc0a 	bl	8025a44 <__aeabi_atexit>
 801e230:	4b05      	ldr	r3, [pc, #20]	@ (801e248 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801e232:	63ab      	str	r3, [r5, #56]	@ 0x38
 801e234:	4b07      	ldr	r3, [pc, #28]	@ (801e254 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 801e236:	63eb      	str	r3, [r5, #60]	@ 0x3c
 801e238:	bd38      	pop	{r3, r4, r5, pc}
 801e23a:	bf00      	nop
 801e23c:	20027c78 	.word	0x20027c78
 801e240:	20000000 	.word	0x20000000
 801e244:	0801bf8d 	.word	0x0801bf8d
 801e248:	200000c4 	.word	0x200000c4
 801e24c:	20027c7c 	.word	0x20027c7c
 801e250:	0801bf8b 	.word	0x0801bf8b
 801e254:	200000c8 	.word	0x200000c8

0801e258 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 801e258:	b510      	push	{r4, lr}
 801e25a:	4604      	mov	r4, r0
 801e25c:	f7ff ff14 	bl	801e088 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 801e260:	4620      	mov	r0, r4
 801e262:	f7ff ff85 	bl	801e170 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 801e266:	4620      	mov	r0, r4
 801e268:	f7ff ff48 	bl	801e0fc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 801e26c:	4620      	mov	r0, r4
 801e26e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e272:	f7ff bfb7 	b.w	801e1e4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

0801e278 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801e278:	b538      	push	{r3, r4, r5, lr}
 801e27a:	4c15      	ldr	r4, [pc, #84]	@ (801e2d0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801e27c:	4605      	mov	r5, r0
 801e27e:	7823      	ldrb	r3, [r4, #0]
 801e280:	f3bf 8f5b 	dmb	ish
 801e284:	07da      	lsls	r2, r3, #31
 801e286:	d40b      	bmi.n	801e2a0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801e288:	4620      	mov	r0, r4
 801e28a:	f007 fbe2 	bl	8025a52 <__cxa_guard_acquire>
 801e28e:	b138      	cbz	r0, 801e2a0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801e290:	4620      	mov	r0, r4
 801e292:	f007 fbea 	bl	8025a6a <__cxa_guard_release>
 801e296:	4a0f      	ldr	r2, [pc, #60]	@ (801e2d4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801e298:	490f      	ldr	r1, [pc, #60]	@ (801e2d8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801e29a:	4810      	ldr	r0, [pc, #64]	@ (801e2dc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801e29c:	f007 fbd2 	bl	8025a44 <__aeabi_atexit>
 801e2a0:	4c0f      	ldr	r4, [pc, #60]	@ (801e2e0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801e2a2:	7823      	ldrb	r3, [r4, #0]
 801e2a4:	f3bf 8f5b 	dmb	ish
 801e2a8:	07db      	lsls	r3, r3, #31
 801e2aa:	d40b      	bmi.n	801e2c4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801e2ac:	4620      	mov	r0, r4
 801e2ae:	f007 fbd0 	bl	8025a52 <__cxa_guard_acquire>
 801e2b2:	b138      	cbz	r0, 801e2c4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801e2b4:	4620      	mov	r0, r4
 801e2b6:	f007 fbd8 	bl	8025a6a <__cxa_guard_release>
 801e2ba:	4a06      	ldr	r2, [pc, #24]	@ (801e2d4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801e2bc:	4909      	ldr	r1, [pc, #36]	@ (801e2e4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801e2be:	480a      	ldr	r0, [pc, #40]	@ (801e2e8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801e2c0:	f007 fbc0 	bl	8025a44 <__aeabi_atexit>
 801e2c4:	4b05      	ldr	r3, [pc, #20]	@ (801e2dc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801e2c6:	662b      	str	r3, [r5, #96]	@ 0x60
 801e2c8:	4b07      	ldr	r3, [pc, #28]	@ (801e2e8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801e2ca:	666b      	str	r3, [r5, #100]	@ 0x64
 801e2cc:	bd38      	pop	{r3, r4, r5, pc}
 801e2ce:	bf00      	nop
 801e2d0:	20027c60 	.word	0x20027c60
 801e2d4:	20000000 	.word	0x20000000
 801e2d8:	0801bf79 	.word	0x0801bf79
 801e2dc:	200000ac 	.word	0x200000ac
 801e2e0:	20027c64 	.word	0x20027c64
 801e2e4:	0801bf77 	.word	0x0801bf77
 801e2e8:	200000b0 	.word	0x200000b0

0801e2ec <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801e2ec:	b538      	push	{r3, r4, r5, lr}
 801e2ee:	4c15      	ldr	r4, [pc, #84]	@ (801e344 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801e2f0:	4605      	mov	r5, r0
 801e2f2:	7823      	ldrb	r3, [r4, #0]
 801e2f4:	f3bf 8f5b 	dmb	ish
 801e2f8:	07da      	lsls	r2, r3, #31
 801e2fa:	d40b      	bmi.n	801e314 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801e2fc:	4620      	mov	r0, r4
 801e2fe:	f007 fba8 	bl	8025a52 <__cxa_guard_acquire>
 801e302:	b138      	cbz	r0, 801e314 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801e304:	4620      	mov	r0, r4
 801e306:	f007 fbb0 	bl	8025a6a <__cxa_guard_release>
 801e30a:	4a0f      	ldr	r2, [pc, #60]	@ (801e348 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801e30c:	490f      	ldr	r1, [pc, #60]	@ (801e34c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801e30e:	4810      	ldr	r0, [pc, #64]	@ (801e350 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801e310:	f007 fb98 	bl	8025a44 <__aeabi_atexit>
 801e314:	4c0f      	ldr	r4, [pc, #60]	@ (801e354 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801e316:	7823      	ldrb	r3, [r4, #0]
 801e318:	f3bf 8f5b 	dmb	ish
 801e31c:	07db      	lsls	r3, r3, #31
 801e31e:	d40b      	bmi.n	801e338 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801e320:	4620      	mov	r0, r4
 801e322:	f007 fb96 	bl	8025a52 <__cxa_guard_acquire>
 801e326:	b138      	cbz	r0, 801e338 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801e328:	4620      	mov	r0, r4
 801e32a:	f007 fb9e 	bl	8025a6a <__cxa_guard_release>
 801e32e:	4a06      	ldr	r2, [pc, #24]	@ (801e348 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801e330:	4909      	ldr	r1, [pc, #36]	@ (801e358 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801e332:	480a      	ldr	r0, [pc, #40]	@ (801e35c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801e334:	f007 fb86 	bl	8025a44 <__aeabi_atexit>
 801e338:	4b05      	ldr	r3, [pc, #20]	@ (801e350 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801e33a:	65ab      	str	r3, [r5, #88]	@ 0x58
 801e33c:	4b07      	ldr	r3, [pc, #28]	@ (801e35c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801e33e:	65eb      	str	r3, [r5, #92]	@ 0x5c
 801e340:	bd38      	pop	{r3, r4, r5, pc}
 801e342:	bf00      	nop
 801e344:	20027c38 	.word	0x20027c38
 801e348:	20000000 	.word	0x20000000
 801e34c:	0801bf7d 	.word	0x0801bf7d
 801e350:	20000084 	.word	0x20000084
 801e354:	20027c3c 	.word	0x20027c3c
 801e358:	0801bf7b 	.word	0x0801bf7b
 801e35c:	20000088 	.word	0x20000088

0801e360 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 801e360:	b510      	push	{r4, lr}
 801e362:	4604      	mov	r4, r0
 801e364:	f7ff ff88 	bl	801e278 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801e368:	4620      	mov	r0, r4
 801e36a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e36e:	f7ff bfbd 	b.w	801e2ec <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801e374 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801e374:	b538      	push	{r3, r4, r5, lr}
 801e376:	4c15      	ldr	r4, [pc, #84]	@ (801e3cc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801e378:	4605      	mov	r5, r0
 801e37a:	7823      	ldrb	r3, [r4, #0]
 801e37c:	f3bf 8f5b 	dmb	ish
 801e380:	07da      	lsls	r2, r3, #31
 801e382:	d40b      	bmi.n	801e39c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801e384:	4620      	mov	r0, r4
 801e386:	f007 fb64 	bl	8025a52 <__cxa_guard_acquire>
 801e38a:	b138      	cbz	r0, 801e39c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801e38c:	4620      	mov	r0, r4
 801e38e:	f007 fb6c 	bl	8025a6a <__cxa_guard_release>
 801e392:	4a0f      	ldr	r2, [pc, #60]	@ (801e3d0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801e394:	490f      	ldr	r1, [pc, #60]	@ (801e3d4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801e396:	4810      	ldr	r0, [pc, #64]	@ (801e3d8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801e398:	f007 fb54 	bl	8025a44 <__aeabi_atexit>
 801e39c:	4c0f      	ldr	r4, [pc, #60]	@ (801e3dc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801e39e:	7823      	ldrb	r3, [r4, #0]
 801e3a0:	f3bf 8f5b 	dmb	ish
 801e3a4:	07db      	lsls	r3, r3, #31
 801e3a6:	d40b      	bmi.n	801e3c0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801e3a8:	4620      	mov	r0, r4
 801e3aa:	f007 fb52 	bl	8025a52 <__cxa_guard_acquire>
 801e3ae:	b138      	cbz	r0, 801e3c0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801e3b0:	4620      	mov	r0, r4
 801e3b2:	f007 fb5a 	bl	8025a6a <__cxa_guard_release>
 801e3b6:	4a06      	ldr	r2, [pc, #24]	@ (801e3d0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801e3b8:	4909      	ldr	r1, [pc, #36]	@ (801e3e0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801e3ba:	480a      	ldr	r0, [pc, #40]	@ (801e3e4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801e3bc:	f007 fb42 	bl	8025a44 <__aeabi_atexit>
 801e3c0:	4b05      	ldr	r3, [pc, #20]	@ (801e3d8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801e3c2:	672b      	str	r3, [r5, #112]	@ 0x70
 801e3c4:	4b07      	ldr	r3, [pc, #28]	@ (801e3e4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801e3c6:	676b      	str	r3, [r5, #116]	@ 0x74
 801e3c8:	bd38      	pop	{r3, r4, r5, pc}
 801e3ca:	bf00      	nop
 801e3cc:	20027c30 	.word	0x20027c30
 801e3d0:	20000000 	.word	0x20000000
 801e3d4:	0801bf71 	.word	0x0801bf71
 801e3d8:	2000007c 	.word	0x2000007c
 801e3dc:	20027c34 	.word	0x20027c34
 801e3e0:	0801bf6f 	.word	0x0801bf6f
 801e3e4:	20000080 	.word	0x20000080

0801e3e8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 801e3e8:	b538      	push	{r3, r4, r5, lr}
 801e3ea:	4c15      	ldr	r4, [pc, #84]	@ (801e440 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801e3ec:	4605      	mov	r5, r0
 801e3ee:	7823      	ldrb	r3, [r4, #0]
 801e3f0:	f3bf 8f5b 	dmb	ish
 801e3f4:	07da      	lsls	r2, r3, #31
 801e3f6:	d40b      	bmi.n	801e410 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801e3f8:	4620      	mov	r0, r4
 801e3fa:	f007 fb2a 	bl	8025a52 <__cxa_guard_acquire>
 801e3fe:	b138      	cbz	r0, 801e410 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801e400:	4620      	mov	r0, r4
 801e402:	f007 fb32 	bl	8025a6a <__cxa_guard_release>
 801e406:	4a0f      	ldr	r2, [pc, #60]	@ (801e444 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801e408:	490f      	ldr	r1, [pc, #60]	@ (801e448 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801e40a:	4810      	ldr	r0, [pc, #64]	@ (801e44c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801e40c:	f007 fb1a 	bl	8025a44 <__aeabi_atexit>
 801e410:	4c0f      	ldr	r4, [pc, #60]	@ (801e450 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801e412:	7823      	ldrb	r3, [r4, #0]
 801e414:	f3bf 8f5b 	dmb	ish
 801e418:	07db      	lsls	r3, r3, #31
 801e41a:	d40b      	bmi.n	801e434 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801e41c:	4620      	mov	r0, r4
 801e41e:	f007 fb18 	bl	8025a52 <__cxa_guard_acquire>
 801e422:	b138      	cbz	r0, 801e434 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801e424:	4620      	mov	r0, r4
 801e426:	f007 fb20 	bl	8025a6a <__cxa_guard_release>
 801e42a:	4a06      	ldr	r2, [pc, #24]	@ (801e444 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801e42c:	4909      	ldr	r1, [pc, #36]	@ (801e454 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801e42e:	480a      	ldr	r0, [pc, #40]	@ (801e458 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801e430:	f007 fb08 	bl	8025a44 <__aeabi_atexit>
 801e434:	4b05      	ldr	r3, [pc, #20]	@ (801e44c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801e436:	66ab      	str	r3, [r5, #104]	@ 0x68
 801e438:	4b07      	ldr	r3, [pc, #28]	@ (801e458 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801e43a:	66eb      	str	r3, [r5, #108]	@ 0x6c
 801e43c:	bd38      	pop	{r3, r4, r5, pc}
 801e43e:	bf00      	nop
 801e440:	20027c28 	.word	0x20027c28
 801e444:	20000000 	.word	0x20000000
 801e448:	0801bf75 	.word	0x0801bf75
 801e44c:	20000074 	.word	0x20000074
 801e450:	20027c2c 	.word	0x20027c2c
 801e454:	0801bf73 	.word	0x0801bf73
 801e458:	20000078 	.word	0x20000078

0801e45c <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 801e45c:	b510      	push	{r4, lr}
 801e45e:	4604      	mov	r4, r0
 801e460:	f7ff ff88 	bl	801e374 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801e464:	4620      	mov	r0, r4
 801e466:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e46a:	f7ff bfbd 	b.w	801e3e8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

0801e46e <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 801e46e:	b510      	push	{r4, lr}
 801e470:	4604      	mov	r4, r0
 801e472:	f7ff fff3 	bl	801e45c <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 801e476:	4620      	mov	r0, r4
 801e478:	f7ff ff72 	bl	801e360 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 801e47c:	4620      	mov	r0, r4
 801e47e:	f7ff fdf9 	bl	801e074 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 801e482:	4620      	mov	r0, r4
 801e484:	f7ff fcfa 	bl	801de7c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 801e488:	4620      	mov	r0, r4
 801e48a:	f7ff fd75 	bl	801df78 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 801e48e:	4620      	mov	r0, r4
 801e490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e494:	f7ff bee0 	b.w	801e258 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

0801e498 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 801e498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e49c:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	@ 0x2c
 801e4a0:	f9bd e024 	ldrsh.w	lr, [sp, #36]	@ 0x24
 801e4a4:	2d00      	cmp	r5, #0
 801e4a6:	f9bd b028 	ldrsh.w	fp, [sp, #40]	@ 0x28
 801e4aa:	fb05 4c0e 	mla	ip, r5, lr, r4
 801e4ae:	f89d 9034 	ldrb.w	r9, [sp, #52]	@ 0x34
 801e4b2:	f89d 7038 	ldrb.w	r7, [sp, #56]	@ 0x38
 801e4b6:	f89d 603c 	ldrb.w	r6, [sp, #60]	@ 0x3c
 801e4ba:	eb02 0a0c 	add.w	sl, r2, ip
 801e4be:	8808      	ldrh	r0, [r1, #0]
 801e4c0:	f2c0 80b0 	blt.w	801e624 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 801e4c4:	45ab      	cmp	fp, r5
 801e4c6:	f340 80ad 	ble.w	801e624 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 801e4ca:	2c00      	cmp	r4, #0
 801e4cc:	f2c0 80a8 	blt.w	801e620 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 801e4d0:	45a6      	cmp	lr, r4
 801e4d2:	f340 80a5 	ble.w	801e620 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 801e4d6:	f812 200c 	ldrb.w	r2, [r2, ip]
 801e4da:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
 801e4de:	1c62      	adds	r2, r4, #1
 801e4e0:	f100 80a3 	bmi.w	801e62a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801e4e4:	4596      	cmp	lr, r2
 801e4e6:	f340 80a0 	ble.w	801e62a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801e4ea:	f1b9 0f00 	cmp.w	r9, #0
 801e4ee:	f000 809c 	beq.w	801e62a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801e4f2:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801e4f6:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 801e4fa:	3501      	adds	r5, #1
 801e4fc:	f100 8099 	bmi.w	801e632 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801e500:	45ab      	cmp	fp, r5
 801e502:	f340 8096 	ble.w	801e632 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801e506:	2f00      	cmp	r7, #0
 801e508:	f000 8093 	beq.w	801e632 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801e50c:	2c00      	cmp	r4, #0
 801e50e:	f2c0 808e 	blt.w	801e62e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 801e512:	45a6      	cmp	lr, r4
 801e514:	f340 808b 	ble.w	801e62e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 801e518:	f81a 200e 	ldrb.w	r2, [sl, lr]
 801e51c:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 801e520:	3401      	adds	r4, #1
 801e522:	f100 8089 	bmi.w	801e638 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801e526:	45a6      	cmp	lr, r4
 801e528:	f340 8086 	ble.w	801e638 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801e52c:	f1b9 0f00 	cmp.w	r9, #0
 801e530:	f000 8082 	beq.w	801e638 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801e534:	44d6      	add	lr, sl
 801e536:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801e53a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801e53e:	ea4f 4408 	mov.w	r4, r8, lsl #16
 801e542:	f428 68fc 	bic.w	r8, r8, #2016	@ 0x7e0
 801e546:	fb19 fe07 	smulbb	lr, r9, r7
 801e54a:	f1c7 0210 	rsb	r2, r7, #16
 801e54e:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 801e552:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 801e556:	eba2 0209 	sub.w	r2, r2, r9
 801e55a:	ea44 0808 	orr.w	r8, r4, r8
 801e55e:	ea4f 440c 	mov.w	r4, ip, lsl #16
 801e562:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 801e566:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 801e56a:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 801e56e:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 801e572:	ea44 0c0c 	orr.w	ip, r4, ip
 801e576:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 801e57a:	fb04 f40c 	mul.w	r4, r4, ip
 801e57e:	fb02 4808 	mla	r8, r2, r8, r4
 801e582:	041a      	lsls	r2, r3, #16
 801e584:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 801e588:	b2b4      	uxth	r4, r6
 801e58a:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 801e58e:	43f6      	mvns	r6, r6
 801e590:	4313      	orrs	r3, r2
 801e592:	042a      	lsls	r2, r5, #16
 801e594:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 801e598:	b2f6      	uxtb	r6, r6
 801e59a:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 801e59e:	fb0e 8303 	mla	r3, lr, r3, r8
 801e5a2:	432a      	orrs	r2, r5
 801e5a4:	fb07 3202 	mla	r2, r7, r2, r3
 801e5a8:	10c7      	asrs	r7, r0, #3
 801e5aa:	0d53      	lsrs	r3, r2, #21
 801e5ac:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801e5b0:	0952      	lsrs	r2, r2, #5
 801e5b2:	fb17 f706 	smulbb	r7, r7, r6
 801e5b6:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801e5ba:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 801e5be:	431a      	orrs	r2, r3
 801e5c0:	b293      	uxth	r3, r2
 801e5c2:	1202      	asrs	r2, r0, #8
 801e5c4:	121d      	asrs	r5, r3, #8
 801e5c6:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 801e5ca:	00c0      	lsls	r0, r0, #3
 801e5cc:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 801e5d0:	fb12 f206 	smulbb	r2, r2, r6
 801e5d4:	b2c0      	uxtb	r0, r0
 801e5d6:	fb05 2504 	mla	r5, r5, r4, r2
 801e5da:	10da      	asrs	r2, r3, #3
 801e5dc:	fb10 f006 	smulbb	r0, r0, r6
 801e5e0:	00db      	lsls	r3, r3, #3
 801e5e2:	b2ad      	uxth	r5, r5
 801e5e4:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 801e5e8:	b2db      	uxtb	r3, r3
 801e5ea:	fb02 7204 	mla	r2, r2, r4, r7
 801e5ee:	fb03 0004 	mla	r0, r3, r4, r0
 801e5f2:	1c6b      	adds	r3, r5, #1
 801e5f4:	b292      	uxth	r2, r2
 801e5f6:	b280      	uxth	r0, r0
 801e5f8:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801e5fc:	1c43      	adds	r3, r0, #1
 801e5fe:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 801e602:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801e606:	1c50      	adds	r0, r2, #1
 801e608:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801e60c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801e610:	0952      	lsrs	r2, r2, #5
 801e612:	432b      	orrs	r3, r5
 801e614:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801e618:	4313      	orrs	r3, r2
 801e61a:	800b      	strh	r3, [r1, #0]
 801e61c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e620:	4680      	mov	r8, r0
 801e622:	e75c      	b.n	801e4de <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
 801e624:	4684      	mov	ip, r0
 801e626:	4680      	mov	r8, r0
 801e628:	e767      	b.n	801e4fa <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 801e62a:	4684      	mov	ip, r0
 801e62c:	e765      	b.n	801e4fa <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 801e62e:	4605      	mov	r5, r0
 801e630:	e776      	b.n	801e520 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
 801e632:	4603      	mov	r3, r0
 801e634:	4605      	mov	r5, r0
 801e636:	e782      	b.n	801e53e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 801e638:	4603      	mov	r3, r0
 801e63a:	e780      	b.n	801e53e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

0801e63c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e63c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e640:	b099      	sub	sp, #100	@ 0x64
 801e642:	9215      	str	r2, [sp, #84]	@ 0x54
 801e644:	9309      	str	r3, [sp, #36]	@ 0x24
 801e646:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 801e648:	f89d 30ac 	ldrb.w	r3, [sp, #172]	@ 0xac
 801e64c:	9016      	str	r0, [sp, #88]	@ 0x58
 801e64e:	930d      	str	r3, [sp, #52]	@ 0x34
 801e650:	6850      	ldr	r0, [r2, #4]
 801e652:	910c      	str	r1, [sp, #48]	@ 0x30
 801e654:	6812      	ldr	r2, [r2, #0]
 801e656:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	@ 0xa0
 801e65a:	e9dd a523 	ldrd	sl, r5, [sp, #140]	@ 0x8c
 801e65e:	fb00 1303 	mla	r3, r0, r3, r1
 801e662:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 801e666:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801e668:	681b      	ldr	r3, [r3, #0]
 801e66a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e66c:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801e66e:	685e      	ldr	r6, [r3, #4]
 801e670:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e672:	3604      	adds	r6, #4
 801e674:	43db      	mvns	r3, r3
 801e676:	b2db      	uxtb	r3, r3
 801e678:	930a      	str	r3, [sp, #40]	@ 0x28
 801e67a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e67c:	2b00      	cmp	r3, #0
 801e67e:	dc03      	bgt.n	801e688 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801e680:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801e682:	2b00      	cmp	r3, #0
 801e684:	f340 8225 	ble.w	801ead2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 801e688:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801e68a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e68e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e692:	1e48      	subs	r0, r1, #1
 801e694:	1e57      	subs	r7, r2, #1
 801e696:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e698:	2b00      	cmp	r3, #0
 801e69a:	f340 80e3 	ble.w	801e864 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801e69e:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 801e6a2:	ea4f 4325 	mov.w	r3, r5, asr #16
 801e6a6:	d406      	bmi.n	801e6b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801e6a8:	4584      	cmp	ip, r0
 801e6aa:	da04      	bge.n	801e6b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801e6ac:	2b00      	cmp	r3, #0
 801e6ae:	db02      	blt.n	801e6b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801e6b0:	42bb      	cmp	r3, r7
 801e6b2:	f2c0 80d8 	blt.w	801e866 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801e6b6:	f11c 0c01 	adds.w	ip, ip, #1
 801e6ba:	f100 80c9 	bmi.w	801e850 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801e6be:	4561      	cmp	r1, ip
 801e6c0:	f2c0 80c6 	blt.w	801e850 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801e6c4:	3301      	adds	r3, #1
 801e6c6:	f100 80c3 	bmi.w	801e850 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801e6ca:	429a      	cmp	r2, r3
 801e6cc:	f2c0 80c0 	blt.w	801e850 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801e6d0:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 801e6d4:	4647      	mov	r7, r8
 801e6d6:	f1bb 0f00 	cmp.w	fp, #0
 801e6da:	f340 80e3 	ble.w	801e8a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 801e6de:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 801e6e0:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801e6e4:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801e6e6:	f3ca 3003 	ubfx	r0, sl, #12, #4
 801e6ea:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801e6ee:	ea5f 422a 	movs.w	r2, sl, asr #16
 801e6f2:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801e6f6:	689b      	ldr	r3, [r3, #8]
 801e6f8:	f100 8121 	bmi.w	801e93e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801e6fc:	f103 39ff 	add.w	r9, r3, #4294967295
 801e700:	454a      	cmp	r2, r9
 801e702:	f280 811c 	bge.w	801e93e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801e706:	f1bc 0f00 	cmp.w	ip, #0
 801e70a:	f2c0 8118 	blt.w	801e93e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801e70e:	f10e 39ff 	add.w	r9, lr, #4294967295
 801e712:	45cc      	cmp	ip, r9
 801e714:	f280 8113 	bge.w	801e93e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801e718:	b21b      	sxth	r3, r3
 801e71a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801e71c:	fb0c 2203 	mla	r2, ip, r3, r2
 801e720:	eb04 0902 	add.w	r9, r4, r2
 801e724:	5ca2      	ldrb	r2, [r4, r2]
 801e726:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 801e72a:	2800      	cmp	r0, #0
 801e72c:	f000 80fe 	beq.w	801e92c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801e730:	f899 2001 	ldrb.w	r2, [r9, #1]
 801e734:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 801e738:	9211      	str	r2, [sp, #68]	@ 0x44
 801e73a:	b151      	cbz	r1, 801e752 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801e73c:	eb09 0203 	add.w	r2, r9, r3
 801e740:	f819 3003 	ldrb.w	r3, [r9, r3]
 801e744:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801e748:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e74a:	7853      	ldrb	r3, [r2, #1]
 801e74c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801e750:	9312      	str	r3, [sp, #72]	@ 0x48
 801e752:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e754:	fb10 f201 	smulbb	r2, r0, r1
 801e758:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801e75a:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801e75e:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 801e762:	f424 64fc 	bic.w	r4, r4, #2016	@ 0x7e0
 801e766:	10d2      	asrs	r2, r2, #3
 801e768:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 801e76c:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 801e770:	ea4c 0c03 	orr.w	ip, ip, r3
 801e774:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801e776:	041b      	lsls	r3, r3, #16
 801e778:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 801e77c:	4323      	orrs	r3, r4
 801e77e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801e780:	4353      	muls	r3, r2
 801e782:	fb09 330c 	mla	r3, r9, ip, r3
 801e786:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801e78a:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 801e78e:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 801e792:	ea4c 0e0e 	orr.w	lr, ip, lr
 801e796:	f1c1 0c10 	rsb	ip, r1, #16
 801e79a:	ebac 0c00 	sub.w	ip, ip, r0
 801e79e:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801e7a2:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801e7a6:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801e7aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e7ac:	0418      	lsls	r0, r3, #16
 801e7ae:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 801e7b2:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 801e7b6:	4318      	orrs	r0, r3
 801e7b8:	fb02 c200 	mla	r2, r2, r0, ip
 801e7bc:	8838      	ldrh	r0, [r7, #0]
 801e7be:	0d53      	lsrs	r3, r2, #21
 801e7c0:	0952      	lsrs	r2, r2, #5
 801e7c2:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801e7c6:	1201      	asrs	r1, r0, #8
 801e7c8:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 801e7cc:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 801e7d0:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 801e7d4:	00c0      	lsls	r0, r0, #3
 801e7d6:	431a      	orrs	r2, r3
 801e7d8:	f8bd 3034 	ldrh.w	r3, [sp, #52]	@ 0x34
 801e7dc:	fb11 f104 	smulbb	r1, r1, r4
 801e7e0:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 801e7e4:	b292      	uxth	r2, r2
 801e7e6:	fb1e fe04 	smulbb	lr, lr, r4
 801e7ea:	b2c0      	uxtb	r0, r0
 801e7ec:	ea4f 2c22 	mov.w	ip, r2, asr #8
 801e7f0:	fb10 f004 	smulbb	r0, r0, r4
 801e7f4:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801e7f8:	fb0c 1c03 	mla	ip, ip, r3, r1
 801e7fc:	10d1      	asrs	r1, r2, #3
 801e7fe:	00d2      	lsls	r2, r2, #3
 801e800:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 801e804:	fa1f fc8c 	uxth.w	ip, ip
 801e808:	b2d2      	uxtb	r2, r2
 801e80a:	fb01 e103 	mla	r1, r1, r3, lr
 801e80e:	fb02 0303 	mla	r3, r2, r3, r0
 801e812:	b289      	uxth	r1, r1
 801e814:	b29a      	uxth	r2, r3
 801e816:	f10c 0301 	add.w	r3, ip, #1
 801e81a:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801e81e:	1c53      	adds	r3, r2, #1
 801e820:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801e824:	1c4a      	adds	r2, r1, #1
 801e826:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801e82a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801e82e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801e832:	0949      	lsrs	r1, r1, #5
 801e834:	ea43 030c 	orr.w	r3, r3, ip
 801e838:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 801e83c:	430b      	orrs	r3, r1
 801e83e:	803b      	strh	r3, [r7, #0]
 801e840:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801e842:	3702      	adds	r7, #2
 801e844:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e848:	449a      	add	sl, r3
 801e84a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801e84c:	441d      	add	r5, r3
 801e84e:	e742      	b.n	801e6d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801e850:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801e852:	f108 0802 	add.w	r8, r8, #2
 801e856:	449a      	add	sl, r3
 801e858:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801e85a:	441d      	add	r5, r3
 801e85c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e85e:	3b01      	subs	r3, #1
 801e860:	9309      	str	r3, [sp, #36]	@ 0x24
 801e862:	e718      	b.n	801e696 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801e864:	d023      	beq.n	801e8ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 801e866:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e868:	9825      	ldr	r0, [sp, #148]	@ 0x94
 801e86a:	3b01      	subs	r3, #1
 801e86c:	fb00 a003 	mla	r0, r0, r3, sl
 801e870:	1400      	asrs	r0, r0, #16
 801e872:	f53f af2d 	bmi.w	801e6d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801e876:	3901      	subs	r1, #1
 801e878:	4288      	cmp	r0, r1
 801e87a:	f6bf af29 	bge.w	801e6d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801e87e:	9926      	ldr	r1, [sp, #152]	@ 0x98
 801e880:	fb01 5303 	mla	r3, r1, r3, r5
 801e884:	141b      	asrs	r3, r3, #16
 801e886:	f53f af23 	bmi.w	801e6d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801e88a:	3a01      	subs	r2, #1
 801e88c:	4293      	cmp	r3, r2
 801e88e:	f6bf af1f 	bge.w	801e6d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801e892:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
 801e896:	f8bd 9034 	ldrh.w	r9, [sp, #52]	@ 0x34
 801e89a:	f8cd 8038 	str.w	r8, [sp, #56]	@ 0x38
 801e89e:	f1be 0f00 	cmp.w	lr, #0
 801e8a2:	dc6c      	bgt.n	801e97e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801e8a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e8a6:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801e8aa:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 801e8ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e8b0:	2b00      	cmp	r3, #0
 801e8b2:	f340 810e 	ble.w	801ead2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 801e8b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801e8ba:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801e8bc:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e8c0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e8c4:	eef0 6a62 	vmov.f32	s13, s5
 801e8c8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e8cc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e8d0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e8d4:	ee16 aa90 	vmov	sl, s13
 801e8d8:	eef0 6a43 	vmov.f32	s13, s6
 801e8dc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e8e0:	ee16 5a90 	vmov	r5, s13
 801e8e4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e8e8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e8ec:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e8f0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e8f4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e8f8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e8fc:	ee12 2a90 	vmov	r2, s5
 801e900:	eef0 2a47 	vmov.f32	s5, s14
 801e904:	fb92 f3f3 	sdiv	r3, r2, r3
 801e908:	ee13 2a10 	vmov	r2, s6
 801e90c:	9325      	str	r3, [sp, #148]	@ 0x94
 801e90e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801e910:	eeb0 3a67 	vmov.f32	s6, s15
 801e914:	fb92 f3f3 	sdiv	r3, r2, r3
 801e918:	9326      	str	r3, [sp, #152]	@ 0x98
 801e91a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e91c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801e91e:	3b01      	subs	r3, #1
 801e920:	930c      	str	r3, [sp, #48]	@ 0x30
 801e922:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801e924:	bf08      	it	eq
 801e926:	4613      	moveq	r3, r2
 801e928:	9309      	str	r3, [sp, #36]	@ 0x24
 801e92a:	e6a6      	b.n	801e67a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801e92c:	2900      	cmp	r1, #0
 801e92e:	f43f af10 	beq.w	801e752 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801e932:	f819 3003 	ldrb.w	r3, [r9, r3]
 801e936:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801e93a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e93c:	e709      	b.n	801e752 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801e93e:	f112 0901 	adds.w	r9, r2, #1
 801e942:	f53f af7d 	bmi.w	801e840 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801e946:	454b      	cmp	r3, r9
 801e948:	f6ff af7a 	blt.w	801e840 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801e94c:	f11c 0901 	adds.w	r9, ip, #1
 801e950:	f53f af76 	bmi.w	801e840 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801e954:	45ce      	cmp	lr, r9
 801e956:	f6ff af73 	blt.w	801e840 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801e95a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801e95c:	b21b      	sxth	r3, r3
 801e95e:	9202      	str	r2, [sp, #8]
 801e960:	fa0f f28e 	sxth.w	r2, lr
 801e964:	9300      	str	r3, [sp, #0]
 801e966:	4633      	mov	r3, r6
 801e968:	9201      	str	r2, [sp, #4]
 801e96a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801e96c:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801e970:	e9cd c003 	strd	ip, r0, [sp, #12]
 801e974:	4639      	mov	r1, r7
 801e976:	9816      	ldr	r0, [sp, #88]	@ 0x58
 801e978:	f7ff fd8e 	bl	801e498 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 801e97c:	e760      	b.n	801e840 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801e97e:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801e980:	ea4f 422a 	mov.w	r2, sl, asr #16
 801e984:	1429      	asrs	r1, r5, #16
 801e986:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801e988:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801e98c:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 801e990:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801e994:	fb03 2101 	mla	r1, r3, r1, r2
 801e998:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801e99a:	440a      	add	r2, r1
 801e99c:	5c61      	ldrb	r1, [r4, r1]
 801e99e:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 801e9a2:	f1bc 0f00 	cmp.w	ip, #0
 801e9a6:	f000 808c 	beq.w	801eac2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 801e9aa:	7857      	ldrb	r7, [r2, #1]
 801e9ac:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 801e9b0:	9413      	str	r4, [sp, #76]	@ 0x4c
 801e9b2:	b140      	cbz	r0, 801e9c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801e9b4:	18d7      	adds	r7, r2, r3
 801e9b6:	5cd3      	ldrb	r3, [r2, r3]
 801e9b8:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801e9bc:	9310      	str	r3, [sp, #64]	@ 0x40
 801e9be:	787b      	ldrb	r3, [r7, #1]
 801e9c0:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801e9c4:	9314      	str	r3, [sp, #80]	@ 0x50
 801e9c6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e9c8:	fb1c f200 	smulbb	r2, ip, r0
 801e9cc:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e9ce:	f10e 3eff 	add.w	lr, lr, #4294967295
 801e9d2:	041f      	lsls	r7, r3, #16
 801e9d4:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 801e9d8:	10d2      	asrs	r2, r2, #3
 801e9da:	f424 6bfc 	bic.w	fp, r4, #2016	@ 0x7e0
 801e9de:	f007 67fc 	and.w	r7, r7, #132120576	@ 0x7e00000
 801e9e2:	431f      	orrs	r7, r3
 801e9e4:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 801e9e8:	9317      	str	r3, [sp, #92]	@ 0x5c
 801e9ea:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801e9ec:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801e9ee:	041b      	lsls	r3, r3, #16
 801e9f0:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 801e9f4:	ea43 030b 	orr.w	r3, r3, fp
 801e9f8:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801e9fc:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 801ea00:	4353      	muls	r3, r2
 801ea02:	fb04 3707 	mla	r7, r4, r7, r3
 801ea06:	f00b 63fc 	and.w	r3, fp, #132120576	@ 0x7e00000
 801ea0a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801ea0c:	ea43 0b01 	orr.w	fp, r3, r1
 801ea10:	f1c0 0110 	rsb	r1, r0, #16
 801ea14:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ea16:	eba1 0c0c 	sub.w	ip, r1, ip
 801ea1a:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801ea1e:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801ea22:	fb0c 770b 	mla	r7, ip, fp, r7
 801ea26:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801ea2a:	f423 6bfc 	bic.w	fp, r3, #2016	@ 0x7e0
 801ea2e:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 801ea32:	ea4c 0c0b 	orr.w	ip, ip, fp
 801ea36:	fb02 770c 	mla	r7, r2, ip, r7
 801ea3a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ea3c:	0d79      	lsrs	r1, r7, #21
 801ea3e:	8812      	ldrh	r2, [r2, #0]
 801ea40:	097f      	lsrs	r7, r7, #5
 801ea42:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 801ea46:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 801ea4a:	430f      	orrs	r7, r1
 801ea4c:	1211      	asrs	r1, r2, #8
 801ea4e:	b2bb      	uxth	r3, r7
 801ea50:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 801ea54:	10d7      	asrs	r7, r2, #3
 801ea56:	fb11 f104 	smulbb	r1, r1, r4
 801ea5a:	1218      	asrs	r0, r3, #8
 801ea5c:	00d2      	lsls	r2, r2, #3
 801ea5e:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801ea62:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 801ea66:	fb17 f704 	smulbb	r7, r7, r4
 801ea6a:	b2d2      	uxtb	r2, r2
 801ea6c:	fb00 1009 	mla	r0, r0, r9, r1
 801ea70:	10d9      	asrs	r1, r3, #3
 801ea72:	fb12 f204 	smulbb	r2, r2, r4
 801ea76:	00db      	lsls	r3, r3, #3
 801ea78:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 801ea7c:	b280      	uxth	r0, r0
 801ea7e:	b2db      	uxtb	r3, r3
 801ea80:	fb01 7109 	mla	r1, r1, r9, r7
 801ea84:	fb03 2309 	mla	r3, r3, r9, r2
 801ea88:	1c42      	adds	r2, r0, #1
 801ea8a:	b289      	uxth	r1, r1
 801ea8c:	b29b      	uxth	r3, r3
 801ea8e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801ea92:	1c4f      	adds	r7, r1, #1
 801ea94:	1c5a      	adds	r2, r3, #1
 801ea96:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801ea9a:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 801ea9e:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801eaa2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801eaa4:	0949      	lsrs	r1, r1, #5
 801eaa6:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801eaaa:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 801eaae:	4310      	orrs	r0, r2
 801eab0:	4308      	orrs	r0, r1
 801eab2:	f823 0b02 	strh.w	r0, [r3], #2
 801eab6:	930e      	str	r3, [sp, #56]	@ 0x38
 801eab8:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801eaba:	449a      	add	sl, r3
 801eabc:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801eabe:	441d      	add	r5, r3
 801eac0:	e6ed      	b.n	801e89e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 801eac2:	2800      	cmp	r0, #0
 801eac4:	f43f af7f 	beq.w	801e9c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801eac8:	5cd3      	ldrb	r3, [r2, r3]
 801eaca:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801eace:	9310      	str	r3, [sp, #64]	@ 0x40
 801ead0:	e779      	b.n	801e9c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801ead2:	b019      	add	sp, #100	@ 0x64
 801ead4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ead8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 801ead8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801eadc:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	@ 0x28
 801eae0:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801eae4:	f1b8 0f00 	cmp.w	r8, #0
 801eae8:	f9bd a024 	ldrsh.w	sl, [sp, #36]	@ 0x24
 801eaec:	fb08 470e 	mla	r7, r8, lr, r4
 801eaf0:	f89d 5030 	ldrb.w	r5, [sp, #48]	@ 0x30
 801eaf4:	f89d 6034 	ldrb.w	r6, [sp, #52]	@ 0x34
 801eaf8:	eb02 0907 	add.w	r9, r2, r7
 801eafc:	8808      	ldrh	r0, [r1, #0]
 801eafe:	db67      	blt.n	801ebd0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 801eb00:	45c2      	cmp	sl, r8
 801eb02:	dd65      	ble.n	801ebd0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 801eb04:	2c00      	cmp	r4, #0
 801eb06:	db61      	blt.n	801ebcc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 801eb08:	45a6      	cmp	lr, r4
 801eb0a:	dd5f      	ble.n	801ebcc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 801eb0c:	5dd2      	ldrb	r2, [r2, r7]
 801eb0e:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 801eb12:	1c62      	adds	r2, r4, #1
 801eb14:	d45f      	bmi.n	801ebd6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801eb16:	4596      	cmp	lr, r2
 801eb18:	dd5d      	ble.n	801ebd6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801eb1a:	2d00      	cmp	r5, #0
 801eb1c:	d05b      	beq.n	801ebd6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801eb1e:	f899 2001 	ldrb.w	r2, [r9, #1]
 801eb22:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 801eb26:	f118 0801 	adds.w	r8, r8, #1
 801eb2a:	d458      	bmi.n	801ebde <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801eb2c:	45c2      	cmp	sl, r8
 801eb2e:	dd56      	ble.n	801ebde <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801eb30:	2e00      	cmp	r6, #0
 801eb32:	d054      	beq.n	801ebde <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801eb34:	2c00      	cmp	r4, #0
 801eb36:	db50      	blt.n	801ebda <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 801eb38:	45a6      	cmp	lr, r4
 801eb3a:	dd4e      	ble.n	801ebda <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 801eb3c:	f819 200e 	ldrb.w	r2, [r9, lr]
 801eb40:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801eb44:	3401      	adds	r4, #1
 801eb46:	d407      	bmi.n	801eb58 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801eb48:	45a6      	cmp	lr, r4
 801eb4a:	dd05      	ble.n	801eb58 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801eb4c:	b125      	cbz	r5, 801eb58 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801eb4e:	44ce      	add	lr, r9
 801eb50:	f89e 0001 	ldrb.w	r0, [lr, #1]
 801eb54:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801eb58:	fb15 f406 	smulbb	r4, r5, r6
 801eb5c:	ea4f 430c 	mov.w	r3, ip, lsl #16
 801eb60:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 801eb64:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 801eb68:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 801eb6c:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 801eb70:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 801eb74:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 801eb78:	ea43 0c0c 	orr.w	ip, r3, ip
 801eb7c:	f1c6 0310 	rsb	r3, r6, #16
 801eb80:	ea4e 0707 	orr.w	r7, lr, r7
 801eb84:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 801eb88:	1b5b      	subs	r3, r3, r5
 801eb8a:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 801eb8e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801eb92:	437d      	muls	r5, r7
 801eb94:	fb03 5c0c 	mla	ip, r3, ip, r5
 801eb98:	0403      	lsls	r3, r0, #16
 801eb9a:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 801eb9e:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 801eba2:	4318      	orrs	r0, r3
 801eba4:	0413      	lsls	r3, r2, #16
 801eba6:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 801ebaa:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 801ebae:	fb04 c000 	mla	r0, r4, r0, ip
 801ebb2:	4313      	orrs	r3, r2
 801ebb4:	fb06 0003 	mla	r0, r6, r3, r0
 801ebb8:	0d43      	lsrs	r3, r0, #21
 801ebba:	0940      	lsrs	r0, r0, #5
 801ebbc:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801ebc0:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 801ebc4:	4318      	orrs	r0, r3
 801ebc6:	8008      	strh	r0, [r1, #0]
 801ebc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ebcc:	4684      	mov	ip, r0
 801ebce:	e7a0      	b.n	801eb12 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
 801ebd0:	4607      	mov	r7, r0
 801ebd2:	4684      	mov	ip, r0
 801ebd4:	e7a7      	b.n	801eb26 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 801ebd6:	4607      	mov	r7, r0
 801ebd8:	e7a5      	b.n	801eb26 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 801ebda:	4602      	mov	r2, r0
 801ebdc:	e7b2      	b.n	801eb44 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
 801ebde:	4602      	mov	r2, r0
 801ebe0:	e7ba      	b.n	801eb58 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

0801ebe2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ebe2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ebe6:	b093      	sub	sp, #76	@ 0x4c
 801ebe8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ebec:	920f      	str	r2, [sp, #60]	@ 0x3c
 801ebee:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801ebf0:	9010      	str	r0, [sp, #64]	@ 0x40
 801ebf2:	9108      	str	r1, [sp, #32]
 801ebf4:	6850      	ldr	r0, [r2, #4]
 801ebf6:	9306      	str	r3, [sp, #24]
 801ebf8:	6812      	ldr	r2, [r2, #0]
 801ebfa:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 801ebfe:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	@ 0x74
 801ec02:	fb00 1303 	mla	r3, r0, r3, r1
 801ec06:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 801ec0a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801ec0c:	681b      	ldr	r3, [r3, #0]
 801ec0e:	9307      	str	r3, [sp, #28]
 801ec10:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801ec12:	685f      	ldr	r7, [r3, #4]
 801ec14:	3704      	adds	r7, #4
 801ec16:	9b08      	ldr	r3, [sp, #32]
 801ec18:	2b00      	cmp	r3, #0
 801ec1a:	dc03      	bgt.n	801ec24 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801ec1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ec1e:	2b00      	cmp	r3, #0
 801ec20:	f340 81b2 	ble.w	801ef88 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 801ec24:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801ec26:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ec2a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801ec2e:	1e48      	subs	r0, r1, #1
 801ec30:	f102 3cff 	add.w	ip, r2, #4294967295
 801ec34:	9b06      	ldr	r3, [sp, #24]
 801ec36:	2b00      	cmp	r3, #0
 801ec38:	f340 80a9 	ble.w	801ed8e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801ec3c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801ec40:	ea4f 4326 	mov.w	r3, r6, asr #16
 801ec44:	d406      	bmi.n	801ec54 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ec46:	4586      	cmp	lr, r0
 801ec48:	da04      	bge.n	801ec54 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ec4a:	2b00      	cmp	r3, #0
 801ec4c:	db02      	blt.n	801ec54 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ec4e:	4563      	cmp	r3, ip
 801ec50:	f2c0 809e 	blt.w	801ed90 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801ec54:	f11e 0e01 	adds.w	lr, lr, #1
 801ec58:	f100 808f 	bmi.w	801ed7a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801ec5c:	4571      	cmp	r1, lr
 801ec5e:	f2c0 808c 	blt.w	801ed7a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801ec62:	3301      	adds	r3, #1
 801ec64:	f100 8089 	bmi.w	801ed7a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801ec68:	429a      	cmp	r2, r3
 801ec6a:	f2c0 8086 	blt.w	801ed7a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801ec6e:	f8dd b018 	ldr.w	fp, [sp, #24]
 801ec72:	46c8      	mov	r8, r9
 801ec74:	f1bb 0f00 	cmp.w	fp, #0
 801ec78:	f340 80a6 	ble.w	801edc8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801ec7c:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801ec7e:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801ec82:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801ec84:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801ec88:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801ec8c:	1422      	asrs	r2, r4, #16
 801ec8e:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801ec92:	689b      	ldr	r3, [r3, #8]
 801ec94:	f100 80e3 	bmi.w	801ee5e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801ec98:	f103 3aff 	add.w	sl, r3, #4294967295
 801ec9c:	4552      	cmp	r2, sl
 801ec9e:	f280 80de 	bge.w	801ee5e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801eca2:	f1bc 0f00 	cmp.w	ip, #0
 801eca6:	f2c0 80da 	blt.w	801ee5e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801ecaa:	f10e 3aff 	add.w	sl, lr, #4294967295
 801ecae:	45d4      	cmp	ip, sl
 801ecb0:	f280 80d5 	bge.w	801ee5e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801ecb4:	b21b      	sxth	r3, r3
 801ecb6:	9d07      	ldr	r5, [sp, #28]
 801ecb8:	fb0c 2203 	mla	r2, ip, r3, r2
 801ecbc:	eb05 0a02 	add.w	sl, r5, r2
 801ecc0:	5caa      	ldrb	r2, [r5, r2]
 801ecc2:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 801ecc6:	2800      	cmp	r0, #0
 801ecc8:	f000 80c0 	beq.w	801ee4c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801eccc:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801ecd0:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 801ecd4:	920b      	str	r2, [sp, #44]	@ 0x2c
 801ecd6:	b151      	cbz	r1, 801ecee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801ecd8:	eb0a 0203 	add.w	r2, sl, r3
 801ecdc:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801ece0:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801ece4:	9309      	str	r3, [sp, #36]	@ 0x24
 801ece6:	7853      	ldrb	r3, [r2, #1]
 801ece8:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801ecec:	930c      	str	r3, [sp, #48]	@ 0x30
 801ecee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ecf0:	fb10 f201 	smulbb	r2, r0, r1
 801ecf4:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801ecf6:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801ecfa:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 801ecfe:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 801ed02:	10d2      	asrs	r2, r2, #3
 801ed04:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 801ed08:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 801ed0c:	ea4c 0c03 	orr.w	ip, ip, r3
 801ed10:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ed12:	041b      	lsls	r3, r3, #16
 801ed14:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 801ed18:	432b      	orrs	r3, r5
 801ed1a:	4353      	muls	r3, r2
 801ed1c:	fb0a 330c 	mla	r3, sl, ip, r3
 801ed20:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801ed24:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 801ed28:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 801ed2c:	ea4c 0e0e 	orr.w	lr, ip, lr
 801ed30:	f1c1 0c10 	rsb	ip, r1, #16
 801ed34:	ebac 0c00 	sub.w	ip, ip, r0
 801ed38:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801ed3c:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801ed40:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801ed44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ed46:	0418      	lsls	r0, r3, #16
 801ed48:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 801ed4c:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 801ed50:	4318      	orrs	r0, r3
 801ed52:	fb02 c200 	mla	r2, r2, r0, ip
 801ed56:	0d53      	lsrs	r3, r2, #21
 801ed58:	0952      	lsrs	r2, r2, #5
 801ed5a:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801ed5e:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 801ed62:	431a      	orrs	r2, r3
 801ed64:	f8a8 2000 	strh.w	r2, [r8]
 801ed68:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801ed6a:	f108 0802 	add.w	r8, r8, #2
 801ed6e:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ed72:	441c      	add	r4, r3
 801ed74:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801ed76:	441e      	add	r6, r3
 801ed78:	e77c      	b.n	801ec74 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801ed7a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801ed7c:	f109 0902 	add.w	r9, r9, #2
 801ed80:	441c      	add	r4, r3
 801ed82:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801ed84:	441e      	add	r6, r3
 801ed86:	9b06      	ldr	r3, [sp, #24]
 801ed88:	3b01      	subs	r3, #1
 801ed8a:	9306      	str	r3, [sp, #24]
 801ed8c:	e752      	b.n	801ec34 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801ed8e:	d020      	beq.n	801edd2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801ed90:	9b06      	ldr	r3, [sp, #24]
 801ed92:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 801ed94:	3b01      	subs	r3, #1
 801ed96:	fb00 4003 	mla	r0, r0, r3, r4
 801ed9a:	1400      	asrs	r0, r0, #16
 801ed9c:	f53f af67 	bmi.w	801ec6e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801eda0:	3901      	subs	r1, #1
 801eda2:	4288      	cmp	r0, r1
 801eda4:	f6bf af63 	bge.w	801ec6e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801eda8:	9920      	ldr	r1, [sp, #128]	@ 0x80
 801edaa:	fb01 6303 	mla	r3, r1, r3, r6
 801edae:	141b      	asrs	r3, r3, #16
 801edb0:	f53f af5d 	bmi.w	801ec6e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801edb4:	3a01      	subs	r2, #1
 801edb6:	4293      	cmp	r3, r2
 801edb8:	f6bf af59 	bge.w	801ec6e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801edbc:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801edc0:	46ca      	mov	sl, r9
 801edc2:	f1b8 0f00 	cmp.w	r8, #0
 801edc6:	dc67      	bgt.n	801ee98 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801edc8:	9b06      	ldr	r3, [sp, #24]
 801edca:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801edce:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 801edd2:	9b08      	ldr	r3, [sp, #32]
 801edd4:	2b00      	cmp	r3, #0
 801edd6:	f340 80d7 	ble.w	801ef88 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 801edda:	ee30 0a04 	vadd.f32	s0, s0, s8
 801edde:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801ede0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ede4:	eeb0 6a62 	vmov.f32	s12, s5
 801ede8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801edec:	ee31 1a05 	vadd.f32	s2, s2, s10
 801edf0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801edf4:	ee16 4a10 	vmov	r4, s12
 801edf8:	eeb0 6a43 	vmov.f32	s12, s6
 801edfc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ee00:	ee16 6a10 	vmov	r6, s12
 801ee04:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ee08:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ee0c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ee10:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ee14:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ee18:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ee1c:	ee12 2a90 	vmov	r2, s5
 801ee20:	eef0 2a47 	vmov.f32	s5, s14
 801ee24:	fb92 f3f3 	sdiv	r3, r2, r3
 801ee28:	ee13 2a10 	vmov	r2, s6
 801ee2c:	931f      	str	r3, [sp, #124]	@ 0x7c
 801ee2e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801ee30:	eeb0 3a67 	vmov.f32	s6, s15
 801ee34:	fb92 f3f3 	sdiv	r3, r2, r3
 801ee38:	9320      	str	r3, [sp, #128]	@ 0x80
 801ee3a:	9b08      	ldr	r3, [sp, #32]
 801ee3c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801ee3e:	3b01      	subs	r3, #1
 801ee40:	9308      	str	r3, [sp, #32]
 801ee42:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801ee44:	bf08      	it	eq
 801ee46:	4613      	moveq	r3, r2
 801ee48:	9306      	str	r3, [sp, #24]
 801ee4a:	e6e4      	b.n	801ec16 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801ee4c:	2900      	cmp	r1, #0
 801ee4e:	f43f af4e 	beq.w	801ecee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801ee52:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801ee56:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801ee5a:	9309      	str	r3, [sp, #36]	@ 0x24
 801ee5c:	e747      	b.n	801ecee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801ee5e:	f112 0a01 	adds.w	sl, r2, #1
 801ee62:	d481      	bmi.n	801ed68 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801ee64:	4553      	cmp	r3, sl
 801ee66:	f6ff af7f 	blt.w	801ed68 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801ee6a:	f11c 0a01 	adds.w	sl, ip, #1
 801ee6e:	f53f af7b 	bmi.w	801ed68 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801ee72:	45d6      	cmp	lr, sl
 801ee74:	f6ff af78 	blt.w	801ed68 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801ee78:	b21b      	sxth	r3, r3
 801ee7a:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 801ee7e:	fa0f f28e 	sxth.w	r2, lr
 801ee82:	9300      	str	r3, [sp, #0]
 801ee84:	463b      	mov	r3, r7
 801ee86:	9201      	str	r2, [sp, #4]
 801ee88:	9a07      	ldr	r2, [sp, #28]
 801ee8a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801ee8e:	4641      	mov	r1, r8
 801ee90:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801ee92:	f7ff fe21 	bl	801ead8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 801ee96:	e767      	b.n	801ed68 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801ee98:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801ee9a:	1422      	asrs	r2, r4, #16
 801ee9c:	1431      	asrs	r1, r6, #16
 801ee9e:	9d07      	ldr	r5, [sp, #28]
 801eea0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801eea4:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 801eea8:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801eeac:	fb03 2101 	mla	r1, r3, r1, r2
 801eeb0:	9a07      	ldr	r2, [sp, #28]
 801eeb2:	440a      	add	r2, r1
 801eeb4:	5c69      	ldrb	r1, [r5, r1]
 801eeb6:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 801eeba:	f1be 0f00 	cmp.w	lr, #0
 801eebe:	d05c      	beq.n	801ef7a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 801eec0:	f892 c001 	ldrb.w	ip, [r2, #1]
 801eec4:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 801eec8:	950d      	str	r5, [sp, #52]	@ 0x34
 801eeca:	b150      	cbz	r0, 801eee2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801eecc:	eb02 0c03 	add.w	ip, r2, r3
 801eed0:	5cd3      	ldrb	r3, [r2, r3]
 801eed2:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801eed6:	930a      	str	r3, [sp, #40]	@ 0x28
 801eed8:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801eedc:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801eee0:	930e      	str	r3, [sp, #56]	@ 0x38
 801eee2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801eee4:	fb1e f200 	smulbb	r2, lr, r0
 801eee8:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 801eeea:	f108 38ff 	add.w	r8, r8, #4294967295
 801eeee:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801eef2:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 801eef6:	10d2      	asrs	r2, r2, #3
 801eef8:	f425 6bfc 	bic.w	fp, r5, #2016	@ 0x7e0
 801eefc:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 801ef00:	ea4c 0c03 	orr.w	ip, ip, r3
 801ef04:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 801ef08:	9311      	str	r3, [sp, #68]	@ 0x44
 801ef0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ef0c:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801ef0e:	041b      	lsls	r3, r3, #16
 801ef10:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 801ef14:	ea43 030b 	orr.w	r3, r3, fp
 801ef18:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801ef1c:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 801ef20:	4353      	muls	r3, r2
 801ef22:	fb05 3c0c 	mla	ip, r5, ip, r3
 801ef26:	f00b 63fc 	and.w	r3, fp, #132120576	@ 0x7e00000
 801ef2a:	ea43 0b01 	orr.w	fp, r3, r1
 801ef2e:	f1c0 0110 	rsb	r1, r0, #16
 801ef32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ef34:	eba1 0e0e 	sub.w	lr, r1, lr
 801ef38:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 801ef3c:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801ef40:	fb0e cc0b 	mla	ip, lr, fp, ip
 801ef44:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 801ef48:	f423 6efc 	bic.w	lr, r3, #2016	@ 0x7e0
 801ef4c:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 801ef50:	ea4b 0e0e 	orr.w	lr, fp, lr
 801ef54:	fb02 cc0e 	mla	ip, r2, lr, ip
 801ef58:	ea4f 535c 	mov.w	r3, ip, lsr #21
 801ef5c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801ef60:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801ef64:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 801ef68:	ea43 0c0c 	orr.w	ip, r3, ip
 801ef6c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801ef6e:	441c      	add	r4, r3
 801ef70:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801ef72:	f82a cb02 	strh.w	ip, [sl], #2
 801ef76:	441e      	add	r6, r3
 801ef78:	e723      	b.n	801edc2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801ef7a:	2800      	cmp	r0, #0
 801ef7c:	d0b1      	beq.n	801eee2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801ef7e:	5cd3      	ldrb	r3, [r2, r3]
 801ef80:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801ef84:	930a      	str	r3, [sp, #40]	@ 0x28
 801ef86:	e7ac      	b.n	801eee2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801ef88:	b013      	add	sp, #76	@ 0x4c
 801ef8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ef8e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 801ef8e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef92:	880d      	ldrh	r5, [r1, #0]
 801ef94:	b087      	sub	sp, #28
 801ef96:	10ef      	asrs	r7, r5, #3
 801ef98:	9103      	str	r1, [sp, #12]
 801ef9a:	ea4f 2a25 	mov.w	sl, r5, asr #8
 801ef9e:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	@ 0x40
 801efa2:	00ed      	lsls	r5, r5, #3
 801efa4:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801efa8:	f00a 0af8 	and.w	sl, sl, #248	@ 0xf8
 801efac:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 801efb0:	b2ed      	uxtb	r5, r5
 801efb2:	9701      	str	r7, [sp, #4]
 801efb4:	f89d 4050 	ldrb.w	r4, [sp, #80]	@ 0x50
 801efb8:	9502      	str	r5, [sp, #8]
 801efba:	9d01      	ldr	r5, [sp, #4]
 801efbc:	9902      	ldr	r1, [sp, #8]
 801efbe:	022d      	lsls	r5, r5, #8
 801efc0:	f89d e054 	ldrb.w	lr, [sp, #84]	@ 0x54
 801efc4:	f89d 8058 	ldrb.w	r8, [sp, #88]	@ 0x58
 801efc8:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 801efcc:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	@ 0x48
 801efd0:	430d      	orrs	r5, r1
 801efd2:	fb06 0709 	mla	r7, r6, r9, r0
 801efd6:	2e00      	cmp	r6, #0
 801efd8:	9505      	str	r5, [sp, #20]
 801efda:	eb02 0c07 	add.w	ip, r2, r7
 801efde:	f2c0 80b6 	blt.w	801f14e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 801efe2:	45b3      	cmp	fp, r6
 801efe4:	f340 80b3 	ble.w	801f14e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 801efe8:	2800      	cmp	r0, #0
 801efea:	f2c0 80ae 	blt.w	801f14a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 801efee:	4581      	cmp	r9, r0
 801eff0:	f340 80ab 	ble.w	801f14a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 801eff4:	5dd7      	ldrb	r7, [r2, r7]
 801eff6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801effa:	441f      	add	r7, r3
 801effc:	1c42      	adds	r2, r0, #1
 801effe:	f100 80a9 	bmi.w	801f154 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801f002:	4591      	cmp	r9, r2
 801f004:	f340 80a6 	ble.w	801f154 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801f008:	2c00      	cmp	r4, #0
 801f00a:	f000 80a3 	beq.w	801f154 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801f00e:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801f012:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f016:	441d      	add	r5, r3
 801f018:	3601      	adds	r6, #1
 801f01a:	f100 809f 	bmi.w	801f15c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801f01e:	45b3      	cmp	fp, r6
 801f020:	f340 809c 	ble.w	801f15c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801f024:	f1be 0f00 	cmp.w	lr, #0
 801f028:	f000 8098 	beq.w	801f15c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801f02c:	2800      	cmp	r0, #0
 801f02e:	f2c0 8093 	blt.w	801f158 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 801f032:	4581      	cmp	r9, r0
 801f034:	f340 8090 	ble.w	801f158 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 801f038:	f81c 6009 	ldrb.w	r6, [ip, r9]
 801f03c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f040:	441e      	add	r6, r3
 801f042:	3001      	adds	r0, #1
 801f044:	f100 808d 	bmi.w	801f162 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801f048:	4581      	cmp	r9, r0
 801f04a:	f340 808a 	ble.w	801f162 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801f04e:	2c00      	cmp	r4, #0
 801f050:	f000 8087 	beq.w	801f162 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801f054:	44e1      	add	r9, ip
 801f056:	f899 2001 	ldrb.w	r2, [r9, #1]
 801f05a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f05e:	4413      	add	r3, r2
 801f060:	b2a4      	uxth	r4, r4
 801f062:	f897 c002 	ldrb.w	ip, [r7, #2]
 801f066:	fa1f fe8e 	uxth.w	lr, lr
 801f06a:	9901      	ldr	r1, [sp, #4]
 801f06c:	fb04 fb0e 	mul.w	fp, r4, lr
 801f070:	0124      	lsls	r4, r4, #4
 801f072:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
 801f076:	f5c4 7980 	rsb	r9, r4, #256	@ 0x100
 801f07a:	eba4 040b 	sub.w	r4, r4, fp
 801f07e:	fa1f f08e 	uxth.w	r0, lr
 801f082:	b2a2      	uxth	r2, r4
 801f084:	78ac      	ldrb	r4, [r5, #2]
 801f086:	eba9 0900 	sub.w	r9, r9, r0
 801f08a:	fa1f fe88 	uxth.w	lr, r8
 801f08e:	4354      	muls	r4, r2
 801f090:	ea6f 0808 	mvn.w	r8, r8
 801f094:	fa1f f989 	uxth.w	r9, r9
 801f098:	fa5f f888 	uxtb.w	r8, r8
 801f09c:	fb09 440c 	mla	r4, r9, ip, r4
 801f0a0:	f896 c002 	ldrb.w	ip, [r6, #2]
 801f0a4:	fb1a fa08 	smulbb	sl, sl, r8
 801f0a8:	fb00 440c 	mla	r4, r0, ip, r4
 801f0ac:	f893 c002 	ldrb.w	ip, [r3, #2]
 801f0b0:	fb0b 4c0c 	mla	ip, fp, ip, r4
 801f0b4:	787c      	ldrb	r4, [r7, #1]
 801f0b6:	783f      	ldrb	r7, [r7, #0]
 801f0b8:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801f0bc:	fb0c ac0e 	mla	ip, ip, lr, sl
 801f0c0:	f895 a001 	ldrb.w	sl, [r5, #1]
 801f0c4:	782d      	ldrb	r5, [r5, #0]
 801f0c6:	fb02 fa0a 	mul.w	sl, r2, sl
 801f0ca:	fa1f fc8c 	uxth.w	ip, ip
 801f0ce:	436a      	muls	r2, r5
 801f0d0:	7835      	ldrb	r5, [r6, #0]
 801f0d2:	fb09 aa04 	mla	sl, r9, r4, sl
 801f0d6:	7874      	ldrb	r4, [r6, #1]
 801f0d8:	fb09 2207 	mla	r2, r9, r7, r2
 801f0dc:	fb00 aa04 	mla	sl, r0, r4, sl
 801f0e0:	785c      	ldrb	r4, [r3, #1]
 801f0e2:	fb00 2005 	mla	r0, r0, r5, r2
 801f0e6:	781b      	ldrb	r3, [r3, #0]
 801f0e8:	fb0b a404 	mla	r4, fp, r4, sl
 801f0ec:	fb11 fa08 	smulbb	sl, r1, r8
 801f0f0:	fb0b 0b03 	mla	fp, fp, r3, r0
 801f0f4:	9b02      	ldr	r3, [sp, #8]
 801f0f6:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801f0fa:	fb13 f808 	smulbb	r8, r3, r8
 801f0fe:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 801f102:	fb04 a40e 	mla	r4, r4, lr, sl
 801f106:	f10c 0301 	add.w	r3, ip, #1
 801f10a:	fb0b 8e0e 	mla	lr, fp, lr, r8
 801f10e:	b2a4      	uxth	r4, r4
 801f110:	fa1f fe8e 	uxth.w	lr, lr
 801f114:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801f118:	f104 0a01 	add.w	sl, r4, #1
 801f11c:	f40c 4378 	and.w	r3, ip, #63488	@ 0xf800
 801f120:	f10e 0c01 	add.w	ip, lr, #1
 801f124:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801f128:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801f12c:	0964      	lsrs	r4, r4, #5
 801f12e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801f132:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 801f136:	ea4c 0c03 	orr.w	ip, ip, r3
 801f13a:	9b03      	ldr	r3, [sp, #12]
 801f13c:	ea4c 0c04 	orr.w	ip, ip, r4
 801f140:	f8a3 c000 	strh.w	ip, [r3]
 801f144:	b007      	add	sp, #28
 801f146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f14a:	af05      	add	r7, sp, #20
 801f14c:	e756      	b.n	801effc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
 801f14e:	ad05      	add	r5, sp, #20
 801f150:	462f      	mov	r7, r5
 801f152:	e761      	b.n	801f018 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 801f154:	ad05      	add	r5, sp, #20
 801f156:	e75f      	b.n	801f018 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 801f158:	ae05      	add	r6, sp, #20
 801f15a:	e772      	b.n	801f042 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 801f15c:	ab05      	add	r3, sp, #20
 801f15e:	461e      	mov	r6, r3
 801f160:	e77e      	b.n	801f060 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
 801f162:	ab05      	add	r3, sp, #20
 801f164:	e77c      	b.n	801f060 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

0801f166 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f166:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f16a:	b095      	sub	sp, #84	@ 0x54
 801f16c:	9212      	str	r2, [sp, #72]	@ 0x48
 801f16e:	9309      	str	r3, [sp, #36]	@ 0x24
 801f170:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801f172:	f89d 309c 	ldrb.w	r3, [sp, #156]	@ 0x9c
 801f176:	9013      	str	r0, [sp, #76]	@ 0x4c
 801f178:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f17a:	6850      	ldr	r0, [r2, #4]
 801f17c:	910e      	str	r1, [sp, #56]	@ 0x38
 801f17e:	6812      	ldr	r2, [r2, #0]
 801f180:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	@ 0x90
 801f184:	fb00 1303 	mla	r3, r0, r3, r1
 801f188:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801f18c:	930a      	str	r3, [sp, #40]	@ 0x28
 801f18e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801f190:	681b      	ldr	r3, [r3, #0]
 801f192:	930d      	str	r3, [sp, #52]	@ 0x34
 801f194:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801f196:	685c      	ldr	r4, [r3, #4]
 801f198:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f19a:	3404      	adds	r4, #4
 801f19c:	43db      	mvns	r3, r3
 801f19e:	b2db      	uxtb	r3, r3
 801f1a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f1a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f1a4:	2b00      	cmp	r3, #0
 801f1a6:	dc03      	bgt.n	801f1b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801f1a8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801f1aa:	2b00      	cmp	r3, #0
 801f1ac:	f340 8255 	ble.w	801f65a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 801f1b0:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801f1b2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f1b6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f1ba:	1e48      	subs	r0, r1, #1
 801f1bc:	1e55      	subs	r5, r2, #1
 801f1be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f1c0:	2b00      	cmp	r3, #0
 801f1c2:	f340 80f9 	ble.w	801f3b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801f1c6:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 801f1c8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801f1ca:	1436      	asrs	r6, r6, #16
 801f1cc:	ea4f 4323 	mov.w	r3, r3, asr #16
 801f1d0:	d406      	bmi.n	801f1e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f1d2:	4286      	cmp	r6, r0
 801f1d4:	da04      	bge.n	801f1e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f1d6:	2b00      	cmp	r3, #0
 801f1d8:	db02      	blt.n	801f1e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f1da:	42ab      	cmp	r3, r5
 801f1dc:	f2c0 80ed 	blt.w	801f3ba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801f1e0:	3601      	adds	r6, #1
 801f1e2:	f100 80da 	bmi.w	801f39a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801f1e6:	42b1      	cmp	r1, r6
 801f1e8:	f2c0 80d7 	blt.w	801f39a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801f1ec:	3301      	adds	r3, #1
 801f1ee:	f100 80d4 	bmi.w	801f39a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801f1f2:	429a      	cmp	r2, r3
 801f1f4:	f2c0 80d1 	blt.w	801f39a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801f1f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f1fa:	9311      	str	r3, [sp, #68]	@ 0x44
 801f1fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f1fe:	930c      	str	r3, [sp, #48]	@ 0x30
 801f200:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801f202:	2b00      	cmp	r3, #0
 801f204:	f340 80fa 	ble.w	801f3fc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801f208:	9826      	ldr	r0, [sp, #152]	@ 0x98
 801f20a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801f20c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801f20e:	68c6      	ldr	r6, [r0, #12]
 801f210:	141d      	asrs	r5, r3, #16
 801f212:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 801f214:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801f218:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801f21a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801f21c:	1400      	asrs	r0, r0, #16
 801f21e:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801f222:	6892      	ldr	r2, [r2, #8]
 801f224:	f100 813e 	bmi.w	801f4a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801f228:	1e57      	subs	r7, r2, #1
 801f22a:	42b8      	cmp	r0, r7
 801f22c:	f280 813a 	bge.w	801f4a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801f230:	2d00      	cmp	r5, #0
 801f232:	f2c0 8137 	blt.w	801f4a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801f236:	1e77      	subs	r7, r6, #1
 801f238:	42bd      	cmp	r5, r7
 801f23a:	f280 8133 	bge.w	801f4a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801f23e:	b212      	sxth	r2, r2
 801f240:	fb05 0002 	mla	r0, r5, r2, r0
 801f244:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801f246:	f815 a000 	ldrb.w	sl, [r5, r0]
 801f24a:	182e      	adds	r6, r5, r0
 801f24c:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 801f250:	eb04 050a 	add.w	r5, r4, sl
 801f254:	2b00      	cmp	r3, #0
 801f256:	f000 8117 	beq.w	801f488 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801f25a:	f896 c001 	ldrb.w	ip, [r6, #1]
 801f25e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801f262:	44a4      	add	ip, r4
 801f264:	2900      	cmp	r1, #0
 801f266:	f000 8117 	beq.w	801f498 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801f26a:	18b0      	adds	r0, r6, r2
 801f26c:	5cb2      	ldrb	r2, [r6, r2]
 801f26e:	7840      	ldrb	r0, [r0, #1]
 801f270:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f274:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f278:	4422      	add	r2, r4
 801f27a:	4420      	add	r0, r4
 801f27c:	b29b      	uxth	r3, r3
 801f27e:	f89c 7002 	ldrb.w	r7, [ip, #2]
 801f282:	b289      	uxth	r1, r1
 801f284:	f895 b002 	ldrb.w	fp, [r5, #2]
 801f288:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801f28a:	fb03 f901 	mul.w	r9, r3, r1
 801f28e:	011b      	lsls	r3, r3, #4
 801f290:	f8b6 e000 	ldrh.w	lr, [r6]
 801f294:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801f298:	f5c3 7880 	rsb	r8, r3, #256	@ 0x100
 801f29c:	eba3 0309 	sub.w	r3, r3, r9
 801f2a0:	f8bd 603c 	ldrh.w	r6, [sp, #60]	@ 0x3c
 801f2a4:	b289      	uxth	r1, r1
 801f2a6:	f814 a00a 	ldrb.w	sl, [r4, sl]
 801f2aa:	b29b      	uxth	r3, r3
 801f2ac:	eba8 0801 	sub.w	r8, r8, r1
 801f2b0:	435f      	muls	r7, r3
 801f2b2:	fa1f f888 	uxth.w	r8, r8
 801f2b6:	9310      	str	r3, [sp, #64]	@ 0x40
 801f2b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f2ba:	fb08 770b 	mla	r7, r8, fp, r7
 801f2be:	f892 b002 	ldrb.w	fp, [r2, #2]
 801f2c2:	fb01 770b 	mla	r7, r1, fp, r7
 801f2c6:	f890 b002 	ldrb.w	fp, [r0, #2]
 801f2ca:	fb09 770b 	mla	r7, r9, fp, r7
 801f2ce:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 801f2d2:	f00b 0bf8 	and.w	fp, fp, #248	@ 0xf8
 801f2d6:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801f2da:	fb1b fb03 	smulbb	fp, fp, r3
 801f2de:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f2e0:	fb07 b706 	mla	r7, r7, r6, fp
 801f2e4:	f895 b001 	ldrb.w	fp, [r5, #1]
 801f2e8:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801f2ec:	f89c c000 	ldrb.w	ip, [ip]
 801f2f0:	b2bf      	uxth	r7, r7
 801f2f2:	435d      	muls	r5, r3
 801f2f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f2f6:	fb08 550b 	mla	r5, r8, fp, r5
 801f2fa:	f892 b001 	ldrb.w	fp, [r2, #1]
 801f2fe:	fb01 550b 	mla	r5, r1, fp, r5
 801f302:	f890 b001 	ldrb.w	fp, [r0, #1]
 801f306:	fb09 550b 	mla	r5, r9, fp, r5
 801f30a:	ea4f 0bee 	mov.w	fp, lr, asr #3
 801f30e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801f312:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 801f316:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801f31a:	fa5f fe8e 	uxtb.w	lr, lr
 801f31e:	fb1b fb03 	smulbb	fp, fp, r3
 801f322:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f324:	fb03 f30c 	mul.w	r3, r3, ip
 801f328:	f892 c000 	ldrb.w	ip, [r2]
 801f32c:	fb05 b506 	mla	r5, r5, r6, fp
 801f330:	fb08 330a 	mla	r3, r8, sl, r3
 801f334:	b2ad      	uxth	r5, r5
 801f336:	fb01 330c 	mla	r3, r1, ip, r3
 801f33a:	f890 c000 	ldrb.w	ip, [r0]
 801f33e:	f105 0b01 	add.w	fp, r5, #1
 801f342:	fb09 3c0c 	mla	ip, r9, ip, r3
 801f346:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f348:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 801f34c:	fb1e fe03 	smulbb	lr, lr, r3
 801f350:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801f354:	1c7b      	adds	r3, r7, #1
 801f356:	096d      	lsrs	r5, r5, #5
 801f358:	fb0c e606 	mla	r6, ip, r6, lr
 801f35c:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801f360:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801f364:	b2b6      	uxth	r6, r6
 801f366:	f407 4378 	and.w	r3, r7, #63488	@ 0xf800
 801f36a:	1c77      	adds	r7, r6, #1
 801f36c:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 801f370:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801f374:	431f      	orrs	r7, r3
 801f376:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f378:	433d      	orrs	r5, r7
 801f37a:	801d      	strh	r5, [r3, #0]
 801f37c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f37e:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801f380:	3302      	adds	r3, #2
 801f382:	930c      	str	r3, [sp, #48]	@ 0x30
 801f384:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801f386:	4413      	add	r3, r2
 801f388:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801f38a:	931f      	str	r3, [sp, #124]	@ 0x7c
 801f38c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801f38e:	4413      	add	r3, r2
 801f390:	9320      	str	r3, [sp, #128]	@ 0x80
 801f392:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801f394:	3b01      	subs	r3, #1
 801f396:	9311      	str	r3, [sp, #68]	@ 0x44
 801f398:	e732      	b.n	801f200 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801f39a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801f39c:	9e21      	ldr	r6, [sp, #132]	@ 0x84
 801f39e:	4433      	add	r3, r6
 801f3a0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801f3a2:	931f      	str	r3, [sp, #124]	@ 0x7c
 801f3a4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801f3a6:	4433      	add	r3, r6
 801f3a8:	9320      	str	r3, [sp, #128]	@ 0x80
 801f3aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f3ac:	3b01      	subs	r3, #1
 801f3ae:	9309      	str	r3, [sp, #36]	@ 0x24
 801f3b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f3b2:	3302      	adds	r3, #2
 801f3b4:	930a      	str	r3, [sp, #40]	@ 0x28
 801f3b6:	e702      	b.n	801f1be <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801f3b8:	d027      	beq.n	801f40a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 801f3ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f3bc:	9821      	ldr	r0, [sp, #132]	@ 0x84
 801f3be:	3b01      	subs	r3, #1
 801f3c0:	9d1f      	ldr	r5, [sp, #124]	@ 0x7c
 801f3c2:	fb00 5003 	mla	r0, r0, r3, r5
 801f3c6:	1400      	asrs	r0, r0, #16
 801f3c8:	f53f af16 	bmi.w	801f1f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801f3cc:	3901      	subs	r1, #1
 801f3ce:	4288      	cmp	r0, r1
 801f3d0:	f6bf af12 	bge.w	801f1f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801f3d4:	9922      	ldr	r1, [sp, #136]	@ 0x88
 801f3d6:	9820      	ldr	r0, [sp, #128]	@ 0x80
 801f3d8:	fb01 0303 	mla	r3, r1, r3, r0
 801f3dc:	141b      	asrs	r3, r3, #16
 801f3de:	f53f af0b 	bmi.w	801f1f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801f3e2:	3a01      	subs	r2, #1
 801f3e4:	4293      	cmp	r3, r2
 801f3e6:	f6bf af07 	bge.w	801f1f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801f3ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f3ec:	f8bd a03c 	ldrh.w	sl, [sp, #60]	@ 0x3c
 801f3f0:	9311      	str	r3, [sp, #68]	@ 0x44
 801f3f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f3f4:	930c      	str	r3, [sp, #48]	@ 0x30
 801f3f6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801f3f8:	2b00      	cmp	r3, #0
 801f3fa:	dc70      	bgt.n	801f4de <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 801f3fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f3fe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f400:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f404:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801f408:	930a      	str	r3, [sp, #40]	@ 0x28
 801f40a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f40c:	2b00      	cmp	r3, #0
 801f40e:	f340 8124 	ble.w	801f65a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 801f412:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f416:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801f418:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f41c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f420:	eef0 6a62 	vmov.f32	s13, s5
 801f424:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f428:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f42c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f430:	edcd 6a1f 	vstr	s13, [sp, #124]	@ 0x7c
 801f434:	eef0 6a43 	vmov.f32	s13, s6
 801f438:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f43c:	edcd 6a20 	vstr	s13, [sp, #128]	@ 0x80
 801f440:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f444:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f448:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f44c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f450:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f454:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f458:	ee12 2a90 	vmov	r2, s5
 801f45c:	eef0 2a47 	vmov.f32	s5, s14
 801f460:	fb92 f3f3 	sdiv	r3, r2, r3
 801f464:	ee13 2a10 	vmov	r2, s6
 801f468:	9321      	str	r3, [sp, #132]	@ 0x84
 801f46a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801f46c:	eeb0 3a67 	vmov.f32	s6, s15
 801f470:	fb92 f3f3 	sdiv	r3, r2, r3
 801f474:	9322      	str	r3, [sp, #136]	@ 0x88
 801f476:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f478:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801f47a:	3b01      	subs	r3, #1
 801f47c:	930e      	str	r3, [sp, #56]	@ 0x38
 801f47e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801f480:	bf08      	it	eq
 801f482:	4613      	moveq	r3, r2
 801f484:	9309      	str	r3, [sp, #36]	@ 0x24
 801f486:	e68c      	b.n	801f1a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801f488:	b149      	cbz	r1, 801f49e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 801f48a:	5cb2      	ldrb	r2, [r6, r2]
 801f48c:	4628      	mov	r0, r5
 801f48e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f492:	4422      	add	r2, r4
 801f494:	46ac      	mov	ip, r5
 801f496:	e6f1      	b.n	801f27c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801f498:	4628      	mov	r0, r5
 801f49a:	462a      	mov	r2, r5
 801f49c:	e6ee      	b.n	801f27c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801f49e:	4628      	mov	r0, r5
 801f4a0:	462a      	mov	r2, r5
 801f4a2:	e7f7      	b.n	801f494 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 801f4a4:	1c47      	adds	r7, r0, #1
 801f4a6:	f53f af69 	bmi.w	801f37c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801f4aa:	42ba      	cmp	r2, r7
 801f4ac:	f6ff af66 	blt.w	801f37c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801f4b0:	1c6f      	adds	r7, r5, #1
 801f4b2:	f53f af63 	bmi.w	801f37c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801f4b6:	42be      	cmp	r6, r7
 801f4b8:	f6ff af60 	blt.w	801f37c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801f4bc:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801f4be:	b236      	sxth	r6, r6
 801f4c0:	b212      	sxth	r2, r2
 801f4c2:	9002      	str	r0, [sp, #8]
 801f4c4:	9601      	str	r6, [sp, #4]
 801f4c6:	9200      	str	r2, [sp, #0]
 801f4c8:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801f4ca:	e9cd 1705 	strd	r1, r7, [sp, #20]
 801f4ce:	e9cd 5303 	strd	r5, r3, [sp, #12]
 801f4d2:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	@ 0x30
 801f4d6:	4623      	mov	r3, r4
 801f4d8:	f7ff fd59 	bl	801ef8e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 801f4dc:	e74e      	b.n	801f37c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801f4de:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801f4e0:	9820      	ldr	r0, [sp, #128]	@ 0x80
 801f4e2:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801f4e6:	9d1f      	ldr	r5, [sp, #124]	@ 0x7c
 801f4e8:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801f4ea:	1400      	asrs	r0, r0, #16
 801f4ec:	142d      	asrs	r5, r5, #16
 801f4ee:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801f4f0:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801f4f4:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801f4f8:	fb02 5000 	mla	r0, r2, r0, r5
 801f4fc:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801f4fe:	f815 9000 	ldrb.w	r9, [r5, r0]
 801f502:	182e      	adds	r6, r5, r0
 801f504:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801f508:	eb04 0509 	add.w	r5, r4, r9
 801f50c:	2b00      	cmp	r3, #0
 801f50e:	f000 8096 	beq.w	801f63e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 801f512:	7877      	ldrb	r7, [r6, #1]
 801f514:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801f518:	4427      	add	r7, r4
 801f51a:	2900      	cmp	r1, #0
 801f51c:	f000 8097 	beq.w	801f64e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
 801f520:	18b0      	adds	r0, r6, r2
 801f522:	5cb2      	ldrb	r2, [r6, r2]
 801f524:	7840      	ldrb	r0, [r0, #1]
 801f526:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f52a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f52e:	4422      	add	r2, r4
 801f530:	4420      	add	r0, r4
 801f532:	b29b      	uxth	r3, r3
 801f534:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801f536:	b289      	uxth	r1, r1
 801f538:	f895 b002 	ldrb.w	fp, [r5, #2]
 801f53c:	f8b6 c000 	ldrh.w	ip, [r6]
 801f540:	fb03 f801 	mul.w	r8, r3, r1
 801f544:	011b      	lsls	r3, r3, #4
 801f546:	78be      	ldrb	r6, [r7, #2]
 801f548:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801f54c:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 801f550:	eba3 0308 	sub.w	r3, r3, r8
 801f554:	f814 9009 	ldrb.w	r9, [r4, r9]
 801f558:	b289      	uxth	r1, r1
 801f55a:	b29b      	uxth	r3, r3
 801f55c:	ebae 0e01 	sub.w	lr, lr, r1
 801f560:	435e      	muls	r6, r3
 801f562:	fa1f fe8e 	uxth.w	lr, lr
 801f566:	9310      	str	r3, [sp, #64]	@ 0x40
 801f568:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f56a:	fb0e 660b 	mla	r6, lr, fp, r6
 801f56e:	f892 b002 	ldrb.w	fp, [r2, #2]
 801f572:	fb01 660b 	mla	r6, r1, fp, r6
 801f576:	f890 b002 	ldrb.w	fp, [r0, #2]
 801f57a:	fb08 660b 	mla	r6, r8, fp, r6
 801f57e:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 801f582:	f00b 0bf8 	and.w	fp, fp, #248	@ 0xf8
 801f586:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801f58a:	fb1b fb03 	smulbb	fp, fp, r3
 801f58e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f590:	fb06 b60a 	mla	r6, r6, sl, fp
 801f594:	f895 b001 	ldrb.w	fp, [r5, #1]
 801f598:	787d      	ldrb	r5, [r7, #1]
 801f59a:	783f      	ldrb	r7, [r7, #0]
 801f59c:	b2b6      	uxth	r6, r6
 801f59e:	435d      	muls	r5, r3
 801f5a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f5a2:	fb0e 550b 	mla	r5, lr, fp, r5
 801f5a6:	f892 b001 	ldrb.w	fp, [r2, #1]
 801f5aa:	fb01 550b 	mla	r5, r1, fp, r5
 801f5ae:	f890 b001 	ldrb.w	fp, [r0, #1]
 801f5b2:	fb08 550b 	mla	r5, r8, fp, r5
 801f5b6:	ea4f 0bec 	mov.w	fp, ip, asr #3
 801f5ba:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801f5be:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 801f5c2:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801f5c6:	fa5f fc8c 	uxtb.w	ip, ip
 801f5ca:	fb1b fb03 	smulbb	fp, fp, r3
 801f5ce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f5d0:	437b      	muls	r3, r7
 801f5d2:	7817      	ldrb	r7, [r2, #0]
 801f5d4:	fb05 b50a 	mla	r5, r5, sl, fp
 801f5d8:	fb0e 3309 	mla	r3, lr, r9, r3
 801f5dc:	b2ad      	uxth	r5, r5
 801f5de:	fb01 3307 	mla	r3, r1, r7, r3
 801f5e2:	7807      	ldrb	r7, [r0, #0]
 801f5e4:	f105 0b01 	add.w	fp, r5, #1
 801f5e8:	fb08 3707 	mla	r7, r8, r7, r3
 801f5ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f5ee:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 801f5f2:	fb1c fc03 	smulbb	ip, ip, r3
 801f5f6:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801f5fa:	1c73      	adds	r3, r6, #1
 801f5fc:	096d      	lsrs	r5, r5, #5
 801f5fe:	fb07 c70a 	mla	r7, r7, sl, ip
 801f602:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801f606:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801f60a:	b2bf      	uxth	r7, r7
 801f60c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f60e:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 801f612:	1c7a      	adds	r2, r7, #1
 801f614:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 801f618:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801f61c:	4316      	orrs	r6, r2
 801f61e:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801f620:	432e      	orrs	r6, r5
 801f622:	f823 6b02 	strh.w	r6, [r3], #2
 801f626:	930c      	str	r3, [sp, #48]	@ 0x30
 801f628:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801f62a:	4413      	add	r3, r2
 801f62c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801f62e:	931f      	str	r3, [sp, #124]	@ 0x7c
 801f630:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801f632:	4413      	add	r3, r2
 801f634:	9320      	str	r3, [sp, #128]	@ 0x80
 801f636:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801f638:	3b01      	subs	r3, #1
 801f63a:	9311      	str	r3, [sp, #68]	@ 0x44
 801f63c:	e6db      	b.n	801f3f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 801f63e:	b149      	cbz	r1, 801f654 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 801f640:	5cb2      	ldrb	r2, [r6, r2]
 801f642:	4628      	mov	r0, r5
 801f644:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f648:	4422      	add	r2, r4
 801f64a:	462f      	mov	r7, r5
 801f64c:	e771      	b.n	801f532 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 801f64e:	4628      	mov	r0, r5
 801f650:	462a      	mov	r2, r5
 801f652:	e76e      	b.n	801f532 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 801f654:	4628      	mov	r0, r5
 801f656:	462a      	mov	r2, r5
 801f658:	e7f7      	b.n	801f64a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 801f65a:	b015      	add	sp, #84	@ 0x54
 801f65c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f660 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 801f660:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f664:	880f      	ldrh	r7, [r1, #0]
 801f666:	f9bd e030 	ldrsh.w	lr, [sp, #48]	@ 0x30
 801f66a:	023c      	lsls	r4, r7, #8
 801f66c:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 801f670:	f89d 0040 	ldrb.w	r0, [sp, #64]	@ 0x40
 801f674:	f404 0b78 	and.w	fp, r4, #16252928	@ 0xf80000
 801f678:	017c      	lsls	r4, r7, #5
 801f67a:	00ff      	lsls	r7, r7, #3
 801f67c:	f89d 6044 	ldrb.w	r6, [sp, #68]	@ 0x44
 801f680:	f404 447c 	and.w	r4, r4, #64512	@ 0xfc00
 801f684:	b2ff      	uxtb	r7, r7
 801f686:	ea4b 0404 	orr.w	r4, fp, r4
 801f68a:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	@ 0x38
 801f68e:	4327      	orrs	r7, r4
 801f690:	fb05 ca0e 	mla	sl, r5, lr, ip
 801f694:	2d00      	cmp	r5, #0
 801f696:	9701      	str	r7, [sp, #4]
 801f698:	eb02 080a 	add.w	r8, r2, sl
 801f69c:	db7e      	blt.n	801f79c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 801f69e:	45a9      	cmp	r9, r5
 801f6a0:	dd7c      	ble.n	801f79c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 801f6a2:	f1bc 0f00 	cmp.w	ip, #0
 801f6a6:	db77      	blt.n	801f798 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 801f6a8:	45e6      	cmp	lr, ip
 801f6aa:	dd75      	ble.n	801f798 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 801f6ac:	f812 700a 	ldrb.w	r7, [r2, sl]
 801f6b0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801f6b4:	441f      	add	r7, r3
 801f6b6:	f11c 0201 	adds.w	r2, ip, #1
 801f6ba:	d472      	bmi.n	801f7a2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 801f6bc:	4596      	cmp	lr, r2
 801f6be:	dd70      	ble.n	801f7a2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 801f6c0:	2800      	cmp	r0, #0
 801f6c2:	d06e      	beq.n	801f7a2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 801f6c4:	f898 4001 	ldrb.w	r4, [r8, #1]
 801f6c8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f6cc:	441c      	add	r4, r3
 801f6ce:	3501      	adds	r5, #1
 801f6d0:	d46b      	bmi.n	801f7aa <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 801f6d2:	45a9      	cmp	r9, r5
 801f6d4:	dd69      	ble.n	801f7aa <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 801f6d6:	2e00      	cmp	r6, #0
 801f6d8:	d067      	beq.n	801f7aa <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 801f6da:	f1bc 0f00 	cmp.w	ip, #0
 801f6de:	db62      	blt.n	801f7a6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 801f6e0:	45e6      	cmp	lr, ip
 801f6e2:	dd60      	ble.n	801f7a6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 801f6e4:	f818 500e 	ldrb.w	r5, [r8, lr]
 801f6e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f6ec:	441d      	add	r5, r3
 801f6ee:	f11c 0201 	adds.w	r2, ip, #1
 801f6f2:	d45d      	bmi.n	801f7b0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 801f6f4:	4596      	cmp	lr, r2
 801f6f6:	dd5b      	ble.n	801f7b0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 801f6f8:	2800      	cmp	r0, #0
 801f6fa:	d059      	beq.n	801f7b0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 801f6fc:	44c6      	add	lr, r8
 801f6fe:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801f702:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f706:	4413      	add	r3, r2
 801f708:	b280      	uxth	r0, r0
 801f70a:	f897 e002 	ldrb.w	lr, [r7, #2]
 801f70e:	b2b2      	uxth	r2, r6
 801f710:	f897 9000 	ldrb.w	r9, [r7]
 801f714:	787f      	ldrb	r7, [r7, #1]
 801f716:	fb00 f602 	mul.w	r6, r0, r2
 801f71a:	0100      	lsls	r0, r0, #4
 801f71c:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 801f720:	f5c0 7880 	rsb	r8, r0, #256	@ 0x100
 801f724:	1b80      	subs	r0, r0, r6
 801f726:	fa1f fc82 	uxth.w	ip, r2
 801f72a:	b282      	uxth	r2, r0
 801f72c:	78a0      	ldrb	r0, [r4, #2]
 801f72e:	eba8 080c 	sub.w	r8, r8, ip
 801f732:	4350      	muls	r0, r2
 801f734:	fa1f f888 	uxth.w	r8, r8
 801f738:	fb08 0e0e 	mla	lr, r8, lr, r0
 801f73c:	78a8      	ldrb	r0, [r5, #2]
 801f73e:	fb0c e000 	mla	r0, ip, r0, lr
 801f742:	f893 e002 	ldrb.w	lr, [r3, #2]
 801f746:	fb06 0e0e 	mla	lr, r6, lr, r0
 801f74a:	f40e 4078 	and.w	r0, lr, #63488	@ 0xf800
 801f74e:	f894 e000 	ldrb.w	lr, [r4]
 801f752:	fb02 fe0e 	mul.w	lr, r2, lr
 801f756:	fb08 e909 	mla	r9, r8, r9, lr
 801f75a:	f895 e000 	ldrb.w	lr, [r5]
 801f75e:	fb0c 990e 	mla	r9, ip, lr, r9
 801f762:	f893 e000 	ldrb.w	lr, [r3]
 801f766:	785b      	ldrb	r3, [r3, #1]
 801f768:	fb06 9e0e 	mla	lr, r6, lr, r9
 801f76c:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801f770:	ea4e 0e00 	orr.w	lr, lr, r0
 801f774:	7860      	ldrb	r0, [r4, #1]
 801f776:	4350      	muls	r0, r2
 801f778:	786a      	ldrb	r2, [r5, #1]
 801f77a:	fb08 0007 	mla	r0, r8, r7, r0
 801f77e:	fb0c 0202 	mla	r2, ip, r2, r0
 801f782:	fb06 2303 	mla	r3, r6, r3, r2
 801f786:	095b      	lsrs	r3, r3, #5
 801f788:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801f78c:	ea4e 0303 	orr.w	r3, lr, r3
 801f790:	800b      	strh	r3, [r1, #0]
 801f792:	b003      	add	sp, #12
 801f794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f798:	af01      	add	r7, sp, #4
 801f79a:	e78c      	b.n	801f6b6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
 801f79c:	ac01      	add	r4, sp, #4
 801f79e:	4627      	mov	r7, r4
 801f7a0:	e795      	b.n	801f6ce <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 801f7a2:	ac01      	add	r4, sp, #4
 801f7a4:	e793      	b.n	801f6ce <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 801f7a6:	ad01      	add	r5, sp, #4
 801f7a8:	e7a1      	b.n	801f6ee <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
 801f7aa:	ab01      	add	r3, sp, #4
 801f7ac:	461d      	mov	r5, r3
 801f7ae:	e7ab      	b.n	801f708 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
 801f7b0:	ab01      	add	r3, sp, #4
 801f7b2:	e7a9      	b.n	801f708 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

0801f7b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f7b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f7b8:	b08f      	sub	sp, #60	@ 0x3c
 801f7ba:	920c      	str	r2, [sp, #48]	@ 0x30
 801f7bc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801f7be:	900d      	str	r0, [sp, #52]	@ 0x34
 801f7c0:	910a      	str	r1, [sp, #40]	@ 0x28
 801f7c2:	6850      	ldr	r0, [r2, #4]
 801f7c4:	9306      	str	r3, [sp, #24]
 801f7c6:	6812      	ldr	r2, [r2, #0]
 801f7c8:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	@ 0x78
 801f7cc:	e9dd b519 	ldrd	fp, r5, [sp, #100]	@ 0x64
 801f7d0:	fb00 1303 	mla	r3, r0, r3, r1
 801f7d4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801f7d8:	9307      	str	r3, [sp, #28]
 801f7da:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801f7dc:	681b      	ldr	r3, [r3, #0]
 801f7de:	9308      	str	r3, [sp, #32]
 801f7e0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801f7e2:	685c      	ldr	r4, [r3, #4]
 801f7e4:	3404      	adds	r4, #4
 801f7e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f7e8:	2b00      	cmp	r3, #0
 801f7ea:	dc03      	bgt.n	801f7f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801f7ec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f7ee:	2b00      	cmp	r3, #0
 801f7f0:	f340 81d5 	ble.w	801fb9e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 801f7f4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801f7f6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f7fa:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f7fe:	1e48      	subs	r0, r1, #1
 801f800:	1e56      	subs	r6, r2, #1
 801f802:	9b06      	ldr	r3, [sp, #24]
 801f804:	2b00      	cmp	r3, #0
 801f806:	f340 80b6 	ble.w	801f976 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801f80a:	ea5f 472b 	movs.w	r7, fp, asr #16
 801f80e:	ea4f 4325 	mov.w	r3, r5, asr #16
 801f812:	d406      	bmi.n	801f822 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801f814:	4287      	cmp	r7, r0
 801f816:	da04      	bge.n	801f822 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801f818:	2b00      	cmp	r3, #0
 801f81a:	db02      	blt.n	801f822 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801f81c:	42b3      	cmp	r3, r6
 801f81e:	f2c0 80ab 	blt.w	801f978 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 801f822:	3701      	adds	r7, #1
 801f824:	f100 809c 	bmi.w	801f960 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801f828:	42b9      	cmp	r1, r7
 801f82a:	f2c0 8099 	blt.w	801f960 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801f82e:	3301      	adds	r3, #1
 801f830:	f100 8096 	bmi.w	801f960 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801f834:	429a      	cmp	r2, r3
 801f836:	f2c0 8093 	blt.w	801f960 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801f83a:	9b06      	ldr	r3, [sp, #24]
 801f83c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f83e:	9b07      	ldr	r3, [sp, #28]
 801f840:	9309      	str	r3, [sp, #36]	@ 0x24
 801f842:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f844:	2b00      	cmp	r3, #0
 801f846:	f340 80b4 	ble.w	801f9b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801f84a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 801f84c:	142e      	asrs	r6, r5, #16
 801f84e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801f850:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801f854:	68c7      	ldr	r7, [r0, #12]
 801f856:	ea5f 402b 	movs.w	r0, fp, asr #16
 801f85a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801f85e:	6892      	ldr	r2, [r2, #8]
 801f860:	f100 80fb 	bmi.w	801fa5a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801f864:	f102 3cff 	add.w	ip, r2, #4294967295
 801f868:	4560      	cmp	r0, ip
 801f86a:	f280 80f6 	bge.w	801fa5a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801f86e:	2e00      	cmp	r6, #0
 801f870:	f2c0 80f3 	blt.w	801fa5a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801f874:	f107 3cff 	add.w	ip, r7, #4294967295
 801f878:	4566      	cmp	r6, ip
 801f87a:	f280 80ee 	bge.w	801fa5a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801f87e:	b212      	sxth	r2, r2
 801f880:	fb06 0002 	mla	r0, r6, r2, r0
 801f884:	9e08      	ldr	r6, [sp, #32]
 801f886:	1837      	adds	r7, r6, r0
 801f888:	5c30      	ldrb	r0, [r6, r0]
 801f88a:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 801f88e:	eb04 0c08 	add.w	ip, r4, r8
 801f892:	2b00      	cmp	r3, #0
 801f894:	f000 80d3 	beq.w	801fa3e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801f898:	787e      	ldrb	r6, [r7, #1]
 801f89a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f89e:	4426      	add	r6, r4
 801f8a0:	2900      	cmp	r1, #0
 801f8a2:	f000 80d4 	beq.w	801fa4e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801f8a6:	18b8      	adds	r0, r7, r2
 801f8a8:	5cba      	ldrb	r2, [r7, r2]
 801f8aa:	7840      	ldrb	r0, [r0, #1]
 801f8ac:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f8b0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f8b4:	4422      	add	r2, r4
 801f8b6:	4420      	add	r0, r4
 801f8b8:	b29b      	uxth	r3, r3
 801f8ba:	78b7      	ldrb	r7, [r6, #2]
 801f8bc:	b289      	uxth	r1, r1
 801f8be:	f89c a002 	ldrb.w	sl, [ip, #2]
 801f8c2:	f89c c001 	ldrb.w	ip, [ip, #1]
 801f8c6:	fb03 f901 	mul.w	r9, r3, r1
 801f8ca:	011b      	lsls	r3, r3, #4
 801f8cc:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801f8d0:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 801f8d4:	eba3 0309 	sub.w	r3, r3, r9
 801f8d8:	b289      	uxth	r1, r1
 801f8da:	b29b      	uxth	r3, r3
 801f8dc:	ebae 0e01 	sub.w	lr, lr, r1
 801f8e0:	435f      	muls	r7, r3
 801f8e2:	fa1f fe8e 	uxth.w	lr, lr
 801f8e6:	fb0e 770a 	mla	r7, lr, sl, r7
 801f8ea:	f892 a002 	ldrb.w	sl, [r2, #2]
 801f8ee:	fb01 770a 	mla	r7, r1, sl, r7
 801f8f2:	f890 a002 	ldrb.w	sl, [r0, #2]
 801f8f6:	fb09 7a0a 	mla	sl, r9, sl, r7
 801f8fa:	f814 7008 	ldrb.w	r7, [r4, r8]
 801f8fe:	f896 8000 	ldrb.w	r8, [r6]
 801f902:	7876      	ldrb	r6, [r6, #1]
 801f904:	f40a 4a78 	and.w	sl, sl, #63488	@ 0xf800
 801f908:	fb03 f808 	mul.w	r8, r3, r8
 801f90c:	4373      	muls	r3, r6
 801f90e:	fb0e 8807 	mla	r8, lr, r7, r8
 801f912:	7817      	ldrb	r7, [r2, #0]
 801f914:	fb0e 330c 	mla	r3, lr, ip, r3
 801f918:	fb01 8807 	mla	r8, r1, r7, r8
 801f91c:	7807      	ldrb	r7, [r0, #0]
 801f91e:	fb09 8707 	mla	r7, r9, r7, r8
 801f922:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801f926:	ea47 070a 	orr.w	r7, r7, sl
 801f92a:	f892 a001 	ldrb.w	sl, [r2, #1]
 801f92e:	fb01 310a 	mla	r1, r1, sl, r3
 801f932:	f890 a001 	ldrb.w	sl, [r0, #1]
 801f936:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f938:	fb09 1a0a 	mla	sl, r9, sl, r1
 801f93c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f940:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801f944:	ea47 070a 	orr.w	r7, r7, sl
 801f948:	801f      	strh	r7, [r3, #0]
 801f94a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f94c:	3302      	adds	r3, #2
 801f94e:	9309      	str	r3, [sp, #36]	@ 0x24
 801f950:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801f952:	449b      	add	fp, r3
 801f954:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801f956:	441d      	add	r5, r3
 801f958:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f95a:	3b01      	subs	r3, #1
 801f95c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f95e:	e770      	b.n	801f842 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801f960:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801f962:	449b      	add	fp, r3
 801f964:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801f966:	441d      	add	r5, r3
 801f968:	9b06      	ldr	r3, [sp, #24]
 801f96a:	3b01      	subs	r3, #1
 801f96c:	9306      	str	r3, [sp, #24]
 801f96e:	9b07      	ldr	r3, [sp, #28]
 801f970:	3302      	adds	r3, #2
 801f972:	9307      	str	r3, [sp, #28]
 801f974:	e745      	b.n	801f802 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801f976:	d023      	beq.n	801f9c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801f978:	9b06      	ldr	r3, [sp, #24]
 801f97a:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 801f97c:	3b01      	subs	r3, #1
 801f97e:	fb00 b003 	mla	r0, r0, r3, fp
 801f982:	1400      	asrs	r0, r0, #16
 801f984:	f53f af59 	bmi.w	801f83a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801f988:	3901      	subs	r1, #1
 801f98a:	4288      	cmp	r0, r1
 801f98c:	f6bf af55 	bge.w	801f83a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801f990:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801f992:	fb01 5303 	mla	r3, r1, r3, r5
 801f996:	141b      	asrs	r3, r3, #16
 801f998:	f53f af4f 	bmi.w	801f83a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801f99c:	3a01      	subs	r2, #1
 801f99e:	4293      	cmp	r3, r2
 801f9a0:	f6bf af4b 	bge.w	801f83a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801f9a4:	9b06      	ldr	r3, [sp, #24]
 801f9a6:	9309      	str	r3, [sp, #36]	@ 0x24
 801f9a8:	9b07      	ldr	r3, [sp, #28]
 801f9aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f9ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f9ae:	2b00      	cmp	r3, #0
 801f9b0:	dc70      	bgt.n	801fa94 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801f9b2:	9b06      	ldr	r3, [sp, #24]
 801f9b4:	9a07      	ldr	r2, [sp, #28]
 801f9b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f9ba:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801f9be:	9307      	str	r3, [sp, #28]
 801f9c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f9c2:	2b00      	cmp	r3, #0
 801f9c4:	f340 80eb 	ble.w	801fb9e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 801f9c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f9cc:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801f9ce:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f9d2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f9d6:	eef0 6a62 	vmov.f32	s13, s5
 801f9da:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f9de:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f9e2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f9e6:	ee16 ba90 	vmov	fp, s13
 801f9ea:	eef0 6a43 	vmov.f32	s13, s6
 801f9ee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f9f2:	ee16 5a90 	vmov	r5, s13
 801f9f6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f9fa:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f9fe:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fa02:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fa06:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fa0a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fa0e:	ee12 2a90 	vmov	r2, s5
 801fa12:	eef0 2a47 	vmov.f32	s5, s14
 801fa16:	fb92 f3f3 	sdiv	r3, r2, r3
 801fa1a:	ee13 2a10 	vmov	r2, s6
 801fa1e:	931b      	str	r3, [sp, #108]	@ 0x6c
 801fa20:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801fa22:	eeb0 3a67 	vmov.f32	s6, s15
 801fa26:	fb92 f3f3 	sdiv	r3, r2, r3
 801fa2a:	931c      	str	r3, [sp, #112]	@ 0x70
 801fa2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801fa2e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801fa30:	3b01      	subs	r3, #1
 801fa32:	930a      	str	r3, [sp, #40]	@ 0x28
 801fa34:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801fa36:	bf08      	it	eq
 801fa38:	4613      	moveq	r3, r2
 801fa3a:	9306      	str	r3, [sp, #24]
 801fa3c:	e6d3      	b.n	801f7e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801fa3e:	b149      	cbz	r1, 801fa54 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 801fa40:	5cba      	ldrb	r2, [r7, r2]
 801fa42:	4660      	mov	r0, ip
 801fa44:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fa48:	4422      	add	r2, r4
 801fa4a:	4666      	mov	r6, ip
 801fa4c:	e734      	b.n	801f8b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801fa4e:	4660      	mov	r0, ip
 801fa50:	4662      	mov	r2, ip
 801fa52:	e731      	b.n	801f8b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801fa54:	4660      	mov	r0, ip
 801fa56:	4662      	mov	r2, ip
 801fa58:	e7f7      	b.n	801fa4a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801fa5a:	f110 0c01 	adds.w	ip, r0, #1
 801fa5e:	f53f af74 	bmi.w	801f94a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801fa62:	4562      	cmp	r2, ip
 801fa64:	f6ff af71 	blt.w	801f94a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801fa68:	f116 0c01 	adds.w	ip, r6, #1
 801fa6c:	f53f af6d 	bmi.w	801f94a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801fa70:	4567      	cmp	r7, ip
 801fa72:	f6ff af6a 	blt.w	801f94a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801fa76:	b23f      	sxth	r7, r7
 801fa78:	b212      	sxth	r2, r2
 801fa7a:	9701      	str	r7, [sp, #4]
 801fa7c:	9200      	str	r2, [sp, #0]
 801fa7e:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801fa82:	e9cd 0602 	strd	r0, r6, [sp, #8]
 801fa86:	4623      	mov	r3, r4
 801fa88:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801fa8a:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801fa8e:	f7ff fde7 	bl	801f660 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 801fa92:	e75a      	b.n	801f94a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801fa94:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801fa96:	ea4f 462b 	mov.w	r6, fp, asr #16
 801fa9a:	1428      	asrs	r0, r5, #16
 801fa9c:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801faa0:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801faa4:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801faa8:	fb02 6000 	mla	r0, r2, r0, r6
 801faac:	9e08      	ldr	r6, [sp, #32]
 801faae:	f816 8000 	ldrb.w	r8, [r6, r0]
 801fab2:	1837      	adds	r7, r6, r0
 801fab4:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801fab8:	eb04 0c08 	add.w	ip, r4, r8
 801fabc:	2b00      	cmp	r3, #0
 801fabe:	d060      	beq.n	801fb82 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 801fac0:	787e      	ldrb	r6, [r7, #1]
 801fac2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801fac6:	4426      	add	r6, r4
 801fac8:	2900      	cmp	r1, #0
 801faca:	d062      	beq.n	801fb92 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 801facc:	18b8      	adds	r0, r7, r2
 801face:	5cba      	ldrb	r2, [r7, r2]
 801fad0:	7840      	ldrb	r0, [r0, #1]
 801fad2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fad6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801fada:	4422      	add	r2, r4
 801fadc:	4420      	add	r0, r4
 801fade:	b29b      	uxth	r3, r3
 801fae0:	78b7      	ldrb	r7, [r6, #2]
 801fae2:	b289      	uxth	r1, r1
 801fae4:	f89c a002 	ldrb.w	sl, [ip, #2]
 801fae8:	f89c c001 	ldrb.w	ip, [ip, #1]
 801faec:	fb03 f901 	mul.w	r9, r3, r1
 801faf0:	011b      	lsls	r3, r3, #4
 801faf2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801faf6:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 801fafa:	eba3 0309 	sub.w	r3, r3, r9
 801fafe:	b289      	uxth	r1, r1
 801fb00:	b29b      	uxth	r3, r3
 801fb02:	ebae 0e01 	sub.w	lr, lr, r1
 801fb06:	435f      	muls	r7, r3
 801fb08:	fa1f fe8e 	uxth.w	lr, lr
 801fb0c:	fb0e 770a 	mla	r7, lr, sl, r7
 801fb10:	f892 a002 	ldrb.w	sl, [r2, #2]
 801fb14:	fb01 770a 	mla	r7, r1, sl, r7
 801fb18:	f890 a002 	ldrb.w	sl, [r0, #2]
 801fb1c:	fb09 7a0a 	mla	sl, r9, sl, r7
 801fb20:	f814 7008 	ldrb.w	r7, [r4, r8]
 801fb24:	f896 8000 	ldrb.w	r8, [r6]
 801fb28:	7876      	ldrb	r6, [r6, #1]
 801fb2a:	f40a 4a78 	and.w	sl, sl, #63488	@ 0xf800
 801fb2e:	fb03 f808 	mul.w	r8, r3, r8
 801fb32:	4373      	muls	r3, r6
 801fb34:	7856      	ldrb	r6, [r2, #1]
 801fb36:	fb0e 8807 	mla	r8, lr, r7, r8
 801fb3a:	7817      	ldrb	r7, [r2, #0]
 801fb3c:	fb0e 330c 	mla	r3, lr, ip, r3
 801fb40:	fb01 8807 	mla	r8, r1, r7, r8
 801fb44:	7807      	ldrb	r7, [r0, #0]
 801fb46:	fb01 3306 	mla	r3, r1, r6, r3
 801fb4a:	fb09 8707 	mla	r7, r9, r7, r8
 801fb4e:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801fb52:	ea47 070a 	orr.w	r7, r7, sl
 801fb56:	f890 a001 	ldrb.w	sl, [r0, #1]
 801fb5a:	fb09 3a0a 	mla	sl, r9, sl, r3
 801fb5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fb60:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801fb64:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801fb68:	ea47 070a 	orr.w	r7, r7, sl
 801fb6c:	f823 7b02 	strh.w	r7, [r3], #2
 801fb70:	930b      	str	r3, [sp, #44]	@ 0x2c
 801fb72:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801fb74:	449b      	add	fp, r3
 801fb76:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801fb78:	441d      	add	r5, r3
 801fb7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fb7c:	3b01      	subs	r3, #1
 801fb7e:	9309      	str	r3, [sp, #36]	@ 0x24
 801fb80:	e714      	b.n	801f9ac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 801fb82:	b149      	cbz	r1, 801fb98 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 801fb84:	5cba      	ldrb	r2, [r7, r2]
 801fb86:	4660      	mov	r0, ip
 801fb88:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fb8c:	4422      	add	r2, r4
 801fb8e:	4666      	mov	r6, ip
 801fb90:	e7a5      	b.n	801fade <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 801fb92:	4660      	mov	r0, ip
 801fb94:	4662      	mov	r2, ip
 801fb96:	e7a2      	b.n	801fade <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 801fb98:	4660      	mov	r0, ip
 801fb9a:	4662      	mov	r2, ip
 801fb9c:	e7f7      	b.n	801fb8e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3da>
 801fb9e:	b00f      	add	sp, #60	@ 0x3c
 801fba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fba4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 801fba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fba8:	b085      	sub	sp, #20
 801fbaa:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	@ 0x40
 801fbae:	f9bd c038 	ldrsh.w	ip, [sp, #56]	@ 0x38
 801fbb2:	9102      	str	r1, [sp, #8]
 801fbb4:	2c00      	cmp	r4, #0
 801fbb6:	fb04 710c 	mla	r1, r4, ip, r7
 801fbba:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
 801fbbe:	f89d 6048 	ldrb.w	r6, [sp, #72]	@ 0x48
 801fbc2:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 801fbc6:	eb02 0e01 	add.w	lr, r2, r1
 801fbca:	f2c0 8122 	blt.w	801fe12 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 801fbce:	45a0      	cmp	r8, r4
 801fbd0:	f340 811f 	ble.w	801fe12 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 801fbd4:	2f00      	cmp	r7, #0
 801fbd6:	f2c0 811a 	blt.w	801fe0e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 801fbda:	45bc      	cmp	ip, r7
 801fbdc:	f340 8117 	ble.w	801fe0e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 801fbe0:	5c52      	ldrb	r2, [r2, r1]
 801fbe2:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801fbe6:	1c7a      	adds	r2, r7, #1
 801fbe8:	f100 8116 	bmi.w	801fe18 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 801fbec:	4594      	cmp	ip, r2
 801fbee:	f340 8113 	ble.w	801fe18 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 801fbf2:	2e00      	cmp	r6, #0
 801fbf4:	f000 8112 	beq.w	801fe1c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
 801fbf8:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801fbfc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801fc00:	3401      	adds	r4, #1
 801fc02:	f100 810f 	bmi.w	801fe24 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 801fc06:	45a0      	cmp	r8, r4
 801fc08:	f340 810c 	ble.w	801fe24 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 801fc0c:	2800      	cmp	r0, #0
 801fc0e:	f000 810c 	beq.w	801fe2a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
 801fc12:	2f00      	cmp	r7, #0
 801fc14:	f2c0 8104 	blt.w	801fe20 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 801fc18:	45bc      	cmp	ip, r7
 801fc1a:	f340 8101 	ble.w	801fe20 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 801fc1e:	f81e 200c 	ldrb.w	r2, [lr, ip]
 801fc22:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 801fc26:	3701      	adds	r7, #1
 801fc28:	f100 8102 	bmi.w	801fe30 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 801fc2c:	45bc      	cmp	ip, r7
 801fc2e:	f340 80ff 	ble.w	801fe30 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 801fc32:	2e00      	cmp	r6, #0
 801fc34:	f000 80fe 	beq.w	801fe34 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
 801fc38:	44f4      	add	ip, lr
 801fc3a:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801fc3e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801fc42:	b2b6      	uxth	r6, r6
 801fc44:	b280      	uxth	r0, r0
 801fc46:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 801fc4a:	fb00 fe06 	mul.w	lr, r0, r6
 801fc4e:	0136      	lsls	r6, r6, #4
 801fc50:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 801fc54:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 801fc58:	eba6 070e 	sub.w	r7, r6, lr
 801fc5c:	f5c6 7380 	rsb	r3, r6, #256	@ 0x100
 801fc60:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801fc64:	b280      	uxth	r0, r0
 801fc66:	b2bf      	uxth	r7, r7
 801fc68:	1a1b      	subs	r3, r3, r0
 801fc6a:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801fc6e:	fb0a f607 	mul.w	r6, sl, r7
 801fc72:	b29b      	uxth	r3, r3
 801fc74:	fb0b 6603 	mla	r6, fp, r3, r6
 801fc78:	fb00 6609 	mla	r6, r0, r9, r6
 801fc7c:	fb0e 6608 	mla	r6, lr, r8, r6
 801fc80:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801fc84:	9600      	str	r6, [sp, #0]
 801fc86:	2e00      	cmp	r6, #0
 801fc88:	f000 80be 	beq.w	801fe08 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
 801fc8c:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 801fc90:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801fc94:	9e02      	ldr	r6, [sp, #8]
 801fc96:	fb0b fc0c 	mul.w	ip, fp, ip
 801fc9a:	fb0b f505 	mul.w	r5, fp, r5
 801fc9e:	8836      	ldrh	r6, [r6, #0]
 801fca0:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801fca4:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801fca8:	9501      	str	r5, [sp, #4]
 801fcaa:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 801fcae:	44dc      	add	ip, fp
 801fcb0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fcb4:	f00c 15ff 	and.w	r5, ip, #16711935	@ 0xff00ff
 801fcb8:	9503      	str	r5, [sp, #12]
 801fcba:	9d01      	ldr	r5, [sp, #4]
 801fcbc:	f505 7c80 	add.w	ip, r5, #256	@ 0x100
 801fcc0:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801fcc4:	f001 1cff 	and.w	ip, r1, #16711935	@ 0xff00ff
 801fcc8:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 801fccc:	fb0a fc0c 	mul.w	ip, sl, ip
 801fcd0:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 801fcd4:	fb0a fa01 	mul.w	sl, sl, r1
 801fcd8:	ea4f 251c 	mov.w	r5, ip, lsr #8
 801fcdc:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801fce0:	f50a 7180 	add.w	r1, sl, #256	@ 0x100
 801fce4:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 801fce8:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 801fcec:	4465      	add	r5, ip
 801fcee:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801fcf2:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 801fcf6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fcfa:	fb09 fc0c 	mul.w	ip, r9, ip
 801fcfe:	0a2d      	lsrs	r5, r5, #8
 801fd00:	fb09 f904 	mul.w	r9, r9, r4
 801fd04:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801fd08:	ea4f 211c 	mov.w	r1, ip, lsr #8
 801fd0c:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 801fd10:	f509 7480 	add.w	r4, r9, #256	@ 0x100
 801fd14:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801fd18:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 801fd1c:	437d      	muls	r5, r7
 801fd1e:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801fd22:	f002 14ff 	and.w	r4, r2, #16711935	@ 0xff00ff
 801fd26:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801fd2a:	4461      	add	r1, ip
 801fd2c:	fb08 f404 	mul.w	r4, r8, r4
 801fd30:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801fd34:	fb08 f802 	mul.w	r8, r8, r2
 801fd38:	0a09      	lsrs	r1, r1, #8
 801fd3a:	0a22      	lsrs	r2, r4, #8
 801fd3c:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 801fd40:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 801fd44:	fb07 f70a 	mul.w	r7, r7, sl
 801fd48:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801fd4c:	4414      	add	r4, r2
 801fd4e:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 801fd52:	0a24      	lsrs	r4, r4, #8
 801fd54:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801fd58:	9a03      	ldr	r2, [sp, #12]
 801fd5a:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 801fd5e:	fb02 5503 	mla	r5, r2, r3, r5
 801fd62:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801fd66:	9a00      	ldr	r2, [sp, #0]
 801fd68:	fb04 540e 	mla	r4, r4, lr, r5
 801fd6c:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 801fd70:	1235      	asrs	r5, r6, #8
 801fd72:	fb01 4100 	mla	r1, r1, r0, r4
 801fd76:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 801fd7a:	0a09      	lsrs	r1, r1, #8
 801fd7c:	f001 14ff 	and.w	r4, r1, #16711935	@ 0xff00ff
 801fd80:	f40b 417f 	and.w	r1, fp, #65280	@ 0xff00
 801fd84:	fb03 7101 	mla	r1, r3, r1, r7
 801fd88:	fb0e 1e08 	mla	lr, lr, r8, r1
 801fd8c:	f409 417f 	and.w	r1, r9, #65280	@ 0xff00
 801fd90:	fb00 e101 	mla	r1, r0, r1, lr
 801fd94:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 801fd98:	b287      	uxth	r7, r0
 801fd9a:	0a09      	lsrs	r1, r1, #8
 801fd9c:	437a      	muls	r2, r7
 801fd9e:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 801fda2:	1c53      	adds	r3, r2, #1
 801fda4:	4321      	orrs	r1, r4
 801fda6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801fdaa:	0c0a      	lsrs	r2, r1, #16
 801fdac:	f3c1 2407 	ubfx	r4, r1, #8, #8
 801fdb0:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 801fdb4:	b2c8      	uxtb	r0, r1
 801fdb6:	fb12 f207 	smulbb	r2, r2, r7
 801fdba:	fb14 f407 	smulbb	r4, r4, r7
 801fdbe:	b2db      	uxtb	r3, r3
 801fdc0:	fb10 f007 	smulbb	r0, r0, r7
 801fdc4:	fb05 2503 	mla	r5, r5, r3, r2
 801fdc8:	10f2      	asrs	r2, r6, #3
 801fdca:	00f6      	lsls	r6, r6, #3
 801fdcc:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 801fdd0:	b2ad      	uxth	r5, r5
 801fdd2:	b2f6      	uxtb	r6, r6
 801fdd4:	fb02 4203 	mla	r2, r2, r3, r4
 801fdd8:	fb06 0303 	mla	r3, r6, r3, r0
 801fddc:	b294      	uxth	r4, r2
 801fdde:	b299      	uxth	r1, r3
 801fde0:	1c6b      	adds	r3, r5, #1
 801fde2:	1c62      	adds	r2, r4, #1
 801fde4:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801fde8:	1c4b      	adds	r3, r1, #1
 801fdea:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801fdee:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801fdf2:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 801fdf6:	0952      	lsrs	r2, r2, #5
 801fdf8:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801fdfc:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801fe00:	432b      	orrs	r3, r5
 801fe02:	4313      	orrs	r3, r2
 801fe04:	9a02      	ldr	r2, [sp, #8]
 801fe06:	8013      	strh	r3, [r2, #0]
 801fe08:	b005      	add	sp, #20
 801fe0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fe0e:	2500      	movs	r5, #0
 801fe10:	e6e9      	b.n	801fbe6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
 801fe12:	2100      	movs	r1, #0
 801fe14:	460d      	mov	r5, r1
 801fe16:	e6f3      	b.n	801fc00 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 801fe18:	2100      	movs	r1, #0
 801fe1a:	e6f1      	b.n	801fc00 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 801fe1c:	4631      	mov	r1, r6
 801fe1e:	e6ef      	b.n	801fc00 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 801fe20:	2400      	movs	r4, #0
 801fe22:	e700      	b.n	801fc26 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 801fe24:	2200      	movs	r2, #0
 801fe26:	4614      	mov	r4, r2
 801fe28:	e70b      	b.n	801fc42 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 801fe2a:	4602      	mov	r2, r0
 801fe2c:	4604      	mov	r4, r0
 801fe2e:	e708      	b.n	801fc42 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 801fe30:	2200      	movs	r2, #0
 801fe32:	e706      	b.n	801fc42 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 801fe34:	4632      	mov	r2, r6
 801fe36:	e704      	b.n	801fc42 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

0801fe38 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fe38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fe3c:	b09f      	sub	sp, #124	@ 0x7c
 801fe3e:	921b      	str	r2, [sp, #108]	@ 0x6c
 801fe40:	9309      	str	r3, [sp, #36]	@ 0x24
 801fe42:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 801fe44:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 801fe48:	901d      	str	r0, [sp, #116]	@ 0x74
 801fe4a:	931c      	str	r3, [sp, #112]	@ 0x70
 801fe4c:	6850      	ldr	r0, [r2, #4]
 801fe4e:	9119      	str	r1, [sp, #100]	@ 0x64
 801fe50:	6812      	ldr	r2, [r2, #0]
 801fe52:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 801fe54:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 801fe58:	fb00 1303 	mla	r3, r0, r3, r1
 801fe5c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801fe60:	930c      	str	r3, [sp, #48]	@ 0x30
 801fe62:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801fe64:	681b      	ldr	r3, [r3, #0]
 801fe66:	9312      	str	r3, [sp, #72]	@ 0x48
 801fe68:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801fe6a:	685e      	ldr	r6, [r3, #4]
 801fe6c:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 801fe70:	3604      	adds	r6, #4
 801fe72:	930d      	str	r3, [sp, #52]	@ 0x34
 801fe74:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801fe76:	2b00      	cmp	r3, #0
 801fe78:	dc03      	bgt.n	801fe82 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801fe7a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801fe7c:	2b00      	cmp	r3, #0
 801fe7e:	f340 8387 	ble.w	8020590 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 801fe82:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801fe84:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801fe88:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801fe8c:	1e48      	subs	r0, r1, #1
 801fe8e:	1e57      	subs	r7, r2, #1
 801fe90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fe92:	2b00      	cmp	r3, #0
 801fe94:	f340 8194 	ble.w	80201c0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 801fe98:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801fe9a:	142b      	asrs	r3, r5, #16
 801fe9c:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801fea0:	d406      	bmi.n	801feb0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801fea2:	4584      	cmp	ip, r0
 801fea4:	da04      	bge.n	801feb0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801fea6:	2b00      	cmp	r3, #0
 801fea8:	db02      	blt.n	801feb0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801feaa:	42bb      	cmp	r3, r7
 801feac:	f2c0 8189 	blt.w	80201c2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801feb0:	f11c 0c01 	adds.w	ip, ip, #1
 801feb4:	f100 8177 	bmi.w	80201a6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801feb8:	4561      	cmp	r1, ip
 801feba:	f2c0 8174 	blt.w	80201a6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801febe:	3301      	adds	r3, #1
 801fec0:	f100 8171 	bmi.w	80201a6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801fec4:	429a      	cmp	r2, r3
 801fec6:	f2c0 816e 	blt.w	80201a6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801feca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fecc:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801fece:	931a      	str	r3, [sp, #104]	@ 0x68
 801fed0:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801fed2:	2b00      	cmp	r3, #0
 801fed4:	f340 8193 	ble.w	80201fe <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801fed8:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801feda:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801fede:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801fee2:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801fee6:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801fee8:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 801feec:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801feee:	141b      	asrs	r3, r3, #16
 801fef0:	f100 81d6 	bmi.w	80202a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801fef4:	f100 38ff 	add.w	r8, r0, #4294967295
 801fef8:	4543      	cmp	r3, r8
 801fefa:	f280 81d1 	bge.w	80202a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801fefe:	f1bc 0f00 	cmp.w	ip, #0
 801ff02:	f2c0 81cd 	blt.w	80202a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801ff06:	f10e 38ff 	add.w	r8, lr, #4294967295
 801ff0a:	45c4      	cmp	ip, r8
 801ff0c:	f280 81c8 	bge.w	80202a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801ff10:	b200      	sxth	r0, r0
 801ff12:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801ff14:	fb0c 3300 	mla	r3, ip, r0, r3
 801ff18:	eb04 0803 	add.w	r8, r4, r3
 801ff1c:	5ce3      	ldrb	r3, [r4, r3]
 801ff1e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801ff22:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801ff26:	2a00      	cmp	r2, #0
 801ff28:	f000 81af 	beq.w	802028a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801ff2c:	f898 c001 	ldrb.w	ip, [r8, #1]
 801ff30:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801ff34:	940e      	str	r4, [sp, #56]	@ 0x38
 801ff36:	0e24      	lsrs	r4, r4, #24
 801ff38:	9415      	str	r4, [sp, #84]	@ 0x54
 801ff3a:	b179      	cbz	r1, 801ff5c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801ff3c:	eb08 0c00 	add.w	ip, r8, r0
 801ff40:	f818 0000 	ldrb.w	r0, [r8, r0]
 801ff44:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801ff48:	900a      	str	r0, [sp, #40]	@ 0x28
 801ff4a:	0e00      	lsrs	r0, r0, #24
 801ff4c:	9013      	str	r0, [sp, #76]	@ 0x4c
 801ff4e:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801ff52:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801ff56:	900f      	str	r0, [sp, #60]	@ 0x3c
 801ff58:	0e00      	lsrs	r0, r0, #24
 801ff5a:	9016      	str	r0, [sp, #88]	@ 0x58
 801ff5c:	b292      	uxth	r2, r2
 801ff5e:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801ff60:	b289      	uxth	r1, r1
 801ff62:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801ff64:	fb02 f901 	mul.w	r9, r2, r1
 801ff68:	0112      	lsls	r2, r2, #4
 801ff6a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801ff6e:	eba2 0809 	sub.w	r8, r2, r9
 801ff72:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801ff76:	b289      	uxth	r1, r1
 801ff78:	fa1f f888 	uxth.w	r8, r8
 801ff7c:	1a52      	subs	r2, r2, r1
 801ff7e:	fb08 f000 	mul.w	r0, r8, r0
 801ff82:	b292      	uxth	r2, r2
 801ff84:	fb02 000e 	mla	r0, r2, lr, r0
 801ff88:	fb01 0004 	mla	r0, r1, r4, r0
 801ff8c:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801ff8e:	fb09 0004 	mla	r0, r9, r4, r0
 801ff92:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801ff96:	2800      	cmp	r0, #0
 801ff98:	f000 80fa 	beq.w	8020190 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801ff9c:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801ffa0:	d01b      	beq.n	801ffda <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 801ffa2:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801ffa6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801ffaa:	fb0e fa0a 	mul.w	sl, lr, sl
 801ffae:	fb0e fe03 	mul.w	lr, lr, r3
 801ffb2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801ffb6:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801ffba:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801ffbe:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801ffc2:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801ffc6:	4453      	add	r3, sl
 801ffc8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ffcc:	0a1b      	lsrs	r3, r3, #8
 801ffce:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801ffd2:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801ffd6:	ea43 030c 	orr.w	r3, r3, ip
 801ffda:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801ffdc:	2cff      	cmp	r4, #255	@ 0xff
 801ffde:	d021      	beq.n	8020024 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 801ffe0:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801ffe2:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801ffe6:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801ffe8:	fb04 fb0b 	mul.w	fp, r4, fp
 801ffec:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801ffee:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801fff2:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801fff4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801fff8:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801fffc:	fb04 fa0a 	mul.w	sl, r4, sl
 8020000:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020004:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8020008:	44de      	add	lr, fp
 802000a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802000e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020012:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020016:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802001a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802001e:	ea4e 040a 	orr.w	r4, lr, sl
 8020022:	940e      	str	r4, [sp, #56]	@ 0x38
 8020024:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8020026:	2cff      	cmp	r4, #255	@ 0xff
 8020028:	d021      	beq.n	802006e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 802002a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802002c:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8020030:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8020032:	fb04 fb0b 	mul.w	fp, r4, fp
 8020036:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8020038:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802003c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802003e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020042:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8020046:	fb04 fa0a 	mul.w	sl, r4, sl
 802004a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802004e:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8020052:	44de      	add	lr, fp
 8020054:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020058:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802005c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020060:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020064:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8020068:	ea4e 040a 	orr.w	r4, lr, sl
 802006c:	940a      	str	r4, [sp, #40]	@ 0x28
 802006e:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8020070:	2cff      	cmp	r4, #255	@ 0xff
 8020072:	d021      	beq.n	80200b8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 8020074:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8020076:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 802007a:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 802007c:	fb04 fb0b 	mul.w	fp, r4, fp
 8020080:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8020082:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8020086:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8020088:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802008c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8020090:	fb04 fa0a 	mul.w	sl, r4, sl
 8020094:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020098:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802009c:	44de      	add	lr, fp
 802009e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80200a2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80200a6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80200aa:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80200ae:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80200b2:	ea4e 040a 	orr.w	r4, lr, sl
 80200b6:	940f      	str	r4, [sp, #60]	@ 0x3c
 80200b8:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80200ba:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 80200be:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80200c2:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80200c6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80200c8:	fb08 fc0c 	mul.w	ip, r8, ip
 80200cc:	fb02 cc0e 	mla	ip, r2, lr, ip
 80200d0:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 80200d4:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80200d6:	fb01 cc0e 	mla	ip, r1, lr, ip
 80200da:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 80200de:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80200e0:	fb09 cc0e 	mla	ip, r9, lr, ip
 80200e4:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 80200e8:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80200ea:	fb08 f80e 	mul.w	r8, r8, lr
 80200ee:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80200f2:	fb02 8303 	mla	r3, r2, r3, r8
 80200f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80200f8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80200fc:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8020100:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8020102:	fb01 330a 	mla	r3, r1, sl, r3
 8020106:	f402 417f 	and.w	r1, r2, #65280	@ 0xff00
 802010a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802010c:	fb09 3901 	mla	r9, r9, r1, r3
 8020110:	883b      	ldrh	r3, [r7, #0]
 8020112:	4342      	muls	r2, r0
 8020114:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020118:	1c50      	adds	r0, r2, #1
 802011a:	1219      	asrs	r1, r3, #8
 802011c:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8020120:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8020124:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8020128:	ea4c 0c09 	orr.w	ip, ip, r9
 802012c:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8020130:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8020134:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8020138:	b2c0      	uxtb	r0, r0
 802013a:	fb12 f204 	smulbb	r2, r2, r4
 802013e:	fa5f fc8c 	uxtb.w	ip, ip
 8020142:	fb1e fe04 	smulbb	lr, lr, r4
 8020146:	fb01 2100 	mla	r1, r1, r0, r2
 802014a:	10da      	asrs	r2, r3, #3
 802014c:	fb1c fc04 	smulbb	ip, ip, r4
 8020150:	00db      	lsls	r3, r3, #3
 8020152:	b289      	uxth	r1, r1
 8020154:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8020158:	b2db      	uxtb	r3, r3
 802015a:	fb02 e200 	mla	r2, r2, r0, lr
 802015e:	fb03 c300 	mla	r3, r3, r0, ip
 8020162:	b292      	uxth	r2, r2
 8020164:	fa1f fc83 	uxth.w	ip, r3
 8020168:	1c4b      	adds	r3, r1, #1
 802016a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802016e:	f10c 0301 	add.w	r3, ip, #1
 8020172:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8020176:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 802017a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802017e:	430b      	orrs	r3, r1
 8020180:	1c51      	adds	r1, r2, #1
 8020182:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8020186:	0952      	lsrs	r2, r2, #5
 8020188:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802018c:	4313      	orrs	r3, r2
 802018e:	803b      	strh	r3, [r7, #0]
 8020190:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8020192:	3702      	adds	r7, #2
 8020194:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8020196:	441a      	add	r2, r3
 8020198:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802019a:	441d      	add	r5, r3
 802019c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 802019e:	9229      	str	r2, [sp, #164]	@ 0xa4
 80201a0:	3b01      	subs	r3, #1
 80201a2:	931a      	str	r3, [sp, #104]	@ 0x68
 80201a4:	e694      	b.n	801fed0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80201a6:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 80201a8:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 80201aa:	441c      	add	r4, r3
 80201ac:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80201ae:	441d      	add	r5, r3
 80201b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80201b2:	9429      	str	r4, [sp, #164]	@ 0xa4
 80201b4:	3b01      	subs	r3, #1
 80201b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80201b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80201ba:	3302      	adds	r3, #2
 80201bc:	930c      	str	r3, [sp, #48]	@ 0x30
 80201be:	e667      	b.n	801fe90 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80201c0:	d024      	beq.n	802020c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 80201c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80201c4:	982b      	ldr	r0, [sp, #172]	@ 0xac
 80201c6:	3b01      	subs	r3, #1
 80201c8:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 80201ca:	fb00 4003 	mla	r0, r0, r3, r4
 80201ce:	1400      	asrs	r0, r0, #16
 80201d0:	f53f ae7b 	bmi.w	801feca <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80201d4:	3901      	subs	r1, #1
 80201d6:	4288      	cmp	r0, r1
 80201d8:	f6bf ae77 	bge.w	801feca <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80201dc:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 80201de:	fb01 5303 	mla	r3, r1, r3, r5
 80201e2:	141b      	asrs	r3, r3, #16
 80201e4:	f53f ae71 	bmi.w	801feca <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80201e8:	3a01      	subs	r2, #1
 80201ea:	4293      	cmp	r3, r2
 80201ec:	f6bf ae6d 	bge.w	801feca <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80201f0:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 80201f4:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 80201f8:	f1bb 0f00 	cmp.w	fp, #0
 80201fc:	dc70      	bgt.n	80202e0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 80201fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020200:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8020204:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020206:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 802020a:	930c      	str	r3, [sp, #48]	@ 0x30
 802020c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802020e:	2b00      	cmp	r3, #0
 8020210:	f340 81be 	ble.w	8020590 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 8020214:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8020218:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802021a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802021e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020222:	eef0 6a62 	vmov.f32	s13, s5
 8020226:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802022a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802022e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020232:	edcd 6a29 	vstr	s13, [sp, #164]	@ 0xa4
 8020236:	eef0 6a43 	vmov.f32	s13, s6
 802023a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802023e:	ee16 5a90 	vmov	r5, s13
 8020242:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020246:	ee61 7a27 	vmul.f32	s15, s2, s15
 802024a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802024e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020252:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020256:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802025a:	ee12 2a90 	vmov	r2, s5
 802025e:	eef0 2a47 	vmov.f32	s5, s14
 8020262:	fb92 f3f3 	sdiv	r3, r2, r3
 8020266:	ee13 2a10 	vmov	r2, s6
 802026a:	932b      	str	r3, [sp, #172]	@ 0xac
 802026c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802026e:	eeb0 3a67 	vmov.f32	s6, s15
 8020272:	fb92 f3f3 	sdiv	r3, r2, r3
 8020276:	932c      	str	r3, [sp, #176]	@ 0xb0
 8020278:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802027a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 802027c:	3b01      	subs	r3, #1
 802027e:	9319      	str	r3, [sp, #100]	@ 0x64
 8020280:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8020282:	bf08      	it	eq
 8020284:	4613      	moveq	r3, r2
 8020286:	9309      	str	r3, [sp, #36]	@ 0x24
 8020288:	e5f4      	b.n	801fe74 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 802028a:	2900      	cmp	r1, #0
 802028c:	f43f ae66 	beq.w	801ff5c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8020290:	f818 0000 	ldrb.w	r0, [r8, r0]
 8020294:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8020298:	900a      	str	r0, [sp, #40]	@ 0x28
 802029a:	0e00      	lsrs	r0, r0, #24
 802029c:	9013      	str	r0, [sp, #76]	@ 0x4c
 802029e:	e65d      	b.n	801ff5c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 80202a0:	f113 0801 	adds.w	r8, r3, #1
 80202a4:	f53f af74 	bmi.w	8020190 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80202a8:	4540      	cmp	r0, r8
 80202aa:	f6ff af71 	blt.w	8020190 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80202ae:	f11c 0801 	adds.w	r8, ip, #1
 80202b2:	f53f af6d 	bmi.w	8020190 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80202b6:	45c6      	cmp	lr, r8
 80202b8:	f6ff af6a 	blt.w	8020190 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80202bc:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 80202be:	b200      	sxth	r0, r0
 80202c0:	9302      	str	r3, [sp, #8]
 80202c2:	fa0f f38e 	sxth.w	r3, lr
 80202c6:	9000      	str	r0, [sp, #0]
 80202c8:	9301      	str	r3, [sp, #4]
 80202ca:	4633      	mov	r3, r6
 80202cc:	981d      	ldr	r0, [sp, #116]	@ 0x74
 80202ce:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80202d2:	e9cd c203 	strd	ip, r2, [sp, #12]
 80202d6:	4639      	mov	r1, r7
 80202d8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80202da:	f7ff fc63 	bl	801fba4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 80202de:	e757      	b.n	8020190 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80202e0:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80202e2:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80202e6:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 80202e8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80202ec:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80202ee:	1427      	asrs	r7, r4, #16
 80202f0:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80202f2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80202f6:	142b      	asrs	r3, r5, #16
 80202f8:	fb01 7303 	mla	r3, r1, r3, r7
 80202fc:	18e7      	adds	r7, r4, r3
 80202fe:	5ce3      	ldrb	r3, [r4, r3]
 8020300:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8020304:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8020308:	2a00      	cmp	r2, #0
 802030a:	f000 8137 	beq.w	802057c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 802030e:	f897 e001 	ldrb.w	lr, [r7, #1]
 8020312:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8020316:	9410      	str	r4, [sp, #64]	@ 0x40
 8020318:	0e24      	lsrs	r4, r4, #24
 802031a:	9417      	str	r4, [sp, #92]	@ 0x5c
 802031c:	b170      	cbz	r0, 802033c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 802031e:	eb07 0e01 	add.w	lr, r7, r1
 8020322:	5c79      	ldrb	r1, [r7, r1]
 8020324:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020328:	910b      	str	r1, [sp, #44]	@ 0x2c
 802032a:	0e09      	lsrs	r1, r1, #24
 802032c:	9114      	str	r1, [sp, #80]	@ 0x50
 802032e:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8020332:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020336:	9111      	str	r1, [sp, #68]	@ 0x44
 8020338:	0e09      	lsrs	r1, r1, #24
 802033a:	9118      	str	r1, [sp, #96]	@ 0x60
 802033c:	b292      	uxth	r2, r2
 802033e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8020340:	b280      	uxth	r0, r0
 8020342:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8020344:	fb02 f800 	mul.w	r8, r2, r0
 8020348:	0112      	lsls	r2, r2, #4
 802034a:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 802034e:	eba2 0e08 	sub.w	lr, r2, r8
 8020352:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8020356:	b280      	uxth	r0, r0
 8020358:	fa1f fe8e 	uxth.w	lr, lr
 802035c:	1a12      	subs	r2, r2, r0
 802035e:	fb0e f101 	mul.w	r1, lr, r1
 8020362:	b292      	uxth	r2, r2
 8020364:	fb02 110c 	mla	r1, r2, ip, r1
 8020368:	fb00 1104 	mla	r1, r0, r4, r1
 802036c:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 802036e:	fb08 1104 	mla	r1, r8, r4, r1
 8020372:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020376:	2900      	cmp	r1, #0
 8020378:	f000 80f5 	beq.w	8020566 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 802037c:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8020380:	d019      	beq.n	80203b6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 8020382:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8020386:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802038a:	fb0c fa0a 	mul.w	sl, ip, sl
 802038e:	fb0c fc03 	mul.w	ip, ip, r3
 8020392:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8020396:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802039a:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 802039e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80203a2:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80203a6:	4453      	add	r3, sl
 80203a8:	0a3f      	lsrs	r7, r7, #8
 80203aa:	0a1b      	lsrs	r3, r3, #8
 80203ac:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 80203b0:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80203b4:	433b      	orrs	r3, r7
 80203b6:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 80203b8:	2cff      	cmp	r4, #255	@ 0xff
 80203ba:	d020      	beq.n	80203fe <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 80203bc:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80203be:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80203c2:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 80203c4:	4367      	muls	r7, r4
 80203c6:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80203c8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80203cc:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80203d0:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 80203d2:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80203d6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80203da:	fb04 fa0a 	mul.w	sl, r4, sl
 80203de:	44bc      	add	ip, r7
 80203e0:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80203e4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80203e8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80203ec:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80203f0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80203f4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80203f8:	ea4c 040a 	orr.w	r4, ip, sl
 80203fc:	9410      	str	r4, [sp, #64]	@ 0x40
 80203fe:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8020400:	2cff      	cmp	r4, #255	@ 0xff
 8020402:	d020      	beq.n	8020446 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
 8020404:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8020406:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802040a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802040c:	4367      	muls	r7, r4
 802040e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8020410:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020414:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8020418:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802041a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802041e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020422:	fb04 fa0a 	mul.w	sl, r4, sl
 8020426:	44bc      	add	ip, r7
 8020428:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 802042c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020430:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020434:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020438:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802043c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8020440:	ea4c 040a 	orr.w	r4, ip, sl
 8020444:	940b      	str	r4, [sp, #44]	@ 0x2c
 8020446:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8020448:	2cff      	cmp	r4, #255	@ 0xff
 802044a:	d020      	beq.n	802048e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
 802044c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802044e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8020452:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8020454:	4367      	muls	r7, r4
 8020456:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8020458:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802045c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8020460:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8020462:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8020466:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802046a:	fb04 fa0a 	mul.w	sl, r4, sl
 802046e:	44bc      	add	ip, r7
 8020470:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8020474:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020478:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802047c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020480:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020484:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8020488:	ea4c 040a 	orr.w	r4, ip, sl
 802048c:	9411      	str	r4, [sp, #68]	@ 0x44
 802048e:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8020490:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8020494:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8020498:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802049c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802049e:	fb0e f707 	mul.w	r7, lr, r7
 80204a2:	fb02 770c 	mla	r7, r2, ip, r7
 80204a6:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80204aa:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80204ac:	fb00 770c 	mla	r7, r0, ip, r7
 80204b0:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80204b4:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80204b6:	fb08 770c 	mla	r7, r8, ip, r7
 80204ba:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 80204be:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80204c0:	fb0e fe0c 	mul.w	lr, lr, ip
 80204c4:	0a3f      	lsrs	r7, r7, #8
 80204c6:	fb02 e303 	mla	r3, r2, r3, lr
 80204ca:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80204cc:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 80204d0:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 80204d4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80204d6:	fb00 330a 	mla	r3, r0, sl, r3
 80204da:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 80204de:	f8b9 0000 	ldrh.w	r0, [r9]
 80204e2:	fb08 3c0c 	mla	ip, r8, ip, r3
 80204e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80204e8:	1202      	asrs	r2, r0, #8
 80204ea:	434b      	muls	r3, r1
 80204ec:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80204f0:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 80204f4:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80204f8:	1c59      	adds	r1, r3, #1
 80204fa:	ea47 070c 	orr.w	r7, r7, ip
 80204fe:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8020502:	0c3b      	lsrs	r3, r7, #16
 8020504:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8020508:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 802050c:	b2ff      	uxtb	r7, r7
 802050e:	fb13 f304 	smulbb	r3, r3, r4
 8020512:	b2c9      	uxtb	r1, r1
 8020514:	fb1c fc04 	smulbb	ip, ip, r4
 8020518:	fb02 3201 	mla	r2, r2, r1, r3
 802051c:	10c3      	asrs	r3, r0, #3
 802051e:	fb17 f704 	smulbb	r7, r7, r4
 8020522:	00c0      	lsls	r0, r0, #3
 8020524:	b292      	uxth	r2, r2
 8020526:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 802052a:	b2c0      	uxtb	r0, r0
 802052c:	fb03 c301 	mla	r3, r3, r1, ip
 8020530:	f102 0c01 	add.w	ip, r2, #1
 8020534:	fb00 7001 	mla	r0, r0, r1, r7
 8020538:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802053c:	b280      	uxth	r0, r0
 802053e:	f402 4c78 	and.w	ip, r2, #63488	@ 0xf800
 8020542:	b29b      	uxth	r3, r3
 8020544:	1c42      	adds	r2, r0, #1
 8020546:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802054a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802054e:	ea42 020c 	orr.w	r2, r2, ip
 8020552:	f103 0c01 	add.w	ip, r3, #1
 8020556:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 802055a:	095b      	lsrs	r3, r3, #5
 802055c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8020560:	431a      	orrs	r2, r3
 8020562:	f8a9 2000 	strh.w	r2, [r9]
 8020566:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8020568:	f109 0902 	add.w	r9, r9, #2
 802056c:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 802056e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020572:	441a      	add	r2, r3
 8020574:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8020576:	9229      	str	r2, [sp, #164]	@ 0xa4
 8020578:	441d      	add	r5, r3
 802057a:	e63d      	b.n	80201f8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 802057c:	2800      	cmp	r0, #0
 802057e:	f43f aedd 	beq.w	802033c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8020582:	5c79      	ldrb	r1, [r7, r1]
 8020584:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020588:	910b      	str	r1, [sp, #44]	@ 0x2c
 802058a:	0e09      	lsrs	r1, r1, #24
 802058c:	9114      	str	r1, [sp, #80]	@ 0x50
 802058e:	e6d5      	b.n	802033c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8020590:	b01f      	add	sp, #124	@ 0x7c
 8020592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020596 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 8020596:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802059a:	b089      	sub	sp, #36	@ 0x24
 802059c:	9101      	str	r1, [sp, #4]
 802059e:	9801      	ldr	r0, [sp, #4]
 80205a0:	f9bd c048 	ldrsh.w	ip, [sp, #72]	@ 0x48
 80205a4:	8800      	ldrh	r0, [r0, #0]
 80205a6:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	@ 0x4c
 80205aa:	1206      	asrs	r6, r0, #8
 80205ac:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 80205b0:	f89d 405c 	ldrb.w	r4, [sp, #92]	@ 0x5c
 80205b4:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 80205b8:	9602      	str	r6, [sp, #8]
 80205ba:	10c6      	asrs	r6, r0, #3
 80205bc:	00c0      	lsls	r0, r0, #3
 80205be:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 80205c2:	b2c0      	uxtb	r0, r0
 80205c4:	9603      	str	r6, [sp, #12]
 80205c6:	9004      	str	r0, [sp, #16]
 80205c8:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	@ 0x50
 80205cc:	fb07 100c 	mla	r0, r7, ip, r1
 80205d0:	2f00      	cmp	r7, #0
 80205d2:	eb02 0e00 	add.w	lr, r2, r0
 80205d6:	f2c0 810a 	blt.w	80207ee <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 80205da:	45b8      	cmp	r8, r7
 80205dc:	f340 8107 	ble.w	80207ee <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 80205e0:	2900      	cmp	r1, #0
 80205e2:	f2c0 8102 	blt.w	80207ea <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 80205e6:	458c      	cmp	ip, r1
 80205e8:	f340 80ff 	ble.w	80207ea <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 80205ec:	5c12      	ldrb	r2, [r2, r0]
 80205ee:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80205f2:	1c4a      	adds	r2, r1, #1
 80205f4:	f100 80fe 	bmi.w	80207f4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 80205f8:	4594      	cmp	ip, r2
 80205fa:	f340 80fb 	ble.w	80207f4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 80205fe:	2d00      	cmp	r5, #0
 8020600:	f000 80fa 	beq.w	80207f8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
 8020604:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8020608:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 802060c:	3701      	adds	r7, #1
 802060e:	f100 80f7 	bmi.w	8020800 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8020612:	45b8      	cmp	r8, r7
 8020614:	f340 80f4 	ble.w	8020800 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8020618:	2c00      	cmp	r4, #0
 802061a:	f000 80f4 	beq.w	8020806 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
 802061e:	2900      	cmp	r1, #0
 8020620:	eb0e 020c 	add.w	r2, lr, ip
 8020624:	f2c0 80ea 	blt.w	80207fc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 8020628:	458c      	cmp	ip, r1
 802062a:	f340 80e7 	ble.w	80207fc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 802062e:	f81e 700c 	ldrb.w	r7, [lr, ip]
 8020632:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8020636:	3101      	adds	r1, #1
 8020638:	f100 80e8 	bmi.w	802080c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 802063c:	458c      	cmp	ip, r1
 802063e:	f340 80e5 	ble.w	802080c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 8020642:	2d00      	cmp	r5, #0
 8020644:	f000 80e4 	beq.w	8020810 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
 8020648:	7852      	ldrb	r2, [r2, #1]
 802064a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802064e:	0e0b      	lsrs	r3, r1, #24
 8020650:	f007 1cff 	and.w	ip, r7, #16711935	@ 0xff00ff
 8020654:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8020658:	9300      	str	r3, [sp, #0]
 802065a:	b2a4      	uxth	r4, r4
 802065c:	b2ab      	uxth	r3, r5
 802065e:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 8020662:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8020666:	fb03 f904 	mul.w	r9, r3, r4
 802066a:	011b      	lsls	r3, r3, #4
 802066c:	fb0a f505 	mul.w	r5, sl, r5
 8020670:	ea4f 6817 	mov.w	r8, r7, lsr #24
 8020674:	eba3 0e09 	sub.w	lr, r3, r9
 8020678:	f5c3 7280 	rsb	r2, r3, #256	@ 0x100
 802067c:	f400 437f 	and.w	r3, r0, #65280	@ 0xff00
 8020680:	0a28      	lsrs	r0, r5, #8
 8020682:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 8020686:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 802068a:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 802068e:	fb0a f303 	mul.w	r3, sl, r3
 8020692:	fb08 f707 	mul.w	r7, r8, r7
 8020696:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
 802069a:	4405      	add	r5, r0
 802069c:	fb08 fc0c 	mul.w	ip, r8, ip
 80206a0:	b2a4      	uxth	r4, r4
 80206a2:	0a2d      	lsrs	r5, r5, #8
 80206a4:	fa1f fe8e 	uxth.w	lr, lr
 80206a8:	1b12      	subs	r2, r2, r4
 80206aa:	f005 10ff 	and.w	r0, r5, #16711935	@ 0xff00ff
 80206ae:	b292      	uxth	r2, r2
 80206b0:	9005      	str	r0, [sp, #20]
 80206b2:	f503 7080 	add.w	r0, r3, #256	@ 0x100
 80206b6:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80206ba:	ea4f 201c 	mov.w	r0, ip, lsr #8
 80206be:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80206c2:	0a1b      	lsrs	r3, r3, #8
 80206c4:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 80206c8:	9306      	str	r3, [sp, #24]
 80206ca:	f006 13ff 	and.w	r3, r6, #16711935	@ 0xff00ff
 80206ce:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 80206d2:	4460      	add	r0, ip
 80206d4:	fb0b f303 	mul.w	r3, fp, r3
 80206d8:	fb0b f606 	mul.w	r6, fp, r6
 80206dc:	0a00      	lsrs	r0, r0, #8
 80206de:	0a1d      	lsrs	r5, r3, #8
 80206e0:	f103 1301 	add.w	r3, r3, #65537	@ 0x10001
 80206e4:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 80206e8:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 80206ec:	441d      	add	r5, r3
 80206ee:	f506 7380 	add.w	r3, r6, #256	@ 0x100
 80206f2:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 80206f6:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80206fa:	0a2d      	lsrs	r5, r5, #8
 80206fc:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8020700:	f001 17ff 	and.w	r7, r1, #16711935	@ 0xff00ff
 8020704:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8020708:	0a36      	lsrs	r6, r6, #8
 802070a:	0a1b      	lsrs	r3, r3, #8
 802070c:	fb05 f50e 	mul.w	r5, r5, lr
 8020710:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8020714:	9307      	str	r3, [sp, #28]
 8020716:	0e0b      	lsrs	r3, r1, #24
 8020718:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 802071c:	fb0e f606 	mul.w	r6, lr, r6
 8020720:	435f      	muls	r7, r3
 8020722:	4359      	muls	r1, r3
 8020724:	9b05      	ldr	r3, [sp, #20]
 8020726:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802072a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802072e:	fb03 5502 	mla	r5, r3, r2, r5
 8020732:	9b06      	ldr	r3, [sp, #24]
 8020734:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020738:	fb0e fe0b 	mul.w	lr, lr, fp
 802073c:	44bc      	add	ip, r7
 802073e:	f501 7780 	add.w	r7, r1, #256	@ 0x100
 8020742:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020746:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 802074a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802074e:	0a09      	lsrs	r1, r1, #8
 8020750:	fb0c 5509 	mla	r5, ip, r9, r5
 8020754:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8020758:	fb00 5504 	mla	r5, r0, r4, r5
 802075c:	f403 407f 	and.w	r0, r3, #65280	@ 0xff00
 8020760:	9b07      	ldr	r3, [sp, #28]
 8020762:	fb02 6000 	mla	r0, r2, r0, r6
 8020766:	0a2d      	lsrs	r5, r5, #8
 8020768:	fb02 e20a 	mla	r2, r2, sl, lr
 802076c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8020770:	fb09 0001 	mla	r0, r9, r1, r0
 8020774:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8020778:	fb04 0003 	mla	r0, r4, r3, r0
 802077c:	9b00      	ldr	r3, [sp, #0]
 802077e:	fb04 2408 	mla	r4, r4, r8, r2
 8020782:	9a04      	ldr	r2, [sp, #16]
 8020784:	0a00      	lsrs	r0, r0, #8
 8020786:	fb09 4903 	mla	r9, r9, r3, r4
 802078a:	9b02      	ldr	r3, [sp, #8]
 802078c:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8020790:	ea6f 2929 	mvn.w	r9, r9, asr #8
 8020794:	4305      	orrs	r5, r0
 8020796:	fa5f f989 	uxtb.w	r9, r9
 802079a:	fb03 f109 	mul.w	r1, r3, r9
 802079e:	9b03      	ldr	r3, [sp, #12]
 80207a0:	fb03 f309 	mul.w	r3, r3, r9
 80207a4:	fb02 f909 	mul.w	r9, r2, r9
 80207a8:	1c4a      	adds	r2, r1, #1
 80207aa:	1c58      	adds	r0, r3, #1
 80207ac:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80207b0:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80207b4:	0c2a      	lsrs	r2, r5, #16
 80207b6:	0a2b      	lsrs	r3, r5, #8
 80207b8:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 80207bc:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80207c0:	0212      	lsls	r2, r2, #8
 80207c2:	00db      	lsls	r3, r3, #3
 80207c4:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
 80207c8:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80207cc:	4313      	orrs	r3, r2
 80207ce:	f109 0201 	add.w	r2, r9, #1
 80207d2:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 80207d6:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 80207da:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 80207de:	431d      	orrs	r5, r3
 80207e0:	9b01      	ldr	r3, [sp, #4]
 80207e2:	801d      	strh	r5, [r3, #0]
 80207e4:	b009      	add	sp, #36	@ 0x24
 80207e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80207ea:	2000      	movs	r0, #0
 80207ec:	e701      	b.n	80205f2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
 80207ee:	2600      	movs	r6, #0
 80207f0:	4630      	mov	r0, r6
 80207f2:	e70b      	b.n	802060c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 80207f4:	2600      	movs	r6, #0
 80207f6:	e709      	b.n	802060c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 80207f8:	462e      	mov	r6, r5
 80207fa:	e707      	b.n	802060c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 80207fc:	2700      	movs	r7, #0
 80207fe:	e71a      	b.n	8020636 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
 8020800:	2100      	movs	r1, #0
 8020802:	460f      	mov	r7, r1
 8020804:	e723      	b.n	802064e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8020806:	4621      	mov	r1, r4
 8020808:	4627      	mov	r7, r4
 802080a:	e720      	b.n	802064e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 802080c:	2100      	movs	r1, #0
 802080e:	e71e      	b.n	802064e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8020810:	4629      	mov	r1, r5
 8020812:	e71c      	b.n	802064e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>

08020814 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020818:	b09b      	sub	sp, #108	@ 0x6c
 802081a:	9218      	str	r2, [sp, #96]	@ 0x60
 802081c:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 802081e:	9019      	str	r0, [sp, #100]	@ 0x64
 8020820:	9116      	str	r1, [sp, #88]	@ 0x58
 8020822:	6850      	ldr	r0, [r2, #4]
 8020824:	9307      	str	r3, [sp, #28]
 8020826:	6812      	ldr	r2, [r2, #0]
 8020828:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 802082a:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 802082e:	fb00 1303 	mla	r3, r0, r3, r1
 8020832:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8020836:	930a      	str	r3, [sp, #40]	@ 0x28
 8020838:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802083a:	681b      	ldr	r3, [r3, #0]
 802083c:	930f      	str	r3, [sp, #60]	@ 0x3c
 802083e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8020840:	685e      	ldr	r6, [r3, #4]
 8020842:	3604      	adds	r6, #4
 8020844:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8020846:	2b00      	cmp	r3, #0
 8020848:	dc03      	bgt.n	8020852 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 802084a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802084c:	2b00      	cmp	r3, #0
 802084e:	f340 8373 	ble.w	8020f38 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 8020852:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8020854:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020858:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802085c:	1e48      	subs	r0, r1, #1
 802085e:	1e57      	subs	r7, r2, #1
 8020860:	9b07      	ldr	r3, [sp, #28]
 8020862:	2b00      	cmp	r3, #0
 8020864:	f340 818f 	ble.w	8020b86 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8020868:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 802086a:	142b      	asrs	r3, r5, #16
 802086c:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8020870:	d406      	bmi.n	8020880 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8020872:	4584      	cmp	ip, r0
 8020874:	da04      	bge.n	8020880 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8020876:	2b00      	cmp	r3, #0
 8020878:	db02      	blt.n	8020880 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802087a:	42bb      	cmp	r3, r7
 802087c:	f2c0 8184 	blt.w	8020b88 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8020880:	f11c 0c01 	adds.w	ip, ip, #1
 8020884:	f100 8172 	bmi.w	8020b6c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8020888:	4561      	cmp	r1, ip
 802088a:	f2c0 816f 	blt.w	8020b6c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802088e:	3301      	adds	r3, #1
 8020890:	f100 816c 	bmi.w	8020b6c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8020894:	429a      	cmp	r2, r3
 8020896:	f2c0 8169 	blt.w	8020b6c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802089a:	9b07      	ldr	r3, [sp, #28]
 802089c:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 802089e:	9317      	str	r3, [sp, #92]	@ 0x5c
 80208a0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80208a2:	2b00      	cmp	r3, #0
 80208a4:	f340 818e 	ble.w	8020bc4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 80208a8:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80208aa:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80208ae:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80208b2:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80208b6:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80208b8:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 80208bc:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80208be:	141b      	asrs	r3, r3, #16
 80208c0:	f100 81d1 	bmi.w	8020c66 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80208c4:	f101 38ff 	add.w	r8, r1, #4294967295
 80208c8:	4543      	cmp	r3, r8
 80208ca:	f280 81cc 	bge.w	8020c66 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80208ce:	f1bc 0f00 	cmp.w	ip, #0
 80208d2:	f2c0 81c8 	blt.w	8020c66 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80208d6:	f10e 38ff 	add.w	r8, lr, #4294967295
 80208da:	45c4      	cmp	ip, r8
 80208dc:	f280 81c3 	bge.w	8020c66 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80208e0:	b209      	sxth	r1, r1
 80208e2:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80208e4:	fb0c 3301 	mla	r3, ip, r1, r3
 80208e8:	eb04 0803 	add.w	r8, r4, r3
 80208ec:	5ce3      	ldrb	r3, [r4, r3]
 80208ee:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80208f2:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80208f6:	2a00      	cmp	r2, #0
 80208f8:	f000 81aa 	beq.w	8020c50 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
 80208fc:	f898 c001 	ldrb.w	ip, [r8, #1]
 8020900:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8020904:	940b      	str	r4, [sp, #44]	@ 0x2c
 8020906:	0e24      	lsrs	r4, r4, #24
 8020908:	9412      	str	r4, [sp, #72]	@ 0x48
 802090a:	b178      	cbz	r0, 802092c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 802090c:	eb08 0c01 	add.w	ip, r8, r1
 8020910:	f818 1001 	ldrb.w	r1, [r8, r1]
 8020914:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020918:	9108      	str	r1, [sp, #32]
 802091a:	0e09      	lsrs	r1, r1, #24
 802091c:	9110      	str	r1, [sp, #64]	@ 0x40
 802091e:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8020922:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020926:	910c      	str	r1, [sp, #48]	@ 0x30
 8020928:	0e09      	lsrs	r1, r1, #24
 802092a:	9113      	str	r1, [sp, #76]	@ 0x4c
 802092c:	b292      	uxth	r2, r2
 802092e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8020930:	b280      	uxth	r0, r0
 8020932:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8020934:	fb02 f900 	mul.w	r9, r2, r0
 8020938:	0112      	lsls	r2, r2, #4
 802093a:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802093e:	eba2 0809 	sub.w	r8, r2, r9
 8020942:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8020946:	b280      	uxth	r0, r0
 8020948:	fa1f f888 	uxth.w	r8, r8
 802094c:	1a12      	subs	r2, r2, r0
 802094e:	fb08 f101 	mul.w	r1, r8, r1
 8020952:	b292      	uxth	r2, r2
 8020954:	fb02 110e 	mla	r1, r2, lr, r1
 8020958:	fb00 1104 	mla	r1, r0, r4, r1
 802095c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802095e:	fb09 1104 	mla	r1, r9, r4, r1
 8020962:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020966:	2900      	cmp	r1, #0
 8020968:	f000 80f5 	beq.w	8020b56 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 802096c:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8020970:	d01b      	beq.n	80209aa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8020972:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8020976:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802097a:	fb0e fa0a 	mul.w	sl, lr, sl
 802097e:	fb0e fe03 	mul.w	lr, lr, r3
 8020982:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8020986:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802098a:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 802098e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8020992:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8020996:	4453      	add	r3, sl
 8020998:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802099c:	0a1b      	lsrs	r3, r3, #8
 802099e:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80209a2:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80209a6:	ea43 030c 	orr.w	r3, r3, ip
 80209aa:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80209ac:	2cff      	cmp	r4, #255	@ 0xff
 80209ae:	d021      	beq.n	80209f4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 80209b0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80209b2:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 80209b6:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80209b8:	fb04 fb0b 	mul.w	fp, r4, fp
 80209bc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80209be:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80209c2:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80209c4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80209c8:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80209cc:	fb04 fa0a 	mul.w	sl, r4, sl
 80209d0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80209d4:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80209d8:	44de      	add	lr, fp
 80209da:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80209de:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80209e2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80209e6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80209ea:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80209ee:	ea4e 040a 	orr.w	r4, lr, sl
 80209f2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80209f4:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80209f6:	2cff      	cmp	r4, #255	@ 0xff
 80209f8:	d021      	beq.n	8020a3e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 80209fa:	9c08      	ldr	r4, [sp, #32]
 80209fc:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8020a00:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8020a02:	fb04 fb0b 	mul.w	fp, r4, fp
 8020a06:	9c08      	ldr	r4, [sp, #32]
 8020a08:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8020a0c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8020a0e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020a12:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8020a16:	fb04 fa0a 	mul.w	sl, r4, sl
 8020a1a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020a1e:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8020a22:	44de      	add	lr, fp
 8020a24:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020a28:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020a2c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020a30:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020a34:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8020a38:	ea4e 040a 	orr.w	r4, lr, sl
 8020a3c:	9408      	str	r4, [sp, #32]
 8020a3e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8020a40:	2cff      	cmp	r4, #255	@ 0xff
 8020a42:	d021      	beq.n	8020a88 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 8020a44:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8020a46:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8020a4a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8020a4c:	fb04 fb0b 	mul.w	fp, r4, fp
 8020a50:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8020a52:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8020a56:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8020a58:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020a5c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8020a60:	fb04 fa0a 	mul.w	sl, r4, sl
 8020a64:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020a68:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8020a6c:	44de      	add	lr, fp
 8020a6e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020a72:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020a76:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020a7a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020a7e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8020a82:	ea4e 040a 	orr.w	r4, lr, sl
 8020a86:	940c      	str	r4, [sp, #48]	@ 0x30
 8020a88:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8020a8a:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 8020a8e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8020a92:	43c9      	mvns	r1, r1
 8020a94:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8020a98:	9c08      	ldr	r4, [sp, #32]
 8020a9a:	fb08 fc0c 	mul.w	ip, r8, ip
 8020a9e:	fb02 cc0e 	mla	ip, r2, lr, ip
 8020aa2:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8020aa6:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8020aa8:	fb00 cc0e 	mla	ip, r0, lr, ip
 8020aac:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8020ab0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8020ab2:	fb09 cc0e 	mla	ip, r9, lr, ip
 8020ab6:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8020aba:	fb08 f80e 	mul.w	r8, r8, lr
 8020abe:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020ac2:	fa5f fe81 	uxtb.w	lr, r1
 8020ac6:	fb02 8303 	mla	r3, r2, r3, r8
 8020aca:	9a08      	ldr	r2, [sp, #32]
 8020acc:	f8b7 8000 	ldrh.w	r8, [r7]
 8020ad0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020ad4:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8020ad8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8020ada:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8020ade:	fb00 330a 	mla	r3, r0, sl, r3
 8020ae2:	f402 407f 	and.w	r0, r2, #65280	@ 0xff00
 8020ae6:	ea4f 2228 	mov.w	r2, r8, asr #8
 8020aea:	fb09 3900 	mla	r9, r9, r0, r3
 8020aee:	ea4f 00e8 	mov.w	r0, r8, asr #3
 8020af2:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8020af6:	b2c9      	uxtb	r1, r1
 8020af8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020afc:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8020b00:	fb02 f20e 	mul.w	r2, r2, lr
 8020b04:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8020b08:	fb00 f00e 	mul.w	r0, r0, lr
 8020b0c:	1c53      	adds	r3, r2, #1
 8020b0e:	fb01 f10e 	mul.w	r1, r1, lr
 8020b12:	ea4c 0c09 	orr.w	ip, ip, r9
 8020b16:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8020b1a:	ea4f 431c 	mov.w	r3, ip, lsr #16
 8020b1e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020b22:	4a60      	ldr	r2, [pc, #384]	@ (8020ca4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 8020b24:	b2db      	uxtb	r3, r3
 8020b26:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 8020b2a:	1c43      	adds	r3, r0, #1
 8020b2c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8020b30:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8020b34:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8020b38:	00db      	lsls	r3, r3, #3
 8020b3a:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8020b3e:	4313      	orrs	r3, r2
 8020b40:	1c4a      	adds	r2, r1, #1
 8020b42:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8020b46:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8020b4a:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8020b4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8020b52:	f8a7 c000 	strh.w	ip, [r7]
 8020b56:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8020b58:	3702      	adds	r7, #2
 8020b5a:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8020b5c:	441a      	add	r2, r3
 8020b5e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8020b60:	441d      	add	r5, r3
 8020b62:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8020b64:	9225      	str	r2, [sp, #148]	@ 0x94
 8020b66:	3b01      	subs	r3, #1
 8020b68:	9317      	str	r3, [sp, #92]	@ 0x5c
 8020b6a:	e699      	b.n	80208a0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8020b6c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8020b6e:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8020b70:	441c      	add	r4, r3
 8020b72:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8020b74:	441d      	add	r5, r3
 8020b76:	9b07      	ldr	r3, [sp, #28]
 8020b78:	9425      	str	r4, [sp, #148]	@ 0x94
 8020b7a:	3b01      	subs	r3, #1
 8020b7c:	9307      	str	r3, [sp, #28]
 8020b7e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020b80:	3302      	adds	r3, #2
 8020b82:	930a      	str	r3, [sp, #40]	@ 0x28
 8020b84:	e66c      	b.n	8020860 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8020b86:	d024      	beq.n	8020bd2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 8020b88:	9b07      	ldr	r3, [sp, #28]
 8020b8a:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 8020b8c:	3b01      	subs	r3, #1
 8020b8e:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8020b90:	fb00 4003 	mla	r0, r0, r3, r4
 8020b94:	1400      	asrs	r0, r0, #16
 8020b96:	f53f ae80 	bmi.w	802089a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8020b9a:	3901      	subs	r1, #1
 8020b9c:	4288      	cmp	r0, r1
 8020b9e:	f6bf ae7c 	bge.w	802089a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8020ba2:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8020ba4:	fb01 5303 	mla	r3, r1, r3, r5
 8020ba8:	141b      	asrs	r3, r3, #16
 8020baa:	f53f ae76 	bmi.w	802089a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8020bae:	3a01      	subs	r2, #1
 8020bb0:	4293      	cmp	r3, r2
 8020bb2:	f6bf ae72 	bge.w	802089a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8020bb6:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8020bba:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8020bbe:	f1bb 0f00 	cmp.w	fp, #0
 8020bc2:	dc71      	bgt.n	8020ca8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8020bc4:	9b07      	ldr	r3, [sp, #28]
 8020bc6:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8020bca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020bcc:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8020bd0:	930a      	str	r3, [sp, #40]	@ 0x28
 8020bd2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8020bd4:	2b00      	cmp	r3, #0
 8020bd6:	f340 81af 	ble.w	8020f38 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 8020bda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8020bde:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8020be0:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020be4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020be8:	eef0 6a62 	vmov.f32	s13, s5
 8020bec:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020bf0:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020bf4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020bf8:	edcd 6a25 	vstr	s13, [sp, #148]	@ 0x94
 8020bfc:	eef0 6a43 	vmov.f32	s13, s6
 8020c00:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020c04:	ee16 5a90 	vmov	r5, s13
 8020c08:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020c0c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020c10:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020c14:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020c18:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020c1c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020c20:	ee12 2a90 	vmov	r2, s5
 8020c24:	eef0 2a47 	vmov.f32	s5, s14
 8020c28:	fb92 f3f3 	sdiv	r3, r2, r3
 8020c2c:	ee13 2a10 	vmov	r2, s6
 8020c30:	9327      	str	r3, [sp, #156]	@ 0x9c
 8020c32:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8020c34:	eeb0 3a67 	vmov.f32	s6, s15
 8020c38:	fb92 f3f3 	sdiv	r3, r2, r3
 8020c3c:	9328      	str	r3, [sp, #160]	@ 0xa0
 8020c3e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8020c40:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8020c42:	3b01      	subs	r3, #1
 8020c44:	9316      	str	r3, [sp, #88]	@ 0x58
 8020c46:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8020c48:	bf08      	it	eq
 8020c4a:	4613      	moveq	r3, r2
 8020c4c:	9307      	str	r3, [sp, #28]
 8020c4e:	e5f9      	b.n	8020844 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8020c50:	2800      	cmp	r0, #0
 8020c52:	f43f ae6b 	beq.w	802092c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8020c56:	f818 1001 	ldrb.w	r1, [r8, r1]
 8020c5a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020c5e:	9108      	str	r1, [sp, #32]
 8020c60:	0e09      	lsrs	r1, r1, #24
 8020c62:	9110      	str	r1, [sp, #64]	@ 0x40
 8020c64:	e662      	b.n	802092c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8020c66:	f113 0801 	adds.w	r8, r3, #1
 8020c6a:	f53f af74 	bmi.w	8020b56 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8020c6e:	4541      	cmp	r1, r8
 8020c70:	f6ff af71 	blt.w	8020b56 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8020c74:	f11c 0801 	adds.w	r8, ip, #1
 8020c78:	f53f af6d 	bmi.w	8020b56 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8020c7c:	45c6      	cmp	lr, r8
 8020c7e:	f6ff af6a 	blt.w	8020b56 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8020c82:	b209      	sxth	r1, r1
 8020c84:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8020c88:	fa0f f38e 	sxth.w	r3, lr
 8020c8c:	9100      	str	r1, [sp, #0]
 8020c8e:	4639      	mov	r1, r7
 8020c90:	9301      	str	r3, [sp, #4]
 8020c92:	4633      	mov	r3, r6
 8020c94:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8020c98:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8020c9a:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8020c9c:	f7ff fc7b 	bl	8020596 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 8020ca0:	e759      	b.n	8020b56 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8020ca2:	bf00      	nop
 8020ca4:	fffff800 	.word	0xfffff800
 8020ca8:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8020caa:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8020cae:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8020cb0:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8020cb4:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8020cb6:	1427      	asrs	r7, r4, #16
 8020cb8:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8020cba:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020cbe:	142b      	asrs	r3, r5, #16
 8020cc0:	fb01 7303 	mla	r3, r1, r3, r7
 8020cc4:	18e7      	adds	r7, r4, r3
 8020cc6:	5ce3      	ldrb	r3, [r4, r3]
 8020cc8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8020ccc:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8020cd0:	2a00      	cmp	r2, #0
 8020cd2:	f000 8127 	beq.w	8020f24 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 8020cd6:	f897 e001 	ldrb.w	lr, [r7, #1]
 8020cda:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8020cde:	940d      	str	r4, [sp, #52]	@ 0x34
 8020ce0:	0e24      	lsrs	r4, r4, #24
 8020ce2:	9414      	str	r4, [sp, #80]	@ 0x50
 8020ce4:	b170      	cbz	r0, 8020d04 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8020ce6:	eb07 0e01 	add.w	lr, r7, r1
 8020cea:	5c79      	ldrb	r1, [r7, r1]
 8020cec:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020cf0:	9109      	str	r1, [sp, #36]	@ 0x24
 8020cf2:	0e09      	lsrs	r1, r1, #24
 8020cf4:	9111      	str	r1, [sp, #68]	@ 0x44
 8020cf6:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8020cfa:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020cfe:	910e      	str	r1, [sp, #56]	@ 0x38
 8020d00:	0e09      	lsrs	r1, r1, #24
 8020d02:	9115      	str	r1, [sp, #84]	@ 0x54
 8020d04:	b292      	uxth	r2, r2
 8020d06:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8020d08:	b280      	uxth	r0, r0
 8020d0a:	fb02 f800 	mul.w	r8, r2, r0
 8020d0e:	0112      	lsls	r2, r2, #4
 8020d10:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8020d14:	eba2 0e08 	sub.w	lr, r2, r8
 8020d18:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 8020d1c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8020d1e:	b280      	uxth	r0, r0
 8020d20:	fa1f fe8e 	uxth.w	lr, lr
 8020d24:	1a09      	subs	r1, r1, r0
 8020d26:	fb0e f202 	mul.w	r2, lr, r2
 8020d2a:	b289      	uxth	r1, r1
 8020d2c:	fb01 220c 	mla	r2, r1, ip, r2
 8020d30:	fb00 2204 	mla	r2, r0, r4, r2
 8020d34:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8020d36:	fb08 2204 	mla	r2, r8, r4, r2
 8020d3a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8020d3e:	2a00      	cmp	r2, #0
 8020d40:	f000 80e5 	beq.w	8020f0e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 8020d44:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8020d48:	d019      	beq.n	8020d7e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
 8020d4a:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8020d4e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8020d52:	fb0c fa0a 	mul.w	sl, ip, sl
 8020d56:	fb0c fc03 	mul.w	ip, ip, r3
 8020d5a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8020d5e:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8020d62:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 8020d66:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8020d6a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8020d6e:	4453      	add	r3, sl
 8020d70:	0a3f      	lsrs	r7, r7, #8
 8020d72:	0a1b      	lsrs	r3, r3, #8
 8020d74:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8020d78:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8020d7c:	433b      	orrs	r3, r7
 8020d7e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8020d80:	2cff      	cmp	r4, #255	@ 0xff
 8020d82:	d020      	beq.n	8020dc6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
 8020d84:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8020d86:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8020d8a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8020d8c:	4367      	muls	r7, r4
 8020d8e:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8020d90:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020d94:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8020d98:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8020d9a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8020d9e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020da2:	fb04 fa0a 	mul.w	sl, r4, sl
 8020da6:	44bc      	add	ip, r7
 8020da8:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8020dac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020db0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020db4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020db8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020dbc:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8020dc0:	ea4c 040a 	orr.w	r4, ip, sl
 8020dc4:	940d      	str	r4, [sp, #52]	@ 0x34
 8020dc6:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8020dc8:	2cff      	cmp	r4, #255	@ 0xff
 8020dca:	d020      	beq.n	8020e0e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
 8020dcc:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8020dce:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8020dd2:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8020dd4:	4367      	muls	r7, r4
 8020dd6:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8020dd8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020ddc:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8020de0:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8020de2:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8020de6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020dea:	fb04 fa0a 	mul.w	sl, r4, sl
 8020dee:	44bc      	add	ip, r7
 8020df0:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8020df4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020df8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020dfc:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020e00:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020e04:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8020e08:	ea4c 040a 	orr.w	r4, ip, sl
 8020e0c:	9409      	str	r4, [sp, #36]	@ 0x24
 8020e0e:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8020e10:	2cff      	cmp	r4, #255	@ 0xff
 8020e12:	d020      	beq.n	8020e56 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
 8020e14:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8020e16:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8020e1a:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8020e1c:	4367      	muls	r7, r4
 8020e1e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8020e20:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020e24:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8020e28:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8020e2a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8020e2e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020e32:	fb04 fa0a 	mul.w	sl, r4, sl
 8020e36:	44bc      	add	ip, r7
 8020e38:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8020e3c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020e40:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020e44:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020e48:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020e4c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8020e50:	ea4c 040a 	orr.w	r4, ip, sl
 8020e54:	940e      	str	r4, [sp, #56]	@ 0x38
 8020e56:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8020e58:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8020e5c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8020e60:	43d2      	mvns	r2, r2
 8020e62:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8020e66:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8020e68:	b2d2      	uxtb	r2, r2
 8020e6a:	fb0e f707 	mul.w	r7, lr, r7
 8020e6e:	fb01 770c 	mla	r7, r1, ip, r7
 8020e72:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8020e76:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8020e78:	fb00 770c 	mla	r7, r0, ip, r7
 8020e7c:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8020e80:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8020e82:	fb08 770c 	mla	r7, r8, ip, r7
 8020e86:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 8020e8a:	fb0e fe0c 	mul.w	lr, lr, ip
 8020e8e:	0a3f      	lsrs	r7, r7, #8
 8020e90:	fb01 e303 	mla	r3, r1, r3, lr
 8020e94:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8020e96:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8020e9a:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 8020e9e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8020ea0:	fb00 330a 	mla	r3, r0, sl, r3
 8020ea4:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 8020ea8:	fb08 3c0c 	mla	ip, r8, ip, r3
 8020eac:	f8b9 3000 	ldrh.w	r3, [r9]
 8020eb0:	1218      	asrs	r0, r3, #8
 8020eb2:	10d9      	asrs	r1, r3, #3
 8020eb4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020eb8:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8020ebc:	00db      	lsls	r3, r3, #3
 8020ebe:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8020ec2:	4350      	muls	r0, r2
 8020ec4:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8020ec8:	b2db      	uxtb	r3, r3
 8020eca:	4351      	muls	r1, r2
 8020ecc:	ea47 070c 	orr.w	r7, r7, ip
 8020ed0:	4353      	muls	r3, r2
 8020ed2:	1c42      	adds	r2, r0, #1
 8020ed4:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8020ed8:	0c3a      	lsrs	r2, r7, #16
 8020eda:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8020ede:	4a18      	ldr	r2, [pc, #96]	@ (8020f40 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
 8020ee0:	b2c0      	uxtb	r0, r0
 8020ee2:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 8020ee6:	1c4a      	adds	r2, r1, #1
 8020ee8:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8020eec:	0a3a      	lsrs	r2, r7, #8
 8020eee:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8020ef2:	00c9      	lsls	r1, r1, #3
 8020ef4:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8020ef8:	4301      	orrs	r1, r0
 8020efa:	1c58      	adds	r0, r3, #1
 8020efc:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8020f00:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8020f04:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 8020f08:	4308      	orrs	r0, r1
 8020f0a:	f8a9 0000 	strh.w	r0, [r9]
 8020f0e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8020f10:	f109 0902 	add.w	r9, r9, #2
 8020f14:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8020f16:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020f1a:	441a      	add	r2, r3
 8020f1c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8020f1e:	9225      	str	r2, [sp, #148]	@ 0x94
 8020f20:	441d      	add	r5, r3
 8020f22:	e64c      	b.n	8020bbe <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8020f24:	2800      	cmp	r0, #0
 8020f26:	f43f aeed 	beq.w	8020d04 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8020f2a:	5c79      	ldrb	r1, [r7, r1]
 8020f2c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020f30:	9109      	str	r1, [sp, #36]	@ 0x24
 8020f32:	0e09      	lsrs	r1, r1, #24
 8020f34:	9111      	str	r1, [sp, #68]	@ 0x44
 8020f36:	e6e5      	b.n	8020d04 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8020f38:	b01b      	add	sp, #108	@ 0x6c
 8020f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020f3e:	bf00      	nop
 8020f40:	fffff800 	.word	0xfffff800

08020f44 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 8020f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020f48:	b085      	sub	sp, #20
 8020f4a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 8020f4e:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	@ 0x38
 8020f52:	2800      	cmp	r0, #0
 8020f54:	9103      	str	r1, [sp, #12]
 8020f56:	fb00 7406 	mla	r4, r0, r6, r7
 8020f5a:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	@ 0x3c
 8020f5e:	f89d 1048 	ldrb.w	r1, [sp, #72]	@ 0x48
 8020f62:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 8020f66:	f89d e04c 	ldrb.w	lr, [sp, #76]	@ 0x4c
 8020f6a:	eb03 0904 	add.w	r9, r3, r4
 8020f6e:	9501      	str	r5, [sp, #4]
 8020f70:	f2c0 8150 	blt.w	8021214 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 8020f74:	4583      	cmp	fp, r0
 8020f76:	f340 814d 	ble.w	8021214 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 8020f7a:	2f00      	cmp	r7, #0
 8020f7c:	f2c0 8146 	blt.w	802120c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 8020f80:	42be      	cmp	r6, r7
 8020f82:	f340 8143 	ble.w	802120c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 8020f86:	f813 c004 	ldrb.w	ip, [r3, r4]
 8020f8a:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 8020f8e:	f64f 041f 	movw	r4, #63519	@ 0xf81f
 8020f92:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8020f96:	f423 65fc 	bic.w	r5, r3, #2016	@ 0x7e0
 8020f9a:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8020f9e:	4355      	muls	r5, r2
 8020fa0:	fb0c f203 	mul.w	r2, ip, r3
 8020fa4:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 8020fa8:	f605 0501 	addw	r5, r5, #2049	@ 0x801
 8020fac:	441d      	add	r5, r3
 8020fae:	f102 0320 	add.w	r3, r2, #32
 8020fb2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020fb6:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 8020fba:	0a1b      	lsrs	r3, r3, #8
 8020fbc:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8020fc0:	431c      	orrs	r4, r3
 8020fc2:	1c7b      	adds	r3, r7, #1
 8020fc4:	f100 812b 	bmi.w	802121e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 8020fc8:	429e      	cmp	r6, r3
 8020fca:	f340 8128 	ble.w	802121e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 8020fce:	2900      	cmp	r1, #0
 8020fd0:	f000 8128 	beq.w	8021224 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
 8020fd4:	9a01      	ldr	r2, [sp, #4]
 8020fd6:	f899 3001 	ldrb.w	r3, [r9, #1]
 8020fda:	8855      	ldrh	r5, [r2, #2]
 8020fdc:	ea4f 08e3 	mov.w	r8, r3, asr #3
 8020fe0:	f425 62fc 	bic.w	r2, r5, #2016	@ 0x7e0
 8020fe4:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8020fe8:	fb08 f802 	mul.w	r8, r8, r2
 8020fec:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8020ff0:	435d      	muls	r5, r3
 8020ff2:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 8020ff6:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8020ffa:	44d0      	add	r8, sl
 8020ffc:	f105 0a20 	add.w	sl, r5, #32
 8021000:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8021004:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8021008:	0a2d      	lsrs	r5, r5, #8
 802100a:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 802100e:	432a      	orrs	r2, r5
 8021010:	3001      	adds	r0, #1
 8021012:	f100 810d 	bmi.w	8021230 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 8021016:	4583      	cmp	fp, r0
 8021018:	f340 810a 	ble.w	8021230 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 802101c:	f1be 0f00 	cmp.w	lr, #0
 8021020:	f000 810b 	beq.w	802123a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
 8021024:	2f00      	cmp	r7, #0
 8021026:	f2c0 8100 	blt.w	802122a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 802102a:	42be      	cmp	r6, r7
 802102c:	f340 80fd 	ble.w	802122a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 8021030:	9801      	ldr	r0, [sp, #4]
 8021032:	f64f 0b1f 	movw	fp, #63519	@ 0xf81f
 8021036:	f819 5006 	ldrb.w	r5, [r9, r6]
 802103a:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 802103e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8021042:	f428 60fc 	bic.w	r0, r8, #2016	@ 0x7e0
 8021046:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 802104a:	fb0a fa00 	mul.w	sl, sl, r0
 802104e:	fb05 f808 	mul.w	r8, r5, r8
 8021052:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 8021056:	f60a 0a01 	addw	sl, sl, #2049	@ 0x801
 802105a:	4482      	add	sl, r0
 802105c:	f108 0020 	add.w	r0, r8, #32
 8021060:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8021064:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 8021068:	0a00      	lsrs	r0, r0, #8
 802106a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802106e:	ea4b 0b00 	orr.w	fp, fp, r0
 8021072:	3701      	adds	r7, #1
 8021074:	f100 80e6 	bmi.w	8021244 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 8021078:	42be      	cmp	r6, r7
 802107a:	f340 80e3 	ble.w	8021244 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 802107e:	2900      	cmp	r1, #0
 8021080:	f000 80e3 	beq.w	802124a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
 8021084:	3601      	adds	r6, #1
 8021086:	9801      	ldr	r0, [sp, #4]
 8021088:	f819 7006 	ldrb.w	r7, [r9, r6]
 802108c:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 8021090:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8021094:	f420 66fc 	bic.w	r6, r0, #2016	@ 0x7e0
 8021098:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802109c:	fb09 f906 	mul.w	r9, r9, r6
 80210a0:	fb07 f800 	mul.w	r8, r7, r0
 80210a4:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 80210a8:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 80210ac:	f609 0901 	addw	r9, r9, #2049	@ 0x801
 80210b0:	44d1      	add	r9, sl
 80210b2:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 80210b6:	f108 0020 	add.w	r0, r8, #32
 80210ba:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 80210be:	0a00      	lsrs	r0, r0, #8
 80210c0:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80210c4:	4330      	orrs	r0, r6
 80210c6:	b28e      	uxth	r6, r1
 80210c8:	fa1f f98e 	uxth.w	r9, lr
 80210cc:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 80210d0:	f424 64fc 	bic.w	r4, r4, #2016	@ 0x7e0
 80210d4:	fb06 f809 	mul.w	r8, r6, r9
 80210d8:	0136      	lsls	r6, r6, #4
 80210da:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80210de:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 80210e2:	9601      	str	r6, [sp, #4]
 80210e4:	ea4a 0404 	orr.w	r4, sl, r4
 80210e8:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80210ec:	fa1f f689 	uxth.w	r6, r9
 80210f0:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 80210f4:	fb11 f90e 	smulbb	r9, r1, lr
 80210f8:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80210fc:	9602      	str	r6, [sp, #8]
 80210fe:	4626      	mov	r6, r4
 8021100:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 8021104:	f1ce 0410 	rsb	r4, lr, #16
 8021108:	ea4a 0202 	orr.w	r2, sl, r2
 802110c:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8021110:	1a64      	subs	r4, r4, r1
 8021112:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 8021116:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 802111a:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 802111e:	434a      	muls	r2, r1
 8021120:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8021124:	ea4a 0000 	orr.w	r0, sl, r0
 8021128:	9903      	ldr	r1, [sp, #12]
 802112a:	fb04 2406 	mla	r4, r4, r6, r2
 802112e:	9e02      	ldr	r6, [sp, #8]
 8021130:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8021134:	fb09 4200 	mla	r2, r9, r0, r4
 8021138:	ea4f 440b 	mov.w	r4, fp, lsl #16
 802113c:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
 8021140:	8808      	ldrh	r0, [r1, #0]
 8021142:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8021146:	f89d 1050 	ldrb.w	r1, [sp, #80]	@ 0x50
 802114a:	ea44 0b0b 	orr.w	fp, r4, fp
 802114e:	9c01      	ldr	r4, [sp, #4]
 8021150:	b289      	uxth	r1, r1
 8021152:	f5c4 7480 	rsb	r4, r4, #256	@ 0x100
 8021156:	fb0e 2e0b 	mla	lr, lr, fp, r2
 802115a:	1ba4      	subs	r4, r4, r6
 802115c:	9e01      	ldr	r6, [sp, #4]
 802115e:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8021162:	eba6 0608 	sub.w	r6, r6, r8
 8021166:	b2a4      	uxth	r4, r4
 8021168:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 802116c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8021170:	b2b6      	uxth	r6, r6
 8021172:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8021176:	4373      	muls	r3, r6
 8021178:	ea42 0e0e 	orr.w	lr, r2, lr
 802117c:	fb0c 3304 	mla	r3, ip, r4, r3
 8021180:	9c02      	ldr	r4, [sp, #8]
 8021182:	fa1f f28e 	uxth.w	r2, lr
 8021186:	fb04 3505 	mla	r5, r4, r5, r3
 802118a:	10d4      	asrs	r4, r2, #3
 802118c:	fb08 5707 	mla	r7, r8, r7, r5
 8021190:	1215      	asrs	r5, r2, #8
 8021192:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 8021196:	00d2      	lsls	r2, r2, #3
 8021198:	f3c7 2707 	ubfx	r7, r7, #8, #8
 802119c:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 80211a0:	b2d2      	uxtb	r2, r2
 80211a2:	434f      	muls	r7, r1
 80211a4:	1c7b      	adds	r3, r7, #1
 80211a6:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 80211aa:	1203      	asrs	r3, r0, #8
 80211ac:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 80211b0:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 80211b4:	b2ff      	uxtb	r7, r7
 80211b6:	fb13 f307 	smulbb	r3, r3, r7
 80211ba:	fb05 3501 	mla	r5, r5, r1, r3
 80211be:	10c3      	asrs	r3, r0, #3
 80211c0:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 80211c4:	b2ad      	uxth	r5, r5
 80211c6:	fb13 f307 	smulbb	r3, r3, r7
 80211ca:	fb04 3401 	mla	r4, r4, r1, r3
 80211ce:	00c3      	lsls	r3, r0, #3
 80211d0:	b2db      	uxtb	r3, r3
 80211d2:	b2a4      	uxth	r4, r4
 80211d4:	fb13 f307 	smulbb	r3, r3, r7
 80211d8:	fb02 3101 	mla	r1, r2, r1, r3
 80211dc:	1c6b      	adds	r3, r5, #1
 80211de:	1c62      	adds	r2, r4, #1
 80211e0:	b289      	uxth	r1, r1
 80211e2:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80211e6:	1c4b      	adds	r3, r1, #1
 80211e8:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 80211ec:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 80211f0:	9a03      	ldr	r2, [sp, #12]
 80211f2:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80211f6:	0964      	lsrs	r4, r4, #5
 80211f8:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80211fc:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 8021200:	432b      	orrs	r3, r5
 8021202:	4323      	orrs	r3, r4
 8021204:	8013      	strh	r3, [r2, #0]
 8021206:	b005      	add	sp, #20
 8021208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802120c:	f04f 0c00 	mov.w	ip, #0
 8021210:	4664      	mov	r4, ip
 8021212:	e6d6      	b.n	8020fc2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
 8021214:	2300      	movs	r3, #0
 8021216:	469c      	mov	ip, r3
 8021218:	461a      	mov	r2, r3
 802121a:	461c      	mov	r4, r3
 802121c:	e6f8      	b.n	8021010 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 802121e:	2300      	movs	r3, #0
 8021220:	461a      	mov	r2, r3
 8021222:	e6f5      	b.n	8021010 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8021224:	460b      	mov	r3, r1
 8021226:	460a      	mov	r2, r1
 8021228:	e6f2      	b.n	8021010 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 802122a:	2500      	movs	r5, #0
 802122c:	46ab      	mov	fp, r5
 802122e:	e720      	b.n	8021072 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
 8021230:	2700      	movs	r7, #0
 8021232:	463d      	mov	r5, r7
 8021234:	4638      	mov	r0, r7
 8021236:	46bb      	mov	fp, r7
 8021238:	e745      	b.n	80210c6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 802123a:	4677      	mov	r7, lr
 802123c:	4675      	mov	r5, lr
 802123e:	4670      	mov	r0, lr
 8021240:	46f3      	mov	fp, lr
 8021242:	e740      	b.n	80210c6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8021244:	2700      	movs	r7, #0
 8021246:	4638      	mov	r0, r7
 8021248:	e73d      	b.n	80210c6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 802124a:	460f      	mov	r7, r1
 802124c:	4608      	mov	r0, r1
 802124e:	e73a      	b.n	80210c6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

08021250 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021254:	b097      	sub	sp, #92	@ 0x5c
 8021256:	9214      	str	r2, [sp, #80]	@ 0x50
 8021258:	9308      	str	r3, [sp, #32]
 802125a:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 802125c:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 8021260:	9015      	str	r0, [sp, #84]	@ 0x54
 8021262:	9312      	str	r3, [sp, #72]	@ 0x48
 8021264:	6850      	ldr	r0, [r2, #4]
 8021266:	9111      	str	r1, [sp, #68]	@ 0x44
 8021268:	6812      	ldr	r2, [r2, #0]
 802126a:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 802126e:	fb00 1303 	mla	r3, r0, r3, r1
 8021272:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8021276:	9309      	str	r3, [sp, #36]	@ 0x24
 8021278:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802127a:	681b      	ldr	r3, [r3, #0]
 802127c:	930b      	str	r3, [sp, #44]	@ 0x2c
 802127e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8021280:	685b      	ldr	r3, [r3, #4]
 8021282:	930c      	str	r3, [sp, #48]	@ 0x30
 8021284:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8021288:	930a      	str	r3, [sp, #40]	@ 0x28
 802128a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802128c:	2b00      	cmp	r3, #0
 802128e:	dc03      	bgt.n	8021298 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8021290:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8021292:	2b00      	cmp	r3, #0
 8021294:	f340 83cd 	ble.w	8021a32 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
 8021298:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802129a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802129e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80212a2:	1e48      	subs	r0, r1, #1
 80212a4:	1e55      	subs	r5, r2, #1
 80212a6:	9b08      	ldr	r3, [sp, #32]
 80212a8:	2b00      	cmp	r3, #0
 80212aa:	f340 81a5 	ble.w	80215f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 80212ae:	9e21      	ldr	r6, [sp, #132]	@ 0x84
 80212b0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80212b2:	1436      	asrs	r6, r6, #16
 80212b4:	ea4f 4323 	mov.w	r3, r3, asr #16
 80212b8:	d406      	bmi.n	80212c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80212ba:	4286      	cmp	r6, r0
 80212bc:	da04      	bge.n	80212c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80212be:	2b00      	cmp	r3, #0
 80212c0:	db02      	blt.n	80212c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80212c2:	42ab      	cmp	r3, r5
 80212c4:	f2c0 8199 	blt.w	80215fa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 80212c8:	3601      	adds	r6, #1
 80212ca:	f100 8186 	bmi.w	80215da <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80212ce:	42b1      	cmp	r1, r6
 80212d0:	f2c0 8183 	blt.w	80215da <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80212d4:	3301      	adds	r3, #1
 80212d6:	f100 8180 	bmi.w	80215da <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80212da:	429a      	cmp	r2, r3
 80212dc:	f2c0 817d 	blt.w	80215da <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80212e0:	9b08      	ldr	r3, [sp, #32]
 80212e2:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 80212e6:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 80212e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80212ea:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80212ec:	2b00      	cmp	r3, #0
 80212ee:	f340 81a6 	ble.w	802163e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 80212f2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80212f4:	9d21      	ldr	r5, [sp, #132]	@ 0x84
 80212f6:	1418      	asrs	r0, r3, #16
 80212f8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80212fa:	142d      	asrs	r5, r5, #16
 80212fc:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8021300:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8021302:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8021306:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8021308:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 802130c:	f100 81fa 	bmi.w	8021704 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8021310:	f102 3eff 	add.w	lr, r2, #4294967295
 8021314:	4575      	cmp	r5, lr
 8021316:	f280 81f5 	bge.w	8021704 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 802131a:	2800      	cmp	r0, #0
 802131c:	f2c0 81f2 	blt.w	8021704 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8021320:	f103 3eff 	add.w	lr, r3, #4294967295
 8021324:	4570      	cmp	r0, lr
 8021326:	f280 81ed 	bge.w	8021704 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 802132a:	b212      	sxth	r2, r2
 802132c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802132e:	fa1f fe81 	uxth.w	lr, r1
 8021332:	fb00 5002 	mla	r0, r0, r2, r5
 8021336:	ea4f 150e 	mov.w	r5, lr, lsl #4
 802133a:	eb03 0a00 	add.w	sl, r3, r0
 802133e:	f813 9000 	ldrb.w	r9, [r3, r0]
 8021342:	f5c5 7380 	rsb	r3, r5, #256	@ 0x100
 8021346:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802134a:	b29b      	uxth	r3, r3
 802134c:	f1bc 0f00 	cmp.w	ip, #0
 8021350:	f000 81bb 	beq.w	80216ca <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 8021354:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8021358:	eb0a 0b02 	add.w	fp, sl, r2
 802135c:	fa1f fa8c 	uxth.w	sl, ip
 8021360:	940d      	str	r4, [sp, #52]	@ 0x34
 8021362:	fb0a fe0e 	mul.w	lr, sl, lr
 8021366:	f89b 4001 	ldrb.w	r4, [fp, #1]
 802136a:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 802136e:	eba5 050e 	sub.w	r5, r5, lr
 8021372:	940e      	str	r4, [sp, #56]	@ 0x38
 8021374:	fa1f fa8a 	uxth.w	sl, sl
 8021378:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802137a:	b2ad      	uxth	r5, r5
 802137c:	eba3 030a 	sub.w	r3, r3, sl
 8021380:	fb08 f505 	mul.w	r5, r8, r5
 8021384:	b29b      	uxth	r3, r3
 8021386:	fb09 5303 	mla	r3, r9, r3, r5
 802138a:	fb0a 3304 	mla	r3, sl, r4, r3
 802138e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8021390:	fb0e 3304 	mla	r3, lr, r4, r3
 8021394:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021398:	2b00      	cmp	r3, #0
 802139a:	f000 8111 	beq.w	80215c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 802139e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80213a0:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 80213a4:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 80213a8:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 80213ac:	f000 8192 	beq.w	80216d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 80213b0:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 80213b4:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80213b8:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80213bc:	fb0a fe0e 	mul.w	lr, sl, lr
 80213c0:	fb09 f000 	mul.w	r0, r9, r0
 80213c4:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 80213c8:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 80213cc:	f100 0b20 	add.w	fp, r0, #32
 80213d0:	44ce      	add	lr, r9
 80213d2:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 80213d6:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80213da:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80213de:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 80213e2:	ea4e 0909 	orr.w	r9, lr, r9
 80213e6:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 80213ea:	8868      	ldrh	r0, [r5, #2]
 80213ec:	d019      	beq.n	8021422 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 80213ee:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 80213f2:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80213f6:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80213fa:	fb0a fe0e 	mul.w	lr, sl, lr
 80213fe:	fb08 f800 	mul.w	r8, r8, r0
 8021402:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8021406:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 802140a:	f108 0b20 	add.w	fp, r8, #32
 802140e:	4486      	add	lr, r0
 8021410:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8021414:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8021418:	0a00      	lsrs	r0, r0, #8
 802141a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802141e:	ea4e 0000 	orr.w	r0, lr, r0
 8021422:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8021426:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 802142a:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 802142e:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8021432:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 8021436:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 802143a:	ea4e 0909 	orr.w	r9, lr, r9
 802143e:	ea4a 0000 	orr.w	r0, sl, r0
 8021442:	f1bc 0f00 	cmp.w	ip, #0
 8021446:	f000 8147 	beq.w	80216d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 802144a:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 802144e:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8021450:	3a01      	subs	r2, #1
 8021452:	2cff      	cmp	r4, #255	@ 0xff
 8021454:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8021458:	f102 0202 	add.w	r2, r2, #2
 802145c:	eb05 0e02 	add.w	lr, r5, r2
 8021460:	5aaa      	ldrh	r2, [r5, r2]
 8021462:	d018      	beq.n	8021496 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8021464:	f422 65fc 	bic.w	r5, r2, #2016	@ 0x7e0
 8021468:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802146c:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8021470:	fb04 fa02 	mul.w	sl, r4, r2
 8021474:	fb08 f805 	mul.w	r8, r8, r5
 8021478:	f10a 0520 	add.w	r5, sl, #32
 802147c:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8021480:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8021484:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8021488:	4442      	add	r2, r8
 802148a:	0a2d      	lsrs	r5, r5, #8
 802148c:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8021490:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8021494:	432a      	orrs	r2, r5
 8021496:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8021498:	f8be 5002 	ldrh.w	r5, [lr, #2]
 802149c:	2cff      	cmp	r4, #255	@ 0xff
 802149e:	d01a      	beq.n	80214d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
 80214a0:	f425 6efc 	bic.w	lr, r5, #2016	@ 0x7e0
 80214a4:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80214a8:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80214ac:	fb04 fa05 	mul.w	sl, r4, r5
 80214b0:	fb08 f80e 	mul.w	r8, r8, lr
 80214b4:	f10a 0e20 	add.w	lr, sl, #32
 80214b8:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 80214bc:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 80214c0:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 80214c4:	4445      	add	r5, r8
 80214c6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80214ca:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 80214ce:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 80214d2:	ea45 050e 	orr.w	r5, r5, lr
 80214d6:	fb1c fe01 	smulbb	lr, ip, r1
 80214da:	f1cc 0810 	rsb	r8, ip, #16
 80214de:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80214e2:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 80214e6:	ea4f 0eee 	mov.w	lr, lr, asr #3
 80214ea:	eba8 0801 	sub.w	r8, r8, r1
 80214ee:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 80214f2:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80214f6:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 80214fa:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 80214fe:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8021502:	ea4a 0202 	orr.w	r2, sl, r2
 8021506:	4341      	muls	r1, r0
 8021508:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 802150c:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8021510:	fb09 1108 	mla	r1, r9, r8, r1
 8021514:	ea4b 0505 	orr.w	r5, fp, r5
 8021518:	fb0c 1102 	mla	r1, ip, r2, r1
 802151c:	fb0e 1e05 	mla	lr, lr, r5, r1
 8021520:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8021524:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8021528:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802152c:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8021530:	ea42 0e0e 	orr.w	lr, r2, lr
 8021534:	fa1f f28e 	uxth.w	r2, lr
 8021538:	2bff      	cmp	r3, #255	@ 0xff
 802153a:	d103      	bne.n	8021544 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802153c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 802153e:	29ff      	cmp	r1, #255	@ 0xff
 8021540:	f000 80de 	beq.w	8021700 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8021544:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8021546:	1215      	asrs	r5, r2, #8
 8021548:	8838      	ldrh	r0, [r7, #0]
 802154a:	434b      	muls	r3, r1
 802154c:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8021550:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8021552:	f103 0c01 	add.w	ip, r3, #1
 8021556:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 802155a:	ea6f 2323 	mvn.w	r3, r3, asr #8
 802155e:	fa5f fc83 	uxtb.w	ip, r3
 8021562:	1203      	asrs	r3, r0, #8
 8021564:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8021568:	fb13 f30c 	smulbb	r3, r3, ip
 802156c:	fb05 3501 	mla	r5, r5, r1, r3
 8021570:	10c3      	asrs	r3, r0, #3
 8021572:	10d1      	asrs	r1, r2, #3
 8021574:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8021578:	00d2      	lsls	r2, r2, #3
 802157a:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 802157e:	b2ad      	uxth	r5, r5
 8021580:	fb13 f30c 	smulbb	r3, r3, ip
 8021584:	b2d2      	uxtb	r2, r2
 8021586:	fb01 3104 	mla	r1, r1, r4, r3
 802158a:	00c3      	lsls	r3, r0, #3
 802158c:	b2db      	uxtb	r3, r3
 802158e:	b289      	uxth	r1, r1
 8021590:	fb13 f30c 	smulbb	r3, r3, ip
 8021594:	fb02 3304 	mla	r3, r2, r4, r3
 8021598:	b29a      	uxth	r2, r3
 802159a:	1c6b      	adds	r3, r5, #1
 802159c:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80215a0:	1c53      	adds	r3, r2, #1
 80215a2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80215a6:	1c4a      	adds	r2, r1, #1
 80215a8:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 80215ac:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80215b0:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80215b4:	0949      	lsrs	r1, r1, #5
 80215b6:	432b      	orrs	r3, r5
 80215b8:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 80215bc:	430b      	orrs	r3, r1
 80215be:	803b      	strh	r3, [r7, #0]
 80215c0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80215c2:	3702      	adds	r7, #2
 80215c4:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80215c6:	4413      	add	r3, r2
 80215c8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80215ca:	9321      	str	r3, [sp, #132]	@ 0x84
 80215cc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80215ce:	441a      	add	r2, r3
 80215d0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80215d2:	3b01      	subs	r3, #1
 80215d4:	9222      	str	r2, [sp, #136]	@ 0x88
 80215d6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80215d8:	e687      	b.n	80212ea <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80215da:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80215dc:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80215de:	9c22      	ldr	r4, [sp, #136]	@ 0x88
 80215e0:	4433      	add	r3, r6
 80215e2:	9321      	str	r3, [sp, #132]	@ 0x84
 80215e4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80215e6:	441c      	add	r4, r3
 80215e8:	9b08      	ldr	r3, [sp, #32]
 80215ea:	3b01      	subs	r3, #1
 80215ec:	9422      	str	r4, [sp, #136]	@ 0x88
 80215ee:	9308      	str	r3, [sp, #32]
 80215f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80215f2:	3302      	adds	r3, #2
 80215f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80215f6:	e656      	b.n	80212a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 80215f8:	d028      	beq.n	802164c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 80215fa:	9b08      	ldr	r3, [sp, #32]
 80215fc:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 80215fe:	3b01      	subs	r3, #1
 8021600:	9d21      	ldr	r5, [sp, #132]	@ 0x84
 8021602:	fb00 5003 	mla	r0, r0, r3, r5
 8021606:	1400      	asrs	r0, r0, #16
 8021608:	f53f ae6a 	bmi.w	80212e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802160c:	3901      	subs	r1, #1
 802160e:	4288      	cmp	r0, r1
 8021610:	f6bf ae66 	bge.w	80212e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8021614:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8021616:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8021618:	fb01 0303 	mla	r3, r1, r3, r0
 802161c:	141b      	asrs	r3, r3, #16
 802161e:	f53f ae5f 	bmi.w	80212e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8021622:	3a01      	subs	r2, #1
 8021624:	4293      	cmp	r3, r2
 8021626:	f6bf ae5b 	bge.w	80212e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802162a:	9b08      	ldr	r3, [sp, #32]
 802162c:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 8021630:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
 8021634:	9313      	str	r3, [sp, #76]	@ 0x4c
 8021636:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8021638:	2b00      	cmp	r3, #0
 802163a:	f300 8082 	bgt.w	8021742 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 802163e:	9b08      	ldr	r3, [sp, #32]
 8021640:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021644:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021646:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 802164a:	9309      	str	r3, [sp, #36]	@ 0x24
 802164c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802164e:	2b00      	cmp	r3, #0
 8021650:	f340 81ef 	ble.w	8021a32 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
 8021654:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8021658:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802165a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802165e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021662:	eef0 6a62 	vmov.f32	s13, s5
 8021666:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802166a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802166e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021672:	edcd 6a21 	vstr	s13, [sp, #132]	@ 0x84
 8021676:	eef0 6a43 	vmov.f32	s13, s6
 802167a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802167e:	edcd 6a22 	vstr	s13, [sp, #136]	@ 0x88
 8021682:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021686:	ee61 7a27 	vmul.f32	s15, s2, s15
 802168a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802168e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021692:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021696:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802169a:	ee12 2a90 	vmov	r2, s5
 802169e:	eef0 2a47 	vmov.f32	s5, s14
 80216a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80216a6:	ee13 2a10 	vmov	r2, s6
 80216aa:	9323      	str	r3, [sp, #140]	@ 0x8c
 80216ac:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80216ae:	eeb0 3a67 	vmov.f32	s6, s15
 80216b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80216b6:	9324      	str	r3, [sp, #144]	@ 0x90
 80216b8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80216ba:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80216bc:	3b01      	subs	r3, #1
 80216be:	9311      	str	r3, [sp, #68]	@ 0x44
 80216c0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80216c2:	bf08      	it	eq
 80216c4:	4613      	moveq	r3, r2
 80216c6:	9308      	str	r3, [sp, #32]
 80216c8:	e5df      	b.n	802128a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80216ca:	fb08 f505 	mul.w	r5, r8, r5
 80216ce:	fb09 5303 	mla	r3, r9, r3, r5
 80216d2:	e65f      	b.n	8021394 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 80216d4:	4681      	mov	r9, r0
 80216d6:	e686      	b.n	80213e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 80216d8:	f1c1 0210 	rsb	r2, r1, #16
 80216dc:	4341      	muls	r1, r0
 80216de:	fb09 1902 	mla	r9, r9, r2, r1
 80216e2:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80216e6:	ea4f 5259 	mov.w	r2, r9, lsr #21
 80216ea:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80216ee:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80216f2:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 80216f6:	ea42 0909 	orr.w	r9, r2, r9
 80216fa:	fa1f f289 	uxth.w	r2, r9
 80216fe:	e71b      	b.n	8021538 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 8021700:	803a      	strh	r2, [r7, #0]
 8021702:	e75d      	b.n	80215c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8021704:	f115 0e01 	adds.w	lr, r5, #1
 8021708:	f53f af5a 	bmi.w	80215c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 802170c:	4572      	cmp	r2, lr
 802170e:	f6ff af57 	blt.w	80215c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8021712:	f110 0e01 	adds.w	lr, r0, #1
 8021716:	f53f af53 	bmi.w	80215c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 802171a:	4573      	cmp	r3, lr
 802171c:	f6ff af50 	blt.w	80215c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8021720:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8021722:	b21b      	sxth	r3, r3
 8021724:	b212      	sxth	r2, r2
 8021726:	9502      	str	r5, [sp, #8]
 8021728:	9301      	str	r3, [sp, #4]
 802172a:	9200      	str	r2, [sp, #0]
 802172c:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8021730:	e9cd c405 	strd	ip, r4, [sp, #20]
 8021734:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	@ 0x2c
 8021738:	4639      	mov	r1, r7
 802173a:	9815      	ldr	r0, [sp, #84]	@ 0x54
 802173c:	f7ff fc02 	bl	8020f44 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 8021740:	e73e      	b.n	80215c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8021742:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8021744:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8021748:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802174a:	f3c3 3503 	ubfx	r5, r3, #12, #4
 802174e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8021750:	fa1f fc82 	uxth.w	ip, r2
 8021754:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021758:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802175a:	ea4f 100c 	mov.w	r0, ip, lsl #4
 802175e:	141f      	asrs	r7, r3, #16
 8021760:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8021762:	141b      	asrs	r3, r3, #16
 8021764:	fb01 3707 	mla	r7, r1, r7, r3
 8021768:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802176a:	eb03 0a07 	add.w	sl, r3, r7
 802176e:	f813 9007 	ldrb.w	r9, [r3, r7]
 8021772:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 8021776:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802177a:	b29b      	uxth	r3, r3
 802177c:	2d00      	cmp	r5, #0
 802177e:	f000 813d 	beq.w	80219fc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>
 8021782:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8021786:	eb0a 0b01 	add.w	fp, sl, r1
 802178a:	fa1f fa85 	uxth.w	sl, r5
 802178e:	940f      	str	r4, [sp, #60]	@ 0x3c
 8021790:	fb0a fc0c 	mul.w	ip, sl, ip
 8021794:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8021798:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 802179c:	eba0 000c 	sub.w	r0, r0, ip
 80217a0:	9410      	str	r4, [sp, #64]	@ 0x40
 80217a2:	fa1f fa8a 	uxth.w	sl, sl
 80217a6:	b280      	uxth	r0, r0
 80217a8:	eba3 030a 	sub.w	r3, r3, sl
 80217ac:	fb08 f000 	mul.w	r0, r8, r0
 80217b0:	b29b      	uxth	r3, r3
 80217b2:	fb09 0303 	mla	r3, r9, r3, r0
 80217b6:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80217b8:	fb0a 3300 	mla	r3, sl, r0, r3
 80217bc:	fb0c 3304 	mla	r3, ip, r4, r3
 80217c0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80217c4:	2b00      	cmp	r3, #0
 80217c6:	f000 810b 	beq.w	80219e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
 80217ca:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80217cc:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 80217d0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80217d2:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 80217d6:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 80217da:	f000 8114 	beq.w	8021a06 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
 80217de:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 80217e2:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80217e6:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 80217ea:	fb0a fc0c 	mul.w	ip, sl, ip
 80217ee:	fb09 f707 	mul.w	r7, r9, r7
 80217f2:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 80217f6:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 80217fa:	f107 0b20 	add.w	fp, r7, #32
 80217fe:	44cc      	add	ip, r9
 8021800:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8021804:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8021808:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802180c:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8021810:	ea4c 0909 	orr.w	r9, ip, r9
 8021814:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8021818:	8847      	ldrh	r7, [r0, #2]
 802181a:	d019      	beq.n	8021850 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x600>
 802181c:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 8021820:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8021824:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8021828:	fb0a fc0c 	mul.w	ip, sl, ip
 802182c:	fb08 f807 	mul.w	r8, r8, r7
 8021830:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8021834:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 8021838:	f108 0b20 	add.w	fp, r8, #32
 802183c:	44bc      	add	ip, r7
 802183e:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8021842:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8021846:	0a3f      	lsrs	r7, r7, #8
 8021848:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 802184c:	ea4c 0707 	orr.w	r7, ip, r7
 8021850:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8021854:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8021858:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 802185c:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 8021860:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8021864:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8021868:	ea4c 0909 	orr.w	r9, ip, r9
 802186c:	ea4a 0707 	orr.w	r7, sl, r7
 8021870:	2d00      	cmp	r5, #0
 8021872:	f000 80ca 	beq.w	8021a0a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ba>
 8021876:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 802187a:	3901      	subs	r1, #1
 802187c:	0049      	lsls	r1, r1, #1
 802187e:	3102      	adds	r1, #2
 8021880:	eb00 0c01 	add.w	ip, r0, r1
 8021884:	5a41      	ldrh	r1, [r0, r1]
 8021886:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8021888:	28ff      	cmp	r0, #255	@ 0xff
 802188a:	d019      	beq.n	80218c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 802188c:	f421 60fc 	bic.w	r0, r1, #2016	@ 0x7e0
 8021890:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8021892:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8021896:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802189a:	fb04 fa01 	mul.w	sl, r4, r1
 802189e:	fb08 f800 	mul.w	r8, r8, r0
 80218a2:	f10a 0020 	add.w	r0, sl, #32
 80218a6:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 80218aa:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 80218ae:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 80218b2:	4441      	add	r1, r8
 80218b4:	0a00      	lsrs	r0, r0, #8
 80218b6:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 80218ba:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80218be:	4301      	orrs	r1, r0
 80218c0:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80218c2:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 80218c6:	2cff      	cmp	r4, #255	@ 0xff
 80218c8:	d01a      	beq.n	8021900 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b0>
 80218ca:	f420 6cfc 	bic.w	ip, r0, #2016	@ 0x7e0
 80218ce:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80218d2:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80218d6:	fb04 fa00 	mul.w	sl, r4, r0
 80218da:	fb08 f80c 	mul.w	r8, r8, ip
 80218de:	f10a 0c20 	add.w	ip, sl, #32
 80218e2:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 80218e6:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 80218ea:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 80218ee:	4440      	add	r0, r8
 80218f0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80218f4:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 80218f8:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 80218fc:	ea40 000c 	orr.w	r0, r0, ip
 8021900:	fb15 fc02 	smulbb	ip, r5, r2
 8021904:	f1c5 0810 	rsb	r8, r5, #16
 8021908:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 802190c:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8021910:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8021914:	eba8 0802 	sub.w	r8, r8, r2
 8021918:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 802191c:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8021920:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8021924:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8021928:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 802192c:	ea4a 0101 	orr.w	r1, sl, r1
 8021930:	437a      	muls	r2, r7
 8021932:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8021936:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 802193a:	fb09 2208 	mla	r2, r9, r8, r2
 802193e:	ea4b 0000 	orr.w	r0, fp, r0
 8021942:	fb05 2201 	mla	r2, r5, r1, r2
 8021946:	fb0c 2200 	mla	r2, ip, r0, r2
 802194a:	0d57      	lsrs	r7, r2, #21
 802194c:	0952      	lsrs	r2, r2, #5
 802194e:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8021952:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8021956:	433a      	orrs	r2, r7
 8021958:	2bff      	cmp	r3, #255	@ 0xff
 802195a:	b292      	uxth	r2, r2
 802195c:	d102      	bne.n	8021964 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 802195e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8021960:	29ff      	cmp	r1, #255	@ 0xff
 8021962:	d063      	beq.n	8021a2c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7dc>
 8021964:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8021966:	1215      	asrs	r5, r2, #8
 8021968:	f8be 1000 	ldrh.w	r1, [lr]
 802196c:	4343      	muls	r3, r0
 802196e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8021970:	10cf      	asrs	r7, r1, #3
 8021972:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8021976:	1c58      	adds	r0, r3, #1
 8021978:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 802197c:	eb00 2323 	add.w	r3, r0, r3, asr #8
 8021980:	1208      	asrs	r0, r1, #8
 8021982:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8021986:	00c9      	lsls	r1, r1, #3
 8021988:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 802198c:	b2db      	uxtb	r3, r3
 802198e:	b2c9      	uxtb	r1, r1
 8021990:	fb10 f003 	smulbb	r0, r0, r3
 8021994:	fb11 f103 	smulbb	r1, r1, r3
 8021998:	fb05 0504 	mla	r5, r5, r4, r0
 802199c:	10d0      	asrs	r0, r2, #3
 802199e:	fb17 f703 	smulbb	r7, r7, r3
 80219a2:	00d2      	lsls	r2, r2, #3
 80219a4:	b2ad      	uxth	r5, r5
 80219a6:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 80219aa:	b2d2      	uxtb	r2, r2
 80219ac:	fb00 7004 	mla	r0, r0, r4, r7
 80219b0:	1c6b      	adds	r3, r5, #1
 80219b2:	fb02 1204 	mla	r2, r2, r4, r1
 80219b6:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80219ba:	b292      	uxth	r2, r2
 80219bc:	b280      	uxth	r0, r0
 80219be:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 80219c2:	1c57      	adds	r7, r2, #1
 80219c4:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80219c8:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80219cc:	433d      	orrs	r5, r7
 80219ce:	1c47      	adds	r7, r0, #1
 80219d0:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 80219d4:	097f      	lsrs	r7, r7, #5
 80219d6:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 80219da:	433d      	orrs	r5, r7
 80219dc:	f8ae 5000 	strh.w	r5, [lr]
 80219e0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80219e2:	f10e 0e02 	add.w	lr, lr, #2
 80219e6:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80219e8:	4413      	add	r3, r2
 80219ea:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80219ec:	9321      	str	r3, [sp, #132]	@ 0x84
 80219ee:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80219f0:	441a      	add	r2, r3
 80219f2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80219f4:	3b01      	subs	r3, #1
 80219f6:	9222      	str	r2, [sp, #136]	@ 0x88
 80219f8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80219fa:	e61c      	b.n	8021636 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 80219fc:	fb08 f000 	mul.w	r0, r8, r0
 8021a00:	fb09 0303 	mla	r3, r9, r3, r0
 8021a04:	e6dc      	b.n	80217c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x570>
 8021a06:	46b9      	mov	r9, r7
 8021a08:	e704      	b.n	8021814 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
 8021a0a:	f1c2 0110 	rsb	r1, r2, #16
 8021a0e:	437a      	muls	r2, r7
 8021a10:	fb09 2901 	mla	r9, r9, r1, r2
 8021a14:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8021a18:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8021a1c:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8021a20:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8021a24:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8021a28:	4302      	orrs	r2, r0
 8021a2a:	e795      	b.n	8021958 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x708>
 8021a2c:	f8ae 2000 	strh.w	r2, [lr]
 8021a30:	e7d6      	b.n	80219e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
 8021a32:	b017      	add	sp, #92	@ 0x5c
 8021a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021a38 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8021a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021a3c:	b085      	sub	sp, #20
 8021a3e:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 8021a42:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	@ 0x38
 8021a46:	2800      	cmp	r0, #0
 8021a48:	9103      	str	r1, [sp, #12]
 8021a4a:	fb00 7406 	mla	r4, r0, r6, r7
 8021a4e:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	@ 0x3c
 8021a52:	f89d 1048 	ldrb.w	r1, [sp, #72]	@ 0x48
 8021a56:	eb03 0544 	add.w	r5, r3, r4, lsl #1
 8021a5a:	f89d e04c 	ldrb.w	lr, [sp, #76]	@ 0x4c
 8021a5e:	eb02 0904 	add.w	r9, r2, r4
 8021a62:	9501      	str	r5, [sp, #4]
 8021a64:	f2c0 8141 	blt.w	8021cea <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 8021a68:	4583      	cmp	fp, r0
 8021a6a:	f340 813e 	ble.w	8021cea <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 8021a6e:	2f00      	cmp	r7, #0
 8021a70:	f2c0 8137 	blt.w	8021ce2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 8021a74:	42be      	cmp	r6, r7
 8021a76:	f340 8134 	ble.w	8021ce2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 8021a7a:	f812 c004 	ldrb.w	ip, [r2, r4]
 8021a7e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8021a82:	f64f 041f 	movw	r4, #63519	@ 0xf81f
 8021a86:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8021a8a:	f423 65fc 	bic.w	r5, r3, #2016	@ 0x7e0
 8021a8e:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8021a92:	4355      	muls	r5, r2
 8021a94:	fb0c f203 	mul.w	r2, ip, r3
 8021a98:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 8021a9c:	f605 0501 	addw	r5, r5, #2049	@ 0x801
 8021aa0:	441d      	add	r5, r3
 8021aa2:	f102 0320 	add.w	r3, r2, #32
 8021aa6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021aaa:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 8021aae:	0a1b      	lsrs	r3, r3, #8
 8021ab0:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8021ab4:	431c      	orrs	r4, r3
 8021ab6:	1c7b      	adds	r3, r7, #1
 8021ab8:	f100 811c 	bmi.w	8021cf4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 8021abc:	429e      	cmp	r6, r3
 8021abe:	f340 8119 	ble.w	8021cf4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 8021ac2:	2900      	cmp	r1, #0
 8021ac4:	f000 8119 	beq.w	8021cfa <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
 8021ac8:	9a01      	ldr	r2, [sp, #4]
 8021aca:	f899 3001 	ldrb.w	r3, [r9, #1]
 8021ace:	8855      	ldrh	r5, [r2, #2]
 8021ad0:	ea4f 08e3 	mov.w	r8, r3, asr #3
 8021ad4:	f425 62fc 	bic.w	r2, r5, #2016	@ 0x7e0
 8021ad8:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8021adc:	fb08 f802 	mul.w	r8, r8, r2
 8021ae0:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8021ae4:	435d      	muls	r5, r3
 8021ae6:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 8021aea:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8021aee:	44d0      	add	r8, sl
 8021af0:	f105 0a20 	add.w	sl, r5, #32
 8021af4:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8021af8:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8021afc:	0a2d      	lsrs	r5, r5, #8
 8021afe:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8021b02:	432a      	orrs	r2, r5
 8021b04:	3001      	adds	r0, #1
 8021b06:	f100 80fe 	bmi.w	8021d06 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 8021b0a:	4583      	cmp	fp, r0
 8021b0c:	f340 80fb 	ble.w	8021d06 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 8021b10:	f1be 0f00 	cmp.w	lr, #0
 8021b14:	f000 80fc 	beq.w	8021d10 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
 8021b18:	2f00      	cmp	r7, #0
 8021b1a:	f2c0 80f1 	blt.w	8021d00 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 8021b1e:	42be      	cmp	r6, r7
 8021b20:	f340 80ee 	ble.w	8021d00 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 8021b24:	9801      	ldr	r0, [sp, #4]
 8021b26:	f64f 0b1f 	movw	fp, #63519	@ 0xf81f
 8021b2a:	f819 5006 	ldrb.w	r5, [r9, r6]
 8021b2e:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 8021b32:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8021b36:	f428 60fc 	bic.w	r0, r8, #2016	@ 0x7e0
 8021b3a:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 8021b3e:	fb0a fa00 	mul.w	sl, sl, r0
 8021b42:	fb05 f808 	mul.w	r8, r5, r8
 8021b46:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 8021b4a:	f60a 0a01 	addw	sl, sl, #2049	@ 0x801
 8021b4e:	4482      	add	sl, r0
 8021b50:	f108 0020 	add.w	r0, r8, #32
 8021b54:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8021b58:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 8021b5c:	0a00      	lsrs	r0, r0, #8
 8021b5e:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8021b62:	ea4b 0b00 	orr.w	fp, fp, r0
 8021b66:	3701      	adds	r7, #1
 8021b68:	f100 80d7 	bmi.w	8021d1a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 8021b6c:	42be      	cmp	r6, r7
 8021b6e:	f340 80d4 	ble.w	8021d1a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 8021b72:	2900      	cmp	r1, #0
 8021b74:	f000 80d4 	beq.w	8021d20 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
 8021b78:	3601      	adds	r6, #1
 8021b7a:	9801      	ldr	r0, [sp, #4]
 8021b7c:	f819 7006 	ldrb.w	r7, [r9, r6]
 8021b80:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 8021b84:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8021b88:	f420 66fc 	bic.w	r6, r0, #2016	@ 0x7e0
 8021b8c:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8021b90:	fb09 f906 	mul.w	r9, r9, r6
 8021b94:	fb07 f800 	mul.w	r8, r7, r0
 8021b98:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 8021b9c:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 8021ba0:	f609 0901 	addw	r9, r9, #2049	@ 0x801
 8021ba4:	44d1      	add	r9, sl
 8021ba6:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 8021baa:	f108 0020 	add.w	r0, r8, #32
 8021bae:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8021bb2:	0a00      	lsrs	r0, r0, #8
 8021bb4:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8021bb8:	4330      	orrs	r0, r6
 8021bba:	b28e      	uxth	r6, r1
 8021bbc:	fa1f f98e 	uxth.w	r9, lr
 8021bc0:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 8021bc4:	f424 64fc 	bic.w	r4, r4, #2016	@ 0x7e0
 8021bc8:	fb06 f809 	mul.w	r8, r6, r9
 8021bcc:	0136      	lsls	r6, r6, #4
 8021bce:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8021bd2:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8021bd6:	9601      	str	r6, [sp, #4]
 8021bd8:	ea4a 0404 	orr.w	r4, sl, r4
 8021bdc:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8021be0:	fa1f f689 	uxth.w	r6, r9
 8021be4:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8021be8:	fb11 f90e 	smulbb	r9, r1, lr
 8021bec:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8021bf0:	9602      	str	r6, [sp, #8]
 8021bf2:	4626      	mov	r6, r4
 8021bf4:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 8021bf8:	f1ce 0410 	rsb	r4, lr, #16
 8021bfc:	ea4a 0202 	orr.w	r2, sl, r2
 8021c00:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8021c04:	1a64      	subs	r4, r4, r1
 8021c06:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 8021c0a:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8021c0e:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8021c12:	434a      	muls	r2, r1
 8021c14:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8021c18:	ea4a 0000 	orr.w	r0, sl, r0
 8021c1c:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8021c20:	fb04 2406 	mla	r4, r4, r6, r2
 8021c24:	9903      	ldr	r1, [sp, #12]
 8021c26:	fb09 4200 	mla	r2, r9, r0, r4
 8021c2a:	ea4f 440b 	mov.w	r4, fp, lsl #16
 8021c2e:	9801      	ldr	r0, [sp, #4]
 8021c30:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
 8021c34:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8021c38:	8809      	ldrh	r1, [r1, #0]
 8021c3a:	f5c0 7080 	rsb	r0, r0, #256	@ 0x100
 8021c3e:	ea44 0b0b 	orr.w	fp, r4, fp
 8021c42:	9c02      	ldr	r4, [sp, #8]
 8021c44:	1b00      	subs	r0, r0, r4
 8021c46:	9c01      	ldr	r4, [sp, #4]
 8021c48:	fb0e 2e0b 	mla	lr, lr, fp, r2
 8021c4c:	eba4 0608 	sub.w	r6, r4, r8
 8021c50:	b280      	uxth	r0, r0
 8021c52:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8021c56:	b2b6      	uxth	r6, r6
 8021c58:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8021c5c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8021c60:	4373      	muls	r3, r6
 8021c62:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8021c66:	fb0c 3300 	mla	r3, ip, r0, r3
 8021c6a:	9802      	ldr	r0, [sp, #8]
 8021c6c:	ea42 0e0e 	orr.w	lr, r2, lr
 8021c70:	fb00 3505 	mla	r5, r0, r5, r3
 8021c74:	120b      	asrs	r3, r1, #8
 8021c76:	10c8      	asrs	r0, r1, #3
 8021c78:	fb08 5707 	mla	r7, r8, r7, r5
 8021c7c:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8021c80:	00c9      	lsls	r1, r1, #3
 8021c82:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8021c86:	ea6f 2727 	mvn.w	r7, r7, asr #8
 8021c8a:	fa1f f28e 	uxth.w	r2, lr
 8021c8e:	b2c9      	uxtb	r1, r1
 8021c90:	b2ff      	uxtb	r7, r7
 8021c92:	437b      	muls	r3, r7
 8021c94:	4378      	muls	r0, r7
 8021c96:	434f      	muls	r7, r1
 8021c98:	1c59      	adds	r1, r3, #1
 8021c9a:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8021c9e:	1213      	asrs	r3, r2, #8
 8021ca0:	f023 0307 	bic.w	r3, r3, #7
 8021ca4:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8021ca8:	1c41      	adds	r1, r0, #1
 8021caa:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8021cae:	10d1      	asrs	r1, r2, #3
 8021cb0:	021b      	lsls	r3, r3, #8
 8021cb2:	f021 0103 	bic.w	r1, r1, #3
 8021cb6:	00d2      	lsls	r2, r2, #3
 8021cb8:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 8021cbc:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8021cc0:	00c9      	lsls	r1, r1, #3
 8021cc2:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8021cc6:	430b      	orrs	r3, r1
 8021cc8:	1c79      	adds	r1, r7, #1
 8021cca:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8021cce:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8021cd2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8021cd6:	431a      	orrs	r2, r3
 8021cd8:	9b03      	ldr	r3, [sp, #12]
 8021cda:	801a      	strh	r2, [r3, #0]
 8021cdc:	b005      	add	sp, #20
 8021cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021ce2:	f04f 0c00 	mov.w	ip, #0
 8021ce6:	4664      	mov	r4, ip
 8021ce8:	e6e5      	b.n	8021ab6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
 8021cea:	2300      	movs	r3, #0
 8021cec:	469c      	mov	ip, r3
 8021cee:	461a      	mov	r2, r3
 8021cf0:	461c      	mov	r4, r3
 8021cf2:	e707      	b.n	8021b04 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8021cf4:	2300      	movs	r3, #0
 8021cf6:	461a      	mov	r2, r3
 8021cf8:	e704      	b.n	8021b04 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8021cfa:	460b      	mov	r3, r1
 8021cfc:	460a      	mov	r2, r1
 8021cfe:	e701      	b.n	8021b04 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8021d00:	2500      	movs	r5, #0
 8021d02:	46ab      	mov	fp, r5
 8021d04:	e72f      	b.n	8021b66 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
 8021d06:	2700      	movs	r7, #0
 8021d08:	463d      	mov	r5, r7
 8021d0a:	4638      	mov	r0, r7
 8021d0c:	46bb      	mov	fp, r7
 8021d0e:	e754      	b.n	8021bba <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8021d10:	4677      	mov	r7, lr
 8021d12:	4675      	mov	r5, lr
 8021d14:	4670      	mov	r0, lr
 8021d16:	46f3      	mov	fp, lr
 8021d18:	e74f      	b.n	8021bba <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8021d1a:	2700      	movs	r7, #0
 8021d1c:	4638      	mov	r0, r7
 8021d1e:	e74c      	b.n	8021bba <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8021d20:	460f      	mov	r7, r1
 8021d22:	4608      	mov	r0, r1
 8021d24:	e749      	b.n	8021bba <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

08021d28 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021d2c:	b093      	sub	sp, #76	@ 0x4c
 8021d2e:	9210      	str	r2, [sp, #64]	@ 0x40
 8021d30:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8021d32:	9011      	str	r0, [sp, #68]	@ 0x44
 8021d34:	910e      	str	r1, [sp, #56]	@ 0x38
 8021d36:	6850      	ldr	r0, [r2, #4]
 8021d38:	9306      	str	r3, [sp, #24]
 8021d3a:	6812      	ldr	r2, [r2, #0]
 8021d3c:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 8021d40:	fb00 1303 	mla	r3, r0, r3, r1
 8021d44:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8021d48:	9307      	str	r3, [sp, #28]
 8021d4a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8021d4c:	681b      	ldr	r3, [r3, #0]
 8021d4e:	9308      	str	r3, [sp, #32]
 8021d50:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8021d52:	685b      	ldr	r3, [r3, #4]
 8021d54:	9309      	str	r3, [sp, #36]	@ 0x24
 8021d56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021d58:	2b00      	cmp	r3, #0
 8021d5a:	dc03      	bgt.n	8021d64 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8021d5c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021d5e:	2b00      	cmp	r3, #0
 8021d60:	f340 83b6 	ble.w	80224d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 8021d64:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8021d66:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021d6a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021d6e:	1e48      	subs	r0, r1, #1
 8021d70:	1e55      	subs	r5, r2, #1
 8021d72:	9b06      	ldr	r3, [sp, #24]
 8021d74:	2b00      	cmp	r3, #0
 8021d76:	f340 8165 	ble.w	8022044 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8021d7a:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 8021d7c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8021d7e:	1436      	asrs	r6, r6, #16
 8021d80:	ea4f 4323 	mov.w	r3, r3, asr #16
 8021d84:	d406      	bmi.n	8021d94 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8021d86:	4286      	cmp	r6, r0
 8021d88:	da04      	bge.n	8021d94 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8021d8a:	2b00      	cmp	r3, #0
 8021d8c:	db02      	blt.n	8021d94 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8021d8e:	42ab      	cmp	r3, r5
 8021d90:	f2c0 8159 	blt.w	8022046 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8021d94:	3601      	adds	r6, #1
 8021d96:	f100 8146 	bmi.w	8022026 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8021d9a:	42b1      	cmp	r1, r6
 8021d9c:	f2c0 8143 	blt.w	8022026 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8021da0:	3301      	adds	r3, #1
 8021da2:	f100 8140 	bmi.w	8022026 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8021da6:	429a      	cmp	r2, r3
 8021da8:	f2c0 813d 	blt.w	8022026 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8021dac:	9b06      	ldr	r3, [sp, #24]
 8021dae:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 8021db2:	9f07      	ldr	r7, [sp, #28]
 8021db4:	930f      	str	r3, [sp, #60]	@ 0x3c
 8021db6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021db8:	2b00      	cmp	r3, #0
 8021dba:	f340 8166 	ble.w	802208a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8021dbe:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8021dc0:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 8021dc2:	1418      	asrs	r0, r3, #16
 8021dc4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8021dc6:	142d      	asrs	r5, r5, #16
 8021dc8:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8021dcc:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8021dce:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8021dd2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8021dd4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8021dd8:	f100 81f0 	bmi.w	80221bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8021ddc:	f102 3eff 	add.w	lr, r2, #4294967295
 8021de0:	4575      	cmp	r5, lr
 8021de2:	f280 81eb 	bge.w	80221bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8021de6:	2800      	cmp	r0, #0
 8021de8:	f2c0 81e8 	blt.w	80221bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8021dec:	f103 3eff 	add.w	lr, r3, #4294967295
 8021df0:	4570      	cmp	r0, lr
 8021df2:	f280 81e3 	bge.w	80221bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8021df6:	b212      	sxth	r2, r2
 8021df8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021dfa:	fa1f fe81 	uxth.w	lr, r1
 8021dfe:	fb00 5002 	mla	r0, r0, r2, r5
 8021e02:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8021e06:	eb03 0a00 	add.w	sl, r3, r0
 8021e0a:	f813 9000 	ldrb.w	r9, [r3, r0]
 8021e0e:	f5c5 7380 	rsb	r3, r5, #256	@ 0x100
 8021e12:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8021e16:	b29b      	uxth	r3, r3
 8021e18:	f1bc 0f00 	cmp.w	ip, #0
 8021e1c:	f000 817b 	beq.w	8022116 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8021e20:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8021e24:	eb0a 0b02 	add.w	fp, sl, r2
 8021e28:	fa1f fa8c 	uxth.w	sl, ip
 8021e2c:	940a      	str	r4, [sp, #40]	@ 0x28
 8021e2e:	fb0a fe0e 	mul.w	lr, sl, lr
 8021e32:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8021e36:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8021e3a:	eba5 050e 	sub.w	r5, r5, lr
 8021e3e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8021e40:	fa1f fa8a 	uxth.w	sl, sl
 8021e44:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8021e46:	b2ad      	uxth	r5, r5
 8021e48:	eba3 030a 	sub.w	r3, r3, sl
 8021e4c:	fb08 f505 	mul.w	r5, r8, r5
 8021e50:	b29b      	uxth	r3, r3
 8021e52:	fb09 5303 	mla	r3, r9, r3, r5
 8021e56:	fb0a 3304 	mla	r3, sl, r4, r3
 8021e5a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8021e5c:	fb0e 3304 	mla	r3, lr, r4, r3
 8021e60:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021e64:	2b00      	cmp	r3, #0
 8021e66:	f000 80d1 	beq.w	802200c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8021e6a:	9c08      	ldr	r4, [sp, #32]
 8021e6c:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8021e70:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8021e74:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8021e78:	f000 8152 	beq.w	8022120 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8021e7c:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 8021e80:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8021e84:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8021e88:	fb0a fe0e 	mul.w	lr, sl, lr
 8021e8c:	fb09 f000 	mul.w	r0, r9, r0
 8021e90:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8021e94:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 8021e98:	f100 0b20 	add.w	fp, r0, #32
 8021e9c:	44ce      	add	lr, r9
 8021e9e:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8021ea2:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8021ea6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021eaa:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8021eae:	ea4e 0909 	orr.w	r9, lr, r9
 8021eb2:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8021eb6:	8868      	ldrh	r0, [r5, #2]
 8021eb8:	d019      	beq.n	8021eee <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8021eba:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 8021ebe:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8021ec2:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8021ec6:	fb0a fe0e 	mul.w	lr, sl, lr
 8021eca:	fb08 f800 	mul.w	r8, r8, r0
 8021ece:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8021ed2:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 8021ed6:	f108 0b20 	add.w	fp, r8, #32
 8021eda:	4486      	add	lr, r0
 8021edc:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8021ee0:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8021ee4:	0a00      	lsrs	r0, r0, #8
 8021ee6:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8021eea:	ea4e 0000 	orr.w	r0, lr, r0
 8021eee:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8021ef2:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8021ef6:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8021efa:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8021efe:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 8021f02:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8021f06:	ea4e 0909 	orr.w	r9, lr, r9
 8021f0a:	ea4a 0000 	orr.w	r0, sl, r0
 8021f0e:	f1bc 0f00 	cmp.w	ip, #0
 8021f12:	f000 8107 	beq.w	8022124 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 8021f16:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 8021f1a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8021f1c:	3a01      	subs	r2, #1
 8021f1e:	2cff      	cmp	r4, #255	@ 0xff
 8021f20:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8021f24:	f102 0202 	add.w	r2, r2, #2
 8021f28:	eb05 0e02 	add.w	lr, r5, r2
 8021f2c:	5aaa      	ldrh	r2, [r5, r2]
 8021f2e:	d018      	beq.n	8021f62 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8021f30:	f422 65fc 	bic.w	r5, r2, #2016	@ 0x7e0
 8021f34:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8021f38:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8021f3c:	fb04 fa02 	mul.w	sl, r4, r2
 8021f40:	fb08 f805 	mul.w	r8, r8, r5
 8021f44:	f10a 0520 	add.w	r5, sl, #32
 8021f48:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8021f4c:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8021f50:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8021f54:	4442      	add	r2, r8
 8021f56:	0a2d      	lsrs	r5, r5, #8
 8021f58:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8021f5c:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8021f60:	432a      	orrs	r2, r5
 8021f62:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8021f64:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8021f68:	2cff      	cmp	r4, #255	@ 0xff
 8021f6a:	d01a      	beq.n	8021fa2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8021f6c:	f425 6efc 	bic.w	lr, r5, #2016	@ 0x7e0
 8021f70:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8021f74:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8021f78:	fb04 fa05 	mul.w	sl, r4, r5
 8021f7c:	fb08 f80e 	mul.w	r8, r8, lr
 8021f80:	f10a 0e20 	add.w	lr, sl, #32
 8021f84:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8021f88:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8021f8c:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8021f90:	4445      	add	r5, r8
 8021f92:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021f96:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8021f9a:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 8021f9e:	ea45 050e 	orr.w	r5, r5, lr
 8021fa2:	fb1c fe01 	smulbb	lr, ip, r1
 8021fa6:	f1cc 0810 	rsb	r8, ip, #16
 8021faa:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8021fae:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8021fb2:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8021fb6:	eba8 0801 	sub.w	r8, r8, r1
 8021fba:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8021fbe:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8021fc2:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8021fc6:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 8021fca:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8021fce:	ea4a 0202 	orr.w	r2, sl, r2
 8021fd2:	4341      	muls	r1, r0
 8021fd4:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8021fd8:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8021fdc:	fb09 1108 	mla	r1, r9, r8, r1
 8021fe0:	ea4b 0505 	orr.w	r5, fp, r5
 8021fe4:	fb0c 1102 	mla	r1, ip, r2, r1
 8021fe8:	fb0e 1e05 	mla	lr, lr, r5, r1
 8021fec:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8021ff0:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8021ff4:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8021ff8:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8021ffc:	ea42 0e0e 	orr.w	lr, r2, lr
 8022000:	fa1f f28e 	uxth.w	r2, lr
 8022004:	2bff      	cmp	r3, #255	@ 0xff
 8022006:	f040 80a1 	bne.w	802214c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 802200a:	803a      	strh	r2, [r7, #0]
 802200c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802200e:	3702      	adds	r7, #2
 8022010:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8022012:	4413      	add	r3, r2
 8022014:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8022016:	931d      	str	r3, [sp, #116]	@ 0x74
 8022018:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802201a:	441a      	add	r2, r3
 802201c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802201e:	3b01      	subs	r3, #1
 8022020:	921e      	str	r2, [sp, #120]	@ 0x78
 8022022:	930f      	str	r3, [sp, #60]	@ 0x3c
 8022024:	e6c7      	b.n	8021db6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8022026:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8022028:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 802202a:	9c1e      	ldr	r4, [sp, #120]	@ 0x78
 802202c:	4433      	add	r3, r6
 802202e:	931d      	str	r3, [sp, #116]	@ 0x74
 8022030:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8022032:	441c      	add	r4, r3
 8022034:	9b06      	ldr	r3, [sp, #24]
 8022036:	3b01      	subs	r3, #1
 8022038:	941e      	str	r4, [sp, #120]	@ 0x78
 802203a:	9306      	str	r3, [sp, #24]
 802203c:	9b07      	ldr	r3, [sp, #28]
 802203e:	3302      	adds	r3, #2
 8022040:	9307      	str	r3, [sp, #28]
 8022042:	e696      	b.n	8021d72 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8022044:	d028      	beq.n	8022098 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8022046:	9b06      	ldr	r3, [sp, #24]
 8022048:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 802204a:	3b01      	subs	r3, #1
 802204c:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 802204e:	fb00 5003 	mla	r0, r0, r3, r5
 8022052:	1400      	asrs	r0, r0, #16
 8022054:	f53f aeaa 	bmi.w	8021dac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8022058:	3901      	subs	r1, #1
 802205a:	4288      	cmp	r0, r1
 802205c:	f6bf aea6 	bge.w	8021dac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8022060:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8022062:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8022064:	fb01 0303 	mla	r3, r1, r3, r0
 8022068:	141b      	asrs	r3, r3, #16
 802206a:	f53f ae9f 	bmi.w	8021dac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802206e:	3a01      	subs	r2, #1
 8022070:	4293      	cmp	r3, r2
 8022072:	f6bf ae9b 	bge.w	8021dac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8022076:	9b06      	ldr	r3, [sp, #24]
 8022078:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 802207c:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8022080:	930f      	str	r3, [sp, #60]	@ 0x3c
 8022082:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8022084:	2b00      	cmp	r3, #0
 8022086:	f300 80b6 	bgt.w	80221f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 802208a:	9b06      	ldr	r3, [sp, #24]
 802208c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022090:	9b07      	ldr	r3, [sp, #28]
 8022092:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8022096:	9307      	str	r3, [sp, #28]
 8022098:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802209a:	2b00      	cmp	r3, #0
 802209c:	f340 8218 	ble.w	80224d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 80220a0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80220a4:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80220a6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80220aa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80220ae:	eef0 6a62 	vmov.f32	s13, s5
 80220b2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80220b6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80220ba:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80220be:	edcd 6a1d 	vstr	s13, [sp, #116]	@ 0x74
 80220c2:	eef0 6a43 	vmov.f32	s13, s6
 80220c6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80220ca:	edcd 6a1e 	vstr	s13, [sp, #120]	@ 0x78
 80220ce:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80220d2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80220d6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80220da:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80220de:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80220e2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80220e6:	ee12 2a90 	vmov	r2, s5
 80220ea:	eef0 2a47 	vmov.f32	s5, s14
 80220ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80220f2:	ee13 2a10 	vmov	r2, s6
 80220f6:	931f      	str	r3, [sp, #124]	@ 0x7c
 80220f8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80220fa:	eeb0 3a67 	vmov.f32	s6, s15
 80220fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8022102:	9320      	str	r3, [sp, #128]	@ 0x80
 8022104:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022106:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8022108:	3b01      	subs	r3, #1
 802210a:	930e      	str	r3, [sp, #56]	@ 0x38
 802210c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802210e:	bf08      	it	eq
 8022110:	4613      	moveq	r3, r2
 8022112:	9306      	str	r3, [sp, #24]
 8022114:	e61f      	b.n	8021d56 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8022116:	fb08 f505 	mul.w	r5, r8, r5
 802211a:	fb09 5303 	mla	r3, r9, r3, r5
 802211e:	e69f      	b.n	8021e60 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8022120:	4681      	mov	r9, r0
 8022122:	e6c6      	b.n	8021eb2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8022124:	f1c1 0210 	rsb	r2, r1, #16
 8022128:	4341      	muls	r1, r0
 802212a:	fb09 1902 	mla	r9, r9, r2, r1
 802212e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8022132:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8022136:	ea4f 1959 	mov.w	r9, r9, lsr #5
 802213a:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802213e:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8022142:	ea42 0909 	orr.w	r9, r2, r9
 8022146:	fa1f f289 	uxth.w	r2, r9
 802214a:	e75b      	b.n	8022004 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>
 802214c:	f8b7 c000 	ldrh.w	ip, [r7]
 8022150:	43db      	mvns	r3, r3
 8022152:	ea4f 202c 	mov.w	r0, ip, asr #8
 8022156:	fa5f fe83 	uxtb.w	lr, r3
 802215a:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 802215e:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8022162:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8022166:	fb00 f00e 	mul.w	r0, r0, lr
 802216a:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 802216e:	b2db      	uxtb	r3, r3
 8022170:	1c41      	adds	r1, r0, #1
 8022172:	fb05 f50e 	mul.w	r5, r5, lr
 8022176:	fb03 f30e 	mul.w	r3, r3, lr
 802217a:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 802217e:	1211      	asrs	r1, r2, #8
 8022180:	f021 0107 	bic.w	r1, r1, #7
 8022184:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8022188:	48d3      	ldr	r0, [pc, #844]	@ (80224d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
 802218a:	b2c9      	uxtb	r1, r1
 802218c:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 8022190:	1c69      	adds	r1, r5, #1
 8022192:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8022196:	10d1      	asrs	r1, r2, #3
 8022198:	00d2      	lsls	r2, r2, #3
 802219a:	f021 0103 	bic.w	r1, r1, #3
 802219e:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 80221a2:	00c9      	lsls	r1, r1, #3
 80221a4:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 80221a8:	4301      	orrs	r1, r0
 80221aa:	1c58      	adds	r0, r3, #1
 80221ac:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80221b0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80221b4:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80221b8:	430a      	orrs	r2, r1
 80221ba:	e726      	b.n	802200a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 80221bc:	f115 0e01 	adds.w	lr, r5, #1
 80221c0:	f53f af24 	bmi.w	802200c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 80221c4:	4572      	cmp	r2, lr
 80221c6:	f6ff af21 	blt.w	802200c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 80221ca:	f110 0e01 	adds.w	lr, r0, #1
 80221ce:	f53f af1d 	bmi.w	802200c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 80221d2:	4573      	cmp	r3, lr
 80221d4:	f6ff af1a 	blt.w	802200c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 80221d8:	b21b      	sxth	r3, r3
 80221da:	b212      	sxth	r2, r2
 80221dc:	9301      	str	r3, [sp, #4]
 80221de:	9200      	str	r2, [sp, #0]
 80221e0:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 80221e4:	e9cd 5002 	strd	r5, r0, [sp, #8]
 80221e8:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 80221ec:	4639      	mov	r1, r7
 80221ee:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80221f0:	f7ff fc22 	bl	8021a38 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 80221f4:	e70a      	b.n	802200c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 80221f6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80221f8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80221fc:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80221fe:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8022202:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8022204:	fa1f fc82 	uxth.w	ip, r2
 8022208:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802220c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802220e:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8022212:	141f      	asrs	r7, r3, #16
 8022214:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8022216:	141b      	asrs	r3, r3, #16
 8022218:	fb01 3707 	mla	r7, r1, r7, r3
 802221c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802221e:	eb03 0a07 	add.w	sl, r3, r7
 8022222:	f813 9007 	ldrb.w	r9, [r3, r7]
 8022226:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 802222a:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802222e:	b29b      	uxth	r3, r3
 8022230:	2d00      	cmp	r5, #0
 8022232:	f000 80fe 	beq.w	8022432 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70a>
 8022236:	f81a 4001 	ldrb.w	r4, [sl, r1]
 802223a:	eb0a 0b01 	add.w	fp, sl, r1
 802223e:	fa1f fa85 	uxth.w	sl, r5
 8022242:	940c      	str	r4, [sp, #48]	@ 0x30
 8022244:	fb0a fc0c 	mul.w	ip, sl, ip
 8022248:	f89b 4001 	ldrb.w	r4, [fp, #1]
 802224c:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8022250:	eba0 000c 	sub.w	r0, r0, ip
 8022254:	940d      	str	r4, [sp, #52]	@ 0x34
 8022256:	fa1f fa8a 	uxth.w	sl, sl
 802225a:	b280      	uxth	r0, r0
 802225c:	eba3 030a 	sub.w	r3, r3, sl
 8022260:	fb08 f000 	mul.w	r0, r8, r0
 8022264:	b29b      	uxth	r3, r3
 8022266:	fb09 0303 	mla	r3, r9, r3, r0
 802226a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 802226c:	fb0a 3300 	mla	r3, sl, r0, r3
 8022270:	fb0c 3304 	mla	r3, ip, r4, r3
 8022274:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022278:	2b00      	cmp	r3, #0
 802227a:	f000 80cc 	beq.w	8022416 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 802227e:	9808      	ldr	r0, [sp, #32]
 8022280:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8022284:	9c08      	ldr	r4, [sp, #32]
 8022286:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 802228a:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 802228e:	f000 80d5 	beq.w	802243c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 8022292:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 8022296:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 802229a:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 802229e:	fb0a fc0c 	mul.w	ip, sl, ip
 80222a2:	fb09 f707 	mul.w	r7, r9, r7
 80222a6:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 80222aa:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 80222ae:	f107 0b20 	add.w	fp, r7, #32
 80222b2:	44cc      	add	ip, r9
 80222b4:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 80222b8:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80222bc:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80222c0:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 80222c4:	ea4c 0909 	orr.w	r9, ip, r9
 80222c8:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 80222cc:	8847      	ldrh	r7, [r0, #2]
 80222ce:	d019      	beq.n	8022304 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5dc>
 80222d0:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 80222d4:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80222d8:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 80222dc:	fb0a fc0c 	mul.w	ip, sl, ip
 80222e0:	fb08 f807 	mul.w	r8, r8, r7
 80222e4:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 80222e8:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 80222ec:	f108 0b20 	add.w	fp, r8, #32
 80222f0:	44bc      	add	ip, r7
 80222f2:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 80222f6:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80222fa:	0a3f      	lsrs	r7, r7, #8
 80222fc:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8022300:	ea4c 0707 	orr.w	r7, ip, r7
 8022304:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8022308:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 802230c:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8022310:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 8022314:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8022318:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 802231c:	ea4c 0909 	orr.w	r9, ip, r9
 8022320:	ea4a 0707 	orr.w	r7, sl, r7
 8022324:	2d00      	cmp	r5, #0
 8022326:	f000 808b 	beq.w	8022440 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 802232a:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 802232e:	3901      	subs	r1, #1
 8022330:	0049      	lsls	r1, r1, #1
 8022332:	3102      	adds	r1, #2
 8022334:	eb00 0c01 	add.w	ip, r0, r1
 8022338:	5a41      	ldrh	r1, [r0, r1]
 802233a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 802233c:	28ff      	cmp	r0, #255	@ 0xff
 802233e:	d019      	beq.n	8022374 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 8022340:	f421 60fc 	bic.w	r0, r1, #2016	@ 0x7e0
 8022344:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8022346:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 802234a:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802234e:	fb04 fa01 	mul.w	sl, r4, r1
 8022352:	fb08 f800 	mul.w	r8, r8, r0
 8022356:	f10a 0020 	add.w	r0, sl, #32
 802235a:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 802235e:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8022362:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8022366:	4441      	add	r1, r8
 8022368:	0a00      	lsrs	r0, r0, #8
 802236a:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 802236e:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8022372:	4301      	orrs	r1, r0
 8022374:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8022376:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 802237a:	2cff      	cmp	r4, #255	@ 0xff
 802237c:	d01a      	beq.n	80223b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68c>
 802237e:	f420 6cfc 	bic.w	ip, r0, #2016	@ 0x7e0
 8022382:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8022386:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802238a:	fb04 fa00 	mul.w	sl, r4, r0
 802238e:	fb08 f80c 	mul.w	r8, r8, ip
 8022392:	f10a 0c20 	add.w	ip, sl, #32
 8022396:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 802239a:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 802239e:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 80223a2:	4440      	add	r0, r8
 80223a4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80223a8:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 80223ac:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 80223b0:	ea40 000c 	orr.w	r0, r0, ip
 80223b4:	fb15 fc02 	smulbb	ip, r5, r2
 80223b8:	f1c5 0810 	rsb	r8, r5, #16
 80223bc:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80223c0:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 80223c4:	ea4f 0cec 	mov.w	ip, ip, asr #3
 80223c8:	eba8 0802 	sub.w	r8, r8, r2
 80223cc:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 80223d0:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80223d4:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 80223d8:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 80223dc:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 80223e0:	ea4a 0101 	orr.w	r1, sl, r1
 80223e4:	437a      	muls	r2, r7
 80223e6:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 80223ea:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 80223ee:	fb09 2208 	mla	r2, r9, r8, r2
 80223f2:	ea4b 0000 	orr.w	r0, fp, r0
 80223f6:	fb05 2201 	mla	r2, r5, r1, r2
 80223fa:	fb0c 2200 	mla	r2, ip, r0, r2
 80223fe:	0d57      	lsrs	r7, r2, #21
 8022400:	0952      	lsrs	r2, r2, #5
 8022402:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8022406:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 802240a:	433a      	orrs	r2, r7
 802240c:	2bff      	cmp	r3, #255	@ 0xff
 802240e:	b292      	uxth	r2, r2
 8022410:	d127      	bne.n	8022462 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73a>
 8022412:	f8ae 2000 	strh.w	r2, [lr]
 8022416:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8022418:	f10e 0e02 	add.w	lr, lr, #2
 802241c:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 802241e:	4413      	add	r3, r2
 8022420:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8022422:	931d      	str	r3, [sp, #116]	@ 0x74
 8022424:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8022426:	441a      	add	r2, r3
 8022428:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802242a:	3b01      	subs	r3, #1
 802242c:	921e      	str	r2, [sp, #120]	@ 0x78
 802242e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8022430:	e627      	b.n	8022082 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8022432:	fb08 f000 	mul.w	r0, r8, r0
 8022436:	fb09 0303 	mla	r3, r9, r3, r0
 802243a:	e71b      	b.n	8022274 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54c>
 802243c:	46b9      	mov	r9, r7
 802243e:	e743      	b.n	80222c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a0>
 8022440:	f1c2 0110 	rsb	r1, r2, #16
 8022444:	437a      	muls	r2, r7
 8022446:	fb09 2901 	mla	r9, r9, r1, r2
 802244a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802244e:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8022452:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8022456:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802245a:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 802245e:	4302      	orrs	r2, r0
 8022460:	e7d4      	b.n	802240c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e4>
 8022462:	f8be 7000 	ldrh.w	r7, [lr]
 8022466:	43db      	mvns	r3, r3
 8022468:	4c1b      	ldr	r4, [pc, #108]	@ (80224d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
 802246a:	1238      	asrs	r0, r7, #8
 802246c:	fa5f fc83 	uxtb.w	ip, r3
 8022470:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8022474:	10fd      	asrs	r5, r7, #3
 8022476:	00fb      	lsls	r3, r7, #3
 8022478:	fb00 f00c 	mul.w	r0, r0, ip
 802247c:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8022480:	b2db      	uxtb	r3, r3
 8022482:	fb05 f10c 	mul.w	r1, r5, ip
 8022486:	1c45      	adds	r5, r0, #1
 8022488:	fb03 f30c 	mul.w	r3, r3, ip
 802248c:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8022490:	1215      	asrs	r5, r2, #8
 8022492:	f025 0507 	bic.w	r5, r5, #7
 8022496:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802249a:	1c4d      	adds	r5, r1, #1
 802249c:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 80224a0:	10d1      	asrs	r1, r2, #3
 80224a2:	b2c0      	uxtb	r0, r0
 80224a4:	f021 0103 	bic.w	r1, r1, #3
 80224a8:	00d2      	lsls	r2, r2, #3
 80224aa:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 80224ae:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 80224b2:	00c9      	lsls	r1, r1, #3
 80224b4:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 80224b8:	4308      	orrs	r0, r1
 80224ba:	1c59      	adds	r1, r3, #1
 80224bc:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80224c0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80224c4:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 80224c8:	4318      	orrs	r0, r3
 80224ca:	f8ae 0000 	strh.w	r0, [lr]
 80224ce:	e7a2      	b.n	8022416 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 80224d0:	b013      	add	sp, #76	@ 0x4c
 80224d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80224d6:	bf00      	nop
 80224d8:	fffff800 	.word	0xfffff800

080224dc <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 80224dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80224e0:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	@ 0x24
 80224e4:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 80224e8:	fb05 4c03 	mla	ip, r5, r3, r4
 80224ec:	2d00      	cmp	r5, #0
 80224ee:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 80224f2:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
 80224f6:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 80224fa:	f89d 6034 	ldrb.w	r6, [sp, #52]	@ 0x34
 80224fe:	8808      	ldrh	r0, [r1, #0]
 8022500:	f2c0 80a7 	blt.w	8022652 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8022504:	45aa      	cmp	sl, r5
 8022506:	f340 80a4 	ble.w	8022652 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 802250a:	2c00      	cmp	r4, #0
 802250c:	f2c0 809f 	blt.w	802264e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 8022510:	42a3      	cmp	r3, r4
 8022512:	f340 809c 	ble.w	802264e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 8022516:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
 802251a:	1c62      	adds	r2, r4, #1
 802251c:	f100 809c 	bmi.w	8022658 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8022520:	4293      	cmp	r3, r2
 8022522:	f340 8099 	ble.w	8022658 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8022526:	f1b9 0f00 	cmp.w	r9, #0
 802252a:	f000 8095 	beq.w	8022658 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 802252e:	f8be c002 	ldrh.w	ip, [lr, #2]
 8022532:	3501      	adds	r5, #1
 8022534:	f100 8094 	bmi.w	8022660 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8022538:	45aa      	cmp	sl, r5
 802253a:	f340 8091 	ble.w	8022660 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 802253e:	2f00      	cmp	r7, #0
 8022540:	f000 808e 	beq.w	8022660 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8022544:	2c00      	cmp	r4, #0
 8022546:	f2c0 8089 	blt.w	802265c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 802254a:	42a3      	cmp	r3, r4
 802254c:	f340 8086 	ble.w	802265c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 8022550:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
 8022554:	3401      	adds	r4, #1
 8022556:	f100 8086 	bmi.w	8022666 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 802255a:	42a3      	cmp	r3, r4
 802255c:	f340 8083 	ble.w	8022666 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8022560:	f1b9 0f00 	cmp.w	r9, #0
 8022564:	d07f      	beq.n	8022666 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8022566:	3301      	adds	r3, #1
 8022568:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
 802256c:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8022570:	f428 68fc 	bic.w	r8, r8, #2016	@ 0x7e0
 8022574:	fb19 fe07 	smulbb	lr, r9, r7
 8022578:	f1c7 0210 	rsb	r2, r7, #16
 802257c:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8022580:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 8022584:	eba2 0209 	sub.w	r2, r2, r9
 8022588:	ea44 0808 	orr.w	r8, r4, r8
 802258c:	ea4f 440c 	mov.w	r4, ip, lsl #16
 8022590:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8022594:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 8022598:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 802259c:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 80225a0:	ea44 0c0c 	orr.w	ip, r4, ip
 80225a4:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 80225a8:	fb04 f40c 	mul.w	r4, r4, ip
 80225ac:	fb02 4808 	mla	r8, r2, r8, r4
 80225b0:	041a      	lsls	r2, r3, #16
 80225b2:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 80225b6:	b2b4      	uxth	r4, r6
 80225b8:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 80225bc:	43f6      	mvns	r6, r6
 80225be:	4313      	orrs	r3, r2
 80225c0:	042a      	lsls	r2, r5, #16
 80225c2:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 80225c6:	b2f6      	uxtb	r6, r6
 80225c8:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 80225cc:	fb0e 8303 	mla	r3, lr, r3, r8
 80225d0:	432a      	orrs	r2, r5
 80225d2:	fb07 3202 	mla	r2, r7, r2, r3
 80225d6:	10c7      	asrs	r7, r0, #3
 80225d8:	0d53      	lsrs	r3, r2, #21
 80225da:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 80225de:	0952      	lsrs	r2, r2, #5
 80225e0:	fb17 f706 	smulbb	r7, r7, r6
 80225e4:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80225e8:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 80225ec:	431a      	orrs	r2, r3
 80225ee:	b293      	uxth	r3, r2
 80225f0:	1202      	asrs	r2, r0, #8
 80225f2:	121d      	asrs	r5, r3, #8
 80225f4:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 80225f8:	00c0      	lsls	r0, r0, #3
 80225fa:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 80225fe:	fb12 f206 	smulbb	r2, r2, r6
 8022602:	b2c0      	uxtb	r0, r0
 8022604:	fb05 2504 	mla	r5, r5, r4, r2
 8022608:	10da      	asrs	r2, r3, #3
 802260a:	fb10 f006 	smulbb	r0, r0, r6
 802260e:	00db      	lsls	r3, r3, #3
 8022610:	b2ad      	uxth	r5, r5
 8022612:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8022616:	b2db      	uxtb	r3, r3
 8022618:	fb02 7204 	mla	r2, r2, r4, r7
 802261c:	fb03 0004 	mla	r0, r3, r4, r0
 8022620:	1c6b      	adds	r3, r5, #1
 8022622:	b292      	uxth	r2, r2
 8022624:	b280      	uxth	r0, r0
 8022626:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802262a:	1c43      	adds	r3, r0, #1
 802262c:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8022630:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8022634:	1c50      	adds	r0, r2, #1
 8022636:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 802263a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802263e:	0952      	lsrs	r2, r2, #5
 8022640:	432b      	orrs	r3, r5
 8022642:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8022646:	4313      	orrs	r3, r2
 8022648:	800b      	strh	r3, [r1, #0]
 802264a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802264e:	4680      	mov	r8, r0
 8022650:	e763      	b.n	802251a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
 8022652:	4684      	mov	ip, r0
 8022654:	4680      	mov	r8, r0
 8022656:	e76c      	b.n	8022532 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8022658:	4684      	mov	ip, r0
 802265a:	e76a      	b.n	8022532 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 802265c:	4605      	mov	r5, r0
 802265e:	e779      	b.n	8022554 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
 8022660:	4603      	mov	r3, r0
 8022662:	4605      	mov	r5, r0
 8022664:	e782      	b.n	802256c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
 8022666:	4603      	mov	r3, r0
 8022668:	e780      	b.n	802256c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

0802266a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802266a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802266e:	b093      	sub	sp, #76	@ 0x4c
 8022670:	461d      	mov	r5, r3
 8022672:	9210      	str	r2, [sp, #64]	@ 0x40
 8022674:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8022676:	f89d 2094 	ldrb.w	r2, [sp, #148]	@ 0x94
 802267a:	910a      	str	r1, [sp, #40]	@ 0x28
 802267c:	920b      	str	r2, [sp, #44]	@ 0x2c
 802267e:	6859      	ldr	r1, [r3, #4]
 8022680:	681b      	ldr	r3, [r3, #0]
 8022682:	9011      	str	r0, [sp, #68]	@ 0x44
 8022684:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	@ 0x88
 8022688:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	@ 0x74
 802268c:	fb01 2707 	mla	r7, r1, r7, r2
 8022690:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8022694:	9307      	str	r3, [sp, #28]
 8022696:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8022698:	681b      	ldr	r3, [r3, #0]
 802269a:	9309      	str	r3, [sp, #36]	@ 0x24
 802269c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802269e:	43db      	mvns	r3, r3
 80226a0:	b2db      	uxtb	r3, r3
 80226a2:	9308      	str	r3, [sp, #32]
 80226a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80226a6:	2b00      	cmp	r3, #0
 80226a8:	dc03      	bgt.n	80226b2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80226aa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80226ac:	2b00      	cmp	r3, #0
 80226ae:	f340 8205 	ble.w	8022abc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80226b2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80226b4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80226b8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80226bc:	1e48      	subs	r0, r1, #1
 80226be:	f102 3cff 	add.w	ip, r2, #4294967295
 80226c2:	2d00      	cmp	r5, #0
 80226c4:	f340 80da 	ble.w	802287c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 80226c8:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80226cc:	ea4f 4326 	mov.w	r3, r6, asr #16
 80226d0:	d406      	bmi.n	80226e0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80226d2:	4586      	cmp	lr, r0
 80226d4:	da04      	bge.n	80226e0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80226d6:	2b00      	cmp	r3, #0
 80226d8:	db02      	blt.n	80226e0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80226da:	4563      	cmp	r3, ip
 80226dc:	f2c0 80cf 	blt.w	802287e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80226e0:	f11e 0e01 	adds.w	lr, lr, #1
 80226e4:	f100 80c1 	bmi.w	802286a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 80226e8:	4571      	cmp	r1, lr
 80226ea:	f2c0 80be 	blt.w	802286a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 80226ee:	3301      	adds	r3, #1
 80226f0:	f100 80bb 	bmi.w	802286a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 80226f4:	429a      	cmp	r2, r3
 80226f6:	f2c0 80b8 	blt.w	802286a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 80226fa:	46a9      	mov	r9, r5
 80226fc:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8022700:	f1b9 0f00 	cmp.w	r9, #0
 8022704:	f340 80d8 	ble.w	80228b8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 8022708:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802270a:	1421      	asrs	r1, r4, #16
 802270c:	ea4f 4026 	mov.w	r0, r6, asr #16
 8022710:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8022714:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8022718:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 802271c:	f100 8112 	bmi.w	8022944 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8022720:	f10e 3aff 	add.w	sl, lr, #4294967295
 8022724:	4551      	cmp	r1, sl
 8022726:	f280 810d 	bge.w	8022944 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 802272a:	2800      	cmp	r0, #0
 802272c:	f2c0 810a 	blt.w	8022944 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8022730:	f103 3aff 	add.w	sl, r3, #4294967295
 8022734:	4550      	cmp	r0, sl
 8022736:	f280 8105 	bge.w	8022944 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 802273a:	fa0f f38e 	sxth.w	r3, lr
 802273e:	fb00 1103 	mla	r1, r0, r3, r1
 8022742:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8022744:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 8022748:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 802274c:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 8022750:	f1bc 0f00 	cmp.w	ip, #0
 8022754:	d007      	beq.n	8022766 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 8022756:	005b      	lsls	r3, r3, #1
 8022758:	eb0a 0003 	add.w	r0, sl, r3
 802275c:	f83a 3003 	ldrh.w	r3, [sl, r3]
 8022760:	930c      	str	r3, [sp, #48]	@ 0x30
 8022762:	8843      	ldrh	r3, [r0, #2]
 8022764:	930d      	str	r3, [sp, #52]	@ 0x34
 8022766:	ea4f 400e 	mov.w	r0, lr, lsl #16
 802276a:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 802276e:	fb12 f30c 	smulbb	r3, r2, ip
 8022772:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8022776:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 802277a:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 802277e:	10db      	asrs	r3, r3, #3
 8022780:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8022784:	ea40 000e 	orr.w	r0, r0, lr
 8022788:	f1cc 0e10 	rsb	lr, ip, #16
 802278c:	ea4a 0101 	orr.w	r1, sl, r1
 8022790:	9f08      	ldr	r7, [sp, #32]
 8022792:	ebae 0e02 	sub.w	lr, lr, r2
 8022796:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802279a:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 802279e:	4351      	muls	r1, r2
 80227a0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80227a2:	fb0e 1e00 	mla	lr, lr, r0, r1
 80227a6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80227a8:	0410      	lsls	r0, r2, #16
 80227aa:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 80227ae:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 80227b2:	4310      	orrs	r0, r2
 80227b4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80227b6:	0412      	lsls	r2, r2, #16
 80227b8:	fb03 e000 	mla	r0, r3, r0, lr
 80227bc:	f421 6efc 	bic.w	lr, r1, #2016	@ 0x7e0
 80227c0:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 80227c4:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 80227c8:	ea42 020e 	orr.w	r2, r2, lr
 80227cc:	fb03 0302 	mla	r3, r3, r2, r0
 80227d0:	f8b8 0000 	ldrh.w	r0, [r8]
 80227d4:	0d5a      	lsrs	r2, r3, #21
 80227d6:	095b      	lsrs	r3, r3, #5
 80227d8:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80227dc:	1201      	asrs	r1, r0, #8
 80227de:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 80227e2:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 80227e6:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 80227ea:	00c0      	lsls	r0, r0, #3
 80227ec:	4313      	orrs	r3, r2
 80227ee:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 80227f2:	fb11 f107 	smulbb	r1, r1, r7
 80227f6:	b2c0      	uxtb	r0, r0
 80227f8:	b29b      	uxth	r3, r3
 80227fa:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 80227fe:	fb10 f007 	smulbb	r0, r0, r7
 8022802:	fb1e fe07 	smulbb	lr, lr, r7
 8022806:	ea4f 2c23 	mov.w	ip, r3, asr #8
 802280a:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 802280e:	fb0c 1c02 	mla	ip, ip, r2, r1
 8022812:	10d9      	asrs	r1, r3, #3
 8022814:	00db      	lsls	r3, r3, #3
 8022816:	fa1f fc8c 	uxth.w	ip, ip
 802281a:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 802281e:	b2db      	uxtb	r3, r3
 8022820:	fb01 e102 	mla	r1, r1, r2, lr
 8022824:	fb03 0302 	mla	r3, r3, r2, r0
 8022828:	b289      	uxth	r1, r1
 802282a:	b29a      	uxth	r2, r3
 802282c:	f10c 0301 	add.w	r3, ip, #1
 8022830:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8022834:	1c53      	adds	r3, r2, #1
 8022836:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802283a:	1c4a      	adds	r2, r1, #1
 802283c:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8022840:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8022844:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8022848:	0949      	lsrs	r1, r1, #5
 802284a:	ea43 030c 	orr.w	r3, r3, ip
 802284e:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8022852:	430b      	orrs	r3, r1
 8022854:	f8a8 3000 	strh.w	r3, [r8]
 8022858:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802285a:	f108 0802 	add.w	r8, r8, #2
 802285e:	f109 39ff 	add.w	r9, r9, #4294967295
 8022862:	441c      	add	r4, r3
 8022864:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8022866:	441e      	add	r6, r3
 8022868:	e74a      	b.n	8022700 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802286a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802286c:	3d01      	subs	r5, #1
 802286e:	441c      	add	r4, r3
 8022870:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8022872:	441e      	add	r6, r3
 8022874:	9b07      	ldr	r3, [sp, #28]
 8022876:	3302      	adds	r3, #2
 8022878:	9307      	str	r3, [sp, #28]
 802287a:	e722      	b.n	80226c2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 802287c:	d022      	beq.n	80228c4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 802287e:	1e6b      	subs	r3, r5, #1
 8022880:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8022882:	fb00 4003 	mla	r0, r0, r3, r4
 8022886:	1400      	asrs	r0, r0, #16
 8022888:	f53f af37 	bmi.w	80226fa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802288c:	3901      	subs	r1, #1
 802288e:	4288      	cmp	r0, r1
 8022890:	f6bf af33 	bge.w	80226fa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8022894:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8022896:	fb01 6303 	mla	r3, r1, r3, r6
 802289a:	141b      	asrs	r3, r3, #16
 802289c:	f53f af2d 	bmi.w	80226fa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80228a0:	3a01      	subs	r2, #1
 80228a2:	4293      	cmp	r3, r2
 80228a4:	f6bf af29 	bge.w	80226fa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80228a8:	46a8      	mov	r8, r5
 80228aa:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80228ae:	f8bd a02c 	ldrh.w	sl, [sp, #44]	@ 0x2c
 80228b2:	f1b8 0f00 	cmp.w	r8, #0
 80228b6:	dc60      	bgt.n	802297a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 80228b8:	9b07      	ldr	r3, [sp, #28]
 80228ba:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80228be:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 80228c2:	9307      	str	r3, [sp, #28]
 80228c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80228c6:	2b00      	cmp	r3, #0
 80228c8:	f340 80f8 	ble.w	8022abc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80228cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80228d0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80228d2:	ee30 0a04 	vadd.f32	s0, s0, s8
 80228d6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80228da:	eef0 6a62 	vmov.f32	s13, s5
 80228de:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80228e2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80228e6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80228ea:	ee16 4a90 	vmov	r4, s13
 80228ee:	eef0 6a43 	vmov.f32	s13, s6
 80228f2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80228f6:	ee16 6a90 	vmov	r6, s13
 80228fa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80228fe:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022902:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022906:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802290a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802290e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022912:	ee12 2a90 	vmov	r2, s5
 8022916:	eef0 2a47 	vmov.f32	s5, s14
 802291a:	fb92 f3f3 	sdiv	r3, r2, r3
 802291e:	ee13 2a10 	vmov	r2, s6
 8022922:	931f      	str	r3, [sp, #124]	@ 0x7c
 8022924:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8022926:	eeb0 3a67 	vmov.f32	s6, s15
 802292a:	fb92 f3f3 	sdiv	r3, r2, r3
 802292e:	9320      	str	r3, [sp, #128]	@ 0x80
 8022930:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022932:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8022934:	3b01      	subs	r3, #1
 8022936:	930a      	str	r3, [sp, #40]	@ 0x28
 8022938:	bf08      	it	eq
 802293a:	4615      	moveq	r5, r2
 802293c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802293e:	bf18      	it	ne
 8022940:	461d      	movne	r5, r3
 8022942:	e6af      	b.n	80226a4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8022944:	f111 0a01 	adds.w	sl, r1, #1
 8022948:	d486      	bmi.n	8022858 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 802294a:	45d6      	cmp	lr, sl
 802294c:	db84      	blt.n	8022858 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 802294e:	f110 0a01 	adds.w	sl, r0, #1
 8022952:	d481      	bmi.n	8022858 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8022954:	4553      	cmp	r3, sl
 8022956:	f6ff af7f 	blt.w	8022858 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 802295a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 802295c:	b21b      	sxth	r3, r3
 802295e:	9101      	str	r1, [sp, #4]
 8022960:	4641      	mov	r1, r8
 8022962:	9300      	str	r3, [sp, #0]
 8022964:	fa0f f38e 	sxth.w	r3, lr
 8022968:	e9cd 0202 	strd	r0, r2, [sp, #8]
 802296c:	e9cd c704 	strd	ip, r7, [sp, #16]
 8022970:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022972:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8022974:	f7ff fdb2 	bl	80224dc <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 8022978:	e76e      	b.n	8022858 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 802297a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802297c:	1430      	asrs	r0, r6, #16
 802297e:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8022980:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8022984:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022988:	1423      	asrs	r3, r4, #16
 802298a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802298e:	fb01 3000 	mla	r0, r1, r0, r3
 8022992:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022994:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8022998:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 802299c:	8858      	ldrh	r0, [r3, #2]
 802299e:	f1be 0f00 	cmp.w	lr, #0
 80229a2:	d00b      	beq.n	80229bc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 80229a4:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 80229a8:	3901      	subs	r1, #1
 80229aa:	0049      	lsls	r1, r1, #1
 80229ac:	3102      	adds	r1, #2
 80229ae:	eb03 0b01 	add.w	fp, r3, r1
 80229b2:	5a5b      	ldrh	r3, [r3, r1]
 80229b4:	930e      	str	r3, [sp, #56]	@ 0x38
 80229b6:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 80229ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 80229bc:	ea4f 410c 	mov.w	r1, ip, lsl #16
 80229c0:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 80229c4:	fb12 f30e 	smulbb	r3, r2, lr
 80229c8:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 80229cc:	f001 61fc 	and.w	r1, r1, #132120576	@ 0x7e00000
 80229d0:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 80229d4:	10db      	asrs	r3, r3, #3
 80229d6:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 80229da:	ea41 010c 	orr.w	r1, r1, ip
 80229de:	f1ce 0c10 	rsb	ip, lr, #16
 80229e2:	ea4b 0000 	orr.w	r0, fp, r0
 80229e6:	9f08      	ldr	r7, [sp, #32]
 80229e8:	ebac 0c02 	sub.w	ip, ip, r2
 80229ec:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80229f0:	f108 38ff 	add.w	r8, r8, #4294967295
 80229f4:	4350      	muls	r0, r2
 80229f6:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 80229fa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80229fc:	fb0c 0c01 	mla	ip, ip, r1, r0
 8022a00:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8022a02:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8022a06:	f422 61fc 	bic.w	r1, r2, #2016	@ 0x7e0
 8022a0a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8022a0c:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8022a10:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8022a14:	0412      	lsls	r2, r2, #16
 8022a16:	ea4b 0101 	orr.w	r1, fp, r1
 8022a1a:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8022a1e:	fb03 c101 	mla	r1, r3, r1, ip
 8022a22:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8022a26:	4302      	orrs	r2, r0
 8022a28:	fb03 1202 	mla	r2, r3, r2, r1
 8022a2c:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 8022a30:	0952      	lsrs	r2, r2, #5
 8022a32:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 8022a36:	f422 63fc 	bic.w	r3, r2, #2016	@ 0x7e0
 8022a3a:	f8b9 2000 	ldrh.w	r2, [r9]
 8022a3e:	ea4b 0303 	orr.w	r3, fp, r3
 8022a42:	1211      	asrs	r1, r2, #8
 8022a44:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 8022a48:	b29b      	uxth	r3, r3
 8022a4a:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8022a4e:	00d2      	lsls	r2, r2, #3
 8022a50:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 8022a54:	fb11 f107 	smulbb	r1, r1, r7
 8022a58:	1218      	asrs	r0, r3, #8
 8022a5a:	fb1c fc07 	smulbb	ip, ip, r7
 8022a5e:	b2d2      	uxtb	r2, r2
 8022a60:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8022a64:	fb12 f207 	smulbb	r2, r2, r7
 8022a68:	fb00 100a 	mla	r0, r0, sl, r1
 8022a6c:	10d9      	asrs	r1, r3, #3
 8022a6e:	00db      	lsls	r3, r3, #3
 8022a70:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8022a74:	b280      	uxth	r0, r0
 8022a76:	b2db      	uxtb	r3, r3
 8022a78:	fb01 c10a 	mla	r1, r1, sl, ip
 8022a7c:	fb03 230a 	mla	r3, r3, sl, r2
 8022a80:	1c42      	adds	r2, r0, #1
 8022a82:	b289      	uxth	r1, r1
 8022a84:	b29b      	uxth	r3, r3
 8022a86:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8022a8a:	f101 0c01 	add.w	ip, r1, #1
 8022a8e:	1c5a      	adds	r2, r3, #1
 8022a90:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8022a94:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 8022a98:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022a9c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8022a9e:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8022aa2:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8022aa6:	441c      	add	r4, r3
 8022aa8:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8022aac:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8022aae:	4310      	orrs	r0, r2
 8022ab0:	441e      	add	r6, r3
 8022ab2:	ea40 000c 	orr.w	r0, r0, ip
 8022ab6:	f829 0b02 	strh.w	r0, [r9], #2
 8022aba:	e6fa      	b.n	80228b2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8022abc:	b013      	add	sp, #76	@ 0x4c
 8022abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022ac2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 8022ac2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022ac6:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
 8022aca:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
 8022ace:	fb0e 4703 	mla	r7, lr, r3, r4
 8022ad2:	f1be 0f00 	cmp.w	lr, #0
 8022ad6:	f89d 5028 	ldrb.w	r5, [sp, #40]	@ 0x28
 8022ada:	f89d 602c 	ldrb.w	r6, [sp, #44]	@ 0x2c
 8022ade:	eb02 0847 	add.w	r8, r2, r7, lsl #1
 8022ae2:	8808      	ldrh	r0, [r1, #0]
 8022ae4:	db60      	blt.n	8022ba8 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 8022ae6:	45f1      	cmp	r9, lr
 8022ae8:	dd5e      	ble.n	8022ba8 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 8022aea:	2c00      	cmp	r4, #0
 8022aec:	db5a      	blt.n	8022ba4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 8022aee:	42a3      	cmp	r3, r4
 8022af0:	dd58      	ble.n	8022ba4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 8022af2:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
 8022af6:	1c62      	adds	r2, r4, #1
 8022af8:	d459      	bmi.n	8022bae <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8022afa:	4293      	cmp	r3, r2
 8022afc:	dd57      	ble.n	8022bae <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8022afe:	2d00      	cmp	r5, #0
 8022b00:	d055      	beq.n	8022bae <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8022b02:	f8b8 7002 	ldrh.w	r7, [r8, #2]
 8022b06:	f11e 0e01 	adds.w	lr, lr, #1
 8022b0a:	d454      	bmi.n	8022bb6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8022b0c:	45f1      	cmp	r9, lr
 8022b0e:	dd52      	ble.n	8022bb6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8022b10:	2e00      	cmp	r6, #0
 8022b12:	d050      	beq.n	8022bb6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8022b14:	2c00      	cmp	r4, #0
 8022b16:	db4c      	blt.n	8022bb2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 8022b18:	42a3      	cmp	r3, r4
 8022b1a:	dd4a      	ble.n	8022bb2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 8022b1c:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 8022b20:	3401      	adds	r4, #1
 8022b22:	d405      	bmi.n	8022b30 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8022b24:	42a3      	cmp	r3, r4
 8022b26:	dd03      	ble.n	8022b30 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8022b28:	b115      	cbz	r5, 8022b30 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8022b2a:	3301      	adds	r3, #1
 8022b2c:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
 8022b30:	fb15 f406 	smulbb	r4, r5, r6
 8022b34:	ea4f 430c 	mov.w	r3, ip, lsl #16
 8022b38:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 8022b3c:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8022b40:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8022b44:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 8022b48:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 8022b4c:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 8022b50:	ea43 0c0c 	orr.w	ip, r3, ip
 8022b54:	f1c6 0310 	rsb	r3, r6, #16
 8022b58:	ea4e 0707 	orr.w	r7, lr, r7
 8022b5c:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 8022b60:	1b5b      	subs	r3, r3, r5
 8022b62:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 8022b66:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8022b6a:	437d      	muls	r5, r7
 8022b6c:	fb03 5c0c 	mla	ip, r3, ip, r5
 8022b70:	0403      	lsls	r3, r0, #16
 8022b72:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8022b76:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8022b7a:	4318      	orrs	r0, r3
 8022b7c:	0413      	lsls	r3, r2, #16
 8022b7e:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8022b82:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8022b86:	fb04 c000 	mla	r0, r4, r0, ip
 8022b8a:	4313      	orrs	r3, r2
 8022b8c:	fb06 0003 	mla	r0, r6, r3, r0
 8022b90:	0d43      	lsrs	r3, r0, #21
 8022b92:	0940      	lsrs	r0, r0, #5
 8022b94:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8022b98:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8022b9c:	4318      	orrs	r0, r3
 8022b9e:	8008      	strh	r0, [r1, #0]
 8022ba0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022ba4:	4684      	mov	ip, r0
 8022ba6:	e7a6      	b.n	8022af6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
 8022ba8:	4607      	mov	r7, r0
 8022baa:	4684      	mov	ip, r0
 8022bac:	e7ab      	b.n	8022b06 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 8022bae:	4607      	mov	r7, r0
 8022bb0:	e7a9      	b.n	8022b06 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 8022bb2:	4602      	mov	r2, r0
 8022bb4:	e7b4      	b.n	8022b20 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
 8022bb6:	4602      	mov	r2, r0
 8022bb8:	e7ba      	b.n	8022b30 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

08022bba <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022bba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022bbe:	b08f      	sub	sp, #60	@ 0x3c
 8022bc0:	461d      	mov	r5, r3
 8022bc2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8022bc4:	9107      	str	r1, [sp, #28]
 8022bc6:	920c      	str	r2, [sp, #48]	@ 0x30
 8022bc8:	6859      	ldr	r1, [r3, #4]
 8022bca:	681b      	ldr	r3, [r3, #0]
 8022bcc:	900d      	str	r0, [sp, #52]	@ 0x34
 8022bce:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	@ 0x78
 8022bd2:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	@ 0x64
 8022bd6:	fb01 2707 	mla	r7, r1, r7, r2
 8022bda:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 8022bde:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8022be0:	f8d3 8000 	ldr.w	r8, [r3]
 8022be4:	9b07      	ldr	r3, [sp, #28]
 8022be6:	2b00      	cmp	r3, #0
 8022be8:	dc03      	bgt.n	8022bf2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8022bea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022bec:	2b00      	cmp	r3, #0
 8022bee:	f340 8182 	ble.w	8022ef6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
 8022bf2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8022bf4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022bf8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022bfc:	1e48      	subs	r0, r1, #1
 8022bfe:	f102 3cff 	add.w	ip, r2, #4294967295
 8022c02:	2d00      	cmp	r5, #0
 8022c04:	f340 809b 	ble.w	8022d3e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 8022c08:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8022c0c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022c10:	d406      	bmi.n	8022c20 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8022c12:	4586      	cmp	lr, r0
 8022c14:	da04      	bge.n	8022c20 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8022c16:	2b00      	cmp	r3, #0
 8022c18:	db02      	blt.n	8022c20 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8022c1a:	4563      	cmp	r3, ip
 8022c1c:	f2c0 8090 	blt.w	8022d40 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8022c20:	f11e 0e01 	adds.w	lr, lr, #1
 8022c24:	f100 8084 	bmi.w	8022d30 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8022c28:	4571      	cmp	r1, lr
 8022c2a:	f2c0 8081 	blt.w	8022d30 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8022c2e:	3301      	adds	r3, #1
 8022c30:	d47e      	bmi.n	8022d30 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8022c32:	429a      	cmp	r2, r3
 8022c34:	db7c      	blt.n	8022d30 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8022c36:	46aa      	mov	sl, r5
 8022c38:	46b9      	mov	r9, r7
 8022c3a:	f1ba 0f00 	cmp.w	sl, #0
 8022c3e:	f340 8099 	ble.w	8022d74 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8022c42:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8022c44:	1421      	asrs	r1, r4, #16
 8022c46:	ea4f 4026 	mov.w	r0, r6, asr #16
 8022c4a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8022c4e:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8022c52:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8022c56:	f100 80d1 	bmi.w	8022dfc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8022c5a:	f10e 3bff 	add.w	fp, lr, #4294967295
 8022c5e:	4559      	cmp	r1, fp
 8022c60:	f280 80cc 	bge.w	8022dfc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8022c64:	2800      	cmp	r0, #0
 8022c66:	f2c0 80c9 	blt.w	8022dfc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8022c6a:	f103 3bff 	add.w	fp, r3, #4294967295
 8022c6e:	4558      	cmp	r0, fp
 8022c70:	f280 80c4 	bge.w	8022dfc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8022c74:	fa0f fe8e 	sxth.w	lr, lr
 8022c78:	fb00 110e 	mla	r1, r0, lr, r1
 8022c7c:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8022c80:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 8022c84:	8841      	ldrh	r1, [r0, #2]
 8022c86:	f1bc 0f00 	cmp.w	ip, #0
 8022c8a:	d00b      	beq.n	8022ca4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 8022c8c:	f10e 4300 	add.w	r3, lr, #2147483648	@ 0x80000000
 8022c90:	3b01      	subs	r3, #1
 8022c92:	005b      	lsls	r3, r3, #1
 8022c94:	3302      	adds	r3, #2
 8022c96:	eb00 0e03 	add.w	lr, r0, r3
 8022c9a:	5ac3      	ldrh	r3, [r0, r3]
 8022c9c:	9308      	str	r3, [sp, #32]
 8022c9e:	f8be 3002 	ldrh.w	r3, [lr, #2]
 8022ca2:	9309      	str	r3, [sp, #36]	@ 0x24
 8022ca4:	ea4f 400b 	mov.w	r0, fp, lsl #16
 8022ca8:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
 8022cac:	fb12 f30c 	smulbb	r3, r2, ip
 8022cb0:	f1cc 0e10 	rsb	lr, ip, #16
 8022cb4:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8022cb8:	10db      	asrs	r3, r3, #3
 8022cba:	ebae 0e02 	sub.w	lr, lr, r2
 8022cbe:	ea40 000b 	orr.w	r0, r0, fp
 8022cc2:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8022cc6:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8022cca:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8022cce:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8022cd2:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8022cd6:	ea4b 0101 	orr.w	r1, fp, r1
 8022cda:	4351      	muls	r1, r2
 8022cdc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022cde:	fb0e 1e00 	mla	lr, lr, r0, r1
 8022ce2:	0410      	lsls	r0, r2, #16
 8022ce4:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8022ce8:	9908      	ldr	r1, [sp, #32]
 8022cea:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8022cee:	4310      	orrs	r0, r2
 8022cf0:	9a08      	ldr	r2, [sp, #32]
 8022cf2:	0412      	lsls	r2, r2, #16
 8022cf4:	fb03 e000 	mla	r0, r3, r0, lr
 8022cf8:	f421 6efc 	bic.w	lr, r1, #2016	@ 0x7e0
 8022cfc:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8022d00:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8022d04:	ea42 020e 	orr.w	r2, r2, lr
 8022d08:	fb03 0302 	mla	r3, r3, r2, r0
 8022d0c:	0d5a      	lsrs	r2, r3, #21
 8022d0e:	095b      	lsrs	r3, r3, #5
 8022d10:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8022d14:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8022d18:	4313      	orrs	r3, r2
 8022d1a:	f8a9 3000 	strh.w	r3, [r9]
 8022d1e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8022d20:	f109 0902 	add.w	r9, r9, #2
 8022d24:	f10a 3aff 	add.w	sl, sl, #4294967295
 8022d28:	441c      	add	r4, r3
 8022d2a:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8022d2c:	441e      	add	r6, r3
 8022d2e:	e784      	b.n	8022c3a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8022d30:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8022d32:	3d01      	subs	r5, #1
 8022d34:	3702      	adds	r7, #2
 8022d36:	441c      	add	r4, r3
 8022d38:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8022d3a:	441e      	add	r6, r3
 8022d3c:	e761      	b.n	8022c02 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8022d3e:	d01d      	beq.n	8022d7c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8022d40:	1e6b      	subs	r3, r5, #1
 8022d42:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8022d44:	fb00 4003 	mla	r0, r0, r3, r4
 8022d48:	1400      	asrs	r0, r0, #16
 8022d4a:	f53f af74 	bmi.w	8022c36 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8022d4e:	3901      	subs	r1, #1
 8022d50:	4288      	cmp	r0, r1
 8022d52:	f6bf af70 	bge.w	8022c36 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8022d56:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8022d58:	fb01 6303 	mla	r3, r1, r3, r6
 8022d5c:	141b      	asrs	r3, r3, #16
 8022d5e:	f53f af6a 	bmi.w	8022c36 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8022d62:	3a01      	subs	r2, #1
 8022d64:	4293      	cmp	r3, r2
 8022d66:	f6bf af66 	bge.w	8022c36 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8022d6a:	46a9      	mov	r9, r5
 8022d6c:	46ba      	mov	sl, r7
 8022d6e:	f1b9 0f00 	cmp.w	r9, #0
 8022d72:	dc5b      	bgt.n	8022e2c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8022d74:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8022d78:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 8022d7c:	9b07      	ldr	r3, [sp, #28]
 8022d7e:	2b00      	cmp	r3, #0
 8022d80:	f340 80b9 	ble.w	8022ef6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
 8022d84:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8022d88:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8022d8a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022d8e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022d92:	eef0 6a62 	vmov.f32	s13, s5
 8022d96:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022d9a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022d9e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022da2:	ee16 4a90 	vmov	r4, s13
 8022da6:	eef0 6a43 	vmov.f32	s13, s6
 8022daa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022dae:	ee16 6a90 	vmov	r6, s13
 8022db2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022db6:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022dba:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022dbe:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022dc2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022dc6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022dca:	ee12 2a90 	vmov	r2, s5
 8022dce:	eef0 2a47 	vmov.f32	s5, s14
 8022dd2:	fb92 f3f3 	sdiv	r3, r2, r3
 8022dd6:	ee13 2a10 	vmov	r2, s6
 8022dda:	931b      	str	r3, [sp, #108]	@ 0x6c
 8022ddc:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8022dde:	eeb0 3a67 	vmov.f32	s6, s15
 8022de2:	fb92 f3f3 	sdiv	r3, r2, r3
 8022de6:	931c      	str	r3, [sp, #112]	@ 0x70
 8022de8:	9b07      	ldr	r3, [sp, #28]
 8022dea:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8022dec:	3b01      	subs	r3, #1
 8022dee:	9307      	str	r3, [sp, #28]
 8022df0:	bf08      	it	eq
 8022df2:	4615      	moveq	r5, r2
 8022df4:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8022df6:	bf18      	it	ne
 8022df8:	461d      	movne	r5, r3
 8022dfa:	e6f3      	b.n	8022be4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8022dfc:	f111 0b01 	adds.w	fp, r1, #1
 8022e00:	d48d      	bmi.n	8022d1e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8022e02:	45de      	cmp	lr, fp
 8022e04:	db8b      	blt.n	8022d1e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8022e06:	f110 0b01 	adds.w	fp, r0, #1
 8022e0a:	d488      	bmi.n	8022d1e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8022e0c:	455b      	cmp	r3, fp
 8022e0e:	db86      	blt.n	8022d1e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8022e10:	b21b      	sxth	r3, r3
 8022e12:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8022e16:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 8022e1a:	9300      	str	r3, [sp, #0]
 8022e1c:	4642      	mov	r2, r8
 8022e1e:	fa0f f38e 	sxth.w	r3, lr
 8022e22:	4649      	mov	r1, r9
 8022e24:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8022e26:	f7ff fe4c 	bl	8022ac2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 8022e2a:	e778      	b.n	8022d1e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8022e2c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8022e2e:	1420      	asrs	r0, r4, #16
 8022e30:	1431      	asrs	r1, r6, #16
 8022e32:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8022e36:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8022e3a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8022e3e:	fb03 0101 	mla	r1, r3, r1, r0
 8022e42:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8022e46:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 8022e4a:	8841      	ldrh	r1, [r0, #2]
 8022e4c:	f1be 0f00 	cmp.w	lr, #0
 8022e50:	d00b      	beq.n	8022e6a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8022e52:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8022e56:	3b01      	subs	r3, #1
 8022e58:	005b      	lsls	r3, r3, #1
 8022e5a:	3302      	adds	r3, #2
 8022e5c:	eb00 0b03 	add.w	fp, r0, r3
 8022e60:	5ac3      	ldrh	r3, [r0, r3]
 8022e62:	930a      	str	r3, [sp, #40]	@ 0x28
 8022e64:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8022e68:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022e6a:	ea4f 400c 	mov.w	r0, ip, lsl #16
 8022e6e:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8022e72:	fb12 f30e 	smulbb	r3, r2, lr
 8022e76:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8022e7a:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8022e7e:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8022e82:	10db      	asrs	r3, r3, #3
 8022e84:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8022e88:	ea40 000c 	orr.w	r0, r0, ip
 8022e8c:	f1ce 0c10 	rsb	ip, lr, #16
 8022e90:	ea4b 0101 	orr.w	r1, fp, r1
 8022e94:	f109 39ff 	add.w	r9, r9, #4294967295
 8022e98:	ebac 0c02 	sub.w	ip, ip, r2
 8022e9c:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8022ea0:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8022ea4:	4351      	muls	r1, r2
 8022ea6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8022ea8:	fb0c 1c00 	mla	ip, ip, r0, r1
 8022eac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8022eae:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8022eb2:	f422 60fc 	bic.w	r0, r2, #2016	@ 0x7e0
 8022eb6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8022eb8:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8022ebc:	0412      	lsls	r2, r2, #16
 8022ebe:	ea4b 0000 	orr.w	r0, fp, r0
 8022ec2:	f421 6bfc 	bic.w	fp, r1, #2016	@ 0x7e0
 8022ec6:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8022eca:	fb03 c000 	mla	r0, r3, r0, ip
 8022ece:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8022ed2:	ea42 0b0b 	orr.w	fp, r2, fp
 8022ed6:	fb03 000b 	mla	r0, r3, fp, r0
 8022eda:	0d43      	lsrs	r3, r0, #21
 8022edc:	0940      	lsrs	r0, r0, #5
 8022ede:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8022ee2:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8022ee6:	4318      	orrs	r0, r3
 8022ee8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8022eea:	441c      	add	r4, r3
 8022eec:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8022eee:	f82a 0b02 	strh.w	r0, [sl], #2
 8022ef2:	441e      	add	r6, r3
 8022ef4:	e73b      	b.n	8022d6e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8022ef6:	b00f      	add	sp, #60	@ 0x3c
 8022ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022efc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 8022efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022f00:	b085      	sub	sp, #20
 8022f02:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	@ 0x3c
 8022f06:	9102      	str	r1, [sp, #8]
 8022f08:	2c00      	cmp	r4, #0
 8022f0a:	fb04 7103 	mla	r1, r4, r3, r7
 8022f0e:	f9bd e038 	ldrsh.w	lr, [sp, #56]	@ 0x38
 8022f12:	f89d 6044 	ldrb.w	r6, [sp, #68]	@ 0x44
 8022f16:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 8022f1a:	f89d 0048 	ldrb.w	r0, [sp, #72]	@ 0x48
 8022f1e:	f2c0 811b 	blt.w	8023158 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 8022f22:	45a6      	cmp	lr, r4
 8022f24:	f340 8118 	ble.w	8023158 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 8022f28:	2f00      	cmp	r7, #0
 8022f2a:	f2c0 8113 	blt.w	8023154 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 8022f2e:	42bb      	cmp	r3, r7
 8022f30:	f340 8110 	ble.w	8023154 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 8022f34:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 8022f38:	1c7a      	adds	r2, r7, #1
 8022f3a:	f100 8110 	bmi.w	802315e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 8022f3e:	4293      	cmp	r3, r2
 8022f40:	f340 810d 	ble.w	802315e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 8022f44:	2e00      	cmp	r6, #0
 8022f46:	f000 810c 	beq.w	8023162 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
 8022f4a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8022f4e:	3401      	adds	r4, #1
 8022f50:	f100 810b 	bmi.w	802316a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 8022f54:	45a6      	cmp	lr, r4
 8022f56:	f340 8108 	ble.w	802316a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 8022f5a:	2800      	cmp	r0, #0
 8022f5c:	f000 8108 	beq.w	8023170 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
 8022f60:	2f00      	cmp	r7, #0
 8022f62:	f2c0 8100 	blt.w	8023166 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 8022f66:	42bb      	cmp	r3, r7
 8022f68:	f340 80fd 	ble.w	8023166 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 8022f6c:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8022f70:	3701      	adds	r7, #1
 8022f72:	f100 8100 	bmi.w	8023176 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 8022f76:	42bb      	cmp	r3, r7
 8022f78:	f340 80fd 	ble.w	8023176 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 8022f7c:	2e00      	cmp	r6, #0
 8022f7e:	f000 80fc 	beq.w	802317a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
 8022f82:	3301      	adds	r3, #1
 8022f84:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8022f88:	b2b6      	uxth	r6, r6
 8022f8a:	b280      	uxth	r0, r0
 8022f8c:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8022f90:	fb00 fe06 	mul.w	lr, r0, r6
 8022f94:	0136      	lsls	r6, r6, #4
 8022f96:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8022f9a:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8022f9e:	eba6 070e 	sub.w	r7, r6, lr
 8022fa2:	f5c6 7380 	rsb	r3, r6, #256	@ 0x100
 8022fa6:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8022faa:	b280      	uxth	r0, r0
 8022fac:	b2bf      	uxth	r7, r7
 8022fae:	1a1b      	subs	r3, r3, r0
 8022fb0:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8022fb4:	fb0a f607 	mul.w	r6, sl, r7
 8022fb8:	b29b      	uxth	r3, r3
 8022fba:	fb0b 6603 	mla	r6, fp, r3, r6
 8022fbe:	fb00 6609 	mla	r6, r0, r9, r6
 8022fc2:	fb0e 6608 	mla	r6, lr, r8, r6
 8022fc6:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8022fca:	9600      	str	r6, [sp, #0]
 8022fcc:	2e00      	cmp	r6, #0
 8022fce:	f000 80be 	beq.w	802314e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
 8022fd2:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8022fd6:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8022fda:	9e02      	ldr	r6, [sp, #8]
 8022fdc:	fb0b fc0c 	mul.w	ip, fp, ip
 8022fe0:	fb0b f505 	mul.w	r5, fp, r5
 8022fe4:	8836      	ldrh	r6, [r6, #0]
 8022fe6:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8022fea:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8022fee:	9501      	str	r5, [sp, #4]
 8022ff0:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 8022ff4:	44dc      	add	ip, fp
 8022ff6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022ffa:	f00c 15ff 	and.w	r5, ip, #16711935	@ 0xff00ff
 8022ffe:	9503      	str	r5, [sp, #12]
 8023000:	9d01      	ldr	r5, [sp, #4]
 8023002:	f505 7c80 	add.w	ip, r5, #256	@ 0x100
 8023006:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 802300a:	f001 1cff 	and.w	ip, r1, #16711935	@ 0xff00ff
 802300e:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8023012:	fb0a fc0c 	mul.w	ip, sl, ip
 8023016:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 802301a:	fb0a fa01 	mul.w	sl, sl, r1
 802301e:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8023022:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8023026:	f50a 7180 	add.w	r1, sl, #256	@ 0x100
 802302a:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 802302e:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8023032:	4465      	add	r5, ip
 8023034:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8023038:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 802303c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023040:	fb09 fc0c 	mul.w	ip, r9, ip
 8023044:	0a2d      	lsrs	r5, r5, #8
 8023046:	fb09 f904 	mul.w	r9, r9, r4
 802304a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802304e:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8023052:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8023056:	f509 7480 	add.w	r4, r9, #256	@ 0x100
 802305a:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802305e:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 8023062:	437d      	muls	r5, r7
 8023064:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8023068:	f002 14ff 	and.w	r4, r2, #16711935	@ 0xff00ff
 802306c:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8023070:	4461      	add	r1, ip
 8023072:	fb08 f404 	mul.w	r4, r8, r4
 8023076:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802307a:	fb08 f802 	mul.w	r8, r8, r2
 802307e:	0a09      	lsrs	r1, r1, #8
 8023080:	0a22      	lsrs	r2, r4, #8
 8023082:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 8023086:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 802308a:	fb07 f70a 	mul.w	r7, r7, sl
 802308e:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8023092:	4414      	add	r4, r2
 8023094:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 8023098:	0a24      	lsrs	r4, r4, #8
 802309a:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 802309e:	9a03      	ldr	r2, [sp, #12]
 80230a0:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 80230a4:	fb02 5503 	mla	r5, r2, r3, r5
 80230a8:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80230ac:	9a00      	ldr	r2, [sp, #0]
 80230ae:	fb04 540e 	mla	r4, r4, lr, r5
 80230b2:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 80230b6:	1235      	asrs	r5, r6, #8
 80230b8:	fb01 4100 	mla	r1, r1, r0, r4
 80230bc:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 80230c0:	0a09      	lsrs	r1, r1, #8
 80230c2:	f001 14ff 	and.w	r4, r1, #16711935	@ 0xff00ff
 80230c6:	f40b 417f 	and.w	r1, fp, #65280	@ 0xff00
 80230ca:	fb03 7101 	mla	r1, r3, r1, r7
 80230ce:	fb0e 1e08 	mla	lr, lr, r8, r1
 80230d2:	f409 417f 	and.w	r1, r9, #65280	@ 0xff00
 80230d6:	fb00 e101 	mla	r1, r0, r1, lr
 80230da:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 80230de:	b287      	uxth	r7, r0
 80230e0:	0a09      	lsrs	r1, r1, #8
 80230e2:	437a      	muls	r2, r7
 80230e4:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 80230e8:	1c53      	adds	r3, r2, #1
 80230ea:	4321      	orrs	r1, r4
 80230ec:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80230f0:	0c0a      	lsrs	r2, r1, #16
 80230f2:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80230f6:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 80230fa:	b2c8      	uxtb	r0, r1
 80230fc:	fb12 f207 	smulbb	r2, r2, r7
 8023100:	fb14 f407 	smulbb	r4, r4, r7
 8023104:	b2db      	uxtb	r3, r3
 8023106:	fb10 f007 	smulbb	r0, r0, r7
 802310a:	fb05 2503 	mla	r5, r5, r3, r2
 802310e:	10f2      	asrs	r2, r6, #3
 8023110:	00f6      	lsls	r6, r6, #3
 8023112:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8023116:	b2ad      	uxth	r5, r5
 8023118:	b2f6      	uxtb	r6, r6
 802311a:	fb02 4203 	mla	r2, r2, r3, r4
 802311e:	fb06 0303 	mla	r3, r6, r3, r0
 8023122:	b294      	uxth	r4, r2
 8023124:	b299      	uxth	r1, r3
 8023126:	1c6b      	adds	r3, r5, #1
 8023128:	1c62      	adds	r2, r4, #1
 802312a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802312e:	1c4b      	adds	r3, r1, #1
 8023130:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8023134:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8023138:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 802313c:	0952      	lsrs	r2, r2, #5
 802313e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8023142:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8023146:	432b      	orrs	r3, r5
 8023148:	4313      	orrs	r3, r2
 802314a:	9a02      	ldr	r2, [sp, #8]
 802314c:	8013      	strh	r3, [r2, #0]
 802314e:	b005      	add	sp, #20
 8023150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023154:	2500      	movs	r5, #0
 8023156:	e6ef      	b.n	8022f38 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
 8023158:	2100      	movs	r1, #0
 802315a:	460d      	mov	r5, r1
 802315c:	e6f7      	b.n	8022f4e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 802315e:	2100      	movs	r1, #0
 8023160:	e6f5      	b.n	8022f4e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8023162:	4631      	mov	r1, r6
 8023164:	e6f3      	b.n	8022f4e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8023166:	2400      	movs	r4, #0
 8023168:	e702      	b.n	8022f70 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 802316a:	2200      	movs	r2, #0
 802316c:	4614      	mov	r4, r2
 802316e:	e70b      	b.n	8022f88 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8023170:	4602      	mov	r2, r0
 8023172:	4604      	mov	r4, r0
 8023174:	e708      	b.n	8022f88 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8023176:	2200      	movs	r2, #0
 8023178:	e706      	b.n	8022f88 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 802317a:	4632      	mov	r2, r6
 802317c:	e704      	b.n	8022f88 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

0802317e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802317e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023182:	b09d      	sub	sp, #116	@ 0x74
 8023184:	9219      	str	r2, [sp, #100]	@ 0x64
 8023186:	9307      	str	r3, [sp, #28]
 8023188:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 802318a:	f89d 30bc 	ldrb.w	r3, [sp, #188]	@ 0xbc
 802318e:	901b      	str	r0, [sp, #108]	@ 0x6c
 8023190:	931a      	str	r3, [sp, #104]	@ 0x68
 8023192:	6850      	ldr	r0, [r2, #4]
 8023194:	9117      	str	r1, [sp, #92]	@ 0x5c
 8023196:	6812      	ldr	r2, [r2, #0]
 8023198:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	@ 0xb0
 802319c:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	@ 0x9c
 80231a0:	fb00 1303 	mla	r3, r0, r3, r1
 80231a4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80231a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80231aa:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 80231ac:	681b      	ldr	r3, [r3, #0]
 80231ae:	9310      	str	r3, [sp, #64]	@ 0x40
 80231b0:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 80231b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80231b6:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80231b8:	2b00      	cmp	r3, #0
 80231ba:	dc03      	bgt.n	80231c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 80231bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80231be:	2b00      	cmp	r3, #0
 80231c0:	f340 8375 	ble.w	80238ae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 80231c4:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 80231c6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80231ca:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80231ce:	1e48      	subs	r0, r1, #1
 80231d0:	1e57      	subs	r7, r2, #1
 80231d2:	9b07      	ldr	r3, [sp, #28]
 80231d4:	2b00      	cmp	r3, #0
 80231d6:	f340 818e 	ble.w	80234f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 80231da:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80231de:	ea4f 4326 	mov.w	r3, r6, asr #16
 80231e2:	d406      	bmi.n	80231f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80231e4:	4584      	cmp	ip, r0
 80231e6:	da04      	bge.n	80231f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80231e8:	2b00      	cmp	r3, #0
 80231ea:	db02      	blt.n	80231f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80231ec:	42bb      	cmp	r3, r7
 80231ee:	f2c0 8183 	blt.w	80234f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 80231f2:	f11c 0c01 	adds.w	ip, ip, #1
 80231f6:	f100 8173 	bmi.w	80234e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80231fa:	4561      	cmp	r1, ip
 80231fc:	f2c0 8170 	blt.w	80234e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8023200:	3301      	adds	r3, #1
 8023202:	f100 816d 	bmi.w	80234e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8023206:	429a      	cmp	r2, r3
 8023208:	f2c0 816a 	blt.w	80234e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802320c:	9b07      	ldr	r3, [sp, #28]
 802320e:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8023210:	9318      	str	r3, [sp, #96]	@ 0x60
 8023212:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8023214:	2b00      	cmp	r3, #0
 8023216:	f340 818c 	ble.w	8023532 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 802321a:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
 802321c:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8023220:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8023222:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8023226:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802322a:	1422      	asrs	r2, r4, #16
 802322c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8023230:	689b      	ldr	r3, [r3, #8]
 8023232:	f100 81cd 	bmi.w	80235d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8023236:	f103 38ff 	add.w	r8, r3, #4294967295
 802323a:	4542      	cmp	r2, r8
 802323c:	f280 81c8 	bge.w	80235d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8023240:	f1bc 0f00 	cmp.w	ip, #0
 8023244:	f2c0 81c4 	blt.w	80235d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8023248:	f10e 38ff 	add.w	r8, lr, #4294967295
 802324c:	45c4      	cmp	ip, r8
 802324e:	f280 81bf 	bge.w	80235d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8023252:	b21b      	sxth	r3, r3
 8023254:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8023256:	fb0c 2203 	mla	r2, ip, r3, r2
 802325a:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 802325e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8023262:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8023266:	2800      	cmp	r0, #0
 8023268:	f000 81a9 	beq.w	80235be <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 802326c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8023270:	950c      	str	r5, [sp, #48]	@ 0x30
 8023272:	0e2d      	lsrs	r5, r5, #24
 8023274:	9513      	str	r5, [sp, #76]	@ 0x4c
 8023276:	b181      	cbz	r1, 802329a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8023278:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 802327c:	3b01      	subs	r3, #1
 802327e:	009b      	lsls	r3, r3, #2
 8023280:	3304      	adds	r3, #4
 8023282:	eb08 0c03 	add.w	ip, r8, r3
 8023286:	f858 3003 	ldr.w	r3, [r8, r3]
 802328a:	9308      	str	r3, [sp, #32]
 802328c:	0e1b      	lsrs	r3, r3, #24
 802328e:	9311      	str	r3, [sp, #68]	@ 0x44
 8023290:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8023294:	930d      	str	r3, [sp, #52]	@ 0x34
 8023296:	0e1b      	lsrs	r3, r3, #24
 8023298:	9314      	str	r3, [sp, #80]	@ 0x50
 802329a:	b280      	uxth	r0, r0
 802329c:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802329e:	b289      	uxth	r1, r1
 80232a0:	fb00 f901 	mul.w	r9, r0, r1
 80232a4:	0100      	lsls	r0, r0, #4
 80232a6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80232aa:	eba0 0809 	sub.w	r8, r0, r9
 80232ae:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 80232b2:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80232b4:	b289      	uxth	r1, r1
 80232b6:	fa1f f888 	uxth.w	r8, r8
 80232ba:	1a5b      	subs	r3, r3, r1
 80232bc:	fb08 f000 	mul.w	r0, r8, r0
 80232c0:	b29b      	uxth	r3, r3
 80232c2:	fb03 000e 	mla	r0, r3, lr, r0
 80232c6:	fb01 0005 	mla	r0, r1, r5, r0
 80232ca:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80232cc:	fb09 0005 	mla	r0, r9, r5, r0
 80232d0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80232d4:	2800      	cmp	r0, #0
 80232d6:	f000 80fa 	beq.w	80234ce <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80232da:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 80232de:	d01b      	beq.n	8023318 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80232e0:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 80232e4:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80232e8:	fb0e fa0a 	mul.w	sl, lr, sl
 80232ec:	fb0e fe02 	mul.w	lr, lr, r2
 80232f0:	ea4f 221a 	mov.w	r2, sl, lsr #8
 80232f4:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 80232f8:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 80232fc:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8023300:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8023304:	4452      	add	r2, sl
 8023306:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802330a:	0a12      	lsrs	r2, r2, #8
 802330c:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8023310:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8023314:	ea42 020c 	orr.w	r2, r2, ip
 8023318:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 802331a:	2dff      	cmp	r5, #255	@ 0xff
 802331c:	d021      	beq.n	8023362 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 802331e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8023320:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8023324:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8023326:	fb05 fb0b 	mul.w	fp, r5, fp
 802332a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 802332c:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8023330:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8023332:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023336:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802333a:	fb05 fa0a 	mul.w	sl, r5, sl
 802333e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023342:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8023346:	44de      	add	lr, fp
 8023348:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802334c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023350:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023354:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023358:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802335c:	ea4e 050a 	orr.w	r5, lr, sl
 8023360:	950c      	str	r5, [sp, #48]	@ 0x30
 8023362:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8023364:	2dff      	cmp	r5, #255	@ 0xff
 8023366:	d021      	beq.n	80233ac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8023368:	9d08      	ldr	r5, [sp, #32]
 802336a:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 802336e:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8023370:	fb05 fb0b 	mul.w	fp, r5, fp
 8023374:	9d08      	ldr	r5, [sp, #32]
 8023376:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 802337a:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802337c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023380:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8023384:	fb05 fa0a 	mul.w	sl, r5, sl
 8023388:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802338c:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8023390:	44de      	add	lr, fp
 8023392:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023396:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802339a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802339e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80233a2:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80233a6:	ea4e 050a 	orr.w	r5, lr, sl
 80233aa:	9508      	str	r5, [sp, #32]
 80233ac:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80233ae:	2dff      	cmp	r5, #255	@ 0xff
 80233b0:	d021      	beq.n	80233f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80233b2:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80233b4:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 80233b8:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80233ba:	fb05 fb0b 	mul.w	fp, r5, fp
 80233be:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80233c0:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 80233c4:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80233c6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80233ca:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80233ce:	fb05 fa0a 	mul.w	sl, r5, sl
 80233d2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80233d6:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80233da:	44de      	add	lr, fp
 80233dc:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80233e0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80233e4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80233e8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80233ec:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80233f0:	ea4e 050a 	orr.w	r5, lr, sl
 80233f4:	950d      	str	r5, [sp, #52]	@ 0x34
 80233f6:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80233f8:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 80233fc:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8023400:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8023404:	9d08      	ldr	r5, [sp, #32]
 8023406:	fb08 fc0c 	mul.w	ip, r8, ip
 802340a:	fb03 cc0e 	mla	ip, r3, lr, ip
 802340e:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 8023412:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8023414:	fb01 cc0e 	mla	ip, r1, lr, ip
 8023418:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 802341c:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 802341e:	fb09 cc0e 	mla	ip, r9, lr, ip
 8023422:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 8023426:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8023428:	fb08 f80e 	mul.w	r8, r8, lr
 802342c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023430:	fb03 8202 	mla	r2, r3, r2, r8
 8023434:	9b08      	ldr	r3, [sp, #32]
 8023436:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802343a:	f403 4a7f 	and.w	sl, r3, #65280	@ 0xff00
 802343e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023440:	fb01 220a 	mla	r2, r1, sl, r2
 8023444:	f403 417f 	and.w	r1, r3, #65280	@ 0xff00
 8023448:	883b      	ldrh	r3, [r7, #0]
 802344a:	fb09 2901 	mla	r9, r9, r1, r2
 802344e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8023450:	1219      	asrs	r1, r3, #8
 8023452:	4342      	muls	r2, r0
 8023454:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023458:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 802345c:	1c50      	adds	r0, r2, #1
 802345e:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8023462:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8023466:	ea4c 0c09 	orr.w	ip, ip, r9
 802346a:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 802346e:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8023472:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8023476:	fa5f fc8c 	uxtb.w	ip, ip
 802347a:	fb12 f205 	smulbb	r2, r2, r5
 802347e:	b2c0      	uxtb	r0, r0
 8023480:	fb1c fc05 	smulbb	ip, ip, r5
 8023484:	fb01 2100 	mla	r1, r1, r0, r2
 8023488:	10da      	asrs	r2, r3, #3
 802348a:	fb1e fe05 	smulbb	lr, lr, r5
 802348e:	00db      	lsls	r3, r3, #3
 8023490:	b289      	uxth	r1, r1
 8023492:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8023496:	b2db      	uxtb	r3, r3
 8023498:	fb02 e200 	mla	r2, r2, r0, lr
 802349c:	fb03 c300 	mla	r3, r3, r0, ip
 80234a0:	b292      	uxth	r2, r2
 80234a2:	fa1f fc83 	uxth.w	ip, r3
 80234a6:	1c4b      	adds	r3, r1, #1
 80234a8:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80234ac:	f10c 0301 	add.w	r3, ip, #1
 80234b0:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 80234b4:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 80234b8:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80234bc:	430b      	orrs	r3, r1
 80234be:	1c51      	adds	r1, r2, #1
 80234c0:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80234c4:	0952      	lsrs	r2, r2, #5
 80234c6:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80234ca:	4313      	orrs	r3, r2
 80234cc:	803b      	strh	r3, [r7, #0]
 80234ce:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80234d0:	3702      	adds	r7, #2
 80234d2:	441c      	add	r4, r3
 80234d4:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80234d6:	441e      	add	r6, r3
 80234d8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80234da:	3b01      	subs	r3, #1
 80234dc:	9318      	str	r3, [sp, #96]	@ 0x60
 80234de:	e698      	b.n	8023212 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80234e0:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80234e2:	441c      	add	r4, r3
 80234e4:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80234e6:	441e      	add	r6, r3
 80234e8:	9b07      	ldr	r3, [sp, #28]
 80234ea:	3b01      	subs	r3, #1
 80234ec:	9307      	str	r3, [sp, #28]
 80234ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80234f0:	3302      	adds	r3, #2
 80234f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80234f4:	e66d      	b.n	80231d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 80234f6:	d023      	beq.n	8023540 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 80234f8:	9b07      	ldr	r3, [sp, #28]
 80234fa:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 80234fc:	3b01      	subs	r3, #1
 80234fe:	fb00 4003 	mla	r0, r0, r3, r4
 8023502:	1400      	asrs	r0, r0, #16
 8023504:	f53f ae82 	bmi.w	802320c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8023508:	3901      	subs	r1, #1
 802350a:	4288      	cmp	r0, r1
 802350c:	f6bf ae7e 	bge.w	802320c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8023510:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8023512:	fb01 6303 	mla	r3, r1, r3, r6
 8023516:	141b      	asrs	r3, r3, #16
 8023518:	f53f ae78 	bmi.w	802320c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802351c:	3a01      	subs	r2, #1
 802351e:	4293      	cmp	r3, r2
 8023520:	f6bf ae74 	bge.w	802320c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8023524:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8023528:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 802352c:	f1bb 0f00 	cmp.w	fp, #0
 8023530:	dc6c      	bgt.n	802360c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8023532:	9b07      	ldr	r3, [sp, #28]
 8023534:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8023538:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802353a:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 802353e:	930a      	str	r3, [sp, #40]	@ 0x28
 8023540:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8023542:	2b00      	cmp	r3, #0
 8023544:	f340 81b3 	ble.w	80238ae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8023548:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802354c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802354e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023552:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023556:	eef0 6a62 	vmov.f32	s13, s5
 802355a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802355e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023562:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023566:	ee16 4a90 	vmov	r4, s13
 802356a:	eef0 6a43 	vmov.f32	s13, s6
 802356e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023572:	ee16 6a90 	vmov	r6, s13
 8023576:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802357a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802357e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023582:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023586:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802358a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802358e:	ee12 2a90 	vmov	r2, s5
 8023592:	eef0 2a47 	vmov.f32	s5, s14
 8023596:	fb92 f3f3 	sdiv	r3, r2, r3
 802359a:	ee13 2a10 	vmov	r2, s6
 802359e:	9329      	str	r3, [sp, #164]	@ 0xa4
 80235a0:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80235a2:	eeb0 3a67 	vmov.f32	s6, s15
 80235a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80235aa:	932a      	str	r3, [sp, #168]	@ 0xa8
 80235ac:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80235ae:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80235b0:	3b01      	subs	r3, #1
 80235b2:	9317      	str	r3, [sp, #92]	@ 0x5c
 80235b4:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80235b6:	bf08      	it	eq
 80235b8:	4613      	moveq	r3, r2
 80235ba:	9307      	str	r3, [sp, #28]
 80235bc:	e5fb      	b.n	80231b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80235be:	2900      	cmp	r1, #0
 80235c0:	f43f ae6b 	beq.w	802329a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80235c4:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80235c8:	9308      	str	r3, [sp, #32]
 80235ca:	0e1b      	lsrs	r3, r3, #24
 80235cc:	9311      	str	r3, [sp, #68]	@ 0x44
 80235ce:	e664      	b.n	802329a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80235d0:	f112 0801 	adds.w	r8, r2, #1
 80235d4:	f53f af7b 	bmi.w	80234ce <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80235d8:	4543      	cmp	r3, r8
 80235da:	f6ff af78 	blt.w	80234ce <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80235de:	f11c 0801 	adds.w	r8, ip, #1
 80235e2:	f53f af74 	bmi.w	80234ce <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80235e6:	45c6      	cmp	lr, r8
 80235e8:	f6ff af71 	blt.w	80234ce <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80235ec:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 80235ee:	b21b      	sxth	r3, r3
 80235f0:	9201      	str	r2, [sp, #4]
 80235f2:	fa0f f28e 	sxth.w	r2, lr
 80235f6:	e9cd 1504 	strd	r1, r5, [sp, #16]
 80235fa:	e9cd c002 	strd	ip, r0, [sp, #8]
 80235fe:	9200      	str	r2, [sp, #0]
 8023600:	4639      	mov	r1, r7
 8023602:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8023604:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8023606:	f7ff fc79 	bl	8022efc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 802360a:	e760      	b.n	80234ce <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802360c:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 802360e:	1427      	asrs	r7, r4, #16
 8023610:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8023612:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8023616:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802361a:	1433      	asrs	r3, r6, #16
 802361c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8023620:	fb01 7303 	mla	r3, r1, r3, r7
 8023624:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 8023628:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 802362c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8023630:	2a00      	cmp	r2, #0
 8023632:	f000 8133 	beq.w	802389c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 8023636:	687d      	ldr	r5, [r7, #4]
 8023638:	950e      	str	r5, [sp, #56]	@ 0x38
 802363a:	0e2d      	lsrs	r5, r5, #24
 802363c:	9515      	str	r5, [sp, #84]	@ 0x54
 802363e:	b178      	cbz	r0, 8023660 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8023640:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8023644:	3901      	subs	r1, #1
 8023646:	0089      	lsls	r1, r1, #2
 8023648:	3104      	adds	r1, #4
 802364a:	eb07 0e01 	add.w	lr, r7, r1
 802364e:	5879      	ldr	r1, [r7, r1]
 8023650:	9109      	str	r1, [sp, #36]	@ 0x24
 8023652:	0e09      	lsrs	r1, r1, #24
 8023654:	9112      	str	r1, [sp, #72]	@ 0x48
 8023656:	f8de 1004 	ldr.w	r1, [lr, #4]
 802365a:	910f      	str	r1, [sp, #60]	@ 0x3c
 802365c:	0e09      	lsrs	r1, r1, #24
 802365e:	9116      	str	r1, [sp, #88]	@ 0x58
 8023660:	b292      	uxth	r2, r2
 8023662:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8023664:	b280      	uxth	r0, r0
 8023666:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8023668:	fb02 f800 	mul.w	r8, r2, r0
 802366c:	0112      	lsls	r2, r2, #4
 802366e:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8023672:	eba2 0e08 	sub.w	lr, r2, r8
 8023676:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 802367a:	b280      	uxth	r0, r0
 802367c:	fa1f fe8e 	uxth.w	lr, lr
 8023680:	1a12      	subs	r2, r2, r0
 8023682:	fb0e f101 	mul.w	r1, lr, r1
 8023686:	b292      	uxth	r2, r2
 8023688:	fb02 110c 	mla	r1, r2, ip, r1
 802368c:	fb00 1105 	mla	r1, r0, r5, r1
 8023690:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8023692:	fb08 1105 	mla	r1, r8, r5, r1
 8023696:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802369a:	2900      	cmp	r1, #0
 802369c:	f000 80f5 	beq.w	802388a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
 80236a0:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 80236a4:	d019      	beq.n	80236da <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
 80236a6:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 80236aa:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80236ae:	fb0c fa0a 	mul.w	sl, ip, sl
 80236b2:	fb0c fc03 	mul.w	ip, ip, r3
 80236b6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80236ba:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 80236be:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 80236c2:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80236c6:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80236ca:	4453      	add	r3, sl
 80236cc:	0a3f      	lsrs	r7, r7, #8
 80236ce:	0a1b      	lsrs	r3, r3, #8
 80236d0:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 80236d4:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80236d8:	433b      	orrs	r3, r7
 80236da:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 80236dc:	2dff      	cmp	r5, #255	@ 0xff
 80236de:	d020      	beq.n	8023722 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
 80236e0:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 80236e2:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 80236e6:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 80236e8:	436f      	muls	r7, r5
 80236ea:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 80236ec:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80236f0:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 80236f4:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 80236f6:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80236fa:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80236fe:	fb05 fa0a 	mul.w	sl, r5, sl
 8023702:	44bc      	add	ip, r7
 8023704:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8023708:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802370c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023710:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8023714:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023718:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802371c:	ea4c 050a 	orr.w	r5, ip, sl
 8023720:	950e      	str	r5, [sp, #56]	@ 0x38
 8023722:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8023724:	2dff      	cmp	r5, #255	@ 0xff
 8023726:	d020      	beq.n	802376a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 8023728:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 802372a:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 802372e:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8023730:	436f      	muls	r7, r5
 8023732:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8023734:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023738:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 802373c:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 802373e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8023742:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8023746:	fb05 fa0a 	mul.w	sl, r5, sl
 802374a:	44bc      	add	ip, r7
 802374c:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8023750:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023754:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023758:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802375c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023760:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8023764:	ea4c 050a 	orr.w	r5, ip, sl
 8023768:	9509      	str	r5, [sp, #36]	@ 0x24
 802376a:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 802376c:	2dff      	cmp	r5, #255	@ 0xff
 802376e:	d020      	beq.n	80237b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
 8023770:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8023772:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8023776:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8023778:	436f      	muls	r7, r5
 802377a:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 802377c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023780:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8023784:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8023786:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802378a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802378e:	fb05 fa0a 	mul.w	sl, r5, sl
 8023792:	44bc      	add	ip, r7
 8023794:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8023798:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802379c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80237a0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80237a4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80237a8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80237ac:	ea4c 050a 	orr.w	r5, ip, sl
 80237b0:	950f      	str	r5, [sp, #60]	@ 0x3c
 80237b2:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 80237b4:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 80237b8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80237bc:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 80237c0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80237c2:	fb0e f707 	mul.w	r7, lr, r7
 80237c6:	fb02 770c 	mla	r7, r2, ip, r7
 80237ca:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 80237ce:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80237d0:	fb00 770c 	mla	r7, r0, ip, r7
 80237d4:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 80237d8:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 80237da:	fb08 770c 	mla	r7, r8, ip, r7
 80237de:	f405 4c7f 	and.w	ip, r5, #65280	@ 0xff00
 80237e2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80237e4:	fb0e fe0c 	mul.w	lr, lr, ip
 80237e8:	0a3f      	lsrs	r7, r7, #8
 80237ea:	fb02 e303 	mla	r3, r2, r3, lr
 80237ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80237f0:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 80237f4:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 80237f8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80237fa:	fb00 330a 	mla	r3, r0, sl, r3
 80237fe:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 8023802:	f8b9 0000 	ldrh.w	r0, [r9]
 8023806:	fb08 3c0c 	mla	ip, r8, ip, r3
 802380a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802380c:	1202      	asrs	r2, r0, #8
 802380e:	4359      	muls	r1, r3
 8023810:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023814:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8023818:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802381c:	1c4b      	adds	r3, r1, #1
 802381e:	ea47 070c 	orr.w	r7, r7, ip
 8023822:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8023826:	0c3b      	lsrs	r3, r7, #16
 8023828:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 802382c:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8023830:	b2ff      	uxtb	r7, r7
 8023832:	fb13 f305 	smulbb	r3, r3, r5
 8023836:	b2c9      	uxtb	r1, r1
 8023838:	fb17 f705 	smulbb	r7, r7, r5
 802383c:	fb02 3201 	mla	r2, r2, r1, r3
 8023840:	10c3      	asrs	r3, r0, #3
 8023842:	fb1c fc05 	smulbb	ip, ip, r5
 8023846:	00c0      	lsls	r0, r0, #3
 8023848:	b292      	uxth	r2, r2
 802384a:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 802384e:	b2c0      	uxtb	r0, r0
 8023850:	fb03 c301 	mla	r3, r3, r1, ip
 8023854:	fb00 7001 	mla	r0, r0, r1, r7
 8023858:	1c51      	adds	r1, r2, #1
 802385a:	b29b      	uxth	r3, r3
 802385c:	b280      	uxth	r0, r0
 802385e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8023862:	f100 0c01 	add.w	ip, r0, #1
 8023866:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
 802386a:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 802386e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8023872:	ea4c 0202 	orr.w	r2, ip, r2
 8023876:	f103 0c01 	add.w	ip, r3, #1
 802387a:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 802387e:	095b      	lsrs	r3, r3, #5
 8023880:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8023884:	431a      	orrs	r2, r3
 8023886:	f8a9 2000 	strh.w	r2, [r9]
 802388a:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 802388c:	f109 0902 	add.w	r9, r9, #2
 8023890:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023894:	441c      	add	r4, r3
 8023896:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8023898:	441e      	add	r6, r3
 802389a:	e647      	b.n	802352c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 802389c:	2800      	cmp	r0, #0
 802389e:	f43f aedf 	beq.w	8023660 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 80238a2:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 80238a6:	9109      	str	r1, [sp, #36]	@ 0x24
 80238a8:	0e09      	lsrs	r1, r1, #24
 80238aa:	9112      	str	r1, [sp, #72]	@ 0x48
 80238ac:	e6d8      	b.n	8023660 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 80238ae:	b01d      	add	sp, #116	@ 0x74
 80238b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080238b4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 80238b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80238b8:	b085      	sub	sp, #20
 80238ba:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	@ 0x3c
 80238be:	9102      	str	r1, [sp, #8]
 80238c0:	2c00      	cmp	r4, #0
 80238c2:	fb04 7103 	mla	r1, r4, r3, r7
 80238c6:	f9bd e038 	ldrsh.w	lr, [sp, #56]	@ 0x38
 80238ca:	f89d 6044 	ldrb.w	r6, [sp, #68]	@ 0x44
 80238ce:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 80238d2:	f89d 0048 	ldrb.w	r0, [sp, #72]	@ 0x48
 80238d6:	f2c0 810c 	blt.w	8023af2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 80238da:	45a6      	cmp	lr, r4
 80238dc:	f340 8109 	ble.w	8023af2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 80238e0:	2f00      	cmp	r7, #0
 80238e2:	f2c0 8104 	blt.w	8023aee <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 80238e6:	42bb      	cmp	r3, r7
 80238e8:	f340 8101 	ble.w	8023aee <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 80238ec:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 80238f0:	1c7a      	adds	r2, r7, #1
 80238f2:	f100 8101 	bmi.w	8023af8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 80238f6:	4293      	cmp	r3, r2
 80238f8:	f340 80fe 	ble.w	8023af8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 80238fc:	2e00      	cmp	r6, #0
 80238fe:	f000 80fd 	beq.w	8023afc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
 8023902:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8023906:	3401      	adds	r4, #1
 8023908:	f100 80fc 	bmi.w	8023b04 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 802390c:	45a6      	cmp	lr, r4
 802390e:	f340 80f9 	ble.w	8023b04 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8023912:	2800      	cmp	r0, #0
 8023914:	f000 80f9 	beq.w	8023b0a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
 8023918:	2f00      	cmp	r7, #0
 802391a:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 802391e:	f2c0 80ef 	blt.w	8023b00 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8023922:	42bb      	cmp	r3, r7
 8023924:	f340 80ec 	ble.w	8023b00 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8023928:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 802392c:	3701      	adds	r7, #1
 802392e:	f100 80ef 	bmi.w	8023b10 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8023932:	42bb      	cmp	r3, r7
 8023934:	f340 80ec 	ble.w	8023b10 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8023938:	2e00      	cmp	r6, #0
 802393a:	f000 80eb 	beq.w	8023b14 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
 802393e:	6852      	ldr	r2, [r2, #4]
 8023940:	b2b6      	uxth	r6, r6
 8023942:	b280      	uxth	r0, r0
 8023944:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8023948:	fb00 fe06 	mul.w	lr, r0, r6
 802394c:	0136      	lsls	r6, r6, #4
 802394e:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8023952:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8023956:	eba6 070e 	sub.w	r7, r6, lr
 802395a:	f5c6 7380 	rsb	r3, r6, #256	@ 0x100
 802395e:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8023962:	b280      	uxth	r0, r0
 8023964:	b2bf      	uxth	r7, r7
 8023966:	1a1b      	subs	r3, r3, r0
 8023968:	ea4f 6812 	mov.w	r8, r2, lsr #24
 802396c:	fb07 f60a 	mul.w	r6, r7, sl
 8023970:	b29b      	uxth	r3, r3
 8023972:	fb0b 6603 	mla	r6, fp, r3, r6
 8023976:	fb00 6609 	mla	r6, r0, r9, r6
 802397a:	fb0e 6608 	mla	r6, lr, r8, r6
 802397e:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8023982:	9600      	str	r6, [sp, #0]
 8023984:	2e00      	cmp	r6, #0
 8023986:	f000 80af 	beq.w	8023ae8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
 802398a:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 802398e:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8023992:	9e02      	ldr	r6, [sp, #8]
 8023994:	fb0b fc0c 	mul.w	ip, fp, ip
 8023998:	fb0b f505 	mul.w	r5, fp, r5
 802399c:	8836      	ldrh	r6, [r6, #0]
 802399e:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80239a2:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80239a6:	9501      	str	r5, [sp, #4]
 80239a8:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 80239ac:	44dc      	add	ip, fp
 80239ae:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80239b2:	f00c 15ff 	and.w	r5, ip, #16711935	@ 0xff00ff
 80239b6:	9503      	str	r5, [sp, #12]
 80239b8:	9d01      	ldr	r5, [sp, #4]
 80239ba:	f505 7c80 	add.w	ip, r5, #256	@ 0x100
 80239be:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80239c2:	f001 1cff 	and.w	ip, r1, #16711935	@ 0xff00ff
 80239c6:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 80239ca:	fb0a fc0c 	mul.w	ip, sl, ip
 80239ce:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 80239d2:	fb0a fa01 	mul.w	sl, sl, r1
 80239d6:	ea4f 251c 	mov.w	r5, ip, lsr #8
 80239da:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80239de:	f50a 7180 	add.w	r1, sl, #256	@ 0x100
 80239e2:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 80239e6:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 80239ea:	4465      	add	r5, ip
 80239ec:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80239f0:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 80239f4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80239f8:	fb09 fc0c 	mul.w	ip, r9, ip
 80239fc:	0a2d      	lsrs	r5, r5, #8
 80239fe:	fb09 f904 	mul.w	r9, r9, r4
 8023a02:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8023a06:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8023a0a:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8023a0e:	f509 7480 	add.w	r4, r9, #256	@ 0x100
 8023a12:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8023a16:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 8023a1a:	437d      	muls	r5, r7
 8023a1c:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8023a20:	f002 14ff 	and.w	r4, r2, #16711935	@ 0xff00ff
 8023a24:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8023a28:	4461      	add	r1, ip
 8023a2a:	fb08 f404 	mul.w	r4, r8, r4
 8023a2e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023a32:	fb08 f802 	mul.w	r8, r8, r2
 8023a36:	0a09      	lsrs	r1, r1, #8
 8023a38:	0a22      	lsrs	r2, r4, #8
 8023a3a:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 8023a3e:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 8023a42:	fb07 f70a 	mul.w	r7, r7, sl
 8023a46:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8023a4a:	4414      	add	r4, r2
 8023a4c:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 8023a50:	0a24      	lsrs	r4, r4, #8
 8023a52:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8023a56:	9a03      	ldr	r2, [sp, #12]
 8023a58:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 8023a5c:	fb02 5503 	mla	r5, r2, r3, r5
 8023a60:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8023a64:	fb04 540e 	mla	r4, r4, lr, r5
 8023a68:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 8023a6c:	fb01 4100 	mla	r1, r1, r0, r4
 8023a70:	0a09      	lsrs	r1, r1, #8
 8023a72:	f001 14ff 	and.w	r4, r1, #16711935	@ 0xff00ff
 8023a76:	f40b 417f 	and.w	r1, fp, #65280	@ 0xff00
 8023a7a:	fb03 7101 	mla	r1, r3, r1, r7
 8023a7e:	9b00      	ldr	r3, [sp, #0]
 8023a80:	fb0e 1e08 	mla	lr, lr, r8, r1
 8023a84:	f409 417f 	and.w	r1, r9, #65280	@ 0xff00
 8023a88:	43da      	mvns	r2, r3
 8023a8a:	1233      	asrs	r3, r6, #8
 8023a8c:	fb00 e101 	mla	r1, r0, r1, lr
 8023a90:	10f0      	asrs	r0, r6, #3
 8023a92:	b2d2      	uxtb	r2, r2
 8023a94:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8023a98:	0a09      	lsrs	r1, r1, #8
 8023a9a:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8023a9e:	00f6      	lsls	r6, r6, #3
 8023aa0:	4353      	muls	r3, r2
 8023aa2:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8023aa6:	4350      	muls	r0, r2
 8023aa8:	b2f6      	uxtb	r6, r6
 8023aaa:	4321      	orrs	r1, r4
 8023aac:	4356      	muls	r6, r2
 8023aae:	1c5a      	adds	r2, r3, #1
 8023ab0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8023ab4:	0c0b      	lsrs	r3, r1, #16
 8023ab6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023aba:	1c42      	adds	r2, r0, #1
 8023abc:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8023ac0:	0a0a      	lsrs	r2, r1, #8
 8023ac2:	021b      	lsls	r3, r3, #8
 8023ac4:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8023ac8:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 8023acc:	00d2      	lsls	r2, r2, #3
 8023ace:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8023ad2:	4313      	orrs	r3, r2
 8023ad4:	1c72      	adds	r2, r6, #1
 8023ad6:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8023ada:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 8023ade:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8023ae2:	4319      	orrs	r1, r3
 8023ae4:	9b02      	ldr	r3, [sp, #8]
 8023ae6:	8019      	strh	r1, [r3, #0]
 8023ae8:	b005      	add	sp, #20
 8023aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023aee:	2500      	movs	r5, #0
 8023af0:	e6fe      	b.n	80238f0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
 8023af2:	2100      	movs	r1, #0
 8023af4:	460d      	mov	r5, r1
 8023af6:	e706      	b.n	8023906 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8023af8:	2100      	movs	r1, #0
 8023afa:	e704      	b.n	8023906 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8023afc:	4631      	mov	r1, r6
 8023afe:	e702      	b.n	8023906 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8023b00:	2400      	movs	r4, #0
 8023b02:	e713      	b.n	802392c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
 8023b04:	2200      	movs	r2, #0
 8023b06:	4614      	mov	r4, r2
 8023b08:	e71a      	b.n	8023940 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8023b0a:	4602      	mov	r2, r0
 8023b0c:	4604      	mov	r4, r0
 8023b0e:	e717      	b.n	8023940 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8023b10:	2200      	movs	r2, #0
 8023b12:	e715      	b.n	8023940 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8023b14:	4632      	mov	r2, r6
 8023b16:	e713      	b.n	8023940 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>

08023b18 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023b1c:	b09b      	sub	sp, #108	@ 0x6c
 8023b1e:	9218      	str	r2, [sp, #96]	@ 0x60
 8023b20:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8023b22:	9019      	str	r0, [sp, #100]	@ 0x64
 8023b24:	9116      	str	r1, [sp, #88]	@ 0x58
 8023b26:	6850      	ldr	r0, [r2, #4]
 8023b28:	9307      	str	r3, [sp, #28]
 8023b2a:	6812      	ldr	r2, [r2, #0]
 8023b2c:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 8023b30:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	@ 0x94
 8023b34:	fb00 1303 	mla	r3, r0, r3, r1
 8023b38:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8023b3c:	930a      	str	r3, [sp, #40]	@ 0x28
 8023b3e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8023b40:	681b      	ldr	r3, [r3, #0]
 8023b42:	930f      	str	r3, [sp, #60]	@ 0x3c
 8023b44:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8023b46:	2b00      	cmp	r3, #0
 8023b48:	dc03      	bgt.n	8023b52 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8023b4a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8023b4c:	2b00      	cmp	r3, #0
 8023b4e:	f340 8387 	ble.w	8024260 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8023b52:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8023b54:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023b58:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023b5c:	1e48      	subs	r0, r1, #1
 8023b5e:	1e57      	subs	r7, r2, #1
 8023b60:	9b07      	ldr	r3, [sp, #28]
 8023b62:	2b00      	cmp	r3, #0
 8023b64:	f340 8166 	ble.w	8023e34 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8023b68:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8023b6c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023b70:	d406      	bmi.n	8023b80 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8023b72:	4584      	cmp	ip, r0
 8023b74:	da04      	bge.n	8023b80 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8023b76:	2b00      	cmp	r3, #0
 8023b78:	db02      	blt.n	8023b80 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8023b7a:	42bb      	cmp	r3, r7
 8023b7c:	f2c0 815b 	blt.w	8023e36 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8023b80:	f11c 0c01 	adds.w	ip, ip, #1
 8023b84:	f100 814b 	bmi.w	8023e1e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8023b88:	4561      	cmp	r1, ip
 8023b8a:	f2c0 8148 	blt.w	8023e1e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8023b8e:	3301      	adds	r3, #1
 8023b90:	f100 8145 	bmi.w	8023e1e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8023b94:	429a      	cmp	r2, r3
 8023b96:	f2c0 8142 	blt.w	8023e1e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8023b9a:	9b07      	ldr	r3, [sp, #28]
 8023b9c:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8023b9e:	9317      	str	r3, [sp, #92]	@ 0x5c
 8023ba0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8023ba2:	2b00      	cmp	r3, #0
 8023ba4:	f340 8165 	ble.w	8023e72 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8023ba8:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 8023baa:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8023bae:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8023bb0:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8023bb4:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8023bb8:	1422      	asrs	r2, r4, #16
 8023bba:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8023bbe:	689b      	ldr	r3, [r3, #8]
 8023bc0:	f100 81d5 	bmi.w	8023f6e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8023bc4:	f103 38ff 	add.w	r8, r3, #4294967295
 8023bc8:	4542      	cmp	r2, r8
 8023bca:	f280 81d0 	bge.w	8023f6e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8023bce:	f1bc 0f00 	cmp.w	ip, #0
 8023bd2:	f2c0 81cc 	blt.w	8023f6e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8023bd6:	f10e 38ff 	add.w	r8, lr, #4294967295
 8023bda:	45c4      	cmp	ip, r8
 8023bdc:	f280 81c7 	bge.w	8023f6e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8023be0:	b21b      	sxth	r3, r3
 8023be2:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8023be4:	fb0c 2203 	mla	r2, ip, r3, r2
 8023be8:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8023bec:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8023bf0:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8023bf4:	2900      	cmp	r1, #0
 8023bf6:	f000 8182 	beq.w	8023efe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8023bfa:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8023bfe:	950b      	str	r5, [sp, #44]	@ 0x2c
 8023c00:	0e2d      	lsrs	r5, r5, #24
 8023c02:	9512      	str	r5, [sp, #72]	@ 0x48
 8023c04:	b180      	cbz	r0, 8023c28 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8023c06:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8023c0a:	3b01      	subs	r3, #1
 8023c0c:	009b      	lsls	r3, r3, #2
 8023c0e:	3304      	adds	r3, #4
 8023c10:	eb08 0c03 	add.w	ip, r8, r3
 8023c14:	f858 3003 	ldr.w	r3, [r8, r3]
 8023c18:	9308      	str	r3, [sp, #32]
 8023c1a:	0e1b      	lsrs	r3, r3, #24
 8023c1c:	9310      	str	r3, [sp, #64]	@ 0x40
 8023c1e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8023c22:	930c      	str	r3, [sp, #48]	@ 0x30
 8023c24:	0e1b      	lsrs	r3, r3, #24
 8023c26:	9313      	str	r3, [sp, #76]	@ 0x4c
 8023c28:	b289      	uxth	r1, r1
 8023c2a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8023c2c:	b280      	uxth	r0, r0
 8023c2e:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8023c30:	fb01 f900 	mul.w	r9, r1, r0
 8023c34:	0109      	lsls	r1, r1, #4
 8023c36:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8023c3a:	eba1 0809 	sub.w	r8, r1, r9
 8023c3e:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8023c42:	b280      	uxth	r0, r0
 8023c44:	fa1f f888 	uxth.w	r8, r8
 8023c48:	1a09      	subs	r1, r1, r0
 8023c4a:	fb08 f303 	mul.w	r3, r8, r3
 8023c4e:	b289      	uxth	r1, r1
 8023c50:	fb01 330e 	mla	r3, r1, lr, r3
 8023c54:	fb00 3305 	mla	r3, r0, r5, r3
 8023c58:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8023c5a:	fb09 3305 	mla	r3, r9, r5, r3
 8023c5e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023c62:	2b00      	cmp	r3, #0
 8023c64:	f000 80d2 	beq.w	8023e0c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8023c68:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8023c6c:	d01b      	beq.n	8023ca6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 8023c6e:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 8023c72:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8023c76:	fb0e fa0a 	mul.w	sl, lr, sl
 8023c7a:	fb0e fe02 	mul.w	lr, lr, r2
 8023c7e:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8023c82:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8023c86:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8023c8a:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8023c8e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8023c92:	4452      	add	r2, sl
 8023c94:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023c98:	0a12      	lsrs	r2, r2, #8
 8023c9a:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8023c9e:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8023ca2:	ea42 020c 	orr.w	r2, r2, ip
 8023ca6:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8023ca8:	2dff      	cmp	r5, #255	@ 0xff
 8023caa:	d021      	beq.n	8023cf0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8023cac:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8023cae:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8023cb2:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8023cb4:	fb05 fb0b 	mul.w	fp, r5, fp
 8023cb8:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8023cba:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8023cbe:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8023cc0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023cc4:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8023cc8:	fb05 fa0a 	mul.w	sl, r5, sl
 8023ccc:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023cd0:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8023cd4:	44de      	add	lr, fp
 8023cd6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023cda:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023cde:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023ce2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023ce6:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8023cea:	ea4e 050a 	orr.w	r5, lr, sl
 8023cee:	950b      	str	r5, [sp, #44]	@ 0x2c
 8023cf0:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8023cf2:	2dff      	cmp	r5, #255	@ 0xff
 8023cf4:	d021      	beq.n	8023d3a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 8023cf6:	9d08      	ldr	r5, [sp, #32]
 8023cf8:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8023cfc:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8023cfe:	fb05 fb0b 	mul.w	fp, r5, fp
 8023d02:	9d08      	ldr	r5, [sp, #32]
 8023d04:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 8023d08:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8023d0a:	fb05 fa0e 	mul.w	sl, r5, lr
 8023d0e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023d12:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8023d16:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023d1a:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8023d1e:	44de      	add	lr, fp
 8023d20:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023d24:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023d28:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023d2c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023d30:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8023d34:	ea4e 050a 	orr.w	r5, lr, sl
 8023d38:	9508      	str	r5, [sp, #32]
 8023d3a:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8023d3c:	2dff      	cmp	r5, #255	@ 0xff
 8023d3e:	d021      	beq.n	8023d84 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8023d40:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8023d42:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8023d46:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8023d48:	fb05 fb0b 	mul.w	fp, r5, fp
 8023d4c:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8023d4e:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8023d52:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8023d54:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023d58:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8023d5c:	fb05 fa0a 	mul.w	sl, r5, sl
 8023d60:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023d64:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8023d68:	44de      	add	lr, fp
 8023d6a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023d6e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023d72:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023d76:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023d7a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8023d7e:	ea4e 050a 	orr.w	r5, lr, sl
 8023d82:	950c      	str	r5, [sp, #48]	@ 0x30
 8023d84:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8023d86:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 8023d8a:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8023d8e:	2bff      	cmp	r3, #255	@ 0xff
 8023d90:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8023d94:	9d08      	ldr	r5, [sp, #32]
 8023d96:	fb08 fc0c 	mul.w	ip, r8, ip
 8023d9a:	fb01 cc0e 	mla	ip, r1, lr, ip
 8023d9e:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 8023da2:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8023da4:	fb00 cc0e 	mla	ip, r0, lr, ip
 8023da8:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 8023dac:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8023dae:	fb09 cc0e 	mla	ip, r9, lr, ip
 8023db2:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 8023db6:	fb08 f80e 	mul.w	r8, r8, lr
 8023dba:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023dbe:	fb01 8202 	mla	r2, r1, r2, r8
 8023dc2:	9908      	ldr	r1, [sp, #32]
 8023dc4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8023dc8:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 8023dcc:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8023dce:	fb00 220a 	mla	r2, r0, sl, r2
 8023dd2:	f401 407f 	and.w	r0, r1, #65280	@ 0xff00
 8023dd6:	fb09 2900 	mla	r9, r9, r0, r2
 8023dda:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023dde:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8023de2:	ea4c 0c09 	orr.w	ip, ip, r9
 8023de6:	ea4f 221c 	mov.w	r2, ip, lsr #8
 8023dea:	f040 8091 	bne.w	8023f10 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8023dee:	ea4f 135c 	mov.w	r3, ip, lsr #5
 8023df2:	f422 62ff 	bic.w	r2, r2, #2040	@ 0x7f8
 8023df6:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8023dfa:	f022 0207 	bic.w	r2, r2, #7
 8023dfe:	431a      	orrs	r2, r3
 8023e00:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8023e04:	ea4c 0c02 	orr.w	ip, ip, r2
 8023e08:	f8a7 c000 	strh.w	ip, [r7]
 8023e0c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8023e0e:	3702      	adds	r7, #2
 8023e10:	441c      	add	r4, r3
 8023e12:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8023e14:	441e      	add	r6, r3
 8023e16:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8023e18:	3b01      	subs	r3, #1
 8023e1a:	9317      	str	r3, [sp, #92]	@ 0x5c
 8023e1c:	e6c0      	b.n	8023ba0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8023e1e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8023e20:	441c      	add	r4, r3
 8023e22:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8023e24:	441e      	add	r6, r3
 8023e26:	9b07      	ldr	r3, [sp, #28]
 8023e28:	3b01      	subs	r3, #1
 8023e2a:	9307      	str	r3, [sp, #28]
 8023e2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023e2e:	3302      	adds	r3, #2
 8023e30:	930a      	str	r3, [sp, #40]	@ 0x28
 8023e32:	e695      	b.n	8023b60 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8023e34:	d024      	beq.n	8023e80 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8023e36:	9b07      	ldr	r3, [sp, #28]
 8023e38:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 8023e3a:	3b01      	subs	r3, #1
 8023e3c:	fb00 4003 	mla	r0, r0, r3, r4
 8023e40:	1400      	asrs	r0, r0, #16
 8023e42:	f53f aeaa 	bmi.w	8023b9a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8023e46:	3901      	subs	r1, #1
 8023e48:	4288      	cmp	r0, r1
 8023e4a:	f6bf aea6 	bge.w	8023b9a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8023e4e:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8023e50:	fb01 6303 	mla	r3, r1, r3, r6
 8023e54:	141b      	asrs	r3, r3, #16
 8023e56:	f53f aea0 	bmi.w	8023b9a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8023e5a:	3a01      	subs	r2, #1
 8023e5c:	4293      	cmp	r3, r2
 8023e5e:	f6bf ae9c 	bge.w	8023b9a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8023e62:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8023e66:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 8023e6a:	f1bb 0f00 	cmp.w	fp, #0
 8023e6e:	f300 809a 	bgt.w	8023fa6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8023e72:	9b07      	ldr	r3, [sp, #28]
 8023e74:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8023e78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023e7a:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8023e7e:	930a      	str	r3, [sp, #40]	@ 0x28
 8023e80:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8023e82:	2b00      	cmp	r3, #0
 8023e84:	f340 81ec 	ble.w	8024260 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8023e88:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8023e8c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023e8e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023e92:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023e96:	eef0 6a62 	vmov.f32	s13, s5
 8023e9a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023e9e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023ea2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023ea6:	ee16 4a90 	vmov	r4, s13
 8023eaa:	eef0 6a43 	vmov.f32	s13, s6
 8023eae:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023eb2:	ee16 6a90 	vmov	r6, s13
 8023eb6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023eba:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023ebe:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023ec2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023ec6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023eca:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023ece:	ee12 2a90 	vmov	r2, s5
 8023ed2:	eef0 2a47 	vmov.f32	s5, s14
 8023ed6:	fb92 f3f3 	sdiv	r3, r2, r3
 8023eda:	ee13 2a10 	vmov	r2, s6
 8023ede:	9327      	str	r3, [sp, #156]	@ 0x9c
 8023ee0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023ee2:	eeb0 3a67 	vmov.f32	s6, s15
 8023ee6:	fb92 f3f3 	sdiv	r3, r2, r3
 8023eea:	9328      	str	r3, [sp, #160]	@ 0xa0
 8023eec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8023eee:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8023ef0:	3b01      	subs	r3, #1
 8023ef2:	9316      	str	r3, [sp, #88]	@ 0x58
 8023ef4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023ef6:	bf08      	it	eq
 8023ef8:	4613      	moveq	r3, r2
 8023efa:	9307      	str	r3, [sp, #28]
 8023efc:	e622      	b.n	8023b44 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 8023efe:	2800      	cmp	r0, #0
 8023f00:	f43f ae92 	beq.w	8023c28 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8023f04:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8023f08:	9308      	str	r3, [sp, #32]
 8023f0a:	0e1b      	lsrs	r3, r3, #24
 8023f0c:	9310      	str	r3, [sp, #64]	@ 0x40
 8023f0e:	e68b      	b.n	8023c28 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8023f10:	8839      	ldrh	r1, [r7, #0]
 8023f12:	43db      	mvns	r3, r3
 8023f14:	4dd4      	ldr	r5, [pc, #848]	@ (8024268 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 8023f16:	ea4f 2e21 	mov.w	lr, r1, asr #8
 8023f1a:	fa5f f883 	uxtb.w	r8, r3
 8023f1e:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 8023f22:	10c8      	asrs	r0, r1, #3
 8023f24:	00cb      	lsls	r3, r1, #3
 8023f26:	fb0e fe08 	mul.w	lr, lr, r8
 8023f2a:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8023f2e:	b2db      	uxtb	r3, r3
 8023f30:	f10e 0101 	add.w	r1, lr, #1
 8023f34:	fb00 f008 	mul.w	r0, r0, r8
 8023f38:	fb03 f308 	mul.w	r3, r3, r8
 8023f3c:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 8023f40:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8023f44:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 8023f48:	f100 0e01 	add.w	lr, r0, #1
 8023f4c:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 8023f50:	b2c9      	uxtb	r1, r1
 8023f52:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8023f56:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 8023f5a:	00d2      	lsls	r2, r2, #3
 8023f5c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8023f60:	430a      	orrs	r2, r1
 8023f62:	1c59      	adds	r1, r3, #1
 8023f64:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8023f68:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8023f6c:	e748      	b.n	8023e00 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 8023f6e:	f112 0801 	adds.w	r8, r2, #1
 8023f72:	f53f af4b 	bmi.w	8023e0c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8023f76:	4543      	cmp	r3, r8
 8023f78:	f6ff af48 	blt.w	8023e0c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8023f7c:	f11c 0801 	adds.w	r8, ip, #1
 8023f80:	f53f af44 	bmi.w	8023e0c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8023f84:	45c6      	cmp	lr, r8
 8023f86:	f6ff af41 	blt.w	8023e0c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8023f8a:	b21b      	sxth	r3, r3
 8023f8c:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8023f90:	fa0f f28e 	sxth.w	r2, lr
 8023f94:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8023f98:	9200      	str	r2, [sp, #0]
 8023f9a:	4639      	mov	r1, r7
 8023f9c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8023f9e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8023fa0:	f7ff fc88 	bl	80238b4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 8023fa4:	e732      	b.n	8023e0c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8023fa6:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8023fa8:	1421      	asrs	r1, r4, #16
 8023faa:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8023fac:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8023fb0:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 8023fb4:	1433      	asrs	r3, r6, #16
 8023fb6:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8023fba:	fb07 1303 	mla	r3, r7, r3, r1
 8023fbe:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8023fc0:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8023fc4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8023fc8:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8023fcc:	2a00      	cmp	r2, #0
 8023fce:	f000 8108 	beq.w	80241e2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 8023fd2:	684d      	ldr	r5, [r1, #4]
 8023fd4:	950d      	str	r5, [sp, #52]	@ 0x34
 8023fd6:	0e2d      	lsrs	r5, r5, #24
 8023fd8:	9514      	str	r5, [sp, #80]	@ 0x50
 8023fda:	b178      	cbz	r0, 8023ffc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8023fdc:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8023fe0:	3f01      	subs	r7, #1
 8023fe2:	00bf      	lsls	r7, r7, #2
 8023fe4:	3704      	adds	r7, #4
 8023fe6:	eb01 0e07 	add.w	lr, r1, r7
 8023fea:	59c9      	ldr	r1, [r1, r7]
 8023fec:	9109      	str	r1, [sp, #36]	@ 0x24
 8023fee:	0e09      	lsrs	r1, r1, #24
 8023ff0:	9111      	str	r1, [sp, #68]	@ 0x44
 8023ff2:	f8de 1004 	ldr.w	r1, [lr, #4]
 8023ff6:	910e      	str	r1, [sp, #56]	@ 0x38
 8023ff8:	0e09      	lsrs	r1, r1, #24
 8023ffa:	9115      	str	r1, [sp, #84]	@ 0x54
 8023ffc:	b292      	uxth	r2, r2
 8023ffe:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8024000:	b280      	uxth	r0, r0
 8024002:	fb02 f900 	mul.w	r9, r2, r0
 8024006:	0112      	lsls	r2, r2, #4
 8024008:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802400c:	eba2 0e09 	sub.w	lr, r2, r9
 8024010:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 8024014:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8024016:	b280      	uxth	r0, r0
 8024018:	fa1f fe8e 	uxth.w	lr, lr
 802401c:	1a09      	subs	r1, r1, r0
 802401e:	fb0e f202 	mul.w	r2, lr, r2
 8024022:	b289      	uxth	r1, r1
 8024024:	fb01 220c 	mla	r2, r1, ip, r2
 8024028:	fb00 2205 	mla	r2, r0, r5, r2
 802402c:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 802402e:	fb09 2205 	mla	r2, r9, r5, r2
 8024032:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8024036:	2a00      	cmp	r2, #0
 8024038:	f000 80ca 	beq.w	80241d0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 802403c:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8024040:	d019      	beq.n	8024076 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
 8024042:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8024046:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802404a:	fb0c fa0a 	mul.w	sl, ip, sl
 802404e:	fb0c fc03 	mul.w	ip, ip, r3
 8024052:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8024056:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802405a:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 802405e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8024062:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8024066:	4453      	add	r3, sl
 8024068:	0a3f      	lsrs	r7, r7, #8
 802406a:	0a1b      	lsrs	r3, r3, #8
 802406c:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8024070:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8024074:	433b      	orrs	r3, r7
 8024076:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8024078:	2dff      	cmp	r5, #255	@ 0xff
 802407a:	d020      	beq.n	80240be <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
 802407c:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 802407e:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8024082:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8024084:	436f      	muls	r7, r5
 8024086:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8024088:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802408c:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8024090:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8024092:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8024096:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802409a:	fb05 fa0a 	mul.w	sl, r5, sl
 802409e:	44bc      	add	ip, r7
 80240a0:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80240a4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80240a8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80240ac:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80240b0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80240b4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80240b8:	ea4c 050a 	orr.w	r5, ip, sl
 80240bc:	950d      	str	r5, [sp, #52]	@ 0x34
 80240be:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80240c0:	2dff      	cmp	r5, #255	@ 0xff
 80240c2:	d020      	beq.n	8024106 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
 80240c4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80240c6:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 80240ca:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80240cc:	436f      	muls	r7, r5
 80240ce:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80240d0:	f405 4c7f 	and.w	ip, r5, #65280	@ 0xff00
 80240d4:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80240d6:	fb05 fa0c 	mul.w	sl, r5, ip
 80240da:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80240de:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80240e2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80240e6:	44bc      	add	ip, r7
 80240e8:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80240ec:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80240f0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80240f4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80240f8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80240fc:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8024100:	ea4c 050a 	orr.w	r5, ip, sl
 8024104:	9509      	str	r5, [sp, #36]	@ 0x24
 8024106:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8024108:	2dff      	cmp	r5, #255	@ 0xff
 802410a:	d020      	beq.n	802414e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
 802410c:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 802410e:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8024112:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8024114:	436f      	muls	r7, r5
 8024116:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8024118:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802411c:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8024120:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8024122:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8024126:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802412a:	fb05 fa0a 	mul.w	sl, r5, sl
 802412e:	44bc      	add	ip, r7
 8024130:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8024134:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024138:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802413c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8024140:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024144:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8024148:	ea4c 050a 	orr.w	r5, ip, sl
 802414c:	950e      	str	r5, [sp, #56]	@ 0x38
 802414e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8024150:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8024154:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8024158:	2aff      	cmp	r2, #255	@ 0xff
 802415a:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 802415e:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8024160:	fb0e f707 	mul.w	r7, lr, r7
 8024164:	fb01 770c 	mla	r7, r1, ip, r7
 8024168:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 802416c:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 802416e:	fb00 770c 	mla	r7, r0, ip, r7
 8024172:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8024176:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8024178:	fb09 770c 	mla	r7, r9, ip, r7
 802417c:	f405 4c7f 	and.w	ip, r5, #65280	@ 0xff00
 8024180:	fb0e fe0c 	mul.w	lr, lr, ip
 8024184:	ea4f 2717 	mov.w	r7, r7, lsr #8
 8024188:	fb01 e303 	mla	r3, r1, r3, lr
 802418c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802418e:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8024192:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 8024196:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8024198:	fb00 330a 	mla	r3, r0, sl, r3
 802419c:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 80241a0:	fb09 3c0c 	mla	ip, r9, ip, r3
 80241a4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80241a8:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80241ac:	ea47 070c 	orr.w	r7, r7, ip
 80241b0:	ea4f 2317 	mov.w	r3, r7, lsr #8
 80241b4:	d11e      	bne.n	80241f4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 80241b6:	097a      	lsrs	r2, r7, #5
 80241b8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80241bc:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 80241c0:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80241c4:	f023 0307 	bic.w	r3, r3, #7
 80241c8:	4313      	orrs	r3, r2
 80241ca:	431f      	orrs	r7, r3
 80241cc:	f8a8 7000 	strh.w	r7, [r8]
 80241d0:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80241d2:	f108 0802 	add.w	r8, r8, #2
 80241d6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80241da:	441c      	add	r4, r3
 80241dc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80241de:	441e      	add	r6, r3
 80241e0:	e643      	b.n	8023e6a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 80241e2:	2800      	cmp	r0, #0
 80241e4:	f43f af0a 	beq.w	8023ffc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 80241e8:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80241ec:	9109      	str	r1, [sp, #36]	@ 0x24
 80241ee:	0e09      	lsrs	r1, r1, #24
 80241f0:	9111      	str	r1, [sp, #68]	@ 0x44
 80241f2:	e703      	b.n	8023ffc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 80241f4:	f8b8 1000 	ldrh.w	r1, [r8]
 80241f8:	43d2      	mvns	r2, r2
 80241fa:	ea4f 2c21 	mov.w	ip, r1, asr #8
 80241fe:	fa5f fe82 	uxtb.w	lr, r2
 8024202:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8024206:	10c8      	asrs	r0, r1, #3
 8024208:	00ca      	lsls	r2, r1, #3
 802420a:	fb0c fc0e 	mul.w	ip, ip, lr
 802420e:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8024212:	b2d2      	uxtb	r2, r2
 8024214:	f10c 0101 	add.w	r1, ip, #1
 8024218:	fb00 f00e 	mul.w	r0, r0, lr
 802421c:	fb02 f20e 	mul.w	r2, r2, lr
 8024220:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8024224:	0c39      	lsrs	r1, r7, #16
 8024226:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802422a:	490f      	ldr	r1, [pc, #60]	@ (8024268 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 802422c:	fa5f fc8c 	uxtb.w	ip, ip
 8024230:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 8024234:	1c41      	adds	r1, r0, #1
 8024236:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 802423a:	1c51      	adds	r1, r2, #1
 802423c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8024240:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8024244:	00c0      	lsls	r0, r0, #3
 8024246:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 802424a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802424e:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8024252:	ea4c 0c00 	orr.w	ip, ip, r0
 8024256:	ea47 0c0c 	orr.w	ip, r7, ip
 802425a:	f8a8 c000 	strh.w	ip, [r8]
 802425e:	e7b7      	b.n	80241d0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8024260:	b01b      	add	sp, #108	@ 0x6c
 8024262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024266:	bf00      	nop
 8024268:	fffff800 	.word	0xfffff800

0802426c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 802426c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024270:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	@ 0x28
 8024274:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8024278:	2d00      	cmp	r5, #0
 802427a:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 802427e:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
 8024282:	fb05 0e03 	mla	lr, r5, r3, r0
 8024286:	f89d c034 	ldrb.w	ip, [sp, #52]	@ 0x34
 802428a:	f2c0 808c 	blt.w	80243a6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 802428e:	45a9      	cmp	r9, r5
 8024290:	f340 8089 	ble.w	80243a6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 8024294:	2800      	cmp	r0, #0
 8024296:	f2c0 8084 	blt.w	80243a2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 802429a:	4580      	cmp	r8, r0
 802429c:	f340 8081 	ble.w	80243a2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 80242a0:	ea4f 045e 	mov.w	r4, lr, lsr #1
 80242a4:	f01e 0f01 	tst.w	lr, #1
 80242a8:	5d16      	ldrb	r6, [r2, r4]
 80242aa:	bf0c      	ite	eq
 80242ac:	f006 060f 	andeq.w	r6, r6, #15
 80242b0:	1136      	asrne	r6, r6, #4
 80242b2:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80242b6:	b2f6      	uxtb	r6, r6
 80242b8:	1c44      	adds	r4, r0, #1
 80242ba:	d477      	bmi.n	80243ac <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 80242bc:	45a0      	cmp	r8, r4
 80242be:	dd75      	ble.n	80243ac <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 80242c0:	2f00      	cmp	r7, #0
 80242c2:	d075      	beq.n	80243b0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
 80242c4:	f10e 0a01 	add.w	sl, lr, #1
 80242c8:	ea4f 045a 	mov.w	r4, sl, lsr #1
 80242cc:	f01a 0f01 	tst.w	sl, #1
 80242d0:	5d14      	ldrb	r4, [r2, r4]
 80242d2:	bf0c      	ite	eq
 80242d4:	f004 040f 	andeq.w	r4, r4, #15
 80242d8:	1124      	asrne	r4, r4, #4
 80242da:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80242de:	b2e4      	uxtb	r4, r4
 80242e0:	3501      	adds	r5, #1
 80242e2:	d469      	bmi.n	80243b8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 80242e4:	45a9      	cmp	r9, r5
 80242e6:	dd67      	ble.n	80243b8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 80242e8:	f1bc 0f00 	cmp.w	ip, #0
 80242ec:	d067      	beq.n	80243be <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
 80242ee:	2800      	cmp	r0, #0
 80242f0:	db60      	blt.n	80243b4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 80242f2:	4580      	cmp	r8, r0
 80242f4:	dd5e      	ble.n	80243b4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 80242f6:	eb03 090e 	add.w	r9, r3, lr
 80242fa:	ea4f 0559 	mov.w	r5, r9, lsr #1
 80242fe:	f019 0f01 	tst.w	r9, #1
 8024302:	5d55      	ldrb	r5, [r2, r5]
 8024304:	bf0c      	ite	eq
 8024306:	f005 050f 	andeq.w	r5, r5, #15
 802430a:	112d      	asrne	r5, r5, #4
 802430c:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8024310:	b2ed      	uxtb	r5, r5
 8024312:	3001      	adds	r0, #1
 8024314:	d456      	bmi.n	80243c4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 8024316:	4580      	cmp	r8, r0
 8024318:	dd54      	ble.n	80243c4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 802431a:	2f00      	cmp	r7, #0
 802431c:	d054      	beq.n	80243c8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
 802431e:	3301      	adds	r3, #1
 8024320:	449e      	add	lr, r3
 8024322:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8024326:	f01e 0f01 	tst.w	lr, #1
 802432a:	5cd0      	ldrb	r0, [r2, r3]
 802432c:	bf0c      	ite	eq
 802432e:	f000 000f 	andeq.w	r0, r0, #15
 8024332:	1100      	asrne	r0, r0, #4
 8024334:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8024338:	b2c3      	uxtb	r3, r0
 802433a:	b2ba      	uxth	r2, r7
 802433c:	fa1f fc8c 	uxth.w	ip, ip
 8024340:	fb02 f00c 	mul.w	r0, r2, ip
 8024344:	0112      	lsls	r2, r2, #4
 8024346:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 802434a:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 802434e:	1a12      	subs	r2, r2, r0
 8024350:	fa1f fc8c 	uxth.w	ip, ip
 8024354:	b292      	uxth	r2, r2
 8024356:	eba7 070c 	sub.w	r7, r7, ip
 802435a:	4362      	muls	r2, r4
 802435c:	b2bf      	uxth	r7, r7
 802435e:	fb06 2207 	mla	r2, r6, r7, r2
 8024362:	fb0c 2505 	mla	r5, ip, r5, r2
 8024366:	fb00 5303 	mla	r3, r0, r3, r5
 802436a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802436e:	b1b3      	cbz	r3, 802439e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 8024370:	f89d 2038 	ldrb.w	r2, [sp, #56]	@ 0x38
 8024374:	435a      	muls	r2, r3
 8024376:	1c53      	adds	r3, r2, #1
 8024378:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802437c:	4a2d      	ldr	r2, [pc, #180]	@ (8024434 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 802437e:	121b      	asrs	r3, r3, #8
 8024380:	6812      	ldr	r2, [r2, #0]
 8024382:	2bff      	cmp	r3, #255	@ 0xff
 8024384:	ea4f 2612 	mov.w	r6, r2, lsr #8
 8024388:	d120      	bne.n	80243cc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
 802438a:	0950      	lsrs	r0, r2, #5
 802438c:	4b2a      	ldr	r3, [pc, #168]	@ (8024438 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 802438e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8024392:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8024396:	4033      	ands	r3, r6
 8024398:	4318      	orrs	r0, r3
 802439a:	4302      	orrs	r2, r0
 802439c:	800a      	strh	r2, [r1, #0]
 802439e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80243a2:	2600      	movs	r6, #0
 80243a4:	e788      	b.n	80242b8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
 80243a6:	2400      	movs	r4, #0
 80243a8:	4626      	mov	r6, r4
 80243aa:	e799      	b.n	80242e0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 80243ac:	2400      	movs	r4, #0
 80243ae:	e797      	b.n	80242e0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 80243b0:	463c      	mov	r4, r7
 80243b2:	e795      	b.n	80242e0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 80243b4:	2500      	movs	r5, #0
 80243b6:	e7ac      	b.n	8024312 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
 80243b8:	2300      	movs	r3, #0
 80243ba:	461d      	mov	r5, r3
 80243bc:	e7bd      	b.n	802433a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 80243be:	4663      	mov	r3, ip
 80243c0:	4665      	mov	r5, ip
 80243c2:	e7ba      	b.n	802433a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 80243c4:	2300      	movs	r3, #0
 80243c6:	e7b8      	b.n	802433a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 80243c8:	463b      	mov	r3, r7
 80243ca:	e7b6      	b.n	802433a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 80243cc:	880d      	ldrh	r5, [r1, #0]
 80243ce:	b29f      	uxth	r7, r3
 80243d0:	f3c2 4007 	ubfx	r0, r2, #16, #8
 80243d4:	43db      	mvns	r3, r3
 80243d6:	122c      	asrs	r4, r5, #8
 80243d8:	fb10 f007 	smulbb	r0, r0, r7
 80243dc:	b2db      	uxtb	r3, r3
 80243de:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 80243e2:	b2f6      	uxtb	r6, r6
 80243e4:	b2d2      	uxtb	r2, r2
 80243e6:	fb04 0403 	mla	r4, r4, r3, r0
 80243ea:	10e8      	asrs	r0, r5, #3
 80243ec:	fb12 f207 	smulbb	r2, r2, r7
 80243f0:	00ed      	lsls	r5, r5, #3
 80243f2:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 80243f6:	b2a4      	uxth	r4, r4
 80243f8:	fb16 f607 	smulbb	r6, r6, r7
 80243fc:	b2ed      	uxtb	r5, r5
 80243fe:	fb00 6603 	mla	r6, r0, r3, r6
 8024402:	fb05 2303 	mla	r3, r5, r3, r2
 8024406:	b2b0      	uxth	r0, r6
 8024408:	b29a      	uxth	r2, r3
 802440a:	1c63      	adds	r3, r4, #1
 802440c:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8024410:	1c53      	adds	r3, r2, #1
 8024412:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024416:	1c42      	adds	r2, r0, #1
 8024418:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 802441c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8024420:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8024424:	0940      	lsrs	r0, r0, #5
 8024426:	4323      	orrs	r3, r4
 8024428:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802442c:	4303      	orrs	r3, r0
 802442e:	800b      	strh	r3, [r1, #0]
 8024430:	e7b5      	b.n	802439e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 8024432:	bf00      	nop
 8024434:	20027ba4 	.word	0x20027ba4
 8024438:	00fff800 	.word	0x00fff800

0802443c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802443c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024440:	b097      	sub	sp, #92	@ 0x5c
 8024442:	9214      	str	r2, [sp, #80]	@ 0x50
 8024444:	9309      	str	r3, [sp, #36]	@ 0x24
 8024446:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8024448:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 802444c:	9015      	str	r0, [sp, #84]	@ 0x54
 802444e:	910d      	str	r1, [sp, #52]	@ 0x34
 8024450:	6850      	ldr	r0, [r2, #4]
 8024452:	930f      	str	r3, [sp, #60]	@ 0x3c
 8024454:	6812      	ldr	r2, [r2, #0]
 8024456:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 802445a:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	@ 0x84
 802445e:	fb00 1303 	mla	r3, r0, r3, r1
 8024462:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8024466:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024468:	689b      	ldr	r3, [r3, #8]
 802446a:	3301      	adds	r3, #1
 802446c:	f023 0301 	bic.w	r3, r3, #1
 8024470:	930a      	str	r3, [sp, #40]	@ 0x28
 8024472:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024474:	681f      	ldr	r7, [r3, #0]
 8024476:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024478:	2b00      	cmp	r3, #0
 802447a:	dc03      	bgt.n	8024484 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802447c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802447e:	2b00      	cmp	r3, #0
 8024480:	f340 8289 	ble.w	8024996 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
 8024484:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024486:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802448a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802448e:	1e48      	subs	r0, r1, #1
 8024490:	f102 3cff 	add.w	ip, r2, #4294967295
 8024494:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024496:	2b00      	cmp	r3, #0
 8024498:	f340 80c5 	ble.w	8024626 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802449c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80244a0:	ea4f 4326 	mov.w	r3, r6, asr #16
 80244a4:	d406      	bmi.n	80244b4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80244a6:	4586      	cmp	lr, r0
 80244a8:	da04      	bge.n	80244b4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80244aa:	2b00      	cmp	r3, #0
 80244ac:	db02      	blt.n	80244b4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80244ae:	4563      	cmp	r3, ip
 80244b0:	f2c0 80ba 	blt.w	8024628 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 80244b4:	f11e 0e01 	adds.w	lr, lr, #1
 80244b8:	f100 80ab 	bmi.w	8024612 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 80244bc:	4571      	cmp	r1, lr
 80244be:	f2c0 80a8 	blt.w	8024612 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 80244c2:	3301      	adds	r3, #1
 80244c4:	f100 80a5 	bmi.w	8024612 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 80244c8:	429a      	cmp	r2, r3
 80244ca:	f2c0 80a2 	blt.w	8024612 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 80244ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80244d0:	46c8      	mov	r8, r9
 80244d2:	f9bd a028 	ldrsh.w	sl, [sp, #40]	@ 0x28
 80244d6:	930e      	str	r3, [sp, #56]	@ 0x38
 80244d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80244da:	2b00      	cmp	r3, #0
 80244dc:	f340 80c4 	ble.w	8024668 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 80244e0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80244e2:	1430      	asrs	r0, r6, #16
 80244e4:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80244e8:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80244ec:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 80244f0:	1423      	asrs	r3, r4, #16
 80244f2:	f100 814f 	bmi.w	8024794 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80244f6:	f10c 3bff 	add.w	fp, ip, #4294967295
 80244fa:	455b      	cmp	r3, fp
 80244fc:	f280 814a 	bge.w	8024794 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8024500:	2800      	cmp	r0, #0
 8024502:	f2c0 8147 	blt.w	8024794 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8024506:	f10e 3bff 	add.w	fp, lr, #4294967295
 802450a:	4558      	cmp	r0, fp
 802450c:	f280 8142 	bge.w	8024794 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8024510:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8024512:	fb00 3305 	mla	r3, r0, r5, r3
 8024516:	0858      	lsrs	r0, r3, #1
 8024518:	07dd      	lsls	r5, r3, #31
 802451a:	f817 c000 	ldrb.w	ip, [r7, r0]
 802451e:	bf54      	ite	pl
 8024520:	f00c 0c0f 	andpl.w	ip, ip, #15
 8024524:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8024528:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802452c:	fa5f fc8c 	uxtb.w	ip, ip
 8024530:	2a00      	cmp	r2, #0
 8024532:	f000 80dd 	beq.w	80246f0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
 8024536:	1c58      	adds	r0, r3, #1
 8024538:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802453c:	07c0      	lsls	r0, r0, #31
 802453e:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8024542:	bf54      	ite	pl
 8024544:	f00e 0e0f 	andpl.w	lr, lr, #15
 8024548:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802454c:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8024550:	fa5f f08e 	uxtb.w	r0, lr
 8024554:	9010      	str	r0, [sp, #64]	@ 0x40
 8024556:	b1d9      	cbz	r1, 8024590 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8024558:	4453      	add	r3, sl
 802455a:	0858      	lsrs	r0, r3, #1
 802455c:	07dd      	lsls	r5, r3, #31
 802455e:	f103 0301 	add.w	r3, r3, #1
 8024562:	5c38      	ldrb	r0, [r7, r0]
 8024564:	bf54      	ite	pl
 8024566:	f000 000f 	andpl.w	r0, r0, #15
 802456a:	1100      	asrmi	r0, r0, #4
 802456c:	07dd      	lsls	r5, r3, #31
 802456e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8024572:	b2c0      	uxtb	r0, r0
 8024574:	900b      	str	r0, [sp, #44]	@ 0x2c
 8024576:	ea4f 0053 	mov.w	r0, r3, lsr #1
 802457a:	f817 e000 	ldrb.w	lr, [r7, r0]
 802457e:	bf54      	ite	pl
 8024580:	f00e 030f 	andpl.w	r3, lr, #15
 8024584:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8024588:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802458c:	b2db      	uxtb	r3, r3
 802458e:	9311      	str	r3, [sp, #68]	@ 0x44
 8024590:	b292      	uxth	r2, r2
 8024592:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8024594:	b289      	uxth	r1, r1
 8024596:	fb02 f301 	mul.w	r3, r2, r1
 802459a:	0112      	lsls	r2, r2, #4
 802459c:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80245a0:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 80245a4:	1ad2      	subs	r2, r2, r3
 80245a6:	b289      	uxth	r1, r1
 80245a8:	b292      	uxth	r2, r2
 80245aa:	1a40      	subs	r0, r0, r1
 80245ac:	436a      	muls	r2, r5
 80245ae:	b280      	uxth	r0, r0
 80245b0:	fb0c 2c00 	mla	ip, ip, r0, r2
 80245b4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80245b6:	fb01 c102 	mla	r1, r1, r2, ip
 80245ba:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80245bc:	fb03 1302 	mla	r3, r3, r2, r1
 80245c0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80245c4:	b1db      	cbz	r3, 80245fe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80245c6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80245c8:	4353      	muls	r3, r2
 80245ca:	1c5a      	adds	r2, r3, #1
 80245cc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80245d0:	4ac6      	ldr	r2, [pc, #792]	@ (80248ec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 80245d2:	121b      	asrs	r3, r3, #8
 80245d4:	6812      	ldr	r2, [r2, #0]
 80245d6:	2bff      	cmp	r3, #255	@ 0xff
 80245d8:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 80245dc:	f040 8099 	bne.w	8024712 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 80245e0:	0953      	lsrs	r3, r2, #5
 80245e2:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 80245e6:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80245ea:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80245ee:	f02c 0c07 	bic.w	ip, ip, #7
 80245f2:	ea43 0c0c 	orr.w	ip, r3, ip
 80245f6:	ea4c 0202 	orr.w	r2, ip, r2
 80245fa:	f8a8 2000 	strh.w	r2, [r8]
 80245fe:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8024600:	f108 0802 	add.w	r8, r8, #2
 8024604:	441c      	add	r4, r3
 8024606:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024608:	441e      	add	r6, r3
 802460a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802460c:	3b01      	subs	r3, #1
 802460e:	930e      	str	r3, [sp, #56]	@ 0x38
 8024610:	e762      	b.n	80244d8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8024612:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8024614:	f109 0902 	add.w	r9, r9, #2
 8024618:	441c      	add	r4, r3
 802461a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802461c:	441e      	add	r6, r3
 802461e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024620:	3b01      	subs	r3, #1
 8024622:	9309      	str	r3, [sp, #36]	@ 0x24
 8024624:	e736      	b.n	8024494 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8024626:	d024      	beq.n	8024672 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8024628:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802462a:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 802462c:	3b01      	subs	r3, #1
 802462e:	fb00 4003 	mla	r0, r0, r3, r4
 8024632:	1400      	asrs	r0, r0, #16
 8024634:	f53f af4b 	bmi.w	80244ce <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024638:	3901      	subs	r1, #1
 802463a:	4288      	cmp	r0, r1
 802463c:	f6bf af47 	bge.w	80244ce <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024640:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8024642:	fb01 6303 	mla	r3, r1, r3, r6
 8024646:	141b      	asrs	r3, r3, #16
 8024648:	f53f af41 	bmi.w	80244ce <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802464c:	3a01      	subs	r2, #1
 802464e:	4293      	cmp	r3, r2
 8024650:	f6bf af3d 	bge.w	80244ce <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024654:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 8024658:	46c8      	mov	r8, r9
 802465a:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 802465e:	930e      	str	r3, [sp, #56]	@ 0x38
 8024660:	f1bb 0f00 	cmp.w	fp, #0
 8024664:	f300 80b7 	bgt.w	80247d6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 8024668:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802466a:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802466e:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8024672:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024674:	2b00      	cmp	r3, #0
 8024676:	f340 818e 	ble.w	8024996 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
 802467a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802467e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024680:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024684:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024688:	eef0 6a62 	vmov.f32	s13, s5
 802468c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024690:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024694:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024698:	ee16 4a90 	vmov	r4, s13
 802469c:	eef0 6a43 	vmov.f32	s13, s6
 80246a0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80246a4:	ee16 6a90 	vmov	r6, s13
 80246a8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80246ac:	ee61 7a27 	vmul.f32	s15, s2, s15
 80246b0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80246b4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80246b8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80246bc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80246c0:	ee12 2a90 	vmov	r2, s5
 80246c4:	eef0 2a47 	vmov.f32	s5, s14
 80246c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80246cc:	ee13 2a10 	vmov	r2, s6
 80246d0:	9323      	str	r3, [sp, #140]	@ 0x8c
 80246d2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80246d4:	eeb0 3a67 	vmov.f32	s6, s15
 80246d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80246dc:	9324      	str	r3, [sp, #144]	@ 0x90
 80246de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80246e0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80246e2:	3b01      	subs	r3, #1
 80246e4:	930d      	str	r3, [sp, #52]	@ 0x34
 80246e6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80246e8:	bf08      	it	eq
 80246ea:	4613      	moveq	r3, r2
 80246ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80246ee:	e6c2      	b.n	8024476 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80246f0:	2900      	cmp	r1, #0
 80246f2:	f43f af4d 	beq.w	8024590 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80246f6:	eb0a 0003 	add.w	r0, sl, r3
 80246fa:	0843      	lsrs	r3, r0, #1
 80246fc:	07c0      	lsls	r0, r0, #31
 80246fe:	5cfb      	ldrb	r3, [r7, r3]
 8024700:	bf54      	ite	pl
 8024702:	f003 030f 	andpl.w	r3, r3, #15
 8024706:	111b      	asrmi	r3, r3, #4
 8024708:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802470c:	b2db      	uxtb	r3, r3
 802470e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024710:	e73e      	b.n	8024590 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8024712:	f8b8 e000 	ldrh.w	lr, [r8]
 8024716:	fa1f fb83 	uxth.w	fp, r3
 802471a:	f3c2 4107 	ubfx	r1, r2, #16, #8
 802471e:	43db      	mvns	r3, r3
 8024720:	ea4f 202e 	mov.w	r0, lr, asr #8
 8024724:	fb11 f10b 	smulbb	r1, r1, fp
 8024728:	b2db      	uxtb	r3, r3
 802472a:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 802472e:	fa5f fc8c 	uxtb.w	ip, ip
 8024732:	b2d2      	uxtb	r2, r2
 8024734:	fb00 1003 	mla	r0, r0, r3, r1
 8024738:	ea4f 01ee 	mov.w	r1, lr, asr #3
 802473c:	fb1c fc0b 	smulbb	ip, ip, fp
 8024740:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8024744:	b280      	uxth	r0, r0
 8024746:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 802474a:	fb12 fb0b 	smulbb	fp, r2, fp
 802474e:	fa5f fe8e 	uxtb.w	lr, lr
 8024752:	fb01 cc03 	mla	ip, r1, r3, ip
 8024756:	fb0e bb03 	mla	fp, lr, r3, fp
 802475a:	1c43      	adds	r3, r0, #1
 802475c:	fa1f fc8c 	uxth.w	ip, ip
 8024760:	fa1f fb8b 	uxth.w	fp, fp
 8024764:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8024768:	f10c 0101 	add.w	r1, ip, #1
 802476c:	f400 4378 	and.w	r3, r0, #63488	@ 0xf800
 8024770:	f10b 0001 	add.w	r0, fp, #1
 8024774:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8024778:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 802477c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8024780:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8024784:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8024788:	4318      	orrs	r0, r3
 802478a:	ea40 000c 	orr.w	r0, r0, ip
 802478e:	f8a8 0000 	strh.w	r0, [r8]
 8024792:	e734      	b.n	80245fe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8024794:	f113 0b01 	adds.w	fp, r3, #1
 8024798:	f53f af31 	bmi.w	80245fe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802479c:	45dc      	cmp	ip, fp
 802479e:	f6ff af2e 	blt.w	80245fe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80247a2:	f110 0b01 	adds.w	fp, r0, #1
 80247a6:	f53f af2a 	bmi.w	80245fe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80247aa:	45de      	cmp	lr, fp
 80247ac:	f6ff af27 	blt.w	80245fe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80247b0:	9302      	str	r3, [sp, #8]
 80247b2:	fa0f f38e 	sxth.w	r3, lr
 80247b6:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80247b8:	9301      	str	r3, [sp, #4]
 80247ba:	fa0f f38c 	sxth.w	r3, ip
 80247be:	e9cd 0203 	strd	r0, r2, [sp, #12]
 80247c2:	e9cd 1505 	strd	r1, r5, [sp, #20]
 80247c6:	9300      	str	r3, [sp, #0]
 80247c8:	463a      	mov	r2, r7
 80247ca:	4653      	mov	r3, sl
 80247cc:	4641      	mov	r1, r8
 80247ce:	9815      	ldr	r0, [sp, #84]	@ 0x54
 80247d0:	f7ff fd4c 	bl	802426c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 80247d4:	e713      	b.n	80245fe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80247d6:	1422      	asrs	r2, r4, #16
 80247d8:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80247da:	1433      	asrs	r3, r6, #16
 80247dc:	f3c4 3103 	ubfx	r1, r4, #12, #4
 80247e0:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80247e4:	fb05 2303 	mla	r3, r5, r3, r2
 80247e8:	085a      	lsrs	r2, r3, #1
 80247ea:	07dd      	lsls	r5, r3, #31
 80247ec:	5cba      	ldrb	r2, [r7, r2]
 80247ee:	bf54      	ite	pl
 80247f0:	f002 020f 	andpl.w	r2, r2, #15
 80247f4:	1112      	asrmi	r2, r2, #4
 80247f6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80247fa:	b2d2      	uxtb	r2, r2
 80247fc:	2900      	cmp	r1, #0
 80247fe:	d077      	beq.n	80248f0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8024800:	f103 0e01 	add.w	lr, r3, #1
 8024804:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8024808:	f01e 0f01 	tst.w	lr, #1
 802480c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8024810:	bf0c      	ite	eq
 8024812:	f00c 0c0f 	andeq.w	ip, ip, #15
 8024816:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 802481a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802481e:	fa5f f58c 	uxtb.w	r5, ip
 8024822:	9512      	str	r5, [sp, #72]	@ 0x48
 8024824:	b308      	cbz	r0, 802486a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8024826:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8024828:	442b      	add	r3, r5
 802482a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802482e:	07dd      	lsls	r5, r3, #31
 8024830:	f103 0301 	add.w	r3, r3, #1
 8024834:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8024838:	bf54      	ite	pl
 802483a:	f00c 0c0f 	andpl.w	ip, ip, #15
 802483e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8024842:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8024846:	fa5f f58c 	uxtb.w	r5, ip
 802484a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802484e:	950c      	str	r5, [sp, #48]	@ 0x30
 8024850:	07dd      	lsls	r5, r3, #31
 8024852:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8024856:	bf54      	ite	pl
 8024858:	f00c 0c0f 	andpl.w	ip, ip, #15
 802485c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8024860:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8024864:	fa5f f38c 	uxtb.w	r3, ip
 8024868:	9313      	str	r3, [sp, #76]	@ 0x4c
 802486a:	b289      	uxth	r1, r1
 802486c:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 802486e:	b280      	uxth	r0, r0
 8024870:	fb01 f300 	mul.w	r3, r1, r0
 8024874:	0109      	lsls	r1, r1, #4
 8024876:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 802487a:	f5c1 7c80 	rsb	ip, r1, #256	@ 0x100
 802487e:	1ac9      	subs	r1, r1, r3
 8024880:	b280      	uxth	r0, r0
 8024882:	b289      	uxth	r1, r1
 8024884:	ebac 0c00 	sub.w	ip, ip, r0
 8024888:	4369      	muls	r1, r5
 802488a:	fa1f fc8c 	uxth.w	ip, ip
 802488e:	fb02 120c 	mla	r2, r2, ip, r1
 8024892:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8024894:	fb00 2001 	mla	r0, r0, r1, r2
 8024898:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802489a:	fb03 0302 	mla	r3, r3, r2, r0
 802489e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80248a2:	b1d3      	cbz	r3, 80248da <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 80248a4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80248a6:	4353      	muls	r3, r2
 80248a8:	1c5a      	adds	r2, r3, #1
 80248aa:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80248ae:	4a0f      	ldr	r2, [pc, #60]	@ (80248ec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 80248b0:	121b      	asrs	r3, r3, #8
 80248b2:	6812      	ldr	r2, [r2, #0]
 80248b4:	2bff      	cmp	r3, #255	@ 0xff
 80248b6:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 80248ba:	d12d      	bne.n	8024918 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 80248bc:	0953      	lsrs	r3, r2, #5
 80248be:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 80248c2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80248c6:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80248ca:	f02c 0c07 	bic.w	ip, ip, #7
 80248ce:	ea43 0c0c 	orr.w	ip, r3, ip
 80248d2:	ea4c 0202 	orr.w	r2, ip, r2
 80248d6:	f8a8 2000 	strh.w	r2, [r8]
 80248da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80248dc:	f108 0802 	add.w	r8, r8, #2
 80248e0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80248e4:	441c      	add	r4, r3
 80248e6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80248e8:	441e      	add	r6, r3
 80248ea:	e6b9      	b.n	8024660 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 80248ec:	20027ba4 	.word	0x20027ba4
 80248f0:	2800      	cmp	r0, #0
 80248f2:	d0ba      	beq.n	802486a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 80248f4:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 80248f6:	442b      	add	r3, r5
 80248f8:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80248fc:	07db      	lsls	r3, r3, #31
 80248fe:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8024902:	bf54      	ite	pl
 8024904:	f00c 0c0f 	andpl.w	ip, ip, #15
 8024908:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802490c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8024910:	fa5f f38c 	uxtb.w	r3, ip
 8024914:	930c      	str	r3, [sp, #48]	@ 0x30
 8024916:	e7a8      	b.n	802486a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8024918:	f8b8 e000 	ldrh.w	lr, [r8]
 802491c:	fa1f fa83 	uxth.w	sl, r3
 8024920:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8024924:	43db      	mvns	r3, r3
 8024926:	ea4f 202e 	mov.w	r0, lr, asr #8
 802492a:	fb11 f10a 	smulbb	r1, r1, sl
 802492e:	b2db      	uxtb	r3, r3
 8024930:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8024934:	b2d2      	uxtb	r2, r2
 8024936:	fa5f fc8c 	uxtb.w	ip, ip
 802493a:	fb00 1003 	mla	r0, r0, r3, r1
 802493e:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8024942:	fb12 f20a 	smulbb	r2, r2, sl
 8024946:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802494a:	b280      	uxth	r0, r0
 802494c:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8024950:	fb1c fc0a 	smulbb	ip, ip, sl
 8024954:	fa5f fe8e 	uxtb.w	lr, lr
 8024958:	fb0e 2203 	mla	r2, lr, r3, r2
 802495c:	fb01 cc03 	mla	ip, r1, r3, ip
 8024960:	1c43      	adds	r3, r0, #1
 8024962:	b292      	uxth	r2, r2
 8024964:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8024968:	1c51      	adds	r1, r2, #1
 802496a:	fa1f fc8c 	uxth.w	ip, ip
 802496e:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 8024972:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8024976:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802497a:	4308      	orrs	r0, r1
 802497c:	f10c 0101 	add.w	r1, ip, #1
 8024980:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8024984:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8024988:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 802498c:	ea40 000c 	orr.w	r0, r0, ip
 8024990:	f8a8 0000 	strh.w	r0, [r8]
 8024994:	e7a1      	b.n	80248da <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8024996:	b017      	add	sp, #92	@ 0x5c
 8024998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802499c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 802499c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80249a0:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	@ 0x28
 80249a4:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 80249a8:	2d00      	cmp	r5, #0
 80249aa:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 80249ae:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
 80249b2:	fb05 0e03 	mla	lr, r5, r3, r0
 80249b6:	f89d c034 	ldrb.w	ip, [sp, #52]	@ 0x34
 80249ba:	f2c0 80b0 	blt.w	8024b1e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 80249be:	45a9      	cmp	r9, r5
 80249c0:	f340 80ad 	ble.w	8024b1e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 80249c4:	2800      	cmp	r0, #0
 80249c6:	f2c0 80a8 	blt.w	8024b1a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 80249ca:	4580      	cmp	r8, r0
 80249cc:	f340 80a5 	ble.w	8024b1a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 80249d0:	ea4f 045e 	mov.w	r4, lr, lsr #1
 80249d4:	f01e 0f01 	tst.w	lr, #1
 80249d8:	5d16      	ldrb	r6, [r2, r4]
 80249da:	bf0c      	ite	eq
 80249dc:	f006 060f 	andeq.w	r6, r6, #15
 80249e0:	1136      	asrne	r6, r6, #4
 80249e2:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80249e6:	b2f6      	uxtb	r6, r6
 80249e8:	1c44      	adds	r4, r0, #1
 80249ea:	f100 809b 	bmi.w	8024b24 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 80249ee:	45a0      	cmp	r8, r4
 80249f0:	f340 8098 	ble.w	8024b24 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 80249f4:	2f00      	cmp	r7, #0
 80249f6:	f000 8097 	beq.w	8024b28 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
 80249fa:	f10e 0a01 	add.w	sl, lr, #1
 80249fe:	ea4f 045a 	mov.w	r4, sl, lsr #1
 8024a02:	f01a 0f01 	tst.w	sl, #1
 8024a06:	5d14      	ldrb	r4, [r2, r4]
 8024a08:	bf0c      	ite	eq
 8024a0a:	f004 040f 	andeq.w	r4, r4, #15
 8024a0e:	1124      	asrne	r4, r4, #4
 8024a10:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8024a14:	b2e4      	uxtb	r4, r4
 8024a16:	3501      	adds	r5, #1
 8024a18:	f100 808a 	bmi.w	8024b30 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 8024a1c:	45a9      	cmp	r9, r5
 8024a1e:	f340 8087 	ble.w	8024b30 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 8024a22:	f1bc 0f00 	cmp.w	ip, #0
 8024a26:	f000 8086 	beq.w	8024b36 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
 8024a2a:	2800      	cmp	r0, #0
 8024a2c:	db7e      	blt.n	8024b2c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 8024a2e:	4580      	cmp	r8, r0
 8024a30:	dd7c      	ble.n	8024b2c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 8024a32:	eb03 090e 	add.w	r9, r3, lr
 8024a36:	ea4f 0559 	mov.w	r5, r9, lsr #1
 8024a3a:	f019 0f01 	tst.w	r9, #1
 8024a3e:	5d55      	ldrb	r5, [r2, r5]
 8024a40:	bf0c      	ite	eq
 8024a42:	f005 050f 	andeq.w	r5, r5, #15
 8024a46:	112d      	asrne	r5, r5, #4
 8024a48:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8024a4c:	b2ed      	uxtb	r5, r5
 8024a4e:	3001      	adds	r0, #1
 8024a50:	d474      	bmi.n	8024b3c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 8024a52:	4580      	cmp	r8, r0
 8024a54:	dd72      	ble.n	8024b3c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 8024a56:	2f00      	cmp	r7, #0
 8024a58:	d072      	beq.n	8024b40 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 8024a5a:	3301      	adds	r3, #1
 8024a5c:	449e      	add	lr, r3
 8024a5e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8024a62:	f01e 0f01 	tst.w	lr, #1
 8024a66:	5cd0      	ldrb	r0, [r2, r3]
 8024a68:	bf0c      	ite	eq
 8024a6a:	f000 000f 	andeq.w	r0, r0, #15
 8024a6e:	1100      	asrne	r0, r0, #4
 8024a70:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8024a74:	b2c3      	uxtb	r3, r0
 8024a76:	b2ba      	uxth	r2, r7
 8024a78:	fa1f fc8c 	uxth.w	ip, ip
 8024a7c:	fb02 f00c 	mul.w	r0, r2, ip
 8024a80:	0112      	lsls	r2, r2, #4
 8024a82:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8024a86:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 8024a8a:	1a12      	subs	r2, r2, r0
 8024a8c:	fa1f fc8c 	uxth.w	ip, ip
 8024a90:	b292      	uxth	r2, r2
 8024a92:	eba7 070c 	sub.w	r7, r7, ip
 8024a96:	4362      	muls	r2, r4
 8024a98:	b2bf      	uxth	r7, r7
 8024a9a:	fb06 2207 	mla	r2, r6, r7, r2
 8024a9e:	fb0c 2505 	mla	r5, ip, r5, r2
 8024aa2:	fb00 5303 	mla	r3, r0, r3, r5
 8024aa6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024aaa:	b3a3      	cbz	r3, 8024b16 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
 8024aac:	4a25      	ldr	r2, [pc, #148]	@ (8024b44 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
 8024aae:	880e      	ldrh	r6, [r1, #0]
 8024ab0:	6815      	ldr	r5, [r2, #0]
 8024ab2:	b29a      	uxth	r2, r3
 8024ab4:	1234      	asrs	r4, r6, #8
 8024ab6:	43db      	mvns	r3, r3
 8024ab8:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8024abc:	f3c5 2707 	ubfx	r7, r5, #8, #8
 8024ac0:	b2db      	uxtb	r3, r3
 8024ac2:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8024ac6:	fb10 f002 	smulbb	r0, r0, r2
 8024aca:	b2ed      	uxtb	r5, r5
 8024acc:	fb17 f702 	smulbb	r7, r7, r2
 8024ad0:	fb04 0403 	mla	r4, r4, r3, r0
 8024ad4:	10f0      	asrs	r0, r6, #3
 8024ad6:	fb15 f202 	smulbb	r2, r5, r2
 8024ada:	00f6      	lsls	r6, r6, #3
 8024adc:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8024ae0:	b2a4      	uxth	r4, r4
 8024ae2:	b2f6      	uxtb	r6, r6
 8024ae4:	fb00 7003 	mla	r0, r0, r3, r7
 8024ae8:	fb06 2303 	mla	r3, r6, r3, r2
 8024aec:	b280      	uxth	r0, r0
 8024aee:	b29a      	uxth	r2, r3
 8024af0:	1c63      	adds	r3, r4, #1
 8024af2:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8024af6:	1c53      	adds	r3, r2, #1
 8024af8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024afc:	1c42      	adds	r2, r0, #1
 8024afe:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 8024b02:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8024b06:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8024b0a:	0940      	lsrs	r0, r0, #5
 8024b0c:	4323      	orrs	r3, r4
 8024b0e:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8024b12:	4303      	orrs	r3, r0
 8024b14:	800b      	strh	r3, [r1, #0]
 8024b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024b1a:	2600      	movs	r6, #0
 8024b1c:	e764      	b.n	80249e8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
 8024b1e:	2400      	movs	r4, #0
 8024b20:	4626      	mov	r6, r4
 8024b22:	e778      	b.n	8024a16 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8024b24:	2400      	movs	r4, #0
 8024b26:	e776      	b.n	8024a16 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8024b28:	463c      	mov	r4, r7
 8024b2a:	e774      	b.n	8024a16 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8024b2c:	2500      	movs	r5, #0
 8024b2e:	e78e      	b.n	8024a4e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
 8024b30:	2300      	movs	r3, #0
 8024b32:	461d      	mov	r5, r3
 8024b34:	e79f      	b.n	8024a76 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8024b36:	4663      	mov	r3, ip
 8024b38:	4665      	mov	r5, ip
 8024b3a:	e79c      	b.n	8024a76 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8024b3c:	2300      	movs	r3, #0
 8024b3e:	e79a      	b.n	8024a76 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8024b40:	463b      	mov	r3, r7
 8024b42:	e798      	b.n	8024a76 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8024b44:	20027ba4 	.word	0x20027ba4

08024b48 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024b4c:	b093      	sub	sp, #76	@ 0x4c
 8024b4e:	461d      	mov	r5, r3
 8024b50:	920c      	str	r2, [sp, #48]	@ 0x30
 8024b52:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8024b54:	9011      	str	r0, [sp, #68]	@ 0x44
 8024b56:	9107      	str	r1, [sp, #28]
 8024b58:	6850      	ldr	r0, [r2, #4]
 8024b5a:	6812      	ldr	r2, [r2, #0]
 8024b5c:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 8024b60:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	@ 0x74
 8024b64:	fb00 1303 	mla	r3, r0, r3, r1
 8024b68:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8024b6c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024b6e:	689b      	ldr	r3, [r3, #8]
 8024b70:	3301      	adds	r3, #1
 8024b72:	f023 0301 	bic.w	r3, r3, #1
 8024b76:	9306      	str	r3, [sp, #24]
 8024b78:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024b7a:	681f      	ldr	r7, [r3, #0]
 8024b7c:	9b07      	ldr	r3, [sp, #28]
 8024b7e:	2b00      	cmp	r3, #0
 8024b80:	dc03      	bgt.n	8024b8a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8024b82:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024b84:	2b00      	cmp	r3, #0
 8024b86:	f340 8267 	ble.w	8025058 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 8024b8a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024b8c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024b90:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024b94:	1e48      	subs	r0, r1, #1
 8024b96:	f102 3cff 	add.w	ip, r2, #4294967295
 8024b9a:	2d00      	cmp	r5, #0
 8024b9c:	f340 80b7 	ble.w	8024d0e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8024ba0:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8024ba4:	ea4f 4326 	mov.w	r3, r6, asr #16
 8024ba8:	d406      	bmi.n	8024bb8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8024baa:	4586      	cmp	lr, r0
 8024bac:	da04      	bge.n	8024bb8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8024bae:	2b00      	cmp	r3, #0
 8024bb0:	db02      	blt.n	8024bb8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8024bb2:	4563      	cmp	r3, ip
 8024bb4:	f2c0 80ac 	blt.w	8024d10 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8024bb8:	f11e 0e01 	adds.w	lr, lr, #1
 8024bbc:	f100 809f 	bmi.w	8024cfe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8024bc0:	4571      	cmp	r1, lr
 8024bc2:	f2c0 809c 	blt.w	8024cfe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8024bc6:	3301      	adds	r3, #1
 8024bc8:	f100 8099 	bmi.w	8024cfe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8024bcc:	429a      	cmp	r2, r3
 8024bce:	f2c0 8096 	blt.w	8024cfe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8024bd2:	46c8      	mov	r8, r9
 8024bd4:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 8024bd8:	9509      	str	r5, [sp, #36]	@ 0x24
 8024bda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024bdc:	2b00      	cmp	r3, #0
 8024bde:	f340 80b5 	ble.w	8024d4c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8024be2:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8024be6:	1430      	asrs	r0, r6, #16
 8024be8:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8024bec:	9308      	str	r3, [sp, #32]
 8024bee:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024bf0:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8024bf4:	1423      	asrs	r3, r4, #16
 8024bf6:	f100 813f 	bmi.w	8024e78 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8024bfa:	f10c 3bff 	add.w	fp, ip, #4294967295
 8024bfe:	455b      	cmp	r3, fp
 8024c00:	f280 813a 	bge.w	8024e78 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8024c04:	2800      	cmp	r0, #0
 8024c06:	f2c0 8137 	blt.w	8024e78 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8024c0a:	f10e 3bff 	add.w	fp, lr, #4294967295
 8024c0e:	4558      	cmp	r0, fp
 8024c10:	f280 8132 	bge.w	8024e78 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8024c14:	9a06      	ldr	r2, [sp, #24]
 8024c16:	fb00 3302 	mla	r3, r0, r2, r3
 8024c1a:	0858      	lsrs	r0, r3, #1
 8024c1c:	07da      	lsls	r2, r3, #31
 8024c1e:	9a08      	ldr	r2, [sp, #32]
 8024c20:	f817 c000 	ldrb.w	ip, [r7, r0]
 8024c24:	bf54      	ite	pl
 8024c26:	f00c 0c0f 	andpl.w	ip, ip, #15
 8024c2a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8024c2e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8024c32:	fa5f fc8c 	uxtb.w	ip, ip
 8024c36:	2a00      	cmp	r2, #0
 8024c38:	f000 80cc 	beq.w	8024dd4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8024c3c:	1c58      	adds	r0, r3, #1
 8024c3e:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8024c42:	07c0      	lsls	r0, r0, #31
 8024c44:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8024c48:	bf54      	ite	pl
 8024c4a:	f00e 0e0f 	andpl.w	lr, lr, #15
 8024c4e:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8024c52:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8024c56:	fa5f fe8e 	uxtb.w	lr, lr
 8024c5a:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
 8024c5e:	b1b9      	cbz	r1, 8024c90 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8024c60:	4453      	add	r3, sl
 8024c62:	0858      	lsrs	r0, r3, #1
 8024c64:	07da      	lsls	r2, r3, #31
 8024c66:	5c38      	ldrb	r0, [r7, r0]
 8024c68:	bf54      	ite	pl
 8024c6a:	f000 000f 	andpl.w	r0, r0, #15
 8024c6e:	1100      	asrmi	r0, r0, #4
 8024c70:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8024c74:	b2c0      	uxtb	r0, r0
 8024c76:	900a      	str	r0, [sp, #40]	@ 0x28
 8024c78:	1c58      	adds	r0, r3, #1
 8024c7a:	0843      	lsrs	r3, r0, #1
 8024c7c:	07c2      	lsls	r2, r0, #31
 8024c7e:	5cfb      	ldrb	r3, [r7, r3]
 8024c80:	bf54      	ite	pl
 8024c82:	f003 030f 	andpl.w	r3, r3, #15
 8024c86:	111b      	asrmi	r3, r3, #4
 8024c88:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8024c8c:	b2db      	uxtb	r3, r3
 8024c8e:	930e      	str	r3, [sp, #56]	@ 0x38
 8024c90:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8024c94:	b289      	uxth	r1, r1
 8024c96:	fb02 f301 	mul.w	r3, r2, r1
 8024c9a:	0112      	lsls	r2, r2, #4
 8024c9c:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8024ca0:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 8024ca4:	1ad2      	subs	r2, r2, r3
 8024ca6:	b289      	uxth	r1, r1
 8024ca8:	b292      	uxth	r2, r2
 8024caa:	1a40      	subs	r0, r0, r1
 8024cac:	fa1f fe80 	uxth.w	lr, r0
 8024cb0:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8024cb2:	4342      	muls	r2, r0
 8024cb4:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8024cb8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024cba:	fb01 c102 	mla	r1, r1, r2, ip
 8024cbe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8024cc0:	fb03 1302 	mla	r3, r3, r2, r1
 8024cc4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024cc8:	2bff      	cmp	r3, #255	@ 0xff
 8024cca:	f040 8094 	bne.w	8024df6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 8024cce:	4bbf      	ldr	r3, [pc, #764]	@ (8024fcc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8024cd0:	681a      	ldr	r2, [r3, #0]
 8024cd2:	4bbf      	ldr	r3, [pc, #764]	@ (8024fd0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 8024cd4:	0951      	lsrs	r1, r2, #5
 8024cd6:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 8024cda:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8024cde:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8024ce2:	430b      	orrs	r3, r1
 8024ce4:	4313      	orrs	r3, r2
 8024ce6:	f8a8 3000 	strh.w	r3, [r8]
 8024cea:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8024cec:	f108 0802 	add.w	r8, r8, #2
 8024cf0:	441c      	add	r4, r3
 8024cf2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024cf4:	441e      	add	r6, r3
 8024cf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024cf8:	3b01      	subs	r3, #1
 8024cfa:	9309      	str	r3, [sp, #36]	@ 0x24
 8024cfc:	e76d      	b.n	8024bda <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024cfe:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8024d00:	3d01      	subs	r5, #1
 8024d02:	f109 0902 	add.w	r9, r9, #2
 8024d06:	441c      	add	r4, r3
 8024d08:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024d0a:	441e      	add	r6, r3
 8024d0c:	e745      	b.n	8024b9a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8024d0e:	d021      	beq.n	8024d54 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8024d10:	1e6b      	subs	r3, r5, #1
 8024d12:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8024d14:	fb00 4003 	mla	r0, r0, r3, r4
 8024d18:	1400      	asrs	r0, r0, #16
 8024d1a:	f53f af5a 	bmi.w	8024bd2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8024d1e:	3901      	subs	r1, #1
 8024d20:	4288      	cmp	r0, r1
 8024d22:	f6bf af56 	bge.w	8024bd2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8024d26:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8024d28:	fb01 6303 	mla	r3, r1, r3, r6
 8024d2c:	141b      	asrs	r3, r3, #16
 8024d2e:	f53f af50 	bmi.w	8024bd2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8024d32:	3a01      	subs	r2, #1
 8024d34:	4293      	cmp	r3, r2
 8024d36:	f6bf af4c 	bge.w	8024bd2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8024d3a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8024d3e:	46a8      	mov	r8, r5
 8024d40:	46ce      	mov	lr, r9
 8024d42:	9308      	str	r3, [sp, #32]
 8024d44:	f1b8 0f00 	cmp.w	r8, #0
 8024d48:	f300 80b6 	bgt.w	8024eb8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8024d4c:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8024d50:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8024d54:	9b07      	ldr	r3, [sp, #28]
 8024d56:	2b00      	cmp	r3, #0
 8024d58:	f340 817e 	ble.w	8025058 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 8024d5c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8024d60:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8024d62:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024d66:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024d6a:	eef0 6a62 	vmov.f32	s13, s5
 8024d6e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024d72:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024d76:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024d7a:	ee16 4a90 	vmov	r4, s13
 8024d7e:	eef0 6a43 	vmov.f32	s13, s6
 8024d82:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024d86:	ee16 6a90 	vmov	r6, s13
 8024d8a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024d8e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024d92:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024d96:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024d9a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024d9e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024da2:	ee12 2a90 	vmov	r2, s5
 8024da6:	eef0 2a47 	vmov.f32	s5, s14
 8024daa:	fb92 f3f3 	sdiv	r3, r2, r3
 8024dae:	ee13 2a10 	vmov	r2, s6
 8024db2:	931f      	str	r3, [sp, #124]	@ 0x7c
 8024db4:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8024db6:	eeb0 3a67 	vmov.f32	s6, s15
 8024dba:	fb92 f3f3 	sdiv	r3, r2, r3
 8024dbe:	9320      	str	r3, [sp, #128]	@ 0x80
 8024dc0:	9b07      	ldr	r3, [sp, #28]
 8024dc2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024dc4:	3b01      	subs	r3, #1
 8024dc6:	9307      	str	r3, [sp, #28]
 8024dc8:	bf08      	it	eq
 8024dca:	4615      	moveq	r5, r2
 8024dcc:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8024dce:	bf18      	it	ne
 8024dd0:	461d      	movne	r5, r3
 8024dd2:	e6d3      	b.n	8024b7c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8024dd4:	2900      	cmp	r1, #0
 8024dd6:	f43f af5b 	beq.w	8024c90 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8024dda:	eb0a 0003 	add.w	r0, sl, r3
 8024dde:	0843      	lsrs	r3, r0, #1
 8024de0:	07c0      	lsls	r0, r0, #31
 8024de2:	5cfb      	ldrb	r3, [r7, r3]
 8024de4:	bf54      	ite	pl
 8024de6:	f003 030f 	andpl.w	r3, r3, #15
 8024dea:	111b      	asrmi	r3, r3, #4
 8024dec:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8024df0:	b2db      	uxtb	r3, r3
 8024df2:	930a      	str	r3, [sp, #40]	@ 0x28
 8024df4:	e74c      	b.n	8024c90 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8024df6:	2b00      	cmp	r3, #0
 8024df8:	f43f af77 	beq.w	8024cea <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8024dfc:	4a73      	ldr	r2, [pc, #460]	@ (8024fcc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8024dfe:	fa1f fe83 	uxth.w	lr, r3
 8024e02:	f8b8 c000 	ldrh.w	ip, [r8]
 8024e06:	43db      	mvns	r3, r3
 8024e08:	6810      	ldr	r0, [r2, #0]
 8024e0a:	ea4f 212c 	mov.w	r1, ip, asr #8
 8024e0e:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8024e12:	b2db      	uxtb	r3, r3
 8024e14:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8024e18:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 8024e1c:	fb12 f20e 	smulbb	r2, r2, lr
 8024e20:	b2c0      	uxtb	r0, r0
 8024e22:	fb1b fb0e 	smulbb	fp, fp, lr
 8024e26:	fb01 2103 	mla	r1, r1, r3, r2
 8024e2a:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8024e2e:	fb10 fe0e 	smulbb	lr, r0, lr
 8024e32:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8024e36:	b289      	uxth	r1, r1
 8024e38:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8024e3c:	fa5f fc8c 	uxtb.w	ip, ip
 8024e40:	fb02 b203 	mla	r2, r2, r3, fp
 8024e44:	1c48      	adds	r0, r1, #1
 8024e46:	fb0c e303 	mla	r3, ip, r3, lr
 8024e4a:	b292      	uxth	r2, r2
 8024e4c:	b29b      	uxth	r3, r3
 8024e4e:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8024e52:	f102 0b01 	add.w	fp, r2, #1
 8024e56:	f401 4078 	and.w	r0, r1, #63488	@ 0xf800
 8024e5a:	1c59      	adds	r1, r3, #1
 8024e5c:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8024e60:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8024e64:	0952      	lsrs	r2, r2, #5
 8024e66:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8024e6a:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8024e6e:	4301      	orrs	r1, r0
 8024e70:	4311      	orrs	r1, r2
 8024e72:	f8a8 1000 	strh.w	r1, [r8]
 8024e76:	e738      	b.n	8024cea <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8024e78:	f113 0b01 	adds.w	fp, r3, #1
 8024e7c:	f53f af35 	bmi.w	8024cea <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8024e80:	45dc      	cmp	ip, fp
 8024e82:	f6ff af32 	blt.w	8024cea <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8024e86:	f110 0b01 	adds.w	fp, r0, #1
 8024e8a:	f53f af2e 	bmi.w	8024cea <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8024e8e:	45de      	cmp	lr, fp
 8024e90:	f6ff af2b 	blt.w	8024cea <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8024e94:	9302      	str	r3, [sp, #8]
 8024e96:	fa0f f38e 	sxth.w	r3, lr
 8024e9a:	9a08      	ldr	r2, [sp, #32]
 8024e9c:	9301      	str	r3, [sp, #4]
 8024e9e:	fa0f f38c 	sxth.w	r3, ip
 8024ea2:	9105      	str	r1, [sp, #20]
 8024ea4:	4641      	mov	r1, r8
 8024ea6:	9300      	str	r3, [sp, #0]
 8024ea8:	4653      	mov	r3, sl
 8024eaa:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8024eae:	463a      	mov	r2, r7
 8024eb0:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8024eb2:	f7ff fd73 	bl	802499c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 8024eb6:	e718      	b.n	8024cea <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8024eb8:	1422      	asrs	r2, r4, #16
 8024eba:	9906      	ldr	r1, [sp, #24]
 8024ebc:	1433      	asrs	r3, r6, #16
 8024ebe:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8024ec2:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8024ec6:	fb01 2303 	mla	r3, r1, r3, r2
 8024eca:	085a      	lsrs	r2, r3, #1
 8024ecc:	07d9      	lsls	r1, r3, #31
 8024ece:	5cba      	ldrb	r2, [r7, r2]
 8024ed0:	bf54      	ite	pl
 8024ed2:	f002 020f 	andpl.w	r2, r2, #15
 8024ed6:	1112      	asrmi	r2, r2, #4
 8024ed8:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8024edc:	b2d2      	uxtb	r2, r2
 8024ede:	2800      	cmp	r0, #0
 8024ee0:	d063      	beq.n	8024faa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 8024ee2:	f103 0a01 	add.w	sl, r3, #1
 8024ee6:	ea4f 015a 	mov.w	r1, sl, lsr #1
 8024eea:	f01a 0f01 	tst.w	sl, #1
 8024eee:	5c79      	ldrb	r1, [r7, r1]
 8024ef0:	bf0c      	ite	eq
 8024ef2:	f001 010f 	andeq.w	r1, r1, #15
 8024ef6:	1109      	asrne	r1, r1, #4
 8024ef8:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024efc:	b2c9      	uxtb	r1, r1
 8024efe:	910f      	str	r1, [sp, #60]	@ 0x3c
 8024f00:	f1bc 0f00 	cmp.w	ip, #0
 8024f04:	d01a      	beq.n	8024f3c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8024f06:	9908      	ldr	r1, [sp, #32]
 8024f08:	440b      	add	r3, r1
 8024f0a:	0859      	lsrs	r1, r3, #1
 8024f0c:	f013 0f01 	tst.w	r3, #1
 8024f10:	f103 0301 	add.w	r3, r3, #1
 8024f14:	5c79      	ldrb	r1, [r7, r1]
 8024f16:	bf0c      	ite	eq
 8024f18:	f001 010f 	andeq.w	r1, r1, #15
 8024f1c:	1109      	asrne	r1, r1, #4
 8024f1e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024f22:	b2c9      	uxtb	r1, r1
 8024f24:	910b      	str	r1, [sp, #44]	@ 0x2c
 8024f26:	0859      	lsrs	r1, r3, #1
 8024f28:	07db      	lsls	r3, r3, #31
 8024f2a:	5c79      	ldrb	r1, [r7, r1]
 8024f2c:	bf54      	ite	pl
 8024f2e:	f001 010f 	andpl.w	r1, r1, #15
 8024f32:	1109      	asrmi	r1, r1, #4
 8024f34:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024f38:	b2c9      	uxtb	r1, r1
 8024f3a:	9110      	str	r1, [sp, #64]	@ 0x40
 8024f3c:	b280      	uxth	r0, r0
 8024f3e:	fa1f fc8c 	uxth.w	ip, ip
 8024f42:	fb00 f30c 	mul.w	r3, r0, ip
 8024f46:	0100      	lsls	r0, r0, #4
 8024f48:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 8024f4c:	f5c0 7180 	rsb	r1, r0, #256	@ 0x100
 8024f50:	1ac0      	subs	r0, r0, r3
 8024f52:	fa1f fc8c 	uxth.w	ip, ip
 8024f56:	b280      	uxth	r0, r0
 8024f58:	eba1 010c 	sub.w	r1, r1, ip
 8024f5c:	fa1f fa81 	uxth.w	sl, r1
 8024f60:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8024f62:	4348      	muls	r0, r1
 8024f64:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8024f66:	fb02 020a 	mla	r2, r2, sl, r0
 8024f6a:	fb0c 2c01 	mla	ip, ip, r1, r2
 8024f6e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8024f70:	fb03 c302 	mla	r3, r3, r2, ip
 8024f74:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024f78:	2bff      	cmp	r3, #255	@ 0xff
 8024f7a:	d12b      	bne.n	8024fd4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 8024f7c:	4b13      	ldr	r3, [pc, #76]	@ (8024fcc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8024f7e:	681a      	ldr	r2, [r3, #0]
 8024f80:	4b13      	ldr	r3, [pc, #76]	@ (8024fd0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 8024f82:	0951      	lsrs	r1, r2, #5
 8024f84:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 8024f88:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8024f8c:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8024f90:	430b      	orrs	r3, r1
 8024f92:	4313      	orrs	r3, r2
 8024f94:	f8ae 3000 	strh.w	r3, [lr]
 8024f98:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8024f9a:	f10e 0e02 	add.w	lr, lr, #2
 8024f9e:	f108 38ff 	add.w	r8, r8, #4294967295
 8024fa2:	441c      	add	r4, r3
 8024fa4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024fa6:	441e      	add	r6, r3
 8024fa8:	e6cc      	b.n	8024d44 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8024faa:	f1bc 0f00 	cmp.w	ip, #0
 8024fae:	d0c5      	beq.n	8024f3c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8024fb0:	9908      	ldr	r1, [sp, #32]
 8024fb2:	440b      	add	r3, r1
 8024fb4:	0859      	lsrs	r1, r3, #1
 8024fb6:	07db      	lsls	r3, r3, #31
 8024fb8:	5c79      	ldrb	r1, [r7, r1]
 8024fba:	bf54      	ite	pl
 8024fbc:	f001 010f 	andpl.w	r1, r1, #15
 8024fc0:	1109      	asrmi	r1, r1, #4
 8024fc2:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024fc6:	b2c9      	uxtb	r1, r1
 8024fc8:	910b      	str	r1, [sp, #44]	@ 0x2c
 8024fca:	e7b7      	b.n	8024f3c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8024fcc:	20027ba4 	.word	0x20027ba4
 8024fd0:	fffff800 	.word	0xfffff800
 8024fd4:	2b00      	cmp	r3, #0
 8024fd6:	d0df      	beq.n	8024f98 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 8024fd8:	4a21      	ldr	r2, [pc, #132]	@ (8025060 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>)
 8024fda:	fa1f fa83 	uxth.w	sl, r3
 8024fde:	f8be c000 	ldrh.w	ip, [lr]
 8024fe2:	43db      	mvns	r3, r3
 8024fe4:	6810      	ldr	r0, [r2, #0]
 8024fe6:	ea4f 212c 	mov.w	r1, ip, asr #8
 8024fea:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8024fee:	b2db      	uxtb	r3, r3
 8024ff0:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8024ff4:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 8024ff8:	fb12 f20a 	smulbb	r2, r2, sl
 8024ffc:	b2c0      	uxtb	r0, r0
 8024ffe:	fb1b fb0a 	smulbb	fp, fp, sl
 8025002:	fb01 2103 	mla	r1, r1, r3, r2
 8025006:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802500a:	fb10 f00a 	smulbb	r0, r0, sl
 802500e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8025012:	b289      	uxth	r1, r1
 8025014:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8025018:	fa5f fc8c 	uxtb.w	ip, ip
 802501c:	fb02 b203 	mla	r2, r2, r3, fp
 8025020:	fb0c 0003 	mla	r0, ip, r3, r0
 8025024:	1c4b      	adds	r3, r1, #1
 8025026:	b292      	uxth	r2, r2
 8025028:	b280      	uxth	r0, r0
 802502a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802502e:	f100 0b01 	add.w	fp, r0, #1
 8025032:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 8025036:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 802503a:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 802503e:	ea4b 0101 	orr.w	r1, fp, r1
 8025042:	f102 0b01 	add.w	fp, r2, #1
 8025046:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802504a:	0952      	lsrs	r2, r2, #5
 802504c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8025050:	4311      	orrs	r1, r2
 8025052:	f8ae 1000 	strh.w	r1, [lr]
 8025056:	e79f      	b.n	8024f98 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 8025058:	b013      	add	sp, #76	@ 0x4c
 802505a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802505e:	bf00      	nop
 8025060:	20027ba4 	.word	0x20027ba4

08025064 <CRC_Lock>:
 8025064:	4a20      	ldr	r2, [pc, #128]	@ (80250e8 <CRC_Lock+0x84>)
 8025066:	b530      	push	{r4, r5, lr}
 8025068:	6813      	ldr	r3, [r2, #0]
 802506a:	f64f 74f0 	movw	r4, #65520	@ 0xfff0
 802506e:	f24c 2540 	movw	r5, #49728	@ 0xc240
 8025072:	f023 0301 	bic.w	r3, r3, #1
 8025076:	6013      	str	r3, [r2, #0]
 8025078:	4b1c      	ldr	r3, [pc, #112]	@ (80250ec <CRC_Lock+0x88>)
 802507a:	681a      	ldr	r2, [r3, #0]
 802507c:	4022      	ands	r2, r4
 802507e:	42aa      	cmp	r2, r5
 8025080:	d005      	beq.n	802508e <CRC_Lock+0x2a>
 8025082:	681b      	ldr	r3, [r3, #0]
 8025084:	f24c 2270 	movw	r2, #49776	@ 0xc270
 8025088:	4023      	ands	r3, r4
 802508a:	4293      	cmp	r3, r2
 802508c:	d124      	bne.n	80250d8 <CRC_Lock+0x74>
 802508e:	4b18      	ldr	r3, [pc, #96]	@ (80250f0 <CRC_Lock+0x8c>)
 8025090:	681b      	ldr	r3, [r3, #0]
 8025092:	bb0b      	cbnz	r3, 80250d8 <CRC_Lock+0x74>
 8025094:	4b17      	ldr	r3, [pc, #92]	@ (80250f4 <CRC_Lock+0x90>)
 8025096:	681a      	ldr	r2, [r3, #0]
 8025098:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802509c:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 80250a0:	d00d      	beq.n	80250be <CRC_Lock+0x5a>
 80250a2:	681a      	ldr	r2, [r3, #0]
 80250a4:	f240 4483 	movw	r4, #1155	@ 0x483
 80250a8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80250ac:	42a2      	cmp	r2, r4
 80250ae:	d006      	beq.n	80250be <CRC_Lock+0x5a>
 80250b0:	681b      	ldr	r3, [r3, #0]
 80250b2:	f240 4285 	movw	r2, #1157	@ 0x485
 80250b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80250ba:	4293      	cmp	r3, r2
 80250bc:	d10c      	bne.n	80250d8 <CRC_Lock+0x74>
 80250be:	4b0e      	ldr	r3, [pc, #56]	@ (80250f8 <CRC_Lock+0x94>)
 80250c0:	2201      	movs	r2, #1
 80250c2:	601a      	str	r2, [r3, #0]
 80250c4:	681a      	ldr	r2, [r3, #0]
 80250c6:	2a00      	cmp	r2, #0
 80250c8:	d1fc      	bne.n	80250c4 <CRC_Lock+0x60>
 80250ca:	4b0c      	ldr	r3, [pc, #48]	@ (80250fc <CRC_Lock+0x98>)
 80250cc:	6018      	str	r0, [r3, #0]
 80250ce:	6818      	ldr	r0, [r3, #0]
 80250d0:	1a43      	subs	r3, r0, r1
 80250d2:	4258      	negs	r0, r3
 80250d4:	4158      	adcs	r0, r3
 80250d6:	bd30      	pop	{r4, r5, pc}
 80250d8:	4b09      	ldr	r3, [pc, #36]	@ (8025100 <CRC_Lock+0x9c>)
 80250da:	2201      	movs	r2, #1
 80250dc:	601a      	str	r2, [r3, #0]
 80250de:	681a      	ldr	r2, [r3, #0]
 80250e0:	2a00      	cmp	r2, #0
 80250e2:	d1fc      	bne.n	80250de <CRC_Lock+0x7a>
 80250e4:	4b07      	ldr	r3, [pc, #28]	@ (8025104 <CRC_Lock+0xa0>)
 80250e6:	e7f1      	b.n	80250cc <CRC_Lock+0x68>
 80250e8:	e0002000 	.word	0xe0002000
 80250ec:	e000ed00 	.word	0xe000ed00
 80250f0:	e0042000 	.word	0xe0042000
 80250f4:	5c001000 	.word	0x5c001000
 80250f8:	58024c08 	.word	0x58024c08
 80250fc:	58024c00 	.word	0x58024c00
 8025100:	40023008 	.word	0x40023008
 8025104:	40023000 	.word	0x40023000

08025108 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8025108:	6101      	str	r1, [r0, #16]
 802510a:	4770      	bx	lr

0802510c <_ZN8touchgfx8Gestures4tickEv>:
 802510c:	7b83      	ldrb	r3, [r0, #14]
 802510e:	b14b      	cbz	r3, 8025124 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8025110:	8903      	ldrh	r3, [r0, #8]
 8025112:	3301      	adds	r3, #1
 8025114:	b29b      	uxth	r3, r3
 8025116:	2b07      	cmp	r3, #7
 8025118:	8103      	strh	r3, [r0, #8]
 802511a:	bf81      	itttt	hi
 802511c:	2300      	movhi	r3, #0
 802511e:	8143      	strhhi	r3, [r0, #10]
 8025120:	8183      	strhhi	r3, [r0, #12]
 8025122:	7383      	strbhi	r3, [r0, #14]
 8025124:	4770      	bx	lr
	...

08025128 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8025128:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 802512c:	4698      	mov	r8, r3
 802512e:	8883      	ldrh	r3, [r0, #4]
 8025130:	4604      	mov	r4, r0
 8025132:	4617      	mov	r7, r2
 8025134:	f8ad 3006 	strh.w	r3, [sp, #6]
 8025138:	eba8 0303 	sub.w	r3, r8, r3
 802513c:	4a19      	ldr	r2, [pc, #100]	@ (80251a4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 802513e:	460e      	mov	r6, r1
 8025140:	b21b      	sxth	r3, r3
 8025142:	88c1      	ldrh	r1, [r0, #6]
 8025144:	9200      	str	r2, [sp, #0]
 8025146:	2000      	movs	r0, #0
 8025148:	2b00      	cmp	r3, #0
 802514a:	8aa2      	ldrh	r2, [r4, #20]
 802514c:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 8025150:	bfb8      	it	lt
 8025152:	425b      	neglt	r3, r3
 8025154:	f88d 0004 	strb.w	r0, [sp, #4]
 8025158:	f8ad 1008 	strh.w	r1, [sp, #8]
 802515c:	b21b      	sxth	r3, r3
 802515e:	f8ad 800a 	strh.w	r8, [sp, #10]
 8025162:	f8ad 500c 	strh.w	r5, [sp, #12]
 8025166:	4293      	cmp	r3, r2
 8025168:	dc07      	bgt.n	802517a <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 802516a:	1a69      	subs	r1, r5, r1
 802516c:	b209      	sxth	r1, r1
 802516e:	2900      	cmp	r1, #0
 8025170:	bfb8      	it	lt
 8025172:	4249      	neglt	r1, r1
 8025174:	b209      	sxth	r1, r1
 8025176:	428a      	cmp	r2, r1
 8025178:	da10      	bge.n	802519c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 802517a:	6920      	ldr	r0, [r4, #16]
 802517c:	4669      	mov	r1, sp
 802517e:	eba8 0606 	sub.w	r6, r8, r6
 8025182:	1bef      	subs	r7, r5, r7
 8025184:	6803      	ldr	r3, [r0, #0]
 8025186:	685b      	ldr	r3, [r3, #4]
 8025188:	4798      	blx	r3
 802518a:	2300      	movs	r3, #0
 802518c:	2001      	movs	r0, #1
 802518e:	8166      	strh	r6, [r4, #10]
 8025190:	8123      	strh	r3, [r4, #8]
 8025192:	81a7      	strh	r7, [r4, #12]
 8025194:	f8a4 8004 	strh.w	r8, [r4, #4]
 8025198:	80e5      	strh	r5, [r4, #6]
 802519a:	73a0      	strb	r0, [r4, #14]
 802519c:	b004      	add	sp, #16
 802519e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80251a2:	bf00      	nop
 80251a4:	0802aff8 	.word	0x0802aff8

080251a8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 80251a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80251aa:	461e      	mov	r6, r3
 80251ac:	1e4b      	subs	r3, r1, #1
 80251ae:	b085      	sub	sp, #20
 80251b0:	4604      	mov	r4, r0
 80251b2:	2b01      	cmp	r3, #1
 80251b4:	460d      	mov	r5, r1
 80251b6:	4617      	mov	r7, r2
 80251b8:	d84b      	bhi.n	8025252 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 80251ba:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80251be:	1cd3      	adds	r3, r2, #3
 80251c0:	b29b      	uxth	r3, r3
 80251c2:	2b06      	cmp	r3, #6
 80251c4:	d916      	bls.n	80251f4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 80251c6:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 8025268 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80251ca:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80251ce:	f8cd c004 	str.w	ip, [sp, #4]
 80251d2:	f04f 0c00 	mov.w	ip, #0
 80251d6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80251da:	6900      	ldr	r0, [r0, #16]
 80251dc:	f8ad 100c 	strh.w	r1, [sp, #12]
 80251e0:	a901      	add	r1, sp, #4
 80251e2:	f88d c008 	strb.w	ip, [sp, #8]
 80251e6:	f8ad 200a 	strh.w	r2, [sp, #10]
 80251ea:	f8ad 300e 	strh.w	r3, [sp, #14]
 80251ee:	6803      	ldr	r3, [r0, #0]
 80251f0:	689b      	ldr	r3, [r3, #8]
 80251f2:	4798      	blx	r3
 80251f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80251f8:	1cd3      	adds	r3, r2, #3
 80251fa:	b29b      	uxth	r3, r3
 80251fc:	2b06      	cmp	r3, #6
 80251fe:	d916      	bls.n	802522e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8025200:	f8df c064 	ldr.w	ip, [pc, #100]	@ 8025268 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8025204:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8025208:	f8cd c004 	str.w	ip, [sp, #4]
 802520c:	f04f 0c01 	mov.w	ip, #1
 8025210:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8025214:	6920      	ldr	r0, [r4, #16]
 8025216:	f8ad 100c 	strh.w	r1, [sp, #12]
 802521a:	a901      	add	r1, sp, #4
 802521c:	f88d c008 	strb.w	ip, [sp, #8]
 8025220:	f8ad 200a 	strh.w	r2, [sp, #10]
 8025224:	f8ad 300e 	strh.w	r3, [sp, #14]
 8025228:	6803      	ldr	r3, [r0, #0]
 802522a:	689b      	ldr	r3, [r3, #8]
 802522c:	4798      	blx	r3
 802522e:	4b0d      	ldr	r3, [pc, #52]	@ (8025264 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8025230:	a901      	add	r1, sp, #4
 8025232:	6920      	ldr	r0, [r4, #16]
 8025234:	9301      	str	r3, [sp, #4]
 8025236:	2300      	movs	r3, #0
 8025238:	f88d 5008 	strb.w	r5, [sp, #8]
 802523c:	f8ad 700a 	strh.w	r7, [sp, #10]
 8025240:	f8ad 600c 	strh.w	r6, [sp, #12]
 8025244:	f8ad 300e 	strh.w	r3, [sp, #14]
 8025248:	6803      	ldr	r3, [r0, #0]
 802524a:	681b      	ldr	r3, [r3, #0]
 802524c:	4798      	blx	r3
 802524e:	b005      	add	sp, #20
 8025250:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025252:	2900      	cmp	r1, #0
 8025254:	d1eb      	bne.n	802522e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8025256:	80a2      	strh	r2, [r4, #4]
 8025258:	80c6      	strh	r6, [r0, #6]
 802525a:	60a1      	str	r1, [r4, #8]
 802525c:	81a1      	strh	r1, [r4, #12]
 802525e:	73a1      	strb	r1, [r4, #14]
 8025260:	e7e5      	b.n	802522e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8025262:	bf00      	nop
 8025264:	0802afe4 	.word	0x0802afe4
 8025268:	0802b00c 	.word	0x0802b00c

0802526c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>:
 802526c:	10c9      	asrs	r1, r1, #3
 802526e:	2900      	cmp	r1, #0
 8025270:	bfb8      	it	lt
 8025272:	4249      	neglt	r1, r1
 8025274:	2801      	cmp	r0, #1
 8025276:	d108      	bne.n	802528a <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
 8025278:	f3c1 0008 	ubfx	r0, r1, #0, #9
 802527c:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8025280:	4601      	mov	r1, r0
 8025282:	dd02      	ble.n	802528a <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
 8025284:	f5c0 7000 	rsb	r0, r0, #512	@ 0x200
 8025288:	4770      	bx	lr
 802528a:	29ff      	cmp	r1, #255	@ 0xff
 802528c:	bfa8      	it	ge
 802528e:	21ff      	movge	r1, #255	@ 0xff
 8025290:	4608      	mov	r0, r1
 8025292:	4770      	bx	lr

08025294 <_ZN8touchgfx10Rasterizer6lineToEii>:
 8025294:	b410      	push	{r4}
 8025296:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 802529a:	429c      	cmp	r4, r3
 802529c:	d803      	bhi.n	80252a6 <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 802529e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80252a2:	f7ef b871 	b.w	8014388 <_ZN8touchgfx7Outline6lineToEii>
 80252a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80252aa:	4770      	bx	lr

080252ac <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 80252ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80252b0:	b08b      	sub	sp, #44	@ 0x2c
 80252b2:	4606      	mov	r6, r0
 80252b4:	468a      	mov	sl, r1
 80252b6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80252ba:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 80252be:	9308      	str	r3, [sp, #32]
 80252c0:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 80252c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80252c6:	f7ef f9ca 	bl	801465e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 80252ca:	68b5      	ldr	r5, [r6, #8]
 80252cc:	4604      	mov	r4, r0
 80252ce:	2d00      	cmp	r5, #0
 80252d0:	d044      	beq.n	802535c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 80252d2:	6873      	ldr	r3, [r6, #4]
 80252d4:	42ab      	cmp	r3, r5
 80252d6:	d33d      	bcc.n	8025354 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 80252d8:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80252dc:	f04f 0800 	mov.w	r8, #0
 80252e0:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	@ 0x34
 80252e4:	eb02 0b03 	add.w	fp, r2, r3
 80252e8:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80252ec:	fb02 1203 	mla	r2, r2, r3, r1
 80252f0:	9205      	str	r2, [sp, #20]
 80252f2:	1e6a      	subs	r2, r5, #1
 80252f4:	9204      	str	r2, [sp, #16]
 80252f6:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 80252fa:	f9b4 7000 	ldrsh.w	r7, [r4]
 80252fe:	454b      	cmp	r3, r9
 8025300:	463a      	mov	r2, r7
 8025302:	d008      	beq.n	8025316 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 8025304:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	@ 0x34
 8025308:	eb03 0b09 	add.w	fp, r3, r9
 802530c:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 8025310:	fb03 1309 	mla	r3, r3, r9, r1
 8025314:	9305      	str	r3, [sp, #20]
 8025316:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 802531a:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 802531e:	4498      	add	r8, r3
 8025320:	9b04      	ldr	r3, [sp, #16]
 8025322:	3b01      	subs	r3, #1
 8025324:	9304      	str	r3, [sp, #16]
 8025326:	9b04      	ldr	r3, [sp, #16]
 8025328:	3301      	adds	r3, #1
 802532a:	d015      	beq.n	8025358 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 802532c:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 8025330:	42bb      	cmp	r3, r7
 8025332:	d117      	bne.n	8025364 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 8025334:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 8025338:	9b04      	ldr	r3, [sp, #16]
 802533a:	4548      	cmp	r0, r9
 802533c:	f103 33ff 	add.w	r3, r3, #4294967295
 8025340:	d17d      	bne.n	802543e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 8025342:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 8025346:	4401      	add	r1, r0
 8025348:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 802534c:	4480      	add	r8, r0
 802534e:	e7e9      	b.n	8025324 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 8025350:	461f      	mov	r7, r3
 8025352:	e042      	b.n	80253da <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 8025354:	2000      	movs	r0, #0
 8025356:	e002      	b.n	802535e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 8025358:	2900      	cmp	r1, #0
 802535a:	d16d      	bne.n	8025438 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 802535c:	2001      	movs	r0, #1
 802535e:	b00b      	add	sp, #44	@ 0x2c
 8025360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025364:	b379      	cbz	r1, 80253c6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 8025366:	2f00      	cmp	r7, #0
 8025368:	db29      	blt.n	80253be <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 802536a:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 802536e:	42bb      	cmp	r3, r7
 8025370:	dd25      	ble.n	80253be <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8025372:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 8025376:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 802537a:	f7ff ff77 	bl	802526c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
 802537e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025380:	fb10 f003 	smulbb	r0, r0, r3
 8025384:	b280      	uxth	r0, r0
 8025386:	1c41      	adds	r1, r0, #1
 8025388:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802538c:	1209      	asrs	r1, r1, #8
 802538e:	f011 0fff 	tst.w	r1, #255	@ 0xff
 8025392:	d014      	beq.n	80253be <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8025394:	b2c9      	uxtb	r1, r1
 8025396:	9808      	ldr	r0, [sp, #32]
 8025398:	b2ba      	uxth	r2, r7
 802539a:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 802539c:	9102      	str	r1, [sp, #8]
 802539e:	2101      	movs	r1, #1
 80253a0:	4413      	add	r3, r2
 80253a2:	4402      	add	r2, r0
 80253a4:	9101      	str	r1, [sp, #4]
 80253a6:	fa0f f18b 	sxth.w	r1, fp
 80253aa:	f8da 0000 	ldr.w	r0, [sl]
 80253ae:	b21b      	sxth	r3, r3
 80253b0:	9100      	str	r1, [sp, #0]
 80253b2:	b212      	sxth	r2, r2
 80253b4:	6941      	ldr	r1, [r0, #20]
 80253b6:	4650      	mov	r0, sl
 80253b8:	460d      	mov	r5, r1
 80253ba:	9905      	ldr	r1, [sp, #20]
 80253bc:	47a8      	blx	r5
 80253be:	9b04      	ldr	r3, [sp, #16]
 80253c0:	1c7a      	adds	r2, r7, #1
 80253c2:	3301      	adds	r3, #1
 80253c4:	d0ca      	beq.n	802535c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 80253c6:	f9b4 7000 	ldrsh.w	r7, [r4]
 80253ca:	1abb      	subs	r3, r7, r2
 80253cc:	2b00      	cmp	r3, #0
 80253ce:	dd31      	ble.n	8025434 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 80253d0:	2a00      	cmp	r2, #0
 80253d2:	dabd      	bge.n	8025350 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 80253d4:	2f00      	cmp	r7, #0
 80253d6:	dd2d      	ble.n	8025434 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 80253d8:	2200      	movs	r2, #0
 80253da:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 80253de:	19d1      	adds	r1, r2, r7
 80253e0:	4299      	cmp	r1, r3
 80253e2:	db02      	blt.n	80253ea <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 80253e4:	1a9f      	subs	r7, r3, r2
 80253e6:	2f00      	cmp	r7, #0
 80253e8:	dd24      	ble.n	8025434 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 80253ea:	ea4f 1188 	mov.w	r1, r8, lsl #6
 80253ee:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 80253f2:	f7ff ff3b 	bl	802526c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
 80253f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80253f8:	fb10 f003 	smulbb	r0, r0, r3
 80253fc:	b280      	uxth	r0, r0
 80253fe:	1c41      	adds	r1, r0, #1
 8025400:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8025404:	1209      	asrs	r1, r1, #8
 8025406:	f011 0fff 	tst.w	r1, #255	@ 0xff
 802540a:	d013      	beq.n	8025434 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802540c:	b292      	uxth	r2, r2
 802540e:	9808      	ldr	r0, [sp, #32]
 8025410:	b2c9      	uxtb	r1, r1
 8025412:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 8025414:	b23f      	sxth	r7, r7
 8025416:	4413      	add	r3, r2
 8025418:	9102      	str	r1, [sp, #8]
 802541a:	4402      	add	r2, r0
 802541c:	fa0f f18b 	sxth.w	r1, fp
 8025420:	f8da 0000 	ldr.w	r0, [sl]
 8025424:	b21b      	sxth	r3, r3
 8025426:	9100      	str	r1, [sp, #0]
 8025428:	b212      	sxth	r2, r2
 802542a:	9701      	str	r7, [sp, #4]
 802542c:	9905      	ldr	r1, [sp, #20]
 802542e:	6947      	ldr	r7, [r0, #20]
 8025430:	4650      	mov	r0, sl
 8025432:	47b8      	blx	r7
 8025434:	464b      	mov	r3, r9
 8025436:	e75e      	b.n	80252f6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 8025438:	2f00      	cmp	r7, #0
 802543a:	da96      	bge.n	802536a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 802543c:	e78e      	b.n	802535c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802543e:	2900      	cmp	r1, #0
 8025440:	d0f8      	beq.n	8025434 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8025442:	e790      	b.n	8025366 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

08025444 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 8025444:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8025448:	4b4a      	ldr	r3, [pc, #296]	@ (8025574 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x130>)
 802544a:	2500      	movs	r5, #0
 802544c:	f100 0620 	add.w	r6, r0, #32
 8025450:	4604      	mov	r4, r0
 8025452:	4690      	mov	r8, r2
 8025454:	f100 0718 	add.w	r7, r0, #24
 8025458:	e9c0 3100 	strd	r3, r1, [r0]
 802545c:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8025460:	e9c0 5504 	strd	r5, r5, [r0, #16]
 8025464:	e9c0 5506 	strd	r5, r5, [r0, #24]
 8025468:	4630      	mov	r0, r6
 802546a:	f7ee fad3 	bl	8013a14 <_ZN8touchgfx7OutlineC1Ev>
 802546e:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
 8025472:	f8a4 5052 	strh.w	r5, [r4, #82]	@ 0x52
 8025476:	f8a4 5054 	strh.w	r5, [r4, #84]	@ 0x54
 802547a:	f8a4 5056 	strh.w	r5, [r4, #86]	@ 0x56
 802547e:	f884 5058 	strb.w	r5, [r4, #88]	@ 0x58
 8025482:	f884 5059 	strb.w	r5, [r4, #89]	@ 0x59
 8025486:	f8a4 5064 	strh.w	r5, [r4, #100]	@ 0x64
 802548a:	f8d4 c004 	ldr.w	ip, [r4, #4]
 802548e:	9500      	str	r5, [sp, #0]
 8025490:	e9c4 5517 	strd	r5, r5, [r4, #92]	@ 0x5c
 8025494:	e9c4 551a 	strd	r5, r5, [r4, #104]	@ 0x68
 8025498:	f9b8 2000 	ldrsh.w	r2, [r8]
 802549c:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 80254a0:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 80254a4:	4410      	add	r0, r2
 80254a6:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 80254aa:	b280      	uxth	r0, r0
 80254ac:	fa0f fa80 	sxth.w	sl, r0
 80254b0:	45aa      	cmp	sl, r5
 80254b2:	dd5c      	ble.n	802556e <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
 80254b4:	4591      	cmp	r9, r2
 80254b6:	dd5a      	ble.n	802556e <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
 80254b8:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 80254bc:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 80254c0:	440b      	add	r3, r1
 80254c2:	b29b      	uxth	r3, r3
 80254c4:	b21d      	sxth	r5, r3
 80254c6:	2d00      	cmp	r5, #0
 80254c8:	dd51      	ble.n	802556e <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
 80254ca:	458e      	cmp	lr, r1
 80254cc:	dd4f      	ble.n	802556e <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
 80254ce:	45d1      	cmp	r9, sl
 80254d0:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80254d4:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 80254d8:	bfb8      	it	lt
 80254da:	fa1f f089 	uxthlt.w	r0, r9
 80254de:	45ae      	cmp	lr, r5
 80254e0:	f8ad 2000 	strh.w	r2, [sp]
 80254e4:	bfb8      	it	lt
 80254e6:	fa1f f38e 	uxthlt.w	r3, lr
 80254ea:	1a80      	subs	r0, r0, r2
 80254ec:	f8ad 1002 	strh.w	r1, [sp, #2]
 80254f0:	1a5b      	subs	r3, r3, r1
 80254f2:	f8ad 0004 	strh.w	r0, [sp, #4]
 80254f6:	f8ad 3006 	strh.w	r3, [sp, #6]
 80254fa:	466d      	mov	r5, sp
 80254fc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8025500:	e887 0003 	stmia.w	r7, {r0, r1}
 8025504:	f8dc 3000 	ldr.w	r3, [ip]
 8025508:	4660      	mov	r0, ip
 802550a:	4639      	mov	r1, r7
 802550c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802550e:	4798      	blx	r3
 8025510:	6861      	ldr	r1, [r4, #4]
 8025512:	4628      	mov	r0, r5
 8025514:	3104      	adds	r1, #4
 8025516:	f7f0 fc4d 	bl	8015db4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802551a:	4638      	mov	r0, r7
 802551c:	f7f0 fc22 	bl	8015d64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8025520:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8025524:	f8bd 2000 	ldrh.w	r2, [sp]
 8025528:	4630      	mov	r0, r6
 802552a:	f8a4 3054 	strh.w	r3, [r4, #84]	@ 0x54
 802552e:	f8a4 2052 	strh.w	r2, [r4, #82]	@ 0x52
 8025532:	f7ee fa53 	bl	80139dc <_ZN8touchgfx7Outline5resetEv>
 8025536:	f9bd 3000 	ldrsh.w	r3, [sp]
 802553a:	f9b4 201e 	ldrsh.w	r2, [r4, #30]
 802553e:	4620      	mov	r0, r4
 8025540:	015b      	lsls	r3, r3, #5
 8025542:	60a3      	str	r3, [r4, #8]
 8025544:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8025548:	015b      	lsls	r3, r3, #5
 802554a:	60e3      	str	r3, [r4, #12]
 802554c:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8025550:	015b      	lsls	r3, r3, #5
 8025552:	6123      	str	r3, [r4, #16]
 8025554:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8025558:	015b      	lsls	r3, r3, #5
 802555a:	6163      	str	r3, [r4, #20]
 802555c:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
 8025560:	f8a4 3056 	strh.w	r3, [r4, #86]	@ 0x56
 8025564:	e9c4 3212 	strd	r3, r2, [r4, #72]	@ 0x48
 8025568:	b002      	add	sp, #8
 802556a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802556e:	2300      	movs	r3, #0
 8025570:	9301      	str	r3, [sp, #4]
 8025572:	e7c2      	b.n	80254fa <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xb6>
 8025574:	0802b2dc 	.word	0x0802b2dc

08025578 <_ZN8touchgfx6Canvas5closeEv>:
 8025578:	b538      	push	{r3, r4, r5, lr}
 802557a:	f890 3058 	ldrb.w	r3, [r0, #88]	@ 0x58
 802557e:	4604      	mov	r4, r0
 8025580:	b193      	cbz	r3, 80255a8 <_ZN8touchgfx6Canvas5closeEv+0x30>
 8025582:	f890 3064 	ldrb.w	r3, [r0, #100]	@ 0x64
 8025586:	f890 2065 	ldrb.w	r2, [r0, #101]	@ 0x65
 802558a:	4213      	tst	r3, r2
 802558c:	d10c      	bne.n	80255a8 <_ZN8touchgfx6Canvas5closeEv+0x30>
 802558e:	f100 0520 	add.w	r5, r0, #32
 8025592:	b123      	cbz	r3, 802559e <_ZN8touchgfx6Canvas5closeEv+0x26>
 8025594:	e9d0 1217 	ldrd	r1, r2, [r0, #92]	@ 0x5c
 8025598:	4628      	mov	r0, r5
 802559a:	f7ff fe7b 	bl	8025294 <_ZN8touchgfx10Rasterizer6lineToEii>
 802559e:	4628      	mov	r0, r5
 80255a0:	e9d4 121a 	ldrd	r1, r2, [r4, #104]	@ 0x68
 80255a4:	f7ff fe76 	bl	8025294 <_ZN8touchgfx10Rasterizer6lineToEii>
 80255a8:	2300      	movs	r3, #0
 80255aa:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
 80255ae:	e9d4 0309 	ldrd	r0, r3, [r4, #36]	@ 0x24
 80255b2:	4298      	cmp	r0, r3
 80255b4:	bf34      	ite	cc
 80255b6:	2000      	movcc	r0, #0
 80255b8:	2001      	movcs	r0, #1
 80255ba:	bd38      	pop	{r3, r4, r5, pc}

080255bc <_ZN8touchgfx6Canvas6renderEh>:
 80255bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80255c0:	4604      	mov	r4, r0
 80255c2:	6840      	ldr	r0, [r0, #4]
 80255c4:	460d      	mov	r5, r1
 80255c6:	6803      	ldr	r3, [r0, #0]
 80255c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80255ca:	4798      	blx	r3
 80255cc:	fb10 f105 	smulbb	r1, r0, r5
 80255d0:	b289      	uxth	r1, r1
 80255d2:	1c4d      	adds	r5, r1, #1
 80255d4:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 80255d8:	122d      	asrs	r5, r5, #8
 80255da:	f000 8097 	beq.w	802570c <_ZN8touchgfx6Canvas6renderEh+0x150>
 80255de:	f894 3059 	ldrb.w	r3, [r4, #89]	@ 0x59
 80255e2:	2b00      	cmp	r3, #0
 80255e4:	f000 8092 	beq.w	802570c <_ZN8touchgfx6Canvas6renderEh+0x150>
 80255e8:	4620      	mov	r0, r4
 80255ea:	f7ff ffc5 	bl	8025578 <_ZN8touchgfx6Canvas5closeEv>
 80255ee:	4607      	mov	r7, r0
 80255f0:	2800      	cmp	r0, #0
 80255f2:	d043      	beq.n	802567c <_ZN8touchgfx6Canvas6renderEh+0xc0>
 80255f4:	6863      	ldr	r3, [r4, #4]
 80255f6:	4e46      	ldr	r6, [pc, #280]	@ (8025710 <_ZN8touchgfx6Canvas6renderEh+0x154>)
 80255f8:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80255fa:	6837      	ldr	r7, [r6, #0]
 80255fc:	6803      	ldr	r3, [r0, #0]
 80255fe:	689b      	ldr	r3, [r3, #8]
 8025600:	4798      	blx	r3
 8025602:	4601      	mov	r1, r0
 8025604:	4638      	mov	r0, r7
 8025606:	f7eb fc9f 	bl	8010f48 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 802560a:	4607      	mov	r7, r0
 802560c:	f7eb f860 	bl	80106d0 <_ZN8touchgfx3HAL3lcdEv>
 8025610:	6803      	ldr	r3, [r0, #0]
 8025612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8025614:	4798      	blx	r3
 8025616:	4680      	mov	r8, r0
 8025618:	f7eb f85a 	bl	80106d0 <_ZN8touchgfx3HAL3lcdEv>
 802561c:	6803      	ldr	r3, [r0, #0]
 802561e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8025620:	4798      	blx	r3
 8025622:	280b      	cmp	r0, #11
 8025624:	d857      	bhi.n	80256d6 <_ZN8touchgfx6Canvas6renderEh+0x11a>
 8025626:	e8df f000 	tbb	[pc, r0]
 802562a:	584d      	.short	0x584d
 802562c:	2d560668 	.word	0x2d560668
 8025630:	6161613d 	.word	0x6161613d
 8025634:	6161      	.short	0x6161
 8025636:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 802563a:	2208      	movs	r2, #8
 802563c:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8025640:	fb91 f2f2 	sdiv	r2, r1, r2
 8025644:	fb08 2303 	mla	r3, r8, r3, r2
 8025648:	441f      	add	r7, r3
 802564a:	424b      	negs	r3, r1
 802564c:	f001 0107 	and.w	r1, r1, #7
 8025650:	f003 0307 	and.w	r3, r3, #7
 8025654:	bf58      	it	pl
 8025656:	4259      	negpl	r1, r3
 8025658:	b2c9      	uxtb	r1, r1
 802565a:	6860      	ldr	r0, [r4, #4]
 802565c:	b2ed      	uxtb	r5, r5
 802565e:	fa0f f388 	sxth.w	r3, r8
 8025662:	463a      	mov	r2, r7
 8025664:	e9cd 1500 	strd	r1, r5, [sp]
 8025668:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 802566a:	f104 0020 	add.w	r0, r4, #32
 802566e:	f7ff fe1d 	bl	80252ac <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 8025672:	4607      	mov	r7, r0
 8025674:	6830      	ldr	r0, [r6, #0]
 8025676:	6803      	ldr	r3, [r0, #0]
 8025678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802567a:	4798      	blx	r3
 802567c:	4638      	mov	r0, r7
 802567e:	b002      	add	sp, #8
 8025680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025684:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 8025688:	2204      	movs	r2, #4
 802568a:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 802568e:	fb91 f2f2 	sdiv	r2, r1, r2
 8025692:	fb08 2303 	mla	r3, r8, r3, r2
 8025696:	441f      	add	r7, r3
 8025698:	424b      	negs	r3, r1
 802569a:	f001 0103 	and.w	r1, r1, #3
 802569e:	f003 0303 	and.w	r3, r3, #3
 80256a2:	e7d7      	b.n	8025654 <_ZN8touchgfx6Canvas6renderEh+0x98>
 80256a4:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 80256a8:	2202      	movs	r2, #2
 80256aa:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 80256ae:	2900      	cmp	r1, #0
 80256b0:	fb91 f2f2 	sdiv	r2, r1, r2
 80256b4:	f001 0101 	and.w	r1, r1, #1
 80256b8:	fb08 2303 	mla	r3, r8, r3, r2
 80256bc:	bfb8      	it	lt
 80256be:	4249      	neglt	r1, r1
 80256c0:	441f      	add	r7, r3
 80256c2:	e7c9      	b.n	8025658 <_ZN8touchgfx6Canvas6renderEh+0x9c>
 80256c4:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 80256c8:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 80256cc:	fb08 f303 	mul.w	r3, r8, r3
 80256d0:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80256d4:	441f      	add	r7, r3
 80256d6:	2100      	movs	r1, #0
 80256d8:	e7bf      	b.n	802565a <_ZN8touchgfx6Canvas6renderEh+0x9e>
 80256da:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 80256de:	2103      	movs	r1, #3
 80256e0:	fb08 f203 	mul.w	r2, r8, r3
 80256e4:	8b23      	ldrh	r3, [r4, #24]
 80256e6:	fb13 2301 	smlabb	r3, r3, r1, r2
 80256ea:	e7f3      	b.n	80256d4 <_ZN8touchgfx6Canvas6renderEh+0x118>
 80256ec:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 80256f0:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 80256f4:	fb08 2303 	mla	r3, r8, r3, r2
 80256f8:	e7ec      	b.n	80256d4 <_ZN8touchgfx6Canvas6renderEh+0x118>
 80256fa:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 80256fe:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 8025702:	fb08 f303 	mul.w	r3, r8, r3
 8025706:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802570a:	e7e3      	b.n	80256d4 <_ZN8touchgfx6Canvas6renderEh+0x118>
 802570c:	2701      	movs	r7, #1
 802570e:	e7b5      	b.n	802567c <_ZN8touchgfx6Canvas6renderEh+0xc0>
 8025710:	20027b94 	.word	0x20027b94

08025714 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 8025714:	4b07      	ldr	r3, [pc, #28]	@ (8025734 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 8025716:	b510      	push	{r4, lr}
 8025718:	781b      	ldrb	r3, [r3, #0]
 802571a:	2b01      	cmp	r3, #1
 802571c:	d108      	bne.n	8025730 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 802571e:	6843      	ldr	r3, [r0, #4]
 8025720:	6814      	ldr	r4, [r2, #0]
 8025722:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8025726:	680b      	ldr	r3, [r1, #0]
 8025728:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 802572c:	6013      	str	r3, [r2, #0]
 802572e:	600c      	str	r4, [r1, #0]
 8025730:	bd10      	pop	{r4, pc}
 8025732:	bf00      	nop
 8025734:	20027b8c 	.word	0x20027b8c

08025738 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 8025738:	b513      	push	{r0, r1, r4, lr}
 802573a:	f890 3058 	ldrb.w	r3, [r0, #88]	@ 0x58
 802573e:	4604      	mov	r4, r0
 8025740:	e9cd 2100 	strd	r2, r1, [sp]
 8025744:	b9a3      	cbnz	r3, 8025770 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 8025746:	466a      	mov	r2, sp
 8025748:	a901      	add	r1, sp, #4
 802574a:	4620      	mov	r0, r4
 802574c:	f7ff ffe2 	bl	8025714 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8025750:	68a3      	ldr	r3, [r4, #8]
 8025752:	9901      	ldr	r1, [sp, #4]
 8025754:	9a00      	ldr	r2, [sp, #0]
 8025756:	1ac9      	subs	r1, r1, r3
 8025758:	68e3      	ldr	r3, [r4, #12]
 802575a:	1ad2      	subs	r2, r2, r3
 802575c:	9101      	str	r1, [sp, #4]
 802575e:	2a00      	cmp	r2, #0
 8025760:	9200      	str	r2, [sp, #0]
 8025762:	da0b      	bge.n	802577c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 8025764:	2301      	movs	r3, #1
 8025766:	2900      	cmp	r1, #0
 8025768:	da0e      	bge.n	8025788 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 802576a:	f043 0304 	orr.w	r3, r3, #4
 802576e:	e013      	b.n	8025798 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 8025770:	f7ff ff02 	bl	8025578 <_ZN8touchgfx6Canvas5closeEv>
 8025774:	2800      	cmp	r0, #0
 8025776:	d1e6      	bne.n	8025746 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 8025778:	b002      	add	sp, #8
 802577a:	bd10      	pop	{r4, pc}
 802577c:	6963      	ldr	r3, [r4, #20]
 802577e:	429a      	cmp	r2, r3
 8025780:	bfac      	ite	ge
 8025782:	2302      	movge	r3, #2
 8025784:	2300      	movlt	r3, #0
 8025786:	e7ee      	b.n	8025766 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 8025788:	6920      	ldr	r0, [r4, #16]
 802578a:	4281      	cmp	r1, r0
 802578c:	bfac      	ite	ge
 802578e:	2008      	movge	r0, #8
 8025790:	2000      	movlt	r0, #0
 8025792:	4318      	orrs	r0, r3
 8025794:	b2c3      	uxtb	r3, r0
 8025796:	b158      	cbz	r0, 80257b0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 8025798:	2200      	movs	r2, #0
 802579a:	f884 2058 	strb.w	r2, [r4, #88]	@ 0x58
 802579e:	9901      	ldr	r1, [sp, #4]
 80257a0:	9a00      	ldr	r2, [sp, #0]
 80257a2:	66a1      	str	r1, [r4, #104]	@ 0x68
 80257a4:	66e2      	str	r2, [r4, #108]	@ 0x6c
 80257a6:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
 80257aa:	e9c4 1217 	strd	r1, r2, [r4, #92]	@ 0x5c
 80257ae:	e7e3      	b.n	8025778 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 80257b0:	f884 0065 	strb.w	r0, [r4, #101]	@ 0x65
 80257b4:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	@ 0x24
 80257b8:	4298      	cmp	r0, r3
 80257ba:	d803      	bhi.n	80257c4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 80257bc:	f104 0020 	add.w	r0, r4, #32
 80257c0:	f7ee fdfc 	bl	80143bc <_ZN8touchgfx7Outline6moveToEii>
 80257c4:	2301      	movs	r3, #1
 80257c6:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
 80257ca:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 80257ce:	2300      	movs	r3, #0
 80257d0:	e7e5      	b.n	802579e <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

080257d2 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 80257d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80257d4:	ab02      	add	r3, sp, #8
 80257d6:	4604      	mov	r4, r0
 80257d8:	9101      	str	r1, [sp, #4]
 80257da:	a901      	add	r1, sp, #4
 80257dc:	f843 2d08 	str.w	r2, [r3, #-8]!
 80257e0:	461a      	mov	r2, r3
 80257e2:	f7ff ff97 	bl	8025714 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 80257e6:	68a3      	ldr	r3, [r4, #8]
 80257e8:	9901      	ldr	r1, [sp, #4]
 80257ea:	9a00      	ldr	r2, [sp, #0]
 80257ec:	1ac9      	subs	r1, r1, r3
 80257ee:	68e3      	ldr	r3, [r4, #12]
 80257f0:	1ad2      	subs	r2, r2, r3
 80257f2:	9101      	str	r1, [sp, #4]
 80257f4:	2a00      	cmp	r2, #0
 80257f6:	9200      	str	r2, [sp, #0]
 80257f8:	db1c      	blt.n	8025834 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 80257fa:	6963      	ldr	r3, [r4, #20]
 80257fc:	429a      	cmp	r2, r3
 80257fe:	bfac      	ite	ge
 8025800:	2002      	movge	r0, #2
 8025802:	2000      	movlt	r0, #0
 8025804:	2900      	cmp	r1, #0
 8025806:	db17      	blt.n	8025838 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 8025808:	6923      	ldr	r3, [r4, #16]
 802580a:	4299      	cmp	r1, r3
 802580c:	bfac      	ite	ge
 802580e:	2308      	movge	r3, #8
 8025810:	2300      	movlt	r3, #0
 8025812:	4303      	orrs	r3, r0
 8025814:	f894 0064 	ldrb.w	r0, [r4, #100]	@ 0x64
 8025818:	b2dd      	uxtb	r5, r3
 802581a:	b978      	cbnz	r0, 802583c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 802581c:	f104 0020 	add.w	r0, r4, #32
 8025820:	f7ff fd38 	bl	8025294 <_ZN8touchgfx10Rasterizer6lineToEii>
 8025824:	9b01      	ldr	r3, [sp, #4]
 8025826:	f884 5064 	strb.w	r5, [r4, #100]	@ 0x64
 802582a:	65e3      	str	r3, [r4, #92]	@ 0x5c
 802582c:	9b00      	ldr	r3, [sp, #0]
 802582e:	6623      	str	r3, [r4, #96]	@ 0x60
 8025830:	b002      	add	sp, #8
 8025832:	bd70      	pop	{r4, r5, r6, pc}
 8025834:	2001      	movs	r0, #1
 8025836:	e7e5      	b.n	8025804 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 8025838:	2304      	movs	r3, #4
 802583a:	e7ea      	b.n	8025812 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 802583c:	b113      	cbz	r3, 8025844 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 802583e:	ea10 0305 	ands.w	r3, r0, r5
 8025842:	d11c      	bne.n	802587e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xac>
 8025844:	f894 3058 	ldrb.w	r3, [r4, #88]	@ 0x58
 8025848:	f104 0620 	add.w	r6, r4, #32
 802584c:	e9d4 1217 	ldrd	r1, r2, [r4, #92]	@ 0x5c
 8025850:	b98b      	cbnz	r3, 8025876 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa4>
 8025852:	f884 0065 	strb.w	r0, [r4, #101]	@ 0x65
 8025856:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	@ 0x24
 802585a:	4298      	cmp	r0, r3
 802585c:	d802      	bhi.n	8025864 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 802585e:	4630      	mov	r0, r6
 8025860:	f7ee fdac 	bl	80143bc <_ZN8touchgfx7Outline6moveToEii>
 8025864:	2301      	movs	r3, #1
 8025866:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
 802586a:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 802586e:	4630      	mov	r0, r6
 8025870:	e9dd 2100 	ldrd	r2, r1, [sp]
 8025874:	e7d4      	b.n	8025820 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 8025876:	4630      	mov	r0, r6
 8025878:	f7ff fd0c 	bl	8025294 <_ZN8touchgfx10Rasterizer6lineToEii>
 802587c:	e7f7      	b.n	802586e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9c>
 802587e:	461d      	mov	r5, r3
 8025880:	e7d0      	b.n	8025824 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>
	...

08025884 <_ZN8touchgfx6CanvasD1Ev>:
 8025884:	4b04      	ldr	r3, [pc, #16]	@ (8025898 <_ZN8touchgfx6CanvasD1Ev+0x14>)
 8025886:	b510      	push	{r4, lr}
 8025888:	4604      	mov	r4, r0
 802588a:	f840 3b20 	str.w	r3, [r0], #32
 802588e:	f7ee f89d 	bl	80139cc <_ZN8touchgfx7OutlineD1Ev>
 8025892:	4620      	mov	r0, r4
 8025894:	bd10      	pop	{r4, pc}
 8025896:	bf00      	nop
 8025898:	0802b2dc 	.word	0x0802b2dc

0802589c <_ZN8touchgfx6CanvasD0Ev>:
 802589c:	b510      	push	{r4, lr}
 802589e:	4604      	mov	r4, r0
 80258a0:	f7ff fff0 	bl	8025884 <_ZN8touchgfx6CanvasD1Ev>
 80258a4:	2170      	movs	r1, #112	@ 0x70
 80258a6:	4620      	mov	r0, r4
 80258a8:	f000 f8d1 	bl	8025a4e <_ZdlPvj>
 80258ac:	4620      	mov	r0, r4
 80258ae:	bd10      	pop	{r4, pc}

080258b0 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 80258b0:	790b      	ldrb	r3, [r1, #4]
 80258b2:	2b00      	cmp	r3, #0
 80258b4:	bf0c      	ite	eq
 80258b6:	2301      	moveq	r3, #1
 80258b8:	2300      	movne	r3, #0
 80258ba:	b570      	push	{r4, r5, r6, lr}
 80258bc:	4604      	mov	r4, r0
 80258be:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 80258c2:	460e      	mov	r6, r1
 80258c4:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 80258c8:	d109      	bne.n	80258de <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 80258ca:	b14d      	cbz	r5, 80258e0 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 80258cc:	7933      	ldrb	r3, [r6, #4]
 80258ce:	2b01      	cmp	r3, #1
 80258d0:	d10c      	bne.n	80258ec <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 80258d2:	6823      	ldr	r3, [r4, #0]
 80258d4:	4620      	mov	r0, r4
 80258d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80258d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80258dc:	4718      	bx	r3
 80258de:	b12d      	cbz	r5, 80258ec <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 80258e0:	6823      	ldr	r3, [r4, #0]
 80258e2:	4620      	mov	r0, r4
 80258e4:	695b      	ldr	r3, [r3, #20]
 80258e6:	4798      	blx	r3
 80258e8:	2d00      	cmp	r5, #0
 80258ea:	d1ef      	bne.n	80258cc <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 80258ec:	bd70      	pop	{r4, r5, r6, pc}

080258ee <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 80258ee:	b570      	push	{r4, r5, r6, lr}
 80258f0:	880b      	ldrh	r3, [r1, #0]
 80258f2:	4605      	mov	r5, r0
 80258f4:	4604      	mov	r4, r0
 80258f6:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 80258f8:	8813      	ldrh	r3, [r2, #0]
 80258fa:	f825 3f30 	strh.w	r3, [r5, #48]!
 80258fe:	4628      	mov	r0, r5
 8025900:	f7f3 fed6 	bl	80196b0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8025904:	4606      	mov	r6, r0
 8025906:	4628      	mov	r0, r5
 8025908:	f7f3 ff06 	bl	8019718 <_ZNK8touchgfx6Bitmap9getHeightEv>
 802590c:	6823      	ldr	r3, [r4, #0]
 802590e:	4605      	mov	r5, r0
 8025910:	4631      	mov	r1, r6
 8025912:	4620      	mov	r0, r4
 8025914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8025916:	4798      	blx	r3
 8025918:	6823      	ldr	r3, [r4, #0]
 802591a:	4629      	mov	r1, r5
 802591c:	4620      	mov	r0, r4
 802591e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8025920:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8025924:	4718      	bx	r3

08025926 <_ZNK8touchgfx6Button12getSolidRectEv>:
 8025926:	b510      	push	{r4, lr}
 8025928:	f891 3032 	ldrb.w	r3, [r1, #50]	@ 0x32
 802592c:	4604      	mov	r4, r0
 802592e:	2bff      	cmp	r3, #255	@ 0xff
 8025930:	d006      	beq.n	8025940 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 8025932:	2300      	movs	r3, #0
 8025934:	8003      	strh	r3, [r0, #0]
 8025936:	8043      	strh	r3, [r0, #2]
 8025938:	8083      	strh	r3, [r0, #4]
 802593a:	80c3      	strh	r3, [r0, #6]
 802593c:	4620      	mov	r0, r4
 802593e:	bd10      	pop	{r4, pc}
 8025940:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 8025944:	b11b      	cbz	r3, 802594e <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 8025946:	3130      	adds	r1, #48	@ 0x30
 8025948:	f7f3 ff1a 	bl	8019780 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 802594c:	e7f6      	b.n	802593c <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 802594e:	312e      	adds	r1, #46	@ 0x2e
 8025950:	e7fa      	b.n	8025948 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

08025954 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 8025954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025958:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 802595c:	b08a      	sub	sp, #40	@ 0x28
 802595e:	4604      	mov	r4, r0
 8025960:	4688      	mov	r8, r1
 8025962:	2b00      	cmp	r3, #0
 8025964:	d066      	beq.n	8025a34 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 8025966:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8025968:	a805      	add	r0, sp, #20
 802596a:	f8ad 3014 	strh.w	r3, [sp, #20]
 802596e:	f7f3 fe9f 	bl	80196b0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8025972:	4607      	mov	r7, r0
 8025974:	a805      	add	r0, sp, #20
 8025976:	f7f3 fecf 	bl	8019718 <_ZNK8touchgfx6Bitmap9getHeightEv>
 802597a:	f9b8 6000 	ldrsh.w	r6, [r8]
 802597e:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 8025982:	2300      	movs	r3, #0
 8025984:	4432      	add	r2, r6
 8025986:	9306      	str	r3, [sp, #24]
 8025988:	b292      	uxth	r2, r2
 802598a:	fa0f fc82 	sxth.w	ip, r2
 802598e:	459c      	cmp	ip, r3
 8025990:	dd52      	ble.n	8025a38 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8025992:	42b7      	cmp	r7, r6
 8025994:	dd50      	ble.n	8025a38 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8025996:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 802599a:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 802599e:	442b      	add	r3, r5
 80259a0:	b29b      	uxth	r3, r3
 80259a2:	b219      	sxth	r1, r3
 80259a4:	2900      	cmp	r1, #0
 80259a6:	dd47      	ble.n	8025a38 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 80259a8:	42a8      	cmp	r0, r5
 80259aa:	dd45      	ble.n	8025a38 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 80259ac:	4567      	cmp	r7, ip
 80259ae:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 80259b2:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80259b6:	bfb8      	it	lt
 80259b8:	b2ba      	uxthlt	r2, r7
 80259ba:	4288      	cmp	r0, r1
 80259bc:	f8ad 6018 	strh.w	r6, [sp, #24]
 80259c0:	bfb8      	it	lt
 80259c2:	b283      	uxthlt	r3, r0
 80259c4:	1b92      	subs	r2, r2, r6
 80259c6:	f8ad 501a 	strh.w	r5, [sp, #26]
 80259ca:	1b5b      	subs	r3, r3, r5
 80259cc:	f8ad 201c 	strh.w	r2, [sp, #28]
 80259d0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80259d4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80259d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80259dc:	429a      	cmp	r2, r3
 80259de:	d026      	beq.n	8025a2e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 80259e0:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80259e4:	2b00      	cmp	r3, #0
 80259e6:	dd22      	ble.n	8025a2e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 80259e8:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80259ec:	2b00      	cmp	r3, #0
 80259ee:	dd1e      	ble.n	8025a2e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 80259f0:	2300      	movs	r3, #0
 80259f2:	a908      	add	r1, sp, #32
 80259f4:	4620      	mov	r0, r4
 80259f6:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80259fa:	6823      	ldr	r3, [r4, #0]
 80259fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80259fe:	4798      	blx	r3
 8025a00:	4b0f      	ldr	r3, [pc, #60]	@ (8025a40 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 8025a02:	681b      	ldr	r3, [r3, #0]
 8025a04:	f893 2076 	ldrb.w	r2, [r3, #118]	@ 0x76
 8025a08:	b10a      	cbz	r2, 8025a0e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 8025a0a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8025a0c:	b900      	cbnz	r0, 8025a10 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 8025a0e:	6898      	ldr	r0, [r3, #8]
 8025a10:	2501      	movs	r5, #1
 8025a12:	6801      	ldr	r1, [r0, #0]
 8025a14:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8025a18:	9502      	str	r5, [sp, #8]
 8025a1a:	f894 4032 	ldrb.w	r4, [r4, #50]	@ 0x32
 8025a1e:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8025a22:	9401      	str	r4, [sp, #4]
 8025a24:	ac06      	add	r4, sp, #24
 8025a26:	9400      	str	r4, [sp, #0]
 8025a28:	688c      	ldr	r4, [r1, #8]
 8025a2a:	a905      	add	r1, sp, #20
 8025a2c:	47a0      	blx	r4
 8025a2e:	b00a      	add	sp, #40	@ 0x28
 8025a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025a34:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 8025a36:	e797      	b.n	8025968 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8025a38:	2300      	movs	r3, #0
 8025a3a:	9307      	str	r3, [sp, #28]
 8025a3c:	e7ca      	b.n	80259d4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 8025a3e:	bf00      	nop
 8025a40:	20027b94 	.word	0x20027b94

08025a44 <__aeabi_atexit>:
 8025a44:	460b      	mov	r3, r1
 8025a46:	4601      	mov	r1, r0
 8025a48:	4618      	mov	r0, r3
 8025a4a:	f000 b911 	b.w	8025c70 <__cxa_atexit>

08025a4e <_ZdlPvj>:
 8025a4e:	f000 b812 	b.w	8025a76 <_ZdlPv>

08025a52 <__cxa_guard_acquire>:
 8025a52:	6802      	ldr	r2, [r0, #0]
 8025a54:	07d2      	lsls	r2, r2, #31
 8025a56:	4603      	mov	r3, r0
 8025a58:	d405      	bmi.n	8025a66 <__cxa_guard_acquire+0x14>
 8025a5a:	7842      	ldrb	r2, [r0, #1]
 8025a5c:	b102      	cbz	r2, 8025a60 <__cxa_guard_acquire+0xe>
 8025a5e:	deff      	udf	#255	@ 0xff
 8025a60:	2001      	movs	r0, #1
 8025a62:	7058      	strb	r0, [r3, #1]
 8025a64:	4770      	bx	lr
 8025a66:	2000      	movs	r0, #0
 8025a68:	4770      	bx	lr

08025a6a <__cxa_guard_release>:
 8025a6a:	2301      	movs	r3, #1
 8025a6c:	6003      	str	r3, [r0, #0]
 8025a6e:	4770      	bx	lr

08025a70 <__cxa_pure_virtual>:
 8025a70:	b508      	push	{r3, lr}
 8025a72:	f000 f80f 	bl	8025a94 <_ZSt9terminatev>

08025a76 <_ZdlPv>:
 8025a76:	f000 b845 	b.w	8025b04 <free>

08025a7a <_ZN10__cxxabiv111__terminateEPFvvE>:
 8025a7a:	b508      	push	{r3, lr}
 8025a7c:	4780      	blx	r0
 8025a7e:	f000 f80e 	bl	8025a9e <abort>
	...

08025a84 <_ZSt13get_terminatev>:
 8025a84:	4b02      	ldr	r3, [pc, #8]	@ (8025a90 <_ZSt13get_terminatev+0xc>)
 8025a86:	6818      	ldr	r0, [r3, #0]
 8025a88:	f3bf 8f5b 	dmb	ish
 8025a8c:	4770      	bx	lr
 8025a8e:	bf00      	nop
 8025a90:	200000e4 	.word	0x200000e4

08025a94 <_ZSt9terminatev>:
 8025a94:	b508      	push	{r3, lr}
 8025a96:	f7ff fff5 	bl	8025a84 <_ZSt13get_terminatev>
 8025a9a:	f7ff ffee 	bl	8025a7a <_ZN10__cxxabiv111__terminateEPFvvE>

08025a9e <abort>:
 8025a9e:	b508      	push	{r3, lr}
 8025aa0:	2006      	movs	r0, #6
 8025aa2:	f000 fae1 	bl	8026068 <raise>
 8025aa6:	2001      	movs	r0, #1
 8025aa8:	f7df fbd4 	bl	8005254 <_exit>

08025aac <__assert_func>:
 8025aac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8025aae:	4614      	mov	r4, r2
 8025ab0:	461a      	mov	r2, r3
 8025ab2:	4b09      	ldr	r3, [pc, #36]	@ (8025ad8 <__assert_func+0x2c>)
 8025ab4:	681b      	ldr	r3, [r3, #0]
 8025ab6:	4605      	mov	r5, r0
 8025ab8:	68d8      	ldr	r0, [r3, #12]
 8025aba:	b954      	cbnz	r4, 8025ad2 <__assert_func+0x26>
 8025abc:	4b07      	ldr	r3, [pc, #28]	@ (8025adc <__assert_func+0x30>)
 8025abe:	461c      	mov	r4, r3
 8025ac0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8025ac4:	9100      	str	r1, [sp, #0]
 8025ac6:	462b      	mov	r3, r5
 8025ac8:	4905      	ldr	r1, [pc, #20]	@ (8025ae0 <__assert_func+0x34>)
 8025aca:	f000 f983 	bl	8025dd4 <fiprintf>
 8025ace:	f7ff ffe6 	bl	8025a9e <abort>
 8025ad2:	4b04      	ldr	r3, [pc, #16]	@ (8025ae4 <__assert_func+0x38>)
 8025ad4:	e7f4      	b.n	8025ac0 <__assert_func+0x14>
 8025ad6:	bf00      	nop
 8025ad8:	200000f4 	.word	0x200000f4
 8025adc:	0802b323 	.word	0x0802b323
 8025ae0:	0802b2f5 	.word	0x0802b2f5
 8025ae4:	0802b2e8 	.word	0x0802b2e8

08025ae8 <atexit>:
 8025ae8:	2300      	movs	r3, #0
 8025aea:	4601      	mov	r1, r0
 8025aec:	461a      	mov	r2, r3
 8025aee:	4618      	mov	r0, r3
 8025af0:	f000 bbbe 	b.w	8026270 <__register_exitproc>

08025af4 <malloc>:
 8025af4:	4b02      	ldr	r3, [pc, #8]	@ (8025b00 <malloc+0xc>)
 8025af6:	4601      	mov	r1, r0
 8025af8:	6818      	ldr	r0, [r3, #0]
 8025afa:	f000 b82d 	b.w	8025b58 <_malloc_r>
 8025afe:	bf00      	nop
 8025b00:	200000f4 	.word	0x200000f4

08025b04 <free>:
 8025b04:	4b02      	ldr	r3, [pc, #8]	@ (8025b10 <free+0xc>)
 8025b06:	4601      	mov	r1, r0
 8025b08:	6818      	ldr	r0, [r3, #0]
 8025b0a:	f000 bc0d 	b.w	8026328 <_free_r>
 8025b0e:	bf00      	nop
 8025b10:	200000f4 	.word	0x200000f4

08025b14 <sbrk_aligned>:
 8025b14:	b570      	push	{r4, r5, r6, lr}
 8025b16:	4e0f      	ldr	r6, [pc, #60]	@ (8025b54 <sbrk_aligned+0x40>)
 8025b18:	460c      	mov	r4, r1
 8025b1a:	6831      	ldr	r1, [r6, #0]
 8025b1c:	4605      	mov	r5, r0
 8025b1e:	b911      	cbnz	r1, 8025b26 <sbrk_aligned+0x12>
 8025b20:	f000 fb48 	bl	80261b4 <_sbrk_r>
 8025b24:	6030      	str	r0, [r6, #0]
 8025b26:	4621      	mov	r1, r4
 8025b28:	4628      	mov	r0, r5
 8025b2a:	f000 fb43 	bl	80261b4 <_sbrk_r>
 8025b2e:	1c43      	adds	r3, r0, #1
 8025b30:	d103      	bne.n	8025b3a <sbrk_aligned+0x26>
 8025b32:	f04f 34ff 	mov.w	r4, #4294967295
 8025b36:	4620      	mov	r0, r4
 8025b38:	bd70      	pop	{r4, r5, r6, pc}
 8025b3a:	1cc4      	adds	r4, r0, #3
 8025b3c:	f024 0403 	bic.w	r4, r4, #3
 8025b40:	42a0      	cmp	r0, r4
 8025b42:	d0f8      	beq.n	8025b36 <sbrk_aligned+0x22>
 8025b44:	1a21      	subs	r1, r4, r0
 8025b46:	4628      	mov	r0, r5
 8025b48:	f000 fb34 	bl	80261b4 <_sbrk_r>
 8025b4c:	3001      	adds	r0, #1
 8025b4e:	d1f2      	bne.n	8025b36 <sbrk_aligned+0x22>
 8025b50:	e7ef      	b.n	8025b32 <sbrk_aligned+0x1e>
 8025b52:	bf00      	nop
 8025b54:	20027c98 	.word	0x20027c98

08025b58 <_malloc_r>:
 8025b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025b5c:	1ccd      	adds	r5, r1, #3
 8025b5e:	f025 0503 	bic.w	r5, r5, #3
 8025b62:	3508      	adds	r5, #8
 8025b64:	2d0c      	cmp	r5, #12
 8025b66:	bf38      	it	cc
 8025b68:	250c      	movcc	r5, #12
 8025b6a:	2d00      	cmp	r5, #0
 8025b6c:	4606      	mov	r6, r0
 8025b6e:	db01      	blt.n	8025b74 <_malloc_r+0x1c>
 8025b70:	42a9      	cmp	r1, r5
 8025b72:	d904      	bls.n	8025b7e <_malloc_r+0x26>
 8025b74:	230c      	movs	r3, #12
 8025b76:	6033      	str	r3, [r6, #0]
 8025b78:	2000      	movs	r0, #0
 8025b7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025b7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8025c54 <_malloc_r+0xfc>
 8025b82:	f000 f869 	bl	8025c58 <__malloc_lock>
 8025b86:	f8d8 3000 	ldr.w	r3, [r8]
 8025b8a:	461c      	mov	r4, r3
 8025b8c:	bb44      	cbnz	r4, 8025be0 <_malloc_r+0x88>
 8025b8e:	4629      	mov	r1, r5
 8025b90:	4630      	mov	r0, r6
 8025b92:	f7ff ffbf 	bl	8025b14 <sbrk_aligned>
 8025b96:	1c43      	adds	r3, r0, #1
 8025b98:	4604      	mov	r4, r0
 8025b9a:	d158      	bne.n	8025c4e <_malloc_r+0xf6>
 8025b9c:	f8d8 4000 	ldr.w	r4, [r8]
 8025ba0:	4627      	mov	r7, r4
 8025ba2:	2f00      	cmp	r7, #0
 8025ba4:	d143      	bne.n	8025c2e <_malloc_r+0xd6>
 8025ba6:	2c00      	cmp	r4, #0
 8025ba8:	d04b      	beq.n	8025c42 <_malloc_r+0xea>
 8025baa:	6823      	ldr	r3, [r4, #0]
 8025bac:	4639      	mov	r1, r7
 8025bae:	4630      	mov	r0, r6
 8025bb0:	eb04 0903 	add.w	r9, r4, r3
 8025bb4:	f000 fafe 	bl	80261b4 <_sbrk_r>
 8025bb8:	4581      	cmp	r9, r0
 8025bba:	d142      	bne.n	8025c42 <_malloc_r+0xea>
 8025bbc:	6821      	ldr	r1, [r4, #0]
 8025bbe:	1a6d      	subs	r5, r5, r1
 8025bc0:	4629      	mov	r1, r5
 8025bc2:	4630      	mov	r0, r6
 8025bc4:	f7ff ffa6 	bl	8025b14 <sbrk_aligned>
 8025bc8:	3001      	adds	r0, #1
 8025bca:	d03a      	beq.n	8025c42 <_malloc_r+0xea>
 8025bcc:	6823      	ldr	r3, [r4, #0]
 8025bce:	442b      	add	r3, r5
 8025bd0:	6023      	str	r3, [r4, #0]
 8025bd2:	f8d8 3000 	ldr.w	r3, [r8]
 8025bd6:	685a      	ldr	r2, [r3, #4]
 8025bd8:	bb62      	cbnz	r2, 8025c34 <_malloc_r+0xdc>
 8025bda:	f8c8 7000 	str.w	r7, [r8]
 8025bde:	e00f      	b.n	8025c00 <_malloc_r+0xa8>
 8025be0:	6822      	ldr	r2, [r4, #0]
 8025be2:	1b52      	subs	r2, r2, r5
 8025be4:	d420      	bmi.n	8025c28 <_malloc_r+0xd0>
 8025be6:	2a0b      	cmp	r2, #11
 8025be8:	d917      	bls.n	8025c1a <_malloc_r+0xc2>
 8025bea:	1961      	adds	r1, r4, r5
 8025bec:	42a3      	cmp	r3, r4
 8025bee:	6025      	str	r5, [r4, #0]
 8025bf0:	bf18      	it	ne
 8025bf2:	6059      	strne	r1, [r3, #4]
 8025bf4:	6863      	ldr	r3, [r4, #4]
 8025bf6:	bf08      	it	eq
 8025bf8:	f8c8 1000 	streq.w	r1, [r8]
 8025bfc:	5162      	str	r2, [r4, r5]
 8025bfe:	604b      	str	r3, [r1, #4]
 8025c00:	4630      	mov	r0, r6
 8025c02:	f000 f82f 	bl	8025c64 <__malloc_unlock>
 8025c06:	f104 000b 	add.w	r0, r4, #11
 8025c0a:	1d23      	adds	r3, r4, #4
 8025c0c:	f020 0007 	bic.w	r0, r0, #7
 8025c10:	1ac2      	subs	r2, r0, r3
 8025c12:	bf1c      	itt	ne
 8025c14:	1a1b      	subne	r3, r3, r0
 8025c16:	50a3      	strne	r3, [r4, r2]
 8025c18:	e7af      	b.n	8025b7a <_malloc_r+0x22>
 8025c1a:	6862      	ldr	r2, [r4, #4]
 8025c1c:	42a3      	cmp	r3, r4
 8025c1e:	bf0c      	ite	eq
 8025c20:	f8c8 2000 	streq.w	r2, [r8]
 8025c24:	605a      	strne	r2, [r3, #4]
 8025c26:	e7eb      	b.n	8025c00 <_malloc_r+0xa8>
 8025c28:	4623      	mov	r3, r4
 8025c2a:	6864      	ldr	r4, [r4, #4]
 8025c2c:	e7ae      	b.n	8025b8c <_malloc_r+0x34>
 8025c2e:	463c      	mov	r4, r7
 8025c30:	687f      	ldr	r7, [r7, #4]
 8025c32:	e7b6      	b.n	8025ba2 <_malloc_r+0x4a>
 8025c34:	461a      	mov	r2, r3
 8025c36:	685b      	ldr	r3, [r3, #4]
 8025c38:	42a3      	cmp	r3, r4
 8025c3a:	d1fb      	bne.n	8025c34 <_malloc_r+0xdc>
 8025c3c:	2300      	movs	r3, #0
 8025c3e:	6053      	str	r3, [r2, #4]
 8025c40:	e7de      	b.n	8025c00 <_malloc_r+0xa8>
 8025c42:	230c      	movs	r3, #12
 8025c44:	6033      	str	r3, [r6, #0]
 8025c46:	4630      	mov	r0, r6
 8025c48:	f000 f80c 	bl	8025c64 <__malloc_unlock>
 8025c4c:	e794      	b.n	8025b78 <_malloc_r+0x20>
 8025c4e:	6005      	str	r5, [r0, #0]
 8025c50:	e7d6      	b.n	8025c00 <_malloc_r+0xa8>
 8025c52:	bf00      	nop
 8025c54:	20027c9c 	.word	0x20027c9c

08025c58 <__malloc_lock>:
 8025c58:	4801      	ldr	r0, [pc, #4]	@ (8025c60 <__malloc_lock+0x8>)
 8025c5a:	f000 baf8 	b.w	802624e <__retarget_lock_acquire_recursive>
 8025c5e:	bf00      	nop
 8025c60:	20027de0 	.word	0x20027de0

08025c64 <__malloc_unlock>:
 8025c64:	4801      	ldr	r0, [pc, #4]	@ (8025c6c <__malloc_unlock+0x8>)
 8025c66:	f000 baf3 	b.w	8026250 <__retarget_lock_release_recursive>
 8025c6a:	bf00      	nop
 8025c6c:	20027de0 	.word	0x20027de0

08025c70 <__cxa_atexit>:
 8025c70:	b510      	push	{r4, lr}
 8025c72:	4604      	mov	r4, r0
 8025c74:	4804      	ldr	r0, [pc, #16]	@ (8025c88 <__cxa_atexit+0x18>)
 8025c76:	4613      	mov	r3, r2
 8025c78:	b120      	cbz	r0, 8025c84 <__cxa_atexit+0x14>
 8025c7a:	460a      	mov	r2, r1
 8025c7c:	2002      	movs	r0, #2
 8025c7e:	4621      	mov	r1, r4
 8025c80:	f000 faf6 	bl	8026270 <__register_exitproc>
 8025c84:	bd10      	pop	{r4, pc}
 8025c86:	bf00      	nop
 8025c88:	08026271 	.word	0x08026271

08025c8c <std>:
 8025c8c:	2300      	movs	r3, #0
 8025c8e:	b510      	push	{r4, lr}
 8025c90:	4604      	mov	r4, r0
 8025c92:	e9c0 3300 	strd	r3, r3, [r0]
 8025c96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8025c9a:	6083      	str	r3, [r0, #8]
 8025c9c:	8181      	strh	r1, [r0, #12]
 8025c9e:	6643      	str	r3, [r0, #100]	@ 0x64
 8025ca0:	81c2      	strh	r2, [r0, #14]
 8025ca2:	6183      	str	r3, [r0, #24]
 8025ca4:	4619      	mov	r1, r3
 8025ca6:	2208      	movs	r2, #8
 8025ca8:	305c      	adds	r0, #92	@ 0x5c
 8025caa:	f000 f99b 	bl	8025fe4 <memset>
 8025cae:	4b0d      	ldr	r3, [pc, #52]	@ (8025ce4 <std+0x58>)
 8025cb0:	6263      	str	r3, [r4, #36]	@ 0x24
 8025cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8025ce8 <std+0x5c>)
 8025cb4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8025cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8025cec <std+0x60>)
 8025cb8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8025cba:	4b0d      	ldr	r3, [pc, #52]	@ (8025cf0 <std+0x64>)
 8025cbc:	6323      	str	r3, [r4, #48]	@ 0x30
 8025cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8025cf4 <std+0x68>)
 8025cc0:	6224      	str	r4, [r4, #32]
 8025cc2:	429c      	cmp	r4, r3
 8025cc4:	d006      	beq.n	8025cd4 <std+0x48>
 8025cc6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8025cca:	4294      	cmp	r4, r2
 8025ccc:	d002      	beq.n	8025cd4 <std+0x48>
 8025cce:	33d0      	adds	r3, #208	@ 0xd0
 8025cd0:	429c      	cmp	r4, r3
 8025cd2:	d105      	bne.n	8025ce0 <std+0x54>
 8025cd4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8025cd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025cdc:	f000 bab6 	b.w	802624c <__retarget_lock_init_recursive>
 8025ce0:	bd10      	pop	{r4, pc}
 8025ce2:	bf00      	nop
 8025ce4:	08025e35 	.word	0x08025e35
 8025ce8:	08025e57 	.word	0x08025e57
 8025cec:	08025e8f 	.word	0x08025e8f
 8025cf0:	08025eb3 	.word	0x08025eb3
 8025cf4:	20027ca0 	.word	0x20027ca0

08025cf8 <stdio_exit_handler>:
 8025cf8:	4a02      	ldr	r2, [pc, #8]	@ (8025d04 <stdio_exit_handler+0xc>)
 8025cfa:	4903      	ldr	r1, [pc, #12]	@ (8025d08 <stdio_exit_handler+0x10>)
 8025cfc:	4803      	ldr	r0, [pc, #12]	@ (8025d0c <stdio_exit_handler+0x14>)
 8025cfe:	f000 b87b 	b.w	8025df8 <_fwalk_sglue>
 8025d02:	bf00      	nop
 8025d04:	200000e8 	.word	0x200000e8
 8025d08:	08026a65 	.word	0x08026a65
 8025d0c:	200000f8 	.word	0x200000f8

08025d10 <cleanup_stdio>:
 8025d10:	6841      	ldr	r1, [r0, #4]
 8025d12:	4b0c      	ldr	r3, [pc, #48]	@ (8025d44 <cleanup_stdio+0x34>)
 8025d14:	4299      	cmp	r1, r3
 8025d16:	b510      	push	{r4, lr}
 8025d18:	4604      	mov	r4, r0
 8025d1a:	d001      	beq.n	8025d20 <cleanup_stdio+0x10>
 8025d1c:	f000 fea2 	bl	8026a64 <_fflush_r>
 8025d20:	68a1      	ldr	r1, [r4, #8]
 8025d22:	4b09      	ldr	r3, [pc, #36]	@ (8025d48 <cleanup_stdio+0x38>)
 8025d24:	4299      	cmp	r1, r3
 8025d26:	d002      	beq.n	8025d2e <cleanup_stdio+0x1e>
 8025d28:	4620      	mov	r0, r4
 8025d2a:	f000 fe9b 	bl	8026a64 <_fflush_r>
 8025d2e:	68e1      	ldr	r1, [r4, #12]
 8025d30:	4b06      	ldr	r3, [pc, #24]	@ (8025d4c <cleanup_stdio+0x3c>)
 8025d32:	4299      	cmp	r1, r3
 8025d34:	d004      	beq.n	8025d40 <cleanup_stdio+0x30>
 8025d36:	4620      	mov	r0, r4
 8025d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025d3c:	f000 be92 	b.w	8026a64 <_fflush_r>
 8025d40:	bd10      	pop	{r4, pc}
 8025d42:	bf00      	nop
 8025d44:	20027ca0 	.word	0x20027ca0
 8025d48:	20027d08 	.word	0x20027d08
 8025d4c:	20027d70 	.word	0x20027d70

08025d50 <global_stdio_init.part.0>:
 8025d50:	b510      	push	{r4, lr}
 8025d52:	4b0b      	ldr	r3, [pc, #44]	@ (8025d80 <global_stdio_init.part.0+0x30>)
 8025d54:	4c0b      	ldr	r4, [pc, #44]	@ (8025d84 <global_stdio_init.part.0+0x34>)
 8025d56:	4a0c      	ldr	r2, [pc, #48]	@ (8025d88 <global_stdio_init.part.0+0x38>)
 8025d58:	601a      	str	r2, [r3, #0]
 8025d5a:	4620      	mov	r0, r4
 8025d5c:	2200      	movs	r2, #0
 8025d5e:	2104      	movs	r1, #4
 8025d60:	f7ff ff94 	bl	8025c8c <std>
 8025d64:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8025d68:	2201      	movs	r2, #1
 8025d6a:	2109      	movs	r1, #9
 8025d6c:	f7ff ff8e 	bl	8025c8c <std>
 8025d70:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8025d74:	2202      	movs	r2, #2
 8025d76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025d7a:	2112      	movs	r1, #18
 8025d7c:	f7ff bf86 	b.w	8025c8c <std>
 8025d80:	20027dd8 	.word	0x20027dd8
 8025d84:	20027ca0 	.word	0x20027ca0
 8025d88:	08025cf9 	.word	0x08025cf9

08025d8c <__sfp_lock_acquire>:
 8025d8c:	4801      	ldr	r0, [pc, #4]	@ (8025d94 <__sfp_lock_acquire+0x8>)
 8025d8e:	f000 ba5e 	b.w	802624e <__retarget_lock_acquire_recursive>
 8025d92:	bf00      	nop
 8025d94:	20027de2 	.word	0x20027de2

08025d98 <__sfp_lock_release>:
 8025d98:	4801      	ldr	r0, [pc, #4]	@ (8025da0 <__sfp_lock_release+0x8>)
 8025d9a:	f000 ba59 	b.w	8026250 <__retarget_lock_release_recursive>
 8025d9e:	bf00      	nop
 8025da0:	20027de2 	.word	0x20027de2

08025da4 <__sinit>:
 8025da4:	b510      	push	{r4, lr}
 8025da6:	4604      	mov	r4, r0
 8025da8:	f7ff fff0 	bl	8025d8c <__sfp_lock_acquire>
 8025dac:	6a23      	ldr	r3, [r4, #32]
 8025dae:	b11b      	cbz	r3, 8025db8 <__sinit+0x14>
 8025db0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025db4:	f7ff bff0 	b.w	8025d98 <__sfp_lock_release>
 8025db8:	4b04      	ldr	r3, [pc, #16]	@ (8025dcc <__sinit+0x28>)
 8025dba:	6223      	str	r3, [r4, #32]
 8025dbc:	4b04      	ldr	r3, [pc, #16]	@ (8025dd0 <__sinit+0x2c>)
 8025dbe:	681b      	ldr	r3, [r3, #0]
 8025dc0:	2b00      	cmp	r3, #0
 8025dc2:	d1f5      	bne.n	8025db0 <__sinit+0xc>
 8025dc4:	f7ff ffc4 	bl	8025d50 <global_stdio_init.part.0>
 8025dc8:	e7f2      	b.n	8025db0 <__sinit+0xc>
 8025dca:	bf00      	nop
 8025dcc:	08025d11 	.word	0x08025d11
 8025dd0:	20027dd8 	.word	0x20027dd8

08025dd4 <fiprintf>:
 8025dd4:	b40e      	push	{r1, r2, r3}
 8025dd6:	b503      	push	{r0, r1, lr}
 8025dd8:	4601      	mov	r1, r0
 8025dda:	ab03      	add	r3, sp, #12
 8025ddc:	4805      	ldr	r0, [pc, #20]	@ (8025df4 <fiprintf+0x20>)
 8025dde:	f853 2b04 	ldr.w	r2, [r3], #4
 8025de2:	6800      	ldr	r0, [r0, #0]
 8025de4:	9301      	str	r3, [sp, #4]
 8025de6:	f000 fb13 	bl	8026410 <_vfiprintf_r>
 8025dea:	b002      	add	sp, #8
 8025dec:	f85d eb04 	ldr.w	lr, [sp], #4
 8025df0:	b003      	add	sp, #12
 8025df2:	4770      	bx	lr
 8025df4:	200000f4 	.word	0x200000f4

08025df8 <_fwalk_sglue>:
 8025df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025dfc:	4607      	mov	r7, r0
 8025dfe:	4688      	mov	r8, r1
 8025e00:	4614      	mov	r4, r2
 8025e02:	2600      	movs	r6, #0
 8025e04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8025e08:	f1b9 0901 	subs.w	r9, r9, #1
 8025e0c:	d505      	bpl.n	8025e1a <_fwalk_sglue+0x22>
 8025e0e:	6824      	ldr	r4, [r4, #0]
 8025e10:	2c00      	cmp	r4, #0
 8025e12:	d1f7      	bne.n	8025e04 <_fwalk_sglue+0xc>
 8025e14:	4630      	mov	r0, r6
 8025e16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025e1a:	89ab      	ldrh	r3, [r5, #12]
 8025e1c:	2b01      	cmp	r3, #1
 8025e1e:	d907      	bls.n	8025e30 <_fwalk_sglue+0x38>
 8025e20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8025e24:	3301      	adds	r3, #1
 8025e26:	d003      	beq.n	8025e30 <_fwalk_sglue+0x38>
 8025e28:	4629      	mov	r1, r5
 8025e2a:	4638      	mov	r0, r7
 8025e2c:	47c0      	blx	r8
 8025e2e:	4306      	orrs	r6, r0
 8025e30:	3568      	adds	r5, #104	@ 0x68
 8025e32:	e7e9      	b.n	8025e08 <_fwalk_sglue+0x10>

08025e34 <__sread>:
 8025e34:	b510      	push	{r4, lr}
 8025e36:	460c      	mov	r4, r1
 8025e38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025e3c:	f000 f994 	bl	8026168 <_read_r>
 8025e40:	2800      	cmp	r0, #0
 8025e42:	bfab      	itete	ge
 8025e44:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8025e46:	89a3      	ldrhlt	r3, [r4, #12]
 8025e48:	181b      	addge	r3, r3, r0
 8025e4a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8025e4e:	bfac      	ite	ge
 8025e50:	6563      	strge	r3, [r4, #84]	@ 0x54
 8025e52:	81a3      	strhlt	r3, [r4, #12]
 8025e54:	bd10      	pop	{r4, pc}

08025e56 <__swrite>:
 8025e56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025e5a:	461f      	mov	r7, r3
 8025e5c:	898b      	ldrh	r3, [r1, #12]
 8025e5e:	05db      	lsls	r3, r3, #23
 8025e60:	4605      	mov	r5, r0
 8025e62:	460c      	mov	r4, r1
 8025e64:	4616      	mov	r6, r2
 8025e66:	d505      	bpl.n	8025e74 <__swrite+0x1e>
 8025e68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025e6c:	2302      	movs	r3, #2
 8025e6e:	2200      	movs	r2, #0
 8025e70:	f000 f968 	bl	8026144 <_lseek_r>
 8025e74:	89a3      	ldrh	r3, [r4, #12]
 8025e76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8025e7a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8025e7e:	81a3      	strh	r3, [r4, #12]
 8025e80:	4632      	mov	r2, r6
 8025e82:	463b      	mov	r3, r7
 8025e84:	4628      	mov	r0, r5
 8025e86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025e8a:	f000 b9a3 	b.w	80261d4 <_write_r>

08025e8e <__sseek>:
 8025e8e:	b510      	push	{r4, lr}
 8025e90:	460c      	mov	r4, r1
 8025e92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025e96:	f000 f955 	bl	8026144 <_lseek_r>
 8025e9a:	1c43      	adds	r3, r0, #1
 8025e9c:	89a3      	ldrh	r3, [r4, #12]
 8025e9e:	bf15      	itete	ne
 8025ea0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8025ea2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8025ea6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8025eaa:	81a3      	strheq	r3, [r4, #12]
 8025eac:	bf18      	it	ne
 8025eae:	81a3      	strhne	r3, [r4, #12]
 8025eb0:	bd10      	pop	{r4, pc}

08025eb2 <__sclose>:
 8025eb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025eb6:	f000 b8df 	b.w	8026078 <_close_r>

08025eba <__swbuf_r>:
 8025eba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025ebc:	460e      	mov	r6, r1
 8025ebe:	4614      	mov	r4, r2
 8025ec0:	4605      	mov	r5, r0
 8025ec2:	b118      	cbz	r0, 8025ecc <__swbuf_r+0x12>
 8025ec4:	6a03      	ldr	r3, [r0, #32]
 8025ec6:	b90b      	cbnz	r3, 8025ecc <__swbuf_r+0x12>
 8025ec8:	f7ff ff6c 	bl	8025da4 <__sinit>
 8025ecc:	69a3      	ldr	r3, [r4, #24]
 8025ece:	60a3      	str	r3, [r4, #8]
 8025ed0:	89a3      	ldrh	r3, [r4, #12]
 8025ed2:	071a      	lsls	r2, r3, #28
 8025ed4:	d501      	bpl.n	8025eda <__swbuf_r+0x20>
 8025ed6:	6923      	ldr	r3, [r4, #16]
 8025ed8:	b943      	cbnz	r3, 8025eec <__swbuf_r+0x32>
 8025eda:	4621      	mov	r1, r4
 8025edc:	4628      	mov	r0, r5
 8025ede:	f000 f82b 	bl	8025f38 <__swsetup_r>
 8025ee2:	b118      	cbz	r0, 8025eec <__swbuf_r+0x32>
 8025ee4:	f04f 37ff 	mov.w	r7, #4294967295
 8025ee8:	4638      	mov	r0, r7
 8025eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025eec:	6823      	ldr	r3, [r4, #0]
 8025eee:	6922      	ldr	r2, [r4, #16]
 8025ef0:	1a98      	subs	r0, r3, r2
 8025ef2:	6963      	ldr	r3, [r4, #20]
 8025ef4:	b2f6      	uxtb	r6, r6
 8025ef6:	4283      	cmp	r3, r0
 8025ef8:	4637      	mov	r7, r6
 8025efa:	dc05      	bgt.n	8025f08 <__swbuf_r+0x4e>
 8025efc:	4621      	mov	r1, r4
 8025efe:	4628      	mov	r0, r5
 8025f00:	f000 fdb0 	bl	8026a64 <_fflush_r>
 8025f04:	2800      	cmp	r0, #0
 8025f06:	d1ed      	bne.n	8025ee4 <__swbuf_r+0x2a>
 8025f08:	68a3      	ldr	r3, [r4, #8]
 8025f0a:	3b01      	subs	r3, #1
 8025f0c:	60a3      	str	r3, [r4, #8]
 8025f0e:	6823      	ldr	r3, [r4, #0]
 8025f10:	1c5a      	adds	r2, r3, #1
 8025f12:	6022      	str	r2, [r4, #0]
 8025f14:	701e      	strb	r6, [r3, #0]
 8025f16:	6962      	ldr	r2, [r4, #20]
 8025f18:	1c43      	adds	r3, r0, #1
 8025f1a:	429a      	cmp	r2, r3
 8025f1c:	d004      	beq.n	8025f28 <__swbuf_r+0x6e>
 8025f1e:	89a3      	ldrh	r3, [r4, #12]
 8025f20:	07db      	lsls	r3, r3, #31
 8025f22:	d5e1      	bpl.n	8025ee8 <__swbuf_r+0x2e>
 8025f24:	2e0a      	cmp	r6, #10
 8025f26:	d1df      	bne.n	8025ee8 <__swbuf_r+0x2e>
 8025f28:	4621      	mov	r1, r4
 8025f2a:	4628      	mov	r0, r5
 8025f2c:	f000 fd9a 	bl	8026a64 <_fflush_r>
 8025f30:	2800      	cmp	r0, #0
 8025f32:	d0d9      	beq.n	8025ee8 <__swbuf_r+0x2e>
 8025f34:	e7d6      	b.n	8025ee4 <__swbuf_r+0x2a>
	...

08025f38 <__swsetup_r>:
 8025f38:	b538      	push	{r3, r4, r5, lr}
 8025f3a:	4b29      	ldr	r3, [pc, #164]	@ (8025fe0 <__swsetup_r+0xa8>)
 8025f3c:	4605      	mov	r5, r0
 8025f3e:	6818      	ldr	r0, [r3, #0]
 8025f40:	460c      	mov	r4, r1
 8025f42:	b118      	cbz	r0, 8025f4c <__swsetup_r+0x14>
 8025f44:	6a03      	ldr	r3, [r0, #32]
 8025f46:	b90b      	cbnz	r3, 8025f4c <__swsetup_r+0x14>
 8025f48:	f7ff ff2c 	bl	8025da4 <__sinit>
 8025f4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025f50:	0719      	lsls	r1, r3, #28
 8025f52:	d422      	bmi.n	8025f9a <__swsetup_r+0x62>
 8025f54:	06da      	lsls	r2, r3, #27
 8025f56:	d407      	bmi.n	8025f68 <__swsetup_r+0x30>
 8025f58:	2209      	movs	r2, #9
 8025f5a:	602a      	str	r2, [r5, #0]
 8025f5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8025f60:	81a3      	strh	r3, [r4, #12]
 8025f62:	f04f 30ff 	mov.w	r0, #4294967295
 8025f66:	e033      	b.n	8025fd0 <__swsetup_r+0x98>
 8025f68:	0758      	lsls	r0, r3, #29
 8025f6a:	d512      	bpl.n	8025f92 <__swsetup_r+0x5a>
 8025f6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8025f6e:	b141      	cbz	r1, 8025f82 <__swsetup_r+0x4a>
 8025f70:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8025f74:	4299      	cmp	r1, r3
 8025f76:	d002      	beq.n	8025f7e <__swsetup_r+0x46>
 8025f78:	4628      	mov	r0, r5
 8025f7a:	f000 f9d5 	bl	8026328 <_free_r>
 8025f7e:	2300      	movs	r3, #0
 8025f80:	6363      	str	r3, [r4, #52]	@ 0x34
 8025f82:	89a3      	ldrh	r3, [r4, #12]
 8025f84:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8025f88:	81a3      	strh	r3, [r4, #12]
 8025f8a:	2300      	movs	r3, #0
 8025f8c:	6063      	str	r3, [r4, #4]
 8025f8e:	6923      	ldr	r3, [r4, #16]
 8025f90:	6023      	str	r3, [r4, #0]
 8025f92:	89a3      	ldrh	r3, [r4, #12]
 8025f94:	f043 0308 	orr.w	r3, r3, #8
 8025f98:	81a3      	strh	r3, [r4, #12]
 8025f9a:	6923      	ldr	r3, [r4, #16]
 8025f9c:	b94b      	cbnz	r3, 8025fb2 <__swsetup_r+0x7a>
 8025f9e:	89a3      	ldrh	r3, [r4, #12]
 8025fa0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8025fa4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8025fa8:	d003      	beq.n	8025fb2 <__swsetup_r+0x7a>
 8025faa:	4621      	mov	r1, r4
 8025fac:	4628      	mov	r0, r5
 8025fae:	f000 fda7 	bl	8026b00 <__smakebuf_r>
 8025fb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025fb6:	f013 0201 	ands.w	r2, r3, #1
 8025fba:	d00a      	beq.n	8025fd2 <__swsetup_r+0x9a>
 8025fbc:	2200      	movs	r2, #0
 8025fbe:	60a2      	str	r2, [r4, #8]
 8025fc0:	6962      	ldr	r2, [r4, #20]
 8025fc2:	4252      	negs	r2, r2
 8025fc4:	61a2      	str	r2, [r4, #24]
 8025fc6:	6922      	ldr	r2, [r4, #16]
 8025fc8:	b942      	cbnz	r2, 8025fdc <__swsetup_r+0xa4>
 8025fca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8025fce:	d1c5      	bne.n	8025f5c <__swsetup_r+0x24>
 8025fd0:	bd38      	pop	{r3, r4, r5, pc}
 8025fd2:	0799      	lsls	r1, r3, #30
 8025fd4:	bf58      	it	pl
 8025fd6:	6962      	ldrpl	r2, [r4, #20]
 8025fd8:	60a2      	str	r2, [r4, #8]
 8025fda:	e7f4      	b.n	8025fc6 <__swsetup_r+0x8e>
 8025fdc:	2000      	movs	r0, #0
 8025fde:	e7f7      	b.n	8025fd0 <__swsetup_r+0x98>
 8025fe0:	200000f4 	.word	0x200000f4

08025fe4 <memset>:
 8025fe4:	4402      	add	r2, r0
 8025fe6:	4603      	mov	r3, r0
 8025fe8:	4293      	cmp	r3, r2
 8025fea:	d100      	bne.n	8025fee <memset+0xa>
 8025fec:	4770      	bx	lr
 8025fee:	f803 1b01 	strb.w	r1, [r3], #1
 8025ff2:	e7f9      	b.n	8025fe8 <memset+0x4>

08025ff4 <strncmp>:
 8025ff4:	b510      	push	{r4, lr}
 8025ff6:	b16a      	cbz	r2, 8026014 <strncmp+0x20>
 8025ff8:	3901      	subs	r1, #1
 8025ffa:	1884      	adds	r4, r0, r2
 8025ffc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8026000:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8026004:	429a      	cmp	r2, r3
 8026006:	d103      	bne.n	8026010 <strncmp+0x1c>
 8026008:	42a0      	cmp	r0, r4
 802600a:	d001      	beq.n	8026010 <strncmp+0x1c>
 802600c:	2a00      	cmp	r2, #0
 802600e:	d1f5      	bne.n	8025ffc <strncmp+0x8>
 8026010:	1ad0      	subs	r0, r2, r3
 8026012:	bd10      	pop	{r4, pc}
 8026014:	4610      	mov	r0, r2
 8026016:	e7fc      	b.n	8026012 <strncmp+0x1e>

08026018 <_raise_r>:
 8026018:	291f      	cmp	r1, #31
 802601a:	b538      	push	{r3, r4, r5, lr}
 802601c:	4605      	mov	r5, r0
 802601e:	460c      	mov	r4, r1
 8026020:	d904      	bls.n	802602c <_raise_r+0x14>
 8026022:	2316      	movs	r3, #22
 8026024:	6003      	str	r3, [r0, #0]
 8026026:	f04f 30ff 	mov.w	r0, #4294967295
 802602a:	bd38      	pop	{r3, r4, r5, pc}
 802602c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802602e:	b112      	cbz	r2, 8026036 <_raise_r+0x1e>
 8026030:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8026034:	b94b      	cbnz	r3, 802604a <_raise_r+0x32>
 8026036:	4628      	mov	r0, r5
 8026038:	f000 f8ba 	bl	80261b0 <_getpid_r>
 802603c:	4622      	mov	r2, r4
 802603e:	4601      	mov	r1, r0
 8026040:	4628      	mov	r0, r5
 8026042:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8026046:	f000 b8a1 	b.w	802618c <_kill_r>
 802604a:	2b01      	cmp	r3, #1
 802604c:	d00a      	beq.n	8026064 <_raise_r+0x4c>
 802604e:	1c59      	adds	r1, r3, #1
 8026050:	d103      	bne.n	802605a <_raise_r+0x42>
 8026052:	2316      	movs	r3, #22
 8026054:	6003      	str	r3, [r0, #0]
 8026056:	2001      	movs	r0, #1
 8026058:	e7e7      	b.n	802602a <_raise_r+0x12>
 802605a:	2100      	movs	r1, #0
 802605c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8026060:	4620      	mov	r0, r4
 8026062:	4798      	blx	r3
 8026064:	2000      	movs	r0, #0
 8026066:	e7e0      	b.n	802602a <_raise_r+0x12>

08026068 <raise>:
 8026068:	4b02      	ldr	r3, [pc, #8]	@ (8026074 <raise+0xc>)
 802606a:	4601      	mov	r1, r0
 802606c:	6818      	ldr	r0, [r3, #0]
 802606e:	f7ff bfd3 	b.w	8026018 <_raise_r>
 8026072:	bf00      	nop
 8026074:	200000f4 	.word	0x200000f4

08026078 <_close_r>:
 8026078:	b538      	push	{r3, r4, r5, lr}
 802607a:	4d06      	ldr	r5, [pc, #24]	@ (8026094 <_close_r+0x1c>)
 802607c:	2300      	movs	r3, #0
 802607e:	4604      	mov	r4, r0
 8026080:	4608      	mov	r0, r1
 8026082:	602b      	str	r3, [r5, #0]
 8026084:	f7df f908 	bl	8005298 <_close>
 8026088:	1c43      	adds	r3, r0, #1
 802608a:	d102      	bne.n	8026092 <_close_r+0x1a>
 802608c:	682b      	ldr	r3, [r5, #0]
 802608e:	b103      	cbz	r3, 8026092 <_close_r+0x1a>
 8026090:	6023      	str	r3, [r4, #0]
 8026092:	bd38      	pop	{r3, r4, r5, pc}
 8026094:	20027ddc 	.word	0x20027ddc

08026098 <_reclaim_reent>:
 8026098:	4b29      	ldr	r3, [pc, #164]	@ (8026140 <_reclaim_reent+0xa8>)
 802609a:	681b      	ldr	r3, [r3, #0]
 802609c:	4283      	cmp	r3, r0
 802609e:	b570      	push	{r4, r5, r6, lr}
 80260a0:	4604      	mov	r4, r0
 80260a2:	d04b      	beq.n	802613c <_reclaim_reent+0xa4>
 80260a4:	69c3      	ldr	r3, [r0, #28]
 80260a6:	b1ab      	cbz	r3, 80260d4 <_reclaim_reent+0x3c>
 80260a8:	68db      	ldr	r3, [r3, #12]
 80260aa:	b16b      	cbz	r3, 80260c8 <_reclaim_reent+0x30>
 80260ac:	2500      	movs	r5, #0
 80260ae:	69e3      	ldr	r3, [r4, #28]
 80260b0:	68db      	ldr	r3, [r3, #12]
 80260b2:	5959      	ldr	r1, [r3, r5]
 80260b4:	2900      	cmp	r1, #0
 80260b6:	d13b      	bne.n	8026130 <_reclaim_reent+0x98>
 80260b8:	3504      	adds	r5, #4
 80260ba:	2d80      	cmp	r5, #128	@ 0x80
 80260bc:	d1f7      	bne.n	80260ae <_reclaim_reent+0x16>
 80260be:	69e3      	ldr	r3, [r4, #28]
 80260c0:	4620      	mov	r0, r4
 80260c2:	68d9      	ldr	r1, [r3, #12]
 80260c4:	f000 f930 	bl	8026328 <_free_r>
 80260c8:	69e3      	ldr	r3, [r4, #28]
 80260ca:	6819      	ldr	r1, [r3, #0]
 80260cc:	b111      	cbz	r1, 80260d4 <_reclaim_reent+0x3c>
 80260ce:	4620      	mov	r0, r4
 80260d0:	f000 f92a 	bl	8026328 <_free_r>
 80260d4:	6961      	ldr	r1, [r4, #20]
 80260d6:	b111      	cbz	r1, 80260de <_reclaim_reent+0x46>
 80260d8:	4620      	mov	r0, r4
 80260da:	f000 f925 	bl	8026328 <_free_r>
 80260de:	69e1      	ldr	r1, [r4, #28]
 80260e0:	b111      	cbz	r1, 80260e8 <_reclaim_reent+0x50>
 80260e2:	4620      	mov	r0, r4
 80260e4:	f000 f920 	bl	8026328 <_free_r>
 80260e8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80260ea:	b111      	cbz	r1, 80260f2 <_reclaim_reent+0x5a>
 80260ec:	4620      	mov	r0, r4
 80260ee:	f000 f91b 	bl	8026328 <_free_r>
 80260f2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80260f4:	b111      	cbz	r1, 80260fc <_reclaim_reent+0x64>
 80260f6:	4620      	mov	r0, r4
 80260f8:	f000 f916 	bl	8026328 <_free_r>
 80260fc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80260fe:	b111      	cbz	r1, 8026106 <_reclaim_reent+0x6e>
 8026100:	4620      	mov	r0, r4
 8026102:	f000 f911 	bl	8026328 <_free_r>
 8026106:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8026108:	b111      	cbz	r1, 8026110 <_reclaim_reent+0x78>
 802610a:	4620      	mov	r0, r4
 802610c:	f000 f90c 	bl	8026328 <_free_r>
 8026110:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8026112:	b111      	cbz	r1, 802611a <_reclaim_reent+0x82>
 8026114:	4620      	mov	r0, r4
 8026116:	f000 f907 	bl	8026328 <_free_r>
 802611a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 802611c:	b111      	cbz	r1, 8026124 <_reclaim_reent+0x8c>
 802611e:	4620      	mov	r0, r4
 8026120:	f000 f902 	bl	8026328 <_free_r>
 8026124:	6a23      	ldr	r3, [r4, #32]
 8026126:	b14b      	cbz	r3, 802613c <_reclaim_reent+0xa4>
 8026128:	4620      	mov	r0, r4
 802612a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802612e:	4718      	bx	r3
 8026130:	680e      	ldr	r6, [r1, #0]
 8026132:	4620      	mov	r0, r4
 8026134:	f000 f8f8 	bl	8026328 <_free_r>
 8026138:	4631      	mov	r1, r6
 802613a:	e7bb      	b.n	80260b4 <_reclaim_reent+0x1c>
 802613c:	bd70      	pop	{r4, r5, r6, pc}
 802613e:	bf00      	nop
 8026140:	200000f4 	.word	0x200000f4

08026144 <_lseek_r>:
 8026144:	b538      	push	{r3, r4, r5, lr}
 8026146:	4d07      	ldr	r5, [pc, #28]	@ (8026164 <_lseek_r+0x20>)
 8026148:	4604      	mov	r4, r0
 802614a:	4608      	mov	r0, r1
 802614c:	4611      	mov	r1, r2
 802614e:	2200      	movs	r2, #0
 8026150:	602a      	str	r2, [r5, #0]
 8026152:	461a      	mov	r2, r3
 8026154:	f7df f8aa 	bl	80052ac <_lseek>
 8026158:	1c43      	adds	r3, r0, #1
 802615a:	d102      	bne.n	8026162 <_lseek_r+0x1e>
 802615c:	682b      	ldr	r3, [r5, #0]
 802615e:	b103      	cbz	r3, 8026162 <_lseek_r+0x1e>
 8026160:	6023      	str	r3, [r4, #0]
 8026162:	bd38      	pop	{r3, r4, r5, pc}
 8026164:	20027ddc 	.word	0x20027ddc

08026168 <_read_r>:
 8026168:	b538      	push	{r3, r4, r5, lr}
 802616a:	4d07      	ldr	r5, [pc, #28]	@ (8026188 <_read_r+0x20>)
 802616c:	4604      	mov	r4, r0
 802616e:	4608      	mov	r0, r1
 8026170:	4611      	mov	r1, r2
 8026172:	2200      	movs	r2, #0
 8026174:	602a      	str	r2, [r5, #0]
 8026176:	461a      	mov	r2, r3
 8026178:	f7df f872 	bl	8005260 <_read>
 802617c:	1c43      	adds	r3, r0, #1
 802617e:	d102      	bne.n	8026186 <_read_r+0x1e>
 8026180:	682b      	ldr	r3, [r5, #0]
 8026182:	b103      	cbz	r3, 8026186 <_read_r+0x1e>
 8026184:	6023      	str	r3, [r4, #0]
 8026186:	bd38      	pop	{r3, r4, r5, pc}
 8026188:	20027ddc 	.word	0x20027ddc

0802618c <_kill_r>:
 802618c:	b538      	push	{r3, r4, r5, lr}
 802618e:	4d07      	ldr	r5, [pc, #28]	@ (80261ac <_kill_r+0x20>)
 8026190:	2300      	movs	r3, #0
 8026192:	4604      	mov	r4, r0
 8026194:	4608      	mov	r0, r1
 8026196:	4611      	mov	r1, r2
 8026198:	602b      	str	r3, [r5, #0]
 802619a:	f7df f853 	bl	8005244 <_kill>
 802619e:	1c43      	adds	r3, r0, #1
 80261a0:	d102      	bne.n	80261a8 <_kill_r+0x1c>
 80261a2:	682b      	ldr	r3, [r5, #0]
 80261a4:	b103      	cbz	r3, 80261a8 <_kill_r+0x1c>
 80261a6:	6023      	str	r3, [r4, #0]
 80261a8:	bd38      	pop	{r3, r4, r5, pc}
 80261aa:	bf00      	nop
 80261ac:	20027ddc 	.word	0x20027ddc

080261b0 <_getpid_r>:
 80261b0:	f7df b846 	b.w	8005240 <_getpid>

080261b4 <_sbrk_r>:
 80261b4:	b538      	push	{r3, r4, r5, lr}
 80261b6:	4d06      	ldr	r5, [pc, #24]	@ (80261d0 <_sbrk_r+0x1c>)
 80261b8:	2300      	movs	r3, #0
 80261ba:	4604      	mov	r4, r0
 80261bc:	4608      	mov	r0, r1
 80261be:	602b      	str	r3, [r5, #0]
 80261c0:	f000 fcfc 	bl	8026bbc <_sbrk>
 80261c4:	1c43      	adds	r3, r0, #1
 80261c6:	d102      	bne.n	80261ce <_sbrk_r+0x1a>
 80261c8:	682b      	ldr	r3, [r5, #0]
 80261ca:	b103      	cbz	r3, 80261ce <_sbrk_r+0x1a>
 80261cc:	6023      	str	r3, [r4, #0]
 80261ce:	bd38      	pop	{r3, r4, r5, pc}
 80261d0:	20027ddc 	.word	0x20027ddc

080261d4 <_write_r>:
 80261d4:	b538      	push	{r3, r4, r5, lr}
 80261d6:	4d07      	ldr	r5, [pc, #28]	@ (80261f4 <_write_r+0x20>)
 80261d8:	4604      	mov	r4, r0
 80261da:	4608      	mov	r0, r1
 80261dc:	4611      	mov	r1, r2
 80261de:	2200      	movs	r2, #0
 80261e0:	602a      	str	r2, [r5, #0]
 80261e2:	461a      	mov	r2, r3
 80261e4:	f7df f84a 	bl	800527c <_write>
 80261e8:	1c43      	adds	r3, r0, #1
 80261ea:	d102      	bne.n	80261f2 <_write_r+0x1e>
 80261ec:	682b      	ldr	r3, [r5, #0]
 80261ee:	b103      	cbz	r3, 80261f2 <_write_r+0x1e>
 80261f0:	6023      	str	r3, [r4, #0]
 80261f2:	bd38      	pop	{r3, r4, r5, pc}
 80261f4:	20027ddc 	.word	0x20027ddc

080261f8 <__errno>:
 80261f8:	4b01      	ldr	r3, [pc, #4]	@ (8026200 <__errno+0x8>)
 80261fa:	6818      	ldr	r0, [r3, #0]
 80261fc:	4770      	bx	lr
 80261fe:	bf00      	nop
 8026200:	200000f4 	.word	0x200000f4

08026204 <__libc_init_array>:
 8026204:	b570      	push	{r4, r5, r6, lr}
 8026206:	4d0d      	ldr	r5, [pc, #52]	@ (802623c <__libc_init_array+0x38>)
 8026208:	4c0d      	ldr	r4, [pc, #52]	@ (8026240 <__libc_init_array+0x3c>)
 802620a:	1b64      	subs	r4, r4, r5
 802620c:	10a4      	asrs	r4, r4, #2
 802620e:	2600      	movs	r6, #0
 8026210:	42a6      	cmp	r6, r4
 8026212:	d109      	bne.n	8026228 <__libc_init_array+0x24>
 8026214:	4d0b      	ldr	r5, [pc, #44]	@ (8026244 <__libc_init_array+0x40>)
 8026216:	4c0c      	ldr	r4, [pc, #48]	@ (8026248 <__libc_init_array+0x44>)
 8026218:	f000 fcde 	bl	8026bd8 <_init>
 802621c:	1b64      	subs	r4, r4, r5
 802621e:	10a4      	asrs	r4, r4, #2
 8026220:	2600      	movs	r6, #0
 8026222:	42a6      	cmp	r6, r4
 8026224:	d105      	bne.n	8026232 <__libc_init_array+0x2e>
 8026226:	bd70      	pop	{r4, r5, r6, pc}
 8026228:	f855 3b04 	ldr.w	r3, [r5], #4
 802622c:	4798      	blx	r3
 802622e:	3601      	adds	r6, #1
 8026230:	e7ee      	b.n	8026210 <__libc_init_array+0xc>
 8026232:	f855 3b04 	ldr.w	r3, [r5], #4
 8026236:	4798      	blx	r3
 8026238:	3601      	adds	r6, #1
 802623a:	e7f2      	b.n	8026222 <__libc_init_array+0x1e>
 802623c:	0802b454 	.word	0x0802b454
 8026240:	0802b454 	.word	0x0802b454
 8026244:	0802b454 	.word	0x0802b454
 8026248:	0802b470 	.word	0x0802b470

0802624c <__retarget_lock_init_recursive>:
 802624c:	4770      	bx	lr

0802624e <__retarget_lock_acquire_recursive>:
 802624e:	4770      	bx	lr

08026250 <__retarget_lock_release_recursive>:
 8026250:	4770      	bx	lr

08026252 <memcpy>:
 8026252:	440a      	add	r2, r1
 8026254:	4291      	cmp	r1, r2
 8026256:	f100 33ff 	add.w	r3, r0, #4294967295
 802625a:	d100      	bne.n	802625e <memcpy+0xc>
 802625c:	4770      	bx	lr
 802625e:	b510      	push	{r4, lr}
 8026260:	f811 4b01 	ldrb.w	r4, [r1], #1
 8026264:	f803 4f01 	strb.w	r4, [r3, #1]!
 8026268:	4291      	cmp	r1, r2
 802626a:	d1f9      	bne.n	8026260 <memcpy+0xe>
 802626c:	bd10      	pop	{r4, pc}
	...

08026270 <__register_exitproc>:
 8026270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026274:	4d27      	ldr	r5, [pc, #156]	@ (8026314 <__register_exitproc+0xa4>)
 8026276:	4607      	mov	r7, r0
 8026278:	6828      	ldr	r0, [r5, #0]
 802627a:	4691      	mov	r9, r2
 802627c:	460e      	mov	r6, r1
 802627e:	4698      	mov	r8, r3
 8026280:	f7ff ffe5 	bl	802624e <__retarget_lock_acquire_recursive>
 8026284:	4a24      	ldr	r2, [pc, #144]	@ (8026318 <__register_exitproc+0xa8>)
 8026286:	6814      	ldr	r4, [r2, #0]
 8026288:	b93c      	cbnz	r4, 802629a <__register_exitproc+0x2a>
 802628a:	4b24      	ldr	r3, [pc, #144]	@ (802631c <__register_exitproc+0xac>)
 802628c:	6013      	str	r3, [r2, #0]
 802628e:	4a24      	ldr	r2, [pc, #144]	@ (8026320 <__register_exitproc+0xb0>)
 8026290:	b112      	cbz	r2, 8026298 <__register_exitproc+0x28>
 8026292:	6812      	ldr	r2, [r2, #0]
 8026294:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8026298:	4c20      	ldr	r4, [pc, #128]	@ (802631c <__register_exitproc+0xac>)
 802629a:	6863      	ldr	r3, [r4, #4]
 802629c:	2b1f      	cmp	r3, #31
 802629e:	dd06      	ble.n	80262ae <__register_exitproc+0x3e>
 80262a0:	6828      	ldr	r0, [r5, #0]
 80262a2:	f7ff ffd5 	bl	8026250 <__retarget_lock_release_recursive>
 80262a6:	f04f 30ff 	mov.w	r0, #4294967295
 80262aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80262ae:	b32f      	cbz	r7, 80262fc <__register_exitproc+0x8c>
 80262b0:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 80262b4:	b968      	cbnz	r0, 80262d2 <__register_exitproc+0x62>
 80262b6:	4b1b      	ldr	r3, [pc, #108]	@ (8026324 <__register_exitproc+0xb4>)
 80262b8:	2b00      	cmp	r3, #0
 80262ba:	d0f1      	beq.n	80262a0 <__register_exitproc+0x30>
 80262bc:	f44f 7084 	mov.w	r0, #264	@ 0x108
 80262c0:	f7ff fc18 	bl	8025af4 <malloc>
 80262c4:	2800      	cmp	r0, #0
 80262c6:	d0eb      	beq.n	80262a0 <__register_exitproc+0x30>
 80262c8:	2300      	movs	r3, #0
 80262ca:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 80262ce:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 80262d2:	6863      	ldr	r3, [r4, #4]
 80262d4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80262d8:	2201      	movs	r2, #1
 80262da:	409a      	lsls	r2, r3
 80262dc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80262e0:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 80262e4:	4313      	orrs	r3, r2
 80262e6:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 80262ea:	2f02      	cmp	r7, #2
 80262ec:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 80262f0:	bf02      	ittt	eq
 80262f2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 80262f6:	4313      	orreq	r3, r2
 80262f8:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 80262fc:	6863      	ldr	r3, [r4, #4]
 80262fe:	6828      	ldr	r0, [r5, #0]
 8026300:	1c5a      	adds	r2, r3, #1
 8026302:	3302      	adds	r3, #2
 8026304:	6062      	str	r2, [r4, #4]
 8026306:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 802630a:	f7ff ffa1 	bl	8026250 <__retarget_lock_release_recursive>
 802630e:	2000      	movs	r0, #0
 8026310:	e7cb      	b.n	80262aa <__register_exitproc+0x3a>
 8026312:	bf00      	nop
 8026314:	20000144 	.word	0x20000144
 8026318:	20027e70 	.word	0x20027e70
 802631c:	20027de4 	.word	0x20027de4
 8026320:	0802b324 	.word	0x0802b324
 8026324:	08025af5 	.word	0x08025af5

08026328 <_free_r>:
 8026328:	b538      	push	{r3, r4, r5, lr}
 802632a:	4605      	mov	r5, r0
 802632c:	2900      	cmp	r1, #0
 802632e:	d041      	beq.n	80263b4 <_free_r+0x8c>
 8026330:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8026334:	1f0c      	subs	r4, r1, #4
 8026336:	2b00      	cmp	r3, #0
 8026338:	bfb8      	it	lt
 802633a:	18e4      	addlt	r4, r4, r3
 802633c:	f7ff fc8c 	bl	8025c58 <__malloc_lock>
 8026340:	4a1d      	ldr	r2, [pc, #116]	@ (80263b8 <_free_r+0x90>)
 8026342:	6813      	ldr	r3, [r2, #0]
 8026344:	b933      	cbnz	r3, 8026354 <_free_r+0x2c>
 8026346:	6063      	str	r3, [r4, #4]
 8026348:	6014      	str	r4, [r2, #0]
 802634a:	4628      	mov	r0, r5
 802634c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8026350:	f7ff bc88 	b.w	8025c64 <__malloc_unlock>
 8026354:	42a3      	cmp	r3, r4
 8026356:	d908      	bls.n	802636a <_free_r+0x42>
 8026358:	6820      	ldr	r0, [r4, #0]
 802635a:	1821      	adds	r1, r4, r0
 802635c:	428b      	cmp	r3, r1
 802635e:	bf01      	itttt	eq
 8026360:	6819      	ldreq	r1, [r3, #0]
 8026362:	685b      	ldreq	r3, [r3, #4]
 8026364:	1809      	addeq	r1, r1, r0
 8026366:	6021      	streq	r1, [r4, #0]
 8026368:	e7ed      	b.n	8026346 <_free_r+0x1e>
 802636a:	461a      	mov	r2, r3
 802636c:	685b      	ldr	r3, [r3, #4]
 802636e:	b10b      	cbz	r3, 8026374 <_free_r+0x4c>
 8026370:	42a3      	cmp	r3, r4
 8026372:	d9fa      	bls.n	802636a <_free_r+0x42>
 8026374:	6811      	ldr	r1, [r2, #0]
 8026376:	1850      	adds	r0, r2, r1
 8026378:	42a0      	cmp	r0, r4
 802637a:	d10b      	bne.n	8026394 <_free_r+0x6c>
 802637c:	6820      	ldr	r0, [r4, #0]
 802637e:	4401      	add	r1, r0
 8026380:	1850      	adds	r0, r2, r1
 8026382:	4283      	cmp	r3, r0
 8026384:	6011      	str	r1, [r2, #0]
 8026386:	d1e0      	bne.n	802634a <_free_r+0x22>
 8026388:	6818      	ldr	r0, [r3, #0]
 802638a:	685b      	ldr	r3, [r3, #4]
 802638c:	6053      	str	r3, [r2, #4]
 802638e:	4408      	add	r0, r1
 8026390:	6010      	str	r0, [r2, #0]
 8026392:	e7da      	b.n	802634a <_free_r+0x22>
 8026394:	d902      	bls.n	802639c <_free_r+0x74>
 8026396:	230c      	movs	r3, #12
 8026398:	602b      	str	r3, [r5, #0]
 802639a:	e7d6      	b.n	802634a <_free_r+0x22>
 802639c:	6820      	ldr	r0, [r4, #0]
 802639e:	1821      	adds	r1, r4, r0
 80263a0:	428b      	cmp	r3, r1
 80263a2:	bf04      	itt	eq
 80263a4:	6819      	ldreq	r1, [r3, #0]
 80263a6:	685b      	ldreq	r3, [r3, #4]
 80263a8:	6063      	str	r3, [r4, #4]
 80263aa:	bf04      	itt	eq
 80263ac:	1809      	addeq	r1, r1, r0
 80263ae:	6021      	streq	r1, [r4, #0]
 80263b0:	6054      	str	r4, [r2, #4]
 80263b2:	e7ca      	b.n	802634a <_free_r+0x22>
 80263b4:	bd38      	pop	{r3, r4, r5, pc}
 80263b6:	bf00      	nop
 80263b8:	20027c9c 	.word	0x20027c9c

080263bc <__sfputc_r>:
 80263bc:	6893      	ldr	r3, [r2, #8]
 80263be:	3b01      	subs	r3, #1
 80263c0:	2b00      	cmp	r3, #0
 80263c2:	b410      	push	{r4}
 80263c4:	6093      	str	r3, [r2, #8]
 80263c6:	da08      	bge.n	80263da <__sfputc_r+0x1e>
 80263c8:	6994      	ldr	r4, [r2, #24]
 80263ca:	42a3      	cmp	r3, r4
 80263cc:	db01      	blt.n	80263d2 <__sfputc_r+0x16>
 80263ce:	290a      	cmp	r1, #10
 80263d0:	d103      	bne.n	80263da <__sfputc_r+0x1e>
 80263d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80263d6:	f7ff bd70 	b.w	8025eba <__swbuf_r>
 80263da:	6813      	ldr	r3, [r2, #0]
 80263dc:	1c58      	adds	r0, r3, #1
 80263de:	6010      	str	r0, [r2, #0]
 80263e0:	7019      	strb	r1, [r3, #0]
 80263e2:	4608      	mov	r0, r1
 80263e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80263e8:	4770      	bx	lr

080263ea <__sfputs_r>:
 80263ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80263ec:	4606      	mov	r6, r0
 80263ee:	460f      	mov	r7, r1
 80263f0:	4614      	mov	r4, r2
 80263f2:	18d5      	adds	r5, r2, r3
 80263f4:	42ac      	cmp	r4, r5
 80263f6:	d101      	bne.n	80263fc <__sfputs_r+0x12>
 80263f8:	2000      	movs	r0, #0
 80263fa:	e007      	b.n	802640c <__sfputs_r+0x22>
 80263fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026400:	463a      	mov	r2, r7
 8026402:	4630      	mov	r0, r6
 8026404:	f7ff ffda 	bl	80263bc <__sfputc_r>
 8026408:	1c43      	adds	r3, r0, #1
 802640a:	d1f3      	bne.n	80263f4 <__sfputs_r+0xa>
 802640c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08026410 <_vfiprintf_r>:
 8026410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026414:	460d      	mov	r5, r1
 8026416:	b09d      	sub	sp, #116	@ 0x74
 8026418:	4614      	mov	r4, r2
 802641a:	4698      	mov	r8, r3
 802641c:	4606      	mov	r6, r0
 802641e:	b118      	cbz	r0, 8026428 <_vfiprintf_r+0x18>
 8026420:	6a03      	ldr	r3, [r0, #32]
 8026422:	b90b      	cbnz	r3, 8026428 <_vfiprintf_r+0x18>
 8026424:	f7ff fcbe 	bl	8025da4 <__sinit>
 8026428:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802642a:	07d9      	lsls	r1, r3, #31
 802642c:	d405      	bmi.n	802643a <_vfiprintf_r+0x2a>
 802642e:	89ab      	ldrh	r3, [r5, #12]
 8026430:	059a      	lsls	r2, r3, #22
 8026432:	d402      	bmi.n	802643a <_vfiprintf_r+0x2a>
 8026434:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8026436:	f7ff ff0a 	bl	802624e <__retarget_lock_acquire_recursive>
 802643a:	89ab      	ldrh	r3, [r5, #12]
 802643c:	071b      	lsls	r3, r3, #28
 802643e:	d501      	bpl.n	8026444 <_vfiprintf_r+0x34>
 8026440:	692b      	ldr	r3, [r5, #16]
 8026442:	b99b      	cbnz	r3, 802646c <_vfiprintf_r+0x5c>
 8026444:	4629      	mov	r1, r5
 8026446:	4630      	mov	r0, r6
 8026448:	f7ff fd76 	bl	8025f38 <__swsetup_r>
 802644c:	b170      	cbz	r0, 802646c <_vfiprintf_r+0x5c>
 802644e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8026450:	07dc      	lsls	r4, r3, #31
 8026452:	d504      	bpl.n	802645e <_vfiprintf_r+0x4e>
 8026454:	f04f 30ff 	mov.w	r0, #4294967295
 8026458:	b01d      	add	sp, #116	@ 0x74
 802645a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802645e:	89ab      	ldrh	r3, [r5, #12]
 8026460:	0598      	lsls	r0, r3, #22
 8026462:	d4f7      	bmi.n	8026454 <_vfiprintf_r+0x44>
 8026464:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8026466:	f7ff fef3 	bl	8026250 <__retarget_lock_release_recursive>
 802646a:	e7f3      	b.n	8026454 <_vfiprintf_r+0x44>
 802646c:	2300      	movs	r3, #0
 802646e:	9309      	str	r3, [sp, #36]	@ 0x24
 8026470:	2320      	movs	r3, #32
 8026472:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8026476:	f8cd 800c 	str.w	r8, [sp, #12]
 802647a:	2330      	movs	r3, #48	@ 0x30
 802647c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 802662c <_vfiprintf_r+0x21c>
 8026480:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8026484:	f04f 0901 	mov.w	r9, #1
 8026488:	4623      	mov	r3, r4
 802648a:	469a      	mov	sl, r3
 802648c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8026490:	b10a      	cbz	r2, 8026496 <_vfiprintf_r+0x86>
 8026492:	2a25      	cmp	r2, #37	@ 0x25
 8026494:	d1f9      	bne.n	802648a <_vfiprintf_r+0x7a>
 8026496:	ebba 0b04 	subs.w	fp, sl, r4
 802649a:	d00b      	beq.n	80264b4 <_vfiprintf_r+0xa4>
 802649c:	465b      	mov	r3, fp
 802649e:	4622      	mov	r2, r4
 80264a0:	4629      	mov	r1, r5
 80264a2:	4630      	mov	r0, r6
 80264a4:	f7ff ffa1 	bl	80263ea <__sfputs_r>
 80264a8:	3001      	adds	r0, #1
 80264aa:	f000 80a7 	beq.w	80265fc <_vfiprintf_r+0x1ec>
 80264ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80264b0:	445a      	add	r2, fp
 80264b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80264b4:	f89a 3000 	ldrb.w	r3, [sl]
 80264b8:	2b00      	cmp	r3, #0
 80264ba:	f000 809f 	beq.w	80265fc <_vfiprintf_r+0x1ec>
 80264be:	2300      	movs	r3, #0
 80264c0:	f04f 32ff 	mov.w	r2, #4294967295
 80264c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80264c8:	f10a 0a01 	add.w	sl, sl, #1
 80264cc:	9304      	str	r3, [sp, #16]
 80264ce:	9307      	str	r3, [sp, #28]
 80264d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80264d4:	931a      	str	r3, [sp, #104]	@ 0x68
 80264d6:	4654      	mov	r4, sl
 80264d8:	2205      	movs	r2, #5
 80264da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80264de:	4853      	ldr	r0, [pc, #332]	@ (802662c <_vfiprintf_r+0x21c>)
 80264e0:	f7d9 feae 	bl	8000240 <memchr>
 80264e4:	9a04      	ldr	r2, [sp, #16]
 80264e6:	b9d8      	cbnz	r0, 8026520 <_vfiprintf_r+0x110>
 80264e8:	06d1      	lsls	r1, r2, #27
 80264ea:	bf44      	itt	mi
 80264ec:	2320      	movmi	r3, #32
 80264ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80264f2:	0713      	lsls	r3, r2, #28
 80264f4:	bf44      	itt	mi
 80264f6:	232b      	movmi	r3, #43	@ 0x2b
 80264f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80264fc:	f89a 3000 	ldrb.w	r3, [sl]
 8026500:	2b2a      	cmp	r3, #42	@ 0x2a
 8026502:	d015      	beq.n	8026530 <_vfiprintf_r+0x120>
 8026504:	9a07      	ldr	r2, [sp, #28]
 8026506:	4654      	mov	r4, sl
 8026508:	2000      	movs	r0, #0
 802650a:	f04f 0c0a 	mov.w	ip, #10
 802650e:	4621      	mov	r1, r4
 8026510:	f811 3b01 	ldrb.w	r3, [r1], #1
 8026514:	3b30      	subs	r3, #48	@ 0x30
 8026516:	2b09      	cmp	r3, #9
 8026518:	d94b      	bls.n	80265b2 <_vfiprintf_r+0x1a2>
 802651a:	b1b0      	cbz	r0, 802654a <_vfiprintf_r+0x13a>
 802651c:	9207      	str	r2, [sp, #28]
 802651e:	e014      	b.n	802654a <_vfiprintf_r+0x13a>
 8026520:	eba0 0308 	sub.w	r3, r0, r8
 8026524:	fa09 f303 	lsl.w	r3, r9, r3
 8026528:	4313      	orrs	r3, r2
 802652a:	9304      	str	r3, [sp, #16]
 802652c:	46a2      	mov	sl, r4
 802652e:	e7d2      	b.n	80264d6 <_vfiprintf_r+0xc6>
 8026530:	9b03      	ldr	r3, [sp, #12]
 8026532:	1d19      	adds	r1, r3, #4
 8026534:	681b      	ldr	r3, [r3, #0]
 8026536:	9103      	str	r1, [sp, #12]
 8026538:	2b00      	cmp	r3, #0
 802653a:	bfbb      	ittet	lt
 802653c:	425b      	neglt	r3, r3
 802653e:	f042 0202 	orrlt.w	r2, r2, #2
 8026542:	9307      	strge	r3, [sp, #28]
 8026544:	9307      	strlt	r3, [sp, #28]
 8026546:	bfb8      	it	lt
 8026548:	9204      	strlt	r2, [sp, #16]
 802654a:	7823      	ldrb	r3, [r4, #0]
 802654c:	2b2e      	cmp	r3, #46	@ 0x2e
 802654e:	d10a      	bne.n	8026566 <_vfiprintf_r+0x156>
 8026550:	7863      	ldrb	r3, [r4, #1]
 8026552:	2b2a      	cmp	r3, #42	@ 0x2a
 8026554:	d132      	bne.n	80265bc <_vfiprintf_r+0x1ac>
 8026556:	9b03      	ldr	r3, [sp, #12]
 8026558:	1d1a      	adds	r2, r3, #4
 802655a:	681b      	ldr	r3, [r3, #0]
 802655c:	9203      	str	r2, [sp, #12]
 802655e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8026562:	3402      	adds	r4, #2
 8026564:	9305      	str	r3, [sp, #20]
 8026566:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 802663c <_vfiprintf_r+0x22c>
 802656a:	7821      	ldrb	r1, [r4, #0]
 802656c:	2203      	movs	r2, #3
 802656e:	4650      	mov	r0, sl
 8026570:	f7d9 fe66 	bl	8000240 <memchr>
 8026574:	b138      	cbz	r0, 8026586 <_vfiprintf_r+0x176>
 8026576:	9b04      	ldr	r3, [sp, #16]
 8026578:	eba0 000a 	sub.w	r0, r0, sl
 802657c:	2240      	movs	r2, #64	@ 0x40
 802657e:	4082      	lsls	r2, r0
 8026580:	4313      	orrs	r3, r2
 8026582:	3401      	adds	r4, #1
 8026584:	9304      	str	r3, [sp, #16]
 8026586:	f814 1b01 	ldrb.w	r1, [r4], #1
 802658a:	4829      	ldr	r0, [pc, #164]	@ (8026630 <_vfiprintf_r+0x220>)
 802658c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8026590:	2206      	movs	r2, #6
 8026592:	f7d9 fe55 	bl	8000240 <memchr>
 8026596:	2800      	cmp	r0, #0
 8026598:	d03f      	beq.n	802661a <_vfiprintf_r+0x20a>
 802659a:	4b26      	ldr	r3, [pc, #152]	@ (8026634 <_vfiprintf_r+0x224>)
 802659c:	bb1b      	cbnz	r3, 80265e6 <_vfiprintf_r+0x1d6>
 802659e:	9b03      	ldr	r3, [sp, #12]
 80265a0:	3307      	adds	r3, #7
 80265a2:	f023 0307 	bic.w	r3, r3, #7
 80265a6:	3308      	adds	r3, #8
 80265a8:	9303      	str	r3, [sp, #12]
 80265aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80265ac:	443b      	add	r3, r7
 80265ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80265b0:	e76a      	b.n	8026488 <_vfiprintf_r+0x78>
 80265b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80265b6:	460c      	mov	r4, r1
 80265b8:	2001      	movs	r0, #1
 80265ba:	e7a8      	b.n	802650e <_vfiprintf_r+0xfe>
 80265bc:	2300      	movs	r3, #0
 80265be:	3401      	adds	r4, #1
 80265c0:	9305      	str	r3, [sp, #20]
 80265c2:	4619      	mov	r1, r3
 80265c4:	f04f 0c0a 	mov.w	ip, #10
 80265c8:	4620      	mov	r0, r4
 80265ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80265ce:	3a30      	subs	r2, #48	@ 0x30
 80265d0:	2a09      	cmp	r2, #9
 80265d2:	d903      	bls.n	80265dc <_vfiprintf_r+0x1cc>
 80265d4:	2b00      	cmp	r3, #0
 80265d6:	d0c6      	beq.n	8026566 <_vfiprintf_r+0x156>
 80265d8:	9105      	str	r1, [sp, #20]
 80265da:	e7c4      	b.n	8026566 <_vfiprintf_r+0x156>
 80265dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80265e0:	4604      	mov	r4, r0
 80265e2:	2301      	movs	r3, #1
 80265e4:	e7f0      	b.n	80265c8 <_vfiprintf_r+0x1b8>
 80265e6:	ab03      	add	r3, sp, #12
 80265e8:	9300      	str	r3, [sp, #0]
 80265ea:	462a      	mov	r2, r5
 80265ec:	4b12      	ldr	r3, [pc, #72]	@ (8026638 <_vfiprintf_r+0x228>)
 80265ee:	a904      	add	r1, sp, #16
 80265f0:	4630      	mov	r0, r6
 80265f2:	f3af 8000 	nop.w
 80265f6:	4607      	mov	r7, r0
 80265f8:	1c78      	adds	r0, r7, #1
 80265fa:	d1d6      	bne.n	80265aa <_vfiprintf_r+0x19a>
 80265fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80265fe:	07d9      	lsls	r1, r3, #31
 8026600:	d405      	bmi.n	802660e <_vfiprintf_r+0x1fe>
 8026602:	89ab      	ldrh	r3, [r5, #12]
 8026604:	059a      	lsls	r2, r3, #22
 8026606:	d402      	bmi.n	802660e <_vfiprintf_r+0x1fe>
 8026608:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802660a:	f7ff fe21 	bl	8026250 <__retarget_lock_release_recursive>
 802660e:	89ab      	ldrh	r3, [r5, #12]
 8026610:	065b      	lsls	r3, r3, #25
 8026612:	f53f af1f 	bmi.w	8026454 <_vfiprintf_r+0x44>
 8026616:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8026618:	e71e      	b.n	8026458 <_vfiprintf_r+0x48>
 802661a:	ab03      	add	r3, sp, #12
 802661c:	9300      	str	r3, [sp, #0]
 802661e:	462a      	mov	r2, r5
 8026620:	4b05      	ldr	r3, [pc, #20]	@ (8026638 <_vfiprintf_r+0x228>)
 8026622:	a904      	add	r1, sp, #16
 8026624:	4630      	mov	r0, r6
 8026626:	f000 f879 	bl	802671c <_printf_i>
 802662a:	e7e4      	b.n	80265f6 <_vfiprintf_r+0x1e6>
 802662c:	0802b328 	.word	0x0802b328
 8026630:	0802b332 	.word	0x0802b332
 8026634:	00000000 	.word	0x00000000
 8026638:	080263eb 	.word	0x080263eb
 802663c:	0802b32e 	.word	0x0802b32e

08026640 <_printf_common>:
 8026640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026644:	4616      	mov	r6, r2
 8026646:	4698      	mov	r8, r3
 8026648:	688a      	ldr	r2, [r1, #8]
 802664a:	690b      	ldr	r3, [r1, #16]
 802664c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8026650:	4293      	cmp	r3, r2
 8026652:	bfb8      	it	lt
 8026654:	4613      	movlt	r3, r2
 8026656:	6033      	str	r3, [r6, #0]
 8026658:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 802665c:	4607      	mov	r7, r0
 802665e:	460c      	mov	r4, r1
 8026660:	b10a      	cbz	r2, 8026666 <_printf_common+0x26>
 8026662:	3301      	adds	r3, #1
 8026664:	6033      	str	r3, [r6, #0]
 8026666:	6823      	ldr	r3, [r4, #0]
 8026668:	0699      	lsls	r1, r3, #26
 802666a:	bf42      	ittt	mi
 802666c:	6833      	ldrmi	r3, [r6, #0]
 802666e:	3302      	addmi	r3, #2
 8026670:	6033      	strmi	r3, [r6, #0]
 8026672:	6825      	ldr	r5, [r4, #0]
 8026674:	f015 0506 	ands.w	r5, r5, #6
 8026678:	d106      	bne.n	8026688 <_printf_common+0x48>
 802667a:	f104 0a19 	add.w	sl, r4, #25
 802667e:	68e3      	ldr	r3, [r4, #12]
 8026680:	6832      	ldr	r2, [r6, #0]
 8026682:	1a9b      	subs	r3, r3, r2
 8026684:	42ab      	cmp	r3, r5
 8026686:	dc26      	bgt.n	80266d6 <_printf_common+0x96>
 8026688:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 802668c:	6822      	ldr	r2, [r4, #0]
 802668e:	3b00      	subs	r3, #0
 8026690:	bf18      	it	ne
 8026692:	2301      	movne	r3, #1
 8026694:	0692      	lsls	r2, r2, #26
 8026696:	d42b      	bmi.n	80266f0 <_printf_common+0xb0>
 8026698:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 802669c:	4641      	mov	r1, r8
 802669e:	4638      	mov	r0, r7
 80266a0:	47c8      	blx	r9
 80266a2:	3001      	adds	r0, #1
 80266a4:	d01e      	beq.n	80266e4 <_printf_common+0xa4>
 80266a6:	6823      	ldr	r3, [r4, #0]
 80266a8:	6922      	ldr	r2, [r4, #16]
 80266aa:	f003 0306 	and.w	r3, r3, #6
 80266ae:	2b04      	cmp	r3, #4
 80266b0:	bf02      	ittt	eq
 80266b2:	68e5      	ldreq	r5, [r4, #12]
 80266b4:	6833      	ldreq	r3, [r6, #0]
 80266b6:	1aed      	subeq	r5, r5, r3
 80266b8:	68a3      	ldr	r3, [r4, #8]
 80266ba:	bf0c      	ite	eq
 80266bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80266c0:	2500      	movne	r5, #0
 80266c2:	4293      	cmp	r3, r2
 80266c4:	bfc4      	itt	gt
 80266c6:	1a9b      	subgt	r3, r3, r2
 80266c8:	18ed      	addgt	r5, r5, r3
 80266ca:	2600      	movs	r6, #0
 80266cc:	341a      	adds	r4, #26
 80266ce:	42b5      	cmp	r5, r6
 80266d0:	d11a      	bne.n	8026708 <_printf_common+0xc8>
 80266d2:	2000      	movs	r0, #0
 80266d4:	e008      	b.n	80266e8 <_printf_common+0xa8>
 80266d6:	2301      	movs	r3, #1
 80266d8:	4652      	mov	r2, sl
 80266da:	4641      	mov	r1, r8
 80266dc:	4638      	mov	r0, r7
 80266de:	47c8      	blx	r9
 80266e0:	3001      	adds	r0, #1
 80266e2:	d103      	bne.n	80266ec <_printf_common+0xac>
 80266e4:	f04f 30ff 	mov.w	r0, #4294967295
 80266e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80266ec:	3501      	adds	r5, #1
 80266ee:	e7c6      	b.n	802667e <_printf_common+0x3e>
 80266f0:	18e1      	adds	r1, r4, r3
 80266f2:	1c5a      	adds	r2, r3, #1
 80266f4:	2030      	movs	r0, #48	@ 0x30
 80266f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80266fa:	4422      	add	r2, r4
 80266fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8026700:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8026704:	3302      	adds	r3, #2
 8026706:	e7c7      	b.n	8026698 <_printf_common+0x58>
 8026708:	2301      	movs	r3, #1
 802670a:	4622      	mov	r2, r4
 802670c:	4641      	mov	r1, r8
 802670e:	4638      	mov	r0, r7
 8026710:	47c8      	blx	r9
 8026712:	3001      	adds	r0, #1
 8026714:	d0e6      	beq.n	80266e4 <_printf_common+0xa4>
 8026716:	3601      	adds	r6, #1
 8026718:	e7d9      	b.n	80266ce <_printf_common+0x8e>
	...

0802671c <_printf_i>:
 802671c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8026720:	7e0f      	ldrb	r7, [r1, #24]
 8026722:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8026724:	2f78      	cmp	r7, #120	@ 0x78
 8026726:	4691      	mov	r9, r2
 8026728:	4680      	mov	r8, r0
 802672a:	460c      	mov	r4, r1
 802672c:	469a      	mov	sl, r3
 802672e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8026732:	d807      	bhi.n	8026744 <_printf_i+0x28>
 8026734:	2f62      	cmp	r7, #98	@ 0x62
 8026736:	d80a      	bhi.n	802674e <_printf_i+0x32>
 8026738:	2f00      	cmp	r7, #0
 802673a:	f000 80d2 	beq.w	80268e2 <_printf_i+0x1c6>
 802673e:	2f58      	cmp	r7, #88	@ 0x58
 8026740:	f000 80b9 	beq.w	80268b6 <_printf_i+0x19a>
 8026744:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8026748:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 802674c:	e03a      	b.n	80267c4 <_printf_i+0xa8>
 802674e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8026752:	2b15      	cmp	r3, #21
 8026754:	d8f6      	bhi.n	8026744 <_printf_i+0x28>
 8026756:	a101      	add	r1, pc, #4	@ (adr r1, 802675c <_printf_i+0x40>)
 8026758:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802675c:	080267b5 	.word	0x080267b5
 8026760:	080267c9 	.word	0x080267c9
 8026764:	08026745 	.word	0x08026745
 8026768:	08026745 	.word	0x08026745
 802676c:	08026745 	.word	0x08026745
 8026770:	08026745 	.word	0x08026745
 8026774:	080267c9 	.word	0x080267c9
 8026778:	08026745 	.word	0x08026745
 802677c:	08026745 	.word	0x08026745
 8026780:	08026745 	.word	0x08026745
 8026784:	08026745 	.word	0x08026745
 8026788:	080268c9 	.word	0x080268c9
 802678c:	080267f3 	.word	0x080267f3
 8026790:	08026883 	.word	0x08026883
 8026794:	08026745 	.word	0x08026745
 8026798:	08026745 	.word	0x08026745
 802679c:	080268eb 	.word	0x080268eb
 80267a0:	08026745 	.word	0x08026745
 80267a4:	080267f3 	.word	0x080267f3
 80267a8:	08026745 	.word	0x08026745
 80267ac:	08026745 	.word	0x08026745
 80267b0:	0802688b 	.word	0x0802688b
 80267b4:	6833      	ldr	r3, [r6, #0]
 80267b6:	1d1a      	adds	r2, r3, #4
 80267b8:	681b      	ldr	r3, [r3, #0]
 80267ba:	6032      	str	r2, [r6, #0]
 80267bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80267c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80267c4:	2301      	movs	r3, #1
 80267c6:	e09d      	b.n	8026904 <_printf_i+0x1e8>
 80267c8:	6833      	ldr	r3, [r6, #0]
 80267ca:	6820      	ldr	r0, [r4, #0]
 80267cc:	1d19      	adds	r1, r3, #4
 80267ce:	6031      	str	r1, [r6, #0]
 80267d0:	0606      	lsls	r6, r0, #24
 80267d2:	d501      	bpl.n	80267d8 <_printf_i+0xbc>
 80267d4:	681d      	ldr	r5, [r3, #0]
 80267d6:	e003      	b.n	80267e0 <_printf_i+0xc4>
 80267d8:	0645      	lsls	r5, r0, #25
 80267da:	d5fb      	bpl.n	80267d4 <_printf_i+0xb8>
 80267dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80267e0:	2d00      	cmp	r5, #0
 80267e2:	da03      	bge.n	80267ec <_printf_i+0xd0>
 80267e4:	232d      	movs	r3, #45	@ 0x2d
 80267e6:	426d      	negs	r5, r5
 80267e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80267ec:	4859      	ldr	r0, [pc, #356]	@ (8026954 <_printf_i+0x238>)
 80267ee:	230a      	movs	r3, #10
 80267f0:	e011      	b.n	8026816 <_printf_i+0xfa>
 80267f2:	6821      	ldr	r1, [r4, #0]
 80267f4:	6833      	ldr	r3, [r6, #0]
 80267f6:	0608      	lsls	r0, r1, #24
 80267f8:	f853 5b04 	ldr.w	r5, [r3], #4
 80267fc:	d402      	bmi.n	8026804 <_printf_i+0xe8>
 80267fe:	0649      	lsls	r1, r1, #25
 8026800:	bf48      	it	mi
 8026802:	b2ad      	uxthmi	r5, r5
 8026804:	2f6f      	cmp	r7, #111	@ 0x6f
 8026806:	4853      	ldr	r0, [pc, #332]	@ (8026954 <_printf_i+0x238>)
 8026808:	6033      	str	r3, [r6, #0]
 802680a:	bf14      	ite	ne
 802680c:	230a      	movne	r3, #10
 802680e:	2308      	moveq	r3, #8
 8026810:	2100      	movs	r1, #0
 8026812:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8026816:	6866      	ldr	r6, [r4, #4]
 8026818:	60a6      	str	r6, [r4, #8]
 802681a:	2e00      	cmp	r6, #0
 802681c:	bfa2      	ittt	ge
 802681e:	6821      	ldrge	r1, [r4, #0]
 8026820:	f021 0104 	bicge.w	r1, r1, #4
 8026824:	6021      	strge	r1, [r4, #0]
 8026826:	b90d      	cbnz	r5, 802682c <_printf_i+0x110>
 8026828:	2e00      	cmp	r6, #0
 802682a:	d04b      	beq.n	80268c4 <_printf_i+0x1a8>
 802682c:	4616      	mov	r6, r2
 802682e:	fbb5 f1f3 	udiv	r1, r5, r3
 8026832:	fb03 5711 	mls	r7, r3, r1, r5
 8026836:	5dc7      	ldrb	r7, [r0, r7]
 8026838:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802683c:	462f      	mov	r7, r5
 802683e:	42bb      	cmp	r3, r7
 8026840:	460d      	mov	r5, r1
 8026842:	d9f4      	bls.n	802682e <_printf_i+0x112>
 8026844:	2b08      	cmp	r3, #8
 8026846:	d10b      	bne.n	8026860 <_printf_i+0x144>
 8026848:	6823      	ldr	r3, [r4, #0]
 802684a:	07df      	lsls	r7, r3, #31
 802684c:	d508      	bpl.n	8026860 <_printf_i+0x144>
 802684e:	6923      	ldr	r3, [r4, #16]
 8026850:	6861      	ldr	r1, [r4, #4]
 8026852:	4299      	cmp	r1, r3
 8026854:	bfde      	ittt	le
 8026856:	2330      	movle	r3, #48	@ 0x30
 8026858:	f806 3c01 	strble.w	r3, [r6, #-1]
 802685c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8026860:	1b92      	subs	r2, r2, r6
 8026862:	6122      	str	r2, [r4, #16]
 8026864:	f8cd a000 	str.w	sl, [sp]
 8026868:	464b      	mov	r3, r9
 802686a:	aa03      	add	r2, sp, #12
 802686c:	4621      	mov	r1, r4
 802686e:	4640      	mov	r0, r8
 8026870:	f7ff fee6 	bl	8026640 <_printf_common>
 8026874:	3001      	adds	r0, #1
 8026876:	d14a      	bne.n	802690e <_printf_i+0x1f2>
 8026878:	f04f 30ff 	mov.w	r0, #4294967295
 802687c:	b004      	add	sp, #16
 802687e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026882:	6823      	ldr	r3, [r4, #0]
 8026884:	f043 0320 	orr.w	r3, r3, #32
 8026888:	6023      	str	r3, [r4, #0]
 802688a:	4833      	ldr	r0, [pc, #204]	@ (8026958 <_printf_i+0x23c>)
 802688c:	2778      	movs	r7, #120	@ 0x78
 802688e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8026892:	6823      	ldr	r3, [r4, #0]
 8026894:	6831      	ldr	r1, [r6, #0]
 8026896:	061f      	lsls	r7, r3, #24
 8026898:	f851 5b04 	ldr.w	r5, [r1], #4
 802689c:	d402      	bmi.n	80268a4 <_printf_i+0x188>
 802689e:	065f      	lsls	r7, r3, #25
 80268a0:	bf48      	it	mi
 80268a2:	b2ad      	uxthmi	r5, r5
 80268a4:	6031      	str	r1, [r6, #0]
 80268a6:	07d9      	lsls	r1, r3, #31
 80268a8:	bf44      	itt	mi
 80268aa:	f043 0320 	orrmi.w	r3, r3, #32
 80268ae:	6023      	strmi	r3, [r4, #0]
 80268b0:	b11d      	cbz	r5, 80268ba <_printf_i+0x19e>
 80268b2:	2310      	movs	r3, #16
 80268b4:	e7ac      	b.n	8026810 <_printf_i+0xf4>
 80268b6:	4827      	ldr	r0, [pc, #156]	@ (8026954 <_printf_i+0x238>)
 80268b8:	e7e9      	b.n	802688e <_printf_i+0x172>
 80268ba:	6823      	ldr	r3, [r4, #0]
 80268bc:	f023 0320 	bic.w	r3, r3, #32
 80268c0:	6023      	str	r3, [r4, #0]
 80268c2:	e7f6      	b.n	80268b2 <_printf_i+0x196>
 80268c4:	4616      	mov	r6, r2
 80268c6:	e7bd      	b.n	8026844 <_printf_i+0x128>
 80268c8:	6833      	ldr	r3, [r6, #0]
 80268ca:	6825      	ldr	r5, [r4, #0]
 80268cc:	6961      	ldr	r1, [r4, #20]
 80268ce:	1d18      	adds	r0, r3, #4
 80268d0:	6030      	str	r0, [r6, #0]
 80268d2:	062e      	lsls	r6, r5, #24
 80268d4:	681b      	ldr	r3, [r3, #0]
 80268d6:	d501      	bpl.n	80268dc <_printf_i+0x1c0>
 80268d8:	6019      	str	r1, [r3, #0]
 80268da:	e002      	b.n	80268e2 <_printf_i+0x1c6>
 80268dc:	0668      	lsls	r0, r5, #25
 80268de:	d5fb      	bpl.n	80268d8 <_printf_i+0x1bc>
 80268e0:	8019      	strh	r1, [r3, #0]
 80268e2:	2300      	movs	r3, #0
 80268e4:	6123      	str	r3, [r4, #16]
 80268e6:	4616      	mov	r6, r2
 80268e8:	e7bc      	b.n	8026864 <_printf_i+0x148>
 80268ea:	6833      	ldr	r3, [r6, #0]
 80268ec:	1d1a      	adds	r2, r3, #4
 80268ee:	6032      	str	r2, [r6, #0]
 80268f0:	681e      	ldr	r6, [r3, #0]
 80268f2:	6862      	ldr	r2, [r4, #4]
 80268f4:	2100      	movs	r1, #0
 80268f6:	4630      	mov	r0, r6
 80268f8:	f7d9 fca2 	bl	8000240 <memchr>
 80268fc:	b108      	cbz	r0, 8026902 <_printf_i+0x1e6>
 80268fe:	1b80      	subs	r0, r0, r6
 8026900:	6060      	str	r0, [r4, #4]
 8026902:	6863      	ldr	r3, [r4, #4]
 8026904:	6123      	str	r3, [r4, #16]
 8026906:	2300      	movs	r3, #0
 8026908:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802690c:	e7aa      	b.n	8026864 <_printf_i+0x148>
 802690e:	6923      	ldr	r3, [r4, #16]
 8026910:	4632      	mov	r2, r6
 8026912:	4649      	mov	r1, r9
 8026914:	4640      	mov	r0, r8
 8026916:	47d0      	blx	sl
 8026918:	3001      	adds	r0, #1
 802691a:	d0ad      	beq.n	8026878 <_printf_i+0x15c>
 802691c:	6823      	ldr	r3, [r4, #0]
 802691e:	079b      	lsls	r3, r3, #30
 8026920:	d413      	bmi.n	802694a <_printf_i+0x22e>
 8026922:	68e0      	ldr	r0, [r4, #12]
 8026924:	9b03      	ldr	r3, [sp, #12]
 8026926:	4298      	cmp	r0, r3
 8026928:	bfb8      	it	lt
 802692a:	4618      	movlt	r0, r3
 802692c:	e7a6      	b.n	802687c <_printf_i+0x160>
 802692e:	2301      	movs	r3, #1
 8026930:	4632      	mov	r2, r6
 8026932:	4649      	mov	r1, r9
 8026934:	4640      	mov	r0, r8
 8026936:	47d0      	blx	sl
 8026938:	3001      	adds	r0, #1
 802693a:	d09d      	beq.n	8026878 <_printf_i+0x15c>
 802693c:	3501      	adds	r5, #1
 802693e:	68e3      	ldr	r3, [r4, #12]
 8026940:	9903      	ldr	r1, [sp, #12]
 8026942:	1a5b      	subs	r3, r3, r1
 8026944:	42ab      	cmp	r3, r5
 8026946:	dcf2      	bgt.n	802692e <_printf_i+0x212>
 8026948:	e7eb      	b.n	8026922 <_printf_i+0x206>
 802694a:	2500      	movs	r5, #0
 802694c:	f104 0619 	add.w	r6, r4, #25
 8026950:	e7f5      	b.n	802693e <_printf_i+0x222>
 8026952:	bf00      	nop
 8026954:	0802b339 	.word	0x0802b339
 8026958:	0802b34a 	.word	0x0802b34a

0802695c <__sflush_r>:
 802695c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8026960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026964:	0716      	lsls	r6, r2, #28
 8026966:	4605      	mov	r5, r0
 8026968:	460c      	mov	r4, r1
 802696a:	d454      	bmi.n	8026a16 <__sflush_r+0xba>
 802696c:	684b      	ldr	r3, [r1, #4]
 802696e:	2b00      	cmp	r3, #0
 8026970:	dc02      	bgt.n	8026978 <__sflush_r+0x1c>
 8026972:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8026974:	2b00      	cmp	r3, #0
 8026976:	dd48      	ble.n	8026a0a <__sflush_r+0xae>
 8026978:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802697a:	2e00      	cmp	r6, #0
 802697c:	d045      	beq.n	8026a0a <__sflush_r+0xae>
 802697e:	2300      	movs	r3, #0
 8026980:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8026984:	682f      	ldr	r7, [r5, #0]
 8026986:	6a21      	ldr	r1, [r4, #32]
 8026988:	602b      	str	r3, [r5, #0]
 802698a:	d030      	beq.n	80269ee <__sflush_r+0x92>
 802698c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 802698e:	89a3      	ldrh	r3, [r4, #12]
 8026990:	0759      	lsls	r1, r3, #29
 8026992:	d505      	bpl.n	80269a0 <__sflush_r+0x44>
 8026994:	6863      	ldr	r3, [r4, #4]
 8026996:	1ad2      	subs	r2, r2, r3
 8026998:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802699a:	b10b      	cbz	r3, 80269a0 <__sflush_r+0x44>
 802699c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802699e:	1ad2      	subs	r2, r2, r3
 80269a0:	2300      	movs	r3, #0
 80269a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80269a4:	6a21      	ldr	r1, [r4, #32]
 80269a6:	4628      	mov	r0, r5
 80269a8:	47b0      	blx	r6
 80269aa:	1c43      	adds	r3, r0, #1
 80269ac:	89a3      	ldrh	r3, [r4, #12]
 80269ae:	d106      	bne.n	80269be <__sflush_r+0x62>
 80269b0:	6829      	ldr	r1, [r5, #0]
 80269b2:	291d      	cmp	r1, #29
 80269b4:	d82b      	bhi.n	8026a0e <__sflush_r+0xb2>
 80269b6:	4a2a      	ldr	r2, [pc, #168]	@ (8026a60 <__sflush_r+0x104>)
 80269b8:	410a      	asrs	r2, r1
 80269ba:	07d6      	lsls	r6, r2, #31
 80269bc:	d427      	bmi.n	8026a0e <__sflush_r+0xb2>
 80269be:	2200      	movs	r2, #0
 80269c0:	6062      	str	r2, [r4, #4]
 80269c2:	04d9      	lsls	r1, r3, #19
 80269c4:	6922      	ldr	r2, [r4, #16]
 80269c6:	6022      	str	r2, [r4, #0]
 80269c8:	d504      	bpl.n	80269d4 <__sflush_r+0x78>
 80269ca:	1c42      	adds	r2, r0, #1
 80269cc:	d101      	bne.n	80269d2 <__sflush_r+0x76>
 80269ce:	682b      	ldr	r3, [r5, #0]
 80269d0:	b903      	cbnz	r3, 80269d4 <__sflush_r+0x78>
 80269d2:	6560      	str	r0, [r4, #84]	@ 0x54
 80269d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80269d6:	602f      	str	r7, [r5, #0]
 80269d8:	b1b9      	cbz	r1, 8026a0a <__sflush_r+0xae>
 80269da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80269de:	4299      	cmp	r1, r3
 80269e0:	d002      	beq.n	80269e8 <__sflush_r+0x8c>
 80269e2:	4628      	mov	r0, r5
 80269e4:	f7ff fca0 	bl	8026328 <_free_r>
 80269e8:	2300      	movs	r3, #0
 80269ea:	6363      	str	r3, [r4, #52]	@ 0x34
 80269ec:	e00d      	b.n	8026a0a <__sflush_r+0xae>
 80269ee:	2301      	movs	r3, #1
 80269f0:	4628      	mov	r0, r5
 80269f2:	47b0      	blx	r6
 80269f4:	4602      	mov	r2, r0
 80269f6:	1c50      	adds	r0, r2, #1
 80269f8:	d1c9      	bne.n	802698e <__sflush_r+0x32>
 80269fa:	682b      	ldr	r3, [r5, #0]
 80269fc:	2b00      	cmp	r3, #0
 80269fe:	d0c6      	beq.n	802698e <__sflush_r+0x32>
 8026a00:	2b1d      	cmp	r3, #29
 8026a02:	d001      	beq.n	8026a08 <__sflush_r+0xac>
 8026a04:	2b16      	cmp	r3, #22
 8026a06:	d11e      	bne.n	8026a46 <__sflush_r+0xea>
 8026a08:	602f      	str	r7, [r5, #0]
 8026a0a:	2000      	movs	r0, #0
 8026a0c:	e022      	b.n	8026a54 <__sflush_r+0xf8>
 8026a0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8026a12:	b21b      	sxth	r3, r3
 8026a14:	e01b      	b.n	8026a4e <__sflush_r+0xf2>
 8026a16:	690f      	ldr	r7, [r1, #16]
 8026a18:	2f00      	cmp	r7, #0
 8026a1a:	d0f6      	beq.n	8026a0a <__sflush_r+0xae>
 8026a1c:	0793      	lsls	r3, r2, #30
 8026a1e:	680e      	ldr	r6, [r1, #0]
 8026a20:	bf08      	it	eq
 8026a22:	694b      	ldreq	r3, [r1, #20]
 8026a24:	600f      	str	r7, [r1, #0]
 8026a26:	bf18      	it	ne
 8026a28:	2300      	movne	r3, #0
 8026a2a:	eba6 0807 	sub.w	r8, r6, r7
 8026a2e:	608b      	str	r3, [r1, #8]
 8026a30:	f1b8 0f00 	cmp.w	r8, #0
 8026a34:	dde9      	ble.n	8026a0a <__sflush_r+0xae>
 8026a36:	6a21      	ldr	r1, [r4, #32]
 8026a38:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8026a3a:	4643      	mov	r3, r8
 8026a3c:	463a      	mov	r2, r7
 8026a3e:	4628      	mov	r0, r5
 8026a40:	47b0      	blx	r6
 8026a42:	2800      	cmp	r0, #0
 8026a44:	dc08      	bgt.n	8026a58 <__sflush_r+0xfc>
 8026a46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026a4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8026a4e:	81a3      	strh	r3, [r4, #12]
 8026a50:	f04f 30ff 	mov.w	r0, #4294967295
 8026a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026a58:	4407      	add	r7, r0
 8026a5a:	eba8 0800 	sub.w	r8, r8, r0
 8026a5e:	e7e7      	b.n	8026a30 <__sflush_r+0xd4>
 8026a60:	dfbffffe 	.word	0xdfbffffe

08026a64 <_fflush_r>:
 8026a64:	b538      	push	{r3, r4, r5, lr}
 8026a66:	690b      	ldr	r3, [r1, #16]
 8026a68:	4605      	mov	r5, r0
 8026a6a:	460c      	mov	r4, r1
 8026a6c:	b913      	cbnz	r3, 8026a74 <_fflush_r+0x10>
 8026a6e:	2500      	movs	r5, #0
 8026a70:	4628      	mov	r0, r5
 8026a72:	bd38      	pop	{r3, r4, r5, pc}
 8026a74:	b118      	cbz	r0, 8026a7e <_fflush_r+0x1a>
 8026a76:	6a03      	ldr	r3, [r0, #32]
 8026a78:	b90b      	cbnz	r3, 8026a7e <_fflush_r+0x1a>
 8026a7a:	f7ff f993 	bl	8025da4 <__sinit>
 8026a7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026a82:	2b00      	cmp	r3, #0
 8026a84:	d0f3      	beq.n	8026a6e <_fflush_r+0xa>
 8026a86:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8026a88:	07d0      	lsls	r0, r2, #31
 8026a8a:	d404      	bmi.n	8026a96 <_fflush_r+0x32>
 8026a8c:	0599      	lsls	r1, r3, #22
 8026a8e:	d402      	bmi.n	8026a96 <_fflush_r+0x32>
 8026a90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8026a92:	f7ff fbdc 	bl	802624e <__retarget_lock_acquire_recursive>
 8026a96:	4628      	mov	r0, r5
 8026a98:	4621      	mov	r1, r4
 8026a9a:	f7ff ff5f 	bl	802695c <__sflush_r>
 8026a9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8026aa0:	07da      	lsls	r2, r3, #31
 8026aa2:	4605      	mov	r5, r0
 8026aa4:	d4e4      	bmi.n	8026a70 <_fflush_r+0xc>
 8026aa6:	89a3      	ldrh	r3, [r4, #12]
 8026aa8:	059b      	lsls	r3, r3, #22
 8026aaa:	d4e1      	bmi.n	8026a70 <_fflush_r+0xc>
 8026aac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8026aae:	f7ff fbcf 	bl	8026250 <__retarget_lock_release_recursive>
 8026ab2:	e7dd      	b.n	8026a70 <_fflush_r+0xc>

08026ab4 <__swhatbuf_r>:
 8026ab4:	b570      	push	{r4, r5, r6, lr}
 8026ab6:	460c      	mov	r4, r1
 8026ab8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026abc:	2900      	cmp	r1, #0
 8026abe:	b096      	sub	sp, #88	@ 0x58
 8026ac0:	4615      	mov	r5, r2
 8026ac2:	461e      	mov	r6, r3
 8026ac4:	da0d      	bge.n	8026ae2 <__swhatbuf_r+0x2e>
 8026ac6:	89a3      	ldrh	r3, [r4, #12]
 8026ac8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8026acc:	f04f 0100 	mov.w	r1, #0
 8026ad0:	bf14      	ite	ne
 8026ad2:	2340      	movne	r3, #64	@ 0x40
 8026ad4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8026ad8:	2000      	movs	r0, #0
 8026ada:	6031      	str	r1, [r6, #0]
 8026adc:	602b      	str	r3, [r5, #0]
 8026ade:	b016      	add	sp, #88	@ 0x58
 8026ae0:	bd70      	pop	{r4, r5, r6, pc}
 8026ae2:	466a      	mov	r2, sp
 8026ae4:	f000 f848 	bl	8026b78 <_fstat_r>
 8026ae8:	2800      	cmp	r0, #0
 8026aea:	dbec      	blt.n	8026ac6 <__swhatbuf_r+0x12>
 8026aec:	9901      	ldr	r1, [sp, #4]
 8026aee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8026af2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8026af6:	4259      	negs	r1, r3
 8026af8:	4159      	adcs	r1, r3
 8026afa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8026afe:	e7eb      	b.n	8026ad8 <__swhatbuf_r+0x24>

08026b00 <__smakebuf_r>:
 8026b00:	898b      	ldrh	r3, [r1, #12]
 8026b02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8026b04:	079d      	lsls	r5, r3, #30
 8026b06:	4606      	mov	r6, r0
 8026b08:	460c      	mov	r4, r1
 8026b0a:	d507      	bpl.n	8026b1c <__smakebuf_r+0x1c>
 8026b0c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8026b10:	6023      	str	r3, [r4, #0]
 8026b12:	6123      	str	r3, [r4, #16]
 8026b14:	2301      	movs	r3, #1
 8026b16:	6163      	str	r3, [r4, #20]
 8026b18:	b003      	add	sp, #12
 8026b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026b1c:	ab01      	add	r3, sp, #4
 8026b1e:	466a      	mov	r2, sp
 8026b20:	f7ff ffc8 	bl	8026ab4 <__swhatbuf_r>
 8026b24:	9f00      	ldr	r7, [sp, #0]
 8026b26:	4605      	mov	r5, r0
 8026b28:	4639      	mov	r1, r7
 8026b2a:	4630      	mov	r0, r6
 8026b2c:	f7ff f814 	bl	8025b58 <_malloc_r>
 8026b30:	b948      	cbnz	r0, 8026b46 <__smakebuf_r+0x46>
 8026b32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026b36:	059a      	lsls	r2, r3, #22
 8026b38:	d4ee      	bmi.n	8026b18 <__smakebuf_r+0x18>
 8026b3a:	f023 0303 	bic.w	r3, r3, #3
 8026b3e:	f043 0302 	orr.w	r3, r3, #2
 8026b42:	81a3      	strh	r3, [r4, #12]
 8026b44:	e7e2      	b.n	8026b0c <__smakebuf_r+0xc>
 8026b46:	89a3      	ldrh	r3, [r4, #12]
 8026b48:	6020      	str	r0, [r4, #0]
 8026b4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8026b4e:	81a3      	strh	r3, [r4, #12]
 8026b50:	9b01      	ldr	r3, [sp, #4]
 8026b52:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8026b56:	b15b      	cbz	r3, 8026b70 <__smakebuf_r+0x70>
 8026b58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026b5c:	4630      	mov	r0, r6
 8026b5e:	f000 f81d 	bl	8026b9c <_isatty_r>
 8026b62:	b128      	cbz	r0, 8026b70 <__smakebuf_r+0x70>
 8026b64:	89a3      	ldrh	r3, [r4, #12]
 8026b66:	f023 0303 	bic.w	r3, r3, #3
 8026b6a:	f043 0301 	orr.w	r3, r3, #1
 8026b6e:	81a3      	strh	r3, [r4, #12]
 8026b70:	89a3      	ldrh	r3, [r4, #12]
 8026b72:	431d      	orrs	r5, r3
 8026b74:	81a5      	strh	r5, [r4, #12]
 8026b76:	e7cf      	b.n	8026b18 <__smakebuf_r+0x18>

08026b78 <_fstat_r>:
 8026b78:	b538      	push	{r3, r4, r5, lr}
 8026b7a:	4d07      	ldr	r5, [pc, #28]	@ (8026b98 <_fstat_r+0x20>)
 8026b7c:	2300      	movs	r3, #0
 8026b7e:	4604      	mov	r4, r0
 8026b80:	4608      	mov	r0, r1
 8026b82:	4611      	mov	r1, r2
 8026b84:	602b      	str	r3, [r5, #0]
 8026b86:	f7de fb8a 	bl	800529e <_fstat>
 8026b8a:	1c43      	adds	r3, r0, #1
 8026b8c:	d102      	bne.n	8026b94 <_fstat_r+0x1c>
 8026b8e:	682b      	ldr	r3, [r5, #0]
 8026b90:	b103      	cbz	r3, 8026b94 <_fstat_r+0x1c>
 8026b92:	6023      	str	r3, [r4, #0]
 8026b94:	bd38      	pop	{r3, r4, r5, pc}
 8026b96:	bf00      	nop
 8026b98:	20027ddc 	.word	0x20027ddc

08026b9c <_isatty_r>:
 8026b9c:	b538      	push	{r3, r4, r5, lr}
 8026b9e:	4d06      	ldr	r5, [pc, #24]	@ (8026bb8 <_isatty_r+0x1c>)
 8026ba0:	2300      	movs	r3, #0
 8026ba2:	4604      	mov	r4, r0
 8026ba4:	4608      	mov	r0, r1
 8026ba6:	602b      	str	r3, [r5, #0]
 8026ba8:	f7de fb7e 	bl	80052a8 <_isatty>
 8026bac:	1c43      	adds	r3, r0, #1
 8026bae:	d102      	bne.n	8026bb6 <_isatty_r+0x1a>
 8026bb0:	682b      	ldr	r3, [r5, #0]
 8026bb2:	b103      	cbz	r3, 8026bb6 <_isatty_r+0x1a>
 8026bb4:	6023      	str	r3, [r4, #0]
 8026bb6:	bd38      	pop	{r3, r4, r5, pc}
 8026bb8:	20027ddc 	.word	0x20027ddc

08026bbc <_sbrk>:
 8026bbc:	4a04      	ldr	r2, [pc, #16]	@ (8026bd0 <_sbrk+0x14>)
 8026bbe:	6811      	ldr	r1, [r2, #0]
 8026bc0:	4603      	mov	r3, r0
 8026bc2:	b909      	cbnz	r1, 8026bc8 <_sbrk+0xc>
 8026bc4:	4903      	ldr	r1, [pc, #12]	@ (8026bd4 <_sbrk+0x18>)
 8026bc6:	6011      	str	r1, [r2, #0]
 8026bc8:	6810      	ldr	r0, [r2, #0]
 8026bca:	4403      	add	r3, r0
 8026bcc:	6013      	str	r3, [r2, #0]
 8026bce:	4770      	bx	lr
 8026bd0:	20027f7c 	.word	0x20027f7c
 8026bd4:	20027f80 	.word	0x20027f80

08026bd8 <_init>:
 8026bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026bda:	bf00      	nop
 8026bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026bde:	bc08      	pop	{r3}
 8026be0:	469e      	mov	lr, r3
 8026be2:	4770      	bx	lr

08026be4 <_fini>:
 8026be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026be6:	bf00      	nop
 8026be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026bea:	bc08      	pop	{r3}
 8026bec:	469e      	mov	lr, r3
 8026bee:	4770      	bx	lr
