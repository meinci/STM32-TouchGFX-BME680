
STM32F769I_DISCO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00026c88  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000048b4  08026e88  08026e88  00036e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 000000f0  0802b73c  0802b73c  0003b73c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0802b82c  0802b82c  00359cbc  2**0
                  CONTENTS
  5 .ARM          00000008  0802b82c  0802b82c  0003b82c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0802b834  0802b834  00359cbc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   0000001c  0802b834  0802b834  0003b834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000008  0802b850  0802b850  0003b850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000150  20000000  0802b858  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 CCMRAM        00009600  20000150  0802b9a8  00040150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0001e720  20009750  08034fa8  00049750  2**2
                  ALLOC
 12 ._user_heap_stack 00002000  20027e70  08034fa8  00057e70  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00359cbc  2**0
                  CONTENTS, READONLY
 14 ExtFlashSection 003037c0  90000000  90000000  00050000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 FontFlashSection 0000642c  903037c0  903037c0  003537c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 TextFlashSection 000000d0  90309bec  90309bec  00359bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 BufferSection 00177000  c0000000  c0000000  00360000  2**2
                  ALLOC
 18 .debug_line   000652de  00000000  00000000  00359cea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_info   000f9581  00000000  00000000  003befc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_abbrev 000180d7  00000000  00000000  004b8549  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_aranges 000038a0  00000000  00000000  004d0620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    00163699  00000000  00000000  004d3ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00007288  00000000  00000000  00637560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_macro  0003fc0f  00000000  00000000  0063e7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .comment      000000cf  00000000  00000000  0067e3f7  2**0
                  CONTENTS, READONLY
 26 .debug_frame  0000a7c8  00000000  00000000  0067e4c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_loc    0003e209  00000000  00000000  00688c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20009750 	.word	0x20009750
 800021c:	00000000 	.word	0x00000000
 8000220:	08026e70 	.word	0x08026e70

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20009754 	.word	0x20009754
 800023c:	08026e70 	.word	0x08026e70

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_ldivmod>:
 80002e0:	b97b      	cbnz	r3, 8000302 <__aeabi_ldivmod+0x22>
 80002e2:	b972      	cbnz	r2, 8000302 <__aeabi_ldivmod+0x22>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bfbe      	ittt	lt
 80002e8:	2000      	movlt	r0, #0
 80002ea:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80002ee:	e006      	blt.n	80002fe <__aeabi_ldivmod+0x1e>
 80002f0:	bf08      	it	eq
 80002f2:	2800      	cmpeq	r0, #0
 80002f4:	bf1c      	itt	ne
 80002f6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80002fa:	f04f 30ff 	movne.w	r0, #4294967295
 80002fe:	f000 b9bf 	b.w	8000680 <__aeabi_idiv0>
 8000302:	f1ad 0c08 	sub.w	ip, sp, #8
 8000306:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030a:	2900      	cmp	r1, #0
 800030c:	db09      	blt.n	8000322 <__aeabi_ldivmod+0x42>
 800030e:	2b00      	cmp	r3, #0
 8000310:	db1a      	blt.n	8000348 <__aeabi_ldivmod+0x68>
 8000312:	f000 f84d 	bl	80003b0 <__udivmoddi4>
 8000316:	f8dd e004 	ldr.w	lr, [sp, #4]
 800031a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031e:	b004      	add	sp, #16
 8000320:	4770      	bx	lr
 8000322:	4240      	negs	r0, r0
 8000324:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000328:	2b00      	cmp	r3, #0
 800032a:	db1b      	blt.n	8000364 <__aeabi_ldivmod+0x84>
 800032c:	f000 f840 	bl	80003b0 <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4240      	negs	r0, r0
 800033c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000340:	4252      	negs	r2, r2
 8000342:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000346:	4770      	bx	lr
 8000348:	4252      	negs	r2, r2
 800034a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800034e:	f000 f82f 	bl	80003b0 <__udivmoddi4>
 8000352:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000356:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035a:	b004      	add	sp, #16
 800035c:	4240      	negs	r0, r0
 800035e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000362:	4770      	bx	lr
 8000364:	4252      	negs	r2, r2
 8000366:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800036a:	f000 f821 	bl	80003b0 <__udivmoddi4>
 800036e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000372:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000376:	b004      	add	sp, #16
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	4770      	bx	lr

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000684:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006bc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000688:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800068a:	e003      	b.n	8000694 <LoopCopyDataInit>

0800068c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800068c:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800068e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000690:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000692:	3104      	adds	r1, #4

08000694 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000694:	480b      	ldr	r0, [pc, #44]	; (80006c4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000696:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000698:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800069a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800069c:	d3f6      	bcc.n	800068c <CopyDataInit>
  ldr  r2, =_sbss
 800069e:	4a0b      	ldr	r2, [pc, #44]	; (80006cc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80006a0:	e002      	b.n	80006a8 <LoopFillZerobss>

080006a2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80006a2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80006a4:	f842 3b04 	str.w	r3, [r2], #4

080006a8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80006a8:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80006aa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80006ac:	d3f9      	bcc.n	80006a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80006ae:	f007 fbcd 	bl	8007e4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006b2:	f025 fbed 	bl	8025e90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80006b6:	f003 fb85 	bl	8003dc4 <main>
  bx  lr    
 80006ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80006bc:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80006c0:	0802b858 	.word	0x0802b858
  ldr  r0, =_sdata
 80006c4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80006c8:	20000150 	.word	0x20000150
  ldr  r2, =_sbss
 80006cc:	20009750 	.word	0x20009750
  ldr  r3, = _ebss
 80006d0:	20027e70 	.word	0x20027e70

080006d4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80006d4:	e7fe      	b.n	80006d4 <CAN1_RX0_IRQHandler>

080006d6 <MX_LIBJPEG_Init>:
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 80006d6:	4770      	bx	lr

080006d8 <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
 80006d8:	4770      	bx	lr

080006da <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 80006da:	b508      	push	{r3, lr}
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
 80006dc:	f001 fd68 	bl	80021b0 <touchgfx_components_init>
  touchgfx_init();
}
 80006e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  touchgfx_init();
 80006e4:	f001 bcf0 	b.w	80020c8 <touchgfx_init>

080006e8 <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 80006e8:	f001 bd64 	b.w	80021b4 <touchgfx_taskEntry>

080006ec <BSP_PB_Init>:
    __weak void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
    {
        GPIO_InitTypeDef gpio_init_structure;

        /* Enable the BUTTON clock */
        BUTTON_GPIO_CLK_ENABLE();
 80006ec:	4b17      	ldr	r3, [pc, #92]	; (800074c <BSP_PB_Init+0x60>)
 80006ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006f0:	f042 0201 	orr.w	r2, r2, #1
    {
 80006f4:	b510      	push	{r4, lr}
        BUTTON_GPIO_CLK_ENABLE();
 80006f6:	631a      	str	r2, [r3, #48]	; 0x30
    {
 80006f8:	b086      	sub	sp, #24
        BUTTON_GPIO_CLK_ENABLE();
 80006fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fc:	f003 0301 	and.w	r3, r3, #1
 8000700:	9300      	str	r3, [sp, #0]
 8000702:	9b00      	ldr	r3, [sp, #0]

        if (Button_Mode == BUTTON_MODE_GPIO)
 8000704:	b959      	cbnz	r1, 800071e <BSP_PB_Init+0x32>
        {
            /* Configure Button pin as input */
            gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000706:	2301      	movs	r3, #1
            gpio_init_structure.Mode = GPIO_MODE_INPUT;
            gpio_init_structure.Pull = GPIO_NOPULL;
 8000708:	9103      	str	r1, [sp, #12]
            gpio_init_structure.Speed = GPIO_SPEED_FAST;
            HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800070a:	4811      	ldr	r0, [pc, #68]	; (8000750 <BSP_PB_Init+0x64>)
            gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800070c:	e9cd 3101 	strd	r3, r1, [sp, #4]
            gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000710:	2302      	movs	r3, #2
            HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000712:	a901      	add	r1, sp, #4
            gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000714:	9304      	str	r3, [sp, #16]
            HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000716:	f008 fdf7 	bl	8009308 <HAL_GPIO_Init>

            /* Enable and set Button EXTI Interrupt to the lowest priority */
            HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
            HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
        }
    }
 800071a:	b006      	add	sp, #24
 800071c:	bd10      	pop	{r4, pc}
        if (Button_Mode == BUTTON_MODE_EXTI)
 800071e:	2901      	cmp	r1, #1
 8000720:	d1fb      	bne.n	800071a <BSP_PB_Init+0x2e>
            gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000722:	2400      	movs	r4, #0
 8000724:	2302      	movs	r3, #2
            gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000726:	9101      	str	r1, [sp, #4]
            HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000728:	a901      	add	r1, sp, #4
 800072a:	4809      	ldr	r0, [pc, #36]	; (8000750 <BSP_PB_Init+0x64>)
            gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800072c:	e9cd 4303 	strd	r4, r3, [sp, #12]
            gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000730:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000734:	9302      	str	r3, [sp, #8]
            HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000736:	f008 fde7 	bl	8009308 <HAL_GPIO_Init>
            HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 800073a:	4622      	mov	r2, r4
 800073c:	210f      	movs	r1, #15
 800073e:	2006      	movs	r0, #6
 8000740:	f007 fe5c 	bl	80083fc <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8000744:	2006      	movs	r0, #6
 8000746:	f007 fe8b 	bl	8008460 <HAL_NVIC_EnableIRQ>
    }
 800074a:	e7e6      	b.n	800071a <BSP_PB_Init+0x2e>
 800074c:	40023800 	.word	0x40023800
 8000750:	40020000 	.word	0x40020000

08000754 <_ZN8touchgfx7Buttons4initEv>:
    BSP_PB_Init(BUTTON_WAKEUP, BUTTON_MODE_GPIO);
 8000754:	2100      	movs	r1, #0
{
 8000756:	b508      	push	{r3, lr}
    BSP_PB_Init(BUTTON_WAKEUP, BUTTON_MODE_GPIO);
 8000758:	4608      	mov	r0, r1
 800075a:	f7ff ffc7 	bl	80006ec <BSP_PB_Init>
}
 800075e:	bd08      	pop	{r3, pc}

08000760 <BSP_PB_GetState>:
      *            @arg  BUTTON_USER: User Push Button
      * @retval The Button GPIO pin value
      */
    __weak uint32_t BSP_PB_GetState(Button_TypeDef Button)
    {
        return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8000760:	2101      	movs	r1, #1
 8000762:	4802      	ldr	r0, [pc, #8]	; (800076c <BSP_PB_GetState+0xc>)
    {
 8000764:	b508      	push	{r3, lr}
        return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8000766:	f008 ff55 	bl	8009614 <HAL_GPIO_ReadPin>
    }
 800076a:	bd08      	pop	{r3, pc}
 800076c:	40020000 	.word	0x40020000

08000770 <_ZN8touchgfx7Buttons6sampleEv>:
{
 8000770:	b508      	push	{r3, lr}
    result = BSP_PB_GetState(BUTTON_WAKEUP);
 8000772:	2000      	movs	r0, #0
 8000774:	f7ff fff4 	bl	8000760 <BSP_PB_GetState>
}
 8000778:	bd08      	pop	{r3, pc}

0800077a <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 800077a:	6840      	ldr	r0, [r0, #4]
    }
 800077c:	4770      	bx	lr

0800077e <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 800077e:	6041      	str	r1, [r0, #4]
    }
 8000780:	4770      	bx	lr
	...

08000784 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    // Enable Debug Exception and Monitor Control Register
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
 8000784:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8000788:	f8d2 3dfc 	ldr.w	r3, [r2, #3580]	; 0xdfc
 800078c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000790:	f8c2 3dfc 	str.w	r3, [r2, #3580]	; 0xdfc
    // Enable Lock Access Register
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
 8000794:	4b05      	ldr	r3, [pc, #20]	; (80007ac <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x28>)
 8000796:	4a06      	ldr	r2, [pc, #24]	; (80007b0 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x2c>)
 8000798:	f8d3 1fb0 	ldr.w	r1, [r3, #4016]	; 0xfb0
 800079c:	430a      	orrs	r2, r1
 800079e:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
    // Enable Data Watchpoint and Trace Control Register
    *((volatile unsigned int*)0xE0001000) |= 1;
 80007a2:	681a      	ldr	r2, [r3, #0]
 80007a4:	f042 0201 	orr.w	r2, r2, #1
 80007a8:	601a      	str	r2, [r3, #0]
}
 80007aa:	4770      	bx	lr
 80007ac:	e0001000 	.word	0xe0001000
 80007b0:	c5acce55 	.word	0xc5acce55

080007b4 <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 80007b4:	1a51      	subs	r1, r2, r1
 80007b6:	eb01 0153 	add.w	r1, r1, r3, lsr #1
}
 80007ba:	fbb1 f0f3 	udiv	r0, r1, r3
 80007be:	4770      	bx	lr

080007c0 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
    return *((volatile unsigned int*)0xE0001004);
 80007c0:	4b01      	ldr	r3, [pc, #4]	; (80007c8 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x8>)
 80007c2:	6858      	ldr	r0, [r3, #4]
}
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	e0001000 	.word	0xe0001000

080007cc <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
 80007cc:	4770      	bx	lr

080007ce <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
 80007ce:	b510      	push	{r4, lr}
 80007d0:	4604      	mov	r4, r0
 80007d2:	210c      	movs	r1, #12
 80007d4:	f025 f9ed 	bl	8025bb2 <_ZdlPvj>
 80007d8:	4620      	mov	r0, r4
 80007da:	bd10      	pop	{r4, pc}

080007dc <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
    if (active) //idle task sched out
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
 80007dc:	6803      	ldr	r3, [r0, #0]
{
 80007de:	b510      	push	{r4, lr}
        uint32_t cc_temp = getCPUCycles() - cc_in;
 80007e0:	691b      	ldr	r3, [r3, #16]
{
 80007e2:	4604      	mov	r4, r0
    if (active) //idle task sched out
 80007e4:	b131      	cbz	r1, 80007f4 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x18>
        uint32_t cc_temp = getCPUCycles() - cc_in;
 80007e6:	4798      	blx	r3
 80007e8:	68a2      	ldr	r2, [r4, #8]
        cc_consumed += cc_temp;
 80007ea:	6863      	ldr	r3, [r4, #4]
 80007ec:	1a9b      	subs	r3, r3, r2
 80007ee:	4418      	add	r0, r3
 80007f0:	6060      	str	r0, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 80007f2:	bd10      	pop	{r4, pc}
        cc_in = getCPUCycles();
 80007f4:	4798      	blx	r3
 80007f6:	60a0      	str	r0, [r4, #8]
}
 80007f8:	e7fb      	b.n	80007f2 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x16>

080007fa <_ZN8touchgfx16ButtonController5resetEv>:
    virtual bool sample(uint8_t& key) = 0;

    /** Resets button controller. Does nothing in the default implementation. */
    virtual void reset()
    {
    }
 80007fa:	4770      	bx	lr

080007fc <_ZN8touchgfx10KeySamplerD1Ev>:
public:
    KeySampler()
    {
        init();
    }
    virtual ~KeySampler() {}
 80007fc:	4770      	bx	lr
	...

08000800 <_ZN8touchgfx10KeySampler4initEv>:
using namespace touchgfx;

static uint8_t btnstatus[4];

void KeySampler::init()
{
 8000800:	b508      	push	{r3, lr}
    Buttons::init();
 8000802:	f7ff ffa7 	bl	8000754 <_ZN8touchgfx7Buttons4initEv>

    memset(btnstatus, 0x00, sizeof(uint8_t) * 4);
 8000806:	4b02      	ldr	r3, [pc, #8]	; (8000810 <_ZN8touchgfx10KeySampler4initEv+0x10>)
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
}
 800080c:	bd08      	pop	{r3, pc}
 800080e:	bf00      	nop
 8000810:	2000976c 	.word	0x2000976c

08000814 <_ZN8touchgfx10KeySampler6sampleERh>:

bool KeySampler::sample(uint8_t& key)
{
 8000814:	b570      	push	{r4, r5, r6, lr}
 8000816:	460d      	mov	r5, r1
    unsigned int buttonValue = Buttons::sample();
 8000818:	f7ff ffaa 	bl	8000770 <_ZN8touchgfx7Buttons6sampleEv>

    //Propergate values through buffer
    btnstatus[3] = btnstatus[2];
 800081c:	4a0b      	ldr	r2, [pc, #44]	; (800084c <_ZN8touchgfx10KeySampler6sampleERh+0x38>)
    btnstatus[2] = btnstatus[1];
    btnstatus[1] = btnstatus[0];
    btnstatus[0] = buttonValue;
 800081e:	b2c4      	uxtb	r4, r0
    btnstatus[3] = btnstatus[2];
 8000820:	7893      	ldrb	r3, [r2, #2]
    btnstatus[2] = btnstatus[1];
 8000822:	7856      	ldrb	r6, [r2, #1]
    btnstatus[1] = btnstatus[0];
 8000824:	7811      	ldrb	r1, [r2, #0]

    //User key
    if (((btnstatus[3] & Key1) == 1) && ((btnstatus[2] & Key1) == 1) &&
 8000826:	f013 0001 	ands.w	r0, r3, #1
    btnstatus[3] = btnstatus[2];
 800082a:	70d3      	strb	r3, [r2, #3]
    btnstatus[2] = btnstatus[1];
 800082c:	7096      	strb	r6, [r2, #2]
    btnstatus[1] = btnstatus[0];
 800082e:	7051      	strb	r1, [r2, #1]
    btnstatus[0] = buttonValue;
 8000830:	7014      	strb	r4, [r2, #0]
    if (((btnstatus[3] & Key1) == 1) && ((btnstatus[2] & Key1) == 1) &&
 8000832:	d00a      	beq.n	800084a <_ZN8touchgfx10KeySampler6sampleERh+0x36>
 8000834:	f016 0001 	ands.w	r0, r6, #1
 8000838:	d007      	beq.n	800084a <_ZN8touchgfx10KeySampler6sampleERh+0x36>
 800083a:	f011 0001 	ands.w	r0, r1, #1
 800083e:	d004      	beq.n	800084a <_ZN8touchgfx10KeySampler6sampleERh+0x36>
            ((btnstatus[1] & Key1) == 1) && ((btnstatus[0] & Key1) == 0))
 8000840:	07e3      	lsls	r3, r4, #31
    {
        key = 1;
 8000842:	bf56      	itet	pl
 8000844:	2001      	movpl	r0, #1
        return true;
    }

    return false;
 8000846:	2000      	movmi	r0, #0
        key = 1;
 8000848:	7028      	strbpl	r0, [r5, #0]
}
 800084a:	bd70      	pop	{r4, r5, r6, pc}
 800084c:	2000976c 	.word	0x2000976c

08000850 <_ZN8touchgfx10KeySamplerD0Ev>:
 8000850:	b510      	push	{r4, lr}
 8000852:	4604      	mov	r4, r0
 8000854:	2104      	movs	r1, #4
 8000856:	f025 f9ac 	bl	8025bb2 <_ZdlPvj>
 800085a:	4620      	mov	r0, r4
 800085c:	bd10      	pop	{r4, pc}

0800085e <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 800085e:	4770      	bx	lr

08000860 <_ZN20STM32TouchControllerD0Ev>:
 8000860:	b510      	push	{r4, lr}
 8000862:	4604      	mov	r4, r0
 8000864:	2104      	movs	r1, #4
 8000866:	f025 f9a4 	bl	8025bb2 <_ZdlPvj>
 800086a:	4620      	mov	r0, r4
 800086c:	bd10      	pop	{r4, pc}

0800086e <TS_IO_Init>:
      * @retval None
      */
    __weak void TS_IO_Init(void)
    {
        // I2Cx_Init(&hi2c4);
    }
 800086e:	4770      	bx	lr

08000870 <TS_IO_Write>:
      * @param  Reg: Reg address
      * @param  Value: Data to be written
      * @retval None
      */
    __weak void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
    {
 8000870:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000872:	2301      	movs	r3, #1
    {
 8000874:	f88d 2017 	strb.w	r2, [sp, #23]
        status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000878:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800087c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8000880:	f10d 0217 	add.w	r2, sp, #23
 8000884:	9200      	str	r2, [sp, #0]
 8000886:	460a      	mov	r2, r1
 8000888:	4601      	mov	r1, r0
 800088a:	4806      	ldr	r0, [pc, #24]	; (80008a4 <TS_IO_Write+0x34>)
 800088c:	f009 f9d0 	bl	8009c30 <HAL_I2C_Mem_Write>
        if (status != HAL_OK)
 8000890:	b120      	cbz	r0, 800089c <TS_IO_Write+0x2c>
        HAL_I2C_DeInit(i2c_handler);
 8000892:	4804      	ldr	r0, [pc, #16]	; (80008a4 <TS_IO_Write+0x34>)
 8000894:	f009 f884 	bl	80099a0 <HAL_I2C_DeInit>
        MX_I2C4_Init();
 8000898:	f003 fa72 	bl	8003d80 <MX_I2C4_Init>
        I2Cx_WriteMultiple(&hi2c4, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&Value, 1);
    }
 800089c:	b007      	add	sp, #28
 800089e:	f85d fb04 	ldr.w	pc, [sp], #4
 80008a2:	bf00      	nop
 80008a4:	200121a0 	.word	0x200121a0

080008a8 <TS_IO_Read>:
      * @param  Addr: I2C address
      * @param  Reg: Reg address
      * @retval Data to be read
      */
    __weak uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
    {
 80008a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        uint8_t read_value = 0;
 80008aa:	2300      	movs	r3, #0
    {
 80008ac:	460a      	mov	r2, r1
        status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80008ae:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
        uint8_t read_value = 0;
 80008b2:	f88d 3017 	strb.w	r3, [sp, #23]
        status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80008b6:	2301      	movs	r3, #1
 80008b8:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80008bc:	f10d 0117 	add.w	r1, sp, #23
 80008c0:	9100      	str	r1, [sp, #0]
 80008c2:	4601      	mov	r1, r0
 80008c4:	4806      	ldr	r0, [pc, #24]	; (80008e0 <TS_IO_Read+0x38>)
 80008c6:	f009 fa8d 	bl	8009de4 <HAL_I2C_Mem_Read>
        if (status != HAL_OK)
 80008ca:	b120      	cbz	r0, 80008d6 <TS_IO_Read+0x2e>
        HAL_I2C_DeInit(i2c_handler);
 80008cc:	4804      	ldr	r0, [pc, #16]	; (80008e0 <TS_IO_Read+0x38>)
 80008ce:	f009 f867 	bl	80099a0 <HAL_I2C_DeInit>
        MX_I2C4_Init();
 80008d2:	f003 fa55 	bl	8003d80 <MX_I2C4_Init>

        I2Cx_ReadMultiple(&hi2c4, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);

        return read_value;
    }
 80008d6:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80008da:	b007      	add	sp, #28
 80008dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80008e0:	200121a0 	.word	0x200121a0

080008e4 <TS_IO_ReadMultiple>:
      * @param  Buffer: Pointer to data buffer
      * @param  Length: Length of the data
      * @retval Number of read data
      */
    __weak uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t* Buffer, uint16_t Length)
    {
 80008e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80008e6:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80008ea:	9200      	str	r2, [sp, #0]
 80008ec:	460a      	mov	r2, r1
 80008ee:	4601      	mov	r1, r0
 80008f0:	4807      	ldr	r0, [pc, #28]	; (8000910 <TS_IO_ReadMultiple+0x2c>)
 80008f2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80008f6:	2301      	movs	r3, #1
 80008f8:	f009 fa74 	bl	8009de4 <HAL_I2C_Mem_Read>
        if (status != HAL_OK)
 80008fc:	4604      	mov	r4, r0
 80008fe:	b120      	cbz	r0, 800090a <TS_IO_ReadMultiple+0x26>
        HAL_I2C_DeInit(i2c_handler);
 8000900:	4803      	ldr	r0, [pc, #12]	; (8000910 <TS_IO_ReadMultiple+0x2c>)
 8000902:	f009 f84d 	bl	80099a0 <HAL_I2C_DeInit>
        MX_I2C4_Init();
 8000906:	f003 fa3b 	bl	8003d80 <MX_I2C4_Init>
        return I2Cx_ReadMultiple(&hi2c4, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
    }
 800090a:	b2a0      	uxth	r0, r4
 800090c:	b004      	add	sp, #16
 800090e:	bd10      	pop	{r4, pc}
 8000910:	200121a0 	.word	0x200121a0

08000914 <BSP_TS_Init>:
      * @param  ts_SizeX : Maximum X size of the TS area on LCD
      * @param  ts_SizeY : Maximum Y size of the TS area on LCD
      * @retval TS_OK if all initializations are OK. Other value if error.
      */
    __weak uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
    {
 8000914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        /* Note : I2C_Address is un-initialized here, but is not used at all in init function */
        /* but the prototype of Init() is like that in template and should be respected       */

        /* Initialize the communication channel to sensor (I2C) if necessary */
        /* that is initialization is done only once after a power up         */
        ft6x06_ts_drv.Init(I2C_Address);
 8000916:	4d13      	ldr	r5, [pc, #76]	; (8000964 <BSP_TS_Init+0x50>)
    {
 8000918:	4606      	mov	r6, r0
        ft6x06_ts_drv.Init(I2C_Address);
 800091a:	4c13      	ldr	r4, [pc, #76]	; (8000968 <BSP_TS_Init+0x54>)
    {
 800091c:	460f      	mov	r7, r1
        ft6x06_ts_drv.Init(I2C_Address);
 800091e:	682b      	ldr	r3, [r5, #0]
 8000920:	7820      	ldrb	r0, [r4, #0]
 8000922:	4798      	blx	r3

        ts_id1 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 8000924:	686b      	ldr	r3, [r5, #4]
 8000926:	2054      	movs	r0, #84	; 0x54
 8000928:	4798      	blx	r3
        if (ts_id1 != FT6206_ID_VALUE)
 800092a:	b2c0      	uxtb	r0, r0
 800092c:	2811      	cmp	r0, #17
 800092e:	d009      	beq.n	8000944 <BSP_TS_Init+0x30>
        {
            ts_id2 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS_A02);
 8000930:	686b      	ldr	r3, [r5, #4]
 8000932:	2070      	movs	r0, #112	; 0x70
 8000934:	4798      	blx	r3
            I2C_Address    = TS_I2C_ADDRESS_A02;
 8000936:	2370      	movs	r3, #112	; 0x70
            I2C_Address    = TS_I2C_ADDRESS;
        }

        /* Scan FT6xx6 TouchScreen IC controller ID register by I2C Read       */
        /* Verify this is a FT6206 or FT6336G, otherwise this is an error case */
        if ((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 8000938:	b2c0      	uxtb	r0, r0
            I2C_Address    = TS_I2C_ADDRESS_A02;
 800093a:	7023      	strb	r3, [r4, #0]
        if ((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 800093c:	2811      	cmp	r0, #17
 800093e:	d003      	beq.n	8000948 <BSP_TS_Init+0x34>

            } /* of if(ts_status == TS_OK) */
        }
        else
        {
            ts_status = TS_DEVICE_NOT_FOUND;
 8000940:	2003      	movs	r0, #3
        }

        return (ts_status);
    }
 8000942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            I2C_Address    = TS_I2C_ADDRESS;
 8000944:	2354      	movs	r3, #84	; 0x54
 8000946:	7023      	strb	r3, [r4, #0]
            if (ts_SizeX < ts_SizeY)
 8000948:	4b08      	ldr	r3, [pc, #32]	; (800096c <BSP_TS_Init+0x58>)
                ts_orientation = TS_SWAP_XY | TS_SWAP_Y;
 800094a:	42be      	cmp	r6, r7
 800094c:	bf34      	ite	cc
 800094e:	2601      	movcc	r6, #1
 8000950:	260c      	movcs	r6, #12
                ft6x06_ts_drv.Reset(I2C_Address);
 8000952:	7820      	ldrb	r0, [r4, #0]
 8000954:	701e      	strb	r6, [r3, #0]
 8000956:	68ab      	ldr	r3, [r5, #8]
 8000958:	4798      	blx	r3
                ft6x06_ts_drv.Start(I2C_Address);
 800095a:	7820      	ldrb	r0, [r4, #0]
 800095c:	68eb      	ldr	r3, [r5, #12]
 800095e:	4798      	blx	r3
        uint8_t ts_status = TS_OK;
 8000960:	2000      	movs	r0, #0
 8000962:	e7ee      	b.n	8000942 <BSP_TS_Init+0x2e>
 8000964:	20000038 	.word	0x20000038
 8000968:	20009770 	.word	0x20009770
 800096c:	20009771 	.word	0x20009771

08000970 <_ZN20STM32TouchController4initEv>:
{
 8000970:	b508      	push	{r3, lr}
    if (BSP_TS_Init(800, 480) == TS_OK)
 8000972:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8000976:	f44f 7048 	mov.w	r0, #800	; 0x320
 800097a:	f7ff ffcb 	bl	8000914 <BSP_TS_Init>
 800097e:	4b07      	ldr	r3, [pc, #28]	; (800099c <_ZN20STM32TouchController4initEv+0x2c>)
 8000980:	b910      	cbnz	r0, 8000988 <_ZN20STM32TouchController4initEv+0x18>
        bsp_ts_initialized = true;
 8000982:	2201      	movs	r2, #1
 8000984:	701a      	strb	r2, [r3, #0]
}
 8000986:	bd08      	pop	{r3, pc}
    assert(bsp_ts_initialized);
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d1fb      	bne.n	8000986 <_ZN20STM32TouchController4initEv+0x16>
 800098e:	4b04      	ldr	r3, [pc, #16]	; (80009a0 <_ZN20STM32TouchController4initEv+0x30>)
 8000990:	216a      	movs	r1, #106	; 0x6a
 8000992:	4a04      	ldr	r2, [pc, #16]	; (80009a4 <_ZN20STM32TouchController4initEv+0x34>)
 8000994:	4804      	ldr	r0, [pc, #16]	; (80009a8 <_ZN20STM32TouchController4initEv+0x38>)
 8000996:	f025 f93b 	bl	8025c10 <__assert_func>
 800099a:	bf00      	nop
 800099c:	20009772 	.word	0x20009772
 80009a0:	08026f94 	.word	0x08026f94
 80009a4:	08026fa7 	.word	0x08026fa7
 80009a8:	08026fd1 	.word	0x08026fd1

080009ac <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
__weak uint8_t BSP_TS_GetState(TS_StateTypeDef* TS_State)
{
 80009ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint16_t xDiff;
    uint16_t yDiff;
    uint32_t index;

    /* Check and update the number of touches active detected */
    TS_State->touchDetected = ft6x06_ts_drv.DetectTouch(I2C_Address);
 80009b0:	4a35      	ldr	r2, [pc, #212]	; (8000a88 <BSP_TS_GetState+0xdc>)
{
 80009b2:	4607      	mov	r7, r0
    TS_State->touchDetected = ft6x06_ts_drv.DetectTouch(I2C_Address);
 80009b4:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 8000a98 <BSP_TS_GetState+0xec>
{
 80009b8:	b085      	sub	sp, #20
    TS_State->touchDetected = ft6x06_ts_drv.DetectTouch(I2C_Address);
 80009ba:	7810      	ldrb	r0, [r2, #0]
 80009bc:	f8da 3010 	ldr.w	r3, [sl, #16]
 80009c0:	4798      	blx	r3
 80009c2:	7038      	strb	r0, [r7, #0]
    if (TS_State->touchDetected)
 80009c4:	2800      	cmp	r0, #0
 80009c6:	d05a      	beq.n	8000a7e <BSP_TS_GetState+0xd2>
 80009c8:	4e30      	ldr	r6, [pc, #192]	; (8000a8c <BSP_TS_GetState+0xe0>)
 80009ca:	f107 0902 	add.w	r9, r7, #2
 80009ce:	4d30      	ldr	r5, [pc, #192]	; (8000a90 <BSP_TS_GetState+0xe4>)
 80009d0:	f10d 0b0c 	add.w	fp, sp, #12
 80009d4:	ac02      	add	r4, sp, #8
    {
        for (index = 0; index < TS_State->touchDetected; index++)
 80009d6:	f04f 0800 	mov.w	r8, #0
 80009da:	783b      	ldrb	r3, [r7, #0]
 80009dc:	4543      	cmp	r3, r8
 80009de:	d94e      	bls.n	8000a7e <BSP_TS_GetState+0xd2>
        {
            /* Get each touch coordinates */
            ft6x06_ts_drv.GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 80009e0:	4829      	ldr	r0, [pc, #164]	; (8000a88 <BSP_TS_GetState+0xdc>)
 80009e2:	465a      	mov	r2, fp
 80009e4:	4621      	mov	r1, r4
 80009e6:	f8da 3014 	ldr.w	r3, [sl, #20]
 80009ea:	7800      	ldrb	r0, [r0, #0]
        for (index = 0; index < TS_State->touchDetected; index++)
 80009ec:	f108 0801 	add.w	r8, r8, #1
            ft6x06_ts_drv.GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 80009f0:	4798      	blx	r3

            if (ts_orientation & TS_SWAP_XY)
 80009f2:	4b28      	ldr	r3, [pc, #160]	; (8000a94 <BSP_TS_GetState+0xe8>)
 80009f4:	46b4      	mov	ip, r6
 80009f6:	46ae      	mov	lr, r5
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	3604      	adds	r6, #4
 80009fc:	3504      	adds	r5, #4
 80009fe:	0719      	lsls	r1, r3, #28
            {
                tmp = Raw_x[index];
 8000a00:	bf41      	itttt	mi
 8000a02:	8822      	ldrhmi	r2, [r4, #0]
                Raw_x[index] = Raw_y[index];
 8000a04:	f8bb 1000 	ldrhmi.w	r1, [fp]
                Raw_y[index] = tmp;
 8000a08:	f8ab 2000 	strhmi.w	r2, [fp]
                Raw_x[index] = Raw_y[index];
 8000a0c:	8021      	strhmi	r1, [r4, #0]
            }

            if (ts_orientation & TS_SWAP_X)
 8000a0e:	079a      	lsls	r2, r3, #30
            {
                Raw_x[index] = FT_6206_MAX_WIDTH - 1 - Raw_x[index];
 8000a10:	bf41      	itttt	mi
 8000a12:	8822      	ldrhmi	r2, [r4, #0]
 8000a14:	f5c2 7247 	rsbmi	r2, r2, #796	; 0x31c
 8000a18:	3203      	addmi	r2, #3
 8000a1a:	8022      	strhmi	r2, [r4, #0]
            }

            if (ts_orientation & TS_SWAP_Y)
 8000a1c:	075b      	lsls	r3, r3, #29
            {
                Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
            }

            xDiff = Raw_x[index] > _x[index] ? (Raw_x[index] - _x[index]) : (_x[index] - Raw_x[index]);
 8000a1e:	f856 2c04 	ldr.w	r2, [r6, #-4]
                Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
 8000a22:	bf48      	it	mi
 8000a24:	f8bb 3000 	ldrhmi.w	r3, [fp]
            xDiff = Raw_x[index] > _x[index] ? (Raw_x[index] - _x[index]) : (_x[index] - Raw_x[index]);
 8000a28:	f834 0b02 	ldrh.w	r0, [r4], #2
                Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
 8000a2c:	bf42      	ittt	mi
 8000a2e:	f5c3 73ef 	rsbmi	r3, r3, #478	; 0x1de
 8000a32:	3301      	addmi	r3, #1
 8000a34:	f8ab 3000 	strhmi.w	r3, [fp]
            xDiff = Raw_x[index] > _x[index] ? (Raw_x[index] - _x[index]) : (_x[index] - Raw_x[index]);
 8000a38:	b293      	uxth	r3, r2
 8000a3a:	4290      	cmp	r0, r2
            yDiff = Raw_y[index] > _y[index] ? (Raw_y[index] - _y[index]) : (_y[index] - Raw_y[index]);
 8000a3c:	f83b 1b02 	ldrh.w	r1, [fp], #2
            xDiff = Raw_x[index] > _x[index] ? (Raw_x[index] - _x[index]) : (_x[index] - Raw_x[index]);
 8000a40:	bf8c      	ite	hi
 8000a42:	1ac3      	subhi	r3, r0, r3
 8000a44:	1a1b      	subls	r3, r3, r0
 8000a46:	b29b      	uxth	r3, r3
 8000a48:	9301      	str	r3, [sp, #4]
            yDiff = Raw_y[index] > _y[index] ? (Raw_y[index] - _y[index]) : (_y[index] - Raw_y[index]);
 8000a4a:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8000a4e:	b29a      	uxth	r2, r3
 8000a50:	4299      	cmp	r1, r3

            if ((xDiff + yDiff) > 5)
 8000a52:	9b01      	ldr	r3, [sp, #4]
            yDiff = Raw_y[index] > _y[index] ? (Raw_y[index] - _y[index]) : (_y[index] - Raw_y[index]);
 8000a54:	bf8c      	ite	hi
 8000a56:	1a8a      	subhi	r2, r1, r2
 8000a58:	1a52      	subls	r2, r2, r1
 8000a5a:	b292      	uxth	r2, r2
            if ((xDiff + yDiff) > 5)
 8000a5c:	441a      	add	r2, r3
 8000a5e:	2a05      	cmp	r2, #5
            {
                _x[index] = Raw_x[index];
 8000a60:	bfc8      	it	gt
 8000a62:	f846 0c04 	strgt.w	r0, [r6, #-4]
                _y[index] = Raw_y[index];
            }


            TS_State->touchX[index] = _x[index];
 8000a66:	f8dc 3000 	ldr.w	r3, [ip]
                _y[index] = Raw_y[index];
 8000a6a:	bfc8      	it	gt
 8000a6c:	f845 1c04 	strgt.w	r1, [r5, #-4]
            TS_State->touchX[index] = _x[index];
 8000a70:	f829 3b02 	strh.w	r3, [r9], #2
            TS_State->touchY[index] = _y[index];
 8000a74:	f8de 3000 	ldr.w	r3, [lr]
 8000a78:	f8a9 3002 	strh.w	r3, [r9, #2]
        for (index = 0; index < TS_State->touchDetected; index++)
 8000a7c:	e7ad      	b.n	80009da <BSP_TS_GetState+0x2e>
        } /* of for(index=0; index < TS_State->touchDetected; index++) */
    } /* end of if(TS_State->touchDetected != 0) */

    return (ts_status);
}
 8000a7e:	2000      	movs	r0, #0
 8000a80:	b005      	add	sp, #20
 8000a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a86:	bf00      	nop
 8000a88:	20009770 	.word	0x20009770
 8000a8c:	20009774 	.word	0x20009774
 8000a90:	2000977c 	.word	0x2000977c
 8000a94:	20009771 	.word	0x20009771
 8000a98:	20000038 	.word	0x20000038

08000a9c <_ZN20STM32TouchController11sampleTouchERlS0_>:
{
 8000a9c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (bsp_ts_initialized)
 8000a9e:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>)
{
 8000aa0:	460e      	mov	r6, r1
 8000aa2:	4615      	mov	r5, r2
    if (bsp_ts_initialized)
 8000aa4:	781c      	ldrb	r4, [r3, #0]
 8000aa6:	b15c      	cbz	r4, 8000ac0 <_ZN20STM32TouchController11sampleTouchERlS0_+0x24>
        BSP_TS_GetState(&state);
 8000aa8:	a801      	add	r0, sp, #4
 8000aaa:	f7ff ff7f 	bl	80009ac <BSP_TS_GetState>
        if (state.touchDetected)
 8000aae:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000ab2:	b143      	cbz	r3, 8000ac6 <_ZN20STM32TouchController11sampleTouchERlS0_+0x2a>
            x = state.touchX[0];
 8000ab4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000ab8:	6033      	str	r3, [r6, #0]
            y = state.touchY[0];
 8000aba:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8000abe:	602b      	str	r3, [r5, #0]
}
 8000ac0:	4620      	mov	r0, r4
 8000ac2:	b004      	add	sp, #16
 8000ac4:	bd70      	pop	{r4, r5, r6, pc}
    return false;
 8000ac6:	461c      	mov	r4, r3
 8000ac8:	e7fa      	b.n	8000ac0 <_ZN20STM32TouchController11sampleTouchERlS0_+0x24>
 8000aca:	bf00      	nop
 8000acc:	20009772 	.word	0x20009772

08000ad0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 8000ad0:	2803      	cmp	r0, #3
 8000ad2:	d823      	bhi.n	8000b1c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>
 8000ad4:	e8df f000 	tbb	[pc, r0]
 8000ad8:	1a120b02 	.word	0x1a120b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8000adc:	4b10      	ldr	r3, [pc, #64]	; (8000b20 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8000ade:	2140      	movs	r1, #64	; 0x40
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	fab2 f282 	clz	r2, r2
 8000ae6:	0952      	lsrs	r2, r2, #5
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8000ae8:	480e      	ldr	r0, [pc, #56]	; (8000b24 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8000aea:	f008 bd99 	b.w	8009620 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8000aee:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8000af0:	2180      	movs	r1, #128	; 0x80
 8000af2:	685a      	ldr	r2, [r3, #4]
 8000af4:	fab2 f282 	clz	r2, r2
 8000af8:	0952      	lsrs	r2, r2, #5
 8000afa:	e7f5      	b.n	8000ae8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 8000afc:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8000afe:	2102      	movs	r1, #2
 8000b00:	4809      	ldr	r0, [pc, #36]	; (8000b28 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
 8000b02:	689a      	ldr	r2, [r3, #8]
 8000b04:	fab2 f282 	clz	r2, r2
 8000b08:	0952      	lsrs	r2, r2, #5
 8000b0a:	e7ee      	b.n	8000aea <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8000b0c:	4b04      	ldr	r3, [pc, #16]	; (8000b20 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8000b0e:	2140      	movs	r1, #64	; 0x40
 8000b10:	4806      	ldr	r0, [pc, #24]	; (8000b2c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5c>)
 8000b12:	68da      	ldr	r2, [r3, #12]
 8000b14:	fab2 f282 	clz	r2, r2
 8000b18:	0952      	lsrs	r2, r2, #5
 8000b1a:	e7e6      	b.n	8000aea <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	20009784 	.word	0x20009784
 8000b24:	40020800 	.word	0x40020800
 8000b28:	40022400 	.word	0x40022400
 8000b2c:	40021400 	.word	0x40021400

08000b30 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8000b30:	2803      	cmp	r0, #3
 8000b32:	d823      	bhi.n	8000b7c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>
 8000b34:	e8df f000 	tbb	[pc, r0]
 8000b38:	1a120b02 	.word	0x1a120b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 8000b3c:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8000b3e:	2140      	movs	r1, #64	; 0x40
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	3a00      	subs	r2, #0
 8000b44:	bf18      	it	ne
 8000b46:	2201      	movne	r2, #1
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8000b48:	480e      	ldr	r0, [pc, #56]	; (8000b84 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8000b4a:	f008 bd69 	b.w	8009620 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8000b4e:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8000b50:	2180      	movs	r1, #128	; 0x80
 8000b52:	685a      	ldr	r2, [r3, #4]
 8000b54:	3a00      	subs	r2, #0
 8000b56:	bf18      	it	ne
 8000b58:	2201      	movne	r2, #1
 8000b5a:	e7f5      	b.n	8000b48 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 8000b5c:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8000b5e:	2102      	movs	r1, #2
 8000b60:	4809      	ldr	r0, [pc, #36]	; (8000b88 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
 8000b62:	689a      	ldr	r2, [r3, #8]
 8000b64:	3a00      	subs	r2, #0
 8000b66:	bf18      	it	ne
 8000b68:	2201      	movne	r2, #1
 8000b6a:	e7ee      	b.n	8000b4a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8000b6c:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8000b6e:	2140      	movs	r1, #64	; 0x40
 8000b70:	4806      	ldr	r0, [pc, #24]	; (8000b8c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5c>)
 8000b72:	68da      	ldr	r2, [r3, #12]
 8000b74:	3a00      	subs	r2, #0
 8000b76:	bf18      	it	ne
 8000b78:	2201      	movne	r2, #1
 8000b7a:	e7e6      	b.n	8000b4a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	20009784 	.word	0x20009784
 8000b84:	40020800 	.word	0x40020800
 8000b88:	40022400 	.word	0x40022400
 8000b8c:	40021400 	.word	0x40021400

08000b90 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 8000b90:	2803      	cmp	r0, #3
 8000b92:	d80f      	bhi.n	8000bb4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x24>
 8000b94:	e8df f000 	tbb	[pc, r0]
 8000b98:	0b080602 	.word	0x0b080602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8000b9c:	2140      	movs	r1, #64	; 0x40
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8000b9e:	4806      	ldr	r0, [pc, #24]	; (8000bb8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x28>)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8000ba0:	f008 bd43 	b.w	800962a <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8000ba4:	2180      	movs	r1, #128	; 0x80
 8000ba6:	e7fa      	b.n	8000b9e <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8000ba8:	2102      	movs	r1, #2
 8000baa:	4804      	ldr	r0, [pc, #16]	; (8000bbc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>)
 8000bac:	e7f8      	b.n	8000ba0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8000bae:	2140      	movs	r1, #64	; 0x40
 8000bb0:	4803      	ldr	r0, [pc, #12]	; (8000bc0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x30>)
 8000bb2:	e7f5      	b.n	8000ba0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
#endif
        break;
    }
}
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	40020800 	.word	0x40020800
 8000bbc:	40022400 	.word	0x40022400
 8000bc0:	40021400 	.word	0x40021400

08000bc4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8000bc4:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 8000bc6:	2803      	cmp	r0, #3
 8000bc8:	d813      	bhi.n	8000bf2 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x2e>
 8000bca:	e8df f000 	tbb	[pc, r0]
 8000bce:	0a02      	.short	0x0a02
 8000bd0:	0f0c      	.short	0x0f0c
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8000bd2:	2140      	movs	r1, #64	; 0x40
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8000bd4:	4808      	ldr	r0, [pc, #32]	; (8000bf8 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x34>)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8000bd6:	f008 fd1d 	bl	8009614 <HAL_GPIO_ReadPin>
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 8000bda:	1e43      	subs	r3, r0, #1
 8000bdc:	4258      	negs	r0, r3
 8000bde:	4158      	adcs	r0, r3
 8000be0:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8000be2:	2180      	movs	r1, #128	; 0x80
 8000be4:	e7f6      	b.n	8000bd4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8000be6:	2102      	movs	r1, #2
 8000be8:	4804      	ldr	r0, [pc, #16]	; (8000bfc <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x38>)
 8000bea:	e7f4      	b.n	8000bd6 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8000bec:	2140      	movs	r1, #64	; 0x40
 8000bee:	4804      	ldr	r0, [pc, #16]	; (8000c00 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x3c>)
 8000bf0:	e7f1      	b.n	8000bd6 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
    switch (id)
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	e7f1      	b.n	8000bda <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 8000bf6:	bf00      	nop
 8000bf8:	40020800 	.word	0x40020800
 8000bfc:	40022400 	.word	0x40022400
 8000c00:	40021400 	.word	0x40021400

08000c04 <_ZN8touchgfx4GPIO4initEv>:
{
 8000c04:	b570      	push	{r4, r5, r6, lr}
 8000c06:	4d08      	ldr	r5, [pc, #32]	; (8000c28 <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 8000c08:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 8000c0a:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8000c0c:	b2e0      	uxtb	r0, r4
 8000c0e:	f7ff ffd9 	bl	8000bc4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8000c12:	b118      	cbz	r0, 8000c1c <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 8000c14:	682b      	ldr	r3, [r5, #0]
 8000c16:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 8000c18:	bf18      	it	ne
 8000c1a:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 8000c1c:	3401      	adds	r4, #1
 8000c1e:	3504      	adds	r5, #4
 8000c20:	2c05      	cmp	r4, #5
 8000c22:	d1f3      	bne.n	8000c0c <_ZN8touchgfx4GPIO4initEv+0x8>
}
 8000c24:	bd70      	pop	{r4, r5, r6, pc}
 8000c26:	bf00      	nop
 8000c28:	20009784 	.word	0x20009784

08000c2c <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8000c2c:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8000c2e:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8000c32:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
 8000c36:	4770      	bx	lr

08000c38 <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 8000c38:	2000      	movs	r0, #0
 8000c3a:	4770      	bx	lr

08000c3c <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8000c3c:	6441      	str	r1, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8000c3e:	3900      	subs	r1, #0
 8000c40:	4b02      	ldr	r3, [pc, #8]	; (8000c4c <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 8000c42:	bf18      	it	ne
 8000c44:	2101      	movne	r1, #1
 8000c46:	7019      	strb	r1, [r3, #0]
    }
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	20027bc3 	.word	0x20027bc3

08000c50 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8000c50:	2000      	movs	r0, #0
 8000c52:	4770      	bx	lr

08000c54 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8000c54:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8000c56:	b10b      	cbz	r3, 8000c5c <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 8000c58:	4608      	mov	r0, r1
 8000c5a:	4718      	bx	r3
        }
    }
 8000c5c:	4770      	bx	lr

08000c5e <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8000c5e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000c62:	4770      	bx	lr

08000c64 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8000c64:	6840      	ldr	r0, [r0, #4]
 8000c66:	6803      	ldr	r3, [r0, #0]
 8000c68:	699b      	ldr	r3, [r3, #24]
 8000c6a:	4718      	bx	r3

08000c6c <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // and implemented needed functionality here.

    /* USER CODE BEGIN getTFTFrameBuffer */
    return currFbBase;
    /* USER CODE END getTFTFrameBuffer */
}
 8000c6c:	4b01      	ldr	r3, [pc, #4]	; (8000c74 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv+0x8>)
 8000c6e:	6818      	ldr	r0, [r3, #0]
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	20009794 	.word	0x20009794

08000c78 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8000c78:	4770      	bx	lr
	...

08000c7c <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8000c7c:	b4f0      	push	{r4, r5, r6, r7}
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000c7e:	2300      	movs	r3, #0
 8000c80:	4c10      	ldr	r4, [pc, #64]	; (8000cc4 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x48>)
 8000c82:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c86:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000c8a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000c8e:	f643 76e0 	movw	r6, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000c92:	f3c3 05c9 	ubfx	r5, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000c96:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8000c9a:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000c9c:	ea03 0c06 	and.w	ip, r3, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000ca0:	462a      	mov	r2, r5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000ca2:	ea4c 7782 	orr.w	r7, ip, r2, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000ca6:	3a01      	subs	r2, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000ca8:	f8c4 7274 	str.w	r7, [r4, #628]	; 0x274
      } while (ways-- != 0U);
 8000cac:	d2f9      	bcs.n	8000ca2 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x26>
    } while(sets-- != 0U);
 8000cae:	3b20      	subs	r3, #32
 8000cb0:	f113 0f20 	cmn.w	r3, #32
 8000cb4:	d1f2      	bne.n	8000c9c <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x20>
 8000cb6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000cba:	f3bf 8f6f 	isb	sy
    /* USER CODE END flushFrameBuffer step 1 */

    /* USER CODE BEGIN flushFrameBuffer step 2 */
    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
    /* USER CODE END flushFrameBuffer step 2 */
}
 8000cbe:	bcf0      	pop	{r4, r5, r6, r7}
    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8000cc0:	f001 bb68 	b.w	8002394 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8000cc8:	b508      	push	{r3, lr}
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN enableInterrupts */
    TouchGFXGeneratedHAL::enableInterrupts();
 8000cca:	f001 faf7 	bl	80022bc <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cce:	4b02      	ldr	r3, [pc, #8]	; (8000cd8 <_ZN11TouchGFXHAL16enableInterruptsEv+0x10>)
 8000cd0:	2204      	movs	r2, #4
 8000cd2:	60da      	str	r2, [r3, #12]
    NVIC_EnableIRQ(DSI_IRQn);
    /* USER CODE END enableInterrupts */
}
 8000cd4:	bd08      	pop	{r3, pc}
 8000cd6:	bf00      	nop
 8000cd8:	e000e100 	.word	0xe000e100

08000cdc <_ZN11TouchGFXHAL8endFrameEv>:
    refreshRequested = false;
    return HAL::beginFrame();
}

void TouchGFXHAL::endFrame()
{
 8000cdc:	b510      	push	{r4, lr}
 8000cde:	4604      	mov	r4, r0
    TouchGFXGeneratedHAL::endFrame();
 8000ce0:	f001 fc60 	bl	80025a4 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
    if (frameBufferUpdatedThisFrame)
 8000ce4:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 8000ce8:	b113      	cbz	r3, 8000cf0 <_ZN11TouchGFXHAL8endFrameEv+0x14>
    {
        refreshRequested = true;
 8000cea:	4b02      	ldr	r3, [pc, #8]	; (8000cf4 <_ZN11TouchGFXHAL8endFrameEv+0x18>)
 8000cec:	2201      	movs	r2, #1
 8000cee:	701a      	strb	r2, [r3, #0]
    }
}
 8000cf0:	bd10      	pop	{r4, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000014 	.word	0x20000014

08000cf8 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8000cf8:	f001 bae9 	b.w	80022ce <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

08000cfc <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8000cfc:	b510      	push	{r4, lr}
 8000cfe:	4604      	mov	r4, r0
        swapFrameBuffers();
 8000d00:	f010 f972 	bl	8010fe8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8000d04:	6823      	ldr	r3, [r4, #0]
 8000d06:	4620      	mov	r0, r4
 8000d08:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    }
 8000d0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8000d10:	4718      	bx	r3

08000d12 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 8000d12:	f00f bbcf 	b.w	80104b4 <_ZN8touchgfx3HAL16flushFrameBufferEv>

08000d16 <_ZN11TouchGFXHALD0Ev>:
 8000d16:	b510      	push	{r4, lr}
 8000d18:	4604      	mov	r4, r0
 8000d1a:	217c      	movs	r1, #124	; 0x7c
 8000d1c:	f024 ff49 	bl	8025bb2 <_ZdlPvj>
 8000d20:	4620      	mov	r0, r4
 8000d22:	bd10      	pop	{r4, pc}

08000d24 <_ZN11TouchGFXHAL10beginFrameEv>:
    refreshRequested = false;
 8000d24:	4b02      	ldr	r3, [pc, #8]	; (8000d30 <_ZN11TouchGFXHAL10beginFrameEv+0xc>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	701a      	strb	r2, [r3, #0]
    return HAL::beginFrame();
 8000d2a:	f00f bbff 	b.w	801052c <_ZN8touchgfx3HAL10beginFrameEv>
 8000d2e:	bf00      	nop
 8000d30:	20000014 	.word	0x20000014

08000d34 <_ZN11TouchGFXHAL10initializeEv>:
{
 8000d34:	b538      	push	{r3, r4, r5, lr}
 8000d36:	4604      	mov	r4, r0
    GPIO::init();
 8000d38:	f7ff ff64 	bl	8000c04 <_ZN8touchgfx4GPIO4initEv>
    instrumentation.init();
 8000d3c:	4d08      	ldr	r5, [pc, #32]	; (8000d60 <_ZN11TouchGFXHAL10initializeEv+0x2c>)
    TouchGFXGeneratedHAL::initialize();
 8000d3e:	4620      	mov	r0, r4
 8000d40:	f001 fb02 	bl	8002348 <_ZN20TouchGFXGeneratedHAL10initializeEv>
        lockDMAToPorch = enableLock;
 8000d44:	2300      	movs	r3, #0
    instrumentation.init();
 8000d46:	4628      	mov	r0, r5
 8000d48:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
 8000d4c:	f7ff fd1a 	bl	8000784 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>
        updateMCULoad = enabled;
 8000d50:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 8000d52:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8000d54:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
        buttonController = btnCtrl;
 8000d58:	4b02      	ldr	r3, [pc, #8]	; (8000d64 <_ZN11TouchGFXHAL10initializeEv+0x30>)
 8000d5a:	6163      	str	r3, [r4, #20]
}
 8000d5c:	bd38      	pop	{r3, r4, r5, pc}
 8000d5e:	bf00      	nop
 8000d60:	2000979c 	.word	0x2000979c
 8000d64:	200097a8 	.word	0x200097a8

08000d68 <_ZN11TouchGFXHAL9taskEntryEv>:
    enableLCDControllerInterrupt();
 8000d68:	6803      	ldr	r3, [r0, #0]
{
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	b507      	push	{r0, r1, r2, lr}
    enableLCDControllerInterrupt();
 8000d6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d72:	4798      	blx	r3
    enableInterrupts();
 8000d74:	6823      	ldr	r3, [r4, #0]
 8000d76:	4620      	mov	r0, r4
 8000d78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000d7a:	4798      	blx	r3
    OSWrappers::waitForVSync();
 8000d7c:	f000 fef4 	bl	8001b68 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 8000d80:	6823      	ldr	r3, [r4, #0]
 8000d82:	4620      	mov	r0, r4
 8000d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d86:	4798      	blx	r3
    HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPON, 0x00);
 8000d88:	2100      	movs	r1, #0
 8000d8a:	2329      	movs	r3, #41	; 0x29
 8000d8c:	2215      	movs	r2, #21
 8000d8e:	4805      	ldr	r0, [pc, #20]	; (8000da4 <_ZN11TouchGFXHAL9taskEntryEv+0x3c>)
 8000d90:	9100      	str	r1, [sp, #0]
 8000d92:	f008 fa30 	bl	80091f6 <HAL_DSI_ShortWrite>
        OSWrappers::waitForVSync();
 8000d96:	f000 fee7 	bl	8001b68 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8000d9a:	6823      	ldr	r3, [r4, #0]
 8000d9c:	4620      	mov	r0, r4
 8000d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000da0:	4798      	blx	r3
    for (;;)
 8000da2:	e7f8      	b.n	8000d96 <_ZN11TouchGFXHAL9taskEntryEv+0x2e>
 8000da4:	20012130 	.word	0x20012130

08000da8 <_ZN11TouchGFXHAL19configureInterruptsEv>:
{
 8000da8:	b508      	push	{r3, lr}
    TouchGFXGeneratedHAL::configureInterrupts();
 8000daa:	f001 fa7f 	bl	80022ac <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8000dae:	2200      	movs	r2, #0
 8000db0:	2107      	movs	r1, #7
 8000db2:	205a      	movs	r0, #90	; 0x5a
 8000db4:	f007 fb22 	bl	80083fc <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(DSI_IRQn, 7, 0);
 8000db8:	2200      	movs	r2, #0
 8000dba:	2107      	movs	r1, #7
 8000dbc:	2062      	movs	r0, #98	; 0x62
}
 8000dbe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_SetPriority(DSI_IRQn, 7, 0);
 8000dc2:	f007 bb1b 	b.w	80083fc <HAL_NVIC_SetPriority>

08000dc6 <_ZN8touchgfx3HAL11getBlitCapsEv>:
        if (useDMAAcceleration)
 8000dc6:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
 8000dca:	b11b      	cbz	r3, 8000dd4 <_ZN8touchgfx3HAL11getBlitCapsEv+0xe>
            return dma.getBlitCaps();
 8000dcc:	6840      	ldr	r0, [r0, #4]
 8000dce:	6803      	ldr	r3, [r0, #0]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4718      	bx	r3
    }
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	4770      	bx	lr

08000dd8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8000dd8:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
        {
            if (DISPLAY_ROTATION == rotate0)
 8000ddc:	4b0d      	ldr	r3, [pc, #52]	; (8000e14 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 8000dde:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8000de0:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
            if (DISPLAY_ROTATION == rotate0)
 8000de4:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 8000de6:	428c      	cmp	r4, r1
 8000de8:	d009      	beq.n	8000dfe <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 8000dea:	b93a      	cbnz	r2, 8000dfc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8000dec:	490a      	ldr	r1, [pc, #40]	; (8000e18 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000dee:	4a0b      	ldr	r2, [pc, #44]	; (8000e1c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 8000df0:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000df2:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 8000df4:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8000df6:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000df8:	800c      	strh	r4, [r1, #0]
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
 8000dfa:	701a      	strb	r2, [r3, #0]
        }
    }
 8000dfc:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8000dfe:	2a00      	cmp	r2, #0
 8000e00:	d0fc      	beq.n	8000dfc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000e02:	4a06      	ldr	r2, [pc, #24]	; (8000e1c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8000e04:	4904      	ldr	r1, [pc, #16]	; (8000e18 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000e06:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8000e08:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000e0a:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8000e0c:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8000e0e:	2200      	movs	r2, #0
 8000e10:	e7f3      	b.n	8000dfa <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 8000e12:	bf00      	nop
 8000e14:	20027bbc 	.word	0x20027bbc
 8000e18:	20027bba 	.word	0x20027bba
 8000e1c:	20027bb8 	.word	0x20027bb8

08000e20 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8000e20:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8000e22:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8000e24:	881b      	ldrh	r3, [r3, #0]
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d803      	bhi.n	8000e32 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 8000e2a:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8000e2c:	881b      	ldrh	r3, [r3, #0]
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d905      	bls.n	8000e3e <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8000e32:	4b07      	ldr	r3, [pc, #28]	; (8000e50 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8000e34:	219e      	movs	r1, #158	; 0x9e
 8000e36:	4a07      	ldr	r2, [pc, #28]	; (8000e54 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8000e38:	4807      	ldr	r0, [pc, #28]	; (8000e58 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8000e3a:	f024 fee9 	bl	8025c10 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8000e3e:	4b07      	ldr	r3, [pc, #28]	; (8000e5c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8000e40:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8000e42:	4b07      	ldr	r3, [pc, #28]	; (8000e60 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8000e44:	801a      	strh	r2, [r3, #0]
    }
 8000e46:	bd08      	pop	{r3, pc}
 8000e48:	20027bb8 	.word	0x20027bb8
 8000e4c:	20027bba 	.word	0x20027bba
 8000e50:	0802704c 	.word	0x0802704c
 8000e54:	080270af 	.word	0x080270af
 8000e58:	080270f2 	.word	0x080270f2
 8000e5c:	20027bbe 	.word	0x20027bbe
 8000e60:	20027bc0 	.word	0x20027bc0

08000e64 <_ZN11TouchGFXHAL17disableInterruptsEv>:
{
 8000e64:	b508      	push	{r3, lr}
    TouchGFXGeneratedHAL::disableInterrupts();
 8000e66:	f001 fbcf 	bl	8002608 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e6a:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <_ZN11TouchGFXHAL17disableInterruptsEv+0x18>)
 8000e6c:	2204      	movs	r2, #4
 8000e6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  __ASM volatile ("dsb 0xF":::"memory");
 8000e72:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000e76:	f3bf 8f6f 	isb	sy
}
 8000e7a:	bd08      	pop	{r3, pc}
 8000e7c:	e000e100 	.word	0xe000e100

08000e80 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_>:
{
 8000e80:	b570      	push	{r4, r5, r6, lr}
 8000e82:	460d      	mov	r5, r1
 8000e84:	4619      	mov	r1, r3
    currFbBase = (uint16_t*)frameBuffer;
 8000e86:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x34>)
 8000e88:	601d      	str	r5, [r3, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8000e8a:	b935      	cbnz	r5, 8000e9a <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x1a>
 8000e8c:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x38>)
 8000e8e:	f240 21d2 	movw	r1, #722	; 0x2d2
 8000e92:	4a0a      	ldr	r2, [pc, #40]	; (8000ebc <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x3c>)
 8000e94:	480a      	ldr	r0, [pc, #40]	; (8000ec0 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x40>)
 8000e96:	f024 febb 	bl	8025c10 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8000e9a:	e9c0 520f 	strd	r5, r2, [r0, #60]	; 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8000e9e:	3a00      	subs	r2, #0
 8000ea0:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x44>)
 8000ea2:	bf18      	it	ne
 8000ea4:	2201      	movne	r2, #1
 8000ea6:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8000ea8:	6803      	ldr	r3, [r0, #0]
}
 8000eaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8000eae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000eb2:	4718      	bx	r3
 8000eb4:	20009794 	.word	0x20009794
 8000eb8:	08027137 	.word	0x08027137
 8000ebc:	0802716f 	.word	0x0802716f
 8000ec0:	080270f2 	.word	0x080270f2
 8000ec4:	20027bc2 	.word	0x20027bc2

08000ec8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
          lastRenderMethod(HARDWARE)
 8000ec8:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8000ecc:	60c3      	str	r3, [r0, #12]
 8000ece:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	e9c0 2312 	strd	r2, r3, [r0, #72]	; 0x48
 8000ed8:	4a1e      	ldr	r2, [pc, #120]	; (8000f54 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x8c>)
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8000eda:	8503      	strh	r3, [r0, #40]	; 0x28
 8000edc:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8000ee0:	62c3      	str	r3, [r0, #44]	; 0x2c
 8000ee2:	8603      	strh	r3, [r0, #48]	; 0x30
 8000ee4:	6603      	str	r3, [r0, #96]	; 0x60
 8000ee6:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
 8000eea:	6703      	str	r3, [r0, #112]	; 0x70
 8000eec:	e9c0 2319 	strd	r2, r3, [r0, #100]	; 0x64
 8000ef0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 8000ef4:	b570      	push	{r4, r5, r6, lr}
 8000ef6:	6742      	str	r2, [r0, #116]	; 0x74
 8000ef8:	2201      	movs	r2, #1
                           height)
 8000efa:	f8bd 5010 	ldrh.w	r5, [sp, #16]
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 8000efe:	f8bd 6014 	ldrh.w	r6, [sp, #20]
                           height)
 8000f02:	3520      	adds	r5, #32
 8000f04:	e9c0 3304 	strd	r3, r3, [r0, #16]
              inProgress(false)
 8000f08:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8000f0c:	e9c0 3308 	strd	r3, r3, [r0, #32]
 8000f10:	e9c0 330e 	strd	r3, r3, [r0, #56]	; 0x38
 8000f14:	e9c0 3310 	strd	r3, r3, [r0, #64]	; 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 8000f18:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
 8000f1c:	e9c0 3316 	strd	r3, r3, [r0, #88]	; 0x58
 8000f20:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
 8000f24:	b2ad      	uxth	r5, r5
        instance = this;
 8000f26:	4a0c      	ldr	r2, [pc, #48]	; (8000f58 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x90>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8000f28:	42b5      	cmp	r5, r6
        instance = this;
 8000f2a:	6010      	str	r0, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8000f2c:	4a0b      	ldr	r2, [pc, #44]	; (8000f5c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x94>)
 8000f2e:	8015      	strh	r5, [r2, #0]
 8000f30:	4a0b      	ldr	r2, [pc, #44]	; (8000f60 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x98>)
 8000f32:	8015      	strh	r5, [r2, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8000f34:	bf28      	it	cs
 8000f36:	2500      	movcs	r5, #0
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8000f38:	4a0a      	ldr	r2, [pc, #40]	; (8000f64 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x9c>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8000f3a:	bf38      	it	cc
 8000f3c:	2501      	movcc	r5, #1
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8000f3e:	8016      	strh	r6, [r2, #0]
 8000f40:	4a09      	ldr	r2, [pc, #36]	; (8000f68 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa0>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8000f42:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8000f46:	8016      	strh	r6, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8000f48:	4a08      	ldr	r2, [pc, #32]	; (8000f6c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa4>)
 8000f4a:	7013      	strb	r3, [r2, #0]
 8000f4c:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa8>)
 8000f4e:	6003      	str	r3, [r0, #0]
}
 8000f50:	bd70      	pop	{r4, r5, r6, pc}
 8000f52:	bf00      	nop
 8000f54:	01000001 	.word	0x01000001
 8000f58:	20027bc4 	.word	0x20027bc4
 8000f5c:	20027bb8 	.word	0x20027bb8
 8000f60:	20027bbe 	.word	0x20027bbe
 8000f64:	20027bba 	.word	0x20027bba
 8000f68:	20027bc0 	.word	0x20027bc0
 8000f6c:	20027bbc 	.word	0x20027bbc
 8000f70:	080271c8 	.word	0x080271c8

08000f74 <OTM8009A_IO_Delay>:
      * @brief  OTM8009A delay
      * @param  Delay: Delay in ms
      */
    __weak void OTM8009A_IO_Delay(uint32_t Delay)
    {
        HAL_Delay(Delay);
 8000f74:	f006 bfb4 	b.w	8007ee0 <HAL_Delay>

08000f78 <DSI_IO_WriteCmd>:
     * @param  pParams: Pointer to parameter values table.
     * @retval HAL status
     */
    void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t* pParams)
    {
        if (NbrParams <= 1)
 8000f78:	2801      	cmp	r0, #1
    {
 8000f7a:	b507      	push	{r0, r1, r2, lr}
        if (NbrParams <= 1)
 8000f7c:	d80a      	bhi.n	8000f94 <DSI_IO_WriteCmd+0x1c>
        {
            HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]);
 8000f7e:	784b      	ldrb	r3, [r1, #1]
 8000f80:	2215      	movs	r2, #21
 8000f82:	4809      	ldr	r0, [pc, #36]	; (8000fa8 <DSI_IO_WriteCmd+0x30>)
 8000f84:	9300      	str	r3, [sp, #0]
 8000f86:	780b      	ldrb	r3, [r1, #0]
 8000f88:	2100      	movs	r1, #0
 8000f8a:	f008 f934 	bl	80091f6 <HAL_DSI_ShortWrite>
        }
        else
        {
            HAL_DSI_LongWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams);
        }
    }
 8000f8e:	b003      	add	sp, #12
 8000f90:	f85d fb04 	ldr.w	pc, [sp], #4
            HAL_DSI_LongWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams);
 8000f94:	9101      	str	r1, [sp, #4]
 8000f96:	2239      	movs	r2, #57	; 0x39
 8000f98:	5c0b      	ldrb	r3, [r1, r0]
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	9300      	str	r3, [sp, #0]
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	4801      	ldr	r0, [pc, #4]	; (8000fa8 <DSI_IO_WriteCmd+0x30>)
 8000fa2:	f008 f939 	bl	8009218 <HAL_DSI_LongWrite>
    }
 8000fa6:	e7f2      	b.n	8000f8e <DSI_IO_WriteCmd+0x16>
 8000fa8:	20012130 	.word	0x20012130

08000fac <LCD_ReqTear>:

    /**
     * Request TE at scanline.
     */
    void LCD_ReqTear(void)
    {
 8000fac:	b537      	push	{r0, r1, r2, r4, r5, lr}
        static uint8_t ScanLineParams[2];

        uint16_t scanline = 533;
        ScanLineParams[0] = scanline >> 8;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	4a0a      	ldr	r2, [pc, #40]	; (8000fdc <LCD_ReqTear+0x30>)
        ScanLineParams[1] = scanline & 0x00FF;
 8000fb2:	2515      	movs	r5, #21

        HAL_DSI_LongWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8000fb4:	4c0a      	ldr	r4, [pc, #40]	; (8000fe0 <LCD_ReqTear+0x34>)
        ScanLineParams[0] = scanline >> 8;
 8000fb6:	7013      	strb	r3, [r2, #0]
        HAL_DSI_LongWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8000fb8:	2100      	movs	r1, #0
        ScanLineParams[1] = scanline & 0x00FF;
 8000fba:	7055      	strb	r5, [r2, #1]
        HAL_DSI_LongWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8000fbc:	4620      	mov	r0, r4
 8000fbe:	9201      	str	r2, [sp, #4]
 8000fc0:	2244      	movs	r2, #68	; 0x44
 8000fc2:	9200      	str	r2, [sp, #0]
 8000fc4:	2239      	movs	r2, #57	; 0x39
 8000fc6:	f008 f927 	bl	8009218 <HAL_DSI_LongWrite>
        // set_tear_on
        HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, 0x35, 0x00);
 8000fca:	2100      	movs	r1, #0
 8000fcc:	2335      	movs	r3, #53	; 0x35
 8000fce:	462a      	mov	r2, r5
 8000fd0:	4620      	mov	r0, r4
 8000fd2:	9100      	str	r1, [sp, #0]
 8000fd4:	f008 f90f 	bl	80091f6 <HAL_DSI_ShortWrite>
    }
 8000fd8:	b003      	add	sp, #12
 8000fda:	bd30      	pop	{r4, r5, pc}
 8000fdc:	200097ac 	.word	0x200097ac
 8000fe0:	20012130 	.word	0x20012130

08000fe4 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
{
 8000fe4:	b507      	push	{r0, r1, r2, lr}
 8000fe6:	9001      	str	r0, [sp, #4]
    LCD_ReqTear();
 8000fe8:	f7ff ffe0 	bl	8000fac <LCD_ReqTear>
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_ER);
 8000fec:	4b0f      	ldr	r3, [pc, #60]	; (800102c <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x48>)
 8000fee:	2202      	movs	r2, #2
    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8000ff0:	9801      	ldr	r0, [sp, #4]
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_ER);
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_TE);
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_TE);
 8000ffe:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001002:	f042 0201 	orr.w	r2, r2, #1
 8001006:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_ER);
 800100a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800100e:	f042 0202 	orr.w	r2, r2, #2
 8001012:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    __HAL_LTDC_ENABLE_IT(&hltdc, (LTDC_IT_LI | LTDC_IT_FU)); /* Enable line and FIFO underrun interrupts */
 8001016:	4b06      	ldr	r3, [pc, #24]	; (8001030 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x4c>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800101c:	f043 0303 	orr.w	r3, r3, #3
 8001020:	6353      	str	r3, [r2, #52]	; 0x34
}
 8001022:	b003      	add	sp, #12
 8001024:	f85d eb04 	ldr.w	lr, [sp], #4
    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8001028:	f001 b950 	b.w	80022cc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
 800102c:	20012130 	.word	0x20012130
 8001030:	2001224c 	.word	0x2001224c

08001034 <LCD_SetUpdateRegion>:

    void LCD_SetUpdateRegion(int idx)
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[idx]);
 8001034:	4b07      	ldr	r3, [pc, #28]	; (8001054 <LCD_SetUpdateRegion+0x20>)
    {
 8001036:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[idx]);
 8001038:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800103c:	232a      	movs	r3, #42	; 0x2a
 800103e:	2239      	movs	r2, #57	; 0x39
 8001040:	2100      	movs	r1, #0
 8001042:	9300      	str	r3, [sp, #0]
 8001044:	2304      	movs	r3, #4
 8001046:	9001      	str	r0, [sp, #4]
 8001048:	4803      	ldr	r0, [pc, #12]	; (8001058 <LCD_SetUpdateRegion+0x24>)
 800104a:	f008 f8e5 	bl	8009218 <HAL_DSI_LongWrite>
    }
 800104e:	b003      	add	sp, #12
 8001050:	f85d fb04 	ldr.w	pc, [sp], #4
 8001054:	20000004 	.word	0x20000004
 8001058:	20012130 	.word	0x20012130

0800105c <HAL_DSI_TearingEffectCallback>:
    // {
    //     HAL_DSI_LongWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
    // }

    void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef* hdsi)
    {
 800105c:	b570      	push	{r4, r5, r6, lr}
        return instance;
 800105e:	4d15      	ldr	r5, [pc, #84]	; (80010b4 <HAL_DSI_TearingEffectCallback+0x58>)
 8001060:	4604      	mov	r4, r0
        GPIO::set(GPIO::VSYNC_FREQ);
 8001062:	2000      	movs	r0, #0
 8001064:	f7ff fd34 	bl	8000ad0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8001068:	682a      	ldr	r2, [r5, #0]
        vSyncCnt++;
 800106a:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 800106e:	3301      	adds	r3, #1
 8001070:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
        HAL::getInstance()->vSync();
        OSWrappers::signalVSync();
 8001074:	f000 fd6c 	bl	8001b50 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

        // In single buffering, only require that the system waits for display update to be finished if we
        // actually intend to update the display in this frame.
        HAL::getInstance()->lockDMAToFrontPorch(refreshRequested);
 8001078:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <HAL_DSI_TearingEffectCallback+0x5c>)
        return instance;
 800107a:	6828      	ldr	r0, [r5, #0]
 800107c:	781a      	ldrb	r2, [r3, #0]

        if (refreshRequested && !displayRefreshing)
 800107e:	781b      	ldrb	r3, [r3, #0]
        lockDMAToPorch = enableLock;
 8001080:	f880 204a 	strb.w	r2, [r0, #74]	; 0x4a
 8001084:	b123      	cbz	r3, 8001090 <HAL_DSI_TearingEffectCallback+0x34>
 8001086:	4d0d      	ldr	r5, [pc, #52]	; (80010bc <HAL_DSI_TearingEffectCallback+0x60>)
 8001088:	782b      	ldrb	r3, [r5, #0]
 800108a:	f003 06ff 	and.w	r6, r3, #255	; 0xff
 800108e:	b123      	cbz	r3, 800109a <HAL_DSI_TearingEffectCallback+0x3e>
            HAL_DSI_Refresh(hdsi);
            displayRefreshing = true;
        }
        else
        {
            GPIO::clear(GPIO::VSYNC_FREQ);
 8001090:	2000      	movs	r0, #0
        }
    }
 8001092:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8001096:	f7ff bd4b 	b.w	8000b30 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
                HAL::getInstance()->swapFrameBuffers();
 800109a:	f00f ffa5 	bl	8010fe8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            updateRegion = 0;
 800109e:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <HAL_DSI_TearingEffectCallback+0x64>)
            LCD_SetUpdateRegion(updateRegion);
 80010a0:	4630      	mov	r0, r6
            updateRegion = 0;
 80010a2:	601e      	str	r6, [r3, #0]
            LCD_SetUpdateRegion(updateRegion);
 80010a4:	f7ff ffc6 	bl	8001034 <LCD_SetUpdateRegion>
            HAL_DSI_Refresh(hdsi);
 80010a8:	4620      	mov	r0, r4
 80010aa:	f008 f894 	bl	80091d6 <HAL_DSI_Refresh>
            displayRefreshing = true;
 80010ae:	2301      	movs	r3, #1
 80010b0:	702b      	strb	r3, [r5, #0]
    }
 80010b2:	bd70      	pop	{r4, r5, r6, pc}
 80010b4:	20027bc4 	.word	0x20027bc4
 80010b8:	20000014 	.word	0x20000014
 80010bc:	200097ae 	.word	0x200097ae
 80010c0:	20009798 	.word	0x20009798

080010c4 <HAL_DSI_EndOfRefreshCallback>:

    void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef* hdsi)
    {
        updateRegion++;
 80010c4:	4b33      	ldr	r3, [pc, #204]	; (8001194 <HAL_DSI_EndOfRefreshCallback+0xd0>)
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	3201      	adds	r2, #1
    {
 80010ca:	b570      	push	{r4, r5, r6, lr}
        if (updateRegion < 4)
 80010cc:	2a03      	cmp	r2, #3
        updateRegion++;
 80010ce:	601a      	str	r2, [r3, #0]
        {
            DSI->WCR &= ~(DSI_WCR_DSIEN);
            LTDC_Layer1->CFBAR = ((uint32_t)currFbBase) + 200 * 2 * updateRegion;
 80010d0:	4b31      	ldr	r3, [pc, #196]	; (8001198 <HAL_DSI_EndOfRefreshCallback+0xd4>)
    {
 80010d2:	4605      	mov	r5, r0
 80010d4:	4c31      	ldr	r4, [pc, #196]	; (800119c <HAL_DSI_EndOfRefreshCallback+0xd8>)
            LTDC_Layer1->CFBAR = ((uint32_t)currFbBase) + 200 * 2 * updateRegion;
 80010d6:	6819      	ldr	r1, [r3, #0]
 80010d8:	4b31      	ldr	r3, [pc, #196]	; (80011a0 <HAL_DSI_EndOfRefreshCallback+0xdc>)
        if (updateRegion < 4)
 80010da:	dc2e      	bgt.n	800113a <HAL_DSI_EndOfRefreshCallback+0x76>
            DSI->WCR &= ~(DSI_WCR_DSIEN);
 80010dc:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 80010e0:	f020 0008 	bic.w	r0, r0, #8
 80010e4:	f8c4 0404 	str.w	r0, [r4, #1028]	; 0x404
            LTDC_Layer1->CFBAR = ((uint32_t)currFbBase) + 200 * 2 * updateRegion;
 80010e8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80010ec:	fb00 1102 	mla	r1, r0, r2, r1
            LTDC->TWCR = ((REAL_WIDTH + 2 + 1 - 1) << 16) | 0x1E3;
            LTDC_Layer1->WHPCR = ((REAL_WIDTH + 2) << 16) | 3;
            LTDC_Layer1->CFBLR = ((832 * 2) << 16) | ((REAL_WIDTH) * 2 + 3);

            LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
            LCD_SetUpdateRegion(updateRegion);
 80010f0:	4610      	mov	r0, r2
            LTDC_Layer1->CFBAR = ((uint32_t)currFbBase) + 200 * 2 * updateRegion;
 80010f2:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
                ADJUSTED_WIDTH += 32;
 80010f6:	bf0c      	ite	eq
 80010f8:	23e8      	moveq	r3, #232	; 0xe8
            uint16_t ADJUSTED_WIDTH = 200;
 80010fa:	23c8      	movne	r3, #200	; 0xc8
            LTDC->AWCR = ((ADJUSTED_WIDTH + 2) << 16) | 0x1E2; //adj
 80010fc:	4928      	ldr	r1, [pc, #160]	; (80011a0 <HAL_DSI_EndOfRefreshCallback+0xdc>)
 80010fe:	3302      	adds	r3, #2
 8001100:	041b      	lsls	r3, r3, #16
 8001102:	f443 73f1 	orr.w	r3, r3, #482	; 0x1e2
 8001106:	610b      	str	r3, [r1, #16]
            LTDC->TWCR = ((REAL_WIDTH + 2 + 1 - 1) << 16) | 0x1E3;
 8001108:	4b26      	ldr	r3, [pc, #152]	; (80011a4 <HAL_DSI_EndOfRefreshCallback+0xe0>)
 800110a:	614b      	str	r3, [r1, #20]
            LTDC_Layer1->WHPCR = ((REAL_WIDTH + 2) << 16) | 3;
 800110c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001110:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
            LTDC_Layer1->CFBLR = ((832 * 2) << 16) | ((REAL_WIDTH) * 2 + 3);
 8001114:	4b24      	ldr	r3, [pc, #144]	; (80011a8 <HAL_DSI_EndOfRefreshCallback+0xe4>)
 8001116:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
            LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 800111a:	2301      	movs	r3, #1
 800111c:	624b      	str	r3, [r1, #36]	; 0x24
            LCD_SetUpdateRegion(updateRegion);
 800111e:	f7ff ff89 	bl	8001034 <LCD_SetUpdateRegion>

            DSI->WCR |= DSI_WCR_DSIEN;
 8001122:	4a1e      	ldr	r2, [pc, #120]	; (800119c <HAL_DSI_EndOfRefreshCallback+0xd8>)
            HAL_DSI_Refresh(hdsi);
 8001124:	4628      	mov	r0, r5
            DSI->WCR |= DSI_WCR_DSIEN;
 8001126:	f8d2 3404 	ldr.w	r3, [r2, #1028]	; 0x404
 800112a:	f043 0308 	orr.w	r3, r3, #8
        //             // Signal to the framework that display update has finished.
        //             HAL::getInstance()->frontPorchEntered();
        //         }
        //     }
        // }
    }
 800112e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            DSI->WCR |= DSI_WCR_DSIEN;
 8001132:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
            HAL_DSI_Refresh(hdsi);
 8001136:	f008 b84e 	b.w	80091d6 <HAL_DSI_Refresh>
            DSI->WCR &= ~(DSI_WCR_DSIEN);
 800113a:	f8d4 2404 	ldr.w	r2, [r4, #1028]	; 0x404
            LCD_SetUpdateRegion(0);
 800113e:	2000      	movs	r0, #0
            DSI->WCR &= ~(DSI_WCR_DSIEN);
 8001140:	f022 0208 	bic.w	r2, r2, #8
 8001144:	f8c4 2404 	str.w	r2, [r4, #1028]	; 0x404
            LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 8001148:	4a18      	ldr	r2, [pc, #96]	; (80011ac <HAL_DSI_EndOfRefreshCallback+0xe8>)
            LTDC_Layer1->CFBAR = (uint32_t)currFbBase;
 800114a:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
            LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 800114e:	611a      	str	r2, [r3, #16]
            LTDC->TWCR = ((WIDTH + 2 + 1) << 16) | 0x1E3;
 8001150:	f102 1201 	add.w	r2, r2, #65537	; 0x10001
 8001154:	615a      	str	r2, [r3, #20]
            LTDC_Layer1->WHPCR = ((WIDTH + 2) << 16) | 3;
 8001156:	4a16      	ldr	r2, [pc, #88]	; (80011b0 <HAL_DSI_EndOfRefreshCallback+0xec>)
 8001158:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
            LTDC_Layer1->CFBLR = (((832 * 2) << 16) | ((WIDTH * 2) + 3));
 800115c:	4a12      	ldr	r2, [pc, #72]	; (80011a8 <HAL_DSI_EndOfRefreshCallback+0xe4>)
 800115e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
            LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8001162:	2201      	movs	r2, #1
 8001164:	625a      	str	r2, [r3, #36]	; 0x24
            LCD_SetUpdateRegion(0);
 8001166:	f7ff ff65 	bl	8001034 <LCD_SetUpdateRegion>
            DSI->WCR |= DSI_WCR_DSIEN;
 800116a:	f8d4 3404 	ldr.w	r3, [r4, #1028]	; 0x404
            GPIO::clear(GPIO::VSYNC_FREQ);
 800116e:	2000      	movs	r0, #0
            DSI->WCR |= DSI_WCR_DSIEN;
 8001170:	f043 0308 	orr.w	r3, r3, #8
 8001174:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
            GPIO::clear(GPIO::VSYNC_FREQ);
 8001178:	f7ff fcda 	bl	8000b30 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            displayRefreshing = false;
 800117c:	4b0d      	ldr	r3, [pc, #52]	; (80011b4 <HAL_DSI_EndOfRefreshCallback+0xf0>)
 800117e:	2200      	movs	r2, #0
 8001180:	701a      	strb	r2, [r3, #0]
        return instance;
 8001182:	4b0d      	ldr	r3, [pc, #52]	; (80011b8 <HAL_DSI_EndOfRefreshCallback+0xf4>)
 8001184:	6818      	ldr	r0, [r3, #0]
            if (HAL::getInstance())
 8001186:	b120      	cbz	r0, 8001192 <HAL_DSI_EndOfRefreshCallback+0xce>
        allowDMATransfers();
 8001188:	6803      	ldr	r3, [r0, #0]
    }
 800118a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800118e:	6a1b      	ldr	r3, [r3, #32]
 8001190:	4718      	bx	r3
 8001192:	bd70      	pop	{r4, r5, r6, pc}
 8001194:	20009798 	.word	0x20009798
 8001198:	20009794 	.word	0x20009794
 800119c:	40016c00 	.word	0x40016c00
 80011a0:	40016800 	.word	0x40016800
 80011a4:	00ca01e3 	.word	0x00ca01e3
 80011a8:	06800193 	.word	0x06800193
 80011ac:	00ca01e2 	.word	0x00ca01e2
 80011b0:	00ca0003 	.word	0x00ca0003
 80011b4:	200097ae 	.word	0x200097ae
 80011b8:	20027bc4 	.word	0x20027bc4

080011bc <IdleTaskHook>:

    portBASE_TYPE IdleTaskHook(void* p)
    {
 80011bc:	4601      	mov	r1, r0
 80011be:	b508      	push	{r3, lr}
        return instance;
 80011c0:	4b03      	ldr	r3, [pc, #12]	; (80011d0 <IdleTaskHook+0x14>)
 80011c2:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 80011c4:	b101      	cbz	r1, 80011c8 <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 80011c6:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 80011c8:	f00f ff28 	bl	801101c <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 80011cc:	2001      	movs	r0, #1
 80011ce:	bd08      	pop	{r3, pc}
 80011d0:	20027bc4 	.word	0x20027bc4

080011d4 <_GLOBAL__sub_I_displayRefreshing>:
          cc_in(0)
 80011d4:	4b05      	ldr	r3, [pc, #20]	; (80011ec <_GLOBAL__sub_I_displayRefreshing+0x18>)
 80011d6:	2200      	movs	r2, #0
{
class KeySampler : public ButtonController
{
public:
    KeySampler()
    {
 80011d8:	4805      	ldr	r0, [pc, #20]	; (80011f0 <_GLOBAL__sub_I_displayRefreshing+0x1c>)
 80011da:	605a      	str	r2, [r3, #4]
 80011dc:	609a      	str	r2, [r3, #8]
 80011de:	4a05      	ldr	r2, [pc, #20]	; (80011f4 <_GLOBAL__sub_I_displayRefreshing+0x20>)
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	4b05      	ldr	r3, [pc, #20]	; (80011f8 <_GLOBAL__sub_I_displayRefreshing+0x24>)
 80011e4:	6003      	str	r3, [r0, #0]
        init();
 80011e6:	f7ff bb0b 	b.w	8000800 <_ZN8touchgfx10KeySampler4initEv>
 80011ea:	bf00      	nop
 80011ec:	2000979c 	.word	0x2000979c
 80011f0:	200097a8 	.word	0x200097a8
 80011f4:	08026f58 	.word	0x08026f58
 80011f8:	08026f80 	.word	0x08026f80

080011fc <_ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual bool gotoNextFrame();
    //Decode part of the current frame
    virtual bool decodeFrame(const touchgfx::Rect& area, uint8_t* frameBuffer, uint32_t framebuffer_width);
    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);
    virtual void gotoFrame(uint32_t frameno);
    virtual uint32_t getCurrentFrameNumber() const { return frameNumber; }
 80011fc:	6940      	ldr	r0, [r0, #20]
 80011fe:	4770      	bx	lr

08001200 <_ZN20HardwareMJPEGDecoder12getLastErrorEv>:
    virtual void setRepeatVideo(bool repeat);
    virtual void getVideoInfo(touchgfx::VideoInformation* data);

    void setAVIFileBuffer(uint8_t* buffer, uint32_t size) { aviBuffer = buffer, aviBufferLength = size; }

    virtual AVIErrors getLastError() { return lastError; }
 8001200:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8001204:	4770      	bx	lr

08001206 <_ZN20HardwareMJPEGDecoder8hasVideoEv>:
    readVideoHeader();
}

bool HardwareMJPEGDecoder::hasVideo()
{
    return (reader != 0) || (movieData != 0);
 8001206:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001208:	b923      	cbnz	r3, 8001214 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0xe>
 800120a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800120c:	3800      	subs	r0, #0
 800120e:	bf18      	it	ne
 8001210:	2001      	movne	r0, #1
 8001212:	4770      	bx	lr
 8001214:	2001      	movs	r0, #1
}
 8001216:	4770      	bx	lr

08001218 <_ZN20HardwareMJPEGDecoder17getNumberOfFramesEv>:
}

uint32_t HardwareMJPEGDecoder::getNumberOfFrames()
{
    return videoInfo.number_of_frames;
}
 8001218:	6880      	ldr	r0, [r0, #8]
 800121a:	4770      	bx	lr

0800121c <_ZN20HardwareMJPEGDecoder14setRepeatVideoEb>:

void HardwareMJPEGDecoder::setRepeatVideo(bool repeat)
{

}
 800121c:	4770      	bx	lr

0800121e <_ZN20HardwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void HardwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
    *data = videoInfo;
 800121e:	3004      	adds	r0, #4
{
 8001220:	b510      	push	{r4, lr}
 8001222:	460c      	mov	r4, r1
    *data = videoInfo;
 8001224:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 8001226:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800122a:	bd10      	pop	{r4, pc}

0800122c <_ZN20HardwareMJPEGDecoderD1Ev>:
class HardwareMJPEGDecoder : public MJPEGDecoder
 800122c:	4770      	bx	lr
	...

08001230 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt>:
{
 8001230:	b508      	push	{r3, lr}
    assert(0);
 8001232:	4a03      	ldr	r2, [pc, #12]	; (8001240 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x10>)
 8001234:	f240 11cb 	movw	r1, #459	; 0x1cb
 8001238:	4b02      	ldr	r3, [pc, #8]	; (8001244 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x14>)
 800123a:	4803      	ldr	r0, [pc, #12]	; (8001248 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x18>)
 800123c:	f024 fce8 	bl	8025c10 <__assert_func>
 8001240:	08027298 	.word	0x08027298
 8001244:	08029cab 	.word	0x08029cab
 8001248:	080272f3 	.word	0x080272f3

0800124c <_ZN20HardwareMJPEGDecoderD0Ev>:
 800124c:	b510      	push	{r4, lr}
 800124e:	4604      	mov	r4, r0
 8001250:	2144      	movs	r1, #68	; 0x44
 8001252:	f024 fcae 	bl	8025bb2 <_ZdlPvj>
 8001256:	4620      	mov	r0, r4
 8001258:	bd10      	pop	{r4, pc}
	...

0800125c <_ZN20HardwareMJPEGDecoderC1Ev>:
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 800125c:	b538      	push	{r3, r4, r5, lr}
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 800125e:	2500      	movs	r5, #0
 8001260:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <_ZN20HardwareMJPEGDecoderC1Ev+0x44>)
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 8001262:	4604      	mov	r4, r0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 8001264:	6003      	str	r3, [r0, #0]
 8001266:	63c5      	str	r5, [r0, #60]	; 0x3c
 8001268:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
 800126c:	e9c0 5505 	strd	r5, r5, [r0, #20]
 8001270:	e9c0 5507 	strd	r5, r5, [r0, #28]
 8001274:	e9c0 5509 	strd	r5, r5, [r0, #36]	; 0x24
 8001278:	e9c0 550b 	strd	r5, r5, [r0, #44]	; 0x2c
 800127c:	e9c0 550d 	strd	r5, r5, [r0, #52]	; 0x34
    videoInfo.frame_width = 0;
 8001280:	e9c0 5503 	strd	r5, r5, [r0, #12]
    videoInfo.number_of_frames = 0;
 8001284:	e9c0 5501 	strd	r5, r5, [r0, #4]
    TGFX_JPEG_InitColorTables();
 8001288:	f001 fde8 	bl	8002e5c <TGFX_JPEG_InitColorTables>
    semDecodingDone = SEM_CREATE();
 800128c:	462a      	mov	r2, r5
 800128e:	4629      	mov	r1, r5
 8001290:	2001      	movs	r0, #1
 8001292:	f00b febd 	bl	800d010 <osSemaphoreNew>
 8001296:	4b03      	ldr	r3, [pc, #12]	; (80012a4 <_ZN20HardwareMJPEGDecoderC1Ev+0x48>)
 8001298:	6018      	str	r0, [r3, #0]
}
 800129a:	4620      	mov	r0, r4
 800129c:	bd38      	pop	{r3, r4, r5, pc}
 800129e:	bf00      	nop
 80012a0:	08027590 	.word	0x08027590
 80012a4:	200097f4 	.word	0x200097f4

080012a8 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>:
{
 80012a8:	b420      	push	{r5}
 80012aa:	460d      	mov	r5, r1
 80012ac:	4611      	mov	r1, r2
 80012ae:	461a      	mov	r2, r3
    if (reader != 0)
 80012b0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80012b2:	b13b      	cbz	r3, 80012c4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x1c>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
 80012b4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80012b6:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80012b8:	1aed      	subs	r5, r5, r3
        src = (const char*)movieData + offset;
 80012ba:	4428      	add	r0, r5
}
 80012bc:	f85d 5b04 	ldr.w	r5, [sp], #4
    return strncmp(src, str, num);
 80012c0:	f025 bb03 	b.w	80268ca <strncmp>
        src = (const char*)movieData + offset;
 80012c4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80012c6:	e7f8      	b.n	80012ba <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x12>

080012c8 <_ZN20HardwareMJPEGDecoder6getU32Em>:
    if (reader != 0)
 80012c8:	6b03      	ldr	r3, [r0, #48]	; 0x30
{
 80012ca:	b510      	push	{r4, lr}
    if (reader != 0)
 80012cc:	b173      	cbz	r3, 80012ec <_ZN20HardwareMJPEGDecoder6getU32Em+0x24>
        const uint32_t index = offset - aviBufferStartOffset;
 80012ce:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
 80012d0:	6b42      	ldr	r2, [r0, #52]	; 0x34
        const uint32_t index = offset - aviBufferStartOffset;
 80012d2:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
 80012d4:	1853      	adds	r3, r2, r1
 80012d6:	5c52      	ldrb	r2, [r2, r1]
 80012d8:	7898      	ldrb	r0, [r3, #2]
 80012da:	785c      	ldrb	r4, [r3, #1]
 80012dc:	0400      	lsls	r0, r0, #16
 80012de:	78db      	ldrb	r3, [r3, #3]
 80012e0:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 80012e4:	4310      	orrs	r0, r2
 80012e6:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
}
 80012ea:	bd10      	pop	{r4, pc}
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
 80012ec:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80012ee:	5858      	ldr	r0, [r3, r1]
 80012f0:	e7fb      	b.n	80012ea <_ZN20HardwareMJPEGDecoder6getU32Em+0x22>

080012f2 <_ZN20HardwareMJPEGDecoder6getU16Em>:
    if (reader != 0)
 80012f2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80012f4:	b143      	cbz	r3, 8001308 <_ZN20HardwareMJPEGDecoder6getU16Em+0x16>
        const uint32_t index = offset - aviBufferStartOffset;
 80012f6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80012f8:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
 80012fa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80012fc:	185a      	adds	r2, r3, r1
 80012fe:	5c58      	ldrb	r0, [r3, r1]
 8001300:	7852      	ldrb	r2, [r2, #1]
 8001302:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8001306:	4770      	bx	lr
        return d[0] | (d[1] << 8);
 8001308:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800130a:	5a58      	ldrh	r0, [r3, r1]
}
 800130c:	4770      	bx	lr
	...

08001310 <_ZN20HardwareMJPEGDecoder8readDataEmm>:
{
 8001310:	b570      	push	{r4, r5, r6, lr}
 8001312:	4604      	mov	r4, r0
    if (reader != 0)
 8001314:	6b00      	ldr	r0, [r0, #48]	; 0x30
{
 8001316:	460d      	mov	r5, r1
 8001318:	4616      	mov	r6, r2
    if (reader != 0)
 800131a:	b1d8      	cbz	r0, 8001354 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x44>
        if (length > aviBufferLength)
 800131c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800131e:	4293      	cmp	r3, r2
 8001320:	d208      	bcs.n	8001334 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x24>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 8001322:	2309      	movs	r3, #9
            assert(!"Buffer to small");
 8001324:	4a0d      	ldr	r2, [pc, #52]	; (800135c <_ZN20HardwareMJPEGDecoder8readDataEmm+0x4c>)
 8001326:	21a7      	movs	r1, #167	; 0xa7
 8001328:	480d      	ldr	r0, [pc, #52]	; (8001360 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x50>)
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 800132a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
            assert(!"Buffer to small");
 800132e:	4b0d      	ldr	r3, [pc, #52]	; (8001364 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x54>)
 8001330:	f024 fc6e 	bl	8025c10 <__assert_func>
        reader->seek(offset);
 8001334:	6803      	ldr	r3, [r0, #0]
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
 800133a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800133c:	4632      	mov	r2, r6
 800133e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001340:	6803      	ldr	r3, [r0, #0]
 8001342:	691b      	ldr	r3, [r3, #16]
 8001344:	4798      	blx	r3
 8001346:	b910      	cbnz	r0, 800134e <_ZN20HardwareMJPEGDecoder8readDataEmm+0x3e>
            lastError = AVI_ERROR_EOF_REACHED;
 8001348:	230d      	movs	r3, #13
 800134a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return aviBuffer;
 800134e:	6b60      	ldr	r0, [r4, #52]	; 0x34
        aviBufferStartOffset = offset;
 8001350:	63e5      	str	r5, [r4, #60]	; 0x3c
}
 8001352:	bd70      	pop	{r4, r5, r6, pc}
    return movieData + offset;
 8001354:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001356:	4408      	add	r0, r1
 8001358:	e7fb      	b.n	8001352 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x42>
 800135a:	bf00      	nop
 800135c:	08027372 	.word	0x08027372
 8001360:	080272f3 	.word	0x080272f3
 8001364:	0802735f 	.word	0x0802735f

08001368 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv>:
{
 8001368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 800136c:	6943      	ldr	r3, [r0, #20]
{
 800136e:	4604      	mov	r4, r0
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8001370:	b92b      	cbnz	r3, 800137e <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x16>
 8001372:	4b22      	ldr	r3, [pc, #136]	; (80013fc <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x94>)
 8001374:	21ed      	movs	r1, #237	; 0xed
 8001376:	4a22      	ldr	r2, [pc, #136]	; (8001400 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x98>)
 8001378:	4822      	ldr	r0, [pc, #136]	; (8001404 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x9c>)
 800137a:	f024 fc49 	bl	8025c10 <__assert_func>
    readData(currentMovieOffset, 8);
 800137e:	2208      	movs	r2, #8
 8001380:	6981      	ldr	r1, [r0, #24]
 8001382:	f7ff ffc5 	bl	8001310 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8001386:	69a1      	ldr	r1, [r4, #24]
 8001388:	4620      	mov	r0, r4
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 800138a:	f243 0730 	movw	r7, #12336	; 0x3030
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 800138e:	3104      	adds	r1, #4
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 8001390:	f246 3664 	movw	r6, #25444	; 0x6364
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8001394:	f7ff ff98 	bl	80012c8 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8001398:	4605      	mov	r5, r0
    while (currentMovieOffset + 8 + chunkSize < movieLength)
 800139a:	69a1      	ldr	r1, [r4, #24]
 800139c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800139e:	440d      	add	r5, r1
 80013a0:	f105 0208 	add.w	r2, r5, #8
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d222      	bcs.n	80013ee <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x86>
        frameNumber++;
 80013a8:	6963      	ldr	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 80013aa:	3509      	adds	r5, #9
        readData(currentMovieOffset, 8);
 80013ac:	2208      	movs	r2, #8
 80013ae:	4620      	mov	r0, r4
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 80013b0:	f025 0101 	bic.w	r1, r5, #1
        frameNumber++;
 80013b4:	3301      	adds	r3, #1
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 80013b6:	61a1      	str	r1, [r4, #24]
        frameNumber++;
 80013b8:	6163      	str	r3, [r4, #20]
        readData(currentMovieOffset, 8);
 80013ba:	f7ff ffa9 	bl	8001310 <_ZN20HardwareMJPEGDecoder8readDataEmm>
        uint32_t streamNo  = getU16(currentMovieOffset);
 80013be:	f8d4 8018 	ldr.w	r8, [r4, #24]
 80013c2:	4620      	mov	r0, r4
 80013c4:	4641      	mov	r1, r8
 80013c6:	f7ff ff94 	bl	80012f2 <_ZN20HardwareMJPEGDecoder6getU16Em>
 80013ca:	4681      	mov	r9, r0
        chunkSize = getU32(currentMovieOffset + 4);
 80013cc:	f108 0104 	add.w	r1, r8, #4
 80013d0:	4620      	mov	r0, r4
 80013d2:	f7ff ff79 	bl	80012c8 <_ZN20HardwareMJPEGDecoder6getU32Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 80013d6:	45b9      	cmp	r9, r7
        chunkSize = getU32(currentMovieOffset + 4);
 80013d8:	4605      	mov	r5, r0
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 80013da:	d1de      	bne.n	800139a <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x32>
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 80013dc:	f108 0102 	add.w	r1, r8, #2
 80013e0:	4620      	mov	r0, r4
 80013e2:	f7ff ff86 	bl	80012f2 <_ZN20HardwareMJPEGDecoder6getU16Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 80013e6:	42b0      	cmp	r0, r6
 80013e8:	d1d7      	bne.n	800139a <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x32>
            return true;
 80013ea:	2001      	movs	r0, #1
 80013ec:	e004      	b.n	80013f8 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x90>
    frameNumber = 1;
 80013ee:	2301      	movs	r3, #1
    return false;
 80013f0:	2000      	movs	r0, #0
    frameNumber = 1;
 80013f2:	6163      	str	r3, [r4, #20]
    currentMovieOffset = firstFrameOffset; //start over
 80013f4:	6a23      	ldr	r3, [r4, #32]
 80013f6:	61a3      	str	r3, [r4, #24]
}
 80013f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80013fc:	080273b4 	.word	0x080273b4
 8001400:	080273fd 	.word	0x080273fd
 8001404:	080272f3 	.word	0x080272f3

08001408 <_ZN20HardwareMJPEGDecoder9gotoFrameEm>:
    if (frameNumber==0)
 8001408:	2901      	cmp	r1, #1
    if (frameNumber > getNumberOfFrames())
 800140a:	6803      	ldr	r3, [r0, #0]
 800140c:	bf38      	it	cc
 800140e:	2101      	movcc	r1, #1
 8001410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 8001412:	b570      	push	{r4, r5, r6, lr}
 8001414:	460d      	mov	r5, r1
 8001416:	4604      	mov	r4, r0
    if (frameNumber > getNumberOfFrames())
 8001418:	4798      	blx	r3
 800141a:	42a8      	cmp	r0, r5
 800141c:	d204      	bcs.n	8001428 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x20>
        frameNumber = getNumberOfFrames();
 800141e:	6823      	ldr	r3, [r4, #0]
 8001420:	4620      	mov	r0, r4
 8001422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001424:	4798      	blx	r3
 8001426:	4605      	mov	r5, r0
    uint32_t offset = indexOffset + 8 + (frameNumber-1)*16;
 8001428:	1e6b      	subs	r3, r5, #1
 800142a:	69e6      	ldr	r6, [r4, #28]
    readData(offset, 16);
 800142c:	2210      	movs	r2, #16
 800142e:	4620      	mov	r0, r4
    uint32_t offset = indexOffset + 8 + (frameNumber-1)*16;
 8001430:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    readData(offset, 16);
 8001434:	f106 0108 	add.w	r1, r6, #8
 8001438:	f7ff ff6a 	bl	8001310 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
 800143c:	f106 0110 	add.w	r1, r6, #16
 8001440:	4620      	mov	r0, r4
 8001442:	f7ff ff41 	bl	80012c8 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8001446:	6a23      	ldr	r3, [r4, #32]
 8001448:	3b04      	subs	r3, #4
 800144a:	4403      	add	r3, r0
    this->frameNumber = frameNumber;
 800144c:	e9c4 5305 	strd	r5, r3, [r4, #20]
}
 8001450:	bd70      	pop	{r4, r5, r6, pc}
	...

08001454 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>:
{
 8001454:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    currentMovieOffset = 0;
 8001458:	2100      	movs	r1, #0
{
 800145a:	4604      	mov	r4, r0
    readData(0, 72);
 800145c:	2248      	movs	r2, #72	; 0x48
    currentMovieOffset = 0;
 800145e:	6181      	str	r1, [r0, #24]
    lastError = AVI_NO_ERROR;
 8001460:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    readData(0, 72);
 8001464:	f7ff ff54 	bl	8001310 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (compare(currentMovieOffset, "RIFF", 4))
 8001468:	69a7      	ldr	r7, [r4, #24]
 800146a:	2304      	movs	r3, #4
 800146c:	4a64      	ldr	r2, [pc, #400]	; (8001600 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 800146e:	4639      	mov	r1, r7
 8001470:	4620      	mov	r0, r4
 8001472:	f7ff ff19 	bl	80012a8 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8001476:	b148      	cbz	r0, 800148c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x38>
        lastError = AVI_ERROR_NOT_RIFF;
 8001478:	2303      	movs	r3, #3
        assert(!"RIFF header not found");
 800147a:	4a62      	ldr	r2, [pc, #392]	; (8001604 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
 800147c:	f240 1135 	movw	r1, #309	; 0x135
        lastError = AVI_ERROR_NOT_RIFF;
 8001480:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        assert(!"RIFF header not found");
 8001484:	4b60      	ldr	r3, [pc, #384]	; (8001608 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b4>)
        assert(!"AVI header not found");
 8001486:	4861      	ldr	r0, [pc, #388]	; (800160c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b8>)
 8001488:	f024 fbc2 	bl	8025c10 <__assert_func>
    currentMovieOffset += 8;
 800148c:	f107 0108 	add.w	r1, r7, #8
    if (compare(currentMovieOffset, "AVI ", 4))
 8001490:	2304      	movs	r3, #4
 8001492:	4a5f      	ldr	r2, [pc, #380]	; (8001610 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1bc>)
 8001494:	4620      	mov	r0, r4
    currentMovieOffset += 8;
 8001496:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "AVI ", 4))
 8001498:	f7ff ff06 	bl	80012a8 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800149c:	b138      	cbz	r0, 80014ae <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x5a>
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 800149e:	2304      	movs	r3, #4
        assert(!"AVI header not found");
 80014a0:	4a58      	ldr	r2, [pc, #352]	; (8001604 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
 80014a2:	f240 113d 	movw	r1, #317	; 0x13d
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 80014a6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        assert(!"AVI header not found");
 80014aa:	4b5a      	ldr	r3, [pc, #360]	; (8001614 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c0>)
 80014ac:	e7eb      	b.n	8001486 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    currentMovieOffset += 4;
 80014ae:	f107 010c 	add.w	r1, r7, #12
    if (compare(currentMovieOffset, "LIST", 4))
 80014b2:	2304      	movs	r3, #4
 80014b4:	4a58      	ldr	r2, [pc, #352]	; (8001618 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c4>)
 80014b6:	4620      	mov	r0, r4
    currentMovieOffset += 4;
 80014b8:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "LIST", 4))
 80014ba:	f7ff fef5 	bl	80012a8 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80014be:	4606      	mov	r6, r0
 80014c0:	b138      	cbz	r0, 80014d2 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x7e>
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 80014c2:	2305      	movs	r3, #5
        assert(!"AVI LIST not found");
 80014c4:	4a4f      	ldr	r2, [pc, #316]	; (8001604 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
 80014c6:	f44f 71a2 	mov.w	r1, #324	; 0x144
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 80014ca:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        assert(!"AVI LIST not found");
 80014ce:	4b53      	ldr	r3, [pc, #332]	; (800161c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c8>)
 80014d0:	e7d9      	b.n	8001486 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    const uint32_t aviListSize = getU32(currentMovieOffset + 4);
 80014d2:	f107 0110 	add.w	r1, r7, #16
 80014d6:	4620      	mov	r0, r4
 80014d8:	f7ff fef6 	bl	80012c8 <_ZN20HardwareMJPEGDecoder6getU32Em>
    assert(aviListSize);
 80014dc:	4605      	mov	r5, r0
 80014de:	b920      	cbnz	r0, 80014ea <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x96>
 80014e0:	4b4f      	ldr	r3, [pc, #316]	; (8001620 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1cc>)
 80014e2:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80014e6:	4a47      	ldr	r2, [pc, #284]	; (8001604 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
 80014e8:	e7cd      	b.n	8001486 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    uint32_t offset =  currentMovieOffset + 8;
 80014ea:	f107 0814 	add.w	r8, r7, #20
    if (compare(offset, "hdrl", 4))
 80014ee:	2304      	movs	r3, #4
 80014f0:	4a4c      	ldr	r2, [pc, #304]	; (8001624 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d0>)
 80014f2:	4620      	mov	r0, r4
 80014f4:	4641      	mov	r1, r8
 80014f6:	f7ff fed7 	bl	80012a8 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80014fa:	2800      	cmp	r0, #0
 80014fc:	d04b      	beq.n	8001596 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x142>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
 80014fe:	2306      	movs	r3, #6
 8001500:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    if (compare(offset, "avih", 4))
 8001504:	2304      	movs	r3, #4
 8001506:	4a48      	ldr	r2, [pc, #288]	; (8001628 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d4>)
 8001508:	f107 0118 	add.w	r1, r7, #24
 800150c:	4620      	mov	r0, r4
 800150e:	f7ff fecb 	bl	80012a8 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8001512:	2800      	cmp	r0, #0
 8001514:	d041      	beq.n	800159a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x146>
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
 8001516:	2307      	movs	r3, #7
 8001518:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    uint32_t listOffset = aviListOffset + aviListSize + 8;
 800151c:	4445      	add	r5, r8
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 800151e:	4f43      	ldr	r7, [pc, #268]	; (800162c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d8>)
    readData(listOffset, 12);
 8001520:	220c      	movs	r2, #12
 8001522:	4620      	mov	r0, r4
 8001524:	4629      	mov	r1, r5
 8001526:	f7ff fef3 	bl	8001310 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 800152a:	f105 0608 	add.w	r6, r5, #8
 800152e:	2304      	movs	r3, #4
 8001530:	463a      	mov	r2, r7
 8001532:	4620      	mov	r0, r4
 8001534:	4631      	mov	r1, r6
 8001536:	f7ff feb7 	bl	80012a8 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800153a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800153e:	2800      	cmp	r0, #0
 8001540:	d04a      	beq.n	80015d8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x184>
 8001542:	2b00      	cmp	r3, #0
 8001544:	d14a      	bne.n	80015dc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x188>
 8001546:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 8001548:	1d29      	adds	r1, r5, #4
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 800154a:	42ab      	cmp	r3, r5
 800154c:	d84a      	bhi.n	80015e4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x190>
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
 800154e:	f105 030c 	add.w	r3, r5, #12
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8001552:	1d29      	adds	r1, r5, #4
 8001554:	4620      	mov	r0, r4
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
 8001556:	61a3      	str	r3, [r4, #24]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8001558:	9101      	str	r1, [sp, #4]
 800155a:	f7ff feb5 	bl	80012c8 <_ZN20HardwareMJPEGDecoder6getU32Em>
 800155e:	4430      	add	r0, r6
    const uint32_t listSize = getU32(listOffset+4)+8;
 8001560:	9901      	ldr	r1, [sp, #4]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8001562:	6260      	str	r0, [r4, #36]	; 0x24
    const uint32_t listSize = getU32(listOffset+4)+8;
 8001564:	4620      	mov	r0, r4
 8001566:	f7ff feaf 	bl	80012c8 <_ZN20HardwareMJPEGDecoder6getU32Em>
    listOffset += listSize;
 800156a:	4406      	add	r6, r0
    readData(listOffset, 4);
 800156c:	2204      	movs	r2, #4
 800156e:	4620      	mov	r0, r4
 8001570:	4631      	mov	r1, r6
 8001572:	f7ff fecd 	bl	8001310 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (!compare(listOffset, "idx1", 4))
 8001576:	2304      	movs	r3, #4
 8001578:	4a2d      	ldr	r2, [pc, #180]	; (8001630 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1dc>)
 800157a:	4631      	mov	r1, r6
 800157c:	4620      	mov	r0, r4
 800157e:	f7ff fe93 	bl	80012a8 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8001582:	2800      	cmp	r0, #0
 8001584:	d139      	bne.n	80015fa <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a6>
    frameNumber = 1; //next frame number is 1
 8001586:	2301      	movs	r3, #1
        indexOffset = listOffset;
 8001588:	61e6      	str	r6, [r4, #28]
    frameNumber = 1; //next frame number is 1
 800158a:	6163      	str	r3, [r4, #20]
    firstFrameOffset = currentMovieOffset;
 800158c:	69a3      	ldr	r3, [r4, #24]
 800158e:	6223      	str	r3, [r4, #32]
}
 8001590:	b002      	add	sp, #8
 8001592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool foundFrame = true;
 8001596:	2601      	movs	r6, #1
 8001598:	e7b4      	b.n	8001504 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xb0>
    if (foundFrame)
 800159a:	2e00      	cmp	r6, #0
 800159c:	d0be      	beq.n	800151c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
        videoInfo.ms_between_frames = getU32(offset)/1000;
 800159e:	f107 0120 	add.w	r1, r7, #32
 80015a2:	4620      	mov	r0, r4
 80015a4:	f7ff fe90 	bl	80012c8 <_ZN20HardwareMJPEGDecoder6getU32Em>
 80015a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
        videoInfo.number_of_frames = getU32(offset + 16);
 80015ac:	f107 0130 	add.w	r1, r7, #48	; 0x30
        videoInfo.ms_between_frames = getU32(offset)/1000;
 80015b0:	fbb0 f0f3 	udiv	r0, r0, r3
 80015b4:	6060      	str	r0, [r4, #4]
        videoInfo.number_of_frames = getU32(offset + 16);
 80015b6:	4620      	mov	r0, r4
 80015b8:	f7ff fe86 	bl	80012c8 <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_width = getU32(offset + 32);
 80015bc:	f107 0140 	add.w	r1, r7, #64	; 0x40
        videoInfo.number_of_frames = getU32(offset + 16);
 80015c0:	60a0      	str	r0, [r4, #8]
        videoInfo.frame_width = getU32(offset + 32);
 80015c2:	4620      	mov	r0, r4
 80015c4:	f7ff fe80 	bl	80012c8 <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_height = getU32(offset + 36);
 80015c8:	f107 0144 	add.w	r1, r7, #68	; 0x44
        videoInfo.frame_width = getU32(offset + 32);
 80015cc:	60e0      	str	r0, [r4, #12]
        videoInfo.frame_height = getU32(offset + 36);
 80015ce:	4620      	mov	r0, r4
 80015d0:	f7ff fe7a 	bl	80012c8 <_ZN20HardwareMJPEGDecoder6getU32Em>
 80015d4:	6120      	str	r0, [r4, #16]
 80015d6:	e7a1      	b.n	800151c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
    if (lastError != AVI_NO_ERROR)
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d0b8      	beq.n	800154e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xfa>
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
 80015dc:	230a      	movs	r3, #10
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 80015de:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return;
 80015e2:	e7d5      	b.n	8001590 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x13c>
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 80015e4:	4620      	mov	r0, r4
 80015e6:	f7ff fe6f 	bl	80012c8 <_ZN20HardwareMJPEGDecoder6getU32Em>
 80015ea:	3008      	adds	r0, #8
        readData(listOffset, 12);
 80015ec:	220c      	movs	r2, #12
        listOffset += listSize;
 80015ee:	4405      	add	r5, r0
        readData(listOffset, 12);
 80015f0:	4620      	mov	r0, r4
 80015f2:	4629      	mov	r1, r5
 80015f4:	f7ff fe8c 	bl	8001310 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 80015f8:	e797      	b.n	800152a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd6>
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 80015fa:	230b      	movs	r3, #11
 80015fc:	e7ef      	b.n	80015de <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x18a>
 80015fe:	bf00      	nop
 8001600:	08027430 	.word	0x08027430
 8001604:	0802744e 	.word	0x0802744e
 8001608:	08027435 	.word	0x08027435
 800160c:	080272f3 	.word	0x080272f3
 8001610:	0802747b 	.word	0x0802747b
 8001614:	08027480 	.word	0x08027480
 8001618:	08027498 	.word	0x08027498
 800161c:	0802749d 	.word	0x0802749d
 8001620:	080274b3 	.word	0x080274b3
 8001624:	080274bf 	.word	0x080274bf
 8001628:	080274c4 	.word	0x080274c4
 800162c:	080274c9 	.word	0x080274c9
 8001630:	080274ce 	.word	0x080274ce

08001634 <_ZN20HardwareMJPEGDecoder12setVideoDataEPKhm>:
    movieLength = length;
 8001634:	e9c0 210a 	strd	r2, r1, [r0, #40]	; 0x28
    reader = 0; //not using reader
 8001638:	2200      	movs	r2, #0
 800163a:	6302      	str	r2, [r0, #48]	; 0x30
    readVideoHeader();
 800163c:	f7ff bf0a 	b.w	8001454 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>

08001640 <_ZN20HardwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:
{
 8001640:	b510      	push	{r4, lr}
    movieData = 0;
 8001642:	2300      	movs	r3, #0
{
 8001644:	4604      	mov	r4, r0
 8001646:	4608      	mov	r0, r1
    movieData = 0;
 8001648:	62e3      	str	r3, [r4, #44]	; 0x2c
    movieLength = reader.getDataLength();
 800164a:	680b      	ldr	r3, [r1, #0]
    this->reader = &reader;
 800164c:	6321      	str	r1, [r4, #48]	; 0x30
    movieLength = reader.getDataLength();
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	4798      	blx	r3
 8001652:	62a0      	str	r0, [r4, #40]	; 0x28
    readVideoHeader();
 8001654:	4620      	mov	r0, r4
}
 8001656:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    readVideoHeader();
 800165a:	f7ff befb 	b.w	8001454 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
	...

08001660 <JPEG_Decode_DMA>:
  * @param  JPEGImageSize_Bytes    : jpg image size in bytes.
  * @param  DestAddress : ARGB8888 destination Frame Buffer Address.
  * @retval None
  */
uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t* input, uint32_t chunkSizeIn /* length */, uint8_t* output)
{
 8001660:	b537      	push	{r0, r1, r2, r4, r5, lr}
    FrameBufferAddress = output;
 8001662:	4c12      	ldr	r4, [pc, #72]	; (80016ac <JPEG_Decode_DMA+0x4c>)
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
    }

    //Do not return from this function until done with decoding all chunks.
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8001664:	f44f 75c0 	mov.w	r5, #384	; 0x180
    FrameBufferAddress = output;
 8001668:	6023      	str	r3, [r4, #0]
    Output_Is_Paused = 0;
 800166a:	2400      	movs	r4, #0
 800166c:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <JPEG_Decode_DMA+0x50>)
 800166e:	601c      	str	r4, [r3, #0]
    JPEG_OUT_Read_BufferIndex = 0;
 8001670:	4b10      	ldr	r3, [pc, #64]	; (80016b4 <JPEG_Decode_DMA+0x54>)
 8001672:	601c      	str	r4, [r3, #0]
    JPEG_OUT_Write_BufferIndex = 0;
 8001674:	4b10      	ldr	r3, [pc, #64]	; (80016b8 <JPEG_Decode_DMA+0x58>)
 8001676:	601c      	str	r4, [r3, #0]
    JPEG_InputImageIndex = 0;
 8001678:	4b10      	ldr	r3, [pc, #64]	; (80016bc <JPEG_Decode_DMA+0x5c>)
 800167a:	601c      	str	r4, [r3, #0]
    JPEG_InputImageAddress = (uint32_t)input;
 800167c:	4b10      	ldr	r3, [pc, #64]	; (80016c0 <JPEG_Decode_DMA+0x60>)
 800167e:	6019      	str	r1, [r3, #0]
    JPEG_InputImageSize_Bytes = chunkSizeIn;
 8001680:	4b10      	ldr	r3, [pc, #64]	; (80016c4 <JPEG_Decode_DMA+0x64>)
 8001682:	601a      	str	r2, [r3, #0]
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8001684:	4a10      	ldr	r2, [pc, #64]	; (80016c8 <JPEG_Decode_DMA+0x68>)
    MCU_BlockIndex = 0;
 8001686:	4b11      	ldr	r3, [pc, #68]	; (80016cc <JPEG_Decode_DMA+0x6c>)
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8001688:	68d2      	ldr	r2, [r2, #12]
    MCU_BlockIndex = 0;
 800168a:	601c      	str	r4, [r3, #0]
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 800168c:	436a      	muls	r2, r5
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 800168e:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <JPEG_Decode_DMA+0x70>)
 8001690:	701c      	strb	r4, [r3, #0]
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
 8001692:	609c      	str	r4, [r3, #8]
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 8001694:	731c      	strb	r4, [r3, #12]
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
 8001696:	615c      	str	r4, [r3, #20]
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8001698:	9200      	str	r2, [sp, #0]
 800169a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f009 f812 	bl	800a6c8 <HAL_JPEG_Decode_DMA>

    return 0;
}
 80016a4:	4620      	mov	r0, r4
 80016a6:	b003      	add	sp, #12
 80016a8:	bd30      	pop	{r4, r5, pc}
 80016aa:	bf00      	nop
 80016ac:	200097b0 	.word	0x200097b0
 80016b0:	200097d8 	.word	0x200097d8
 80016b4:	200097c0 	.word	0x200097c0
 80016b8:	200097c4 	.word	0x200097c4
 80016bc:	200097b8 	.word	0x200097b8
 80016c0:	200097b4 	.word	0x200097b4
 80016c4:	200097bc 	.word	0x200097bc
 80016c8:	200097dc 	.word	0x200097dc
 80016cc:	200097d0 	.word	0x200097d0
 80016d0:	20000018 	.word	0x20000018

080016d4 <HAL_JPEG_InfoReadyCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param pInfo: JPEG Info Struct pointer
  * @retval None
  */
void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 80016d4:	b508      	push	{r3, lr}
  if(pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
 80016d6:	684b      	ldr	r3, [r1, #4]
{
 80016d8:	4608      	mov	r0, r1
  if(pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d119      	bne.n	8001712 <HAL_JPEG_InfoReadyCallback+0x3e>
  {
    if((pInfo->ImageWidth % 16) != 0)
 80016de:	68cb      	ldr	r3, [r1, #12]
 80016e0:	071a      	lsls	r2, r3, #28
      pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));

    if((pInfo->ImageHeight % 16) != 0)
      pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));

    HAL_StatusTypeDef status = TGFX_JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
 80016e2:	4a1e      	ldr	r2, [pc, #120]	; (800175c <HAL_JPEG_InfoReadyCallback+0x88>)
      pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 80016e4:	bf1e      	ittt	ne
 80016e6:	f023 030f 	bicne.w	r3, r3, #15
 80016ea:	3310      	addne	r3, #16
 80016ec:	60cb      	strne	r3, [r1, #12]
    if((pInfo->ImageHeight % 16) != 0)
 80016ee:	688b      	ldr	r3, [r1, #8]
 80016f0:	0719      	lsls	r1, r3, #28
    HAL_StatusTypeDef status = TGFX_JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
 80016f2:	491b      	ldr	r1, [pc, #108]	; (8001760 <HAL_JPEG_InfoReadyCallback+0x8c>)
      pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
 80016f4:	bf1e      	ittt	ne
 80016f6:	f023 030f 	bicne.w	r3, r3, #15
 80016fa:	3310      	addne	r3, #16
 80016fc:	6083      	strne	r3, [r0, #8]
    HAL_StatusTypeDef status = TGFX_JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
 80016fe:	f001 fb49 	bl	8002d94 <TGFX_JPEG_GetDecodeColorConvertFunc>
    if(status != HAL_OK)
 8001702:	b348      	cbz	r0, 8001758 <HAL_JPEG_InfoReadyCallback+0x84>
    {
      assert(status == HAL_OK);
 8001704:	4b17      	ldr	r3, [pc, #92]	; (8001764 <HAL_JPEG_InfoReadyCallback+0x90>)
 8001706:	f240 2129 	movw	r1, #553	; 0x229
 800170a:	4a17      	ldr	r2, [pc, #92]	; (8001768 <HAL_JPEG_InfoReadyCallback+0x94>)
    }

    HAL_StatusTypeDef status = JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
    if(status != HAL_OK)
    {
      assert(status == HAL_OK);
 800170c:	4817      	ldr	r0, [pc, #92]	; (800176c <HAL_JPEG_InfoReadyCallback+0x98>)
 800170e:	f024 fa7f 	bl	8025c10 <__assert_func>
    if(pInfo->ChromaSubsampling == JPEG_422_SUBSAMPLING)
 8001712:	2b02      	cmp	r3, #2
 8001714:	d117      	bne.n	8001746 <HAL_JPEG_InfoReadyCallback+0x72>
      if((pInfo->ImageWidth % 16) != 0)
 8001716:	68cb      	ldr	r3, [r1, #12]
 8001718:	071a      	lsls	r2, r3, #28
 800171a:	d003      	beq.n	8001724 <HAL_JPEG_InfoReadyCallback+0x50>
        pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 800171c:	f023 030f 	bic.w	r3, r3, #15
 8001720:	3310      	adds	r3, #16
        pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 8001722:	60c3      	str	r3, [r0, #12]
      if((pInfo->ImageHeight % 8) != 0)
 8001724:	6883      	ldr	r3, [r0, #8]
 8001726:	075a      	lsls	r2, r3, #29
        pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 8001728:	bf1e      	ittt	ne
 800172a:	f023 0307 	bicne.w	r3, r3, #7
 800172e:	3308      	addne	r3, #8
 8001730:	6083      	strne	r3, [r0, #8]
    HAL_StatusTypeDef status = JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
 8001732:	4a0a      	ldr	r2, [pc, #40]	; (800175c <HAL_JPEG_InfoReadyCallback+0x88>)
 8001734:	490a      	ldr	r1, [pc, #40]	; (8001760 <HAL_JPEG_InfoReadyCallback+0x8c>)
 8001736:	f00e f8fb 	bl	800f930 <JPEG_GetDecodeColorConvertFunc>
    if(status != HAL_OK)
 800173a:	b168      	cbz	r0, 8001758 <HAL_JPEG_InfoReadyCallback+0x84>
      assert(status == HAL_OK);
 800173c:	4b09      	ldr	r3, [pc, #36]	; (8001764 <HAL_JPEG_InfoReadyCallback+0x90>)
 800173e:	f240 2143 	movw	r1, #579	; 0x243
 8001742:	4a09      	ldr	r2, [pc, #36]	; (8001768 <HAL_JPEG_InfoReadyCallback+0x94>)
 8001744:	e7e2      	b.n	800170c <HAL_JPEG_InfoReadyCallback+0x38>
    if(pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
 8001746:	2b00      	cmp	r3, #0
 8001748:	d1f3      	bne.n	8001732 <HAL_JPEG_InfoReadyCallback+0x5e>
      if((pInfo->ImageWidth % 8) != 0)
 800174a:	68cb      	ldr	r3, [r1, #12]
 800174c:	0759      	lsls	r1, r3, #29
 800174e:	d0e9      	beq.n	8001724 <HAL_JPEG_InfoReadyCallback+0x50>
        pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 8001750:	f023 0307 	bic.w	r3, r3, #7
 8001754:	3308      	adds	r3, #8
 8001756:	e7e4      	b.n	8001722 <HAL_JPEG_InfoReadyCallback+0x4e>
    }
  }
}
 8001758:	bd08      	pop	{r3, pc}
 800175a:	bf00      	nop
 800175c:	200097d4 	.word	0x200097d4
 8001760:	200097f0 	.word	0x200097f0
 8001764:	080274d3 	.word	0x080274d3
 8001768:	080274e4 	.word	0x080274e4
 800176c:	080272f3 	.word	0x080272f3

08001770 <HAL_JPEG_GetDataCallback>:
  * @retval None
  */
void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData)
{
  //Input buffer has been consumed by the peripheral and to ask for a new data chunk if the operation (encoding/decoding) has not been complete yet.
  JPEG_InputImageIndex += NbDecodedData;
 8001770:	4b0b      	ldr	r3, [pc, #44]	; (80017a0 <HAL_JPEG_GetDataCallback+0x30>)
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	440a      	add	r2, r1
{
 8001776:	b430      	push	{r4, r5}
  JPEG_InputImageIndex += NbDecodedData;
 8001778:	601a      	str	r2, [r3, #0]
  if(JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
 800177a:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <HAL_JPEG_GetDataCallback+0x34>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	429a      	cmp	r2, r3
 8001780:	d20c      	bcs.n	800179c <HAL_JPEG_GetDataCallback+0x2c>
  {
    JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8001782:	4c09      	ldr	r4, [pc, #36]	; (80017a8 <HAL_JPEG_GetDataCallback+0x38>)
    uint32_t inDataLength = JPEG_InputImageSize_Bytes - JPEG_InputImageIndex;
 8001784:	1a9a      	subs	r2, r3, r2
    JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8001786:	6825      	ldr	r5, [r4, #0]
    HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 8001788:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 800178c:	4429      	add	r1, r5
    HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 800178e:	bf28      	it	cs
 8001790:	f44f 3280 	movcs.w	r2, #65536	; 0x10000
    JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8001794:	6021      	str	r1, [r4, #0]
  }
}
 8001796:	bc30      	pop	{r4, r5}
    HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 8001798:	f008 bffd 	b.w	800a796 <HAL_JPEG_ConfigInputBuffer>
}
 800179c:	bc30      	pop	{r4, r5}
 800179e:	4770      	bx	lr
 80017a0:	200097b8 	.word	0x200097b8
 80017a4:	200097bc 	.word	0x200097bc
 80017a8:	200097b4 	.word	0x200097b4

080017ac <HAL_JPEG_DataReadyCallback>:
  * @param pDataOut: pointer to the output data buffer
  * @param OutDataLength: length of output buffer in bytes
  * @retval None
  */
void HAL_JPEG_DataReadyCallback (JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength)
{
 80017ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 80017ae:	4d17      	ldr	r5, [pc, #92]	; (800180c <HAL_JPEG_DataReadyCallback+0x60>)
 80017b0:	2701      	movs	r7, #1
 80017b2:	210c      	movs	r1, #12
 80017b4:	4c16      	ldr	r4, [pc, #88]	; (8001810 <HAL_JPEG_DataReadyCallback+0x64>)
 80017b6:	682b      	ldr	r3, [r5, #0]
{
 80017b8:	4606      	mov	r6, r0
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 80017ba:	4359      	muls	r1, r3
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;

    JPEG_OUT_Write_BufferIndex++;
 80017bc:	443b      	add	r3, r7
    if(JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 80017be:	42bb      	cmp	r3, r7
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 80017c0:	eb04 0001 	add.w	r0, r4, r1
 80017c4:	5467      	strb	r7, [r4, r1]
    {
      JPEG_OUT_Write_BufferIndex = 0;
 80017c6:	bf88      	it	hi
 80017c8:	2300      	movhi	r3, #0
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
 80017ca:	6082      	str	r2, [r0, #8]
    }

    //if the other buffer is full, then ui thread might be converting it
    if(Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
 80017cc:	220c      	movs	r2, #12
      JPEG_OUT_Write_BufferIndex = 0;
 80017ce:	602b      	str	r3, [r5, #0]
    if(Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
 80017d0:	682b      	ldr	r3, [r5, #0]
 80017d2:	4353      	muls	r3, r2
 80017d4:	5ce3      	ldrb	r3, [r4, r3]
 80017d6:	b133      	cbz	r3, 80017e6 <HAL_JPEG_DataReadyCallback+0x3a>
    {
      HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 80017d8:	2102      	movs	r1, #2
 80017da:	4630      	mov	r0, r6
 80017dc:	f008 ffa8 	bl	800a730 <HAL_JPEG_Pause>
      Output_Is_Paused = 1;
 80017e0:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <HAL_JPEG_DataReadyCallback+0x68>)
 80017e2:	2201      	movs	r2, #1
 80017e4:	601a      	str	r2, [r3, #0]
    }
    HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 80017e6:	682a      	ldr	r2, [r5, #0]
 80017e8:	210c      	movs	r1, #12
 80017ea:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <HAL_JPEG_DataReadyCallback+0x6c>)
 80017ec:	4630      	mov	r0, r6
 80017ee:	fb01 4402 	mla	r4, r1, r2, r4
 80017f2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	6861      	ldr	r1, [r4, #4]
 80017fa:	435a      	muls	r2, r3
 80017fc:	f008 ffce 	bl	800a79c <HAL_JPEG_ConfigOutputBuffer>

    // Signal Hardware Decoding to wake up
    SEM_POST(semDecodingDone);
 8001800:	4b06      	ldr	r3, [pc, #24]	; (800181c <HAL_JPEG_DataReadyCallback+0x70>)
 8001802:	6818      	ldr	r0, [r3, #0]
}
 8001804:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    SEM_POST(semDecodingDone);
 8001808:	f00b bc92 	b.w	800d130 <osSemaphoreRelease>
 800180c:	200097c4 	.word	0x200097c4
 8001810:	20000018 	.word	0x20000018
 8001814:	200097d8 	.word	0x200097d8
 8001818:	200097dc 	.word	0x200097dc
 800181c:	200097f4 	.word	0x200097f4

08001820 <HAL_JPEG_ErrorCallback>:
  __ASM volatile ("cpsid i" : : : "memory");
 8001820:	b672      	cpsid	i
  * @retval None
  */
void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef *hjpeg)
{
  __disable_irq();
  while (1)
 8001822:	e7fe      	b.n	8001822 <HAL_JPEG_ErrorCallback+0x2>

08001824 <HAL_JPEG_DecodeCpltCallback>:
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
  Jpeg_HWDecodingEnd = 1;
 8001824:	4b01      	ldr	r3, [pc, #4]	; (800182c <HAL_JPEG_DecodeCpltCallback+0x8>)
 8001826:	2201      	movs	r2, #1
 8001828:	601a      	str	r2, [r3, #0]
}
 800182a:	4770      	bx	lr
 800182c:	200097cc 	.word	0x200097cc

08001830 <JPEG_OutputHandler>:
  * @brief  JPEG Ouput Data BackGround Postprocessing .
  * @param hjpeg: JPEG handle pointer
  * @retval 1 : if JPEG processing has finished, 0 : if JPEG processing still ongoing
  */
uint32_t JPEG_OutputHandler(JPEG_HandleTypeDef *hjpeg)
{
 8001830:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  uint32_t ConvertedDataCount;

  if(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL)
 8001834:	4d38      	ldr	r5, [pc, #224]	; (8001918 <JPEG_OutputHandler+0xe8>)
 8001836:	260c      	movs	r6, #12
 8001838:	4c38      	ldr	r4, [pc, #224]	; (800191c <JPEG_OutputHandler+0xec>)
 800183a:	682b      	ldr	r3, [r5, #0]
 800183c:	4373      	muls	r3, r6
 800183e:	5ce3      	ldrb	r3, [r4, r3]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d149      	bne.n	80018d8 <JPEG_OutputHandler+0xa8>
  {
    /* Invalidate DCache prior to YCbCr/RGB software conversion. */
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8001844:	4a36      	ldr	r2, [pc, #216]	; (8001920 <JPEG_OutputHandler+0xf0>)
 8001846:	6953      	ldr	r3, [r2, #20]
 8001848:	03db      	lsls	r3, r3, #15
 800184a:	d51e      	bpl.n	800188a <JPEG_OutputHandler+0x5a>
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800184c:	2300      	movs	r3, #0
 800184e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001852:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8001856:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800185a:	f643 76e0 	movw	r6, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800185e:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001862:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8001866:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001868:	ea03 0c06 	and.w	ip, r3, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800186c:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800186e:	ea4c 7781 	orr.w	r7, ip, r1, lsl #30
      } while (ways-- != 0U);
 8001872:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001874:	f8c2 7274 	str.w	r7, [r2, #628]	; 0x274
      } while (ways-- != 0U);
 8001878:	d2f9      	bcs.n	800186e <JPEG_OutputHandler+0x3e>
    } while(sets-- != 0U);
 800187a:	3b20      	subs	r3, #32
 800187c:	f113 0f20 	cmn.w	r3, #32
 8001880:	d1f2      	bne.n	8001868 <JPEG_OutputHandler+0x38>
 8001882:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001886:	f3bf 8f6f 	isb	sy
    {
      SCB_CleanInvalidateDCache();
    }

    MCU_BlockIndex += pConvert_Function(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBuffer, FrameBufferAddress, MCU_BlockIndex, Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBufferSize, &ConvertedDataCount);
 800188a:	260c      	movs	r6, #12
 800188c:	4f25      	ldr	r7, [pc, #148]	; (8001924 <JPEG_OutputHandler+0xf4>)
 800188e:	6828      	ldr	r0, [r5, #0]
 8001890:	eb0d 0306 	add.w	r3, sp, r6
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	fb06 4000 	mla	r0, r6, r0, r4
 800189a:	4923      	ldr	r1, [pc, #140]	; (8001928 <JPEG_OutputHandler+0xf8>)
 800189c:	9300      	str	r3, [sp, #0]
 800189e:	4b23      	ldr	r3, [pc, #140]	; (800192c <JPEG_OutputHandler+0xfc>)
 80018a0:	6809      	ldr	r1, [r1, #0]
 80018a2:	f8d3 8000 	ldr.w	r8, [r3]
 80018a6:	6883      	ldr	r3, [r0, #8]
 80018a8:	6840      	ldr	r0, [r0, #4]
 80018aa:	47c0      	blx	r8

    Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State = JPEG_BUFFER_EMPTY;
 80018ac:	682a      	ldr	r2, [r5, #0]
    MCU_BlockIndex += pConvert_Function(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBuffer, FrameBufferAddress, MCU_BlockIndex, Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBufferSize, &ConvertedDataCount);
 80018ae:	683b      	ldr	r3, [r7, #0]
    Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State = JPEG_BUFFER_EMPTY;
 80018b0:	4356      	muls	r6, r2
    Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBufferSize = 0;

    JPEG_OUT_Read_BufferIndex++;
 80018b2:	3201      	adds	r2, #1
    MCU_BlockIndex += pConvert_Function(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBuffer, FrameBufferAddress, MCU_BlockIndex, Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBufferSize, &ConvertedDataCount);
 80018b4:	4418      	add	r0, r3
    Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State = JPEG_BUFFER_EMPTY;
 80018b6:	2300      	movs	r3, #0
    JPEG_OUT_Read_BufferIndex++;
 80018b8:	2a01      	cmp	r2, #1
    Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State = JPEG_BUFFER_EMPTY;
 80018ba:	eb04 0106 	add.w	r1, r4, r6
 80018be:	55a3      	strb	r3, [r4, r6]
    Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBufferSize = 0;
 80018c0:	608b      	str	r3, [r1, #8]
    JPEG_OUT_Read_BufferIndex++;
 80018c2:	bf98      	it	ls
 80018c4:	4613      	movls	r3, r2
    MCU_BlockIndex += pConvert_Function(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBuffer, FrameBufferAddress, MCU_BlockIndex, Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBufferSize, &ConvertedDataCount);
 80018c6:	6038      	str	r0, [r7, #0]
    JPEG_OUT_Read_BufferIndex++;
 80018c8:	602b      	str	r3, [r5, #0]
    if(JPEG_OUT_Read_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
    {
      JPEG_OUT_Read_BufferIndex = 0;
    }

    if(MCU_BlockIndex == MCU_TotalNb)
 80018ca:	4b19      	ldr	r3, [pc, #100]	; (8001930 <JPEG_OutputHandler+0x100>)
 80018cc:	683a      	ldr	r2, [r7, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d10f      	bne.n	80018f4 <JPEG_OutputHandler+0xc4>
    {
      return 1;
 80018d4:	2001      	movs	r0, #1
 80018d6:	e018      	b.n	800190a <JPEG_OutputHandler+0xda>
    }
  }
  else if((Output_Is_Paused == 1) && \
 80018d8:	4916      	ldr	r1, [pc, #88]	; (8001934 <JPEG_OutputHandler+0x104>)
 80018da:	680a      	ldr	r2, [r1, #0]
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
 80018dc:	2a01      	cmp	r2, #1
 80018de:	d117      	bne.n	8001910 <JPEG_OutputHandler+0xe0>
 80018e0:	4a15      	ldr	r2, [pc, #84]	; (8001938 <JPEG_OutputHandler+0x108>)
 80018e2:	6812      	ldr	r2, [r2, #0]
 80018e4:	4372      	muls	r2, r6
  else if((Output_Is_Paused == 1) && \
 80018e6:	5ca2      	ldrb	r2, [r4, r2]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	d111      	bne.n	8001910 <JPEG_OutputHandler+0xe0>
          (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_EMPTY))
  {
    Output_Is_Paused = 0;
 80018ec:	600b      	str	r3, [r1, #0]
    HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 80018ee:	2102      	movs	r1, #2
 80018f0:	f009 f98a 	bl	800ac08 <HAL_JPEG_Resume>
  else
  {
    return 2;
  }

  if((MCU_BlockIndex == MCU_TotalNb) && (Jpeg_HWDecodingEnd))// decode completed
 80018f4:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <JPEG_OutputHandler+0xf4>)
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	4b0d      	ldr	r3, [pc, #52]	; (8001930 <JPEG_OutputHandler+0x100>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d109      	bne.n	8001914 <JPEG_OutputHandler+0xe4>
 8001900:	4b0e      	ldr	r3, [pc, #56]	; (800193c <JPEG_OutputHandler+0x10c>)
 8001902:	6818      	ldr	r0, [r3, #0]
 8001904:	3800      	subs	r0, #0
 8001906:	bf18      	it	ne
 8001908:	2001      	movne	r0, #1
  {
    return 1;
  }

  return 0;
}
 800190a:	b004      	add	sp, #16
 800190c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return 2;
 8001910:	2002      	movs	r0, #2
 8001912:	e7fa      	b.n	800190a <JPEG_OutputHandler+0xda>
  return 0;
 8001914:	2000      	movs	r0, #0
 8001916:	e7f8      	b.n	800190a <JPEG_OutputHandler+0xda>
 8001918:	200097c0 	.word	0x200097c0
 800191c:	20000018 	.word	0x20000018
 8001920:	e000ed00 	.word	0xe000ed00
 8001924:	200097d0 	.word	0x200097d0
 8001928:	200097b0 	.word	0x200097b0
 800192c:	200097f0 	.word	0x200097f0
 8001930:	200097d4 	.word	0x200097d4
 8001934:	200097d8 	.word	0x200097d8
 8001938:	200097c4 	.word	0x200097c4
 800193c:	200097cc 	.word	0x200097cc

08001940 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>:
{
 8001940:	b538      	push	{r3, r4, r5, lr}
    if (length == 0)
 8001942:	b36a      	cbz	r2, 80019a0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x60>
    if (outputBuffer) //only decode if buffers are assigned.
 8001944:	b363      	cbz	r3, 80019a0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x60>
      JPEG_ConvertorParams.bytes_pr_pixel = 2;
 8001946:	4c17      	ldr	r4, [pc, #92]	; (80019a4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x64>)
 8001948:	2502      	movs	r5, #2
 800194a:	6125      	str	r5, [r4, #16]
      JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 800194c:	68c5      	ldr	r5, [r0, #12]
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 800194e:	6900      	ldr	r0, [r0, #16]
      if((JPEG_ConvertorParams.WidthExtend % 16) != 0)
 8001950:	f015 0f0f 	tst.w	r5, #15
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 8001954:	f000 000f 	and.w	r0, r0, #15
          JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 8001958:	bf18      	it	ne
 800195a:	f025 050f 	bicne.w	r5, r5, #15
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 800195e:	f1c0 0010 	rsb	r0, r0, #16
          JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 8001962:	bf18      	it	ne
 8001964:	3510      	addne	r5, #16
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 8001966:	60a0      	str	r0, [r4, #8]
          JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 8001968:	6025      	str	r5, [r4, #0]
      JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 800196a:	f44f 65c8 	mov.w	r5, #1600	; 0x640
      JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, outputBuffer);
 800196e:	480e      	ldr	r0, [pc, #56]	; (80019a8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x68>)
      JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 8001970:	6065      	str	r5, [r4, #4]
      JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
 8001972:	6825      	ldr	r5, [r4, #0]
 8001974:	092d      	lsrs	r5, r5, #4
 8001976:	60e5      	str	r5, [r4, #12]
      JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, outputBuffer);
 8001978:	f7ff fe72 	bl	8001660 <JPEG_Decode_DMA>
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 800197c:	4d0a      	ldr	r5, [pc, #40]	; (80019a8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x68>)
 800197e:	4c0b      	ldr	r4, [pc, #44]	; (80019ac <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x6c>)
 8001980:	4628      	mov	r0, r5
 8001982:	f7ff ff55 	bl	8001830 <JPEG_OutputHandler>
 8001986:	6020      	str	r0, [r4, #0]
        if (JpegProcessing_End == 2)
 8001988:	6823      	ldr	r3, [r4, #0]
 800198a:	2b02      	cmp	r3, #2
 800198c:	d105      	bne.n	800199a <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x5a>
          SEM_WAIT(semDecodingDone);
 800198e:	4b08      	ldr	r3, [pc, #32]	; (80019b0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x70>)
 8001990:	f04f 31ff 	mov.w	r1, #4294967295
 8001994:	6818      	ldr	r0, [r3, #0]
 8001996:	f00b fb91 	bl	800d0bc <osSemaphoreAcquire>
      while(JpegProcessing_End != 1);
 800199a:	6823      	ldr	r3, [r4, #0]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d1ef      	bne.n	8001980 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x40>
}
 80019a0:	bd38      	pop	{r3, r4, r5, pc}
 80019a2:	bf00      	nop
 80019a4:	200097dc 	.word	0x200097dc
 80019a8:	200121f4 	.word	0x200121f4
 80019ac:	200097c8 	.word	0x200097c8
 80019b0:	200097f4 	.word	0x200097f4

080019b4 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm>:
{
 80019b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80019b8:	4699      	mov	r9, r3
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 80019ba:	6943      	ldr	r3, [r0, #20]
{
 80019bc:	4604      	mov	r4, r0
 80019be:	460f      	mov	r7, r1
 80019c0:	4690      	mov	r8, r2
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 80019c2:	b92b      	cbnz	r3, 80019d0 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x1c>
 80019c4:	4b2a      	ldr	r3, [pc, #168]	; (8001a70 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xbc>)
 80019c6:	21b9      	movs	r1, #185	; 0xb9
 80019c8:	4a2a      	ldr	r2, [pc, #168]	; (8001a74 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xc0>)
 80019ca:	482b      	ldr	r0, [pc, #172]	; (8001a78 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xc4>)
 80019cc:	f024 f920 	bl	8025c10 <__assert_func>
    readData(currentMovieOffset, 8);
 80019d0:	2208      	movs	r2, #8
 80019d2:	6981      	ldr	r1, [r0, #24]
 80019d4:	f7ff fc9c 	bl	8001310 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t streamNo  = getU16(currentMovieOffset);
 80019d8:	69a6      	ldr	r6, [r4, #24]
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80019da:	4620      	mov	r0, r4
 80019dc:	f106 0a08 	add.w	sl, r6, #8
 80019e0:	1d31      	adds	r1, r6, #4
 80019e2:	f7ff fc71 	bl	80012c8 <_ZN20HardwareMJPEGDecoder6getU32Em>
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 80019e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80019e8:	eb00 020a 	add.w	r2, r0, sl
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80019ec:	4605      	mov	r5, r0
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d231      	bcs.n	8001a56 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xa2>
    uint32_t streamNo  = getU16(currentMovieOffset);
 80019f2:	4631      	mov	r1, r6
 80019f4:	4620      	mov	r0, r4
 80019f6:	f7ff fc7c 	bl	80012f2 <_ZN20HardwareMJPEGDecoder6getU16Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 80019fa:	f243 0330 	movw	r3, #12336	; 0x3030
 80019fe:	4298      	cmp	r0, r3
 8001a00:	d11d      	bne.n	8001a3e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8001a02:	1cb1      	adds	r1, r6, #2
 8001a04:	4620      	mov	r0, r4
 8001a06:	f7ff fc74 	bl	80012f2 <_ZN20HardwareMJPEGDecoder6getU16Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8001a0a:	f246 3364 	movw	r3, #25444	; 0x6364
 8001a0e:	4298      	cmp	r0, r3
 8001a10:	d115      	bne.n	8001a3e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 8001a12:	b1a5      	cbz	r5, 8001a3e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8001a14:	462a      	mov	r2, r5
 8001a16:	4651      	mov	r1, sl
 8001a18:	4620      	mov	r0, r4
            currentMovieOffset += 8;
 8001a1a:	f8c4 a018 	str.w	sl, [r4, #24]
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8001a1e:	f7ff fc77 	bl	8001310 <_ZN20HardwareMJPEGDecoder8readDataEmm>
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 8001a22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8001a24:	4601      	mov	r1, r0
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 8001a26:	462a      	mov	r2, r5
 8001a28:	4620      	mov	r0, r4
 8001a2a:	f8cd 8000 	str.w	r8, [sp]
 8001a2e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8001a32:	463b      	mov	r3, r7
 8001a34:	f7ff ff84 	bl	8001940 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>
            frameNumber++;
 8001a38:	6963      	ldr	r3, [r4, #20]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	6163      	str	r3, [r4, #20]
        currentMovieOffset += chunkSize;
 8001a3e:	69a3      	ldr	r3, [r4, #24]
 8001a40:	442b      	add	r3, r5
        if (chunkSize == 0) // Empty frame - Skip
 8001a42:	b18d      	cbz	r5, 8001a68 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb4>
          currentMovieOffset += 8;
 8001a44:	61a3      	str	r3, [r4, #24]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8001a46:	69a3      	ldr	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 8001a48:	6a62      	ldr	r2, [r4, #36]	; 0x24
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	f023 0301 	bic.w	r3, r3, #1
        if (currentMovieOffset == lastFrameEnd)
 8001a50:	4293      	cmp	r3, r2
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8001a52:	61a3      	str	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 8001a54:	d10a      	bne.n	8001a6c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb8>
        frameNumber = 1;
 8001a56:	2001      	movs	r0, #1
        currentMovieOffset = firstFrameOffset; //start over
 8001a58:	6a23      	ldr	r3, [r4, #32]
        frameNumber = 1;
 8001a5a:	6160      	str	r0, [r4, #20]
        currentMovieOffset = firstFrameOffset; //start over
 8001a5c:	61a3      	str	r3, [r4, #24]
}
 8001a5e:	f080 0001 	eor.w	r0, r0, #1
 8001a62:	b004      	add	sp, #16
 8001a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          currentMovieOffset += 8;
 8001a68:	3308      	adds	r3, #8
 8001a6a:	e7eb      	b.n	8001a44 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x90>
        isCurrentFrameLast = false;
 8001a6c:	2000      	movs	r0, #0
 8001a6e:	e7f6      	b.n	8001a5e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xaa>
 8001a70:	080273b4 	.word	0x080273b4
 8001a74:	0802752c 	.word	0x0802752c
 8001a78:	080272f3 	.word	0x080272f3

08001a7c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:
{
 8001a7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001a7e:	4604      	mov	r4, r0
    readData(currentMovieOffset, 8);
 8001a80:	6981      	ldr	r1, [r0, #24]
{
 8001a82:	4615      	mov	r5, r2
    readData(currentMovieOffset, 8);
 8001a84:	2208      	movs	r2, #8
 8001a86:	f7ff fc43 	bl	8001310 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    const uint32_t length = getU32(currentMovieOffset + 4);
 8001a8a:	69a6      	ldr	r6, [r4, #24]
 8001a8c:	4620      	mov	r0, r4
 8001a8e:	1d31      	adds	r1, r6, #4
 8001a90:	f7ff fc1a 	bl	80012c8 <_ZN20HardwareMJPEGDecoder6getU32Em>
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8001a94:	f106 0108 	add.w	r1, r6, #8
    const uint32_t length = getU32(currentMovieOffset + 4);
 8001a98:	4602      	mov	r2, r0
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8001a9a:	9001      	str	r0, [sp, #4]
 8001a9c:	4620      	mov	r0, r4
 8001a9e:	f7ff fc37 	bl	8001310 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 8001aa2:	4601      	mov	r1, r0
    if (frameBuffer) //only decode if buffers are assigned.
 8001aa4:	b16d      	cbz	r5, 8001ac2 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x46>
      JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 8001aa6:	462b      	mov	r3, r5
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8001aa8:	4c07      	ldr	r4, [pc, #28]	; (8001ac8 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x4c>)
 8001aaa:	4d08      	ldr	r5, [pc, #32]	; (8001acc <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
      JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 8001aac:	9a01      	ldr	r2, [sp, #4]
 8001aae:	4807      	ldr	r0, [pc, #28]	; (8001acc <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
 8001ab0:	f7ff fdd6 	bl	8001660 <JPEG_Decode_DMA>
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8001ab4:	4628      	mov	r0, r5
 8001ab6:	f7ff febb 	bl	8001830 <JPEG_OutputHandler>
 8001aba:	6020      	str	r0, [r4, #0]
      while(JpegProcessing_End == 0);
 8001abc:	6823      	ldr	r3, [r4, #0]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d0f8      	beq.n	8001ab4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x38>
}
 8001ac2:	2001      	movs	r0, #1
 8001ac4:	b002      	add	sp, #8
 8001ac6:	bd70      	pop	{r4, r5, r6, pc}
 8001ac8:	200097c8 	.word	0x200097c8
 8001acc:	200121f4 	.word	0x200121f4

08001ad0 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001ad0:	2101      	movs	r1, #1
 8001ad2:	2200      	movs	r2, #0
{
 8001ad4:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001ad6:	4608      	mov	r0, r1
 8001ad8:	f00b fa9a 	bl	800d010 <osSemaphoreNew>
 8001adc:	4b0a      	ldr	r3, [pc, #40]	; (8001b08 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8001ade:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8001ae0:	b928      	cbnz	r0, 8001aee <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8001ae2:	4b0a      	ldr	r3, [pc, #40]	; (8001b0c <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8001ae4:	2128      	movs	r1, #40	; 0x28
 8001ae6:	4a0a      	ldr	r2, [pc, #40]	; (8001b10 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001ae8:	480a      	ldr	r0, [pc, #40]	; (8001b14 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8001aea:	f024 f891 	bl	8025c10 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8001aee:	2200      	movs	r2, #0
 8001af0:	2104      	movs	r1, #4
 8001af2:	2001      	movs	r0, #1
 8001af4:	f00b fb52 	bl	800d19c <osMessageQueueNew>
 8001af8:	4b07      	ldr	r3, [pc, #28]	; (8001b18 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8001afa:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001afc:	b918      	cbnz	r0, 8001b06 <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 8001afe:	4b07      	ldr	r3, [pc, #28]	; (8001b1c <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8001b00:	212c      	movs	r1, #44	; 0x2c
 8001b02:	4a03      	ldr	r2, [pc, #12]	; (8001b10 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8001b04:	e7f0      	b.n	8001ae8 <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 8001b06:	bd08      	pop	{r3, pc}
 8001b08:	200097fc 	.word	0x200097fc
 8001b0c:	080275cc 	.word	0x080275cc
 8001b10:	08027615 	.word	0x08027615
 8001b14:	08027644 	.word	0x08027644
 8001b18:	200097f8 	.word	0x200097f8
 8001b1c:	080276a6 	.word	0x080276a6

08001b20 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8001b20:	4b02      	ldr	r3, [pc, #8]	; (8001b2c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 8001b22:	f04f 31ff 	mov.w	r1, #4294967295
 8001b26:	6818      	ldr	r0, [r3, #0]
 8001b28:	f00b bac8 	b.w	800d0bc <osSemaphoreAcquire>
 8001b2c:	200097fc 	.word	0x200097fc

08001b30 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8001b30:	4b01      	ldr	r3, [pc, #4]	; (8001b38 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8001b32:	6818      	ldr	r0, [r3, #0]
 8001b34:	f00b bafc 	b.w	800d130 <osSemaphoreRelease>
 8001b38:	200097fc 	.word	0x200097fc

08001b3c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8001b3c:	4b02      	ldr	r3, [pc, #8]	; (8001b48 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8001b3e:	2100      	movs	r1, #0
 8001b40:	6818      	ldr	r0, [r3, #0]
 8001b42:	f00b babb 	b.w	800d0bc <osSemaphoreAcquire>
 8001b46:	bf00      	nop
 8001b48:	200097fc 	.word	0x200097fc

08001b4c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 8001b4c:	f7ff bff0 	b.w	8001b30 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08001b50 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8001b50:	2300      	movs	r3, #0
 8001b52:	4803      	ldr	r0, [pc, #12]	; (8001b60 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8001b54:	4903      	ldr	r1, [pc, #12]	; (8001b64 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8001b56:	461a      	mov	r2, r3
 8001b58:	6800      	ldr	r0, [r0, #0]
 8001b5a:	f00b bb65 	b.w	800d228 <osMessageQueuePut>
 8001b5e:	bf00      	nop
 8001b60:	200097f8 	.word	0x200097f8
 8001b64:	20000030 	.word	0x20000030

08001b68 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8001b68:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	4c07      	ldr	r4, [pc, #28]	; (8001b8c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8001b6e:	a901      	add	r1, sp, #4
 8001b70:	461a      	mov	r2, r3
 8001b72:	6820      	ldr	r0, [r4, #0]
 8001b74:	f00b fb9a 	bl	800d2ac <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8001b78:	f04f 33ff 	mov.w	r3, #4294967295
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	a901      	add	r1, sp, #4
 8001b80:	6820      	ldr	r0, [r4, #0]
 8001b82:	f00b fb93 	bl	800d2ac <osMessageQueueGet>
}
 8001b86:	b002      	add	sp, #8
 8001b88:	bd10      	pop	{r4, pc}
 8001b8a:	bf00      	nop
 8001b8c:	200097f8 	.word	0x200097f8

08001b90 <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 8001b90:	6803      	ldr	r3, [r0, #0]
 8001b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b94:	4718      	bx	r3

08001b96 <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8001b96:	2001      	movs	r0, #1
 8001b98:	4770      	bx	lr

08001b9a <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 8001b9a:	6803      	ldr	r3, [r0, #0]
 8001b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b9e:	4718      	bx	r3

08001ba0 <_ZN8STM32DMA10initializeEv>:
}

void STM32DMA::initialize()
{
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001ba0:	4b0d      	ldr	r3, [pc, #52]	; (8001bd8 <_ZN8STM32DMA10initializeEv+0x38>)
{
 8001ba2:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001ba4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ba6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001baa:	631a      	str	r2, [r3, #48]	; 0x30
 8001bac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bae:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8001bb2:	9201      	str	r2, [sp, #4]
 8001bb4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8001bb6:	691a      	ldr	r2, [r3, #16]
 8001bb8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001bbc:	611a      	str	r2, [r3, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8001bbe:	691a      	ldr	r2, [r3, #16]
 8001bc0:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8001bc4:	611a      	str	r2, [r3, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8001bc6:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <_ZN8STM32DMA10initializeEv+0x3c>)
 8001bc8:	4a05      	ldr	r2, [pc, #20]	; (8001be0 <_ZN8STM32DMA10initializeEv+0x40>)
 8001bca:	619a      	str	r2, [r3, #24]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bcc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001bd0:	4b04      	ldr	r3, [pc, #16]	; (8001be4 <_ZN8STM32DMA10initializeEv+0x44>)
 8001bd2:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
 8001bd4:	b002      	add	sp, #8
 8001bd6:	4770      	bx	lr
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	20012018 	.word	0x20012018
 8001be0:	08001c29 	.word	0x08001c29
 8001be4:	e000e100 	.word	0xe000e100

08001be8 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8001be8:	f240 30ef 	movw	r0, #1007	; 0x3ef
 8001bec:	4770      	bx	lr
	...

08001bf0 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8001bf0:	4b05      	ldr	r3, [pc, #20]	; (8001c08 <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bf2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001bf6:	6003      	str	r3, [r0, #0]
 8001bf8:	4b04      	ldr	r3, [pc, #16]	; (8001c0c <_ZN8STM32DMAD1Ev+0x1c>)
 8001bfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8001bfe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001c02:	f3bf 8f6f 	isb	sy
}
 8001c06:	4770      	bx	lr
 8001c08:	08027858 	.word	0x08027858
 8001c0c:	e000e100 	.word	0xe000e100

08001c10 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8001c10:	b510      	push	{r4, lr}
 8001c12:	4604      	mov	r4, r0
}
 8001c14:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 8001c18:	f7ff ffea 	bl	8001bf0 <_ZN8STM32DMAD1Ev>
 8001c1c:	4620      	mov	r0, r4
 8001c1e:	f023 ffc8 	bl	8025bb2 <_ZdlPvj>
 8001c22:	4620      	mov	r0, r4
 8001c24:	bd10      	pop	{r4, pc}
	...

08001c28 <DMA2D_XferCpltCallback>:
 8001c28:	4b02      	ldr	r3, [pc, #8]	; (8001c34 <DMA2D_XferCpltCallback+0xc>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 8001c2e:	6803      	ldr	r3, [r0, #0]
 8001c30:	695b      	ldr	r3, [r3, #20]
 8001c32:	4718      	bx	r3
 8001c34:	20027bc4 	.word	0x20027bc4

08001c38 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8001c38:	b570      	push	{r4, r5, r6, lr}
 8001c3a:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8001c3c:	4b0a      	ldr	r3, [pc, #40]	; (8001c68 <_ZN8STM32DMAC1Ev+0x30>)
 8001c3e:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8001c40:	2600      	movs	r6, #0
 8001c42:	4625      	mov	r5, r4
 8001c44:	2260      	movs	r2, #96	; 0x60
 8001c46:	6060      	str	r0, [r4, #4]
 8001c48:	7226      	strb	r6, [r4, #8]
 8001c4a:	7266      	strb	r6, [r4, #9]
 8001c4c:	f845 3b20 	str.w	r3, [r5], #32
 8001c50:	4629      	mov	r1, r5
 8001c52:	f00f fb37 	bl	80112c4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8001c56:	f504 635a 	add.w	r3, r4, #3488	; 0xda0
        : color(0)
 8001c5a:	60ee      	str	r6, [r5, #12]
 8001c5c:	3524      	adds	r5, #36	; 0x24
 8001c5e:	42ab      	cmp	r3, r5
 8001c60:	d1fb      	bne.n	8001c5a <_ZN8STM32DMAC1Ev+0x22>
}
 8001c62:	4620      	mov	r0, r4
 8001c64:	bd70      	pop	{r4, r5, r6, pc}
 8001c66:	bf00      	nop
 8001c68:	08027858 	.word	0x08027858

08001c6c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 8001c6c:	b508      	push	{r3, lr}
    switch (format)
 8001c6e:	290b      	cmp	r1, #11
 8001c70:	d80b      	bhi.n	8001c8a <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1e>
 8001c72:	e8df f001 	tbb	[pc, r1]
 8001c76:	0612      	.short	0x0612
 8001c78:	0a0a0a10 	.word	0x0a0a0a10
 8001c7c:	0808080a 	.word	0x0808080a
 8001c80:	0808      	.short	0x0808
 8001c82:	2001      	movs	r0, #1
}
 8001c84:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8001c86:	2005      	movs	r0, #5
        break;
 8001c88:	e7fc      	b.n	8001c84 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        assert(0 && "Unsupported Format!");
 8001c8a:	4b05      	ldr	r3, [pc, #20]	; (8001ca0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 8001c8c:	2166      	movs	r1, #102	; 0x66
 8001c8e:	4a05      	ldr	r2, [pc, #20]	; (8001ca4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 8001c90:	4805      	ldr	r0, [pc, #20]	; (8001ca8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x3c>)
 8001c92:	f023 ffbd 	bl	8025c10 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8001c96:	2000      	movs	r0, #0
 8001c98:	e7f4      	b.n	8001c84 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8001c9a:	2002      	movs	r0, #2
    return dma2dColorMode;
 8001c9c:	e7f2      	b.n	8001c84 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 8001c9e:	bf00      	nop
 8001ca0:	080276e8 	.word	0x080276e8
 8001ca4:	08027703 	.word	0x08027703
 8001ca8:	0802774d 	.word	0x0802774d

08001cac <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 8001cac:	b508      	push	{r3, lr}
    switch (format)
 8001cae:	290a      	cmp	r1, #10
 8001cb0:	d809      	bhi.n	8001cc6 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1a>
 8001cb2:	e8df f001 	tbb	[pc, r1]
 8001cb6:	0610      	.short	0x0610
 8001cb8:	0808080e 	.word	0x0808080e
 8001cbc:	06060608 	.word	0x06060608
 8001cc0:	06          	.byte	0x06
 8001cc1:	00          	.byte	0x00
 8001cc2:	2001      	movs	r0, #1
}
 8001cc4:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8001cc6:	4b05      	ldr	r3, [pc, #20]	; (8001cdc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x30>)
 8001cc8:	2187      	movs	r1, #135	; 0x87
 8001cca:	4a05      	ldr	r2, [pc, #20]	; (8001ce0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 8001ccc:	4805      	ldr	r0, [pc, #20]	; (8001ce4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 8001cce:	f023 ff9f 	bl	8025c10 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8001cd2:	2000      	movs	r0, #0
 8001cd4:	e7f6      	b.n	8001cc4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8001cd6:	2002      	movs	r0, #2
    return dma2dColorMode;
 8001cd8:	e7f4      	b.n	8001cc4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 8001cda:	bf00      	nop
 8001cdc:	080276e8 	.word	0x080276e8
 8001ce0:	080277ad 	.word	0x080277ad
 8001ce4:	0802774d 	.word	0x0802774d

08001ce8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8001ce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8001cec:	7f4f      	ldrb	r7, [r1, #29]
{
 8001cee:	460c      	mov	r4, r1
 8001cf0:	4681      	mov	r9, r0
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8001cf2:	4639      	mov	r1, r7
 8001cf4:	f7ff ffba 	bl	8001c6c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001cf8:	f894 801e 	ldrb.w	r8, [r4, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8001cfc:	4605      	mov	r5, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001cfe:	4648      	mov	r0, r9
 8001d00:	4641      	mov	r1, r8
 8001d02:	f7ff ffb3 	bl	8001c6c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001d06:	4641      	mov	r1, r8
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001d08:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001d0a:	4648      	mov	r0, r9
 8001d0c:	f7ff ffce 	bl	8001cac <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001d10:	8aa1      	ldrh	r1, [r4, #20]
 8001d12:	8b62      	ldrh	r2, [r4, #26]
 8001d14:	4b42      	ldr	r3, [pc, #264]	; (8001e20 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8001d16:	1a52      	subs	r2, r2, r1
 8001d18:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001d1a:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8001d1c:	8b22      	ldrh	r2, [r4, #24]
 8001d1e:	1a52      	subs	r2, r2, r1
 8001d20:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001d22:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8001d24:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001d26:	ea42 4201 	orr.w	r2, r2, r1, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001d2a:	6920      	ldr	r0, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001d2c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8001d2e:	6862      	ldr	r2, [r4, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001d30:	63d8      	str	r0, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8001d32:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8001d34:	6821      	ldr	r1, [r4, #0]
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001d36:	f894 c01c 	ldrb.w	ip, [r4, #28]
    switch (blitOp.operation)
 8001d3a:	2980      	cmp	r1, #128	; 0x80
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001d3c:	ea4f 620c 	mov.w	r2, ip, lsl #24
    switch (blitOp.operation)
 8001d40:	d026      	beq.n	8001d90 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa8>
 8001d42:	d810      	bhi.n	8001d66 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7e>
 8001d44:	2920      	cmp	r1, #32
 8001d46:	ea45 0402 	orr.w	r4, r5, r2
 8001d4a:	d062      	beq.n	8001e12 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
 8001d4c:	2940      	cmp	r1, #64	; 0x40
 8001d4e:	d060      	beq.n	8001e12 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
 8001d50:	2904      	cmp	r1, #4
 8001d52:	d05e      	beq.n	8001e12 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
        break;
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001d54:	432a      	orrs	r2, r5
 8001d56:	4b32      	ldr	r3, [pc, #200]	; (8001e20 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8001d58:	4547      	cmp	r7, r8
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001d5a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001d5e:	61da      	str	r2, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8001d60:	d05b      	beq.n	8001e1a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8001d62:	4a30      	ldr	r2, [pc, #192]	; (8001e24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)
 8001d64:	e040      	b.n	8001de8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
    switch (blitOp.operation)
 8001d66:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8001d6a:	d007      	beq.n	8001d7c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x94>
 8001d6c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8001d70:	d1f0      	bne.n	8001d54 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001d72:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001d76:	f042 0209 	orr.w	r2, r2, #9
 8001d7a:	e003      	b.n	8001d84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001d7c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001d80:	f042 020a 	orr.w	r2, r2, #10
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001d84:	61da      	str	r2, [r3, #28]
        return color;
 8001d86:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8001d88:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001d8a:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001d8c:	6158      	str	r0, [r3, #20]
 8001d8e:	e02a      	b.n	8001de6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8001d90:	68a4      	ldr	r4, [r4, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001d92:	432a      	orrs	r2, r5
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8001d94:	1d21      	adds	r1, r4, #4
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001d96:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8001d9a:	62d9      	str	r1, [r3, #44]	; 0x2c
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001d9c:	61da      	str	r2, [r3, #28]
            switch ((Bitmap::ClutFormat)palette->format)
 8001d9e:	7822      	ldrb	r2, [r4, #0]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001da0:	625e      	str	r6, [r3, #36]	; 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001da2:	6158      	str	r0, [r3, #20]
            switch ((Bitmap::ClutFormat)palette->format)
 8001da4:	b142      	cbz	r2, 8001db8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8001da6:	2a01      	cmp	r2, #1
 8001da8:	d021      	beq.n	8001dee <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
                assert(0 && "Unsupported format");
 8001daa:	4b1f      	ldr	r3, [pc, #124]	; (8001e28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x140>)
 8001dac:	f240 1111 	movw	r1, #273	; 0x111
 8001db0:	4a1e      	ldr	r2, [pc, #120]	; (8001e2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8001db2:	481f      	ldr	r0, [pc, #124]	; (8001e30 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 8001db4:	f023 ff2c 	bl	8025c10 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001db8:	69da      	ldr	r2, [r3, #28]
            bool blend = true;
 8001dba:	2001      	movs	r0, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001dbc:	8861      	ldrh	r1, [r4, #2]
 8001dbe:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001dc2:	3901      	subs	r1, #1
 8001dc4:	f022 0210 	bic.w	r2, r2, #16
 8001dc8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001dcc:	61da      	str	r2, [r3, #28]
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8001dce:	4b14      	ldr	r3, [pc, #80]	; (8001e20 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8001dd0:	69da      	ldr	r2, [r3, #28]
 8001dd2:	f042 0220 	orr.w	r2, r2, #32
 8001dd6:	61da      	str	r2, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8001dd8:	69da      	ldr	r2, [r3, #28]
 8001dda:	0692      	lsls	r2, r2, #26
 8001ddc:	d4fc      	bmi.n	8001dd8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf0>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8001dde:	2210      	movs	r2, #16
 8001de0:	609a      	str	r2, [r3, #8]
            if(blend)
 8001de2:	2800      	cmp	r0, #0
 8001de4:	d0bd      	beq.n	8001d62 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7a>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8001de6:	4a13      	ldr	r2, [pc, #76]	; (8001e34 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
        }
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8001de8:	601a      	str	r2, [r3, #0]
        }
        break;
    }
}
 8001dea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001dee:	8862      	ldrh	r2, [r4, #2]
                if(blitOp.alpha == 255)
 8001df0:	f1bc 00ff 	subs.w	r0, ip, #255	; 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001df4:	69d9      	ldr	r1, [r3, #28]
 8001df6:	f102 34ff 	add.w	r4, r2, #4294967295
                if(blitOp.alpha == 255)
 8001dfa:	bf18      	it	ne
 8001dfc:	2001      	movne	r0, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001dfe:	f421 427f 	bic.w	r2, r1, #65280	; 0xff00
 8001e02:	f022 0210 	bic.w	r2, r2, #16
 8001e06:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8001e0a:	f042 0210 	orr.w	r2, r2, #16
 8001e0e:	61da      	str	r2, [r3, #28]
                break;
 8001e10:	e7dd      	b.n	8001dce <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001e12:	f444 3400 	orr.w	r4, r4, #131072	; 0x20000
 8001e16:	61dc      	str	r4, [r3, #28]
 8001e18:	e7b7      	b.n	8001d8a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8001e1a:	f240 2201 	movw	r2, #513	; 0x201
 8001e1e:	e7e3      	b.n	8001de8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
 8001e20:	4002b000 	.word	0x4002b000
 8001e24:	00010201 	.word	0x00010201
 8001e28:	080277f8 	.word	0x080277f8
 8001e2c:	08027812 	.word	0x08027812
 8001e30:	0802774d 	.word	0x0802774d
 8001e34:	00020201 	.word	0x00020201

08001e38 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8001e38:	b570      	push	{r4, r5, r6, lr}
 8001e3a:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001e3c:	7f89      	ldrb	r1, [r1, #30]
 8001e3e:	f7ff ff35 	bl	8001cac <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8001e42:	4b17      	ldr	r3, [pc, #92]	; (8001ea0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x68>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001e44:	8aa6      	ldrh	r6, [r4, #20]
 8001e46:	8ae1      	ldrh	r1, [r4, #22]

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001e48:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001e4a:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001e4e:	6925      	ldr	r5, [r4, #16]
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001e50:	1b92      	subs	r2, r2, r6
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8001e52:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001e54:	6459      	str	r1, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001e56:	63dd      	str	r5, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001e58:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8001e5a:	6826      	ldr	r6, [r4, #0]
 8001e5c:	68e1      	ldr	r1, [r4, #12]
 8001e5e:	2e08      	cmp	r6, #8
 8001e60:	d10d      	bne.n	8001e7e <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001e62:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001e64:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001e66:	6258      	str	r0, [r3, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8001e68:	4a0e      	ldr	r2, [pc, #56]	; (8001ea4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x6c>)
 8001e6a:	7f20      	ldrb	r0, [r4, #28]
 8001e6c:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8001e70:	61da      	str	r2, [r3, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8001e72:	4a0d      	ldr	r2, [pc, #52]	; (8001ea8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x70>)
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8001e74:	6219      	str	r1, [r3, #32]
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001e76:	615d      	str	r5, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001e78:	60dd      	str	r5, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8001e7a:	601a      	str	r2, [r3, #0]
    }
}
 8001e7c:	bd70      	pop	{r4, r5, r6, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 8001e7e:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8001e80:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 8001e82:	0948      	lsrs	r0, r1, #5
        WRITE_REG(DMA2D->FGOR, 0);
 8001e84:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 8001e86:	0a0a      	lsrs	r2, r1, #8
 8001e88:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8001e8c:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8001e90:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8001e94:	4302      	orrs	r2, r0
 8001e96:	430a      	orrs	r2, r1
 8001e98:	639a      	str	r2, [r3, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8001e9a:	4a04      	ldr	r2, [pc, #16]	; (8001eac <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x74>)
 8001e9c:	e7ed      	b.n	8001e7a <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 8001e9e:	bf00      	nop
 8001ea0:	4002b000 	.word	0x4002b000
 8001ea4:	00010009 	.word	0x00010009
 8001ea8:	00020201 	.word	0x00020201
 8001eac:	00030201 	.word	0x00030201

08001eb0 <_ZN8touchgfx5paint8tearDownEv>:
* @brief Waits until previous DMA drawing operation has finished
*/
void tearDown()
{
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8001eb0:	4b03      	ldr	r3, [pc, #12]	; (8001ec0 <_ZN8touchgfx5paint8tearDownEv+0x10>)
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	07d2      	lsls	r2, r2, #31
 8001eb6:	d4fc      	bmi.n	8001eb2 <_ZN8touchgfx5paint8tearDownEv+0x2>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001eb8:	2223      	movs	r2, #35	; 0x23
 8001eba:	609a      	str	r2, [r3, #8]
}
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	4002b000 	.word	0x4002b000

08001ec4 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm>:
*
* @brief Renders Canvas Widget chunks using DMA.
* This functions will not generate an interrupt, and will not affect the DMA queue.
*/
void lineFromColor(uint16_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha, const uint32_t color565)
{
 8001ec4:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8001ec6:	4c10      	ldr	r4, [pc, #64]	; (8001f08 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x44>)
 8001ec8:	6825      	ldr	r5, [r4, #0]
 8001eca:	07ed      	lsls	r5, r5, #31
 8001ecc:	d4fc      	bmi.n	8001ec8 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001ece:	2523      	movs	r5, #35	; 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8001ed0:	0409      	lsls	r1, r1, #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    if (alpha < 0xFF)
 8001ed2:	2bff      	cmp	r3, #255	; 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001ed4:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8001ed6:	f041 0101 	orr.w	r1, r1, #1
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
 8001eda:	f04f 0502 	mov.w	r5, #2
 8001ede:	6365      	str	r5, [r4, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8001ee0:	6461      	str	r1, [r4, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8001ee2:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (alpha < 0xFF)
 8001ee4:	d00a      	beq.n	8001efc <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x38>
    {
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8001ee6:	4909      	ldr	r1, [pc, #36]	; (8001f0c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x48>)
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001ee8:	6265      	str	r5, [r4, #36]	; 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8001eea:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
 8001eee:	61e3      	str	r3, [r4, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
 8001ef0:	4b07      	ldr	r3, [pc, #28]	; (8001f10 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x4c>)
        WRITE_REG(DMA2D->FGCOLR, color);
 8001ef2:	6222      	str	r2, [r4, #32]
        WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
 8001ef4:	6160      	str	r0, [r4, #20]
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
 8001ef6:	60e0      	str	r0, [r4, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, color565);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8001ef8:	6023      	str	r3, [r4, #0]
    }
}
 8001efa:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8001efc:	61e5      	str	r5, [r4, #28]
        WRITE_REG(DMA2D->OCOLR, color565);
 8001efe:	9b03      	ldr	r3, [sp, #12]
 8001f00:	63a3      	str	r3, [r4, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8001f02:	4b04      	ldr	r3, [pc, #16]	; (8001f14 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x50>)
 8001f04:	e7f8      	b.n	8001ef8 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x34>
 8001f06:	bf00      	nop
 8001f08:	4002b000 	.word	0x4002b000
 8001f0c:	00010009 	.word	0x00010009
 8001f10:	00020001 	.word	0x00020001
 8001f14:	00030001 	.word	0x00030001

08001f18 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh>:

void lineFromRGB565(uint16_t* const ptr, const uint16_t* const data, const unsigned count, const uint8_t alpha)
{
 8001f18:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8001f1a:	4c0f      	ldr	r4, [pc, #60]	; (8001f58 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x40>)
 8001f1c:	6825      	ldr	r5, [r4, #0]
 8001f1e:	07ed      	lsls	r5, r5, #31
 8001f20:	d4fc      	bmi.n	8001f1c <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001f22:	2523      	movs	r5, #35	; 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8001f24:	0412      	lsls	r2, r2, #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));

    if (alpha < 0xFF)
 8001f26:	2bff      	cmp	r3, #255	; 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001f28:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8001f2a:	f042 0201 	orr.w	r2, r2, #1
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
 8001f2e:	f04f 0502 	mov.w	r5, #2
 8001f32:	6365      	str	r5, [r4, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8001f34:	6462      	str	r2, [r4, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8001f36:	63e0      	str	r0, [r4, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 8001f38:	60e1      	str	r1, [r4, #12]
    if (alpha < 0xFF)
 8001f3a:	d008      	beq.n	8001f4e <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x36>
    {
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << 24));
 8001f3c:	061b      	lsls	r3, r3, #24
 8001f3e:	f043 1302 	orr.w	r3, r3, #131074	; 0x20002
 8001f42:	61e3      	str	r3, [r4, #28]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8001f44:	4b05      	ldr	r3, [pc, #20]	; (8001f5c <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x44>)
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001f46:	6265      	str	r5, [r4, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 8001f48:	6160      	str	r0, [r4, #20]
    {
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << 24));

        /* Start DMA2D : M2M Mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
 8001f4a:	6023      	str	r3, [r4, #0]
    }
}
 8001f4c:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << 24));
 8001f4e:	4b04      	ldr	r3, [pc, #16]	; (8001f60 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x48>)
 8001f50:	61e3      	str	r3, [r4, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
 8001f52:	2301      	movs	r3, #1
 8001f54:	e7f9      	b.n	8001f4a <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x32>
 8001f56:	bf00      	nop
 8001f58:	4002b000 	.word	0x4002b000
 8001f5c:	00020001 	.word	0x00020001
 8001f60:	ff020002 	.word	0xff020002

08001f64 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh>:

void lineFromARGB8888(uint16_t* const ptr, const uint32_t* const data, const unsigned count, const uint8_t alpha)
{
 8001f64:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8001f66:	4c0b      	ldr	r4, [pc, #44]	; (8001f94 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x30>)
 8001f68:	6825      	ldr	r5, [r4, #0]
 8001f6a:	07ed      	lsls	r5, r5, #31
 8001f6c:	d4fc      	bmi.n	8001f68 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001f6e:	2523      	movs	r5, #35	; 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8001f70:	0412      	lsls	r2, r2, #16

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));

    /* Set DMA2D color mode and alpha mode */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (alpha << 24));
 8001f72:	061b      	lsls	r3, r3, #24
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001f74:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8001f76:	f042 0201 	orr.w	r2, r2, #1
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
 8001f7a:	2502      	movs	r5, #2
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (alpha << 24));
 8001f7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
 8001f80:	6365      	str	r5, [r4, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8001f82:	6462      	str	r2, [r4, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8001f84:	63e0      	str	r0, [r4, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 8001f86:	60e1      	str	r1, [r4, #12]
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (alpha << 24));
 8001f88:	61e3      	str	r3, [r4, #28]

    /* Configure DMA2D Stream source2 address */
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));

    /* Set DMA2D mode */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8001f8a:	4b03      	ldr	r3, [pc, #12]	; (8001f98 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x34>)
    WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001f8c:	6265      	str	r5, [r4, #36]	; 0x24
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 8001f8e:	6160      	str	r0, [r4, #20]
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8001f90:	6023      	str	r3, [r4, #0]
}
 8001f92:	bd30      	pop	{r4, r5, pc}
 8001f94:	4002b000 	.word	0x4002b000
 8001f98:	00020001 	.word	0x00020001

08001f9c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8001f9c:	2001      	movs	r0, #1
 8001f9e:	4770      	bx	lr

08001fa0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8001fa0:	2038      	movs	r0, #56	; 0x38
 8001fa2:	4770      	bx	lr

08001fa4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8001fa4:	2338      	movs	r3, #56	; 0x38
 8001fa6:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8001faa:	3008      	adds	r0, #8
 8001fac:	4770      	bx	lr

08001fae <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 8001fae:	2338      	movs	r3, #56	; 0x38
 8001fb0:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8001fb4:	3008      	adds	r0, #8
 8001fb6:	4770      	bx	lr

08001fb8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8001fb8:	2001      	movs	r0, #1
 8001fba:	4770      	bx	lr

08001fbc <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8001fbc:	f243 50f4 	movw	r0, #13812	; 0x35f4
 8001fc0:	4770      	bx	lr

08001fc2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8001fc2:	f243 53f4 	movw	r3, #13812	; 0x35f4
 8001fc6:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8001fca:	3008      	adds	r0, #8
 8001fcc:	4770      	bx	lr

08001fce <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8001fce:	f243 53f4 	movw	r3, #13812	; 0x35f4
 8001fd2:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8001fd6:	3008      	adds	r0, #8
 8001fd8:	4770      	bx	lr

08001fda <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8001fda:	2001      	movs	r0, #1
 8001fdc:	4770      	bx	lr

08001fde <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8001fde:	2010      	movs	r0, #16
 8001fe0:	4770      	bx	lr

08001fe2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8001fe2:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8001fe6:	3008      	adds	r0, #8
 8001fe8:	4770      	bx	lr

08001fea <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8001fea:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8001fee:	3008      	adds	r0, #8
 8001ff0:	4770      	bx	lr

08001ff2 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen2ScreenNoTransition();
 8001ff2:	4608      	mov	r0, r1
 8001ff4:	f003 bde8 	b.w	8005bc8 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv>

08001ff8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8001ff8:	4b03      	ldr	r3, [pc, #12]	; (8002008 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x10>)
 8001ffa:	b510      	push	{r4, lr}
 8001ffc:	4604      	mov	r4, r0
 8001ffe:	6003      	str	r3, [r0, #0]
 8002000:	f00d fd1d 	bl	800fa3e <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002004:	4620      	mov	r0, r4
 8002006:	bd10      	pop	{r4, pc}
 8002008:	08027910 	.word	0x08027910

0800200c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
 800200c:	b510      	push	{r4, lr}
 800200e:	4604      	mov	r4, r0
 8002010:	f7ff fff2 	bl	8001ff8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8002014:	2140      	movs	r1, #64	; 0x40
 8002016:	4620      	mov	r0, r4
 8002018:	f023 fdcb 	bl	8025bb2 <_ZdlPvj>
 800201c:	4620      	mov	r0, r4
 800201e:	bd10      	pop	{r4, pc}

08002020 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002020:	4b03      	ldr	r3, [pc, #12]	; (8002030 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002022:	b510      	push	{r4, lr}
 8002024:	4604      	mov	r4, r0
 8002026:	6003      	str	r3, [r0, #0]
 8002028:	f00d fd09 	bl	800fa3e <_ZN8touchgfx17AbstractPartitionD1Ev>
 800202c:	4620      	mov	r0, r4
 800202e:	bd10      	pop	{r4, pc}
 8002030:	080278dc 	.word	0x080278dc

08002034 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002034:	b510      	push	{r4, lr}
 8002036:	4604      	mov	r4, r0
 8002038:	f7ff fff2 	bl	8002020 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800203c:	f243 51fc 	movw	r1, #13820	; 0x35fc
 8002040:	4620      	mov	r0, r4
 8002042:	f023 fdb6 	bl	8025bb2 <_ZdlPvj>
 8002046:	4620      	mov	r0, r4
 8002048:	bd10      	pop	{r4, pc}
	...

0800204c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800204c:	4b03      	ldr	r3, [pc, #12]	; (800205c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 800204e:	b510      	push	{r4, lr}
 8002050:	4604      	mov	r4, r0
 8002052:	6003      	str	r3, [r0, #0]
 8002054:	f00d fcf3 	bl	800fa3e <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002058:	4620      	mov	r0, r4
 800205a:	bd10      	pop	{r4, pc}
 800205c:	080278a8 	.word	0x080278a8

08002060 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002060:	b510      	push	{r4, lr}
 8002062:	4604      	mov	r4, r0
 8002064:	f7ff fff2 	bl	800204c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002068:	2118      	movs	r1, #24
 800206a:	4620      	mov	r0, r4
 800206c:	f023 fda1 	bl	8025bb2 <_ZdlPvj>
 8002070:	4620      	mov	r0, r4
 8002072:	bd10      	pop	{r4, pc}

08002074 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 8002074:	4b09      	ldr	r3, [pc, #36]	; (800209c <_ZN12FrontendHeapD1Ev+0x28>)
 8002076:	b510      	push	{r4, lr}
 8002078:	4604      	mov	r4, r0
 800207a:	6003      	str	r3, [r0, #0]
 800207c:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
 8002080:	3028      	adds	r0, #40	; 0x28
 8002082:	f7ff ffb9 	bl	8001ff8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8002086:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 800208a:	f7ff ffc9 	bl	8002020 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800208e:	f104 0014 	add.w	r0, r4, #20
 8002092:	f7ff ffdb 	bl	800204c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002096:	4620      	mov	r0, r4
 8002098:	bd10      	pop	{r4, pc}
 800209a:	bf00      	nop
 800209c:	08027944 	.word	0x08027944

080020a0 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80020a0:	b508      	push	{r3, lr}
 80020a2:	4802      	ldr	r0, [pc, #8]	; (80020ac <__tcf_0+0xc>)
 80020a4:	f7ff ffe6 	bl	8002074 <_ZN12FrontendHeapD1Ev>
 80020a8:	bd08      	pop	{r3, pc}
 80020aa:	bf00      	nop
 80020ac:	20009804 	.word	0x20009804

080020b0 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 80020b0:	b510      	push	{r4, lr}
 80020b2:	4604      	mov	r4, r0
 80020b4:	f7ff ffde 	bl	8002074 <_ZN12FrontendHeapD1Ev>
 80020b8:	f243 71c8 	movw	r1, #14280	; 0x37c8
 80020bc:	4620      	mov	r0, r4
 80020be:	f023 fd78 	bl	8025bb2 <_ZdlPvj>
 80020c2:	4620      	mov	r0, r4
 80020c4:	bd10      	pop	{r4, pc}
	...

080020c8 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 80020c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80020cc:	f003 f924 	bl	8005318 <_ZN14BitmapDatabase11getInstanceEv>
 80020d0:	2400      	movs	r4, #0
 80020d2:	4605      	mov	r5, r0
 80020d4:	f003 f924 	bl	8005320 <_ZN14BitmapDatabase15getInstanceSizeEv>
 80020d8:	4623      	mov	r3, r4
 80020da:	4601      	mov	r1, r0
 80020dc:	4622      	mov	r2, r4
 80020de:	4628      	mov	r0, r5
 80020e0:	9400      	str	r4, [sp, #0]
 80020e2:	f017 fb83 	bl	80197ec <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 80020e6:	4b26      	ldr	r3, [pc, #152]	; (8002180 <touchgfx_init+0xb8>)
 80020e8:	4a26      	ldr	r2, [pc, #152]	; (8002184 <touchgfx_init+0xbc>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 80020ea:	4620      	mov	r0, r4
        static FrontendHeap instance;
 80020ec:	4d26      	ldr	r5, [pc, #152]	; (8002188 <touchgfx_init+0xc0>)
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	f005 f99e 	bl	8007430 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 80020f4:	4825      	ldr	r0, [pc, #148]	; (800218c <touchgfx_init+0xc4>)
 80020f6:	f017 fae1 	bl	80196bc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 80020fa:	782b      	ldrb	r3, [r5, #0]
 80020fc:	f3bf 8f5b 	dmb	ish
 8002100:	07db      	lsls	r3, r3, #31
 8002102:	d436      	bmi.n	8002172 <touchgfx_init+0xaa>
 8002104:	4628      	mov	r0, r5
 8002106:	f023 fd56 	bl	8025bb6 <__cxa_guard_acquire>
 800210a:	b390      	cbz	r0, 8002172 <touchgfx_init+0xaa>
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 800210c:	4c20      	ldr	r4, [pc, #128]	; (8002190 <touchgfx_init+0xc8>)
 800210e:	4f21      	ldr	r7, [pc, #132]	; (8002194 <touchgfx_init+0xcc>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8002110:	4b21      	ldr	r3, [pc, #132]	; (8002198 <touchgfx_init+0xd0>)
 8002112:	f104 0014 	add.w	r0, r4, #20
 8002116:	f107 0644 	add.w	r6, r7, #68	; 0x44
 800211a:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 800211e:	6023      	str	r3, [r4, #0]
 8002120:	6060      	str	r0, [r4, #4]
 8002122:	f8c4 8008 	str.w	r8, [r4, #8]
 8002126:	60e7      	str	r7, [r4, #12]
 8002128:	6126      	str	r6, [r4, #16]
 800212a:	f00d fc89 	bl	800fa40 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800212e:	4b1b      	ldr	r3, [pc, #108]	; (800219c <touchgfx_init+0xd4>)
 8002130:	4640      	mov	r0, r8
 8002132:	6163      	str	r3, [r4, #20]
 8002134:	f00d fc84 	bl	800fa40 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002138:	4b19      	ldr	r3, [pc, #100]	; (80021a0 <touchgfx_init+0xd8>)
 800213a:	4638      	mov	r0, r7
 800213c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800213e:	f00d fc7f 	bl	800fa40 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002142:	f504 5340 	add.w	r3, r4, #12288	; 0x3000
 8002146:	4a17      	ldr	r2, [pc, #92]	; (80021a4 <touchgfx_init+0xdc>)
 8002148:	f503 60cd 	add.w	r0, r3, #1640	; 0x668
 800214c:	f8c3 2628 	str.w	r2, [r3, #1576]	; 0x628
 8002150:	f005 f9ea 	bl	8007528 <_ZN5ModelC1Ev>
 8002154:	4622      	mov	r2, r4
 8002156:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800215a:	4630      	mov	r0, r6
 800215c:	f005 f9da 	bl	8007514 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8002160:	4630      	mov	r0, r6
 8002162:	f003 fd31 	bl	8005bc8 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv>
        static FrontendHeap instance;
 8002166:	4810      	ldr	r0, [pc, #64]	; (80021a8 <touchgfx_init+0xe0>)
 8002168:	f023 fd70 	bl	8025c4c <atexit>
 800216c:	4628      	mov	r0, r5
 800216e:	f023 fd2e 	bl	8025bce <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8002172:	480e      	ldr	r0, [pc, #56]	; (80021ac <touchgfx_init+0xe4>)
}
 8002174:	b002      	add	sp, #8
 8002176:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 800217a:	f7fe bddb 	b.w	8000d34 <_ZN11TouchGFXHAL10initializeEv>
 800217e:	bf00      	nop
 8002180:	20027c28 	.word	0x20027c28
 8002184:	2000ddec 	.word	0x2000ddec
 8002188:	20009800 	.word	0x20009800
 800218c:	20000034 	.word	0x20000034
 8002190:	20009804 	.word	0x20009804
 8002194:	2000ce2c 	.word	0x2000ce2c
 8002198:	08027944 	.word	0x08027944
 800219c:	080278a8 	.word	0x080278a8
 80021a0:	080278dc 	.word	0x080278dc
 80021a4:	08027910 	.word	0x08027910
 80021a8:	080020a1 	.word	0x080020a1
 80021ac:	2000dd70 	.word	0x2000dd70

080021b0 <touchgfx_components_init>:

void touchgfx_components_init()
{
}
 80021b0:	4770      	bx	lr
	...

080021b4 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 80021b4:	4801      	ldr	r0, [pc, #4]	; (80021bc <touchgfx_taskEntry+0x8>)
 80021b6:	f7fe bdd7 	b.w	8000d68 <_ZN11TouchGFXHAL9taskEntryEv>
 80021ba:	bf00      	nop
 80021bc:	2000dd70 	.word	0x2000dd70

080021c0 <_GLOBAL__sub_I_touchgfx_init>:
}
 80021c0:	b513      	push	{r0, r1, r4, lr}
static STM32DMA dma;
 80021c2:	490c      	ldr	r1, [pc, #48]	; (80021f4 <_GLOBAL__sub_I_touchgfx_init+0x34>)
{
public:

    STM32TouchController() {}
 80021c4:	4b0c      	ldr	r3, [pc, #48]	; (80021f8 <_GLOBAL__sub_I_touchgfx_init+0x38>)
 80021c6:	4c0d      	ldr	r4, [pc, #52]	; (80021fc <_GLOBAL__sub_I_touchgfx_init+0x3c>)
 80021c8:	4608      	mov	r0, r1
 80021ca:	6023      	str	r3, [r4, #0]
 80021cc:	f7ff fd34 	bl	8001c38 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 80021d0:	4a0b      	ldr	r2, [pc, #44]	; (8002200 <_GLOBAL__sub_I_touchgfx_init+0x40>)
 80021d2:	4610      	mov	r0, r2
 80021d4:	f01a fc16 	bl	801ca04 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 80021d8:	f44f 7348 	mov.w	r3, #800	; 0x320
 80021dc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80021e0:	4904      	ldr	r1, [pc, #16]	; (80021f4 <_GLOBAL__sub_I_touchgfx_init+0x34>)
 80021e2:	4808      	ldr	r0, [pc, #32]	; (8002204 <_GLOBAL__sub_I_touchgfx_init+0x44>)
 80021e4:	e9cd 3200 	strd	r3, r2, [sp]
 80021e8:	4623      	mov	r3, r4
 80021ea:	4a05      	ldr	r2, [pc, #20]	; (8002200 <_GLOBAL__sub_I_touchgfx_init+0x40>)
 80021ec:	f7fe fe6c 	bl	8000ec8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
}
 80021f0:	b002      	add	sp, #8
 80021f2:	bd10      	pop	{r4, pc}
 80021f4:	2000cfd0 	.word	0x2000cfd0
 80021f8:	0802703c 	.word	0x0802703c
 80021fc:	2000cfcc 	.word	0x2000cfcc
 8002200:	2000ddf0 	.word	0x2000ddf0
 8002204:	2000dd70 	.word	0x2000dd70

08002208 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 8002208:	4801      	ldr	r0, [pc, #4]	; (8002210 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 800220a:	f7ff bcf1 	b.w	8001bf0 <_ZN8STM32DMAD1Ev>
 800220e:	bf00      	nop
 8002210:	2000cfd0 	.word	0x2000cfd0

08002214 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8002214:	2000      	movs	r0, #0
 8002216:	4770      	bx	lr

08002218 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 8002218:	8081      	strh	r1, [r0, #4]
    }
 800221a:	4770      	bx	lr

0800221c <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 800221c:	80c1      	strh	r1, [r0, #6]
    }
 800221e:	4770      	bx	lr

08002220 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8002220:	8101      	strh	r1, [r0, #8]
    }
 8002222:	4770      	bx	lr

08002224 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8002224:	8141      	strh	r1, [r0, #10]
    }
 8002226:	4770      	bx	lr

08002228 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 8002228:	4770      	bx	lr

0800222a <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 800222a:	4770      	bx	lr

0800222c <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 800222c:	4770      	bx	lr

0800222e <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 800222e:	4770      	bx	lr

08002230 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8002230:	4770      	bx	lr

08002232 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8002232:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 8002234:	88c4      	ldrh	r4, [r0, #6]
 8002236:	6803      	ldr	r3, [r0, #0]
 8002238:	1b12      	subs	r2, r2, r4
 800223a:	8884      	ldrh	r4, [r0, #4]
 800223c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800223e:	1b09      	subs	r1, r1, r4
 8002240:	b212      	sxth	r2, r2
    }
 8002242:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 8002246:	b209      	sxth	r1, r1
 8002248:	4718      	bx	r3

0800224a <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800224a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800224e:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8002250:	f04f 33ff 	mov.w	r3, #4294967295
 8002254:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 8002256:	6813      	ldr	r3, [r2, #0]
 8002258:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 800225a:	6010      	str	r0, [r2, #0]
    }
 800225c:	4770      	bx	lr

0800225e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 800225e:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8002262:	b11a      	cbz	r2, 800226c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 8002264:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8002268:	b102      	cbz	r2, 800226c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 800226a:	6018      	str	r0, [r3, #0]
        }
    }
 800226c:	4770      	bx	lr

0800226e <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
    {
        return HAL::SOFTWARE;
    }
 800226e:	2000      	movs	r0, #0
 8002270:	4770      	bx	lr

08002272 <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
    {
        widgetWidth = widgetRect.width;
 8002272:	888b      	ldrh	r3, [r1, #4]
 8002274:	8083      	strh	r3, [r0, #4]
        return true;
    }
 8002276:	2001      	movs	r0, #1
 8002278:	4770      	bx	lr

0800227a <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
    {
        return;
    }
 800227a:	4770      	bx	lr

0800227c <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 800227c:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    }
 8002280:	4770      	bx	lr

08002282 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
    {
        return alpha;
    }
 8002282:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8002286:	4770      	bx	lr

08002288 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8002288:	2200      	movs	r2, #0
     * overwritten in subclasses and return the minimal rectangle containing the shape. See
     * classes such as Circle for example implementations.
     *
     * @return The minimal rectangle containing the shape drawn.
     */
    virtual Rect getMinimalRect() const
 800228a:	b510      	push	{r4, lr}
        return rect.width;
 800228c:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
        return rect.height;
 8002290:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8002294:	8002      	strh	r2, [r0, #0]
 8002296:	8042      	strh	r2, [r0, #2]
 8002298:	8084      	strh	r4, [r0, #4]
 800229a:	80c1      	strh	r1, [r0, #6]
    {
        return Rect(0, 0, getWidth(), getHeight());
    }
 800229c:	bd10      	pop	{r4, pc}

0800229e <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 800229e:	2200      	movs	r2, #0
 80022a0:	8002      	strh	r2, [r0, #0]
 80022a2:	8042      	strh	r2, [r0, #2]
 80022a4:	8082      	strh	r2, [r0, #4]
 80022a6:	80c2      	strh	r2, [r0, #6]
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 80022a8:	4770      	bx	lr
	...

080022ac <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ac:	4b02      	ldr	r3, [pc, #8]	; (80022b8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0xc>)
 80022ae:	2290      	movs	r2, #144	; 0x90
 80022b0:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
}

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
}
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	e000e100 	.word	0xe000e100

080022bc <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022bc:	4b02      	ldr	r3, [pc, #8]	; (80022c8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0xc>)
 80022be:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80022c2:	609a      	str	r2, [r3, #8]

void TouchGFXGeneratedHAL::enableInterrupts()
{
    NVIC_EnableIRQ(DMA2D_IRQn);
}
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	e000e100 	.word	0xe000e100

080022cc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(DMA2D_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
}
 80022cc:	4770      	bx	lr

080022ce <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:
}

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    //setTFTFrameBuffer() not used for selected display interface
}
 80022ce:	4770      	bx	lr

080022d0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80022d0:	4a12      	ldr	r2, [pc, #72]	; (800231c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x4c>)
 80022d2:	6953      	ldr	r3, [r2, #20]
 80022d4:	03db      	lsls	r3, r3, #15
{
 80022d6:	b570      	push	{r4, r5, r6, lr}
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80022d8:	d51e      	bpl.n	8002318 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80022da:	2300      	movs	r3, #0
 80022dc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80022e0:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 80022e4:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80022e8:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80022ec:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80022f0:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80022f4:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80022f6:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80022fa:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80022fc:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 8002300:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002302:	f8c2 5274 	str.w	r5, [r2, #628]	; 0x274
      } while (ways-- != 0U);
 8002306:	d2f9      	bcs.n	80022fc <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>
    } while(sets-- != 0U);
 8002308:	3b20      	subs	r3, #32
 800230a:	f113 0f20 	cmn.w	r3, #32
 800230e:	d1f2      	bne.n	80022f6 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x26>
 8002310:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002314:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 8002318:	bd70      	pop	{r4, r5, r6, pc}
 800231a:	bf00      	nop
 800231c:	e000ed00 	.word	0xe000ed00

08002320 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setRGBBufferEPhj>:

    virtual void setRGBBuffer(uint8_t* buffer, size_t sizeOfBuffer)
    {
        // Running in UI thread / main

        bufferRGB = buffer;
 8002320:	6301      	str	r1, [r0, #48]	; 0x30
        topBufferRGB = bufferRGB;
        sizeBufferRGB = sizeOfBuffer;
 8002322:	e9c0 210d 	strd	r2, r1, [r0, #52]	; 0x34
    }
 8002326:	4770      	bx	lr

08002328 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EED1Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 8002328:	4770      	bx	lr

0800232a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmRNS0_15VideoDataReaderE>:
        mjpegDecoders[handle]->setVideoData(reader);
 800232a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800232e:	4611      	mov	r1, r2
 8002330:	6840      	ldr	r0, [r0, #4]
 8002332:	6803      	ldr	r3, [r0, #0]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	4718      	bx	r3

08002338 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EED0Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 8002338:	b510      	push	{r4, lr}
 800233a:	4604      	mov	r4, r0
 800233c:	2148      	movs	r1, #72	; 0x48
 800233e:	f023 fc38 	bl	8025bb2 <_ZdlPvj>
 8002342:	4620      	mov	r0, r4
 8002344:	bd10      	pop	{r4, pc}
	...

08002348 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8002348:	b538      	push	{r3, r4, r5, lr}
 800234a:	4604      	mov	r4, r0
    HAL::initialize();
 800234c:	f00e f907 	bl	801055e <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8002350:	6823      	ldr	r3, [r4, #0]
 8002352:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8002354:	f013 fef2 	bl	801613c <_ZN8touchgfx11Application11getInstanceEv>
 8002358:	4601      	mov	r1, r0
 800235a:	4620      	mov	r0, r4
 800235c:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)0, (void*)0);
 800235e:	6823      	ldr	r3, [r4, #0]
 8002360:	4907      	ldr	r1, [pc, #28]	; (8002380 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x38>)
 8002362:	4620      	mov	r0, r4
 8002364:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8002368:	2300      	movs	r3, #0
 800236a:	461a      	mov	r2, r3
 800236c:	47a8      	blx	r5
    void addDecoder(MJPEGDecoder& decoder, uint32_t index)
    {
        // Running in UI thread / main

        assert(index < no_streams);
        mjpegDecoders[index] = &decoder;
 800236e:	4b05      	ldr	r3, [pc, #20]	; (8002384 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x3c>)
 8002370:	4a05      	ldr	r2, [pc, #20]	; (8002388 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 8002372:	605a      	str	r2, [r3, #4]
        bufferRGB = buffer;
 8002374:	4a05      	ldr	r2, [pc, #20]	; (800238c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 8002376:	631a      	str	r2, [r3, #48]	; 0x30
        topBufferRGB = bufferRGB;
 8002378:	639a      	str	r2, [r3, #56]	; 0x38
        sizeBufferRGB = sizeOfBuffer;
 800237a:	4a05      	ldr	r2, [pc, #20]	; (8002390 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x48>)
 800237c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800237e:	bd38      	pop	{r3, r4, r5, pc}
 8002380:	c00bb800 	.word	0xc00bb800
 8002384:	2000deac 	.word	0x2000deac
 8002388:	2000de68 	.word	0x2000de68
 800238c:	c0000000 	.word	0xc0000000
 8002390:	000bb800 	.word	0x000bb800

08002394 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:
    HAL::flushFrameBuffer(rect);
 8002394:	f00e b894 	b.w	80104c0 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

08002398 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
    return HAL::blockCopy(dest, src, numBytes);
 8002398:	f00e b9ef 	b.w	801077a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

0800239c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
 800239c:	b538      	push	{r3, r4, r5, lr}
 800239e:	4604      	mov	r4, r0
 80023a0:	460d      	mov	r5, r1
        MUTEX_LOCK(mutexBuffers);
 80023a2:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80023a4:	f04f 31ff 	mov.w	r1, #4294967295
 80023a8:	f00a fdd8 	bl	800cf5c <osMutexAcquire>
        MUTEX_UNLOCK(mutexBuffers);
 80023ac:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80023ae:	f00a fe05 	bl	800cfbc <osMutexRelease>
        streams[handle].isActive = false;
 80023b2:	2124      	movs	r1, #36	; 0x24
 80023b4:	2300      	movs	r3, #0
 80023b6:	fb01 4505 	mla	r5, r1, r5, r4
 80023ba:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
        if (oneIsActive == false)
 80023be:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80023c2:	b90b      	cbnz	r3, 80023c8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm+0x2c>
            topBufferRGB = bufferRGB;
 80023c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80023c6:	63a3      	str	r3, [r4, #56]	; 0x38
    }
 80023c8:	bd38      	pop	{r3, r4, r5, pc}

080023ca <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 80023ca:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80023ce:	b112      	cbz	r2, 80023d6 <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 80023d0:	6803      	ldr	r3, [r0, #0]
 80023d2:	695b      	ldr	r3, [r3, #20]
 80023d4:	4718      	bx	r3
    }
 80023d6:	4770      	bx	lr

080023d8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm>:
    {
        assert(handle < no_streams);
        mjpegDecoders[handle]->getVideoInfo(data);
    }

    virtual bool getIsPlaying(const Handle handle)
 80023d8:	b508      	push	{r3, lr}
    {
        assert(handle < no_streams);
 80023da:	b131      	cbz	r1, 80023ea <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x12>
 80023dc:	4b04      	ldr	r3, [pc, #16]	; (80023f0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x18>)
 80023de:	f44f 71b8 	mov.w	r1, #368	; 0x170
 80023e2:	4a04      	ldr	r2, [pc, #16]	; (80023f4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x1c>)
 80023e4:	4804      	ldr	r0, [pc, #16]	; (80023f8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x20>)
 80023e6:	f023 fc13 	bl	8025c10 <__assert_func>
        Stream& stream = streams[handle];
        return stream.isPlaying;
    }
 80023ea:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 80023ee:	bd08      	pop	{r3, pc}
 80023f0:	08027950 	.word	0x08027950
 80023f4:	08027964 	.word	0x08027964
 80023f8:	08027aee 	.word	0x08027aee

080023fc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE>:
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
 80023fc:	b510      	push	{r4, lr}
        assert(handle < no_streams);
 80023fe:	b131      	cbz	r1, 800240e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x12>
 8002400:	4b06      	ldr	r3, [pc, #24]	; (800241c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>)
 8002402:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 8002406:	4a06      	ldr	r2, [pc, #24]	; (8002420 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x24>)
 8002408:	4806      	ldr	r0, [pc, #24]	; (8002424 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x28>)
 800240a:	f023 fc01 	bl	8025c10 <__assert_func>
        mjpegDecoders[handle]->getVideoInfo(data);
 800240e:	6840      	ldr	r0, [r0, #4]
 8002410:	4611      	mov	r1, r2
 8002412:	6803      	ldr	r3, [r0, #0]
    }
 8002414:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->getVideoInfo(data);
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	4718      	bx	r3
 800241c:	08027950 	.word	0x08027950
 8002420:	08027b31 	.word	0x08027b31
 8002424:	08027aee 	.word	0x08027aee

08002428 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm>:
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
 8002428:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 800242a:	b129      	cbz	r1, 8002438 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x10>
 800242c:	4b03      	ldr	r3, [pc, #12]	; (800243c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x14>)
 800242e:	2179      	movs	r1, #121	; 0x79
 8002430:	4a03      	ldr	r2, [pc, #12]	; (8002440 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x18>)
 8002432:	4804      	ldr	r0, [pc, #16]	; (8002444 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x1c>)
 8002434:	f023 fbec 	bl	8025c10 <__assert_func>
    }
 8002438:	68c0      	ldr	r0, [r0, #12]
 800243a:	bd08      	pop	{r3, pc}
 800243c:	08027950 	.word	0x08027950
 8002440:	08027cdf 	.word	0x08027cdf
 8002444:	08027aee 	.word	0x08027aee

08002448 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
 8002448:	b510      	push	{r4, lr}
 800244a:	4604      	mov	r4, r0
        assert(handle < no_streams);
 800244c:	b129      	cbz	r1, 800245a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x12>
 800244e:	4b19      	ldr	r3, [pc, #100]	; (80024b4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x6c>)
 8002450:	21a2      	movs	r1, #162	; 0xa2
 8002452:	4a19      	ldr	r2, [pc, #100]	; (80024b8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x70>)
 8002454:	4819      	ldr	r0, [pc, #100]	; (80024bc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x74>)
 8002456:	f023 fbdb 	bl	8025c10 <__assert_func>
        switch (cmd)
 800245a:	2a05      	cmp	r2, #5
 800245c:	d815      	bhi.n	800248a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 800245e:	e8df f002 	tbb	[pc, r2]
 8002462:	1103      	.short	0x1103
 8002464:	221c1715 	.word	0x221c1715
            if (mjpegDecoders[handle]->hasVideo())
 8002468:	6840      	ldr	r0, [r0, #4]
 800246a:	6803      	ldr	r3, [r0, #0]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	4798      	blx	r3
 8002470:	b158      	cbz	r0, 800248a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
                stream.isPlaying = true;
 8002472:	2301      	movs	r3, #1
 8002474:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
                stream.hasMoreFrames = true; // Assume more frames, lowered on end
 8002478:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
            stream.frameCount = 0;
 800247c:	2300      	movs	r3, #0
            stream.tickCount = 0;
 800247e:	e9c4 3304 	strd	r3, r3, [r4, #16]
            break;
 8002482:	e002      	b.n	800248a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.isPlaying = false;
 8002484:	2300      	movs	r3, #0
 8002486:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
    }
 800248a:	bd10      	pop	{r4, pc}
            stream.seek_to_frame = param;
 800248c:	6203      	str	r3, [r0, #32]
 800248e:	e7f5      	b.n	800247c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.seek_to_frame = param;
 8002490:	6203      	str	r3, [r0, #32]
            stream.isShowingOneFrame = true;
 8002492:	2301      	movs	r3, #1
 8002494:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
 8002498:	e7f0      	b.n	800247c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.isPlaying = false;
 800249a:	2300      	movs	r3, #0
 800249c:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
            stream.seek_to_frame = 1;
 80024a0:	2301      	movs	r3, #1
 80024a2:	6203      	str	r3, [r0, #32]
            break;
 80024a4:	e7f1      	b.n	800248a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.repeat = (param > 0);
 80024a6:	3b00      	subs	r3, #0
 80024a8:	bf18      	it	ne
 80024aa:	2301      	movne	r3, #1
 80024ac:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    }
 80024b0:	e7eb      	b.n	800248a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 80024b2:	bf00      	nop
 80024b4:	08027950 	.word	0x08027950
 80024b8:	08027e94 	.word	0x08027e94
 80024bc:	08027aee 	.word	0x08027aee

080024c0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
 80024c0:	b510      	push	{r4, lr}
 80024c2:	460c      	mov	r4, r1
 80024c4:	4611      	mov	r1, r2
 80024c6:	461a      	mov	r2, r3
        assert(handle < no_streams);
 80024c8:	b12c      	cbz	r4, 80024d6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x16>
 80024ca:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x24>)
 80024cc:	2190      	movs	r1, #144	; 0x90
 80024ce:	4a06      	ldr	r2, [pc, #24]	; (80024e8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x28>)
 80024d0:	4806      	ldr	r0, [pc, #24]	; (80024ec <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x2c>)
 80024d2:	f023 fb9d 	bl	8025c10 <__assert_func>
        stream.frameNumber = 0;
 80024d6:	60c4      	str	r4, [r0, #12]
        mjpegDecoders[handle]->setVideoData(movie, length);
 80024d8:	6840      	ldr	r0, [r0, #4]
 80024da:	6803      	ldr	r3, [r0, #0]
    }
 80024dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->setVideoData(movie, length);
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	4718      	bx	r3
 80024e4:	08027950 	.word	0x08027950
 80024e8:	08028068 	.word	0x08028068
 80024ec:	08027aee 	.word	0x08027aee

080024f0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm>:
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
 80024f0:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 80024f2:	b129      	cbz	r1, 8002500 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x10>
 80024f4:	4b05      	ldr	r3, [pc, #20]	; (800250c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x1c>)
 80024f6:	2182      	movs	r1, #130	; 0x82
 80024f8:	4a05      	ldr	r2, [pc, #20]	; (8002510 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x20>)
 80024fa:	4806      	ldr	r0, [pc, #24]	; (8002514 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x24>)
 80024fc:	f023 fb88 	bl	8025c10 <__assert_func>
        stream.tickCount = 0;
 8002500:	e9c0 1104 	strd	r1, r1, [r0, #16]
        stream.frame_rate_video = video_frames;
 8002504:	e9c0 3206 	strd	r3, r2, [r0, #24]
    }
 8002508:	bd08      	pop	{r3, pc}
 800250a:	bf00      	nop
 800250c:	08027950 	.word	0x08027950
 8002510:	08028243 	.word	0x08028243
 8002514:	08027aee 	.word	0x08027aee

08002518 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
        if (firstDrawThisFrame)
 8002518:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
 800251c:	b510      	push	{r4, lr}
 800251e:	4604      	mov	r4, r0
        if (firstDrawThisFrame)
 8002520:	b153      	cbz	r3, 8002538 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE+0x20>
            MUTEX_LOCK(mutexBuffers);
 8002522:	f04f 31ff 	mov.w	r1, #4294967295
 8002526:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8002528:	f00a fd18 	bl	800cf5c <osMutexAcquire>
            firstDrawThisFrame = false;
 800252c:	2300      	movs	r3, #0
 800252e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
            uiHasMutex = true;
 8002532:	2301      	movs	r3, #1
 8002534:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    }
 8002538:	bd10      	pop	{r4, pc}
	...

0800253c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
 800253c:	b510      	push	{r4, lr}
 800253e:	4604      	mov	r4, r0
 8002540:	4610      	mov	r0, r2
        assert(handle < no_streams);
 8002542:	b129      	cbz	r1, 8002550 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x14>
 8002544:	4b13      	ldr	r3, [pc, #76]	; (8002594 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x58>)
 8002546:	21d0      	movs	r1, #208	; 0xd0
 8002548:	4a13      	ldr	r2, [pc, #76]	; (8002598 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x5c>)
 800254a:	4814      	ldr	r0, [pc, #80]	; (800259c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x60>)
 800254c:	f023 fb60 	bl	8025c10 <__assert_func>
        if (stream.isPlaying)
 8002550:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8002554:	b133      	cbz	r3, 8002564 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x28>
        return vSyncForFrame;
 8002556:	4b12      	ldr	r3, [pc, #72]	; (80025a0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x64>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f893 1067 	ldrb.w	r1, [r3, #103]	; 0x67
            stream.tickCount+=HAL::getInstance()->getLCDRefreshCount();
 800255e:	6963      	ldr	r3, [r4, #20]
 8002560:	440b      	add	r3, r1
 8002562:	6163      	str	r3, [r4, #20]
        if (stream.doInvalidateOnNextTick)
 8002564:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 8002568:	b90b      	cbnz	r3, 800256e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x32>
        return true;
 800256a:	2001      	movs	r0, #1
    }
 800256c:	bd10      	pop	{r4, pc}
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
    {
        buffer = videoBuffer;
 800256e:	68a3      	ldr	r3, [r4, #8]
 8002570:	6303      	str	r3, [r0, #48]	; 0x30
            widget.invalidate();
 8002572:	6803      	ldr	r3, [r0, #0]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	4798      	blx	r3
            stream.doInvalidateOnNextTick = false;
 8002578:	2300      	movs	r3, #0
            if (!stream.hasMoreFrames && !stream.repeat)
 800257a:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
            stream.doInvalidateOnNextTick = false;
 800257e:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
            if (!stream.hasMoreFrames && !stream.repeat)
 8002582:	2800      	cmp	r0, #0
 8002584:	d1f1      	bne.n	800256a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x2e>
 8002586:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1ee      	bne.n	800256c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
                stream.isPlaying = false;
 800258e:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
 8002592:	e7eb      	b.n	800256c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
 8002594:	08027950 	.word	0x08027950
 8002598:	080283ff 	.word	0x080283ff
 800259c:	08027aee 	.word	0x08027aee
 80025a0:	20027bc4 	.word	0x20027bc4

080025a4 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
{
 80025a4:	b510      	push	{r4, lr}
            if (stream.isPlaying || stream.isShowingOneFrame)
 80025a6:	4c17      	ldr	r4, [pc, #92]	; (8002604 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x60>)
    HAL::endFrame();
 80025a8:	f00d ffcc 	bl	8010544 <_ZN8touchgfx3HAL8endFrameEv>
 80025ac:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 80025b0:	b913      	cbnz	r3, 80025b8 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x14>
 80025b2:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 80025b6:	b1ab      	cbz	r3, 80025e4 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x40>
    bool decodeForNextTick(Stream& stream)
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
 80025b8:	69e1      	ldr	r1, [r4, #28]
 80025ba:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 80025be:	4353      	muls	r3, r2
 80025c0:	6922      	ldr	r2, [r4, #16]
 80025c2:	434a      	muls	r2, r1
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d30d      	bcc.n	80025e4 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x40>
        {
            if (allowSkipFrames)
 80025c8:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
 80025cc:	b138      	cbz	r0, 80025de <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x3a>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
 80025ce:	1a9b      	subs	r3, r3, r2
 80025d0:	fbb3 f2f1 	udiv	r2, r3, r1
                if (stream.skip_frames > 0)
 80025d4:	4299      	cmp	r1, r3
                {
                    stream.skip_frames--;
 80025d6:	bf98      	it	ls
 80025d8:	f102 32ff 	addls.w	r2, r2, #4294967295
 80025dc:	6262      	str	r2, [r4, #36]	; 0x24
                    stream.doDecode = true;
 80025de:	2301      	movs	r3, #1
 80025e0:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
        firstDrawThisFrame = true;
 80025e4:	2301      	movs	r3, #1
        SEM_POST(semDecode);
 80025e6:	6c20      	ldr	r0, [r4, #64]	; 0x40
        firstDrawThisFrame = true;
 80025e8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        SEM_POST(semDecode);
 80025ec:	f00a fda0 	bl	800d130 <osSemaphoreRelease>
        if (uiHasMutex)
 80025f0:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80025f4:	b12b      	cbz	r3, 8002602 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x5e>
            MUTEX_UNLOCK(mutexBuffers);
 80025f6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80025f8:	f00a fce0 	bl	800cfbc <osMutexRelease>
            uiHasMutex = false;
 80025fc:	2300      	movs	r3, #0
 80025fe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8002602:	bd10      	pop	{r4, pc}
 8002604:	2000deac 	.word	0x2000deac

08002608 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002608:	4b04      	ldr	r3, [pc, #16]	; (800261c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x14>)
 800260a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800260e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8002612:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002616:	f3bf 8f6f 	isb	sy
}
 800261a:	4770      	bx	lr
 800261c:	e000e100 	.word	0xe000e100

08002620 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
        {
            if (streams[i].isActive == false)
 8002620:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 8002624:	b570      	push	{r4, r5, r6, lr}
            if (streams[i].isActive == false)
 8002626:	b9db      	cbnz	r3, 8002660 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x40>
        streams[handle].isActive = true;
 8002628:	2201      	movs	r2, #1
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 800262a:	6b85      	ldr	r5, [r0, #56]	; 0x38
            {
                // Reset stream parameters
                streams[i] = Stream();
 800262c:	60c3      	str	r3, [r0, #12]
        streams[handle].isActive = true;
 800262e:	6282      	str	r2, [r0, #40]	; 0x28
                streams[i] = Stream();
 8002630:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002634:	6103      	str	r3, [r0, #16]
 8002636:	8582      	strh	r2, [r0, #44]	; 0x2c
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8002638:	f505 223b 	add.w	r2, r5, #765952	; 0xbb000
                streams[i] = Stream();
 800263c:	6143      	str	r3, [r0, #20]
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 800263e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
                streams[i] = Stream();
 8002642:	6183      	str	r3, [r0, #24]
 8002644:	61c3      	str	r3, [r0, #28]
 8002646:	6203      	str	r3, [r0, #32]
 8002648:	6243      	str	r3, [r0, #36]	; 0x24
 800264a:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 800264e:	e9d0 460c 	ldrd	r4, r6, [r0, #48]	; 0x30
 8002652:	4434      	add	r4, r6
 8002654:	42a2      	cmp	r2, r4
 8002656:	d90a      	bls.n	800266e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x4e>
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 8002658:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x68>)
 800265a:	2152      	movs	r1, #82	; 0x52
 800265c:	4a0b      	ldr	r2, [pc, #44]	; (800268c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x6c>)
 800265e:	e003      	b.n	8002668 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x48>

                return static_cast<VideoController::Handle>(i);
            }
        }

        assert(0 && "Unable to find free video stream handle!");
 8002660:	4b0b      	ldr	r3, [pc, #44]	; (8002690 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x70>)
 8002662:	f240 11c5 	movw	r1, #453	; 0x1c5
 8002666:	4a0b      	ldr	r2, [pc, #44]	; (8002694 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x74>)
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 8002668:	480b      	ldr	r0, [pc, #44]	; (8002698 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x78>)
 800266a:	f023 fad1 	bl	8025c10 <__assert_func>
        topBufferRGB += sizeOfOneDecodeBuffer;
 800266e:	6382      	str	r2, [r0, #56]	; 0x38
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
    {
        format = bufferFormat;
        bufferWidth = width;
 8002670:	f44f 7248 	mov.w	r2, #800	; 0x320
        decodeBuffers[handle] = (uint32_t*)topBufferRGB;
 8002674:	6085      	str	r5, [r0, #8]
    }
 8002676:	4618      	mov	r0, r3
 8002678:	86ca      	strh	r2, [r1, #54]	; 0x36
        bufferHeight = height;
 800267a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
        format = bufferFormat;
 800267e:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
        bufferHeight = height;
 8002682:	870a      	strh	r2, [r1, #56]	; 0x38
        buffer = videoBuffer;
 8002684:	630b      	str	r3, [r1, #48]	; 0x30
 8002686:	bd70      	pop	{r4, r5, r6, pc}
 8002688:	08028757 	.word	0x08028757
 800268c:	08028792 	.word	0x08028792
 8002690:	080285a0 	.word	0x080285a0
 8002694:	080285d0 	.word	0x080285d0
 8002698:	08027aee 	.word	0x08027aee

0800269c <_ZN8touchgfx21AbstractPainterRGB565C1Ev>:
        : widgetWidth(0)
 800269c:	2300      	movs	r3, #0
public:
    static const uint16_t RMASK = 0xF800; ///< Mask for red   (1111100000000000)
    static const uint16_t GMASK = 0x07E0; ///< Mask for green (0000011111100000)
    static const uint16_t BMASK = 0x001F; ///< Mask for blue  (0000000000011111)

    AbstractPainterRGB565()
 800269e:	b570      	push	{r4, r5, r6, lr}
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 80026a0:	4e12      	ldr	r6, [pc, #72]	; (80026ec <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x50>)
 80026a2:	4605      	mov	r5, r0
 80026a4:	8083      	strh	r3, [r0, #4]
        : AbstractPainter()
 80026a6:	4b12      	ldr	r3, [pc, #72]	; (80026f0 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x54>)
 80026a8:	6003      	str	r3, [r0, #0]
 80026aa:	6833      	ldr	r3, [r6, #0]
 80026ac:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80026b0:	b10a      	cbz	r2, 80026b6 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x1a>
 80026b2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80026b4:	b900      	cbnz	r0, 80026b8 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x1c>
        return instance->lcdRef;
 80026b6:	6898      	ldr	r0, [r3, #8]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 80026b8:	6803      	ldr	r3, [r0, #0]
 80026ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026bc:	4798      	blx	r3
        return auxiliaryLCD;
 80026be:	6833      	ldr	r3, [r6, #0]
 80026c0:	fab0 f480 	clz	r4, r0
 80026c4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80026c6:	0964      	lsrs	r4, r4, #5
        if (HAL::getInstance()->getAuxiliaryLCD())
 80026c8:	b130      	cbz	r0, 80026d8 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x3c>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 80026ca:	6803      	ldr	r3, [r0, #0]
 80026cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ce:	4798      	blx	r3
 80026d0:	2800      	cmp	r0, #0
 80026d2:	bf08      	it	eq
 80026d4:	f044 0401 	orreq.w	r4, r4, #1
    {
        assert(compatibleFramebuffer(Bitmap::RGB565) && "The chosen painter only works with RGB565 displays");
 80026d8:	b92c      	cbnz	r4, 80026e6 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x4a>
 80026da:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x58>)
 80026dc:	212c      	movs	r1, #44	; 0x2c
 80026de:	4a06      	ldr	r2, [pc, #24]	; (80026f8 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x5c>)
 80026e0:	4806      	ldr	r0, [pc, #24]	; (80026fc <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x60>)
 80026e2:	f023 fa95 	bl	8025c10 <__assert_func>
    }
 80026e6:	4628      	mov	r0, r5
 80026e8:	bd70      	pop	{r4, r5, r6, pc}
 80026ea:	bf00      	nop
 80026ec:	20027bc4 	.word	0x20027bc4
 80026f0:	08028a38 	.word	0x08028a38
 80026f4:	08028935 	.word	0x08028935
 80026f8:	08028993 	.word	0x08028993
 80026fc:	080289cc 	.word	0x080289cc

08002700 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>:
    void decoderTaskEntry()
 8002700:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002704:	4604      	mov	r4, r0
                    stream.doInvalidateOnNextTick = true;
 8002706:	2601      	movs	r6, #1
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8002708:	f44f 67c8 	mov.w	r7, #1600	; 0x640
            SEM_WAIT(semDecode);
 800270c:	f04f 31ff 	mov.w	r1, #4294967295
 8002710:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002712:	f00a fcd3 	bl	800d0bc <osSemaphoreAcquire>
            MUTEX_LOCK(mutexBuffers);
 8002716:	f04f 31ff 	mov.w	r1, #4294967295
 800271a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800271c:	f00a fc1e 	bl	800cf5c <osMutexAcquire>
                if (stream.doDecode)
 8002720:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8002724:	b343      	cbz	r3, 8002778 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x78>
                    MJPEGDecoder* const decoder = mjpegDecoders[i];
 8002726:	6865      	ldr	r5, [r4, #4]
                    if (stream.seek_to_frame > 0)
 8002728:	f8d4 8020 	ldr.w	r8, [r4, #32]
                        decoder->gotoFrame(stream.seek_to_frame);
 800272c:	682b      	ldr	r3, [r5, #0]
                    stream.doInvalidateOnNextTick = true;
 800272e:	f884 602b 	strb.w	r6, [r4, #43]	; 0x2b
                    if (stream.seek_to_frame > 0)
 8002732:	f1b8 0f00 	cmp.w	r8, #0
 8002736:	d023      	beq.n	8002780 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x80>
                        decoder->gotoFrame(stream.seek_to_frame);
 8002738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273a:	4641      	mov	r1, r8
 800273c:	4628      	mov	r0, r5
 800273e:	4798      	blx	r3
                        stream.seek_to_frame = 0;
 8002740:	2300      	movs	r3, #0
 8002742:	6223      	str	r3, [r4, #32]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8002744:	682b      	ldr	r3, [r5, #0]
 8002746:	f44f 7248 	mov.w	r2, #800	; 0x320
 800274a:	9700      	str	r7, [sp, #0]
 800274c:	4628      	mov	r0, r5
 800274e:	f8d3 8014 	ldr.w	r8, [r3, #20]
 8002752:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002756:	68a1      	ldr	r1, [r4, #8]
 8002758:	47c0      	blx	r8
                    stream.frameCount++;
 800275a:	6923      	ldr	r3, [r4, #16]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 800275c:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
                    stream.frameCount++;
 8002760:	3301      	adds	r3, #1
 8002762:	6123      	str	r3, [r4, #16]
                    if (stream.hasMoreFrames)
 8002764:	b1f0      	cbz	r0, 80027a4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xa4>
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 8002766:	682b      	ldr	r3, [r5, #0]
 8002768:	4628      	mov	r0, r5
 800276a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276c:	4798      	blx	r3
 800276e:	3801      	subs	r0, #1
 8002770:	60e0      	str	r0, [r4, #12]
                    stream.doDecode = false;
 8002772:	2300      	movs	r3, #0
 8002774:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
            MUTEX_UNLOCK(mutexBuffers);
 8002778:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800277a:	f00a fc1f 	bl	800cfbc <osMutexRelease>
        while (1)
 800277e:	e7c5      	b.n	800270c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xc>
                        if (stream.skip_frames > 0)
 8002780:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002782:	2a00      	cmp	r2, #0
 8002784:	d0de      	beq.n	8002744 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x44>
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
 8002786:	4628      	mov	r0, r5
 8002788:	e9d3 9309 	ldrd	r9, r3, [r3, #36]	; 0x24
 800278c:	4798      	blx	r3
 800278e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002790:	4401      	add	r1, r0
 8002792:	4628      	mov	r0, r5
 8002794:	47c8      	blx	r9
                            stream.frameCount += stream.skip_frames;
 8002796:	6923      	ldr	r3, [r4, #16]
 8002798:	6a62      	ldr	r2, [r4, #36]	; 0x24
                            stream.skip_frames = 0;
 800279a:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
                            stream.frameCount += stream.skip_frames;
 800279e:	4413      	add	r3, r2
 80027a0:	6123      	str	r3, [r4, #16]
 80027a2:	e7cf      	b.n	8002744 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x44>
                        stream.frameNumber = 1;
 80027a4:	60e6      	str	r6, [r4, #12]
 80027a6:	e7e4      	b.n	8002772 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x72>

080027a8 <videoTaskFunc>:
    }
}

extern "C" void videoTaskFunc(void *argument)
{
    videoController.decoderTaskEntry();
 80027a8:	4801      	ldr	r0, [pc, #4]	; (80027b0 <videoTaskFunc+0x8>)
{
 80027aa:	b508      	push	{r3, lr}
    videoController.decoderTaskEntry();
 80027ac:	f7ff ffa8 	bl	8002700 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>
 80027b0:	2000deac 	.word	0x2000deac

080027b4 <_GLOBAL__sub_I_mjpegdecoder1>:
}
 80027b4:	b538      	push	{r3, r4, r5, lr}
HardwareMJPEGDecoder mjpegdecoder1;
 80027b6:	4814      	ldr	r0, [pc, #80]	; (8002808 <_GLOBAL__sub_I_mjpegdecoder1+0x54>)
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 80027b8:	2500      	movs	r5, #0
 80027ba:	f7fe fd4f 	bl	800125c <_ZN20HardwareMJPEGDecoderC1Ev>
 80027be:	4c13      	ldr	r4, [pc, #76]	; (800280c <_GLOBAL__sub_I_mjpegdecoder1+0x58>)
 80027c0:	4b13      	ldr	r3, [pc, #76]	; (8002810 <_GLOBAL__sub_I_mjpegdecoder1+0x5c>)
        semDecode = SEM_CREATE(); // Binary semaphore
 80027c2:	462a      	mov	r2, r5
 80027c4:	4629      	mov	r1, r5
 80027c6:	2001      	movs	r0, #1
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 80027c8:	6023      	str	r3, [r4, #0]
 80027ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027ce:	63a5      	str	r5, [r4, #56]	; 0x38
 80027d0:	87a3      	strh	r3, [r4, #60]	; 0x3c
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 80027d2:	85a3      	strh	r3, [r4, #44]	; 0x2c
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 80027d4:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
                   doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
 80027d8:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 80027dc:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
 80027e0:	e9c4 5510 	strd	r5, r5, [r4, #64]	; 0x40
 80027e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
                   doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
 80027e8:	e9c4 5503 	strd	r5, r5, [r4, #12]
 80027ec:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80027f0:	e9c4 5507 	strd	r5, r5, [r4, #28]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 80027f4:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
        semDecode = SEM_CREATE(); // Binary semaphore
 80027f8:	f00a fc0a 	bl	800d010 <osSemaphoreNew>
 80027fc:	6420      	str	r0, [r4, #64]	; 0x40
        mutexBuffers = MUTEX_CREATE();
 80027fe:	4628      	mov	r0, r5
 8002800:	f00a fb6a 	bl	800ced8 <osMutexNew>
 8002804:	6460      	str	r0, [r4, #68]	; 0x44
}
 8002806:	bd38      	pop	{r3, r4, r5, pc}
 8002808:	2000de68 	.word	0x2000de68
 800280c:	2000deac 	.word	0x2000deac
 8002810:	08028a58 	.word	0x08028a58

08002814 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 8002814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002818:	b08d      	sub	sp, #52	; 0x34
 800281a:	9207      	str	r2, [sp, #28]
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr, *pOutAddr2;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
 800281c:	f44f 72c0 	mov.w	r2, #384	; 0x180
  currentMCU = BlockIndex;
 8002820:	f8dd 801c 	ldr.w	r8, [sp, #28]
{
 8002824:	9001      	str	r0, [sp, #4]
 8002826:	910b      	str	r1, [sp, #44]	; 0x2c
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
 8002828:	fbb3 f3f2 	udiv	r3, r3, r2
 800282c:	9306      	str	r3, [sp, #24]

  while(currentMCU < (numberMCU + BlockIndex))
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 800282e:	4b6c      	ldr	r3, [pc, #432]	; (80029e0 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1cc>)
 8002830:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002834:	9205      	str	r2, [sp, #20]
  while(currentMCU < (numberMCU + BlockIndex))
 8002836:	2200      	movs	r2, #0
 8002838:	e9dd 1006 	ldrd	r1, r0, [sp, #24]
 800283c:	4401      	add	r1, r0
 800283e:	4541      	cmp	r1, r8
 8002840:	d806      	bhi.n	8002850 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x3c>
 8002842:	b10a      	cbz	r2, 8002848 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x34>
 8002844:	4a66      	ldr	r2, [pc, #408]	; (80029e0 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1cc>)
 8002846:	6293      	str	r3, [r2, #40]	; 0x28
    }

    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
  }
  return numberMCU;
}
 8002848:	9806      	ldr	r0, [sp, #24]
 800284a:	b00d      	add	sp, #52	; 0x34
 800284c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 8002850:	ea4f 1308 	mov.w	r3, r8, lsl #4
 8002854:	9a05      	ldr	r2, [sp, #20]
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 8002856:	9905      	ldr	r1, [sp, #20]
    currentMCU++;
 8002858:	f108 0801 	add.w	r8, r8, #1
    for(i= 0; i <  16; i+=2)
 800285c:	f04f 0b00 	mov.w	fp, #0
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 8002860:	fbb3 f2f2 	udiv	r2, r3, r2
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 8002864:	fb01 3312 	mls	r3, r1, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002868:	f44f 41c8 	mov.w	r1, #25600	; 0x6400
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	fb01 3302 	mla	r3, r1, r2, r3
 8002872:	9302      	str	r3, [sp, #8]
    pChrom = pInBuffer + 256; /* pChroma = pInBuffer + 4*64 */
 8002874:	9b01      	ldr	r3, [sp, #4]
 8002876:	f503 7c80 	add.w	ip, r3, #256	; 0x100
    pLum = pInBuffer;
 800287a:	4699      	mov	r9, r3
      if(refline < JPEG_ConvertorParams.ScaledWidth * 480)
 800287c:	9b02      	ldr	r3, [sp, #8]
 800287e:	4a59      	ldr	r2, [pc, #356]	; (80029e4 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1d0>)
 8002880:	4293      	cmp	r3, r2
 8002882:	f200 8099 	bhi.w	80029b8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1a4>
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
 8002886:	f503 65c8 	add.w	r5, r3, #1600	; 0x640
 800288a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800288c:	f8cd 900c 	str.w	r9, [sp, #12]
 8002890:	441d      	add	r5, r3
        for(k= 0; k<2; k++)
 8002892:	f10c 0308 	add.w	r3, ip, #8
 8002896:	9309      	str	r3, [sp, #36]	; 0x24
          for(j=0; j < 8; j+=2)
 8002898:	f10c 33ff 	add.w	r3, ip, #4294967295
 800289c:	9f03      	ldr	r7, [sp, #12]
    for(i= 0; i <  16; i+=2)
 800289e:	2600      	movs	r6, #0
 80028a0:	9304      	str	r3, [sp, #16]
 80028a2:	f5a5 63c8 	sub.w	r3, r5, #1600	; 0x640
 80028a6:	9308      	str	r3, [sp, #32]
 80028a8:	9b08      	ldr	r3, [sp, #32]
          for(j=0; j < 8; j+=2)
 80028aa:	3702      	adds	r7, #2
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 80028ac:	484e      	ldr	r0, [pc, #312]	; (80029e8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1d4>)
 80028ae:	4433      	add	r3, r6
            ycomp = (int32_t)(*(pLum +j));
 80028b0:	f817 ec02 	ldrb.w	lr, [r7, #-2]
 80028b4:	930a      	str	r3, [sp, #40]	; 0x28
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 80028b6:	9b04      	ldr	r3, [sp, #16]
 80028b8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80028bc:	9304      	str	r3, [sp, #16]
 80028be:	4b4b      	ldr	r3, [pc, #300]	; (80029ec <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1d8>)
 80028c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 80028c4:	9b04      	ldr	r3, [sp, #16]
 80028c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028ca:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 80028ce:	4848      	ldr	r0, [pc, #288]	; (80029f0 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1dc>)
 80028d0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80028d4:	4847      	ldr	r0, [pc, #284]	; (80029f4 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1e0>)
 80028d6:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80028da:	4413      	add	r3, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80028dc:	4a46      	ldr	r2, [pc, #280]	; (80029f8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1e4>)
 80028de:	4414      	add	r4, r2
 80028e0:	4610      	mov	r0, r2
 80028e2:	eb04 020e 	add.w	r2, r4, lr
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80028e6:	eb00 4323 	add.w	r3, r0, r3, asr #16
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 80028ea:	4401      	add	r1, r0
            *(__IO uint16_t *)pOutAddr =
 80028ec:	9808      	ldr	r0, [sp, #32]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80028ee:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
 80028f2:	ea4f 0ad2 	mov.w	sl, r2, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80028f6:	eb03 020e 	add.w	r2, r3, lr
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 80028fa:	448e      	add	lr, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80028fc:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
 8002900:	f89e e100 	ldrb.w	lr, [lr, #256]	; 0x100
 8002904:	0892      	lsrs	r2, r2, #2
 8002906:	0152      	lsls	r2, r2, #5
 8002908:	ea42 22ca 	orr.w	r2, r2, sl, lsl #11
 800290c:	ea42 02de 	orr.w	r2, r2, lr, lsr #3
            *(__IO uint16_t *)pOutAddr =
 8002910:	5382      	strh	r2, [r0, r6]
            ycomp = (int32_t)(*(pLum +j +1));
 8002912:	f817 ec01 	ldrb.w	lr, [r7, #-1]
            *((__IO uint16_t *)(pOutAddr + 2)) =
 8002916:	980a      	ldr	r0, [sp, #40]	; 0x28
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002918:	eb04 020e 	add.w	r2, r4, lr
 800291c:	f892 a100 	ldrb.w	sl, [r2, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002920:	eb03 020e 	add.w	r2, r3, lr
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002924:	448e      	add	lr, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002926:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800292a:	ea4f 0ada 	mov.w	sl, sl, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800292e:	0892      	lsrs	r2, r2, #2
 8002930:	0152      	lsls	r2, r2, #5
 8002932:	ea42 22ca 	orr.w	r2, r2, sl, lsl #11
 8002936:	f89e a100 	ldrb.w	sl, [lr, #256]	; 0x100
 800293a:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *((__IO uint16_t *)(pOutAddr + 2)) =
 800293e:	8042      	strh	r2, [r0, #2]
            ycomp = (int32_t)(*(pLum +j +8));
 8002940:	f897 e006 	ldrb.w	lr, [r7, #6]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002944:	eb04 020e 	add.w	r2, r4, lr
 8002948:	f892 a100 	ldrb.w	sl, [r2, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800294c:	eb03 020e 	add.w	r2, r3, lr
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002950:	448e      	add	lr, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002952:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002956:	ea4f 0ada 	mov.w	sl, sl, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800295a:	0892      	lsrs	r2, r2, #2
 800295c:	0152      	lsls	r2, r2, #5
 800295e:	ea42 22ca 	orr.w	r2, r2, sl, lsl #11
 8002962:	f89e a100 	ldrb.w	sl, [lr, #256]	; 0x100
 8002966:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *(__IO uint16_t *)pOutAddr2 =
 800296a:	53aa      	strh	r2, [r5, r6]
            ycomp = (int32_t)(*(pLum +j +8 +1));
 800296c:	79fa      	ldrb	r2, [r7, #7]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800296e:	4413      	add	r3, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002970:	4414      	add	r4, r2
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002972:	440a      	add	r2, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002974:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002978:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800297c:	089b      	lsrs	r3, r3, #2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800297e:	08e4      	lsrs	r4, r4, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002980:	015b      	lsls	r3, r3, #5
 8002982:	ea43 23c4 	orr.w	r3, r3, r4, lsl #11
 8002986:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
            *((__IO uint16_t *)(pOutAddr2 +2)) =
 800298a:	19aa      	adds	r2, r5, r6
          for(j=0; j < 8; j+=2)
 800298c:	3604      	adds	r6, #4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800298e:	ea43 03d4 	orr.w	r3, r3, r4, lsr #3
          for(j=0; j < 8; j+=2)
 8002992:	2e10      	cmp	r6, #16
            *((__IO uint16_t *)(pOutAddr2 +2)) =
 8002994:	8053      	strh	r3, [r2, #2]
          for(j=0; j < 8; j+=2)
 8002996:	d187      	bne.n	80028a8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x94>
          pLum += 64;
 8002998:	9b03      	ldr	r3, [sp, #12]
            pChrom++;
 800299a:	f10c 0c04 	add.w	ip, ip, #4
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
 800299e:	3510      	adds	r5, #16
          pLum += 64;
 80029a0:	3340      	adds	r3, #64	; 0x40
 80029a2:	9303      	str	r3, [sp, #12]
        for(k= 0; k<2; k++)
 80029a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80029a6:	4563      	cmp	r3, ip
 80029a8:	f47f af76 	bne.w	8002898 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x84>
        refline += 2*JPEG_ConvertorParams.ScaledWidth;
 80029ac:	9b02      	ldr	r3, [sp, #8]
        pLum = pLum - 128 + 16;
 80029ae:	f109 0910 	add.w	r9, r9, #16
        refline += 2*JPEG_ConvertorParams.ScaledWidth;
 80029b2:	f503 6348 	add.w	r3, r3, #3200	; 0xc80
 80029b6:	9302      	str	r3, [sp, #8]
    for(i= 0; i <  16; i+=2)
 80029b8:	f10b 0b02 	add.w	fp, fp, #2
 80029bc:	f1bb 0f10 	cmp.w	fp, #16
 80029c0:	d107      	bne.n	80029d2 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1be>
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
 80029c2:	9b01      	ldr	r3, [sp, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80029ca:	9301      	str	r3, [sp, #4]
    JPEG_ConvertorParams.ScaledWidth = 800 * 2;
 80029cc:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 80029d0:	e732      	b.n	8002838 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x24>
      if(i == 8)
 80029d2:	f1bb 0f08 	cmp.w	fp, #8
        pLum = pInBuffer + 128;
 80029d6:	bf04      	itt	eq
 80029d8:	9b01      	ldreq	r3, [sp, #4]
 80029da:	f103 0980 	addeq.w	r9, r3, #128	; 0x80
 80029de:	e74d      	b.n	800287c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x68>
 80029e0:	20010b74 	.word	0x20010b74
 80029e4:	000bb7ff 	.word	0x000bb7ff
 80029e8:	2000f6f4 	.word	0x2000f6f4
 80029ec:	2000eaf4 	.word	0x2000eaf4
 80029f0:	2000f2f4 	.word	0x2000f2f4
 80029f4:	2000eef4 	.word	0x2000eef4
 80029f8:	08028a90 	.word	0x08028a90

080029fc <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 80029fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
 8002a00:	0a1b      	lsrs	r3, r3, #8
{
 8002a02:	b08d      	sub	sp, #52	; 0x34
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
 8002a04:	9305      	str	r3, [sp, #20]
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 8002a06:	4b4f      	ldr	r3, [pc, #316]	; (8002b44 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x148>)
{
 8002a08:	9206      	str	r2, [sp, #24]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 8002a0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  currentMCU = BlockIndex;
 8002a0c:	f8dd e018 	ldr.w	lr, [sp, #24]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 8002a10:	9202      	str	r2, [sp, #8]

    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002a12:	6a9a      	ldr	r2, [r3, #40]	; 0x28

    pLum = pInBuffer;

    for(i= 0; i <  8; i++)
    {
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002a14:	691b      	ldr	r3, [r3, #16]
{
 8002a16:	910a      	str	r1, [sp, #40]	; 0x28
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002a18:	9203      	str	r2, [sp, #12]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002a1a:	9307      	str	r3, [sp, #28]
  while(currentMCU < (numberMCU + BlockIndex))
 8002a1c:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 8002a20:	4413      	add	r3, r2
 8002a22:	4573      	cmp	r3, lr
 8002a24:	d803      	bhi.n	8002a2e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x32>
    }

    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
  }
  return numberMCU;
}
 8002a26:	9805      	ldr	r0, [sp, #20]
 8002a28:	b00d      	add	sp, #52	; 0x34
 8002a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 8002a2e:	ea4f 120e 	mov.w	r2, lr, lsl #4
 8002a32:	9b02      	ldr	r3, [sp, #8]
    currentMCU++;
 8002a34:	f10e 0e01 	add.w	lr, lr, #1
 8002a38:	f100 0780 	add.w	r7, r0, #128	; 0x80
    pLum = pInBuffer;
 8002a3c:	4682      	mov	sl, r0
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 8002a3e:	fbb2 f1f3 	udiv	r1, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002a42:	9b03      	ldr	r3, [sp, #12]
 8002a44:	fb03 f401 	mul.w	r4, r3, r1
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 8002a48:	9b02      	ldr	r3, [sp, #8]
 8002a4a:	fb03 2311 	mls	r3, r3, r1, r2
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8002a54:	9300      	str	r3, [sp, #0]
    currentMCU++;
 8002a56:	2308      	movs	r3, #8
 8002a58:	9304      	str	r3, [sp, #16]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002a5a:	9b07      	ldr	r3, [sp, #28]
 8002a5c:	9a00      	ldr	r2, [sp, #0]
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d969      	bls.n	8002b36 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x13a>
        pOutAddr = pOutBuffer + refline;
 8002a62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002a64:	46d0      	mov	r8, sl
 8002a66:	eb03 0902 	add.w	r9, r3, r2
        for(k= 0; k<2; k++)
 8002a6a:	f107 0308 	add.w	r3, r7, #8
 8002a6e:	9308      	str	r3, [sp, #32]
          for(j=0; j < 8; j+=2)
 8002a70:	1e7b      	subs	r3, r7, #1
    currentMCU++;
 8002a72:	2400      	movs	r4, #0
 8002a74:	9301      	str	r3, [sp, #4]
            ycomp = (int32_t)(*(pLum +j +1));
 8002a76:	f108 0301 	add.w	r3, r8, #1
 8002a7a:	930b      	str	r3, [sp, #44]	; 0x2c
 8002a7c:	eb09 0384 	add.w	r3, r9, r4, lsl #2
            ycomp = (int32_t)(*(pLum +j));
 8002a80:	f818 c014 	ldrb.w	ip, [r8, r4, lsl #1]
 8002a84:	9309      	str	r3, [sp, #36]	; 0x24
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 8002a86:	9b01      	ldr	r3, [sp, #4]
 8002a88:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8002a8c:	9301      	str	r3, [sp, #4]
 8002a8e:	4b2e      	ldr	r3, [pc, #184]	; (8002b48 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x14c>)
 8002a90:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 8002a94:	9b01      	ldr	r3, [sp, #4]
 8002a96:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
 8002a9a:	4b2c      	ldr	r3, [pc, #176]	; (8002b4c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x150>)
 8002a9c:	f853 6021 	ldr.w	r6, [r3, r1, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 8002aa0:	4b2b      	ldr	r3, [pc, #172]	; (8002b50 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x154>)
 8002aa2:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8002aa6:	4b2b      	ldr	r3, [pc, #172]	; (8002b54 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x158>)
 8002aa8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002aac:	4411      	add	r1, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002aae:	4a2a      	ldr	r2, [pc, #168]	; (8002b58 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x15c>)
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	4416      	add	r6, r2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002ab4:	eb03 4121 	add.w	r1, r3, r1, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002ab8:	eb06 020c 	add.w	r2, r6, ip
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002abc:	441d      	add	r5, r3
            ycomp = (int32_t)(*(pLum +j +1));
 8002abe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002ac0:	f892 b100 	ldrb.w	fp, [r2, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002ac4:	eb01 020c 	add.w	r2, r1, ip
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002ac8:	44ac      	add	ip, r5
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002aca:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002ace:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002ad2:	0892      	lsrs	r2, r2, #2
 8002ad4:	0152      	lsls	r2, r2, #5
 8002ad6:	ea42 22cb 	orr.w	r2, r2, fp, lsl #11
 8002ada:	f89c b100 	ldrb.w	fp, [ip, #256]	; 0x100
 8002ade:	ea42 02db 	orr.w	r2, r2, fp, lsr #3
            *(__IO uint16_t *)pOutAddr =
 8002ae2:	f829 2024 	strh.w	r2, [r9, r4, lsl #2]
            ycomp = (int32_t)(*(pLum +j +1));
 8002ae6:	f813 2014 	ldrb.w	r2, [r3, r4, lsl #1]
          for(j=0; j < 8; j+=2)
 8002aea:	3401      	adds	r4, #1
            *((__IO uint16_t *)(pOutAddr + 2)) =
 8002aec:	9b09      	ldr	r3, [sp, #36]	; 0x24
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002aee:	4411      	add	r1, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002af0:	4416      	add	r6, r2
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002af2:	4415      	add	r5, r2
          for(j=0; j < 8; j+=2)
 8002af4:	2c04      	cmp	r4, #4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002af6:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002afa:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002afe:	ea4f 0191 	mov.w	r1, r1, lsr #2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002b02:	ea4f 06d6 	mov.w	r6, r6, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002b06:	ea4f 1141 	mov.w	r1, r1, lsl #5
 8002b0a:	ea41 21c6 	orr.w	r1, r1, r6, lsl #11
 8002b0e:	f895 6100 	ldrb.w	r6, [r5, #256]	; 0x100
 8002b12:	ea41 01d6 	orr.w	r1, r1, r6, lsr #3
            *((__IO uint16_t *)(pOutAddr + 2)) =
 8002b16:	8059      	strh	r1, [r3, #2]
          for(j=0; j < 8; j+=2)
 8002b18:	d1b0      	bne.n	8002a7c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x80>
            pChrom++;
 8002b1a:	3704      	adds	r7, #4
        for(k= 0; k<2; k++)
 8002b1c:	9b08      	ldr	r3, [sp, #32]
            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 8002b1e:	f109 0910 	add.w	r9, r9, #16
          pLum += 64;
 8002b22:	f108 0840 	add.w	r8, r8, #64	; 0x40
        for(k= 0; k<2; k++)
 8002b26:	42bb      	cmp	r3, r7
 8002b28:	d1a2      	bne.n	8002a70 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x74>
        refline += JPEG_ConvertorParams.ScaledWidth;
 8002b2a:	9a00      	ldr	r2, [sp, #0]
        pLum = pLum - 128 + 8;
 8002b2c:	f10a 0a08 	add.w	sl, sl, #8
        refline += JPEG_ConvertorParams.ScaledWidth;
 8002b30:	9b03      	ldr	r3, [sp, #12]
 8002b32:	441a      	add	r2, r3
 8002b34:	9200      	str	r2, [sp, #0]
    for(i= 0; i <  8; i++)
 8002b36:	9b04      	ldr	r3, [sp, #16]
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	9304      	str	r3, [sp, #16]
 8002b3c:	d18d      	bne.n	8002a5a <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x5e>
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
 8002b3e:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8002b42:	e76b      	b.n	8002a1c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x20>
 8002b44:	20010b74 	.word	0x20010b74
 8002b48:	2000eaf4 	.word	0x2000eaf4
 8002b4c:	2000f6f4 	.word	0x2000f6f4
 8002b50:	2000f2f4 	.word	0x2000f2f4
 8002b54:	2000eef4 	.word	0x2000eef4
 8002b58:	08028a90 	.word	0x08028a90

08002b5c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 8002b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b60:	4692      	mov	sl, r2
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 8002b62:	22c0      	movs	r2, #192	; 0xc0
{
 8002b64:	b089      	sub	sp, #36	; 0x24
  currentMCU = BlockIndex;
 8002b66:	4654      	mov	r4, sl
{
 8002b68:	9107      	str	r1, [sp, #28]
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 8002b6a:	fbb3 f3f2 	udiv	r3, r3, r2

  while(currentMCU < (numberMCU + BlockIndex))
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002b6e:	4a35      	ldr	r2, [pc, #212]	; (8002c44 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xe8>)
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 8002b70:	9304      	str	r3, [sp, #16]
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002b72:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8002b74:	9100      	str	r1, [sp, #0]

    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002b76:	6a91      	ldr	r1, [r2, #40]	; 0x28

    pLum = pInBuffer;

    for(i= 0; i <  8; i++)
    {
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002b78:	6912      	ldr	r2, [r2, #16]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002b7a:	9101      	str	r1, [sp, #4]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002b7c:	9205      	str	r2, [sp, #20]
  while(currentMCU < (numberMCU + BlockIndex))
 8002b7e:	9b04      	ldr	r3, [sp, #16]
 8002b80:	eb03 020a 	add.w	r2, r3, sl
 8002b84:	42a2      	cmp	r2, r4
 8002b86:	d803      	bhi.n	8002b90 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x34>
    }

    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
  }
  return numberMCU;
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	b009      	add	sp, #36	; 0x24
 8002b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002b90:	00e1      	lsls	r1, r4, #3
 8002b92:	9a00      	ldr	r2, [sp, #0]
    currentMCU++;
 8002b94:	3401      	adds	r4, #1
    pLum = pInBuffer;
 8002b96:	4684      	mov	ip, r0
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002b98:	fbb1 f5f2 	udiv	r5, r1, r2
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002b9c:	9a01      	ldr	r2, [sp, #4]
 8002b9e:	fb02 f605 	mul.w	r6, r2, r5
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 8002ba2:	9a00      	ldr	r2, [sp, #0]
 8002ba4:	fb02 1215 	mls	r2, r2, r5, r1
    currentMCU++;
 8002ba8:	2108      	movs	r1, #8
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002baa:	0052      	lsls	r2, r2, #1
    currentMCU++;
 8002bac:	9103      	str	r1, [sp, #12]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002bae:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
    pChrom = pInBuffer + 64; /* pChroma = pInBuffer + 4*64 */
 8002bb2:	f100 0640 	add.w	r6, r0, #64	; 0x40
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002bb6:	9905      	ldr	r1, [sp, #20]
 8002bb8:	4291      	cmp	r1, r2
 8002bba:	d93d      	bls.n	8002c38 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xdc>
        pOutAddr = pOutBuffer+ refline;
 8002bbc:	9907      	ldr	r1, [sp, #28]
 8002bbe:	f106 3eff 	add.w	lr, r6, #4294967295
 8002bc2:	188d      	adds	r5, r1, r2
          for(j=0; j < 8; j++)
 8002bc4:	f10c 31ff 	add.w	r1, ip, #4294967295
 8002bc8:	9102      	str	r1, [sp, #8]
 8002bca:	f105 0110 	add.w	r1, r5, #16
 8002bce:	9106      	str	r1, [sp, #24]
            ycomp = (int32_t)(*(pLum +j));
 8002bd0:	9f02      	ldr	r7, [sp, #8]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 8002bd2:	f81e 8f01 	ldrb.w	r8, [lr, #1]!
            ycomp = (int32_t)(*(pLum +j));
 8002bd6:	f817 1f01 	ldrb.w	r1, [r7, #1]!
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 8002bda:	f89e 9040 	ldrb.w	r9, [lr, #64]	; 0x40
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002bde:	4b1a      	ldr	r3, [pc, #104]	; (8002c48 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xec>)
            ycomp = (int32_t)(*(pLum +j));
 8002be0:	9702      	str	r7, [sp, #8]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002be2:	4f1a      	ldr	r7, [pc, #104]	; (8002c4c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xf0>)
 8002be4:	4419      	add	r1, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002be6:	4b1a      	ldr	r3, [pc, #104]	; (8002c50 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xf4>)
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002be8:	f857 7029 	ldr.w	r7, [r7, r9, lsl #2]
 8002bec:	440f      	add	r7, r1
 8002bee:	f897 b100 	ldrb.w	fp, [r7, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002bf2:	f853 7028 	ldr.w	r7, [r3, r8, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 8002bf6:	4b17      	ldr	r3, [pc, #92]	; (8002c54 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xf8>)
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002bf8:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002bfc:	440f      	add	r7, r1
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 8002bfe:	f853 9029 	ldr.w	r9, [r3, r9, lsl #2]
 8002c02:	4b15      	ldr	r3, [pc, #84]	; (8002c58 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xfc>)
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002c04:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 8002c08:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002c0c:	08ff      	lsrs	r7, r7, #3
          for(j=0; j < 8; j++)
 8002c0e:	9b06      	ldr	r3, [sp, #24]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 8002c10:	44c8      	add	r8, r9
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002c12:	ea47 27cb 	orr.w	r7, r7, fp, lsl #11
 8002c16:	eb01 4828 	add.w	r8, r1, r8, asr #16
 8002c1a:	f898 b100 	ldrb.w	fp, [r8, #256]	; 0x100
 8002c1e:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 8002c22:	ea47 174b 	orr.w	r7, r7, fp, lsl #5
            *(__IO uint16_t *)pOutAddr =
 8002c26:	f825 7b02 	strh.w	r7, [r5], #2
          for(j=0; j < 8; j++)
 8002c2a:	429d      	cmp	r5, r3
 8002c2c:	d1d0      	bne.n	8002bd0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x74>
        refline += JPEG_ConvertorParams.ScaledWidth;
 8002c2e:	9b01      	ldr	r3, [sp, #4]
            pChrom++;
 8002c30:	3608      	adds	r6, #8
          pLum += 8;
 8002c32:	f10c 0c08 	add.w	ip, ip, #8
        refline += JPEG_ConvertorParams.ScaledWidth;
 8002c36:	441a      	add	r2, r3
    for(i= 0; i <  8; i++)
 8002c38:	9b03      	ldr	r3, [sp, #12]
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	9303      	str	r3, [sp, #12]
 8002c3e:	d1ba      	bne.n	8002bb6 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x5a>
    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
 8002c40:	30c0      	adds	r0, #192	; 0xc0
 8002c42:	e79c      	b.n	8002b7e <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x22>
 8002c44:	20010b74 	.word	0x20010b74
 8002c48:	08028a90 	.word	0x08028a90
 8002c4c:	2000f6f4 	.word	0x2000f6f4
 8002c50:	2000eaf4 	.word	0x2000eaf4
 8002c54:	2000f2f4 	.word	0x2000f2f4
 8002c58:	2000eef4 	.word	0x2000eef4

08002c5c <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 8002c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c60:	b085      	sub	sp, #20
 8002c62:	4604      	mov	r4, r0
  uint32_t refline;

  uint32_t i,j, ySample;
  uint8_t *pOutAddr,  *pLum;

  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
 8002c64:	0998      	lsrs	r0, r3, #6
{
 8002c66:	9102      	str	r1, [sp, #8]
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
 8002c68:	eb02 1393 	add.w	r3, r2, r3, lsr #6
  {
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002c6c:	491a      	ldr	r1, [pc, #104]	; (8002cd8 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x7c>)
  while(currentMCU < (numberMCU + BlockIndex))
 8002c6e:	9303      	str	r3, [sp, #12]

    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002c70:	e9d1 8909 	ldrd	r8, r9, [r1, #36]	; 0x24
    pLum = pInBuffer;

    for(i= 0; i <  8; i++)
    {
      pOutAddr = pOutBuffer + refline;
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002c74:	6909      	ldr	r1, [r1, #16]
 8002c76:	9101      	str	r1, [sp, #4]
  while(currentMCU < (numberMCU + BlockIndex))
 8002c78:	9b03      	ldr	r3, [sp, #12]
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d802      	bhi.n	8002c84 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x28>
    }

    pInBuffer +=  GRAY_444_BLOCK_SIZE;
  }
  return numberMCU;
}
 8002c7e:	b005      	add	sp, #20
 8002c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002c84:	00d1      	lsls	r1, r2, #3
    pLum = pInBuffer;
 8002c86:	46a4      	mov	ip, r4
    currentMCU++;
 8002c88:	3201      	adds	r2, #1
 8002c8a:	2708      	movs	r7, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002c8c:	fbb1 f3f8 	udiv	r3, r1, r8
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002c90:	fb09 f503 	mul.w	r5, r9, r3
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 8002c94:	fb08 1313 	mls	r3, r8, r3, r1
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002c9e:	9901      	ldr	r1, [sp, #4]
 8002ca0:	4299      	cmp	r1, r3
 8002ca2:	d914      	bls.n	8002cce <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x72>
      pOutAddr = pOutBuffer + refline;
 8002ca4:	9902      	ldr	r1, [sp, #8]
 8002ca6:	46e2      	mov	sl, ip
 8002ca8:	4419      	add	r1, r3
 8002caa:	f101 0b10 	add.w	fp, r1, #16
          ySample =   (uint32_t)(*pLum);
 8002cae:	f81a 6b01 	ldrb.w	r6, [sl], #1
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
 8002cb2:	08f5      	lsrs	r5, r6, #3
 8002cb4:	08b6      	lsrs	r6, r6, #2
 8002cb6:	ea4f 2ec5 	mov.w	lr, r5, lsl #11
 8002cba:	ea4e 1646 	orr.w	r6, lr, r6, lsl #5
 8002cbe:	432e      	orrs	r6, r5
 8002cc0:	f821 6b02 	strh.w	r6, [r1], #2
        for(j=0; j < 8; j++)
 8002cc4:	4559      	cmp	r1, fp
 8002cc6:	d1f2      	bne.n	8002cae <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x52>
          pLum++;
 8002cc8:	f10c 0c08 	add.w	ip, ip, #8
        refline += JPEG_ConvertorParams.ScaledWidth;
 8002ccc:	444b      	add	r3, r9
    for(i= 0; i <  8; i++)
 8002cce:	3f01      	subs	r7, #1
 8002cd0:	d1e5      	bne.n	8002c9e <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x42>
    pInBuffer +=  GRAY_444_BLOCK_SIZE;
 8002cd2:	3440      	adds	r4, #64	; 0x40
 8002cd4:	e7d0      	b.n	8002c78 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1c>
 8002cd6:	bf00      	nop
 8002cd8:	20010b74 	.word	0x20010b74

08002cdc <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 8002cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ce0:	b085      	sub	sp, #20
 8002ce2:	4605      	mov	r5, r0
        pOutAddr = pOutBuffer+ refline;

          for(j=0; j < 8; j++)
          {
            color_k = (int32_t)(*(pChrom + 192));
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 8002ce4:	27ff      	movs	r7, #255	; 0xff
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
 8002ce6:	0a18      	lsrs	r0, r3, #8
{
 8002ce8:	9102      	str	r1, [sp, #8]
  while(currentMCU < (numberMCU + BlockIndex))
 8002cea:	eb02 2313 	add.w	r3, r2, r3, lsr #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002cee:	4928      	ldr	r1, [pc, #160]	; (8002d90 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0xb4>)
  while(currentMCU < (numberMCU + BlockIndex))
 8002cf0:	9303      	str	r3, [sp, #12]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002cf2:	e9d1 9a09 	ldrd	r9, sl, [r1, #36]	; 0x24
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002cf6:	6909      	ldr	r1, [r1, #16]
 8002cf8:	9100      	str	r1, [sp, #0]
  while(currentMCU < (numberMCU + BlockIndex))
 8002cfa:	9b03      	ldr	r3, [sp, #12]
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d802      	bhi.n	8002d06 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x2a>
    }

    pInBuffer +=  CMYK_444_BLOCK_SIZE;
  }
  return numberMCU;
}
 8002d00:	b005      	add	sp, #20
 8002d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002d06:	00d3      	lsls	r3, r2, #3
    pChrom = pInBuffer;
 8002d08:	46ae      	mov	lr, r5
    currentMCU++;
 8002d0a:	3201      	adds	r2, #1
 8002d0c:	f04f 0c08 	mov.w	ip, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002d10:	fbb3 f1f9 	udiv	r1, r3, r9
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002d14:	fb0a f401 	mul.w	r4, sl, r1
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 8002d18:	fb09 3111 	mls	r1, r9, r1, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002d1c:	0049      	lsls	r1, r1, #1
 8002d1e:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002d22:	9b00      	ldr	r3, [sp, #0]
 8002d24:	428b      	cmp	r3, r1
 8002d26:	d92c      	bls.n	8002d82 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0xa6>
        pOutAddr = pOutBuffer+ refline;
 8002d28:	9b02      	ldr	r3, [sp, #8]
 8002d2a:	4674      	mov	r4, lr
 8002d2c:	185e      	adds	r6, r3, r1
          for(j=0; j < 8; j++)
 8002d2e:	f106 0310 	add.w	r3, r6, #16
 8002d32:	9301      	str	r3, [sp, #4]
            color_k = (int32_t)(*(pChrom + 192));
 8002d34:	f894 80c0 	ldrb.w	r8, [r4, #192]	; 0xc0
            pChrom++;
 8002d38:	3401      	adds	r4, #1
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 8002d3a:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8002d3e:	fb13 f308 	smulbb	r3, r3, r8
 8002d42:	fbb3 f3f7 	udiv	r3, r3, r7
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
 8002d46:	ea4f 0be3 	mov.w	fp, r3, asr #3
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
 8002d4a:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 8002d4e:	fb13 f308 	smulbb	r3, r3, r8
 8002d52:	fbb3 f3f7 	udiv	r3, r3, r7
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 8002d56:	109b      	asrs	r3, r3, #2
 8002d58:	015b      	lsls	r3, r3, #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
 8002d5a:	ea43 23cb 	orr.w	r3, r3, fp, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
 8002d5e:	f894 b07f 	ldrb.w	fp, [r4, #127]	; 0x7f
 8002d62:	fb1b fb08 	smulbb	fp, fp, r8
 8002d66:	fbbb fbf7 	udiv	fp, fp, r7
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 8002d6a:	ea43 0bdb 	orr.w	fp, r3, fp, lsr #3
          for(j=0; j < 8; j++)
 8002d6e:	9b01      	ldr	r3, [sp, #4]
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 8002d70:	fa1f fb8b 	uxth.w	fp, fp
          *(__IO uint16_t *)pOutAddr =
 8002d74:	f826 bb02 	strh.w	fp, [r6], #2
          for(j=0; j < 8; j++)
 8002d78:	429e      	cmp	r6, r3
 8002d7a:	d1db      	bne.n	8002d34 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x58>
            pChrom++;
 8002d7c:	f10e 0e08 	add.w	lr, lr, #8
        refline += JPEG_ConvertorParams.ScaledWidth;
 8002d80:	4451      	add	r1, sl
    for(i= 0; i <  8; i++)
 8002d82:	f1bc 0c01 	subs.w	ip, ip, #1
 8002d86:	d1cc      	bne.n	8002d22 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x46>
    pInBuffer +=  CMYK_444_BLOCK_SIZE;
 8002d88:	f505 7580 	add.w	r5, r5, #256	; 0x100
 8002d8c:	e7b5      	b.n	8002cfa <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x1e>
 8002d8e:	bf00      	nop
 8002d90:	20010b74 	.word	0x20010b74

08002d94 <TGFX_JPEG_GetDecodeColorConvertFunc>:
  *                      depending of the jpeg image color space and chroma sampling info.
  * @param ImageNbMCUs : pointer to uint32_t, used to retrive the total number of MCU blocks in the jpeg image.
  * @retval HAL status : HAL_OK or HAL_ERROR.
  */
HAL_StatusTypeDef TGFX_JPEG_GetDecodeColorConvertFunc(JPEG_ConfTypeDef *pJpegInfo, JPEG_YCbCrToRGB_Convert_Function *pFunction, uint32_t *ImageNbMCUs)
{
 8002d94:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t hMCU, vMCU;

  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
 8002d96:	68c4      	ldr	r4, [r0, #12]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
 8002d98:	6885      	ldr	r5, [r0, #8]
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 8002d9a:	6806      	ldr	r6, [r0, #0]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 8002d9c:	fb05 f704 	mul.w	r7, r5, r4
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 8002da0:	4b28      	ldr	r3, [pc, #160]	; (8002e44 <TGFX_JPEG_GetDecodeColorConvertFunc+0xb0>)

  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;
 8002da2:	6840      	ldr	r0, [r0, #4]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
 8002da4:	2e10      	cmp	r6, #16
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 8002da6:	ea4f 0747 	mov.w	r7, r7, lsl #1
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 8002daa:	601e      	str	r6, [r3, #0]
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
 8002dac:	609c      	str	r4, [r3, #8]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
 8002dae:	60dd      	str	r5, [r3, #12]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 8002db0:	611f      	str	r7, [r3, #16]
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;
 8002db2:	6058      	str	r0, [r3, #4]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
 8002db4:	d13c      	bne.n	8002e30 <TGFX_JPEG_GetDecodeColorConvertFunc+0x9c>
  {
    if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
 8002db6:	2801      	cmp	r0, #1
 8002db8:	d122      	bne.n	8002e00 <TGFX_JPEG_GetDecodeColorConvertFunc+0x6c>
    {
      *pFunction = TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
 8002dba:	4823      	ldr	r0, [pc, #140]	; (8002e48 <TGFX_JPEG_GetDecodeColorConvertFunc+0xb4>)
 8002dbc:	6008      	str	r0, [r1, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;

      if(JPEG_ConvertorParams.LineOffset != 0)
 8002dbe:	f014 010f 	ands.w	r1, r4, #15
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
 8002dc2:	bf18      	it	ne
 8002dc4:	f1c1 0110 	rsbne	r1, r1, #16
 8002dc8:	6159      	str	r1, [r3, #20]
      }
      JPEG_ConvertorParams.H_factor = 16;
 8002dca:	2110      	movs	r1, #16
 8002dcc:	61d9      	str	r1, [r3, #28]
      if(JPEG_ConvertorParams.LineOffset != 0)
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
      }
      JPEG_ConvertorParams.H_factor = 16;
      JPEG_ConvertorParams.V_factor  = 8;
 8002dce:	6219      	str	r1, [r3, #32]
  else
  {
    return HAL_ERROR; /* Color space Not supported*/
  }

  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
 8002dd0:	6959      	ldr	r1, [r3, #20]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;

  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
 8002dd2:	69d8      	ldr	r0, [r3, #28]
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
 8002dd4:	4421      	add	r1, r4
 8002dd6:	6259      	str	r1, [r3, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
 8002dd8:	0061      	lsls	r1, r4, #1
 8002dda:	6299      	str	r1, [r3, #40]	; 0x28
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
 8002ddc:	fbb4 f1f0 	udiv	r1, r4, r0
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
 8002de0:	fb00 4411 	mls	r4, r0, r1, r4
 8002de4:	b104      	cbz	r4, 8002de8 <TGFX_JPEG_GetDecodeColorConvertFunc+0x54>
  {
    hMCU++; /*+1 for horizenatl incomplete MCU */
 8002de6:	3101      	adds	r1, #1
  }

  vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
 8002de8:	6a1c      	ldr	r4, [r3, #32]
 8002dea:	fbb5 f0f4 	udiv	r0, r5, r4
  if((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
 8002dee:	fb04 5510 	mls	r5, r4, r0, r5
 8002df2:	b105      	cbz	r5, 8002df6 <TGFX_JPEG_GetDecodeColorConvertFunc+0x62>
  {
    vMCU++; /*+1 for vertical incomplete MCU */
 8002df4:	3001      	adds	r0, #1
  }
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
 8002df6:	4341      	muls	r1, r0
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;

  return HAL_OK;
 8002df8:	2000      	movs	r0, #0
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
 8002dfa:	62d9      	str	r1, [r3, #44]	; 0x2c
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
 8002dfc:	6011      	str	r1, [r2, #0]
}
 8002dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
 8002e00:	2802      	cmp	r0, #2
 8002e02:	d10b      	bne.n	8002e1c <TGFX_JPEG_GetDecodeColorConvertFunc+0x88>
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
 8002e04:	4811      	ldr	r0, [pc, #68]	; (8002e4c <TGFX_JPEG_GetDecodeColorConvertFunc+0xb8>)
 8002e06:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
 8002e08:	f014 010f 	ands.w	r1, r4, #15
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
 8002e0c:	bf18      	it	ne
 8002e0e:	f1c1 0110 	rsbne	r1, r1, #16
 8002e12:	6159      	str	r1, [r3, #20]
      JPEG_ConvertorParams.H_factor = 16;
 8002e14:	2110      	movs	r1, #16
 8002e16:	61d9      	str	r1, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 8;
 8002e18:	2108      	movs	r1, #8
 8002e1a:	e7d8      	b.n	8002dce <TGFX_JPEG_GetDecodeColorConvertFunc+0x3a>
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
 8002e1c:	480c      	ldr	r0, [pc, #48]	; (8002e50 <TGFX_JPEG_GetDecodeColorConvertFunc+0xbc>)
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
 8002e1e:	6008      	str	r0, [r1, #0]
    if(JPEG_ConvertorParams.LineOffset != 0)
 8002e20:	f014 0107 	ands.w	r1, r4, #7
 8002e24:	d001      	beq.n	8002e2a <TGFX_JPEG_GetDecodeColorConvertFunc+0x96>
        JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;
 8002e26:	f1c1 0108 	rsb	r1, r1, #8
 8002e2a:	6159      	str	r1, [r3, #20]
      JPEG_ConvertorParams.H_factor = 8;
 8002e2c:	2108      	movs	r1, #8
 8002e2e:	e7cd      	b.n	8002dcc <TGFX_JPEG_GetDecodeColorConvertFunc+0x38>
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
 8002e30:	b90e      	cbnz	r6, 8002e36 <TGFX_JPEG_GetDecodeColorConvertFunc+0xa2>
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
 8002e32:	4808      	ldr	r0, [pc, #32]	; (8002e54 <TGFX_JPEG_GetDecodeColorConvertFunc+0xc0>)
 8002e34:	e7f3      	b.n	8002e1e <TGFX_JPEG_GetDecodeColorConvertFunc+0x8a>
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
 8002e36:	2e30      	cmp	r6, #48	; 0x30
 8002e38:	d101      	bne.n	8002e3e <TGFX_JPEG_GetDecodeColorConvertFunc+0xaa>
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
 8002e3a:	4807      	ldr	r0, [pc, #28]	; (8002e58 <TGFX_JPEG_GetDecodeColorConvertFunc+0xc4>)
 8002e3c:	e7ef      	b.n	8002e1e <TGFX_JPEG_GetDecodeColorConvertFunc+0x8a>
    return HAL_ERROR; /* Color space Not supported*/
 8002e3e:	2001      	movs	r0, #1
 8002e40:	e7dd      	b.n	8002dfe <TGFX_JPEG_GetDecodeColorConvertFunc+0x6a>
 8002e42:	bf00      	nop
 8002e44:	20010b74 	.word	0x20010b74
 8002e48:	08002815 	.word	0x08002815
 8002e4c:	080029fd 	.word	0x080029fd
 8002e50:	08002b5d 	.word	0x08002b5d
 8002e54:	08002c5d 	.word	0x08002c5d
 8002e58:	08002cdd 	.word	0x08002cdd

08002e5c <TGFX_JPEG_InitColorTables>:
  * @brief  Initializes the colors conversion Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_InitColorTables(void)
{
 8002e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e60:	f8df c250 	ldr.w	ip, [pc, #592]	; 80030b4 <TGFX_JPEG_InitColorTables+0x258>
  */
void TGFX_JPEG_InitPreProcColorTables(void)
{
  int32_t i;

  for (i = 0; i <= 255; i++)
 8002e64:	2300      	movs	r3, #0
 8002e66:	f8df 8250 	ldr.w	r8, [pc, #592]	; 80030b8 <TGFX_JPEG_InitColorTables+0x25c>
  {
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002e6a:	f644 4b8b 	movw	fp, #19595	; 0x4c8b
 8002e6e:	4f7e      	ldr	r7, [pc, #504]	; (8003068 <TGFX_JPEG_InitColorTables+0x20c>)
    GREEN_Y_LUT[i]         = ((  ((int32_t) ((0.587 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002e70:	f249 6a45 	movw	sl, #38469	; 0x9645
 8002e74:	4e7d      	ldr	r6, [pc, #500]	; (800306c <TGFX_JPEG_InitColorTables+0x210>)
    BLUE_Y_LUT[i]          = ((  ((int32_t) ((0.114 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002e76:	f641 592f 	movw	r9, #7471	; 0x1d2f
 8002e7a:	4d7d      	ldr	r5, [pc, #500]	; (8003070 <TGFX_JPEG_InitColorTables+0x214>)
 8002e7c:	4c7d      	ldr	r4, [pc, #500]	; (8003074 <TGFX_JPEG_InitColorTables+0x218>)
 8002e7e:	487e      	ldr	r0, [pc, #504]	; (8003078 <TGFX_JPEG_InitColorTables+0x21c>)
 8002e80:	497e      	ldr	r1, [pc, #504]	; (800307c <TGFX_JPEG_InitColorTables+0x220>)
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002e82:	fb0b f203 	mul.w	r2, fp, r3
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;

    /* BLUE_CB_LUT and RED_CR_LUT are identical */
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;

    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002e86:	f64e 3e2f 	movw	lr, #60207	; 0xeb2f
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002e8a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8002e8e:	1412      	asrs	r2, r2, #16
 8002e90:	f848 2b04 	str.w	r2, [r8], #4
    GREEN_Y_LUT[i]         = ((  ((int32_t) ((0.587 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002e94:	fb0a f203 	mul.w	r2, sl, r3
 8002e98:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8002e9c:	1412      	asrs	r2, r2, #16
 8002e9e:	f84c 2b04 	str.w	r2, [ip], #4
    BLUE_Y_LUT[i]          = ((  ((int32_t) ((0.114 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002ea2:	fb09 f203 	mul.w	r2, r9, r3
 8002ea6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8002eaa:	1412      	asrs	r2, r2, #16
 8002eac:	f847 2b04 	str.w	r2, [r7], #4
    RED_CB_LUT[i]          = (((-((int32_t) ((0.1687 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002eb0:	4a73      	ldr	r2, [pc, #460]	; (8003080 <TGFX_JPEG_InitColorTables+0x224>)
 8002eb2:	435a      	muls	r2, r3
 8002eb4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8002eb8:	1412      	asrs	r2, r2, #16
 8002eba:	f846 2b04 	str.w	r2, [r6], #4
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002ebe:	4a71      	ldr	r2, [pc, #452]	; (8003084 <TGFX_JPEG_InitColorTables+0x228>)
 8002ec0:	435a      	muls	r2, r3
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002ec2:	3301      	adds	r3, #1
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002ec4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
  for (i = 0; i <= 255; i++)
 8002ec8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002ecc:	ea4f 4222 	mov.w	r2, r2, asr #16
 8002ed0:	f845 2b04 	str.w	r2, [r5], #4
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002ed4:	f343 024f 	sbfx	r2, r3, #1, #16
 8002ed8:	f844 2b04 	str.w	r2, [r4], #4
    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002edc:	4a6a      	ldr	r2, [pc, #424]	; (8003088 <TGFX_JPEG_InitColorTables+0x22c>)
 8002ede:	fb02 e203 	mla	r2, r2, r3, lr
    BLUE_CR_LUT[i]         = (((-((int32_t) ((0.0813 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002ee2:	f249 4ed0 	movw	lr, #38096	; 0x94d0
    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002ee6:	ea4f 4222 	mov.w	r2, r2, asr #16
 8002eea:	f840 2b04 	str.w	r2, [r0], #4
    BLUE_CR_LUT[i]         = (((-((int32_t) ((0.0813 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002eee:	4a67      	ldr	r2, [pc, #412]	; (800308c <TGFX_JPEG_InitColorTables+0x230>)
 8002ef0:	fb02 e203 	mla	r2, r2, r3, lr
 8002ef4:	ea4f 4222 	mov.w	r2, r2, asr #16
 8002ef8:	f841 2b04 	str.w	r2, [r1], #4
  for (i = 0; i <= 255; i++)
 8002efc:	d1c1      	bne.n	8002e82 <TGFX_JPEG_InitColorTables+0x26>
 8002efe:	4c64      	ldr	r4, [pc, #400]	; (8003090 <TGFX_JPEG_InitColorTables+0x234>)
void TGFX_JPEG_Init_MCU_LUT(void)
{
  uint32_t i, j, offset;

  /*Y LUT */
  for(i = 0; i < 16; i++)
 8002f00:	2200      	movs	r2, #0
  {
    for(j = 0; j < 16; j++)
 8002f02:	00d3      	lsls	r3, r2, #3
  for (i = 0; i <= 255; i++)
 8002f04:	4625      	mov	r5, r4
    for(j = 0; j < 16; j++)
 8002f06:	2100      	movs	r1, #0
    {
      offset =  j + (i*8);
      if((j>=8) && (i>=8)) offset+= 120;
 8002f08:	2907      	cmp	r1, #7
 8002f0a:	f240 80a6 	bls.w	800305a <TGFX_JPEG_InitColorTables+0x1fe>
 8002f0e:	2a07      	cmp	r2, #7
 8002f10:	bf8c      	ite	hi
 8002f12:	f103 0078 	addhi.w	r0, r3, #120	; 0x78
      else  if((j>=8) && (i<8)) offset+= 56;
 8002f16:	f103 0038 	addls.w	r0, r3, #56	; 0x38
    for(j = 0; j < 16; j++)
 8002f1a:	3101      	adds	r1, #1
 8002f1c:	3301      	adds	r3, #1
      else  if((j<8) && (i>=8)) offset+= 64;

      JPEG_Y_MCU_LUT[i*16 + j] = offset;
 8002f1e:	f825 0b02 	strh.w	r0, [r5], #2
    for(j = 0; j < 16; j++)
 8002f22:	2910      	cmp	r1, #16
 8002f24:	d1f0      	bne.n	8002f08 <TGFX_JPEG_InitColorTables+0xac>
  for(i = 0; i < 16; i++)
 8002f26:	3201      	adds	r2, #1
 8002f28:	3420      	adds	r4, #32
 8002f2a:	2a10      	cmp	r2, #16
 8002f2c:	d1e9      	bne.n	8002f02 <TGFX_JPEG_InitColorTables+0xa6>
    }
  }

  /*Cb Cr K LUT*/
  for(i = 0; i < 16; i++)
 8002f2e:	2000      	movs	r0, #0
      offset = i*16 + j;

      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;

      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
 8002f30:	f8df e188 	ldr.w	lr, [pc, #392]	; 80030bc <TGFX_JPEG_InitColorTables+0x260>
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
 8002f34:	f8df 8188 	ldr.w	r8, [pc, #392]	; 80030c0 <TGFX_JPEG_InitColorTables+0x264>

      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
 8002f38:	f8df 9188 	ldr.w	r9, [pc, #392]	; 80030c4 <TGFX_JPEG_InitColorTables+0x268>
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8002f3c:	f8df a188 	ldr.w	sl, [pc, #392]	; 80030c8 <TGFX_JPEG_InitColorTables+0x26c>
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8002f40:	0844      	lsrs	r4, r0, #1
    for(j = 0; j < 16; j++)
 8002f42:	2500      	movs	r5, #0
 8002f44:	00c3      	lsls	r3, r0, #3
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8002f46:	00e4      	lsls	r4, r4, #3
 8002f48:	fa1f fc83 	uxth.w	ip, r3
 8002f4c:	b2a4      	uxth	r4, r4
 8002f4e:	0142      	lsls	r2, r0, #5
 8002f50:	f3c5 034f 	ubfx	r3, r5, #1, #16
 8002f54:	4f4f      	ldr	r7, [pc, #316]	; (8003094 <TGFX_JPEG_InitColorTables+0x238>)
    for(j = 0; j < 16; j++)
 8002f56:	3501      	adds	r5, #1
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8002f58:	1919      	adds	r1, r3, r4
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
 8002f5a:	4463      	add	r3, ip
    for(j = 0; j < 16; j++)
 8002f5c:	2d10      	cmp	r5, #16
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8002f5e:	b289      	uxth	r1, r1
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
 8002f60:	b29b      	uxth	r3, r3
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8002f62:	f501 7680 	add.w	r6, r1, #256	; 0x100
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
 8002f66:	f103 0b80 	add.w	fp, r3, #128	; 0x80
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
 8002f6a:	f103 03c0 	add.w	r3, r3, #192	; 0xc0
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8002f6e:	b2b6      	uxth	r6, r6
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
 8002f70:	f822 3008 	strh.w	r3, [r2, r8]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8002f74:	53d6      	strh	r6, [r2, r7]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
 8002f76:	4f48      	ldr	r7, [pc, #288]	; (8003098 <TGFX_JPEG_InitColorTables+0x23c>)
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8002f78:	f822 600a 	strh.w	r6, [r2, sl]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
 8002f7c:	f822 b007 	strh.w	fp, [r2, r7]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
 8002f80:	f501 7ba0 	add.w	fp, r1, #320	; 0x140
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
 8002f84:	f501 71c0 	add.w	r1, r1, #384	; 0x180
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
 8002f88:	f822 b00e 	strh.w	fp, [r2, lr]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
 8002f8c:	f822 1009 	strh.w	r1, [r2, r9]
    for(j = 0; j < 16; j++)
 8002f90:	f102 0202 	add.w	r2, r2, #2
 8002f94:	d1dc      	bne.n	8002f50 <TGFX_JPEG_InitColorTables+0xf4>
  for(i = 0; i < 16; i++)
 8002f96:	3001      	adds	r0, #1
 8002f98:	2810      	cmp	r0, #16
 8002f9a:	d1d1      	bne.n	8002f40 <TGFX_JPEG_InitColorTables+0xe4>
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	f8df 912c 	ldr.w	r9, [pc, #300]	; 80030cc <TGFX_JPEG_InitColorTables+0x270>
 8002fa2:	f8df 812c 	ldr.w	r8, [pc, #300]	; 80030d0 <TGFX_JPEG_InitColorTables+0x274>
 8002fa6:	4608      	mov	r0, r1
 8002fa8:	f8df e128 	ldr.w	lr, [pc, #296]	; 80030d4 <TGFX_JPEG_InitColorTables+0x278>
 8002fac:	f8df c128 	ldr.w	ip, [pc, #296]	; 80030d8 <TGFX_JPEG_InitColorTables+0x27c>
 8002fb0:	b283      	uxth	r3, r0
 8002fb2:	eb09 0701 	add.w	r7, r9, r1
 8002fb6:	eb08 0601 	add.w	r6, r8, r1
 8002fba:	eb0e 0501 	add.w	r5, lr, r1
    }
  }

  for(i = 0; i < 8; i++)
  {
    for(j = 0; j < 8; j++)
 8002fbe:	f103 0208 	add.w	r2, r3, #8
 8002fc2:	eb0c 0401 	add.w	r4, ip, r1
 8002fc6:	b292      	uxth	r2, r2
    {
      offset = i*8 + j;

      JPEG_Y_MCU_444_LUT[offset]  = offset;
      JPEG_Cb_MCU_444_LUT[offset] = offset + 64 ;
 8002fc8:	f103 0a40 	add.w	sl, r3, #64	; 0x40
      JPEG_Y_MCU_444_LUT[offset]  = offset;
 8002fcc:	f827 3b02 	strh.w	r3, [r7], #2
      JPEG_Cb_MCU_444_LUT[offset] = offset + 64 ;
 8002fd0:	f826 ab02 	strh.w	sl, [r6], #2
      JPEG_Cr_MCU_444_LUT[offset] = offset + 128 ;
 8002fd4:	f103 0a80 	add.w	sl, r3, #128	; 0x80
 8002fd8:	f825 ab02 	strh.w	sl, [r5], #2
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
 8002fdc:	f103 0ac0 	add.w	sl, r3, #192	; 0xc0
    for(j = 0; j < 8; j++)
 8002fe0:	3301      	adds	r3, #1
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
 8002fe2:	f824 ab02 	strh.w	sl, [r4], #2
    for(j = 0; j < 8; j++)
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d1ed      	bne.n	8002fc8 <TGFX_JPEG_InitColorTables+0x16c>
  for(i = 0; i < 8; i++)
 8002fec:	3008      	adds	r0, #8
 8002fee:	3110      	adds	r1, #16
 8002ff0:	2840      	cmp	r0, #64	; 0x40
 8002ff2:	d1dd      	bne.n	8002fb0 <TGFX_JPEG_InitColorTables+0x154>
 8002ff4:	4d29      	ldr	r5, [pc, #164]	; (800309c <TGFX_JPEG_InitColorTables+0x240>)
  for (i = 0; i <= 255; i++)
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	4c29      	ldr	r4, [pc, #164]	; (80030a0 <TGFX_JPEG_InitColorTables+0x244>)
 8002ffa:	482a      	ldr	r0, [pc, #168]	; (80030a4 <TGFX_JPEG_InitColorTables+0x248>)
 8002ffc:	492a      	ldr	r1, [pc, #168]	; (80030a8 <TGFX_JPEG_InitColorTables+0x24c>)
    CR_RED_LUT[i] = ( (((int32_t) ((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 8002ffe:	f8df e0dc 	ldr.w	lr, [pc, #220]	; 80030dc <TGFX_JPEG_InitColorTables+0x280>
    CB_BLUE_LUT[i] = ( (((int32_t) ((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 8003002:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 80030e0 <TGFX_JPEG_InitColorTables+0x284>
    CR_GREEN_LUT[i] = (-((int32_t) ((0.71414 / 2) * (1L << 16)))) * index;
 8003006:	4f29      	ldr	r7, [pc, #164]	; (80030ac <TGFX_JPEG_InitColorTables+0x250>)
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
 8003008:	4e29      	ldr	r6, [pc, #164]	; (80030b0 <TGFX_JPEG_InitColorTables+0x254>)
    CR_RED_LUT[i] = ( (((int32_t) ((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 800300a:	fb0e f203 	mul.w	r2, lr, r3
 800300e:	f5a2 0232 	sub.w	r2, r2, #11665408	; 0xb20000
 8003012:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 8003016:	1412      	asrs	r2, r2, #16
 8003018:	f845 2b04 	str.w	r2, [r5], #4
    CB_BLUE_LUT[i] = ( (((int32_t) ((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 800301c:	fb0c f203 	mul.w	r2, ip, r3
 8003020:	f5a2 0262 	sub.w	r2, r2, #14811136	; 0xe20000
 8003024:	f5a2 42a0 	sub.w	r2, r2, #20480	; 0x5000
 8003028:	1412      	asrs	r2, r2, #16
 800302a:	f844 2b04 	str.w	r2, [r4], #4
    CR_GREEN_LUT[i] = (-((int32_t) ((0.71414 / 2) * (1L << 16)))) * index;
 800302e:	fb07 f203 	mul.w	r2, r7, r3
 8003032:	f502 02b6 	add.w	r2, r2, #5963776	; 0x5b0000
 8003036:	f502 42d0 	add.w	r2, r2, #26624	; 0x6800
 800303a:	f840 2b04 	str.w	r2, [r0], #4
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
 800303e:	fb06 f203 	mul.w	r2, r6, r3
  for (i = 0; i <= 255; i++)
 8003042:	3301      	adds	r3, #1
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
 8003044:	f502 1230 	add.w	r2, r2, #2883584	; 0x2c0000
  for (i = 0; i <= 255; i++)
 8003048:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
 800304c:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8003050:	f841 2b04 	str.w	r2, [r1], #4
  for (i = 0; i <= 255; i++)
 8003054:	d1d9      	bne.n	800300a <TGFX_JPEG_InitColorTables+0x1ae>
}
 8003056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else  if((j<8) && (i>=8)) offset+= 64;
 800305a:	2a07      	cmp	r2, #7
 800305c:	bf8c      	ite	hi
 800305e:	f103 0040 	addhi.w	r0, r3, #64	; 0x40
      offset =  j + (i*8);
 8003062:	4618      	movls	r0, r3
 8003064:	e759      	b.n	8002f1a <TGFX_JPEG_InitColorTables+0xbe>
 8003066:	bf00      	nop
 8003068:	2000e6f4 	.word	0x2000e6f4
 800306c:	20011734 	.word	0x20011734
 8003070:	2000faf4 	.word	0x2000faf4
 8003074:	2000def4 	.word	0x2000def4
 8003078:	2000fef4 	.word	0x2000fef4
 800307c:	2000e2f4 	.word	0x2000e2f4
 8003080:	ffffd4d1 	.word	0xffffd4d1
 8003084:	ffffab30 	.word	0xffffab30
 8003088:	ffff94d1 	.word	0xffff94d1
 800308c:	ffffeb30 	.word	0xffffeb30
 8003090:	20011534 	.word	0x20011534
 8003094:	200106f4 	.word	0x200106f4
 8003098:	200108f4 	.word	0x200108f4
 800309c:	2000f6f4 	.word	0x2000f6f4
 80030a0:	2000eaf4 	.word	0x2000eaf4
 80030a4:	2000f2f4 	.word	0x2000f2f4
 80030a8:	2000eef4 	.word	0x2000eef4
 80030ac:	ffff4930 	.word	0xffff4930
 80030b0:	ffffa7e8 	.word	0xffffa7e8
 80030b4:	200102f4 	.word	0x200102f4
 80030b8:	20011b34 	.word	0x20011b34
 80030bc:	20010bb4 	.word	0x20010bb4
 80030c0:	20010db4 	.word	0x20010db4
 80030c4:	20011034 	.word	0x20011034
 80030c8:	20011234 	.word	0x20011234
 80030cc:	200114b4 	.word	0x200114b4
 80030d0:	20010af4 	.word	0x20010af4
 80030d4:	20010fb4 	.word	0x20010fb4
 80030d8:	20011434 	.word	0x20011434
 80030dc:	000166e8 	.word	0x000166e8
 80030e0:	0001c5a0 	.word	0x0001c5a0

080030e4 <null_ptr_check>:
 */
static int8_t null_ptr_check(const struct bme680_dev *dev)
{
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 80030e4:	b148      	cbz	r0, 80030fa <null_ptr_check+0x16>
 80030e6:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80030e8:	b13b      	cbz	r3, 80030fa <null_ptr_check+0x16>
 80030ea:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80030ec:	b12b      	cbz	r3, 80030fa <null_ptr_check+0x16>
 80030ee:	6d00      	ldr	r0, [r0, #80]	; 0x50
 80030f0:	fab0 f080 	clz	r0, r0
 80030f4:	0940      	lsrs	r0, r0, #5
 80030f6:	4240      	negs	r0, r0
 80030f8:	4770      	bx	lr
		/* Device structure pointer is not valid */
		rslt = BME680_E_NULL_PTR;
 80030fa:	f04f 30ff 	mov.w	r0, #4294967295
		/* Device structure is fine */
		rslt = BME680_OK;
	}

	return rslt;
}
 80030fe:	4770      	bx	lr

08003100 <set_mem_page>:
{
 8003100:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003102:	4602      	mov	r2, r0
	rslt = null_ptr_check(dev);
 8003104:	4608      	mov	r0, r1
 8003106:	f7ff ffed 	bl	80030e4 <null_ptr_check>
{
 800310a:	460c      	mov	r4, r1
	if (rslt == BME680_OK) {
 800310c:	4605      	mov	r5, r0
 800310e:	bb40      	cbnz	r0, 8003162 <set_mem_page+0x62>
			mem_page = BME680_MEM_PAGE0;
 8003110:	f012 0f80 	tst.w	r2, #128	; 0x80
		if (mem_page != dev->mem_page) {
 8003114:	78ca      	ldrb	r2, [r1, #3]
			mem_page = BME680_MEM_PAGE0;
 8003116:	bf14      	ite	ne
 8003118:	2300      	movne	r3, #0
 800311a:	2310      	moveq	r3, #16
		if (mem_page != dev->mem_page) {
 800311c:	429a      	cmp	r2, r3
 800311e:	d020      	beq.n	8003162 <set_mem_page+0x62>
			dev->mem_page = mem_page;
 8003120:	70cb      	strb	r3, [r1, #3]
			dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 8003122:	f10d 0207 	add.w	r2, sp, #7
 8003126:	6c8e      	ldr	r6, [r1, #72]	; 0x48
 8003128:	2301      	movs	r3, #1
 800312a:	21f3      	movs	r1, #243	; 0xf3
 800312c:	7860      	ldrb	r0, [r4, #1]
 800312e:	47b0      	blx	r6
 8003130:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
			if (dev->com_rslt != 0)
 8003134:	b998      	cbnz	r0, 800315e <set_mem_page+0x5e>
				reg = reg & (~BME680_MEM_PAGE_MSK);
 8003136:	f89d 2007 	ldrb.w	r2, [sp, #7]
				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 800313a:	2173      	movs	r1, #115	; 0x73
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 800313c:	78e3      	ldrb	r3, [r4, #3]
				reg = reg & (~BME680_MEM_PAGE_MSK);
 800313e:	f022 0210 	bic.w	r2, r2, #16
				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 8003142:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 8003144:	f003 0310 	and.w	r3, r3, #16
				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 8003148:	7860      	ldrb	r0, [r4, #1]
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 800314a:	4313      	orrs	r3, r2
				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 800314c:	f10d 0207 	add.w	r2, sp, #7
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 8003150:	f88d 3007 	strb.w	r3, [sp, #7]
				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 8003154:	2301      	movs	r3, #1
 8003156:	47b0      	blx	r6
 8003158:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
				if (dev->com_rslt != 0)
 800315c:	b108      	cbz	r0, 8003162 <set_mem_page+0x62>
					rslt = BME680_E_COM_FAIL;
 800315e:	f06f 0501 	mvn.w	r5, #1
}
 8003162:	4628      	mov	r0, r5
 8003164:	b002      	add	sp, #8
 8003166:	bd70      	pop	{r4, r5, r6, pc}

08003168 <get_mem_page>:
{
 8003168:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800316a:	4604      	mov	r4, r0
	rslt = null_ptr_check(dev);
 800316c:	f7ff ffba 	bl	80030e4 <null_ptr_check>
	if (rslt == BME680_OK) {
 8003170:	b970      	cbnz	r0, 8003190 <get_mem_page+0x28>
		dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 8003172:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8003174:	2301      	movs	r3, #1
 8003176:	f10d 0207 	add.w	r2, sp, #7
 800317a:	21f3      	movs	r1, #243	; 0xf3
 800317c:	7860      	ldrb	r0, [r4, #1]
 800317e:	47a8      	blx	r5
 8003180:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
		if (dev->com_rslt != 0)
 8003184:	b930      	cbnz	r0, 8003194 <get_mem_page+0x2c>
			dev->mem_page = reg & BME680_MEM_PAGE_MSK;
 8003186:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800318a:	f003 0310 	and.w	r3, r3, #16
 800318e:	70e3      	strb	r3, [r4, #3]
}
 8003190:	b003      	add	sp, #12
 8003192:	bd30      	pop	{r4, r5, pc}
			rslt = BME680_E_COM_FAIL;
 8003194:	f06f 0001 	mvn.w	r0, #1
	return rslt;
 8003198:	e7fa      	b.n	8003190 <get_mem_page+0x28>

0800319a <boundary_check.constprop.0>:
		if (*value > max) {
 800319a:	7803      	ldrb	r3, [r0, #0]
 800319c:	428b      	cmp	r3, r1
			*value = max;
 800319e:	bf88      	it	hi
 80031a0:	7001      	strbhi	r1, [r0, #0]
}
 80031a2:	f04f 0000 	mov.w	r0, #0
			dev->info_msg |= BME680_I_MAX_CORRECTION;
 80031a6:	bf82      	ittt	hi
 80031a8:	f892 3046 	ldrbhi.w	r3, [r2, #70]	; 0x46
 80031ac:	f043 0302 	orrhi.w	r3, r3, #2
 80031b0:	f882 3046 	strbhi.w	r3, [r2, #70]	; 0x46
}
 80031b4:	4770      	bx	lr

080031b6 <bme680_get_regs>:
{
 80031b6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80031ba:	4606      	mov	r6, r0
	rslt = null_ptr_check(dev);
 80031bc:	4618      	mov	r0, r3
{
 80031be:	461d      	mov	r5, r3
 80031c0:	4688      	mov	r8, r1
	rslt = null_ptr_check(dev);
 80031c2:	f7ff ff8f 	bl	80030e4 <null_ptr_check>
{
 80031c6:	4691      	mov	r9, r2
	if (rslt == BME680_OK) {
 80031c8:	4604      	mov	r4, r0
 80031ca:	b9a8      	cbnz	r0, 80031f8 <bme680_get_regs+0x42>
		if (dev->intf == BME680_SPI_INTF) {
 80031cc:	78ab      	ldrb	r3, [r5, #2]
 80031ce:	b93b      	cbnz	r3, 80031e0 <bme680_get_regs+0x2a>
			rslt = set_mem_page(reg_addr, dev);
 80031d0:	4629      	mov	r1, r5
 80031d2:	4630      	mov	r0, r6
 80031d4:	f7ff ff94 	bl	8003100 <set_mem_page>
			if (rslt == BME680_OK)
 80031d8:	4604      	mov	r4, r0
 80031da:	b908      	cbnz	r0, 80031e0 <bme680_get_regs+0x2a>
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
 80031dc:	f046 0680 	orr.w	r6, r6, #128	; 0x80
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 80031e0:	6caf      	ldr	r7, [r5, #72]	; 0x48
 80031e2:	464b      	mov	r3, r9
 80031e4:	4642      	mov	r2, r8
 80031e6:	4631      	mov	r1, r6
 80031e8:	7868      	ldrb	r0, [r5, #1]
 80031ea:	47b8      	blx	r7
			rslt = BME680_E_COM_FAIL;
 80031ec:	2800      	cmp	r0, #0
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 80031ee:	f885 0054 	strb.w	r0, [r5, #84]	; 0x54
			rslt = BME680_E_COM_FAIL;
 80031f2:	bf18      	it	ne
 80031f4:	f06f 0401 	mvnne.w	r4, #1
}
 80031f8:	4620      	mov	r0, r4
 80031fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080031fe <bme680_set_regs>:
{
 80031fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003202:	b08a      	sub	sp, #40	; 0x28
 8003204:	461c      	mov	r4, r3
 8003206:	460f      	mov	r7, r1
	uint8_t tmp_buff[BME680_TMP_BUFFER_LENGTH] = { 0 };
 8003208:	2100      	movs	r1, #0
{
 800320a:	4606      	mov	r6, r0
 800320c:	4690      	mov	r8, r2
	uint8_t tmp_buff[BME680_TMP_BUFFER_LENGTH] = { 0 };
 800320e:	a801      	add	r0, sp, #4
 8003210:	2224      	movs	r2, #36	; 0x24
 8003212:	9100      	str	r1, [sp, #0]
 8003214:	f022 fe82 	bl	8025f1c <memset>
	rslt = null_ptr_check(dev);
 8003218:	4620      	mov	r0, r4
 800321a:	f7ff ff63 	bl	80030e4 <null_ptr_check>
	if (rslt == BME680_OK) {
 800321e:	b9e8      	cbnz	r0, 800325c <bme680_set_regs+0x5e>
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
 8003220:	f108 33ff 	add.w	r3, r8, #4294967295
 8003224:	2b12      	cmp	r3, #18
 8003226:	d833      	bhi.n	8003290 <bme680_set_regs+0x92>
 8003228:	46ea      	mov	sl, sp
 800322a:	4681      	mov	r9, r0
			for (index = 0; index < len; index++) {
 800322c:	fa1f f888 	uxth.w	r8, r8
 8003230:	fa1f f389 	uxth.w	r3, r9
 8003234:	4543      	cmp	r3, r8
 8003236:	d314      	bcc.n	8003262 <bme680_set_regs+0x64>
			if (rslt == BME680_OK) {
 8003238:	b980      	cbnz	r0, 800325c <bme680_set_regs+0x5e>
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
 800323a:	ea4f 0248 	mov.w	r2, r8, lsl #1
 800323e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8003240:	f89d 1000 	ldrb.w	r1, [sp]
 8003244:	3a01      	subs	r2, #1
 8003246:	7860      	ldrb	r0, [r4, #1]
 8003248:	b293      	uxth	r3, r2
 800324a:	f10d 0201 	add.w	r2, sp, #1
 800324e:	47a8      	blx	r5
					rslt = BME680_E_COM_FAIL;
 8003250:	2800      	cmp	r0, #0
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
 8003252:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
					rslt = BME680_E_COM_FAIL;
 8003256:	bf18      	it	ne
 8003258:	f06f 0001 	mvnne.w	r0, #1
}
 800325c:	b00a      	add	sp, #40	; 0x28
 800325e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (dev->intf == BME680_SPI_INTF) {
 8003262:	78a3      	ldrb	r3, [r4, #2]
					rslt = set_mem_page(reg_addr[index], dev);
 8003264:	f816 5009 	ldrb.w	r5, [r6, r9]
				if (dev->intf == BME680_SPI_INTF) {
 8003268:	b93b      	cbnz	r3, 800327a <bme680_set_regs+0x7c>
					rslt = set_mem_page(reg_addr[index], dev);
 800326a:	4628      	mov	r0, r5
 800326c:	4621      	mov	r1, r4
 800326e:	f7ff ff47 	bl	8003100 <set_mem_page>
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
 8003272:	f816 5009 	ldrb.w	r5, [r6, r9]
 8003276:	f005 057f 	and.w	r5, r5, #127	; 0x7f
				tmp_buff[(2 * index) + 1] = reg_data[index];
 800327a:	f817 3009 	ldrb.w	r3, [r7, r9]
 800327e:	f10a 0a02 	add.w	sl, sl, #2
					tmp_buff[(2 * index)] = reg_addr[index];
 8003282:	f80a 5c02 	strb.w	r5, [sl, #-2]
				tmp_buff[(2 * index) + 1] = reg_data[index];
 8003286:	f109 0901 	add.w	r9, r9, #1
 800328a:	f80a 3c01 	strb.w	r3, [sl, #-1]
			for (index = 0; index < len; index++) {
 800328e:	e7cf      	b.n	8003230 <bme680_set_regs+0x32>
			rslt = BME680_E_INVALID_LENGTH;
 8003290:	f06f 0003 	mvn.w	r0, #3
 8003294:	e7e2      	b.n	800325c <bme680_set_regs+0x5e>

08003296 <bme680_soft_reset>:
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
 8003296:	23e0      	movs	r3, #224	; 0xe0
{
 8003298:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
 800329a:	f88d 3006 	strb.w	r3, [sp, #6]
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
 800329e:	23b6      	movs	r3, #182	; 0xb6
{
 80032a0:	4605      	mov	r5, r0
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
 80032a2:	f88d 3007 	strb.w	r3, [sp, #7]
	rslt = null_ptr_check(dev);
 80032a6:	f7ff ff1d 	bl	80030e4 <null_ptr_check>
	if (rslt == BME680_OK) {
 80032aa:	4604      	mov	r4, r0
 80032ac:	b970      	cbnz	r0, 80032cc <bme680_soft_reset+0x36>
		if (dev->intf == BME680_SPI_INTF)
 80032ae:	78ab      	ldrb	r3, [r5, #2]
 80032b0:	b17b      	cbz	r3, 80032d2 <bme680_soft_reset+0x3c>
			rslt = bme680_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 80032b2:	462b      	mov	r3, r5
 80032b4:	2201      	movs	r2, #1
 80032b6:	f10d 0107 	add.w	r1, sp, #7
 80032ba:	f10d 0006 	add.w	r0, sp, #6
 80032be:	f7ff ff9e 	bl	80031fe <bme680_set_regs>
 80032c2:	4604      	mov	r4, r0
			dev->delay_ms(BME680_RESET_PERIOD);
 80032c4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80032c6:	200a      	movs	r0, #10
 80032c8:	4798      	blx	r3
			if (rslt == BME680_OK) {
 80032ca:	b14c      	cbz	r4, 80032e0 <bme680_soft_reset+0x4a>
}
 80032cc:	4620      	mov	r0, r4
 80032ce:	b003      	add	sp, #12
 80032d0:	bd30      	pop	{r4, r5, pc}
			rslt = get_mem_page(dev);
 80032d2:	4628      	mov	r0, r5
 80032d4:	f7ff ff48 	bl	8003168 <get_mem_page>
		if (rslt == BME680_OK) {
 80032d8:	4604      	mov	r4, r0
 80032da:	2800      	cmp	r0, #0
 80032dc:	d1f6      	bne.n	80032cc <bme680_soft_reset+0x36>
 80032de:	e7e8      	b.n	80032b2 <bme680_soft_reset+0x1c>
				if (dev->intf == BME680_SPI_INTF)
 80032e0:	78ab      	ldrb	r3, [r5, #2]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1f2      	bne.n	80032cc <bme680_soft_reset+0x36>
					rslt = get_mem_page(dev);
 80032e6:	4628      	mov	r0, r5
 80032e8:	f7ff ff3e 	bl	8003168 <get_mem_page>
 80032ec:	4604      	mov	r4, r0
 80032ee:	e7ed      	b.n	80032cc <bme680_soft_reset+0x36>

080032f0 <bme680_init>:
{
 80032f0:	b530      	push	{r4, r5, lr}
 80032f2:	b08d      	sub	sp, #52	; 0x34
 80032f4:	4605      	mov	r5, r0
	rslt = null_ptr_check(dev);
 80032f6:	f7ff fef5 	bl	80030e4 <null_ptr_check>
	if (rslt == BME680_OK) {
 80032fa:	4604      	mov	r4, r0
 80032fc:	2800      	cmp	r0, #0
 80032fe:	f040 80af 	bne.w	8003460 <bme680_init+0x170>
		rslt = bme680_soft_reset(dev);
 8003302:	4628      	mov	r0, r5
 8003304:	f7ff ffc7 	bl	8003296 <bme680_soft_reset>
		if (rslt == BME680_OK) {
 8003308:	4604      	mov	r4, r0
 800330a:	2800      	cmp	r0, #0
 800330c:	f040 80a8 	bne.w	8003460 <bme680_init+0x170>
			rslt = bme680_get_regs(BME680_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 8003310:	462b      	mov	r3, r5
 8003312:	2201      	movs	r2, #1
 8003314:	4629      	mov	r1, r5
 8003316:	20d0      	movs	r0, #208	; 0xd0
 8003318:	f7ff ff4d 	bl	80031b6 <bme680_get_regs>
			if (rslt == BME680_OK) {
 800331c:	4604      	mov	r4, r0
 800331e:	2800      	cmp	r0, #0
 8003320:	f040 809e 	bne.w	8003460 <bme680_init+0x170>
				if (dev->chip_id == BME680_CHIP_ID) {
 8003324:	782b      	ldrb	r3, [r5, #0]
 8003326:	2b61      	cmp	r3, #97	; 0x61
 8003328:	f040 809d 	bne.w	8003466 <bme680_init+0x176>
	uint8_t coeff_array[BME680_COEFF_SIZE] = { 0 };
 800332c:	4601      	mov	r1, r0
 800332e:	9001      	str	r0, [sp, #4]
 8003330:	2225      	movs	r2, #37	; 0x25
 8003332:	a802      	add	r0, sp, #8
 8003334:	f022 fdf2 	bl	8025f1c <memset>
	rslt = null_ptr_check(dev);
 8003338:	4628      	mov	r0, r5
	uint8_t temp_var = 0; /* Temporary variable */
 800333a:	f88d 4003 	strb.w	r4, [sp, #3]
	rslt = null_ptr_check(dev);
 800333e:	f7ff fed1 	bl	80030e4 <null_ptr_check>
	if (rslt == BME680_OK) {
 8003342:	4604      	mov	r4, r0
 8003344:	2800      	cmp	r0, #0
 8003346:	f040 808b 	bne.w	8003460 <bme680_init+0x170>
		rslt = bme680_get_regs(BME680_COEFF_ADDR1, coeff_array, BME680_COEFF_ADDR1_LEN, dev);
 800334a:	462b      	mov	r3, r5
 800334c:	2219      	movs	r2, #25
 800334e:	a901      	add	r1, sp, #4
 8003350:	2089      	movs	r0, #137	; 0x89
 8003352:	f7ff ff30 	bl	80031b6 <bme680_get_regs>
		if (rslt == BME680_OK)
 8003356:	4604      	mov	r4, r0
 8003358:	b938      	cbnz	r0, 800336a <bme680_init+0x7a>
			rslt = bme680_get_regs(BME680_COEFF_ADDR2, &coeff_array[BME680_COEFF_ADDR1_LEN]
 800335a:	462b      	mov	r3, r5
 800335c:	2210      	movs	r2, #16
 800335e:	f10d 011d 	add.w	r1, sp, #29
 8003362:	20e1      	movs	r0, #225	; 0xe1
 8003364:	f7ff ff27 	bl	80031b6 <bme680_get_regs>
 8003368:	4604      	mov	r4, r0
		dev->calib.par_t1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T1_MSB_REG],
 800336a:	f8bd 3025 	ldrh.w	r3, [sp, #37]	; 0x25
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 800336e:	f89d 101f 	ldrb.w	r1, [sp, #31]
		dev->calib.par_t1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T1_MSB_REG],
 8003372:	82eb      	strh	r3, [r5, #22]
		dev->calib.par_t2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T2_MSB_REG],
 8003374:	f8bd 3005 	ldrh.w	r3, [sp, #5]
 8003378:	832b      	strh	r3, [r5, #24]
		dev->calib.par_t3 = (int8_t) (coeff_array[BME680_T3_REG]);
 800337a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800337e:	76ab      	strb	r3, [r5, #26]
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
 8003380:	f8bd 3009 	ldrh.w	r3, [sp, #9]
 8003384:	83ab      	strh	r3, [r5, #28]
		dev->calib.par_p2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P2_MSB_REG],
 8003386:	f8bd 300b 	ldrh.w	r3, [sp, #11]
 800338a:	83eb      	strh	r3, [r5, #30]
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
 800338c:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8003390:	f885 3020 	strb.w	r3, [r5, #32]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
 8003394:	f8bd 300f 	ldrh.w	r3, [sp, #15]
 8003398:	846b      	strh	r3, [r5, #34]	; 0x22
		dev->calib.par_p5 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P5_MSB_REG],
 800339a:	f8bd 3011 	ldrh.w	r3, [sp, #17]
 800339e:	84ab      	strh	r3, [r5, #36]	; 0x24
		dev->calib.par_p6 = (int8_t) (coeff_array[BME680_P6_REG]);
 80033a0:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80033a4:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26
		dev->calib.par_p7 = (int8_t) (coeff_array[BME680_P7_REG]);
 80033a8:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80033ac:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
 80033b0:	f8bd 3017 	ldrh.w	r3, [sp, #23]
 80033b4:	852b      	strh	r3, [r5, #40]	; 0x28
		dev->calib.par_p9 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P9_MSB_REG],
 80033b6:	f8bd 3019 	ldrh.w	r3, [sp, #25]
 80033ba:	856b      	strh	r3, [r5, #42]	; 0x2a
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);
 80033bc:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80033c0:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
 80033c4:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80033c8:	f003 020f 	and.w	r2, r3, #15
			| ((coeff_array[BME680_H2_LSB_REG]) >> BME680_HUM_REG_SHIFT_VAL));
 80033cc:	091b      	lsrs	r3, r3, #4
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
 80033ce:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 80033d2:	812a      	strh	r2, [r5, #8]
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 80033d4:	f89d 201d 	ldrb.w	r2, [sp, #29]
			| ((coeff_array[BME680_H2_LSB_REG]) >> BME680_HUM_REG_SHIFT_VAL));
 80033d8:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 80033dc:	816b      	strh	r3, [r5, #10]
		dev->calib.par_h3 = (int8_t) coeff_array[BME680_H3_REG];
 80033de:	f89d 3020 	ldrb.w	r3, [sp, #32]
 80033e2:	732b      	strb	r3, [r5, #12]
		dev->calib.par_h4 = (int8_t) coeff_array[BME680_H4_REG];
 80033e4:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 80033e8:	736b      	strb	r3, [r5, #13]
		dev->calib.par_h5 = (int8_t) coeff_array[BME680_H5_REG];
 80033ea:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 80033ee:	73ab      	strb	r3, [r5, #14]
		dev->calib.par_h6 = (uint8_t) coeff_array[BME680_H6_REG];
 80033f0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80033f4:	73eb      	strb	r3, [r5, #15]
		dev->calib.par_h7 = (int8_t) coeff_array[BME680_H7_REG];
 80033f6:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80033fa:	742b      	strb	r3, [r5, #16]
		dev->calib.par_gh1 = (int8_t) coeff_array[BME680_GH1_REG];
 80033fc:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
 8003400:	746b      	strb	r3, [r5, #17]
		dev->calib.par_gh2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_GH2_MSB_REG],
 8003402:	f8bd 3027 	ldrh.w	r3, [sp, #39]	; 0x27
 8003406:	826b      	strh	r3, [r5, #18]
		dev->calib.par_gh3 = (int8_t) coeff_array[BME680_GH3_REG];
 8003408:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 800340c:	752b      	strb	r3, [r5, #20]
		if (rslt == BME680_OK) {
 800340e:	bb14      	cbnz	r4, 8003456 <bme680_init+0x166>
			rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_RANGE_ADDR, &temp_var, 1, dev);
 8003410:	462b      	mov	r3, r5
 8003412:	2201      	movs	r2, #1
 8003414:	f10d 0103 	add.w	r1, sp, #3
 8003418:	2002      	movs	r0, #2
 800341a:	f7ff fecc 	bl	80031b6 <bme680_get_regs>
			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
 800341e:	f89d 3003 	ldrb.w	r3, [sp, #3]
			if (rslt == BME680_OK) {
 8003422:	4604      	mov	r4, r0
			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
 8003424:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8003428:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
			if (rslt == BME680_OK) {
 800342c:	b998      	cbnz	r0, 8003456 <bme680_init+0x166>
				rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_VAL_ADDR, &temp_var, 1, dev);
 800342e:	462b      	mov	r3, r5
 8003430:	2201      	movs	r2, #1
 8003432:	f10d 0103 	add.w	r1, sp, #3
 8003436:	f7ff febe 	bl	80031b6 <bme680_get_regs>
				dev->calib.res_heat_val = (int8_t) temp_var;
 800343a:	f89d 3003 	ldrb.w	r3, [sp, #3]
				if (rslt == BME680_OK)
 800343e:	4604      	mov	r4, r0
				dev->calib.res_heat_val = (int8_t) temp_var;
 8003440:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
				if (rslt == BME680_OK)
 8003444:	b938      	cbnz	r0, 8003456 <bme680_init+0x166>
					rslt = bme680_get_regs(BME680_ADDR_RANGE_SW_ERR_ADDR, &temp_var, 1, dev);
 8003446:	462b      	mov	r3, r5
 8003448:	2201      	movs	r2, #1
 800344a:	f10d 0103 	add.w	r1, sp, #3
 800344e:	2004      	movs	r0, #4
 8003450:	f7ff feb1 	bl	80031b6 <bme680_get_regs>
 8003454:	4604      	mov	r4, r0
		dev->calib.range_sw_err = ((int8_t) temp_var & (int8_t) BME680_RSERROR_MSK) / 16;
 8003456:	f99d 3003 	ldrsb.w	r3, [sp, #3]
 800345a:	111b      	asrs	r3, r3, #4
 800345c:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
}
 8003460:	4620      	mov	r0, r4
 8003462:	b00d      	add	sp, #52	; 0x34
 8003464:	bd30      	pop	{r4, r5, pc}
					rslt = BME680_E_DEV_NOT_FOUND;
 8003466:	f06f 0402 	mvn.w	r4, #2
 800346a:	e7f9      	b.n	8003460 <bme680_init+0x170>

0800346c <bme680_set_sensor_mode>:
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
 800346c:	2374      	movs	r3, #116	; 0x74
{
 800346e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003470:	4604      	mov	r4, r0
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
 8003472:	f88d 3007 	strb.w	r3, [sp, #7]
	rslt = null_ptr_check(dev);
 8003476:	f7ff fe35 	bl	80030e4 <null_ptr_check>
	if (rslt == BME680_OK) {
 800347a:	bba0      	cbnz	r0, 80034e6 <bme680_set_sensor_mode+0x7a>
	uint8_t pow_mode = 0;
 800347c:	4605      	mov	r5, r0
			rslt = bme680_get_regs(BME680_CONF_T_P_MODE_ADDR, &tmp_pow_mode, 1, dev);
 800347e:	4623      	mov	r3, r4
 8003480:	2201      	movs	r2, #1
 8003482:	f10d 0106 	add.w	r1, sp, #6
 8003486:	2074      	movs	r0, #116	; 0x74
 8003488:	f7ff fe95 	bl	80031b6 <bme680_get_regs>
			if (rslt == BME680_OK) {
 800348c:	b9a0      	cbnz	r0, 80034b8 <bme680_set_sensor_mode+0x4c>
				pow_mode = (tmp_pow_mode & BME680_MODE_MSK);
 800348e:	f89d 3006 	ldrb.w	r3, [sp, #6]
				if (pow_mode != BME680_SLEEP_MODE) {
 8003492:	f013 0503 	ands.w	r5, r3, #3
 8003496:	d011      	beq.n	80034bc <bme680_set_sensor_mode+0x50>
					tmp_pow_mode = tmp_pow_mode & (~BME680_MODE_MSK); /* Set to sleep */
 8003498:	f023 0303 	bic.w	r3, r3, #3
					rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 800349c:	2201      	movs	r2, #1
 800349e:	f10d 0106 	add.w	r1, sp, #6
 80034a2:	f10d 0007 	add.w	r0, sp, #7
					tmp_pow_mode = tmp_pow_mode & (~BME680_MODE_MSK); /* Set to sleep */
 80034a6:	f88d 3006 	strb.w	r3, [sp, #6]
					rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 80034aa:	4623      	mov	r3, r4
 80034ac:	f7ff fea7 	bl	80031fe <bme680_set_regs>
					dev->delay_ms(BME680_POLL_PERIOD_MS);
 80034b0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80034b2:	200a      	movs	r0, #10
 80034b4:	4798      	blx	r3
		} while (pow_mode != BME680_SLEEP_MODE);
 80034b6:	e7e2      	b.n	800347e <bme680_set_sensor_mode+0x12>
 80034b8:	2d00      	cmp	r5, #0
 80034ba:	d1e0      	bne.n	800347e <bme680_set_sensor_mode+0x12>
		if (dev->power_mode != BME680_SLEEP_MODE) {
 80034bc:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 80034c0:	b18a      	cbz	r2, 80034e6 <bme680_set_sensor_mode+0x7a>
			tmp_pow_mode = (tmp_pow_mode & ~BME680_MODE_MSK) | (dev->power_mode & BME680_MODE_MSK);
 80034c2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80034c6:	f002 0203 	and.w	r2, r2, #3
 80034ca:	f023 0303 	bic.w	r3, r3, #3
 80034ce:	4313      	orrs	r3, r2
 80034d0:	f88d 3006 	strb.w	r3, [sp, #6]
			if (rslt == BME680_OK)
 80034d4:	b938      	cbnz	r0, 80034e6 <bme680_set_sensor_mode+0x7a>
				rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 80034d6:	4623      	mov	r3, r4
 80034d8:	2201      	movs	r2, #1
 80034da:	f10d 0106 	add.w	r1, sp, #6
 80034de:	f10d 0007 	add.w	r0, sp, #7
 80034e2:	f7ff fe8c 	bl	80031fe <bme680_set_regs>
}
 80034e6:	b003      	add	sp, #12
 80034e8:	bd30      	pop	{r4, r5, pc}

080034ea <bme680_set_sensor_settings>:
{
 80034ea:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t data = 0;
 80034ec:	2300      	movs	r3, #0
{
 80034ee:	b089      	sub	sp, #36	; 0x24
 80034f0:	4606      	mov	r6, r0
	rslt = null_ptr_check(dev);
 80034f2:	4608      	mov	r0, r1
{
 80034f4:	460c      	mov	r4, r1
	uint8_t data = 0;
 80034f6:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 80034fa:	9304      	str	r3, [sp, #16]
 80034fc:	f8ad 3014 	strh.w	r3, [sp, #20]
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 8003500:	9306      	str	r3, [sp, #24]
 8003502:	f8ad 301c 	strh.w	r3, [sp, #28]
	rslt = null_ptr_check(dev);
 8003506:	f7ff fded 	bl	80030e4 <null_ptr_check>
	if (rslt == BME680_OK) {
 800350a:	2800      	cmp	r0, #0
 800350c:	f040 80fc 	bne.w	8003708 <bme680_set_sensor_settings+0x21e>
		if (desired_settings & BME680_GAS_MEAS_SEL)
 8003510:	f016 0308 	ands.w	r3, r6, #8
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */
 8003514:	f891 7044 	ldrb.w	r7, [r1, #68]	; 0x44
		if (desired_settings & BME680_GAS_MEAS_SEL)
 8003518:	d105      	bne.n	8003526 <bme680_set_sensor_settings+0x3c>
		dev->power_mode = BME680_SLEEP_MODE;
 800351a:	f881 3044 	strb.w	r3, [r1, #68]	; 0x44
			rslt = bme680_set_sensor_mode(dev);
 800351e:	4620      	mov	r0, r4
 8003520:	f7ff ffa4 	bl	800346c <bme680_set_sensor_mode>
 8003524:	e007      	b.n	8003536 <bme680_set_sensor_settings+0x4c>
		if (dev->power_mode == BME680_FORCED_MODE) {
 8003526:	2f01      	cmp	r7, #1
		uint8_t reg_data[2] = {0};
 8003528:	f8ad 000c 	strh.w	r0, [sp, #12]
		if (dev->power_mode == BME680_FORCED_MODE) {
 800352c:	f000 80ee 	beq.w	800370c <bme680_set_sensor_settings+0x222>
		dev->power_mode = BME680_SLEEP_MODE;
 8003530:	f881 0044 	strb.w	r0, [r1, #68]	; 0x44
			rslt = BME680_W_DEFINE_PWR_MODE;
 8003534:	2001      	movs	r0, #1
		if (desired_settings & BME680_FILTER_SEL) {
 8003536:	f016 0510 	ands.w	r5, r6, #16
 800353a:	d01e      	beq.n	800357a <bme680_set_sensor_settings+0x90>
			rslt = boundary_check(&dev->tph_sett.filter, BME680_FILTER_SIZE_0, BME680_FILTER_SIZE_127, dev);
 800353c:	4622      	mov	r2, r4
 800353e:	2107      	movs	r1, #7
 8003540:	f104 003b 	add.w	r0, r4, #59	; 0x3b
 8003544:	f7ff fe29 	bl	800319a <boundary_check.constprop.0>
			if (rslt == BME680_OK)
 8003548:	b928      	cbnz	r0, 8003556 <bme680_set_sensor_settings+0x6c>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 800354a:	4623      	mov	r3, r4
 800354c:	2201      	movs	r2, #1
 800354e:	4469      	add	r1, sp
 8003550:	2075      	movs	r0, #117	; 0x75
 8003552:	f7ff fe30 	bl	80031b6 <bme680_get_regs>
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 8003556:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
			count++;
 800355a:	2501      	movs	r5, #1
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 800355c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	f022 021c 	bic.w	r2, r2, #28
 8003566:	f003 031c 	and.w	r3, r3, #28
 800356a:	4313      	orrs	r3, r2
			reg_array[count] = reg_addr; /* Append configuration */
 800356c:	2275      	movs	r2, #117	; 0x75
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 800356e:	f88d 3007 	strb.w	r3, [sp, #7]
			reg_array[count] = reg_addr; /* Append configuration */
 8003572:	f88d 2010 	strb.w	r2, [sp, #16]
			data_array[count] = data;
 8003576:	f88d 3018 	strb.w	r3, [sp, #24]
		if (desired_settings & BME680_HCNTRL_SEL) {
 800357a:	06b3      	lsls	r3, r6, #26
 800357c:	d522      	bpl.n	80035c4 <bme680_set_sensor_settings+0xda>
			rslt = boundary_check(&dev->gas_sett.heatr_ctrl, BME680_ENABLE_HEATER,
 800357e:	4622      	mov	r2, r4
 8003580:	2108      	movs	r1, #8
 8003582:	f104 003d 	add.w	r0, r4, #61	; 0x3d
 8003586:	f7ff fe08 	bl	800319a <boundary_check.constprop.0>
			if (rslt == BME680_OK)
 800358a:	b930      	cbnz	r0, 800359a <bme680_set_sensor_settings+0xb0>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 800358c:	4623      	mov	r3, r4
 800358e:	2201      	movs	r2, #1
 8003590:	f10d 0107 	add.w	r1, sp, #7
 8003594:	2070      	movs	r0, #112	; 0x70
 8003596:	f7ff fe0e 	bl	80031b6 <bme680_get_regs>
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 800359a:	f89d 3007 	ldrb.w	r3, [sp, #7]
			reg_array[count] = reg_addr; /* Append configuration */
 800359e:	2170      	movs	r1, #112	; 0x70
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 80035a0:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80035a4:	f023 0308 	bic.w	r3, r3, #8
 80035a8:	f002 0208 	and.w	r2, r2, #8
 80035ac:	4313      	orrs	r3, r2
			reg_array[count] = reg_addr; /* Append configuration */
 80035ae:	f105 0220 	add.w	r2, r5, #32
			count++;
 80035b2:	3501      	adds	r5, #1
			reg_array[count] = reg_addr; /* Append configuration */
 80035b4:	446a      	add	r2, sp
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 80035b6:	f88d 3007 	strb.w	r3, [sp, #7]
			count++;
 80035ba:	b2ed      	uxtb	r5, r5
			reg_array[count] = reg_addr; /* Append configuration */
 80035bc:	f802 1c10 	strb.w	r1, [r2, #-16]
			data_array[count] = data;
 80035c0:	f802 3c08 	strb.w	r3, [r2, #-8]
		if (desired_settings & (BME680_OST_SEL | BME680_OSP_SEL)) {
 80035c4:	07b1      	lsls	r1, r6, #30
 80035c6:	d033      	beq.n	8003630 <bme680_set_sensor_settings+0x146>
			rslt = boundary_check(&dev->tph_sett.os_temp, BME680_OS_NONE, BME680_OS_16X, dev);
 80035c8:	4622      	mov	r2, r4
 80035ca:	2105      	movs	r1, #5
 80035cc:	f104 0039 	add.w	r0, r4, #57	; 0x39
 80035d0:	f7ff fde3 	bl	800319a <boundary_check.constprop.0>
			if (rslt == BME680_OK)
 80035d4:	b930      	cbnz	r0, 80035e4 <bme680_set_sensor_settings+0xfa>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 80035d6:	4623      	mov	r3, r4
 80035d8:	2201      	movs	r2, #1
 80035da:	f10d 0107 	add.w	r1, sp, #7
 80035de:	2074      	movs	r0, #116	; 0x74
 80035e0:	f7ff fde9 	bl	80031b6 <bme680_get_regs>
			if (desired_settings & BME680_OST_SEL)
 80035e4:	07f2      	lsls	r2, r6, #31
 80035e6:	d509      	bpl.n	80035fc <bme680_set_sensor_settings+0x112>
				data = BME680_SET_BITS(data, BME680_OST, dev->tph_sett.os_temp);
 80035e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80035ec:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80035f0:	f003 031f 	and.w	r3, r3, #31
 80035f4:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 80035f8:	f88d 3007 	strb.w	r3, [sp, #7]
			if (desired_settings & BME680_OSP_SEL)
 80035fc:	07b3      	lsls	r3, r6, #30
 80035fe:	d50b      	bpl.n	8003618 <bme680_set_sensor_settings+0x12e>
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);
 8003600:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8003604:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	f022 021c 	bic.w	r2, r2, #28
 800360e:	f003 031c 	and.w	r3, r3, #28
 8003612:	4313      	orrs	r3, r2
 8003614:	f88d 3007 	strb.w	r3, [sp, #7]
			reg_array[count] = reg_addr;
 8003618:	f105 0320 	add.w	r3, r5, #32
 800361c:	2274      	movs	r2, #116	; 0x74
			count++;
 800361e:	3501      	adds	r5, #1
			reg_array[count] = reg_addr;
 8003620:	446b      	add	r3, sp
			count++;
 8003622:	b2ed      	uxtb	r5, r5
			reg_array[count] = reg_addr;
 8003624:	f803 2c10 	strb.w	r2, [r3, #-16]
			data_array[count] = data;
 8003628:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800362c:	f803 2c08 	strb.w	r2, [r3, #-8]
		if (desired_settings & BME680_OSH_SEL) {
 8003630:	0771      	lsls	r1, r6, #29
 8003632:	d522      	bpl.n	800367a <bme680_set_sensor_settings+0x190>
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
 8003634:	4622      	mov	r2, r4
 8003636:	2105      	movs	r1, #5
 8003638:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800363c:	f7ff fdad 	bl	800319a <boundary_check.constprop.0>
			if (rslt == BME680_OK)
 8003640:	b930      	cbnz	r0, 8003650 <bme680_set_sensor_settings+0x166>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8003642:	4623      	mov	r3, r4
 8003644:	2201      	movs	r2, #1
 8003646:	f10d 0107 	add.w	r1, sp, #7
 800364a:	2072      	movs	r0, #114	; 0x72
 800364c:	f7ff fdb3 	bl	80031b6 <bme680_get_regs>
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 8003650:	f89d 3007 	ldrb.w	r3, [sp, #7]
			reg_array[count] = reg_addr; /* Append configuration */
 8003654:	2172      	movs	r1, #114	; 0x72
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 8003656:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 800365a:	f023 0307 	bic.w	r3, r3, #7
 800365e:	f002 0207 	and.w	r2, r2, #7
 8003662:	4313      	orrs	r3, r2
			reg_array[count] = reg_addr; /* Append configuration */
 8003664:	f105 0220 	add.w	r2, r5, #32
			count++;
 8003668:	3501      	adds	r5, #1
			reg_array[count] = reg_addr; /* Append configuration */
 800366a:	446a      	add	r2, sp
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 800366c:	f88d 3007 	strb.w	r3, [sp, #7]
			count++;
 8003670:	b2ed      	uxtb	r5, r5
			reg_array[count] = reg_addr; /* Append configuration */
 8003672:	f802 1c10 	strb.w	r1, [r2, #-16]
			data_array[count] = data;
 8003676:	f802 3c08 	strb.w	r3, [r2, #-8]
		if (desired_settings & (BME680_RUN_GAS_SEL | BME680_NBCONV_SEL)) {
 800367a:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 800367e:	d03a      	beq.n	80036f6 <bme680_set_sensor_settings+0x20c>
			rslt = boundary_check(&dev->gas_sett.run_gas, BME680_RUN_GAS_DISABLE,
 8003680:	4622      	mov	r2, r4
 8003682:	2101      	movs	r1, #1
 8003684:	f104 003e 	add.w	r0, r4, #62	; 0x3e
 8003688:	f7ff fd87 	bl	800319a <boundary_check.constprop.0>
			if (rslt == BME680_OK) {
 800368c:	b960      	cbnz	r0, 80036a8 <bme680_set_sensor_settings+0x1be>
				rslt = boundary_check(&dev->gas_sett.nb_conv, BME680_NBCONV_MIN,
 800368e:	210a      	movs	r1, #10
 8003690:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8003694:	f7ff fd81 	bl	800319a <boundary_check.constprop.0>
			if (rslt == BME680_OK)
 8003698:	b930      	cbnz	r0, 80036a8 <bme680_set_sensor_settings+0x1be>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 800369a:	4623      	mov	r3, r4
 800369c:	2201      	movs	r2, #1
 800369e:	f10d 0107 	add.w	r1, sp, #7
 80036a2:	2071      	movs	r0, #113	; 0x71
 80036a4:	f7ff fd87 	bl	80031b6 <bme680_get_regs>
			if (desired_settings & BME680_RUN_GAS_SEL)
 80036a8:	0672      	lsls	r2, r6, #25
 80036aa:	d50b      	bpl.n	80036c4 <bme680_set_sensor_settings+0x1da>
				data = BME680_SET_BITS(data, BME680_RUN_GAS, dev->gas_sett.run_gas);
 80036ac:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80036b0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80036b4:	011b      	lsls	r3, r3, #4
 80036b6:	f022 0210 	bic.w	r2, r2, #16
 80036ba:	f003 0310 	and.w	r3, r3, #16
 80036be:	4313      	orrs	r3, r2
 80036c0:	f88d 3007 	strb.w	r3, [sp, #7]
			if (desired_settings & BME680_NBCONV_SEL)
 80036c4:	0633      	lsls	r3, r6, #24
 80036c6:	d50a      	bpl.n	80036de <bme680_set_sensor_settings+0x1f4>
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);
 80036c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80036cc:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 80036d0:	f023 030f 	bic.w	r3, r3, #15
 80036d4:	f002 020f 	and.w	r2, r2, #15
 80036d8:	4313      	orrs	r3, r2
 80036da:	f88d 3007 	strb.w	r3, [sp, #7]
			reg_array[count] = reg_addr; /* Append configuration */
 80036de:	f105 0320 	add.w	r3, r5, #32
 80036e2:	2271      	movs	r2, #113	; 0x71
			count++;
 80036e4:	3501      	adds	r5, #1
			reg_array[count] = reg_addr; /* Append configuration */
 80036e6:	446b      	add	r3, sp
			count++;
 80036e8:	b2ed      	uxtb	r5, r5
			reg_array[count] = reg_addr; /* Append configuration */
 80036ea:	f803 2c10 	strb.w	r2, [r3, #-16]
			data_array[count] = data;
 80036ee:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80036f2:	f803 2c08 	strb.w	r2, [r3, #-8]
		if (rslt == BME680_OK)
 80036f6:	b928      	cbnz	r0, 8003704 <bme680_set_sensor_settings+0x21a>
			rslt = bme680_set_regs(reg_array, data_array, count, dev);
 80036f8:	4623      	mov	r3, r4
 80036fa:	462a      	mov	r2, r5
 80036fc:	a906      	add	r1, sp, #24
 80036fe:	a804      	add	r0, sp, #16
 8003700:	f7ff fd7d 	bl	80031fe <bme680_set_regs>
		dev->power_mode = intended_power_mode;
 8003704:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
}
 8003708:	b009      	add	sp, #36	; 0x24
 800370a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
 800370c:	235a      	movs	r3, #90	; 0x5a
	var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 800370e:	f8b1 2040 	ldrh.w	r2, [r1, #64]	; 0x40
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
 8003712:	f88d 3008 	strb.w	r3, [sp, #8]
	var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 8003716:	f5b2 7fc8 	cmp.w	r2, #400	; 0x190
 800371a:	f9b1 3012 	ldrsh.w	r3, [r1, #18]
 800371e:	bf28      	it	cs
 8003720:	f44f 72c8 	movcs.w	r2, #400	; 0x190
 8003724:	f503 3316 	add.w	r3, r3, #153600	; 0x25800
 8003728:	f203 1399 	addw	r3, r3, #409	; 0x199
 800372c:	4353      	muls	r3, r2
 800372e:	2214      	movs	r2, #20
 8003730:	fbb3 f3f2 	udiv	r3, r3, r2
 8003734:	220a      	movs	r2, #10
 8003736:	f503 1348 	add.w	r3, r3, #3276800	; 0x320000
 800373a:	fbb3 f3f2 	udiv	r3, r3, r2
 800373e:	f991 2011 	ldrsb.w	r2, [r1, #17]
 8003742:	f502 7244 	add.w	r2, r2, #784	; 0x310
 8003746:	435a      	muls	r2, r3
	var1 = (((int32_t) dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
 8003748:	f991 3004 	ldrsb.w	r3, [r1, #4]
 800374c:	f991 1014 	ldrsb.w	r1, [r1, #20]
 8003750:	fb13 f301 	smulbb	r3, r3, r1
 8003754:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003758:	fb93 f3f1 	sdiv	r3, r3, r1
 800375c:	021b      	lsls	r3, r3, #8
	var5 = (131 * dev->calib.res_heat_val) + 65536;
 800375e:	2183      	movs	r1, #131	; 0x83
	var3 = var1 + (var2 / 2);
 8003760:	eb03 0362 	add.w	r3, r3, r2, asr #1
	var4 = (var3 / (dev->calib.res_heat_range + 4));
 8003764:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8003768:	3204      	adds	r2, #4
 800376a:	fbb3 f3f2 	udiv	r3, r3, r2
	var5 = (131 * dev->calib.res_heat_val) + 65536;
 800376e:	f994 2035 	ldrsb.w	r2, [r4, #53]	; 0x35
 8003772:	434a      	muls	r2, r1
 8003774:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
	heatr_res_x100 = (int32_t) (((var4 / var5) - 250) * 34);
 8003778:	fbb3 f3f2 	udiv	r3, r3, r2
 800377c:	2222      	movs	r2, #34	; 0x22
 800377e:	3bfa      	subs	r3, #250	; 0xfa
 8003780:	4353      	muls	r3, r2
	heatr_res = (uint8_t) ((heatr_res_x100 + 50) / 100);
 8003782:	2264      	movs	r2, #100	; 0x64
 8003784:	3332      	adds	r3, #50	; 0x32
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
 8003786:	f88d 2009 	strb.w	r2, [sp, #9]
	heatr_res = (uint8_t) ((heatr_res_x100 + 50) / 100);
 800378a:	fb93 f3f2 	sdiv	r3, r3, r2
 800378e:	f88d 300c 	strb.w	r3, [sp, #12]
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
 8003792:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
	if (dur >= 0xfc0) {
 8003796:	f5b3 6f7c 	cmp.w	r3, #4032	; 0xfc0
 800379a:	d21a      	bcs.n	80037d2 <bme680_set_sensor_settings+0x2e8>
		while (dur > 0x3F) {
 800379c:	2b3f      	cmp	r3, #63	; 0x3f
 800379e:	b2c2      	uxtb	r2, r0
 80037a0:	f100 0001 	add.w	r0, r0, #1
 80037a4:	d813      	bhi.n	80037ce <bme680_set_sensor_settings+0x2e4>
		durval = (uint8_t) (dur + (factor * 64));
 80037a6:	eb03 1382 	add.w	r3, r3, r2, lsl #6
 80037aa:	b2db      	uxtb	r3, r3
			dev->gas_sett.nb_conv = 0;
 80037ac:	2500      	movs	r5, #0
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
 80037ae:	f88d 300d 	strb.w	r3, [sp, #13]
			rslt = bme680_set_regs(reg_addr, reg_data, 2, dev);
 80037b2:	2202      	movs	r2, #2
 80037b4:	4623      	mov	r3, r4
 80037b6:	a903      	add	r1, sp, #12
 80037b8:	a802      	add	r0, sp, #8
			dev->gas_sett.nb_conv = 0;
 80037ba:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
			rslt = bme680_set_regs(reg_addr, reg_data, 2, dev);
 80037be:	f7ff fd1e 	bl	80031fe <bme680_set_regs>
		dev->power_mode = BME680_SLEEP_MODE;
 80037c2:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
		if (rslt == BME680_OK)
 80037c6:	2800      	cmp	r0, #0
 80037c8:	f47f aeb5 	bne.w	8003536 <bme680_set_sensor_settings+0x4c>
 80037cc:	e6a7      	b.n	800351e <bme680_set_sensor_settings+0x34>
			dur = dur / 4;
 80037ce:	089b      	lsrs	r3, r3, #2
			factor += 1;
 80037d0:	e7e4      	b.n	800379c <bme680_set_sensor_settings+0x2b2>
		durval = 0xff; /* Max duration*/
 80037d2:	23ff      	movs	r3, #255	; 0xff
 80037d4:	e7ea      	b.n	80037ac <bme680_set_sensor_settings+0x2c2>
	...

080037d8 <bme680_get_profile_dur>:
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 80037d8:	4b19      	ldr	r3, [pc, #100]	; (8003840 <bme680_get_profile_dur+0x68>)
{
 80037da:	4602      	mov	r2, r0
 80037dc:	b513      	push	{r0, r1, r4, lr}
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 80037de:	6818      	ldr	r0, [r3, #0]
 80037e0:	889b      	ldrh	r3, [r3, #4]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 80037e2:	f891 403a 	ldrb.w	r4, [r1, #58]	; 0x3a
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 80037e6:	f8ad 3004 	strh.w	r3, [sp, #4]
	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 80037ea:	f891 3039 	ldrb.w	r3, [r1, #57]	; 0x39
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 80037ee:	9000      	str	r0, [sp, #0]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 80037f0:	f104 0008 	add.w	r0, r4, #8
	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 80037f4:	3308      	adds	r3, #8
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 80037f6:	eb0d 0400 	add.w	r4, sp, r0
	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 80037fa:	446b      	add	r3, sp
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 80037fc:	f814 0c08 	ldrb.w	r0, [r4, #-8]
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
 8003800:	f240 74ab 	movw	r4, #1963	; 0x7ab
	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 8003804:	f813 3c08 	ldrb.w	r3, [r3, #-8]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 8003808:	4418      	add	r0, r3
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
 800380a:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
 800380e:	3308      	adds	r3, #8
 8003810:	446b      	add	r3, sp
 8003812:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8003816:	4418      	add	r0, r3
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
 8003818:	f241 23b9 	movw	r3, #4793	; 0x12b9
 800381c:	fb04 3300 	mla	r3, r4, r0, r3
	tph_dur /= UINT32_C(1000); /* Convert to ms */
 8003820:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003824:	fbb3 f3f0 	udiv	r3, r3, r0
	tph_dur += UINT32_C(1); /* Wake up duration of 1ms */
 8003828:	3301      	adds	r3, #1
	*duration = (uint16_t) tph_dur;
 800382a:	b29b      	uxth	r3, r3
 800382c:	8013      	strh	r3, [r2, #0]
	if (dev->gas_sett.run_gas) {
 800382e:	f891 003e 	ldrb.w	r0, [r1, #62]	; 0x3e
 8003832:	b118      	cbz	r0, 800383c <bme680_get_profile_dur+0x64>
		*duration += dev->gas_sett.heatr_dur;
 8003834:	f8b1 1042 	ldrh.w	r1, [r1, #66]	; 0x42
 8003838:	440b      	add	r3, r1
 800383a:	8013      	strh	r3, [r2, #0]
}
 800383c:	b002      	add	sp, #8
 800383e:	bd10      	pop	{r4, pc}
 8003840:	08026e88 	.word	0x08026e88

08003844 <bme680_get_sensor_data>:
{
 8003844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003848:	4607      	mov	r7, r0
 800384a:	b0a9      	sub	sp, #164	; 0xa4
	rslt = null_ptr_check(dev);
 800384c:	4608      	mov	r0, r1
{
 800384e:	460c      	mov	r4, r1
	rslt = null_ptr_check(dev);
 8003850:	f7ff fc48 	bl	80030e4 <null_ptr_check>
	if (rslt == BME680_OK) {
 8003854:	4605      	mov	r5, r0
 8003856:	2800      	cmp	r0, #0
 8003858:	f040 819d 	bne.w	8003b96 <bme680_get_sensor_data+0x352>
	uint8_t buff[BME680_FIELD_LENGTH] = { 0 };
 800385c:	9006      	str	r0, [sp, #24]
	rslt = null_ptr_check(dev);
 800385e:	f04f 080a 	mov.w	r8, #10
	uint8_t buff[BME680_FIELD_LENGTH] = { 0 };
 8003862:	f8cd 001b 	str.w	r0, [sp, #27]
 8003866:	e9cd 0004 	strd	r0, r0, [sp, #16]
	rslt = null_ptr_check(dev);
 800386a:	4608      	mov	r0, r1
 800386c:	f7ff fc3a 	bl	80030e4 <null_ptr_check>
 8003870:	4605      	mov	r5, r0
		if (rslt == BME680_OK) {
 8003872:	2d00      	cmp	r5, #0
 8003874:	f040 8196 	bne.w	8003ba4 <bme680_get_sensor_data+0x360>
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
 8003878:	4623      	mov	r3, r4
 800387a:	220f      	movs	r2, #15
 800387c:	a904      	add	r1, sp, #16
 800387e:	201d      	movs	r0, #29
 8003880:	f7ff fc99 	bl	80031b6 <bme680_get_regs>
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 8003884:	f89d 2018 	ldrb.w	r2, [sp, #24]
			data->status = buff[0] & BME680_NEW_DATA_MSK;
 8003888:	f89d c010 	ldrb.w	ip, [sp, #16]
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
 800388c:	4605      	mov	r5, r0
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 800388e:	9201      	str	r2, [sp, #4]
 8003890:	f89d 2019 	ldrb.w	r2, [sp, #25]
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
 8003894:	f00c 030f 	and.w	r3, ip, #15
			data->status |= buff[14] & BME680_GASM_VALID_MSK;
 8003898:	f99d 001e 	ldrsb.w	r0, [sp, #30]
			data->status = buff[0] & BME680_NEW_DATA_MSK;
 800389c:	f02c 0c7f 	bic.w	ip, ip, #127	; 0x7f
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 80038a0:	9202      	str	r2, [sp, #8]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 80038a2:	f89d 201d 	ldrb.w	r2, [sp, #29]
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
 80038a6:	707b      	strb	r3, [r7, #1]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 80038a8:	9203      	str	r2, [sp, #12]
			data->status |= buff[14] & BME680_GASM_VALID_MSK;
 80038aa:	f000 0220 	and.w	r2, r0, #32
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 80038ae:	f000 0010 	and.w	r0, r0, #16
			data->meas_index = buff[1];
 80038b2:	f89d 3011 	ldrb.w	r3, [sp, #17]
			data->status |= buff[14] & BME680_GASM_VALID_MSK;
 80038b6:	ea4c 0202 	orr.w	r2, ip, r2
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 80038ba:	f89d e012 	ldrb.w	lr, [sp, #18]
			data->meas_index = buff[1];
 80038be:	70bb      	strb	r3, [r7, #2]
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 80038c0:	4302      	orrs	r2, r0
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 80038c2:	f89d 9013 	ldrb.w	r9, [sp, #19]
				| ((uint32_t) buff[4] / 16));
 80038c6:	f89d 3014 	ldrb.w	r3, [sp, #20]
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 80038ca:	b252      	sxtb	r2, r2
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 80038cc:	f89d a015 	ldrb.w	sl, [sp, #21]
 80038d0:	f89d b016 	ldrb.w	fp, [sp, #22]
			if (data->status & BME680_NEW_DATA_MSK) {
 80038d4:	2a00      	cmp	r2, #0
				| ((uint32_t) buff[7] / 16));
 80038d6:	f89d 1017 	ldrb.w	r1, [sp, #23]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 80038da:	f89d 601e 	ldrb.w	r6, [sp, #30]
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 80038de:	703a      	strb	r2, [r7, #0]
			if (data->status & BME680_NEW_DATA_MSK) {
 80038e0:	f280 815d 	bge.w	8003b9e <bme680_get_sensor_data+0x35a>
				| ((uint32_t) buff[7] / 16));
 80038e4:	0909      	lsrs	r1, r1, #4
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 80038e6:	f994 c01a 	ldrsb.w	ip, [r4, #26]
				| ((uint32_t) buff[4] / 16));
 80038ea:	091b      	lsrs	r3, r3, #4
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 80038ec:	ea41 1b0b 	orr.w	fp, r1, fp, lsl #4
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 80038f0:	ea43 1309 	orr.w	r3, r3, r9, lsl #4
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 80038f4:	ea4b 3a0a 	orr.w	sl, fp, sl, lsl #12
	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 80038f8:	f8b4 b016 	ldrh.w	fp, [r4, #22]
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 80038fc:	ea43 330e 	orr.w	r3, r3, lr, lsl #12
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 8003900:	f9b4 e022 	ldrsh.w	lr, [r4, #34]	; 0x22
	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 8003904:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 8003908:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
	pressure_comp = 1048576 - pres_adc;
 800390c:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 8003910:	ebcb 0ada 	rsb	sl, fp, sl, lsr #3
 8003914:	ea4f 72ea 	mov.w	r2, sl, asr #31
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 8003918:	ea4f 015a 	mov.w	r1, sl, lsr #1
 800391c:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
 8003920:	fb01 f002 	mul.w	r0, r1, r2
 8003924:	fba1 1201 	umull	r1, r2, r1, r1
 8003928:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800392c:	0b09      	lsrs	r1, r1, #12
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 800392e:	ea4f 100c 	mov.w	r0, ip, lsl #4
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 8003932:	ea41 5102 	orr.w	r1, r1, r2, lsl #20
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8003936:	ea4f 7cec 	mov.w	ip, ip, asr #31
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 800393a:	1312      	asrs	r2, r2, #12
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 800393c:	fb01 fc0c 	mul.w	ip, r1, ip
 8003940:	fba1 8100 	umull	r8, r1, r1, r0
 8003944:	fb00 cc02 	mla	ip, r0, r2, ip
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 8003948:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 800394c:	fb82 2a0a 	smull	r2, sl, r2, sl
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8003950:	448c      	add	ip, r1
 8003952:	ea4f 3198 	mov.w	r1, r8, lsr #14
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 8003956:	0ad2      	lsrs	r2, r2, #11
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8003958:	ea41 418c 	orr.w	r1, r1, ip, lsl #18
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 800395c:	ea42 524a 	orr.w	r2, r2, sl, lsl #21
	dev->calib.t_fine = (int32_t) (var2 + var3);
 8003960:	440a      	add	r2, r1
	calc_temp = (int16_t) (((dev->calib.t_fine * 5) + 128) >> 8);
 8003962:	eb02 0182 	add.w	r1, r2, r2, lsl #2
	dev->calib.t_fine = (int32_t) (var2 + var3);
 8003966:	6322      	str	r2, [r4, #48]	; 0x30
	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 8003968:	1052      	asrs	r2, r2, #1
	calc_temp = (int16_t) (((dev->calib.t_fine * 5) + 128) >> 8);
 800396a:	3180      	adds	r1, #128	; 0x80
	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 800396c:	f5a2 427a 	sub.w	r2, r2, #64000	; 0xfa00
	calc_temp = (int16_t) (((dev->calib.t_fine * 5) + 128) >> 8);
 8003970:	ea4f 2821 	mov.w	r8, r1, asr #8
				data->temperature = calc_temperature(adc_temp, dev);
 8003974:	f341 210f 	sbfx	r1, r1, #8, #16
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 8003978:	ea4f 0ca2 	mov.w	ip, r2, asr #2
				data->temperature = calc_temperature(adc_temp, dev);
 800397c:	ee07 1a90 	vmov	s15, r1
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 8003980:	fb0c fc0c 	mul.w	ip, ip, ip
				data->temperature = calc_temperature(adc_temp, dev);
 8003984:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 8003988:	ea4f 20ec 	mov.w	r0, ip, asr #11
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 800398c:	ea4f 3c6c 	mov.w	ip, ip, asr #13
				data->temperature = calc_temperature(adc_temp, dev);
 8003990:	edc7 7a01 	vstr	s15, [r7, #4]
		(int32_t)dev->calib.par_p6) >> 2;
 8003994:	f994 1026 	ldrsb.w	r1, [r4, #38]	; 0x26
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 8003998:	4341      	muls	r1, r0
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
 800399a:	f9b4 0024 	ldrsh.w	r0, [r4, #36]	; 0x24
 800399e:	4350      	muls	r0, r2
 80039a0:	0040      	lsls	r0, r0, #1
 80039a2:	eb00 00a1 	add.w	r0, r0, r1, asr #2
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
 80039a6:	f9b4 101e 	ldrsh.w	r1, [r4, #30]
 80039aa:	434a      	muls	r2, r1
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 80039ac:	f994 1020 	ldrsb.w	r1, [r4, #32]
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 80039b0:	eb0e 00a0 	add.w	r0, lr, r0, asr #2
	uint32_t lookupTable1[16] = { UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647),
 80039b4:	f10d 0e20 	add.w	lr, sp, #32
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 80039b8:	0149      	lsls	r1, r1, #5
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
 80039ba:	eba3 3320 	sub.w	r3, r3, r0, asr #12
 80039be:	f640 4035 	movw	r0, #3125	; 0xc35
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 80039c2:	fb0c fc01 	mul.w	ip, ip, r1
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 80039c6:	8ba1      	ldrh	r1, [r4, #28]
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
 80039c8:	4343      	muls	r3, r0
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 80039ca:	f9b4 002a 	ldrsh.w	r0, [r4, #42]	; 0x2a
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 80039ce:	ea4f 0cec 	mov.w	ip, ip, asr #3
	if (pressure_comp >= BME680_MAX_OVERFLOW_VAL)
 80039d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 80039d6:	eb0c 0262 	add.w	r2, ip, r2, asr #1
		(int32_t)dev->calib.par_p8) >> 13;
 80039da:	f9b4 c028 	ldrsh.w	ip, [r4, #40]	; 0x28
		pressure_comp = ((pressure_comp << 1) / var1);
 80039de:	bfb8      	it	lt
 80039e0:	005b      	lsllt	r3, r3, #1
	var1 = var1 >> 18;
 80039e2:	ea4f 42a2 	mov.w	r2, r2, asr #18
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 80039e6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80039ea:	fb01 f202 	mul.w	r2, r1, r2
 80039ee:	ea4f 32e2 	mov.w	r2, r2, asr #15
		pressure_comp = ((pressure_comp / var1) << 1);
 80039f2:	bfaa      	itet	ge
 80039f4:	fb93 f3f2 	sdivge	r3, r3, r2
		pressure_comp = ((pressure_comp << 1) / var1);
 80039f8:	fb93 f3f2 	sdivlt	r3, r3, r2
		pressure_comp = ((pressure_comp / var1) << 1);
 80039fc:	005b      	lslge	r3, r3, #1
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 80039fe:	10da      	asrs	r2, r3, #3
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 8003a00:	1219      	asrs	r1, r3, #8
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 8003a02:	4352      	muls	r2, r2
		(pressure_comp >> 3)) >> 13)) >> 12;
 8003a04:	1352      	asrs	r2, r2, #13
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 8003a06:	4342      	muls	r2, r0
	var2 = ((int32_t)(pressure_comp >> 2) *
 8003a08:	1098      	asrs	r0, r3, #2
 8003a0a:	fb0c f000 	mul.w	r0, ip, r0
	uint32_t lookupTable1[16] = { UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647),
 8003a0e:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 8003bc0 <bme680_get_sensor_data+0x37c>
	var2 = ((int32_t)(pressure_comp >> 2) *
 8003a12:	1340      	asrs	r0, r0, #13
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 8003a14:	eb00 3222 	add.w	r2, r0, r2, asr #12
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 8003a18:	fb01 f001 	mul.w	r0, r1, r1
 8003a1c:	4341      	muls	r1, r0
		(int32_t)dev->calib.par_p10) >> 17;
 8003a1e:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
		(int32_t)(pressure_comp >> 8) *
 8003a22:	4341      	muls	r1, r0
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 8003a24:	eb02 4261 	add.w	r2, r2, r1, asr #17
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 8003a28:	f994 1027 	ldrsb.w	r1, [r4, #39]	; 0x27
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 8003a2c:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
 8003a30:	eb03 1322 	add.w	r3, r3, r2, asr #4
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8003a34:	2264      	movs	r2, #100	; 0x64
				data->pressure = calc_pressure(adc_pres, dev);
 8003a36:	ee07 3a90 	vmov	s15, r3
 8003a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a3e:	edc7 7a02 	vstr	s15, [r7, #8]
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8003a42:	f994 300e 	ldrsb.w	r3, [r4, #14]
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 8003a46:	f994 100d 	ldrsb.w	r1, [r4, #13]
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8003a4a:	fb08 f303 	mul.w	r3, r8, r3
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 8003a4e:	fb08 f101 	mul.w	r1, r8, r1
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8003a52:	fb93 f3f2 	sdiv	r3, r3, r2
 8003a56:	fb08 f303 	mul.w	r3, r8, r3
 8003a5a:	119b      	asrs	r3, r3, #6
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 8003a5c:	fb91 f1f2 	sdiv	r1, r1, r2
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
 8003a60:	fb93 f3f2 	sdiv	r3, r3, r2
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8003a64:	440b      	add	r3, r1
	var2 = ((int32_t) dev->calib.par_h2
 8003a66:	8961      	ldrh	r1, [r4, #10]
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
 8003a68:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 8003a6c:	434b      	muls	r3, r1
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 8003a6e:	e9dd 0101 	ldrd	r0, r1, [sp, #4]
	var2 = ((int32_t) dev->calib.par_h2
 8003a72:	129b      	asrs	r3, r3, #10
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 8003a74:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8003a78:	8920      	ldrh	r0, [r4, #8]
 8003a7a:	eba1 1100 	sub.w	r1, r1, r0, lsl #4
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
 8003a7e:	f994 000c 	ldrsb.w	r0, [r4, #12]
 8003a82:	fb08 f000 	mul.w	r0, r8, r0
 8003a86:	fb90 f0f2 	sdiv	r0, r0, r2
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 8003a8a:	eba1 0160 	sub.w	r1, r1, r0, asr #1
	var3 = var1 * var2;
 8003a8e:	434b      	muls	r3, r1
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8003a90:	f994 1010 	ldrsb.w	r1, [r4, #16]
 8003a94:	fb08 f801 	mul.w	r8, r8, r1
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
 8003a98:	1399      	asrs	r1, r3, #14
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8003a9a:	fb98 f2f2 	sdiv	r2, r8, r2
	var4 = (int32_t) dev->calib.par_h6 << 7;
 8003a9e:	f894 800f 	ldrb.w	r8, [r4, #15]
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
 8003aa2:	4349      	muls	r1, r1
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8003aa4:	eb02 12c8 	add.w	r2, r2, r8, lsl #7
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
 8003aa8:	1289      	asrs	r1, r1, #10
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8003aaa:	1112      	asrs	r2, r2, #4
	var6 = (var4 * var5) >> 1;
 8003aac:	434a      	muls	r2, r1
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
 8003aae:	eb03 0362 	add.w	r3, r3, r2, asr #1
 8003ab2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003ab6:	129b      	asrs	r3, r3, #10
 8003ab8:	4353      	muls	r3, r2
				data->humidity = calc_humidity(adc_hum, dev);
 8003aba:	4a40      	ldr	r2, [pc, #256]	; (8003bbc <bme680_get_sensor_data+0x378>)
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
 8003abc:	131b      	asrs	r3, r3, #12
 8003abe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
				data->humidity = calc_humidity(adc_hum, dev);
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	bfa8      	it	ge
 8003ac6:	4613      	movge	r3, r2
 8003ac8:	ee07 3a90 	vmov	s15, r3
 8003acc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	uint32_t lookupTable1[16] = { UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647),
 8003ad0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
				data->humidity = calc_humidity(adc_hum, dev);
 8003ad4:	edc7 7a03 	vstr	s15, [r7, #12]
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
 8003ad8:	f994 8036 	ldrsb.w	r8, [r4, #54]	; 0x36
	uint32_t lookupTable1[16] = { UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647),
 8003adc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8003ae0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003ae4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8003ae8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003aec:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8003af0:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
	uint32_t lookupTable2[16] = { UINT32_C(4096000000), UINT32_C(2048000000), UINT32_C(1024000000), UINT32_C(512000000),
 8003af4:	f10c 0c10 	add.w	ip, ip, #16
	uint32_t lookupTable1[16] = { UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647),
 8003af8:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
	uint32_t lookupTable2[16] = { UINT32_C(4096000000), UINT32_C(2048000000), UINT32_C(1024000000), UINT32_C(512000000),
 8003afc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003b00:	f10d 0e60 	add.w	lr, sp, #96	; 0x60
 8003b04:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8003b08:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003b0c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8003b10:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003b14:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8003b18:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8003b1c:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8003b20:	2205      	movs	r2, #5
 8003b22:	f240 513c 	movw	r1, #1340	; 0x53c
 8003b26:	2300      	movs	r3, #0
		((int64_t) lookupTable1[gas_range])) >> 16;
 8003b28:	f006 0c0f 	and.w	ip, r6, #15
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8003b2c:	fbc2 1308 	smlal	r1, r3, r2, r8
		((int64_t) lookupTable1[gas_range])) >> 16;
 8003b30:	aa28      	add	r2, sp, #160	; 0xa0
 8003b32:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8003b36:	f85c 2c80 	ldr.w	r2, [ip, #-128]
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8003b3a:	fba1 1002 	umull	r1, r0, r1, r2
 8003b3e:	fb02 0303 	mla	r3, r2, r3, r0
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 8003b42:	09b2      	lsrs	r2, r6, #6
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8003b44:	9803      	ldr	r0, [sp, #12]
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8003b46:	0c09      	lsrs	r1, r1, #16
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
 8003b48:	f85c 6c40 	ldr.w	r6, [ip, #-64]
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8003b4c:	ea4f 4e23 	mov.w	lr, r3, asr #16
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8003b50:	ea42 0280 	orr.w	r2, r2, r0, lsl #2
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8003b54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8003b58:	03d2      	lsls	r2, r2, #15
 8003b5a:	f112 427f 	adds.w	r2, r2, #4278190080	; 0xff000000
 8003b5e:	eb60 0000 	sbc.w	r0, r0, r0
 8003b62:	1852      	adds	r2, r2, r1
 8003b64:	eb40 4323 	adc.w	r3, r0, r3, asr #16
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
 8003b68:	fba6 0101 	umull	r0, r1, r6, r1
 8003b6c:	fb06 1e0e 	mla	lr, r6, lr, r1
 8003b70:	0a40      	lsrs	r0, r0, #9
	calc_gas_res = (uint32_t) ((var3 + ((int64_t) var2 >> 1)) / (int64_t) var2);
 8003b72:	0856      	lsrs	r6, r2, #1
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
 8003b74:	ea40 50ce 	orr.w	r0, r0, lr, lsl #23
	calc_gas_res = (uint32_t) ((var3 + ((int64_t) var2 >> 1)) / (int64_t) var2);
 8003b78:	ea46 76c3 	orr.w	r6, r6, r3, lsl #31
 8003b7c:	1059      	asrs	r1, r3, #1
 8003b7e:	1980      	adds	r0, r0, r6
 8003b80:	eb41 216e 	adc.w	r1, r1, lr, asr #9
 8003b84:	f7fc fbac 	bl	80002e0 <__aeabi_ldivmod>
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
 8003b88:	ee07 0a90 	vmov	s15, r0
 8003b8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b90:	edc7 7a04 	vstr	s15, [r7, #16]
		if (rslt == BME680_OK) {
 8003b94:	b175      	cbz	r5, 8003bb4 <bme680_get_sensor_data+0x370>
}
 8003b96:	4628      	mov	r0, r5
 8003b98:	b029      	add	sp, #164	; 0xa4
 8003b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			dev->delay_ms(BME680_POLL_PERIOD_MS);
 8003b9e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003ba0:	200a      	movs	r0, #10
 8003ba2:	4798      	blx	r3
	} while (tries);
 8003ba4:	f108 38ff 	add.w	r8, r8, #4294967295
 8003ba8:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
 8003bac:	f47f ae61 	bne.w	8003872 <bme680_get_sensor_data+0x2e>
		rslt = BME680_W_NO_NEW_DATA;
 8003bb0:	2502      	movs	r5, #2
	return rslt;
 8003bb2:	e7f0      	b.n	8003b96 <bme680_get_sensor_data+0x352>
				dev->new_fields = 1;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003bba:	e7ec      	b.n	8003b96 <bme680_get_sensor_data+0x352>
 8003bbc:	000186a0 	.word	0x000186a0
 8003bc0:	08026e90 	.word	0x08026e90

08003bc4 <vApplicationIdleHook>:
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
  
  vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 8003bc4:	4901      	ldr	r1, [pc, #4]	; (8003bcc <vApplicationIdleHook+0x8>)
 8003bc6:	2000      	movs	r0, #0
 8003bc8:	f00a bf5e 	b.w	800ea88 <vTaskSetApplicationTaskTag>
 8003bcc:	080011bd 	.word	0x080011bd

08003bd0 <StartDefaultTask>:
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
  /* USER CODE BEGIN 5 */
  for(;;)
 8003bd0:	e7fe      	b.n	8003bd0 <StartDefaultTask>
	...

08003bd4 <user_i2c_read>:
    {
 8003bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
      if(HAL_I2C_Master_Transmit(&hi2c1, (dev_id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 8003bd6:	0047      	lsls	r7, r0, #1
    {
 8003bd8:	b085      	sub	sp, #20
      if(HAL_I2C_Master_Transmit(&hi2c1, (dev_id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 8003bda:	260a      	movs	r6, #10
    {
 8003bdc:	4614      	mov	r4, r2
 8003bde:	461d      	mov	r5, r3
 8003be0:	f88d 100f 	strb.w	r1, [sp, #15]
      if(HAL_I2C_Master_Transmit(&hi2c1, (dev_id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 8003be4:	2301      	movs	r3, #1
 8003be6:	f10d 020f 	add.w	r2, sp, #15
 8003bea:	4639      	mov	r1, r7
 8003bec:	480a      	ldr	r0, [pc, #40]	; (8003c18 <user_i2c_read+0x44>)
 8003bee:	9600      	str	r6, [sp, #0]
 8003bf0:	f005 fef0 	bl	80099d4 <HAL_I2C_Master_Transmit>
 8003bf4:	b968      	cbnz	r0, 8003c12 <user_i2c_read+0x3e>
      if(HAL_I2C_Master_Receive(&hi2c1, (dev_id << 1) | 0x01, reg_data, len, 10) != HAL_OK) return -1;
 8003bf6:	462b      	mov	r3, r5
 8003bf8:	4622      	mov	r2, r4
 8003bfa:	f047 0101 	orr.w	r1, r7, #1
 8003bfe:	4806      	ldr	r0, [pc, #24]	; (8003c18 <user_i2c_read+0x44>)
 8003c00:	9600      	str	r6, [sp, #0]
 8003c02:	f005 ff7d 	bl	8009b00 <HAL_I2C_Master_Receive>
 8003c06:	3800      	subs	r0, #0
 8003c08:	bf18      	it	ne
 8003c0a:	2001      	movne	r0, #1
 8003c0c:	4240      	negs	r0, r0
    }
 8003c0e:	b005      	add	sp, #20
 8003c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(HAL_I2C_Master_Transmit(&hi2c1, (dev_id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 8003c12:	f04f 30ff 	mov.w	r0, #4294967295
 8003c16:	e7fa      	b.n	8003c0e <user_i2c_read+0x3a>
 8003c18:	2001214c 	.word	0x2001214c

08003c1c <user_delay_ms>:
      HAL_Delay(period);
 8003c1c:	f004 b960 	b.w	8007ee0 <HAL_Delay>

08003c20 <user_i2c_write>:
    {
 8003c20:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
      buf = malloc(len +1);
 8003c24:	f103 0801 	add.w	r8, r3, #1
    {
 8003c28:	461c      	mov	r4, r3
 8003c2a:	4606      	mov	r6, r0
 8003c2c:	460f      	mov	r7, r1
      buf = malloc(len +1);
 8003c2e:	4640      	mov	r0, r8
    {
 8003c30:	9203      	str	r2, [sp, #12]
      buf = malloc(len +1);
 8003c32:	f022 f955 	bl	8025ee0 <malloc>
      memcpy(buf +1, reg_data, len);
 8003c36:	4622      	mov	r2, r4
      buf = malloc(len +1);
 8003c38:	4605      	mov	r5, r0
      if(HAL_I2C_Master_Transmit(&hi2c1, (dev_id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 8003c3a:	f04f 34ff 	mov.w	r4, #4294967295
      memcpy(buf +1, reg_data, len);
 8003c3e:	9903      	ldr	r1, [sp, #12]
      buf[0] = reg_addr;
 8003c40:	f800 7b01 	strb.w	r7, [r0], #1
      memcpy(buf +1, reg_data, len);
 8003c44:	f022 f95c 	bl	8025f00 <memcpy>
      if(HAL_I2C_Master_Transmit(&hi2c1, (dev_id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 8003c48:	462a      	mov	r2, r5
 8003c4a:	0071      	lsls	r1, r6, #1
 8003c4c:	4808      	ldr	r0, [pc, #32]	; (8003c70 <user_i2c_write+0x50>)
 8003c4e:	fa1f f388 	uxth.w	r3, r8
 8003c52:	9400      	str	r4, [sp, #0]
 8003c54:	f005 febe 	bl	80099d4 <HAL_I2C_Master_Transmit>
 8003c58:	4606      	mov	r6, r0
 8003c5a:	b930      	cbnz	r0, 8003c6a <user_i2c_write+0x4a>
      free(buf);
 8003c5c:	4628      	mov	r0, r5
 8003c5e:	f022 f947 	bl	8025ef0 <free>
      return 0;
 8003c62:	4630      	mov	r0, r6
    }
 8003c64:	b004      	add	sp, #16
 8003c66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(HAL_I2C_Master_Transmit(&hi2c1, (dev_id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 8003c6a:	4620      	mov	r0, r4
 8003c6c:	e7fa      	b.n	8003c64 <user_i2c_write+0x44>
 8003c6e:	bf00      	nop
 8003c70:	2001214c 	.word	0x2001214c

08003c74 <QSPI_WriteEnable.constprop.0>:
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 8003c74:	b500      	push	{lr}
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003c76:	f44f 7340 	mov.w	r3, #768	; 0x300
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 8003c7a:	b095      	sub	sp, #84	; 0x54
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003c7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c80:	4817      	ldr	r0, [pc, #92]	; (8003ce0 <QSPI_WriteEnable.constprop.0+0x6c>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003c82:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8003c84:	2306      	movs	r3, #6
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003c86:	a906      	add	r1, sp, #24
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8003c88:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003c8a:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003c8c:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 8003c90:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DummyCycles       = 0;
 8003c92:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003c94:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003c96:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003c9a:	f007 fc31 	bl	800b500 <HAL_QSPI_Command>
 8003c9e:	b9e0      	cbnz	r0, 8003cda <QSPI_WriteEnable.constprop.0+0x66>
  s_config.Match           = MX25L512_SR_WREN;
 8003ca0:	2302      	movs	r3, #2
  s_config.Interval        = 0x10;
 8003ca2:	2201      	movs	r2, #1
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8003ca4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8003ca8:	9004      	str	r0, [sp, #16]
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003caa:	480d      	ldr	r0, [pc, #52]	; (8003ce0 <QSPI_WriteEnable.constprop.0+0x6c>)
  s_config.Mask            = MX25L512_SR_WREN;
 8003cac:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 8003cb0:	2310      	movs	r3, #16
 8003cb2:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8003cb6:	2305      	movs	r3, #5
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003cb8:	466a      	mov	r2, sp
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8003cba:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = QSPI_DATA_4_LINES;
 8003cbe:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003cc2:	a906      	add	r1, sp, #24
  s_command.DataMode       = QSPI_DATA_4_LINES;
 8003cc4:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003cc6:	f241 3388 	movw	r3, #5000	; 0x1388
 8003cca:	f007 fd14 	bl	800b6f6 <HAL_QSPI_AutoPolling>
    return QSPI_ERROR;
 8003cce:	3800      	subs	r0, #0
 8003cd0:	bf18      	it	ne
 8003cd2:	2001      	movne	r0, #1
}
 8003cd4:	b015      	add	sp, #84	; 0x54
 8003cd6:	f85d fb04 	ldr.w	pc, [sp], #4
    return QSPI_ERROR;
 8003cda:	2001      	movs	r0, #1
 8003cdc:	e7fa      	b.n	8003cd4 <QSPI_WriteEnable.constprop.0+0x60>
 8003cde:	bf00      	nop
 8003ce0:	200122f4 	.word	0x200122f4

08003ce4 <SystemClock_Config>:
{
 8003ce4:	b510      	push	{r4, lr}
 8003ce6:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ce8:	2210      	movs	r2, #16
 8003cea:	2100      	movs	r1, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003cec:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003cee:	a809      	add	r0, sp, #36	; 0x24
 8003cf0:	f022 f914 	bl	8025f1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003cf4:	2214      	movs	r2, #20
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	a802      	add	r0, sp, #8
 8003cfa:	f022 f90f 	bl	8025f1c <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8003cfe:	4b1e      	ldr	r3, [pc, #120]	; (8003d78 <SystemClock_Config+0x94>)
  RCC_OscInitStruct.PLL.PLLN = 400;
 8003d00:	2119      	movs	r1, #25
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003d02:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d06:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003d0a:	641a      	str	r2, [r3, #64]	; 0x40
 8003d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d12:	9300      	str	r3, [sp, #0]
 8003d14:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d16:	4b19      	ldr	r3, [pc, #100]	; (8003d7c <SystemClock_Config+0x98>)
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003d1e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003d20:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003d28:	9301      	str	r3, [sp, #4]
 8003d2a:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003d2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d30:	e9cd 2307 	strd	r2, r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003d34:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003d38:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 400;
 8003d3c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8003d40:	e9cd 130f 	strd	r1, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = 7;
 8003d44:	2307      	movs	r3, #7
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003d46:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLR = 7;
 8003d4a:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003d4c:	f007 fd64 	bl	800b818 <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003d50:	f007 fa72 	bl	800b238 <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003d54:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003d56:	2000      	movs	r0, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8003d58:	2106      	movs	r1, #6
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003d5a:	e9cd 3402 	strd	r3, r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003d5e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003d62:	e9cd 0304 	strd	r0, r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003d66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8003d6a:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003d6c:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8003d6e:	f007 ff47 	bl	800bc00 <HAL_RCC_ClockConfig>
}
 8003d72:	b014      	add	sp, #80	; 0x50
 8003d74:	bd10      	pop	{r4, pc}
 8003d76:	bf00      	nop
 8003d78:	40023800 	.word	0x40023800
 8003d7c:	40007000 	.word	0x40007000

08003d80 <MX_I2C4_Init>:
{
 8003d80:	b538      	push	{r3, r4, r5, lr}
  hi2c4.Init.Timing = 0x00C0EAFF;
 8003d82:	4a0d      	ldr	r2, [pc, #52]	; (8003db8 <MX_I2C4_Init+0x38>)
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003d84:	2500      	movs	r5, #0
  hi2c4.Instance = I2C4;
 8003d86:	4c0d      	ldr	r4, [pc, #52]	; (8003dbc <MX_I2C4_Init+0x3c>)
  hi2c4.Init.Timing = 0x00C0EAFF;
 8003d88:	4b0d      	ldr	r3, [pc, #52]	; (8003dc0 <MX_I2C4_Init+0x40>)
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8003d8a:	4620      	mov	r0, r4
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003d8c:	6225      	str	r5, [r4, #32]
  hi2c4.Init.Timing = 0x00C0EAFF;
 8003d8e:	e9c4 2300 	strd	r2, r3, [r4]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003d92:	2301      	movs	r3, #1
  hi2c4.Init.OwnAddress2 = 0;
 8003d94:	e9c4 5504 	strd	r5, r5, [r4, #16]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003d98:	e9c4 5302 	strd	r5, r3, [r4, #8]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003d9c:	e9c4 5506 	strd	r5, r5, [r4, #24]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8003da0:	f005 fdad 	bl	80098fe <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003da4:	4629      	mov	r1, r5
 8003da6:	4620      	mov	r0, r4
 8003da8:	f006 f901 	bl	8009fae <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8003dac:	4629      	mov	r1, r5
 8003dae:	4620      	mov	r0, r4
}
 8003db0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8003db4:	f006 b921 	b.w	8009ffa <HAL_I2CEx_ConfigDigitalFilter>
 8003db8:	40006000 	.word	0x40006000
 8003dbc:	200121a0 	.word	0x200121a0
 8003dc0:	00c0eaff 	.word	0x00c0eaff

08003dc4 <main>:
{
 8003dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dc8:	b0bd      	sub	sp, #244	; 0xf4

/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8003dca:	2210      	movs	r2, #16
 8003dcc:	2100      	movs	r1, #0
  /* Disables the MPU */
  HAL_MPU_Disable();

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8003dce:	2401      	movs	r4, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8003dd0:	a82e      	add	r0, sp, #184	; 0xb8

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.BaseAddress = 0x90000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 8003dd2:	261c      	movs	r6, #28
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8003dd4:	f022 f8a2 	bl	8025f1c <memset>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8003dd8:	2503      	movs	r5, #3
  HAL_MPU_Disable();
 8003dda:	f004 fb63 	bl	80084a4 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8003dde:	f04f 5e00 	mov.w	lr, #536870912	; 0x20000000
 8003de2:	4bcb      	ldr	r3, [pc, #812]	; (8004110 <main+0x34c>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003de4:	a82e      	add	r0, sp, #184	; 0xb8
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8003de6:	f8ad 40b8 	strh.w	r4, [sp, #184]	; 0xb8
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8003dea:	f240 1701 	movw	r7, #257	; 0x101
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8003dee:	e9cd e32f 	strd	lr, r3, [sp, #188]	; 0xbc
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8003df2:	4bc8      	ldr	r3, [pc, #800]	; (8004114 <main+0x350>)
 8003df4:	9331      	str	r3, [sp, #196]	; 0xc4
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003df6:	f004 fb73 	bl	80084e0 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x90000000;
 8003dfa:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8003dfe:	f88d 40b9 	strb.w	r4, [sp, #185]	; 0xb9
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8003e02:	2400      	movs	r4, #0
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003e04:	a82e      	add	r0, sp, #184	; 0xb8
  MPU_InitStruct.BaseAddress = 0x90000000;
 8003e06:	932f      	str	r3, [sp, #188]	; 0xbc
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 8003e08:	f88d 60c0 	strb.w	r6, [sp, #192]	; 0xc0
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8003e0c:	f88d 40c3 	strb.w	r4, [sp, #195]	; 0xc3
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8003e10:	f8ad 40c6 	strh.w	r4, [sp, #198]	; 0xc6
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003e14:	f004 fb64 	bl	80084e0 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8003e18:	2302      	movs	r3, #2
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003e1a:	a82e      	add	r0, sp, #184	; 0xb8
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8003e1c:	f88d 50c3 	strb.w	r5, [sp, #195]	; 0xc3
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8003e20:	f88d 30b9 	strb.w	r3, [sp, #185]	; 0xb9
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 8003e24:	2319      	movs	r3, #25
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8003e26:	f8ad 70c6 	strh.w	r7, [sp, #198]	; 0xc6
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 8003e2a:	f88d 30c0 	strb.w	r3, [sp, #192]	; 0xc0
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003e2e:	f004 fb57 	bl	80084e0 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
  MPU_InitStruct.BaseAddress = 0xC0000000;
 8003e32:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003e36:	a82e      	add	r0, sp, #184	; 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 8003e38:	f88d 60c0 	strb.w	r6, [sp, #192]	; 0xc0

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8003e3c:	2604      	movs	r6, #4
  MPU_InitStruct.BaseAddress = 0xC0000000;
 8003e3e:	932f      	str	r3, [sp, #188]	; 0xbc
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8003e40:	f88d 50b9 	strb.w	r5, [sp, #185]	; 0xb9
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8003e44:	f88d 40c3 	strb.w	r4, [sp, #195]	; 0xc3
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8003e48:	f8ad 40c6 	strh.w	r4, [sp, #198]	; 0xc6
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003e4c:	f004 fb48 	bl	80084e0 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8003e50:	2317      	movs	r3, #23
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003e52:	a82e      	add	r0, sp, #184	; 0xb8
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8003e54:	f88d 60b9 	strb.w	r6, [sp, #185]	; 0xb9
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8003e58:	f88d 30c0 	strb.w	r3, [sp, #192]	; 0xc0
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8003e5c:	f88d 50c3 	strb.w	r5, [sp, #195]	; 0xc3
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8003e60:	f8ad 70c6 	strh.w	r7, [sp, #198]	; 0xc6
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003e64:	f004 fb3c 	bl	80084e0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8003e68:	4630      	mov	r0, r6
 8003e6a:	f004 fb29 	bl	80084c0 <HAL_MPU_Enable>
  __ASM volatile ("dsb 0xF":::"memory");
 8003e6e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003e72:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8003e76:	4aa8      	ldr	r2, [pc, #672]	; (8004118 <main+0x354>)
 8003e78:	f8c2 4250 	str.w	r4, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8003e7c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003e80:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8003e84:	6953      	ldr	r3, [r2, #20]
 8003e86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e8a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8003e8c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003e90:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8003e94:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003e98:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8003e9c:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003ea0:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003ea4:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003ea8:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8003eac:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003eae:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003eb2:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003eb4:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 8003eb8:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003eba:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8003ebe:	d2f9      	bcs.n	8003eb4 <main+0xf0>
    } while(sets-- != 0U);
 8003ec0:	3b20      	subs	r3, #32
 8003ec2:	f113 0f20 	cmn.w	r3, #32
 8003ec6:	d1f2      	bne.n	8003eae <main+0xea>
 8003ec8:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8003ecc:	6953      	ldr	r3, [r2, #20]
 8003ece:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ed2:	6153      	str	r3, [r2, #20]
 8003ed4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003ed8:	f3bf 8f6f 	isb	sy
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003edc:	4e8f      	ldr	r6, [pc, #572]	; (800411c <main+0x358>)
  HAL_Init();
 8003ede:	f003 ffdb 	bl	8007e98 <HAL_Init>
  SystemClock_Config();
 8003ee2:	f7ff feff 	bl	8003ce4 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ee6:	2214      	movs	r2, #20
 8003ee8:	2100      	movs	r1, #0
 8003eea:	a82e      	add	r0, sp, #184	; 0xb8
 8003eec:	f022 f816 	bl	8025f1c <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003ef0:	6b33      	ldr	r3, [r6, #48]	; 0x30
  HAL_GPIO_WritePin(DSI_RESET_GPIO_Port, DSI_RESET_Pin, GPIO_PIN_SET);
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003ef8:	f043 0310 	orr.w	r3, r3, #16
  HAL_GPIO_WritePin(DSI_RESET_GPIO_Port, DSI_RESET_Pin, GPIO_PIN_SET);
 8003efc:	4888      	ldr	r0, [pc, #544]	; (8004120 <main+0x35c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003efe:	2501      	movs	r5, #1
 8003f00:	f44f 4700 	mov.w	r7, #32768	; 0x8000
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003f04:	6333      	str	r3, [r6, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f06:	2400      	movs	r4, #0
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003f08:	6b33      	ldr	r3, [r6, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f0a:	f04f 0b03 	mov.w	fp, #3
  GPIO_InitStruct.Pin = FRAME_RATE_Pin;
 8003f0e:	f04f 0802 	mov.w	r8, #2
  hdsi.Init.TXEscapeCkdiv = 4;
 8003f12:	f04f 0a04 	mov.w	sl, #4
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003f16:	f003 0310 	and.w	r3, r3, #16
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8003f1a:	f44f 7980 	mov.w	r9, #256	; 0x100
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003f1e:	9304      	str	r3, [sp, #16]
 8003f20:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f22:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8003f24:	f043 0302 	orr.w	r3, r3, #2
 8003f28:	6333      	str	r3, [r6, #48]	; 0x30
 8003f2a:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8003f2c:	f003 0302 	and.w	r3, r3, #2
 8003f30:	9305      	str	r3, [sp, #20]
 8003f32:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003f34:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8003f36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f3a:	6333      	str	r3, [r6, #48]	; 0x30
 8003f3c:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8003f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f42:	9306      	str	r3, [sp, #24]
 8003f44:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f46:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8003f48:	f043 0308 	orr.w	r3, r3, #8
 8003f4c:	6333      	str	r3, [r6, #48]	; 0x30
 8003f4e:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8003f50:	f003 0308 	and.w	r3, r3, #8
 8003f54:	9307      	str	r3, [sp, #28]
 8003f56:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f58:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8003f5a:	f043 0304 	orr.w	r3, r3, #4
 8003f5e:	6333      	str	r3, [r6, #48]	; 0x30
 8003f60:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8003f62:	f003 0304 	and.w	r3, r3, #4
 8003f66:	9308      	str	r3, [sp, #32]
 8003f68:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003f6a:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8003f6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f70:	6333      	str	r3, [r6, #48]	; 0x30
 8003f72:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8003f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f78:	9309      	str	r3, [sp, #36]	; 0x24
 8003f7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003f7c:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8003f7e:	f043 0320 	orr.w	r3, r3, #32
 8003f82:	6333      	str	r3, [r6, #48]	; 0x30
 8003f84:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8003f86:	f003 0320 	and.w	r3, r3, #32
 8003f8a:	930a      	str	r3, [sp, #40]	; 0x28
 8003f8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003f8e:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8003f90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f94:	6333      	str	r3, [r6, #48]	; 0x30
 8003f96:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8003f98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f9c:	930b      	str	r3, [sp, #44]	; 0x2c
 8003f9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003fa0:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8003fa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fa6:	6333      	str	r3, [r6, #48]	; 0x30
 8003fa8:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8003faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fae:	930c      	str	r3, [sp, #48]	; 0x30
 8003fb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fb2:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8003fb4:	f043 0301 	orr.w	r3, r3, #1
 8003fb8:	6333      	str	r3, [r6, #48]	; 0x30
 8003fba:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8003fbc:	f003 0301 	and.w	r3, r3, #1
 8003fc0:	930d      	str	r3, [sp, #52]	; 0x34
 8003fc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  HAL_GPIO_WritePin(DSI_RESET_GPIO_Port, DSI_RESET_Pin, GPIO_PIN_SET);
 8003fc4:	f005 fb2c 	bl	8009620 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8003fc8:	2200      	movs	r2, #0
 8003fca:	21c0      	movs	r1, #192	; 0xc0
 8003fcc:	4855      	ldr	r0, [pc, #340]	; (8004124 <main+0x360>)
 8003fce:	f005 fb27 	bl	8009620 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	2140      	movs	r1, #64	; 0x40
 8003fd6:	4854      	ldr	r0, [pc, #336]	; (8004128 <main+0x364>)
 8003fd8:	f005 fb22 	bl	8009620 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_RESET);
 8003fdc:	2200      	movs	r2, #0
 8003fde:	2102      	movs	r1, #2
 8003fe0:	484f      	ldr	r0, [pc, #316]	; (8004120 <main+0x35c>)
 8003fe2:	f005 fb1d 	bl	8009620 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(DSI_RESET_GPIO_Port, &GPIO_InitStruct);
 8003fe6:	a92e      	add	r1, sp, #184	; 0xb8
 8003fe8:	484d      	ldr	r0, [pc, #308]	; (8004120 <main+0x35c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fea:	e9cd 752e 	strd	r7, r5, [sp, #184]	; 0xb8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003fee:	e9cd 5530 	strd	r5, r5, [sp, #192]	; 0xc0
  HAL_GPIO_Init(DSI_RESET_GPIO_Port, &GPIO_InitStruct);
 8003ff2:	f005 f989 	bl	8009308 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RENDER_TIME_Pin|VSYNC_FREQ_Pin;
 8003ff6:	23c0      	movs	r3, #192	; 0xc0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ff8:	a92e      	add	r1, sp, #184	; 0xb8
 8003ffa:	484a      	ldr	r0, [pc, #296]	; (8004124 <main+0x360>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ffc:	e9cd 352e 	strd	r3, r5, [sp, #184]	; 0xb8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004000:	e9cd 4b30 	strd	r4, fp, [sp, #192]	; 0xc0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004004:	f005 f980 	bl	8009308 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin;
 8004008:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 800400a:	a92e      	add	r1, sp, #184	; 0xb8
 800400c:	4846      	ldr	r0, [pc, #280]	; (8004128 <main+0x364>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800400e:	e9cd 352e 	strd	r3, r5, [sp, #184]	; 0xb8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004012:	e9cd 4b30 	strd	r4, fp, [sp, #192]	; 0xc0
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8004016:	f005 f977 	bl	8009308 <HAL_GPIO_Init>
  HAL_GPIO_Init(FRAME_RATE_GPIO_Port, &GPIO_InitStruct);
 800401a:	a92e      	add	r1, sp, #184	; 0xb8
 800401c:	4840      	ldr	r0, [pc, #256]	; (8004120 <main+0x35c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800401e:	e9cd 852e 	strd	r8, r5, [sp, #184]	; 0xb8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004022:	e9cd 4b30 	strd	r4, fp, [sp, #192]	; 0xc0
  HAL_GPIO_Init(FRAME_RATE_GPIO_Port, &GPIO_InitStruct);
 8004026:	f005 f96f 	bl	8009308 <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 800402a:	6b33      	ldr	r3, [r6, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800402c:	4622      	mov	r2, r4
 800402e:	2105      	movs	r1, #5
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004030:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8004034:	2038      	movs	r0, #56	; 0x38
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004036:	6333      	str	r3, [r6, #48]	; 0x30
 8004038:	6b33      	ldr	r3, [r6, #48]	; 0x30
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 800403a:	2664      	movs	r6, #100	; 0x64
  __HAL_RCC_DMA2_CLK_ENABLE();
 800403c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004040:	9303      	str	r3, [sp, #12]
 8004042:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8004044:	f004 f9da 	bl	80083fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8004048:	2038      	movs	r0, #56	; 0x38
 800404a:	f004 fa09 	bl	8008460 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800404e:	4622      	mov	r2, r4
 8004050:	2105      	movs	r1, #5
 8004052:	2039      	movs	r0, #57	; 0x39
 8004054:	f004 f9d2 	bl	80083fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8004058:	2039      	movs	r0, #57	; 0x39
 800405a:	f004 fa01 	bl	8008460 <HAL_NVIC_EnableIRQ>
  HAL_GPIO_WritePin(DSI_RESET_GPIO_Port, DSI_RESET_Pin, GPIO_PIN_RESET);
 800405e:	4639      	mov	r1, r7
 8004060:	4622      	mov	r2, r4
 8004062:	482f      	ldr	r0, [pc, #188]	; (8004120 <main+0x35c>)
 8004064:	f005 fadc 	bl	8009620 <HAL_GPIO_WritePin>
  HAL_Delay(20); /* wait 20 ms */
 8004068:	2014      	movs	r0, #20
 800406a:	f003 ff39 	bl	8007ee0 <HAL_Delay>
  HAL_GPIO_WritePin(DSI_RESET_GPIO_Port, DSI_RESET_Pin, GPIO_PIN_SET);
 800406e:	4639      	mov	r1, r7
 8004070:	462a      	mov	r2, r5
 8004072:	482b      	ldr	r0, [pc, #172]	; (8004120 <main+0x35c>)
 8004074:	f005 fad4 	bl	8009620 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8004078:	200a      	movs	r0, #10
 800407a:	f003 ff31 	bl	8007ee0 <HAL_Delay>
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 800407e:	2224      	movs	r2, #36	; 0x24
 8004080:	4621      	mov	r1, r4
 8004082:	a817      	add	r0, sp, #92	; 0x5c
  DSI_PLLInitTypeDef PLLInit = {0};
 8004084:	9410      	str	r4, [sp, #64]	; 0x40
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8004086:	f021 ff49 	bl	8025f1c <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 800408a:	2218      	movs	r2, #24
 800408c:	4621      	mov	r1, r4
 800408e:	a811      	add	r0, sp, #68	; 0x44
  hdsi.Instance = DSI;
 8004090:	4f26      	ldr	r7, [pc, #152]	; (800412c <main+0x368>)
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8004092:	f021 ff43 	bl	8025f1c <memset>
  DSI_LPCmdTypeDef LPCmd = {0};
 8004096:	2234      	movs	r2, #52	; 0x34
 8004098:	4621      	mov	r1, r4
 800409a:	a82e      	add	r0, sp, #184	; 0xb8
 800409c:	f021 ff3e 	bl	8025f1c <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 80040a0:	222c      	movs	r2, #44	; 0x2c
 80040a2:	4621      	mov	r1, r4
 80040a4:	a820      	add	r0, sp, #128	; 0x80
 80040a6:	f021 ff39 	bl	8025f1c <memset>
  hdsi.Instance = DSI;
 80040aa:	4b21      	ldr	r3, [pc, #132]	; (8004130 <main+0x36c>)
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 80040ac:	a90e      	add	r1, sp, #56	; 0x38
 80040ae:	4638      	mov	r0, r7
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 80040b0:	e9c7 3400 	strd	r3, r4, [r7]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 80040b4:	2305      	movs	r3, #5
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 80040b6:	e9c7 a502 	strd	sl, r5, [r7, #8]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 80040ba:	e9cd 630e 	strd	r6, r3, [sp, #56]	; 0x38
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 80040be:	f004 fdd5 	bl	8008c6c <HAL_DSI_Init>
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 80040c2:	a917      	add	r1, sp, #92	; 0x5c
 80040c4:	4638      	mov	r0, r7
  HostTimeouts.BTATimeout = 0;
 80040c6:	941f      	str	r4, [sp, #124]	; 0x7c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 80040c8:	f44f 3600 	mov.w	r6, #131072	; 0x20000
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 80040cc:	e9cd 5417 	strd	r5, r4, [sp, #92]	; 0x5c
  HostTimeouts.HighSpeedReadTimeout = 0;
 80040d0:	e9cd 4419 	strd	r4, r4, [sp, #100]	; 0x64
  HostTimeouts.HighSpeedWriteTimeout = 0;
 80040d4:	e9cd 441b 	strd	r4, r4, [sp, #108]	; 0x6c
  HostTimeouts.LowPowerWriteTimeout = 0;
 80040d8:	e9cd 441d 	strd	r4, r4, [sp, #116]	; 0x74
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 80040dc:	f004 fff2 	bl	80090c4 <HAL_DSI_ConfigHostTimeouts>
  PhyTimings.ClockLaneLP2HSTime = 33;
 80040e0:	f04f 0c1c 	mov.w	ip, #28
 80040e4:	2321      	movs	r3, #33	; 0x21
  PhyTimings.DataLaneLP2HSTime = 25;
 80040e6:	f04f 0e0f 	mov.w	lr, #15
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 80040ea:	a911      	add	r1, sp, #68	; 0x44
 80040ec:	4638      	mov	r0, r7
  PhyTimings.ClockLaneLP2HSTime = 33;
 80040ee:	e9cd c311 	strd	ip, r3, [sp, #68]	; 0x44
  PhyTimings.DataLaneLP2HSTime = 25;
 80040f2:	2319      	movs	r3, #25
  PhyTimings.StopWaitTime = 0;
 80040f4:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
  PhyTimings.DataLaneLP2HSTime = 25;
 80040f8:	e9cd e313 	strd	lr, r3, [sp, #76]	; 0x4c
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 80040fc:	f004 ffa5 	bl	800904a <HAL_DSI_ConfigPhyTimer>
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8004100:	4651      	mov	r1, sl
 8004102:	4638      	mov	r0, r7
 8004104:	f004 ff90 	bl	8009028 <HAL_DSI_ConfigFlowControl>
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8004108:	f242 7110 	movw	r1, #10000	; 0x2710
 800410c:	4638      	mov	r0, r7
 800410e:	e011      	b.n	8004134 <main+0x370>
 8004110:	03000012 	.word	0x03000012
 8004114:	01010001 	.word	0x01010001
 8004118:	e000ed00 	.word	0xe000ed00
 800411c:	40023800 	.word	0x40023800
 8004120:	40022400 	.word	0x40022400
 8004124:	40020800 	.word	0x40020800
 8004128:	40021400 	.word	0x40021400
 800412c:	20012130 	.word	0x20012130
 8004130:	40016c00 	.word	0x40016c00
 8004134:	f005 f8d1 	bl	80092da <HAL_DSI_SetLowPowerRXFilter>
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_OVF) != HAL_OK)
 8004138:	f44f 7180 	mov.w	r1, #256	; 0x100
 800413c:	4638      	mov	r0, r7
 800413e:	f004 fd32 	bl	8008ba6 <HAL_DSI_ConfigErrorMonitor>
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8004142:	f44f 7300 	mov.w	r3, #512	; 0x200
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8004146:	f44f 6280 	mov.w	r2, #1024	; 0x400
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 800414a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 800414e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8004152:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8004156:	f8cd 80e8 	str.w	r8, [sp, #232]	; 0xe8
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 800415a:	e9cd 932e 	strd	r9, r3, [sp, #184]	; 0xb8
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 800415e:	f44f 6300 	mov.w	r3, #2048	; 0x800
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8004162:	f04f 0910 	mov.w	r9, #16
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8004166:	e9cd 2330 	strd	r2, r3, [sp, #192]	; 0xc0
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 800416a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800416e:	e9cd 1332 	strd	r1, r3, [sp, #200]	; 0xc8
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8004172:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8004176:	a92e      	add	r1, sp, #184	; 0xb8
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8004178:	e9cd 0334 	strd	r0, r3, [sp, #208]	; 0xd0
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 800417c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8004180:	4638      	mov	r0, r7
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8004182:	e9cd 6336 	strd	r6, r3, [sp, #216]	; 0xd8
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8004186:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  hltdc.Instance = LTDC;
 800418a:	4ec9      	ldr	r6, [pc, #804]	; (80044b0 <main+0x6ec>)
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 800418c:	e9cd c338 	strd	ip, r3, [sp, #224]	; 0xe0
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8004190:	f004 ff16 	bl	8008fc0 <HAL_DSI_ConfigCommand>
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8004194:	23c8      	movs	r3, #200	; 0xc8
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8004196:	a920      	add	r1, sp, #128	; 0x80
 8004198:	4638      	mov	r0, r7
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 800419a:	952a      	str	r5, [sp, #168]	; 0xa8
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 800419c:	e9cd 3922 	strd	r3, r9, [sp, #136]	; 0x88
  CmdCfg.ColorCoding = DSI_RGB565;
 80041a0:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 80041a4:	e9cd 4a24 	strd	r4, sl, [sp, #144]	; 0x90
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 80041a8:	e9cd 8426 	strd	r8, r4, [sp, #152]	; 0x98
  CmdCfg.AutomaticRefresh = DSI_AR_DISABLE;
 80041ac:	e9cd 4428 	strd	r4, r4, [sp, #160]	; 0xa0
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 80041b0:	f004 fe94 	bl	8008edc <HAL_DSI_ConfigAdaptedCommandMode>
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 80041b4:	4621      	mov	r1, r4
 80041b6:	4638      	mov	r0, r7
 80041b8:	f004 fe7f 	bl	8008eba <HAL_DSI_SetGenericVCID>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80041bc:	4621      	mov	r1, r4
 80041be:	2234      	movs	r2, #52	; 0x34
 80041c0:	a820      	add	r0, sp, #128	; 0x80
 80041c2:	f021 feab 	bl	8025f1c <memset>
  hltdc.Instance = LTDC;
 80041c6:	4abb      	ldr	r2, [pc, #748]	; (80044b4 <main+0x6f0>)
  hltdc.Init.AccumulatedActiveH = 482;
 80041c8:	f04f 0eca 	mov.w	lr, #202	; 0xca
  hltdc.Init.TotalHeigh = 483;
 80041cc:	23cb      	movs	r3, #203	; 0xcb
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80041ce:	4630      	mov	r0, r6
  hltdc.Init.Backcolor.Blue = 0;
 80041d0:	86b4      	strh	r4, [r6, #52]	; 0x34
  hltdc.Init.AccumulatedVBP = 2;
 80041d2:	f8c6 8020 	str.w	r8, [r6, #32]
  hltdc.Init.Backcolor.Red = 0;
 80041d6:	f886 4036 	strb.w	r4, [r6, #54]	; 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80041da:	e9c6 2400 	strd	r2, r4, [r6]
  hltdc.Init.AccumulatedActiveH = 482;
 80041de:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80041e2:	e9c6 e209 	strd	lr, r2, [r6, #36]	; 0x24
  hltdc.Init.TotalHeigh = 483;
 80041e6:	f240 12e3 	movw	r2, #483	; 0x1e3
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80041ea:	e9c6 4402 	strd	r4, r4, [r6, #8]
  hltdc.Init.TotalHeigh = 483;
 80041ee:	e9c6 320b 	strd	r3, r2, [r6, #44]	; 0x2c
  hltdc.Init.HorizontalSync = 1;
 80041f2:	e9c6 4504 	strd	r4, r5, [r6, #16]
  hltdc.Init.AccumulatedHBP = 2;
 80041f6:	e9c6 5806 	strd	r5, r8, [r6, #24]
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80041fa:	f006 fee7 	bl	800afcc <HAL_LTDC_Init>
  pLayerCfg.Alpha = 255;
 80041fe:	21ff      	movs	r1, #255	; 0xff
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8004200:	f44f 6080 	mov.w	r0, #1024	; 0x400
  pLayerCfg.WindowX1 = 200;
 8004204:	23c8      	movs	r3, #200	; 0xc8
  pLayerCfg.WindowY1 = 480;
 8004206:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  pLayerCfg.WindowX0 = 0;
 800420a:	9420      	str	r4, [sp, #128]	; 0x80
  pLayerCfg.Backcolor.Blue = 0;
 800420c:	f8ad 40b0 	strh.w	r4, [sp, #176]	; 0xb0
  pLayerCfg.ImageHeight = 480;
 8004210:	922b      	str	r2, [sp, #172]	; 0xac
  pLayerCfg.Backcolor.Red = 0;
 8004212:	f88d 40b2 	strb.w	r4, [sp, #178]	; 0xb2
  pLayerCfg.Alpha0 = 0;
 8004216:	e9cd 1425 	strd	r1, r4, [sp, #148]	; 0x94
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800421a:	2105      	movs	r1, #5
 800421c:	e9cd 0127 	strd	r0, r1, [sp, #156]	; 0x9c
  pLayerCfg.FBStartAdress = 0xC0000000;
 8004220:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8004224:	4630      	mov	r0, r6
  pLayerCfg.ImageWidth = 200;
 8004226:	e9cd 1329 	strd	r1, r3, [sp, #164]	; 0xa4
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800422a:	e9cd 2823 	strd	r2, r8, [sp, #140]	; 0x8c
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800422e:	a920      	add	r1, sp, #128	; 0x80
 8004230:	4622      	mov	r2, r4
  pLayerCfg.WindowY0 = 0;
 8004232:	e9cd 3421 	strd	r3, r4, [sp, #132]	; 0x84
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8004236:	f006 ff95 	bl	800b164 <HAL_LTDC_ConfigLayer>
  __HAL_LTDC_DISABLE(&hltdc);
 800423a:	6832      	ldr	r2, [r6, #0]
  HAL_DSI_Start(&hdsi);
 800423c:	4638      	mov	r0, r7
  __HAL_LTDC_DISABLE(&hltdc);
 800423e:	6993      	ldr	r3, [r2, #24]
 8004240:	f023 0301 	bic.w	r3, r3, #1
 8004244:	6193      	str	r3, [r2, #24]
  HAL_DSI_Start(&hdsi);
 8004246:	f004 ffa3 	bl	8009190 <HAL_DSI_Start>
  OTM8009A_Init(OTM8009A_FORMAT_RBG565, LCD_ORIENTATION_LANDSCAPE);
 800424a:	4629      	mov	r1, r5
 800424c:	4640      	mov	r0, r8
 800424e:	f003 fbb1 	bl	80079b4 <OTM8009A_Init>
  HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPOFF, 0x00);
 8004252:	2328      	movs	r3, #40	; 0x28
 8004254:	2215      	movs	r2, #21
 8004256:	4621      	mov	r1, r4
 8004258:	4638      	mov	r0, r7
 800425a:	9400      	str	r4, [sp, #0]
 800425c:	f004 ffcb 	bl	80091f6 <HAL_DSI_ShortWrite>
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8004260:	a92e      	add	r1, sp, #184	; 0xb8
 8004262:	4638      	mov	r0, r7
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8004264:	9438      	str	r4, [sp, #224]	; 0xe0
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8004266:	2720      	movs	r7, #32
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8004268:	e9cd 442e 	strd	r4, r4, [sp, #184]	; 0xb8
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 800426c:	e9cd 4430 	strd	r4, r4, [sp, #192]	; 0xc0
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8004270:	e9cd 4432 	strd	r4, r4, [sp, #200]	; 0xc8
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8004274:	e9cd 4434 	strd	r4, r4, [sp, #208]	; 0xd0
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8004278:	e9cd 4436 	strd	r4, r4, [sp, #216]	; 0xd8
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 800427c:	f004 fea0 	bl	8008fc0 <HAL_DSI_ConfigCommand>
  HAL_LTDC_SetPitch(&hltdc, 800, 0);
 8004280:	4622      	mov	r2, r4
 8004282:	f44f 7148 	mov.w	r1, #800	; 0x320
 8004286:	4630      	mov	r0, r6
 8004288:	f006 ff9a 	bl	800b1c0 <HAL_LTDC_SetPitch>
  __HAL_LTDC_ENABLE(&hltdc);
 800428c:	6832      	ldr	r2, [r6, #0]
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800428e:	4e8a      	ldr	r6, [pc, #552]	; (80044b8 <main+0x6f4>)
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8004290:	f44f 6c00 	mov.w	ip, #2048	; 0x800
  __HAL_LTDC_ENABLE(&hltdc);
 8004294:	6993      	ldr	r3, [r2, #24]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8004296:	a92e      	add	r1, sp, #184	; 0xb8
 8004298:	4630      	mov	r0, r6
  __HAL_LTDC_ENABLE(&hltdc);
 800429a:	432b      	orrs	r3, r5
 800429c:	6193      	str	r3, [r2, #24]
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800429e:	4b87      	ldr	r3, [pc, #540]	; (80044bc <main+0x6f8>)
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80042a0:	62b4      	str	r4, [r6, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 2;
 80042a2:	f8cd 80b8 	str.w	r8, [sp, #184]	; 0xb8
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80042a6:	e9c6 3400 	strd	r3, r4, [r6]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80042aa:	2340      	movs	r3, #64	; 0x40
 80042ac:	e9c6 7304 	strd	r7, r3, [r6, #16]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80042b0:	f44f 73c0 	mov.w	r3, #384	; 0x180
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE;
 80042b4:	f44f 7740 	mov.w	r7, #768	; 0x300
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80042b8:	e9c6 3406 	strd	r3, r4, [r6, #24]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80042bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042c0:	e9c6 c308 	strd	ip, r3, [r6, #32]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80042c4:	2307      	movs	r3, #7
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80042c6:	e9c6 4a02 	strd	r4, sl, [r6, #8]
  SdramTiming.SelfRefreshTime = 4;
 80042ca:	e9cd 3a2f 	strd	r3, sl, [sp, #188]	; 0xbc
  SdramTiming.WriteRecoveryTime = 2;
 80042ce:	e9cd 3831 	strd	r3, r8, [sp, #196]	; 0xc4
  SdramTiming.RCDDelay = 3;
 80042d2:	e9cd 8b33 	strd	r8, fp, [sp, #204]	; 0xcc
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80042d6:	f008 f80d 	bl	800c2f4 <HAL_SDRAM_Init>
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80042da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042de:	a920      	add	r1, sp, #128	; 0x80
 80042e0:	4630      	mov	r0, r6
 __IO uint32_t tmpmrd = 0;
 80042e2:	9411      	str	r4, [sp, #68]	; 0x44
    Command->CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 80042e4:	e9cd 5920 	strd	r5, r9, [sp, #128]	; 0x80
    Command->ModeRegisterDefinition = 0;
 80042e8:	e9cd 5422 	strd	r5, r4, [sp, #136]	; 0x88
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80042ec:	f008 f822 	bl	800c334 <HAL_SDRAM_SendCommand>
    HAL_Delay(1);
 80042f0:	4628      	mov	r0, r5
 80042f2:	f003 fdf5 	bl	8007ee0 <HAL_Delay>
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80042f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042fa:	a920      	add	r1, sp, #128	; 0x80
 80042fc:	4630      	mov	r0, r6
    Command->CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80042fe:	e9cd 8920 	strd	r8, r9, [sp, #128]	; 0x80
    Command->ModeRegisterDefinition = 0;
 8004302:	e9cd 5422 	strd	r5, r4, [sp, #136]	; 0x88
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8004306:	f008 f815 	bl	800c334 <HAL_SDRAM_SendCommand>
    Command->AutoRefreshNumber      = 8;
 800430a:	2308      	movs	r3, #8
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800430c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004310:	a920      	add	r1, sp, #128	; 0x80
 8004312:	4630      	mov	r0, r6
    Command->ModeRegisterDefinition = 0;
 8004314:	e9cd 3422 	strd	r3, r4, [sp, #136]	; 0x88
    Command->CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004318:	e9cd b920 	strd	fp, r9, [sp, #128]	; 0x80
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800431c:	f008 f80a 	bl	800c334 <HAL_SDRAM_SendCommand>
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          | \
 8004320:	f44f 730c 	mov.w	r3, #560	; 0x230
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8004324:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004328:	a920      	add	r1, sp, #128	; 0x80
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          | \
 800432a:	9311      	str	r3, [sp, #68]	; 0x44
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800432c:	4630      	mov	r0, r6
    Command->ModeRegisterDefinition = tmpmrd;
 800432e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    Command->AutoRefreshNumber      = 1;
 8004330:	9522      	str	r5, [sp, #136]	; 0x88
    Command->ModeRegisterDefinition = tmpmrd;
 8004332:	9323      	str	r3, [sp, #140]	; 0x8c
    Command->CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004334:	e9cd a920 	strd	sl, r9, [sp, #128]	; 0x80
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8004338:	f007 fffc 	bl	800c334 <HAL_SDRAM_SendCommand>
    HAL_SDRAM_ProgramRefreshRate(hsdram, REFRESH_COUNT);
 800433c:	f240 712a 	movw	r1, #1834	; 0x72a
 8004340:	4630      	mov	r0, r6
  hqspi.Instance = QUADSPI;
 8004342:	4e5f      	ldr	r6, [pc, #380]	; (80044c0 <main+0x6fc>)
    HAL_SDRAM_ProgramRefreshRate(hsdram, REFRESH_COUNT);
 8004344:	f008 f815 	bl	800c372 <HAL_SDRAM_ProgramRefreshRate>
  FMC_Bank1->BTCR[0] = 0x000030D2;
 8004348:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800434c:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8004350:	4630      	mov	r0, r6
  FMC_Bank1->BTCR[0] = 0x000030D2;
 8004352:	601a      	str	r2, [r3, #0]
  hqspi.Instance = QUADSPI;
 8004354:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8004358:	6234      	str	r4, [r6, #32]
  hqspi.Init.ClockPrescaler = 1;
 800435a:	e9c6 3500 	strd	r3, r5, [r6]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE;
 800435e:	2319      	movs	r3, #25
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8004360:	e9c6 9902 	strd	r9, r9, [r6, #8]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE;
 8004364:	e9c6 3704 	strd	r3, r7, [r6, #16]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8004368:	e9c6 4406 	strd	r4, r4, [r6, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800436c:	f007 f874 	bl	800b458 <HAL_QSPI_Init>
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8004370:	9734      	str	r7, [sp, #208]	; 0xd0
  s_command.Instruction       = RESET_ENABLE_CMD;
 8004372:	2766      	movs	r7, #102	; 0x66
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004374:	f241 3288 	movw	r2, #5000	; 0x1388
 8004378:	a92e      	add	r1, sp, #184	; 0xb8
 800437a:	4630      	mov	r0, r6
  s_command.Instruction       = RESET_ENABLE_CMD;
 800437c:	972e      	str	r7, [sp, #184]	; 0xb8
  s_command.DataMode          = QSPI_DATA_NONE;
 800437e:	9437      	str	r4, [sp, #220]	; 0xdc
  s_command.DummyCycles       = 0;
 8004380:	9433      	str	r4, [sp, #204]	; 0xcc
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004382:	943b      	str	r4, [sp, #236]	; 0xec
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004384:	e9cd 4435 	strd	r4, r4, [sp, #212]	; 0xd4
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004388:	e9cd 4439 	strd	r4, r4, [sp, #228]	; 0xe4
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800438c:	f007 f8b8 	bl	800b500 <HAL_QSPI_Command>
 8004390:	2800      	cmp	r0, #0
 8004392:	f040 80ba 	bne.w	800450a <main+0x746>
  s_command.Instruction = RESET_MEMORY_CMD;
 8004396:	2499      	movs	r4, #153	; 0x99
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004398:	f241 3288 	movw	r2, #5000	; 0x1388
 800439c:	a92e      	add	r1, sp, #184	; 0xb8
 800439e:	4630      	mov	r0, r6
  s_command.Instruction = RESET_MEMORY_CMD;
 80043a0:	942e      	str	r4, [sp, #184]	; 0xb8
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80043a2:	f007 f8ad 	bl	800b500 <HAL_QSPI_Command>
 80043a6:	2800      	cmp	r0, #0
 80043a8:	f040 80af 	bne.w	800450a <main+0x746>
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80043ac:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80043b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80043b4:	a92e      	add	r1, sp, #184	; 0xb8
 80043b6:	4630      	mov	r0, r6
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80043b8:	9334      	str	r3, [sp, #208]	; 0xd0
  s_command.Instruction       = RESET_ENABLE_CMD;
 80043ba:	972e      	str	r7, [sp, #184]	; 0xb8
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80043bc:	f007 f8a0 	bl	800b500 <HAL_QSPI_Command>
 80043c0:	2800      	cmp	r0, #0
 80043c2:	f040 80a2 	bne.w	800450a <main+0x746>
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80043c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80043ca:	a92e      	add	r1, sp, #184	; 0xb8
 80043cc:	4630      	mov	r0, r6
  s_command.Instruction = RESET_MEMORY_CMD;
 80043ce:	942e      	str	r4, [sp, #184]	; 0xb8
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80043d0:	f007 f896 	bl	800b500 <HAL_QSPI_Command>
 80043d4:	4604      	mov	r4, r0
 80043d6:	2800      	cmp	r0, #0
 80043d8:	f040 8097 	bne.w	800450a <main+0x746>
  HAL_Delay( 1000 );
 80043dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80043e0:	f003 fd7e 	bl	8007ee0 <HAL_Delay>
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80043e4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80043e8:	aa20      	add	r2, sp, #128	; 0x80
 80043ea:	a92e      	add	r1, sp, #184	; 0xb8
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80043ec:	9325      	str	r3, [sp, #148]	; 0x94
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80043ee:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80043f2:	4630      	mov	r0, r6
  s_config.Interval        = 0x10;
 80043f4:	f8cd 9088 	str.w	r9, [sp, #136]	; 0x88
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80043f8:	9334      	str	r3, [sp, #208]	; 0xd0
  s_command.Instruction     = READ_STATUS_REG_CMD;
 80043fa:	2305      	movs	r3, #5
 80043fc:	932e      	str	r3, [sp, #184]	; 0xb8
  s_command.DataMode        = QSPI_DATA_1_LINE;
 80043fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004402:	9337      	str	r3, [sp, #220]	; 0xdc
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004404:	f241 3388 	movw	r3, #5000	; 0x1388
  s_config.Mask            = MX25L512_SR_WIP;
 8004408:	e9cd 4520 	strd	r4, r5, [sp, #128]	; 0x80
  s_config.StatusBytesSize = 1;
 800440c:	e9cd 5423 	strd	r5, r4, [sp, #140]	; 0x8c
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004410:	f007 f971 	bl	800b6f6 <HAL_QSPI_AutoPolling>
 8004414:	2800      	cmp	r0, #0
 8004416:	d178      	bne.n	800450a <main+0x746>
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004418:	f44f 7380 	mov.w	r3, #256	; 0x100
  s_command.DummyCycles       = 0;
 800441c:	9033      	str	r0, [sp, #204]	; 0xcc
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800441e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004422:	a92e      	add	r1, sp, #184	; 0xb8
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004424:	9334      	str	r3, [sp, #208]	; 0xd0
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8004426:	2305      	movs	r3, #5
 8004428:	932e      	str	r3, [sp, #184]	; 0xb8
  s_command.DataMode          = QSPI_DATA_1_LINE;
 800442a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800442e:	e9cd 0035 	strd	r0, r0, [sp, #212]	; 0xd4
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8004432:	e9cd 5038 	strd	r5, r0, [sp, #224]	; 0xe0
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004436:	e9cd 003a 	strd	r0, r0, [sp, #232]	; 0xe8
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800443a:	4630      	mov	r0, r6
  s_command.DataMode          = QSPI_DATA_1_LINE;
 800443c:	9337      	str	r3, [sp, #220]	; 0xdc
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800443e:	f007 f85f 	bl	800b500 <HAL_QSPI_Command>
 8004442:	2800      	cmp	r0, #0
 8004444:	d161      	bne.n	800450a <main+0x746>
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004446:	f241 3288 	movw	r2, #5000	; 0x1388
 800444a:	a917      	add	r1, sp, #92	; 0x5c
 800444c:	4630      	mov	r0, r6
 800444e:	f007 f8f3 	bl	800b638 <HAL_QSPI_Receive>
 8004452:	2800      	cmp	r0, #0
 8004454:	d159      	bne.n	800450a <main+0x746>
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004456:	f44f 7380 	mov.w	r3, #256	; 0x100
  s_command.DataMode          = QSPI_DATA_NONE;
 800445a:	9037      	str	r0, [sp, #220]	; 0xdc
  s_command.DummyCycles       = 0;
 800445c:	9033      	str	r0, [sp, #204]	; 0xcc
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800445e:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004462:	9334      	str	r3, [sp, #208]	; 0xd0
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8004464:	2306      	movs	r3, #6
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004466:	903b      	str	r0, [sp, #236]	; 0xec
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004468:	a92e      	add	r1, sp, #184	; 0xb8
  s_command.Instruction       = WRITE_ENABLE_CMD;
 800446a:	932e      	str	r3, [sp, #184]	; 0xb8
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800446c:	e9cd 0035 	strd	r0, r0, [sp, #212]	; 0xd4
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004470:	e9cd 0039 	strd	r0, r0, [sp, #228]	; 0xe4
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004474:	4630      	mov	r0, r6
 8004476:	f007 f843 	bl	800b500 <HAL_QSPI_Command>
 800447a:	2800      	cmp	r0, #0
 800447c:	d145      	bne.n	800450a <main+0x746>
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800447e:	2300      	movs	r3, #0
  s_config.StatusBytesSize = 1;
 8004480:	462c      	mov	r4, r5
 8004482:	9523      	str	r5, [sp, #140]	; 0x8c
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8004484:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8004488:	9324      	str	r3, [sp, #144]	; 0x90
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800448a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800448e:	aa20      	add	r2, sp, #128	; 0x80
 8004490:	a92e      	add	r1, sp, #184	; 0xb8
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8004492:	9325      	str	r3, [sp, #148]	; 0x94
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8004494:	2305      	movs	r3, #5
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004496:	4630      	mov	r0, r6
  s_config.Interval        = 0x10;
 8004498:	f8cd 9088 	str.w	r9, [sp, #136]	; 0x88
  s_command.Instruction    = READ_STATUS_REG_CMD;
 800449c:	932e      	str	r3, [sp, #184]	; 0xb8
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800449e:	f241 3388 	movw	r3, #5000	; 0x1388
  s_command.DataMode       = QSPI_DATA_1_LINE;
 80044a2:	9537      	str	r5, [sp, #220]	; 0xdc
  s_config.Mask            = MX25L512_SR_WREN;
 80044a4:	e9cd 8820 	strd	r8, r8, [sp, #128]	; 0x80
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80044a8:	f007 f925 	bl	800b6f6 <HAL_QSPI_AutoPolling>
 80044ac:	bb68      	cbnz	r0, 800450a <main+0x746>
 80044ae:	e009      	b.n	80044c4 <main+0x700>
 80044b0:	2001224c 	.word	0x2001224c
 80044b4:	40016800 	.word	0x40016800
 80044b8:	20012340 	.word	0x20012340
 80044bc:	a0000140 	.word	0xa0000140
 80044c0:	200122f4 	.word	0x200122f4
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80044c4:	f44f 7380 	mov.w	r3, #256	; 0x100
  s_command.DummyCycles       = 0;
 80044c8:	9033      	str	r0, [sp, #204]	; 0xcc
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80044ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ce:	a92e      	add	r1, sp, #184	; 0xb8
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80044d0:	9334      	str	r3, [sp, #208]	; 0xd0
  reg |= MX25L512_SR_QUADEN;
 80044d2:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
  s_command.Instruction       = WRITE_STATUS_CFG_REG_CMD;
 80044d6:	942e      	str	r4, [sp, #184]	; 0xb8
  reg |= MX25L512_SR_QUADEN;
 80044d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  s_command.DataMode          = QSPI_DATA_1_LINE;
 80044dc:	9537      	str	r5, [sp, #220]	; 0xdc
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80044de:	e9cd 0035 	strd	r0, r0, [sp, #212]	; 0xd4
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80044e2:	e9cd 4038 	strd	r4, r0, [sp, #224]	; 0xe0
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80044e6:	e9cd 003a 	strd	r0, r0, [sp, #232]	; 0xe8
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80044ea:	4630      	mov	r0, r6
  reg |= MX25L512_SR_QUADEN;
 80044ec:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80044f0:	f007 f806 	bl	800b500 <HAL_QSPI_Command>
 80044f4:	b948      	cbnz	r0, 800450a <main+0x746>
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80044f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044fa:	a917      	add	r1, sp, #92	; 0x5c
 80044fc:	4630      	mov	r0, r6
 80044fe:	f007 f842 	bl	800b586 <HAL_QSPI_Transmit>
 8004502:	b910      	cbnz	r0, 800450a <main+0x746>
  HAL_Delay( 40 );
 8004504:	2028      	movs	r0, #40	; 0x28
 8004506:	f003 fceb 	bl	8007ee0 <HAL_Delay>
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800450a:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800450e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004512:	a92e      	add	r1, sp, #184	; 0xb8
 8004514:	48b6      	ldr	r0, [pc, #728]	; (80047f0 <main+0xa2c>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004516:	9334      	str	r3, [sp, #208]	; 0xd0
  s_command.Instruction       = ENTER_QUAD_CMD;
 8004518:	2335      	movs	r3, #53	; 0x35
 800451a:	932e      	str	r3, [sp, #184]	; 0xb8
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800451c:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800451e:	e9cd 3335 	strd	r3, r3, [sp, #212]	; 0xd4
  s_command.DataMode          = QSPI_DATA_NONE;
 8004522:	9337      	str	r3, [sp, #220]	; 0xdc
  s_command.DummyCycles       = 0;
 8004524:	9333      	str	r3, [sp, #204]	; 0xcc
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004526:	933b      	str	r3, [sp, #236]	; 0xec
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004528:	e9cd 3339 	strd	r3, r3, [sp, #228]	; 0xe4
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800452c:	f006 ffe8 	bl	800b500 <HAL_QSPI_Command>
 8004530:	b9d0      	cbnz	r0, 8004568 <main+0x7a4>
  s_config.Mask            = MX25L512_SR_QUADEN|MX25L512_SR_WIP;
 8004532:	2140      	movs	r1, #64	; 0x40
 8004534:	2341      	movs	r3, #65	; 0x41
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8004536:	9024      	str	r0, [sp, #144]	; 0x90
  s_config.Interval        = 0x10;
 8004538:	2001      	movs	r0, #1
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800453a:	aa20      	add	r2, sp, #128	; 0x80
  s_config.Mask            = MX25L512_SR_QUADEN|MX25L512_SR_WIP;
 800453c:	e9cd 1320 	strd	r1, r3, [sp, #128]	; 0x80
  s_config.Interval        = 0x10;
 8004540:	2310      	movs	r3, #16
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004542:	a92e      	add	r1, sp, #184	; 0xb8
  s_config.Interval        = 0x10;
 8004544:	e9cd 3022 	strd	r3, r0, [sp, #136]	; 0x88
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8004548:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800454c:	48a8      	ldr	r0, [pc, #672]	; (80047f0 <main+0xa2c>)
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800454e:	9325      	str	r3, [sp, #148]	; 0x94
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8004550:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004554:	9334      	str	r3, [sp, #208]	; 0xd0
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8004556:	2305      	movs	r3, #5
 8004558:	932e      	str	r3, [sp, #184]	; 0xb8
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800455a:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800455e:	9337      	str	r3, [sp, #220]	; 0xdc
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004560:	f241 3388 	movw	r3, #5000	; 0x1388
 8004564:	f007 f8c7 	bl	800b6f6 <HAL_QSPI_AutoPolling>
  s_command.Instruction       = ENTER_4_BYTE_ADDR_MODE_CMD;
 8004568:	23b7      	movs	r3, #183	; 0xb7
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800456a:	f44f 7440 	mov.w	r4, #768	; 0x300
  s_command.Instruction       = ENTER_4_BYTE_ADDR_MODE_CMD;
 800456e:	9320      	str	r3, [sp, #128]	; 0x80
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004570:	2300      	movs	r3, #0
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8004572:	9426      	str	r4, [sp, #152]	; 0x98
  s_command.DataMode          = QSPI_DATA_NONE;
 8004574:	9329      	str	r3, [sp, #164]	; 0xa4
  s_command.DummyCycles       = 0;
 8004576:	9325      	str	r3, [sp, #148]	; 0x94
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004578:	932d      	str	r3, [sp, #180]	; 0xb4
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800457a:	e9cd 3327 	strd	r3, r3, [sp, #156]	; 0x9c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800457e:	e9cd 332b 	strd	r3, r3, [sp, #172]	; 0xac
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 8004582:	f7ff fb77 	bl	8003c74 <QSPI_WriteEnable.constprop.0>
 8004586:	bb18      	cbnz	r0, 80045d0 <main+0x80c>
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004588:	f241 3288 	movw	r2, #5000	; 0x1388
 800458c:	a920      	add	r1, sp, #128	; 0x80
 800458e:	4898      	ldr	r0, [pc, #608]	; (80047f0 <main+0xa2c>)
 8004590:	f006 ffb6 	bl	800b500 <HAL_QSPI_Command>
 8004594:	b9e0      	cbnz	r0, 80045d0 <main+0x80c>
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8004596:	2305      	movs	r3, #5
  s_command.DummyCycles       = 0;
 8004598:	9033      	str	r0, [sp, #204]	; 0xcc
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800459a:	903b      	str	r0, [sp, #236]	; 0xec
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 800459c:	aa17      	add	r2, sp, #92	; 0x5c
  s_command.Instruction       = READ_STATUS_REG_CMD;
 800459e:	932e      	str	r3, [sp, #184]	; 0xb8
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80045a0:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
  s_config.Match           = 0;
 80045a4:	9017      	str	r0, [sp, #92]	; 0x5c
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 80045a6:	a92e      	add	r1, sp, #184	; 0xb8
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80045a8:	9337      	str	r3, [sp, #220]	; 0xdc
  s_config.Mask            = MX25L512_SR_WIP;
 80045aa:	2301      	movs	r3, #1
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80045ac:	9434      	str	r4, [sp, #208]	; 0xd0
  s_config.Mask            = MX25L512_SR_WIP;
 80045ae:	9318      	str	r3, [sp, #96]	; 0x60
  s_config.StatusBytesSize = 1;
 80045b0:	e9cd 301a 	strd	r3, r0, [sp, #104]	; 0x68
  s_config.Interval        = 0x10;
 80045b4:	2310      	movs	r3, #16
 80045b6:	9319      	str	r3, [sp, #100]	; 0x64
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80045b8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80045bc:	e9cd 0035 	strd	r0, r0, [sp, #212]	; 0xd4
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80045c0:	e9cd 0039 	strd	r0, r0, [sp, #228]	; 0xe4
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80045c4:	931c      	str	r3, [sp, #112]	; 0x70
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 80045c6:	f241 3388 	movw	r3, #5000	; 0x1388
 80045ca:	4889      	ldr	r0, [pc, #548]	; (80047f0 <main+0xa2c>)
 80045cc:	f007 f893 	bl	800b6f6 <HAL_QSPI_AutoPolling>
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80045d0:	2305      	movs	r3, #5
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80045d2:	f44f 7640 	mov.w	r6, #768	; 0x300
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80045d6:	f04f 7440 	mov.w	r4, #50331648	; 0x3000000
  s_command.NbData            = 1;
 80045da:	2501      	movs	r5, #1
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80045dc:	932e      	str	r3, [sp, #184]	; 0xb8
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80045de:	2300      	movs	r3, #0
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80045e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80045e4:	a92e      	add	r1, sp, #184	; 0xb8
 80045e6:	4882      	ldr	r0, [pc, #520]	; (80047f0 <main+0xa2c>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80045e8:	9634      	str	r6, [sp, #208]	; 0xd0
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80045ea:	9437      	str	r4, [sp, #220]	; 0xdc
  s_command.DummyCycles       = 0;
 80045ec:	9333      	str	r3, [sp, #204]	; 0xcc
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80045ee:	e9cd 3335 	strd	r3, r3, [sp, #212]	; 0xd4
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80045f2:	e9cd 5338 	strd	r5, r3, [sp, #224]	; 0xe0
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80045f6:	e9cd 333a 	strd	r3, r3, [sp, #232]	; 0xe8
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80045fa:	f006 ff81 	bl	800b500 <HAL_QSPI_Command>
 80045fe:	2800      	cmp	r0, #0
 8004600:	d14f      	bne.n	80046a2 <main+0x8de>
  if (HAL_QSPI_Receive(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004602:	f241 3288 	movw	r2, #5000	; 0x1388
 8004606:	a920      	add	r1, sp, #128	; 0x80
 8004608:	4879      	ldr	r0, [pc, #484]	; (80047f0 <main+0xa2c>)
 800460a:	f007 f815 	bl	800b638 <HAL_QSPI_Receive>
 800460e:	2800      	cmp	r0, #0
 8004610:	d147      	bne.n	80046a2 <main+0x8de>
  s_command.Instruction       = READ_CFG_REG_CMD;
 8004612:	2315      	movs	r3, #21
  s_command.DummyCycles       = 0;
 8004614:	9033      	str	r0, [sp, #204]	; 0xcc
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004616:	f241 3288 	movw	r2, #5000	; 0x1388
 800461a:	a92e      	add	r1, sp, #184	; 0xb8
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800461c:	9634      	str	r6, [sp, #208]	; 0xd0
  s_command.Instruction       = READ_CFG_REG_CMD;
 800461e:	932e      	str	r3, [sp, #184]	; 0xb8
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8004620:	9437      	str	r4, [sp, #220]	; 0xdc
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004622:	e9cd 0035 	strd	r0, r0, [sp, #212]	; 0xd4
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8004626:	e9cd 5038 	strd	r5, r0, [sp, #224]	; 0xe0
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800462a:	e9cd 003a 	strd	r0, r0, [sp, #232]	; 0xe8
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800462e:	4870      	ldr	r0, [pc, #448]	; (80047f0 <main+0xa2c>)
 8004630:	f006 ff66 	bl	800b500 <HAL_QSPI_Command>
 8004634:	bba8      	cbnz	r0, 80046a2 <main+0x8de>
  if (HAL_QSPI_Receive(hqspi, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004636:	f241 3288 	movw	r2, #5000	; 0x1388
 800463a:	f10d 0181 	add.w	r1, sp, #129	; 0x81
 800463e:	486c      	ldr	r0, [pc, #432]	; (80047f0 <main+0xa2c>)
 8004640:	f006 fffa 	bl	800b638 <HAL_QSPI_Receive>
 8004644:	bb68      	cbnz	r0, 80046a2 <main+0x8de>
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 8004646:	f7ff fb15 	bl	8003c74 <QSPI_WriteEnable.constprop.0>
 800464a:	bb50      	cbnz	r0, 80046a2 <main+0x8de>
  s_command.NbData            = 2;
 800464c:	2302      	movs	r3, #2
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800464e:	22c0      	movs	r2, #192	; 0xc0
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8004650:	9634      	str	r6, [sp, #208]	; 0xd0
  s_command.Instruction       = WRITE_STATUS_CFG_REG_CMD;
 8004652:	952e      	str	r5, [sp, #184]	; 0xb8
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8004654:	9437      	str	r4, [sp, #220]	; 0xdc
  s_command.DummyCycles       = 0;
 8004656:	9033      	str	r0, [sp, #204]	; 0xcc
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004658:	e9cd 0035 	strd	r0, r0, [sp, #212]	; 0xd4
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800465c:	e9cd 3038 	strd	r3, r0, [sp, #224]	; 0xe0
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004660:	e9cd 003a 	strd	r0, r0, [sp, #232]	; 0xe8
 8004664:	fa92 f2a2 	rbit	r2, r2
  MODIFY_REG( reg[1], MX25L512_CR_NB_DUMMY, (MX25L512_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(MX25L512_CR_NB_DUMMY)));
 8004668:	2103      	movs	r1, #3
 800466a:	f89d 3081 	ldrb.w	r3, [sp, #129]	; 0x81
 800466e:	fab2 f282 	clz	r2, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004672:	485f      	ldr	r0, [pc, #380]	; (80047f0 <main+0xa2c>)
  MODIFY_REG( reg[1], MX25L512_CR_NB_DUMMY, (MX25L512_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(MX25L512_CR_NB_DUMMY)));
 8004674:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004678:	fa01 f202 	lsl.w	r2, r1, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800467c:	a92e      	add	r1, sp, #184	; 0xb8
  MODIFY_REG( reg[1], MX25L512_CR_NB_DUMMY, (MX25L512_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(MX25L512_CR_NB_DUMMY)));
 800467e:	4313      	orrs	r3, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004680:	f241 3288 	movw	r2, #5000	; 0x1388
  MODIFY_REG( reg[1], MX25L512_CR_NB_DUMMY, (MX25L512_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(MX25L512_CR_NB_DUMMY)));
 8004684:	f88d 3081 	strb.w	r3, [sp, #129]	; 0x81
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004688:	f006 ff3a 	bl	800b500 <HAL_QSPI_Command>
 800468c:	b948      	cbnz	r0, 80046a2 <main+0x8de>
  if (HAL_QSPI_Transmit(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800468e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004692:	a920      	add	r1, sp, #128	; 0x80
 8004694:	4856      	ldr	r0, [pc, #344]	; (80047f0 <main+0xa2c>)
 8004696:	f006 ff76 	bl	800b586 <HAL_QSPI_Transmit>
 800469a:	b910      	cbnz	r0, 80046a2 <main+0x8de>
  HAL_Delay( 40 );
 800469c:	2028      	movs	r0, #40	; 0x28
 800469e:	f003 fc1f 	bl	8007ee0 <HAL_Delay>
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80046a2:	2305      	movs	r3, #5
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80046a4:	f44f 7640 	mov.w	r6, #768	; 0x300
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80046a8:	f04f 7440 	mov.w	r4, #50331648	; 0x3000000
  s_command.NbData            = 1;
 80046ac:	2501      	movs	r5, #1
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80046ae:	932e      	str	r3, [sp, #184]	; 0xb8
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80046b0:	2300      	movs	r3, #0
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80046b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046b6:	a92e      	add	r1, sp, #184	; 0xb8
 80046b8:	484d      	ldr	r0, [pc, #308]	; (80047f0 <main+0xa2c>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80046ba:	9634      	str	r6, [sp, #208]	; 0xd0
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80046bc:	9437      	str	r4, [sp, #220]	; 0xdc
  s_command.DummyCycles       = 0;
 80046be:	9333      	str	r3, [sp, #204]	; 0xcc
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80046c0:	e9cd 3335 	strd	r3, r3, [sp, #212]	; 0xd4
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80046c4:	e9cd 5338 	strd	r5, r3, [sp, #224]	; 0xe0
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80046c8:	e9cd 333a 	strd	r3, r3, [sp, #232]	; 0xe8
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80046cc:	f006 ff18 	bl	800b500 <HAL_QSPI_Command>
 80046d0:	2800      	cmp	r0, #0
 80046d2:	d14b      	bne.n	800476c <main+0x9a8>
  if (HAL_QSPI_Receive(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80046d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80046d8:	a920      	add	r1, sp, #128	; 0x80
 80046da:	4845      	ldr	r0, [pc, #276]	; (80047f0 <main+0xa2c>)
 80046dc:	f006 ffac 	bl	800b638 <HAL_QSPI_Receive>
 80046e0:	2800      	cmp	r0, #0
 80046e2:	d143      	bne.n	800476c <main+0x9a8>
  s_command.Instruction       = READ_CFG_REG_CMD;
 80046e4:	2315      	movs	r3, #21
  s_command.DummyCycles       = 0;
 80046e6:	9033      	str	r0, [sp, #204]	; 0xcc
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80046e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ec:	a92e      	add	r1, sp, #184	; 0xb8
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80046ee:	9634      	str	r6, [sp, #208]	; 0xd0
  s_command.Instruction       = READ_CFG_REG_CMD;
 80046f0:	932e      	str	r3, [sp, #184]	; 0xb8
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80046f2:	9437      	str	r4, [sp, #220]	; 0xdc
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80046f4:	e9cd 0035 	strd	r0, r0, [sp, #212]	; 0xd4
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80046f8:	e9cd 5038 	strd	r5, r0, [sp, #224]	; 0xe0
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80046fc:	e9cd 003a 	strd	r0, r0, [sp, #232]	; 0xe8
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004700:	483b      	ldr	r0, [pc, #236]	; (80047f0 <main+0xa2c>)
 8004702:	f006 fefd 	bl	800b500 <HAL_QSPI_Command>
 8004706:	bb88      	cbnz	r0, 800476c <main+0x9a8>
  if (HAL_QSPI_Receive(hqspi, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004708:	f241 3288 	movw	r2, #5000	; 0x1388
 800470c:	f10d 0181 	add.w	r1, sp, #129	; 0x81
 8004710:	4837      	ldr	r0, [pc, #220]	; (80047f0 <main+0xa2c>)
 8004712:	f006 ff91 	bl	800b638 <HAL_QSPI_Receive>
 8004716:	bb48      	cbnz	r0, 800476c <main+0x9a8>
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 8004718:	f7ff faac 	bl	8003c74 <QSPI_WriteEnable.constprop.0>
 800471c:	bb30      	cbnz	r0, 800476c <main+0x9a8>
  s_command.NbData            = 2;
 800471e:	2302      	movs	r3, #2
 8004720:	2207      	movs	r2, #7
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8004722:	9634      	str	r6, [sp, #208]	; 0xd0
  s_command.Instruction       = WRITE_STATUS_CFG_REG_CMD;
 8004724:	952e      	str	r5, [sp, #184]	; 0xb8
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8004726:	9437      	str	r4, [sp, #220]	; 0xdc
  s_command.DummyCycles       = 0;
 8004728:	9033      	str	r0, [sp, #204]	; 0xcc
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800472a:	e9cd 0035 	strd	r0, r0, [sp, #212]	; 0xd4
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800472e:	e9cd 3038 	strd	r3, r0, [sp, #224]	; 0xe0
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004732:	e9cd 003a 	strd	r0, r0, [sp, #232]	; 0xe8
 8004736:	fa92 f2a2 	rbit	r2, r2
  MODIFY_REG( reg[1], MX25L512_CR_ODS, (MX25L512_CR_ODS_15 << POSITION_VAL(MX25L512_CR_ODS)));
 800473a:	2106      	movs	r1, #6
 800473c:	f89d 3081 	ldrb.w	r3, [sp, #129]	; 0x81
 8004740:	fab2 f282 	clz	r2, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004744:	482a      	ldr	r0, [pc, #168]	; (80047f0 <main+0xa2c>)
  MODIFY_REG( reg[1], MX25L512_CR_ODS, (MX25L512_CR_ODS_15 << POSITION_VAL(MX25L512_CR_ODS)));
 8004746:	f023 0307 	bic.w	r3, r3, #7
 800474a:	fa01 f202 	lsl.w	r2, r1, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800474e:	a92e      	add	r1, sp, #184	; 0xb8
  MODIFY_REG( reg[1], MX25L512_CR_ODS, (MX25L512_CR_ODS_15 << POSITION_VAL(MX25L512_CR_ODS)));
 8004750:	4313      	orrs	r3, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004752:	f241 3288 	movw	r2, #5000	; 0x1388
  MODIFY_REG( reg[1], MX25L512_CR_ODS, (MX25L512_CR_ODS_15 << POSITION_VAL(MX25L512_CR_ODS)));
 8004756:	f88d 3081 	strb.w	r3, [sp, #129]	; 0x81
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800475a:	f006 fed1 	bl	800b500 <HAL_QSPI_Command>
 800475e:	b928      	cbnz	r0, 800476c <main+0x9a8>
  if (HAL_QSPI_Transmit(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004760:	f241 3288 	movw	r2, #5000	; 0x1388
 8004764:	a920      	add	r1, sp, #128	; 0x80
 8004766:	4822      	ldr	r0, [pc, #136]	; (80047f0 <main+0xa2c>)
 8004768:	f006 ff0d 	bl	800b586 <HAL_QSPI_Transmit>
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800476c:	f44f 7340 	mov.w	r3, #768	; 0x300
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8004770:	2400      	movs	r4, #0
  if (HAL_QSPI_MemoryMapped(hqspi, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004772:	aa20      	add	r2, sp, #128	; 0x80
  hdma2d.Instance = DMA2D;
 8004774:	4d1f      	ldr	r5, [pc, #124]	; (80047f4 <main+0xa30>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8004776:	9334      	str	r3, [sp, #208]	; 0xd0
  s_command.Instruction       = QPI_READ_4_BYTE_ADDR_CMD;
 8004778:	23ec      	movs	r3, #236	; 0xec
  if (HAL_QSPI_MemoryMapped(hqspi, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800477a:	a92e      	add	r1, sp, #184	; 0xb8
 800477c:	481c      	ldr	r0, [pc, #112]	; (80047f0 <main+0xa2c>)
  s_command.Instruction       = QPI_READ_4_BYTE_ADDR_CMD;
 800477e:	932e      	str	r3, [sp, #184]	; 0xb8
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8004780:	f44f 6340 	mov.w	r3, #3072	; 0xc00
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004784:	943b      	str	r4, [sp, #236]	; 0xec
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8004786:	2601      	movs	r6, #1
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8004788:	9335      	str	r3, [sp, #212]	; 0xd4
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 800478a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800478e:	4f1a      	ldr	r7, [pc, #104]	; (80047f8 <main+0xa34>)
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8004790:	9331      	str	r3, [sp, #196]	; 0xc4
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8004792:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
  hi2c1.Init.Timing = 0x00C0EAFF;
 8004796:	f8df 8074 	ldr.w	r8, [pc, #116]	; 800480c <main+0xa48>
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800479a:	e9cd 4336 	strd	r4, r3, [sp, #216]	; 0xd8
  s_command.DummyCycles       = MX25L512_DUMMY_CYCLES_READ_QUAD_IO;
 800479e:	230a      	movs	r3, #10
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80047a0:	e9cd 4439 	strd	r4, r4, [sp, #228]	; 0xe4
  s_command.DummyCycles       = MX25L512_DUMMY_CYCLES_READ_QUAD_IO;
 80047a4:	9333      	str	r3, [sp, #204]	; 0xcc
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 80047a6:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
  if (HAL_QSPI_MemoryMapped(hqspi, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80047aa:	f006 fff4 	bl	800b796 <HAL_QSPI_MemoryMapped>
  hdma2d.Instance = DMA2D;
 80047ae:	4b13      	ldr	r3, [pc, #76]	; (80047fc <main+0xa38>)
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80047b0:	4628      	mov	r0, r5
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80047b2:	e9c5 440e 	strd	r4, r4, [r5, #56]	; 0x38
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80047b6:	e9c5 4410 	strd	r4, r4, [r5, #64]	; 0x40
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 80047ba:	e9c5 4412 	strd	r4, r4, [r5, #72]	; 0x48
  hdma2d.Init.Mode = DMA2D_M2M;
 80047be:	e9c5 3400 	strd	r3, r4, [r5]
  hdma2d.Init.OutputOffset = 0;
 80047c2:	e9c5 4402 	strd	r4, r4, [r5, #8]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80047c6:	f004 f8bb 	bl	8008940 <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80047ca:	2101      	movs	r1, #1
 80047cc:	4628      	mov	r0, r5
  hadc1.Instance = ADC1;
 80047ce:	4d0c      	ldr	r5, [pc, #48]	; (8004800 <main+0xa3c>)
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80047d0:	f004 f978 	bl	8008ac4 <HAL_DMA2D_ConfigLayer>
  MX_I2C4_Init();
 80047d4:	f7ff fad4 	bl	8003d80 <MX_I2C4_Init>
  MX_LIBJPEG_Init();
 80047d8:	f7fb ff7d 	bl	80006d6 <MX_LIBJPEG_Init>
  hcrc.Instance = CRC;
 80047dc:	4809      	ldr	r0, [pc, #36]	; (8004804 <main+0xa40>)
 80047de:	4b0a      	ldr	r3, [pc, #40]	; (8004808 <main+0xa44>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80047e0:	8084      	strh	r4, [r0, #4]
  hcrc.Instance = CRC;
 80047e2:	6003      	str	r3, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80047e4:	6206      	str	r6, [r0, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80047e6:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80047ea:	f003 fea5 	bl	8008538 <HAL_CRC_Init>
 80047ee:	e00f      	b.n	8004810 <main+0xa4c>
 80047f0:	200122f4 	.word	0x200122f4
 80047f4:	20012018 	.word	0x20012018
 80047f8:	40012000 	.word	0x40012000
 80047fc:	4002b000 	.word	0x4002b000
 8004800:	20011fac 	.word	0x20011fac
 8004804:	20011ff4 	.word	0x20011ff4
 8004808:	40023000 	.word	0x40023000
 800480c:	40005400 	.word	0x40005400
  hjpeg.Instance = JPEG;
 8004810:	4b66      	ldr	r3, [pc, #408]	; (80049ac <main+0xbe8>)
 8004812:	4867      	ldr	r0, [pc, #412]	; (80049b0 <main+0xbec>)
 8004814:	6003      	str	r3, [r0, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8004816:	f005 fda5 	bl	800a364 <HAL_JPEG_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 800481a:	2210      	movs	r2, #16
 800481c:	4621      	mov	r1, r4
 800481e:	a82e      	add	r0, sp, #184	; 0xb8
 8004820:	f021 fb7c 	bl	8025f1c <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004824:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004828:	4628      	mov	r0, r5
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800482a:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800482c:	612c      	str	r4, [r5, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800482e:	61ac      	str	r4, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004830:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004834:	60ec      	str	r4, [r5, #12]
  hadc1.Init.NbrOfConversion = 1;
 8004836:	61ee      	str	r6, [r5, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004838:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800483c:	616e      	str	r6, [r5, #20]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800483e:	e9c5 7300 	strd	r7, r3, [r5]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8004842:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
 8004846:	e9c5 430a 	strd	r4, r3, [r5, #40]	; 0x28
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800484a:	f003 fb5b 	bl	8007f04 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_6;
 800484e:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004850:	a92e      	add	r1, sp, #184	; 0xb8
 8004852:	4628      	mov	r0, r5
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004854:	9430      	str	r4, [sp, #192]	; 0xc0
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004856:	e9cd 362e 	strd	r3, r6, [sp, #184]	; 0xb8
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800485a:	f003 fd0d 	bl	8008278 <HAL_ADC_ConfigChannel>
  HAL_ADC_Start_IT(&hadc1);
 800485e:	4628      	mov	r0, r5
 8004860:	f003 fbf6 	bl	8008050 <HAL_ADC_Start_IT>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004864:	221c      	movs	r2, #28
 8004866:	4621      	mov	r1, r4
 8004868:	a820      	add	r0, sp, #128	; 0x80
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800486a:	9419      	str	r4, [sp, #100]	; 0x64
  htim1.Instance = TIM1;
 800486c:	4d51      	ldr	r5, [pc, #324]	; (80049b4 <main+0xbf0>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800486e:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004872:	f021 fb53 	bl	8025f1c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004876:	222c      	movs	r2, #44	; 0x2c
 8004878:	4621      	mov	r1, r4
 800487a:	a82e      	add	r0, sp, #184	; 0xb8
 800487c:	f021 fb4e 	bl	8025f1c <memset>
  htim1.Init.Prescaler = 100-1;
 8004880:	f8df c178 	ldr.w	ip, [pc, #376]	; 80049fc <main+0xc38>
 8004884:	2363      	movs	r3, #99	; 0x63
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004886:	4628      	mov	r0, r5
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004888:	60ac      	str	r4, [r5, #8]
  htim1.Init.Prescaler = 100-1;
 800488a:	e9c5 c300 	strd	ip, r3, [r5]
  htim1.Init.Period = 16000-1;
 800488e:	f643 637f 	movw	r3, #15999	; 0x3e7f
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004892:	e9c5 4405 	strd	r4, r4, [r5, #20]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004896:	e9c5 3403 	strd	r3, r4, [r5, #12]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800489a:	f007 fff1 	bl	800c880 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800489e:	a917      	add	r1, sp, #92	; 0x5c
 80048a0:	4628      	mov	r0, r5
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80048a2:	9419      	str	r4, [sp, #100]	; 0x64
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80048a4:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80048a8:	f008 f96a 	bl	800cb80 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.Pulse = 16000/2;
 80048ac:	f04f 0e60 	mov.w	lr, #96	; 0x60
 80048b0:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80048b4:	4622      	mov	r2, r4
 80048b6:	a920      	add	r1, sp, #128	; 0x80
 80048b8:	4628      	mov	r0, r5
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80048ba:	9426      	str	r4, [sp, #152]	; 0x98
  sConfigOC.Pulse = 16000/2;
 80048bc:	e9cd e320 	strd	lr, r3, [sp, #128]	; 0x80
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80048c0:	e9cd 4422 	strd	r4, r4, [sp, #136]	; 0x88
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80048c4:	e9cd 4424 	strd	r4, r4, [sp, #144]	; 0x90
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80048c8:	f008 f842 	bl	800c950 <HAL_TIM_PWM_ConfigChannel>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80048cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80048d0:	a92e      	add	r1, sp, #184	; 0xb8
 80048d2:	4628      	mov	r0, r5
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80048d4:	9432      	str	r4, [sp, #200]	; 0xc8
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80048d6:	9435      	str	r4, [sp, #212]	; 0xd4
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80048d8:	9438      	str	r4, [sp, #224]	; 0xe0
  sBreakDeadTimeConfig.BreakFilter = 0;
 80048da:	e9cd 3433 	strd	r3, r4, [sp, #204]	; 0xcc
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80048de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80048e2:	e9cd 442e 	strd	r4, r4, [sp, #184]	; 0xb8
  sBreakDeadTimeConfig.Break2Filter = 0;
 80048e6:	e9cd 3436 	strd	r3, r4, [sp, #216]	; 0xd8
  sBreakDeadTimeConfig.DeadTime = 0;
 80048ea:	e9cd 4430 	strd	r4, r4, [sp, #192]	; 0xc0
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80048ee:	f008 f991 	bl	800cc14 <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80048f2:	4621      	mov	r1, r4
 80048f4:	4628      	mov	r0, r5
 80048f6:	f008 f941 	bl	800cb7c <HAL_TIM_PWM_Start>
  HAL_TIM_MspPostInit(&htim1);
 80048fa:	4628      	mov	r0, r5
  hi2c1.Instance = I2C1;
 80048fc:	4d2e      	ldr	r5, [pc, #184]	; (80049b8 <main+0xbf4>)
  HAL_TIM_MspPostInit(&htim1);
 80048fe:	f000 fb71 	bl	8004fe4 <HAL_TIM_MspPostInit>
  hi2c1.Init.Timing = 0x00C0EAFF;
 8004902:	4b2e      	ldr	r3, [pc, #184]	; (80049bc <main+0xbf8>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004904:	4628      	mov	r0, r5
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004906:	622c      	str	r4, [r5, #32]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8004908:	e9c5 8300 	strd	r8, r3, [r5]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800490c:	e9c5 4602 	strd	r4, r6, [r5, #8]
  hi2c1.Init.OwnAddress2 = 0;
 8004910:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004914:	e9c5 4406 	strd	r4, r4, [r5, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004918:	f004 fff1 	bl	80098fe <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800491c:	4621      	mov	r1, r4
 800491e:	4628      	mov	r0, r5
 8004920:	f005 fb45 	bl	8009fae <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004924:	4621      	mov	r1, r4
 8004926:	4628      	mov	r0, r5
    gas_sensor.power_mode = BME680_FORCED_MODE;
 8004928:	4d25      	ldr	r5, [pc, #148]	; (80049c0 <main+0xbfc>)
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800492a:	f005 fb66 	bl	8009ffa <HAL_I2CEx_ConfigDigitalFilter>
  MX_TouchGFX_Init();
 800492e:	f7fb fed4 	bl	80006da <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
 8004932:	f7fb fed1 	bl	80006d8 <MX_TouchGFX_PreOSInit>
    gas_sensor.dev_id = BME680_I2C_ADDR_PRIMARY;
 8004936:	2376      	movs	r3, #118	; 0x76
    rslt = bme680_init(&gas_sensor);
 8004938:	4628      	mov	r0, r5
    gas_sensor.power_mode = BME680_FORCED_MODE;
 800493a:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
    gas_sensor.dev_id = BME680_I2C_ADDR_PRIMARY;
 800493e:	706b      	strb	r3, [r5, #1]
    gas_sensor.read = user_i2c_read;
 8004940:	4b20      	ldr	r3, [pc, #128]	; (80049c4 <main+0xc00>)
    gas_sensor.intf = BME680_I2C_INTF;
 8004942:	70ae      	strb	r6, [r5, #2]
    gas_sensor.read = user_i2c_read;
 8004944:	64ab      	str	r3, [r5, #72]	; 0x48
    gas_sensor.write = user_i2c_write;
 8004946:	4b20      	ldr	r3, [pc, #128]	; (80049c8 <main+0xc04>)
 8004948:	64eb      	str	r3, [r5, #76]	; 0x4c
    gas_sensor.delay_ms = user_delay_ms;
 800494a:	4b20      	ldr	r3, [pc, #128]	; (80049cc <main+0xc08>)
 800494c:	652b      	str	r3, [r5, #80]	; 0x50
    gas_sensor.amb_temp = 25;
 800494e:	2319      	movs	r3, #25
 8004950:	712b      	strb	r3, [r5, #4]
    rslt = bme680_init(&gas_sensor);
 8004952:	f7fe fccd 	bl	80032f0 <bme680_init>
    gas_sensor.tph_sett.os_hum = BME680_OS_2X;
 8004956:	4b1e      	ldr	r3, [pc, #120]	; (80049d0 <main+0xc0c>)
    rslt = bme680_set_sensor_settings(set_required_settings,&gas_sensor);
 8004958:	4629      	mov	r1, r5
 800495a:	20df      	movs	r0, #223	; 0xdf
    gas_sensor.gas_sett.run_gas = BME680_ENABLE_GAS_MEAS;
 800495c:	f885 603e 	strb.w	r6, [r5, #62]	; 0x3e
    gas_sensor.tph_sett.os_hum = BME680_OS_2X;
 8004960:	63ab      	str	r3, [r5, #56]	; 0x38
    gas_sensor.gas_sett.heatr_temp = 320; /* degree Celsius */
 8004962:	4b1c      	ldr	r3, [pc, #112]	; (80049d4 <main+0xc10>)
 8004964:	642b      	str	r3, [r5, #64]	; 0x40
    rslt = bme680_set_sensor_settings(set_required_settings,&gas_sensor);
 8004966:	f7fe fdc0 	bl	80034ea <bme680_set_sensor_settings>
    rslt = bme680_set_sensor_mode(&gas_sensor);
 800496a:	4628      	mov	r0, r5
 800496c:	f7fe fd7e 	bl	800346c <bme680_set_sensor_mode>
    bme680_get_profile_dur(&meas_period, &gas_sensor);
 8004970:	4629      	mov	r1, r5
 8004972:	a82e      	add	r0, sp, #184	; 0xb8
 8004974:	f7fe ff30 	bl	80037d8 <bme680_get_profile_dur>
  osKernelInitialize();
 8004978:	f008 fa1e 	bl	800cdb8 <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800497c:	4a16      	ldr	r2, [pc, #88]	; (80049d8 <main+0xc14>)
 800497e:	4621      	mov	r1, r4
 8004980:	4816      	ldr	r0, [pc, #88]	; (80049dc <main+0xc18>)
 8004982:	f008 fa53 	bl	800ce2c <osThreadNew>
 8004986:	4b16      	ldr	r3, [pc, #88]	; (80049e0 <main+0xc1c>)
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8004988:	4a16      	ldr	r2, [pc, #88]	; (80049e4 <main+0xc20>)
 800498a:	4621      	mov	r1, r4
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800498c:	6018      	str	r0, [r3, #0]
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 800498e:	4816      	ldr	r0, [pc, #88]	; (80049e8 <main+0xc24>)
 8004990:	f008 fa4c 	bl	800ce2c <osThreadNew>
 8004994:	4b15      	ldr	r3, [pc, #84]	; (80049ec <main+0xc28>)
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8004996:	4a16      	ldr	r2, [pc, #88]	; (80049f0 <main+0xc2c>)
 8004998:	4621      	mov	r1, r4
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 800499a:	6018      	str	r0, [r3, #0]
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 800499c:	4815      	ldr	r0, [pc, #84]	; (80049f4 <main+0xc30>)
 800499e:	f008 fa45 	bl	800ce2c <osThreadNew>
 80049a2:	4b15      	ldr	r3, [pc, #84]	; (80049f8 <main+0xc34>)
 80049a4:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80049a6:	f008 fa21 	bl	800cdec <osKernelStart>
  while (1)
 80049aa:	e7fe      	b.n	80049aa <main+0xbe6>
 80049ac:	50051000 	.word	0x50051000
 80049b0:	200121f4 	.word	0x200121f4
 80049b4:	20012374 	.word	0x20012374
 80049b8:	2001214c 	.word	0x2001214c
 80049bc:	00c0eaff 	.word	0x00c0eaff
 80049c0:	20011f54 	.word	0x20011f54
 80049c4:	08003bd5 	.word	0x08003bd5
 80049c8:	08003c21 	.word	0x08003c21
 80049cc:	08003c1d 	.word	0x08003c1d
 80049d0:	02030402 	.word	0x02030402
 80049d4:	00960140 	.word	0x00960140
 80049d8:	08028dd8 	.word	0x08028dd8
 80049dc:	08003bd1 	.word	0x08003bd1
 80049e0:	20011f4c 	.word	0x20011f4c
 80049e4:	08028db4 	.word	0x08028db4
 80049e8:	080006e9 	.word	0x080006e9
 80049ec:	20011f34 	.word	0x20011f34
 80049f0:	08028dfc 	.word	0x08028dfc
 80049f4:	080027a9 	.word	0x080027a9
 80049f8:	200123d4 	.word	0x200123d4
 80049fc:	40010000 	.word	0x40010000

08004a00 <HAL_ADC_ConvCpltCallback>:
{
 8004a00:	b508      	push	{r3, lr}
   uhADCxConvertedData = HAL_ADC_GetValue(hadc);
 8004a02:	f003 fba5 	bl	8008150 <HAL_ADC_GetValue>
 8004a06:	4b02      	ldr	r3, [pc, #8]	; (8004a10 <HAL_ADC_ConvCpltCallback+0x10>)
 8004a08:	b280      	uxth	r0, r0
 8004a0a:	8018      	strh	r0, [r3, #0]
}
 8004a0c:	bd08      	pop	{r3, pc}
 8004a0e:	bf00      	nop
 8004a10:	200123d0 	.word	0x200123d0

08004a14 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8004a14:	6802      	ldr	r2, [r0, #0]
 8004a16:	4b03      	ldr	r3, [pc, #12]	; (8004a24 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d101      	bne.n	8004a20 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8004a1c:	f003 ba4e 	b.w	8007ebc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004a20:	4770      	bx	lr
 8004a22:	bf00      	nop
 8004a24:	40001000 	.word	0x40001000

08004a28 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004a28:	4770      	bx	lr
	...

08004a2c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004a2c:	4b0d      	ldr	r3, [pc, #52]	; (8004a64 <HAL_MspInit+0x38>)
{
 8004a2e:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004a30:	210f      	movs	r1, #15
 8004a32:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a38:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004a3c:	641a      	str	r2, [r3, #64]	; 0x40
 8004a3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a40:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8004a44:	9200      	str	r2, [sp, #0]
 8004a46:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a4e:	645a      	str	r2, [r3, #68]	; 0x44
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004a50:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a58:	9301      	str	r3, [sp, #4]
 8004a5a:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004a5c:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004a5e:	f003 bccd 	b.w	80083fc <HAL_NVIC_SetPriority>
 8004a62:	bf00      	nop
 8004a64:	40023800 	.word	0x40023800

08004a68 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004a68:	b510      	push	{r4, lr}
 8004a6a:	b088      	sub	sp, #32
 8004a6c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a6e:	2214      	movs	r2, #20
 8004a70:	2100      	movs	r1, #0
 8004a72:	a803      	add	r0, sp, #12
 8004a74:	f021 fa52 	bl	8025f1c <memset>
  if(hadc->Instance==ADC1)
 8004a78:	6822      	ldr	r2, [r4, #0]
 8004a7a:	4b14      	ldr	r3, [pc, #80]	; (8004acc <HAL_ADC_MspInit+0x64>)
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d123      	bne.n	8004ac8 <HAL_ADC_MspInit+0x60>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004a80:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a84:	a903      	add	r1, sp, #12
 8004a86:	4812      	ldr	r0, [pc, #72]	; (8004ad0 <HAL_ADC_MspInit+0x68>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004a88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a8e:	645a      	str	r2, [r3, #68]	; 0x44
 8004a90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a92:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8004a96:	9201      	str	r2, [sp, #4]
 8004a98:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a9c:	f042 0201 	orr.w	r2, r2, #1
 8004aa0:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004aa2:	2240      	movs	r2, #64	; 0x40
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa6:	f003 0301 	and.w	r3, r3, #1
 8004aaa:	9302      	str	r3, [sp, #8]
 8004aac:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ab4:	f004 fc28 	bl	8009308 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8004ab8:	2012      	movs	r0, #18
 8004aba:	2200      	movs	r2, #0
 8004abc:	2105      	movs	r1, #5
 8004abe:	f003 fc9d 	bl	80083fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8004ac2:	2012      	movs	r0, #18
 8004ac4:	f003 fccc 	bl	8008460 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004ac8:	b008      	add	sp, #32
 8004aca:	bd10      	pop	{r4, pc}
 8004acc:	40012000 	.word	0x40012000
 8004ad0:	40020000 	.word	0x40020000

08004ad4 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8004ad4:	6802      	ldr	r2, [r0, #0]
{
 8004ad6:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8004ad8:	4b08      	ldr	r3, [pc, #32]	; (8004afc <HAL_CRC_MspInit+0x28>)
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d10b      	bne.n	8004af6 <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8004ade:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 8004ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ae6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004aea:	631a      	str	r2, [r3, #48]	; 0x30
 8004aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004af2:	9301      	str	r3, [sp, #4]
 8004af4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8004af6:	b002      	add	sp, #8
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	40023000 	.word	0x40023000

08004b00 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8004b00:	4b0e      	ldr	r3, [pc, #56]	; (8004b3c <HAL_DMA2D_MspInit+0x3c>)
{
 8004b02:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 8004b04:	6802      	ldr	r2, [r0, #0]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d115      	bne.n	8004b36 <HAL_DMA2D_MspInit+0x36>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8004b0a:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8004b0e:	2105      	movs	r1, #5
 8004b10:	205a      	movs	r0, #90	; 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8004b12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b14:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004b18:	631a      	str	r2, [r3, #48]	; 0x30
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8004b1a:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8004b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b22:	9301      	str	r3, [sp, #4]
 8004b24:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8004b26:	f003 fc69 	bl	80083fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8004b2a:	205a      	movs	r0, #90	; 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8004b2c:	b003      	add	sp, #12
 8004b2e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8004b32:	f003 bc95 	b.w	8008460 <HAL_NVIC_EnableIRQ>
}
 8004b36:	b003      	add	sp, #12
 8004b38:	f85d fb04 	ldr.w	pc, [sp], #4
 8004b3c:	4002b000 	.word	0x4002b000

08004b40 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8004b40:	b510      	push	{r4, lr}
 8004b42:	b088      	sub	sp, #32
 8004b44:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b46:	2214      	movs	r2, #20
 8004b48:	2100      	movs	r1, #0
 8004b4a:	a803      	add	r0, sp, #12
 8004b4c:	f021 f9e6 	bl	8025f1c <memset>
  if(hdsi->Instance==DSI)
 8004b50:	6822      	ldr	r2, [r4, #0]
 8004b52:	4b15      	ldr	r3, [pc, #84]	; (8004ba8 <HAL_DSI_MspInit+0x68>)
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d125      	bne.n	8004ba4 <HAL_DSI_MspInit+0x64>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8004b58:	f503 434c 	add.w	r3, r3, #52224	; 0xcc00
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8004b5c:	a903      	add	r1, sp, #12
 8004b5e:	4813      	ldr	r0, [pc, #76]	; (8004bac <HAL_DSI_MspInit+0x6c>)
    __HAL_RCC_DSI_CLK_ENABLE();
 8004b60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b62:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8004b66:	645a      	str	r2, [r3, #68]	; 0x44
 8004b68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b6a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8004b6e:	9201      	str	r2, [sp, #4]
 8004b70:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8004b72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b78:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b7a:	2204      	movs	r2, #4
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8004b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b82:	9302      	str	r3, [sp, #8]
 8004b84:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b86:	2302      	movs	r3, #2
 8004b88:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8004b8c:	230d      	movs	r3, #13
 8004b8e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8004b90:	f004 fbba 	bl	8009308 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 5, 0);
 8004b94:	2062      	movs	r0, #98	; 0x62
 8004b96:	2200      	movs	r2, #0
 8004b98:	2105      	movs	r1, #5
 8004b9a:	f003 fc2f 	bl	80083fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 8004b9e:	2062      	movs	r0, #98	; 0x62
 8004ba0:	f003 fc5e 	bl	8008460 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 8004ba4:	b008      	add	sp, #32
 8004ba6:	bd10      	pop	{r4, pc}
 8004ba8:	40016c00 	.word	0x40016c00
 8004bac:	40022400 	.word	0x40022400

08004bb0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bb2:	2214      	movs	r2, #20
{
 8004bb4:	b0af      	sub	sp, #188	; 0xbc
 8004bb6:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bb8:	2100      	movs	r1, #0
 8004bba:	eb0d 0002 	add.w	r0, sp, r2
 8004bbe:	f021 f9ad 	bl	8025f1c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004bc2:	2290      	movs	r2, #144	; 0x90
 8004bc4:	2100      	movs	r1, #0
 8004bc6:	a80a      	add	r0, sp, #40	; 0x28
 8004bc8:	f021 f9a8 	bl	8025f1c <memset>
  if(hi2c->Instance==I2C1)
 8004bcc:	6823      	ldr	r3, [r4, #0]
 8004bce:	4a3d      	ldr	r2, [pc, #244]	; (8004cc4 <HAL_I2C_MspInit+0x114>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d12c      	bne.n	8004c2e <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004bd4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004bd8:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004bda:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004bdc:	f007 f8de 	bl	800bd9c <HAL_RCCEx_PeriphCLKConfig>
 8004be0:	b108      	cbz	r0, 8004be6 <HAL_I2C_MspInit+0x36>
    {
      Error_Handler();
 8004be2:	f7ff ff21 	bl	8004a28 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004be6:	4c38      	ldr	r4, [pc, #224]	; (8004cc8 <HAL_I2C_MspInit+0x118>)
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004be8:	f44f 7240 	mov.w	r2, #768	; 0x300
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bec:	2100      	movs	r1, #0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bee:	4837      	ldr	r0, [pc, #220]	; (8004ccc <HAL_I2C_MspInit+0x11c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bf0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004bf2:	f043 0302 	orr.w	r3, r3, #2
 8004bf6:	6323      	str	r3, [r4, #48]	; 0x30
 8004bf8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004bfa:	f003 0302 	and.w	r3, r3, #2
 8004bfe:	9300      	str	r3, [sp, #0]
 8004c00:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004c02:	2312      	movs	r3, #18
 8004c04:	e9cd 2305 	strd	r2, r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e9cd 1307 	strd	r1, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004c0e:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c10:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004c12:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c14:	f004 fb78 	bl	8009308 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004c18:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004c1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c1e:	6423      	str	r3, [r4, #64]	; 0x40
 8004c20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004c22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c26:	9301      	str	r3, [sp, #4]
 8004c28:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8004c2a:	b02f      	add	sp, #188	; 0xbc
 8004c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(hi2c->Instance==I2C4)
 8004c2e:	4a28      	ldr	r2, [pc, #160]	; (8004cd0 <HAL_I2C_MspInit+0x120>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d1fa      	bne.n	8004c2a <HAL_I2C_MspInit+0x7a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8004c34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004c38:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8004c3a:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004c3c:	f007 f8ae 	bl	800bd9c <HAL_RCCEx_PeriphCLKConfig>
 8004c40:	b108      	cbz	r0, 8004c46 <HAL_I2C_MspInit+0x96>
      Error_Handler();
 8004c42:	f7ff fef1 	bl	8004a28 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c46:	4c20      	ldr	r4, [pc, #128]	; (8004cc8 <HAL_I2C_MspInit+0x118>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004c48:	2712      	movs	r7, #18
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c4a:	2601      	movs	r6, #1
 8004c4c:	2503      	movs	r5, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c4e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c50:	a905      	add	r1, sp, #20
 8004c52:	481e      	ldr	r0, [pc, #120]	; (8004ccc <HAL_I2C_MspInit+0x11c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c54:	f043 0302 	orr.w	r3, r3, #2
 8004c58:	6323      	str	r3, [r4, #48]	; 0x30
 8004c5a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004c5c:	f003 0302 	and.w	r3, r3, #2
 8004c60:	9302      	str	r3, [sp, #8]
 8004c62:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004c64:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004c66:	f043 0308 	orr.w	r3, r3, #8
 8004c6a:	6323      	str	r3, [r4, #48]	; 0x30
 8004c6c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004c6e:	f003 0308 	and.w	r3, r3, #8
 8004c72:	9303      	str	r3, [sp, #12]
 8004c74:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004c76:	2380      	movs	r3, #128	; 0x80
 8004c78:	e9cd 3705 	strd	r3, r7, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 8004c7c:	230b      	movs	r3, #11
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c7e:	e9cd 6507 	strd	r6, r5, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 8004c82:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c84:	f004 fb40 	bl	8009308 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004c88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004c8c:	a905      	add	r1, sp, #20
 8004c8e:	4811      	ldr	r0, [pc, #68]	; (8004cd4 <HAL_I2C_MspInit+0x124>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004c90:	e9cd 3705 	strd	r3, r7, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8004c94:	2304      	movs	r3, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c96:	e9cd 6507 	strd	r6, r5, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8004c9a:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004c9c:	f004 fb34 	bl	8009308 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8004ca0:	6c23      	ldr	r3, [r4, #64]	; 0x40
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 5, 0);
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	2105      	movs	r1, #5
 8004ca6:	205f      	movs	r0, #95	; 0x5f
    __HAL_RCC_I2C4_CLK_ENABLE();
 8004ca8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cac:	6423      	str	r3, [r4, #64]	; 0x40
 8004cae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004cb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cb4:	9304      	str	r3, [sp, #16]
 8004cb6:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 5, 0);
 8004cb8:	f003 fba0 	bl	80083fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 8004cbc:	205f      	movs	r0, #95	; 0x5f
 8004cbe:	f003 fbcf 	bl	8008460 <HAL_NVIC_EnableIRQ>
}
 8004cc2:	e7b2      	b.n	8004c2a <HAL_I2C_MspInit+0x7a>
 8004cc4:	40005400 	.word	0x40005400
 8004cc8:	40023800 	.word	0x40023800
 8004ccc:	40020400 	.word	0x40020400
 8004cd0:	40006000 	.word	0x40006000
 8004cd4:	40020c00 	.word	0x40020c00

08004cd8 <HAL_I2C_MspDeInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
  if(hi2c->Instance==I2C1)
 8004cd8:	4a17      	ldr	r2, [pc, #92]	; (8004d38 <HAL_I2C_MspDeInit+0x60>)
{
 8004cda:	b508      	push	{r3, lr}
  if(hi2c->Instance==I2C1)
 8004cdc:	6803      	ldr	r3, [r0, #0]
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d111      	bne.n	8004d06 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8004ce2:	f502 32f2 	add.w	r2, r2, #123904	; 0x1e400

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8004ce6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004cea:	4814      	ldr	r0, [pc, #80]	; (8004d3c <HAL_I2C_MspDeInit+0x64>)
    __HAL_RCC_I2C1_CLK_DISABLE();
 8004cec:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004cee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004cf2:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8004cf4:	f004 fbec 	bl	80094d0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8004cf8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004cfc:	480f      	ldr	r0, [pc, #60]	; (8004d3c <HAL_I2C_MspDeInit+0x64>)
  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 8004cfe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8004d02:	f004 bbe5 	b.w	80094d0 <HAL_GPIO_DeInit>
  else if(hi2c->Instance==I2C4)
 8004d06:	4a0e      	ldr	r2, [pc, #56]	; (8004d40 <HAL_I2C_MspDeInit+0x68>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d113      	bne.n	8004d34 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C4_CLK_DISABLE();
 8004d0c:	f502 32ec 	add.w	r2, r2, #120832	; 0x1d800
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8004d10:	2180      	movs	r1, #128	; 0x80
 8004d12:	480a      	ldr	r0, [pc, #40]	; (8004d3c <HAL_I2C_MspDeInit+0x64>)
    __HAL_RCC_I2C4_CLK_DISABLE();
 8004d14:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004d16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d1a:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8004d1c:	f004 fbd8 	bl	80094d0 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12);
 8004d20:	4808      	ldr	r0, [pc, #32]	; (8004d44 <HAL_I2C_MspDeInit+0x6c>)
 8004d22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004d26:	f004 fbd3 	bl	80094d0 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(I2C4_EV_IRQn);
 8004d2a:	205f      	movs	r0, #95	; 0x5f
}
 8004d2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_DisableIRQ(I2C4_EV_IRQn);
 8004d30:	f003 bba4 	b.w	800847c <HAL_NVIC_DisableIRQ>
}
 8004d34:	bd08      	pop	{r3, pc}
 8004d36:	bf00      	nop
 8004d38:	40005400 	.word	0x40005400
 8004d3c:	40020400 	.word	0x40020400
 8004d40:	40006000 	.word	0x40006000
 8004d44:	40020c00 	.word	0x40020c00

08004d48 <HAL_JPEG_MspInit>:
* This function configures the hardware resources used in this example
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 8004d48:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(hjpeg->Instance==JPEG)
 8004d4a:	4b35      	ldr	r3, [pc, #212]	; (8004e20 <HAL_JPEG_MspInit+0xd8>)
{
 8004d4c:	4605      	mov	r5, r0
  if(hjpeg->Instance==JPEG)
 8004d4e:	6802      	ldr	r2, [r0, #0]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d162      	bne.n	8004e1a <HAL_JPEG_MspInit+0xd2>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 8004d54:	4b33      	ldr	r3, [pc, #204]	; (8004e24 <HAL_JPEG_MspInit+0xdc>)
    hdma_jpeg_in.Instance = DMA2_Stream0;
    hdma_jpeg_in.Init.Channel = DMA_CHANNEL_9;
    hdma_jpeg_in.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_jpeg_in.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_jpeg_in.Init.MemInc = DMA_MINC_ENABLE;
    hdma_jpeg_in.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004d56:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_jpeg_in.Instance = DMA2_Stream0;
 8004d5a:	4c33      	ldr	r4, [pc, #204]	; (8004e28 <HAL_JPEG_MspInit+0xe0>)
    hdma_jpeg_in.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_jpeg_in.Init.Mode = DMA_NORMAL;
    hdma_jpeg_in.Init.Priority = DMA_PRIORITY_LOW;
    hdma_jpeg_in.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
    hdma_jpeg_in.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004d5c:	2004      	movs	r0, #4
    __HAL_RCC_JPEG_CLK_ENABLE();
 8004d5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    hdma_jpeg_in.Init.MemBurst = DMA_MBURST_INC4;
    hdma_jpeg_in.Init.PeriphBurst = DMA_PBURST_INC4;
 8004d60:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    hdma_jpeg_in.Init.Channel = DMA_CHANNEL_9;
 8004d64:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 8004e34 <HAL_JPEG_MspInit+0xec>
    __HAL_RCC_JPEG_CLK_ENABLE();
 8004d68:	f042 0202 	orr.w	r2, r2, #2
 8004d6c:	635a      	str	r2, [r3, #52]	; 0x34
    hdma_jpeg_in.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d6e:	2240      	movs	r2, #64	; 0x40
    __HAL_RCC_JPEG_CLK_ENABLE();
 8004d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d72:	f003 0302 	and.w	r3, r3, #2
 8004d76:	9301      	str	r3, [sp, #4]
 8004d78:	9b01      	ldr	r3, [sp, #4]
    hdma_jpeg_in.Init.Channel = DMA_CHANNEL_9;
 8004d7a:	f04f 5390 	mov.w	r3, #301989888	; 0x12000000
 8004d7e:	e9c4 e300 	strd	lr, r3, [r4]
    hdma_jpeg_in.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d82:	2300      	movs	r3, #0
 8004d84:	e9c4 2302 	strd	r2, r3, [r4, #8]
    hdma_jpeg_in.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004d88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_jpeg_in.Init.Priority = DMA_PRIORITY_LOW;
 8004d8c:	6223      	str	r3, [r4, #32]
    hdma_jpeg_in.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004d8e:	e9c4 1204 	strd	r1, r2, [r4, #16]
    hdma_jpeg_in.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004d92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_jpeg_in.Init.Mode = DMA_NORMAL;
 8004d96:	e9c4 2306 	strd	r2, r3, [r4, #24]
    hdma_jpeg_in.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e9c4 0309 	strd	r0, r3, [r4, #36]	; 0x24
    hdma_jpeg_in.Init.PeriphBurst = DMA_PBURST_INC4;
 8004da0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    if (HAL_DMA_Init(&hdma_jpeg_in) != HAL_OK)
 8004da4:	4620      	mov	r0, r4
    hdma_jpeg_in.Init.PeriphBurst = DMA_PBURST_INC4;
 8004da6:	e9c4 c30b 	strd	ip, r3, [r4, #44]	; 0x2c
    if (HAL_DMA_Init(&hdma_jpeg_in) != HAL_OK)
 8004daa:	f003 fc39 	bl	8008620 <HAL_DMA_Init>
 8004dae:	b108      	cbz	r0, 8004db4 <HAL_JPEG_MspInit+0x6c>
    {
      Error_Handler();
 8004db0:	f7ff fe3a 	bl	8004a28 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hdma_jpeg_in);
 8004db4:	632c      	str	r4, [r5, #48]	; 0x30

    /* JPEG_OUT Init */
    hdma_jpeg_out.Instance = DMA2_Stream1;
    hdma_jpeg_out.Init.Channel = DMA_CHANNEL_9;
 8004db6:	f04f 5390 	mov.w	r3, #301989888	; 0x12000000
 8004dba:	4a1c      	ldr	r2, [pc, #112]	; (8004e2c <HAL_JPEG_MspInit+0xe4>)
    hdma_jpeg_out.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_jpeg_out.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_jpeg_out.Init.MemInc = DMA_MINC_ENABLE;
    hdma_jpeg_out.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004dbc:	f44f 6180 	mov.w	r1, #1024	; 0x400
    __HAL_LINKDMA(hjpeg,hdmain,hdma_jpeg_in);
 8004dc0:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_jpeg_out.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_jpeg_out.Init.Mode = DMA_NORMAL;
    hdma_jpeg_out.Init.Priority = DMA_PRIORITY_LOW;
    hdma_jpeg_out.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
    hdma_jpeg_out.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004dc2:	2004      	movs	r0, #4
    hdma_jpeg_out.Instance = DMA2_Stream1;
 8004dc4:	4c1a      	ldr	r4, [pc, #104]	; (8004e30 <HAL_JPEG_MspInit+0xe8>)
    hdma_jpeg_out.Init.MemBurst = DMA_MBURST_INC4;
    hdma_jpeg_out.Init.PeriphBurst = DMA_PBURST_INC4;
 8004dc6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    hdma_jpeg_out.Init.Channel = DMA_CHANNEL_9;
 8004dca:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_jpeg_out.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004dce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_jpeg_out.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004dd2:	2300      	movs	r3, #0
    hdma_jpeg_out.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004dd4:	e9c4 1204 	strd	r1, r2, [r4, #16]
    hdma_jpeg_out.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004dd8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_jpeg_out.Init.Priority = DMA_PRIORITY_LOW;
 8004ddc:	6223      	str	r3, [r4, #32]
    hdma_jpeg_out.Init.PeriphInc = DMA_PINC_DISABLE;
 8004dde:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_jpeg_out.Init.Mode = DMA_NORMAL;
 8004de2:	e9c4 2306 	strd	r2, r3, [r4, #24]
    hdma_jpeg_out.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e9c4 0309 	strd	r0, r3, [r4, #36]	; 0x24
    hdma_jpeg_out.Init.PeriphBurst = DMA_PBURST_INC4;
 8004dec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    if (HAL_DMA_Init(&hdma_jpeg_out) != HAL_OK)
 8004df0:	4620      	mov	r0, r4
    hdma_jpeg_out.Init.PeriphBurst = DMA_PBURST_INC4;
 8004df2:	e9c4 c30b 	strd	ip, r3, [r4, #44]	; 0x2c
    if (HAL_DMA_Init(&hdma_jpeg_out) != HAL_OK)
 8004df6:	f003 fc13 	bl	8008620 <HAL_DMA_Init>
 8004dfa:	b108      	cbz	r0, 8004e00 <HAL_JPEG_MspInit+0xb8>
    {
      Error_Handler();
 8004dfc:	f7ff fe14 	bl	8004a28 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hdma_jpeg_out);
 8004e00:	636c      	str	r4, [r5, #52]	; 0x34

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 8004e02:	2200      	movs	r2, #0
 8004e04:	2105      	movs	r1, #5
 8004e06:	206c      	movs	r0, #108	; 0x6c
    __HAL_LINKDMA(hjpeg,hdmaout,hdma_jpeg_out);
 8004e08:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 8004e0a:	f003 faf7 	bl	80083fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8004e0e:	206c      	movs	r0, #108	; 0x6c
  /* USER CODE BEGIN JPEG_MspInit 1 */

  /* USER CODE END JPEG_MspInit 1 */
  }

}
 8004e10:	b003      	add	sp, #12
 8004e12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8004e16:	f003 bb23 	b.w	8008460 <HAL_NVIC_EnableIRQ>
}
 8004e1a:	b003      	add	sp, #12
 8004e1c:	bd30      	pop	{r4, r5, pc}
 8004e1e:	bf00      	nop
 8004e20:	50051000 	.word	0x50051000
 8004e24:	40023800 	.word	0x40023800
 8004e28:	20012070 	.word	0x20012070
 8004e2c:	40026428 	.word	0x40026428
 8004e30:	200120d0 	.word	0x200120d0
 8004e34:	40026410 	.word	0x40026410

08004e38 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8004e38:	b510      	push	{r4, lr}
 8004e3a:	b0a6      	sub	sp, #152	; 0x98
 8004e3c:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004e3e:	2290      	movs	r2, #144	; 0x90
 8004e40:	2100      	movs	r1, #0
 8004e42:	a802      	add	r0, sp, #8
 8004e44:	f021 f86a 	bl	8025f1c <memset>
  if(hltdc->Instance==LTDC)
 8004e48:	6822      	ldr	r2, [r4, #0]
 8004e4a:	4b14      	ldr	r3, [pc, #80]	; (8004e9c <HAL_LTDC_MspInit+0x64>)
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d122      	bne.n	8004e96 <HAL_LTDC_MspInit+0x5e>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8004e50:	2308      	movs	r3, #8
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8004e52:	2007      	movs	r0, #7
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8004e54:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8004e56:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004e5a:	9307      	str	r3, [sp, #28]
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8004e5c:	2302      	movs	r3, #2
 8004e5e:	e9cd 3008 	strd	r3, r0, [sp, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8004e62:	2301      	movs	r3, #1
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004e64:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8004e66:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004e68:	f006 ff98 	bl	800bd9c <HAL_RCCEx_PeriphCLKConfig>
 8004e6c:	b108      	cbz	r0, 8004e72 <HAL_LTDC_MspInit+0x3a>
    {
      Error_Handler();
 8004e6e:	f7ff fddb 	bl	8004a28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8004e72:	4b0b      	ldr	r3, [pc, #44]	; (8004ea0 <HAL_LTDC_MspInit+0x68>)
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8004e74:	2058      	movs	r0, #88	; 0x58
 8004e76:	2103      	movs	r1, #3
    __HAL_RCC_LTDC_CLK_ENABLE();
 8004e78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e7a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004e7e:	645a      	str	r2, [r3, #68]	; 0x44
    HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8004e80:	2200      	movs	r2, #0
    __HAL_RCC_LTDC_CLK_ENABLE();
 8004e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e88:	9301      	str	r3, [sp, #4]
 8004e8a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8004e8c:	f003 fab6 	bl	80083fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8004e90:	2058      	movs	r0, #88	; 0x58
 8004e92:	f003 fae5 	bl	8008460 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8004e96:	b026      	add	sp, #152	; 0x98
 8004e98:	bd10      	pop	{r4, pc}
 8004e9a:	bf00      	nop
 8004e9c:	40016800 	.word	0x40016800
 8004ea0:	40023800 	.word	0x40023800

08004ea4 <HAL_QSPI_MspInit>:
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ea4:	2214      	movs	r2, #20
 8004ea6:	2100      	movs	r1, #0
{
 8004ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004eac:	b08a      	sub	sp, #40	; 0x28
 8004eae:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004eb0:	eb0d 0002 	add.w	r0, sp, r2
 8004eb4:	f021 f832 	bl	8025f1c <memset>
  if(hqspi->Instance==QUADSPI)
 8004eb8:	6822      	ldr	r2, [r4, #0]
 8004eba:	4b3a      	ldr	r3, [pc, #232]	; (8004fa4 <HAL_QSPI_MspInit+0x100>)
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d16e      	bne.n	8004f9e <HAL_QSPI_MspInit+0xfa>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

    __HAL_RCC_QSPI_FORCE_RESET();
 8004ec0:	4b39      	ldr	r3, [pc, #228]	; (8004fa8 <HAL_QSPI_MspInit+0x104>)
    PC9     ------> QUADSPI_BK1_IO0
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ec2:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8004ec4:	2403      	movs	r4, #3
 8004ec6:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_FORCE_RESET();
 8004ec8:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004eca:	f04f 0804 	mov.w	r8, #4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004ece:	a905      	add	r1, sp, #20
 8004ed0:	4836      	ldr	r0, [pc, #216]	; (8004fac <HAL_QSPI_MspInit+0x108>)
    __HAL_RCC_QSPI_FORCE_RESET();
 8004ed2:	f042 0202 	orr.w	r2, r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ed6:	2700      	movs	r7, #0
    __HAL_RCC_QSPI_FORCE_RESET();
 8004ed8:	619a      	str	r2, [r3, #24]
    __HAL_RCC_QSPI_RELEASE_RESET();
 8004eda:	699a      	ldr	r2, [r3, #24]
 8004edc:	f022 0202 	bic.w	r2, r2, #2
 8004ee0:	619a      	str	r2, [r3, #24]
    __HAL_RCC_QSPI_CLK_ENABLE();
 8004ee2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ee4:	f042 0202 	orr.w	r2, r2, #2
 8004ee8:	639a      	str	r2, [r3, #56]	; 0x38
 8004eea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004eec:	f002 0202 	and.w	r2, r2, #2
 8004ef0:	9200      	str	r2, [sp, #0]
 8004ef2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004ef4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ef6:	f042 0210 	orr.w	r2, r2, #16
 8004efa:	631a      	str	r2, [r3, #48]	; 0x30
 8004efc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004efe:	f002 0210 	and.w	r2, r2, #16
 8004f02:	9201      	str	r2, [sp, #4]
 8004f04:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f08:	f042 0202 	orr.w	r2, r2, #2
 8004f0c:	631a      	str	r2, [r3, #48]	; 0x30
 8004f0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f10:	f002 0202 	and.w	r2, r2, #2
 8004f14:	9202      	str	r2, [sp, #8]
 8004f16:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f1a:	f042 0204 	orr.w	r2, r2, #4
 8004f1e:	631a      	str	r2, [r3, #48]	; 0x30
 8004f20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f22:	f002 0204 	and.w	r2, r2, #4
 8004f26:	9203      	str	r2, [sp, #12]
 8004f28:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004f2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f2c:	f042 0208 	orr.w	r2, r2, #8
 8004f30:	631a      	str	r2, [r3, #48]	; 0x30
 8004f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f34:	f003 0308 	and.w	r3, r3, #8
 8004f38:	9304      	str	r3, [sp, #16]
 8004f3a:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f3c:	e9cd 8505 	strd	r8, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8004f40:	e9cd 4608 	strd	r4, r6, [sp, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004f44:	f004 f9e0 	bl	8009308 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004f48:	2340      	movs	r3, #64	; 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f4a:	a905      	add	r1, sp, #20
 8004f4c:	4818      	ldr	r0, [pc, #96]	; (8004fb0 <HAL_QSPI_MspInit+0x10c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f4e:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f52:	2301      	movs	r3, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f54:	e9cd 3407 	strd	r3, r4, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8004f58:	230a      	movs	r3, #10
 8004f5a:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f5c:	f004 f9d4 	bl	8009308 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8004f60:	f44f 63c0 	mov.w	r3, #1536	; 0x600
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f64:	a905      	add	r1, sp, #20
 8004f66:	4813      	ldr	r0, [pc, #76]	; (8004fb4 <HAL_QSPI_MspInit+0x110>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8004f68:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f6a:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f6e:	e9cd 7407 	strd	r7, r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f72:	f004 f9c9 	bl	8009308 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f76:	a905      	add	r1, sp, #20
 8004f78:	480d      	ldr	r0, [pc, #52]	; (8004fb0 <HAL_QSPI_MspInit+0x10c>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8004f7a:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f7c:	e9cd 8505 	strd	r8, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f80:	e9cd 7407 	strd	r7, r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f84:	f004 f9c0 	bl	8009308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004f88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004f8c:	a905      	add	r1, sp, #20
 8004f8e:	480a      	ldr	r0, [pc, #40]	; (8004fb8 <HAL_QSPI_MspInit+0x114>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8004f90:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f92:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f96:	e9cd 7407 	strd	r7, r4, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004f9a:	f004 f9b5 	bl	8009308 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8004f9e:	b00a      	add	sp, #40	; 0x28
 8004fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fa4:	a0001000 	.word	0xa0001000
 8004fa8:	40023800 	.word	0x40023800
 8004fac:	40021000 	.word	0x40021000
 8004fb0:	40020400 	.word	0x40020400
 8004fb4:	40020800 	.word	0x40020800
 8004fb8:	40020c00 	.word	0x40020c00

08004fbc <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM1)
 8004fbc:	6802      	ldr	r2, [r0, #0]
{
 8004fbe:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM1)
 8004fc0:	4b07      	ldr	r3, [pc, #28]	; (8004fe0 <HAL_TIM_PWM_MspInit+0x24>)
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d10a      	bne.n	8004fdc <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004fc6:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8004fca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fcc:	f042 0201 	orr.w	r2, r2, #1
 8004fd0:	645a      	str	r2, [r3, #68]	; 0x44
 8004fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fd4:	f003 0301 	and.w	r3, r3, #1
 8004fd8:	9301      	str	r3, [sp, #4]
 8004fda:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004fdc:	b002      	add	sp, #8
 8004fde:	4770      	bx	lr
 8004fe0:	40010000 	.word	0x40010000

08004fe4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004fe4:	b510      	push	{r4, lr}
 8004fe6:	b086      	sub	sp, #24
 8004fe8:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fea:	2214      	movs	r2, #20
 8004fec:	2100      	movs	r1, #0
 8004fee:	a801      	add	r0, sp, #4
 8004ff0:	f020 ff94 	bl	8025f1c <memset>
  if(htim->Instance==TIM1)
 8004ff4:	6822      	ldr	r2, [r4, #0]
 8004ff6:	4b0d      	ldr	r3, [pc, #52]	; (800502c <HAL_TIM_MspPostInit+0x48>)
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d115      	bne.n	8005028 <HAL_TIM_MspPostInit+0x44>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ffc:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
    GPIO_InitStruct.Pin = GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005000:	a901      	add	r1, sp, #4
 8005002:	480b      	ldr	r0, [pc, #44]	; (8005030 <HAL_TIM_MspPostInit+0x4c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005004:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005006:	f042 0201 	orr.w	r2, r2, #1
 800500a:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800500c:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005012:	f003 0301 	and.w	r3, r3, #1
 8005016:	9300      	str	r3, [sp, #0]
 8005018:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800501a:	2302      	movs	r3, #2
 800501c:	e9cd 2301 	strd	r2, r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005020:	2301      	movs	r3, #1
 8005022:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005024:	f004 f970 	bl	8009308 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005028:	b006      	add	sp, #24
 800502a:	bd10      	pop	{r4, pc}
 800502c:	40010000 	.word	0x40010000
 8005030:	40020000 	.word	0x40020000

08005034 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8005034:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8005036:	2300      	movs	r3, #0
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8005038:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800503a:	9303      	str	r3, [sp, #12]
  if (FMC_Initialized) {
 800503c:	4b2a      	ldr	r3, [pc, #168]	; (80050e8 <HAL_SDRAM_MspInit+0xb4>)
 800503e:	681e      	ldr	r6, [r3, #0]
 8005040:	2e00      	cmp	r6, #0
 8005042:	d14f      	bne.n	80050e4 <HAL_SDRAM_MspInit+0xb0>
  FMC_Initialized = 1;
 8005044:	2201      	movs	r2, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005046:	2702      	movs	r7, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005048:	2503      	movs	r5, #3
 800504a:	240c      	movs	r4, #12
  FMC_Initialized = 1;
 800504c:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800504e:	a901      	add	r1, sp, #4
  __HAL_RCC_FMC_CLK_ENABLE();
 8005050:	4b26      	ldr	r3, [pc, #152]	; (80050ec <HAL_SDRAM_MspInit+0xb8>)
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005052:	4827      	ldr	r0, [pc, #156]	; (80050f0 <HAL_SDRAM_MspInit+0xbc>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8005054:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005056:	f042 0201 	orr.w	r2, r2, #1
 800505a:	639a      	str	r2, [r3, #56]	; 0x38
 800505c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505e:	f003 0301 	and.w	r3, r3, #1
 8005062:	9300      	str	r3, [sp, #0]
 8005064:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005066:	f64f 7383 	movw	r3, #65411	; 0xff83
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800506a:	e9cd 5404 	strd	r5, r4, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800506e:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005072:	f004 f949 	bl	8009308 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 8005076:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800507a:	a901      	add	r1, sp, #4
 800507c:	481d      	ldr	r0, [pc, #116]	; (80050f4 <HAL_SDRAM_MspInit+0xc0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800507e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005080:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005084:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005088:	f004 f93e 	bl	8009308 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 800508c:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005090:	a901      	add	r1, sp, #4
 8005092:	4819      	ldr	r0, [pc, #100]	; (80050f8 <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005094:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005096:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800509a:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800509e:	f004 f933 	bl	8009308 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_5
 80050a2:	f240 63ff 	movw	r3, #1791	; 0x6ff
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80050a6:	a901      	add	r1, sp, #4
 80050a8:	4814      	ldr	r0, [pc, #80]	; (80050fc <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80050aa:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050ac:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050b0:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80050b4:	f004 f928 	bl	8009308 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80050b8:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80050bc:	a901      	add	r1, sp, #4
 80050be:	4810      	ldr	r0, [pc, #64]	; (8005100 <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80050c0:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050c2:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050c6:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80050ca:	f004 f91d 	bl	8009308 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_5
 80050ce:	f64f 732c 	movw	r3, #65324	; 0xff2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80050d2:	a901      	add	r1, sp, #4
 80050d4:	480b      	ldr	r0, [pc, #44]	; (8005104 <HAL_SDRAM_MspInit+0xd0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80050d6:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050d8:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050dc:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80050e0:	f004 f912 	bl	8009308 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80050e4:	b007      	add	sp, #28
 80050e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050e8:	200123d8 	.word	0x200123d8
 80050ec:	40023800 	.word	0x40023800
 80050f0:	40021000 	.word	0x40021000
 80050f4:	40021800 	.word	0x40021800
 80050f8:	40020c00 	.word	0x40020c00
 80050fc:	40022000 	.word	0x40022000
 8005100:	40021400 	.word	0x40021400
 8005104:	40021c00 	.word	0x40021c00

08005108 <HAL_InitTick>:
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8005108:	4b21      	ldr	r3, [pc, #132]	; (8005190 <HAL_InitTick+0x88>)
 800510a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800510c:	f042 0210 	orr.w	r2, r2, #16
{
 8005110:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM6_CLK_ENABLE();
 8005112:	641a      	str	r2, [r3, #64]	; 0x40
{
 8005114:	b088      	sub	sp, #32
  __HAL_RCC_TIM6_CLK_ENABLE();
 8005116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
{
 8005118:	4605      	mov	r5, r0

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800511a:	a901      	add	r1, sp, #4
 800511c:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 800511e:	f003 0310 	and.w	r3, r3, #16
 8005122:	9302      	str	r3, [sp, #8]
 8005124:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005126:	f006 fe1b 	bl	800bd60 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800512a:	9b06      	ldr	r3, [sp, #24]
 800512c:	bb4b      	cbnz	r3, 8005182 <HAL_InitTick+0x7a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800512e:	f006 fe07 	bl	800bd40 <HAL_RCC_GetPCLK1Freq>

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8005132:	4e18      	ldr	r6, [pc, #96]	; (8005194 <HAL_InitTick+0x8c>)
 8005134:	4b18      	ldr	r3, [pc, #96]	; (8005198 <HAL_InitTick+0x90>)
 8005136:	6033      	str	r3, [r6, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8005138:	f240 33e7 	movw	r3, #999	; 0x3e7
 800513c:	60f3      	str	r3, [r6, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800513e:	4b17      	ldr	r3, [pc, #92]	; (800519c <HAL_InitTick+0x94>)
 8005140:	fbb0 f3f3 	udiv	r3, r0, r3
 8005144:	3b01      	subs	r3, #1
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim6);
 8005146:	4630      	mov	r0, r6
  htim6.Init.Prescaler = uwPrescalerValue;
 8005148:	6073      	str	r3, [r6, #4]
  htim6.Init.ClockDivision = 0;
 800514a:	2300      	movs	r3, #0
 800514c:	6133      	str	r3, [r6, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800514e:	60b3      	str	r3, [r6, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005150:	61b3      	str	r3, [r6, #24]
  status = HAL_TIM_Base_Init(&htim6);
 8005152:	f007 fb65 	bl	800c820 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8005156:	4604      	mov	r4, r0
 8005158:	b980      	cbnz	r0, 800517c <HAL_InitTick+0x74>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800515a:	4630      	mov	r0, r6
 800515c:	f007 fa08 	bl	800c570 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8005160:	4604      	mov	r4, r0
 8005162:	b958      	cbnz	r0, 800517c <HAL_InitTick+0x74>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005164:	2036      	movs	r0, #54	; 0x36
 8005166:	f003 f97b 	bl	8008460 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800516a:	2d0f      	cmp	r5, #15
 800516c:	d80d      	bhi.n	800518a <HAL_InitTick+0x82>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800516e:	4622      	mov	r2, r4
 8005170:	4629      	mov	r1, r5
 8005172:	2036      	movs	r0, #54	; 0x36
 8005174:	f003 f942 	bl	80083fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005178:	4b09      	ldr	r3, [pc, #36]	; (80051a0 <HAL_InitTick+0x98>)
 800517a:	601d      	str	r5, [r3, #0]
    }
  }

 /* Return function status */
  return status;
}
 800517c:	4620      	mov	r0, r4
 800517e:	b008      	add	sp, #32
 8005180:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8005182:	f006 fddd 	bl	800bd40 <HAL_RCC_GetPCLK1Freq>
 8005186:	0040      	lsls	r0, r0, #1
 8005188:	e7d3      	b.n	8005132 <HAL_InitTick+0x2a>
        status = HAL_ERROR;
 800518a:	2401      	movs	r4, #1
 800518c:	e7f6      	b.n	800517c <HAL_InitTick+0x74>
 800518e:	bf00      	nop
 8005190:	40023800 	.word	0x40023800
 8005194:	200123dc 	.word	0x200123dc
 8005198:	40001000 	.word	0x40001000
 800519c:	000f4240 	.word	0x000f4240
 80051a0:	20000068 	.word	0x20000068

080051a4 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80051a4:	4770      	bx	lr

080051a6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80051a6:	e7fe      	b.n	80051a6 <HardFault_Handler>

080051a8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80051a8:	e7fe      	b.n	80051a8 <MemManage_Handler>

080051aa <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80051aa:	e7fe      	b.n	80051aa <BusFault_Handler>

080051ac <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80051ac:	e7fe      	b.n	80051ac <UsageFault_Handler>

080051ae <DebugMon_Handler>:
 80051ae:	4770      	bx	lr

080051b0 <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80051b0:	4801      	ldr	r0, [pc, #4]	; (80051b8 <ADC_IRQHandler+0x8>)
 80051b2:	f002 bfd2 	b.w	800815a <HAL_ADC_IRQHandler>
 80051b6:	bf00      	nop
 80051b8:	20011fac 	.word	0x20011fac

080051bc <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80051bc:	4801      	ldr	r0, [pc, #4]	; (80051c4 <TIM6_DAC_IRQHandler+0x8>)
 80051be:	f007 ba19 	b.w	800c5f4 <HAL_TIM_IRQHandler>
 80051c2:	bf00      	nop
 80051c4:	200123dc 	.word	0x200123dc

080051c8 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_jpeg_in);
 80051c8:	4801      	ldr	r0, [pc, #4]	; (80051d0 <DMA2_Stream0_IRQHandler+0x8>)
 80051ca:	f003 baf9 	b.w	80087c0 <HAL_DMA_IRQHandler>
 80051ce:	bf00      	nop
 80051d0:	20012070 	.word	0x20012070

080051d4 <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_jpeg_out);
 80051d4:	4801      	ldr	r0, [pc, #4]	; (80051dc <DMA2_Stream1_IRQHandler+0x8>)
 80051d6:	f003 baf3 	b.w	80087c0 <HAL_DMA_IRQHandler>
 80051da:	bf00      	nop
 80051dc:	200120d0 	.word	0x200120d0

080051e0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80051e0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LTDC_IRQn 0 */
  int now = HAL_GetTick();
 80051e2:	f002 fe77 	bl	8007ed4 <HAL_GetTick>
  diff = last - now;
 80051e6:	4a05      	ldr	r2, [pc, #20]	; (80051fc <LTDC_IRQHandler+0x1c>)
 80051e8:	4905      	ldr	r1, [pc, #20]	; (8005200 <LTDC_IRQHandler+0x20>)
 80051ea:	6813      	ldr	r3, [r2, #0]
 80051ec:	1a1b      	subs	r3, r3, r0
 80051ee:	600b      	str	r3, [r1, #0]
  last = now;
 80051f0:	6010      	str	r0, [r2, #0]
  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80051f2:	4804      	ldr	r0, [pc, #16]	; (8005204 <LTDC_IRQHandler+0x24>)
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80051f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_LTDC_IRQHandler(&hltdc);
 80051f8:	f005 bf57 	b.w	800b0aa <HAL_LTDC_IRQHandler>
 80051fc:	2001242c 	.word	0x2001242c
 8005200:	20012428 	.word	0x20012428
 8005204:	2001224c 	.word	0x2001224c

08005208 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8005208:	4801      	ldr	r0, [pc, #4]	; (8005210 <DMA2D_IRQHandler+0x8>)
 800520a:	f003 bbd1 	b.w	80089b0 <HAL_DMA2D_IRQHandler>
 800520e:	bf00      	nop
 8005210:	20012018 	.word	0x20012018

08005214 <I2C4_EV_IRQHandler>:
void I2C4_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 8005214:	4801      	ldr	r0, [pc, #4]	; (800521c <I2C4_EV_IRQHandler+0x8>)
 8005216:	f004 bec3 	b.w	8009fa0 <HAL_I2C_EV_IRQHandler>
 800521a:	bf00      	nop
 800521c:	200121a0 	.word	0x200121a0

08005220 <DSI_IRQHandler>:
void DSI_IRQHandler(void)
{
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8005220:	4801      	ldr	r0, [pc, #4]	; (8005228 <DSI_IRQHandler+0x8>)
 8005222:	f003 bdd8 	b.w	8008dd6 <HAL_DSI_IRQHandler>
 8005226:	bf00      	nop
 8005228:	20012130 	.word	0x20012130

0800522c <JPEG_IRQHandler>:
void JPEG_IRQHandler(void)
{
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 800522c:	4801      	ldr	r0, [pc, #4]	; (8005234 <JPEG_IRQHandler+0x8>)
 800522e:	f005 bde9 	b.w	800ae04 <HAL_JPEG_IRQHandler>
 8005232:	bf00      	nop
 8005234:	200121f4 	.word	0x200121f4

08005238 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8005238:	2001      	movs	r0, #1
 800523a:	4770      	bx	lr

0800523c <_kill>:

int _kill(int pid, int sig)
{
 800523c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800523e:	f020 fd19 	bl	8025c74 <__errno>
 8005242:	2316      	movs	r3, #22
 8005244:	6003      	str	r3, [r0, #0]
	return -1;
}
 8005246:	f04f 30ff 	mov.w	r0, #4294967295
 800524a:	bd08      	pop	{r3, pc}

0800524c <_exit>:

void _exit (int status)
{
 800524c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800524e:	f020 fd11 	bl	8025c74 <__errno>
 8005252:	2316      	movs	r3, #22
 8005254:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8005256:	e7fe      	b.n	8005256 <_exit+0xa>

08005258 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005258:	b570      	push	{r4, r5, r6, lr}
 800525a:	460d      	mov	r5, r1
 800525c:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800525e:	460e      	mov	r6, r1
 8005260:	1b73      	subs	r3, r6, r5
 8005262:	429c      	cmp	r4, r3
 8005264:	dc01      	bgt.n	800526a <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8005266:	4620      	mov	r0, r4
 8005268:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800526a:	f3af 8000 	nop.w
 800526e:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005272:	e7f5      	b.n	8005260 <_read+0x8>

08005274 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005274:	b570      	push	{r4, r5, r6, lr}
 8005276:	460d      	mov	r5, r1
 8005278:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800527a:	460e      	mov	r6, r1
 800527c:	1b73      	subs	r3, r6, r5
 800527e:	429c      	cmp	r4, r3
 8005280:	dc01      	bgt.n	8005286 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8005282:	4620      	mov	r0, r4
 8005284:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8005286:	f816 0b01 	ldrb.w	r0, [r6], #1
 800528a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800528e:	e7f5      	b.n	800527c <_write+0x8>

08005290 <_close>:

int _close(int file)
{
	return -1;
}
 8005290:	f04f 30ff 	mov.w	r0, #4294967295
 8005294:	4770      	bx	lr

08005296 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8005296:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 800529a:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 800529c:	604b      	str	r3, [r1, #4]
}
 800529e:	4770      	bx	lr

080052a0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80052a0:	2001      	movs	r0, #1
 80052a2:	4770      	bx	lr

080052a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80052a4:	2000      	movs	r0, #0
 80052a6:	4770      	bx	lr

080052a8 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80052a8:	4a0a      	ldr	r2, [pc, #40]	; (80052d4 <_sbrk+0x2c>)
 80052aa:	6811      	ldr	r1, [r2, #0]
{
 80052ac:	b508      	push	{r3, lr}
 80052ae:	4603      	mov	r3, r0
	if (heap_end == 0)
 80052b0:	b909      	cbnz	r1, 80052b6 <_sbrk+0xe>
		heap_end = &end;
 80052b2:	4909      	ldr	r1, [pc, #36]	; (80052d8 <_sbrk+0x30>)
 80052b4:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
 80052b6:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 80052b8:	4669      	mov	r1, sp
 80052ba:	4403      	add	r3, r0
 80052bc:	428b      	cmp	r3, r1
 80052be:	d906      	bls.n	80052ce <_sbrk+0x26>
	{
		errno = ENOMEM;
 80052c0:	f020 fcd8 	bl	8025c74 <__errno>
 80052c4:	230c      	movs	r3, #12
 80052c6:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80052c8:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 80052cc:	bd08      	pop	{r3, pc}
	heap_end += incr;
 80052ce:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 80052d0:	e7fc      	b.n	80052cc <_sbrk+0x24>
 80052d2:	bf00      	nop
 80052d4:	20012430 	.word	0x20012430
 80052d8:	20027e70 	.word	0x20027e70

080052dc <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId SMALL = 2;         // verdana_20_4bpp
    static const touchgfx::FontId TYPOGRAPHY_00 = 0; // verdana_30_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 80052dc:	4770      	bx	lr

080052de <_ZN23ApplicationFontProviderD0Ev>:
 80052de:	b510      	push	{r4, lr}
 80052e0:	4604      	mov	r4, r0
 80052e2:	2104      	movs	r1, #4
 80052e4:	f020 fc65 	bl	8025bb2 <_ZdlPvj>
 80052e8:	4620      	mov	r0, r4
 80052ea:	bd10      	pop	{r4, pc}

080052ec <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 80052ec:	b508      	push	{r3, lr}
    switch (typography)
 80052ee:	2903      	cmp	r1, #3
 80052f0:	d80f      	bhi.n	8005312 <_ZN23ApplicationFontProvider7getFontEt+0x26>
 80052f2:	e8df f001 	tbb	[pc, r1]
 80052f6:	020a      	.short	0x020a
 80052f8:	0a06      	.short	0x0a06
    case Typography::DEFAULT:
        // verdana_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
    case Typography::LARGE:
        // verdana_60_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 80052fa:	f002 f8e5 	bl	80074c8 <_ZN17TypedTextDatabase8getFontsEv>
 80052fe:	6840      	ldr	r0, [r0, #4]
        // verdana_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
    default:
        return 0;
    }
}
 8005300:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8005302:	f002 f8e1 	bl	80074c8 <_ZN17TypedTextDatabase8getFontsEv>
 8005306:	6880      	ldr	r0, [r0, #8]
 8005308:	e7fa      	b.n	8005300 <_ZN23ApplicationFontProvider7getFontEt+0x14>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800530a:	f002 f8dd 	bl	80074c8 <_ZN17TypedTextDatabase8getFontsEv>
 800530e:	6800      	ldr	r0, [r0, #0]
 8005310:	e7f6      	b.n	8005300 <_ZN23ApplicationFontProvider7getFontEt+0x14>
    switch (typography)
 8005312:	2000      	movs	r0, #0
 8005314:	e7f4      	b.n	8005300 <_ZN23ApplicationFontProvider7getFontEt+0x14>
	...

08005318 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8005318:	4800      	ldr	r0, [pc, #0]	; (800531c <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 800531a:	4770      	bx	lr
 800531c:	08028e34 	.word	0x08028e34

08005320 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 8005320:	2008      	movs	r0, #8
 8005322:	4770      	bx	lr

08005324 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8005324:	b513      	push	{r0, r1, r4, lr}
 8005326:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 8005328:	b151      	cbz	r1, 8005340 <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800532a:	6803      	ldr	r3, [r0, #0]
 800532c:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 800532e:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8005330:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8005334:	689c      	ldr	r4, [r3, #8]
 8005336:	f10d 0303 	add.w	r3, sp, #3
 800533a:	47a0      	blx	r4
        return glyph;
    }
 800533c:	b002      	add	sp, #8
 800533e:	bd10      	pop	{r4, pc}
            return 0;
 8005340:	4608      	mov	r0, r1
 8005342:	e7fb      	b.n	800533c <_ZNK8touchgfx4Font8getGlyphEt+0x18>

08005344 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8005344:	89c0      	ldrh	r0, [r0, #14]
 8005346:	4770      	bx	lr

08005348 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8005348:	8a00      	ldrh	r0, [r0, #16]
 800534a:	4770      	bx	lr

0800534c <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 800534c:	88c0      	ldrh	r0, [r0, #6]
 800534e:	4770      	bx	lr

08005350 <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 8005350:	8880      	ldrh	r0, [r0, #4]
 8005352:	4770      	bx	lr

08005354 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8005354:	7a80      	ldrb	r0, [r0, #10]
    }
 8005356:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800535a:	4770      	bx	lr

0800535c <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 800535c:	7a80      	ldrb	r0, [r0, #10]
    }
 800535e:	09c0      	lsrs	r0, r0, #7
 8005360:	4770      	bx	lr

08005362 <_ZN8touchgfx9TypedTextD1Ev>:
    }
 8005362:	4770      	bx	lr

08005364 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8005364:	b510      	push	{r4, lr}
 8005366:	4604      	mov	r4, r0
    }
 8005368:	2108      	movs	r1, #8
 800536a:	f020 fc22 	bl	8025bb2 <_ZdlPvj>
 800536e:	4620      	mov	r0, r4
 8005370:	bd10      	pop	{r4, pc}

08005372 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 8005372:	4770      	bx	lr

08005374 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 8005374:	4770      	bx	lr

08005376 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8005376:	f500 7398 	add.w	r3, r0, #304	; 0x130
 800537a:	6808      	ldr	r0, [r1, #0]
 800537c:	6849      	ldr	r1, [r1, #4]
 800537e:	c303      	stmia	r3!, {r0, r1}
    }
 8005380:	4770      	bx	lr

08005382 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 8005382:	4770      	bx	lr

08005384 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 8005384:	4770      	bx	lr

08005386 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 8005386:	6041      	str	r1, [r0, #4]
    }
 8005388:	4770      	bx	lr

0800538a <_ZNK8touchgfx10Transition13FullSolidRect12getSolidRectEv>:
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 800538a:	2200      	movs	r2, #0
     * A Widget that reports solid and but does not draw anything.
     */
    class FullSolidRect : public Widget
    {
    public:
        virtual Rect getSolidRect() const
 800538c:	b510      	push	{r4, lr}
        {
            return Rect(0, 0, rect.width, rect.height);
 800538e:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8005392:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8005396:	8002      	strh	r2, [r0, #0]
 8005398:	8042      	strh	r2, [r0, #2]
 800539a:	8084      	strh	r4, [r0, #4]
 800539c:	80c1      	strh	r1, [r0, #6]
        }
 800539e:	bd10      	pop	{r4, pc}

080053a0 <_ZNK8touchgfx10Transition13FullSolidRect4drawERKNS_4RectE>:

        virtual void draw(const Rect& area) const
        {
        }
 80053a0:	4770      	bx	lr

080053a2 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 80053a2:	4770      	bx	lr

080053a4 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80053a4:	4b06      	ldr	r3, [pc, #24]	; (80053c0 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 80053a6:	f8c0 0148 	str.w	r0, [r0, #328]	; 0x148
 80053aa:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
 80053ae:	2300      	movs	r3, #0
 80053b0:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
// Screen2

void FrontendApplicationBase::gotoScreen2ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen2ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 80053b4:	f500 73a2 	add.w	r3, r0, #324	; 0x144
 80053b8:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140

    virtual void changeToStartScreen()
    {
        gotoScreen2ScreenNoTransition();
    }
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	08005681 	.word	0x08005681

080053c4 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 80053c4:	2301      	movs	r3, #1
 80053c6:	7203      	strb	r3, [r0, #8]
    }
 80053c8:	4770      	bx	lr

080053ca <_ZN8touchgfx10Transition13FullSolidRectD1Ev>:
    class FullSolidRect : public Widget
 80053ca:	4770      	bx	lr

080053cc <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EED1Ev>:
{
/**
 * A Transition that slides the new screen over the previous \e from the given direction.
 */
template <Direction templateDirection>
class CoverTransition : public Transition
 80053cc:	4770      	bx	lr

080053ce <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED1Ev>:
 80053ce:	4770      	bx	lr

080053d0 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 80053d0:	4770      	bx	lr

080053d2 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 80053d2:	4770      	bx	lr

080053d4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE8tearDownEv>:

            d = d->getNextSibling();
        }
    }

    virtual void tearDown()
 80053d4:	4601      	mov	r1, r0
    {
        screenContainer->remove(solid);
 80053d6:	6840      	ldr	r0, [r0, #4]
 80053d8:	6803      	ldr	r3, [r0, #0]
 80053da:	3110      	adds	r1, #16
 80053dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053de:	4718      	bx	r3

080053e0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE4initEv>:
    }

    virtual void init()
 80053e0:	b570      	push	{r4, r5, r6, lr}
 80053e2:	4605      	mov	r5, r0
    {
        Transition::init();

        // Move snapshot and its children with delta value for X or Y
        Drawable* d = screenContainer->getFirstChild();
 80053e4:	6840      	ldr	r0, [r0, #4]
 80053e6:	6803      	ldr	r3, [r0, #0]
 80053e8:	69db      	ldr	r3, [r3, #28]
 80053ea:	4798      	blx	r3
 80053ec:	4604      	mov	r4, r0
        while (d)
 80053ee:	b14c      	cbz	r4, 8005404 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE4initEv+0x24>
        {
            switch (templateDirection)
            {
            case EAST:
            case WEST:
                d->setX(d->getX() - targetValue);
 80053f0:	88a1      	ldrh	r1, [r4, #4]
 80053f2:	4620      	mov	r0, r4
 80053f4:	89ab      	ldrh	r3, [r5, #12]
 80053f6:	1ac9      	subs	r1, r1, r3
 80053f8:	6823      	ldr	r3, [r4, #0]
 80053fa:	b209      	sxth	r1, r1
 80053fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053fe:	4798      	blx	r3
        return nextSibling;
 8005400:	69a4      	ldr	r4, [r4, #24]
        while (d)
 8005402:	e7f4      	b.n	80053ee <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE4initEv+0xe>
            }

            d = d->getNextSibling();
        }

        screenContainer->add(solid);
 8005404:	6868      	ldr	r0, [r5, #4]
 8005406:	f105 0110 	add.w	r1, r5, #16
 800540a:	6803      	ldr	r3, [r0, #0]
    }
 800540c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        screenContainer->add(solid);
 8005410:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005412:	4718      	bx	r3

08005414 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE8tearDownEv>:
    virtual void tearDown()
 8005414:	4601      	mov	r1, r0
        screenContainer->remove(solid);
 8005416:	6840      	ldr	r0, [r0, #4]
 8005418:	6803      	ldr	r3, [r0, #0]
 800541a:	3110      	adds	r1, #16
 800541c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800541e:	4718      	bx	r3

08005420 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv>:
    virtual void init()
 8005420:	b570      	push	{r4, r5, r6, lr}
 8005422:	4605      	mov	r5, r0
        Drawable* d = screenContainer->getFirstChild();
 8005424:	6840      	ldr	r0, [r0, #4]
 8005426:	6803      	ldr	r3, [r0, #0]
 8005428:	69db      	ldr	r3, [r3, #28]
 800542a:	4798      	blx	r3
 800542c:	4604      	mov	r4, r0
        while (d)
 800542e:	b14c      	cbz	r4, 8005444 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv+0x24>
                d->setX(d->getX() - targetValue);
 8005430:	88a1      	ldrh	r1, [r4, #4]
 8005432:	4620      	mov	r0, r4
 8005434:	89ab      	ldrh	r3, [r5, #12]
 8005436:	1ac9      	subs	r1, r1, r3
 8005438:	6823      	ldr	r3, [r4, #0]
 800543a:	b209      	sxth	r1, r1
 800543c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800543e:	4798      	blx	r3
 8005440:	69a4      	ldr	r4, [r4, #24]
        while (d)
 8005442:	e7f4      	b.n	800542e <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv+0xe>
        screenContainer->add(solid);
 8005444:	6868      	ldr	r0, [r5, #4]
 8005446:	f105 0110 	add.w	r1, r5, #16
 800544a:	6803      	ldr	r3, [r0, #0]
    }
 800544c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        screenContainer->add(solid);
 8005450:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005452:	4718      	bx	r3

08005454 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8005454:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 8005456:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 8005458:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 800545a:	68c2      	ldr	r2, [r0, #12]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	1054      	asrs	r4, r2, #1
 8005460:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8005464:	07d2      	lsls	r2, r2, #31
 8005466:	bf48      	it	mi
 8005468:	590a      	ldrmi	r2, [r1, r4]
    }
 800546a:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 800546e:	bf48      	it	mi
 8005470:	58d3      	ldrmi	r3, [r2, r3]
 8005472:	4718      	bx	r3

08005474 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun != 0);
 8005474:	6843      	ldr	r3, [r0, #4]
 8005476:	b12b      	cbz	r3, 8005484 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x10>
 8005478:	6883      	ldr	r3, [r0, #8]
 800547a:	b92b      	cbnz	r3, 8005488 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 800547c:	68c0      	ldr	r0, [r0, #12]
 800547e:	f000 0001 	and.w	r0, r0, #1
 8005482:	4770      	bx	lr
 8005484:	4618      	mov	r0, r3
 8005486:	4770      	bx	lr
 8005488:	2001      	movs	r0, #1
    }
 800548a:	4770      	bx	lr

0800548c <_ZN8touchgfx12NoTransitionD0Ev>:
 800548c:	b510      	push	{r4, lr}
 800548e:	4604      	mov	r4, r0
 8005490:	210c      	movs	r1, #12
 8005492:	f020 fb8e 	bl	8025bb2 <_ZdlPvj>
 8005496:	4620      	mov	r0, r4
 8005498:	bd10      	pop	{r4, pc}

0800549a <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800549a:	b510      	push	{r4, lr}
 800549c:	4604      	mov	r4, r0
 800549e:	2110      	movs	r1, #16
 80054a0:	f020 fb87 	bl	8025bb2 <_ZdlPvj>
 80054a4:	4620      	mov	r0, r4
 80054a6:	bd10      	pop	{r4, pc}

080054a8 <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 80054a8:	b510      	push	{r4, lr}
 80054aa:	4604      	mov	r4, r0
 80054ac:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 80054b0:	f020 fb7f 	bl	8025bb2 <_ZdlPvj>
 80054b4:	4620      	mov	r0, r4
 80054b6:	bd10      	pop	{r4, pc}

080054b8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EED0Ev>:
class CoverTransition : public Transition
 80054b8:	b510      	push	{r4, lr}
 80054ba:	4604      	mov	r4, r0
 80054bc:	2138      	movs	r1, #56	; 0x38
 80054be:	f020 fb78 	bl	8025bb2 <_ZdlPvj>
 80054c2:	4620      	mov	r0, r4
 80054c4:	bd10      	pop	{r4, pc}

080054c6 <_ZN8touchgfx10Transition13FullSolidRectD0Ev>:
 80054c6:	b510      	push	{r4, lr}
 80054c8:	4604      	mov	r4, r0
 80054ca:	2128      	movs	r1, #40	; 0x28
 80054cc:	f020 fb71 	bl	8025bb2 <_ZdlPvj>
 80054d0:	4620      	mov	r0, r4
 80054d2:	bd10      	pop	{r4, pc}

080054d4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED0Ev>:
 80054d4:	b510      	push	{r4, lr}
 80054d6:	4604      	mov	r4, r0
 80054d8:	2138      	movs	r1, #56	; 0x38
 80054da:	f020 fb6a 	bl	8025bb2 <_ZdlPvj>
 80054de:	4620      	mov	r0, r4
 80054e0:	bd10      	pop	{r4, pc}

080054e2 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 80054e2:	b508      	push	{r3, lr}
        Application::getInstance()->invalidate();
 80054e4:	f010 fe2a 	bl	801613c <_ZN8touchgfx11Application11getInstanceEv>
    }
 80054e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Application::getInstance()->invalidate();
 80054ec:	f011 bae2 	b.w	8016ab4 <_ZN8touchgfx11Application10invalidateEv>

080054f0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv>:
    virtual void handleTickEvent()
 80054f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80054f2:	4604      	mov	r4, r0
        animationCounter++;
 80054f4:	7a80      	ldrb	r0, [r0, #10]
 80054f6:	3001      	adds	r0, #1
        if (animationCounter > animationSteps)
 80054f8:	7a63      	ldrb	r3, [r4, #9]
        animationCounter++;
 80054fa:	b2c0      	uxtb	r0, r0
        if (animationCounter > animationSteps)
 80054fc:	4298      	cmp	r0, r3
        animationCounter++;
 80054fe:	72a0      	strb	r0, [r4, #10]
        if (animationCounter > animationSteps)
 8005500:	d905      	bls.n	800550e <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv+0x1e>
            done = true;
 8005502:	2301      	movs	r3, #1
 8005504:	7223      	strb	r3, [r4, #8]
            animationCounter = 0;
 8005506:	2300      	movs	r3, #0
 8005508:	72a3      	strb	r3, [r4, #10]
    }
 800550a:	b002      	add	sp, #8
 800550c:	bd70      	pop	{r4, r5, r6, pc}
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 800550e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005512:	2100      	movs	r1, #0
        const int16_t oldValue = calculatedValue;
 8005514:	f9b4 600e 	ldrsh.w	r6, [r4, #14]
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 8005518:	f012 fbea 	bl	8017cf0 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
        if ((calculatedValue % 2) != 0)
 800551c:	f010 0201 	ands.w	r2, r0, #1
 8005520:	b283      	uxth	r3, r0
 8005522:	d130      	bne.n	8005586 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv+0x96>
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 8005524:	81e0      	strh	r0, [r4, #14]
        const int16_t relativeValue = calculatedValue - oldValue;
 8005526:	89e5      	ldrh	r5, [r4, #14]
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 8005528:	7aa3      	ldrb	r3, [r4, #10]
        const int16_t relativeValue = calculatedValue - oldValue;
 800552a:	1bad      	subs	r5, r5, r6
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 800552c:	2b01      	cmp	r3, #1
        const int16_t relativeValue = calculatedValue - oldValue;
 800552e:	b2ad      	uxth	r5, r5
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 8005530:	d106      	bne.n	8005540 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv+0x50>
 8005532:	4b19      	ldr	r3, [pc, #100]	; (8005598 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv+0xa8>)
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	b11b      	cbz	r3, 8005540 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv+0x50>
            Application::getInstance()->copyInvalidatedAreasFromTFTToClientBuffer();
 8005538:	f010 fe00 	bl	801613c <_ZN8touchgfx11Application11getInstanceEv>
 800553c:	f010 fe04 	bl	8016148 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>
        : x(0), y(0), width(0), height(0)
 8005540:	2300      	movs	r3, #0
 8005542:	f8ad 3000 	strh.w	r3, [sp]
 8005546:	f8ad 3002 	strh.w	r3, [sp, #2]
            rect.width = calculatedValue;
 800554a:	89e3      	ldrh	r3, [r4, #14]
 800554c:	f8ad 3004 	strh.w	r3, [sp, #4]
            rect.height = HAL::DISPLAY_HEIGHT;
 8005550:	4b12      	ldr	r3, [pc, #72]	; (800559c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv+0xac>)
 8005552:	881b      	ldrh	r3, [r3, #0]
 8005554:	f8ad 3006 	strh.w	r3, [sp, #6]
        Application::getInstance()->invalidateArea(rect);
 8005558:	f010 fdf0 	bl	801613c <_ZN8touchgfx11Application11getInstanceEv>
 800555c:	ab02      	add	r3, sp, #8
 800555e:	e913 0006 	ldmdb	r3, {r1, r2}
 8005562:	f010 ff81 	bl	8016468 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
        Drawable* d = screenContainer->getFirstChild();
 8005566:	6860      	ldr	r0, [r4, #4]
 8005568:	6803      	ldr	r3, [r0, #0]
 800556a:	69db      	ldr	r3, [r3, #28]
 800556c:	4798      	blx	r3
 800556e:	4604      	mov	r4, r0
        while (d)
 8005570:	2c00      	cmp	r4, #0
 8005572:	d0ca      	beq.n	800550a <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv+0x1a>
                d->setX(d->getX() + relativeValue);
 8005574:	88a1      	ldrh	r1, [r4, #4]
 8005576:	4620      	mov	r0, r4
 8005578:	6823      	ldr	r3, [r4, #0]
 800557a:	4429      	add	r1, r5
 800557c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800557e:	b209      	sxth	r1, r1
 8005580:	4798      	blx	r3
 8005582:	69a4      	ldr	r4, [r4, #24]
        while (d)
 8005584:	e7f4      	b.n	8005570 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv+0x80>
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
 8005586:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800558a:	2800      	cmp	r0, #0
 800558c:	bfd8      	it	le
 800558e:	460a      	movle	r2, r1
 8005590:	4413      	add	r3, r2
 8005592:	81e3      	strh	r3, [r4, #14]
 8005594:	e7c7      	b.n	8005526 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv+0x36>
 8005596:	bf00      	nop
 8005598:	20027bc2 	.word	0x20027bc2
 800559c:	20027bba 	.word	0x20027bba

080055a0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 80055a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80055a2:	4604      	mov	r4, r0
        animationCounter++;
 80055a4:	7a80      	ldrb	r0, [r0, #10]
 80055a6:	3001      	adds	r0, #1
        if (animationCounter > animationSteps)
 80055a8:	7a63      	ldrb	r3, [r4, #9]
        animationCounter++;
 80055aa:	b2c0      	uxtb	r0, r0
        if (animationCounter > animationSteps)
 80055ac:	4298      	cmp	r0, r3
        animationCounter++;
 80055ae:	72a0      	strb	r0, [r4, #10]
        if (animationCounter > animationSteps)
 80055b0:	d905      	bls.n	80055be <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1e>
            done = true;
 80055b2:	2301      	movs	r3, #1
 80055b4:	7223      	strb	r3, [r4, #8]
            animationCounter = 0;
 80055b6:	2300      	movs	r3, #0
 80055b8:	72a3      	strb	r3, [r4, #10]
    }
 80055ba:	b002      	add	sp, #8
 80055bc:	bd70      	pop	{r4, r5, r6, pc}
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 80055be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80055c2:	2100      	movs	r1, #0
        const int16_t oldValue = calculatedValue;
 80055c4:	f9b4 600e 	ldrsh.w	r6, [r4, #14]
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 80055c8:	f012 fb92 	bl	8017cf0 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
        if ((calculatedValue % 2) != 0)
 80055cc:	f010 0201 	ands.w	r2, r0, #1
 80055d0:	b283      	uxth	r3, r0
 80055d2:	d134      	bne.n	800563e <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x9e>
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 80055d4:	81e0      	strh	r0, [r4, #14]
        const int16_t relativeValue = calculatedValue - oldValue;
 80055d6:	89e5      	ldrh	r5, [r4, #14]
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 80055d8:	7aa3      	ldrb	r3, [r4, #10]
        const int16_t relativeValue = calculatedValue - oldValue;
 80055da:	1bad      	subs	r5, r5, r6
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 80055dc:	2b01      	cmp	r3, #1
        const int16_t relativeValue = calculatedValue - oldValue;
 80055de:	b2ad      	uxth	r5, r5
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 80055e0:	d106      	bne.n	80055f0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x50>
 80055e2:	4b1b      	ldr	r3, [pc, #108]	; (8005650 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb0>)
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	b11b      	cbz	r3, 80055f0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x50>
            Application::getInstance()->copyInvalidatedAreasFromTFTToClientBuffer();
 80055e8:	f010 fda8 	bl	801613c <_ZN8touchgfx11Application11getInstanceEv>
 80055ec:	f010 fdac 	bl	8016148 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>
 80055f0:	2300      	movs	r3, #0
            rect.x = HAL::DISPLAY_WIDTH + calculatedValue;
 80055f2:	4a18      	ldr	r2, [pc, #96]	; (8005654 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb4>)
 80055f4:	f8ad 3002 	strh.w	r3, [sp, #2]
 80055f8:	8812      	ldrh	r2, [r2, #0]
 80055fa:	89e3      	ldrh	r3, [r4, #14]
 80055fc:	441a      	add	r2, r3
            rect.width = -calculatedValue;
 80055fe:	425b      	negs	r3, r3
 8005600:	f8ad 3004 	strh.w	r3, [sp, #4]
            rect.height = HAL::DISPLAY_HEIGHT;
 8005604:	4b14      	ldr	r3, [pc, #80]	; (8005658 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb8>)
            rect.x = HAL::DISPLAY_WIDTH + calculatedValue;
 8005606:	f8ad 2000 	strh.w	r2, [sp]
            rect.height = HAL::DISPLAY_HEIGHT;
 800560a:	881b      	ldrh	r3, [r3, #0]
 800560c:	f8ad 3006 	strh.w	r3, [sp, #6]
        Application::getInstance()->invalidateArea(rect);
 8005610:	f010 fd94 	bl	801613c <_ZN8touchgfx11Application11getInstanceEv>
 8005614:	ab02      	add	r3, sp, #8
 8005616:	e913 0006 	ldmdb	r3, {r1, r2}
 800561a:	f010 ff25 	bl	8016468 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
        Drawable* d = screenContainer->getFirstChild();
 800561e:	6860      	ldr	r0, [r4, #4]
 8005620:	6803      	ldr	r3, [r0, #0]
 8005622:	69db      	ldr	r3, [r3, #28]
 8005624:	4798      	blx	r3
 8005626:	4604      	mov	r4, r0
        while (d)
 8005628:	2c00      	cmp	r4, #0
 800562a:	d0c6      	beq.n	80055ba <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a>
                d->setX(d->getX() + relativeValue);
 800562c:	88a1      	ldrh	r1, [r4, #4]
 800562e:	4620      	mov	r0, r4
 8005630:	6823      	ldr	r3, [r4, #0]
 8005632:	4429      	add	r1, r5
 8005634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005636:	b209      	sxth	r1, r1
 8005638:	4798      	blx	r3
 800563a:	69a4      	ldr	r4, [r4, #24]
        while (d)
 800563c:	e7f4      	b.n	8005628 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x88>
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
 800563e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005642:	2800      	cmp	r0, #0
 8005644:	bfd8      	it	le
 8005646:	460a      	movle	r2, r1
 8005648:	4413      	add	r3, r2
 800564a:	81e3      	strh	r3, [r4, #14]
 800564c:	e7c3      	b.n	80055d6 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x36>
 800564e:	bf00      	nop
 8005650:	20027bc2 	.word	0x20027bc2
 8005654:	20027bb8 	.word	0x20027bb8
 8005658:	20027bba 	.word	0x20027bba

0800565c <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800565c:	b510      	push	{r4, lr}
 800565e:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8005660:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
 8005664:	b158      	cbz	r0, 800567e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8005666:	6803      	ldr	r3, [r0, #0]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	4798      	blx	r3
 800566c:	b138      	cbz	r0, 800567e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 800566e:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
 8005672:	6803      	ldr	r3, [r0, #0]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8005678:	2300      	movs	r3, #0
 800567a:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    }
 800567e:	bd10      	pop	{r4, pc}

08005680 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoScreen2ScreenNoTransitionImpl()
{
 8005680:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen2View, Screen2Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8005684:	e9d0 5a55 	ldrd	r5, sl, [r0, #340]	; 0x154
{
 8005688:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800568a:	68a8      	ldr	r0, [r5, #8]
 800568c:	6803      	ldr	r3, [r0, #0]
 800568e:	6a1b      	ldr	r3, [r3, #32]
 8005690:	4798      	blx	r3
 8005692:	f5b0 7f19 	cmp.w	r0, #612	; 0x264
 8005696:	d205      	bcs.n	80056a4 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x24>
 8005698:	4b45      	ldr	r3, [pc, #276]	; (80057b0 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x130>)
 800569a:	21a3      	movs	r1, #163	; 0xa3
 800569c:	4a45      	ldr	r2, [pc, #276]	; (80057b4 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x134>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800569e:	4846      	ldr	r0, [pc, #280]	; (80057b8 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x138>)
 80056a0:	f020 fab6 	bl	8025c10 <__assert_func>
 80056a4:	6868      	ldr	r0, [r5, #4]
 80056a6:	6803      	ldr	r3, [r0, #0]
 80056a8:	6a1b      	ldr	r3, [r3, #32]
 80056aa:	4798      	blx	r3
 80056ac:	280f      	cmp	r0, #15
 80056ae:	d803      	bhi.n	80056b8 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x38>
 80056b0:	4b42      	ldr	r3, [pc, #264]	; (80057bc <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x13c>)
 80056b2:	21a4      	movs	r1, #164	; 0xa4
 80056b4:	4a3f      	ldr	r2, [pc, #252]	; (80057b4 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x134>)
 80056b6:	e7f2      	b.n	800569e <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80056b8:	68e8      	ldr	r0, [r5, #12]
 80056ba:	6803      	ldr	r3, [r0, #0]
 80056bc:	6a1b      	ldr	r3, [r3, #32]
 80056be:	4798      	blx	r3
 80056c0:	280b      	cmp	r0, #11
 80056c2:	d803      	bhi.n	80056cc <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x4c>
 80056c4:	4b3e      	ldr	r3, [pc, #248]	; (80057c0 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x140>)
 80056c6:	21a5      	movs	r1, #165	; 0xa5
 80056c8:	4a3a      	ldr	r2, [pc, #232]	; (80057b4 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x134>)
 80056ca:	e7e8      	b.n	800569e <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x1e>
    if (*currentTrans)
 80056cc:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 80057c8 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x148>
    Application::getInstance()->clearAllTimerWidgets();
 80056d0:	f010 fd34 	bl	801613c <_ZN8touchgfx11Application11getInstanceEv>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 80056d4:	3004      	adds	r0, #4
 80056d6:	f010 fd97 	bl	8016208 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 80056da:	f8d9 0000 	ldr.w	r0, [r9]
 80056de:	b110      	cbz	r0, 80056e6 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x66>
        (*currentTrans)->tearDown();
 80056e0:	6803      	ldr	r3, [r0, #0]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	4798      	blx	r3
    if (*currentTrans)
 80056e6:	f8d9 0000 	ldr.w	r0, [r9]
 80056ea:	b110      	cbz	r0, 80056f2 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x72>
        (*currentTrans)->~Transition();
 80056ec:	6803      	ldr	r3, [r0, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4798      	blx	r3
    if (*currentScreen)
 80056f2:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 80057cc <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x14c>
 80056f6:	f8d8 0000 	ldr.w	r0, [r8]
 80056fa:	b110      	cbz	r0, 8005702 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x82>
        (*currentScreen)->tearDownScreen();
 80056fc:	6803      	ldr	r3, [r0, #0]
 80056fe:	695b      	ldr	r3, [r3, #20]
 8005700:	4798      	blx	r3
    if (*currentPresenter)
 8005702:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8005706:	b110      	cbz	r0, 800570e <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x8e>
        (*currentPresenter)->deactivate();
 8005708:	6803      	ldr	r3, [r0, #0]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	4798      	blx	r3
    if (*currentScreen)
 800570e:	f8d8 0000 	ldr.w	r0, [r8]
 8005712:	b110      	cbz	r0, 800571a <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x9a>
        (*currentScreen)->~Screen();
 8005714:	6803      	ldr	r3, [r0, #0]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4798      	blx	r3
    if (*currentPresenter)
 800571a:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 800571e:	b110      	cbz	r0, 8005726 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0xa6>
        (*currentPresenter)->~Presenter();
 8005720:	6803      	ldr	r3, [r0, #0]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8005726:	68e8      	ldr	r0, [r5, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8005728:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
 800572a:	f04f 0b00 	mov.w	fp, #0
 800572e:	6803      	ldr	r3, [r0, #0]
 8005730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005732:	4798      	blx	r3
 8005734:	4b23      	ldr	r3, [pc, #140]	; (80057c4 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x144>)
 8005736:	4604      	mov	r4, r0
 8005738:	f8c0 b004 	str.w	fp, [r0, #4]
 800573c:	6003      	str	r3, [r0, #0]
 800573e:	4659      	mov	r1, fp
 8005740:	f880 b008 	strb.w	fp, [r0, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8005744:	68a8      	ldr	r0, [r5, #8]
 8005746:	6803      	ldr	r3, [r0, #0]
 8005748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574a:	4798      	blx	r3
 800574c:	4606      	mov	r6, r0
 800574e:	f002 f853 	bl	80077f8 <_ZN11Screen2ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8005752:	6868      	ldr	r0, [r5, #4]
 8005754:	4659      	mov	r1, fp
 8005756:	6803      	ldr	r3, [r0, #0]
 8005758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575a:	4798      	blx	r3
 800575c:	4605      	mov	r5, r0
 800575e:	4631      	mov	r1, r6
 8005760:	f002 f824 	bl	80077ac <_ZN16Screen2PresenterC1ER11Screen2View>
    *currentTrans = newTransition;
 8005764:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 8005768:	f8c7 513c 	str.w	r5, [r7, #316]	; 0x13c
    *currentScreen = newScreen;
 800576c:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
 8005770:	b1e5      	cbz	r5, 80057ac <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x12c>
 8005772:	1d2b      	adds	r3, r5, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 8005774:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8005778:	4630      	mov	r0, r6
 800577a:	6833      	ldr	r3, [r6, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 800577c:	f8c5 a008 	str.w	sl, [r5, #8]
 8005780:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 8005782:	63f5      	str	r5, [r6, #60]	; 0x3c
 8005784:	4798      	blx	r3
    newPresenter->activate();
 8005786:	682b      	ldr	r3, [r5, #0]
 8005788:	4628      	mov	r0, r5
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800578e:	4621      	mov	r1, r4
 8005790:	4630      	mov	r0, r6
 8005792:	f012 faa7 	bl	8017ce4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8005796:	6823      	ldr	r3, [r4, #0]
 8005798:	4620      	mov	r0, r4
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	4798      	blx	r3
    newTransition->invalidate();
 800579e:	6823      	ldr	r3, [r4, #0]
 80057a0:	4620      	mov	r0, r4
 80057a2:	695b      	ldr	r3, [r3, #20]
}
 80057a4:	b001      	add	sp, #4
 80057a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057aa:	4718      	bx	r3
    model->bind(newPresenter);
 80057ac:	462b      	mov	r3, r5
 80057ae:	e7e1      	b.n	8005774 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0xf4>
 80057b0:	08028ee4 	.word	0x08028ee4
 80057b4:	08028f72 	.word	0x08028f72
 80057b8:	08029076 	.word	0x08029076
 80057bc:	080290bd 	.word	0x080290bd
 80057c0:	08029160 	.word	0x08029160
 80057c4:	08029508 	.word	0x08029508
 80057c8:	20027c0c 	.word	0x20027c0c
 80057cc:	20027c08 	.word	0x20027c08

080057d0 <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 80057d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057d4:	461d      	mov	r5, r3
        setX(x);
 80057d6:	6803      	ldr	r3, [r0, #0]
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 80057d8:	4604      	mov	r4, r0
 80057da:	4616      	mov	r6, r2
        setX(x);
 80057dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 80057de:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
        setX(x);
 80057e2:	4798      	blx	r3
        setY(y);
 80057e4:	6823      	ldr	r3, [r4, #0]
 80057e6:	4631      	mov	r1, r6
 80057e8:	4620      	mov	r0, r4
 80057ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ec:	4798      	blx	r3
        setWidth(width);
 80057ee:	6823      	ldr	r3, [r4, #0]
 80057f0:	4629      	mov	r1, r5
 80057f2:	4620      	mov	r0, r4
 80057f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f6:	4798      	blx	r3
        setHeight(height);
 80057f8:	6823      	ldr	r3, [r4, #0]
 80057fa:	4639      	mov	r1, r7
 80057fc:	4620      	mov	r0, r4
 80057fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    }
 8005800:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        setHeight(height);
 8005804:	4718      	bx	r3
	...

08005808 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv>:
{
 8005808:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::CoverTransition<WEST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800580c:	e9d0 ba55 	ldrd	fp, sl, [r0, #340]	; 0x154
{
 8005810:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8005812:	f8db 0008 	ldr.w	r0, [fp, #8]
 8005816:	6803      	ldr	r3, [r0, #0]
 8005818:	6a1b      	ldr	r3, [r3, #32]
 800581a:	4798      	blx	r3
 800581c:	f243 53f3 	movw	r3, #13811	; 0x35f3
 8005820:	4298      	cmp	r0, r3
 8005822:	d805      	bhi.n	8005830 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x28>
 8005824:	4b55      	ldr	r3, [pc, #340]	; (800597c <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x174>)
 8005826:	21a3      	movs	r1, #163	; 0xa3
 8005828:	4a55      	ldr	r2, [pc, #340]	; (8005980 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x178>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800582a:	4856      	ldr	r0, [pc, #344]	; (8005984 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x17c>)
 800582c:	f020 f9f0 	bl	8025c10 <__assert_func>
 8005830:	f8db 0004 	ldr.w	r0, [fp, #4]
 8005834:	6803      	ldr	r3, [r0, #0]
 8005836:	6a1b      	ldr	r3, [r3, #32]
 8005838:	4798      	blx	r3
 800583a:	280f      	cmp	r0, #15
 800583c:	d803      	bhi.n	8005846 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x3e>
 800583e:	4b52      	ldr	r3, [pc, #328]	; (8005988 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x180>)
 8005840:	21a4      	movs	r1, #164	; 0xa4
 8005842:	4a4f      	ldr	r2, [pc, #316]	; (8005980 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x178>)
 8005844:	e7f1      	b.n	800582a <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x22>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8005846:	f8db 000c 	ldr.w	r0, [fp, #12]
 800584a:	6803      	ldr	r3, [r0, #0]
 800584c:	6a1b      	ldr	r3, [r3, #32]
 800584e:	4798      	blx	r3
 8005850:	2837      	cmp	r0, #55	; 0x37
 8005852:	d803      	bhi.n	800585c <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x54>
 8005854:	4b4d      	ldr	r3, [pc, #308]	; (800598c <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x184>)
 8005856:	21a5      	movs	r1, #165	; 0xa5
 8005858:	4a49      	ldr	r2, [pc, #292]	; (8005980 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x178>)
 800585a:	e7e6      	b.n	800582a <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x22>
    if (*currentTrans)
 800585c:	f8df 9140 	ldr.w	r9, [pc, #320]	; 80059a0 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x198>
    Application::getInstance()->clearAllTimerWidgets();
 8005860:	f010 fc6c 	bl	801613c <_ZN8touchgfx11Application11getInstanceEv>
 8005864:	3004      	adds	r0, #4
 8005866:	f010 fccf 	bl	8016208 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 800586a:	f8d9 0000 	ldr.w	r0, [r9]
 800586e:	b110      	cbz	r0, 8005876 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x6e>
        (*currentTrans)->tearDown();
 8005870:	6803      	ldr	r3, [r0, #0]
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	4798      	blx	r3
    if (*currentTrans)
 8005876:	f8d9 0000 	ldr.w	r0, [r9]
 800587a:	b110      	cbz	r0, 8005882 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x7a>
        (*currentTrans)->~Transition();
 800587c:	6803      	ldr	r3, [r0, #0]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4798      	blx	r3
    if (*currentScreen)
 8005882:	f8df 8120 	ldr.w	r8, [pc, #288]	; 80059a4 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x19c>
 8005886:	f8d8 0000 	ldr.w	r0, [r8]
 800588a:	b110      	cbz	r0, 8005892 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x8a>
        (*currentScreen)->tearDownScreen();
 800588c:	6803      	ldr	r3, [r0, #0]
 800588e:	695b      	ldr	r3, [r3, #20]
 8005890:	4798      	blx	r3
    if (*currentPresenter)
 8005892:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8005896:	b110      	cbz	r0, 800589e <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x96>
        (*currentPresenter)->deactivate();
 8005898:	6803      	ldr	r3, [r0, #0]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	4798      	blx	r3
    if (*currentScreen)
 800589e:	f8d8 0000 	ldr.w	r0, [r8]
 80058a2:	b110      	cbz	r0, 80058aa <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0xa2>
        (*currentScreen)->~Screen();
 80058a4:	6803      	ldr	r3, [r0, #0]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4798      	blx	r3
    if (*currentPresenter)
 80058aa:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 80058ae:	b110      	cbz	r0, 80058b6 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0xae>
        (*currentPresenter)->~Presenter();
 80058b0:	6803      	ldr	r3, [r0, #0]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80058b6:	f8db 000c 	ldr.w	r0, [fp, #12]
 80058ba:	2100      	movs	r1, #0
 80058bc:	2500      	movs	r5, #0
 80058be:	6803      	ldr	r3, [r0, #0]
 80058c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c2:	4798      	blx	r3
          solid()
 80058c4:	4b32      	ldr	r3, [pc, #200]	; (8005990 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x188>)
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 80058c6:	4a33      	ldr	r2, [pc, #204]	; (8005994 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x18c>)
 80058c8:	4629      	mov	r1, r5
          solid()
 80058ca:	6003      	str	r3, [r0, #0]
 80058cc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 80058d0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80058d4:	4604      	mov	r4, r0
 80058d6:	8103      	strh	r3, [r0, #8]
          solid()
 80058d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80058dc:	6045      	str	r5, [r0, #4]
 80058de:	6343      	str	r3, [r0, #52]	; 0x34
    class FullSolidRect : public Widget
 80058e0:	4b2d      	ldr	r3, [pc, #180]	; (8005998 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x190>)
 80058e2:	7285      	strb	r5, [r0, #10]
 80058e4:	6103      	str	r3, [r0, #16]
            targetValue = HAL::DISPLAY_WIDTH;
 80058e6:	4b2d      	ldr	r3, [pc, #180]	; (800599c <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x194>)
          solid()
 80058e8:	81c5      	strh	r5, [r0, #14]
            targetValue = HAL::DISPLAY_WIDTH;
 80058ea:	f9b3 3000 	ldrsh.w	r3, [r3]
          solid()
 80058ee:	e9c0 5505 	strd	r5, r5, [r0, #20]
            targetValue = HAL::DISPLAY_WIDTH;
 80058f2:	8183      	strh	r3, [r0, #12]
          solid()
 80058f4:	e9c0 5507 	strd	r5, r5, [r0, #28]
 80058f8:	e9c0 5509 	strd	r5, r5, [r0, #36]	; 0x24
 80058fc:	e9c0 550b 	strd	r5, r5, [r0, #44]	; 0x2c
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8005900:	3010      	adds	r0, #16
 8005902:	9200      	str	r2, [sp, #0]
 8005904:	462a      	mov	r2, r5
 8005906:	f7ff ff63 	bl	80057d0 <_ZN8touchgfx8Drawable11setPositionEssss>
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800590a:	f8db 0008 	ldr.w	r0, [fp, #8]
 800590e:	4629      	mov	r1, r5
 8005910:	6803      	ldr	r3, [r0, #0]
 8005912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005914:	4798      	blx	r3
 8005916:	4606      	mov	r6, r0
 8005918:	f001 feec 	bl	80076f4 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800591c:	f8db 0004 	ldr.w	r0, [fp, #4]
 8005920:	4629      	mov	r1, r5
 8005922:	6803      	ldr	r3, [r0, #0]
 8005924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005926:	4798      	blx	r3
 8005928:	4605      	mov	r5, r0
 800592a:	4631      	mov	r1, r6
 800592c:	f001 febc 	bl	80076a8 <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
 8005930:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 8005934:	f8c7 513c 	str.w	r5, [r7, #316]	; 0x13c
    *currentScreen = newScreen;
 8005938:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
 800593c:	b1e5      	cbz	r5, 8005978 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x170>
 800593e:	1d2b      	adds	r3, r5, #4
 8005940:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8005944:	4630      	mov	r0, r6
 8005946:	6833      	ldr	r3, [r6, #0]
 8005948:	f8c5 a008 	str.w	sl, [r5, #8]
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	63f5      	str	r5, [r6, #60]	; 0x3c
 8005950:	4798      	blx	r3
    newPresenter->activate();
 8005952:	682b      	ldr	r3, [r5, #0]
 8005954:	4628      	mov	r0, r5
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800595a:	4621      	mov	r1, r4
 800595c:	4630      	mov	r0, r6
 800595e:	f012 f9c1 	bl	8017ce4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8005962:	6823      	ldr	r3, [r4, #0]
 8005964:	4620      	mov	r0, r4
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	4798      	blx	r3
    newTransition->invalidate();
 800596a:	6823      	ldr	r3, [r4, #0]
 800596c:	4620      	mov	r0, r4
 800596e:	695b      	ldr	r3, [r3, #20]
}
 8005970:	b003      	add	sp, #12
 8005972:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005976:	4718      	bx	r3
    model->bind(newPresenter);
 8005978:	462b      	mov	r3, r5
 800597a:	e7e1      	b.n	8005940 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x138>
 800597c:	08028ee4 	.word	0x08028ee4
 8005980:	08029203 	.word	0x08029203
 8005984:	08029076 	.word	0x08029076
 8005988:	080290bd 	.word	0x080290bd
 800598c:	08029160 	.word	0x08029160
 8005990:	08029550 	.word	0x08029550
 8005994:	20027bba 	.word	0x20027bba
 8005998:	0802943c 	.word	0x0802943c
 800599c:	20027bb8 	.word	0x20027bb8
 80059a0:	20027c0c 	.word	0x20027c0c
 80059a4:	20027c08 	.word	0x20027c08

080059a8 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv>:
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen2ScreenCoverTransitionEastImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoScreen2ScreenCoverTransitionEastImpl()
{
 80059a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen2View, Screen2Presenter, touchgfx::CoverTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80059ac:	e9d0 ba55 	ldrd	fp, sl, [r0, #340]	; 0x154
{
 80059b0:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80059b2:	f8db 0008 	ldr.w	r0, [fp, #8]
 80059b6:	6803      	ldr	r3, [r0, #0]
 80059b8:	6a1b      	ldr	r3, [r3, #32]
 80059ba:	4798      	blx	r3
 80059bc:	f5b0 7f19 	cmp.w	r0, #612	; 0x264
 80059c0:	d205      	bcs.n	80059ce <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x26>
 80059c2:	4b56      	ldr	r3, [pc, #344]	; (8005b1c <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x174>)
 80059c4:	21a3      	movs	r1, #163	; 0xa3
 80059c6:	4a56      	ldr	r2, [pc, #344]	; (8005b20 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x178>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80059c8:	4856      	ldr	r0, [pc, #344]	; (8005b24 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x17c>)
 80059ca:	f020 f921 	bl	8025c10 <__assert_func>
 80059ce:	f8db 0004 	ldr.w	r0, [fp, #4]
 80059d2:	6803      	ldr	r3, [r0, #0]
 80059d4:	6a1b      	ldr	r3, [r3, #32]
 80059d6:	4798      	blx	r3
 80059d8:	280f      	cmp	r0, #15
 80059da:	d803      	bhi.n	80059e4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x3c>
 80059dc:	4b52      	ldr	r3, [pc, #328]	; (8005b28 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x180>)
 80059de:	21a4      	movs	r1, #164	; 0xa4
 80059e0:	4a4f      	ldr	r2, [pc, #316]	; (8005b20 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x178>)
 80059e2:	e7f1      	b.n	80059c8 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x20>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80059e4:	f8db 000c 	ldr.w	r0, [fp, #12]
 80059e8:	6803      	ldr	r3, [r0, #0]
 80059ea:	6a1b      	ldr	r3, [r3, #32]
 80059ec:	4798      	blx	r3
 80059ee:	2837      	cmp	r0, #55	; 0x37
 80059f0:	d803      	bhi.n	80059fa <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x52>
 80059f2:	4b4e      	ldr	r3, [pc, #312]	; (8005b2c <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x184>)
 80059f4:	21a5      	movs	r1, #165	; 0xa5
 80059f6:	4a4a      	ldr	r2, [pc, #296]	; (8005b20 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x178>)
 80059f8:	e7e6      	b.n	80059c8 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x20>
    if (*currentTrans)
 80059fa:	f8df 9144 	ldr.w	r9, [pc, #324]	; 8005b40 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x198>
    Application::getInstance()->clearAllTimerWidgets();
 80059fe:	f010 fb9d 	bl	801613c <_ZN8touchgfx11Application11getInstanceEv>
 8005a02:	3004      	adds	r0, #4
 8005a04:	f010 fc00 	bl	8016208 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 8005a08:	f8d9 0000 	ldr.w	r0, [r9]
 8005a0c:	b110      	cbz	r0, 8005a14 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x6c>
        (*currentTrans)->tearDown();
 8005a0e:	6803      	ldr	r3, [r0, #0]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	4798      	blx	r3
    if (*currentTrans)
 8005a14:	f8d9 0000 	ldr.w	r0, [r9]
 8005a18:	b110      	cbz	r0, 8005a20 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x78>
        (*currentTrans)->~Transition();
 8005a1a:	6803      	ldr	r3, [r0, #0]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4798      	blx	r3
    if (*currentScreen)
 8005a20:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8005b44 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x19c>
 8005a24:	f8d8 0000 	ldr.w	r0, [r8]
 8005a28:	b110      	cbz	r0, 8005a30 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x88>
        (*currentScreen)->tearDownScreen();
 8005a2a:	6803      	ldr	r3, [r0, #0]
 8005a2c:	695b      	ldr	r3, [r3, #20]
 8005a2e:	4798      	blx	r3
    if (*currentPresenter)
 8005a30:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8005a34:	b110      	cbz	r0, 8005a3c <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x94>
        (*currentPresenter)->deactivate();
 8005a36:	6803      	ldr	r3, [r0, #0]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	4798      	blx	r3
    if (*currentScreen)
 8005a3c:	f8d8 0000 	ldr.w	r0, [r8]
 8005a40:	b110      	cbz	r0, 8005a48 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0xa0>
        (*currentScreen)->~Screen();
 8005a42:	6803      	ldr	r3, [r0, #0]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4798      	blx	r3
    if (*currentPresenter)
 8005a48:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8005a4c:	b110      	cbz	r0, 8005a54 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0xac>
        (*currentPresenter)->~Presenter();
 8005a4e:	6803      	ldr	r3, [r0, #0]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8005a54:	f8db 000c 	ldr.w	r0, [fp, #12]
 8005a58:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
 8005a5a:	2500      	movs	r5, #0
 8005a5c:	6803      	ldr	r3, [r0, #0]
 8005a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a60:	4798      	blx	r3
          solid()
 8005a62:	4b33      	ldr	r3, [pc, #204]	; (8005b30 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x188>)
 8005a64:	6045      	str	r5, [r0, #4]
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8005a66:	4629      	mov	r1, r5
          solid()
 8005a68:	6003      	str	r3, [r0, #0]
 8005a6a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005a6e:	7285      	strb	r5, [r0, #10]
 8005a70:	4604      	mov	r4, r0
 8005a72:	8103      	strh	r3, [r0, #8]
 8005a74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a78:	81c5      	strh	r5, [r0, #14]
 8005a7a:	6343      	str	r3, [r0, #52]	; 0x34
    class FullSolidRect : public Widget
 8005a7c:	4b2d      	ldr	r3, [pc, #180]	; (8005b34 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x18c>)
 8005a7e:	6103      	str	r3, [r0, #16]
            targetValue = -HAL::DISPLAY_WIDTH;
 8005a80:	4b2d      	ldr	r3, [pc, #180]	; (8005b38 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x190>)
 8005a82:	881b      	ldrh	r3, [r3, #0]
 8005a84:	425a      	negs	r2, r3
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8005a86:	b21b      	sxth	r3, r3
            targetValue = -HAL::DISPLAY_WIDTH;
 8005a88:	8182      	strh	r2, [r0, #12]
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8005a8a:	4a2c      	ldr	r2, [pc, #176]	; (8005b3c <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x194>)
 8005a8c:	f9b2 2000 	ldrsh.w	r2, [r2]
          solid()
 8005a90:	e9c0 5505 	strd	r5, r5, [r0, #20]
 8005a94:	e9c0 5507 	strd	r5, r5, [r0, #28]
 8005a98:	e9c0 5509 	strd	r5, r5, [r0, #36]	; 0x24
 8005a9c:	e9c0 550b 	strd	r5, r5, [r0, #44]	; 0x2c
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8005aa0:	3010      	adds	r0, #16
 8005aa2:	9200      	str	r2, [sp, #0]
 8005aa4:	462a      	mov	r2, r5
 8005aa6:	f7ff fe93 	bl	80057d0 <_ZN8touchgfx8Drawable11setPositionEssss>
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8005aaa:	f8db 0008 	ldr.w	r0, [fp, #8]
 8005aae:	4629      	mov	r1, r5
 8005ab0:	6803      	ldr	r3, [r0, #0]
 8005ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab4:	4798      	blx	r3
 8005ab6:	4606      	mov	r6, r0
 8005ab8:	f001 fe9e 	bl	80077f8 <_ZN11Screen2ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8005abc:	f8db 0004 	ldr.w	r0, [fp, #4]
 8005ac0:	4629      	mov	r1, r5
 8005ac2:	6803      	ldr	r3, [r0, #0]
 8005ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac6:	4798      	blx	r3
 8005ac8:	4605      	mov	r5, r0
 8005aca:	4631      	mov	r1, r6
 8005acc:	f001 fe6e 	bl	80077ac <_ZN16Screen2PresenterC1ER11Screen2View>
    *currentTrans = newTransition;
 8005ad0:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 8005ad4:	f8c7 513c 	str.w	r5, [r7, #316]	; 0x13c
    *currentScreen = newScreen;
 8005ad8:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
 8005adc:	b1e5      	cbz	r5, 8005b18 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x170>
 8005ade:	1d2b      	adds	r3, r5, #4
 8005ae0:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8005ae4:	4630      	mov	r0, r6
 8005ae6:	6833      	ldr	r3, [r6, #0]
 8005ae8:	f8c5 a008 	str.w	sl, [r5, #8]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	63f5      	str	r5, [r6, #60]	; 0x3c
 8005af0:	4798      	blx	r3
    newPresenter->activate();
 8005af2:	682b      	ldr	r3, [r5, #0]
 8005af4:	4628      	mov	r0, r5
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8005afa:	4621      	mov	r1, r4
 8005afc:	4630      	mov	r0, r6
 8005afe:	f012 f8f1 	bl	8017ce4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8005b02:	6823      	ldr	r3, [r4, #0]
 8005b04:	4620      	mov	r0, r4
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	4798      	blx	r3
    newTransition->invalidate();
 8005b0a:	6823      	ldr	r3, [r4, #0]
 8005b0c:	4620      	mov	r0, r4
 8005b0e:	695b      	ldr	r3, [r3, #20]
}
 8005b10:	b003      	add	sp, #12
 8005b12:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b16:	4718      	bx	r3
    model->bind(newPresenter);
 8005b18:	462b      	mov	r3, r5
 8005b1a:	e7e1      	b.n	8005ae0 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x138>
 8005b1c:	08028ee4 	.word	0x08028ee4
 8005b20:	0802931a 	.word	0x0802931a
 8005b24:	08029076 	.word	0x08029076
 8005b28:	080290bd 	.word	0x080290bd
 8005b2c:	08029160 	.word	0x08029160
 8005b30:	0802952c 	.word	0x0802952c
 8005b34:	0802943c 	.word	0x0802943c
 8005b38:	20027bb8 	.word	0x20027bb8
 8005b3c:	20027bba 	.word	0x20027bba
 8005b40:	20027c0c 	.word	0x20027c0c
 8005b44:	20027c08 	.word	0x20027c08

08005b48 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8005b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b4a:	4604      	mov	r4, r0
 8005b4c:	4617      	mov	r7, r2
 8005b4e:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 8005b50:	f010 fc2c 	bl	80163ac <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 8005b54:	4b10      	ldr	r3, [pc, #64]	; (8005b98 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x50>)
          pendingScreenTransitionCallback(0)
 8005b56:	2500      	movs	r5, #0
        instance = this;
 8005b58:	601c      	str	r4, [r3, #0]
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8005b5a:	4629      	mov	r1, r5
      model(m)
 8005b5c:	4b0f      	ldr	r3, [pc, #60]	; (8005b9c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
 8005b5e:	e9c4 7655 	strd	r7, r6, [r4, #340]	; 0x154
        return instance;
 8005b62:	4e0f      	ldr	r6, [pc, #60]	; (8005ba0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
 8005b64:	6023      	str	r3, [r4, #0]
 8005b66:	6830      	ldr	r0, [r6, #0]
        : pobject(0), pmemfun(0)
 8005b68:	4b0e      	ldr	r3, [pc, #56]	; (8005ba4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 8005b6a:	e9c4 5553 	strd	r5, r5, [r4, #332]	; 0x14c
 8005b6e:	e9c4 3551 	strd	r3, r5, [r4, #324]	; 0x144
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8005b72:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 8005b74:	e9c4 554f 	strd	r5, r5, [r4, #316]	; 0x13c
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 8005b7c:	4628      	mov	r0, r5
 8005b7e:	f001 fc57 	bl	8007430 <_ZN8touchgfx5Texts11setLanguageEt>
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8005b82:	6833      	ldr	r3, [r6, #0]
 8005b84:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8005b88:	b10a      	cbz	r2, 8005b8e <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x46>
 8005b8a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005b8c:	b900      	cbnz	r0, 8005b90 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x48>
        return instance->lcdRef;
 8005b8e:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8005b90:	f018 fd1f 	bl	801e5d2 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 8005b94:	4620      	mov	r0, r4
 8005b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b98:	20027c18 	.word	0x20027c18
 8005b9c:	080294bc 	.word	0x080294bc
 8005ba0:	20027bc4 	.word	0x20027bc4
 8005ba4:	080294a4 	.word	0x080294a4

08005ba8 <_ZN23FrontendApplicationBase36gotoScreen1ScreenCoverTransitionWestEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8005ba8:	4b06      	ldr	r3, [pc, #24]	; (8005bc4 <_ZN23FrontendApplicationBase36gotoScreen1ScreenCoverTransitionWestEv+0x1c>)
 8005baa:	f8c0 0148 	str.w	r0, [r0, #328]	; 0x148
 8005bae:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8005bb8:	f500 73a2 	add.w	r3, r0, #324	; 0x144
 8005bbc:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
}
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop
 8005bc4:	08005809 	.word	0x08005809

08005bc8 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv>:
 8005bc8:	4b06      	ldr	r3, [pc, #24]	; (8005be4 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv+0x1c>)
 8005bca:	f8c0 0148 	str.w	r0, [r0, #328]	; 0x148
 8005bce:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8005bd8:	f500 73a2 	add.w	r3, r0, #324	; 0x144
 8005bdc:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
}
 8005be0:	4770      	bx	lr
 8005be2:	bf00      	nop
 8005be4:	08005681 	.word	0x08005681

08005be8 <_ZN23FrontendApplicationBase36gotoScreen2ScreenCoverTransitionEastEv>:
 8005be8:	4b06      	ldr	r3, [pc, #24]	; (8005c04 <_ZN23FrontendApplicationBase36gotoScreen2ScreenCoverTransitionEastEv+0x1c>)
 8005bea:	f8c0 0148 	str.w	r0, [r0, #328]	; 0x148
 8005bee:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8005bf8:	f500 73a2 	add.w	r3, r0, #324	; 0x144
 8005bfc:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
}
 8005c00:	4770      	bx	lr
 8005c02:	bf00      	nop
 8005c04:	080059a9 	.word	0x080059a9

08005c08 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8005c08:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8005c0a:	4770      	bx	lr

08005c0c <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8005c0c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8005c0e:	4770      	bx	lr

08005c10 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8005c10:	4770      	bx	lr

08005c12 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8005c12:	888b      	ldrh	r3, [r1, #4]
 8005c14:	69c0      	ldr	r0, [r0, #28]
 8005c16:	0adb      	lsrs	r3, r3, #11
 8005c18:	680a      	ldr	r2, [r1, #0]
 8005c1a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 8005c1e:	4410      	add	r0, r2
 8005c20:	4770      	bx	lr

08005c22 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8005c22:	b510      	push	{r4, lr}
    if (!glyph || glyph->kerningTableSize == 0)
 8005c24:	b1c2      	cbz	r2, 8005c58 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 8005c26:	7b13      	ldrb	r3, [r2, #12]
 8005c28:	b1b3      	cbz	r3, 8005c58 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8005c2a:	7b54      	ldrb	r4, [r2, #13]
 8005c2c:	7ad2      	ldrb	r2, [r2, #11]
 8005c2e:	0224      	lsls	r4, r4, #8
 8005c30:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8005c34:	4314      	orrs	r4, r2
 8005c36:	6a02      	ldr	r2, [r0, #32]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8005c38:	b298      	uxth	r0, r3
    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8005c3a:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        if (prevChar == kerndata->unicodePrevChar)
 8005c3e:	8813      	ldrh	r3, [r2, #0]
 8005c40:	428b      	cmp	r3, r1
 8005c42:	d102      	bne.n	8005c4a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 8005c44:	f992 0002 	ldrsb.w	r0, [r2, #2]
        {
            break;
        }
    }
    return 0;
}
 8005c48:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 8005c4a:	d805      	bhi.n	8005c58 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8005c4c:	3801      	subs	r0, #1
 8005c4e:	3204      	adds	r2, #4
 8005c50:	b280      	uxth	r0, r0
 8005c52:	2800      	cmp	r0, #0
 8005c54:	d1f3      	bne.n	8005c3e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8005c56:	e7f7      	b.n	8005c48 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 8005c58:	2000      	movs	r0, #0
 8005c5a:	e7f5      	b.n	8005c48 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

08005c5c <_ZN8touchgfx13GeneratedFontD0Ev>:
 8005c5c:	b510      	push	{r4, lr}
 8005c5e:	4604      	mov	r4, r0
 8005c60:	212c      	movs	r1, #44	; 0x2c
 8005c62:	f01f ffa6 	bl	8025bb2 <_ZdlPvj>
 8005c66:	4620      	mov	r0, r4
 8005c68:	bd10      	pop	{r4, pc}
	...

08005c6c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8005c6c:	b530      	push	{r4, r5, lr}
 8005c6e:	b08b      	sub	sp, #44	; 0x2c
 8005c70:	4604      	mov	r4, r0
      arabicTable(formsTable)
 8005c72:	f8bd 5060 	ldrh.w	r5, [sp, #96]	; 0x60
 8005c76:	9508      	str	r5, [sp, #32]
 8005c78:	f8bd 505c 	ldrh.w	r5, [sp, #92]	; 0x5c
 8005c7c:	9507      	str	r5, [sp, #28]
 8005c7e:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8005c82:	9506      	str	r5, [sp, #24]
 8005c84:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
 8005c88:	9505      	str	r5, [sp, #20]
 8005c8a:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8005c8e:	9504      	str	r5, [sp, #16]
 8005c90:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8005c94:	9503      	str	r5, [sp, #12]
 8005c96:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 8005c9a:	9502      	str	r5, [sp, #8]
 8005c9c:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8005ca0:	9501      	str	r5, [sp, #4]
 8005ca2:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8005ca6:	9500      	str	r5, [sp, #0]
 8005ca8:	f011 fbac 	bl	8017404 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8005cac:	4b06      	ldr	r3, [pc, #24]	; (8005cc8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
}
 8005cae:	4620      	mov	r0, r4
      arabicTable(formsTable)
 8005cb0:	6023      	str	r3, [r4, #0]
 8005cb2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005cb4:	61e3      	str	r3, [r4, #28]
 8005cb6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005cb8:	6223      	str	r3, [r4, #32]
 8005cba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005cbc:	6263      	str	r3, [r4, #36]	; 0x24
 8005cbe:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8005cc0:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8005cc2:	b00b      	add	sp, #44	; 0x2c
 8005cc4:	bd30      	pop	{r4, r5, pc}
 8005cc6:	bf00      	nop
 8005cc8:	08029574 	.word	0x08029574

08005ccc <_ZN8touchgfx9Container13getFirstChildEv>:
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
    {
        return firstChild;
    }
 8005ccc:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8005cce:	4770      	bx	lr

08005cd0 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 8005cd0:	4770      	bx	lr

08005cd2 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 8005cd2:	4770      	bx	lr

08005cd4 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 8005cd4:	4770      	bx	lr

08005cd6 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 8005cd6:	4770      	bx	lr

08005cd8 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 8005cd8:	4770      	bx	lr

08005cda <_ZN8touchgfx17AbstractDataGraph8setAlphaEh>:
     *
     * @note All graph elements have to take this alpha into consideration.
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8005cda:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    }
 8005cde:	4770      	bx	lr

08005ce0 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>:
     * @param  min The minimum x value.
     * @param  max The maximum x value.
     *
     * @note The graph as well as the area above and below are automatically redrawn (invalidated).
     */
    virtual void setGraphRangeX(int min, int max)
 8005ce0:	b410      	push	{r4}
    {
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 8005ce2:	6803      	ldr	r3, [r0, #0]
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int int2scaledX(int i) const
    {
        return int2scaled(i, xScale);
 8005ce4:	6b04      	ldr	r4, [r0, #48]	; 0x30
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 8005ce6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005cea:	4362      	muls	r2, r4
 8005cec:	4361      	muls	r1, r4
    }
 8005cee:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 8005cf2:	4718      	bx	r3

08005cf4 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff>:
     *
     * @return The product of the two numbers, rounded to nearest integer value.
     */
    FORCE_INLINE_FUNCTION static int float2scaled(float f, int scale)
    {
        const float fs = f * (float)scale;
 8005cf4:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 8005cf8:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8005cfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 8005cfe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
        const float fs = f * (float)scale;
 8005d02:	ee20 0a27 	vmul.f32	s0, s0, s15
        if (fs >= 0)
 8005d06:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d0e:	db17      	blt.n	8005d40 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x4c>
        {
            return (int)(fs + 0.5f);
 8005d10:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005d14:	ee30 0a07 	vadd.f32	s0, s0, s14
 8005d18:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8005d1c:	ee17 1a10 	vmov	r1, s14
        const float fs = f * (float)scale;
 8005d20:	ee60 0aa7 	vmul.f32	s1, s1, s15
        if (fs >= 0)
 8005d24:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 8005d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d2c:	db1c      	blt.n	8005d68 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x74>
            return (int)(fs + 0.5f);
 8005d2e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8005d32:	ee70 0aa7 	vadd.f32	s1, s1, s15
 8005d36:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8005d3a:	ee17 2a90 	vmov	r2, s15
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 8005d3e:	4718      	bx	r3
        }
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8005d40:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8005d44:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005d48:	ee17 2a10 	vmov	r2, s14
 8005d4c:	1e51      	subs	r1, r2, #1
 8005d4e:	ee30 0a66 	vsub.f32	s0, s0, s13
 8005d52:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005d56:	ee30 0a26 	vadd.f32	s0, s0, s13
 8005d5a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005d5e:	ee10 2a10 	vmov	r2, s0
 8005d62:	440a      	add	r2, r1
 8005d64:	4611      	mov	r1, r2
 8005d66:	e7db      	b.n	8005d20 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x2c>
 8005d68:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8005d6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005d70:	ee17 2a90 	vmov	r2, s15
 8005d74:	3a01      	subs	r2, #1
 8005d76:	ee70 0ac7 	vsub.f32	s1, s1, s14
 8005d7a:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8005d7e:	ee70 0a87 	vadd.f32	s1, s1, s14
 8005d82:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 8005d86:	ee10 ca90 	vmov	ip, s1
 8005d8a:	4494      	add	ip, r2
 8005d8c:	4662      	mov	r2, ip
 8005d8e:	e7d6      	b.n	8005d3e <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x4a>

08005d90 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbi>:
    virtual void setGraphRangeXAuto(bool showYaxis = true, int margin = 0)
 8005d90:	b410      	push	{r4}
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 8005d92:	6803      	ldr	r3, [r0, #0]
        return i * scale;
 8005d94:	6b04      	ldr	r4, [r0, #48]	; 0x30
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 8005d96:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005d9a:	4362      	muls	r2, r4
    }
 8005d9c:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 8005da0:	4718      	bx	r3

08005da2 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf>:
        const float fs = f * (float)scale;
 8005da2:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 8005da6:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8005da8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 8005dac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
        const float fs = f * (float)scale;
 8005db0:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
 8005db4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dbc:	db08      	blt.n	8005dd0 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x2e>
            return (int)(fs + 0.5f);
 8005dbe:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8005dc2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005dc6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005dca:	ee17 2a90 	vmov	r2, s15
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 8005dce:	4718      	bx	r3
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8005dd0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005dd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005dd8:	ee17 2a90 	vmov	r2, s15
 8005ddc:	3a01      	subs	r2, #1
 8005dde:	ee30 0a47 	vsub.f32	s0, s0, s14
 8005de2:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8005de6:	ee30 0a07 	vadd.f32	s0, s0, s14
 8005dea:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005dee:	ee10 ca10 	vmov	ip, s0
 8005df2:	4494      	add	ip, r2
 8005df4:	4662      	mov	r2, ip
 8005df6:	e7ea      	b.n	8005dce <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x2c>

08005df8 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEii>:
    virtual void setGraphRangeY(int min, int max)
 8005df8:	b410      	push	{r4}
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 8005dfa:	6803      	ldr	r3, [r0, #0]
        return int2scaled(i, yScale);
 8005dfc:	6b44      	ldr	r4, [r0, #52]	; 0x34
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 8005dfe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005e02:	4362      	muls	r2, r4
 8005e04:	4361      	muls	r1, r4
    }
 8005e06:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 8005e0a:	4718      	bx	r3

08005e0c <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff>:
        const float fs = f * (float)scale;
 8005e0c:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 8005e10:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8005e12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 8005e16:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
        const float fs = f * (float)scale;
 8005e1a:	ee20 0a27 	vmul.f32	s0, s0, s15
        if (fs >= 0)
 8005e1e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e26:	db17      	blt.n	8005e58 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x4c>
            return (int)(fs + 0.5f);
 8005e28:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005e2c:	ee30 0a07 	vadd.f32	s0, s0, s14
 8005e30:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8005e34:	ee17 1a10 	vmov	r1, s14
        const float fs = f * (float)scale;
 8005e38:	ee60 0aa7 	vmul.f32	s1, s1, s15
        if (fs >= 0)
 8005e3c:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 8005e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e44:	db1c      	blt.n	8005e80 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x74>
            return (int)(fs + 0.5f);
 8005e46:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8005e4a:	ee70 0aa7 	vadd.f32	s1, s1, s15
 8005e4e:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8005e52:	ee17 2a90 	vmov	r2, s15
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 8005e56:	4718      	bx	r3
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8005e58:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8005e5c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005e60:	ee17 2a10 	vmov	r2, s14
 8005e64:	1e51      	subs	r1, r2, #1
 8005e66:	ee30 0a66 	vsub.f32	s0, s0, s13
 8005e6a:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005e6e:	ee30 0a26 	vadd.f32	s0, s0, s13
 8005e72:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005e76:	ee10 2a10 	vmov	r2, s0
 8005e7a:	440a      	add	r2, r1
 8005e7c:	4611      	mov	r1, r2
 8005e7e:	e7db      	b.n	8005e38 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x2c>
 8005e80:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8005e84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e88:	ee17 2a90 	vmov	r2, s15
 8005e8c:	3a01      	subs	r2, #1
 8005e8e:	ee70 0ac7 	vsub.f32	s1, s1, s14
 8005e92:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8005e96:	ee70 0a87 	vadd.f32	s1, s1, s14
 8005e9a:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 8005e9e:	ee10 ca90 	vmov	ip, s1
 8005ea2:	4494      	add	ip, r2
 8005ea4:	4662      	mov	r2, ip
 8005ea6:	e7d6      	b.n	8005e56 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x4a>

08005ea8 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbi>:
    virtual void setGraphRangeYAuto(bool showXaxis = true, int margin = 0)
 8005ea8:	b410      	push	{r4}
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 8005eaa:	6803      	ldr	r3, [r0, #0]
        return i * scale;
 8005eac:	6b44      	ldr	r4, [r0, #52]	; 0x34
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 8005eae:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005eb2:	4362      	muls	r2, r4
    }
 8005eb4:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 8005eb8:	4718      	bx	r3

08005eba <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf>:
        const float fs = f * (float)scale;
 8005eba:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 8005ebe:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8005ec0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 8005ec4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
        const float fs = f * (float)scale;
 8005ec8:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
 8005ecc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ed4:	db08      	blt.n	8005ee8 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf+0x2e>
            return (int)(fs + 0.5f);
 8005ed6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8005eda:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005ede:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005ee2:	ee17 2a90 	vmov	r2, s15
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 8005ee6:	4718      	bx	r3
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8005ee8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005eec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005ef0:	ee17 2a90 	vmov	r2, s15
 8005ef4:	3a01      	subs	r2, #1
 8005ef6:	ee30 0a47 	vsub.f32	s0, s0, s14
 8005efa:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8005efe:	ee30 0a07 	vadd.f32	s0, s0, s14
 8005f02:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005f06:	ee10 ca10 	vmov	ip, s0
 8005f0a:	4494      	add	ip, r2
 8005f0c:	4662      	mov	r2, ip
 8005f0e:	e7ea      	b.n	8005ee6 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf+0x2c>

08005f10 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv>:
        return scaled2intX(graphRangeMinX);
 8005f10:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int scaled2intX(int i) const
    {
        return scaled2int(i, xScale);
 8005f14:	6b02      	ldr	r2, [r0, #48]	; 0x30
        if (i >= 0)
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	db07      	blt.n	8005f2a <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 8005f1a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8005f1e:	fb93 f0f2 	sdiv	r0, r3, r2
 8005f22:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005f26:	1040      	asrs	r0, r0, #1
 8005f28:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8005f2a:	f06f 0001 	mvn.w	r0, #1
 8005f2e:	fb00 2003 	mla	r0, r0, r3, r2
 8005f32:	3801      	subs	r0, #1
 8005f34:	fb90 f0f2 	sdiv	r0, r0, r2
 8005f38:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005f3c:	1040      	asrs	r0, r0, #1
 8005f3e:	4240      	negs	r0, r0
    }
 8005f40:	4770      	bx	lr

08005f42 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeXMinAsFloatEv>:
     *
     * @return The number divided by the scale.
     */
    FORCE_INLINE_FUNCTION static float scaled2float(int i, int scale)
    {
        return (float)i / (float)scale;
 8005f42:	edd0 7a4b 	vldr	s15, [r0, #300]	; 0x12c
 8005f46:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8005f4a:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
 8005f4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
 8005f52:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8005f56:	4770      	bx	lr

08005f58 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeXMinScaledEv>:
    }
 8005f58:	f8d0 012c 	ldr.w	r0, [r0, #300]	; 0x12c
 8005f5c:	4770      	bx	lr

08005f5e <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv>:
        return scaled2intX(graphRangeMaxX);
 8005f5e:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
        return scaled2int(i, xScale);
 8005f62:	6b02      	ldr	r2, [r0, #48]	; 0x30
        if (i >= 0)
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	db07      	blt.n	8005f78 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 8005f68:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8005f6c:	fb93 f0f2 	sdiv	r0, r3, r2
 8005f70:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005f74:	1040      	asrs	r0, r0, #1
 8005f76:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8005f78:	f06f 0001 	mvn.w	r0, #1
 8005f7c:	fb00 2003 	mla	r0, r0, r3, r2
 8005f80:	3801      	subs	r0, #1
 8005f82:	fb90 f0f2 	sdiv	r0, r0, r2
 8005f86:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005f8a:	1040      	asrs	r0, r0, #1
 8005f8c:	4240      	negs	r0, r0
    }
 8005f8e:	4770      	bx	lr

08005f90 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeXMaxAsFloatEv>:
        return (float)i / (float)scale;
 8005f90:	edd0 7a4c 	vldr	s15, [r0, #304]	; 0x130
 8005f94:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8005f98:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
 8005f9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
 8005fa0:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8005fa4:	4770      	bx	lr

08005fa6 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeXMaxScaledEv>:
    }
 8005fa6:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
 8005faa:	4770      	bx	lr

08005fac <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv>:
        return scaled2intY(graphRangeMinY);
 8005fac:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
        return scaled2int(i, yScale);
 8005fb0:	6b42      	ldr	r2, [r0, #52]	; 0x34
        if (i >= 0)
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	db07      	blt.n	8005fc6 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 8005fb6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8005fba:	fb93 f0f2 	sdiv	r0, r3, r2
 8005fbe:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005fc2:	1040      	asrs	r0, r0, #1
 8005fc4:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8005fc6:	f06f 0001 	mvn.w	r0, #1
 8005fca:	fb00 2003 	mla	r0, r0, r3, r2
 8005fce:	3801      	subs	r0, #1
 8005fd0:	fb90 f0f2 	sdiv	r0, r0, r2
 8005fd4:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005fd8:	1040      	asrs	r0, r0, #1
 8005fda:	4240      	negs	r0, r0
    }
 8005fdc:	4770      	bx	lr

08005fde <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeYMinAsFloatEv>:
        return (float)i / (float)scale;
 8005fde:	edd0 7a4d 	vldr	s15, [r0, #308]	; 0x134
 8005fe2:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8005fe6:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
 8005fea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
 8005fee:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8005ff2:	4770      	bx	lr

08005ff4 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeYMinScaledEv>:
    }
 8005ff4:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
 8005ff8:	4770      	bx	lr

08005ffa <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv>:
        return scaled2intY(graphRangeMaxY);
 8005ffa:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
        return scaled2int(i, yScale);
 8005ffe:	6b42      	ldr	r2, [r0, #52]	; 0x34
        if (i >= 0)
 8006000:	2b00      	cmp	r3, #0
 8006002:	db07      	blt.n	8006014 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 8006004:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8006008:	fb93 f0f2 	sdiv	r0, r3, r2
 800600c:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8006010:	1040      	asrs	r0, r0, #1
 8006012:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8006014:	f06f 0001 	mvn.w	r0, #1
 8006018:	fb00 2003 	mla	r0, r0, r3, r2
 800601c:	3801      	subs	r0, #1
 800601e:	fb90 f0f2 	sdiv	r0, r0, r2
 8006022:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8006026:	1040      	asrs	r0, r0, #1
 8006028:	4240      	negs	r0, r0
    }
 800602a:	4770      	bx	lr

0800602c <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeYMaxAsFloatEv>:
        return (float)i / (float)scale;
 800602c:	edd0 7a4e 	vldr	s15, [r0, #312]	; 0x138
 8006030:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8006034:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
 8006038:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
 800603c:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8006040:	4770      	bx	lr

08006042 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeYMaxScaledEv>:
    }
 8006042:	f8d0 0138 	ldr.w	r0, [r0, #312]	; 0x138
 8006046:	4770      	bx	lr

08006048 <_ZN8touchgfx16DynamicDataGraph8setScaleEib>:
     * @note The current xAxisFactor, xAxisOffet and xGraphRange values are updated to reflect the
     *       new scale being set.
     */
    virtual void setScale(int scale, bool updateData = false)
    {
        setScaleX(scale, updateData);
 8006048:	6803      	ldr	r3, [r0, #0]
    virtual void setScale(int scale, bool updateData = false)
 800604a:	b570      	push	{r4, r5, r6, lr}
 800604c:	4604      	mov	r4, r0
        setScaleX(scale, updateData);
 800604e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    virtual void setScale(int scale, bool updateData = false)
 8006052:	460d      	mov	r5, r1
 8006054:	4616      	mov	r6, r2
        setScaleX(scale, updateData);
 8006056:	4798      	blx	r3
        setScaleY(scale, updateData);
 8006058:	6823      	ldr	r3, [r4, #0]
 800605a:	4632      	mov	r2, r6
 800605c:	4629      	mov	r1, r5
 800605e:	4620      	mov	r0, r4
 8006060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    }
 8006064:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setScaleY(scale, updateData);
 8006068:	4718      	bx	r3

0800606a <_ZNK8touchgfx16DynamicDataGraph8getScaleEv>:
     *
     * @see setScale
     */
    virtual int getScale() const
    {
        return getScaleY();
 800606a:	6803      	ldr	r3, [r0, #0]
 800606c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006070:	4718      	bx	r3

08006072 <_ZNK8touchgfx16DynamicDataGraph17getGraphRangeXMinEv>:
     *
     * @return The minimum x coordinate .
     */
    virtual int getGraphRangeXMin() const
    {
        return getGraphRangeXMinScaled();
 8006072:	6803      	ldr	r3, [r0, #0]
 8006074:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8006078:	4718      	bx	r3

0800607a <_ZNK8touchgfx16DynamicDataGraph17getGraphRangeXMaxEv>:
     *
     * @return The maximum x coordinate .
     */
    virtual int getGraphRangeXMax() const
    {
        return getGraphRangeXMaxScaled();
 800607a:	6803      	ldr	r3, [r0, #0]
 800607c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006080:	4718      	bx	r3

08006082 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi>:

    virtual void setGraphRangeYAutoScaled(bool showXaxis, int margin);

    virtual void setGraphRangeXAutoScaled(bool /*showYaxis*/, int margin)
    {
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 8006082:	6803      	ldr	r3, [r0, #0]
        if (i >= 0)
 8006084:	2a00      	cmp	r2, #0
    virtual void setGraphRangeXAutoScaled(bool /*showYaxis*/, int margin)
 8006086:	b410      	push	{r4}
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 8006088:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
        return scaled2int(i, xScale);
 800608c:	6b04      	ldr	r4, [r0, #48]	; 0x30
        if (i >= 0)
 800608e:	db0e      	blt.n	80060ae <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0x2c>
            return ((i * 2 + scale) / scale) / 2;
 8006090:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8006094:	fb92 f1f4 	sdiv	r1, r2, r4
 8006098:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 800609c:	1049      	asrs	r1, r1, #1
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 800609e:	f9b0 211e 	ldrsh.w	r2, [r0, #286]	; 0x11e
    }
 80060a2:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 80060a6:	3a01      	subs	r2, #1
 80060a8:	440a      	add	r2, r1
 80060aa:	4249      	negs	r1, r1
 80060ac:	4718      	bx	r3
        return -(((-i * 2 + scale - 1) / scale) / 2);
 80060ae:	f06f 0101 	mvn.w	r1, #1
 80060b2:	fb01 4102 	mla	r1, r1, r2, r4
 80060b6:	3901      	subs	r1, #1
 80060b8:	fb91 f1f4 	sdiv	r1, r1, r4
 80060bc:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80060c0:	1049      	asrs	r1, r1, #1
 80060c2:	4249      	negs	r1, r1
 80060c4:	e7eb      	b.n	800609e <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0x1c>

080060c6 <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEi>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactor()", virtual void setXAxisScale(int scale))
    {
        setXAxisFactor(scale);
 80060c6:	6803      	ldr	r3, [r0, #0]
 80060c8:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80060cc:	4718      	bx	r3

080060ce <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEi>:
        return i * scale;
 80060ce:	6b02      	ldr	r2, [r0, #48]	; 0x30
     *
     * @param  factor The x axis factor.
     */
    virtual void setXAxisFactor(int factor)
    {
        setXAxisFactorScaled(int2scaledX(factor));
 80060d0:	6803      	ldr	r3, [r0, #0]
 80060d2:	4351      	muls	r1, r2
 80060d4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80060d8:	4718      	bx	r3

080060da <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEf>:
    }

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactor()", virtual void setXAxisScale(float scale))
    {
        setXAxisFactor(scale);
 80060da:	6803      	ldr	r3, [r0, #0]
 80060dc:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80060e0:	4718      	bx	r3

080060e2 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf>:
        const float fs = f * (float)scale;
 80060e2:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
    /// @endcond

    /** @copydoc setXAxisFactor(int) */
    virtual void setXAxisFactor(float factor)
    {
        setXAxisFactorScaled(float2scaledX(factor));
 80060e6:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 80060e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setXAxisFactorScaled(float2scaledX(factor));
 80060ec:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
        const float fs = f * (float)scale;
 80060f0:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
 80060f4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80060f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060fc:	db08      	blt.n	8006110 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf+0x2e>
            return (int)(fs + 0.5f);
 80060fe:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8006102:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006106:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800610a:	ee17 1a90 	vmov	r1, s15
        setXAxisFactorScaled(float2scaledX(factor));
 800610e:	4718      	bx	r3
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8006110:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8006114:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006118:	ee17 2a90 	vmov	r2, s15
 800611c:	1e51      	subs	r1, r2, #1
 800611e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8006122:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8006126:	ee30 0a07 	vadd.f32	s0, s0, s14
 800612a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800612e:	ee10 2a10 	vmov	r2, s0
 8006132:	440a      	add	r2, r1
 8006134:	4611      	mov	r1, r2
 8006136:	e7ea      	b.n	800610e <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf+0x2c>

08006138 <_ZN8touchgfx16DynamicDataGraph20setXAxisFactorScaledEi>:
     *
     * @see setXAxisFactorScaled,setXAxisFactor
     */
    virtual void setXAxisFactorScaled(int factor)
    {
        xAxisFactor = factor;
 8006138:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
    }
 800613c:	4770      	bx	lr

0800613e <_ZNK8touchgfx16DynamicDataGraph18getXAxisScaleAsIntEv>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorAsInt()", virtual int getXAxisScaleAsInt() const)
    {
        return getXAxisFactorAsInt();
 800613e:	6803      	ldr	r3, [r0, #0]
 8006140:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8006144:	4718      	bx	r3

08006146 <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv>:
     *
     * @return The x axis factor.
     */
    virtual int getXAxisFactorAsInt() const
    {
        return scaled2intX(getXAxisFactorScaled());
 8006146:	6803      	ldr	r3, [r0, #0]
    virtual int getXAxisFactorAsInt() const
 8006148:	b510      	push	{r4, lr}
        return scaled2intX(getXAxisFactorScaled());
 800614a:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
    virtual int getXAxisFactorAsInt() const
 800614e:	4604      	mov	r4, r0
        return scaled2intX(getXAxisFactorScaled());
 8006150:	4798      	blx	r3
        if (i >= 0)
 8006152:	2800      	cmp	r0, #0
        return scaled2int(i, xScale);
 8006154:	6b23      	ldr	r3, [r4, #48]	; 0x30
        if (i >= 0)
 8006156:	db07      	blt.n	8006168 <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv+0x22>
            return ((i * 2 + scale) / scale) / 2;
 8006158:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800615c:	fb90 f0f3 	sdiv	r0, r0, r3
 8006160:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8006164:	1040      	asrs	r0, r0, #1
    }
 8006166:	bd10      	pop	{r4, pc}
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8006168:	f06f 0201 	mvn.w	r2, #1
 800616c:	fb02 3000 	mla	r0, r2, r0, r3
 8006170:	3801      	subs	r0, #1
 8006172:	fb90 f0f3 	sdiv	r0, r0, r3
 8006176:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800617a:	1040      	asrs	r0, r0, #1
 800617c:	4240      	negs	r0, r0
        return scaled2intX(getXAxisFactorScaled());
 800617e:	e7f2      	b.n	8006166 <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv+0x20>

08006180 <_ZNK8touchgfx16DynamicDataGraph20getXAxisScaleAsFloatEv>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorAsFloat()", virtual float getXAxisScaleAsFloat() const)
    {
        return getXAxisFactorAsFloat();
 8006180:	6803      	ldr	r3, [r0, #0]
 8006182:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8006186:	4718      	bx	r3

08006188 <_ZNK8touchgfx16DynamicDataGraph21getXAxisFactorAsFloatEv>:
    /// @endcond

    /** @copydoc getXAxisFactorAsInt() */
    virtual float getXAxisFactorAsFloat() const
    {
        return scaled2floatX(getXAxisFactorScaled());
 8006188:	6803      	ldr	r3, [r0, #0]
    virtual float getXAxisFactorAsFloat() const
 800618a:	b510      	push	{r4, lr}
        return scaled2floatX(getXAxisFactorScaled());
 800618c:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
    virtual float getXAxisFactorAsFloat() const
 8006190:	4604      	mov	r4, r0
        return scaled2floatX(getXAxisFactorScaled());
 8006192:	4798      	blx	r3
        return (float)i / (float)scale;
 8006194:	ee07 0a90 	vmov	s15, r0
 8006198:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800619c:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
 80061a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
 80061a4:	ee80 0a27 	vdiv.f32	s0, s0, s15
 80061a8:	bd10      	pop	{r4, pc}

080061aa <_ZNK8touchgfx16DynamicDataGraph20getXAxisFactorScaledEv>:
     * @see getXAxisFactorAsInt, getXAxisFactorAsFloat, setXAxisFactor
     */
    virtual int getXAxisFactorScaled() const
    {
        return xAxisFactor;
    }
 80061aa:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
 80061ae:	4770      	bx	lr

080061b0 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEi>:
        return i * scale;
 80061b0:	6b02      	ldr	r2, [r0, #48]	; 0x30
     *
     * @param  offset The x axis offset.
     */
    virtual void setXAxisOffset(int offset)
    {
        setXAxisOffsetScaled(int2scaledX(offset));
 80061b2:	6803      	ldr	r3, [r0, #0]
 80061b4:	4351      	muls	r1, r2
 80061b6:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 80061ba:	4718      	bx	r3

080061bc <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf>:
        const float fs = f * (float)scale;
 80061bc:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
    }

    /** @copydoc setXAxisOffset(int) */
    virtual void setXAxisOffset(float offset)
    {
        setXAxisOffsetScaled(float2scaledX(offset));
 80061c0:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 80061c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setXAxisOffsetScaled(float2scaledX(offset));
 80061c6:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
        const float fs = f * (float)scale;
 80061ca:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
 80061ce:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80061d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061d6:	db08      	blt.n	80061ea <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf+0x2e>
            return (int)(fs + 0.5f);
 80061d8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80061dc:	ee30 0a27 	vadd.f32	s0, s0, s15
 80061e0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80061e4:	ee17 1a90 	vmov	r1, s15
        setXAxisOffsetScaled(float2scaledX(offset));
 80061e8:	4718      	bx	r3
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 80061ea:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80061ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80061f2:	ee17 2a90 	vmov	r2, s15
 80061f6:	1e51      	subs	r1, r2, #1
 80061f8:	ee30 0a47 	vsub.f32	s0, s0, s14
 80061fc:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8006200:	ee30 0a07 	vadd.f32	s0, s0, s14
 8006204:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8006208:	ee10 2a10 	vmov	r2, s0
 800620c:	440a      	add	r2, r1
 800620e:	4611      	mov	r1, r2
 8006210:	e7ea      	b.n	80061e8 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf+0x2c>

08006212 <_ZN8touchgfx16DynamicDataGraph20setXAxisOffsetScaledEi>:
     *
     * @see setXAxisOffset, getXAxisOffsetScaled
     */
    virtual void setXAxisOffsetScaled(int offset)
    {
        xAxisOffset = offset;
 8006212:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    }
 8006216:	4770      	bx	lr

08006218 <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv>:
     *
     * @return The x axis offset.
     */
    virtual int getXAxisOffsetAsInt() const
    {
        return scaled2intX(getXAxisOffsetScaled());
 8006218:	6803      	ldr	r3, [r0, #0]
    virtual int getXAxisOffsetAsInt() const
 800621a:	b510      	push	{r4, lr}
        return scaled2intX(getXAxisOffsetScaled());
 800621c:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
    virtual int getXAxisOffsetAsInt() const
 8006220:	4604      	mov	r4, r0
        return scaled2intX(getXAxisOffsetScaled());
 8006222:	4798      	blx	r3
        if (i >= 0)
 8006224:	2800      	cmp	r0, #0
        return scaled2int(i, xScale);
 8006226:	6b23      	ldr	r3, [r4, #48]	; 0x30
        if (i >= 0)
 8006228:	db07      	blt.n	800623a <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv+0x22>
            return ((i * 2 + scale) / scale) / 2;
 800622a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800622e:	fb90 f0f3 	sdiv	r0, r0, r3
 8006232:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8006236:	1040      	asrs	r0, r0, #1
    }
 8006238:	bd10      	pop	{r4, pc}
        return -(((-i * 2 + scale - 1) / scale) / 2);
 800623a:	f06f 0201 	mvn.w	r2, #1
 800623e:	fb02 3000 	mla	r0, r2, r0, r3
 8006242:	3801      	subs	r0, #1
 8006244:	fb90 f0f3 	sdiv	r0, r0, r3
 8006248:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800624c:	1040      	asrs	r0, r0, #1
 800624e:	4240      	negs	r0, r0
        return scaled2intX(getXAxisOffsetScaled());
 8006250:	e7f2      	b.n	8006238 <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv+0x20>

08006252 <_ZNK8touchgfx16DynamicDataGraph21getXAxisOffsetAsFloatEv>:

    /** @copydoc getXAxisOffsetAsInt() */
    virtual float getXAxisOffsetAsFloat() const
    {
        return scaled2floatX(getXAxisOffsetScaled());
 8006252:	6803      	ldr	r3, [r0, #0]
    virtual float getXAxisOffsetAsFloat() const
 8006254:	b510      	push	{r4, lr}
        return scaled2floatX(getXAxisOffsetScaled());
 8006256:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
    virtual float getXAxisOffsetAsFloat() const
 800625a:	4604      	mov	r4, r0
        return scaled2floatX(getXAxisOffsetScaled());
 800625c:	4798      	blx	r3
        return (float)i / (float)scale;
 800625e:	ee07 0a90 	vmov	s15, r0
 8006262:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8006266:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
 800626a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
 800626e:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8006272:	bd10      	pop	{r4, pc}

08006274 <_ZNK8touchgfx16DynamicDataGraph20getXAxisOffsetScaledEv>:
     * @see getXAxisOffsetAsInt, getXAxisOffsetAsFloat, setXAxisOffsetScaled, setXAxisOffset
     */
    virtual int getXAxisOffsetScaled() const
    {
        return xAxisOffset;
    }
 8006274:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
 8006278:	4770      	bx	lr

0800627a <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii>:
    }

    virtual int indexToXAxis(const int valueScaled, const int /*labelScaled*/) const
    {
        // Value is also index for these types of graphs.
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
 800627a:	6803      	ldr	r3, [r0, #0]
        if (i >= 0)
 800627c:	2900      	cmp	r1, #0
        return scaled2int(i, xScale);
 800627e:	6b02      	ldr	r2, [r0, #48]	; 0x30
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
 8006280:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    virtual int indexToXAxis(const int valueScaled, const int /*labelScaled*/) const
 8006284:	b510      	push	{r4, lr}
 8006286:	4604      	mov	r4, r0
        if (i >= 0)
 8006288:	db0e      	blt.n	80062a8 <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii+0x2e>
            return ((i * 2 + scale) / scale) / 2;
 800628a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800628e:	fb91 f1f2 	sdiv	r1, r1, r2
 8006292:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8006296:	1049      	asrs	r1, r1, #1
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
 8006298:	b209      	sxth	r1, r1
 800629a:	4620      	mov	r0, r4
 800629c:	4798      	blx	r3
 800629e:	e9d4 234f 	ldrd	r2, r3, [r4, #316]	; 0x13c
    }
 80062a2:	fb02 3000 	mla	r0, r2, r0, r3
 80062a6:	bd10      	pop	{r4, pc}
        return -(((-i * 2 + scale - 1) / scale) / 2);
 80062a8:	f06f 0001 	mvn.w	r0, #1
 80062ac:	fb00 2101 	mla	r1, r0, r1, r2
 80062b0:	3901      	subs	r1, #1
 80062b2:	fb91 f1f2 	sdiv	r1, r1, r2
 80062b6:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80062ba:	1049      	asrs	r1, r1, #1
 80062bc:	4249      	negs	r1, r1
 80062be:	e7eb      	b.n	8006298 <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii+0x1e>

080062c0 <_ZNK8touchgfx16DynamicDataGraph9getScaleXEv>:
    virtual void setScaleX(int scale, bool updateData = false);

    virtual int getScaleX() const
    {
        return AbstractDataGraph::getScaleX();
    }
 80062c0:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80062c2:	4770      	bx	lr

080062c4 <_ZNK8touchgfx16DynamicDataGraph9getScaleYEv>:
    virtual void setScaleY(int scale, bool updateData = false);

    virtual int getScaleY() const
    {
        return AbstractDataGraph::getScaleY();
    }
 80062c4:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80062c6:	4770      	bx	lr

080062c8 <_ZN8touchgfx16DynamicDataGraph19setXAxisScaleScaledEi>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactorScaled()", virtual void setXAxisScaleScaled(int scale))
    {
        setXAxisFactorScaled(scale);
 80062c8:	6803      	ldr	r3, [r0, #0]
 80062ca:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80062ce:	4718      	bx	r3

080062d0 <_ZNK8touchgfx16DynamicDataGraph19getXAxisScaleScaledEv>:
    /// @endcond

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorScaled()", virtual int getXAxisScaleScaled() const)
    {
        return getXAxisFactorScaled();
 80062d0:	6803      	ldr	r3, [r0, #0]
 80062d2:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80062d6:	4718      	bx	r3

080062d8 <_ZNK8touchgfx16DynamicDataGraph16indexToScreenXQ5Es>:
        return i * scale;
 80062d8:	6b02      	ldr	r2, [r0, #48]	; 0x30

    /// @endcond

    virtual CWRUtil::Q5 indexToScreenXQ5(int16_t index) const
    {
        return valueToScreenXQ5(int2scaledX(index));
 80062da:	6803      	ldr	r3, [r0, #0]
 80062dc:	4351      	muls	r1, r2
 80062de:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80062e2:	4718      	bx	r3

080062e4 <_ZNK8touchgfx16DynamicDataGraph16indexToScreenYQ5Es>:
    }

    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
    {
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 80062e4:	6803      	ldr	r3, [r0, #0]
    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
 80062e6:	b570      	push	{r4, r5, r6, lr}
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 80062e8:	f8d3 5118 	ldr.w	r5, [r3, #280]	; 0x118
    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
 80062ec:	4604      	mov	r4, r0
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 80062ee:	f8d0 6144 	ldr.w	r6, [r0, #324]	; 0x144
 80062f2:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 80062f6:	4798      	blx	r3
 80062f8:	462b      	mov	r3, r5
 80062fa:	f856 1020 	ldr.w	r1, [r6, r0, lsl #2]
 80062fe:	4620      	mov	r0, r4
    }
 8006300:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 8006304:	4718      	bx	r3

08006306 <_ZNK8touchgfx15GraphScrollData9dataIndexEs>:

    virtual int16_t addValue(int value);

    virtual int16_t dataIndex(int16_t screenIndex) const
    {
        return usedCapacity < maxCapacity ? screenIndex : (screenIndex + current) % maxCapacity;
 8006306:	f9b0 211c 	ldrsh.w	r2, [r0, #284]	; 0x11c
 800630a:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
 800630e:	4293      	cmp	r3, r2
 8006310:	db07      	blt.n	8006322 <_ZNK8touchgfx15GraphScrollData9dataIndexEs+0x1c>
 8006312:	f9b0 314c 	ldrsh.w	r3, [r0, #332]	; 0x14c
 8006316:	4419      	add	r1, r3
 8006318:	fb91 f0f2 	sdiv	r0, r1, r2
 800631c:	fb02 1110 	mls	r1, r2, r0, r1
 8006320:	b209      	sxth	r1, r1
    }
 8006322:	4608      	mov	r0, r1
 8006324:	4770      	bx	lr

08006326 <_ZNK8touchgfx15GraphScrollData10indexToXQ5Es>:

private:
    virtual CWRUtil::Q5 indexToXQ5(int16_t index) const
    {
        return CWRUtil::toQ5(index);
    }
 8006326:	0148      	lsls	r0, r1, #5
 8006328:	4770      	bx	lr

0800632a <_ZN8touchgfx25AbstractGraphElementNoCWR8setColorENS_9colortypeE>:
     *
     * @see getColor
     */
    virtual void setColor(colortype newColor)
    {
        color = newColor;
 800632a:	62c1      	str	r1, [r0, #44]	; 0x2c
    }
 800632c:	4770      	bx	lr

0800632e <_ZNK8touchgfx25AbstractGraphElementNoCWR8getColorEv>:
     * @see setColor
     */
    virtual colortype getColor() const
    {
        return color;
    }
 800632e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8006330:	4770      	bx	lr

08006332 <_ZNK8touchgfx25AbstractGraphElementNoCWR16drawCanvasWidgetERKNS_4RectE>:

    virtual bool drawCanvasWidget(const Rect&) const
    {
        return true;
    }
 8006332:	2001      	movs	r0, #1
 8006334:	4770      	bx	lr

08006336 <_ZN8touchgfx25AbstractGraphElementNoCWR10setPainterERNS_15AbstractPainterE>:
    void normalizeRect(Rect& r) const;

private:
    virtual void setPainter(AbstractPainter& /*painter*/)
    {
    }
 8006336:	4770      	bx	lr

08006338 <_ZN8touchgfx20GraphElementGridBase22invalidateGraphPointAtEs>:
        return lineWidth;
    }

    virtual void invalidateGraphPointAt(int16_t)
    {
    }
 8006338:	4770      	bx	lr

0800633a <_ZNK8touchgfx20GraphElementGridBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE>:
     *
     * @return The correctly scaled major interval.
     */
    virtual int getCorrectlyScaledMajorInterval(const AbstractDataGraph* graph) const
    {
        return majorGrid == 0 ? 0 : majorGrid->getCorrectlyScaledGridInterval(graph);
 800633a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800633c:	b118      	cbz	r0, 8006346 <_ZNK8touchgfx20GraphElementGridBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE+0xc>
 800633e:	6803      	ldr	r3, [r0, #0]
 8006340:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006344:	4718      	bx	r3
    }
 8006346:	4770      	bx	lr

08006348 <_ZNK8touchgfx17GraphElementGridX13enclosingAreaEPKNS_17AbstractDataGraphE>:
        return graphArea.getHeight() - (topPadding + bottomPadding);
 8006348:	f8b2 111a 	ldrh.w	r1, [r2, #282]	; 0x11a
    {
        return convertToGraphScaleX(graph, gridInterval, dataScale);
    }

protected:
    virtual Rect enclosingArea(const AbstractDataGraph* graph) const
 800634c:	b530      	push	{r4, r5, lr}
        return topPadding;
 800634e:	f9b2 4114 	ldrsh.w	r4, [r2, #276]	; 0x114
        return rect.width;
 8006352:	f9b2 5040 	ldrsh.w	r5, [r2, #64]	; 0x40
        return graphArea.getHeight() - (topPadding + bottomPadding);
 8006356:	4421      	add	r1, r4
 8006358:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 800635c:	8044      	strh	r4, [r0, #2]
 800635e:	1a52      	subs	r2, r2, r1
 8006360:	2100      	movs	r1, #0
 8006362:	8085      	strh	r5, [r0, #4]
 8006364:	8001      	strh	r1, [r0, #0]
 8006366:	80c2      	strh	r2, [r0, #6]
    {
        return Rect(0, graph->getGraphAreaPaddingTop(), graph->getGraphAreaWidthIncludingPadding(), graph->getGraphAreaHeight());
    }
 8006368:	bd30      	pop	{r4, r5, pc}

0800636a <_ZNK8touchgfx17GraphElementGridX8lineRectEssss>:

    virtual Rect lineRect(int16_t start, int16_t length, int16_t pos, int16_t width) const
 800636a:	b510      	push	{r4, lr}
 800636c:	8042      	strh	r2, [r0, #2]
 800636e:	f9bd 4008 	ldrsh.w	r4, [sp, #8]
 8006372:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8006376:	8004      	strh	r4, [r0, #0]
 8006378:	8082      	strh	r2, [r0, #4]
 800637a:	80c3      	strh	r3, [r0, #6]
    {
        return Rect(pos, start, width, length);
    }
 800637c:	bd10      	pop	{r4, pc}

0800637e <_ZNK8touchgfx17GraphElementGridX22getGraphRangeMinScaledEPKNS_17AbstractDataGraphE>:

    virtual int getGraphRangeMinScaled(const AbstractDataGraph* graph) const
    {
        return graph->getGraphRangeXMinScaled();
 800637e:	680b      	ldr	r3, [r1, #0]
    virtual int getGraphRangeMinScaled(const AbstractDataGraph* graph) const
 8006380:	4608      	mov	r0, r1
        return graph->getGraphRangeXMinScaled();
 8006382:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8006386:	4718      	bx	r3

08006388 <_ZNK8touchgfx17GraphElementGridX22getGraphRangeMaxScaledEPKNS_17AbstractDataGraphE>:
    }

    virtual int getGraphRangeMaxScaled(const AbstractDataGraph* graph) const
    {
        return graph->getGraphRangeXMaxScaled();
 8006388:	680b      	ldr	r3, [r1, #0]
    virtual int getGraphRangeMaxScaled(const AbstractDataGraph* graph) const
 800638a:	4608      	mov	r0, r1
        return graph->getGraphRangeXMaxScaled();
 800638c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006390:	4718      	bx	r3

08006392 <_ZNK8touchgfx17GraphElementGridX17getGraphAreaStartEPKNS_17AbstractDataGraphE>:
    }

    virtual int getGraphAreaStart(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaPaddingTop();
    }
 8006392:	f9b1 0114 	ldrsh.w	r0, [r1, #276]	; 0x114
 8006396:	4770      	bx	lr

08006398 <_ZNK8touchgfx17GraphElementGridX18getGraphAreaLengthEPKNS_17AbstractDataGraphE>:
 8006398:	f8b1 0114 	ldrh.w	r0, [r1, #276]	; 0x114
 800639c:	f8b1 311a 	ldrh.w	r3, [r1, #282]	; 0x11a
 80063a0:	4403      	add	r3, r0
 80063a2:	f8b1 0042 	ldrh.w	r0, [r1, #66]	; 0x42
 80063a6:	1ac0      	subs	r0, r0, r3

    virtual int getGraphAreaLength(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaHeight();
    }
 80063a8:	b200      	sxth	r0, r0
 80063aa:	4770      	bx	lr

080063ac <_ZNK8touchgfx17GraphElementGridX20getGraphAreaStartPosEPKNS_17AbstractDataGraphE>:

    virtual int getGraphAreaStartPos(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaPaddingLeft();
    }
 80063ac:	f9b1 0116 	ldrsh.w	r0, [r1, #278]	; 0x116
 80063b0:	4770      	bx	lr

080063b2 <_ZNK8touchgfx17GraphElementGridX18getGraphAreaEndPosEPKNS_17AbstractDataGraphE>:
        return graphArea.getWidth() - (leftPadding + rightPadding);
 80063b2:	f8b1 0116 	ldrh.w	r0, [r1, #278]	; 0x116
 80063b6:	f8b1 3118 	ldrh.w	r3, [r1, #280]	; 0x118
 80063ba:	4403      	add	r3, r0
 80063bc:	f8b1 0040 	ldrh.w	r0, [r1, #64]	; 0x40
 80063c0:	1ac0      	subs	r0, r0, r3

    virtual int getGraphAreaEndPos(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaWidth();
    }
 80063c2:	b200      	sxth	r0, r0
 80063c4:	4770      	bx	lr

080063c6 <_ZNK8touchgfx17GraphElementGridX15valueToScreenQ5EPKNS_17AbstractDataGraphEi>:
        return graph->valueToScreenXQ5(x);
 80063c6:	680b      	ldr	r3, [r1, #0]

    virtual CWRUtil::Q5 valueToScreenQ5(const AbstractDataGraph* graph, int value) const
 80063c8:	4608      	mov	r0, r1
        return graph->valueToScreenXQ5(x);
 80063ca:	4611      	mov	r1, r2
 80063cc:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80063d0:	4718      	bx	r3

080063d2 <_ZNK8touchgfx17GraphElementGridY13enclosingAreaEPKNS_17AbstractDataGraphE>:
 80063d2:	f8b2 1118 	ldrh.w	r1, [r2, #280]	; 0x118
    {
        return convertToGraphScaleY(graph, gridInterval, dataScale);
    }

protected:
    virtual Rect enclosingArea(const AbstractDataGraph* graph) const
 80063d6:	b530      	push	{r4, r5, lr}
        return leftPadding;
 80063d8:	f9b2 5116 	ldrsh.w	r5, [r2, #278]	; 0x116
        return graphArea.getWidth() - (leftPadding + rightPadding);
 80063dc:	186c      	adds	r4, r5, r1
 80063de:	f8b2 1040 	ldrh.w	r1, [r2, #64]	; 0x40
        return rect.height;
 80063e2:	f9b2 2042 	ldrsh.w	r2, [r2, #66]	; 0x42
 80063e6:	1b09      	subs	r1, r1, r4
 80063e8:	2400      	movs	r4, #0
 80063ea:	8005      	strh	r5, [r0, #0]
 80063ec:	8044      	strh	r4, [r0, #2]
 80063ee:	8081      	strh	r1, [r0, #4]
 80063f0:	80c2      	strh	r2, [r0, #6]
    {
        return Rect(graph->getGraphAreaPaddingLeft(), 0, graph->getGraphAreaWidth(), graph->getGraphAreaHeightIncludingPadding());
    }
 80063f2:	bd30      	pop	{r4, r5, pc}

080063f4 <_ZNK8touchgfx17GraphElementGridY8lineRectEssss>:
 80063f4:	8002      	strh	r2, [r0, #0]
 80063f6:	8083      	strh	r3, [r0, #4]
 80063f8:	f9bd 2000 	ldrsh.w	r2, [sp]
 80063fc:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8006400:	8042      	strh	r2, [r0, #2]
 8006402:	80c3      	strh	r3, [r0, #6]

    virtual Rect lineRect(int16_t start, int16_t length, int16_t pos, int16_t width) const
    {
        return Rect(start, pos, length, width);
    }
 8006404:	4770      	bx	lr

08006406 <_ZNK8touchgfx17GraphElementGridY22getGraphRangeMinScaledEPKNS_17AbstractDataGraphE>:

    virtual int getGraphRangeMinScaled(const AbstractDataGraph* graph) const
    {
        return graph->getGraphRangeYMinScaled();
 8006406:	680b      	ldr	r3, [r1, #0]
    virtual int getGraphRangeMinScaled(const AbstractDataGraph* graph) const
 8006408:	4608      	mov	r0, r1
        return graph->getGraphRangeYMinScaled();
 800640a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800640e:	4718      	bx	r3

08006410 <_ZNK8touchgfx17GraphElementGridY22getGraphRangeMaxScaledEPKNS_17AbstractDataGraphE>:
    }

    virtual int getGraphRangeMaxScaled(const AbstractDataGraph* graph) const
    {
        return graph->getGraphRangeYMaxScaled();
 8006410:	680b      	ldr	r3, [r1, #0]
    virtual int getGraphRangeMaxScaled(const AbstractDataGraph* graph) const
 8006412:	4608      	mov	r0, r1
        return graph->getGraphRangeYMaxScaled();
 8006414:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8006418:	4718      	bx	r3

0800641a <_ZNK8touchgfx17GraphElementGridY17getGraphAreaStartEPKNS_17AbstractDataGraphE>:
    }

    virtual int getGraphAreaStart(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaPaddingLeft();
    }
 800641a:	f9b1 0116 	ldrsh.w	r0, [r1, #278]	; 0x116
 800641e:	4770      	bx	lr

08006420 <_ZNK8touchgfx17GraphElementGridY18getGraphAreaLengthEPKNS_17AbstractDataGraphE>:
 8006420:	f8b1 0116 	ldrh.w	r0, [r1, #278]	; 0x116
 8006424:	f8b1 3118 	ldrh.w	r3, [r1, #280]	; 0x118
 8006428:	4403      	add	r3, r0
 800642a:	f8b1 0040 	ldrh.w	r0, [r1, #64]	; 0x40
 800642e:	1ac0      	subs	r0, r0, r3

    virtual int getGraphAreaLength(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaWidth();
    }
 8006430:	b200      	sxth	r0, r0
 8006432:	4770      	bx	lr

08006434 <_ZNK8touchgfx17GraphElementGridY20getGraphAreaStartPosEPKNS_17AbstractDataGraphE>:

    virtual int getGraphAreaStartPos(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaPaddingTop();
    }
 8006434:	f9b1 0114 	ldrsh.w	r0, [r1, #276]	; 0x114
 8006438:	4770      	bx	lr

0800643a <_ZNK8touchgfx17GraphElementGridY18getGraphAreaEndPosEPKNS_17AbstractDataGraphE>:
        return graphArea.getHeight() - (topPadding + bottomPadding);
 800643a:	f8b1 0114 	ldrh.w	r0, [r1, #276]	; 0x114
 800643e:	f8b1 311a 	ldrh.w	r3, [r1, #282]	; 0x11a
 8006442:	4403      	add	r3, r0
 8006444:	f8b1 0042 	ldrh.w	r0, [r1, #66]	; 0x42
 8006448:	1ac0      	subs	r0, r0, r3

    virtual int getGraphAreaEndPos(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaHeight();
    }
 800644a:	b200      	sxth	r0, r0
 800644c:	4770      	bx	lr

0800644e <_ZNK8touchgfx17GraphElementGridY15valueToScreenQ5EPKNS_17AbstractDataGraphEi>:
        return graph->valueToScreenYQ5(y);
 800644e:	680b      	ldr	r3, [r1, #0]

    virtual CWRUtil::Q5 valueToScreenQ5(const AbstractDataGraph* graph, int value) const
 8006450:	4608      	mov	r0, r1
        return graph->valueToScreenYQ5(y);
 8006452:	4611      	mov	r1, r2
 8006454:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8006458:	4718      	bx	r3

0800645a <_ZN8touchgfx21AbstractPainterBitmapD1Ev>:
    }

    /** Destructor */
    virtual ~AbstractPainterBitmap()
    {
    }
 800645a:	4770      	bx	lr

0800645c <_ZN8touchgfx21AbstractPainterBitmap8setTiledEb>:
     *
     * @see setOffset
     */
    virtual void setTiled(bool tiled)
    {
        isTiled = tiled;
 800645c:	7601      	strb	r1, [r0, #24]
    }
 800645e:	4770      	bx	lr

08006460 <_ZN8touchgfx21AbstractPainterBitmap9setOffsetEss>:
     *
     * @see setTiled
     */
    virtual void setOffset(int16_t x, int16_t y)
    {
        xOffset = x;
 8006460:	8281      	strh	r1, [r0, #20]
        yOffset = y;
 8006462:	82c2      	strh	r2, [r0, #22]
    }
 8006464:	4770      	bx	lr

08006466 <_ZN8touchgfx8TextArea8setWidthEs>:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
    {
    }

    virtual void setWidth(int16_t width)
 8006466:	b530      	push	{r4, r5, lr}
 8006468:	b085      	sub	sp, #20
    {
        Widget::setWidth(width);
        boundingArea = calculateBoundingArea();
 800646a:	6803      	ldr	r3, [r0, #0]
    virtual void setWidth(int16_t width)
 800646c:	4604      	mov	r4, r0
        rect.width = width;
 800646e:	8101      	strh	r1, [r0, #8]
        boundingArea = calculateBoundingArea();
 8006470:	466d      	mov	r5, sp
 8006472:	4601      	mov	r1, r0
 8006474:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006478:	343c      	adds	r4, #60	; 0x3c
 800647a:	4628      	mov	r0, r5
 800647c:	4798      	blx	r3
 800647e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006482:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 8006486:	b005      	add	sp, #20
 8006488:	bd30      	pop	{r4, r5, pc}

0800648a <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 800648a:	b530      	push	{r4, r5, lr}
 800648c:	b085      	sub	sp, #20
    {
        Widget::setHeight(height);
        boundingArea = calculateBoundingArea();
 800648e:	6803      	ldr	r3, [r0, #0]
    virtual void setHeight(int16_t height)
 8006490:	4604      	mov	r4, r0
        rect.height = height;
 8006492:	8141      	strh	r1, [r0, #10]
        boundingArea = calculateBoundingArea();
 8006494:	466d      	mov	r5, sp
 8006496:	4601      	mov	r1, r0
 8006498:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800649c:	343c      	adds	r4, #60	; 0x3c
 800649e:	4628      	mov	r0, r5
 80064a0:	4798      	blx	r3
 80064a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80064a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 80064aa:	b005      	add	sp, #20
 80064ac:	bd30      	pop	{r4, r5, pc}

080064ae <_ZNK8touchgfx8TextArea12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 80064ae:	2200      	movs	r2, #0
 80064b0:	8002      	strh	r2, [r0, #0]
 80064b2:	8042      	strh	r2, [r0, #2]
 80064b4:	8082      	strh	r2, [r0, #4]
 80064b6:	80c2      	strh	r2, [r0, #6]

    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 80064b8:	4770      	bx	lr

080064ba <_ZN8touchgfx8TextArea8setAlphaEh>:
    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 80064ba:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
    }
 80064be:	4770      	bx	lr

080064c0 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
    {
        setX(x);
 80064c0:	6803      	ldr	r3, [r0, #0]
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 80064c2:	b570      	push	{r4, r5, r6, lr}
 80064c4:	4604      	mov	r4, r0
        setX(x);
 80064c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 80064c8:	4615      	mov	r5, r2
        setX(x);
 80064ca:	4798      	blx	r3
        setBaselineY(baselineY);
 80064cc:	6823      	ldr	r3, [r4, #0]
 80064ce:	4620      	mov	r0, r4
 80064d0:	4629      	mov	r1, r5
 80064d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    }
 80064d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setBaselineY(baselineY);
 80064d8:	4718      	bx	r3

080064da <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
    {
        return 0;
    }
 80064da:	2000      	movs	r0, #0
 80064dc:	4770      	bx	lr

080064de <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
    {
        return wc1;
    }
 80064de:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80064e0:	4770      	bx	lr

080064e2 <_ZN15Screen1ViewBase11setupScreenEv>:
}

void Screen1ViewBase::setupScreen()
{

}
 80064e2:	4770      	bx	lr

080064e4 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80064e4:	4770      	bx	lr

080064e6 <_ZN8touchgfx11GraphScrollILs100EED1Ev>:
 * the new values added to the graph.
 *
 * @tparam CAPACITY The maximum number of data points on the graph.
 */
template <int16_t CAPACITY>
class GraphScroll : public GraphScrollData
 80064e6:	4770      	bx	lr

080064e8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 80064e8:	4770      	bx	lr

080064ea <_ZN8touchgfx17GraphElementGridYD1Ev>:
class GraphElementGridY : public GraphElementGridBase
 80064ea:	4770      	bx	lr

080064ec <_ZN8touchgfx17GraphElementGridXD1Ev>:
class GraphElementGridX : public GraphElementGridBase
 80064ec:	4770      	bx	lr

080064ee <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 80064ee:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 80064f0:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 80064f2:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 80064f4:	68c2      	ldr	r2, [r0, #12]
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	1055      	asrs	r5, r2, #1
 80064fa:	eb04 0062 	add.w	r0, r4, r2, asr #1
 80064fe:	07d2      	lsls	r2, r2, #31
 8006500:	bf48      	it	mi
 8006502:	5962      	ldrmi	r2, [r4, r5]
    }
 8006504:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 8006506:	bf48      	it	mi
 8006508:	58d3      	ldrmi	r3, [r2, r3]
 800650a:	4718      	bx	r3

0800650c <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
 800650c:	6843      	ldr	r3, [r0, #4]
 800650e:	b12b      	cbz	r3, 800651c <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x10>
 8006510:	6883      	ldr	r3, [r0, #8]
 8006512:	b92b      	cbnz	r3, 8006520 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 8006514:	68c0      	ldr	r0, [r0, #12]
 8006516:	f000 0001 	and.w	r0, r0, #1
 800651a:	4770      	bx	lr
 800651c:	4618      	mov	r0, r3
 800651e:	4770      	bx	lr
 8006520:	2001      	movs	r0, #1
    }
 8006522:	4770      	bx	lr

08006524 <_ZN8touchgfx21AbstractPainterBitmapD0Ev>:
    virtual ~AbstractPainterBitmap()
 8006524:	b510      	push	{r4, lr}
 8006526:	4604      	mov	r4, r0
    }
 8006528:	2120      	movs	r1, #32
 800652a:	f01f fb42 	bl	8025bb2 <_ZdlPvj>
 800652e:	4620      	mov	r0, r4
 8006530:	bd10      	pop	{r4, pc}

08006532 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8006532:	b510      	push	{r4, lr}
 8006534:	4604      	mov	r4, r0
 8006536:	214c      	movs	r1, #76	; 0x4c
 8006538:	f01f fb3b 	bl	8025bb2 <_ZdlPvj>
 800653c:	4620      	mov	r0, r4
 800653e:	bd10      	pop	{r4, pc}

08006540 <_ZN8touchgfx17GraphElementGridXD0Ev>:
 8006540:	b510      	push	{r4, lr}
 8006542:	4604      	mov	r4, r0
 8006544:	2140      	movs	r1, #64	; 0x40
 8006546:	f01f fb34 	bl	8025bb2 <_ZdlPvj>
 800654a:	4620      	mov	r0, r4
 800654c:	bd10      	pop	{r4, pc}

0800654e <_ZN8touchgfx17GraphElementGridYD0Ev>:
class GraphElementGridY : public GraphElementGridBase
 800654e:	b510      	push	{r4, lr}
 8006550:	4604      	mov	r4, r0
 8006552:	2140      	movs	r1, #64	; 0x40
 8006554:	f01f fb2d 	bl	8025bb2 <_ZdlPvj>
 8006558:	4620      	mov	r0, r4
 800655a:	bd10      	pop	{r4, pc}

0800655c <_ZN8touchgfx11GraphScrollILs100EED0Ev>:
 800655c:	b510      	push	{r4, lr}
 800655e:	4604      	mov	r4, r0
 8006560:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 8006564:	f01f fb25 	bl	8025bb2 <_ZdlPvj>
 8006568:	4620      	mov	r0, r4
 800656a:	bd10      	pop	{r4, pc}

0800656c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800656c:	b510      	push	{r4, lr}
 800656e:	4604      	mov	r4, r0
 8006570:	2110      	movs	r1, #16
 8006572:	f01f fb1e 	bl	8025bb2 <_ZdlPvj>
 8006576:	4620      	mov	r0, r4
 8006578:	bd10      	pop	{r4, pc}

0800657a <_ZNK8touchgfx17GraphElementGridX30getCorrectlyScaledGridIntervalEPKNS_17AbstractDataGraphE>:
    virtual int getCorrectlyScaledGridInterval(const AbstractDataGraph* graph) const
 800657a:	b513      	push	{r0, r1, r4, lr}
 800657c:	4603      	mov	r3, r0
 800657e:	4608      	mov	r0, r1
        return convertToGraphScaleX(graph, gridInterval, dataScale);
 8006580:	e9d3 140c 	ldrd	r1, r4, [r3, #48]	; 0x30
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleX());
 8006584:	6803      	ldr	r3, [r0, #0]
        return convertToGraphScaleX(graph, gridInterval, dataScale);
 8006586:	9101      	str	r1, [sp, #4]
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleX());
 8006588:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800658c:	4798      	blx	r3
 800658e:	9901      	ldr	r1, [sp, #4]
 8006590:	4602      	mov	r2, r0
 8006592:	4620      	mov	r0, r4
    }
 8006594:	b002      	add	sp, #8
 8006596:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleX());
 800659a:	f00c b873 	b.w	8012684 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>

0800659e <_ZNK8touchgfx17GraphElementGridY30getCorrectlyScaledGridIntervalEPKNS_17AbstractDataGraphE>:
    virtual int getCorrectlyScaledGridInterval(const AbstractDataGraph* graph) const
 800659e:	b513      	push	{r0, r1, r4, lr}
 80065a0:	4603      	mov	r3, r0
 80065a2:	4608      	mov	r0, r1
        return convertToGraphScaleY(graph, gridInterval, dataScale);
 80065a4:	e9d3 140c 	ldrd	r1, r4, [r3, #48]	; 0x30
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleY());
 80065a8:	6803      	ldr	r3, [r0, #0]
        return convertToGraphScaleY(graph, gridInterval, dataScale);
 80065aa:	9101      	str	r1, [sp, #4]
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleY());
 80065ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80065b0:	4798      	blx	r3
 80065b2:	9901      	ldr	r1, [sp, #4]
 80065b4:	4602      	mov	r2, r0
 80065b6:	4620      	mov	r0, r4
    }
 80065b8:	b002      	add	sp, #8
 80065ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleY());
 80065be:	f00c b861 	b.w	8012684 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>

080065c2 <_ZN8touchgfx21AbstractPainterBitmap9setBitmapERKNS_6BitmapE>:
    virtual void setBitmap(const Bitmap& bmp)
 80065c2:	b570      	push	{r4, r5, r6, lr}
        bitmap = bmp;
 80065c4:	880b      	ldrh	r3, [r1, #0]
 80065c6:	4605      	mov	r5, r0
    virtual void setBitmap(const Bitmap& bmp)
 80065c8:	4604      	mov	r4, r0
        bitmap = bmp;
 80065ca:	f825 3f04 	strh.w	r3, [r5, #4]!
        bitmapFormat = bitmap.getFormat();
 80065ce:	4628      	mov	r0, r5
 80065d0:	f013 fa90 	bl	8019af4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80065d4:	71a0      	strb	r0, [r4, #6]
     *
     * @return a Rect describing the dimensions of this Bitmap.
     */
    Rect getRect() const
    {
        return Rect(0, 0, getWidth(), getHeight());
 80065d6:	4628      	mov	r0, r5
 80065d8:	f013 f91c 	bl	8019814 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80065dc:	4606      	mov	r6, r0
 80065de:	4628      	mov	r0, r5
 80065e0:	f013 f94c 	bl	801987c <_ZNK8touchgfx6Bitmap9getHeightEv>
        bitmapRect = bitmap.getRect();
 80065e4:	2300      	movs	r3, #0
 80065e6:	81e0      	strh	r0, [r4, #14]
        DisplayTransformation::transformDisplayToFrameBuffer(bitmapRect);
 80065e8:	f104 0008 	add.w	r0, r4, #8
        bitmapRect = bitmap.getRect();
 80065ec:	60a3      	str	r3, [r4, #8]
 80065ee:	81a6      	strh	r6, [r4, #12]
        DisplayTransformation::transformDisplayToFrameBuffer(bitmapRect);
 80065f0:	f00f fc6a 	bl	8015ec8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
        bitmapData = bitmap.getData();
 80065f4:	4628      	mov	r0, r5
 80065f6:	f013 f9f9 	bl	80199ec <_ZNK8touchgfx6Bitmap7getDataEv>
 80065fa:	6120      	str	r0, [r4, #16]
    }
 80065fc:	bd70      	pop	{r4, r5, r6, pc}
	...

08006600 <_ZN15Screen1ViewBaseD1Ev>:
Screen1ViewBase::~Screen1ViewBase()
 8006600:	4b03      	ldr	r3, [pc, #12]	; (8006610 <_ZN15Screen1ViewBaseD1Ev+0x10>)
 8006602:	b510      	push	{r4, lr}
 8006604:	4604      	mov	r4, r0
 8006606:	6003      	str	r3, [r0, #0]
    touchgfx::CanvasWidgetRenderer::resetBuffer();
 8006608:	f00e f91a 	bl	8014840 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>
}
 800660c:	4620      	mov	r0, r4
 800660e:	bd10      	pop	{r4, pc}
 8006610:	08029c2c 	.word	0x08029c2c

08006614 <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 8006614:	4b07      	ldr	r3, [pc, #28]	; (8006634 <_ZN15Screen1ViewBaseD0Ev+0x20>)
 8006616:	b507      	push	{r0, r1, r2, lr}
 8006618:	6003      	str	r3, [r0, #0]
 800661a:	9001      	str	r0, [sp, #4]
    touchgfx::CanvasWidgetRenderer::resetBuffer();
 800661c:	f00e f910 	bl	8014840 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>
}
 8006620:	9801      	ldr	r0, [sp, #4]
 8006622:	f243 51f4 	movw	r1, #13812	; 0x35f4
 8006626:	f01f fac4 	bl	8025bb2 <_ZdlPvj>
 800662a:	9801      	ldr	r0, [sp, #4]
 800662c:	b003      	add	sp, #12
 800662e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006632:	bf00      	nop
 8006634:	08029c2c 	.word	0x08029c2c

08006638 <_ZNK8touchgfx17AbstractDataGraph17invalidateContentEv>:
    virtual void invalidateContent() const
 8006638:	b508      	push	{r3, lr}
        if (alpha > 0)
 800663a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800663e:	b10b      	cbz	r3, 8006644 <_ZNK8touchgfx17AbstractDataGraph17invalidateContentEv+0xc>
            Container::invalidateContent();
 8006640:	f7fb fec3 	bl	80023ca <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 8006644:	bd08      	pop	{r3, pc}

08006646 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
    virtual void invalidateContent() const
 8006646:	b508      	push	{r3, lr}
        Widget::invalidateContent();
 8006648:	f7fb febf 	bl	80023ca <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 800664c:	bd08      	pop	{r3, pc}
	...

08006650 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs>:
        assert(index >= 0 && index < usedCapacity);
 8006650:	1e0a      	subs	r2, r1, #0
    virtual int indexToDataPointYScaled(int16_t index) const
 8006652:	b510      	push	{r4, lr}
        assert(index >= 0 && index < usedCapacity);
 8006654:	db03      	blt.n	800665e <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0xe>
 8006656:	f9b0 411e 	ldrsh.w	r4, [r0, #286]	; 0x11e
 800665a:	4294      	cmp	r4, r2
 800665c:	dc06      	bgt.n	800666c <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x1c>
 800665e:	4b08      	ldr	r3, [pc, #32]	; (8006680 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x30>)
 8006660:	f240 6139 	movw	r1, #1593	; 0x639
 8006664:	4a07      	ldr	r2, [pc, #28]	; (8006684 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x34>)
 8006666:	4808      	ldr	r0, [pc, #32]	; (8006688 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x38>)
 8006668:	f01f fad2 	bl	8025c10 <__assert_func>
        return yValues[dataIndex(index)];
 800666c:	6803      	ldr	r3, [r0, #0]
 800666e:	f8d0 4144 	ldr.w	r4, [r0, #324]	; 0x144
 8006672:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8006676:	4798      	blx	r3
    }
 8006678:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 800667c:	bd10      	pop	{r4, pc}
 800667e:	bf00      	nop
 8006680:	080295cc 	.word	0x080295cc
 8006684:	080295ef 	.word	0x080295ef
 8006688:	0802963e 	.word	0x0802963e

0800668c <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs>:
        assert(index >= 0 && index < usedCapacity);
 800668c:	1e0b      	subs	r3, r1, #0
    virtual int indexToDataPointXScaled(int16_t index) const
 800668e:	b510      	push	{r4, lr}
 8006690:	4604      	mov	r4, r0
        assert(index >= 0 && index < usedCapacity);
 8006692:	db03      	blt.n	800669c <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x10>
 8006694:	f9b0 211e 	ldrsh.w	r2, [r0, #286]	; 0x11e
 8006698:	429a      	cmp	r2, r3
 800669a:	dc06      	bgt.n	80066aa <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x1e>
 800669c:	4b07      	ldr	r3, [pc, #28]	; (80066bc <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x30>)
 800669e:	f240 6133 	movw	r1, #1587	; 0x633
 80066a2:	4a07      	ldr	r2, [pc, #28]	; (80066c0 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x34>)
 80066a4:	4807      	ldr	r0, [pc, #28]	; (80066c4 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x38>)
 80066a6:	f01f fab3 	bl	8025c10 <__assert_func>
        return (indexToGlobalIndex(index) * xAxisFactor) + xAxisOffset;
 80066aa:	6803      	ldr	r3, [r0, #0]
 80066ac:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 80066b0:	4798      	blx	r3
 80066b2:	e9d4 234f 	ldrd	r2, r3, [r4, #316]	; 0x13c
    }
 80066b6:	fb02 3000 	mla	r0, r2, r0, r3
 80066ba:	bd10      	pop	{r4, pc}
 80066bc:	080295cc 	.word	0x080295cc
 80066c0:	0802969b 	.word	0x0802969b
 80066c4:	0802963e 	.word	0x0802963e

080066c8 <_ZN8touchgfx8TextArea12setBaselineYEs>:
        setY(baselineY - getTypedText().getFont()->getBaseline());
 80066c8:	6803      	ldr	r3, [r0, #0]
    virtual void setBaselineY(int16_t baselineY)
 80066ca:	b570      	push	{r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 80066cc:	6b5e      	ldr	r6, [r3, #52]	; 0x34
    virtual void setBaselineY(int16_t baselineY)
 80066ce:	4604      	mov	r4, r0
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80066d0:	4b11      	ldr	r3, [pc, #68]	; (8006718 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
        setY(baselineY - getTypedText().getFont()->getBaseline());
 80066d2:	b28d      	uxth	r5, r1
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	b92b      	cbnz	r3, 80066e4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x1c>
 80066d8:	4b10      	ldr	r3, [pc, #64]	; (800671c <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 80066da:	216c      	movs	r1, #108	; 0x6c
 80066dc:	4a10      	ldr	r2, [pc, #64]	; (8006720 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80066de:	4811      	ldr	r0, [pc, #68]	; (8006724 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 80066e0:	f01f fa96 	bl	8025c10 <__assert_func>
        return typedTextId < numberOfTypedTexts;
 80066e4:	4910      	ldr	r1, [pc, #64]	; (8006728 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 80066e6:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80066e8:	8809      	ldrh	r1, [r1, #0]
 80066ea:	4291      	cmp	r1, r2
 80066ec:	d803      	bhi.n	80066f6 <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 80066ee:	4b0f      	ldr	r3, [pc, #60]	; (800672c <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 80066f0:	216d      	movs	r1, #109	; 0x6d
 80066f2:	4a0b      	ldr	r2, [pc, #44]	; (8006720 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 80066f4:	e7f3      	b.n	80066de <_ZN8touchgfx8TextArea12setBaselineYEs+0x16>
        return fonts[typedTexts[typedTextId].fontIdx];
 80066f6:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 80066fa:	4b0d      	ldr	r3, [pc, #52]	; (8006730 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006702:	6803      	ldr	r3, [r0, #0]
 8006704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006706:	4798      	blx	r3
 8006708:	1a28      	subs	r0, r5, r0
 800670a:	4633      	mov	r3, r6
 800670c:	b201      	sxth	r1, r0
 800670e:	4620      	mov	r0, r4
    }
 8006710:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8006714:	4718      	bx	r3
 8006716:	bf00      	nop
 8006718:	20027c1c 	.word	0x20027c1c
 800671c:	080296ea 	.word	0x080296ea
 8006720:	0802972c 	.word	0x0802972c
 8006724:	08029767 	.word	0x08029767
 8006728:	20027c20 	.word	0x20027c20
 800672c:	080297ae 	.word	0x080297ae
 8006730:	20027c24 	.word	0x20027c24

08006734 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &Sc1_button)
 8006734:	f500 60a1 	add.w	r0, r0, #1288	; 0x508
 8006738:	4288      	cmp	r0, r1
{
 800673a:	b508      	push	{r3, lr}
    if (&src == &Sc1_button)
 800673c:	d105      	bne.n	800674a <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x16>
    virtual ~Screen1ViewBase();
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 800673e:	f00f fcfd 	bl	801613c <_ZN8touchgfx11Application11getInstanceEv>
        //Interaction1
        //When Sc1_button clicked change screen to Screen2
        //Go to Screen2 with screen transition towards East
        application().gotoScreen2ScreenCoverTransitionEast();
    }
}
 8006742:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotoScreen2ScreenCoverTransitionEast();
 8006746:	f7ff ba4f 	b.w	8005be8 <_ZN23FrontendApplicationBase36gotoScreen2ScreenCoverTransitionEastEv>
}
 800674a:	bd08      	pop	{r3, pc}

0800674c <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 800674c:	2200      	movs	r2, #0
 800674e:	f04f 31ff 	mov.w	r1, #4294967295
              text(0)
 8006752:	6082      	str	r2, [r0, #8]
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 8006754:	e9c0 2100 	strd	r2, r1, [r0]
    }
 8006758:	4770      	bx	lr

0800675a <_ZN8touchgfx8Drawable5setXYEss>:
        setX(x);
 800675a:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 800675c:	b570      	push	{r4, r5, r6, lr}
 800675e:	4604      	mov	r4, r0
        setX(x);
 8006760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    void setXY(int16_t x, int16_t y)
 8006762:	4615      	mov	r5, r2
        setX(x);
 8006764:	4798      	blx	r3
        setY(y);
 8006766:	6823      	ldr	r3, [r4, #0]
 8006768:	4620      	mov	r0, r4
 800676a:	4629      	mov	r1, r5
 800676c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    }
 800676e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 8006772:	4718      	bx	r3

08006774 <_ZN8touchgfx6WidgetC1Ev>:
 8006774:	2200      	movs	r2, #0
 8006776:	e9c0 2201 	strd	r2, r2, [r0, #4]
 800677a:	e9c0 2203 	strd	r2, r2, [r0, #12]
          visible(true)
 800677e:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8006782:	e9c0 2207 	strd	r2, r2, [r0, #28]
 8006786:	f44f 7280 	mov.w	r2, #256	; 0x100
 800678a:	8482      	strh	r2, [r0, #36]	; 0x24
class Widget : public Drawable
 800678c:	4a01      	ldr	r2, [pc, #4]	; (8006794 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800678e:	6002      	str	r2, [r0, #0]
 8006790:	4770      	bx	lr
 8006792:	bf00      	nop
 8006794:	080297f4 	.word	0x080297f4

08006798 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>:
     * @param  factor2 The second factor.
     * @param  divisor The divisor.
     *
     * @return factor1 * factor2 / divisor as a Q5
     */
    static Q5 muldiv_toQ5(int32_t factor1, int32_t factor2, int32_t divisor)
 8006798:	b537      	push	{r0, r1, r2, r4, r5, lr}
    {
        int32_t remainder;
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
 800679a:	ab01      	add	r3, sp, #4
    static Q5 muldiv_toQ5(int32_t factor1, int32_t factor2, int32_t divisor)
 800679c:	4615      	mov	r5, r2
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
 800679e:	f010 ff2c 	bl	80175fa <_ZN8touchgfx6muldivElllRl>
        if (result >= 0)
 80067a2:	2800      	cmp	r0, #0
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
 80067a4:	462a      	mov	r2, r5
 80067a6:	9901      	ldr	r1, [sp, #4]
 80067a8:	ea4f 1440 	mov.w	r4, r0, lsl #5
 80067ac:	f04f 0020 	mov.w	r0, #32
        if (result >= 0)
 80067b0:	db04      	blt.n	80067bc <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll+0x24>
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
 80067b2:	f010 ff41 	bl	8017638 <_ZN8touchgfx6muldivElll>
            return Q5(v + q5.v);
 80067b6:	4420      	add	r0, r4
        {
            return toQ5(result) + muldivQ5(Q5(Rasterizer::POLY_BASE_SIZE), Q5(remainder), Q5(divisor));
        }
        return toQ5(result) - muldivQ5(Q5(Rasterizer::POLY_BASE_SIZE), Q5(remainder), Q5(divisor));
    }
 80067b8:	b003      	add	sp, #12
 80067ba:	bd30      	pop	{r4, r5, pc}
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
 80067bc:	f010 ff3c 	bl	8017638 <_ZN8touchgfx6muldivElll>
            return Q5(v - q5.v);
 80067c0:	1a20      	subs	r0, r4, r0
 80067c2:	e7f9      	b.n	80067b8 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll+0x20>

080067c4 <_ZNK8touchgfx17AbstractDataGraph16valueToScreenYQ5Ei>:
    virtual CWRUtil::Q5 valueToScreenYQ5(int y) const
 80067c4:	b570      	push	{r4, r5, r6, lr}
        return graphArea.getHeight() - (topPadding + bottomPadding);
 80067c6:	f9b0 4114 	ldrsh.w	r4, [r0, #276]	; 0x114
    virtual CWRUtil::Q5 valueToScreenYQ5(int y) const
 80067ca:	460e      	mov	r6, r1
        return graphArea.getHeight() - (topPadding + bottomPadding);
 80067cc:	f8b0 511a 	ldrh.w	r5, [r0, #282]	; 0x11a
 80067d0:	1963      	adds	r3, r4, r5
 80067d2:	f8b0 5042 	ldrh.w	r5, [r0, #66]	; 0x42
 80067d6:	1aed      	subs	r5, r5, r3
        return CWRUtil::toQ5(graphAreaHeight + topPadding - 1) - CWRUtil::muldiv_toQ5(y - graphRangeMinY, graphAreaHeight - 1, graphRangeMaxY - graphRangeMinY);
 80067d8:	b22d      	sxth	r5, r5
 80067da:	442c      	add	r4, r5
 80067dc:	1e69      	subs	r1, r5, #1
 80067de:	e9d0 324d 	ldrd	r3, r2, [r0, #308]	; 0x134
 80067e2:	3c01      	subs	r4, #1
 80067e4:	1ad2      	subs	r2, r2, r3
 80067e6:	1af0      	subs	r0, r6, r3
 80067e8:	f7ff ffd6 	bl	8006798 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
    }
 80067ec:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 80067f0:	bd70      	pop	{r4, r5, r6, pc}

080067f2 <_ZNK8touchgfx17AbstractDataGraph16valueToScreenXQ5Ei>:
    virtual CWRUtil::Q5 valueToScreenXQ5(int x) const
 80067f2:	b538      	push	{r3, r4, r5, lr}
 80067f4:	4604      	mov	r4, r0
 80067f6:	4608      	mov	r0, r1
        return graphArea.getWidth() - (leftPadding + rightPadding);
 80067f8:	f8b4 3118 	ldrh.w	r3, [r4, #280]	; 0x118
 80067fc:	f8b4 1116 	ldrh.w	r1, [r4, #278]	; 0x116
 8006800:	440b      	add	r3, r1
 8006802:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8006806:	1ac9      	subs	r1, r1, r3
        return CWRUtil::muldiv_toQ5(x - graphRangeMinX, getGraphAreaWidth() - 1, graphRangeMaxX - graphRangeMinX) + CWRUtil::toQ5(leftPadding);
 8006808:	e9d4 524b 	ldrd	r5, r2, [r4, #300]	; 0x12c
 800680c:	b209      	sxth	r1, r1
 800680e:	1b52      	subs	r2, r2, r5
 8006810:	1b40      	subs	r0, r0, r5
 8006812:	3901      	subs	r1, #1
 8006814:	f7ff ffc0 	bl	8006798 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
            return Q5(v + q5.v);
 8006818:	f9b4 3116 	ldrsh.w	r3, [r4, #278]	; 0x116
    }
 800681c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8006820:	bd38      	pop	{r3, r4, r5, pc}
	...

08006824 <_ZN8touchgfx20GraphElementGridBaseC1Ev>:
    GraphElementGridBase()
 8006824:	b510      	push	{r4, lr}
 8006826:	4604      	mov	r4, r0
        : CanvasWidget()
 8006828:	f00a ff7e 	bl	8011728 <_ZN8touchgfx12CanvasWidgetC1Ev>
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 800682c:	4a06      	ldr	r2, [pc, #24]	; (8006848 <_ZN8touchgfx20GraphElementGridBaseC1Ev+0x24>)
        : color(col)
 800682e:	2300      	movs	r3, #0
 8006830:	210a      	movs	r1, #10
    }
 8006832:	4620      	mov	r0, r4
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 8006834:	6022      	str	r2, [r4, #0]
 8006836:	2201      	movs	r2, #1
 8006838:	62e3      	str	r3, [r4, #44]	; 0x2c
 800683a:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
 800683e:	63e3      	str	r3, [r4, #60]	; 0x3c
 8006840:	e9c4 210c 	strd	r2, r1, [r4, #48]	; 0x30
    }
 8006844:	bd10      	pop	{r4, pc}
 8006846:	bf00      	nop
 8006848:	0802af94 	.word	0x0802af94

0800684c <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase() :
 800684c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006850:	4604      	mov	r4, r0
        : presenter(0)
 8006852:	2500      	movs	r5, #0
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 8006854:	26ff      	movs	r6, #255	; 0xff
        : bitmapId(id)
 8006856:	f64f 79ff 	movw	r9, #65535	; 0xffff
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 800685a:	46a3      	mov	fp, r4
 800685c:	f104 0a6c 	add.w	sl, r4, #108	; 0x6c
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
 8006860:	f04f 0801 	mov.w	r8, #1
class GraphElementGridY : public GraphElementGridBase
 8006864:	4feb      	ldr	r7, [pc, #940]	; (8006c14 <_ZN15Screen1ViewBaseC1Ev+0x3c8>)
Screen1ViewBase::Screen1ViewBase() :
 8006866:	ed2d 8b0a 	vpush	{d8-d12}
 800686a:	b08f      	sub	sp, #60	; 0x3c
 800686c:	f011 f88e 	bl	801798c <_ZN8touchgfx6ScreenC1Ev>
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 8006870:	4be9      	ldr	r3, [pc, #932]	; (8006c18 <_ZN15Screen1ViewBaseC1Ev+0x3cc>)
 8006872:	63e5      	str	r5, [r4, #60]	; 0x3c
 8006874:	4629      	mov	r1, r5
 8006876:	f84b 3b40 	str.w	r3, [fp], #64
 800687a:	2326      	movs	r3, #38	; 0x26
 800687c:	4658      	mov	r0, fp
 800687e:	461a      	mov	r2, r3
 8006880:	f01f fb4c 	bl	8025f1c <memset>
 8006884:	4658      	mov	r0, fp
 8006886:	f7ff ff75 	bl	8006774 <_ZN8touchgfx6WidgetC1Ev>
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
        : Widget(), bitmap(bmp), alpha(255)
 800688a:	2326      	movs	r3, #38	; 0x26
 800688c:	4ae3      	ldr	r2, [pc, #908]	; (8006c1c <_ZN15Screen1ViewBaseC1Ev+0x3d0>)
 800688e:	4629      	mov	r1, r5
 8006890:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8006894:	4650      	mov	r0, sl
 8006896:	6422      	str	r2, [r4, #64]	; 0x40
 8006898:	461a      	mov	r2, r3
 800689a:	66a5      	str	r5, [r4, #104]	; 0x68
 800689c:	f8ad 9030 	strh.w	r9, [sp, #48]	; 0x30
 80068a0:	f01f fb3c 	bl	8025f1c <memset>
 80068a4:	4650      	mov	r0, sl
 80068a6:	f7ff ff65 	bl	8006774 <_ZN8touchgfx6WidgetC1Ev>
 80068aa:	4add      	ldr	r2, [pc, #884]	; (8006c20 <_ZN15Screen1ViewBaseC1Ev+0x3d4>)
 80068ac:	f884 6094 	strb.w	r6, [r4, #148]	; 0x94
 80068b0:	f104 0698 	add.w	r6, r4, #152	; 0x98
 80068b4:	66e2      	str	r2, [r4, #108]	; 0x6c
    {
        Image::setBitmap(bmp);
 80068b6:	a90c      	add	r1, sp, #48	; 0x30
        : Widget(), bitmap(bmp), alpha(255)
 80068b8:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
        Image::setBitmap(bmp);
 80068bc:	4650      	mov	r0, sl
        : Widget(), bitmap(bmp), alpha(255)
 80068be:	f8a4 2092 	strh.w	r2, [r4, #146]	; 0x92
        Image::setBitmap(bmp);
 80068c2:	f00d f8b8 	bl	8013a36 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80068c6:	2164      	movs	r1, #100	; 0x64
 80068c8:	4630      	mov	r0, r6
 80068ca:	f00b fe77 	bl	80125bc <_ZN8touchgfx17AbstractDataGraphC1Es>
 80068ce:	4ad5      	ldr	r2, [pc, #852]	; (8006c24 <_ZN15Screen1ViewBaseC1Ev+0x3d8>)
        DynamicDataGraph::setGraphRangeX(0, capacity - 1);
 80068d0:	4629      	mov	r1, r5
 80068d2:	4630      	mov	r0, r6
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
 80068d4:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
{
public:
    GraphScroll()
        : GraphScrollData(CAPACITY, y)
 80068d8:	f504 72f4 	add.w	r2, r4, #488	; 0x1e8
 80068dc:	e9c4 8575 	strd	r8, r5, [r4, #468]	; 0x1d4
 80068e0:	e9c4 2577 	strd	r2, r5, [r4, #476]	; 0x1dc
        DynamicDataGraph::setGraphRangeX(0, capacity - 1);
 80068e4:	2263      	movs	r2, #99	; 0x63
 80068e6:	f7ff f9fb 	bl	8005ce0 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>
 80068ea:	f504 735e 	add.w	r3, r4, #888	; 0x378
 80068ee:	4ace      	ldr	r2, [pc, #824]	; (8006c28 <_ZN15Screen1ViewBaseC1Ev+0x3dc>)
class GraphElementGridX : public GraphElementGridBase
 80068f0:	4618      	mov	r0, r3
        : DynamicDataGraph(capacity, values), current(0)
 80068f2:	f8a4 51e4 	strh.w	r5, [r4, #484]	; 0x1e4
        : GraphScrollData(CAPACITY, y)
 80068f6:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
 80068fa:	ee0a 3a90 	vmov	s21, r3
 80068fe:	f7ff ff91 	bl	8006824 <_ZN8touchgfx20GraphElementGridBaseC1Ev>
 8006902:	f504 736e 	add.w	r3, r4, #952	; 0x3b8
 8006906:	4ac9      	ldr	r2, [pc, #804]	; (8006c2c <_ZN15Screen1ViewBaseC1Ev+0x3e0>)
class GraphElementGridY : public GraphElementGridBase
 8006908:	4618      	mov	r0, r3
 800690a:	ee0b 3a10 	vmov	s22, r3
class GraphElementGridX : public GraphElementGridBase
 800690e:	f8c4 2378 	str.w	r2, [r4, #888]	; 0x378
class GraphElementGridY : public GraphElementGridBase
 8006912:	f7ff ff87 	bl	8006824 <_ZN8touchgfx20GraphElementGridBaseC1Ev>
 8006916:	f504 737e 	add.w	r3, r4, #1016	; 0x3f8
 800691a:	f8c4 73b8 	str.w	r7, [r4, #952]	; 0x3b8
class GraphElementGridX : public GraphElementGridBase
 800691e:	4618      	mov	r0, r3
 8006920:	ee09 3a10 	vmov	s18, r3
 8006924:	f7ff ff7e 	bl	8006824 <_ZN8touchgfx20GraphElementGridBaseC1Ev>
 8006928:	f504 6387 	add.w	r3, r4, #1080	; 0x438
 800692c:	4abf      	ldr	r2, [pc, #764]	; (8006c2c <_ZN15Screen1ViewBaseC1Ev+0x3e0>)
class GraphElementGridY : public GraphElementGridBase
 800692e:	4618      	mov	r0, r3
 8006930:	ee09 3a90 	vmov	s19, r3
class GraphElementGridX : public GraphElementGridBase
 8006934:	f8c4 23f8 	str.w	r2, [r4, #1016]	; 0x3f8
class GraphElementGridY : public GraphElementGridBase
 8006938:	f7ff ff74 	bl	8006824 <_ZN8touchgfx20GraphElementGridBaseC1Ev>
 800693c:	f504 638f 	add.w	r3, r4, #1144	; 0x478
 8006940:	f8c4 7438 	str.w	r7, [r4, #1080]	; 0x438
 8006944:	f204 5744 	addw	r7, r4, #1348	; 0x544
        : CanvasWidget()
 8006948:	4618      	mov	r0, r3
 800694a:	ee0b 3a90 	vmov	s23, r3
 800694e:	f00a feeb 	bl	8011728 <_ZN8touchgfx12CanvasWidgetC1Ev>
class GraphLabelsBase : public AbstractGraphDecoration
{
public:
    GraphLabelsBase()
        : AbstractGraphDecoration(),
          dataScale(1), labelInterval(0), labelTypedText(TYPED_TEXT_INVALID), labelRotation(TEXT_ROTATE_0), labelDecimals(0), labelDecimalPoint('.'), majorLabel(0)
 8006952:	222e      	movs	r2, #46	; 0x2e
        : typedTextId(id)
 8006954:	4bb6      	ldr	r3, [pc, #728]	; (8006c30 <_ZN15Screen1ViewBaseC1Ev+0x3e4>)
 8006956:	f8a4 24bc 	strh.w	r2, [r4, #1212]	; 0x4bc

/**
 * GraphLabelsY will draw labels along the Y axis at given intervals. By combining two
 * GraphLabelsY it is possible to have different appearance for major and minor y offsets.
 */
class GraphLabelsY : public GraphLabelsBase
 800695a:	4ab6      	ldr	r2, [pc, #728]	; (8006c34 <_ZN15Screen1ViewBaseC1Ev+0x3e8>)
 800695c:	f8c4 34b0 	str.w	r3, [r4, #1200]	; 0x4b0
 8006960:	f8c4 2478 	str.w	r2, [r4, #1144]	; 0x478
 8006964:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 8006968:	f8a4 94b4 	strh.w	r9, [r4, #1204]	; 0x4b4
 800696c:	4610      	mov	r0, r2
 800696e:	f8c4 54a4 	str.w	r5, [r4, #1188]	; 0x4a4
          dataScale(1), labelInterval(0), labelTypedText(TYPED_TEXT_INVALID), labelRotation(TEXT_ROTATE_0), labelDecimals(0), labelDecimalPoint('.'), majorLabel(0)
 8006972:	f8c4 84a8 	str.w	r8, [r4, #1192]	; 0x4a8
 8006976:	ee0c 2a10 	vmov	s24, r2
 800697a:	f8c4 54ac 	str.w	r5, [r4, #1196]	; 0x4ac
 800697e:	f884 54b8 	strb.w	r5, [r4, #1208]	; 0x4b8
 8006982:	f8a4 54ba 	strh.w	r5, [r4, #1210]	; 0x4ba
 8006986:	f8c4 54c0 	str.w	r5, [r4, #1216]	; 0x4c0
 800698a:	f00a fecd 	bl	8011728 <_ZN8touchgfx12CanvasWidgetC1Ev>
 */
class GraphElementLine : public AbstractGraphElement
{
public:
    GraphElementLine()
        : lineWidth(2)
 800698e:	4aaa      	ldr	r2, [pc, #680]	; (8006c38 <_ZN15Screen1ViewBaseC1Ev+0x3ec>)
 8006990:	f204 41f4 	addw	r1, r4, #1268	; 0x4f4
 8006994:	f8c4 24c4 	str.w	r2, [r4, #1220]	; 0x4c4
 8006998:	f04f 0202 	mov.w	r2, #2
     * Initializes a new instance of the PainterRGB565 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB565(colortype color = 0)
        : AbstractPainterRGB565(), AbstractPainterColor(color)
 800699c:	4608      	mov	r0, r1
 800699e:	9103      	str	r1, [sp, #12]
 80069a0:	f884 24f0 	strb.w	r2, [r4, #1264]	; 0x4f0
 80069a4:	f7fb fe7a 	bl	800269c <_ZN8touchgfx21AbstractPainterRGB565C1Ev>
 80069a8:	4aa4      	ldr	r2, [pc, #656]	; (8006c3c <_ZN15Screen1ViewBaseC1Ev+0x3f0>)
 80069aa:	f504 61a1 	add.w	r1, r4, #1288	; 0x508
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
    {
        painterColor = color;
 80069ae:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
 80069b2:	f8c4 24f4 	str.w	r2, [r4, #1268]	; 0x4f4
 80069b6:	3224      	adds	r2, #36	; 0x24
 80069b8:	4608      	mov	r0, r1
 80069ba:	ee08 1a90 	vmov	s17, r1
 80069be:	f8c4 24fc 	str.w	r2, [r4, #1276]	; 0x4fc
 80069c2:	f00d f811 	bl	80139e8 <_ZN8touchgfx14ButtonWithIconC1Ev>
 80069c6:	4638      	mov	r0, r7
 80069c8:	f009 f8fa 	bl	800fbc0 <_ZN8touchgfx12LineProgressC1Ev>
 80069cc:	f504 61cf 	add.w	r1, r4, #1656	; 0x678
 80069d0:	f8ad 9030 	strh.w	r9, [sp, #48]	; 0x30
     * Constructor.
     *
     * @param  bmp (Optional) The bitmap to use in the painter.
     */
    PainterRGB565Bitmap(const Bitmap& bmp = Bitmap(BITMAP_INVALID))
        : AbstractPainterRGB565(), AbstractPainterBitmap(bmp)
 80069d4:	4608      	mov	r0, r1
 80069d6:	ee0a 1a10 	vmov	s20, r1
 80069da:	f7fb fe5f 	bl	800269c <_ZN8touchgfx21AbstractPainterRGB565C1Ev>
        : bitmap(bmp), bitmapFormat(), bitmapRect(), bitmapData(0), xOffset(0), yOffset(0), isTiled(false)
 80069de:	4a98      	ldr	r2, [pc, #608]	; (8006c40 <_ZN15Screen1ViewBaseC1Ev+0x3f4>)
        setBitmap(bmp);
 80069e0:	a90c      	add	r1, sp, #48	; 0x30
 80069e2:	f504 60d0 	add.w	r0, r4, #1664	; 0x680
        : bitmap(bmp), bitmapFormat(), bitmapRect(), bitmapData(0), xOffset(0), yOffset(0), isTiled(false)
 80069e6:	f8c4 2680 	str.w	r2, [r4, #1664]	; 0x680
 80069ea:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 80069ee:	f884 5686 	strb.w	r5, [r4, #1670]	; 0x686
 80069f2:	f8a4 2684 	strh.w	r2, [r4, #1668]	; 0x684
        : x(0), y(0), width(0), height(0)
 80069f6:	f8c4 5688 	str.w	r5, [r4, #1672]	; 0x688
 80069fa:	f8c4 568c 	str.w	r5, [r4, #1676]	; 0x68c
 80069fe:	f8c4 5690 	str.w	r5, [r4, #1680]	; 0x690
 8006a02:	f8c4 5694 	str.w	r5, [r4, #1684]	; 0x694
 8006a06:	f884 5698 	strb.w	r5, [r4, #1688]	; 0x698
        setBitmap(bmp);
 8006a0a:	f7ff fdda 	bl	80065c2 <_ZN8touchgfx21AbstractPainterBitmap9setBitmapERKNS_6BitmapE>
 8006a0e:	f204 61a4 	addw	r1, r4, #1700	; 0x6a4
 8006a12:	4a8c      	ldr	r2, [pc, #560]	; (8006c44 <_ZN15Screen1ViewBaseC1Ev+0x3f8>)
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8006a14:	2326      	movs	r3, #38	; 0x26
 8006a16:	ee08 1a10 	vmov	s16, r1
 8006a1a:	4629      	mov	r1, r5
 8006a1c:	f8c4 2678 	str.w	r2, [r4, #1656]	; 0x678
 8006a20:	3224      	adds	r2, #36	; 0x24
 8006a22:	ee18 0a10 	vmov	r0, s16
 8006a26:	f8c4 2680 	str.w	r2, [r4, #1664]	; 0x680
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	f01f fa76 	bl	8025f1c <memset>
 8006a30:	ee18 0a10 	vmov	r0, s16
 8006a34:	f7ff fe9e 	bl	8006774 <_ZN8touchgfx6WidgetC1Ev>
 8006a38:	4b7d      	ldr	r3, [pc, #500]	; (8006c30 <_ZN15Screen1ViewBaseC1Ev+0x3e4>)
        : pobject(pObject), pmemfun(pmemfun_1)
 8006a3a:	4a83      	ldr	r2, [pc, #524]	; (8006c48 <_ZN15Screen1ViewBaseC1Ev+0x3fc>)
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 8006a3c:	f204 7004 	addw	r0, r4, #1796	; 0x704
 8006a40:	f8c4 36cc 	str.w	r3, [r4, #1740]	; 0x6cc
 8006a44:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8006a48:	f8a4 96d0 	strh.w	r9, [r4, #1744]	; 0x6d0
 8006a4c:	f642 61e0 	movw	r1, #12000	; 0x2ee0
 8006a50:	f8c4 36d8 	str.w	r3, [r4, #1752]	; 0x6d8
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8006a54:	f104 0904 	add.w	r9, r4, #4
        : TextAreaWithWildcardBase(), wc1(0)
 8006a58:	4b7c      	ldr	r3, [pc, #496]	; (8006c4c <_ZN15Screen1ViewBaseC1Ev+0x400>)
        : color(col)
 8006a5a:	f8c4 56d4 	str.w	r5, [r4, #1748]	; 0x6d4
 8006a5e:	f8c4 36a4 	str.w	r3, [r4, #1700]	; 0x6a4
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8006a62:	f04f 33ff 	mov.w	r3, #4294967295
 8006a66:	f8a4 56dc 	strh.w	r5, [r4, #1756]	; 0x6dc
 8006a6a:	f8c4 36e4 	str.w	r3, [r4, #1764]	; 0x6e4
 8006a6e:	f504 5340 	add.w	r3, r4, #12288	; 0x3000
 8006a72:	f8c4 56e0 	str.w	r5, [r4, #1760]	; 0x6e0
              text(0)
 8006a76:	f8c4 56e8 	str.w	r5, [r4, #1768]	; 0x6e8
 8006a7a:	f8c4 56ec 	str.w	r5, [r4, #1772]	; 0x6ec
 8006a7e:	f8c3 25e4 	str.w	r2, [r3, #1508]	; 0x5e4
 8006a82:	4a73      	ldr	r2, [pc, #460]	; (8006c50 <_ZN15Screen1ViewBaseC1Ev+0x404>)
 8006a84:	f8c3 45e8 	str.w	r4, [r3, #1512]	; 0x5e8
 8006a88:	f8c3 25ec 	str.w	r2, [r3, #1516]	; 0x5ec
 8006a8c:	f8c3 55f0 	str.w	r5, [r3, #1520]	; 0x5f0
 8006a90:	f00d fecc 	bl	801482c <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>
    __background.setPosition(0, 0, 800, 480);
 8006a94:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8006a98:	462a      	mov	r2, r5
 8006a9a:	4629      	mov	r1, r5
 8006a9c:	4658      	mov	r0, fp
 8006a9e:	9300      	str	r3, [sp, #0]
 8006aa0:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006aa4:	f7fe fe94 	bl	80057d0 <_ZN8touchgfx8Drawable11setPositionEssss>
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 8006aa8:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
 8006aac:	4648      	mov	r0, r9
 8006aae:	66a1      	str	r1, [r4, #104]	; 0x68
 8006ab0:	4659      	mov	r1, fp
 8006ab2:	f009 fa6b 	bl	800ff8c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image1.setXY(0, 0);
 8006ab6:	462a      	mov	r2, r5
 8006ab8:	4629      	mov	r1, r5
 8006aba:	4650      	mov	r0, sl
 8006abc:	f7ff fe4d 	bl	800675a <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_BACKGROUNDS_800X480_GRADIENT_LIGHT_ID));
 8006ac0:	a90c      	add	r1, sp, #48	; 0x30
 8006ac2:	4650      	mov	r0, sl
 8006ac4:	f8ad 5030 	strh.w	r5, [sp, #48]	; 0x30
 8006ac8:	f00c ffb5 	bl	8013a36 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8006acc:	4651      	mov	r1, sl
 8006ace:	4648      	mov	r0, r9
    dynamicGraph1.setGraphAreaMargin(21, 92, 0, 30);
 8006ad0:	f04f 0b1e 	mov.w	fp, #30
 8006ad4:	f009 fa5a 	bl	800ff8c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    dynamicGraph1.setPosition(161, 135, 639, 345);
 8006ad8:	f240 1359 	movw	r3, #345	; 0x159
 8006adc:	4630      	mov	r0, r6
 8006ade:	2287      	movs	r2, #135	; 0x87
 8006ae0:	9300      	str	r3, [sp, #0]
 8006ae2:	21a1      	movs	r1, #161	; 0xa1
 8006ae4:	f240 237f 	movw	r3, #639	; 0x27f
        setIntervalScaled(abs(interval) * dataScale);
 8006ae8:	f04f 0a0a 	mov.w	sl, #10
 8006aec:	f7fe fe70 	bl	80057d0 <_ZN8touchgfx8Drawable11setPositionEssss>
    dynamicGraph1.setScale(1);
 8006af0:	462a      	mov	r2, r5
 8006af2:	4641      	mov	r1, r8
 8006af4:	4630      	mov	r0, r6
 8006af6:	f7ff faa7 	bl	8006048 <_ZN8touchgfx16DynamicDataGraph8setScaleEib>
    dynamicGraph1.setGraphRangeX(0, 99);
 8006afa:	4629      	mov	r1, r5
 8006afc:	4630      	mov	r0, r6
 8006afe:	2263      	movs	r2, #99	; 0x63
 8006b00:	f7ff f8ee 	bl	8005ce0 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>
    dynamicGraph1.setGraphAreaMargin(21, 92, 0, 30);
 8006b04:	462b      	mov	r3, r5
 8006b06:	4630      	mov	r0, r6
 8006b08:	f8cd b000 	str.w	fp, [sp]
 8006b0c:	225c      	movs	r2, #92	; 0x5c
 8006b0e:	2115      	movs	r1, #21
 8006b10:	f00b fd06 	bl	8012520 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
    dynamicGraph1.setGraphAreaPadding(0, 0, 0, 0);
 8006b14:	462b      	mov	r3, r5
 8006b16:	462a      	mov	r2, r5
 8006b18:	4629      	mov	r1, r5
 8006b1a:	4630      	mov	r0, r6
 8006b1c:	9500      	str	r5, [sp, #0]
 8006b1e:	f00b fc14 	bl	801234a <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>
    dynamicGraph1.setGraphRangeY(0, 3500);
 8006b22:	4629      	mov	r1, r5
 8006b24:	4630      	mov	r0, r6
 8006b26:	f640 52ac 	movw	r2, #3500	; 0xdac
 8006b2a:	f7ff f965 	bl	8005df8 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEii>
 8006b2e:	f8d4 13a8 	ldr.w	r1, [r4, #936]	; 0x3a8
        color = newColor;
 8006b32:	4b48      	ldr	r3, [pc, #288]	; (8006c54 <_ZN15Screen1ViewBaseC1Ev+0x408>)
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8006b34:	4642      	mov	r2, r8
        setIntervalScaled(abs(interval) * dataScale);
 8006b36:	fb0a f001 	mul.w	r0, sl, r1
        color = newColor;
 8006b3a:	f8c4 33a4 	str.w	r3, [r4, #932]	; 0x3a4
 * @return The absolute (non-negative) value of d.
 */
template <typename T>
T abs(T d)
{
    return (d < 0) ? -d : d;
 8006b3e:	2800      	cmp	r0, #0
        lineWidth = width;
 8006b40:	f884 83b0 	strb.w	r8, [r4, #944]	; 0x3b0
 8006b44:	bfb8      	it	lt
 8006b46:	4240      	neglt	r0, r0
        gridInterval = abs(interval);
 8006b48:	f8c4 03ac 	str.w	r0, [r4, #940]	; 0x3ac
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8006b4c:	f00b fd9a 	bl	8012684 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
    dynamicGraph1.addGraphElement(dynamicGraph1MinorXAxisGrid);
 8006b50:	ee1a 1a90 	vmov	r1, s21
        majorGrid = &major;
 8006b54:	ed84 9aed 	vstr	s18, [r4, #948]	; 0x3b4
        dataScale = scale;
 8006b58:	e9c4 80ea 	strd	r8, r0, [r4, #936]	; 0x3a8
 8006b5c:	4630      	mov	r0, r6
 8006b5e:	f00b fbff 	bl	8012360 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
        color = newColor;
 8006b62:	4b3c      	ldr	r3, [pc, #240]	; (8006c54 <_ZN15Screen1ViewBaseC1Ev+0x408>)
        setIntervalScaled(abs(interval) * dataScale);
 8006b64:	f8d4 13e8 	ldr.w	r1, [r4, #1000]	; 0x3e8
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8006b68:	4642      	mov	r2, r8
        color = newColor;
 8006b6a:	f8c4 33e4 	str.w	r3, [r4, #996]	; 0x3e4
        setIntervalScaled(abs(interval) * dataScale);
 8006b6e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
        lineWidth = width;
 8006b72:	f884 83f0 	strb.w	r8, [r4, #1008]	; 0x3f0
        setIntervalScaled(abs(interval) * dataScale);
 8006b76:	fb03 f001 	mul.w	r0, r3, r1
 8006b7a:	2800      	cmp	r0, #0
 8006b7c:	bfb8      	it	lt
 8006b7e:	4240      	neglt	r0, r0
        gridInterval = abs(interval);
 8006b80:	f8c4 03ec 	str.w	r0, [r4, #1004]	; 0x3ec
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8006b84:	f00b fd7e 	bl	8012684 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
    dynamicGraph1.addGraphElement(dynamicGraph1MinorYAxisGrid);
 8006b88:	ee1b 1a10 	vmov	r1, s22
        majorGrid = &major;
 8006b8c:	edc4 9afd 	vstr	s19, [r4, #1012]	; 0x3f4
        dataScale = scale;
 8006b90:	e9c4 80fa 	strd	r8, r0, [r4, #1000]	; 0x3e8
 8006b94:	4630      	mov	r0, r6
 8006b96:	f00b fbe3 	bl	8012360 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
        color = newColor;
 8006b9a:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
        setIntervalScaled(abs(interval) * dataScale);
 8006b9e:	2032      	movs	r0, #50	; 0x32
        lineWidth = width;
 8006ba0:	f04f 0202 	mov.w	r2, #2
        color = newColor;
 8006ba4:	f8c4 1424 	str.w	r1, [r4, #1060]	; 0x424
        setIntervalScaled(abs(interval) * dataScale);
 8006ba8:	f8d4 1428 	ldr.w	r1, [r4, #1064]	; 0x428
        lineWidth = width;
 8006bac:	f884 2430 	strb.w	r2, [r4, #1072]	; 0x430
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8006bb0:	4642      	mov	r2, r8
        setIntervalScaled(abs(interval) * dataScale);
 8006bb2:	4348      	muls	r0, r1
 8006bb4:	2800      	cmp	r0, #0
 8006bb6:	bfb8      	it	lt
 8006bb8:	4240      	neglt	r0, r0
        gridInterval = abs(interval);
 8006bba:	f8c4 042c 	str.w	r0, [r4, #1068]	; 0x42c
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8006bbe:	f00b fd61 	bl	8012684 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
    dynamicGraph1.addGraphElement(dynamicGraph1MajorXAxisGrid);
 8006bc2:	ee19 1a10 	vmov	r1, s18
 8006bc6:	f8c4 042c 	str.w	r0, [r4, #1068]	; 0x42c
 8006bca:	4630      	mov	r0, r6
        dataScale = scale;
 8006bcc:	f8c4 8428 	str.w	r8, [r4, #1064]	; 0x428
 8006bd0:	f00b fbc6 	bl	8012360 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
        color = newColor;
 8006bd4:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
        setIntervalScaled(abs(interval) * dataScale);
 8006bd8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
        lineWidth = width;
 8006bdc:	f04f 0202 	mov.w	r2, #2
        color = newColor;
 8006be0:	f8c4 1464 	str.w	r1, [r4, #1124]	; 0x464
        setIntervalScaled(abs(interval) * dataScale);
 8006be4:	f8d4 1468 	ldr.w	r1, [r4, #1128]	; 0x468
        lineWidth = width;
 8006be8:	f884 2470 	strb.w	r2, [r4, #1136]	; 0x470
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8006bec:	4642      	mov	r2, r8
        setIntervalScaled(abs(interval) * dataScale);
 8006bee:	4348      	muls	r0, r1
 8006bf0:	2800      	cmp	r0, #0
 8006bf2:	bfb8      	it	lt
 8006bf4:	4240      	neglt	r0, r0
        gridInterval = abs(interval);
 8006bf6:	f8c4 046c 	str.w	r0, [r4, #1132]	; 0x46c
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8006bfa:	f00b fd43 	bl	8012684 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
    dynamicGraph1.addGraphElement(dynamicGraph1MajorYAxisGrid);
 8006bfe:	ee19 1a90 	vmov	r1, s19
 8006c02:	f8c4 046c 	str.w	r0, [r4, #1132]	; 0x46c
 8006c06:	4630      	mov	r0, r6
        dataScale = scale;
 8006c08:	f8c4 8468 	str.w	r8, [r4, #1128]	; 0x468
 8006c0c:	f00b fba8 	bl	8012360 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
 8006c10:	e022      	b.n	8006c58 <_ZN15Screen1ViewBaseC1Ev+0x40c>
 8006c12:	bf00      	nop
 8006c14:	08029914 	.word	0x08029914
 8006c18:	08029c2c 	.word	0x08029c2c
 8006c1c:	0802b0f0 	.word	0x0802b0f0
 8006c20:	0802b1d0 	.word	0x0802b1d0
 8006c24:	0802ac50 	.word	0x0802ac50
 8006c28:	08029a78 	.word	0x08029a78
 8006c2c:	0802985c 	.word	0x0802985c
 8006c30:	08028edc 	.word	0x08028edc
 8006c34:	0802b050 	.word	0x0802b050
 8006c38:	0802af18 	.word	0x0802af18
 8006c3c:	0802aa14 	.word	0x0802aa14
 8006c40:	080299cc 	.word	0x080299cc
 8006c44:	0802a9d4 	.word	0x0802a9d4
 8006c48:	08029c14 	.word	0x08029c14
 8006c4c:	080299e8 	.word	0x080299e8
 8006c50:	08006735 	.word	0x08006735
 8006c54:	ff1e1e1e 	.word	0xff1e1e1e
        setIntervalScaled(AbstractDataGraph::int2scaled(interval, dataScale));
 8006c58:	f8d4 14a8 	ldr.w	r1, [r4, #1192]	; 0x4a8
        return i * scale;
 8006c5c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
        color = newColor;
 8006c60:	f04f 4c7f 	mov.w	ip, #4278190080	; 0xff000000
        labelInterval = AbstractDataGraph::convertToNewScale(labelInterval, dataScale, scale);
 8006c64:	4642      	mov	r2, r8
 8006c66:	fb03 f001 	mul.w	r0, r3, r1
class TypedText
 8006c6a:	2306      	movs	r3, #6
 8006c6c:	f8c4 c4a4 	str.w	ip, [r4, #1188]	; 0x4a4
 8006c70:	2800      	cmp	r0, #0
 8006c72:	f8a4 34b4 	strh.w	r3, [r4, #1204]	; 0x4b4
 8006c76:	bfb8      	it	lt
 8006c78:	4240      	neglt	r0, r0
        labelInterval = abs(interval);
 8006c7a:	f8c4 04ac 	str.w	r0, [r4, #1196]	; 0x4ac
        labelInterval = AbstractDataGraph::convertToNewScale(labelInterval, dataScale, scale);
 8006c7e:	f00b fd01 	bl	8012684 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
    dynamicGraph1.addLeftElement(dynamicGraph1MajorYAxisLabel);
 8006c82:	ee1b 1a90 	vmov	r1, s23
 8006c86:	f8c4 04ac 	str.w	r0, [r4, #1196]	; 0x4ac
 8006c8a:	4630      	mov	r0, r6
        dataScale = scale;
 8006c8c:	f8c4 84a8 	str.w	r8, [r4, #1192]	; 0x4a8
 8006c90:	f00b fb78 	bl	8012384 <_ZN8touchgfx17AbstractDataGraph14addLeftElementERNS_23AbstractGraphDecorationE>
 8006c94:	4a5d      	ldr	r2, [pc, #372]	; (8006e0c <_ZN15Screen1ViewBaseC1Ev+0x5c0>)
    dynamicGraph1.addGraphElement(dynamicGraph1Line1);
 8006c96:	ee1c 1a10 	vmov	r1, s24
 8006c9a:	4630      	mov	r0, r6
 8006c9c:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
    }

    virtual void setColor(colortype color)
    {
        AbstractPainterColor::setColor(color);
        color565 = LCD16bpp::getNativeColor(painterColor);
 8006ca0:	f24f 0227 	movw	r2, #61479	; 0xf027
 8006ca4:	f8a4 2504 	strh.w	r2, [r4, #1284]	; 0x504
        canvasPainter = &painter;
 8006ca8:	9a03      	ldr	r2, [sp, #12]
 8006caa:	f8c4 24ec 	str.w	r2, [r4, #1260]	; 0x4ec
     *
     * @see getLineWidth
     */
    FORCE_INLINE_FUNCTION void setLineWidth(uint8_t width)
    {
        lineWidth = width;
 8006cae:	f04f 0202 	mov.w	r2, #2
 8006cb2:	f884 24f0 	strb.w	r2, [r4, #1264]	; 0x4f0
 8006cb6:	f00b fb53 	bl	8012360 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
 8006cba:	4631      	mov	r1, r6
 8006cbc:	4648      	mov	r0, r9
    lineProgress1.setProgressIndicatorPosition(0, 0, 10, 300);
 8006cbe:	f44f 7696 	mov.w	r6, #300	; 0x12c
 8006cc2:	f009 f963 	bl	800ff8c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Sc1_button.setXY(37, 35);
 8006cc6:	ee18 0a90 	vmov	r0, s17
 8006cca:	2223      	movs	r2, #35	; 0x23
 8006ccc:	2125      	movs	r1, #37	; 0x25
 8006cce:	f7ff fd44 	bl	800675a <_ZN8touchgfx8Drawable5setXYEss>
 8006cd2:	2203      	movs	r2, #3
 8006cd4:	2306      	movs	r3, #6
    Sc1_button.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_TINY_ROUNDED_ACTIVE_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_TINY_ROUNDED_ACTION_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_NAVIGATION_ARROW_BACK_IOS_50_50_E8F6FB_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_NAVIGATION_ARROW_BACK_IOS_50_50_E8F6FB_SVG_ID));
 8006cd6:	a909      	add	r1, sp, #36	; 0x24
 8006cd8:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8006cdc:	f04f 0202 	mov.w	r2, #2
 8006ce0:	ee18 0a90 	vmov	r0, s17
 8006ce4:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8006ce8:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8006cec:	aa0c      	add	r2, sp, #48	; 0x30
 8006cee:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8006cf2:	ab0b      	add	r3, sp, #44	; 0x2c
 8006cf4:	9200      	str	r2, [sp, #0]
 8006cf6:	aa0a      	add	r2, sp, #40	; 0x28
 8006cf8:	f00c fdd1 	bl	801389e <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    Sc1_button.setAction(buttonCallback);
 8006cfc:	f504 5357 	add.w	r3, r4, #13760	; 0x35c0
 8006d00:	ee18 1a90 	vmov	r1, s17
 8006d04:	4648      	mov	r0, r9
 8006d06:	3324      	adds	r3, #36	; 0x24
     * @note The user code must call invalidate() in order to update the button on the display.
     * @note The value set is overwritten on a subsequent call to setBitmaps.
     */
    void setIconX(int16_t x)
    {
        iconX = x;
 8006d08:	f8c4 b540 	str.w	fp, [r4, #1344]	; 0x540
 8006d0c:	f04f 0b05 	mov.w	fp, #5
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
    {
        action = &callback;
 8006d10:	f8c4 3530 	str.w	r3, [r4, #1328]	; 0x530
 8006d14:	f009 f93a 	bl	800ff8c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    lineProgress1.setXY(87, 157);
 8006d18:	4638      	mov	r0, r7
 8006d1a:	229d      	movs	r2, #157	; 0x9d
 8006d1c:	2157      	movs	r1, #87	; 0x57
 8006d1e:	f7ff fd1c 	bl	800675a <_ZN8touchgfx8Drawable5setXYEss>
    lineProgress1.setProgressIndicatorPosition(0, 0, 10, 300);
 8006d22:	4653      	mov	r3, sl
 8006d24:	462a      	mov	r2, r5
 8006d26:	4629      	mov	r1, r5
 8006d28:	4638      	mov	r0, r7
 8006d2a:	9600      	str	r6, [sp, #0]
 8006d2c:	f008 ff2f 	bl	800fb8e <_ZN8touchgfx12LineProgress28setProgressIndicatorPositionEssss>
    lineProgress1.setRange(0, 3500);
 8006d30:	f640 52ac 	movw	r2, #3500	; 0xdac
 8006d34:	462b      	mov	r3, r5
 8006d36:	4629      	mov	r1, r5
 8006d38:	4638      	mov	r0, r7
 8006d3a:	9500      	str	r5, [sp, #0]
 8006d3c:	f008 ff72 	bl	800fc24 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
 8006d40:	2304      	movs	r3, #4
    lineProgress1.setBackground(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_LINEPROGRESS_BACKGROUNDS_IMAGE_PLAIN_NORMAL_MEDIUM_90_ID));
 8006d42:	a90c      	add	r1, sp, #48	; 0x30
 8006d44:	4638      	mov	r0, r7
 8006d46:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8006d4a:	f009 f8b2 	bl	800feb2 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    lineProgress1Painter.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_LINEPROGRESS_FILLERS_PLAIN_NORMAL_MEDIUM_ACTION_90_ID));
 8006d4e:	a90c      	add	r1, sp, #48	; 0x30
 8006d50:	ee1a 0a10 	vmov	r0, s20
 8006d54:	f8ad b030 	strh.w	fp, [sp, #48]	; 0x30
 8006d58:	f00a fbe8 	bl	801152c <_ZN8touchgfx19PainterRGB565Bitmap9setBitmapERKNS_6BitmapE>
    lineProgress1.setPainter(lineProgress1Painter);
 8006d5c:	ee1a 1a10 	vmov	r1, s20
 8006d60:	4638      	mov	r0, r7
 8006d62:	f008 fe75 	bl	800fa50 <_ZN8touchgfx12LineProgress10setPainterERNS_15AbstractPainterE>
    lineProgress1.setStart(5, 300);
 8006d66:	4632      	mov	r2, r6
 8006d68:	4659      	mov	r1, fp
 8006d6a:	4638      	mov	r0, r7
 8006d6c:	f008 fe9b 	bl	800faa6 <_ZN8touchgfx12LineProgress8setStartEii>
    lineProgress1.setEnd(5, 0);
 8006d70:	462a      	mov	r2, r5
 8006d72:	4659      	mov	r1, fp
 8006d74:	4638      	mov	r0, r7
 8006d76:	f008 fe7b 	bl	800fa70 <_ZN8touchgfx12LineProgress6setEndEii>
    lineProgress1.setLineWidth(10);
 8006d7a:	4651      	mov	r1, sl
 8006d7c:	4638      	mov	r0, r7
 8006d7e:	f008 fe99 	bl	800fab4 <_ZN8touchgfx12LineProgress12setLineWidthEi>
    lineProgress1.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
 8006d82:	4629      	mov	r1, r5
 8006d84:	4638      	mov	r0, r7
 8006d86:	f008 fea0 	bl	800faca <_ZN8touchgfx12LineProgress18setLineEndingStyleENS_4Line17LINE_ENDING_STYLEE>
    lineProgress1.setValue(300);
 8006d8a:	4631      	mov	r1, r6
 8006d8c:	4638      	mov	r0, r7
        boundingArea = calculateBoundingArea();
 8006d8e:	ae04      	add	r6, sp, #16
 8006d90:	f008 feb1 	bl	800faf6 <_ZN8touchgfx12LineProgress8setValueEi>
 8006d94:	4639      	mov	r1, r7
 8006d96:	4648      	mov	r0, r9
 8006d98:	f009 f8f8 	bl	800ff8c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea_Value.setPosition(7, 120, 149, 31);
 8006d9c:	231f      	movs	r3, #31
 8006d9e:	ee18 0a10 	vmov	r0, s16
 8006da2:	2278      	movs	r2, #120	; 0x78
 8006da4:	9300      	str	r3, [sp, #0]
 8006da6:	2107      	movs	r1, #7
 8006da8:	2395      	movs	r3, #149	; 0x95
 8006daa:	f7fe fd11 	bl	80057d0 <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 8006dae:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
        boundingArea = calculateBoundingArea();
 8006db2:	f8d4 36a4 	ldr.w	r3, [r4, #1700]	; 0x6a4
 8006db6:	ee18 1a10 	vmov	r1, s16
 8006dba:	4630      	mov	r0, r6
        color = newColor;
 8006dbc:	f8c4 26d4 	str.w	r2, [r4, #1748]	; 0x6d4
        boundingArea = calculateBoundingArea();
 8006dc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
        linespace = space;
 8006dc4:	f8a4 56d8 	strh.w	r5, [r4, #1752]	; 0x6d8
        boundingArea = calculateBoundingArea();
 8006dc8:	4798      	blx	r3
 8006dca:	f504 63dc 	add.w	r3, r4, #1760	; 0x6e0
 8006dce:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8006dd2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    textArea_Value.setWildcard(textArea_ValueBuffer);
 8006dd6:	f504 63de 	add.w	r3, r4, #1776	; 0x6f0
    textArea_Value.setTypedText(touchgfx::TypedText(T_ADC_VALUE));
 8006dda:	a90c      	add	r1, sp, #48	; 0x30
 8006ddc:	ee18 0a10 	vmov	r0, s16
    textArea_ValueBuffer[0] = 0;
 8006de0:	f8a4 56f0 	strh.w	r5, [r4, #1776]	; 0x6f0
        wc1 = value;
 8006de4:	f8c4 36ec 	str.w	r3, [r4, #1772]	; 0x6ec
        : typedTextId(id)
 8006de8:	4b09      	ldr	r3, [pc, #36]	; (8006e10 <_ZN15Screen1ViewBaseC1Ev+0x5c4>)
 8006dea:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
 8006dee:	930c      	str	r3, [sp, #48]	; 0x30
    textArea_Value.setTypedText(touchgfx::TypedText(T_ADC_VALUE));
 8006df0:	f00c fc7c 	bl	80136ec <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8006df4:	4648      	mov	r0, r9
 8006df6:	ee18 1a10 	vmov	r1, s16
 8006dfa:	f009 f8c7 	bl	800ff8c <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8006dfe:	4620      	mov	r0, r4
 8006e00:	b00f      	add	sp, #60	; 0x3c
 8006e02:	ecbd 8b0a 	vpop	{d8-d12}
 8006e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e0a:	bf00      	nop
 8006e0c:	fff20538 	.word	0xfff20538
 8006e10:	08028edc 	.word	0x08028edc

08006e14 <_ZN15Screen2ViewBaseD1Ev>:
}

Screen2ViewBase::~Screen2ViewBase()
{

}
 8006e14:	4770      	bx	lr

08006e16 <_ZN15Screen2ViewBase11setupScreenEv>:

void Screen2ViewBase::setupScreen()
{

}
 8006e16:	4770      	bx	lr

08006e18 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8006e18:	4770      	bx	lr

08006e1a <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8006e1a:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 8006e1c:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8006e1e:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8006e20:	68c2      	ldr	r2, [r0, #12]
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	1055      	asrs	r5, r2, #1
 8006e26:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8006e2a:	07d2      	lsls	r2, r2, #31
 8006e2c:	bf48      	it	mi
 8006e2e:	5962      	ldrmi	r2, [r4, r5]
    }
 8006e30:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 8006e32:	bf48      	it	mi
 8006e34:	58d3      	ldrmi	r3, [r2, r3]
 8006e36:	4718      	bx	r3

08006e38 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
 8006e38:	6843      	ldr	r3, [r0, #4]
 8006e3a:	b12b      	cbz	r3, 8006e48 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x10>
 8006e3c:	6883      	ldr	r3, [r0, #8]
 8006e3e:	b92b      	cbnz	r3, 8006e4c <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 8006e40:	68c0      	ldr	r0, [r0, #12]
 8006e42:	f000 0001 	and.w	r0, r0, #1
 8006e46:	4770      	bx	lr
 8006e48:	4618      	mov	r0, r3
 8006e4a:	4770      	bx	lr
 8006e4c:	2001      	movs	r0, #1
    }
 8006e4e:	4770      	bx	lr

08006e50 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8006e50:	b510      	push	{r4, lr}
 8006e52:	4604      	mov	r4, r0
 8006e54:	2110      	movs	r1, #16
 8006e56:	f01e feac 	bl	8025bb2 <_ZdlPvj>
 8006e5a:	4620      	mov	r0, r4
 8006e5c:	bd10      	pop	{r4, pc}

08006e5e <_ZN15Screen2ViewBaseD0Ev>:
Screen2ViewBase::~Screen2ViewBase()
 8006e5e:	b510      	push	{r4, lr}
 8006e60:	4604      	mov	r4, r0
}
 8006e62:	f44f 7119 	mov.w	r1, #612	; 0x264
 8006e66:	f01e fea4 	bl	8025bb2 <_ZdlPvj>
 8006e6a:	4620      	mov	r0, r4
 8006e6c:	bd10      	pop	{r4, pc}

08006e6e <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen2ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &Sc2_button)
 8006e6e:	3098      	adds	r0, #152	; 0x98
 8006e70:	4288      	cmp	r0, r1
{
 8006e72:	b508      	push	{r3, lr}
    if (&src == &Sc2_button)
 8006e74:	d105      	bne.n	8006e82 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x14>
    virtual ~Screen2ViewBase();
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8006e76:	f00f f961 	bl	801613c <_ZN8touchgfx11Application11getInstanceEv>
        //Interaction1
        //When Sc2_button clicked change screen to Screen1
        //Go to Screen1 with screen transition towards West
        application().gotoScreen1ScreenCoverTransitionWest();
    }
}
 8006e7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotoScreen1ScreenCoverTransitionWest();
 8006e7e:	f7fe be93 	b.w	8005ba8 <_ZN23FrontendApplicationBase36gotoScreen1ScreenCoverTransitionWestEv>
}
 8006e82:	bd08      	pop	{r3, pc}

08006e84 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
    TextAreaWithOneWildcard()
 8006e84:	b510      	push	{r4, lr}
 8006e86:	4604      	mov	r4, r0
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8006e88:	2226      	movs	r2, #38	; 0x26
 8006e8a:	2100      	movs	r1, #0
 8006e8c:	f01f f846 	bl	8025f1c <memset>
 8006e90:	4620      	mov	r0, r4
 8006e92:	f7ff fc6f 	bl	8006774 <_ZN8touchgfx6WidgetC1Ev>
 8006e96:	4b0a      	ldr	r3, [pc, #40]	; (8006ec0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x3c>)
 8006e98:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
    }
 8006e9c:	4620      	mov	r0, r4
 8006e9e:	62a3      	str	r3, [r4, #40]	; 0x28
 8006ea0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006ea4:	85a3      	strh	r3, [r4, #44]	; 0x2c
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	e9c4 320c 	strd	r3, r2, [r4, #48]	; 0x30
        : TextAreaWithWildcardBase(), wc1(0)
 8006eac:	4a05      	ldr	r2, [pc, #20]	; (8006ec4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x40>)
 8006eae:	8723      	strh	r3, [r4, #56]	; 0x38
 8006eb0:	6022      	str	r2, [r4, #0]
 8006eb2:	f04f 32ff 	mov.w	r2, #4294967295
 8006eb6:	63e3      	str	r3, [r4, #60]	; 0x3c
 8006eb8:	64a3      	str	r3, [r4, #72]	; 0x48
              text(0)
 8006eba:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
    }
 8006ebe:	bd10      	pop	{r4, pc}
 8006ec0:	08028edc 	.word	0x08028edc
 8006ec4:	080299e8 	.word	0x080299e8

08006ec8 <_ZN15Screen2ViewBaseC1Ev>:
Screen2ViewBase::Screen2ViewBase() :
 8006ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ecc:	4604      	mov	r4, r0
 8006ece:	2500      	movs	r5, #0
        : Widget(), alpha(255), color(0)
 8006ed0:	26ff      	movs	r6, #255	; 0xff
    buttonCallback(this, &Screen2ViewBase::buttonCallbackHandler)
 8006ed2:	46a1      	mov	r9, r4
 8006ed4:	f104 086c 	add.w	r8, r4, #108	; 0x6c
 8006ed8:	f104 0b98 	add.w	fp, r4, #152	; 0x98
 8006edc:	f104 0ad4 	add.w	sl, r4, #212	; 0xd4
Screen2ViewBase::Screen2ViewBase() :
 8006ee0:	ed2d 8b04 	vpush	{d8-d9}
 8006ee4:	b08d      	sub	sp, #52	; 0x34
 8006ee6:	f010 fd51 	bl	801798c <_ZN8touchgfx6ScreenC1Ev>
    buttonCallback(this, &Screen2ViewBase::buttonCallbackHandler)
 8006eea:	4bb2      	ldr	r3, [pc, #712]	; (80071b4 <_ZN15Screen2ViewBaseC1Ev+0x2ec>)
 8006eec:	4629      	mov	r1, r5
 8006eee:	2226      	movs	r2, #38	; 0x26
 8006ef0:	63e5      	str	r5, [r4, #60]	; 0x3c
 8006ef2:	af0a      	add	r7, sp, #40	; 0x28
 8006ef4:	f849 3b40 	str.w	r3, [r9], #64
 8006ef8:	4648      	mov	r0, r9
 8006efa:	f01f f80f 	bl	8025f1c <memset>
 8006efe:	4648      	mov	r0, r9
 8006f00:	f7ff fc38 	bl	8006774 <_ZN8touchgfx6WidgetC1Ev>
 8006f04:	4bac      	ldr	r3, [pc, #688]	; (80071b8 <_ZN15Screen2ViewBaseC1Ev+0x2f0>)
        : Widget(), bitmap(bmp), alpha(255)
 8006f06:	2226      	movs	r2, #38	; 0x26
 8006f08:	4629      	mov	r1, r5
 8006f0a:	6423      	str	r3, [r4, #64]	; 0x40
 8006f0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006f10:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8006f14:	4640      	mov	r0, r8
        : color(col)
 8006f16:	66a5      	str	r5, [r4, #104]	; 0x68
 8006f18:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 8006f1c:	f01e fffe 	bl	8025f1c <memset>
 8006f20:	4640      	mov	r0, r8
 8006f22:	f7ff fc27 	bl	8006774 <_ZN8touchgfx6WidgetC1Ev>
 8006f26:	4ba5      	ldr	r3, [pc, #660]	; (80071bc <_ZN15Screen2ViewBaseC1Ev+0x2f4>)
        Image::setBitmap(bmp);
 8006f28:	4639      	mov	r1, r7
 8006f2a:	4640      	mov	r0, r8
        : Widget(), bitmap(bmp), alpha(255)
 8006f2c:	66e3      	str	r3, [r4, #108]	; 0x6c
 8006f2e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8006f32:	f884 6094 	strb.w	r6, [r4, #148]	; 0x94
 8006f36:	1d26      	adds	r6, r4, #4
 8006f38:	f8a4 3092 	strh.w	r3, [r4, #146]	; 0x92
        Image::setBitmap(bmp);
 8006f3c:	f00c fd7b 	bl	8013a36 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8006f40:	4658      	mov	r0, fp
 8006f42:	f00c fd51 	bl	80139e8 <_ZN8touchgfx14ButtonWithIconC1Ev>
 8006f46:	4650      	mov	r0, sl
 8006f48:	f7ff ff9c 	bl	8006e84 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8006f4c:	f504 7390 	add.w	r3, r4, #288	; 0x120
 8006f50:	4618      	mov	r0, r3
 8006f52:	ee08 3a10 	vmov	s16, r3
 8006f56:	f7ff ff95 	bl	8006e84 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8006f5a:	f504 73b6 	add.w	r3, r4, #364	; 0x16c
 8006f5e:	4618      	mov	r0, r3
 8006f60:	ee08 3a90 	vmov	s17, r3
 8006f64:	f7ff ff8e 	bl	8006e84 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8006f68:	f504 73dc 	add.w	r3, r4, #440	; 0x1b8
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	ee09 3a10 	vmov	s18, r3
 8006f72:	f7ff ff87 	bl	8006e84 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
        : pobject(pObject), pmemfun(pmemfun_1)
 8006f76:	4b92      	ldr	r3, [pc, #584]	; (80071c0 <_ZN15Screen2ViewBaseC1Ev+0x2f8>)
    __background.setPosition(0, 0, 800, 480);
 8006f78:	462a      	mov	r2, r5
 8006f7a:	4629      	mov	r1, r5
 8006f7c:	4648      	mov	r0, r9
 8006f7e:	e9c4 3495 	strd	r3, r4, [r4, #596]	; 0x254
 8006f82:	4b90      	ldr	r3, [pc, #576]	; (80071c4 <_ZN15Screen2ViewBaseC1Ev+0x2fc>)
 8006f84:	e9c4 3597 	strd	r3, r5, [r4, #604]	; 0x25c
 8006f88:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8006f8c:	9300      	str	r3, [sp, #0]
 8006f8e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006f92:	f7fe fc1d 	bl	80057d0 <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 8006f96:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8006f9a:	4649      	mov	r1, r9
 8006f9c:	4630      	mov	r0, r6
 8006f9e:	66a3      	str	r3, [r4, #104]	; 0x68
 8006fa0:	f008 fff4 	bl	800ff8c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image1.setXY(0, 0);
 8006fa4:	462a      	mov	r2, r5
 8006fa6:	4629      	mov	r1, r5
 8006fa8:	4640      	mov	r0, r8
 8006faa:	f7ff fbd6 	bl	800675a <_ZN8touchgfx8Drawable5setXYEss>
 8006fae:	2301      	movs	r3, #1
    image1.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_BACKGROUNDS_800X480_WAVES_ID));
 8006fb0:	4639      	mov	r1, r7
 8006fb2:	4640      	mov	r0, r8
 8006fb4:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 8006fb8:	f00c fd3d 	bl	8013a36 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8006fbc:	4641      	mov	r1, r8
 8006fbe:	4630      	mov	r0, r6
 8006fc0:	f008 ffe4 	bl	800ff8c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Sc2_button.setXY(650, 35);
 8006fc4:	4658      	mov	r0, fp
 8006fc6:	2223      	movs	r2, #35	; 0x23
 8006fc8:	f240 218a 	movw	r1, #650	; 0x28a
 8006fcc:	f7ff fbc5 	bl	800675a <_ZN8touchgfx8Drawable5setXYEss>
 8006fd0:	f04f 0303 	mov.w	r3, #3
 8006fd4:	f04f 0202 	mov.w	r2, #2
    Sc2_button.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_TINY_ROUNDED_ACTIVE_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_TINY_ROUNDED_ACTION_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_NAVIGATION_ARROW_FORWARD_IOS_50_50_E8F6FB_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_NAVIGATION_ARROW_FORWARD_IOS_50_50_E8F6FB_SVG_ID));
 8006fd8:	a907      	add	r1, sp, #28
 8006fda:	f8ad 301c 	strh.w	r3, [sp, #28]
 8006fde:	2307      	movs	r3, #7
 8006fe0:	4658      	mov	r0, fp
 8006fe2:	f8ad 2020 	strh.w	r2, [sp, #32]
 8006fe6:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8006fea:	aa08      	add	r2, sp, #32
 8006fec:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 8006ff0:	ab09      	add	r3, sp, #36	; 0x24
 8006ff2:	9700      	str	r7, [sp, #0]
        boundingArea = calculateBoundingArea();
 8006ff4:	f10d 0808 	add.w	r8, sp, #8
 8006ff8:	f00c fc51 	bl	801389e <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
 8006ffc:	231e      	movs	r3, #30
 8006ffe:	4659      	mov	r1, fp
 8007000:	4630      	mov	r0, r6
 8007002:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
    Sc2_button.setAction(buttonCallback);
 8007006:	f504 7315 	add.w	r3, r4, #596	; 0x254
        color = newColor;
 800700a:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 80071c8 <_ZN15Screen2ViewBaseC1Ev+0x300>
 800700e:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
 8007012:	f008 ffbb 	bl	800ff8c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textAreaTemp.setPosition(33, 132, 727, 73);
 8007016:	2349      	movs	r3, #73	; 0x49
 8007018:	2284      	movs	r2, #132	; 0x84
 800701a:	4650      	mov	r0, sl
 800701c:	9300      	str	r3, [sp, #0]
 800701e:	2121      	movs	r1, #33	; 0x21
 8007020:	f240 23d7 	movw	r3, #727	; 0x2d7
 8007024:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 80071cc <_ZN15Screen2ViewBaseC1Ev+0x304>
 8007028:	f7fe fbd2 	bl	80057d0 <_ZN8touchgfx8Drawable11setPositionEssss>
        boundingArea = calculateBoundingArea();
 800702c:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 8007030:	4651      	mov	r1, sl
 8007032:	4640      	mov	r0, r8
 8007034:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
        color = newColor;
 8007038:	f8c4 b104 	str.w	fp, [r4, #260]	; 0x104
        linespace = space;
 800703c:	f8a4 5108 	strh.w	r5, [r4, #264]	; 0x108
        boundingArea = calculateBoundingArea();
 8007040:	4798      	blx	r3
 8007042:	f504 7388 	add.w	r3, r4, #272	; 0x110
 8007046:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 800704a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    textAreaTemp.setWildcard(textAreaTempBuffer);
 800704e:	f504 7301 	add.w	r3, r4, #516	; 0x204
    textAreaTemp.setTypedText(touchgfx::TypedText(T_TEMPERATUR_TEXT));
 8007052:	4639      	mov	r1, r7
 8007054:	4650      	mov	r0, sl
    textAreaTempBuffer[0] = 0;
 8007056:	f8a4 5204 	strh.w	r5, [r4, #516]	; 0x204
        wc1 = value;
 800705a:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
 800705e:	2305      	movs	r3, #5
 8007060:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8007064:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    textAreaTemp.setTypedText(touchgfx::TypedText(T_TEMPERATUR_TEXT));
 8007068:	f00c fb40 	bl	80136ec <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800706c:	4651      	mov	r1, sl
    textAreaHumi.setPosition(33, 205, 727, 70);
 800706e:	f04f 0a46 	mov.w	sl, #70	; 0x46
 8007072:	4630      	mov	r0, r6
 8007074:	f008 ff8a 	bl	800ff8c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8007078:	22cd      	movs	r2, #205	; 0xcd
 800707a:	ee18 0a10 	vmov	r0, s16
 800707e:	f240 23d7 	movw	r3, #727	; 0x2d7
 8007082:	2121      	movs	r1, #33	; 0x21
 8007084:	f8cd a000 	str.w	sl, [sp]
 8007088:	f7fe fba2 	bl	80057d0 <_ZN8touchgfx8Drawable11setPositionEssss>
 800708c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007090:	ee18 1a10 	vmov	r1, s16
 8007094:	4640      	mov	r0, r8
 8007096:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
        color = newColor;
 800709a:	f8c4 b150 	str.w	fp, [r4, #336]	; 0x150
        linespace = space;
 800709e:	f8a4 5154 	strh.w	r5, [r4, #340]	; 0x154
        boundingArea = calculateBoundingArea();
 80070a2:	4798      	blx	r3
 80070a4:	f504 73ae 	add.w	r3, r4, #348	; 0x15c
 80070a8:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 80070ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    textAreaHumi.setWildcard(textAreaHumiBuffer);
 80070b0:	f504 7306 	add.w	r3, r4, #536	; 0x218
    textAreaHumi.setTypedText(touchgfx::TypedText(T_LUFTFEUCHTE_TEXT));
 80070b4:	4639      	mov	r1, r7
 80070b6:	ee18 0a10 	vmov	r0, s16
    textAreaHumiBuffer[0] = 0;
 80070ba:	f8a4 5218 	strh.w	r5, [r4, #536]	; 0x218
 80070be:	f8c4 3168 	str.w	r3, [r4, #360]	; 0x168
 80070c2:	2304      	movs	r3, #4
 80070c4:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 80070c8:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    textAreaHumi.setTypedText(touchgfx::TypedText(T_LUFTFEUCHTE_TEXT));
 80070cc:	f00c fb0e 	bl	80136ec <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80070d0:	ee18 1a10 	vmov	r1, s16
 80070d4:	4630      	mov	r0, r6
 80070d6:	f008 ff59 	bl	800ff8c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textAreaPres.setPosition(33, 275, 727, 70);
 80070da:	f240 1213 	movw	r2, #275	; 0x113
 80070de:	ee18 0a90 	vmov	r0, s17
 80070e2:	f240 23d7 	movw	r3, #727	; 0x2d7
 80070e6:	2121      	movs	r1, #33	; 0x21
 80070e8:	f8cd a000 	str.w	sl, [sp]
 80070ec:	f7fe fb70 	bl	80057d0 <_ZN8touchgfx8Drawable11setPositionEssss>
 80070f0:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 80070f4:	ee18 1a90 	vmov	r1, s17
 80070f8:	4640      	mov	r0, r8
 80070fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
        color = newColor;
 80070fe:	f8c4 b19c 	str.w	fp, [r4, #412]	; 0x19c
        linespace = space;
 8007102:	f8a4 51a0 	strh.w	r5, [r4, #416]	; 0x1a0
        boundingArea = calculateBoundingArea();
 8007106:	4798      	blx	r3
 8007108:	f504 73d4 	add.w	r3, r4, #424	; 0x1a8
 800710c:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8007110:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    textAreaPres.setWildcard(textAreaPresBuffer);
 8007114:	f504 730b 	add.w	r3, r4, #556	; 0x22c
    textAreaPres.setTypedText(touchgfx::TypedText(T_LUFTDRUCK_TEXT));
 8007118:	4639      	mov	r1, r7
 800711a:	ee18 0a90 	vmov	r0, s17
    textAreaPresBuffer[0] = 0;
 800711e:	f8a4 522c 	strh.w	r5, [r4, #556]	; 0x22c
 8007122:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
 8007126:	f04f 0303 	mov.w	r3, #3
 800712a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 800712e:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    textAreaPres.setTypedText(touchgfx::TypedText(T_LUFTDRUCK_TEXT));
 8007132:	f00c fadb 	bl	80136ec <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8007136:	ee18 1a90 	vmov	r1, s17
 800713a:	4630      	mov	r0, r6
 800713c:	f008 ff26 	bl	800ff8c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textAreaGas.setPosition(33, 345, 727, 70);
 8007140:	f240 1259 	movw	r2, #345	; 0x159
 8007144:	ee19 0a10 	vmov	r0, s18
 8007148:	f240 23d7 	movw	r3, #727	; 0x2d7
 800714c:	2121      	movs	r1, #33	; 0x21
 800714e:	f8cd a000 	str.w	sl, [sp]
 8007152:	f7fe fb3d 	bl	80057d0 <_ZN8touchgfx8Drawable11setPositionEssss>
 8007156:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 800715a:	ee19 1a10 	vmov	r1, s18
 800715e:	4640      	mov	r0, r8
 8007160:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
        color = newColor;
 8007164:	f8c4 b1e8 	str.w	fp, [r4, #488]	; 0x1e8
        linespace = space;
 8007168:	f8a4 51ec 	strh.w	r5, [r4, #492]	; 0x1ec
        boundingArea = calculateBoundingArea();
 800716c:	4798      	blx	r3
 800716e:	f504 73fa 	add.w	r3, r4, #500	; 0x1f4
 8007172:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8007176:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    textAreaGas.setWildcard(textAreaGasBuffer);
 800717a:	f504 7310 	add.w	r3, r4, #576	; 0x240
 800717e:	f04f 0202 	mov.w	r2, #2
    textAreaGas.setTypedText(touchgfx::TypedText(T_LUFTQUALITAET_TEXT));
 8007182:	4639      	mov	r1, r7
 8007184:	ee19 0a10 	vmov	r0, s18
 8007188:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    textAreaGasBuffer[0] = 0;
 800718c:	f8a4 5240 	strh.w	r5, [r4, #576]	; 0x240
 8007190:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8007194:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    textAreaGas.setTypedText(touchgfx::TypedText(T_LUFTQUALITAET_TEXT));
 8007198:	f00c faa8 	bl	80136ec <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800719c:	4630      	mov	r0, r6
 800719e:	ee19 1a10 	vmov	r1, s18
 80071a2:	f008 fef3 	bl	800ff8c <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 80071a6:	4620      	mov	r0, r4
 80071a8:	b00d      	add	sp, #52	; 0x34
 80071aa:	ecbd 8b04 	vpop	{d8-d9}
 80071ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071b2:	bf00      	nop
 80071b4:	08029c78 	.word	0x08029c78
 80071b8:	0802b0f0 	.word	0x0802b0f0
 80071bc:	0802b1d0 	.word	0x0802b1d0
 80071c0:	08029c60 	.word	0x08029c60
 80071c4:	08006e6f 	.word	0x08006e6f
 80071c8:	fff0f0f0 	.word	0xfff0f0f0
 80071cc:	08028edc 	.word	0x08028edc

080071d0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 23, 24, 20, 0, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80071d0:	4770      	bx	lr
	...

080071d4 <_Z23getFont_verdana_20_4bppv>:
{
 80071d4:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 23, 24, 20, 0, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80071d6:	4d17      	ldr	r5, [pc, #92]	; (8007234 <_Z23getFont_verdana_20_4bppv+0x60>)
{
 80071d8:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 23, 24, 20, 0, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80071da:	782c      	ldrb	r4, [r5, #0]
 80071dc:	f3bf 8f5b 	dmb	ish
 80071e0:	f014 0401 	ands.w	r4, r4, #1
 80071e4:	d122      	bne.n	800722c <_Z23getFont_verdana_20_4bppv+0x58>
 80071e6:	4628      	mov	r0, r5
 80071e8:	f01e fce5 	bl	8025bb6 <__cxa_guard_acquire>
 80071ec:	b1f0      	cbz	r0, 800722c <_Z23getFont_verdana_20_4bppv+0x58>
 80071ee:	233f      	movs	r3, #63	; 0x3f
 80071f0:	2217      	movs	r2, #23
 80071f2:	4911      	ldr	r1, [pc, #68]	; (8007238 <_Z23getFont_verdana_20_4bppv+0x64>)
 80071f4:	9309      	str	r3, [sp, #36]	; 0x24
 80071f6:	4b11      	ldr	r3, [pc, #68]	; (800723c <_Z23getFont_verdana_20_4bppv+0x68>)
 80071f8:	4811      	ldr	r0, [pc, #68]	; (8007240 <_Z23getFont_verdana_20_4bppv+0x6c>)
 80071fa:	9308      	str	r3, [sp, #32]
 80071fc:	4b11      	ldr	r3, [pc, #68]	; (8007244 <_Z23getFont_verdana_20_4bppv+0x70>)
 80071fe:	940a      	str	r4, [sp, #40]	; 0x28
 8007200:	9307      	str	r3, [sp, #28]
 8007202:	2301      	movs	r3, #1
 8007204:	9401      	str	r4, [sp, #4]
 8007206:	9304      	str	r3, [sp, #16]
 8007208:	e9cd 4305 	strd	r4, r3, [sp, #20]
 800720c:	2304      	movs	r3, #4
 800720e:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8007212:	2314      	movs	r3, #20
 8007214:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8007218:	9300      	str	r3, [sp, #0]
 800721a:	2318      	movs	r3, #24
 800721c:	f7fe fd26 	bl	8005c6c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8007220:	4809      	ldr	r0, [pc, #36]	; (8007248 <_Z23getFont_verdana_20_4bppv+0x74>)
 8007222:	f01e fd13 	bl	8025c4c <atexit>
 8007226:	4628      	mov	r0, r5
 8007228:	f01e fcd1 	bl	8025bce <__cxa_guard_release>
    return verdana_20_4bpp;
}
 800722c:	4804      	ldr	r0, [pc, #16]	; (8007240 <_Z23getFont_verdana_20_4bppv+0x6c>)
 800722e:	b00f      	add	sp, #60	; 0x3c
 8007230:	bd30      	pop	{r4, r5, pc}
 8007232:	bf00      	nop
 8007234:	20012434 	.word	0x20012434
 8007238:	903097cc 	.word	0x903097cc
 800723c:	0802b73c 	.word	0x0802b73c
 8007240:	20012438 	.word	0x20012438
 8007244:	0802b820 	.word	0x0802b820
 8007248:	080071d1 	.word	0x080071d1

0800724c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_30_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_30_4bpp();

touchgfx::GeneratedFont& getFont_verdana_30_4bpp()
{
    static touchgfx::GeneratedFont verdana_30_4bpp(glyphs_verdana_30_4bpp, 15, 35, 30, 0, 0, 4, 1, 0, 0, unicodes_verdana_30_4bpp, kerning_verdana_30_4bpp, 63, 0, 0, 0);
 800724c:	4770      	bx	lr
	...

08007250 <_Z23getFont_verdana_30_4bppv>:
{
 8007250:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_30_4bpp(glyphs_verdana_30_4bpp, 15, 35, 30, 0, 0, 4, 1, 0, 0, unicodes_verdana_30_4bpp, kerning_verdana_30_4bpp, 63, 0, 0, 0);
 8007252:	4d17      	ldr	r5, [pc, #92]	; (80072b0 <_Z23getFont_verdana_30_4bppv+0x60>)
{
 8007254:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_30_4bpp(glyphs_verdana_30_4bpp, 15, 35, 30, 0, 0, 4, 1, 0, 0, unicodes_verdana_30_4bpp, kerning_verdana_30_4bpp, 63, 0, 0, 0);
 8007256:	782c      	ldrb	r4, [r5, #0]
 8007258:	f3bf 8f5b 	dmb	ish
 800725c:	f014 0401 	ands.w	r4, r4, #1
 8007260:	d122      	bne.n	80072a8 <_Z23getFont_verdana_30_4bppv+0x58>
 8007262:	4628      	mov	r0, r5
 8007264:	f01e fca7 	bl	8025bb6 <__cxa_guard_acquire>
 8007268:	b1f0      	cbz	r0, 80072a8 <_Z23getFont_verdana_30_4bppv+0x58>
 800726a:	233f      	movs	r3, #63	; 0x3f
 800726c:	2201      	movs	r2, #1
 800726e:	4911      	ldr	r1, [pc, #68]	; (80072b4 <_Z23getFont_verdana_30_4bppv+0x64>)
 8007270:	9309      	str	r3, [sp, #36]	; 0x24
 8007272:	4b11      	ldr	r3, [pc, #68]	; (80072b8 <_Z23getFont_verdana_30_4bppv+0x68>)
 8007274:	4811      	ldr	r0, [pc, #68]	; (80072bc <_Z23getFont_verdana_30_4bppv+0x6c>)
 8007276:	9308      	str	r3, [sp, #32]
 8007278:	4b11      	ldr	r3, [pc, #68]	; (80072c0 <_Z23getFont_verdana_30_4bppv+0x70>)
 800727a:	940a      	str	r4, [sp, #40]	; 0x28
 800727c:	9405      	str	r4, [sp, #20]
 800727e:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8007282:	2304      	movs	r3, #4
 8007284:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8007288:	231e      	movs	r3, #30
 800728a:	220f      	movs	r2, #15
 800728c:	9300      	str	r3, [sp, #0]
 800728e:	2323      	movs	r3, #35	; 0x23
 8007290:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8007294:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8007298:	f7fe fce8 	bl	8005c6c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800729c:	4809      	ldr	r0, [pc, #36]	; (80072c4 <_Z23getFont_verdana_30_4bppv+0x74>)
 800729e:	f01e fcd5 	bl	8025c4c <atexit>
 80072a2:	4628      	mov	r0, r5
 80072a4:	f01e fc93 	bl	8025bce <__cxa_guard_release>
    return verdana_30_4bpp;
}
 80072a8:	4804      	ldr	r0, [pc, #16]	; (80072bc <_Z23getFont_verdana_30_4bppv+0x6c>)
 80072aa:	b00f      	add	sp, #60	; 0x3c
 80072ac:	bd30      	pop	{r4, r5, pc}
 80072ae:	bf00      	nop
 80072b0:	20012464 	.word	0x20012464
 80072b4:	90309910 	.word	0x90309910
 80072b8:	0802b778 	.word	0x0802b778
 80072bc:	20012468 	.word	0x20012468
 80072c0:	0802b824 	.word	0x0802b824
 80072c4:	0800724d 	.word	0x0800724d

080072c8 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_60_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_60_4bpp();

touchgfx::GeneratedFont& getFont_verdana_60_4bpp()
{
    static touchgfx::GeneratedFont verdana_60_4bpp(glyphs_verdana_60_4bpp, 37, 72, 60, 0, 0, 4, 1, 0, 2, unicodes_verdana_60_4bpp, kerning_verdana_60_4bpp, 63, 0, 0, 0);
 80072c8:	4770      	bx	lr
	...

080072cc <_Z23getFont_verdana_60_4bppv>:
{
 80072cc:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_60_4bpp(glyphs_verdana_60_4bpp, 37, 72, 60, 0, 0, 4, 1, 0, 2, unicodes_verdana_60_4bpp, kerning_verdana_60_4bpp, 63, 0, 0, 0);
 80072ce:	4d17      	ldr	r5, [pc, #92]	; (800732c <_Z23getFont_verdana_60_4bppv+0x60>)
{
 80072d0:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_60_4bpp(glyphs_verdana_60_4bpp, 37, 72, 60, 0, 0, 4, 1, 0, 2, unicodes_verdana_60_4bpp, kerning_verdana_60_4bpp, 63, 0, 0, 0);
 80072d2:	782c      	ldrb	r4, [r5, #0]
 80072d4:	f3bf 8f5b 	dmb	ish
 80072d8:	f014 0401 	ands.w	r4, r4, #1
 80072dc:	d123      	bne.n	8007326 <_Z23getFont_verdana_60_4bppv+0x5a>
 80072de:	4628      	mov	r0, r5
 80072e0:	f01e fc69 	bl	8025bb6 <__cxa_guard_acquire>
 80072e4:	b1f8      	cbz	r0, 8007326 <_Z23getFont_verdana_60_4bppv+0x5a>
 80072e6:	233f      	movs	r3, #63	; 0x3f
 80072e8:	2201      	movs	r2, #1
 80072ea:	4911      	ldr	r1, [pc, #68]	; (8007330 <_Z23getFont_verdana_60_4bppv+0x64>)
 80072ec:	9309      	str	r3, [sp, #36]	; 0x24
 80072ee:	4b11      	ldr	r3, [pc, #68]	; (8007334 <_Z23getFont_verdana_60_4bppv+0x68>)
 80072f0:	4811      	ldr	r0, [pc, #68]	; (8007338 <_Z23getFont_verdana_60_4bppv+0x6c>)
 80072f2:	9308      	str	r3, [sp, #32]
 80072f4:	4b11      	ldr	r3, [pc, #68]	; (800733c <_Z23getFont_verdana_60_4bppv+0x70>)
 80072f6:	940a      	str	r4, [sp, #40]	; 0x28
 80072f8:	9307      	str	r3, [sp, #28]
 80072fa:	2302      	movs	r3, #2
 80072fc:	e9cd 4305 	strd	r4, r3, [sp, #20]
 8007300:	2304      	movs	r3, #4
 8007302:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8007306:	233c      	movs	r3, #60	; 0x3c
 8007308:	2225      	movs	r2, #37	; 0x25
 800730a:	9300      	str	r3, [sp, #0]
 800730c:	2348      	movs	r3, #72	; 0x48
 800730e:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8007312:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8007316:	f7fe fca9 	bl	8005c6c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800731a:	4809      	ldr	r0, [pc, #36]	; (8007340 <_Z23getFont_verdana_60_4bppv+0x74>)
 800731c:	f01e fc96 	bl	8025c4c <atexit>
 8007320:	4628      	mov	r0, r5
 8007322:	f01e fc54 	bl	8025bce <__cxa_guard_release>
    return verdana_60_4bpp;
}
 8007326:	4804      	ldr	r0, [pc, #16]	; (8007338 <_Z23getFont_verdana_60_4bppv+0x6c>)
 8007328:	b00f      	add	sp, #60	; 0x3c
 800732a:	bd30      	pop	{r4, r5, pc}
 800732c:	20012494 	.word	0x20012494
 8007330:	903099e4 	.word	0x903099e4
 8007334:	0802b780 	.word	0x0802b780
 8007338:	20012498 	.word	0x20012498
 800733c:	0802b828 	.word	0x0802b828
 8007340:	080072c9 	.word	0x080072c9

08007344 <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
 8007344:	2000      	movs	r0, #0
 8007346:	4770      	bx	lr

08007348 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
 8007348:	2000      	movs	r0, #0
 800734a:	4770      	bx	lr

0800734c <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800734c:	b40e      	push	{r1, r2, r3}
 800734e:	b503      	push	{r0, r1, lr}
 8007350:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8007352:	2100      	movs	r1, #0
{
 8007354:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 8007358:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800735a:	f00f fe7b 	bl	8017054 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 800735e:	b002      	add	sp, #8
 8007360:	f85d eb04 	ldr.w	lr, [sp], #4
 8007364:	b003      	add	sp, #12
 8007366:	4770      	bx	lr

08007368 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8007368:	b40c      	push	{r2, r3}
 800736a:	b507      	push	{r0, r1, r2, lr}
 800736c:	ab04      	add	r3, sp, #16
 800736e:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8007372:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8007374:	f00f fe6e 	bl	8017054 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8007378:	b003      	add	sp, #12
 800737a:	f85d eb04 	ldr.w	lr, [sp], #4
 800737e:	b002      	add	sp, #8
 8007380:	4770      	bx	lr
	...

08007384 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 8007384:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 8007386:	b510      	push	{r4, lr}
 8007388:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 800738a:	b373      	cbz	r3, 80073ea <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 800738c:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 800738e:	b92b      	cbnz	r3, 800739c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 8007390:	4b18      	ldr	r3, [pc, #96]	; (80073f4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 8007392:	21c5      	movs	r1, #197	; 0xc5
 8007394:	4a18      	ldr	r2, [pc, #96]	; (80073f8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8007396:	4819      	ldr	r0, [pc, #100]	; (80073fc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 8007398:	f01e fc3a 	bl	8025c10 <__assert_func>
            return buffer[pos];
 800739c:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 800739e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80073a2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80073a4:	b30b      	cbz	r3, 80073ea <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 80073a6:	f011 fa15 	bl	80187d4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 80073aa:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d803      	bhi.n	80073b8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 80073b0:	4b13      	ldr	r3, [pc, #76]	; (8007400 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 80073b2:	21cb      	movs	r1, #203	; 0xcb
 80073b4:	4a13      	ldr	r2, [pc, #76]	; (8007404 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 80073b6:	e7ee      	b.n	8007396 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 80073b8:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 80073ba:	f640 103f 	movw	r0, #2367	; 0x93f
 80073be:	1c53      	adds	r3, r2, #1
 80073c0:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 80073c2:	2b09      	cmp	r3, #9
 80073c4:	4619      	mov	r1, r3
 80073c6:	bf88      	it	hi
 80073c8:	f1a3 010a 	subhi.w	r1, r3, #10
 80073cc:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80073d0:	8c49      	ldrh	r1, [r1, #34]	; 0x22
 80073d2:	4281      	cmp	r1, r0
 80073d4:	d109      	bne.n	80073ea <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 80073d6:	2b0a      	cmp	r3, #10
 80073d8:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 80073dc:	bf28      	it	cs
 80073de:	2300      	movcs	r3, #0
            return buffer[pos];
 80073e0:	8c50      	ldrh	r0, [r2, #34]	; 0x22

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 80073e2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80073e6:	8458      	strh	r0, [r3, #34]	; 0x22
            buffer[pos] = newChar;
 80073e8:	8451      	strh	r1, [r2, #34]	; 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 80073ea:	4620      	mov	r0, r4
}
 80073ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 80073f0:	f011 b8f2 	b.w	80185d8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80073f4:	08029ca4 	.word	0x08029ca4
 80073f8:	08029cad 	.word	0x08029cad
 80073fc:	08029d58 	.word	0x08029d58
 8007400:	08029da2 	.word	0x08029da2
 8007404:	08029db0 	.word	0x08029db0

08007408 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 8007408:	f011 b8af 	b.w	801856a <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0800740c <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 800740c:	b510      	push	{r4, lr}
 800740e:	b086      	sub	sp, #24
 8007410:	ac02      	add	r4, sp, #8
 8007412:	e884 0006 	stmia.w	r4, {r1, r2}
 8007416:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 8007418:	ab0a      	add	r3, sp, #40	; 0x28
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 800741a:	4621      	mov	r1, r4
    va_start(pArg, format);
 800741c:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 800741e:	9301      	str	r3, [sp, #4]
 8007420:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007422:	9300      	str	r3, [sp, #0]
 8007424:	9b08      	ldr	r3, [sp, #32]
 8007426:	f00e fa8d 	bl	8015944 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 800742a:	b006      	add	sp, #24
 800742c:	bd10      	pop	{r4, pc}
	...

08007430 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8007430:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 8007432:	bb18      	cbnz	r0, 800747c <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 8007434:	4b12      	ldr	r3, [pc, #72]	; (8007480 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 8007436:	4813      	ldr	r0, [pc, #76]	; (8007484 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4913      	ldr	r1, [pc, #76]	; (8007488 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 800743c:	b1b3      	cbz	r3, 800746c <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800743e:	681a      	ldr	r2, [r3, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8007440:	689c      	ldr	r4, [r3, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8007442:	441a      	add	r2, r3
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8007444:	441c      	add	r4, r3
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8007446:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8007448:	685a      	ldr	r2, [r3, #4]
 800744a:	441a      	add	r2, r3
 800744c:	600a      	str	r2, [r1, #0]
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 800744e:	4b0f      	ldr	r3, [pc, #60]	; (800748c <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8007450:	2200      	movs	r2, #0
 8007452:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8007454:	f000 f838 	bl	80074c8 <_ZN17TypedTextDatabase8getFontsEv>
 8007458:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 800745a:	f000 f833 	bl	80074c4 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 800745e:	4b0c      	ldr	r3, [pc, #48]	; (8007490 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8007460:	601c      	str	r4, [r3, #0]
        fonts = f;
 8007462:	4b0c      	ldr	r3, [pc, #48]	; (8007494 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 8007464:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 8007466:	4b0c      	ldr	r3, [pc, #48]	; (8007498 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 8007468:	8018      	strh	r0, [r3, #0]
    }
}
 800746a:	e007      	b.n	800747c <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 800746c:	4b0b      	ldr	r3, [pc, #44]	; (800749c <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 800746e:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8007470:	4b0b      	ldr	r3, [pc, #44]	; (80074a0 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 8007472:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8007474:	4b0b      	ldr	r3, [pc, #44]	; (80074a4 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 8007476:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 8007478:	2c00      	cmp	r4, #0
 800747a:	d1e8      	bne.n	800744e <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 800747c:	bd38      	pop	{r3, r4, r5, pc}
 800747e:	bf00      	nop
 8007480:	200124c4 	.word	0x200124c4
 8007484:	200124c8 	.word	0x200124c8
 8007488:	200124cc 	.word	0x200124cc
 800748c:	200124d0 	.word	0x200124d0
 8007490:	20027c1c 	.word	0x20027c1c
 8007494:	20027c24 	.word	0x20027c24
 8007498:	20027c20 	.word	0x20027c20
 800749c:	90309c08 	.word	0x90309c08
 80074a0:	90309bec 	.word	0x90309bec
 80074a4:	90309cb8 	.word	0x90309cb8

080074a8 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 80074a8:	4b04      	ldr	r3, [pc, #16]	; (80074bc <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80074b0:	4b03      	ldr	r3, [pc, #12]	; (80074c0 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 80074b2:	681b      	ldr	r3, [r3, #0]
}
 80074b4:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80074b8:	4770      	bx	lr
 80074ba:	bf00      	nop
 80074bc:	200124cc 	.word	0x200124cc
 80074c0:	200124c8 	.word	0x200124c8

080074c4 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 80074c4:	2007      	movs	r0, #7
 80074c6:	4770      	bx	lr

080074c8 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 80074c8:	4800      	ldr	r0, [pc, #0]	; (80074cc <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 80074ca:	4770      	bx	lr
 80074cc:	200124d4 	.word	0x200124d4

080074d0 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_20_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 80074d0:	b510      	push	{r4, lr}
};
 80074d2:	4c05      	ldr	r4, [pc, #20]	; (80074e8 <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
    &(getFont_verdana_30_4bpp()),
 80074d4:	f7ff febc 	bl	8007250 <_Z23getFont_verdana_30_4bppv>
};
 80074d8:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_60_4bpp()),
 80074da:	f7ff fef7 	bl	80072cc <_Z23getFont_verdana_60_4bppv>
};
 80074de:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_20_4bpp())
 80074e0:	f7ff fe78 	bl	80071d4 <_Z23getFont_verdana_20_4bppv>
};
 80074e4:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
 80074e6:	bd10      	pop	{r4, pc}
 80074e8:	200124d4 	.word	0x200124d4

080074ec <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 80074ec:	4770      	bx	lr

080074ee <_ZN19FrontendApplicationD0Ev>:
 80074ee:	b510      	push	{r4, lr}
 80074f0:	4604      	mov	r4, r0
 80074f2:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 80074f6:	f01e fb5c 	bl	8025bb2 <_ZdlPvj>
 80074fa:	4620      	mov	r0, r4
 80074fc:	bd10      	pop	{r4, pc}

080074fe <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 80074fe:	b510      	push	{r4, lr}
 8007500:	4604      	mov	r4, r0
    {
        model.tick();
 8007502:	f8d0 0158 	ldr.w	r0, [r0, #344]	; 0x158
 8007506:	f000 f813 	bl	8007530 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 800750a:	4620      	mov	r0, r4
    }
 800750c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 8007510:	f00e bed8 	b.w	80162c4 <_ZN8touchgfx11Application15handleTickEventEv>

08007514 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8007514:	b510      	push	{r4, lr}
 8007516:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 8007518:	f7fe fb16 	bl	8005b48 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 800751c:	4b01      	ldr	r3, [pc, #4]	; (8007524 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 800751e:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 8007520:	6023      	str	r3, [r4, #0]
}
 8007522:	bd10      	pop	{r4, pc}
 8007524:	08029e8c 	.word	0x08029e8c

08007528 <_ZN5ModelC1Ev>:
extern __IO float humidity;
extern __IO float pressure;
extern __IO float gas_resistance;
extern __IO uint16_t meas_period;

Model::Model() : modelListener(0)
 8007528:	2200      	movs	r2, #0
 800752a:	6002      	str	r2, [r0, #0]
{

}
 800752c:	4770      	bx	lr
	...

08007530 <_ZN5Model4tickEv>:

void Model::tick()
{
 8007530:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	tick1 ++;
 8007534:	f8df a10c 	ldr.w	sl, [pc, #268]	; 8007644 <_ZN5Model4tickEv+0x114>
{
 8007538:	4604      	mov	r4, r0
 800753a:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8007648 <_ZN5Model4tickEv+0x118>
	tick1 ++;
 800753e:	f89a 3000 	ldrb.w	r3, [sl]
 8007542:	f8df 8108 	ldr.w	r8, [pc, #264]	; 800764c <_ZN5Model4tickEv+0x11c>
 8007546:	3301      	adds	r3, #1
 8007548:	4f38      	ldr	r7, [pc, #224]	; (800762c <_ZN5Model4tickEv+0xfc>)
 800754a:	4e39      	ldr	r6, [pc, #228]	; (8007630 <_ZN5Model4tickEv+0x100>)
 800754c:	b2db      	uxtb	r3, r3
		if (tick1 >= 90){
 800754e:	2b59      	cmp	r3, #89	; 0x59
	tick1 ++;
 8007550:	f88a 3000 	strb.w	r3, [sl]
		if (tick1 >= 90){
 8007554:	d92f      	bls.n	80075b6 <_ZN5Model4tickEv+0x86>
			rslt = bme680_get_sensor_data(&data, &gas_sensor);
 8007556:	4d37      	ldr	r5, [pc, #220]	; (8007634 <_ZN5Model4tickEv+0x104>)
 8007558:	4937      	ldr	r1, [pc, #220]	; (8007638 <_ZN5Model4tickEv+0x108>)
 800755a:	4628      	mov	r0, r5
 800755c:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 8007650 <_ZN5Model4tickEv+0x120>
 8007560:	f7fc f970 	bl	8003844 <bme680_get_sensor_data>

			temperature = data.temperature/100;
 8007564:	edd5 6a01 	vldr	s13, [r5, #4]
 8007568:	eddf 7a34 	vldr	s15, [pc, #208]	; 800763c <_ZN5Model4tickEv+0x10c>
			humidity = data.humidity/1000;
 800756c:	ed95 6a03 	vldr	s12, [r5, #12]
			temperature = data.temperature/100;
 8007570:	ee86 7aa7 	vdiv.f32	s14, s13, s15
			humidity = data.humidity/1000;
 8007574:	eddf 6a32 	vldr	s13, [pc, #200]	; 8007640 <_ZN5Model4tickEv+0x110>
			rslt = bme680_get_sensor_data(&data, &gas_sensor);
 8007578:	f88b 0000 	strb.w	r0, [fp]
			pressure = data.pressure / 100;

			if(data.status & BME680_GASM_VALID_MSK)
 800757c:	782b      	ldrb	r3, [r5, #0]
 800757e:	069b      	lsls	r3, r3, #26
			temperature = data.temperature/100;
 8007580:	ed89 7a00 	vstr	s14, [r9]
			humidity = data.humidity/1000;
 8007584:	ee86 7a26 	vdiv.f32	s14, s12, s13
			pressure = data.pressure / 100;
 8007588:	edd5 6a02 	vldr	s13, [r5, #8]
			humidity = data.humidity/1000;
 800758c:	ed88 7a00 	vstr	s14, [r8]
			pressure = data.pressure / 100;
 8007590:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007594:	ed87 7a00 	vstr	s14, [r7]
			if(data.status & BME680_GASM_VALID_MSK)
 8007598:	d501      	bpl.n	800759e <_ZN5Model4tickEv+0x6e>
				gas_resistance = data.gas_resistance;
 800759a:	692b      	ldr	r3, [r5, #16]
 800759c:	6033      	str	r3, [r6, #0]

			if (gas_sensor.power_mode == BME680_FORCED_MODE)
 800759e:	4826      	ldr	r0, [pc, #152]	; (8007638 <_ZN5Model4tickEv+0x108>)
 80075a0:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d103      	bne.n	80075b0 <_ZN5Model4tickEv+0x80>
			{
				rslt = bme680_set_sensor_mode(&gas_sensor);
 80075a8:	f7fb ff60 	bl	800346c <bme680_set_sensor_mode>
 80075ac:	f88b 0000 	strb.w	r0, [fp]
			}
			tick1 = 0;
 80075b0:	2300      	movs	r3, #0
 80075b2:	f88a 3000 	strb.w	r3, [sl]
		}

  modelListener->UpdateGraph1(uhADCxConvertedData * 3300 / 4096);
 80075b6:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8007654 <_ZN5Model4tickEv+0x124>
 80075ba:	f640 45e4 	movw	r5, #3300	; 0xce4
 80075be:	6820      	ldr	r0, [r4, #0]
 80075c0:	f8ba 1000 	ldrh.w	r1, [sl]
 80075c4:	6803      	ldr	r3, [r0, #0]
 80075c6:	b289      	uxth	r1, r1
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	4369      	muls	r1, r5
 80075cc:	0b09      	lsrs	r1, r1, #12
 80075ce:	4798      	blx	r3
  modelListener->UpdateBar(uhADCxConvertedData * 3300 / 4096);
 80075d0:	f8ba 1000 	ldrh.w	r1, [sl]
 80075d4:	6820      	ldr	r0, [r4, #0]
 80075d6:	b289      	uxth	r1, r1
 80075d8:	6803      	ldr	r3, [r0, #0]
 80075da:	4369      	muls	r1, r5
 80075dc:	68db      	ldr	r3, [r3, #12]
 80075de:	0b09      	lsrs	r1, r1, #12
 80075e0:	4798      	blx	r3
  modelListener->UpdateTextArea(uhADCxConvertedData * 3300 / 4096);
 80075e2:	f8ba 1000 	ldrh.w	r1, [sl]
 80075e6:	6820      	ldr	r0, [r4, #0]
 80075e8:	b289      	uxth	r1, r1
 80075ea:	6803      	ldr	r3, [r0, #0]
 80075ec:	4369      	muls	r1, r5
 80075ee:	691b      	ldr	r3, [r3, #16]
 80075f0:	0b09      	lsrs	r1, r1, #12
 80075f2:	4798      	blx	r3

  modelListener->UpdateTemp(temperature);
 80075f4:	6820      	ldr	r0, [r4, #0]
 80075f6:	ed99 0a00 	vldr	s0, [r9]
 80075fa:	6803      	ldr	r3, [r0, #0]
 80075fc:	695b      	ldr	r3, [r3, #20]
 80075fe:	4798      	blx	r3
  modelListener->UpdateHumi(humidity);
 8007600:	6820      	ldr	r0, [r4, #0]
 8007602:	ed98 0a00 	vldr	s0, [r8]
 8007606:	6803      	ldr	r3, [r0, #0]
 8007608:	699b      	ldr	r3, [r3, #24]
 800760a:	4798      	blx	r3
  modelListener->UpdatePres(pressure);
 800760c:	6820      	ldr	r0, [r4, #0]
 800760e:	ed97 0a00 	vldr	s0, [r7]
 8007612:	6803      	ldr	r3, [r0, #0]
 8007614:	69db      	ldr	r3, [r3, #28]
 8007616:	4798      	blx	r3
  modelListener->UpdateGas(gas_resistance);
 8007618:	6820      	ldr	r0, [r4, #0]
 800761a:	ed96 0a00 	vldr	s0, [r6]
 800761e:	6803      	ldr	r3, [r0, #0]
 8007620:	6a1b      	ldr	r3, [r3, #32]


}
 8007622:	b001      	add	sp, #4
 8007624:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  modelListener->UpdateGas(gas_resistance);
 8007628:	4718      	bx	r3
 800762a:	bf00      	nop
 800762c:	200123c4 	.word	0x200123c4
 8007630:	20011f50 	.word	0x20011f50
 8007634:	20011f38 	.word	0x20011f38
 8007638:	20011f54 	.word	0x20011f54
 800763c:	42c80000 	.word	0x42c80000
 8007640:	447a0000 	.word	0x447a0000
 8007644:	200124e0 	.word	0x200124e0
 8007648:	200123cc 	.word	0x200123cc
 800764c:	200123c0 	.word	0x200123c0
 8007650:	200123c8 	.word	0x200123c8
 8007654:	200123d0 	.word	0x200123d0

08007658 <_ZN13ModelListener10UpdateTempEf>:
    }
    virtual void UpdateGraph1(uint16_t value){}
    virtual void UpdateBar(uint16_t value){}
    virtual void UpdateTextArea(uint16_t value){}

    virtual void UpdateTemp(float temperature){}
 8007658:	4770      	bx	lr

0800765a <_ZN13ModelListener10UpdateHumiEf>:
    virtual void UpdateHumi(float humidity){}
 800765a:	4770      	bx	lr

0800765c <_ZN13ModelListener10UpdatePresEf>:
    virtual void UpdatePres(float pressure){}
 800765c:	4770      	bx	lr

0800765e <_ZN13ModelListener9UpdateGasEf>:
    virtual void UpdateGas(float gas_resistance){}
 800765e:	4770      	bx	lr

08007660 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 8007660:	4770      	bx	lr

08007662 <_ZThn4_N16Screen1PresenterD1Ev>:
 8007662:	3804      	subs	r0, #4
 8007664:	4770      	bx	lr

08007666 <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
 8007666:	4770      	bx	lr

08007668 <_ZN16Screen1PresenterD0Ev>:
 8007668:	b510      	push	{r4, lr}
 800766a:	4604      	mov	r4, r0
 800766c:	2110      	movs	r1, #16
 800766e:	f01e faa0 	bl	8025bb2 <_ZdlPvj>
 8007672:	4620      	mov	r0, r4
 8007674:	bd10      	pop	{r4, pc}

08007676 <_ZThn4_N16Screen1PresenterD0Ev>:
 8007676:	f1a0 0004 	sub.w	r0, r0, #4
 800767a:	e7f5      	b.n	8007668 <_ZN16Screen1PresenterD0Ev>

0800767c <_ZN16Screen1Presenter12UpdateGraph1Et>:
{

}
void Screen1Presenter::UpdateGraph1(uint16_t value)
{
	view.UpdateGraph1(value);
 800767c:	68c0      	ldr	r0, [r0, #12]
 800767e:	f000 b843 	b.w	8007708 <_ZN11Screen1View12UpdateGraph1Et>

08007682 <_ZThn4_N16Screen1Presenter12UpdateGraph1Et>:

    void UpdateGraph1(uint16_t value);
 8007682:	f1a0 0004 	sub.w	r0, r0, #4
 8007686:	f7ff bff9 	b.w	800767c <_ZN16Screen1Presenter12UpdateGraph1Et>

0800768a <_ZN16Screen1Presenter9UpdateBarEt>:
}

void Screen1Presenter::UpdateBar(uint16_t value)
{
	view.UpdateBar(value);
 800768a:	68c0      	ldr	r0, [r0, #12]
 800768c:	f000 b844 	b.w	8007718 <_ZN11Screen1View9UpdateBarEt>

08007690 <_ZThn4_N16Screen1Presenter9UpdateBarEt>:
    void UpdateBar(uint16_t value);
 8007690:	f1a0 0004 	sub.w	r0, r0, #4
 8007694:	f7ff bff9 	b.w	800768a <_ZN16Screen1Presenter9UpdateBarEt>

08007698 <_ZN16Screen1Presenter14UpdateTextAreaEt>:
}

void Screen1Presenter::UpdateTextArea(uint16_t value)
{
	view.UpdateTextArea(value);
 8007698:	68c0      	ldr	r0, [r0, #12]
 800769a:	f000 b841 	b.w	8007720 <_ZN11Screen1View14UpdateTextAreaEt>

0800769e <_ZThn4_N16Screen1Presenter14UpdateTextAreaEt>:
    void UpdateTextArea(uint16_t value);
 800769e:	f1a0 0004 	sub.w	r0, r0, #4
 80076a2:	f7ff bff9 	b.w	8007698 <_ZN16Screen1Presenter14UpdateTextAreaEt>
	...

080076a8 <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 80076a8:	2200      	movs	r2, #0
    : view(v)
 80076aa:	60c1      	str	r1, [r0, #12]
 80076ac:	6082      	str	r2, [r0, #8]
 80076ae:	4a04      	ldr	r2, [pc, #16]	; (80076c0 <_ZN16Screen1PresenterC1ER11Screen1View+0x18>)
Screen1Presenter::Screen1Presenter(Screen1View& v)
 80076b0:	b510      	push	{r4, lr}
    : view(v)
 80076b2:	f102 0408 	add.w	r4, r2, #8
 80076b6:	322c      	adds	r2, #44	; 0x2c
 80076b8:	6004      	str	r4, [r0, #0]
 80076ba:	6042      	str	r2, [r0, #4]
}
 80076bc:	bd10      	pop	{r4, pc}
 80076be:	bf00      	nop
 80076c0:	08029ed0 	.word	0x08029ed0

080076c4 <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 80076c4:	4770      	bx	lr
	...

080076c8 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 80076c8:	4b03      	ldr	r3, [pc, #12]	; (80076d8 <_ZN11Screen1ViewD1Ev+0x10>)
 80076ca:	b510      	push	{r4, lr}
 80076cc:	4604      	mov	r4, r0
 80076ce:	6003      	str	r3, [r0, #0]
 80076d0:	f7fe ff96 	bl	8006600 <_ZN15Screen1ViewBaseD1Ev>
 80076d4:	4620      	mov	r0, r4
 80076d6:	bd10      	pop	{r4, pc}
 80076d8:	08029f2c 	.word	0x08029f2c

080076dc <_ZN11Screen1ViewD0Ev>:
 80076dc:	b510      	push	{r4, lr}
 80076de:	4604      	mov	r4, r0
 80076e0:	f7ff fff2 	bl	80076c8 <_ZN11Screen1ViewD1Ev>
 80076e4:	f243 51f4 	movw	r1, #13812	; 0x35f4
 80076e8:	4620      	mov	r0, r4
 80076ea:	f01e fa62 	bl	8025bb2 <_ZdlPvj>
 80076ee:	4620      	mov	r0, r4
 80076f0:	bd10      	pop	{r4, pc}
	...

080076f4 <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 80076f4:	b510      	push	{r4, lr}
 80076f6:	4604      	mov	r4, r0
 80076f8:	f7ff f8a8 	bl	800684c <_ZN15Screen1ViewBaseC1Ev>
 80076fc:	4b01      	ldr	r3, [pc, #4]	; (8007704 <_ZN11Screen1ViewC1Ev+0x10>)
}
 80076fe:	4620      	mov	r0, r4
Screen1View::Screen1View()
 8007700:	6023      	str	r3, [r4, #0]
}
 8007702:	bd10      	pop	{r4, pc}
 8007704:	08029f2c 	.word	0x08029f2c

08007708 <_ZN11Screen1View12UpdateGraph1Et>:
 8007708:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
        return addDataPointScaled(int2scaledY(y));
 800770c:	3098      	adds	r0, #152	; 0x98
 800770e:	4359      	muls	r1, r3
 8007710:	f00b b811 	b.w	8012736 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>

08007714 <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
 8007714:	f7fe bee5 	b.w	80064e2 <_ZN15Screen1ViewBase11setupScreenEv>

08007718 <_ZN11Screen1View9UpdateBarEt>:
{
	dynamicGraph1.addDataPoint(value);
}
void Screen1View::UpdateBar(uint16_t value)
{
	lineProgress1.setValue(value);
 8007718:	f200 5044 	addw	r0, r0, #1348	; 0x544
 800771c:	f008 b9eb 	b.w	800faf6 <_ZN8touchgfx12LineProgress8setValueEi>

08007720 <_ZN11Screen1View14UpdateTextAreaEt>:
}
void Screen1View::UpdateTextArea(uint16_t value)
{
	Unicode::snprintfFloat(textArea_ValueBuffer,TEXTAREA_VALUE_SIZE,"%.f",value);
 8007720:	ee07 1a90 	vmov	s15, r1
     *
     * @see snprintf, snprintfFloats
     */
    static UnicodeChar* snprintfFloat(UnicodeChar* dst, uint16_t dstSize, const char* format, const float value)
    {
        return snprintfFloats(dst, dstSize, format, &value);
 8007724:	4a09      	ldr	r2, [pc, #36]	; (800774c <_ZN11Screen1View14UpdateTextAreaEt+0x2c>)
 8007726:	eef8 7a67 	vcvt.f32.u32	s15, s15
{
 800772a:	b513      	push	{r0, r1, r4, lr}
 800772c:	4604      	mov	r4, r0
 800772e:	ab01      	add	r3, sp, #4
 8007730:	210a      	movs	r1, #10
 8007732:	f500 60de 	add.w	r0, r0, #1776	; 0x6f0
	Unicode::snprintfFloat(textArea_ValueBuffer,TEXTAREA_VALUE_SIZE,"%.f",value);
 8007736:	edcd 7a01 	vstr	s15, [sp, #4]
 800773a:	f011 ffb5 	bl	80196a8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>
	textArea_Value.invalidate();
 800773e:	f204 60a4 	addw	r0, r4, #1700	; 0x6a4
}
 8007742:	b002      	add	sp, #8
 8007744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	textArea_Value.invalidate();
 8007748:	f00f bdaf 	b.w	80172aa <_ZNK8touchgfx8Drawable10invalidateEv>
 800774c:	08029f20 	.word	0x08029f20

08007750 <_ZN13ModelListener12UpdateGraph1Et>:
    virtual void UpdateGraph1(uint16_t value){}
 8007750:	4770      	bx	lr

08007752 <_ZN13ModelListener9UpdateBarEt>:
    virtual void UpdateBar(uint16_t value){}
 8007752:	4770      	bx	lr

08007754 <_ZN13ModelListener14UpdateTextAreaEt>:
    virtual void UpdateTextArea(uint16_t value){}
 8007754:	4770      	bx	lr

08007756 <_ZN16Screen2PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen2Presenter() {};
 8007756:	4770      	bx	lr

08007758 <_ZThn4_N16Screen2PresenterD1Ev>:
 8007758:	3804      	subs	r0, #4
 800775a:	4770      	bx	lr

0800775c <_ZN16Screen2Presenter10deactivateEv>:
}

void Screen2Presenter::activate()
{

}
 800775c:	4770      	bx	lr

0800775e <_ZN16Screen2PresenterD0Ev>:
 800775e:	b510      	push	{r4, lr}
 8007760:	4604      	mov	r4, r0
 8007762:	2110      	movs	r1, #16
 8007764:	f01e fa25 	bl	8025bb2 <_ZdlPvj>
 8007768:	4620      	mov	r0, r4
 800776a:	bd10      	pop	{r4, pc}

0800776c <_ZThn4_N16Screen2PresenterD0Ev>:
 800776c:	f1a0 0004 	sub.w	r0, r0, #4
 8007770:	e7f5      	b.n	800775e <_ZN16Screen2PresenterD0Ev>

08007772 <_ZN16Screen2Presenter10UpdateTempEf>:
{

}
void Screen2Presenter::UpdateTemp(float temperature)
{
	view.UpdateTemp(temperature);
 8007772:	68c0      	ldr	r0, [r0, #12]
 8007774:	f000 b84c 	b.w	8007810 <_ZN11Screen2View10UpdateTempEf>

08007778 <_ZThn4_N16Screen2Presenter10UpdateTempEf>:

    void UpdateTemp(float temperature);
 8007778:	f1a0 0004 	sub.w	r0, r0, #4
 800777c:	f7ff bff9 	b.w	8007772 <_ZN16Screen2Presenter10UpdateTempEf>

08007780 <_ZN16Screen2Presenter10UpdateHumiEf>:
}

void Screen2Presenter::UpdateHumi(float humidity)
{
	view.UpdateHumi(humidity);
 8007780:	68c0      	ldr	r0, [r0, #12]
 8007782:	f000 b859 	b.w	8007838 <_ZN11Screen2View10UpdateHumiEf>

08007786 <_ZThn4_N16Screen2Presenter10UpdateHumiEf>:
    void UpdateHumi(float humidity);
 8007786:	f1a0 0004 	sub.w	r0, r0, #4
 800778a:	f7ff bff9 	b.w	8007780 <_ZN16Screen2Presenter10UpdateHumiEf>

0800778e <_ZN16Screen2Presenter10UpdatePresEf>:
}
void Screen2Presenter::UpdatePres(float pressure)
{
	view.UpdatePres(pressure);
 800778e:	68c0      	ldr	r0, [r0, #12]
 8007790:	f000 b866 	b.w	8007860 <_ZN11Screen2View10UpdatePresEf>

08007794 <_ZThn4_N16Screen2Presenter10UpdatePresEf>:
    void UpdatePres(float pressure);
 8007794:	f1a0 0004 	sub.w	r0, r0, #4
 8007798:	f7ff bff9 	b.w	800778e <_ZN16Screen2Presenter10UpdatePresEf>

0800779c <_ZN16Screen2Presenter9UpdateGasEf>:
}
void Screen2Presenter::UpdateGas(float gas_resistance)
{
	view.UpdateGas(gas_resistance);
 800779c:	68c0      	ldr	r0, [r0, #12]
 800779e:	f000 b873 	b.w	8007888 <_ZN11Screen2View9UpdateGasEf>

080077a2 <_ZThn4_N16Screen2Presenter9UpdateGasEf>:
    void UpdateGas(float gas_resistance);
 80077a2:	f1a0 0004 	sub.w	r0, r0, #4
 80077a6:	f7ff bff9 	b.w	800779c <_ZN16Screen2Presenter9UpdateGasEf>
	...

080077ac <_ZN16Screen2PresenterC1ER11Screen2View>:
    ModelListener() : model(0) {}
 80077ac:	2200      	movs	r2, #0
    : view(v)
 80077ae:	60c1      	str	r1, [r0, #12]
 80077b0:	6082      	str	r2, [r0, #8]
 80077b2:	4a04      	ldr	r2, [pc, #16]	; (80077c4 <_ZN16Screen2PresenterC1ER11Screen2View+0x18>)
Screen2Presenter::Screen2Presenter(Screen2View& v)
 80077b4:	b510      	push	{r4, lr}
    : view(v)
 80077b6:	f102 0408 	add.w	r4, r2, #8
 80077ba:	3230      	adds	r2, #48	; 0x30
 80077bc:	6004      	str	r4, [r0, #0]
 80077be:	6042      	str	r2, [r0, #4]
}
 80077c0:	bd10      	pop	{r4, pc}
 80077c2:	bf00      	nop
 80077c4:	08029f58 	.word	0x08029f58

080077c8 <_ZN11Screen2View14tearDownScreenEv>:
}

void Screen2View::tearDownScreen()
{
    Screen2ViewBase::tearDownScreen();
}
 80077c8:	4770      	bx	lr
	...

080077cc <_ZN11Screen2ViewD1Ev>:

class Screen2View : public Screen2ViewBase
{
public:
    Screen2View();
    virtual ~Screen2View() {}
 80077cc:	4b03      	ldr	r3, [pc, #12]	; (80077dc <_ZN11Screen2ViewD1Ev+0x10>)
 80077ce:	b510      	push	{r4, lr}
 80077d0:	4604      	mov	r4, r0
 80077d2:	6003      	str	r3, [r0, #0]
 80077d4:	f7ff fb1e 	bl	8006e14 <_ZN15Screen2ViewBaseD1Ev>
 80077d8:	4620      	mov	r0, r4
 80077da:	bd10      	pop	{r4, pc}
 80077dc:	08029fbc 	.word	0x08029fbc

080077e0 <_ZN11Screen2ViewD0Ev>:
 80077e0:	b510      	push	{r4, lr}
 80077e2:	4604      	mov	r4, r0
 80077e4:	f7ff fff2 	bl	80077cc <_ZN11Screen2ViewD1Ev>
 80077e8:	f44f 7119 	mov.w	r1, #612	; 0x264
 80077ec:	4620      	mov	r0, r4
 80077ee:	f01e f9e0 	bl	8025bb2 <_ZdlPvj>
 80077f2:	4620      	mov	r0, r4
 80077f4:	bd10      	pop	{r4, pc}
	...

080077f8 <_ZN11Screen2ViewC1Ev>:
Screen2View::Screen2View()
 80077f8:	b510      	push	{r4, lr}
 80077fa:	4604      	mov	r4, r0
 80077fc:	f7ff fb64 	bl	8006ec8 <_ZN15Screen2ViewBaseC1Ev>
 8007800:	4b01      	ldr	r3, [pc, #4]	; (8007808 <_ZN11Screen2ViewC1Ev+0x10>)
}
 8007802:	4620      	mov	r0, r4
Screen2View::Screen2View()
 8007804:	6023      	str	r3, [r4, #0]
}
 8007806:	bd10      	pop	{r4, pc}
 8007808:	08029fbc 	.word	0x08029fbc

0800780c <_ZN11Screen2View11setupScreenEv>:
    Screen2ViewBase::setupScreen();
 800780c:	f7ff bb03 	b.w	8006e16 <_ZN15Screen2ViewBase11setupScreenEv>

08007810 <_ZN11Screen2View10UpdateTempEf>:
void Screen2View::UpdateTemp(float temperature)
{
 8007810:	b513      	push	{r0, r1, r4, lr}
 8007812:	4604      	mov	r4, r0
 8007814:	ab01      	add	r3, sp, #4
 8007816:	4a07      	ldr	r2, [pc, #28]	; (8007834 <_ZN11Screen2View10UpdateTempEf+0x24>)
 8007818:	210a      	movs	r1, #10
 800781a:	f500 7001 	add.w	r0, r0, #516	; 0x204
 800781e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8007822:	f011 ff41 	bl	80196a8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>
	Unicode::snprintfFloat(textAreaTempBuffer,TEXTAREATEMP_SIZE,"%.2f",temperature);
	textAreaTemp.invalidate();
 8007826:	f104 00d4 	add.w	r0, r4, #212	; 0xd4
}
 800782a:	b002      	add	sp, #8
 800782c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	textAreaTemp.invalidate();
 8007830:	f00f bd3b 	b.w	80172aa <_ZNK8touchgfx8Drawable10invalidateEv>
 8007834:	08029fac 	.word	0x08029fac

08007838 <_ZN11Screen2View10UpdateHumiEf>:

void Screen2View::UpdateHumi(float humidity)
{
 8007838:	b513      	push	{r0, r1, r4, lr}
 800783a:	4604      	mov	r4, r0
 800783c:	ab01      	add	r3, sp, #4
 800783e:	4a07      	ldr	r2, [pc, #28]	; (800785c <_ZN11Screen2View10UpdateHumiEf+0x24>)
 8007840:	210a      	movs	r1, #10
 8007842:	f500 7006 	add.w	r0, r0, #536	; 0x218
 8007846:	ed8d 0a01 	vstr	s0, [sp, #4]
 800784a:	f011 ff2d 	bl	80196a8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>
	Unicode::snprintfFloat(textAreaHumiBuffer,TEXTAREAHUMI_SIZE,"%.2f",humidity);
	textAreaHumi.invalidate();
 800784e:	f504 7090 	add.w	r0, r4, #288	; 0x120
}
 8007852:	b002      	add	sp, #8
 8007854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	textAreaHumi.invalidate();
 8007858:	f00f bd27 	b.w	80172aa <_ZNK8touchgfx8Drawable10invalidateEv>
 800785c:	08029fac 	.word	0x08029fac

08007860 <_ZN11Screen2View10UpdatePresEf>:
void Screen2View::UpdatePres(float pressure)
{
 8007860:	b513      	push	{r0, r1, r4, lr}
 8007862:	4604      	mov	r4, r0
 8007864:	ab01      	add	r3, sp, #4
 8007866:	4a07      	ldr	r2, [pc, #28]	; (8007884 <_ZN11Screen2View10UpdatePresEf+0x24>)
 8007868:	210a      	movs	r1, #10
 800786a:	f500 700b 	add.w	r0, r0, #556	; 0x22c
 800786e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8007872:	f011 ff19 	bl	80196a8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>
	Unicode::snprintfFloat(textAreaPresBuffer,TEXTAREAPRES_SIZE,"%.2f",pressure);
	textAreaPres.invalidate();
 8007876:	f504 70b6 	add.w	r0, r4, #364	; 0x16c
}
 800787a:	b002      	add	sp, #8
 800787c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	textAreaPres.invalidate();
 8007880:	f00f bd13 	b.w	80172aa <_ZNK8touchgfx8Drawable10invalidateEv>
 8007884:	08029fac 	.word	0x08029fac

08007888 <_ZN11Screen2View9UpdateGasEf>:
void Screen2View::UpdateGas(float gas_resistance)
{
 8007888:	b513      	push	{r0, r1, r4, lr}
 800788a:	4604      	mov	r4, r0
 800788c:	ab01      	add	r3, sp, #4
 800788e:	4a07      	ldr	r2, [pc, #28]	; (80078ac <_ZN11Screen2View9UpdateGasEf+0x24>)
 8007890:	210a      	movs	r1, #10
 8007892:	f500 7010 	add.w	r0, r0, #576	; 0x240
 8007896:	ed8d 0a01 	vstr	s0, [sp, #4]
 800789a:	f011 ff05 	bl	80196a8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>
	Unicode::snprintfFloat(textAreaGasBuffer,TEXTAREAGAS_SIZE,"%.f",gas_resistance);
	textAreaGas.invalidate();
 800789e:	f504 70dc 	add.w	r0, r4, #440	; 0x1b8
}
 80078a2:	b002      	add	sp, #8
 80078a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	textAreaGas.invalidate();
 80078a8:	f00f bcff 	b.w	80172aa <_ZNK8touchgfx8Drawable10invalidateEv>
 80078ac:	08029f20 	.word	0x08029f20

080078b0 <ft6x06_Reset>:
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
  /* Do nothing */
  /* No software reset sequence available in FT6206 IC */
}
 80078b0:	4770      	bx	lr

080078b2 <ft6x06_TS_ITStatus>:
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT6206 */
  return 0;
}
 80078b2:	2000      	movs	r0, #0
 80078b4:	4770      	bx	lr

080078b6 <ft6x06_ReadID>:
{
 80078b6:	b510      	push	{r4, lr}
 80078b8:	4604      	mov	r4, r0
  TS_IO_Init();
 80078ba:	f7f8 ffd8 	bl	800086e <TS_IO_Init>
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 80078be:	21a8      	movs	r1, #168	; 0xa8
 80078c0:	b2e0      	uxtb	r0, r4
 80078c2:	f7f8 fff1 	bl	80008a8 <TS_IO_Read>
}
 80078c6:	b280      	uxth	r0, r0
 80078c8:	bd10      	pop	{r4, pc}
	...

080078cc <ft6x06_TS_DetectTouch>:
{
 80078cc:	b513      	push	{r0, r1, r4, lr}
  volatile uint8_t nbTouch = 0;
 80078ce:	2400      	movs	r4, #0
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 80078d0:	2102      	movs	r1, #2
 80078d2:	b2c0      	uxtb	r0, r0
  volatile uint8_t nbTouch = 0;
 80078d4:	f88d 4007 	strb.w	r4, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 80078d8:	f7f8 ffe6 	bl	80008a8 <TS_IO_Read>
 80078dc:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT6206_TD_STAT_MASK;
 80078e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80078e4:	f003 030f 	and.w	r3, r3, #15
 80078e8:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 80078ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80078f0:	2b02      	cmp	r3, #2
 80078f2:	d901      	bls.n	80078f8 <ft6x06_TS_DetectTouch+0x2c>
    nbTouch = 0;
 80078f4:	f88d 4007 	strb.w	r4, [sp, #7]
  ft6x06_handle.currActiveTouchNb = nbTouch;
 80078f8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80078fc:	4b03      	ldr	r3, [pc, #12]	; (800790c <ft6x06_TS_DetectTouch+0x40>)
  return(nbTouch);
 80078fe:	f89d 0007 	ldrb.w	r0, [sp, #7]
  ft6x06_handle.currActiveTouchNb = nbTouch;
 8007902:	705a      	strb	r2, [r3, #1]
  ft6x06_handle.currActiveTouchIdx = 0;
 8007904:	2200      	movs	r2, #0
 8007906:	709a      	strb	r2, [r3, #2]
}
 8007908:	b002      	add	sp, #8
 800790a:	bd10      	pop	{r4, pc}
 800790c:	200124e3 	.word	0x200124e3

08007910 <ft6x06_TS_GetXY>:
{
 8007910:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 8007912:	4c15      	ldr	r4, [pc, #84]	; (8007968 <ft6x06_TS_GetXY+0x58>)
{
 8007914:	4615      	mov	r5, r2
 8007916:	460e      	mov	r6, r1
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 8007918:	78a3      	ldrb	r3, [r4, #2]
 800791a:	7862      	ldrb	r2, [r4, #1]
 800791c:	429a      	cmp	r2, r3
 800791e:	d91f      	bls.n	8007960 <ft6x06_TS_GetXY+0x50>
    switch(ft6x06_handle.currActiveTouchIdx)
 8007920:	b303      	cbz	r3, 8007964 <ft6x06_TS_GetXY+0x54>
      regAddress = FT6206_P2_XH_REG; 
 8007922:	2b01      	cmp	r3, #1
 8007924:	bf14      	ite	ne
 8007926:	2100      	movne	r1, #0
 8007928:	2109      	moveq	r1, #9
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 800792a:	2304      	movs	r3, #4
 800792c:	b2c0      	uxtb	r0, r0
 800792e:	eb0d 0203 	add.w	r2, sp, r3
 8007932:	f7f8 ffd7 	bl	80008e4 <TS_IO_ReadMultiple>
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 8007936:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800793a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800793e:	021b      	lsls	r3, r3, #8
 8007940:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007944:	4313      	orrs	r3, r2
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 8007946:	f89d 2007 	ldrb.w	r2, [sp, #7]
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 800794a:	8033      	strh	r3, [r6, #0]
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 800794c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007950:	021b      	lsls	r3, r3, #8
 8007952:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007956:	4313      	orrs	r3, r2
 8007958:	802b      	strh	r3, [r5, #0]
    ft6x06_handle.currActiveTouchIdx++;
 800795a:	78a3      	ldrb	r3, [r4, #2]
 800795c:	3301      	adds	r3, #1
 800795e:	70a3      	strb	r3, [r4, #2]
}
 8007960:	b002      	add	sp, #8
 8007962:	bd70      	pop	{r4, r5, r6, pc}
    switch(ft6x06_handle.currActiveTouchIdx)
 8007964:	2103      	movs	r1, #3
 8007966:	e7e0      	b.n	800792a <ft6x06_TS_GetXY+0x1a>
 8007968:	200124e3 	.word	0x200124e3

0800796c <ft6x06_TS_EnableIT>:
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 800796c:	2201      	movs	r2, #1
 800796e:	21a4      	movs	r1, #164	; 0xa4
 8007970:	b2c0      	uxtb	r0, r0
 8007972:	f7f8 bf7d 	b.w	8000870 <TS_IO_Write>

08007976 <ft6x06_TS_DisableIT>:
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8007976:	2200      	movs	r2, #0
 8007978:	21a4      	movs	r1, #164	; 0xa4
 800797a:	b2c0      	uxtb	r0, r0
 800797c:	f7f8 bf78 	b.w	8000870 <TS_IO_Write>

08007980 <ft6x06_TS_Start>:
  ft6x06_TS_DisableIT(DeviceAddr);
 8007980:	f7ff bff9 	b.w	8007976 <ft6x06_TS_DisableIT>

08007984 <ft6x06_TS_ClearIT>:
 8007984:	4770      	bx	lr
	...

08007988 <ft6x06_Init>:
  uint8_t idx = 0;
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
  {
    if(ft6x06[idx] == DeviceAddr)
 8007988:	4b09      	ldr	r3, [pc, #36]	; (80079b0 <ft6x06_Init+0x28>)
{  
 800798a:	b410      	push	{r4}
    if(ft6x06[idx] == DeviceAddr)
 800798c:	781a      	ldrb	r2, [r3, #0]
 800798e:	4290      	cmp	r0, r2
 8007990:	d00a      	beq.n	80079a8 <ft6x06_Init+0x20>
 8007992:	7859      	ldrb	r1, [r3, #1]
 8007994:	4288      	cmp	r0, r1
 8007996:	d007      	beq.n	80079a8 <ft6x06_Init+0x20>
 8007998:	b10a      	cbz	r2, 800799e <ft6x06_Init+0x16>
 800799a:	b929      	cbnz	r1, 80079a8 <ft6x06_Init+0x20>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 800799c:	2201      	movs	r2, #1
      ft6x06[empty] = DeviceAddr;
 800799e:	5498      	strb	r0, [r3, r2]
}
 80079a0:	f85d 4b04 	ldr.w	r4, [sp], #4
      TS_IO_Init(); 
 80079a4:	f7f8 bf63 	b.w	800086e <TS_IO_Init>
}
 80079a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079ac:	4770      	bx	lr
 80079ae:	bf00      	nop
 80079b0:	200124e1 	.word	0x200124e1

080079b4 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 80079b4:	b538      	push	{r3, r4, r5, lr}
 80079b6:	4604      	mov	r4, r0
 80079b8:	460d      	mov	r5, r1
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80079ba:	2000      	movs	r0, #0
 80079bc:	49c9      	ldr	r1, [pc, #804]	; (8007ce4 <OTM8009A_Init+0x330>)
 80079be:	f7f9 fadb 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 80079c2:	49c9      	ldr	r1, [pc, #804]	; (8007ce8 <OTM8009A_Init+0x334>)
 80079c4:	2003      	movs	r0, #3
 80079c6:	f7f9 fad7 	bl	8000f78 <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 80079ca:	49c8      	ldr	r1, [pc, #800]	; (8007cec <OTM8009A_Init+0x338>)
 80079cc:	2000      	movs	r0, #0
 80079ce:	f7f9 fad3 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 80079d2:	49c7      	ldr	r1, [pc, #796]	; (8007cf0 <OTM8009A_Init+0x33c>)
 80079d4:	2002      	movs	r0, #2
 80079d6:	f7f9 facf 	bl	8000f78 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80079da:	49c4      	ldr	r1, [pc, #784]	; (8007cec <OTM8009A_Init+0x338>)
 80079dc:	2000      	movs	r0, #0
 80079de:	f7f9 facb 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 80079e2:	49c4      	ldr	r1, [pc, #784]	; (8007cf4 <OTM8009A_Init+0x340>)
 80079e4:	2000      	movs	r0, #0
 80079e6:	f7f9 fac7 	bl	8000f78 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 80079ea:	200a      	movs	r0, #10
 80079ec:	f7f9 fac2 	bl	8000f74 <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 80079f0:	49c1      	ldr	r1, [pc, #772]	; (8007cf8 <OTM8009A_Init+0x344>)
 80079f2:	2000      	movs	r0, #0
 80079f4:	f7f9 fac0 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 80079f8:	49c0      	ldr	r1, [pc, #768]	; (8007cfc <OTM8009A_Init+0x348>)
 80079fa:	2000      	movs	r0, #0
 80079fc:	f7f9 fabc 	bl	8000f78 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 8007a00:	200a      	movs	r0, #10
 8007a02:	f7f9 fab7 	bl	8000f74 <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 8007a06:	49be      	ldr	r1, [pc, #760]	; (8007d00 <OTM8009A_Init+0x34c>)
 8007a08:	2000      	movs	r0, #0
 8007a0a:	f7f9 fab5 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 8007a0e:	49bd      	ldr	r1, [pc, #756]	; (8007d04 <OTM8009A_Init+0x350>)
 8007a10:	2000      	movs	r0, #0
 8007a12:	f7f9 fab1 	bl	8000f78 <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 8007a16:	49bc      	ldr	r1, [pc, #752]	; (8007d08 <OTM8009A_Init+0x354>)
 8007a18:	2000      	movs	r0, #0
 8007a1a:	f7f9 faad 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8007a1e:	49bb      	ldr	r1, [pc, #748]	; (8007d0c <OTM8009A_Init+0x358>)
 8007a20:	2000      	movs	r0, #0
 8007a22:	f7f9 faa9 	bl	8000f78 <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 8007a26:	49ba      	ldr	r1, [pc, #744]	; (8007d10 <OTM8009A_Init+0x35c>)
 8007a28:	2000      	movs	r0, #0
 8007a2a:	f7f9 faa5 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 8007a2e:	49b9      	ldr	r1, [pc, #740]	; (8007d14 <OTM8009A_Init+0x360>)
 8007a30:	2000      	movs	r0, #0
 8007a32:	f7f9 faa1 	bl	8000f78 <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8007a36:	49ab      	ldr	r1, [pc, #684]	; (8007ce4 <OTM8009A_Init+0x330>)
 8007a38:	2000      	movs	r0, #0
 8007a3a:	f7f9 fa9d 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 8007a3e:	49b6      	ldr	r1, [pc, #728]	; (8007d18 <OTM8009A_Init+0x364>)
 8007a40:	2000      	movs	r0, #0
 8007a42:	f7f9 fa99 	bl	8000f78 <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8007a46:	49b5      	ldr	r1, [pc, #724]	; (8007d1c <OTM8009A_Init+0x368>)
 8007a48:	2000      	movs	r0, #0
 8007a4a:	f7f9 fa95 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 8007a4e:	49b4      	ldr	r1, [pc, #720]	; (8007d20 <OTM8009A_Init+0x36c>)
 8007a50:	2000      	movs	r0, #0
 8007a52:	f7f9 fa91 	bl	8000f78 <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8007a56:	49b3      	ldr	r1, [pc, #716]	; (8007d24 <OTM8009A_Init+0x370>)
 8007a58:	2000      	movs	r0, #0
 8007a5a:	f7f9 fa8d 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 8007a5e:	49b2      	ldr	r1, [pc, #712]	; (8007d28 <OTM8009A_Init+0x374>)
 8007a60:	2000      	movs	r0, #0
 8007a62:	f7f9 fa89 	bl	8000f78 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 8007a66:	49b1      	ldr	r1, [pc, #708]	; (8007d2c <OTM8009A_Init+0x378>)
 8007a68:	2000      	movs	r0, #0
 8007a6a:	f7f9 fa85 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 8007a6e:	49b0      	ldr	r1, [pc, #704]	; (8007d30 <OTM8009A_Init+0x37c>)
 8007a70:	2000      	movs	r0, #0
 8007a72:	f7f9 fa81 	bl	8000f78 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 8007a76:	49af      	ldr	r1, [pc, #700]	; (8007d34 <OTM8009A_Init+0x380>)
 8007a78:	2000      	movs	r0, #0
 8007a7a:	f7f9 fa7d 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8007a7e:	49a3      	ldr	r1, [pc, #652]	; (8007d0c <OTM8009A_Init+0x358>)
 8007a80:	2000      	movs	r0, #0
 8007a82:	f7f9 fa79 	bl	8000f78 <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8007a86:	4997      	ldr	r1, [pc, #604]	; (8007ce4 <OTM8009A_Init+0x330>)
 8007a88:	2000      	movs	r0, #0
 8007a8a:	f7f9 fa75 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 8007a8e:	49aa      	ldr	r1, [pc, #680]	; (8007d38 <OTM8009A_Init+0x384>)
 8007a90:	2002      	movs	r0, #2
 8007a92:	f7f9 fa71 	bl	8000f78 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 8007a96:	49a9      	ldr	r1, [pc, #676]	; (8007d3c <OTM8009A_Init+0x388>)
 8007a98:	2000      	movs	r0, #0
 8007a9a:	f7f9 fa6d 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 8007a9e:	49a8      	ldr	r1, [pc, #672]	; (8007d40 <OTM8009A_Init+0x38c>)
 8007aa0:	2000      	movs	r0, #0
 8007aa2:	f7f9 fa69 	bl	8000f78 <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 8007aa6:	49a7      	ldr	r1, [pc, #668]	; (8007d44 <OTM8009A_Init+0x390>)
 8007aa8:	2000      	movs	r0, #0
 8007aaa:	f7f9 fa65 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 8007aae:	49a6      	ldr	r1, [pc, #664]	; (8007d48 <OTM8009A_Init+0x394>)
 8007ab0:	2000      	movs	r0, #0
 8007ab2:	f7f9 fa61 	bl	8000f78 <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 8007ab6:	49a5      	ldr	r1, [pc, #660]	; (8007d4c <OTM8009A_Init+0x398>)
 8007ab8:	2000      	movs	r0, #0
 8007aba:	f7f9 fa5d 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 8007abe:	49a4      	ldr	r1, [pc, #656]	; (8007d50 <OTM8009A_Init+0x39c>)
 8007ac0:	2000      	movs	r0, #0
 8007ac2:	f7f9 fa59 	bl	8000f78 <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8007ac6:	4995      	ldr	r1, [pc, #596]	; (8007d1c <OTM8009A_Init+0x368>)
 8007ac8:	2000      	movs	r0, #0
 8007aca:	f7f9 fa55 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 8007ace:	49a1      	ldr	r1, [pc, #644]	; (8007d54 <OTM8009A_Init+0x3a0>)
 8007ad0:	2000      	movs	r0, #0
 8007ad2:	f7f9 fa51 	bl	8000f78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8007ad6:	4993      	ldr	r1, [pc, #588]	; (8007d24 <OTM8009A_Init+0x370>)
 8007ad8:	2000      	movs	r0, #0
 8007ada:	f7f9 fa4d 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 8007ade:	499e      	ldr	r1, [pc, #632]	; (8007d58 <OTM8009A_Init+0x3a4>)
 8007ae0:	2000      	movs	r0, #0
 8007ae2:	f7f9 fa49 	bl	8000f78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 8007ae6:	499d      	ldr	r1, [pc, #628]	; (8007d5c <OTM8009A_Init+0x3a8>)
 8007ae8:	2000      	movs	r0, #0
 8007aea:	f7f9 fa45 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 8007aee:	499c      	ldr	r1, [pc, #624]	; (8007d60 <OTM8009A_Init+0x3ac>)
 8007af0:	2002      	movs	r0, #2
 8007af2:	f7f9 fa41 	bl	8000f78 <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8007af6:	497d      	ldr	r1, [pc, #500]	; (8007cec <OTM8009A_Init+0x338>)
 8007af8:	2000      	movs	r0, #0
 8007afa:	f7f9 fa3d 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 8007afe:	4999      	ldr	r1, [pc, #612]	; (8007d64 <OTM8009A_Init+0x3b0>)
 8007b00:	2006      	movs	r0, #6
 8007b02:	f7f9 fa39 	bl	8000f78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8007b06:	4998      	ldr	r1, [pc, #608]	; (8007d68 <OTM8009A_Init+0x3b4>)
 8007b08:	2000      	movs	r0, #0
 8007b0a:	f7f9 fa35 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 8007b0e:	4997      	ldr	r1, [pc, #604]	; (8007d6c <OTM8009A_Init+0x3b8>)
 8007b10:	200e      	movs	r0, #14
 8007b12:	f7f9 fa31 	bl	8000f78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8007b16:	4996      	ldr	r1, [pc, #600]	; (8007d70 <OTM8009A_Init+0x3bc>)
 8007b18:	2000      	movs	r0, #0
 8007b1a:	f7f9 fa2d 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 8007b1e:	4995      	ldr	r1, [pc, #596]	; (8007d74 <OTM8009A_Init+0x3c0>)
 8007b20:	200e      	movs	r0, #14
 8007b22:	f7f9 fa29 	bl	8000f78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8007b26:	4994      	ldr	r1, [pc, #592]	; (8007d78 <OTM8009A_Init+0x3c4>)
 8007b28:	2000      	movs	r0, #0
 8007b2a:	f7f9 fa25 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 8007b2e:	4993      	ldr	r1, [pc, #588]	; (8007d7c <OTM8009A_Init+0x3c8>)
 8007b30:	200a      	movs	r0, #10
 8007b32:	f7f9 fa21 	bl	8000f78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8007b36:	4992      	ldr	r1, [pc, #584]	; (8007d80 <OTM8009A_Init+0x3cc>)
 8007b38:	2000      	movs	r0, #0
 8007b3a:	f7f9 fa1d 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 8007b3e:	4991      	ldr	r1, [pc, #580]	; (8007d84 <OTM8009A_Init+0x3d0>)
 8007b40:	2000      	movs	r0, #0
 8007b42:	f7f9 fa19 	bl	8000f78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8007b46:	4969      	ldr	r1, [pc, #420]	; (8007cec <OTM8009A_Init+0x338>)
 8007b48:	2000      	movs	r0, #0
 8007b4a:	f7f9 fa15 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 8007b4e:	498e      	ldr	r1, [pc, #568]	; (8007d88 <OTM8009A_Init+0x3d4>)
 8007b50:	200a      	movs	r0, #10
 8007b52:	f7f9 fa11 	bl	8000f78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8007b56:	498d      	ldr	r1, [pc, #564]	; (8007d8c <OTM8009A_Init+0x3d8>)
 8007b58:	2000      	movs	r0, #0
 8007b5a:	f7f9 fa0d 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 8007b5e:	498c      	ldr	r1, [pc, #560]	; (8007d90 <OTM8009A_Init+0x3dc>)
 8007b60:	200f      	movs	r0, #15
 8007b62:	f7f9 fa09 	bl	8000f78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8007b66:	4980      	ldr	r1, [pc, #512]	; (8007d68 <OTM8009A_Init+0x3b4>)
 8007b68:	2000      	movs	r0, #0
 8007b6a:	f7f9 fa05 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 8007b6e:	4989      	ldr	r1, [pc, #548]	; (8007d94 <OTM8009A_Init+0x3e0>)
 8007b70:	200f      	movs	r0, #15
 8007b72:	f7f9 fa01 	bl	8000f78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8007b76:	497e      	ldr	r1, [pc, #504]	; (8007d70 <OTM8009A_Init+0x3bc>)
 8007b78:	2000      	movs	r0, #0
 8007b7a:	f7f9 f9fd 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 8007b7e:	4986      	ldr	r1, [pc, #536]	; (8007d98 <OTM8009A_Init+0x3e4>)
 8007b80:	200a      	movs	r0, #10
 8007b82:	f7f9 f9f9 	bl	8000f78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8007b86:	497c      	ldr	r1, [pc, #496]	; (8007d78 <OTM8009A_Init+0x3c4>)
 8007b88:	2000      	movs	r0, #0
 8007b8a:	f7f9 f9f5 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 8007b8e:	4983      	ldr	r1, [pc, #524]	; (8007d9c <OTM8009A_Init+0x3e8>)
 8007b90:	200f      	movs	r0, #15
 8007b92:	f7f9 f9f1 	bl	8000f78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8007b96:	497a      	ldr	r1, [pc, #488]	; (8007d80 <OTM8009A_Init+0x3cc>)
 8007b98:	2000      	movs	r0, #0
 8007b9a:	f7f9 f9ed 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 8007b9e:	4980      	ldr	r1, [pc, #512]	; (8007da0 <OTM8009A_Init+0x3ec>)
 8007ba0:	200f      	movs	r0, #15
 8007ba2:	f7f9 f9e9 	bl	8000f78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 8007ba6:	497f      	ldr	r1, [pc, #508]	; (8007da4 <OTM8009A_Init+0x3f0>)
 8007ba8:	2000      	movs	r0, #0
 8007baa:	f7f9 f9e5 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 8007bae:	497e      	ldr	r1, [pc, #504]	; (8007da8 <OTM8009A_Init+0x3f4>)
 8007bb0:	200a      	movs	r0, #10
 8007bb2:	f7f9 f9e1 	bl	8000f78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 8007bb6:	497d      	ldr	r1, [pc, #500]	; (8007dac <OTM8009A_Init+0x3f8>)
 8007bb8:	2000      	movs	r0, #0
 8007bba:	f7f9 f9dd 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 8007bbe:	497c      	ldr	r1, [pc, #496]	; (8007db0 <OTM8009A_Init+0x3fc>)
 8007bc0:	200a      	movs	r0, #10
 8007bc2:	f7f9 f9d9 	bl	8000f78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8007bc6:	4949      	ldr	r1, [pc, #292]	; (8007cec <OTM8009A_Init+0x338>)
 8007bc8:	2000      	movs	r0, #0
 8007bca:	f7f9 f9d5 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 8007bce:	4979      	ldr	r1, [pc, #484]	; (8007db4 <OTM8009A_Init+0x400>)
 8007bd0:	200a      	movs	r0, #10
 8007bd2:	f7f9 f9d1 	bl	8000f78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8007bd6:	496d      	ldr	r1, [pc, #436]	; (8007d8c <OTM8009A_Init+0x3d8>)
 8007bd8:	2000      	movs	r0, #0
 8007bda:	f7f9 f9cd 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 8007bde:	4976      	ldr	r1, [pc, #472]	; (8007db8 <OTM8009A_Init+0x404>)
 8007be0:	200f      	movs	r0, #15
 8007be2:	f7f9 f9c9 	bl	8000f78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8007be6:	4960      	ldr	r1, [pc, #384]	; (8007d68 <OTM8009A_Init+0x3b4>)
 8007be8:	2000      	movs	r0, #0
 8007bea:	f7f9 f9c5 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 8007bee:	4973      	ldr	r1, [pc, #460]	; (8007dbc <OTM8009A_Init+0x408>)
 8007bf0:	200f      	movs	r0, #15
 8007bf2:	f7f9 f9c1 	bl	8000f78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8007bf6:	495e      	ldr	r1, [pc, #376]	; (8007d70 <OTM8009A_Init+0x3bc>)
 8007bf8:	2000      	movs	r0, #0
 8007bfa:	f7f9 f9bd 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 8007bfe:	4970      	ldr	r1, [pc, #448]	; (8007dc0 <OTM8009A_Init+0x40c>)
 8007c00:	200a      	movs	r0, #10
 8007c02:	f7f9 f9b9 	bl	8000f78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8007c06:	495c      	ldr	r1, [pc, #368]	; (8007d78 <OTM8009A_Init+0x3c4>)
 8007c08:	2000      	movs	r0, #0
 8007c0a:	f7f9 f9b5 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 8007c0e:	496d      	ldr	r1, [pc, #436]	; (8007dc4 <OTM8009A_Init+0x410>)
 8007c10:	200f      	movs	r0, #15
 8007c12:	f7f9 f9b1 	bl	8000f78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8007c16:	495a      	ldr	r1, [pc, #360]	; (8007d80 <OTM8009A_Init+0x3cc>)
 8007c18:	2000      	movs	r0, #0
 8007c1a:	f7f9 f9ad 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 8007c1e:	496a      	ldr	r1, [pc, #424]	; (8007dc8 <OTM8009A_Init+0x414>)
 8007c20:	200f      	movs	r0, #15
 8007c22:	f7f9 f9a9 	bl	8000f78 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8007c26:	493d      	ldr	r1, [pc, #244]	; (8007d1c <OTM8009A_Init+0x368>)
 8007c28:	2000      	movs	r0, #0
 8007c2a:	f7f9 f9a5 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 8007c2e:	4967      	ldr	r1, [pc, #412]	; (8007dcc <OTM8009A_Init+0x418>)
 8007c30:	2000      	movs	r0, #0
 8007c32:	f7f9 f9a1 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 8007c36:	4966      	ldr	r1, [pc, #408]	; (8007dd0 <OTM8009A_Init+0x41c>)
 8007c38:	2000      	movs	r0, #0
 8007c3a:	f7f9 f99d 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 8007c3e:	4965      	ldr	r1, [pc, #404]	; (8007dd4 <OTM8009A_Init+0x420>)
 8007c40:	2000      	movs	r0, #0
 8007c42:	f7f9 f999 	bl	8000f78 <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 8007c46:	4964      	ldr	r1, [pc, #400]	; (8007dd8 <OTM8009A_Init+0x424>)
 8007c48:	2000      	movs	r0, #0
 8007c4a:	f7f9 f995 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 8007c4e:	4963      	ldr	r1, [pc, #396]	; (8007ddc <OTM8009A_Init+0x428>)
 8007c50:	2000      	movs	r0, #0
 8007c52:	f7f9 f991 	bl	8000f78 <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8007c56:	4923      	ldr	r1, [pc, #140]	; (8007ce4 <OTM8009A_Init+0x330>)
 8007c58:	2000      	movs	r0, #0
 8007c5a:	f7f9 f98d 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 8007c5e:	4960      	ldr	r1, [pc, #384]	; (8007de0 <OTM8009A_Init+0x42c>)
 8007c60:	2003      	movs	r0, #3
 8007c62:	f7f9 f989 	bl	8000f78 <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8007c66:	491f      	ldr	r1, [pc, #124]	; (8007ce4 <OTM8009A_Init+0x330>)
 8007c68:	2000      	movs	r0, #0
 8007c6a:	f7f9 f985 	bl	8000f78 <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8007c6e:	491d      	ldr	r1, [pc, #116]	; (8007ce4 <OTM8009A_Init+0x330>)
 8007c70:	2000      	movs	r0, #0
 8007c72:	f7f9 f981 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 8007c76:	495b      	ldr	r1, [pc, #364]	; (8007de4 <OTM8009A_Init+0x430>)
 8007c78:	2010      	movs	r0, #16
 8007c7a:	f7f9 f97d 	bl	8000f78 <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8007c7e:	4919      	ldr	r1, [pc, #100]	; (8007ce4 <OTM8009A_Init+0x330>)
 8007c80:	2000      	movs	r0, #0
 8007c82:	f7f9 f979 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 8007c86:	4958      	ldr	r1, [pc, #352]	; (8007de8 <OTM8009A_Init+0x434>)
 8007c88:	2010      	movs	r0, #16
 8007c8a:	f7f9 f975 	bl	8000f78 <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 8007c8e:	2000      	movs	r0, #0
 8007c90:	4956      	ldr	r1, [pc, #344]	; (8007dec <OTM8009A_Init+0x438>)
 8007c92:	f7f9 f971 	bl	8000f78 <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 8007c96:	2078      	movs	r0, #120	; 0x78
 8007c98:	f7f9 f96c 	bl	8000f74 <OTM8009A_IO_Delay>

  switch(ColorCoding)
 8007c9c:	2c00      	cmp	r4, #0
 8007c9e:	f000 80c7 	beq.w	8007e30 <OTM8009A_Init+0x47c>
 8007ca2:	2c02      	cmp	r4, #2
 8007ca4:	d103      	bne.n	8007cae <OTM8009A_Init+0x2fa>
  {
  case OTM8009A_FORMAT_RBG565 :
    /* Set Pixel color format to RGB565 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 8007ca6:	4952      	ldr	r1, [pc, #328]	; (8007df0 <OTM8009A_Init+0x43c>)
 8007ca8:	2000      	movs	r0, #0
    break;
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8007caa:	f7f9 f965 	bl	8000f78 <DSI_IO_WriteCmd>
    break;
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8007cae:	2d01      	cmp	r5, #1
 8007cb0:	d10b      	bne.n	8007cca <OTM8009A_Init+0x316>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 8007cb2:	4950      	ldr	r1, [pc, #320]	; (8007df4 <OTM8009A_Init+0x440>)
 8007cb4:	2000      	movs	r0, #0
 8007cb6:	f7f9 f95f 	bl	8000f78 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 8007cba:	494f      	ldr	r1, [pc, #316]	; (8007df8 <OTM8009A_Init+0x444>)
 8007cbc:	2004      	movs	r0, #4
 8007cbe:	f7f9 f95b 	bl	8000f78 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8007cc2:	494e      	ldr	r1, [pc, #312]	; (8007dfc <OTM8009A_Init+0x448>)
 8007cc4:	2004      	movs	r0, #4
 8007cc6:	f7f9 f957 	bl	8000f78 <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 8007cca:	494d      	ldr	r1, [pc, #308]	; (8007e00 <OTM8009A_Init+0x44c>)
 8007ccc:	2000      	movs	r0, #0
 8007cce:	f7f9 f953 	bl	8000f78 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 8007cd2:	494c      	ldr	r1, [pc, #304]	; (8007e04 <OTM8009A_Init+0x450>)
 8007cd4:	2000      	movs	r0, #0
 8007cd6:	f7f9 f94f 	bl	8000f78 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 8007cda:	494b      	ldr	r1, [pc, #300]	; (8007e08 <OTM8009A_Init+0x454>)
 8007cdc:	2000      	movs	r0, #0
 8007cde:	f7f9 f94b 	bl	8000f78 <DSI_IO_WriteCmd>
 8007ce2:	e093      	b.n	8007e0c <OTM8009A_Init+0x458>
 8007ce4:	08029fe8 	.word	0x08029fe8
 8007ce8:	0802a04e 	.word	0x0802a04e
 8007cec:	08029ffe 	.word	0x08029ffe
 8007cf0:	0802a0d4 	.word	0x0802a0d4
 8007cf4:	0802a014 	.word	0x0802a014
 8007cf8:	0802a02a 	.word	0x0802a02a
 8007cfc:	0802a040 	.word	0x0802a040
 8007d00:	0802a046 	.word	0x0802a046
 8007d04:	0802a048 	.word	0x0802a048
 8007d08:	0802a04a 	.word	0x0802a04a
 8007d0c:	0802a04c 	.word	0x0802a04c
 8007d10:	08029fea 	.word	0x08029fea
 8007d14:	08029fec 	.word	0x08029fec
 8007d18:	08029fee 	.word	0x08029fee
 8007d1c:	08029ff0 	.word	0x08029ff0
 8007d20:	08029ff2 	.word	0x08029ff2
 8007d24:	08029ff4 	.word	0x08029ff4
 8007d28:	08029ff6 	.word	0x08029ff6
 8007d2c:	08029ff8 	.word	0x08029ff8
 8007d30:	08029ffa 	.word	0x08029ffa
 8007d34:	08029ffc 	.word	0x08029ffc
 8007d38:	0802a152 	.word	0x0802a152
 8007d3c:	0802a000 	.word	0x0802a000
 8007d40:	0802a002 	.word	0x0802a002
 8007d44:	0802a004 	.word	0x0802a004
 8007d48:	0802a006 	.word	0x0802a006
 8007d4c:	0802a008 	.word	0x0802a008
 8007d50:	0802a00a 	.word	0x0802a00a
 8007d54:	0802a00c 	.word	0x0802a00c
 8007d58:	0802a00e 	.word	0x0802a00e
 8007d5c:	0802a010 	.word	0x0802a010
 8007d60:	0802a155 	.word	0x0802a155
 8007d64:	0802a158 	.word	0x0802a158
 8007d68:	0802a012 	.word	0x0802a012
 8007d6c:	0802a15f 	.word	0x0802a15f
 8007d70:	0802a016 	.word	0x0802a016
 8007d74:	0802a16e 	.word	0x0802a16e
 8007d78:	0802a018 	.word	0x0802a018
 8007d7c:	0802a052 	.word	0x0802a052
 8007d80:	0802a01a 	.word	0x0802a01a
 8007d84:	0802a038 	.word	0x0802a038
 8007d88:	0802a05d 	.word	0x0802a05d
 8007d8c:	0802a01c 	.word	0x0802a01c
 8007d90:	0802a068 	.word	0x0802a068
 8007d94:	0802a078 	.word	0x0802a078
 8007d98:	0802a088 	.word	0x0802a088
 8007d9c:	0802a093 	.word	0x0802a093
 8007da0:	0802a0a3 	.word	0x0802a0a3
 8007da4:	0802a01e 	.word	0x0802a01e
 8007da8:	0802a0b3 	.word	0x0802a0b3
 8007dac:	0802a020 	.word	0x0802a020
 8007db0:	0802a0be 	.word	0x0802a0be
 8007db4:	0802a0c9 	.word	0x0802a0c9
 8007db8:	0802a0d7 	.word	0x0802a0d7
 8007dbc:	0802a0e7 	.word	0x0802a0e7
 8007dc0:	0802a0f7 	.word	0x0802a0f7
 8007dc4:	0802a102 	.word	0x0802a102
 8007dc8:	0802a112 	.word	0x0802a112
 8007dcc:	0802a03a 	.word	0x0802a03a
 8007dd0:	0802a03c 	.word	0x0802a03c
 8007dd4:	0802a03e 	.word	0x0802a03e
 8007dd8:	0802a042 	.word	0x0802a042
 8007ddc:	0802a044 	.word	0x0802a044
 8007de0:	0802a122 	.word	0x0802a122
 8007de4:	0802a130 	.word	0x0802a130
 8007de8:	0802a141 	.word	0x0802a141
 8007dec:	0802a022 	.word	0x0802a022
 8007df0:	0802a024 	.word	0x0802a024
 8007df4:	0802a028 	.word	0x0802a028
 8007df8:	0802a126 	.word	0x0802a126
 8007dfc:	0802a12b 	.word	0x0802a12b
 8007e00:	0802a02c 	.word	0x0802a02c
 8007e04:	0802a02e 	.word	0x0802a02e
 8007e08:	0802a030 	.word	0x0802a030

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 8007e0c:	490a      	ldr	r1, [pc, #40]	; (8007e38 <OTM8009A_Init+0x484>)
 8007e0e:	2000      	movs	r0, #0
 8007e10:	f7f9 f8b2 	bl	8000f78 <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 8007e14:	4909      	ldr	r1, [pc, #36]	; (8007e3c <OTM8009A_Init+0x488>)
 8007e16:	2000      	movs	r0, #0
 8007e18:	f7f9 f8ae 	bl	8000f78 <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8007e1c:	4908      	ldr	r1, [pc, #32]	; (8007e40 <OTM8009A_Init+0x48c>)
 8007e1e:	2000      	movs	r0, #0
 8007e20:	f7f9 f8aa 	bl	8000f78 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 8007e24:	4907      	ldr	r1, [pc, #28]	; (8007e44 <OTM8009A_Init+0x490>)
 8007e26:	2000      	movs	r0, #0
 8007e28:	f7f9 f8a6 	bl	8000f78 <DSI_IO_WriteCmd>

  return 0;
}
 8007e2c:	2000      	movs	r0, #0
 8007e2e:	bd38      	pop	{r3, r4, r5, pc}
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8007e30:	4905      	ldr	r1, [pc, #20]	; (8007e48 <OTM8009A_Init+0x494>)
 8007e32:	4620      	mov	r0, r4
 8007e34:	e739      	b.n	8007caa <OTM8009A_Init+0x2f6>
 8007e36:	bf00      	nop
 8007e38:	0802a032 	.word	0x0802a032
 8007e3c:	0802a034 	.word	0x0802a034
 8007e40:	08029fe8 	.word	0x08029fe8
 8007e44:	0802a036 	.word	0x0802a036
 8007e48:	0802a026 	.word	0x0802a026

08007e4c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007e4c:	490f      	ldr	r1, [pc, #60]	; (8007e8c <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007e4e:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007e50:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8007e54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007e58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8007e5c:	4b0c      	ldr	r3, [pc, #48]	; (8007e90 <SystemInit+0x44>)
 8007e5e:	681a      	ldr	r2, [r3, #0]
 8007e60:	f042 0201 	orr.w	r2, r2, #1
 8007e64:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8007e66:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8007e68:	681a      	ldr	r2, [r3, #0]
 8007e6a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8007e6e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007e72:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8007e74:	4a07      	ldr	r2, [pc, #28]	; (8007e94 <SystemInit+0x48>)
 8007e76:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007e7e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8007e80:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007e82:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007e86:	608b      	str	r3, [r1, #8]
#endif
}
 8007e88:	4770      	bx	lr
 8007e8a:	bf00      	nop
 8007e8c:	e000ed00 	.word	0xe000ed00
 8007e90:	40023800 	.word	0x40023800
 8007e94:	24003010 	.word	0x24003010

08007e98 <HAL_Init>:
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007e98:	4a07      	ldr	r2, [pc, #28]	; (8007eb8 <HAL_Init+0x20>)
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007e9a:	2003      	movs	r0, #3
{
 8007e9c:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007e9e:	6813      	ldr	r3, [r2, #0]
 8007ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ea4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007ea6:	f000 fa97 	bl	80083d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007eaa:	2000      	movs	r0, #0
 8007eac:	f7fd f92c 	bl	8005108 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007eb0:	f7fc fdbc 	bl	8004a2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8007eb4:	2000      	movs	r0, #0
 8007eb6:	bd08      	pop	{r3, pc}
 8007eb8:	40023c00 	.word	0x40023c00

08007ebc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8007ebc:	4a03      	ldr	r2, [pc, #12]	; (8007ecc <HAL_IncTick+0x10>)
 8007ebe:	4b04      	ldr	r3, [pc, #16]	; (8007ed0 <HAL_IncTick+0x14>)
 8007ec0:	6811      	ldr	r1, [r2, #0]
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	440b      	add	r3, r1
 8007ec6:	6013      	str	r3, [r2, #0]
}
 8007ec8:	4770      	bx	lr
 8007eca:	bf00      	nop
 8007ecc:	200124e8 	.word	0x200124e8
 8007ed0:	20000064 	.word	0x20000064

08007ed4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8007ed4:	4b01      	ldr	r3, [pc, #4]	; (8007edc <HAL_GetTick+0x8>)
 8007ed6:	6818      	ldr	r0, [r3, #0]
}
 8007ed8:	4770      	bx	lr
 8007eda:	bf00      	nop
 8007edc:	200124e8 	.word	0x200124e8

08007ee0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007ee0:	b538      	push	{r3, r4, r5, lr}
 8007ee2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8007ee4:	f7ff fff6 	bl	8007ed4 <HAL_GetTick>
 8007ee8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007eea:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8007eec:	bf1e      	ittt	ne
 8007eee:	4b04      	ldrne	r3, [pc, #16]	; (8007f00 <HAL_Delay+0x20>)
 8007ef0:	781b      	ldrbne	r3, [r3, #0]
 8007ef2:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007ef4:	f7ff ffee 	bl	8007ed4 <HAL_GetTick>
 8007ef8:	1b43      	subs	r3, r0, r5
 8007efa:	42a3      	cmp	r3, r4
 8007efc:	d3fa      	bcc.n	8007ef4 <HAL_Delay+0x14>
  {
  }
}
 8007efe:	bd38      	pop	{r3, r4, r5, pc}
 8007f00:	20000064 	.word	0x20000064

08007f04 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007f04:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007f06:	4604      	mov	r4, r0
 8007f08:	2800      	cmp	r0, #0
 8007f0a:	f000 809b 	beq.w	8008044 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8007f0e:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8007f10:	b925      	cbnz	r5, 8007f1c <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007f12:	f7fc fda9 	bl	8004a68 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007f16:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007f18:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007f1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f1e:	06db      	lsls	r3, r3, #27
 8007f20:	f100 808e 	bmi.w	8008040 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007f24:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f26:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007f2a:	f023 0302 	bic.w	r3, r3, #2
 8007f2e:	f043 0302 	orr.w	r3, r3, #2
 8007f32:	6423      	str	r3, [r4, #64]	; 0x40
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8007f34:	4b44      	ldr	r3, [pc, #272]	; (8008048 <HAL_ADC_Init+0x144>)
 8007f36:	685a      	ldr	r2, [r3, #4]
 8007f38:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8007f3c:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8007f3e:	685a      	ldr	r2, [r3, #4]
 8007f40:	6861      	ldr	r1, [r4, #4]
 8007f42:	430a      	orrs	r2, r1
 8007f44:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007f46:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007f48:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007f4a:	685a      	ldr	r2, [r3, #4]
 8007f4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007f50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007f52:	685a      	ldr	r2, [r3, #4]
 8007f54:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007f58:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007f5a:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007f5c:	685a      	ldr	r2, [r3, #4]
 8007f5e:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007f62:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007f64:	685a      	ldr	r2, [r3, #4]
 8007f66:	430a      	orrs	r2, r1
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007f68:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007f6a:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007f6c:	689a      	ldr	r2, [r3, #8]
 8007f6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007f72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007f74:	689a      	ldr	r2, [r3, #8]
 8007f76:	430a      	orrs	r2, r1
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007f78:	4934      	ldr	r1, [pc, #208]	; (800804c <HAL_ADC_Init+0x148>)
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007f7a:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007f7c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8007f7e:	428a      	cmp	r2, r1
 8007f80:	d052      	beq.n	8008028 <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007f82:	6899      	ldr	r1, [r3, #8]
 8007f84:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8007f88:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007f8a:	6899      	ldr	r1, [r3, #8]
 8007f8c:	430a      	orrs	r2, r1
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007f8e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007f90:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007f92:	689a      	ldr	r2, [r3, #8]
 8007f94:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007f98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007f9a:	689a      	ldr	r2, [r3, #8]
 8007f9c:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007f9e:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007fa0:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007fa2:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007fa4:	f022 0202 	bic.w	r2, r2, #2
 8007fa8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007faa:	689a      	ldr	r2, [r3, #8]
 8007fac:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8007fb0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007fb2:	f894 2020 	ldrb.w	r2, [r4, #32]
 8007fb6:	2a00      	cmp	r2, #0
 8007fb8:	d03e      	beq.n	8008038 <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007fba:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007fbc:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007fbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007fc2:	3901      	subs	r1, #1
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007fc4:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007fc6:	685a      	ldr	r2, [r3, #4]
 8007fc8:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007fcc:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007fce:	685a      	ldr	r2, [r3, #4]
 8007fd0:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007fd4:	605a      	str	r2, [r3, #4]
    ADC_CLEAR_ERRORCODE(hadc);
 8007fd6:	2000      	movs	r0, #0
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007fda:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007fdc:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007fe0:	3901      	subs	r1, #1
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007fe2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fe6:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8007fea:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007fec:	689a      	ldr	r2, [r3, #8]
 8007fee:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007ff2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007ff4:	689a      	ldr	r2, [r3, #8]
 8007ff6:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 8007ffa:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007ffe:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8008000:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8008002:	689a      	ldr	r2, [r3, #8]
 8008004:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008008:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800800a:	689a      	ldr	r2, [r3, #8]
 800800c:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8008010:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8008012:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8008014:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008016:	f023 0303 	bic.w	r3, r3, #3
 800801a:	f043 0301 	orr.w	r3, r3, #1
 800801e:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8008020:	2300      	movs	r3, #0
 8008022:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8008026:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008028:	689a      	ldr	r2, [r3, #8]
 800802a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800802e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008030:	689a      	ldr	r2, [r3, #8]
 8008032:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008036:	e7b2      	b.n	8007f9e <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8008038:	685a      	ldr	r2, [r3, #4]
 800803a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800803e:	e7c9      	b.n	8007fd4 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 8008040:	2001      	movs	r0, #1
 8008042:	e7ed      	b.n	8008020 <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 8008044:	2001      	movs	r0, #1
 8008046:	e7ee      	b.n	8008026 <HAL_ADC_Init+0x122>
 8008048:	40012300 	.word	0x40012300
 800804c:	0f000001 	.word	0x0f000001

08008050 <HAL_ADC_Start_IT>:
  __IO uint32_t counter = 0;
 8008050:	2300      	movs	r3, #0
{
 8008052:	b082      	sub	sp, #8
  __IO uint32_t counter = 0;
 8008054:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8008056:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800805a:	2b01      	cmp	r3, #1
 800805c:	d06c      	beq.n	8008138 <HAL_ADC_Start_IT+0xe8>
 800805e:	2301      	movs	r3, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8008060:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(hadc);
 8008062:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8008066:	6893      	ldr	r3, [r2, #8]
 8008068:	07d9      	lsls	r1, r3, #31
 800806a:	d50c      	bpl.n	8008086 <HAL_ADC_Start_IT+0x36>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800806c:	6893      	ldr	r3, [r2, #8]
 800806e:	f013 0301 	ands.w	r3, r3, #1
 8008072:	d11a      	bne.n	80080aa <HAL_ADC_Start_IT+0x5a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008074:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8008076:	f042 0210 	orr.w	r2, r2, #16
 800807a:	6402      	str	r2, [r0, #64]	; 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800807c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800807e:	f042 0201 	orr.w	r2, r2, #1
 8008082:	6442      	str	r2, [r0, #68]	; 0x44
 8008084:	e03e      	b.n	8008104 <HAL_ADC_Start_IT+0xb4>
    __HAL_ADC_ENABLE(hadc);
 8008086:	6893      	ldr	r3, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8008088:	492c      	ldr	r1, [pc, #176]	; (800813c <HAL_ADC_Start_IT+0xec>)
    __HAL_ADC_ENABLE(hadc);
 800808a:	f043 0301 	orr.w	r3, r3, #1
 800808e:	6093      	str	r3, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8008090:	4b2b      	ldr	r3, [pc, #172]	; (8008140 <HAL_ADC_Start_IT+0xf0>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	fbb3 f3f1 	udiv	r3, r3, r1
 8008098:	eb03 0343 	add.w	r3, r3, r3, lsl #1
      counter--;
 800809c:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 800809e:	9b01      	ldr	r3, [sp, #4]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d0e3      	beq.n	800806c <HAL_ADC_Start_IT+0x1c>
      counter--;
 80080a4:	9b01      	ldr	r3, [sp, #4]
 80080a6:	3b01      	subs	r3, #1
 80080a8:	e7f8      	b.n	800809c <HAL_ADC_Start_IT+0x4c>
    ADC_STATE_CLR_SET(hadc->State,
 80080aa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80080ac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80080b0:	f023 0301 	bic.w	r3, r3, #1
 80080b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080b8:	6403      	str	r3, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80080ba:	6853      	ldr	r3, [r2, #4]
 80080bc:	055b      	lsls	r3, r3, #21
 80080be:	d505      	bpl.n	80080cc <HAL_ADC_Start_IT+0x7c>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80080c0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80080c2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80080c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80080ca:	6403      	str	r3, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80080cc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80080ce:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 80080d2:	d002      	beq.n	80080da <HAL_ADC_Start_IT+0x8a>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80080d4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80080d6:	f023 0306 	bic.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80080da:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 80080dc:	2300      	movs	r3, #0
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80080de:	4919      	ldr	r1, [pc, #100]	; (8008144 <HAL_ADC_Start_IT+0xf4>)
    __HAL_UNLOCK(hadc);
 80080e0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80080e4:	f06f 0322 	mvn.w	r3, #34	; 0x22
 80080e8:	6013      	str	r3, [r2, #0]
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80080ea:	6853      	ldr	r3, [r2, #4]
 80080ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80080f0:	f043 0320 	orr.w	r3, r3, #32
 80080f4:	6053      	str	r3, [r2, #4]
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80080f6:	684b      	ldr	r3, [r1, #4]
 80080f8:	06d8      	lsls	r0, r3, #27
 80080fa:	d106      	bne.n	800810a <HAL_ADC_Start_IT+0xba>
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80080fc:	6890      	ldr	r0, [r2, #8]
 80080fe:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8008102:	d014      	beq.n	800812e <HAL_ADC_Start_IT+0xde>
  return HAL_OK;
 8008104:	2000      	movs	r0, #0
}
 8008106:	b002      	add	sp, #8
 8008108:	4770      	bx	lr
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800810a:	4b0f      	ldr	r3, [pc, #60]	; (8008148 <HAL_ADC_Start_IT+0xf8>)
 800810c:	429a      	cmp	r2, r3
 800810e:	d107      	bne.n	8008120 <HAL_ADC_Start_IT+0xd0>
 8008110:	6893      	ldr	r3, [r2, #8]
 8008112:	f013 5f40 	tst.w	r3, #805306368	; 0x30000000
 8008116:	d103      	bne.n	8008120 <HAL_ADC_Start_IT+0xd0>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008118:	6893      	ldr	r3, [r2, #8]
 800811a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800811e:	6093      	str	r3, [r2, #8]
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8008120:	684b      	ldr	r3, [r1, #4]
 8008122:	06db      	lsls	r3, r3, #27
 8008124:	d4ee      	bmi.n	8008104 <HAL_ADC_Start_IT+0xb4>
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8008126:	4b09      	ldr	r3, [pc, #36]	; (800814c <HAL_ADC_Start_IT+0xfc>)
 8008128:	429a      	cmp	r2, r3
 800812a:	d1eb      	bne.n	8008104 <HAL_ADC_Start_IT+0xb4>
 800812c:	e7e6      	b.n	80080fc <HAL_ADC_Start_IT+0xac>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800812e:	6893      	ldr	r3, [r2, #8]
 8008130:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008134:	6093      	str	r3, [r2, #8]
 8008136:	e7e6      	b.n	8008106 <HAL_ADC_Start_IT+0xb6>
  __HAL_LOCK(hadc);
 8008138:	2002      	movs	r0, #2
 800813a:	e7e4      	b.n	8008106 <HAL_ADC_Start_IT+0xb6>
 800813c:	000f4240 	.word	0x000f4240
 8008140:	20000060 	.word	0x20000060
 8008144:	40012300 	.word	0x40012300
 8008148:	40012000 	.word	0x40012000
 800814c:	40012200 	.word	0x40012200

08008150 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8008150:	6803      	ldr	r3, [r0, #0]
 8008152:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8008154:	4770      	bx	lr

08008156 <HAL_ADC_LevelOutOfWindowCallback>:
 8008156:	4770      	bx	lr

08008158 <HAL_ADC_ErrorCallback>:
 8008158:	4770      	bx	lr

0800815a <HAL_ADC_IRQHandler>:
  uint32_t tmp_sr = hadc->Instance->SR;
 800815a:	6803      	ldr	r3, [r0, #0]
{
 800815c:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp_sr = hadc->Instance->SR;
 800815e:	681e      	ldr	r6, [r3, #0]
{
 8008160:	4604      	mov	r4, r0
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8008162:	685d      	ldr	r5, [r3, #4]
  if(tmp1 && tmp2)
 8008164:	07b2      	lsls	r2, r6, #30
 8008166:	d52b      	bpl.n	80081c0 <HAL_ADC_IRQHandler+0x66>
 8008168:	06a8      	lsls	r0, r5, #26
 800816a:	d529      	bpl.n	80081c0 <HAL_ADC_IRQHandler+0x66>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800816c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800816e:	06d1      	lsls	r1, r2, #27
 8008170:	d403      	bmi.n	800817a <HAL_ADC_IRQHandler+0x20>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8008172:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008174:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008178:	6422      	str	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800817a:	689a      	ldr	r2, [r3, #8]
 800817c:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8008180:	d117      	bne.n	80081b2 <HAL_ADC_IRQHandler+0x58>
 8008182:	69a2      	ldr	r2, [r4, #24]
 8008184:	b9aa      	cbnz	r2, 80081b2 <HAL_ADC_IRQHandler+0x58>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008188:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 800818c:	d002      	beq.n	8008194 <HAL_ADC_IRQHandler+0x3a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800818e:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008190:	0552      	lsls	r2, r2, #21
 8008192:	d40e      	bmi.n	80081b2 <HAL_ADC_IRQHandler+0x58>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8008194:	685a      	ldr	r2, [r3, #4]
 8008196:	f022 0220 	bic.w	r2, r2, #32
 800819a:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800819c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800819e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081a2:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80081a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80081a6:	04d8      	lsls	r0, r3, #19
 80081a8:	d403      	bmi.n	80081b2 <HAL_ADC_IRQHandler+0x58>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80081aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80081ac:	f043 0301 	orr.w	r3, r3, #1
 80081b0:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 80081b2:	4620      	mov	r0, r4
 80081b4:	f7fc fc24 	bl	8004a00 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80081b8:	6823      	ldr	r3, [r4, #0]
 80081ba:	f06f 0212 	mvn.w	r2, #18
 80081be:	601a      	str	r2, [r3, #0]
  if(tmp1 && tmp2)
 80081c0:	0771      	lsls	r1, r6, #29
 80081c2:	d533      	bpl.n	800822c <HAL_ADC_IRQHandler+0xd2>
 80081c4:	062a      	lsls	r2, r5, #24
 80081c6:	d531      	bpl.n	800822c <HAL_ADC_IRQHandler+0xd2>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80081c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80081ca:	06db      	lsls	r3, r3, #27
 80081cc:	d403      	bmi.n	80081d6 <HAL_ADC_IRQHandler+0x7c>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80081ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80081d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80081d4:	6423      	str	r3, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80081d6:	6823      	ldr	r3, [r4, #0]
 80081d8:	689a      	ldr	r2, [r3, #8]
 80081da:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 80081de:	d11e      	bne.n	800821e <HAL_ADC_IRQHandler+0xc4>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80081e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80081e2:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 80081e6:	d002      	beq.n	80081ee <HAL_ADC_IRQHandler+0x94>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80081e8:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80081ea:	0550      	lsls	r0, r2, #21
 80081ec:	d417      	bmi.n	800821e <HAL_ADC_IRQHandler+0xc4>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80081ee:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80081f0:	0551      	lsls	r1, r2, #21
 80081f2:	d414      	bmi.n	800821e <HAL_ADC_IRQHandler+0xc4>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80081f4:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80081f6:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80081fa:	d110      	bne.n	800821e <HAL_ADC_IRQHandler+0xc4>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80081fc:	69a2      	ldr	r2, [r4, #24]
 80081fe:	b972      	cbnz	r2, 800821e <HAL_ADC_IRQHandler+0xc4>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8008200:	685a      	ldr	r2, [r3, #4]
 8008202:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008206:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8008208:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800820a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800820e:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8008210:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008212:	05da      	lsls	r2, r3, #23
 8008214:	d403      	bmi.n	800821e <HAL_ADC_IRQHandler+0xc4>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008216:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008218:	f043 0301 	orr.w	r3, r3, #1
 800821c:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800821e:	4620      	mov	r0, r4
 8008220:	f000 f8d8 	bl	80083d4 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8008224:	6823      	ldr	r3, [r4, #0]
 8008226:	f06f 020c 	mvn.w	r2, #12
 800822a:	601a      	str	r2, [r3, #0]
  if(tmp1 && tmp2)
 800822c:	07f3      	lsls	r3, r6, #31
 800822e:	d510      	bpl.n	8008252 <HAL_ADC_IRQHandler+0xf8>
 8008230:	0668      	lsls	r0, r5, #25
 8008232:	d50e      	bpl.n	8008252 <HAL_ADC_IRQHandler+0xf8>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8008234:	6823      	ldr	r3, [r4, #0]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	07d9      	lsls	r1, r3, #31
 800823a:	d50a      	bpl.n	8008252 <HAL_ADC_IRQHandler+0xf8>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800823c:	6c23      	ldr	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800823e:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8008240:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008244:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8008246:	f7ff ff86 	bl	8008156 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800824a:	6823      	ldr	r3, [r4, #0]
 800824c:	f06f 0201 	mvn.w	r2, #1
 8008250:	601a      	str	r2, [r3, #0]
  if(tmp1 && tmp2)
 8008252:	06b2      	lsls	r2, r6, #26
 8008254:	d50e      	bpl.n	8008274 <HAL_ADC_IRQHandler+0x11a>
 8008256:	016b      	lsls	r3, r5, #5
 8008258:	d50c      	bpl.n	8008274 <HAL_ADC_IRQHandler+0x11a>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800825a:	6c63      	ldr	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800825c:	f06f 0520 	mvn.w	r5, #32
      HAL_ADC_ErrorCallback(hadc);
 8008260:	4620      	mov	r0, r4
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8008262:	f043 0302 	orr.w	r3, r3, #2
 8008266:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8008268:	6823      	ldr	r3, [r4, #0]
 800826a:	601d      	str	r5, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 800826c:	f7ff ff74 	bl	8008158 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8008270:	6823      	ldr	r3, [r4, #0]
 8008272:	601d      	str	r5, [r3, #0]
}
 8008274:	bd70      	pop	{r4, r5, r6, pc}
	...

08008278 <HAL_ADC_ConfigChannel>:
  __IO uint32_t counter = 0;
 8008278:	2300      	movs	r3, #0
{
 800827a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0;
 800827c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800827e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008282:	2b01      	cmp	r3, #1
 8008284:	d079      	beq.n	800837a <HAL_ADC_ConfigChannel+0x102>
 8008286:	2301      	movs	r3, #1
 8008288:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800828c:	680d      	ldr	r5, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800828e:	6803      	ldr	r3, [r0, #0]
 8008290:	b2ae      	uxth	r6, r5
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8008292:	2d09      	cmp	r5, #9
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8008294:	688a      	ldr	r2, [r1, #8]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8008296:	eb06 0446 	add.w	r4, r6, r6, lsl #1
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800829a:	d93a      	bls.n	8008312 <HAL_ADC_ConfigChannel+0x9a>
 800829c:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
 80082a0:	d037      	beq.n	8008312 <HAL_ADC_ConfigChannel+0x9a>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80082a2:	3c1e      	subs	r4, #30
 80082a4:	f04f 0c07 	mov.w	ip, #7
 80082a8:	68df      	ldr	r7, [r3, #12]
 80082aa:	fa0c fc04 	lsl.w	ip, ip, r4
 80082ae:	ea27 070c 	bic.w	r7, r7, ip
 80082b2:	60df      	str	r7, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80082b4:	4f42      	ldr	r7, [pc, #264]	; (80083c0 <HAL_ADC_ConfigChannel+0x148>)
 80082b6:	42bd      	cmp	r5, r7
 80082b8:	d126      	bne.n	8008308 <HAL_ADC_ConfigChannel+0x90>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80082ba:	68dc      	ldr	r4, [r3, #12]
 80082bc:	ea44 6402 	orr.w	r4, r4, r2, lsl #24
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80082c0:	60dc      	str	r4, [r3, #12]
  if (sConfig->Rank < 7)
 80082c2:	6849      	ldr	r1, [r1, #4]
 80082c4:	2906      	cmp	r1, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80082c6:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  if (sConfig->Rank < 7)
 80082ca:	d830      	bhi.n	800832e <HAL_ADC_ConfigChannel+0xb6>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80082cc:	3a05      	subs	r2, #5
 80082ce:	241f      	movs	r4, #31
 80082d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80082d2:	4094      	lsls	r4, r2
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80082d4:	fa06 f202 	lsl.w	r2, r6, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80082d8:	ea21 0104 	bic.w	r1, r1, r4
 80082dc:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80082de:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80082e0:	430a      	orrs	r2, r1
 80082e2:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80082e4:	4a37      	ldr	r2, [pc, #220]	; (80083c4 <HAL_ADC_ConfigChannel+0x14c>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d108      	bne.n	80082fc <HAL_ADC_ConfigChannel+0x84>
 80082ea:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
 80082ee:	d146      	bne.n	800837e <HAL_ADC_ConfigChannel+0x106>
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80082f0:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 80082f4:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80082f8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  __HAL_UNLOCK(hadc);
 80082fc:	2300      	movs	r3, #0
 80082fe:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8008302:	4618      	mov	r0, r3
}
 8008304:	b003      	add	sp, #12
 8008306:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8008308:	68df      	ldr	r7, [r3, #12]
 800830a:	fa02 f404 	lsl.w	r4, r2, r4
 800830e:	433c      	orrs	r4, r7
 8008310:	e7d6      	b.n	80082c0 <HAL_ADC_ConfigChannel+0x48>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8008312:	f04f 0c07 	mov.w	ip, #7
 8008316:	691f      	ldr	r7, [r3, #16]
 8008318:	fa0c fc04 	lsl.w	ip, ip, r4
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800831c:	fa02 f404 	lsl.w	r4, r2, r4
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8008320:	ea27 070c 	bic.w	r7, r7, ip
 8008324:	611f      	str	r7, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8008326:	691f      	ldr	r7, [r3, #16]
 8008328:	433c      	orrs	r4, r7
 800832a:	611c      	str	r4, [r3, #16]
 800832c:	e7c9      	b.n	80082c2 <HAL_ADC_ConfigChannel+0x4a>
  else if (sConfig->Rank < 13)
 800832e:	290c      	cmp	r1, #12
 8008330:	f04f 011f 	mov.w	r1, #31
 8008334:	d80b      	bhi.n	800834e <HAL_ADC_ConfigChannel+0xd6>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8008336:	3a23      	subs	r2, #35	; 0x23
 8008338:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800833a:	4091      	lsls	r1, r2
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800833c:	fa06 f202 	lsl.w	r2, r6, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8008340:	ea24 0101 	bic.w	r1, r4, r1
 8008344:	6319      	str	r1, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8008346:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008348:	430a      	orrs	r2, r1
 800834a:	631a      	str	r2, [r3, #48]	; 0x30
 800834c:	e7ca      	b.n	80082e4 <HAL_ADC_ConfigChannel+0x6c>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800834e:	3a41      	subs	r2, #65	; 0x41
 8008350:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8008352:	4091      	lsls	r1, r2
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8008354:	fa06 f202 	lsl.w	r2, r6, r2
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8008358:	ea24 0101 	bic.w	r1, r4, r1
 800835c:	62d9      	str	r1, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800835e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008360:	430a      	orrs	r2, r1
 8008362:	62da      	str	r2, [r3, #44]	; 0x2c
 8008364:	e7be      	b.n	80082e4 <HAL_ADC_ConfigChannel+0x6c>
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8008366:	4b18      	ldr	r3, [pc, #96]	; (80083c8 <HAL_ADC_ConfigChannel+0x150>)
 8008368:	685a      	ldr	r2, [r3, #4]
 800836a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800836e:	605a      	str	r2, [r3, #4]
    ADC->CCR |= ADC_CCR_VBATE;
 8008370:	685a      	ldr	r2, [r3, #4]
 8008372:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8008376:	605a      	str	r2, [r3, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8008378:	e7c0      	b.n	80082fc <HAL_ADC_ConfigChannel+0x84>
  __HAL_LOCK(hadc);
 800837a:	2002      	movs	r0, #2
 800837c:	e7c2      	b.n	8008304 <HAL_ADC_ConfigChannel+0x8c>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800837e:	2d12      	cmp	r5, #18
 8008380:	d0f1      	beq.n	8008366 <HAL_ADC_ConfigChannel+0xee>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8008382:	4b0f      	ldr	r3, [pc, #60]	; (80083c0 <HAL_ADC_ConfigChannel+0x148>)
 8008384:	429d      	cmp	r5, r3
 8008386:	d001      	beq.n	800838c <HAL_ADC_ConfigChannel+0x114>
 8008388:	2d11      	cmp	r5, #17
 800838a:	d1b7      	bne.n	80082fc <HAL_ADC_ConfigChannel+0x84>
    ADC->CCR &= ~ADC_CCR_VBATE;
 800838c:	4b0e      	ldr	r3, [pc, #56]	; (80083c8 <HAL_ADC_ConfigChannel+0x150>)
 800838e:	685a      	ldr	r2, [r3, #4]
 8008390:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8008394:	605a      	str	r2, [r3, #4]
    ADC->CCR |= ADC_CCR_TSVREFE;
 8008396:	685a      	ldr	r2, [r3, #4]
 8008398:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800839c:	605a      	str	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800839e:	4b08      	ldr	r3, [pc, #32]	; (80083c0 <HAL_ADC_ConfigChannel+0x148>)
 80083a0:	429d      	cmp	r5, r3
 80083a2:	d1ab      	bne.n	80082fc <HAL_ADC_ConfigChannel+0x84>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80083a4:	4b09      	ldr	r3, [pc, #36]	; (80083cc <HAL_ADC_ConfigChannel+0x154>)
 80083a6:	4a0a      	ldr	r2, [pc, #40]	; (80083d0 <HAL_ADC_ConfigChannel+0x158>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80083ae:	220a      	movs	r2, #10
 80083b0:	4353      	muls	r3, r2
        counter--;
 80083b2:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 80083b4:	9b01      	ldr	r3, [sp, #4]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d0a0      	beq.n	80082fc <HAL_ADC_ConfigChannel+0x84>
        counter--;
 80083ba:	9b01      	ldr	r3, [sp, #4]
 80083bc:	3b01      	subs	r3, #1
 80083be:	e7f8      	b.n	80083b2 <HAL_ADC_ConfigChannel+0x13a>
 80083c0:	10000012 	.word	0x10000012
 80083c4:	40012000 	.word	0x40012000
 80083c8:	40012300 	.word	0x40012300
 80083cc:	20000060 	.word	0x20000060
 80083d0:	000f4240 	.word	0x000f4240

080083d4 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80083d4:	4770      	bx	lr
	...

080083d8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80083d8:	4907      	ldr	r1, [pc, #28]	; (80083f8 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80083da:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80083dc:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80083de:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80083e2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80083e6:	0412      	lsls	r2, r2, #16
 80083e8:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80083ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80083ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80083f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80083f4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80083f6:	4770      	bx	lr
 80083f8:	e000ed00 	.word	0xe000ed00

080083fc <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80083fc:	4b16      	ldr	r3, [pc, #88]	; (8008458 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80083fe:	b530      	push	{r4, r5, lr}
 8008400:	68dc      	ldr	r4, [r3, #12]
 8008402:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008406:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800840a:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800840c:	2d04      	cmp	r5, #4
 800840e:	bf28      	it	cs
 8008410:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008412:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008414:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008418:	bf8c      	ite	hi
 800841a:	3c03      	subhi	r4, #3
 800841c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800841e:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 8008422:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008424:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008428:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800842c:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008430:	fa01 f104 	lsl.w	r1, r1, r4
 8008434:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008438:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800843c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800843e:	db06      	blt.n	800844e <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008440:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8008444:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8008448:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800844c:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800844e:	f000 000f 	and.w	r0, r0, #15
 8008452:	4a02      	ldr	r2, [pc, #8]	; (800845c <HAL_NVIC_SetPriority+0x60>)
 8008454:	5413      	strb	r3, [r2, r0]
 8008456:	e7f9      	b.n	800844c <HAL_NVIC_SetPriority+0x50>
 8008458:	e000ed00 	.word	0xe000ed00
 800845c:	e000ed14 	.word	0xe000ed14

08008460 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8008460:	2800      	cmp	r0, #0
 8008462:	db08      	blt.n	8008476 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008464:	0942      	lsrs	r2, r0, #5
 8008466:	2301      	movs	r3, #1
 8008468:	f000 001f 	and.w	r0, r0, #31
 800846c:	fa03 f000 	lsl.w	r0, r3, r0
 8008470:	4b01      	ldr	r3, [pc, #4]	; (8008478 <HAL_NVIC_EnableIRQ+0x18>)
 8008472:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8008476:	4770      	bx	lr
 8008478:	e000e100 	.word	0xe000e100

0800847c <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800847c:	2800      	cmp	r0, #0
 800847e:	db0d      	blt.n	800849c <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008480:	0943      	lsrs	r3, r0, #5
 8008482:	2201      	movs	r2, #1
 8008484:	f000 001f 	and.w	r0, r0, #31
 8008488:	3320      	adds	r3, #32
 800848a:	fa02 f000 	lsl.w	r0, r2, r0
 800848e:	4a04      	ldr	r2, [pc, #16]	; (80084a0 <HAL_NVIC_DisableIRQ+0x24>)
 8008490:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8008494:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008498:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800849c:	4770      	bx	lr
 800849e:	bf00      	nop
 80084a0:	e000e100 	.word	0xe000e100

080084a4 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 80084a4:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80084a8:	4b04      	ldr	r3, [pc, #16]	; (80084bc <HAL_MPU_Disable+0x18>)
 80084aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80084ac:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80084b0:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80084b2:	2200      	movs	r2, #0
 80084b4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 80084b8:	4770      	bx	lr
 80084ba:	bf00      	nop
 80084bc:	e000ed00 	.word	0xe000ed00

080084c0 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80084c0:	4b06      	ldr	r3, [pc, #24]	; (80084dc <HAL_MPU_Enable+0x1c>)
 80084c2:	f040 0001 	orr.w	r0, r0, #1
 80084c6:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80084ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80084cc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80084d0:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80084d2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80084d6:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80084da:	4770      	bx	lr
 80084dc:	e000ed00 	.word	0xe000ed00

080084e0 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80084e0:	7843      	ldrb	r3, [r0, #1]
 80084e2:	4a14      	ldr	r2, [pc, #80]	; (8008534 <HAL_MPU_ConfigRegion+0x54>)
{
 80084e4:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 80084e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != RESET)
 80084ea:	7801      	ldrb	r1, [r0, #0]
 80084ec:	b1e9      	cbz	r1, 800852a <HAL_MPU_ConfigRegion+0x4a>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 80084ee:	6843      	ldr	r3, [r0, #4]
 80084f0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80084f4:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80084f6:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80084f8:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80084fa:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80084fe:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8008500:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8008502:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8008506:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8008508:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800850c:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800850e:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8008512:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8008514:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8008518:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800851a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800851e:	7a01      	ldrb	r1, [r0, #8]
 8008520:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008524:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8008528:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 800852a:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 800852e:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
}
 8008532:	e7f9      	b.n	8008528 <HAL_MPU_ConfigRegion+0x48>
 8008534:	e000ed00 	.word	0xe000ed00

08008538 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8008538:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800853a:	4604      	mov	r4, r0
 800853c:	b908      	cbnz	r0, 8008542 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 800853e:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8008540:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8008542:	7f43      	ldrb	r3, [r0, #29]
 8008544:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008548:	b913      	cbnz	r3, 8008550 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 800854a:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800854c:	f7fc fac2 	bl	8004ad4 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8008550:	2302      	movs	r3, #2
 8008552:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8008554:	7923      	ldrb	r3, [r4, #4]
 8008556:	b9e3      	cbnz	r3, 8008592 <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8008558:	6823      	ldr	r3, [r4, #0]
 800855a:	4a13      	ldr	r2, [pc, #76]	; (80085a8 <HAL_CRC_Init+0x70>)
 800855c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800855e:	689a      	ldr	r2, [r3, #8]
 8008560:	f022 0218 	bic.w	r2, r2, #24
 8008564:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8008566:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8008568:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800856a:	b9d2      	cbnz	r2, 80085a2 <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800856c:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8008570:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 8008572:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8008574:	689a      	ldr	r2, [r3, #8]
 8008576:	6961      	ldr	r1, [r4, #20]
 8008578:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800857c:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800857e:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8008580:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8008582:	689a      	ldr	r2, [r3, #8]
 8008584:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008588:	430a      	orrs	r2, r1
 800858a:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 800858c:	2301      	movs	r3, #1
 800858e:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8008590:	e7d6      	b.n	8008540 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8008592:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8008596:	4620      	mov	r0, r4
 8008598:	f000 f808 	bl	80085ac <HAL_CRCEx_Polynomial_Set>
 800859c:	2800      	cmp	r0, #0
 800859e:	d0e2      	beq.n	8008566 <HAL_CRC_Init+0x2e>
 80085a0:	e7cd      	b.n	800853e <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80085a2:	6922      	ldr	r2, [r4, #16]
 80085a4:	e7e4      	b.n	8008570 <HAL_CRC_Init+0x38>
 80085a6:	bf00      	nop
 80085a8:	04c11db7 	.word	0x04c11db7

080085ac <HAL_CRCEx_Polynomial_Set>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80085ac:	231f      	movs	r3, #31
{
 80085ae:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80085b0:	3b01      	subs	r3, #1
 80085b2:	d31c      	bcc.n	80085ee <HAL_CRCEx_Polynomial_Set+0x42>
 80085b4:	fa21 f403 	lsr.w	r4, r1, r3
 80085b8:	07e4      	lsls	r4, r4, #31
 80085ba:	d5f9      	bpl.n	80085b0 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 80085bc:	2a10      	cmp	r2, #16
 80085be:	d012      	beq.n	80085e6 <HAL_CRCEx_Polynomial_Set+0x3a>
 80085c0:	d804      	bhi.n	80085cc <HAL_CRCEx_Polynomial_Set+0x20>
 80085c2:	b13a      	cbz	r2, 80085d4 <HAL_CRCEx_Polynomial_Set+0x28>
 80085c4:	2a08      	cmp	r2, #8
 80085c6:	d010      	beq.n	80085ea <HAL_CRCEx_Polynomial_Set+0x3e>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      {
        status =   HAL_ERROR;
 80085c8:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 80085ca:	e00b      	b.n	80085e4 <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 80085cc:	2a18      	cmp	r2, #24
 80085ce:	d1fb      	bne.n	80085c8 <HAL_CRCEx_Polynomial_Set+0x1c>
      if (msb >= HAL_CRC_LENGTH_7B)
 80085d0:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 80085d2:	d8f9      	bhi.n	80085c8 <HAL_CRCEx_Polynomial_Set+0x1c>
    WRITE_REG(hcrc->Instance->POL, Pol);
 80085d4:	6800      	ldr	r0, [r0, #0]
 80085d6:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80085d8:	6883      	ldr	r3, [r0, #8]
 80085da:	f023 0318 	bic.w	r3, r3, #24
 80085de:	431a      	orrs	r2, r3
 80085e0:	6082      	str	r2, [r0, #8]
 80085e2:	2000      	movs	r0, #0
}
 80085e4:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 80085e6:	2b07      	cmp	r3, #7
 80085e8:	e7f3      	b.n	80085d2 <HAL_CRCEx_Polynomial_Set+0x26>
      if (msb >= HAL_CRC_LENGTH_16B)
 80085ea:	2b0f      	cmp	r3, #15
 80085ec:	e7f1      	b.n	80085d2 <HAL_CRCEx_Polynomial_Set+0x26>
  switch (PolyLength)
 80085ee:	2a00      	cmp	r2, #0
 80085f0:	d1ea      	bne.n	80085c8 <HAL_CRCEx_Polynomial_Set+0x1c>
 80085f2:	e7ef      	b.n	80085d4 <HAL_CRCEx_Polynomial_Set+0x28>

080085f4 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80085f4:	6803      	ldr	r3, [r0, #0]
{
 80085f6:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80085f8:	2018      	movs	r0, #24
 80085fa:	b2d9      	uxtb	r1, r3
 80085fc:	3910      	subs	r1, #16
 80085fe:	fbb1 f0f0 	udiv	r0, r1, r0
{
 8008602:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008604:	4c05      	ldr	r4, [pc, #20]	; (800861c <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8008606:	295f      	cmp	r1, #95	; 0x5f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008608:	5c20      	ldrb	r0, [r4, r0]
 800860a:	65d0      	str	r0, [r2, #92]	; 0x5c
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800860c:	f423 707f 	bic.w	r0, r3, #1020	; 0x3fc
 8008610:	f020 0003 	bic.w	r0, r0, #3
 8008614:	bf88      	it	hi
 8008616:	3004      	addhi	r0, #4
 8008618:	6590      	str	r0, [r2, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 800861a:	bd10      	pop	{r4, pc}
 800861c:	0802a195 	.word	0x0802a195

08008620 <HAL_DMA_Init>:
{
 8008620:	b570      	push	{r4, r5, r6, lr}
 8008622:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8008624:	f7ff fc56 	bl	8007ed4 <HAL_GetTick>
 8008628:	4605      	mov	r5, r0
  if(hdma == NULL)
 800862a:	2c00      	cmp	r4, #0
 800862c:	d073      	beq.n	8008716 <HAL_DMA_Init+0xf6>
  hdma->State = HAL_DMA_STATE_BUSY;
 800862e:	2302      	movs	r3, #2
  __HAL_DMA_DISABLE(hdma);
 8008630:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8008632:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 8008636:	2300      	movs	r3, #0
 8008638:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 800863c:	6813      	ldr	r3, [r2, #0]
 800863e:	f023 0301 	bic.w	r3, r3, #1
 8008642:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008644:	6821      	ldr	r1, [r4, #0]
 8008646:	680b      	ldr	r3, [r1, #0]
 8008648:	07d8      	lsls	r0, r3, #31
 800864a:	d42f      	bmi.n	80086ac <HAL_DMA_Init+0x8c>
  tmp = hdma->Instance->CR;
 800864c:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800864e:	4d33      	ldr	r5, [pc, #204]	; (800871c <HAL_DMA_Init+0xfc>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008650:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008652:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008654:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8008658:	4313      	orrs	r3, r2
 800865a:	68e2      	ldr	r2, [r4, #12]
 800865c:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800865e:	6922      	ldr	r2, [r4, #16]
 8008660:	4313      	orrs	r3, r2
 8008662:	6962      	ldr	r2, [r4, #20]
 8008664:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008666:	69e2      	ldr	r2, [r4, #28]
 8008668:	4303      	orrs	r3, r0
 800866a:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 800866c:	6a22      	ldr	r2, [r4, #32]
 800866e:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008670:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008672:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008674:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008678:	bf02      	ittt	eq
 800867a:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 800867e:	4335      	orreq	r5, r6
 8008680:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008682:	2a04      	cmp	r2, #4
  hdma->Instance->CR = tmp;  
 8008684:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8008686:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008688:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 800868c:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008690:	d133      	bne.n	80086fa <HAL_DMA_Init+0xda>
    tmp |= hdma->Init.FIFOThreshold;
 8008692:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008694:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8008696:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008698:	b37d      	cbz	r5, 80086fa <HAL_DMA_Init+0xda>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800869a:	b990      	cbnz	r0, 80086c2 <HAL_DMA_Init+0xa2>
  {
    switch (tmp)
 800869c:	2a01      	cmp	r2, #1
 800869e:	d021      	beq.n	80086e4 <HAL_DMA_Init+0xc4>
 80086a0:	f032 0202 	bics.w	r2, r2, #2
 80086a4:	d129      	bne.n	80086fa <HAL_DMA_Init+0xda>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80086a6:	01ea      	lsls	r2, r5, #7
 80086a8:	d527      	bpl.n	80086fa <HAL_DMA_Init+0xda>
 80086aa:	e01e      	b.n	80086ea <HAL_DMA_Init+0xca>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80086ac:	f7ff fc12 	bl	8007ed4 <HAL_GetTick>
 80086b0:	1b40      	subs	r0, r0, r5
 80086b2:	2805      	cmp	r0, #5
 80086b4:	d9c6      	bls.n	8008644 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80086b6:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80086b8:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80086ba:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80086bc:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80086c0:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80086c2:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80086c6:	d114      	bne.n	80086f2 <HAL_DMA_Init+0xd2>
    switch (tmp)
 80086c8:	2a03      	cmp	r2, #3
 80086ca:	d816      	bhi.n	80086fa <HAL_DMA_Init+0xda>
 80086cc:	a001      	add	r0, pc, #4	; (adr r0, 80086d4 <HAL_DMA_Init+0xb4>)
 80086ce:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 80086d2:	bf00      	nop
 80086d4:	080086eb 	.word	0x080086eb
 80086d8:	080086a7 	.word	0x080086a7
 80086dc:	080086eb 	.word	0x080086eb
 80086e0:	080086e5 	.word	0x080086e5
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80086e4:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 80086e8:	d107      	bne.n	80086fa <HAL_DMA_Init+0xda>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80086ea:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
 80086ec:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80086ee:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80086f0:	e7e4      	b.n	80086bc <HAL_DMA_Init+0x9c>
    switch (tmp)
 80086f2:	2a02      	cmp	r2, #2
 80086f4:	d9f9      	bls.n	80086ea <HAL_DMA_Init+0xca>
 80086f6:	2a03      	cmp	r2, #3
 80086f8:	d0d5      	beq.n	80086a6 <HAL_DMA_Init+0x86>
  hdma->Instance->FCR = tmp;
 80086fa:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80086fc:	4620      	mov	r0, r4
 80086fe:	f7ff ff79 	bl	80085f4 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008702:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8008704:	233f      	movs	r3, #63	; 0x3f
 8008706:	4093      	lsls	r3, r2
 8008708:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800870a:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800870c:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800870e:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8008710:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8008714:	e7d4      	b.n	80086c0 <HAL_DMA_Init+0xa0>
    return HAL_ERROR;
 8008716:	2001      	movs	r0, #1
 8008718:	e7d2      	b.n	80086c0 <HAL_DMA_Init+0xa0>
 800871a:	bf00      	nop
 800871c:	e010803f 	.word	0xe010803f

08008720 <HAL_DMA_Start_IT>:
{
 8008720:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8008722:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008726:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8008728:	2c01      	cmp	r4, #1
 800872a:	d034      	beq.n	8008796 <HAL_DMA_Start_IT+0x76>
 800872c:	2401      	movs	r4, #1
 800872e:	2500      	movs	r5, #0
 8008730:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8008734:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8008738:	2c01      	cmp	r4, #1
 800873a:	f04f 0402 	mov.w	r4, #2
 800873e:	d128      	bne.n	8008792 <HAL_DMA_Start_IT+0x72>
    hdma->State = HAL_DMA_STATE_BUSY;
 8008740:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008744:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008746:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008748:	6825      	ldr	r5, [r4, #0]
 800874a:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 800874e:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8008750:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008752:	6883      	ldr	r3, [r0, #8]
 8008754:	2b40      	cmp	r3, #64	; 0x40
 8008756:	d119      	bne.n	800878c <HAL_DMA_Start_IT+0x6c>
    hdma->Instance->PAR = DstAddress;
 8008758:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 800875a:	60e1      	str	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800875c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800875e:	233f      	movs	r3, #63	; 0x3f
 8008760:	4093      	lsls	r3, r2
 8008762:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008764:	6823      	ldr	r3, [r4, #0]
 8008766:	f043 0316 	orr.w	r3, r3, #22
 800876a:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800876c:	6963      	ldr	r3, [r4, #20]
 800876e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008772:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8008774:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008776:	b11b      	cbz	r3, 8008780 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 8008778:	6823      	ldr	r3, [r4, #0]
 800877a:	f043 0308 	orr.w	r3, r3, #8
 800877e:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8008780:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008782:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8008784:	f043 0301 	orr.w	r3, r3, #1
 8008788:	6023      	str	r3, [r4, #0]
}
 800878a:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->PAR = SrcAddress;
 800878c:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 800878e:	60e2      	str	r2, [r4, #12]
 8008790:	e7e4      	b.n	800875c <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 8008792:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8008796:	2002      	movs	r0, #2
 8008798:	e7f7      	b.n	800878a <HAL_DMA_Start_IT+0x6a>

0800879a <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800879a:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800879e:	2b02      	cmp	r3, #2
 80087a0:	d003      	beq.n	80087aa <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80087a2:	2380      	movs	r3, #128	; 0x80
 80087a4:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80087a6:	2001      	movs	r0, #1
 80087a8:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 80087aa:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80087ac:	2305      	movs	r3, #5
 80087ae:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  return HAL_OK;
 80087b2:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 80087b4:	6813      	ldr	r3, [r2, #0]
 80087b6:	f023 0301 	bic.w	r3, r3, #1
 80087ba:	6013      	str	r3, [r2, #0]
}
 80087bc:	4770      	bx	lr
	...

080087c0 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
 80087c0:	2300      	movs	r3, #0
{
 80087c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 80087c4:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80087c6:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 80087c8:	4b5b      	ldr	r3, [pc, #364]	; (8008938 <HAL_DMA_IRQHandler+0x178>)
{
 80087ca:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80087cc:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600;
 80087ce:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80087d0:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 80087d2:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80087d4:	409a      	lsls	r2, r3
 80087d6:	4232      	tst	r2, r6
 80087d8:	d00c      	beq.n	80087f4 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80087da:	6801      	ldr	r1, [r0, #0]
 80087dc:	6808      	ldr	r0, [r1, #0]
 80087de:	0740      	lsls	r0, r0, #29
 80087e0:	d508      	bpl.n	80087f4 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80087e2:	6808      	ldr	r0, [r1, #0]
 80087e4:	f020 0004 	bic.w	r0, r0, #4
 80087e8:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80087ea:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80087ec:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80087ee:	f042 0201 	orr.w	r2, r2, #1
 80087f2:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80087f4:	2201      	movs	r2, #1
 80087f6:	409a      	lsls	r2, r3
 80087f8:	4232      	tst	r2, r6
 80087fa:	d008      	beq.n	800880e <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80087fc:	6821      	ldr	r1, [r4, #0]
 80087fe:	6949      	ldr	r1, [r1, #20]
 8008800:	0609      	lsls	r1, r1, #24
 8008802:	d504      	bpl.n	800880e <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008804:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008806:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8008808:	f042 0202 	orr.w	r2, r2, #2
 800880c:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800880e:	2204      	movs	r2, #4
 8008810:	409a      	lsls	r2, r3
 8008812:	4232      	tst	r2, r6
 8008814:	d008      	beq.n	8008828 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008816:	6821      	ldr	r1, [r4, #0]
 8008818:	6809      	ldr	r1, [r1, #0]
 800881a:	0788      	lsls	r0, r1, #30
 800881c:	d504      	bpl.n	8008828 <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800881e:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008820:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8008822:	f042 0204 	orr.w	r2, r2, #4
 8008826:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008828:	2210      	movs	r2, #16
 800882a:	409a      	lsls	r2, r3
 800882c:	4232      	tst	r2, r6
 800882e:	d010      	beq.n	8008852 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008830:	6823      	ldr	r3, [r4, #0]
 8008832:	6819      	ldr	r1, [r3, #0]
 8008834:	0709      	lsls	r1, r1, #28
 8008836:	d50c      	bpl.n	8008852 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008838:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800883a:	681a      	ldr	r2, [r3, #0]
 800883c:	0350      	lsls	r0, r2, #13
 800883e:	d537      	bpl.n	80088b0 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	0319      	lsls	r1, r3, #12
 8008844:	d401      	bmi.n	800884a <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8008846:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008848:	e000      	b.n	800884c <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800884a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 800884c:	b10b      	cbz	r3, 8008852 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 800884e:	4620      	mov	r0, r4
 8008850:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008852:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008854:	2220      	movs	r2, #32
 8008856:	408a      	lsls	r2, r1
 8008858:	4232      	tst	r2, r6
 800885a:	d03a      	beq.n	80088d2 <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800885c:	6823      	ldr	r3, [r4, #0]
 800885e:	6818      	ldr	r0, [r3, #0]
 8008860:	06c6      	lsls	r6, r0, #27
 8008862:	d536      	bpl.n	80088d2 <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008864:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008866:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 800886a:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800886c:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800886e:	d127      	bne.n	80088c0 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008870:	f022 0216 	bic.w	r2, r2, #22
 8008874:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008876:	695a      	ldr	r2, [r3, #20]
 8008878:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800887c:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800887e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008880:	b90a      	cbnz	r2, 8008886 <HAL_DMA_IRQHandler+0xc6>
 8008882:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8008884:	b11a      	cbz	r2, 800888e <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008886:	681a      	ldr	r2, [r3, #0]
 8008888:	f022 0208 	bic.w	r2, r2, #8
 800888c:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800888e:	233f      	movs	r3, #63	; 0x3f
 8008890:	408b      	lsls	r3, r1
 8008892:	60ab      	str	r3, [r5, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8008894:	2301      	movs	r3, #1
 8008896:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 800889a:	2300      	movs	r3, #0
 800889c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 80088a0:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d045      	beq.n	8008932 <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 80088a6:	4620      	mov	r0, r4
}
 80088a8:	b003      	add	sp, #12
 80088aa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 80088ae:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80088b0:	681a      	ldr	r2, [r3, #0]
 80088b2:	05d2      	lsls	r2, r2, #23
 80088b4:	d4c7      	bmi.n	8008846 <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80088b6:	681a      	ldr	r2, [r3, #0]
 80088b8:	f022 0208 	bic.w	r2, r2, #8
 80088bc:	601a      	str	r2, [r3, #0]
 80088be:	e7c2      	b.n	8008846 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80088c0:	0350      	lsls	r0, r2, #13
 80088c2:	d527      	bpl.n	8008914 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	0319      	lsls	r1, r3, #12
 80088c8:	d431      	bmi.n	800892e <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 80088ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 80088cc:	b10b      	cbz	r3, 80088d2 <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 80088ce:	4620      	mov	r0, r4
 80088d0:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80088d2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80088d4:	b36b      	cbz	r3, 8008932 <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80088d6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80088d8:	07da      	lsls	r2, r3, #31
 80088da:	d519      	bpl.n	8008910 <HAL_DMA_IRQHandler+0x150>
  uint32_t timeout = SystemCoreClock / 9600;
 80088dc:	f44f 5316 	mov.w	r3, #9600	; 0x2580
      __HAL_DMA_DISABLE(hdma);
 80088e0:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 80088e2:	fbb7 f7f3 	udiv	r7, r7, r3
      hdma->State = HAL_DMA_STATE_ABORT;
 80088e6:	2305      	movs	r3, #5
 80088e8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80088ec:	6813      	ldr	r3, [r2, #0]
 80088ee:	f023 0301 	bic.w	r3, r3, #1
 80088f2:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 80088f4:	9b01      	ldr	r3, [sp, #4]
 80088f6:	3301      	adds	r3, #1
 80088f8:	42bb      	cmp	r3, r7
 80088fa:	9301      	str	r3, [sp, #4]
 80088fc:	d802      	bhi.n	8008904 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80088fe:	6813      	ldr	r3, [r2, #0]
 8008900:	07db      	lsls	r3, r3, #31
 8008902:	d4f7      	bmi.n	80088f4 <HAL_DMA_IRQHandler+0x134>
      hdma->State = HAL_DMA_STATE_READY;
 8008904:	2301      	movs	r3, #1
 8008906:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 800890a:	2300      	movs	r3, #0
 800890c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 8008910:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008912:	e7c6      	b.n	80088a2 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008914:	681a      	ldr	r2, [r3, #0]
 8008916:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 800891a:	d108      	bne.n	800892e <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800891c:	6819      	ldr	r1, [r3, #0]
 800891e:	f021 0110 	bic.w	r1, r1, #16
 8008922:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8008924:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8008926:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800892a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 800892e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008930:	e7cc      	b.n	80088cc <HAL_DMA_IRQHandler+0x10c>
}
 8008932:	b003      	add	sp, #12
 8008934:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008936:	bf00      	nop
 8008938:	20000060 	.word	0x20000060

0800893c <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 800893c:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 800893e:	4770      	bx	lr

08008940 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8008940:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8008942:	4604      	mov	r4, r0
 8008944:	b380      	cbz	r0, 80089a8 <HAL_DMA2D_Init+0x68>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8008946:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 800894a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800894e:	b91b      	cbnz	r3, 8008958 <HAL_DMA2D_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8008950:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8008954:	f7fc f8d4 	bl	8004b00 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8008958:	2302      	movs	r3, #2

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800895a:	6861      	ldr	r1, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800895c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8008960:	6823      	ldr	r3, [r4, #0]
 8008962:	681a      	ldr	r2, [r3, #0]
 8008964:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8008968:	430a      	orrs	r2, r1

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800896a:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800896c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800896e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008970:	f022 0207 	bic.w	r2, r2, #7
 8008974:	430a      	orrs	r2, r1

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8008976:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8008978:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800897a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800897c:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8008980:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8008984:	430a      	orrs	r2, r1
 8008986:	641a      	str	r2, [r3, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8008988:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800898a:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 800898e:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8008992:	0552      	lsls	r2, r2, #21
 8008994:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8008998:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800899a:	430a      	orrs	r2, r1
 800899c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800899e:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80089a0:	6560      	str	r0, [r4, #84]	; 0x54
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80089a2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
}
 80089a6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80089a8:	2001      	movs	r0, #1
 80089aa:	e7fc      	b.n	80089a6 <HAL_DMA2D_Init+0x66>

080089ac <HAL_DMA2D_LineEventCallback>:
 80089ac:	4770      	bx	lr

080089ae <HAL_DMA2D_CLUTLoadingCpltCallback>:
 80089ae:	4770      	bx	lr

080089b0 <HAL_DMA2D_IRQHandler>:
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80089b0:	6803      	ldr	r3, [r0, #0]
{
 80089b2:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80089b4:	685e      	ldr	r6, [r3, #4]
{
 80089b6:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80089b8:	681d      	ldr	r5, [r3, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80089ba:	07f2      	lsls	r2, r6, #31
 80089bc:	d514      	bpl.n	80089e8 <HAL_DMA2D_IRQHandler+0x38>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80089be:	05e9      	lsls	r1, r5, #23
 80089c0:	d512      	bpl.n	80089e8 <HAL_DMA2D_IRQHandler+0x38>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80089c2:	681a      	ldr	r2, [r3, #0]
 80089c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80089c8:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80089ca:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80089cc:	f042 0201 	orr.w	r2, r2, #1
 80089d0:	6542      	str	r2, [r0, #84]	; 0x54

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80089d2:	2201      	movs	r2, #1
 80089d4:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80089d6:	2304      	movs	r3, #4
 80089d8:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80089dc:	2300      	movs	r3, #0
 80089de:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 80089e2:	69c3      	ldr	r3, [r0, #28]
 80089e4:	b103      	cbz	r3, 80089e8 <HAL_DMA2D_IRQHandler+0x38>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80089e6:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80089e8:	06b2      	lsls	r2, r6, #26
 80089ea:	d516      	bpl.n	8008a1a <HAL_DMA2D_IRQHandler+0x6a>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80089ec:	04ab      	lsls	r3, r5, #18
 80089ee:	d514      	bpl.n	8008a1a <HAL_DMA2D_IRQHandler+0x6a>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80089f0:	6823      	ldr	r3, [r4, #0]
 80089f2:	681a      	ldr	r2, [r3, #0]
 80089f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80089f8:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80089fa:	2220      	movs	r2, #32
 80089fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80089fe:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008a00:	f043 0302 	orr.w	r3, r3, #2
 8008a04:	6563      	str	r3, [r4, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008a06:	2304      	movs	r3, #4
 8008a08:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 8008a12:	69e3      	ldr	r3, [r4, #28]
 8008a14:	b10b      	cbz	r3, 8008a1a <HAL_DMA2D_IRQHandler+0x6a>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8008a16:	4620      	mov	r0, r4
 8008a18:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8008a1a:	0730      	lsls	r0, r6, #28
 8008a1c:	d516      	bpl.n	8008a4c <HAL_DMA2D_IRQHandler+0x9c>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8008a1e:	0529      	lsls	r1, r5, #20
 8008a20:	d514      	bpl.n	8008a4c <HAL_DMA2D_IRQHandler+0x9c>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8008a22:	6823      	ldr	r3, [r4, #0]
 8008a24:	681a      	ldr	r2, [r3, #0]
 8008a26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008a2a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8008a2c:	2208      	movs	r2, #8
 8008a2e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8008a30:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008a32:	f043 0304 	orr.w	r3, r3, #4
 8008a36:	6563      	str	r3, [r4, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008a38:	2304      	movs	r3, #4
 8008a3a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8008a3e:	2300      	movs	r3, #0
 8008a40:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 8008a44:	69e3      	ldr	r3, [r4, #28]
 8008a46:	b10b      	cbz	r3, 8008a4c <HAL_DMA2D_IRQHandler+0x9c>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8008a48:	4620      	mov	r0, r4
 8008a4a:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8008a4c:	0772      	lsls	r2, r6, #29
 8008a4e:	d50b      	bpl.n	8008a68 <HAL_DMA2D_IRQHandler+0xb8>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8008a50:	056b      	lsls	r3, r5, #21
 8008a52:	d509      	bpl.n	8008a68 <HAL_DMA2D_IRQHandler+0xb8>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8008a54:	6823      	ldr	r3, [r4, #0]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8008a56:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8008a58:	681a      	ldr	r2, [r3, #0]
 8008a5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a5e:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8008a60:	2204      	movs	r2, #4
 8008a62:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8008a64:	f7ff ffa2 	bl	80089ac <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8008a68:	07b0      	lsls	r0, r6, #30
 8008a6a:	d514      	bpl.n	8008a96 <HAL_DMA2D_IRQHandler+0xe6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8008a6c:	05a9      	lsls	r1, r5, #22
 8008a6e:	d512      	bpl.n	8008a96 <HAL_DMA2D_IRQHandler+0xe6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8008a70:	6823      	ldr	r3, [r4, #0]
 8008a72:	681a      	ldr	r2, [r3, #0]
 8008a74:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008a78:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8008a7a:	2202      	movs	r2, #2
 8008a7c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8008a7e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008a80:	6563      	str	r3, [r4, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8008a82:	2301      	movs	r3, #1
 8008a84:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8008a88:	2300      	movs	r3, #0
 8008a8a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

      if (hdma2d->XferCpltCallback != NULL)
 8008a8e:	69a3      	ldr	r3, [r4, #24]
 8008a90:	b10b      	cbz	r3, 8008a96 <HAL_DMA2D_IRQHandler+0xe6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8008a92:	4620      	mov	r0, r4
 8008a94:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8008a96:	06f2      	lsls	r2, r6, #27
 8008a98:	d513      	bpl.n	8008ac2 <HAL_DMA2D_IRQHandler+0x112>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8008a9a:	04eb      	lsls	r3, r5, #19
 8008a9c:	d511      	bpl.n	8008ac2 <HAL_DMA2D_IRQHandler+0x112>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8008a9e:	6823      	ldr	r3, [r4, #0]

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8008aa0:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8008aa2:	681a      	ldr	r2, [r3, #0]
 8008aa4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008aa8:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8008aaa:	2210      	movs	r2, #16
 8008aac:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8008aae:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008ab0:	6563      	str	r3, [r4, #84]	; 0x54
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
      __HAL_UNLOCK(hdma2d);
 8008ab8:	2300      	movs	r3, #0
 8008aba:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8008abe:	f7ff ff76 	bl	80089ae <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8008ac2:	bd70      	pop	{r4, r5, r6, pc}

08008ac4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8008ac4:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8008ac6:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	f04f 0302 	mov.w	r3, #2
 8008ad0:	d031      	beq.n	8008b36 <HAL_DMA2D_ConfigLayer+0x72>

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8008ad2:	2418      	movs	r4, #24
  __HAL_LOCK(hdma2d);
 8008ad4:	2201      	movs	r2, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8008ad6:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8008ada:	fb04 0401 	mla	r4, r4, r1, r0
  __HAL_LOCK(hdma2d);
 8008ade:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8008ae2:	6b22      	ldr	r2, [r4, #48]	; 0x30
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8008ae4:	e9d4 5609 	ldrd	r5, r6, [r4, #36]	; 0x24
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8008ae8:	0513      	lsls	r3, r2, #20
 8008aea:	6b62      	ldr	r2, [r4, #52]	; 0x34
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8008aec:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8008af0:	4e1b      	ldr	r6, [pc, #108]	; (8008b60 <HAL_DMA2D_ConfigLayer+0x9c>)
 8008af2:	432b      	orrs	r3, r5
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008af4:	3d09      	subs	r5, #9
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8008af6:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008afa:	2d01      	cmp	r5, #1
 8008afc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8008afe:	bf96      	itet	ls
 8008b00:	f002 427f 	andls.w	r2, r2, #4278190080	; 0xff000000
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8008b04:	ea43 6302 	orrhi.w	r3, r3, r2, lsl #24
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8008b08:	4313      	orrls	r3, r2

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8008b0a:	6802      	ldr	r2, [r0, #0]
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8008b0c:	b9a9      	cbnz	r1, 8008b3a <HAL_DMA2D_ConfigLayer+0x76>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8008b0e:	6a54      	ldr	r4, [r2, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008b10:	2d01      	cmp	r5, #1
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8008b12:	ea04 0406 	and.w	r4, r4, r6
 8008b16:	ea43 0304 	orr.w	r3, r3, r4
 8008b1a:	6253      	str	r3, [r2, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8008b1c:	6a03      	ldr	r3, [r0, #32]
 8008b1e:	6193      	str	r3, [r2, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008b20:	d803      	bhi.n	8008b2a <HAL_DMA2D_ConfigLayer+0x66>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8008b22:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8008b24:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008b28:	6293      	str	r3, [r2, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8008b30:	2300      	movs	r3, #0
 8008b32:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  __HAL_LOCK(hdma2d);
 8008b36:	4618      	mov	r0, r3

  return HAL_OK;
}
 8008b38:	bd70      	pop	{r4, r5, r6, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8008b3a:	69d4      	ldr	r4, [r2, #28]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008b3c:	2d01      	cmp	r5, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8008b3e:	ea04 0406 	and.w	r4, r4, r6
 8008b42:	ea43 0304 	orr.w	r3, r3, r4
 8008b46:	61d3      	str	r3, [r2, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8008b48:	f04f 0318 	mov.w	r3, #24
 8008b4c:	fb03 0101 	mla	r1, r3, r1, r0
 8008b50:	6a0b      	ldr	r3, [r1, #32]
 8008b52:	6113      	str	r3, [r2, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008b54:	d8e9      	bhi.n	8008b2a <HAL_DMA2D_ConfigLayer+0x66>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8008b56:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8008b58:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008b5c:	6213      	str	r3, [r2, #32]
 8008b5e:	e7e4      	b.n	8008b2a <HAL_DMA2D_ConfigLayer+0x66>
 8008b60:	00ccfff0 	.word	0x00ccfff0

08008b64 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8008b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b68:	4607      	mov	r7, r0
 8008b6a:	460d      	mov	r5, r1
 8008b6c:	4614      	mov	r4, r2
 8008b6e:	461e      	mov	r6, r3
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8008b70:	f7ff f9b0 	bl	8007ed4 <HAL_GetTick>
 8008b74:	4680      	mov	r8, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8008b7a:	07d2      	lsls	r2, r2, #31
 8008b7c:	d50a      	bpl.n	8008b94 <DSI_ShortWrite+0x30>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8008b7e:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 8008b82:	9906      	ldr	r1, [sp, #24]

  return HAL_OK;
 8008b84:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8008b86:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8008b8a:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8008b8e:	66dc      	str	r4, [r3, #108]	; 0x6c
}
 8008b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8008b94:	f7ff f99e 	bl	8007ed4 <HAL_GetTick>
 8008b98:	eba0 0008 	sub.w	r0, r0, r8
 8008b9c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8008ba0:	d9e9      	bls.n	8008b76 <DSI_ShortWrite+0x12>
      return HAL_TIMEOUT;
 8008ba2:	2003      	movs	r0, #3
 8008ba4:	e7f4      	b.n	8008b90 <DSI_ShortWrite+0x2c>

08008ba6 <HAL_DSI_ConfigErrorMonitor>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008ba6:	7c03      	ldrb	r3, [r0, #16]
 8008ba8:	2b01      	cmp	r3, #1
 8008baa:	d05c      	beq.n	8008c66 <HAL_DSI_ConfigErrorMonitor+0xc0>

  hdsi->Instance->IER[0U] = 0U;
 8008bac:	2200      	movs	r2, #0
 8008bae:	6803      	ldr	r3, [r0, #0]
 8008bb0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8008bb4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8008bb8:	07ca      	lsls	r2, r1, #31
  hdsi->ErrorMsk = ActiveErrors;
 8008bba:	6181      	str	r1, [r0, #24]
  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8008bbc:	d507      	bpl.n	8008bce <HAL_DSI_ConfigErrorMonitor+0x28>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8008bbe:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8008bc2:	ea6f 4212 	mvn.w	r2, r2, lsr #16
 8008bc6:	ea6f 4202 	mvn.w	r2, r2, lsl #16
 8008bca:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8008bce:	078a      	lsls	r2, r1, #30
 8008bd0:	d505      	bpl.n	8008bde <HAL_DSI_ConfigErrorMonitor+0x38>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8008bd2:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8008bd6:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 8008bda:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8008bde:	074a      	lsls	r2, r1, #29
 8008be0:	d505      	bpl.n	8008bee <HAL_DSI_ConfigErrorMonitor+0x48>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8008be2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8008be6:	f042 0201 	orr.w	r2, r2, #1
 8008bea:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8008bee:	070a      	lsls	r2, r1, #28
 8008bf0:	d505      	bpl.n	8008bfe <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8008bf2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8008bf6:	f042 0202 	orr.w	r2, r2, #2
 8008bfa:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8008bfe:	06ca      	lsls	r2, r1, #27
 8008c00:	d505      	bpl.n	8008c0e <HAL_DSI_ConfigErrorMonitor+0x68>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8008c02:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8008c06:	f042 020c 	orr.w	r2, r2, #12
 8008c0a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8008c0e:	068a      	lsls	r2, r1, #26
 8008c10:	d505      	bpl.n	8008c1e <HAL_DSI_ConfigErrorMonitor+0x78>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8008c12:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8008c16:	f042 0210 	orr.w	r2, r2, #16
 8008c1a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8008c1e:	064a      	lsls	r2, r1, #25
 8008c20:	d505      	bpl.n	8008c2e <HAL_DSI_ConfigErrorMonitor+0x88>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8008c22:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8008c26:	f042 0220 	orr.w	r2, r2, #32
 8008c2a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8008c2e:	060a      	lsls	r2, r1, #24
 8008c30:	d505      	bpl.n	8008c3e <HAL_DSI_ConfigErrorMonitor+0x98>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8008c32:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8008c36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c3a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8008c3e:	05ca      	lsls	r2, r1, #23
 8008c40:	d505      	bpl.n	8008c4e <HAL_DSI_ConfigErrorMonitor+0xa8>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8008c42:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8008c46:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008c4a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8008c4e:	058a      	lsls	r2, r1, #22
 8008c50:	d505      	bpl.n	8008c5e <HAL_DSI_ConfigErrorMonitor+0xb8>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8008c52:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8008c56:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 8008c5a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8008c5e:	2300      	movs	r3, #0
 8008c60:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8008c62:	4618      	mov	r0, r3
 8008c64:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8008c66:	2002      	movs	r0, #2
}
 8008c68:	4770      	bx	lr
	...

08008c6c <HAL_DSI_Init>:
{
 8008c6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008c6e:	460d      	mov	r5, r1
  if (hdsi == NULL)
 8008c70:	4604      	mov	r4, r0
 8008c72:	2800      	cmp	r0, #0
 8008c74:	f000 80a9 	beq.w	8008dca <HAL_DSI_Init+0x15e>
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8008c78:	7c43      	ldrb	r3, [r0, #17]
 8008c7a:	b90b      	cbnz	r3, 8008c80 <HAL_DSI_Init+0x14>
    HAL_DSI_MspInit(hdsi);
 8008c7c:	f7fb ff60 	bl	8004b40 <HAL_DSI_MspInit>
  hdsi->State = HAL_DSI_STATE_BUSY;
 8008c80:	2303      	movs	r3, #3
 8008c82:	7463      	strb	r3, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 8008c84:	2300      	movs	r3, #0
 8008c86:	9300      	str	r3, [sp, #0]
 8008c88:	6823      	ldr	r3, [r4, #0]
 8008c8a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8008c8e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8008c92:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8008c96:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8008c9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008c9e:	9300      	str	r3, [sp, #0]
 8008ca0:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 8008ca2:	f7ff f917 	bl	8007ed4 <HAL_GetTick>
 8008ca6:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8008ca8:	6822      	ldr	r2, [r4, #0]
 8008caa:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
 8008cae:	04d9      	lsls	r1, r3, #19
 8008cb0:	d57a      	bpl.n	8008da8 <HAL_DSI_Init+0x13c>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8008cb2:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 8008cb6:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 8008cba:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 8008cbe:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8008cc2:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8008cc6:	e9d5 0300 	ldrd	r0, r3, [r5]
 8008cca:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8008ccc:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8008cd0:	68a8      	ldr	r0, [r5, #8]
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8008cd2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  HAL_Delay(1);
 8008cd6:	2001      	movs	r0, #1
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8008cd8:	430b      	orrs	r3, r1
 8008cda:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 8008cde:	2300      	movs	r3, #0
 8008ce0:	9301      	str	r3, [sp, #4]
 8008ce2:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 8008ce6:	f043 0301 	orr.w	r3, r3, #1
 8008cea:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
 8008cee:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 8008cf2:	f003 0301 	and.w	r3, r3, #1
 8008cf6:	9301      	str	r3, [sp, #4]
 8008cf8:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(1);
 8008cfa:	f7ff f8f1 	bl	8007ee0 <HAL_Delay>
  tickstart = HAL_GetTick();
 8008cfe:	f7ff f8e9 	bl	8007ed4 <HAL_GetTick>
 8008d02:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8008d04:	6823      	ldr	r3, [r4, #0]
 8008d06:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8008d0a:	05d2      	lsls	r2, r2, #23
 8008d0c:	d556      	bpl.n	8008dbc <HAL_DSI_Init+0x150>
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8008d0e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8008d12:	f246 10a8 	movw	r0, #25000	; 0x61a8
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8008d16:	6861      	ldr	r1, [r4, #4]
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8008d18:	f042 0206 	orr.w	r2, r2, #6
 8008d1c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8008d20:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8008d24:	f022 0203 	bic.w	r2, r2, #3
 8008d28:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8008d2c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8008d30:	430a      	orrs	r2, r1
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8008d32:	68e1      	ldr	r1, [r4, #12]
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8008d34:	f042 0201 	orr.w	r2, r2, #1
 8008d38:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8008d3c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8008d40:	f022 0203 	bic.w	r2, r2, #3
 8008d44:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8008d48:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8008d4c:	430a      	orrs	r2, r1
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8008d4e:	68a1      	ldr	r1, [r4, #8]
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8008d50:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8008d54:	689a      	ldr	r2, [r3, #8]
 8008d56:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008d5a:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8008d5c:	689a      	ldr	r2, [r3, #8]
 8008d5e:	430a      	orrs	r2, r1
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8008d60:	491b      	ldr	r1, [pc, #108]	; (8008dd0 <HAL_DSI_Init+0x164>)
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8008d62:	609a      	str	r2, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8008d64:	686a      	ldr	r2, [r5, #4]
 8008d66:	2a01      	cmp	r2, #1
 8008d68:	bf38      	it	cc
 8008d6a:	2201      	movcc	r2, #1
 8008d6c:	434a      	muls	r2, r1
 8008d6e:	68a9      	ldr	r1, [r5, #8]
 8008d70:	f001 0103 	and.w	r1, r1, #3
 8008d74:	408a      	lsls	r2, r1
 8008d76:	6829      	ldr	r1, [r5, #0]
 8008d78:	4341      	muls	r1, r0
  hdsi->Instance->IER[0U] = 0U;
 8008d7a:	2000      	movs	r0, #0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8008d7c:	fbb2 f2f1 	udiv	r2, r2, r1
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8008d80:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8008d84:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8008d88:	f8c3 1418 	str.w	r1, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8008d8c:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8008d90:	430a      	orrs	r2, r1
 8008d92:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->IER[0U] = 0U;
 8008d96:	f8c3 00c4 	str.w	r0, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8008d9a:	f8c3 00c8 	str.w	r0, [r3, #200]	; 0xc8
  hdsi->State = HAL_DSI_STATE_READY;
 8008d9e:	2301      	movs	r3, #1
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8008da0:	6160      	str	r0, [r4, #20]
  hdsi->ErrorMsk = 0U;
 8008da2:	61a0      	str	r0, [r4, #24]
  hdsi->State = HAL_DSI_STATE_READY;
 8008da4:	7463      	strb	r3, [r4, #17]
  return HAL_OK;
 8008da6:	e007      	b.n	8008db8 <HAL_DSI_Init+0x14c>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8008da8:	f7ff f894 	bl	8007ed4 <HAL_GetTick>
 8008dac:	1b80      	subs	r0, r0, r6
 8008dae:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8008db2:	f67f af79 	bls.w	8008ca8 <HAL_DSI_Init+0x3c>
      return HAL_TIMEOUT;
 8008db6:	2003      	movs	r0, #3
}
 8008db8:	b002      	add	sp, #8
 8008dba:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8008dbc:	f7ff f88a 	bl	8007ed4 <HAL_GetTick>
 8008dc0:	1b80      	subs	r0, r0, r6
 8008dc2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8008dc6:	d99d      	bls.n	8008d04 <HAL_DSI_Init+0x98>
 8008dc8:	e7f5      	b.n	8008db6 <HAL_DSI_Init+0x14a>
    return HAL_ERROR;
 8008dca:	2001      	movs	r0, #1
 8008dcc:	e7f4      	b.n	8008db8 <HAL_DSI_Init+0x14c>
 8008dce:	bf00      	nop
 8008dd0:	003d0900 	.word	0x003d0900

08008dd4 <HAL_DSI_ErrorCallback>:
 8008dd4:	4770      	bx	lr

08008dd6 <HAL_DSI_IRQHandler>:
{
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8008dd6:	6803      	ldr	r3, [r0, #0]
 8008dd8:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8008ddc:	07d1      	lsls	r1, r2, #31
{
 8008dde:	b510      	push	{r4, lr}
 8008de0:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8008de2:	d508      	bpl.n	8008df6 <HAL_DSI_IRQHandler+0x20>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8008de4:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8008de8:	07d2      	lsls	r2, r2, #31
 8008dea:	d504      	bpl.n	8008df6 <HAL_DSI_IRQHandler+0x20>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8008dec:	2201      	movs	r2, #1
 8008dee:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 8008df2:	f7f8 f933 	bl	800105c <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8008df6:	6823      	ldr	r3, [r4, #0]
 8008df8:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8008dfc:	0791      	lsls	r1, r2, #30
 8008dfe:	d509      	bpl.n	8008e14 <HAL_DSI_IRQHandler+0x3e>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8008e00:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8008e04:	0792      	lsls	r2, r2, #30
 8008e06:	d505      	bpl.n	8008e14 <HAL_DSI_IRQHandler+0x3e>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8008e08:	2202      	movs	r2, #2
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8008e0a:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8008e0c:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8008e10:	f7f8 f958 	bl	80010c4 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8008e14:	69a3      	ldr	r3, [r4, #24]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d04e      	beq.n	8008eb8 <HAL_DSI_IRQHandler+0xe2>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8008e1a:	6821      	ldr	r1, [r4, #0]
 8008e1c:	f8d1 20bc 	ldr.w	r2, [r1, #188]	; 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8008e20:	f8d1 30c4 	ldr.w	r3, [r1, #196]	; 0xc4
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8008e24:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8008e28:	401a      	ands	r2, r3
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8008e2a:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8008e2e:	b291      	uxth	r1, r2
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8008e30:	4003      	ands	r3, r0
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8008e32:	b119      	cbz	r1, 8008e3c <HAL_DSI_IRQHandler+0x66>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8008e34:	6961      	ldr	r1, [r4, #20]
 8008e36:	f041 0101 	orr.w	r1, r1, #1
 8008e3a:	6161      	str	r1, [r4, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8008e3c:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
 8008e40:	d003      	beq.n	8008e4a <HAL_DSI_IRQHandler+0x74>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8008e42:	6962      	ldr	r2, [r4, #20]
 8008e44:	f042 0202 	orr.w	r2, r2, #2
 8008e48:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8008e4a:	07d8      	lsls	r0, r3, #31
 8008e4c:	d503      	bpl.n	8008e56 <HAL_DSI_IRQHandler+0x80>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8008e4e:	6962      	ldr	r2, [r4, #20]
 8008e50:	f042 0204 	orr.w	r2, r2, #4
 8008e54:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8008e56:	0799      	lsls	r1, r3, #30
 8008e58:	d503      	bpl.n	8008e62 <HAL_DSI_IRQHandler+0x8c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8008e5a:	6962      	ldr	r2, [r4, #20]
 8008e5c:	f042 0208 	orr.w	r2, r2, #8
 8008e60:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8008e62:	f013 0f0c 	tst.w	r3, #12
 8008e66:	d003      	beq.n	8008e70 <HAL_DSI_IRQHandler+0x9a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8008e68:	6962      	ldr	r2, [r4, #20]
 8008e6a:	f042 0210 	orr.w	r2, r2, #16
 8008e6e:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8008e70:	06da      	lsls	r2, r3, #27
 8008e72:	d503      	bpl.n	8008e7c <HAL_DSI_IRQHandler+0xa6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8008e74:	6962      	ldr	r2, [r4, #20]
 8008e76:	f042 0220 	orr.w	r2, r2, #32
 8008e7a:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8008e7c:	0698      	lsls	r0, r3, #26
 8008e7e:	d503      	bpl.n	8008e88 <HAL_DSI_IRQHandler+0xb2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8008e80:	6962      	ldr	r2, [r4, #20]
 8008e82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e86:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8008e88:	0659      	lsls	r1, r3, #25
 8008e8a:	d503      	bpl.n	8008e94 <HAL_DSI_IRQHandler+0xbe>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8008e8c:	6962      	ldr	r2, [r4, #20]
 8008e8e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008e92:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8008e94:	061a      	lsls	r2, r3, #24
 8008e96:	d503      	bpl.n	8008ea0 <HAL_DSI_IRQHandler+0xca>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8008e98:	6962      	ldr	r2, [r4, #20]
 8008e9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008e9e:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8008ea0:	f413 5ff8 	tst.w	r3, #7936	; 0x1f00
 8008ea4:	d003      	beq.n	8008eae <HAL_DSI_IRQHandler+0xd8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8008ea6:	6963      	ldr	r3, [r4, #20]
 8008ea8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008eac:	6163      	str	r3, [r4, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8008eae:	6963      	ldr	r3, [r4, #20]
 8008eb0:	b113      	cbz	r3, 8008eb8 <HAL_DSI_IRQHandler+0xe2>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 8008eb2:	4620      	mov	r0, r4
 8008eb4:	f7ff ff8e 	bl	8008dd4 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8008eb8:	bd10      	pop	{r4, pc}

08008eba <HAL_DSI_SetGenericVCID>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008eba:	7c03      	ldrb	r3, [r0, #16]
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	d00b      	beq.n	8008ed8 <HAL_DSI_SetGenericVCID+0x1e>

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8008ec0:	6803      	ldr	r3, [r0, #0]
 8008ec2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ec4:	f022 0203 	bic.w	r2, r2, #3
 8008ec8:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8008eca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ecc:	4311      	orrs	r1, r2
 8008ece:	6319      	str	r1, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8008ed8:	2002      	movs	r0, #2
}
 8008eda:	4770      	bx	lr

08008edc <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8008edc:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008ede:	7c03      	ldrb	r3, [r0, #16]
 8008ee0:	2b01      	cmp	r3, #1
 8008ee2:	d06a      	beq.n	8008fba <HAL_DSI_ConfigAdaptedCommandMode+0xde>
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8008ee4:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8008ee6:	680c      	ldr	r4, [r1, #0]
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8008ee8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008eea:	f042 0201 	orr.w	r2, r2, #1
 8008eee:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8008ef0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8008ef4:	f022 0201 	bic.w	r2, r2, #1
 8008ef8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8008efc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8008f00:	f042 0201 	orr.w	r2, r2, #1
 8008f04:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8008f08:	68da      	ldr	r2, [r3, #12]
 8008f0a:	f022 0203 	bic.w	r2, r2, #3
 8008f0e:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8008f10:	68da      	ldr	r2, [r3, #12]
 8008f12:	4322      	orrs	r2, r4
 8008f14:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8008f16:	695a      	ldr	r2, [r3, #20]
 8008f18:	f022 0207 	bic.w	r2, r2, #7
 8008f1c:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8008f1e:	695c      	ldr	r4, [r3, #20]
 8008f20:	e9d1 5206 	ldrd	r5, r2, [r1, #24]
 8008f24:	432a      	orrs	r2, r5
 8008f26:	694d      	ldr	r5, [r1, #20]
 8008f28:	432a      	orrs	r2, r5

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8008f2a:	684d      	ldr	r5, [r1, #4]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8008f2c:	4322      	orrs	r2, r4
 8008f2e:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8008f30:	691a      	ldr	r2, [r3, #16]
 8008f32:	f022 020f 	bic.w	r2, r2, #15
 8008f36:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8008f38:	691c      	ldr	r4, [r3, #16]
 8008f3a:	432c      	orrs	r4, r5
 8008f3c:	611c      	str	r4, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8008f3e:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
 8008f42:	f024 040e 	bic.w	r4, r4, #14
 8008f46:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8008f4a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8008f4e:	688c      	ldr	r4, [r1, #8]
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8008f50:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 8008f54:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8008f58:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008f5a:	0c12      	lsrs	r2, r2, #16
 8008f5c:	0412      	lsls	r2, r2, #16
 8008f5e:	665a      	str	r2, [r3, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8008f60:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008f62:	4322      	orrs	r2, r4
 8008f64:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8008f66:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8008f6a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8008f6e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8008f72:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
 8008f76:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
 8008f7a:	432a      	orrs	r2, r5
 8008f7c:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 8008f7e:	432a      	orrs	r2, r5
 8008f80:	6a0d      	ldr	r5, [r1, #32]
                            CmdCfg->VSyncPol);

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8008f82:	6a89      	ldr	r1, [r1, #40]	; 0x28
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8008f84:	432a      	orrs	r2, r5
 8008f86:	4322      	orrs	r2, r4
 8008f88:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8008f8c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8008f8e:	f022 0201 	bic.w	r2, r2, #1
 8008f92:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8008f94:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8008f96:	430a      	orrs	r2, r1
 8008f98:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8008f9a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8008f9e:	f042 0201 	orr.w	r2, r2, #1
 8008fa2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8008fa6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8008faa:	f042 0202 	orr.w	r2, r2, #2
 8008fae:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8008fb6:	4618      	mov	r0, r3
}
 8008fb8:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8008fba:	2002      	movs	r0, #2
 8008fbc:	e7fc      	b.n	8008fb8 <HAL_DSI_ConfigAdaptedCommandMode+0xdc>
	...

08008fc0 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8008fc0:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008fc2:	7c03      	ldrb	r3, [r0, #16]
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d02a      	beq.n	800901e <HAL_DSI_ConfigCommand+0x5e>
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8008fc8:	6802      	ldr	r2, [r0, #0]
 8008fca:	4b16      	ldr	r3, [pc, #88]	; (8009024 <HAL_DSI_ConfigCommand+0x64>)
 8008fcc:	6e94      	ldr	r4, [r2, #104]	; 0x68
 8008fce:	4023      	ands	r3, r4
 8008fd0:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8008fd2:	6e94      	ldr	r4, [r2, #104]	; 0x68
 8008fd4:	e9d1 3500 	ldrd	r3, r5, [r1]
 8008fd8:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteOneP | \
 8008fda:	688d      	ldr	r5, [r1, #8]
 8008fdc:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteTwoP | \
 8008fde:	68cd      	ldr	r5, [r1, #12]
 8008fe0:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadNoP   | \
 8008fe2:	690d      	ldr	r5, [r1, #16]
 8008fe4:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadOneP  | \
 8008fe6:	694d      	ldr	r5, [r1, #20]
 8008fe8:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadTwoP  | \
 8008fea:	698d      	ldr	r5, [r1, #24]
 8008fec:	432b      	orrs	r3, r5
                           LPCmd->LPGenLongWrite      | \
 8008fee:	69cd      	ldr	r5, [r1, #28]
 8008ff0:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteNoP  | \
 8008ff2:	6a0d      	ldr	r5, [r1, #32]
 8008ff4:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteOneP | \
 8008ff6:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 8008ff8:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortReadNoP   | \
 8008ffa:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8008ffc:	432b      	orrs	r3, r5
                           LPCmd->LPDcsLongWrite      | \
 8008ffe:	6acd      	ldr	r5, [r1, #44]	; 0x2c
                           LPCmd->LPMaxReadPacket);

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8009000:	6b09      	ldr	r1, [r1, #48]	; 0x30
                           LPCmd->LPDcsLongWrite      | \
 8009002:	432b      	orrs	r3, r5
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8009004:	4323      	orrs	r3, r4
 8009006:	6693      	str	r3, [r2, #104]	; 0x68
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8009008:	6e93      	ldr	r3, [r2, #104]	; 0x68
 800900a:	f023 0302 	bic.w	r3, r3, #2
 800900e:	6693      	str	r3, [r2, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8009010:	6e93      	ldr	r3, [r2, #104]	; 0x68
 8009012:	430b      	orrs	r3, r1
 8009014:	6693      	str	r3, [r2, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009016:	2300      	movs	r3, #0
 8009018:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800901a:	4618      	mov	r0, r3
}
 800901c:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800901e:	2002      	movs	r0, #2
 8009020:	e7fc      	b.n	800901c <HAL_DSI_ConfigCommand+0x5c>
 8009022:	bf00      	nop
 8009024:	fef080ff 	.word	0xfef080ff

08009028 <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8009028:	7c03      	ldrb	r3, [r0, #16]
 800902a:	2b01      	cmp	r3, #1
 800902c:	d00b      	beq.n	8009046 <HAL_DSI_ConfigFlowControl+0x1e>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 800902e:	6803      	ldr	r3, [r0, #0]
 8009030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009032:	f022 021f 	bic.w	r2, r2, #31
 8009036:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8009038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800903a:	4311      	orrs	r1, r2
 800903c:	62d9      	str	r1, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800903e:	2300      	movs	r3, #0
 8009040:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8009042:	4618      	mov	r0, r3
 8009044:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8009046:	2002      	movs	r0, #2
}
 8009048:	4770      	bx	lr

0800904a <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 800904a:	b530      	push	{r4, r5, lr}
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 800904c:	7c03      	ldrb	r3, [r0, #16]
 800904e:	2b01      	cmp	r3, #1
 8009050:	d035      	beq.n	80090be <HAL_DSI_ConfigPhyTimer+0x74>
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8009052:	6803      	ldr	r3, [r0, #0]
  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8009054:	e9d1 2400 	ldrd	r2, r4, [r1]
 8009058:	4294      	cmp	r4, r2
 800905a:	bf38      	it	cc
 800905c:	4614      	movcc	r4, r2
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 800905e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8009062:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8009066:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 800906a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800906e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009072:	4322      	orrs	r2, r4
 8009074:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8009078:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800907c:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8009080:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8009084:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8009088:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800908c:	0612      	lsls	r2, r2, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800908e:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8009092:	690d      	ldr	r5, [r1, #16]

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8009094:	6949      	ldr	r1, [r1, #20]
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8009096:	432a      	orrs	r2, r5
 8009098:	4322      	orrs	r2, r4
 800909a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 800909e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80090a2:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80090a6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 80090aa:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80090ae:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80090b2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80090b6:	2300      	movs	r3, #0
 80090b8:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 80090ba:	4618      	mov	r0, r3
}
 80090bc:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 80090be:	2002      	movs	r0, #2
 80090c0:	e7fc      	b.n	80090bc <HAL_DSI_ConfigPhyTimer+0x72>
	...

080090c4 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 80090c4:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 80090c6:	7c03      	ldrb	r3, [r0, #16]
 80090c8:	2b01      	cmp	r3, #1
 80090ca:	d05c      	beq.n	8009186 <HAL_DSI_ConfigHostTimeouts+0xc2>

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80090cc:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 80090ce:	680c      	ldr	r4, [r1, #0]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80090d0:	689a      	ldr	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 80090d2:	688d      	ldr	r5, [r1, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80090d4:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80090d8:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 80090da:	689a      	ldr	r2, [r3, #8]
 80090dc:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 80090e0:	684c      	ldr	r4, [r1, #4]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 80090e2:	609a      	str	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 80090e4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80090e6:	b292      	uxth	r2, r2
 80090e8:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 80090ea:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80090ec:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80090f0:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 80090f2:	4a26      	ldr	r2, [pc, #152]	; (800918c <HAL_DSI_ConfigHostTimeouts+0xc8>)
 80090f4:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 80090f6:	4014      	ands	r4, r2
 80090f8:	679c      	str	r4, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 80090fa:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 80090fc:	432c      	orrs	r4, r5

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 80090fe:	68cd      	ldr	r5, [r1, #12]
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8009100:	679c      	str	r4, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8009102:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 8009104:	4014      	ands	r4, r2
 8009106:	67dc      	str	r4, [r3, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8009108:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 800910a:	432c      	orrs	r4, r5

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800910c:	690d      	ldr	r5, [r1, #16]
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800910e:	67dc      	str	r4, [r3, #124]	; 0x7c
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8009110:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8009114:	4014      	ands	r4, r2
 8009116:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800911a:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800911e:	432c      	orrs	r4, r5

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8009120:	694d      	ldr	r5, [r1, #20]
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8009122:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8009126:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800912a:	4014      	ands	r4, r2
 800912c:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8009130:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009134:	432c      	orrs	r4, r5
 8009136:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 800913a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800913e:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 8009142:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8009146:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800914a:	698d      	ldr	r5, [r1, #24]
 800914c:	432c      	orrs	r4, r5

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 800914e:	69cd      	ldr	r5, [r1, #28]

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8009150:	6a09      	ldr	r1, [r1, #32]
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8009152:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8009156:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 800915a:	4014      	ands	r4, r2
 800915c:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8009160:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 8009164:	432c      	orrs	r4, r5
 8009166:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 800916a:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 800916e:	4022      	ands	r2, r4
 8009170:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8009174:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8009178:	430a      	orrs	r2, r1
 800917a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800917e:	2300      	movs	r3, #0
 8009180:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8009182:	4618      	mov	r0, r3
}
 8009184:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8009186:	2002      	movs	r0, #2
 8009188:	e7fc      	b.n	8009184 <HAL_DSI_ConfigHostTimeouts+0xc0>
 800918a:	bf00      	nop
 800918c:	ffff0000 	.word	0xffff0000

08009190 <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8009190:	7c03      	ldrb	r3, [r0, #16]
{
 8009192:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 8009194:	2b01      	cmp	r3, #1
 8009196:	d01c      	beq.n	80091d2 <HAL_DSI_Start+0x42>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8009198:	6802      	ldr	r2, [r0, #0]
 800919a:	2300      	movs	r3, #0
 800919c:	9300      	str	r3, [sp, #0]
 800919e:	6851      	ldr	r1, [r2, #4]
 80091a0:	f041 0101 	orr.w	r1, r1, #1
 80091a4:	6051      	str	r1, [r2, #4]
 80091a6:	6851      	ldr	r1, [r2, #4]
 80091a8:	f001 0101 	and.w	r1, r1, #1
 80091ac:	9100      	str	r1, [sp, #0]
 80091ae:	9900      	ldr	r1, [sp, #0]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80091b0:	9301      	str	r3, [sp, #4]
 80091b2:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
 80091b6:	f041 0108 	orr.w	r1, r1, #8
 80091ba:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
 80091be:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80091c2:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 80091c4:	4618      	mov	r0, r3
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80091c6:	f002 0208 	and.w	r2, r2, #8
 80091ca:	9201      	str	r2, [sp, #4]
 80091cc:	9a01      	ldr	r2, [sp, #4]
}
 80091ce:	b002      	add	sp, #8
 80091d0:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 80091d2:	2002      	movs	r0, #2
 80091d4:	e7fb      	b.n	80091ce <HAL_DSI_Start+0x3e>

080091d6 <HAL_DSI_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Refresh(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80091d6:	7c03      	ldrb	r3, [r0, #16]
 80091d8:	2b01      	cmp	r3, #1
 80091da:	d00a      	beq.n	80091f2 <HAL_DSI_Refresh+0x1c>

  /* Update the display */
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 80091dc:	6802      	ldr	r2, [r0, #0]
 80091de:	f8d2 3404 	ldr.w	r3, [r2, #1028]	; 0x404
 80091e2:	f043 0304 	orr.w	r3, r3, #4
 80091e6:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80091ea:	2300      	movs	r3, #0
 80091ec:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 80091ee:	4618      	mov	r0, r3
 80091f0:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 80091f2:	2002      	movs	r0, #2
}
 80091f4:	4770      	bx	lr

080091f6 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 80091f6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 80091f8:	7c05      	ldrb	r5, [r0, #16]
{
 80091fa:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 80091fc:	2d01      	cmp	r5, #1
 80091fe:	d009      	beq.n	8009214 <HAL_DSI_ShortWrite+0x1e>
 8009200:	2501      	movs	r5, #1
 8009202:	7405      	strb	r5, [r0, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8009204:	9d06      	ldr	r5, [sp, #24]
 8009206:	9500      	str	r5, [sp, #0]
 8009208:	f7ff fcac 	bl	8008b64 <DSI_ShortWrite>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800920c:	2300      	movs	r3, #0
 800920e:	7423      	strb	r3, [r4, #16]

  return status;
}
 8009210:	b003      	add	sp, #12
 8009212:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8009214:	2002      	movs	r0, #2
 8009216:	e7fb      	b.n	8009210 <HAL_DSI_ShortWrite+0x1a>

08009218 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8009218:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800921c:	461c      	mov	r4, r3
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 800921e:	7c03      	ldrb	r3, [r0, #16]
{
 8009220:	4606      	mov	r6, r0
 8009222:	460f      	mov	r7, r1
  __HAL_LOCK(hdsi);
 8009224:	2b01      	cmp	r3, #1
{
 8009226:	4615      	mov	r5, r2
 8009228:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	; 0x28
  __HAL_LOCK(hdsi);
 800922c:	d053      	beq.n	80092d6 <HAL_DSI_LongWrite+0xbe>
 800922e:	2301      	movs	r3, #1
 8009230:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8009232:	f7fe fe4f 	bl	8007ed4 <HAL_GetTick>
 8009236:	4683      	mov	fp, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8009238:	6831      	ldr	r1, [r6, #0]
 800923a:	6f4b      	ldr	r3, [r1, #116]	; 0x74
 800923c:	f013 0a01 	ands.w	sl, r3, #1
 8009240:	d01a      	beq.n	8009278 <HAL_DSI_LongWrite+0x60>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8009242:	2c03      	cmp	r4, #3
 8009244:	4620      	mov	r0, r4

  for (count = 0U; count < nbBytes; count++)
 8009246:	f04f 0200 	mov.w	r2, #0
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 800924a:	bf28      	it	cs
 800924c:	2003      	movcs	r0, #3
  for (count = 0U; count < nbBytes; count++)
 800924e:	4282      	cmp	r2, r0
 8009250:	d11e      	bne.n	8009290 <HAL_DSI_LongWrite+0x78>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
 8009252:	1aa3      	subs	r3, r4, r2
  pparams += nbBytes;
 8009254:	4442      	add	r2, r8
  hdsi->Instance->GPDR = fifoword;
 8009256:	f8c1 9070 	str.w	r9, [r1, #112]	; 0x70
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 800925a:	bb1b      	cbnz	r3, 80092a4 <HAL_DSI_LongWrite+0x8c>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 800925c:	3401      	adds	r4, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800925e:	ea45 1587 	orr.w	r5, r5, r7, lsl #6
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
 8009262:	4618      	mov	r0, r3
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8009264:	0222      	lsls	r2, r4, #8
 8009266:	0224      	lsls	r4, r4, #8
 8009268:	b292      	uxth	r2, r2
 800926a:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 800926e:	4315      	orrs	r5, r2
 8009270:	432c      	orrs	r4, r5
 8009272:	66cc      	str	r4, [r1, #108]	; 0x6c
  __HAL_UNLOCK(hdsi);
 8009274:	7433      	strb	r3, [r6, #16]
  return HAL_OK;
 8009276:	e009      	b.n	800928c <HAL_DSI_LongWrite+0x74>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8009278:	f7fe fe2c 	bl	8007ed4 <HAL_GetTick>
 800927c:	eba0 000b 	sub.w	r0, r0, fp
 8009280:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8009284:	d9d8      	bls.n	8009238 <HAL_DSI_LongWrite+0x20>
      return HAL_TIMEOUT;
 8009286:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 8009288:	f886 a010 	strb.w	sl, [r6, #16]
}
 800928c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8009290:	f818 3002 	ldrb.w	r3, [r8, r2]
 8009294:	3201      	adds	r2, #1
 8009296:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
 800929a:	fa03 f30c 	lsl.w	r3, r3, ip
 800929e:	ea49 0903 	orr.w	r9, r9, r3
  for (count = 0U; count < nbBytes; count++)
 80092a2:	e7d4      	b.n	800924e <HAL_DSI_LongWrite+0x36>
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 80092a4:	2b04      	cmp	r3, #4
    fifoword = 0U;
 80092a6:	f04f 0c00 	mov.w	ip, #0
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 80092aa:	469e      	mov	lr, r3
    for (count = 0U; count < nbBytes; count++)
 80092ac:	4660      	mov	r0, ip
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 80092ae:	bf28      	it	cs
 80092b0:	f04f 0e04 	movcs.w	lr, #4
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 80092b4:	f812 8000 	ldrb.w	r8, [r2, r0]
 80092b8:	ea4f 09c0 	mov.w	r9, r0, lsl #3
    for (count = 0U; count < nbBytes; count++)
 80092bc:	3001      	adds	r0, #1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 80092be:	fa08 f809 	lsl.w	r8, r8, r9
    for (count = 0U; count < nbBytes; count++)
 80092c2:	4586      	cmp	lr, r0
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 80092c4:	ea4c 0c08 	orr.w	ip, ip, r8
    for (count = 0U; count < nbBytes; count++)
 80092c8:	d1f4      	bne.n	80092b4 <HAL_DSI_LongWrite+0x9c>
    uicounter -= nbBytes;
 80092ca:	eba3 030e 	sub.w	r3, r3, lr
    pparams += nbBytes;
 80092ce:	4472      	add	r2, lr
    hdsi->Instance->GPDR = fifoword;
 80092d0:	f8c1 c070 	str.w	ip, [r1, #112]	; 0x70
    pparams += nbBytes;
 80092d4:	e7c1      	b.n	800925a <HAL_DSI_LongWrite+0x42>
  __HAL_LOCK(hdsi);
 80092d6:	2002      	movs	r0, #2
 80092d8:	e7d8      	b.n	800928c <HAL_DSI_LongWrite+0x74>

080092da <HAL_DSI_SetLowPowerRXFilter>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80092da:	7c03      	ldrb	r3, [r0, #16]
 80092dc:	2b01      	cmp	r3, #1
 80092de:	d010      	beq.n	8009302 <HAL_DSI_SetLowPowerRXFilter+0x28>

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 80092e0:	6803      	ldr	r3, [r0, #0]
 80092e2:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 80092e6:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 80092ea:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 80092ee:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 80092f2:	ea42 6141 	orr.w	r1, r2, r1, lsl #25
 80092f6:	f8c3 141c 	str.w	r1, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80092fa:	2300      	movs	r3, #0
 80092fc:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 80092fe:	4618      	mov	r0, r3
 8009300:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8009302:	2002      	movs	r0, #2
}
 8009304:	4770      	bx	lr
	...

08009308 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009308:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800930c:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800930e:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 80094cc <HAL_GPIO_Init+0x1c4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009312:	4a6c      	ldr	r2, [pc, #432]	; (80094c4 <HAL_GPIO_Init+0x1bc>)
    ioposition = ((uint32_t)0x01) << position;
 8009314:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009316:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 8009318:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800931a:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 800931e:	43ac      	bics	r4, r5
 8009320:	f040 80b6 	bne.w	8009490 <HAL_GPIO_Init+0x188>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009324:	684d      	ldr	r5, [r1, #4]
 8009326:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800932a:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800932c:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8009330:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009334:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8009336:	43f6      	mvns	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009338:	2f01      	cmp	r7, #1
 800933a:	d834      	bhi.n	80093a6 <HAL_GPIO_Init+0x9e>
        temp = GPIOx->OSPEEDR; 
 800933c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800933e:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 8009342:	68cf      	ldr	r7, [r1, #12]
 8009344:	fa07 f708 	lsl.w	r7, r7, r8
 8009348:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 800934c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800934e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009350:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009354:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8009358:	409f      	lsls	r7, r3
 800935a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800935e:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8009360:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009362:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8009364:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8009368:	688f      	ldr	r7, [r1, #8]
 800936a:	fa07 f708 	lsl.w	r7, r7, r8
 800936e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 8009372:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009374:	d119      	bne.n	80093aa <HAL_GPIO_Init+0xa2>
        temp = GPIOx->AFR[position >> 3];
 8009376:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800937a:	f003 0b07 	and.w	fp, r3, #7
 800937e:	f04f 0e0f 	mov.w	lr, #15
 8009382:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8009386:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 800938a:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800938e:	fa0e fe0b 	lsl.w	lr, lr, fp
 8009392:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8009396:	690f      	ldr	r7, [r1, #16]
 8009398:	fa07 f70b 	lsl.w	r7, r7, fp
 800939c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3] = temp;
 80093a0:	f8ca 7020 	str.w	r7, [sl, #32]
 80093a4:	e001      	b.n	80093aa <HAL_GPIO_Init+0xa2>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80093a6:	2c03      	cmp	r4, #3
 80093a8:	d1da      	bne.n	8009360 <HAL_GPIO_Init+0x58>
      temp = GPIOx->MODER;
 80093aa:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80093ac:	fa04 f408 	lsl.w	r4, r4, r8
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80093b0:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80093b4:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80093b8:	ea46 0604 	orr.w	r6, r6, r4
      GPIOx->MODER = temp;
 80093bc:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80093be:	d067      	beq.n	8009490 <HAL_GPIO_Init+0x188>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80093c0:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 80093c4:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80093c8:	f003 0703 	and.w	r7, r3, #3
 80093cc:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80093d0:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80093d4:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80093d8:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80093da:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 80093de:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
 80093e2:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 80093e6:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 80093ea:	9401      	str	r4, [sp, #4]
 80093ec:	9c01      	ldr	r4, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80093ee:	fa0e f407 	lsl.w	r4, lr, r7
        temp = SYSCFG->EXTICR[position >> 2];
 80093f2:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80093f6:	ea28 0e04 	bic.w	lr, r8, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80093fa:	4c33      	ldr	r4, [pc, #204]	; (80094c8 <HAL_GPIO_Init+0x1c0>)
 80093fc:	42a0      	cmp	r0, r4
 80093fe:	d04e      	beq.n	800949e <HAL_GPIO_Init+0x196>
 8009400:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009404:	42a0      	cmp	r0, r4
 8009406:	d04c      	beq.n	80094a2 <HAL_GPIO_Init+0x19a>
 8009408:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800940c:	42a0      	cmp	r0, r4
 800940e:	d04a      	beq.n	80094a6 <HAL_GPIO_Init+0x19e>
 8009410:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009414:	42a0      	cmp	r0, r4
 8009416:	d048      	beq.n	80094aa <HAL_GPIO_Init+0x1a2>
 8009418:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800941c:	42a0      	cmp	r0, r4
 800941e:	d046      	beq.n	80094ae <HAL_GPIO_Init+0x1a6>
 8009420:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009424:	42a0      	cmp	r0, r4
 8009426:	d044      	beq.n	80094b2 <HAL_GPIO_Init+0x1aa>
 8009428:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800942c:	42a0      	cmp	r0, r4
 800942e:	d042      	beq.n	80094b6 <HAL_GPIO_Init+0x1ae>
 8009430:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009434:	42a0      	cmp	r0, r4
 8009436:	d040      	beq.n	80094ba <HAL_GPIO_Init+0x1b2>
 8009438:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800943c:	42a0      	cmp	r0, r4
 800943e:	d03e      	beq.n	80094be <HAL_GPIO_Init+0x1b6>
 8009440:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009444:	42a0      	cmp	r0, r4
 8009446:	bf0c      	ite	eq
 8009448:	2409      	moveq	r4, #9
 800944a:	240a      	movne	r4, #10
 800944c:	40bc      	lsls	r4, r7
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800944e:	02ef      	lsls	r7, r5, #11
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8009450:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8009454:	60b4      	str	r4, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8009456:	ea6f 060c 	mvn.w	r6, ip
        temp = EXTI->RTSR;
 800945a:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 800945c:	bf54      	ite	pl
 800945e:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8009460:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8009464:	02af      	lsls	r7, r5, #10
        EXTI->RTSR = temp;
 8009466:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 8009468:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 800946a:	bf54      	ite	pl
 800946c:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800946e:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8009472:	03af      	lsls	r7, r5, #14
        EXTI->FTSR = temp;
 8009474:	60d4      	str	r4, [r2, #12]
        temp = EXTI->EMR;
 8009476:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8009478:	bf54      	ite	pl
 800947a:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800947c:	ea4c 0404 	orrmi.w	r4, ip, r4
        EXTI->EMR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8009480:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 8009482:	6054      	str	r4, [r2, #4]
        temp = EXTI->IMR;
 8009484:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8009486:	bf54      	ite	pl
 8009488:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800948a:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 800948e:	6014      	str	r4, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8009490:	3301      	adds	r3, #1
 8009492:	2b10      	cmp	r3, #16
 8009494:	f47f af3e 	bne.w	8009314 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8009498:	b003      	add	sp, #12
 800949a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800949e:	2400      	movs	r4, #0
 80094a0:	e7d4      	b.n	800944c <HAL_GPIO_Init+0x144>
 80094a2:	2401      	movs	r4, #1
 80094a4:	e7d2      	b.n	800944c <HAL_GPIO_Init+0x144>
 80094a6:	2402      	movs	r4, #2
 80094a8:	e7d0      	b.n	800944c <HAL_GPIO_Init+0x144>
 80094aa:	2403      	movs	r4, #3
 80094ac:	e7ce      	b.n	800944c <HAL_GPIO_Init+0x144>
 80094ae:	2404      	movs	r4, #4
 80094b0:	e7cc      	b.n	800944c <HAL_GPIO_Init+0x144>
 80094b2:	2405      	movs	r4, #5
 80094b4:	e7ca      	b.n	800944c <HAL_GPIO_Init+0x144>
 80094b6:	2406      	movs	r4, #6
 80094b8:	e7c8      	b.n	800944c <HAL_GPIO_Init+0x144>
 80094ba:	2407      	movs	r4, #7
 80094bc:	e7c6      	b.n	800944c <HAL_GPIO_Init+0x144>
 80094be:	2408      	movs	r4, #8
 80094c0:	e7c4      	b.n	800944c <HAL_GPIO_Init+0x144>
 80094c2:	bf00      	nop
 80094c4:	40013c00 	.word	0x40013c00
 80094c8:	40020000 	.word	0x40020000
 80094cc:	40023800 	.word	0x40023800

080094d0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80094d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80094d4:	2200      	movs	r2, #0
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80094d6:	4c4a      	ldr	r4, [pc, #296]	; (8009600 <HAL_GPIO_DeInit+0x130>)
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80094d8:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8009608 <HAL_GPIO_DeInit+0x138>
 80094dc:	f8df a12c 	ldr.w	sl, [pc, #300]	; 800960c <HAL_GPIO_DeInit+0x13c>
 80094e0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8009610 <HAL_GPIO_DeInit+0x140>
    ioposition = ((uint32_t)0x01) << position;
 80094e4:	2301      	movs	r3, #1
 80094e6:	fa03 fe02 	lsl.w	lr, r3, r2
    if(iocurrent == ioposition)
 80094ea:	ea3e 0301 	bics.w	r3, lr, r1
    iocurrent = (GPIO_Pin) & ioposition;
 80094ee:	ea0e 0701 	and.w	r7, lr, r1
    if(iocurrent == ioposition)
 80094f2:	d16e      	bne.n	80095d2 <HAL_GPIO_DeInit+0x102>
      tmp = SYSCFG->EXTICR[position >> 2];
 80094f4:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80094f8:	f002 0c03 	and.w	ip, r2, #3
 80094fc:	260f      	movs	r6, #15
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80094fe:	4b41      	ldr	r3, [pc, #260]	; (8009604 <HAL_GPIO_DeInit+0x134>)
 8009500:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009504:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8009508:	4298      	cmp	r0, r3
 800950a:	f505 359c 	add.w	r5, r5, #79872	; 0x13800
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800950e:	fa06 f60c 	lsl.w	r6, r6, ip
      tmp = SYSCFG->EXTICR[position >> 2];
 8009512:	f8d5 8008 	ldr.w	r8, [r5, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009516:	ea06 0808 	and.w	r8, r6, r8
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800951a:	d05f      	beq.n	80095dc <HAL_GPIO_DeInit+0x10c>
 800951c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009520:	4298      	cmp	r0, r3
 8009522:	d05d      	beq.n	80095e0 <HAL_GPIO_DeInit+0x110>
 8009524:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009528:	4298      	cmp	r0, r3
 800952a:	d05b      	beq.n	80095e4 <HAL_GPIO_DeInit+0x114>
 800952c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009530:	4298      	cmp	r0, r3
 8009532:	d059      	beq.n	80095e8 <HAL_GPIO_DeInit+0x118>
 8009534:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009538:	4298      	cmp	r0, r3
 800953a:	d057      	beq.n	80095ec <HAL_GPIO_DeInit+0x11c>
 800953c:	4548      	cmp	r0, r9
 800953e:	d057      	beq.n	80095f0 <HAL_GPIO_DeInit+0x120>
 8009540:	4550      	cmp	r0, sl
 8009542:	d057      	beq.n	80095f4 <HAL_GPIO_DeInit+0x124>
 8009544:	4558      	cmp	r0, fp
 8009546:	d057      	beq.n	80095f8 <HAL_GPIO_DeInit+0x128>
 8009548:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800954c:	4298      	cmp	r0, r3
 800954e:	d055      	beq.n	80095fc <HAL_GPIO_DeInit+0x12c>
 8009550:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009554:	4298      	cmp	r0, r3
 8009556:	bf0c      	ite	eq
 8009558:	2309      	moveq	r3, #9
 800955a:	230a      	movne	r3, #10
 800955c:	fa03 f30c 	lsl.w	r3, r3, ip
 8009560:	4543      	cmp	r3, r8
 8009562:	d113      	bne.n	800958c <HAL_GPIO_DeInit+0xbc>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8009564:	6823      	ldr	r3, [r4, #0]
 8009566:	ea23 0307 	bic.w	r3, r3, r7
 800956a:	6023      	str	r3, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800956c:	6863      	ldr	r3, [r4, #4]
 800956e:	ea23 0307 	bic.w	r3, r3, r7
 8009572:	6063      	str	r3, [r4, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8009574:	68e3      	ldr	r3, [r4, #12]
 8009576:	ea23 0307 	bic.w	r3, r3, r7
 800957a:	60e3      	str	r3, [r4, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800957c:	68a3      	ldr	r3, [r4, #8]
 800957e:	ea23 0307 	bic.w	r3, r3, r7
 8009582:	60a3      	str	r3, [r4, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8009584:	68ab      	ldr	r3, [r5, #8]
 8009586:	ea23 0306 	bic.w	r3, r3, r6
 800958a:	60ab      	str	r3, [r5, #8]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800958c:	2603      	movs	r6, #3
 800958e:	0053      	lsls	r3, r2, #1
 8009590:	6805      	ldr	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8009592:	f002 0c07 	and.w	ip, r2, #7
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8009596:	fa06 f303 	lsl.w	r3, r6, r3
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800959a:	270f      	movs	r7, #15
 800959c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80095a0:	ea25 0503 	bic.w	r5, r5, r3
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80095a4:	fa07 f70c 	lsl.w	r7, r7, ip
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80095a8:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80095aa:	fa22 f506 	lsr.w	r5, r2, r6
 80095ae:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80095b2:	6a2e      	ldr	r6, [r5, #32]
 80095b4:	ea26 0707 	bic.w	r7, r6, r7
 80095b8:	622f      	str	r7, [r5, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80095ba:	68c5      	ldr	r5, [r0, #12]
 80095bc:	ea25 0503 	bic.w	r5, r5, r3
 80095c0:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80095c2:	6845      	ldr	r5, [r0, #4]
 80095c4:	ea25 050e 	bic.w	r5, r5, lr
 80095c8:	6045      	str	r5, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80095ca:	6885      	ldr	r5, [r0, #8]
 80095cc:	ea25 0303 	bic.w	r3, r5, r3
 80095d0:	6083      	str	r3, [r0, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 80095d2:	3201      	adds	r2, #1
 80095d4:	2a10      	cmp	r2, #16
 80095d6:	d185      	bne.n	80094e4 <HAL_GPIO_DeInit+0x14>
    }
  }
}
 80095d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80095dc:	2300      	movs	r3, #0
 80095de:	e7bd      	b.n	800955c <HAL_GPIO_DeInit+0x8c>
 80095e0:	2301      	movs	r3, #1
 80095e2:	e7bb      	b.n	800955c <HAL_GPIO_DeInit+0x8c>
 80095e4:	2302      	movs	r3, #2
 80095e6:	e7b9      	b.n	800955c <HAL_GPIO_DeInit+0x8c>
 80095e8:	2303      	movs	r3, #3
 80095ea:	e7b7      	b.n	800955c <HAL_GPIO_DeInit+0x8c>
 80095ec:	2304      	movs	r3, #4
 80095ee:	e7b5      	b.n	800955c <HAL_GPIO_DeInit+0x8c>
 80095f0:	2305      	movs	r3, #5
 80095f2:	e7b3      	b.n	800955c <HAL_GPIO_DeInit+0x8c>
 80095f4:	2306      	movs	r3, #6
 80095f6:	e7b1      	b.n	800955c <HAL_GPIO_DeInit+0x8c>
 80095f8:	2307      	movs	r3, #7
 80095fa:	e7af      	b.n	800955c <HAL_GPIO_DeInit+0x8c>
 80095fc:	2308      	movs	r3, #8
 80095fe:	e7ad      	b.n	800955c <HAL_GPIO_DeInit+0x8c>
 8009600:	40013c00 	.word	0x40013c00
 8009604:	40020000 	.word	0x40020000
 8009608:	40021400 	.word	0x40021400
 800960c:	40021800 	.word	0x40021800
 8009610:	40021c00 	.word	0x40021c00

08009614 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009614:	6903      	ldr	r3, [r0, #16]
 8009616:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8009618:	bf14      	ite	ne
 800961a:	2001      	movne	r0, #1
 800961c:	2000      	moveq	r0, #0
 800961e:	4770      	bx	lr

08009620 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009620:	b10a      	cbz	r2, 8009626 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8009622:	6181      	str	r1, [r0, #24]
  }
}
 8009624:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8009626:	0409      	lsls	r1, r1, #16
 8009628:	e7fb      	b.n	8009622 <HAL_GPIO_WritePin+0x2>

0800962a <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800962a:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800962c:	ea01 0203 	and.w	r2, r1, r3
 8009630:	ea21 0103 	bic.w	r1, r1, r3
 8009634:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009638:	6181      	str	r1, [r0, #24]
}
 800963a:	4770      	bx	lr

0800963c <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800963c:	6803      	ldr	r3, [r0, #0]
 800963e:	699a      	ldr	r2, [r3, #24]
 8009640:	0791      	lsls	r1, r2, #30
 8009642:	d501      	bpl.n	8009648 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009644:	2200      	movs	r2, #0
 8009646:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009648:	699a      	ldr	r2, [r3, #24]
 800964a:	07d2      	lsls	r2, r2, #31
 800964c:	d403      	bmi.n	8009656 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800964e:	699a      	ldr	r2, [r3, #24]
 8009650:	f042 0201 	orr.w	r2, r2, #1
 8009654:	619a      	str	r2, [r3, #24]
  }
}
 8009656:	4770      	bx	lr

08009658 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009658:	b530      	push	{r4, r5, lr}
 800965a:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800965c:	f3c1 0109 	ubfx	r1, r1, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009660:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009662:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 8009664:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009666:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 800966a:	4a05      	ldr	r2, [pc, #20]	; (8009680 <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800966c:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 800966e:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009672:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 8009676:	ea20 0002 	bic.w	r0, r0, r2
 800967a:	4303      	orrs	r3, r0
 800967c:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800967e:	bd30      	pop	{r4, r5, pc}
 8009680:	03ff63ff 	.word	0x03ff63ff

08009684 <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 8009684:	6803      	ldr	r3, [r0, #0]
{
 8009686:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 800968a:	699c      	ldr	r4, [r3, #24]
{
 800968c:	4605      	mov	r5, r0
 800968e:	460f      	mov	r7, r1
 8009690:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009692:	f014 0410 	ands.w	r4, r4, #16
 8009696:	d070      	beq.n	800977a <I2C_IsErrorOccurred+0xf6>
  uint32_t error_code = 0;
 8009698:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800969a:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 800969c:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800969e:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80096a0:	682b      	ldr	r3, [r5, #0]
 80096a2:	699a      	ldr	r2, [r3, #24]
 80096a4:	0692      	lsls	r2, r2, #26
 80096a6:	d462      	bmi.n	800976e <I2C_IsErrorOccurred+0xea>
 80096a8:	f1b8 0f00 	cmp.w	r8, #0
 80096ac:	d036      	beq.n	800971c <I2C_IsErrorOccurred+0x98>
    error_code |= HAL_I2C_ERROR_AF;
 80096ae:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 80096b2:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 80096b4:	682b      	ldr	r3, [r5, #0]
 80096b6:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80096b8:	05d6      	lsls	r6, r2, #23
 80096ba:	d505      	bpl.n	80096c8 <I2C_IsErrorOccurred+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80096bc:	f44f 7180 	mov.w	r1, #256	; 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 80096c0:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 80096c4:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80096c6:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80096c8:	0551      	lsls	r1, r2, #21
 80096ca:	d505      	bpl.n	80096d8 <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80096cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 80096d0:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 80096d4:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80096d6:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80096d8:	0592      	lsls	r2, r2, #22
 80096da:	d550      	bpl.n	800977e <I2C_IsErrorOccurred+0xfa>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80096dc:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 80096e0:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80096e4:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80096e6:	4628      	mov	r0, r5
 80096e8:	f7ff ffa8 	bl	800963c <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80096ec:	682a      	ldr	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 80096ee:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 80096f0:	6853      	ldr	r3, [r2, #4]
 80096f2:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80096f6:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80096fa:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80096fe:	f023 0301 	bic.w	r3, r3, #1
 8009702:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8009704:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8009706:	431c      	orrs	r4, r3
    hi2c->State = HAL_I2C_STATE_READY;
 8009708:	2320      	movs	r3, #32
    hi2c->ErrorCode |= error_code;
 800970a:	646c      	str	r4, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800970c:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009710:	2300      	movs	r3, #0
 8009712:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8009716:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 800971a:	e032      	b.n	8009782 <I2C_IsErrorOccurred+0xfe>
      if (Timeout != HAL_MAX_DELAY)
 800971c:	1c7a      	adds	r2, r7, #1
 800971e:	d0c0      	beq.n	80096a2 <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009720:	f7fe fbd8 	bl	8007ed4 <HAL_GetTick>
 8009724:	1b80      	subs	r0, r0, r6
 8009726:	42b8      	cmp	r0, r7
 8009728:	d801      	bhi.n	800972e <I2C_IsErrorOccurred+0xaa>
 800972a:	2f00      	cmp	r7, #0
 800972c:	d1b8      	bne.n	80096a0 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800972e:	682b      	ldr	r3, [r5, #0]
 8009730:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 8009732:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009736:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 8009738:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800973a:	0400      	lsls	r0, r0, #16
 800973c:	d50a      	bpl.n	8009754 <I2C_IsErrorOccurred+0xd0>
 800973e:	0448      	lsls	r0, r1, #17
 8009740:	d408      	bmi.n	8009754 <I2C_IsErrorOccurred+0xd0>
              (tmp1 != I2C_CR2_STOP) && \
 8009742:	2a20      	cmp	r2, #32
 8009744:	d006      	beq.n	8009754 <I2C_IsErrorOccurred+0xd0>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009746:	685a      	ldr	r2, [r3, #4]
 8009748:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800974c:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800974e:	f7fe fbc1 	bl	8007ed4 <HAL_GetTick>
 8009752:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009754:	682b      	ldr	r3, [r5, #0]
 8009756:	699b      	ldr	r3, [r3, #24]
 8009758:	0699      	lsls	r1, r3, #26
 800975a:	d4a1      	bmi.n	80096a0 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800975c:	f7fe fbba 	bl	8007ed4 <HAL_GetTick>
 8009760:	1b80      	subs	r0, r0, r6
 8009762:	2819      	cmp	r0, #25
 8009764:	d9f6      	bls.n	8009754 <I2C_IsErrorOccurred+0xd0>
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8009766:	2420      	movs	r4, #32
              status = HAL_ERROR;
 8009768:	f04f 0801 	mov.w	r8, #1
 800976c:	e798      	b.n	80096a0 <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 800976e:	f1b8 0f00 	cmp.w	r8, #0
 8009772:	d19c      	bne.n	80096ae <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009774:	2220      	movs	r2, #32
 8009776:	61da      	str	r2, [r3, #28]
 8009778:	e799      	b.n	80096ae <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 800977a:	4620      	mov	r0, r4
 800977c:	e79a      	b.n	80096b4 <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 800977e:	2800      	cmp	r0, #0
 8009780:	d1b1      	bne.n	80096e6 <I2C_IsErrorOccurred+0x62>
}
 8009782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009786 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8009786:	b570      	push	{r4, r5, r6, lr}
 8009788:	4604      	mov	r4, r0
 800978a:	460d      	mov	r5, r1
 800978c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800978e:	6823      	ldr	r3, [r4, #0]
 8009790:	699b      	ldr	r3, [r3, #24]
 8009792:	079b      	lsls	r3, r3, #30
 8009794:	d501      	bpl.n	800979a <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8009796:	2000      	movs	r0, #0
}
 8009798:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800979a:	4632      	mov	r2, r6
 800979c:	4629      	mov	r1, r5
 800979e:	4620      	mov	r0, r4
 80097a0:	f7ff ff70 	bl	8009684 <I2C_IsErrorOccurred>
 80097a4:	b9a0      	cbnz	r0, 80097d0 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 80097a6:	1c6a      	adds	r2, r5, #1
 80097a8:	d0f1      	beq.n	800978e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80097aa:	f7fe fb93 	bl	8007ed4 <HAL_GetTick>
 80097ae:	1b80      	subs	r0, r0, r6
 80097b0:	42a8      	cmp	r0, r5
 80097b2:	d801      	bhi.n	80097b8 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80097b4:	2d00      	cmp	r5, #0
 80097b6:	d1ea      	bne.n	800978e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80097b8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80097ba:	f043 0320 	orr.w	r3, r3, #32
 80097be:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80097c0:	2320      	movs	r3, #32
 80097c2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80097c6:	2300      	movs	r3, #0
 80097c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80097cc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80097d0:	2001      	movs	r0, #1
 80097d2:	e7e1      	b.n	8009798 <I2C_WaitOnTXISFlagUntilTimeout+0x12>

080097d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80097d4:	b570      	push	{r4, r5, r6, lr}
 80097d6:	4604      	mov	r4, r0
 80097d8:	460d      	mov	r5, r1
 80097da:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80097dc:	6823      	ldr	r3, [r4, #0]
 80097de:	699b      	ldr	r3, [r3, #24]
 80097e0:	075b      	lsls	r3, r3, #29
 80097e2:	d40e      	bmi.n	8009802 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80097e4:	4632      	mov	r2, r6
 80097e6:	4629      	mov	r1, r5
 80097e8:	4620      	mov	r0, r4
 80097ea:	f7ff ff4b 	bl	8009684 <I2C_IsErrorOccurred>
 80097ee:	bb28      	cbnz	r0, 800983c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80097f0:	6823      	ldr	r3, [r4, #0]
 80097f2:	699a      	ldr	r2, [r3, #24]
 80097f4:	0691      	lsls	r1, r2, #26
 80097f6:	d523      	bpl.n	8009840 <I2C_WaitOnRXNEFlagUntilTimeout+0x6c>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80097f8:	699a      	ldr	r2, [r3, #24]
 80097fa:	0752      	lsls	r2, r2, #29
 80097fc:	d503      	bpl.n	8009806 <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
 80097fe:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8009800:	b10a      	cbz	r2, 8009806 <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
        return HAL_OK;
 8009802:	2000      	movs	r0, #0
}
 8009804:	bd70      	pop	{r4, r5, r6, pc}
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009806:	699a      	ldr	r2, [r3, #24]
 8009808:	f012 0210 	ands.w	r2, r2, #16
 800980c:	d002      	beq.n	8009814 <I2C_WaitOnRXNEFlagUntilTimeout+0x40>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800980e:	2210      	movs	r2, #16
 8009810:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009812:	2204      	movs	r2, #4
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009814:	2120      	movs	r1, #32
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009816:	6462      	str	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009818:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 800981a:	685a      	ldr	r2, [r3, #4]
 800981c:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8009820:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8009824:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8009828:	f022 0201 	bic.w	r2, r2, #1
 800982c:	605a      	str	r2, [r3, #4]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800982e:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8009830:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009834:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8009838:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800983c:	2001      	movs	r0, #1
 800983e:	e7e1      	b.n	8009804 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009840:	f7fe fb48 	bl	8007ed4 <HAL_GetTick>
 8009844:	1b80      	subs	r0, r0, r6
 8009846:	42a8      	cmp	r0, r5
 8009848:	d801      	bhi.n	800984e <I2C_WaitOnRXNEFlagUntilTimeout+0x7a>
 800984a:	2d00      	cmp	r5, #0
 800984c:	d1c6      	bne.n	80097dc <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800984e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009850:	f043 0320 	orr.w	r3, r3, #32
 8009854:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8009856:	2320      	movs	r3, #32
 8009858:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 800985c:	2300      	movs	r3, #0
 800985e:	e7eb      	b.n	8009838 <I2C_WaitOnRXNEFlagUntilTimeout+0x64>

08009860 <I2C_WaitOnFlagUntilTimeout>:
{
 8009860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009864:	9f06      	ldr	r7, [sp, #24]
 8009866:	4604      	mov	r4, r0
 8009868:	4688      	mov	r8, r1
 800986a:	4616      	mov	r6, r2
 800986c:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800986e:	6822      	ldr	r2, [r4, #0]
 8009870:	6993      	ldr	r3, [r2, #24]
 8009872:	ea38 0303 	bics.w	r3, r8, r3
 8009876:	bf0c      	ite	eq
 8009878:	2301      	moveq	r3, #1
 800987a:	2300      	movne	r3, #0
 800987c:	42b3      	cmp	r3, r6
 800987e:	d001      	beq.n	8009884 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8009880:	2000      	movs	r0, #0
 8009882:	e015      	b.n	80098b0 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8009884:	1c6b      	adds	r3, r5, #1
 8009886:	d0f3      	beq.n	8009870 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009888:	f7fe fb24 	bl	8007ed4 <HAL_GetTick>
 800988c:	1bc0      	subs	r0, r0, r7
 800988e:	42a8      	cmp	r0, r5
 8009890:	d801      	bhi.n	8009896 <I2C_WaitOnFlagUntilTimeout+0x36>
 8009892:	2d00      	cmp	r5, #0
 8009894:	d1eb      	bne.n	800986e <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009896:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8009898:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800989a:	f043 0320 	orr.w	r3, r3, #32
 800989e:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80098a0:	2320      	movs	r3, #32
 80098a2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80098a6:	2300      	movs	r3, #0
 80098a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80098ac:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80098b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080098b4 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80098b4:	b570      	push	{r4, r5, r6, lr}
 80098b6:	4604      	mov	r4, r0
 80098b8:	460d      	mov	r5, r1
 80098ba:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80098bc:	6823      	ldr	r3, [r4, #0]
 80098be:	699b      	ldr	r3, [r3, #24]
 80098c0:	069b      	lsls	r3, r3, #26
 80098c2:	d501      	bpl.n	80098c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 80098c4:	2000      	movs	r0, #0
}
 80098c6:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80098c8:	4632      	mov	r2, r6
 80098ca:	4629      	mov	r1, r5
 80098cc:	4620      	mov	r0, r4
 80098ce:	f7ff fed9 	bl	8009684 <I2C_IsErrorOccurred>
 80098d2:	b990      	cbnz	r0, 80098fa <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098d4:	f7fe fafe 	bl	8007ed4 <HAL_GetTick>
 80098d8:	1b80      	subs	r0, r0, r6
 80098da:	42a8      	cmp	r0, r5
 80098dc:	d801      	bhi.n	80098e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 80098de:	2d00      	cmp	r5, #0
 80098e0:	d1ec      	bne.n	80098bc <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80098e2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80098e4:	f043 0320 	orr.w	r3, r3, #32
 80098e8:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80098ea:	2320      	movs	r3, #32
 80098ec:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80098f0:	2300      	movs	r3, #0
 80098f2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80098f6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80098fa:	2001      	movs	r0, #1
 80098fc:	e7e3      	b.n	80098c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

080098fe <HAL_I2C_Init>:
{
 80098fe:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8009900:	4604      	mov	r4, r0
 8009902:	2800      	cmp	r0, #0
 8009904:	d04a      	beq.n	800999c <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009906:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800990a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800990e:	b91b      	cbnz	r3, 8009918 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8009910:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8009914:	f7fb f94c 	bl	8004bb0 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8009918:	2324      	movs	r3, #36	; 0x24
 800991a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800991e:	6823      	ldr	r3, [r4, #0]
 8009920:	681a      	ldr	r2, [r3, #0]
 8009922:	f022 0201 	bic.w	r2, r2, #1
 8009926:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009928:	6862      	ldr	r2, [r4, #4]
 800992a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800992e:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009930:	689a      	ldr	r2, [r3, #8]
 8009932:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009936:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009938:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800993c:	2901      	cmp	r1, #1
 800993e:	d124      	bne.n	800998a <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009940:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009944:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009946:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009948:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800994a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800994e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009952:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009954:	68da      	ldr	r2, [r3, #12]
 8009956:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800995a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800995c:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8009960:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009962:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009964:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8009968:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800996a:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 800996e:	430a      	orrs	r2, r1
 8009970:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8009972:	681a      	ldr	r2, [r3, #0]
 8009974:	f042 0201 	orr.w	r2, r2, #1
 8009978:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800997a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800997c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800997e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009982:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009984:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8009988:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800998a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800998e:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009990:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009992:	d1d8      	bne.n	8009946 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009994:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009998:	605a      	str	r2, [r3, #4]
 800999a:	e7d4      	b.n	8009946 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 800999c:	2001      	movs	r0, #1
 800999e:	e7f3      	b.n	8009988 <HAL_I2C_Init+0x8a>

080099a0 <HAL_I2C_DeInit>:
{
 80099a0:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80099a2:	4604      	mov	r4, r0
 80099a4:	b198      	cbz	r0, 80099ce <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 80099a6:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80099a8:	2324      	movs	r3, #36	; 0x24
 80099aa:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80099ae:	6813      	ldr	r3, [r2, #0]
 80099b0:	f023 0301 	bic.w	r3, r3, #1
 80099b4:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 80099b6:	f7fb f98f 	bl	8004cd8 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80099ba:	2000      	movs	r0, #0
 80099bc:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 80099be:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 80099c2:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80099c6:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80099c8:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 80099cc:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80099ce:	2001      	movs	r0, #1
 80099d0:	e7fc      	b.n	80099cc <HAL_I2C_DeInit+0x2c>
	...

080099d4 <HAL_I2C_Master_Transmit>:
{
 80099d4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80099d8:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80099da:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 80099de:	4604      	mov	r4, r0
 80099e0:	460e      	mov	r6, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 80099e2:	2b20      	cmp	r3, #32
{
 80099e4:	4691      	mov	r9, r2
 80099e6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 80099e8:	f040 8086 	bne.w	8009af8 <HAL_I2C_Master_Transmit+0x124>
    __HAL_LOCK(hi2c);
 80099ec:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80099f0:	2b01      	cmp	r3, #1
 80099f2:	f000 8081 	beq.w	8009af8 <HAL_I2C_Master_Transmit+0x124>
 80099f6:	f04f 0a01 	mov.w	sl, #1
 80099fa:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80099fe:	f7fe fa69 	bl	8007ed4 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009a02:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8009a04:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009a06:	9000      	str	r0, [sp, #0]
 8009a08:	4652      	mov	r2, sl
 8009a0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009a0e:	4620      	mov	r0, r4
 8009a10:	f7ff ff26 	bl	8009860 <I2C_WaitOnFlagUntilTimeout>
 8009a14:	b118      	cbz	r0, 8009a1e <HAL_I2C_Master_Transmit+0x4a>
      return HAL_ERROR;
 8009a16:	2001      	movs	r0, #1
}
 8009a18:	b002      	add	sp, #8
 8009a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009a1e:	2321      	movs	r3, #33	; 0x21
    hi2c->pBuffPtr  = pData;
 8009a20:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 8009a24:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009a26:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009a2a:	2310      	movs	r3, #16
 8009a2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009a30:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8009a32:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009a36:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009a38:	b29b      	uxth	r3, r3
 8009a3a:	2bff      	cmp	r3, #255	; 0xff
 8009a3c:	4b2f      	ldr	r3, [pc, #188]	; (8009afc <HAL_I2C_Master_Transmit+0x128>)
 8009a3e:	d926      	bls.n	8009a8e <HAL_I2C_Master_Transmit+0xba>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009a40:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009a42:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009a44:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009a46:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009a4a:	4631      	mov	r1, r6
 8009a4c:	4620      	mov	r0, r4
 8009a4e:	f7ff fe03 	bl	8009658 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009a52:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009a54:	462a      	mov	r2, r5
 8009a56:	4639      	mov	r1, r7
 8009a58:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8009a5a:	b29b      	uxth	r3, r3
 8009a5c:	b9fb      	cbnz	r3, 8009a9e <HAL_I2C_Master_Transmit+0xca>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009a5e:	f7ff ff29 	bl	80098b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009a62:	2800      	cmp	r0, #0
 8009a64:	d1d7      	bne.n	8009a16 <HAL_I2C_Master_Transmit+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009a66:	6823      	ldr	r3, [r4, #0]
 8009a68:	2120      	movs	r1, #32
 8009a6a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8009a6c:	685a      	ldr	r2, [r3, #4]
 8009a6e:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8009a72:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8009a76:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8009a7a:	f022 0201 	bic.w	r2, r2, #1
 8009a7e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8009a80:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8009a84:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009a88:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8009a8c:	e7c4      	b.n	8009a18 <HAL_I2C_Master_Transmit+0x44>
      hi2c->XferSize = hi2c->XferCount;
 8009a8e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009a90:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8009a92:	b292      	uxth	r2, r2
 8009a94:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009a96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009a9a:	b2d2      	uxtb	r2, r2
 8009a9c:	e7d5      	b.n	8009a4a <HAL_I2C_Master_Transmit+0x76>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009a9e:	f7ff fe72 	bl	8009786 <I2C_WaitOnTXISFlagUntilTimeout>
 8009aa2:	2800      	cmp	r0, #0
 8009aa4:	d1b7      	bne.n	8009a16 <HAL_I2C_Master_Transmit+0x42>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009aa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009aa8:	6822      	ldr	r2, [r4, #0]
 8009aaa:	f813 1b01 	ldrb.w	r1, [r3], #1
 8009aae:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8009ab0:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8009ab2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8009ab4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8009ab6:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8009ab8:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8009aba:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8009abc:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8009abe:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009ac0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8009ac2:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009ac4:	b29b      	uxth	r3, r3
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d0c3      	beq.n	8009a52 <HAL_I2C_Master_Transmit+0x7e>
 8009aca:	2a00      	cmp	r2, #0
 8009acc:	d1c1      	bne.n	8009a52 <HAL_I2C_Master_Transmit+0x7e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009ace:	463b      	mov	r3, r7
 8009ad0:	2180      	movs	r1, #128	; 0x80
 8009ad2:	4620      	mov	r0, r4
 8009ad4:	9500      	str	r5, [sp, #0]
 8009ad6:	f7ff fec3 	bl	8009860 <I2C_WaitOnFlagUntilTimeout>
 8009ada:	2800      	cmp	r0, #0
 8009adc:	d19b      	bne.n	8009a16 <HAL_I2C_Master_Transmit+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009ade:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009ae0:	b29b      	uxth	r3, r3
 8009ae2:	2bff      	cmp	r3, #255	; 0xff
 8009ae4:	d903      	bls.n	8009aee <HAL_I2C_Master_Transmit+0x11a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009ae6:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009ae8:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009aea:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009aec:	e7ab      	b.n	8009a46 <HAL_I2C_Master_Transmit+0x72>
          hi2c->XferSize = hi2c->XferCount;
 8009aee:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009af0:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8009af2:	b292      	uxth	r2, r2
 8009af4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009af6:	e7ce      	b.n	8009a96 <HAL_I2C_Master_Transmit+0xc2>
    return HAL_BUSY;
 8009af8:	2002      	movs	r0, #2
 8009afa:	e78d      	b.n	8009a18 <HAL_I2C_Master_Transmit+0x44>
 8009afc:	80002000 	.word	0x80002000

08009b00 <HAL_I2C_Master_Receive>:
{
 8009b00:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b04:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b06:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8009b0a:	4604      	mov	r4, r0
 8009b0c:	460e      	mov	r6, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b0e:	2b20      	cmp	r3, #32
{
 8009b10:	4691      	mov	r9, r2
 8009b12:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b14:	f040 8087 	bne.w	8009c26 <HAL_I2C_Master_Receive+0x126>
    __HAL_LOCK(hi2c);
 8009b18:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8009b1c:	2b01      	cmp	r3, #1
 8009b1e:	f000 8082 	beq.w	8009c26 <HAL_I2C_Master_Receive+0x126>
 8009b22:	f04f 0a01 	mov.w	sl, #1
 8009b26:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8009b2a:	f7fe f9d3 	bl	8007ed4 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009b2e:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8009b30:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009b32:	9000      	str	r0, [sp, #0]
 8009b34:	4652      	mov	r2, sl
 8009b36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009b3a:	4620      	mov	r0, r4
 8009b3c:	f7ff fe90 	bl	8009860 <I2C_WaitOnFlagUntilTimeout>
 8009b40:	b118      	cbz	r0, 8009b4a <HAL_I2C_Master_Receive+0x4a>
      return HAL_ERROR;
 8009b42:	2001      	movs	r0, #1
}
 8009b44:	b002      	add	sp, #8
 8009b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009b4a:	2322      	movs	r3, #34	; 0x22
    hi2c->pBuffPtr  = pData;
 8009b4c:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 8009b50:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009b52:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009b56:	2310      	movs	r3, #16
 8009b58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009b5c:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8009b5e:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009b62:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009b64:	b29b      	uxth	r3, r3
 8009b66:	2bff      	cmp	r3, #255	; 0xff
 8009b68:	4b30      	ldr	r3, [pc, #192]	; (8009c2c <HAL_I2C_Master_Receive+0x12c>)
 8009b6a:	d926      	bls.n	8009bba <HAL_I2C_Master_Receive+0xba>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009b6c:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009b6e:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009b70:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009b72:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009b76:	4631      	mov	r1, r6
 8009b78:	4620      	mov	r0, r4
 8009b7a:	f7ff fd6d 	bl	8009658 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009b7e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009b80:	462a      	mov	r2, r5
 8009b82:	4639      	mov	r1, r7
 8009b84:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8009b86:	b29b      	uxth	r3, r3
 8009b88:	b9fb      	cbnz	r3, 8009bca <HAL_I2C_Master_Receive+0xca>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009b8a:	f7ff fe93 	bl	80098b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009b8e:	2800      	cmp	r0, #0
 8009b90:	d1d7      	bne.n	8009b42 <HAL_I2C_Master_Receive+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009b92:	6823      	ldr	r3, [r4, #0]
 8009b94:	2120      	movs	r1, #32
 8009b96:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8009b98:	685a      	ldr	r2, [r3, #4]
 8009b9a:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8009b9e:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8009ba2:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8009ba6:	f022 0201 	bic.w	r2, r2, #1
 8009baa:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8009bac:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8009bb0:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009bb4:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8009bb8:	e7c4      	b.n	8009b44 <HAL_I2C_Master_Receive+0x44>
      hi2c->XferSize = hi2c->XferCount;
 8009bba:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009bbc:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8009bbe:	b292      	uxth	r2, r2
 8009bc0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009bc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009bc6:	b2d2      	uxtb	r2, r2
 8009bc8:	e7d5      	b.n	8009b76 <HAL_I2C_Master_Receive+0x76>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009bca:	f7ff fe03 	bl	80097d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009bce:	2800      	cmp	r0, #0
 8009bd0:	d1b7      	bne.n	8009b42 <HAL_I2C_Master_Receive+0x42>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009bd2:	6823      	ldr	r3, [r4, #0]
 8009bd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009bd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009bd8:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8009bda:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8009bdc:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8009bde:	3301      	adds	r3, #1
      hi2c->XferSize--;
 8009be0:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8009be2:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8009be4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8009be6:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8009be8:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8009bea:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8009bec:	b29b      	uxth	r3, r3
 8009bee:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009bf0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009bf2:	b29b      	uxth	r3, r3
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d0c2      	beq.n	8009b7e <HAL_I2C_Master_Receive+0x7e>
 8009bf8:	2a00      	cmp	r2, #0
 8009bfa:	d1c0      	bne.n	8009b7e <HAL_I2C_Master_Receive+0x7e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009bfc:	463b      	mov	r3, r7
 8009bfe:	2180      	movs	r1, #128	; 0x80
 8009c00:	4620      	mov	r0, r4
 8009c02:	9500      	str	r5, [sp, #0]
 8009c04:	f7ff fe2c 	bl	8009860 <I2C_WaitOnFlagUntilTimeout>
 8009c08:	2800      	cmp	r0, #0
 8009c0a:	d19a      	bne.n	8009b42 <HAL_I2C_Master_Receive+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009c0c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009c0e:	b29b      	uxth	r3, r3
 8009c10:	2bff      	cmp	r3, #255	; 0xff
 8009c12:	d903      	bls.n	8009c1c <HAL_I2C_Master_Receive+0x11c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009c14:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009c16:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009c18:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009c1a:	e7aa      	b.n	8009b72 <HAL_I2C_Master_Receive+0x72>
          hi2c->XferSize = hi2c->XferCount;
 8009c1c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009c1e:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8009c20:	b292      	uxth	r2, r2
 8009c22:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009c24:	e7cd      	b.n	8009bc2 <HAL_I2C_Master_Receive+0xc2>
    return HAL_BUSY;
 8009c26:	2002      	movs	r0, #2
 8009c28:	e78c      	b.n	8009b44 <HAL_I2C_Master_Receive+0x44>
 8009c2a:	bf00      	nop
 8009c2c:	80002400 	.word	0x80002400

08009c30 <HAL_I2C_Mem_Write>:
{
 8009c30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c34:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009c36:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8009c3a:	4604      	mov	r4, r0
 8009c3c:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009c3e:	2b20      	cmp	r3, #32
{
 8009c40:	4616      	mov	r6, r2
 8009c42:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8009c46:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009c4a:	f040 80c6 	bne.w	8009dda <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 8009c4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c50:	b113      	cbz	r3, 8009c58 <HAL_I2C_Mem_Write+0x28>
 8009c52:	f1ba 0f00 	cmp.w	sl, #0
 8009c56:	d106      	bne.n	8009c66 <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009c58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c5c:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8009c5e:	2001      	movs	r0, #1
}
 8009c60:	b003      	add	sp, #12
 8009c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8009c66:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8009c6a:	2b01      	cmp	r3, #1
 8009c6c:	f000 80b5 	beq.w	8009dda <HAL_I2C_Mem_Write+0x1aa>
 8009c70:	f04f 0b01 	mov.w	fp, #1
 8009c74:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8009c78:	f7fe f92c 	bl	8007ed4 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009c7c:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8009c7e:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009c80:	9000      	str	r0, [sp, #0]
 8009c82:	465a      	mov	r2, fp
 8009c84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009c88:	4620      	mov	r0, r4
 8009c8a:	f7ff fde9 	bl	8009860 <I2C_WaitOnFlagUntilTimeout>
 8009c8e:	2800      	cmp	r0, #0
 8009c90:	d1e5      	bne.n	8009c5e <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009c92:	2321      	movs	r3, #33	; 0x21
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009c94:	fa5f f289 	uxtb.w	r2, r9
 8009c98:	4639      	mov	r1, r7
    hi2c->XferISR   = NULL;
 8009c9a:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009c9c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009ca0:	2340      	movs	r3, #64	; 0x40
 8009ca2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8009ca6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009ca8:	6460      	str	r0, [r4, #68]	; 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009caa:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8009cac:	6263      	str	r3, [r4, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009cae:	4b4c      	ldr	r3, [pc, #304]	; (8009de0 <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->XferCount = Size;
 8009cb0:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009cb4:	9300      	str	r3, [sp, #0]
 8009cb6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009cba:	f7ff fccd 	bl	8009658 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009cbe:	462a      	mov	r2, r5
 8009cc0:	4641      	mov	r1, r8
 8009cc2:	4620      	mov	r0, r4
 8009cc4:	f7ff fd5f 	bl	8009786 <I2C_WaitOnTXISFlagUntilTimeout>
 8009cc8:	bb18      	cbnz	r0, 8009d12 <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009cca:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009cce:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009cd0:	d115      	bne.n	8009cfe <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009cd2:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	2180      	movs	r1, #128	; 0x80
 8009cd8:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009cda:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009cdc:	4643      	mov	r3, r8
 8009cde:	9500      	str	r5, [sp, #0]
 8009ce0:	f7ff fdbe 	bl	8009860 <I2C_WaitOnFlagUntilTimeout>
 8009ce4:	b9a8      	cbnz	r0, 8009d12 <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009ce6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009ce8:	b29b      	uxth	r3, r3
 8009cea:	2bff      	cmp	r3, #255	; 0xff
 8009cec:	d815      	bhi.n	8009d1a <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 8009cee:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009cf0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009cf4:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8009cf6:	b292      	uxth	r2, r2
 8009cf8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009cfa:	b2d2      	uxtb	r2, r2
 8009cfc:	e012      	b.n	8009d24 <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009cfe:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009d00:	4641      	mov	r1, r8
 8009d02:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009d04:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009d06:	462a      	mov	r2, r5
 8009d08:	f7ff fd3d 	bl	8009786 <I2C_WaitOnTXISFlagUntilTimeout>
 8009d0c:	b908      	cbnz	r0, 8009d12 <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009d0e:	6823      	ldr	r3, [r4, #0]
 8009d10:	e7df      	b.n	8009cd2 <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 8009d12:	2300      	movs	r3, #0
 8009d14:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8009d18:	e7a1      	b.n	8009c5e <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009d1a:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009d1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009d20:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009d22:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009d24:	4639      	mov	r1, r7
 8009d26:	4620      	mov	r0, r4
 8009d28:	f7ff fc96 	bl	8009658 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009d2c:	462a      	mov	r2, r5
 8009d2e:	4641      	mov	r1, r8
 8009d30:	4620      	mov	r0, r4
 8009d32:	f7ff fd28 	bl	8009786 <I2C_WaitOnTXISFlagUntilTimeout>
 8009d36:	2800      	cmp	r0, #0
 8009d38:	d191      	bne.n	8009c5e <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009d3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d3c:	6822      	ldr	r2, [r4, #0]
 8009d3e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8009d42:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8009d44:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8009d46:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8009d48:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8009d4a:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8009d4c:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8009d4e:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8009d50:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8009d52:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009d54:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8009d56:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009d58:	b29b      	uxth	r3, r3
 8009d5a:	b1b3      	cbz	r3, 8009d8a <HAL_I2C_Mem_Write+0x15a>
 8009d5c:	b9aa      	cbnz	r2, 8009d8a <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009d5e:	4643      	mov	r3, r8
 8009d60:	2180      	movs	r1, #128	; 0x80
 8009d62:	4620      	mov	r0, r4
 8009d64:	9500      	str	r5, [sp, #0]
 8009d66:	f7ff fd7b 	bl	8009860 <I2C_WaitOnFlagUntilTimeout>
 8009d6a:	2800      	cmp	r0, #0
 8009d6c:	f47f af77 	bne.w	8009c5e <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009d70:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009d72:	b29b      	uxth	r3, r3
 8009d74:	2bff      	cmp	r3, #255	; 0xff
 8009d76:	d928      	bls.n	8009dca <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009d78:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009d7a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009d7e:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009d80:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009d82:	4639      	mov	r1, r7
 8009d84:	4620      	mov	r0, r4
 8009d86:	f7ff fc67 	bl	8009658 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8009d8a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009d8c:	b29b      	uxth	r3, r3
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d1cc      	bne.n	8009d2c <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009d92:	462a      	mov	r2, r5
 8009d94:	4641      	mov	r1, r8
 8009d96:	4620      	mov	r0, r4
 8009d98:	f7ff fd8c 	bl	80098b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009d9c:	2800      	cmp	r0, #0
 8009d9e:	f47f af5e 	bne.w	8009c5e <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009da2:	6823      	ldr	r3, [r4, #0]
 8009da4:	2120      	movs	r1, #32
 8009da6:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8009da8:	685a      	ldr	r2, [r3, #4]
 8009daa:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8009dae:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8009db2:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8009db6:	f022 0201 	bic.w	r2, r2, #1
 8009dba:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8009dbc:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8009dc0:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009dc4:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8009dc8:	e74a      	b.n	8009c60 <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8009dca:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009dcc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009dd0:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8009dd2:	b292      	uxth	r2, r2
 8009dd4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009dd6:	b2d2      	uxtb	r2, r2
 8009dd8:	e7d3      	b.n	8009d82 <HAL_I2C_Mem_Write+0x152>
    return HAL_BUSY;
 8009dda:	2002      	movs	r0, #2
 8009ddc:	e740      	b.n	8009c60 <HAL_I2C_Mem_Write+0x30>
 8009dde:	bf00      	nop
 8009de0:	80002000 	.word	0x80002000

08009de4 <HAL_I2C_Mem_Read>:
{
 8009de4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009de8:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009dea:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8009dee:	4604      	mov	r4, r0
 8009df0:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009df2:	2b20      	cmp	r3, #32
{
 8009df4:	4616      	mov	r6, r2
 8009df6:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8009dfa:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009dfe:	f040 80c9 	bne.w	8009f94 <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 8009e02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e04:	b113      	cbz	r3, 8009e0c <HAL_I2C_Mem_Read+0x28>
 8009e06:	f1ba 0f00 	cmp.w	sl, #0
 8009e0a:	d106      	bne.n	8009e1a <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009e0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009e10:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8009e12:	2001      	movs	r0, #1
}
 8009e14:	b003      	add	sp, #12
 8009e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8009e1a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8009e1e:	2b01      	cmp	r3, #1
 8009e20:	f000 80b8 	beq.w	8009f94 <HAL_I2C_Mem_Read+0x1b0>
 8009e24:	f04f 0b01 	mov.w	fp, #1
 8009e28:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8009e2c:	f7fe f852 	bl	8007ed4 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009e30:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8009e32:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009e34:	9000      	str	r0, [sp, #0]
 8009e36:	465a      	mov	r2, fp
 8009e38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009e3c:	4620      	mov	r0, r4
 8009e3e:	f7ff fd0f 	bl	8009860 <I2C_WaitOnFlagUntilTimeout>
 8009e42:	2800      	cmp	r0, #0
 8009e44:	d1e5      	bne.n	8009e12 <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009e46:	2322      	movs	r3, #34	; 0x22
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009e48:	fa5f f289 	uxtb.w	r2, r9
 8009e4c:	4639      	mov	r1, r7
    hi2c->XferISR   = NULL;
 8009e4e:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009e50:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009e54:	2340      	movs	r3, #64	; 0x40
 8009e56:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8009e5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009e5c:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8009e5e:	6263      	str	r3, [r4, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009e60:	4b4d      	ldr	r3, [pc, #308]	; (8009f98 <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->XferCount = Size;
 8009e62:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009e66:	9300      	str	r3, [sp, #0]
 8009e68:	4603      	mov	r3, r0
 8009e6a:	4620      	mov	r0, r4
 8009e6c:	f7ff fbf4 	bl	8009658 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009e70:	462a      	mov	r2, r5
 8009e72:	4641      	mov	r1, r8
 8009e74:	4620      	mov	r0, r4
 8009e76:	f7ff fc86 	bl	8009786 <I2C_WaitOnTXISFlagUntilTimeout>
 8009e7a:	bb20      	cbnz	r0, 8009ec6 <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009e7c:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009e80:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009e82:	d116      	bne.n	8009eb2 <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009e84:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009e86:	2200      	movs	r2, #0
 8009e88:	2140      	movs	r1, #64	; 0x40
 8009e8a:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009e8c:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009e8e:	4643      	mov	r3, r8
 8009e90:	9500      	str	r5, [sp, #0]
 8009e92:	f7ff fce5 	bl	8009860 <I2C_WaitOnFlagUntilTimeout>
 8009e96:	b9b0      	cbnz	r0, 8009ec6 <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009e98:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009e9a:	b29b      	uxth	r3, r3
 8009e9c:	2bff      	cmp	r3, #255	; 0xff
 8009e9e:	4b3f      	ldr	r3, [pc, #252]	; (8009f9c <HAL_I2C_Mem_Read+0x1b8>)
 8009ea0:	d815      	bhi.n	8009ece <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 8009ea2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009ea4:	9300      	str	r3, [sp, #0]
 8009ea6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8009eaa:	b292      	uxth	r2, r2
 8009eac:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009eae:	b2d2      	uxtb	r2, r2
 8009eb0:	e012      	b.n	8009ed8 <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009eb2:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009eb4:	4641      	mov	r1, r8
 8009eb6:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009eb8:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009eba:	462a      	mov	r2, r5
 8009ebc:	f7ff fc63 	bl	8009786 <I2C_WaitOnTXISFlagUntilTimeout>
 8009ec0:	b908      	cbnz	r0, 8009ec6 <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009ec2:	6823      	ldr	r3, [r4, #0]
 8009ec4:	e7de      	b.n	8009e84 <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8009ecc:	e7a1      	b.n	8009e12 <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009ece:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009ed0:	9300      	str	r3, [sp, #0]
 8009ed2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009ed6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009ed8:	4639      	mov	r1, r7
 8009eda:	4620      	mov	r0, r4
 8009edc:	f7ff fbbc 	bl	8009658 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8009ee0:	4643      	mov	r3, r8
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	2104      	movs	r1, #4
 8009ee6:	4620      	mov	r0, r4
 8009ee8:	9500      	str	r5, [sp, #0]
 8009eea:	f7ff fcb9 	bl	8009860 <I2C_WaitOnFlagUntilTimeout>
 8009eee:	2800      	cmp	r0, #0
 8009ef0:	d18f      	bne.n	8009e12 <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009ef2:	6823      	ldr	r3, [r4, #0]
 8009ef4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009ef6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ef8:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8009efa:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8009efc:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8009efe:	3301      	adds	r3, #1
      hi2c->XferSize--;
 8009f00:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8009f02:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8009f04:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8009f06:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8009f08:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8009f0a:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8009f0c:	b29b      	uxth	r3, r3
 8009f0e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009f10:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009f12:	b29b      	uxth	r3, r3
 8009f14:	b1b3      	cbz	r3, 8009f44 <HAL_I2C_Mem_Read+0x160>
 8009f16:	b9aa      	cbnz	r2, 8009f44 <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009f18:	4643      	mov	r3, r8
 8009f1a:	2180      	movs	r1, #128	; 0x80
 8009f1c:	4620      	mov	r0, r4
 8009f1e:	9500      	str	r5, [sp, #0]
 8009f20:	f7ff fc9e 	bl	8009860 <I2C_WaitOnFlagUntilTimeout>
 8009f24:	2800      	cmp	r0, #0
 8009f26:	f47f af74 	bne.w	8009e12 <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009f2a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009f2c:	b29b      	uxth	r3, r3
 8009f2e:	2bff      	cmp	r3, #255	; 0xff
 8009f30:	d928      	bls.n	8009f84 <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009f32:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8009f34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009f38:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009f3a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009f3c:	4639      	mov	r1, r7
 8009f3e:	4620      	mov	r0, r4
 8009f40:	f7ff fb8a 	bl	8009658 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8009f44:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009f46:	b29b      	uxth	r3, r3
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d1c9      	bne.n	8009ee0 <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009f4c:	462a      	mov	r2, r5
 8009f4e:	4641      	mov	r1, r8
 8009f50:	4620      	mov	r0, r4
 8009f52:	f7ff fcaf 	bl	80098b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009f56:	2800      	cmp	r0, #0
 8009f58:	f47f af5b 	bne.w	8009e12 <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009f5c:	6823      	ldr	r3, [r4, #0]
 8009f5e:	2120      	movs	r1, #32
 8009f60:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8009f62:	685a      	ldr	r2, [r3, #4]
 8009f64:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8009f68:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8009f6c:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8009f70:	f022 0201 	bic.w	r2, r2, #1
 8009f74:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8009f76:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8009f7a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009f7e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8009f82:	e747      	b.n	8009e14 <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8009f84:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009f86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009f8a:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8009f8c:	b292      	uxth	r2, r2
 8009f8e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009f90:	b2d2      	uxtb	r2, r2
 8009f92:	e7d3      	b.n	8009f3c <HAL_I2C_Mem_Read+0x158>
    return HAL_BUSY;
 8009f94:	2002      	movs	r0, #2
 8009f96:	e73d      	b.n	8009e14 <HAL_I2C_Mem_Read+0x30>
 8009f98:	80002000 	.word	0x80002000
 8009f9c:	80002400 	.word	0x80002400

08009fa0 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8009fa0:	6802      	ldr	r2, [r0, #0]
  if (hi2c->XferISR != NULL)
 8009fa2:	6b43      	ldr	r3, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8009fa4:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8009fa6:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
 8009fa8:	b103      	cbz	r3, 8009fac <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
 8009faa:	4718      	bx	r3
}
 8009fac:	4770      	bx	lr

08009fae <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009fae:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009fb0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8009fb4:	2b20      	cmp	r3, #32
 8009fb6:	b2dc      	uxtb	r4, r3
 8009fb8:	d11d      	bne.n	8009ff6 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009fba:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8009fbe:	2b01      	cmp	r3, #1
 8009fc0:	d019      	beq.n	8009ff6 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009fc2:	2324      	movs	r3, #36	; 0x24
 8009fc4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009fc8:	6803      	ldr	r3, [r0, #0]
 8009fca:	681a      	ldr	r2, [r3, #0]
 8009fcc:	f022 0201 	bic.w	r2, r2, #1
 8009fd0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009fd2:	681a      	ldr	r2, [r3, #0]
 8009fd4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009fd8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009fda:	681a      	ldr	r2, [r3, #0]
 8009fdc:	4311      	orrs	r1, r2
 8009fde:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009fe0:	681a      	ldr	r2, [r3, #0]
 8009fe2:	f042 0201 	orr.w	r2, r2, #1
 8009fe6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009fe8:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8009fea:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8009fee:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8009ff2:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8009ff4:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8009ff6:	2002      	movs	r0, #2
 8009ff8:	e7fc      	b.n	8009ff4 <HAL_I2CEx_ConfigAnalogFilter+0x46>

08009ffa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009ffa:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ffc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800a000:	2b20      	cmp	r3, #32
 800a002:	b2dc      	uxtb	r4, r3
 800a004:	d11c      	bne.n	800a040 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a006:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800a00a:	2b01      	cmp	r3, #1
 800a00c:	d018      	beq.n	800a040 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a00e:	2324      	movs	r3, #36	; 0x24
 800a010:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a014:	6803      	ldr	r3, [r0, #0]
 800a016:	681a      	ldr	r2, [r3, #0]
 800a018:	f022 0201 	bic.w	r2, r2, #1
 800a01c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a01e:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a020:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a024:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a028:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a02a:	681a      	ldr	r2, [r3, #0]
 800a02c:	f042 0201 	orr.w	r2, r2, #1
 800a030:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a032:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800a034:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800a038:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800a03c:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 800a03e:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 800a040:	2002      	movs	r0, #2
 800a042:	e7fc      	b.n	800a03e <HAL_I2CEx_ConfigDigitalFilter+0x44>

0800a044 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 800a044:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a046:	3801      	subs	r0, #1
 800a048:	2601      	movs	r6, #1
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 800a04a:	2500      	movs	r5, #0
  for (l = 0; l < 16UL; l++)
  {
    i = (uint32_t)Bits[l];
 800a04c:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    if ((p + i) > 256UL)
 800a050:	462f      	mov	r7, r5
 800a052:	4425      	add	r5, r4
 800a054:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800a058:	d822      	bhi.n	800a0a0 <JPEG_Bits_To_SizeCodes+0x5c>
 800a05a:	440f      	add	r7, r1
    {
      /* check for table overflow */
      return HAL_ERROR;
    }
    while (i != 0UL)
 800a05c:	b954      	cbnz	r4, 800a074 <JPEG_Bits_To_SizeCodes+0x30>
  for (l = 0; l < 16UL; l++)
 800a05e:	3601      	adds	r6, #1
 800a060:	2e11      	cmp	r6, #17
 800a062:	d1f3      	bne.n	800a04c <JPEG_Bits_To_SizeCodes+0x8>
      Huffsize[p] = (uint8_t) l + 1U;
      p++;
      i--;
    }
  }
  Huffsize[p] = 0;
 800a064:	554c      	strb	r4, [r1, r5]
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
    {
      return HAL_ERROR;
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 800a066:	2601      	movs	r6, #1
  *LastK = p;
 800a068:	601d      	str	r5, [r3, #0]
  code = 0;
 800a06a:	4623      	mov	r3, r4
  si = Huffsize[0];
 800a06c:	780d      	ldrb	r5, [r1, #0]
  while (Huffsize[p] != 0U)
 800a06e:	5d08      	ldrb	r0, [r1, r4]
 800a070:	b9a0      	cbnz	r0, 800a09c <JPEG_Bits_To_SizeCodes+0x58>
    code <<= 1;
    si++;
  }
  /* Return function status */
  return HAL_OK;
}
 800a072:	bdf0      	pop	{r4, r5, r6, r7, pc}
      i--;
 800a074:	3c01      	subs	r4, #1
      Huffsize[p] = (uint8_t) l + 1U;
 800a076:	f807 6b01 	strb.w	r6, [r7], #1
      i--;
 800a07a:	e7ef      	b.n	800a05c <JPEG_Bits_To_SizeCodes+0x18>
      Huffcode[p] = code;
 800a07c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
      p++;
 800a080:	3401      	adds	r4, #1
    while (((uint32_t) Huffsize[p]) == si)
 800a082:	5d08      	ldrb	r0, [r1, r4]
 800a084:	193b      	adds	r3, r7, r4
 800a086:	42a8      	cmp	r0, r5
 800a088:	d0f8      	beq.n	800a07c <JPEG_Bits_To_SizeCodes+0x38>
    if(si > 31UL)
 800a08a:	2d1f      	cmp	r5, #31
 800a08c:	d808      	bhi.n	800a0a0 <JPEG_Bits_To_SizeCodes+0x5c>
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 800a08e:	fa06 f005 	lsl.w	r0, r6, r5
 800a092:	4298      	cmp	r0, r3
 800a094:	d904      	bls.n	800a0a0 <JPEG_Bits_To_SizeCodes+0x5c>
    code <<= 1;
 800a096:	005b      	lsls	r3, r3, #1
    si++;
 800a098:	3501      	adds	r5, #1
 800a09a:	e7e8      	b.n	800a06e <JPEG_Bits_To_SizeCodes+0x2a>
 800a09c:	1b1f      	subs	r7, r3, r4
 800a09e:	e7f0      	b.n	800a082 <JPEG_Bits_To_SizeCodes+0x3e>
      return HAL_ERROR;
 800a0a0:	2001      	movs	r0, #1
 800a0a2:	e7e6      	b.n	800a072 <JPEG_Bits_To_SizeCodes+0x2e>

0800a0a4 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 800a0a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0a6:	f2ad 5d14 	subw	sp, sp, #1300	; 0x514
 800a0aa:	460d      	mov	r5, r1
 800a0ac:	4604      	mov	r4, r0
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800a0ae:	ab01      	add	r3, sp, #4
 800a0b0:	aa43      	add	r2, sp, #268	; 0x10c
 800a0b2:	a902      	add	r1, sp, #8
 800a0b4:	f7ff ffc6 	bl	800a044 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 800a0b8:	b938      	cbnz	r0, 800a0ca <JPEG_DCHuff_BitsVals_To_SizeCodes+0x26>
 800a0ba:	9e01      	ldr	r6, [sp, #4]
 800a0bc:	460b      	mov	r3, r1
 800a0be:	f104 0110 	add.w	r1, r4, #16
 800a0c2:	3610      	adds	r6, #16
 800a0c4:	4434      	add	r4, r6
    return  error;
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;

  while (k < lastK)
 800a0c6:	42a1      	cmp	r1, r4
 800a0c8:	d102      	bne.n	800a0d0 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x2c>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800a0ca:	f20d 5d14 	addw	sp, sp, #1300	; 0x514
 800a0ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    l = DC_BitsValsTable->HuffVal[k];
 800a0d0:	f811 6b01 	ldrb.w	r6, [r1], #1
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 800a0d4:	2e0b      	cmp	r6, #11
 800a0d6:	d80a      	bhi.n	800a0ee <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800a0d8:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 800a0dc:	f852 cb04 	ldr.w	ip, [r2], #4
 800a0e0:	f8c7 c00c 	str.w	ip, [r7, #12]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800a0e4:	f813 7b01 	ldrb.w	r7, [r3], #1
 800a0e8:	3f01      	subs	r7, #1
 800a0ea:	55af      	strb	r7, [r5, r6]
      k++;
 800a0ec:	e7eb      	b.n	800a0c6 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x22>
      return HAL_ERROR; /* Huffman Table overflow error*/
 800a0ee:	2001      	movs	r0, #1
 800a0f0:	e7eb      	b.n	800a0ca <JPEG_DCHuff_BitsVals_To_SizeCodes+0x26>

0800a0f2 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	4608      	mov	r0, r1
 800a0f6:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 800a0f8:	681c      	ldr	r4, [r3, #0]
{
 800a0fa:	b091      	sub	sp, #68	; 0x44
  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 800a0fc:	f504 63f8 	add.w	r3, r4, #1984	; 0x7c0
 800a100:	429a      	cmp	r2, r3
 800a102:	d125      	bne.n	800a150 <JPEG_Set_HuffDC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800a104:	f504 64fb 	add.w	r4, r4, #2008	; 0x7d8
    return HAL_ERROR;
  }

  if (HuffTableDC != NULL)
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 800a108:	a901      	add	r1, sp, #4
 800a10a:	f7ff ffcb 	bl	800a0a4 <JPEG_DCHuff_BitsVals_To_SizeCodes>
    if (error != HAL_OK)
 800a10e:	b9e8      	cbnz	r0, 800a14c <JPEG_Set_HuffDC_Mem+0x5a>
    {
      return  error;
    }
    addressDef = address;
    *addressDef = 0x0FFF0FFF;
 800a110:	aa01      	add	r2, sp, #4
 800a112:	f06f 23f0 	mvn.w	r3, #4026593280	; 0xf000f000
 800a116:	f1a4 0618 	sub.w	r6, r4, #24
    addressDef++;
    *addressDef = 0x0FFF0FFF;
 800a11a:	4615      	mov	r5, r2
    *addressDef = 0x0FFF0FFF;
 800a11c:	6023      	str	r3, [r4, #0]
    *addressDef = 0x0FFF0FFF;
 800a11e:	6063      	str	r3, [r4, #4]
    i = JPEG_DC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address --;
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800a120:	7ad3      	ldrb	r3, [r2, #11]
    while (i > 1UL)
 800a122:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800a124:	f895 1040 	ldrb.w	r1, [r5, #64]	; 0x40
    while (i > 1UL)
 800a128:	3a02      	subs	r2, #2
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800a12a:	021b      	lsls	r3, r3, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800a12c:	f895 703c 	ldrb.w	r7, [r5, #60]	; 0x3c
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800a130:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a134:	4319      	orrs	r1, r3
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800a136:	7b13      	ldrb	r3, [r2, #12]
 800a138:	021b      	lsls	r3, r3, #8
 800a13a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a13e:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800a140:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800a144:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 800a148:	42b4      	cmp	r4, r6
 800a14a:	d1e9      	bne.n	800a120 <JPEG_Set_HuffDC_Mem+0x2e>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800a14c:	b011      	add	sp, #68	; 0x44
 800a14e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 800a150:	f504 63fc 	add.w	r3, r4, #2016	; 0x7e0
 800a154:	429a      	cmp	r2, r3
 800a156:	d102      	bne.n	800a15e <JPEG_Set_HuffDC_Mem+0x6c>
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800a158:	f504 64ff 	add.w	r4, r4, #2040	; 0x7f8
 800a15c:	e7d4      	b.n	800a108 <JPEG_Set_HuffDC_Mem+0x16>
    return HAL_ERROR;
 800a15e:	2001      	movs	r0, #1
 800a160:	e7f4      	b.n	800a14c <JPEG_Set_HuffDC_Mem+0x5a>

0800a162 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 800a162:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 800a166:	6804      	ldr	r4, [r0, #0]
{
 800a168:	f6ad 0d38 	subw	sp, sp, #2104	; 0x838
 800a16c:	460d      	mov	r5, r1
  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 800a16e:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
 800a172:	429a      	cmp	r2, r3
 800a174:	d115      	bne.n	800a1a2 <JPEG_Set_HuffAC_Mem+0x40>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800a176:	f204 6444 	addw	r4, r4, #1604	; 0x644
  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800a17a:	466b      	mov	r3, sp
 800a17c:	f20d 4234 	addw	r2, sp, #1076	; 0x434
 800a180:	a901      	add	r1, sp, #4
 800a182:	4628      	mov	r0, r5
 800a184:	f7ff ff5e 	bl	800a044 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 800a188:	2800      	cmp	r0, #0
 800a18a:	d15d      	bne.n	800a248 <JPEG_Set_HuffAC_Mem+0xe6>
 800a18c:	9b00      	ldr	r3, [sp, #0]
 800a18e:	460e      	mov	r6, r1
 800a190:	f105 0c10 	add.w	ip, r5, #16
 800a194:	4617      	mov	r7, r2
 800a196:	3310      	adds	r3, #16
      l = (msb * 10UL) + lsb - 1UL;
 800a198:	f04f 0e0a 	mov.w	lr, #10
 800a19c:	18e9      	adds	r1, r5, r3
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800a19e:	ad42      	add	r5, sp, #264	; 0x108
 800a1a0:	e021      	b.n	800a1e6 <JPEG_Set_HuffAC_Mem+0x84>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 800a1a2:	f504 63cc 	add.w	r3, r4, #1632	; 0x660
 800a1a6:	429a      	cmp	r2, r3
 800a1a8:	d110      	bne.n	800a1cc <JPEG_Set_HuffAC_Mem+0x6a>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800a1aa:	f204 74a4 	addw	r4, r4, #1956	; 0x7a4
 800a1ae:	e7e4      	b.n	800a17a <JPEG_Set_HuffAC_Mem+0x18>
    l = AC_BitsValsTable->HuffVal[k];
 800a1b0:	f81c 3b01 	ldrb.w	r3, [ip], #1
    if (l == 0UL)
 800a1b4:	b163      	cbz	r3, 800a1d0 <JPEG_Set_HuffAC_Mem+0x6e>
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 800a1b6:	2bf0      	cmp	r3, #240	; 0xf0
 800a1b8:	d04a      	beq.n	800a250 <JPEG_Set_HuffAC_Mem+0xee>
      msb = (l & 0xF0UL) >> 4;
 800a1ba:	ea4f 1813 	mov.w	r8, r3, lsr #4
      lsb = (l & 0x0FUL);
 800a1be:	f003 030f 	and.w	r3, r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 800a1c2:	3b01      	subs	r3, #1
 800a1c4:	fb0e 3308 	mla	r3, lr, r8, r3
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 800a1c8:	2ba1      	cmp	r3, #161	; 0xa1
 800a1ca:	d902      	bls.n	800a1d2 <JPEG_Set_HuffAC_Mem+0x70>
      return HAL_ERROR; /* Huffman Table overflow error*/
 800a1cc:	2001      	movs	r0, #1
  }

  if (HuffTableAC != NULL)
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
    if (error != HAL_OK)
 800a1ce:	e03b      	b.n	800a248 <JPEG_Set_HuffAC_Mem+0xe6>
      l = 160; /*l = 0x00 EOB code*/
 800a1d0:	23a0      	movs	r3, #160	; 0xa0
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800a1d2:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 800a1d6:	f857 8b04 	ldr.w	r8, [r7], #4
 800a1da:	f8c2 80a4 	str.w	r8, [r2, #164]	; 0xa4
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800a1de:	f816 2b01 	ldrb.w	r2, [r6], #1
 800a1e2:	3a01      	subs	r2, #1
 800a1e4:	54ea      	strb	r2, [r5, r3]
  while (k < lastK)
 800a1e6:	4561      	cmp	r1, ip
 800a1e8:	d1e2      	bne.n	800a1b0 <JPEG_Set_HuffAC_Mem+0x4e>
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
    for (i = 0; i < 3UL; i++)
    {
      *addressDef = 0x0FFF0FFF;
 800a1ea:	f06f 23f0 	mvn.w	r3, #4026593280	; 0xf000f000
 800a1ee:	a942      	add	r1, sp, #264	; 0x108
 800a1f0:	f5a4 76a2 	sub.w	r6, r4, #324	; 0x144
 800a1f4:	6023      	str	r3, [r4, #0]
    addressDef++;
    *addressDef = 0x0FD30FD2;
    addressDef++;
    *addressDef = 0x0FD50FD4;
    addressDef++;
    *addressDef = 0x0FD70FD6;
 800a1f6:	460d      	mov	r5, r1
      *addressDef = 0x0FFF0FFF;
 800a1f8:	6063      	str	r3, [r4, #4]
 800a1fa:	60a3      	str	r3, [r4, #8]
    *addressDef = 0x0FD10FD0;
 800a1fc:	f103 33d1 	add.w	r3, r3, #3520188881	; 0xd1d1d1d1
 800a200:	f103 232e 	add.w	r3, r3, #771763712	; 0x2e002e00
 800a204:	60e3      	str	r3, [r4, #12]
    *addressDef = 0x0FD30FD2;
 800a206:	f103 1302 	add.w	r3, r3, #131074	; 0x20002
 800a20a:	6123      	str	r3, [r4, #16]
    *addressDef = 0x0FD50FD4;
 800a20c:	f103 1302 	add.w	r3, r3, #131074	; 0x20002
 800a210:	6163      	str	r3, [r4, #20]
    *addressDef = 0x0FD70FD6;
 800a212:	f103 1302 	add.w	r3, r3, #131074	; 0x20002
 800a216:	61a3      	str	r3, [r4, #24]
    i = JPEG_AC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address--;
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800a218:	f891 30a1 	ldrb.w	r3, [r1, #161]	; 0xa1
    while (i > 1UL)
 800a21c:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800a21e:	f895 2330 	ldrb.w	r2, [r5, #816]	; 0x330
    while (i > 1UL)
 800a222:	3902      	subs	r1, #2
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800a224:	021b      	lsls	r3, r3, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800a226:	f895 732c 	ldrb.w	r7, [r5, #812]	; 0x32c
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800a22a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a22e:	431a      	orrs	r2, r3
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800a230:	f891 30a2 	ldrb.w	r3, [r1, #162]	; 0xa2
 800a234:	021b      	lsls	r3, r3, #8
 800a236:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a23a:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800a23c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a240:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 800a244:	42b4      	cmp	r4, r6
 800a246:	d1e7      	bne.n	800a218 <JPEG_Set_HuffAC_Mem+0xb6>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800a248:	f60d 0d38 	addw	sp, sp, #2104	; 0x838
 800a24c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      l = 161;
 800a250:	23a1      	movs	r3, #161	; 0xa1
 800a252:	e7be      	b.n	800a1d2 <JPEG_Set_HuffAC_Mem+0x70>

0800a254 <JPEG_Init_Process>:
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 800a254:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800a256:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800a25a:	6543      	str	r3, [r0, #84]	; 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a25c:	6d42      	ldr	r2, [r0, #84]	; 0x54
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 800a25e:	6803      	ldr	r3, [r0, #0]
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a260:	f002 0203 	and.w	r2, r2, #3
 800a264:	2a02      	cmp	r2, #2
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 800a266:	685a      	ldr	r2, [r3, #4]
 800a268:	bf0c      	ite	eq
 800a26a:	f042 0208 	orreq.w	r2, r2, #8
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 800a26e:	f022 0208 	bicne.w	r2, r2, #8
 800a272:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800a274:	681a      	ldr	r2, [r3, #0]
 800a276:	f022 0201 	bic.w	r2, r2, #1
 800a27a:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800a27c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a27e:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 800a282:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable All DMA requests */
  JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_MASK);
 800a284:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a286:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 800a28a:	631a      	str	r2, [r3, #48]	; 0x30
  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800a28c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a28e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a292:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800a294:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a296:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a29a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800a29c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a29e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800a2a2:	639a      	str	r2, [r3, #56]	; 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 800a2a4:	681a      	ldr	r2, [r3, #0]
 800a2a6:	f042 0201 	orr.w	r2, r2, #1
 800a2aa:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800a2ac:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800a2ae:	f002 020c 	and.w	r2, r2, #12
 800a2b2:	2a08      	cmp	r2, #8
 800a2b4:	d104      	bne.n	800a2c0 <JPEG_Init_Process+0x6c>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 800a2b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a2b8:	f042 026e 	orr.w	r2, r2, #110	; 0x6e
  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
  {
    /*Enable End Of Conversation, and End Of Header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800a2bc:	631a      	str	r2, [r3, #48]	; 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 800a2be:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800a2c0:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800a2c2:	f002 020c 	and.w	r2, r2, #12
 800a2c6:	2a0c      	cmp	r2, #12
 800a2c8:	d1f9      	bne.n	800a2be <JPEG_Init_Process+0x6a>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800a2ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a2cc:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800a2d0:	e7f4      	b.n	800a2bc <JPEG_Init_Process+0x68>
	...

0800a2d4 <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 800a2d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hjpeg->InDataLength < 4UL) || (hjpeg->OutDataLength < 4UL))
 800a2d6:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 800a2d8:	4604      	mov	r4, r0
  if ((hjpeg->InDataLength < 4UL) || (hjpeg->OutDataLength < 4UL))
 800a2da:	2b03      	cmp	r3, #3
 800a2dc:	d927      	bls.n	800a32e <JPEG_DMA_StartProcess+0x5a>
 800a2de:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800a2e0:	2903      	cmp	r1, #3
 800a2e2:	d924      	bls.n	800a32e <JPEG_DMA_StartProcess+0x5a>
  {
    return HAL_ERROR;
  }
  /* Reset Ending DMA internal context flag*/
  hjpeg->Context &= ~JPEG_CONTEXT_ENDING_DMA;
 800a2e4:	6d42      	ldr	r2, [r0, #84]	; 0x54
  hjpeg->hdmaout->XferErrorCallback = JPEG_DMAErrorCallback;
  /* Set the DMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_DMAOutAbortCallback;

  /*DMA transfer size must be a multiple of 4 bytes i.e multiple of 32bits words*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800a2e6:	f023 0303 	bic.w	r3, r3, #3
  hjpeg->hdmain->XferCpltCallback = JPEG_DMAInCpltCallback;
 800a2ea:	4d1a      	ldr	r5, [pc, #104]	; (800a354 <JPEG_DMA_StartProcess+0x80>)

  /*DMA transfer size must be a multiple of 4 bytes i.e multiple of 32bits words*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % 4UL);
 800a2ec:	f021 0103 	bic.w	r1, r1, #3
  hjpeg->Context &= ~JPEG_CONTEXT_ENDING_DMA;
 800a2f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
  hjpeg->hdmain->XferErrorCallback = JPEG_DMAErrorCallback;
 800a2f4:	4e18      	ldr	r6, [pc, #96]	; (800a358 <JPEG_DMA_StartProcess+0x84>)
  hjpeg->hdmaout->XferCpltCallback = JPEG_DMAOutCpltCallback;
 800a2f6:	4f19      	ldr	r7, [pc, #100]	; (800a35c <JPEG_DMA_StartProcess+0x88>)
  hjpeg->Context &= ~JPEG_CONTEXT_ENDING_DMA;
 800a2f8:	6542      	str	r2, [r0, #84]	; 0x54
  JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA | JPEG_DMA_IDMA);
 800a2fa:	6802      	ldr	r2, [r0, #0]
 800a2fc:	6b10      	ldr	r0, [r2, #48]	; 0x30

  /* Start DMA FIFO In transfer */
  if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800a2fe:	3240      	adds	r2, #64	; 0x40
  JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA | JPEG_DMA_IDMA);
 800a300:	f420 50c0 	bic.w	r0, r0, #6144	; 0x1800
 800a304:	f842 0c10 	str.w	r0, [r2, #-16]
  hjpeg->hdmain->XferCpltCallback = JPEG_DMAInCpltCallback;
 800a308:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800a30a:	63c5      	str	r5, [r0, #60]	; 0x3c
  hjpeg->hdmaout->XferCpltCallback = JPEG_DMAOutCpltCallback;
 800a30c:	6b65      	ldr	r5, [r4, #52]	; 0x34
  hjpeg->hdmain->XferErrorCallback = JPEG_DMAErrorCallback;
 800a30e:	64c6      	str	r6, [r0, #76]	; 0x4c
  hjpeg->hdmaout->XferErrorCallback = JPEG_DMAErrorCallback;
 800a310:	64ee      	str	r6, [r5, #76]	; 0x4c
  hjpeg->hdmaout->XferAbortCallback = JPEG_DMAOutAbortCallback;
 800a312:	4e13      	ldr	r6, [pc, #76]	; (800a360 <JPEG_DMA_StartProcess+0x8c>)
  hjpeg->hdmaout->XferCpltCallback = JPEG_DMAOutCpltCallback;
 800a314:	63ef      	str	r7, [r5, #60]	; 0x3c
  hjpeg->hdmaout->XferAbortCallback = JPEG_DMAOutAbortCallback;
 800a316:	652e      	str	r6, [r5, #80]	; 0x50
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800a318:	62a3      	str	r3, [r4, #40]	; 0x28
  if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800a31a:	089b      	lsrs	r3, r3, #2
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % 4UL);
 800a31c:	62e1      	str	r1, [r4, #44]	; 0x2c
  if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800a31e:	69a1      	ldr	r1, [r4, #24]
 800a320:	f7fe f9fe 	bl	8008720 <HAL_DMA_Start_IT>
 800a324:	b128      	cbz	r0, 800a332 <JPEG_DMA_StartProcess+0x5e>

  /* Start DMA FIFO Out transfer */
  if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
                       hjpeg->OutDataLength >> 2)  != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800a326:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a328:	f043 0304 	orr.w	r3, r3, #4
 800a32c:	6523      	str	r3, [r4, #80]	; 0x50
    return HAL_ERROR;
 800a32e:	2001      	movs	r0, #1
 800a330:	e00e      	b.n	800a350 <JPEG_DMA_StartProcess+0x7c>
  if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800a332:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a334:	6821      	ldr	r1, [r4, #0]
 800a336:	089b      	lsrs	r3, r3, #2
 800a338:	69e2      	ldr	r2, [r4, #28]
 800a33a:	3144      	adds	r1, #68	; 0x44
 800a33c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800a33e:	f7fe f9ef 	bl	8008720 <HAL_DMA_Start_IT>
 800a342:	2800      	cmp	r0, #0
 800a344:	d1ef      	bne.n	800a326 <JPEG_DMA_StartProcess+0x52>
    return HAL_ERROR;
  }

  /* Enable JPEG In/Out DMA requests*/
  JPEG_ENABLE_DMA(hjpeg, JPEG_DMA_IDMA | JPEG_DMA_ODMA);
 800a346:	6822      	ldr	r2, [r4, #0]
 800a348:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800a34a:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
 800a34e:	6313      	str	r3, [r2, #48]	; 0x30

  return HAL_OK;
}
 800a350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a352:	bf00      	nop
 800a354:	0800a8c1 	.word	0x0800a8c1
 800a358:	0800a7a5 	.word	0x0800a7a5
 800a35c:	0800ad75 	.word	0x0800ad75
 800a360:	0800ad65 	.word	0x0800ad65

0800a364 <HAL_JPEG_Init>:
{
 800a364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg == NULL)
 800a366:	4604      	mov	r4, r0
 800a368:	2800      	cmp	r0, #0
 800a36a:	f000 811f 	beq.w	800a5ac <HAL_JPEG_Init+0x248>
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 800a36e:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
 800a372:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a376:	b91b      	cbnz	r3, 800a380 <HAL_JPEG_Init+0x1c>
    hjpeg->Lock = HAL_UNLOCKED;
 800a378:	f880 204c 	strb.w	r2, [r0, #76]	; 0x4c
    HAL_JPEG_MspInit(hjpeg);
 800a37c:	f7fa fce4 	bl	8004d48 <HAL_JPEG_MspInit>
  __HAL_JPEG_ENABLE(hjpeg);
 800a380:	6822      	ldr	r2, [r4, #0]
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 800a382:	2302      	movs	r3, #2
 800a384:	498a      	ldr	r1, [pc, #552]	; (800a5b0 <HAL_JPEG_Init+0x24c>)
 800a386:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
  address = (hjpeg->Instance->DHTMEM + 3);
 800a38a:	f502 705b 	add.w	r0, r2, #876	; 0x36c
  __HAL_JPEG_ENABLE(hjpeg);
 800a38e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800a390:	f502 7557 	add.w	r5, r2, #860	; 0x35c
 800a394:	f043 0301 	orr.w	r3, r3, #1
 800a398:	6313      	str	r3, [r2, #48]	; 0x30
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800a39a:	6813      	ldr	r3, [r2, #0]
 800a39c:	f023 0301 	bic.w	r3, r3, #1
 800a3a0:	6013      	str	r3, [r2, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800a3a2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800a3a4:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 800a3a8:	6313      	str	r3, [r2, #48]	; 0x30
  JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_MASK);
 800a3aa:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800a3ac:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800a3b0:	6313      	str	r3, [r2, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800a3b2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800a3b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a3b8:	6313      	str	r3, [r2, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800a3ba:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800a3bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a3c0:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800a3c2:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800a3c4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800a3c8:	6393      	str	r3, [r2, #56]	; 0x38
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 800a3ca:	4b7a      	ldr	r3, [pc, #488]	; (800a5b4 <HAL_JPEG_Init+0x250>)
 800a3cc:	63e3      	str	r3, [r4, #60]	; 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 800a3ce:	4b7a      	ldr	r3, [pc, #488]	; (800a5b8 <HAL_JPEG_Init+0x254>)
 800a3d0:	6423      	str	r3, [r4, #64]	; 0x40
  hjpeg->QuantTable2 = NULL;
 800a3d2:	2300      	movs	r3, #0
  hjpeg->QuantTable3 = NULL;
 800a3d4:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800a3d8:	7b8b      	ldrb	r3, [r1, #14]
  while (index > 3UL)
 800a3da:	3904      	subs	r1, #4
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a3dc:	7cce      	ldrb	r6, [r1, #19]
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800a3de:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a3e0:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 800a3e4:	7c0e      	ldrb	r6, [r1, #16]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800a3e6:	4333      	orrs	r3, r6
 800a3e8:	7c4e      	ldrb	r6, [r1, #17]
 800a3ea:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a3ee:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
 800a3f2:	42a8      	cmp	r0, r5
 800a3f4:	d1f0      	bne.n	800a3d8 <HAL_JPEG_Init+0x74>
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a3f6:	4b71      	ldr	r3, [pc, #452]	; (800a5bc <HAL_JPEG_Init+0x258>)
  address = (hjpeg->Instance->DHTMEM + 10UL);
 800a3f8:	f502 7662 	add.w	r6, r2, #904	; 0x388
 800a3fc:	4970      	ldr	r1, [pc, #448]	; (800a5c0 <HAL_JPEG_Init+0x25c>)
 800a3fe:	f502 775e 	add.w	r7, r2, #888	; 0x378
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a402:	f8c2 3378 	str.w	r3, [r2, #888]	; 0x378
 800a406:	f1a3 3304 	sub.w	r3, r3, #67372036	; 0x4040404
  address = (hjpeg->Instance->DHTMEM + 10UL);
 800a40a:	460d      	mov	r5, r1
 800a40c:	4630      	mov	r0, r6
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a40e:	f8c2 3374 	str.w	r3, [r2, #884]	; 0x374
 800a412:	f1a3 3304 	sub.w	r3, r3, #67372036	; 0x4040404
 800a416:	f8c2 3370 	str.w	r3, [r2, #880]	; 0x370
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800a41a:	7bab      	ldrb	r3, [r5, #14]
  while (index > 3UL)
 800a41c:	3d04      	subs	r5, #4
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a41e:	f895 c013 	ldrb.w	ip, [r5, #19]
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800a422:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a424:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 800a428:	f895 c010 	ldrb.w	ip, [r5, #16]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800a42c:	ea43 030c 	orr.w	r3, r3, ip
 800a430:	f895 c011 	ldrb.w	ip, [r5, #17]
 800a434:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a438:	f846 3904 	str.w	r3, [r6], #-4
  while (index > 3UL)
 800a43c:	42be      	cmp	r6, r7
 800a43e:	d1ec      	bne.n	800a41a <HAL_JPEG_Init+0xb6>
  value = *address & 0xFFFF0000U;
 800a440:	f8d2 342c 	ldr.w	r3, [r2, #1068]	; 0x42c
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 800a444:	f502 6585 	add.w	r5, r2, #1064	; 0x428
  value = *address & 0xFFFF0000U;
 800a448:	0c1b      	lsrs	r3, r3, #16
 800a44a:	041b      	lsls	r3, r3, #16
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 800a44c:	f443 437a 	orr.w	r3, r3, #64000	; 0xfa00
 800a450:	f043 03f9 	orr.w	r3, r3, #249	; 0xf9
  *address = value;
 800a454:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800a458:	f891 30ae 	ldrb.w	r3, [r1, #174]	; 0xae
  while (index > 3UL)
 800a45c:	3904      	subs	r1, #4
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a45e:	f891 60b3 	ldrb.w	r6, [r1, #179]	; 0xb3
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800a462:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a464:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 800a468:	f891 60b0 	ldrb.w	r6, [r1, #176]	; 0xb0
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800a46c:	4333      	orrs	r3, r6
 800a46e:	f891 60b1 	ldrb.w	r6, [r1, #177]	; 0xb1
 800a472:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a476:	f845 3904 	str.w	r3, [r5], #-4
  while (index > 3UL)
 800a47a:	4285      	cmp	r5, r0
 800a47c:	d1ec      	bne.n	800a458 <HAL_JPEG_Init+0xf4>
  value = *address & 0x0000FFFFU;
 800a47e:	f8d2 342c 	ldr.w	r3, [r2, #1068]	; 0x42c
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 800a482:	f502 658b 	add.w	r5, r2, #1112	; 0x458
  value = *address & 0xFFFF0000U;
 800a486:	484f      	ldr	r0, [pc, #316]	; (800a5c4 <HAL_JPEG_Init+0x260>)
  value = *address & 0x0000FFFFU;
 800a488:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 800a48a:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
  *address = value;
 800a48e:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
  value = *address & 0xFFFF0000U;
 800a492:	f8d2 343c 	ldr.w	r3, [r2, #1084]	; 0x43c
 800a496:	4003      	ands	r3, r0
  *address = value;
 800a498:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a49c:	2301      	movs	r3, #1
 800a49e:	f8c2 3438 	str.w	r3, [r2, #1080]	; 0x438
 800a4a2:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
 800a4a6:	f8c2 3434 	str.w	r3, [r2, #1076]	; 0x434
 800a4aa:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  value = *address & 0x0000FFFFUL;
 800a4ae:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a4b2:	4b45      	ldr	r3, [pc, #276]	; (800a5c8 <HAL_JPEG_Init+0x264>)
  value = *address & 0x0000FFFFUL;
 800a4b4:	b289      	uxth	r1, r1
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 800a4b6:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
  *address = value;
 800a4ba:	f8c2 143c 	str.w	r1, [r2, #1084]	; 0x43c
  value = *address & 0xFFFF0000UL;
 800a4be:	f8d2 1448 	ldr.w	r1, [r2, #1096]	; 0x448
 800a4c2:	4001      	ands	r1, r0
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 800a4c4:	f441 6130 	orr.w	r1, r1, #2816	; 0xb00
 800a4c8:	f041 010a 	orr.w	r1, r1, #10
  *address = value;
 800a4cc:	f8c2 1448 	str.w	r1, [r2, #1096]	; 0x448
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a4d0:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444
 800a4d4:	f1a3 3304 	sub.w	r3, r3, #67372036	; 0x4040404
 800a4d8:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
  value = *address & 0x0000FFFFU;
 800a4dc:	f8d2 1448 	ldr.w	r1, [r2, #1096]	; 0x448
 800a4e0:	b289      	uxth	r1, r1
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 800a4e2:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
  *address = value;
 800a4e6:	f8c2 1448 	str.w	r1, [r2, #1096]	; 0x448
  value = *address & 0xFFFF0000U;
 800a4ea:	f8d2 3458 	ldr.w	r3, [r2, #1112]	; 0x458
 800a4ee:	4937      	ldr	r1, [pc, #220]	; (800a5cc <HAL_JPEG_Init+0x268>)
 800a4f0:	4003      	ands	r3, r0
  address = (hjpeg->Instance->DHTMEM + 102);
 800a4f2:	f502 609f 	add.w	r0, r2, #1272	; 0x4f8
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 800a4f6:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 800a4fa:	f043 0302 	orr.w	r3, r3, #2
  *address = value;
 800a4fe:	f8c2 3458 	str.w	r3, [r2, #1112]	; 0x458
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a502:	4b33      	ldr	r3, [pc, #204]	; (800a5d0 <HAL_JPEG_Init+0x26c>)
 800a504:	f8c2 3454 	str.w	r3, [r2, #1108]	; 0x454
 800a508:	4b32      	ldr	r3, [pc, #200]	; (800a5d4 <HAL_JPEG_Init+0x270>)
 800a50a:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450
 800a50e:	4b32      	ldr	r3, [pc, #200]	; (800a5d8 <HAL_JPEG_Init+0x274>)
 800a510:	f8c2 344c 	str.w	r3, [r2, #1100]	; 0x44c
  value = *address & 0x0000FFFFUL;
 800a514:	f8d2 3458 	ldr.w	r3, [r2, #1112]	; 0x458
 800a518:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 800a51a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  *address = value;
 800a51e:	f8c2 3458 	str.w	r3, [r2, #1112]	; 0x458
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800a522:	f891 30b0 	ldrb.w	r3, [r1, #176]	; 0xb0
  while (index > 3UL)
 800a526:	3904      	subs	r1, #4
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a528:	f891 60b5 	ldrb.w	r6, [r1, #181]	; 0xb5
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800a52c:	041b      	lsls	r3, r3, #16
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800a52e:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 800a532:	f891 60b2 	ldrb.w	r6, [r1, #178]	; 0xb2
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800a536:	4333      	orrs	r3, r6
 800a538:	f891 60b3 	ldrb.w	r6, [r1, #179]	; 0xb3
 800a53c:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a540:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
 800a544:	42a8      	cmp	r0, r5
 800a546:	d1ec      	bne.n	800a522 <HAL_JPEG_Init+0x1be>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 800a548:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a54c:	491c      	ldr	r1, [pc, #112]	; (800a5c0 <HAL_JPEG_Init+0x25c>)
 800a54e:	4620      	mov	r0, r4
 800a550:	f7ff fe07 	bl	800a162 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 800a554:	b110      	cbz	r0, 800a55c <HAL_JPEG_Init+0x1f8>
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 800a556:	2001      	movs	r0, #1
 800a558:	6520      	str	r0, [r4, #80]	; 0x50
}
 800a55a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                              (hjpeg->Instance->HUFFENC_AC1));
 800a55c:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 800a55e:	4620      	mov	r0, r4
 800a560:	491a      	ldr	r1, [pc, #104]	; (800a5cc <HAL_JPEG_Init+0x268>)
 800a562:	f502 62cc 	add.w	r2, r2, #1632	; 0x660
 800a566:	f7ff fdfc 	bl	800a162 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 800a56a:	2800      	cmp	r0, #0
 800a56c:	d1f3      	bne.n	800a556 <HAL_JPEG_Init+0x1f2>
                              hjpeg->Instance->HUFFENC_DC0);
 800a56e:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 800a570:	4620      	mov	r0, r4
 800a572:	490f      	ldr	r1, [pc, #60]	; (800a5b0 <HAL_JPEG_Init+0x24c>)
 800a574:	f502 62f8 	add.w	r2, r2, #1984	; 0x7c0
 800a578:	f7ff fdbb 	bl	800a0f2 <JPEG_Set_HuffDC_Mem>
  if (error != HAL_OK)
 800a57c:	2800      	cmp	r0, #0
 800a57e:	d1ea      	bne.n	800a556 <HAL_JPEG_Init+0x1f2>
                              hjpeg->Instance->HUFFENC_DC1);
 800a580:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 800a582:	4620      	mov	r0, r4
 800a584:	4915      	ldr	r1, [pc, #84]	; (800a5dc <HAL_JPEG_Init+0x278>)
 800a586:	f502 62fc 	add.w	r2, r2, #2016	; 0x7e0
 800a58a:	f7ff fdb2 	bl	800a0f2 <JPEG_Set_HuffDC_Mem>
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 800a58e:	2800      	cmp	r0, #0
 800a590:	d1e1      	bne.n	800a556 <HAL_JPEG_Init+0x1f2>
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 800a592:	6822      	ldr	r2, [r4, #0]
 800a594:	6853      	ldr	r3, [r2, #4]
 800a596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a59a:	6053      	str	r3, [r2, #4]
  hjpeg->State = HAL_JPEG_STATE_READY;
 800a59c:	2301      	movs	r3, #1
  hjpeg->JpegInCount = 0;
 800a59e:	6220      	str	r0, [r4, #32]
  hjpeg->JpegOutCount = 0;
 800a5a0:	6260      	str	r0, [r4, #36]	; 0x24
  hjpeg->State = HAL_JPEG_STATE_READY;
 800a5a2:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 800a5a6:	6520      	str	r0, [r4, #80]	; 0x50
  hjpeg->Context = 0;
 800a5a8:	6560      	str	r0, [r4, #84]	; 0x54
  return HAL_OK;
 800a5aa:	e7d6      	b.n	800a55a <HAL_JPEG_Init+0x1f6>
    return HAL_ERROR;
 800a5ac:	2001      	movs	r0, #1
 800a5ae:	e7d4      	b.n	800a55a <HAL_JPEG_Init+0x1f6>
 800a5b0:	0802a35d 	.word	0x0802a35d
 800a5b4:	0802a379 	.word	0x0802a379
 800a5b8:	0802a301 	.word	0x0802a301
 800a5bc:	0b0a0908 	.word	0x0b0a0908
 800a5c0:	0802a24f 	.word	0x0802a24f
 800a5c4:	ffff0000 	.word	0xffff0000
 800a5c8:	09080706 	.word	0x09080706
 800a5cc:	0802a19d 	.word	0x0802a19d
 800a5d0:	01000404 	.word	0x01000404
 800a5d4:	05070403 	.word	0x05070403
 800a5d8:	04040201 	.word	0x04040201
 800a5dc:	0802a341 	.word	0x0802a341

0800a5e0 <HAL_JPEG_GetInfo>:
{
 800a5e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((hjpeg == NULL) || (pInfo == NULL))
 800a5e4:	2800      	cmp	r0, #0
 800a5e6:	d06a      	beq.n	800a6be <HAL_JPEG_GetInfo+0xde>
 800a5e8:	2900      	cmp	r1, #0
 800a5ea:	d068      	beq.n	800a6be <HAL_JPEG_GetInfo+0xde>
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 800a5ec:	6804      	ldr	r4, [r0, #0]
 800a5ee:	6863      	ldr	r3, [r4, #4]
 800a5f0:	f003 0303 	and.w	r3, r3, #3
 800a5f4:	2b02      	cmp	r3, #2
 800a5f6:	d13b      	bne.n	800a670 <HAL_JPEG_GetInfo+0x90>
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 800a5f8:	2310      	movs	r3, #16
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 800a5fa:	600b      	str	r3, [r1, #0]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800a5fc:	6863      	ldr	r3, [r4, #4]
 800a5fe:	0c1b      	lsrs	r3, r3, #16
 800a600:	608b      	str	r3, [r1, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 800a602:	68e3      	ldr	r3, [r4, #12]
 800a604:	0c1b      	lsrs	r3, r3, #16
 800a606:	60cb      	str	r3, [r1, #12]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 800a608:	680b      	ldr	r3, [r1, #0]
 800a60a:	f023 0320 	bic.w	r3, r3, #32
 800a60e:	2b10      	cmp	r3, #16
 800a610:	d13b      	bne.n	800a68a <HAL_JPEG_GetInfo+0xaa>
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 800a612:	6925      	ldr	r5, [r4, #16]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 800a614:	6963      	ldr	r3, [r4, #20]
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 800a616:	f3c5 1503 	ubfx	r5, r5, #4, #4
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 800a61a:	69a2      	ldr	r2, [r4, #24]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 800a61c:	091b      	lsrs	r3, r3, #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800a61e:	2d01      	cmp	r5, #1
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 800a620:	ea4f 1212 	mov.w	r2, r2, lsr #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800a624:	d12f      	bne.n	800a686 <HAL_JPEG_GetInfo+0xa6>
 800a626:	4313      	orrs	r3, r2
 800a628:	071a      	lsls	r2, r3, #28
 800a62a:	d12e      	bne.n	800a68a <HAL_JPEG_GetInfo+0xaa>
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 800a62c:	2302      	movs	r3, #2
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 800a62e:	604b      	str	r3, [r1, #4]
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
  uint32_t quality = 0;
 800a630:	2300      	movs	r3, #0
 800a632:	3450      	adds	r4, #80	; 0x50
 800a634:	f8df c08c 	ldr.w	ip, [pc, #140]	; 800a6c4 <HAL_JPEG_GetInfo+0xe4>
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;

  i = 0;
 800a638:	461d      	mov	r5, r3
        quality += 100UL;
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800a63a:	f04f 0e64 	mov.w	lr, #100	; 0x64
        {
          quality += (200UL - scale) / 2UL;
        }
        else
        {
          quality += 5000UL / scale;
 800a63e:	f241 3888 	movw	r8, #5000	; 0x1388
    quantRow = *tableAddress;
 800a642:	f854 9005 	ldr.w	r9, [r4, r5]
    for (j = 0; j < 4UL; j++)
 800a646:	eb0c 0705 	add.w	r7, ip, r5
    quantRow = *tableAddress;
 800a64a:	2600      	movs	r6, #0
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 800a64c:	fa29 f206 	lsr.w	r2, r9, r6
 800a650:	b2d2      	uxtb	r2, r2
      if (quantVal == 1UL)
 800a652:	2a01      	cmp	r2, #1
 800a654:	d120      	bne.n	800a698 <HAL_JPEG_GetInfo+0xb8>
        quality += 100UL;
 800a656:	3364      	adds	r3, #100	; 0x64
    for (j = 0; j < 4UL; j++)
 800a658:	3608      	adds	r6, #8
 800a65a:	3701      	adds	r7, #1
 800a65c:	2e20      	cmp	r6, #32
 800a65e:	d1f5      	bne.n	800a64c <HAL_JPEG_GetInfo+0x6c>
        }
      }
    }

    i += 4UL;
 800a660:	3504      	adds	r5, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800a662:	2d40      	cmp	r5, #64	; 0x40
 800a664:	d1ed      	bne.n	800a642 <HAL_JPEG_GetInfo+0x62>
    tableAddress ++;
  }

  return (quality / 64UL);
 800a666:	099b      	lsrs	r3, r3, #6
  return HAL_OK;
 800a668:	2000      	movs	r0, #0
  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 800a66a:	610b      	str	r3, [r1, #16]
}
 800a66c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 800a670:	6863      	ldr	r3, [r4, #4]
 800a672:	f013 0303 	ands.w	r3, r3, #3
 800a676:	d0c0      	beq.n	800a5fa <HAL_JPEG_GetInfo+0x1a>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 800a678:	6863      	ldr	r3, [r4, #4]
 800a67a:	f003 0303 	and.w	r3, r3, #3
 800a67e:	2b03      	cmp	r3, #3
 800a680:	d11d      	bne.n	800a6be <HAL_JPEG_GetInfo+0xde>
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 800a682:	2330      	movs	r3, #48	; 0x30
 800a684:	e7b9      	b.n	800a5fa <HAL_JPEG_GetInfo+0x1a>
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800a686:	2d03      	cmp	r5, #3
 800a688:	d001      	beq.n	800a68e <HAL_JPEG_GetInfo+0xae>
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800a68a:	2300      	movs	r3, #0
 800a68c:	e7cf      	b.n	800a62e <HAL_JPEG_GetInfo+0x4e>
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800a68e:	4313      	orrs	r3, r2
 800a690:	071b      	lsls	r3, r3, #28
 800a692:	d1fa      	bne.n	800a68a <HAL_JPEG_GetInfo+0xaa>
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 800a694:	2301      	movs	r3, #1
 800a696:	e7ca      	b.n	800a62e <HAL_JPEG_GetInfo+0x4e>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800a698:	fb0e fb02 	mul.w	fp, lr, r2
 800a69c:	f897 a000 	ldrb.w	sl, [r7]
 800a6a0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a6a2:	f812 a00a 	ldrb.w	sl, [r2, sl]
 800a6a6:	fbbb f2fa 	udiv	r2, fp, sl
        if (scale <= 100UL)
 800a6aa:	2a64      	cmp	r2, #100	; 0x64
          quality += 5000UL / scale;
 800a6ac:	bf8b      	itete	hi
 800a6ae:	fbb8 f2f2 	udivhi	r2, r8, r2
          quality += (200UL - scale) / 2UL;
 800a6b2:	f1c2 02c8 	rsbls	r2, r2, #200	; 0xc8
          quality += 5000UL / scale;
 800a6b6:	189b      	addhi	r3, r3, r2
          quality += (200UL - scale) / 2UL;
 800a6b8:	eb03 0352 	addls.w	r3, r3, r2, lsr #1
          quality += 5000UL / scale;
 800a6bc:	e7cc      	b.n	800a658 <HAL_JPEG_GetInfo+0x78>
    return HAL_ERROR;
 800a6be:	2001      	movs	r0, #1
 800a6c0:	e7d4      	b.n	800a66c <HAL_JPEG_GetInfo+0x8c>
 800a6c2:	bf00      	nop
 800a6c4:	0802a3b9 	.word	0x0802a3b9

0800a6c8 <HAL_JPEG_Decode_DMA>:
{
 800a6c8:	b570      	push	{r4, r5, r6, lr}
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 800a6ca:	4604      	mov	r4, r0
 800a6cc:	b348      	cbz	r0, 800a722 <HAL_JPEG_Decode_DMA+0x5a>
 800a6ce:	b341      	cbz	r1, 800a722 <HAL_JPEG_Decode_DMA+0x5a>
 800a6d0:	b33b      	cbz	r3, 800a722 <HAL_JPEG_Decode_DMA+0x5a>
  __HAL_LOCK(hjpeg);
 800a6d2:	f890 504c 	ldrb.w	r5, [r0, #76]	; 0x4c
 800a6d6:	2d01      	cmp	r5, #1
 800a6d8:	d028      	beq.n	800a72c <HAL_JPEG_Decode_DMA+0x64>
 800a6da:	2501      	movs	r5, #1
 800a6dc:	f880 504c 	strb.w	r5, [r0, #76]	; 0x4c
  if (hjpeg->State == HAL_JPEG_STATE_READY)
 800a6e0:	f890 504d 	ldrb.w	r5, [r0, #77]	; 0x4d
 800a6e4:	2d01      	cmp	r5, #1
 800a6e6:	d11e      	bne.n	800a726 <HAL_JPEG_Decode_DMA+0x5e>
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 800a6e8:	2504      	movs	r5, #4
    hjpeg->InDataLength = InDataLength;
 800a6ea:	6282      	str	r2, [r0, #40]	; 0x28
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 800a6ec:	f880 504d 	strb.w	r5, [r0, #77]	; 0x4d
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 800a6f0:	6d45      	ldr	r5, [r0, #84]	; 0x54
 800a6f2:	f025 050f 	bic.w	r5, r5, #15
 800a6f6:	6545      	str	r5, [r0, #84]	; 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 800a6f8:	6d45      	ldr	r5, [r0, #84]	; 0x54
 800a6fa:	f045 050e 	orr.w	r5, r5, #14
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 800a6fe:	e9c0 1306 	strd	r1, r3, [r0, #24]
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 800a702:	6545      	str	r5, [r0, #84]	; 0x54
    hjpeg->JpegInCount = 0;
 800a704:	2500      	movs	r5, #0
    hjpeg->OutDataLength = OutDataLength;
 800a706:	9b04      	ldr	r3, [sp, #16]
    hjpeg->JpegInCount = 0;
 800a708:	6205      	str	r5, [r0, #32]
    hjpeg->OutDataLength = OutDataLength;
 800a70a:	62c3      	str	r3, [r0, #44]	; 0x2c
    hjpeg->JpegOutCount = 0;
 800a70c:	6245      	str	r5, [r0, #36]	; 0x24
    JPEG_Init_Process(hjpeg);
 800a70e:	f7ff fda1 	bl	800a254 <JPEG_Init_Process>
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 800a712:	f7ff fddf 	bl	800a2d4 <JPEG_DMA_StartProcess>
 800a716:	b128      	cbz	r0, 800a724 <HAL_JPEG_Decode_DMA+0x5c>
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 800a718:	2306      	movs	r3, #6
      __HAL_UNLOCK(hjpeg);
 800a71a:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 800a71e:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
    return HAL_ERROR;
 800a722:	2001      	movs	r0, #1
}
 800a724:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hjpeg);
 800a726:	2300      	movs	r3, #0
 800a728:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
  __HAL_LOCK(hjpeg);
 800a72c:	2002      	movs	r0, #2
 800a72e:	e7f9      	b.n	800a724 <HAL_JPEG_Decode_DMA+0x5c>

0800a730 <HAL_JPEG_Pause>:
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800a730:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800a732:	f003 030c 	and.w	r3, r3, #12
 800a736:	2b0c      	cmp	r3, #12
 800a738:	d117      	bne.n	800a76a <HAL_JPEG_Pause+0x3a>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800a73a:	f011 0301 	ands.w	r3, r1, #1
 800a73e:	d005      	beq.n	800a74c <HAL_JPEG_Pause+0x1c>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800a740:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800a742:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a746:	6543      	str	r3, [r0, #84]	; 0x54
      mask |= JPEG_DMA_IDMA;
 800a748:	f44f 6300 	mov.w	r3, #2048	; 0x800
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800a74c:	0789      	lsls	r1, r1, #30
 800a74e:	d505      	bpl.n	800a75c <HAL_JPEG_Pause+0x2c>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800a750:	6d42      	ldr	r2, [r0, #84]	; 0x54
      mask |= JPEG_DMA_ODMA;
 800a752:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800a756:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a75a:	6542      	str	r2, [r0, #84]	; 0x54
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 800a75c:	6801      	ldr	r1, [r0, #0]
 800a75e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800a760:	ea22 0303 	bic.w	r3, r2, r3
 800a764:	630b      	str	r3, [r1, #48]	; 0x30
}
 800a766:	2000      	movs	r0, #0
 800a768:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800a76a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800a76c:	f003 030c 	and.w	r3, r3, #12
 800a770:	2b08      	cmp	r3, #8
 800a772:	d1f8      	bne.n	800a766 <HAL_JPEG_Pause+0x36>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800a774:	f011 0301 	ands.w	r3, r1, #1
 800a778:	d004      	beq.n	800a784 <HAL_JPEG_Pause+0x54>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800a77a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800a77c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a780:	6543      	str	r3, [r0, #84]	; 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800a782:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800a784:	078a      	lsls	r2, r1, #30
 800a786:	d5e9      	bpl.n	800a75c <HAL_JPEG_Pause+0x2c>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800a788:	6d42      	ldr	r2, [r0, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800a78a:	f043 0328 	orr.w	r3, r3, #40	; 0x28
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800a78e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a792:	6542      	str	r2, [r0, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800a794:	e7e2      	b.n	800a75c <HAL_JPEG_Pause+0x2c>

0800a796 <HAL_JPEG_ConfigInputBuffer>:
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 800a796:	6181      	str	r1, [r0, #24]
  hjpeg->InDataLength = InDataLength;
 800a798:	6282      	str	r2, [r0, #40]	; 0x28
}
 800a79a:	4770      	bx	lr

0800a79c <HAL_JPEG_ConfigOutputBuffer>:
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 800a79c:	61c1      	str	r1, [r0, #28]
  hjpeg->OutDataLength = OutDataLength;
 800a79e:	62c2      	str	r2, [r0, #44]	; 0x2c
}
 800a7a0:	4770      	bx	lr

0800a7a2 <HAL_JPEG_EncodeCpltCallback>:
 800a7a2:	4770      	bx	lr

0800a7a4 <JPEG_DMAErrorCallback>:
{
 800a7a4:	b510      	push	{r4, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a7a6:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800a7a8:	f7fe f8c8 	bl	800893c <HAL_DMA_GetError>
 800a7ac:	2802      	cmp	r0, #2
 800a7ae:	d016      	beq.n	800a7de <JPEG_DMAErrorCallback+0x3a>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800a7b0:	6823      	ldr	r3, [r4, #0]
    HAL_JPEG_ErrorCallback(hjpeg);
 800a7b2:	4620      	mov	r0, r4
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800a7b4:	681a      	ldr	r2, [r3, #0]
 800a7b6:	f022 0201 	bic.w	r2, r2, #1
 800a7ba:	601a      	str	r2, [r3, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800a7bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a7be:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 800a7c2:	631a      	str	r2, [r3, #48]	; 0x30
    JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_MASK);
 800a7c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a7c6:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 800a7ca:	631a      	str	r2, [r3, #48]	; 0x30
    hjpeg->State = HAL_JPEG_STATE_READY;
 800a7cc:	2301      	movs	r3, #1
 800a7ce:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800a7d2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a7d4:	f043 0304 	orr.w	r3, r3, #4
 800a7d8:	6523      	str	r3, [r4, #80]	; 0x50
    HAL_JPEG_ErrorCallback(hjpeg);
 800a7da:	f7f7 f821 	bl	8001820 <HAL_JPEG_ErrorCallback>
}
 800a7de:	bd10      	pop	{r4, pc}

0800a7e0 <JPEG_ReadInputData>:
{
 800a7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800a7e2:	6a85      	ldr	r5, [r0, #40]	; 0x28
{
 800a7e4:	4604      	mov	r4, r0
 800a7e6:	460e      	mov	r6, r1
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800a7e8:	bb35      	cbnz	r5, 800a838 <JPEG_ReadInputData+0x58>
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 800a7ea:	2101      	movs	r1, #1
 800a7ec:	f7ff ffa0 	bl	800a730 <HAL_JPEG_Pause>
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 800a7f0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a7f2:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 800a7f6:	d11e      	bne.n	800a836 <JPEG_ReadInputData+0x56>
 800a7f8:	b1ed      	cbz	r5, 800a836 <JPEG_ReadInputData+0x56>
    if (nb_words >= nbRequestWords)
 800a7fa:	ebb6 0f95 	cmp.w	r6, r5, lsr #2
    nb_words = nb_bytes / 4UL;
 800a7fe:	ea4f 0795 	mov.w	r7, r5, lsr #2
    if (nb_words >= nbRequestWords)
 800a802:	d830      	bhi.n	800a866 <JPEG_ReadInputData+0x86>
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a804:	69a5      	ldr	r5, [r4, #24]
 800a806:	6827      	ldr	r7, [r4, #0]
        input_count = hjpeg->JpegInCount;
 800a808:	6a20      	ldr	r0, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 800a80a:	3301      	adds	r3, #1
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800a80c:	1829      	adds	r1, r5, r0
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a80e:	5c28      	ldrb	r0, [r5, r0]
      for (index = 0; index < nbRequestWords; index++)
 800a810:	429e      	cmp	r6, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800a812:	788a      	ldrb	r2, [r1, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800a814:	f891 c001 	ldrb.w	ip, [r1, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800a818:	ea4f 4202 	mov.w	r2, r2, lsl #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800a81c:	78c9      	ldrb	r1, [r1, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800a81e:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 800a822:	ea42 0200 	orr.w	r2, r2, r0
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800a826:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a82a:	643a      	str	r2, [r7, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
 800a82c:	6a22      	ldr	r2, [r4, #32]
 800a82e:	f102 0204 	add.w	r2, r2, #4
 800a832:	6222      	str	r2, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 800a834:	d1e8      	bne.n	800a808 <JPEG_ReadInputData+0x28>
}
 800a836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 800a838:	6a03      	ldr	r3, [r0, #32]
 800a83a:	429d      	cmp	r5, r3
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 800a83c:	6a03      	ldr	r3, [r0, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 800a83e:	d901      	bls.n	800a844 <JPEG_ReadInputData+0x64>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 800a840:	1aed      	subs	r5, r5, r3
 800a842:	e7d5      	b.n	800a7f0 <JPEG_ReadInputData+0x10>
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 800a844:	429d      	cmp	r5, r3
 800a846:	d10c      	bne.n	800a862 <JPEG_ReadInputData+0x82>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800a848:	6a01      	ldr	r1, [r0, #32]
 800a84a:	f7f6 ff91 	bl	8001770 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
 800a84e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a850:	2b04      	cmp	r3, #4
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800a852:	bf84      	itt	hi
 800a854:	f023 0303 	bichi.w	r3, r3, #3
 800a858:	62a3      	strhi	r3, [r4, #40]	; 0x28
    hjpeg->JpegInCount = 0;
 800a85a:	2300      	movs	r3, #0
    nb_bytes = hjpeg->InDataLength;
 800a85c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    hjpeg->JpegInCount = 0;
 800a85e:	6223      	str	r3, [r4, #32]
    nb_bytes = hjpeg->InDataLength;
 800a860:	e7c6      	b.n	800a7f0 <JPEG_ReadInputData+0x10>
  uint32_t nb_bytes = 0;
 800a862:	2500      	movs	r5, #0
 800a864:	e7c4      	b.n	800a7f0 <JPEG_ReadInputData+0x10>
      if (nb_words > 0UL)
 800a866:	2d03      	cmp	r5, #3
 800a868:	d826      	bhi.n	800a8b8 <JPEG_ReadInputData+0xd8>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800a86a:	69a6      	ldr	r6, [r4, #24]
        for (index = 0; index < nb_bytes; index++)
 800a86c:	461a      	mov	r2, r3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800a86e:	6a21      	ldr	r1, [r4, #32]
 800a870:	00d0      	lsls	r0, r2, #3
        for (index = 0; index < nb_bytes; index++)
 800a872:	3201      	adds	r2, #1
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800a874:	5c71      	ldrb	r1, [r6, r1]
        for (index = 0; index < nb_bytes; index++)
 800a876:	4295      	cmp	r5, r2
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800a878:	fa01 f100 	lsl.w	r1, r1, r0
 800a87c:	ea43 0301 	orr.w	r3, r3, r1
          hjpeg->JpegInCount++;
 800a880:	6a21      	ldr	r1, [r4, #32]
 800a882:	f101 0101 	add.w	r1, r1, #1
 800a886:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 800a888:	d1f1      	bne.n	800a86e <JPEG_ReadInputData+0x8e>
        hjpeg->Instance->DIR = dataword;
 800a88a:	6822      	ldr	r2, [r4, #0]
 800a88c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800a88e:	e7d2      	b.n	800a836 <JPEG_ReadInputData+0x56>
          input_count = hjpeg->JpegInCount;
 800a890:	6a25      	ldr	r5, [r4, #32]
        for (index = 0; index < nb_words; index++)
 800a892:	3301      	adds	r3, #1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a894:	69a6      	ldr	r6, [r4, #24]
 800a896:	6821      	ldr	r1, [r4, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800a898:	1970      	adds	r0, r6, r5
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a89a:	5d75      	ldrb	r5, [r6, r5]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800a89c:	7882      	ldrb	r2, [r0, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800a89e:	f890 c001 	ldrb.w	ip, [r0, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800a8a2:	0412      	lsls	r2, r2, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800a8a4:	78c0      	ldrb	r0, [r0, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800a8a6:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 800a8aa:	432a      	orrs	r2, r5
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800a8ac:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a8b0:	640a      	str	r2, [r1, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
 800a8b2:	6a22      	ldr	r2, [r4, #32]
 800a8b4:	3204      	adds	r2, #4
 800a8b6:	6222      	str	r2, [r4, #32]
        for (index = 0; index < nb_words; index++)
 800a8b8:	42bb      	cmp	r3, r7
 800a8ba:	d1e9      	bne.n	800a890 <JPEG_ReadInputData+0xb0>
 800a8bc:	e7bb      	b.n	800a836 <JPEG_ReadInputData+0x56>
	...

0800a8c0 <JPEG_DMAInCpltCallback>:
{
 800a8c0:	b510      	push	{r4, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a8c2:	6b84      	ldr	r4, [r0, #56]	; 0x38
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800a8c4:	6823      	ldr	r3, [r4, #0]
 800a8c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a8c8:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 800a8cc:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 800a8ce:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800a8d0:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 800a8d4:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 800a8d8:	0412      	lsls	r2, r2, #16
 800a8da:	0c12      	lsrs	r2, r2, #16
 800a8dc:	2a0c      	cmp	r2, #12
 800a8de:	d12c      	bne.n	800a93a <JPEG_DMAInCpltCallback+0x7a>
    JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_IDMA);
 800a8e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a8e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a8e6:	631a      	str	r2, [r3, #48]	; 0x30
    hjpeg->JpegInCount = hjpeg->InDataLength - ((hdma->Instance->NDTR & DMA_SxNDT) << 2);
 800a8e8:	6803      	ldr	r3, [r0, #0]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800a8ea:	4620      	mov	r0, r4
    hjpeg->JpegInCount = hjpeg->InDataLength - ((hdma->Instance->NDTR & DMA_SxNDT) << 2);
 800a8ec:	685a      	ldr	r2, [r3, #4]
 800a8ee:	4b1b      	ldr	r3, [pc, #108]	; (800a95c <JPEG_DMAInCpltCallback+0x9c>)
 800a8f0:	ea03 0282 	and.w	r2, r3, r2, lsl #2
 800a8f4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a8f6:	1a9b      	subs	r3, r3, r2
 800a8f8:	6223      	str	r3, [r4, #32]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800a8fa:	6a21      	ldr	r1, [r4, #32]
 800a8fc:	f7f6 ff38 	bl	8001770 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength >= 4UL)
 800a900:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a902:	2b03      	cmp	r3, #3
 800a904:	d91a      	bls.n	800a93c <JPEG_DMAInCpltCallback+0x7c>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800a906:	f023 0303 	bic.w	r3, r3, #3
      hjpeg->InDataLength = 4;
 800a90a:	62a3      	str	r3, [r4, #40]	; 0x28
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 800a90c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a90e:	04db      	lsls	r3, r3, #19
 800a910:	d41d      	bmi.n	800a94e <JPEG_DMAInCpltCallback+0x8e>
 800a912:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a914:	b1db      	cbz	r3, 800a94e <JPEG_DMAInCpltCallback+0x8e>
      if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800a916:	6822      	ldr	r2, [r4, #0]
 800a918:	089b      	lsrs	r3, r3, #2
 800a91a:	69a1      	ldr	r1, [r4, #24]
 800a91c:	3240      	adds	r2, #64	; 0x40
 800a91e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800a920:	f7fd fefe 	bl	8008720 <HAL_DMA_Start_IT>
 800a924:	b170      	cbz	r0, 800a944 <JPEG_DMAInCpltCallback+0x84>
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800a926:	6d23      	ldr	r3, [r4, #80]	; 0x50
        HAL_JPEG_ErrorCallback(hjpeg);
 800a928:	4620      	mov	r0, r4
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800a92a:	f043 0304 	orr.w	r3, r3, #4
 800a92e:	6523      	str	r3, [r4, #80]	; 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800a930:	2306      	movs	r3, #6
 800a932:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
        HAL_JPEG_ErrorCallback(hjpeg);
 800a936:	f7f6 ff73 	bl	8001820 <HAL_JPEG_ErrorCallback>
}
 800a93a:	bd10      	pop	{r4, pc}
    else if (hjpeg->InDataLength > 0UL)
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d0e5      	beq.n	800a90c <JPEG_DMAInCpltCallback+0x4c>
      hjpeg->InDataLength = 4;
 800a940:	2304      	movs	r3, #4
 800a942:	e7e2      	b.n	800a90a <JPEG_DMAInCpltCallback+0x4a>
      JPEG_ENABLE_DMA(hjpeg, JPEG_DMA_IDMA);
 800a944:	6822      	ldr	r2, [r4, #0]
 800a946:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800a948:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a94c:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800a94e:	6822      	ldr	r2, [r4, #0]
 800a950:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800a952:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800a956:	6313      	str	r3, [r2, #48]	; 0x30
 800a958:	e7ef      	b.n	800a93a <JPEG_DMAInCpltCallback+0x7a>
 800a95a:	bf00      	nop
 800a95c:	0003fffc 	.word	0x0003fffc

0800a960 <JPEG_StoreOutputData>:
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800a960:	6a42      	ldr	r2, [r0, #36]	; 0x24
{
 800a962:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800a964:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800a968:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
 800a96a:	4604      	mov	r4, r0
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800a96c:	4293      	cmp	r3, r2
 800a96e:	d32a      	bcc.n	800a9c6 <JPEG_StoreOutputData+0x66>
    for (index = 0; index < nbOutputWords; index++)
 800a970:	2200      	movs	r2, #0
      dataword = hjpeg->Instance->DOR;
 800a972:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nbOutputWords; index++)
 800a974:	3201      	adds	r2, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800a976:	69e5      	ldr	r5, [r4, #28]
      dataword = hjpeg->Instance->DOR;
 800a978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    for (index = 0; index < nbOutputWords; index++)
 800a97a:	4291      	cmp	r1, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800a97c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a97e:	542b      	strb	r3, [r5, r0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800a980:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a982:	69e0      	ldr	r0, [r4, #28]
 800a984:	4428      	add	r0, r5
 800a986:	ea4f 2513 	mov.w	r5, r3, lsr #8
 800a98a:	7045      	strb	r5, [r0, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800a98c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a98e:	69e0      	ldr	r0, [r4, #28]
 800a990:	4428      	add	r0, r5
 800a992:	ea4f 4513 	mov.w	r5, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800a996:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800a99a:	7085      	strb	r5, [r0, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800a99c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a99e:	69e0      	ldr	r0, [r4, #28]
 800a9a0:	4428      	add	r0, r5
 800a9a2:	70c3      	strb	r3, [r0, #3]
      hjpeg->JpegOutCount += 4UL;
 800a9a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a9a6:	f103 0304 	add.w	r3, r3, #4
 800a9aa:	6263      	str	r3, [r4, #36]	; 0x24
    for (index = 0; index < nbOutputWords; index++)
 800a9ac:	d1e1      	bne.n	800a972 <JPEG_StoreOutputData+0x12>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800a9ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a9b0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a9b2:	429a      	cmp	r2, r3
 800a9b4:	d106      	bne.n	800a9c4 <JPEG_StoreOutputData+0x64>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a9b6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a9b8:	69e1      	ldr	r1, [r4, #28]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a9ba:	4620      	mov	r0, r4
 800a9bc:	f7f6 fef6 	bl	80017ac <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	6263      	str	r3, [r4, #36]	; 0x24
}
 800a9c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 800a9c6:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800a9c8:	4293      	cmp	r3, r2
 800a9ca:	d9fb      	bls.n	800a9c4 <JPEG_StoreOutputData+0x64>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800a9cc:	6a42      	ldr	r2, [r0, #36]	; 0x24
    for (index = 0; index < nb_words; index++)
 800a9ce:	2000      	movs	r0, #0
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800a9d0:	1a9b      	subs	r3, r3, r2
 800a9d2:	089a      	lsrs	r2, r3, #2
    for (index = 0; index < nb_words; index++)
 800a9d4:	4290      	cmp	r0, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800a9d6:	69e1      	ldr	r1, [r4, #28]
    for (index = 0; index < nb_words; index++)
 800a9d8:	d105      	bne.n	800a9e6 <JPEG_StoreOutputData+0x86>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800a9da:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a9dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a9de:	429f      	cmp	r7, r3
 800a9e0:	d119      	bne.n	800aa16 <JPEG_StoreOutputData+0xb6>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a9e2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a9e4:	e7e9      	b.n	800a9ba <JPEG_StoreOutputData+0x5a>
      dataword = hjpeg->Instance->DOR;
 800a9e6:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nb_words; index++)
 800a9e8:	3001      	adds	r0, #1
      dataword = hjpeg->Instance->DOR;
 800a9ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800a9ec:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a9ee:	554b      	strb	r3, [r1, r5]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800a9f0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a9f2:	69e1      	ldr	r1, [r4, #28]
 800a9f4:	4429      	add	r1, r5
 800a9f6:	0a1d      	lsrs	r5, r3, #8
 800a9f8:	704d      	strb	r5, [r1, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800a9fa:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a9fc:	69e1      	ldr	r1, [r4, #28]
 800a9fe:	4429      	add	r1, r5
 800aa00:	0c1d      	lsrs	r5, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800aa02:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800aa04:	708d      	strb	r5, [r1, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800aa06:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800aa08:	69e1      	ldr	r1, [r4, #28]
 800aa0a:	4429      	add	r1, r5
 800aa0c:	70cb      	strb	r3, [r1, #3]
      hjpeg->JpegOutCount += 4UL;
 800aa0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa10:	3304      	adds	r3, #4
 800aa12:	6263      	str	r3, [r4, #36]	; 0x24
    for (index = 0; index < nb_words; index++)
 800aa14:	e7de      	b.n	800a9d4 <JPEG_StoreOutputData+0x74>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800aa16:	6a65      	ldr	r5, [r4, #36]	; 0x24
      for (index = 0; index < nb_bytes; index++)
 800aa18:	2000      	movs	r0, #0
      dataword = hjpeg->Instance->DOR;
 800aa1a:	6823      	ldr	r3, [r4, #0]
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800aa1c:	eba7 0c05 	sub.w	ip, r7, r5
      dataword = hjpeg->Instance->DOR;
 800aa20:	6c5e      	ldr	r6, [r3, #68]	; 0x44
      for (index = 0; index < nb_bytes; index++)
 800aa22:	4560      	cmp	r0, ip
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800aa24:	69e1      	ldr	r1, [r4, #28]
      for (index = 0; index < nb_bytes; index++)
 800aa26:	d114      	bne.n	800aa52 <JPEG_StoreOutputData+0xf2>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800aa28:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800aa2a:	4620      	mov	r0, r4
 800aa2c:	f7f6 febe 	bl	80017ac <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800aa30:	2300      	movs	r3, #0
 800aa32:	6263      	str	r3, [r4, #36]	; 0x24
      nb_bytes = 4UL - nb_bytes;
 800aa34:	1d2b      	adds	r3, r5, #4
 800aa36:	1bdb      	subs	r3, r3, r7
      for (index = nb_bytes; index < 4UL; index++)
 800aa38:	2b03      	cmp	r3, #3
 800aa3a:	d8c3      	bhi.n	800a9c4 <JPEG_StoreOutputData+0x64>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800aa3c:	00da      	lsls	r2, r3, #3
 800aa3e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800aa40:	69e0      	ldr	r0, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
 800aa42:	3301      	adds	r3, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800aa44:	fa26 f202 	lsr.w	r2, r6, r2
 800aa48:	5442      	strb	r2, [r0, r1]
        hjpeg->JpegOutCount++;
 800aa4a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800aa4c:	3201      	adds	r2, #1
 800aa4e:	6262      	str	r2, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
 800aa50:	e7f2      	b.n	800aa38 <JPEG_StoreOutputData+0xd8>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800aa52:	f000 0203 	and.w	r2, r0, #3
 800aa56:	6a63      	ldr	r3, [r4, #36]	; 0x24
      for (index = 0; index < nb_bytes; index++)
 800aa58:	3001      	adds	r0, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800aa5a:	00d2      	lsls	r2, r2, #3
 800aa5c:	fa26 f202 	lsr.w	r2, r6, r2
 800aa60:	54ca      	strb	r2, [r1, r3]
        hjpeg->JpegOutCount++;
 800aa62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa64:	3301      	adds	r3, #1
 800aa66:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = 0; index < nb_bytes; index++)
 800aa68:	e7db      	b.n	800aa22 <JPEG_StoreOutputData+0xc2>

0800aa6a <JPEG_Process>:
{
 800aa6a:	b538      	push	{r3, r4, r5, lr}
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800aa6c:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
 800aa6e:	4604      	mov	r4, r0
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800aa70:	f003 0303 	and.w	r3, r3, #3
 800aa74:	2b02      	cmp	r3, #2
 800aa76:	d114      	bne.n	800aaa2 <JPEG_Process+0x38>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800aa78:	6803      	ldr	r3, [r0, #0]
 800aa7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa7c:	065a      	lsls	r2, r3, #25
 800aa7e:	d510      	bpl.n	800aaa2 <JPEG_Process+0x38>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800aa80:	1d01      	adds	r1, r0, #4
 800aa82:	f7ff fdad 	bl	800a5e0 <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 800aa86:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800aa88:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 800aa8a:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800aa8c:	f7f6 fe22 	bl	80016d4 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800aa90:	6823      	ldr	r3, [r4, #0]
 800aa92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aa94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aa98:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800aa9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aaa0:	639a      	str	r2, [r3, #56]	; 0x38
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 800aaa2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800aaa4:	04db      	lsls	r3, r3, #19
 800aaa6:	d407      	bmi.n	800aab8 <JPEG_Process+0x4e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 800aaa8:	6823      	ldr	r3, [r4, #0]
 800aaaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aaac:	0795      	lsls	r5, r2, #30
 800aaae:	d543      	bpl.n	800ab38 <JPEG_Process+0xce>
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800aab0:	2104      	movs	r1, #4
      JPEG_ReadInputData(hjpeg, 1);
 800aab2:	4620      	mov	r0, r4
 800aab4:	f7ff fe94 	bl	800a7e0 <JPEG_ReadInputData>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800aab8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800aaba:	0499      	lsls	r1, r3, #18
 800aabc:	d407      	bmi.n	800aace <JPEG_Process+0x64>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 800aabe:	6823      	ldr	r3, [r4, #0]
 800aac0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aac2:	0712      	lsls	r2, r2, #28
 800aac4:	d53d      	bpl.n	800ab42 <JPEG_Process+0xd8>
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800aac6:	2104      	movs	r1, #4
      JPEG_StoreOutputData(hjpeg, 1);
 800aac8:	4620      	mov	r0, r4
 800aaca:	f7ff ff49 	bl	800a960 <JPEG_StoreOutputData>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 800aace:	6823      	ldr	r3, [r4, #0]
 800aad0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aad2:	f002 0238 	and.w	r2, r2, #56	; 0x38
 800aad6:	2a20      	cmp	r2, #32
 800aad8:	d13b      	bne.n	800ab52 <JPEG_Process+0xe8>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800aada:	681a      	ldr	r2, [r3, #0]
 800aadc:	f022 0201 	bic.w	r2, r2, #1
 800aae0:	601a      	str	r2, [r3, #0]
    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800aae2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800aae4:	f002 020c 	and.w	r2, r2, #12
 800aae8:	2a08      	cmp	r2, #8
 800aaea:	d103      	bne.n	800aaf4 <JPEG_Process+0x8a>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800aaec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aaee:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 800aaf2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800aaf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aaf6:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800aafa:	639a      	str	r2, [r3, #56]	; 0x38
    if (hjpeg->JpegOutCount > 0UL)
 800aafc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aafe:	b133      	cbz	r3, 800ab0e <JPEG_Process+0xa4>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800ab00:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800ab02:	4620      	mov	r0, r4
 800ab04:	69e1      	ldr	r1, [r4, #28]
 800ab06:	f7f6 fe51 	bl	80017ac <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	6263      	str	r3, [r4, #36]	; 0x24
    tmpContext = hjpeg->Context;
 800ab0e:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
 800ab10:	2501      	movs	r5, #1
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800ab12:	6d62      	ldr	r2, [r4, #84]	; 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800ab14:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800ab16:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800ab1a:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800ab1e:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800ab20:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hjpeg);
 800ab22:	f04f 0200 	mov.w	r2, #0
    hjpeg->State = HAL_JPEG_STATE_READY;
 800ab26:	f884 504d 	strb.w	r5, [r4, #77]	; 0x4d
    __HAL_UNLOCK(hjpeg);
 800ab2a:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800ab2e:	d10d      	bne.n	800ab4c <JPEG_Process+0xe2>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800ab30:	f7f6 fe78 	bl	8001824 <HAL_JPEG_DecodeCpltCallback>
    return JPEG_PROCESS_DONE;
 800ab34:	4628      	mov	r0, r5
}
 800ab36:	bd38      	pop	{r3, r4, r5, pc}
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 800ab38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab3a:	0758      	lsls	r0, r3, #29
 800ab3c:	d5bc      	bpl.n	800aab8 <JPEG_Process+0x4e>
      JPEG_ReadInputData(hjpeg, 1);
 800ab3e:	2101      	movs	r1, #1
 800ab40:	e7b7      	b.n	800aab2 <JPEG_Process+0x48>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800ab42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab44:	06db      	lsls	r3, r3, #27
 800ab46:	d5c2      	bpl.n	800aace <JPEG_Process+0x64>
      JPEG_StoreOutputData(hjpeg, 1);
 800ab48:	2101      	movs	r1, #1
 800ab4a:	e7bd      	b.n	800aac8 <JPEG_Process+0x5e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800ab4c:	f7ff fe29 	bl	800a7a2 <HAL_JPEG_EncodeCpltCallback>
 800ab50:	e7f0      	b.n	800ab34 <JPEG_Process+0xca>
  return JPEG_PROCESS_ONGOING;
 800ab52:	2000      	movs	r0, #0
 800ab54:	e7ef      	b.n	800ab36 <JPEG_Process+0xcc>

0800ab56 <JPEG_DMA_PollResidualData>:
{
 800ab56:	b570      	push	{r4, r5, r6, lr}
 800ab58:	4604      	mov	r4, r0
 800ab5a:	2610      	movs	r6, #16
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800ab5c:	6d65      	ldr	r5, [r4, #84]	; 0x54
 800ab5e:	f415 5500 	ands.w	r5, r5, #8192	; 0x2000
 800ab62:	d123      	bne.n	800abac <JPEG_DMA_PollResidualData+0x56>
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800ab64:	6823      	ldr	r3, [r4, #0]
 800ab66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab68:	06d0      	lsls	r0, r2, #27
 800ab6a:	d51f      	bpl.n	800abac <JPEG_DMA_PollResidualData+0x56>
        dataOut = hjpeg->Instance->DOR;
 800ab6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 800ab6e:	69e1      	ldr	r1, [r4, #28]
 800ab70:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800ab72:	548b      	strb	r3, [r1, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 800ab74:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ab76:	69e2      	ldr	r2, [r4, #28]
 800ab78:	440a      	add	r2, r1
 800ab7a:	0a19      	lsrs	r1, r3, #8
 800ab7c:	7051      	strb	r1, [r2, #1]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800ab7e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ab80:	69e2      	ldr	r2, [r4, #28]
 800ab82:	440a      	add	r2, r1
 800ab84:	0c19      	lsrs	r1, r3, #16
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800ab86:	0e1b      	lsrs	r3, r3, #24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800ab88:	7091      	strb	r1, [r2, #2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800ab8a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ab8c:	69e2      	ldr	r2, [r4, #28]
 800ab8e:	440a      	add	r2, r1
 800ab90:	70d3      	strb	r3, [r2, #3]
        hjpeg->JpegOutCount += 4UL;
 800ab92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab94:	3304      	adds	r3, #4
 800ab96:	6263      	str	r3, [r4, #36]	; 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800ab98:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ab9a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800ab9c:	429a      	cmp	r2, r3
 800ab9e:	d105      	bne.n	800abac <JPEG_DMA_PollResidualData+0x56>
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800aba0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800aba2:	4620      	mov	r0, r4
 800aba4:	69e1      	ldr	r1, [r4, #28]
 800aba6:	f7f6 fe01 	bl	80017ac <HAL_JPEG_DataReadyCallback>
          hjpeg->JpegOutCount = 0;
 800abaa:	6265      	str	r5, [r4, #36]	; 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800abac:	3e01      	subs	r6, #1
 800abae:	d1d5      	bne.n	800ab5c <JPEG_DMA_PollResidualData+0x6>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800abb0:	6823      	ldr	r3, [r4, #0]
  tmpContext = hjpeg->Context;
 800abb2:	6d62      	ldr	r2, [r4, #84]	; 0x54
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800abb4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800abb6:	06c9      	lsls	r1, r1, #27
 800abb8:	d501      	bpl.n	800abbe <JPEG_DMA_PollResidualData+0x68>
 800abba:	0492      	lsls	r2, r2, #18
 800abbc:	d420      	bmi.n	800ac00 <JPEG_DMA_PollResidualData+0xaa>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800abbe:	681a      	ldr	r2, [r3, #0]
 800abc0:	f022 0201 	bic.w	r2, r2, #1
 800abc4:	601a      	str	r2, [r3, #0]
    if (hjpeg->JpegOutCount > 0UL)
 800abc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800abc8:	b133      	cbz	r3, 800abd8 <JPEG_DMA_PollResidualData+0x82>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800abca:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800abcc:	4620      	mov	r0, r4
 800abce:	69e1      	ldr	r1, [r4, #28]
 800abd0:	f7f6 fdec 	bl	80017ac <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800abd4:	2300      	movs	r3, #0
 800abd6:	6263      	str	r3, [r4, #36]	; 0x24
    tmpContext = hjpeg->Context;
 800abd8:	6d63      	ldr	r3, [r4, #84]	; 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800abda:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800abdc:	6d62      	ldr	r2, [r4, #84]	; 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800abde:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800abe2:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800abe6:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800abe8:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hjpeg);
 800abea:	f04f 0200 	mov.w	r2, #0
 800abee:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 800abf2:	f04f 0201 	mov.w	r2, #1
 800abf6:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800abfa:	d102      	bne.n	800ac02 <JPEG_DMA_PollResidualData+0xac>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800abfc:	f7f6 fe12 	bl	8001824 <HAL_JPEG_DecodeCpltCallback>
}
 800ac00:	bd70      	pop	{r4, r5, r6, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800ac02:	f7ff fdce 	bl	800a7a2 <HAL_JPEG_EncodeCpltCallback>
}
 800ac06:	e7fb      	b.n	800ac00 <JPEG_DMA_PollResidualData+0xaa>

0800ac08 <HAL_JPEG_Resume>:
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 800ac08:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800ac0a:	f413 5f40 	tst.w	r3, #12288	; 0x3000
{
 800ac0e:	b570      	push	{r4, r5, r6, lr}
 800ac10:	4604      	mov	r4, r0
 800ac12:	460d      	mov	r5, r1
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 800ac14:	d034      	beq.n	800ac80 <HAL_JPEG_Resume+0x78>
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800ac16:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800ac18:	f003 030c 	and.w	r3, r3, #12
 800ac1c:	2b0c      	cmp	r3, #12
 800ac1e:	d13e      	bne.n	800ac9e <HAL_JPEG_Resume+0x96>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800ac20:	f011 0601 	ands.w	r6, r1, #1
 800ac24:	d00a      	beq.n	800ac3c <HAL_JPEG_Resume+0x34>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 800ac26:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800ac28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ac2c:	6543      	str	r3, [r0, #84]	; 0x54
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800ac2e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800ac30:	f023 0303 	bic.w	r3, r3, #3
 800ac34:	6283      	str	r3, [r0, #40]	; 0x28
      if (hjpeg->InDataLength > 0UL)
 800ac36:	b99b      	cbnz	r3, 800ac60 <HAL_JPEG_Resume+0x58>
      mask |= JPEG_DMA_IDMA;
 800ac38:	f44f 6600 	mov.w	r6, #2048	; 0x800
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800ac3c:	07a8      	lsls	r0, r5, #30
 800ac3e:	d509      	bpl.n	800ac54 <HAL_JPEG_Resume+0x4c>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800ac40:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ac42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ac46:	6563      	str	r3, [r4, #84]	; 0x54
      if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 800ac48:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ac4a:	0419      	lsls	r1, r3, #16
 800ac4c:	d51a      	bpl.n	800ac84 <HAL_JPEG_Resume+0x7c>
        JPEG_DMA_PollResidualData(hjpeg);
 800ac4e:	4620      	mov	r0, r4
 800ac50:	f7ff ff81 	bl	800ab56 <JPEG_DMA_PollResidualData>
    JPEG_ENABLE_DMA(hjpeg, mask);
 800ac54:	6822      	ldr	r2, [r4, #0]
 800ac56:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800ac58:	431e      	orrs	r6, r3
 800ac5a:	6316      	str	r6, [r2, #48]	; 0x30
  return HAL_OK;
 800ac5c:	2000      	movs	r0, #0
 800ac5e:	e010      	b.n	800ac82 <HAL_JPEG_Resume+0x7a>
        if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800ac60:	6802      	ldr	r2, [r0, #0]
 800ac62:	089b      	lsrs	r3, r3, #2
 800ac64:	6981      	ldr	r1, [r0, #24]
 800ac66:	3240      	adds	r2, #64	; 0x40
 800ac68:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800ac6a:	f7fd fd59 	bl	8008720 <HAL_DMA_Start_IT>
 800ac6e:	2800      	cmp	r0, #0
 800ac70:	d0e2      	beq.n	800ac38 <HAL_JPEG_Resume+0x30>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800ac72:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ac74:	f043 0304 	orr.w	r3, r3, #4
 800ac78:	6523      	str	r3, [r4, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800ac7a:	2306      	movs	r3, #6
 800ac7c:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
    return HAL_ERROR;
 800ac80:	2001      	movs	r0, #1
}
 800ac82:	bd70      	pop	{r4, r5, r6, pc}
        if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800ac84:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ac86:	6821      	ldr	r1, [r4, #0]
 800ac88:	089b      	lsrs	r3, r3, #2
 800ac8a:	69e2      	ldr	r2, [r4, #28]
 800ac8c:	3144      	adds	r1, #68	; 0x44
 800ac8e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800ac90:	f7fd fd46 	bl	8008720 <HAL_DMA_Start_IT>
 800ac94:	2800      	cmp	r0, #0
 800ac96:	d1ec      	bne.n	800ac72 <HAL_JPEG_Resume+0x6a>
        mask |= JPEG_DMA_ODMA;
 800ac98:	f446 5680 	orr.w	r6, r6, #4096	; 0x1000
 800ac9c:	e7da      	b.n	800ac54 <HAL_JPEG_Resume+0x4c>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800ac9e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800aca0:	f003 030c 	and.w	r3, r3, #12
 800aca4:	2b08      	cmp	r3, #8
 800aca6:	d1d9      	bne.n	800ac5c <HAL_JPEG_Resume+0x54>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800aca8:	f011 0301 	ands.w	r3, r1, #1
 800acac:	d004      	beq.n	800acb8 <HAL_JPEG_Resume+0xb0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 800acae:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800acb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800acb4:	6543      	str	r3, [r0, #84]	; 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800acb6:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800acb8:	07aa      	lsls	r2, r5, #30
 800acba:	d505      	bpl.n	800acc8 <HAL_JPEG_Resume+0xc0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800acbc:	6d62      	ldr	r2, [r4, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800acbe:	f043 0328 	orr.w	r3, r3, #40	; 0x28
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800acc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800acc6:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
 800acc8:	6821      	ldr	r1, [r4, #0]
 800acca:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800accc:	4313      	orrs	r3, r2
 800acce:	630b      	str	r3, [r1, #48]	; 0x30
 800acd0:	e7c4      	b.n	800ac5c <HAL_JPEG_Resume+0x54>
	...

0800acd4 <JPEG_DMA_EndProcess>:
{
 800acd4:	b538      	push	{r3, r4, r5, lr}
  hjpeg->JpegOutCount = hjpeg->OutDataLength - ((hjpeg->hdmaout->Instance->NDTR & DMA_SxNDT) << 2);
 800acd6:	6b43      	ldr	r3, [r0, #52]	; 0x34
{
 800acd8:	4604      	mov	r4, r0
  hjpeg->JpegOutCount = hjpeg->OutDataLength - ((hjpeg->hdmaout->Instance->NDTR & DMA_SxNDT) << 2);
 800acda:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	6859      	ldr	r1, [r3, #4]
 800ace0:	4b1f      	ldr	r3, [pc, #124]	; (800ad60 <JPEG_DMA_EndProcess+0x8c>)
 800ace2:	ea03 0381 	and.w	r3, r3, r1, lsl #2
 800ace6:	1ad3      	subs	r3, r2, r3
 800ace8:	6243      	str	r3, [r0, #36]	; 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800acea:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800acec:	429a      	cmp	r2, r3
 800acee:	d105      	bne.n	800acfc <JPEG_DMA_EndProcess+0x28>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800acf0:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800acf2:	69c1      	ldr	r1, [r0, #28]
 800acf4:	f7f6 fd5a 	bl	80017ac <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
 800acf8:	2300      	movs	r3, #0
 800acfa:	6263      	str	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 800acfc:	6823      	ldr	r3, [r4, #0]
 800acfe:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 800ad00:	f015 0510 	ands.w	r5, r5, #16
 800ad04:	d124      	bne.n	800ad50 <JPEG_DMA_EndProcess+0x7c>
    if (hjpeg->JpegOutCount > 0UL)
 800ad06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad08:	b12b      	cbz	r3, 800ad16 <JPEG_DMA_EndProcess+0x42>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800ad0a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800ad0c:	4620      	mov	r0, r4
 800ad0e:	69e1      	ldr	r1, [r4, #28]
 800ad10:	f7f6 fd4c 	bl	80017ac <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800ad14:	6265      	str	r5, [r4, #36]	; 0x24
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800ad16:	6822      	ldr	r2, [r4, #0]
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800ad18:	4620      	mov	r0, r4
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800ad1a:	6813      	ldr	r3, [r2, #0]
 800ad1c:	f023 0301 	bic.w	r3, r3, #1
 800ad20:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
 800ad22:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800ad24:	6d62      	ldr	r2, [r4, #84]	; 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800ad26:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800ad2a:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800ad2e:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800ad30:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hjpeg);
 800ad32:	f04f 0200 	mov.w	r2, #0
 800ad36:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 800ad3a:	f04f 0201 	mov.w	r2, #1
 800ad3e:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800ad42:	d102      	bne.n	800ad4a <JPEG_DMA_EndProcess+0x76>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800ad44:	f7f6 fd6e 	bl	8001824 <HAL_JPEG_DecodeCpltCallback>
}
 800ad48:	bd38      	pop	{r3, r4, r5, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800ad4a:	f7ff fd2a 	bl	800a7a2 <HAL_JPEG_EncodeCpltCallback>
 800ad4e:	e7fb      	b.n	800ad48 <JPEG_DMA_EndProcess+0x74>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800ad50:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ad52:	049b      	lsls	r3, r3, #18
 800ad54:	d4f8      	bmi.n	800ad48 <JPEG_DMA_EndProcess+0x74>
    JPEG_DMA_PollResidualData(hjpeg);
 800ad56:	4620      	mov	r0, r4
}
 800ad58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
 800ad5c:	f7ff befb 	b.w	800ab56 <JPEG_DMA_PollResidualData>
 800ad60:	0003fffc 	.word	0x0003fffc

0800ad64 <JPEG_DMAOutAbortCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad64:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 800ad66:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800ad68:	041b      	lsls	r3, r3, #16
 800ad6a:	d501      	bpl.n	800ad70 <JPEG_DMAOutAbortCallback+0xc>
    JPEG_DMA_EndProcess(hjpeg);
 800ad6c:	f7ff bfb2 	b.w	800acd4 <JPEG_DMA_EndProcess>
}
 800ad70:	4770      	bx	lr
	...

0800ad74 <JPEG_DMAOutCpltCallback>:
{
 800ad74:	b510      	push	{r4, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad76:	6b84      	ldr	r4, [r0, #56]	; 0x38
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800ad78:	6823      	ldr	r3, [r4, #0]
 800ad7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad7c:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 800ad80:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 800ad82:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800ad84:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 800ad88:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 800ad8c:	0412      	lsls	r2, r2, #16
 800ad8e:	0c12      	lsrs	r2, r2, #16
 800ad90:	2a0c      	cmp	r2, #12
 800ad92:	d129      	bne.n	800ade8 <JPEG_DMAOutCpltCallback+0x74>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 800ad94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad96:	0692      	lsls	r2, r2, #26
 800ad98:	d42c      	bmi.n	800adf4 <JPEG_DMAOutCpltCallback+0x80>
      JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA);
 800ad9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800ad9c:	69e1      	ldr	r1, [r4, #28]
      JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA);
 800ad9e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ada2:	631a      	str	r2, [r3, #48]	; 0x30
      hjpeg->JpegOutCount = hjpeg->OutDataLength - ((hdma->Instance->NDTR & DMA_SxNDT) << 2);
 800ada4:	6803      	ldr	r3, [r0, #0]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800ada6:	4620      	mov	r0, r4
      hjpeg->JpegOutCount = hjpeg->OutDataLength - ((hdma->Instance->NDTR & DMA_SxNDT) << 2);
 800ada8:	685a      	ldr	r2, [r3, #4]
 800adaa:	4b15      	ldr	r3, [pc, #84]	; (800ae00 <JPEG_DMAOutCpltCallback+0x8c>)
 800adac:	ea03 0282 	and.w	r2, r3, r2, lsl #2
 800adb0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800adb2:	1a9b      	subs	r3, r3, r2
 800adb4:	6263      	str	r3, [r4, #36]	; 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800adb6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800adb8:	f7f6 fcf8 	bl	80017ac <HAL_JPEG_DataReadyCallback>
      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800adbc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800adbe:	049b      	lsls	r3, r3, #18
 800adc0:	d418      	bmi.n	800adf4 <JPEG_DMAOutCpltCallback+0x80>
        if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800adc2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800adc4:	6821      	ldr	r1, [r4, #0]
 800adc6:	089b      	lsrs	r3, r3, #2
 800adc8:	69e2      	ldr	r2, [r4, #28]
 800adca:	3144      	adds	r1, #68	; 0x44
 800adcc:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800adce:	f7fd fca7 	bl	8008720 <HAL_DMA_Start_IT>
 800add2:	b150      	cbz	r0, 800adea <JPEG_DMAOutCpltCallback+0x76>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800add4:	6d23      	ldr	r3, [r4, #80]	; 0x50
          HAL_JPEG_ErrorCallback(hjpeg);
 800add6:	4620      	mov	r0, r4
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800add8:	f043 0304 	orr.w	r3, r3, #4
 800addc:	6523      	str	r3, [r4, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800adde:	2306      	movs	r3, #6
 800ade0:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
          HAL_JPEG_ErrorCallback(hjpeg);
 800ade4:	f7f6 fd1c 	bl	8001820 <HAL_JPEG_ErrorCallback>
}
 800ade8:	bd10      	pop	{r4, pc}
        JPEG_ENABLE_DMA(hjpeg, JPEG_DMA_ODMA);
 800adea:	6822      	ldr	r2, [r4, #0]
 800adec:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800adee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800adf2:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800adf4:	6822      	ldr	r2, [r4, #0]
 800adf6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800adf8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800adfc:	6313      	str	r3, [r2, #48]	; 0x30
 800adfe:	e7f3      	b.n	800ade8 <JPEG_DMAOutCpltCallback+0x74>
 800ae00:	0003fffc 	.word	0x0003fffc

0800ae04 <HAL_JPEG_IRQHandler>:
{
 800ae04:	b510      	push	{r4, lr}
  switch (hjpeg->State)
 800ae06:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
{
 800ae0a:	4604      	mov	r4, r0
  switch (hjpeg->State)
 800ae0c:	3b03      	subs	r3, #3
 800ae0e:	2b01      	cmp	r3, #1
 800ae10:	d854      	bhi.n	800aebc <HAL_JPEG_IRQHandler+0xb8>
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800ae12:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800ae14:	f003 030c 	and.w	r3, r3, #12
 800ae18:	2b08      	cmp	r3, #8
 800ae1a:	d103      	bne.n	800ae24 <HAL_JPEG_IRQHandler+0x20>
}
 800ae1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void) JPEG_Process(hjpeg);
 800ae20:	f7ff be23 	b.w	800aa6a <JPEG_Process>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800ae24:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800ae26:	f003 030c 	and.w	r3, r3, #12
 800ae2a:	2b0c      	cmp	r3, #12
 800ae2c:	d146      	bne.n	800aebc <HAL_JPEG_IRQHandler+0xb8>
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800ae2e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800ae30:	f003 0303 	and.w	r3, r3, #3
 800ae34:	2b02      	cmp	r3, #2
 800ae36:	d114      	bne.n	800ae62 <HAL_JPEG_IRQHandler+0x5e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800ae38:	6803      	ldr	r3, [r0, #0]
 800ae3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae3c:	0659      	lsls	r1, r3, #25
 800ae3e:	d510      	bpl.n	800ae62 <HAL_JPEG_IRQHandler+0x5e>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800ae40:	1d01      	adds	r1, r0, #4
 800ae42:	f7ff fbcd 	bl	800a5e0 <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 800ae46:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800ae48:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 800ae4a:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800ae4c:	f7f6 fc42 	bl	80016d4 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800ae50:	6823      	ldr	r3, [r4, #0]
 800ae52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ae58:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800ae5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ae60:	639a      	str	r2, [r3, #56]	; 0x38
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 800ae62:	6823      	ldr	r3, [r4, #0]
 800ae64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae66:	0692      	lsls	r2, r2, #26
 800ae68:	d528      	bpl.n	800aebc <HAL_JPEG_IRQHandler+0xb8>
    JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA | JPEG_DMA_IDMA);
 800ae6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    if (hjpeg->hdmain->State == HAL_DMA_STATE_BUSY)
 800ae6c:	6b20      	ldr	r0, [r4, #48]	; 0x30
    JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA | JPEG_DMA_IDMA);
 800ae6e:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 800ae72:	631a      	str	r2, [r3, #48]	; 0x30
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 800ae74:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800ae76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ae7a:	6562      	str	r2, [r4, #84]	; 0x54
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800ae7c:	681a      	ldr	r2, [r3, #0]
 800ae7e:	f022 0201 	bic.w	r2, r2, #1
 800ae82:	601a      	str	r2, [r3, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800ae84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae86:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 800ae8a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800ae8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae8e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800ae92:	639a      	str	r2, [r3, #56]	; 0x38
    if (hjpeg->hdmain->State == HAL_DMA_STATE_BUSY)
 800ae94:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800ae98:	2b02      	cmp	r3, #2
 800ae9a:	d101      	bne.n	800aea0 <HAL_JPEG_IRQHandler+0x9c>
      (void) HAL_DMA_Abort_IT(hjpeg->hdmain);
 800ae9c:	f7fd fc7d 	bl	800879a <HAL_DMA_Abort_IT>
    if (hjpeg->hdmaout->State == HAL_DMA_STATE_BUSY)
 800aea0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800aea2:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800aea6:	2b02      	cmp	r3, #2
 800aea8:	d103      	bne.n	800aeb2 <HAL_JPEG_IRQHandler+0xae>
}
 800aeaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      (void) HAL_DMA_Abort_IT(hjpeg->hdmaout);
 800aeae:	f7fd bc74 	b.w	800879a <HAL_DMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
 800aeb2:	4620      	mov	r0, r4
}
 800aeb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      JPEG_DMA_EndProcess(hjpeg);
 800aeb8:	f7ff bf0c 	b.w	800acd4 <JPEG_DMA_EndProcess>
}
 800aebc:	bd10      	pop	{r4, pc}

0800aebe <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800aebe:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800aec0:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800aec2:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800aec6:	3284      	adds	r2, #132	; 0x84
 800aec8:	1883      	adds	r3, r0, r2
{
 800aeca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800aece:	68c6      	ldr	r6, [r0, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800aed0:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800aed4:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800aed6:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800aeda:	684c      	ldr	r4, [r1, #4]
 800aedc:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800aee0:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800aee4:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800aee8:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800aeea:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800aeec:	68c5      	ldr	r5, [r0, #12]
 800aeee:	f3c5 450b 	ubfx	r5, r5, #16, #12
 800aef2:	443d      	add	r5, r7
 800aef4:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800aef8:	68ce      	ldr	r6, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800aefa:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800aefc:	68c5      	ldr	r5, [r0, #12]
 800aefe:	f3c5 050a 	ubfx	r5, r5, #0, #11
 800af02:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800af04:	689d      	ldr	r5, [r3, #8]
 800af06:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 800af0a:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800af0c:	688d      	ldr	r5, [r1, #8]
 800af0e:	68c7      	ldr	r7, [r0, #12]
 800af10:	3501      	adds	r5, #1
 800af12:	f3c7 070a 	ubfx	r7, r7, #0, #11
 800af16:	443d      	add	r5, r7
 800af18:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800af1c:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800af1e:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800af20:	691d      	ldr	r5, [r3, #16]
 800af22:	f025 0507 	bic.w	r5, r5, #7
 800af26:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800af28:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800af2a:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800af2c:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800af30:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800af34:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800af38:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 800af3c:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 800af40:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 800af44:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 800af48:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800af4a:	695d      	ldr	r5, [r3, #20]
 800af4c:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 800af50:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800af52:	694d      	ldr	r5, [r1, #20]
 800af54:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800af56:	69dd      	ldr	r5, [r3, #28]
 800af58:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
 800af5c:	f025 0507 	bic.w	r5, r5, #7
 800af60:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800af62:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 800af66:	433d      	orrs	r5, r7
 800af68:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800af6a:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800af6c:	6a4d      	ldr	r5, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800af6e:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800af72:	629d      	str	r5, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800af74:	b31e      	cbz	r6, 800afbe <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800af76:	2e01      	cmp	r6, #1
 800af78:	d023      	beq.n	800afc2 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800af7a:	1eb5      	subs	r5, r6, #2
 800af7c:	2d02      	cmp	r5, #2
 800af7e:	d922      	bls.n	800afc6 <LTDC_SetConfig+0x108>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 800af80:	2e07      	cmp	r6, #7
 800af82:	bf0c      	ite	eq
 800af84:	2502      	moveq	r5, #2
 800af86:	2501      	movne	r5, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800af88:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800af8a:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800af8e:	f006 26e0 	and.w	r6, r6, #3758153728	; 0xe000e000
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800af92:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800af94:	62de      	str	r6, [r3, #44]	; 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800af96:	3403      	adds	r4, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800af98:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800af9a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800af9c:	436e      	muls	r6, r5
 800af9e:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800afa2:	62dc      	str	r4, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800afa4:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800afa6:	f424 64ff 	bic.w	r4, r4, #2040	; 0x7f8
 800afaa:	f024 0407 	bic.w	r4, r4, #7
 800afae:	631c      	str	r4, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800afb0:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800afb2:	5883      	ldr	r3, [r0, r2]
 800afb4:	f043 0301 	orr.w	r3, r3, #1
 800afb8:	5083      	str	r3, [r0, r2]
}
 800afba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 800afbe:	2504      	movs	r5, #4
 800afc0:	e7e2      	b.n	800af88 <LTDC_SetConfig+0xca>
    tmp = 3U;
 800afc2:	2503      	movs	r5, #3
 800afc4:	e7e0      	b.n	800af88 <LTDC_SetConfig+0xca>
    tmp = 2U;
 800afc6:	2502      	movs	r5, #2
 800afc8:	e7de      	b.n	800af88 <LTDC_SetConfig+0xca>
	...

0800afcc <HAL_LTDC_Init>:
{
 800afcc:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 800afce:	4604      	mov	r4, r0
 800afd0:	2800      	cmp	r0, #0
 800afd2:	d063      	beq.n	800b09c <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800afd4:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 800afd8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800afdc:	b91b      	cbnz	r3, 800afe6 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 800afde:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 800afe2:	f7f9 ff29 	bl	8004e38 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800afe6:	2302      	movs	r3, #2
 800afe8:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800afec:	6823      	ldr	r3, [r4, #0]
 800afee:	699a      	ldr	r2, [r3, #24]
 800aff0:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800aff4:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800aff6:	6999      	ldr	r1, [r3, #24]
 800aff8:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 800affc:	4302      	orrs	r2, r0
 800affe:	68e0      	ldr	r0, [r4, #12]
 800b000:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800b002:	6920      	ldr	r0, [r4, #16]
 800b004:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800b006:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800b008:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800b00a:	4925      	ldr	r1, [pc, #148]	; (800b0a0 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800b00c:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800b00e:	689a      	ldr	r2, [r3, #8]
 800b010:	400a      	ands	r2, r1
 800b012:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800b014:	689a      	ldr	r2, [r3, #8]
 800b016:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800b01a:	69a0      	ldr	r0, [r4, #24]
 800b01c:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800b01e:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800b020:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800b022:	68da      	ldr	r2, [r3, #12]
 800b024:	400a      	ands	r2, r1
 800b026:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800b028:	68da      	ldr	r2, [r3, #12]
 800b02a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800b02e:	6a20      	ldr	r0, [r4, #32]
 800b030:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800b032:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800b034:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800b036:	691a      	ldr	r2, [r3, #16]
 800b038:	400a      	ands	r2, r1
 800b03a:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800b03c:	691a      	ldr	r2, [r3, #16]
 800b03e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800b042:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800b044:	4302      	orrs	r2, r0
 800b046:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800b048:	695a      	ldr	r2, [r3, #20]
 800b04a:	4011      	ands	r1, r2
 800b04c:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800b04e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800b050:	695a      	ldr	r2, [r3, #20]
 800b052:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800b056:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b058:	430a      	orrs	r2, r1
 800b05a:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800b05c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800b05e:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800b062:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800b066:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800b06a:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800b06c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b06e:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 800b072:	430a      	orrs	r2, r1
 800b074:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 800b078:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800b07c:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800b07e:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800b080:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b082:	f042 0206 	orr.w	r2, r2, #6
 800b086:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 800b088:	699a      	ldr	r2, [r3, #24]
 800b08a:	f042 0201 	orr.w	r2, r2, #1
 800b08e:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 800b090:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800b092:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 800b096:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 800b09a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800b09c:	2001      	movs	r0, #1
 800b09e:	e7fc      	b.n	800b09a <HAL_LTDC_Init+0xce>
 800b0a0:	f000f800 	.word	0xf000f800

0800b0a4 <HAL_LTDC_ErrorCallback>:
 800b0a4:	4770      	bx	lr

0800b0a6 <HAL_LTDC_LineEventCallback>:
 800b0a6:	4770      	bx	lr

0800b0a8 <HAL_LTDC_ReloadEventCallback>:
 800b0a8:	4770      	bx	lr

0800b0aa <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800b0aa:	6803      	ldr	r3, [r0, #0]
{
 800b0ac:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800b0ae:	6b9e      	ldr	r6, [r3, #56]	; 0x38
{
 800b0b0:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800b0b2:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800b0b4:	0772      	lsls	r2, r6, #29
 800b0b6:	d514      	bpl.n	800b0e2 <HAL_LTDC_IRQHandler+0x38>
 800b0b8:	0769      	lsls	r1, r5, #29
 800b0ba:	d512      	bpl.n	800b0e2 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800b0bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b0be:	f022 0204 	bic.w	r2, r2, #4
 800b0c2:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800b0c4:	2204      	movs	r2, #4
 800b0c6:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800b0c8:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 800b0cc:	f043 0301 	orr.w	r3, r3, #1
 800b0d0:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 800b0d4:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800b0d6:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800b0da:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800b0de:	f7ff ffe1 	bl	800b0a4 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800b0e2:	07b2      	lsls	r2, r6, #30
 800b0e4:	d516      	bpl.n	800b114 <HAL_LTDC_IRQHandler+0x6a>
 800b0e6:	07ab      	lsls	r3, r5, #30
 800b0e8:	d514      	bpl.n	800b114 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800b0ea:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 800b0ec:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800b0ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b0f0:	f022 0202 	bic.w	r2, r2, #2
 800b0f4:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800b0f6:	2202      	movs	r2, #2
 800b0f8:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800b0fa:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800b0fe:	4313      	orrs	r3, r2
 800b100:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800b104:	2304      	movs	r3, #4
 800b106:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800b10a:	2300      	movs	r3, #0
 800b10c:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800b110:	f7ff ffc8 	bl	800b0a4 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800b114:	07f0      	lsls	r0, r6, #31
 800b116:	d510      	bpl.n	800b13a <HAL_LTDC_IRQHandler+0x90>
 800b118:	07e9      	lsls	r1, r5, #31
 800b11a:	d50e      	bpl.n	800b13a <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800b11c:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 800b11e:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800b120:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b122:	f022 0201 	bic.w	r2, r2, #1
 800b126:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800b128:	2201      	movs	r2, #1
 800b12a:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
 800b12c:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 800b12e:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800b132:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 800b136:	f7ff ffb6 	bl	800b0a6 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800b13a:	0732      	lsls	r2, r6, #28
 800b13c:	d511      	bpl.n	800b162 <HAL_LTDC_IRQHandler+0xb8>
 800b13e:	072b      	lsls	r3, r5, #28
 800b140:	d50f      	bpl.n	800b162 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800b142:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 800b144:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800b146:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b148:	f022 0208 	bic.w	r2, r2, #8
 800b14c:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800b14e:	2208      	movs	r2, #8
 800b150:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800b152:	2301      	movs	r3, #1
 800b154:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800b158:	2300      	movs	r3, #0
 800b15a:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 800b15e:	f7ff ffa3 	bl	800b0a8 <HAL_LTDC_ReloadEventCallback>
}
 800b162:	bd70      	pop	{r4, r5, r6, pc}

0800b164 <HAL_LTDC_ConfigLayer>:
{
 800b164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 800b168:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 800b16c:	4606      	mov	r6, r0
 800b16e:	460f      	mov	r7, r1
 800b170:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 800b172:	2b01      	cmp	r3, #1
 800b174:	f04f 0002 	mov.w	r0, #2
 800b178:	d01f      	beq.n	800b1ba <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800b17a:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 800b17c:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800b180:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800b182:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800b186:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 800b18a:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800b18e:	3438      	adds	r4, #56	; 0x38
 800b190:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b192:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b194:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b196:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b198:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b19a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b19c:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800b19e:	4630      	mov	r0, r6
 800b1a0:	4662      	mov	r2, ip
 800b1a2:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800b1a4:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800b1a6:	f7ff fe8a 	bl	800aebe <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800b1aa:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 800b1ac:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800b1ae:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 800b1b2:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800b1b6:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 800b1ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800b1c0 <HAL_LTDC_SetPitch>:
{
 800b1c0:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hltdc);
 800b1c2:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800b1c6:	2b01      	cmp	r3, #1
 800b1c8:	f04f 0302 	mov.w	r3, #2
 800b1cc:	d02c      	beq.n	800b228 <HAL_LTDC_SetPitch+0x68>
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 800b1ce:	2434      	movs	r4, #52	; 0x34
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800b1d0:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 800b1d4:	fb04 0402 	mla	r4, r4, r2, r0
 800b1d8:	6ca4      	ldr	r4, [r4, #72]	; 0x48
  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800b1da:	b33c      	cbz	r4, 800b22c <HAL_LTDC_SetPitch+0x6c>
  else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800b1dc:	2c01      	cmp	r4, #1
 800b1de:	d027      	beq.n	800b230 <HAL_LTDC_SetPitch+0x70>
  else if ((pixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800b1e0:	1ea5      	subs	r5, r4, #2
 800b1e2:	429d      	cmp	r5, r3
 800b1e4:	d902      	bls.n	800b1ec <HAL_LTDC_SetPitch+0x2c>
    tmp = 1U;
 800b1e6:	2c07      	cmp	r4, #7
 800b1e8:	bf18      	it	ne
 800b1ea:	2301      	movne	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 800b1ec:	01d2      	lsls	r2, r2, #7
 800b1ee:	6804      	ldr	r4, [r0, #0]
  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 800b1f0:	434b      	muls	r3, r1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 800b1f2:	3284      	adds	r2, #132	; 0x84
 800b1f4:	4422      	add	r2, r4
 800b1f6:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 800b1f8:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 800b1fc:	f424 14f8 	bic.w	r4, r4, #2031616	; 0x1f0000
 800b200:	62d4      	str	r4, [r2, #44]	; 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 800b202:	4c0c      	ldr	r4, [pc, #48]	; (800b234 <HAL_LTDC_SetPitch+0x74>)
 800b204:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b206:	f045 0501 	orr.w	r5, r5, #1
 800b20a:	6265      	str	r5, [r4, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 800b20c:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 800b20e:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 800b212:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 800b214:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b216:	f043 0301 	orr.w	r3, r3, #1
 800b21a:	6263      	str	r3, [r4, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 800b21c:	2301      	movs	r3, #1
 800b21e:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800b222:	2300      	movs	r3, #0
 800b224:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
}
 800b228:	4618      	mov	r0, r3
 800b22a:	bd30      	pop	{r4, r5, pc}
    tmp = 4U;
 800b22c:	2304      	movs	r3, #4
 800b22e:	e7dd      	b.n	800b1ec <HAL_LTDC_SetPitch+0x2c>
    tmp = 3U;
 800b230:	2303      	movs	r3, #3
 800b232:	e7db      	b.n	800b1ec <HAL_LTDC_SetPitch+0x2c>
 800b234:	40016800 	.word	0x40016800

0800b238 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 800b238:	4b19      	ldr	r3, [pc, #100]	; (800b2a0 <HAL_PWREx_EnableOverDrive+0x68>)
{
 800b23a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 800b23c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800b23e:	4c19      	ldr	r4, [pc, #100]	; (800b2a4 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800b240:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800b244:	641a      	str	r2, [r3, #64]	; 0x40
 800b246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b24c:	9301      	str	r3, [sp, #4]
 800b24e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 800b250:	6823      	ldr	r3, [r4, #0]
 800b252:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b256:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b258:	f7fc fe3c 	bl	8007ed4 <HAL_GetTick>
 800b25c:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b25e:	6863      	ldr	r3, [r4, #4]
 800b260:	03da      	lsls	r2, r3, #15
 800b262:	d50c      	bpl.n	800b27e <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800b264:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b266:	4d0f      	ldr	r5, [pc, #60]	; (800b2a4 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800b268:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b26c:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800b26e:	f7fc fe31 	bl	8007ed4 <HAL_GetTick>
 800b272:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b274:	686b      	ldr	r3, [r5, #4]
 800b276:	039b      	lsls	r3, r3, #14
 800b278:	d50a      	bpl.n	800b290 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800b27a:	2000      	movs	r0, #0
 800b27c:	e006      	b.n	800b28c <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b27e:	f7fc fe29 	bl	8007ed4 <HAL_GetTick>
 800b282:	1b40      	subs	r0, r0, r5
 800b284:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800b288:	d9e9      	bls.n	800b25e <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 800b28a:	2003      	movs	r0, #3
}
 800b28c:	b003      	add	sp, #12
 800b28e:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b290:	f7fc fe20 	bl	8007ed4 <HAL_GetTick>
 800b294:	1b00      	subs	r0, r0, r4
 800b296:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800b29a:	d9eb      	bls.n	800b274 <HAL_PWREx_EnableOverDrive+0x3c>
 800b29c:	e7f5      	b.n	800b28a <HAL_PWREx_EnableOverDrive+0x52>
 800b29e:	bf00      	nop
 800b2a0:	40023800 	.word	0x40023800
 800b2a4:	40007000 	.word	0x40007000

0800b2a8 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800b2a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800b2ac:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 800b2ae:	b136      	cbz	r6, 800b2be <QSPI_Config+0x16>
 800b2b0:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 800b2b4:	d003      	beq.n	800b2be <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800b2b6:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800b2b8:	6804      	ldr	r4, [r0, #0]
 800b2ba:	3b01      	subs	r3, #1
 800b2bc:	6123      	str	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800b2be:	f8d1 9018 	ldr.w	r9, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b2c2:	e9d1 7507 	ldrd	r7, r5, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800b2c6:	f1b9 0f00 	cmp.w	r9, #0
 800b2ca:	d04f      	beq.n	800b36c <QSPI_Config+0xc4>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b2cc:	694b      	ldr	r3, [r1, #20]
 800b2ce:	ea46 0909 	orr.w	r9, r6, r9
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800b2d2:	6800      	ldr	r0, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b2d4:	f8d1 a000 	ldr.w	sl, [r1]
 800b2d8:	ea4f 4c83 	mov.w	ip, r3, lsl #18
 800b2dc:	f8d1 e034 	ldr.w	lr, [r1, #52]	; 0x34
 800b2e0:	ea49 0902 	orr.w	r9, r9, r2
 800b2e4:	e9d1 480b 	ldrd	r4, r8, [r1, #44]	; 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800b2e8:	b335      	cbz	r5, 800b338 <QSPI_Config+0x90>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800b2ea:	688b      	ldr	r3, [r1, #8]
 800b2ec:	ea49 0505 	orr.w	r5, r9, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b2f0:	690e      	ldr	r6, [r1, #16]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800b2f2:	61c3      	str	r3, [r0, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b2f4:	b19f      	cbz	r7, 800b31e <QSPI_Config+0x76>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b2f6:	ea4a 0307 	orr.w	r3, sl, r7
 800b2fa:	4323      	orrs	r3, r4
 800b2fc:	68cc      	ldr	r4, [r1, #12]
 800b2fe:	ea43 0308 	orr.w	r3, r3, r8
 800b302:	ea43 030e 	orr.w	r3, r3, lr
 800b306:	4333      	orrs	r3, r6
 800b308:	4323      	orrs	r3, r4
 800b30a:	ea43 030c 	orr.w	r3, r3, ip
 800b30e:	432b      	orrs	r3, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize |
                                         cmd->AddressMode | cmd->InstructionMode | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b310:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b314:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b316:	d00d      	beq.n	800b334 <QSPI_Config+0x8c>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800b318:	684b      	ldr	r3, [r1, #4]
 800b31a:	6183      	str	r3, [r0, #24]
 800b31c:	e00a      	b.n	800b334 <QSPI_Config+0x8c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b31e:	ea4a 0304 	orr.w	r3, sl, r4
 800b322:	ea43 0308 	orr.w	r3, r3, r8
 800b326:	ea43 030e 	orr.w	r3, r3, lr
 800b32a:	4333      	orrs	r3, r6
 800b32c:	ea43 030c 	orr.w	r3, r3, ip
 800b330:	432b      	orrs	r3, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b332:	6143      	str	r3, [r0, #20]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800b334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b338:	b16f      	cbz	r7, 800b356 <QSPI_Config+0xae>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b33a:	ea4a 0307 	orr.w	r3, sl, r7
 800b33e:	4323      	orrs	r3, r4
 800b340:	68cc      	ldr	r4, [r1, #12]
 800b342:	ea43 0308 	orr.w	r3, r3, r8
 800b346:	ea43 030e 	orr.w	r3, r3, lr
 800b34a:	4323      	orrs	r3, r4
 800b34c:	ea43 030c 	orr.w	r3, r3, ip
 800b350:	ea43 0309 	orr.w	r3, r3, r9
 800b354:	e7dc      	b.n	800b310 <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b356:	ea4a 0304 	orr.w	r3, sl, r4
 800b35a:	ea43 0308 	orr.w	r3, r3, r8
 800b35e:	ea43 030e 	orr.w	r3, r3, lr
 800b362:	ea43 030c 	orr.w	r3, r3, ip
 800b366:	ea43 0309 	orr.w	r3, r3, r9
 800b36a:	e7e2      	b.n	800b332 <QSPI_Config+0x8a>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800b36c:	b365      	cbz	r5, 800b3c8 <QSPI_Config+0x120>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800b36e:	6804      	ldr	r4, [r0, #0]
 800b370:	688b      	ldr	r3, [r1, #8]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b372:	6908      	ldr	r0, [r1, #16]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800b374:	61e3      	str	r3, [r4, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b376:	ea46 0305 	orr.w	r3, r6, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b37a:	694e      	ldr	r6, [r1, #20]
 800b37c:	ea43 0502 	orr.w	r5, r3, r2
 800b380:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
 800b384:	04b6      	lsls	r6, r6, #18
 800b386:	e9d1 830b 	ldrd	r8, r3, [r1, #44]	; 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b38a:	b1a7      	cbz	r7, 800b3b6 <QSPI_Config+0x10e>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b38c:	4338      	orrs	r0, r7
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b38e:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b392:	ea40 0008 	orr.w	r0, r0, r8
 800b396:	ea43 0300 	orr.w	r3, r3, r0
 800b39a:	68c8      	ldr	r0, [r1, #12]
 800b39c:	ea43 030c 	orr.w	r3, r3, ip
 800b3a0:	ea43 0300 	orr.w	r3, r3, r0
 800b3a4:	ea43 0306 	orr.w	r3, r3, r6
 800b3a8:	ea43 0305 	orr.w	r3, r3, r5
 800b3ac:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b3ae:	d0c1      	beq.n	800b334 <QSPI_Config+0x8c>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800b3b0:	684b      	ldr	r3, [r1, #4]
 800b3b2:	61a3      	str	r3, [r4, #24]
 800b3b4:	e7be      	b.n	800b334 <QSPI_Config+0x8c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b3b6:	ea40 0008 	orr.w	r0, r0, r8
 800b3ba:	4303      	orrs	r3, r0
 800b3bc:	ea43 030c 	orr.w	r3, r3, ip
 800b3c0:	4333      	orrs	r3, r6
 800b3c2:	432b      	orrs	r3, r5
 800b3c4:	6163      	str	r3, [r4, #20]
 800b3c6:	e7b5      	b.n	800b334 <QSPI_Config+0x8c>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b3c8:	b17f      	cbz	r7, 800b3ea <QSPI_Config+0x142>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b3ca:	ea46 0307 	orr.w	r3, r6, r7
 800b3ce:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 800b3d0:	6800      	ldr	r0, [r0, #0]
 800b3d2:	4313      	orrs	r3, r2
 800b3d4:	4323      	orrs	r3, r4
 800b3d6:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 800b3d8:	4323      	orrs	r3, r4
 800b3da:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 800b3dc:	4323      	orrs	r3, r4
 800b3de:	68cc      	ldr	r4, [r1, #12]
 800b3e0:	4323      	orrs	r3, r4
 800b3e2:	694c      	ldr	r4, [r1, #20]
 800b3e4:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 800b3e8:	e792      	b.n	800b310 <QSPI_Config+0x68>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800b3ea:	2e00      	cmp	r6, #0
 800b3ec:	d0a2      	beq.n	800b334 <QSPI_Config+0x8c>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b3ee:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800b3f0:	6800      	ldr	r0, [r0, #0]
 800b3f2:	4333      	orrs	r3, r6
 800b3f4:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 800b3f6:	431a      	orrs	r2, r3
 800b3f8:	694b      	ldr	r3, [r1, #20]
 800b3fa:	4332      	orrs	r2, r6
 800b3fc:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 800b3fe:	4332      	orrs	r2, r6
 800b400:	ea42 4283 	orr.w	r2, r2, r3, lsl #18
 800b404:	6142      	str	r2, [r0, #20]
}
 800b406:	e795      	b.n	800b334 <QSPI_Config+0x8c>

0800b408 <QSPI_WaitFlagStateUntilTimeout>:
{
 800b408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b40c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800b410:	4604      	mov	r4, r0
 800b412:	460e      	mov	r6, r1
 800b414:	4615      	mov	r5, r2
 800b416:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800b418:	6822      	ldr	r2, [r4, #0]
 800b41a:	6893      	ldr	r3, [r2, #8]
 800b41c:	4233      	tst	r3, r6
 800b41e:	bf14      	ite	ne
 800b420:	2301      	movne	r3, #1
 800b422:	2300      	moveq	r3, #0
 800b424:	42ab      	cmp	r3, r5
 800b426:	d101      	bne.n	800b42c <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 800b428:	2000      	movs	r0, #0
 800b42a:	e012      	b.n	800b452 <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 800b42c:	f1b8 3fff 	cmp.w	r8, #4294967295
 800b430:	d0f3      	beq.n	800b41a <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b432:	f7fc fd4f 	bl	8007ed4 <HAL_GetTick>
 800b436:	1bc0      	subs	r0, r0, r7
 800b438:	4540      	cmp	r0, r8
 800b43a:	d802      	bhi.n	800b442 <QSPI_WaitFlagStateUntilTimeout+0x3a>
 800b43c:	f1b8 0f00 	cmp.w	r8, #0
 800b440:	d1ea      	bne.n	800b418 <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800b442:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800b444:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800b446:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800b44a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b44c:	f043 0301 	orr.w	r3, r3, #1
 800b450:	6463      	str	r3, [r4, #68]	; 0x44
}
 800b452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800b458 <HAL_QSPI_Init>:
{
 800b458:	b530      	push	{r4, r5, lr}
 800b45a:	4604      	mov	r4, r0
 800b45c:	b085      	sub	sp, #20
  uint32_t tickstart = HAL_GetTick();
 800b45e:	f7fc fd39 	bl	8007ed4 <HAL_GetTick>
 800b462:	4603      	mov	r3, r0
  if(hqspi == NULL)
 800b464:	2c00      	cmp	r4, #0
 800b466:	d047      	beq.n	800b4f8 <HAL_QSPI_Init+0xa0>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800b468:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800b46c:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 800b470:	b94a      	cbnz	r2, 800b486 <HAL_QSPI_Init+0x2e>
 800b472:	9003      	str	r0, [sp, #12]
    HAL_QSPI_MspInit(hqspi);
 800b474:	4620      	mov	r0, r4
    hqspi->Lock = HAL_UNLOCKED;
 800b476:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    HAL_QSPI_MspInit(hqspi);
 800b47a:	f7f9 fd13 	bl	8004ea4 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 800b47e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b482:	9b03      	ldr	r3, [sp, #12]
 800b484:	64a2      	str	r2, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800b486:	6820      	ldr	r0, [r4, #0]
 800b488:	68a1      	ldr	r1, [r4, #8]
 800b48a:	6802      	ldr	r2, [r0, #0]
 800b48c:	3901      	subs	r1, #1
 800b48e:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 800b492:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800b496:	2120      	movs	r1, #32
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800b498:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800b49a:	4620      	mov	r0, r4
 800b49c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800b49e:	9200      	str	r2, [sp, #0]
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	f7ff ffb1 	bl	800b408 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 800b4a6:	bb10      	cbnz	r0, 800b4ee <HAL_QSPI_Init+0x96>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800b4a8:	6822      	ldr	r2, [r4, #0]
 800b4aa:	69e5      	ldr	r5, [r4, #28]
 800b4ac:	68e3      	ldr	r3, [r4, #12]
 800b4ae:	6811      	ldr	r1, [r2, #0]
 800b4b0:	432b      	orrs	r3, r5
 800b4b2:	6a25      	ldr	r5, [r4, #32]
 800b4b4:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800b4b8:	432b      	orrs	r3, r5
 800b4ba:	6865      	ldr	r5, [r4, #4]
 800b4bc:	f021 01d0 	bic.w	r1, r1, #208	; 0xd0
 800b4c0:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 800b4c4:	430b      	orrs	r3, r1
 800b4c6:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800b4c8:	6855      	ldr	r5, [r2, #4]
 800b4ca:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 800b4ce:	430b      	orrs	r3, r1
 800b4d0:	6921      	ldr	r1, [r4, #16]
 800b4d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800b4d6:	4909      	ldr	r1, [pc, #36]	; (800b4fc <HAL_QSPI_Init+0xa4>)
 800b4d8:	4029      	ands	r1, r5
 800b4da:	430b      	orrs	r3, r1
 800b4dc:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 800b4de:	6813      	ldr	r3, [r2, #0]
 800b4e0:	f043 0301 	orr.w	r3, r3, #1
 800b4e4:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 800b4e6:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b4e8:	6460      	str	r0, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 800b4ea:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800b4f4:	b005      	add	sp, #20
 800b4f6:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800b4f8:	2001      	movs	r0, #1
 800b4fa:	e7fb      	b.n	800b4f4 <HAL_QSPI_Init+0x9c>
 800b4fc:	ffe0f8fe 	.word	0xffe0f8fe

0800b500 <HAL_QSPI_Command>:
{
 800b500:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b504:	4604      	mov	r4, r0
 800b506:	b085      	sub	sp, #20
 800b508:	4617      	mov	r7, r2
 800b50a:	4689      	mov	r9, r1
  uint32_t tickstart = HAL_GetTick();
 800b50c:	f7fc fce2 	bl	8007ed4 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800b510:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 800b514:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 800b516:	2a01      	cmp	r2, #1
 800b518:	d033      	beq.n	800b582 <HAL_QSPI_Command+0x82>
 800b51a:	2201      	movs	r2, #1
 800b51c:	2602      	movs	r6, #2
 800b51e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800b522:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800b526:	2a01      	cmp	r2, #1
 800b528:	fa5f f882 	uxtb.w	r8, r2
 800b52c:	d127      	bne.n	800b57e <HAL_QSPI_Command+0x7e>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b52e:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800b530:	9003      	str	r0, [sp, #12]
 800b532:	2120      	movs	r1, #32
 800b534:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b536:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800b538:	9700      	str	r7, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800b53a:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800b53e:	f7ff ff63 	bl	800b408 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800b542:	4605      	mov	r5, r0
 800b544:	b9a0      	cbnz	r0, 800b570 <HAL_QSPI_Command+0x70>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800b546:	4602      	mov	r2, r0
 800b548:	4649      	mov	r1, r9
 800b54a:	4620      	mov	r0, r4
 800b54c:	f7ff feac 	bl	800b2a8 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 800b550:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 800b554:	9b03      	ldr	r3, [sp, #12]
 800b556:	b94a      	cbnz	r2, 800b56c <HAL_QSPI_Command+0x6c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800b558:	4642      	mov	r2, r8
 800b55a:	4631      	mov	r1, r6
 800b55c:	4620      	mov	r0, r4
 800b55e:	9700      	str	r7, [sp, #0]
 800b560:	f7ff ff52 	bl	800b408 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800b564:	4605      	mov	r5, r0
 800b566:	b918      	cbnz	r0, 800b570 <HAL_QSPI_Command+0x70>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800b568:	6823      	ldr	r3, [r4, #0]
 800b56a:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800b56c:	f884 8041 	strb.w	r8, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800b570:	2300      	movs	r3, #0
 800b572:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800b576:	4628      	mov	r0, r5
 800b578:	b005      	add	sp, #20
 800b57a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 800b57e:	4635      	mov	r5, r6
 800b580:	e7f6      	b.n	800b570 <HAL_QSPI_Command+0x70>
  __HAL_LOCK(hqspi);
 800b582:	2502      	movs	r5, #2
 800b584:	e7f7      	b.n	800b576 <HAL_QSPI_Command+0x76>

0800b586 <HAL_QSPI_Transmit>:
{
 800b586:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b588:	4604      	mov	r4, r0
 800b58a:	b085      	sub	sp, #20
 800b58c:	4616      	mov	r6, r2
 800b58e:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800b590:	f7fc fca0 	bl	8007ed4 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800b594:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 800b598:	4603      	mov	r3, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800b59a:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 800b59c:	2a01      	cmp	r2, #1
 800b59e:	d049      	beq.n	800b634 <HAL_QSPI_Transmit+0xae>
 800b5a0:	2201      	movs	r2, #1
 800b5a2:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800b5a6:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800b5aa:	2a01      	cmp	r2, #1
 800b5ac:	b2d0      	uxtb	r0, r2
 800b5ae:	d13f      	bne.n	800b630 <HAL_QSPI_Transmit+0xaa>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 800b5b4:	2f00      	cmp	r7, #0
 800b5b6:	d036      	beq.n	800b626 <HAL_QSPI_Transmit+0xa0>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800b5b8:	2212      	movs	r2, #18
 800b5ba:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800b5be:	692a      	ldr	r2, [r5, #16]
 800b5c0:	3201      	adds	r2, #1
 800b5c2:	62e2      	str	r2, [r4, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800b5c4:	692a      	ldr	r2, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 800b5c6:	6267      	str	r7, [r4, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800b5c8:	3201      	adds	r2, #1
 800b5ca:	62a2      	str	r2, [r4, #40]	; 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800b5cc:	696a      	ldr	r2, [r5, #20]
 800b5ce:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800b5d2:	616a      	str	r2, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 800b5d4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b5d6:	b98a      	cbnz	r2, 800b5fc <HAL_QSPI_Transmit+0x76>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800b5d8:	2201      	movs	r2, #1
 800b5da:	2102      	movs	r1, #2
 800b5dc:	4620      	mov	r0, r4
 800b5de:	9600      	str	r6, [sp, #0]
 800b5e0:	f7ff ff12 	bl	800b408 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800b5e4:	b910      	cbnz	r0, 800b5ec <HAL_QSPI_Transmit+0x66>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800b5e6:	6823      	ldr	r3, [r4, #0]
 800b5e8:	2202      	movs	r2, #2
 800b5ea:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 800b5ec:	2301      	movs	r3, #1
 800b5ee:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800b5f8:	b005      	add	sp, #20
 800b5fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800b5fc:	2201      	movs	r2, #1
 800b5fe:	2104      	movs	r1, #4
 800b600:	4620      	mov	r0, r4
 800b602:	9600      	str	r6, [sp, #0]
 800b604:	9303      	str	r3, [sp, #12]
 800b606:	f7ff feff 	bl	800b408 <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 800b60a:	2800      	cmp	r0, #0
 800b60c:	d1ee      	bne.n	800b5ec <HAL_QSPI_Transmit+0x66>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800b60e:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 800b610:	9b03      	ldr	r3, [sp, #12]
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800b612:	7812      	ldrb	r2, [r2, #0]
 800b614:	f885 2020 	strb.w	r2, [r5, #32]
        hqspi->pTxBuffPtr++;
 800b618:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b61a:	3201      	adds	r2, #1
 800b61c:	6262      	str	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 800b61e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b620:	3a01      	subs	r2, #1
 800b622:	62e2      	str	r2, [r4, #44]	; 0x2c
 800b624:	e7d6      	b.n	800b5d4 <HAL_QSPI_Transmit+0x4e>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800b626:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b628:	f043 0308 	orr.w	r3, r3, #8
 800b62c:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 800b62e:	e7e0      	b.n	800b5f2 <HAL_QSPI_Transmit+0x6c>
    status = HAL_BUSY;
 800b630:	2002      	movs	r0, #2
 800b632:	e7de      	b.n	800b5f2 <HAL_QSPI_Transmit+0x6c>
  __HAL_LOCK(hqspi);
 800b634:	2002      	movs	r0, #2
 800b636:	e7df      	b.n	800b5f8 <HAL_QSPI_Transmit+0x72>

0800b638 <HAL_QSPI_Receive>:
{
 800b638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b63a:	4604      	mov	r4, r0
 800b63c:	b085      	sub	sp, #20
 800b63e:	4616      	mov	r6, r2
 800b640:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800b642:	f7fc fc47 	bl	8007ed4 <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800b646:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 800b648:	4603      	mov	r3, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800b64a:	f8d5 c018 	ldr.w	ip, [r5, #24]
  __HAL_LOCK(hqspi);
 800b64e:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 800b652:	2a01      	cmp	r2, #1
 800b654:	d04d      	beq.n	800b6f2 <HAL_QSPI_Receive+0xba>
 800b656:	2201      	movs	r2, #1
 800b658:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800b65c:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800b660:	2a01      	cmp	r2, #1
 800b662:	b2d0      	uxtb	r0, r2
 800b664:	d143      	bne.n	800b6ee <HAL_QSPI_Receive+0xb6>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b666:	2200      	movs	r2, #0
 800b668:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 800b66a:	2f00      	cmp	r7, #0
 800b66c:	d03a      	beq.n	800b6e4 <HAL_QSPI_Receive+0xac>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800b66e:	2222      	movs	r2, #34	; 0x22
 800b670:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800b674:	692a      	ldr	r2, [r5, #16]
 800b676:	3201      	adds	r2, #1
 800b678:	63a2      	str	r2, [r4, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800b67a:	692a      	ldr	r2, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 800b67c:	6327      	str	r7, [r4, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800b67e:	3201      	adds	r2, #1
 800b680:	6362      	str	r2, [r4, #52]	; 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800b682:	6969      	ldr	r1, [r5, #20]
 800b684:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
 800b688:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 800b68c:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800b68e:	f8c5 c018 	str.w	ip, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 800b692:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800b694:	b98a      	cbnz	r2, 800b6ba <HAL_QSPI_Receive+0x82>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800b696:	2201      	movs	r2, #1
 800b698:	2102      	movs	r1, #2
 800b69a:	4620      	mov	r0, r4
 800b69c:	9600      	str	r6, [sp, #0]
 800b69e:	f7ff feb3 	bl	800b408 <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 800b6a2:	b910      	cbnz	r0, 800b6aa <HAL_QSPI_Receive+0x72>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800b6a4:	6823      	ldr	r3, [r4, #0]
 800b6a6:	2202      	movs	r2, #2
 800b6a8:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800b6b6:	b005      	add	sp, #20
 800b6b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800b6ba:	2201      	movs	r2, #1
 800b6bc:	2106      	movs	r1, #6
 800b6be:	4620      	mov	r0, r4
 800b6c0:	9600      	str	r6, [sp, #0]
 800b6c2:	9303      	str	r3, [sp, #12]
 800b6c4:	f7ff fea0 	bl	800b408 <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 800b6c8:	2800      	cmp	r0, #0
 800b6ca:	d1ee      	bne.n	800b6aa <HAL_QSPI_Receive+0x72>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800b6cc:	f895 1020 	ldrb.w	r1, [r5, #32]
 800b6d0:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 800b6d2:	9b03      	ldr	r3, [sp, #12]
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800b6d4:	7011      	strb	r1, [r2, #0]
        hqspi->pRxBuffPtr++;
 800b6d6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800b6d8:	3201      	adds	r2, #1
 800b6da:	6322      	str	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 800b6dc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800b6de:	3a01      	subs	r2, #1
 800b6e0:	63a2      	str	r2, [r4, #56]	; 0x38
 800b6e2:	e7d6      	b.n	800b692 <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800b6e4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b6e6:	f043 0308 	orr.w	r3, r3, #8
 800b6ea:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 800b6ec:	e7e0      	b.n	800b6b0 <HAL_QSPI_Receive+0x78>
    status = HAL_BUSY;
 800b6ee:	2002      	movs	r0, #2
 800b6f0:	e7de      	b.n	800b6b0 <HAL_QSPI_Receive+0x78>
  __HAL_LOCK(hqspi);
 800b6f2:	2002      	movs	r0, #2
 800b6f4:	e7df      	b.n	800b6b6 <HAL_QSPI_Receive+0x7e>

0800b6f6 <HAL_QSPI_AutoPolling>:
{
 800b6f6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800b6fa:	4604      	mov	r4, r0
 800b6fc:	4615      	mov	r5, r2
 800b6fe:	461e      	mov	r6, r3
 800b700:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 800b702:	f7fc fbe7 	bl	8007ed4 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800b706:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 800b70a:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 800b70c:	2a01      	cmp	r2, #1
 800b70e:	d040      	beq.n	800b792 <HAL_QSPI_AutoPolling+0x9c>
 800b710:	2201      	movs	r2, #1
 800b712:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800b716:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800b71a:	2a01      	cmp	r2, #1
 800b71c:	b2d7      	uxtb	r7, r2
 800b71e:	d136      	bne.n	800b78e <HAL_QSPI_AutoPolling+0x98>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800b720:	2142      	movs	r1, #66	; 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b722:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800b724:	9003      	str	r0, [sp, #12]
 800b726:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b728:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800b72a:	9600      	str	r6, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800b72c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800b730:	2120      	movs	r1, #32
 800b732:	f7ff fe69 	bl	800b408 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800b736:	bb20      	cbnz	r0, 800b782 <HAL_QSPI_AutoPolling+0x8c>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800b738:	6821      	ldr	r1, [r4, #0]
 800b73a:	682a      	ldr	r2, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800b73c:	6928      	ldr	r0, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800b73e:	628a      	str	r2, [r1, #40]	; 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800b740:	686a      	ldr	r2, [r5, #4]
 800b742:	624a      	str	r2, [r1, #36]	; 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800b744:	68aa      	ldr	r2, [r5, #8]
 800b746:	62ca      	str	r2, [r1, #44]	; 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800b748:	680a      	ldr	r2, [r1, #0]
 800b74a:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800b74e:	4302      	orrs	r2, r0
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800b750:	4620      	mov	r0, r4
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800b752:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800b756:	600a      	str	r2, [r1, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800b758:	4641      	mov	r1, r8
      cmd->NbData = cfg->StatusBytesSize;
 800b75a:	68ea      	ldr	r2, [r5, #12]
 800b75c:	f8c8 2028 	str.w	r2, [r8, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800b760:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b764:	f7ff fda0 	bl	800b2a8 <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800b768:	9b03      	ldr	r3, [sp, #12]
 800b76a:	463a      	mov	r2, r7
 800b76c:	2108      	movs	r1, #8
 800b76e:	4620      	mov	r0, r4
 800b770:	9600      	str	r6, [sp, #0]
 800b772:	f7ff fe49 	bl	800b408 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800b776:	b920      	cbnz	r0, 800b782 <HAL_QSPI_AutoPolling+0x8c>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800b778:	6823      	ldr	r3, [r4, #0]
 800b77a:	2208      	movs	r2, #8
 800b77c:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800b77e:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800b782:	2300      	movs	r3, #0
 800b784:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800b788:	b004      	add	sp, #16
 800b78a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    status = HAL_BUSY;
 800b78e:	2002      	movs	r0, #2
 800b790:	e7f7      	b.n	800b782 <HAL_QSPI_AutoPolling+0x8c>
  __HAL_LOCK(hqspi);
 800b792:	2002      	movs	r0, #2
 800b794:	e7f8      	b.n	800b788 <HAL_QSPI_AutoPolling+0x92>

0800b796 <HAL_QSPI_MemoryMapped>:
{
 800b796:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b798:	4604      	mov	r4, r0
 800b79a:	4616      	mov	r6, r2
 800b79c:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800b79e:	f7fc fb99 	bl	8007ed4 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800b7a2:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 800b7a6:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 800b7a8:	2a01      	cmp	r2, #1
 800b7aa:	d033      	beq.n	800b814 <HAL_QSPI_MemoryMapped+0x7e>
 800b7ac:	2201      	movs	r2, #1
 800b7ae:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800b7b2:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800b7b6:	2a01      	cmp	r2, #1
 800b7b8:	d12a      	bne.n	800b810 <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b7ba:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800b7bc:	2182      	movs	r1, #130	; 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800b7be:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b7c0:	6462      	str	r2, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800b7c2:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800b7c6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b7c8:	9100      	str	r1, [sp, #0]
 800b7ca:	2120      	movs	r1, #32
 800b7cc:	f7ff fe1c 	bl	800b408 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800b7d0:	4605      	mov	r5, r0
 800b7d2:	b9b8      	cbnz	r0, 800b804 <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800b7d4:	6823      	ldr	r3, [r4, #0]
 800b7d6:	6872      	ldr	r2, [r6, #4]
 800b7d8:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800b7da:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800b7dc:	f020 0008 	bic.w	r0, r0, #8
 800b7e0:	ea40 0002 	orr.w	r0, r0, r2
 800b7e4:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800b7e6:	d107      	bne.n	800b7f8 <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800b7e8:	6832      	ldr	r2, [r6, #0]
 800b7ea:	631a      	str	r2, [r3, #48]	; 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800b7ec:	2210      	movs	r2, #16
 800b7ee:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800b7f0:	681a      	ldr	r2, [r3, #0]
 800b7f2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800b7f6:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800b7f8:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800b7fc:	4639      	mov	r1, r7
 800b7fe:	4620      	mov	r0, r4
 800b800:	f7ff fd52 	bl	800b2a8 <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 800b804:	2300      	movs	r3, #0
 800b806:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800b80a:	4628      	mov	r0, r5
 800b80c:	b003      	add	sp, #12
 800b80e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 800b810:	2502      	movs	r5, #2
 800b812:	e7f7      	b.n	800b804 <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 800b814:	2502      	movs	r5, #2
 800b816:	e7f8      	b.n	800b80a <HAL_QSPI_MemoryMapped+0x74>

0800b818 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b818:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b81c:	4604      	mov	r4, r0
 800b81e:	b340      	cbz	r0, 800b872 <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b820:	6803      	ldr	r3, [r0, #0]
 800b822:	07db      	lsls	r3, r3, #31
 800b824:	d410      	bmi.n	800b848 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b826:	6823      	ldr	r3, [r4, #0]
 800b828:	079f      	lsls	r7, r3, #30
 800b82a:	d464      	bmi.n	800b8f6 <HAL_RCC_OscConfig+0xde>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b82c:	6823      	ldr	r3, [r4, #0]
 800b82e:	0719      	lsls	r1, r3, #28
 800b830:	f100 80aa 	bmi.w	800b988 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b834:	6823      	ldr	r3, [r4, #0]
 800b836:	075a      	lsls	r2, r3, #29
 800b838:	f100 80cb 	bmi.w	800b9d2 <HAL_RCC_OscConfig+0x1ba>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b83c:	69a2      	ldr	r2, [r4, #24]
 800b83e:	2a00      	cmp	r2, #0
 800b840:	f040 8134 	bne.w	800baac <HAL_RCC_OscConfig+0x294>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 800b844:	2000      	movs	r0, #0
 800b846:	e02b      	b.n	800b8a0 <HAL_RCC_OscConfig+0x88>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b848:	4b96      	ldr	r3, [pc, #600]	; (800baa4 <HAL_RCC_OscConfig+0x28c>)
 800b84a:	689a      	ldr	r2, [r3, #8]
 800b84c:	f002 020c 	and.w	r2, r2, #12
 800b850:	2a04      	cmp	r2, #4
 800b852:	d007      	beq.n	800b864 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b854:	689a      	ldr	r2, [r3, #8]
 800b856:	f002 020c 	and.w	r2, r2, #12
 800b85a:	2a08      	cmp	r2, #8
 800b85c:	d10b      	bne.n	800b876 <HAL_RCC_OscConfig+0x5e>
 800b85e:	685a      	ldr	r2, [r3, #4]
 800b860:	0256      	lsls	r6, r2, #9
 800b862:	d508      	bpl.n	800b876 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b864:	4b8f      	ldr	r3, [pc, #572]	; (800baa4 <HAL_RCC_OscConfig+0x28c>)
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	039d      	lsls	r5, r3, #14
 800b86a:	d5dc      	bpl.n	800b826 <HAL_RCC_OscConfig+0xe>
 800b86c:	6863      	ldr	r3, [r4, #4]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d1d9      	bne.n	800b826 <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
 800b872:	2001      	movs	r0, #1
 800b874:	e014      	b.n	800b8a0 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b876:	6862      	ldr	r2, [r4, #4]
 800b878:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800b87c:	d113      	bne.n	800b8a6 <HAL_RCC_OscConfig+0x8e>
 800b87e:	681a      	ldr	r2, [r3, #0]
 800b880:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b884:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800b886:	f7fc fb25 	bl	8007ed4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b88a:	4e86      	ldr	r6, [pc, #536]	; (800baa4 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 800b88c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b88e:	6833      	ldr	r3, [r6, #0]
 800b890:	0398      	lsls	r0, r3, #14
 800b892:	d4c8      	bmi.n	800b826 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b894:	f7fc fb1e 	bl	8007ed4 <HAL_GetTick>
 800b898:	1b40      	subs	r0, r0, r5
 800b89a:	2864      	cmp	r0, #100	; 0x64
 800b89c:	d9f7      	bls.n	800b88e <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 800b89e:	2003      	movs	r0, #3
}
 800b8a0:	b002      	add	sp, #8
 800b8a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b8a6:	4d7f      	ldr	r5, [pc, #508]	; (800baa4 <HAL_RCC_OscConfig+0x28c>)
 800b8a8:	682b      	ldr	r3, [r5, #0]
 800b8aa:	b992      	cbnz	r2, 800b8d2 <HAL_RCC_OscConfig+0xba>
 800b8ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b8b0:	602b      	str	r3, [r5, #0]
 800b8b2:	682b      	ldr	r3, [r5, #0]
 800b8b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b8b8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800b8ba:	f7fc fb0b 	bl	8007ed4 <HAL_GetTick>
 800b8be:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b8c0:	682b      	ldr	r3, [r5, #0]
 800b8c2:	0399      	lsls	r1, r3, #14
 800b8c4:	d5af      	bpl.n	800b826 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b8c6:	f7fc fb05 	bl	8007ed4 <HAL_GetTick>
 800b8ca:	1b80      	subs	r0, r0, r6
 800b8cc:	2864      	cmp	r0, #100	; 0x64
 800b8ce:	d9f7      	bls.n	800b8c0 <HAL_RCC_OscConfig+0xa8>
 800b8d0:	e7e5      	b.n	800b89e <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b8d2:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 800b8d6:	d107      	bne.n	800b8e8 <HAL_RCC_OscConfig+0xd0>
 800b8d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b8dc:	602b      	str	r3, [r5, #0]
 800b8de:	682b      	ldr	r3, [r5, #0]
 800b8e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b8e4:	602b      	str	r3, [r5, #0]
 800b8e6:	e7ce      	b.n	800b886 <HAL_RCC_OscConfig+0x6e>
 800b8e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b8ec:	602b      	str	r3, [r5, #0]
 800b8ee:	682b      	ldr	r3, [r5, #0]
 800b8f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b8f4:	e7f6      	b.n	800b8e4 <HAL_RCC_OscConfig+0xcc>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b8f6:	4b6b      	ldr	r3, [pc, #428]	; (800baa4 <HAL_RCC_OscConfig+0x28c>)
 800b8f8:	689a      	ldr	r2, [r3, #8]
 800b8fa:	f012 0f0c 	tst.w	r2, #12
 800b8fe:	d007      	beq.n	800b910 <HAL_RCC_OscConfig+0xf8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b900:	689a      	ldr	r2, [r3, #8]
 800b902:	f002 020c 	and.w	r2, r2, #12
 800b906:	2a08      	cmp	r2, #8
 800b908:	d111      	bne.n	800b92e <HAL_RCC_OscConfig+0x116>
 800b90a:	685a      	ldr	r2, [r3, #4]
 800b90c:	0252      	lsls	r2, r2, #9
 800b90e:	d40e      	bmi.n	800b92e <HAL_RCC_OscConfig+0x116>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b910:	4a64      	ldr	r2, [pc, #400]	; (800baa4 <HAL_RCC_OscConfig+0x28c>)
 800b912:	6813      	ldr	r3, [r2, #0]
 800b914:	079b      	lsls	r3, r3, #30
 800b916:	d502      	bpl.n	800b91e <HAL_RCC_OscConfig+0x106>
 800b918:	68e3      	ldr	r3, [r4, #12]
 800b91a:	2b01      	cmp	r3, #1
 800b91c:	d1a9      	bne.n	800b872 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b91e:	6813      	ldr	r3, [r2, #0]
 800b920:	6921      	ldr	r1, [r4, #16]
 800b922:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800b926:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800b92a:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b92c:	e77e      	b.n	800b82c <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b92e:	68e2      	ldr	r2, [r4, #12]
 800b930:	b1c2      	cbz	r2, 800b964 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_ENABLE();
 800b932:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b934:	4d5b      	ldr	r5, [pc, #364]	; (800baa4 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 800b936:	f042 0201 	orr.w	r2, r2, #1
 800b93a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800b93c:	f7fc faca 	bl	8007ed4 <HAL_GetTick>
 800b940:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b942:	682b      	ldr	r3, [r5, #0]
 800b944:	079f      	lsls	r7, r3, #30
 800b946:	d507      	bpl.n	800b958 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b948:	682b      	ldr	r3, [r5, #0]
 800b94a:	6922      	ldr	r2, [r4, #16]
 800b94c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800b950:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800b954:	602b      	str	r3, [r5, #0]
 800b956:	e769      	b.n	800b82c <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b958:	f7fc fabc 	bl	8007ed4 <HAL_GetTick>
 800b95c:	1b80      	subs	r0, r0, r6
 800b95e:	2802      	cmp	r0, #2
 800b960:	d9ef      	bls.n	800b942 <HAL_RCC_OscConfig+0x12a>
 800b962:	e79c      	b.n	800b89e <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 800b964:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b966:	4e4f      	ldr	r6, [pc, #316]	; (800baa4 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_DISABLE();
 800b968:	f022 0201 	bic.w	r2, r2, #1
 800b96c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800b96e:	f7fc fab1 	bl	8007ed4 <HAL_GetTick>
 800b972:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b974:	6833      	ldr	r3, [r6, #0]
 800b976:	0798      	lsls	r0, r3, #30
 800b978:	f57f af58 	bpl.w	800b82c <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b97c:	f7fc faaa 	bl	8007ed4 <HAL_GetTick>
 800b980:	1b40      	subs	r0, r0, r5
 800b982:	2802      	cmp	r0, #2
 800b984:	d9f6      	bls.n	800b974 <HAL_RCC_OscConfig+0x15c>
 800b986:	e78a      	b.n	800b89e <HAL_RCC_OscConfig+0x86>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b988:	6963      	ldr	r3, [r4, #20]
 800b98a:	4d46      	ldr	r5, [pc, #280]	; (800baa4 <HAL_RCC_OscConfig+0x28c>)
 800b98c:	b183      	cbz	r3, 800b9b0 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_LSI_ENABLE();
 800b98e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800b990:	f043 0301 	orr.w	r3, r3, #1
 800b994:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800b996:	f7fc fa9d 	bl	8007ed4 <HAL_GetTick>
 800b99a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b99c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800b99e:	079b      	lsls	r3, r3, #30
 800b9a0:	f53f af48 	bmi.w	800b834 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b9a4:	f7fc fa96 	bl	8007ed4 <HAL_GetTick>
 800b9a8:	1b80      	subs	r0, r0, r6
 800b9aa:	2802      	cmp	r0, #2
 800b9ac:	d9f6      	bls.n	800b99c <HAL_RCC_OscConfig+0x184>
 800b9ae:	e776      	b.n	800b89e <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 800b9b0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800b9b2:	f023 0301 	bic.w	r3, r3, #1
 800b9b6:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800b9b8:	f7fc fa8c 	bl	8007ed4 <HAL_GetTick>
 800b9bc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b9be:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800b9c0:	079f      	lsls	r7, r3, #30
 800b9c2:	f57f af37 	bpl.w	800b834 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b9c6:	f7fc fa85 	bl	8007ed4 <HAL_GetTick>
 800b9ca:	1b80      	subs	r0, r0, r6
 800b9cc:	2802      	cmp	r0, #2
 800b9ce:	d9f6      	bls.n	800b9be <HAL_RCC_OscConfig+0x1a6>
 800b9d0:	e765      	b.n	800b89e <HAL_RCC_OscConfig+0x86>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b9d2:	4b34      	ldr	r3, [pc, #208]	; (800baa4 <HAL_RCC_OscConfig+0x28c>)
 800b9d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b9d6:	00d0      	lsls	r0, r2, #3
 800b9d8:	d427      	bmi.n	800ba2a <HAL_RCC_OscConfig+0x212>
      __HAL_RCC_PWR_CLK_ENABLE();
 800b9da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 800b9dc:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800b9de:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800b9e2:	641a      	str	r2, [r3, #64]	; 0x40
 800b9e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b9ea:	9301      	str	r3, [sp, #4]
 800b9ec:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b9ee:	4d2e      	ldr	r5, [pc, #184]	; (800baa8 <HAL_RCC_OscConfig+0x290>)
 800b9f0:	682b      	ldr	r3, [r5, #0]
 800b9f2:	05d9      	lsls	r1, r3, #23
 800b9f4:	d51b      	bpl.n	800ba2e <HAL_RCC_OscConfig+0x216>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b9f6:	68a3      	ldr	r3, [r4, #8]
 800b9f8:	4d2a      	ldr	r5, [pc, #168]	; (800baa4 <HAL_RCC_OscConfig+0x28c>)
 800b9fa:	2b01      	cmp	r3, #1
 800b9fc:	d127      	bne.n	800ba4e <HAL_RCC_OscConfig+0x236>
 800b9fe:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800ba00:	f043 0301 	orr.w	r3, r3, #1
 800ba04:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ba06:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800ba0a:	f7fc fa63 	bl	8007ed4 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ba0e:	4e25      	ldr	r6, [pc, #148]	; (800baa4 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 800ba10:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ba12:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800ba14:	079b      	lsls	r3, r3, #30
 800ba16:	d53f      	bpl.n	800ba98 <HAL_RCC_OscConfig+0x280>
    if (pwrclkchanged == SET)
 800ba18:	2f00      	cmp	r7, #0
 800ba1a:	f43f af0f 	beq.w	800b83c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800ba1e:	4a21      	ldr	r2, [pc, #132]	; (800baa4 <HAL_RCC_OscConfig+0x28c>)
 800ba20:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800ba22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ba26:	6413      	str	r3, [r2, #64]	; 0x40
 800ba28:	e708      	b.n	800b83c <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
 800ba2a:	2700      	movs	r7, #0
 800ba2c:	e7df      	b.n	800b9ee <HAL_RCC_OscConfig+0x1d6>
      PWR->CR1 |= PWR_CR1_DBP;
 800ba2e:	682b      	ldr	r3, [r5, #0]
 800ba30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba34:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800ba36:	f7fc fa4d 	bl	8007ed4 <HAL_GetTick>
 800ba3a:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ba3c:	682b      	ldr	r3, [r5, #0]
 800ba3e:	05da      	lsls	r2, r3, #23
 800ba40:	d4d9      	bmi.n	800b9f6 <HAL_RCC_OscConfig+0x1de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ba42:	f7fc fa47 	bl	8007ed4 <HAL_GetTick>
 800ba46:	1b80      	subs	r0, r0, r6
 800ba48:	2864      	cmp	r0, #100	; 0x64
 800ba4a:	d9f7      	bls.n	800ba3c <HAL_RCC_OscConfig+0x224>
 800ba4c:	e727      	b.n	800b89e <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ba4e:	b9ab      	cbnz	r3, 800ba7c <HAL_RCC_OscConfig+0x264>
 800ba50:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ba52:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ba56:	f023 0301 	bic.w	r3, r3, #1
 800ba5a:	672b      	str	r3, [r5, #112]	; 0x70
 800ba5c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800ba5e:	f023 0304 	bic.w	r3, r3, #4
 800ba62:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800ba64:	f7fc fa36 	bl	8007ed4 <HAL_GetTick>
 800ba68:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ba6a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800ba6c:	0798      	lsls	r0, r3, #30
 800ba6e:	d5d3      	bpl.n	800ba18 <HAL_RCC_OscConfig+0x200>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ba70:	f7fc fa30 	bl	8007ed4 <HAL_GetTick>
 800ba74:	1b80      	subs	r0, r0, r6
 800ba76:	4540      	cmp	r0, r8
 800ba78:	d9f7      	bls.n	800ba6a <HAL_RCC_OscConfig+0x252>
 800ba7a:	e710      	b.n	800b89e <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ba7c:	2b05      	cmp	r3, #5
 800ba7e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800ba80:	d103      	bne.n	800ba8a <HAL_RCC_OscConfig+0x272>
 800ba82:	f043 0304 	orr.w	r3, r3, #4
 800ba86:	672b      	str	r3, [r5, #112]	; 0x70
 800ba88:	e7b9      	b.n	800b9fe <HAL_RCC_OscConfig+0x1e6>
 800ba8a:	f023 0301 	bic.w	r3, r3, #1
 800ba8e:	672b      	str	r3, [r5, #112]	; 0x70
 800ba90:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800ba92:	f023 0304 	bic.w	r3, r3, #4
 800ba96:	e7b5      	b.n	800ba04 <HAL_RCC_OscConfig+0x1ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ba98:	f7fc fa1c 	bl	8007ed4 <HAL_GetTick>
 800ba9c:	1b40      	subs	r0, r0, r5
 800ba9e:	4540      	cmp	r0, r8
 800baa0:	d9b7      	bls.n	800ba12 <HAL_RCC_OscConfig+0x1fa>
 800baa2:	e6fc      	b.n	800b89e <HAL_RCC_OscConfig+0x86>
 800baa4:	40023800 	.word	0x40023800
 800baa8:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800baac:	4d3c      	ldr	r5, [pc, #240]	; (800bba0 <HAL_RCC_OscConfig+0x388>)
 800baae:	68ab      	ldr	r3, [r5, #8]
 800bab0:	f003 030c 	and.w	r3, r3, #12
 800bab4:	2b08      	cmp	r3, #8
 800bab6:	d042      	beq.n	800bb3e <HAL_RCC_OscConfig+0x326>
        __HAL_RCC_PLL_DISABLE();
 800bab8:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800baba:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800babc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bac0:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bac2:	d12f      	bne.n	800bb24 <HAL_RCC_OscConfig+0x30c>
        tickstart = HAL_GetTick();
 800bac4:	f7fc fa06 	bl	8007ed4 <HAL_GetTick>
 800bac8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800baca:	682b      	ldr	r3, [r5, #0]
 800bacc:	0199      	lsls	r1, r3, #6
 800bace:	d423      	bmi.n	800bb18 <HAL_RCC_OscConfig+0x300>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bad0:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 800bad4:	4313      	orrs	r3, r2
 800bad6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800bad8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800badc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800bade:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800bae2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800bae4:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800bae8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800baea:	0852      	lsrs	r2, r2, #1
 800baec:	3a01      	subs	r2, #1
 800baee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800baf2:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800baf4:	682b      	ldr	r3, [r5, #0]
 800baf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bafa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800bafc:	f7fc f9ea 	bl	8007ed4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bb00:	4d27      	ldr	r5, [pc, #156]	; (800bba0 <HAL_RCC_OscConfig+0x388>)
        tickstart = HAL_GetTick();
 800bb02:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bb04:	682b      	ldr	r3, [r5, #0]
 800bb06:	019a      	lsls	r2, r3, #6
 800bb08:	f53f ae9c 	bmi.w	800b844 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bb0c:	f7fc f9e2 	bl	8007ed4 <HAL_GetTick>
 800bb10:	1b00      	subs	r0, r0, r4
 800bb12:	2802      	cmp	r0, #2
 800bb14:	d9f6      	bls.n	800bb04 <HAL_RCC_OscConfig+0x2ec>
 800bb16:	e6c2      	b.n	800b89e <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bb18:	f7fc f9dc 	bl	8007ed4 <HAL_GetTick>
 800bb1c:	1b80      	subs	r0, r0, r6
 800bb1e:	2802      	cmp	r0, #2
 800bb20:	d9d3      	bls.n	800baca <HAL_RCC_OscConfig+0x2b2>
 800bb22:	e6bc      	b.n	800b89e <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 800bb24:	f7fc f9d6 	bl	8007ed4 <HAL_GetTick>
 800bb28:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bb2a:	682b      	ldr	r3, [r5, #0]
 800bb2c:	019b      	lsls	r3, r3, #6
 800bb2e:	f57f ae89 	bpl.w	800b844 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bb32:	f7fc f9cf 	bl	8007ed4 <HAL_GetTick>
 800bb36:	1b00      	subs	r0, r0, r4
 800bb38:	2802      	cmp	r0, #2
 800bb3a:	d9f6      	bls.n	800bb2a <HAL_RCC_OscConfig+0x312>
 800bb3c:	e6af      	b.n	800b89e <HAL_RCC_OscConfig+0x86>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bb3e:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 800bb40:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bb42:	f43f ae96 	beq.w	800b872 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bb46:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bb4a:	69e1      	ldr	r1, [r4, #28]
 800bb4c:	428a      	cmp	r2, r1
 800bb4e:	f47f ae90 	bne.w	800b872 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800bb52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bb56:	6a21      	ldr	r1, [r4, #32]
 800bb58:	428a      	cmp	r2, r1
 800bb5a:	f47f ae8a 	bne.w	800b872 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800bb5e:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800bb62:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800bb64:	401a      	ands	r2, r3
 800bb66:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800bb6a:	f47f ae82 	bne.w	800b872 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800bb6e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800bb70:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 800bb74:	0852      	lsrs	r2, r2, #1
 800bb76:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800bb78:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800bb7c:	f47f ae79 	bne.w	800b872 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800bb80:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800bb84:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800bb86:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 800bb8a:	f47f ae72 	bne.w	800b872 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800bb8e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800bb92:	6b22      	ldr	r2, [r4, #48]	; 0x30
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800bb94:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 800bb98:	f43f ae54 	beq.w	800b844 <HAL_RCC_OscConfig+0x2c>
 800bb9c:	e669      	b.n	800b872 <HAL_RCC_OscConfig+0x5a>
 800bb9e:	bf00      	nop
 800bba0:	40023800 	.word	0x40023800

0800bba4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800bba4:	4913      	ldr	r1, [pc, #76]	; (800bbf4 <HAL_RCC_GetSysClockFreq+0x50>)
{
 800bba6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800bba8:	688b      	ldr	r3, [r1, #8]
 800bbaa:	f003 030c 	and.w	r3, r3, #12
 800bbae:	2b04      	cmp	r3, #4
 800bbb0:	d01b      	beq.n	800bbea <HAL_RCC_GetSysClockFreq+0x46>
 800bbb2:	2b08      	cmp	r3, #8
 800bbb4:	d11b      	bne.n	800bbee <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800bbb6:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800bbb8:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bbba:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800bbbc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800bbc0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bbc4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800bbc8:	bf1a      	itte	ne
 800bbca:	480b      	ldrne	r0, [pc, #44]	; (800bbf8 <HAL_RCC_GetSysClockFreq+0x54>)
 800bbcc:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bbce:	480b      	ldreq	r0, [pc, #44]	; (800bbfc <HAL_RCC_GetSysClockFreq+0x58>)
 800bbd0:	fba1 0100 	umull	r0, r1, r1, r0
 800bbd4:	f7f4 fbd4 	bl	8000380 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800bbd8:	4b06      	ldr	r3, [pc, #24]	; (800bbf4 <HAL_RCC_GetSysClockFreq+0x50>)
 800bbda:	685b      	ldr	r3, [r3, #4]
 800bbdc:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800bbe0:	3301      	adds	r3, #1
 800bbe2:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 800bbe4:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800bbe8:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800bbea:	4803      	ldr	r0, [pc, #12]	; (800bbf8 <HAL_RCC_GetSysClockFreq+0x54>)
 800bbec:	e7fc      	b.n	800bbe8 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 800bbee:	4803      	ldr	r0, [pc, #12]	; (800bbfc <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 800bbf0:	e7fa      	b.n	800bbe8 <HAL_RCC_GetSysClockFreq+0x44>
 800bbf2:	bf00      	nop
 800bbf4:	40023800 	.word	0x40023800
 800bbf8:	017d7840 	.word	0x017d7840
 800bbfc:	00f42400 	.word	0x00f42400

0800bc00 <HAL_RCC_ClockConfig>:
{
 800bc00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc04:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800bc06:	4604      	mov	r4, r0
 800bc08:	b910      	cbnz	r0, 800bc10 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800bc0a:	2001      	movs	r0, #1
}
 800bc0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800bc10:	4a46      	ldr	r2, [pc, #280]	; (800bd2c <HAL_RCC_ClockConfig+0x12c>)
 800bc12:	6813      	ldr	r3, [r2, #0]
 800bc14:	f003 030f 	and.w	r3, r3, #15
 800bc18:	428b      	cmp	r3, r1
 800bc1a:	d328      	bcc.n	800bc6e <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bc1c:	6822      	ldr	r2, [r4, #0]
 800bc1e:	0797      	lsls	r7, r2, #30
 800bc20:	d430      	bmi.n	800bc84 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bc22:	07d0      	lsls	r0, r2, #31
 800bc24:	d444      	bmi.n	800bcb0 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800bc26:	4a41      	ldr	r2, [pc, #260]	; (800bd2c <HAL_RCC_ClockConfig+0x12c>)
 800bc28:	6813      	ldr	r3, [r2, #0]
 800bc2a:	f003 030f 	and.w	r3, r3, #15
 800bc2e:	42ab      	cmp	r3, r5
 800bc30:	d867      	bhi.n	800bd02 <HAL_RCC_ClockConfig+0x102>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bc32:	6822      	ldr	r2, [r4, #0]
 800bc34:	0751      	lsls	r1, r2, #29
 800bc36:	d470      	bmi.n	800bd1a <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bc38:	0713      	lsls	r3, r2, #28
 800bc3a:	d507      	bpl.n	800bc4c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800bc3c:	4a3c      	ldr	r2, [pc, #240]	; (800bd30 <HAL_RCC_ClockConfig+0x130>)
 800bc3e:	6921      	ldr	r1, [r4, #16]
 800bc40:	6893      	ldr	r3, [r2, #8]
 800bc42:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800bc46:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800bc4a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800bc4c:	f7ff ffaa 	bl	800bba4 <HAL_RCC_GetSysClockFreq>
 800bc50:	4b37      	ldr	r3, [pc, #220]	; (800bd30 <HAL_RCC_ClockConfig+0x130>)
 800bc52:	4a38      	ldr	r2, [pc, #224]	; (800bd34 <HAL_RCC_ClockConfig+0x134>)
 800bc54:	689b      	ldr	r3, [r3, #8]
 800bc56:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800bc5a:	5cd3      	ldrb	r3, [r2, r3]
 800bc5c:	40d8      	lsrs	r0, r3
 800bc5e:	4b36      	ldr	r3, [pc, #216]	; (800bd38 <HAL_RCC_ClockConfig+0x138>)
 800bc60:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800bc62:	4b36      	ldr	r3, [pc, #216]	; (800bd3c <HAL_RCC_ClockConfig+0x13c>)
 800bc64:	6818      	ldr	r0, [r3, #0]
 800bc66:	f7f9 fa4f 	bl	8005108 <HAL_InitTick>
  return HAL_OK;
 800bc6a:	2000      	movs	r0, #0
 800bc6c:	e7ce      	b.n	800bc0c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bc6e:	6813      	ldr	r3, [r2, #0]
 800bc70:	f023 030f 	bic.w	r3, r3, #15
 800bc74:	430b      	orrs	r3, r1
 800bc76:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bc78:	6813      	ldr	r3, [r2, #0]
 800bc7a:	f003 030f 	and.w	r3, r3, #15
 800bc7e:	428b      	cmp	r3, r1
 800bc80:	d1c3      	bne.n	800bc0a <HAL_RCC_ClockConfig+0xa>
 800bc82:	e7cb      	b.n	800bc1c <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bc84:	f012 0f04 	tst.w	r2, #4
 800bc88:	4b29      	ldr	r3, [pc, #164]	; (800bd30 <HAL_RCC_ClockConfig+0x130>)
 800bc8a:	d003      	beq.n	800bc94 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bc8c:	6899      	ldr	r1, [r3, #8]
 800bc8e:	f441 51e0 	orr.w	r1, r1, #7168	; 0x1c00
 800bc92:	6099      	str	r1, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bc94:	0716      	lsls	r6, r2, #28
 800bc96:	d503      	bpl.n	800bca0 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800bc98:	6899      	ldr	r1, [r3, #8]
 800bc9a:	f441 4160 	orr.w	r1, r1, #57344	; 0xe000
 800bc9e:	6099      	str	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bca0:	4923      	ldr	r1, [pc, #140]	; (800bd30 <HAL_RCC_ClockConfig+0x130>)
 800bca2:	68a0      	ldr	r0, [r4, #8]
 800bca4:	688b      	ldr	r3, [r1, #8]
 800bca6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bcaa:	4303      	orrs	r3, r0
 800bcac:	608b      	str	r3, [r1, #8]
 800bcae:	e7b8      	b.n	800bc22 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bcb0:	6861      	ldr	r1, [r4, #4]
 800bcb2:	4b1f      	ldr	r3, [pc, #124]	; (800bd30 <HAL_RCC_ClockConfig+0x130>)
 800bcb4:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bcb6:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bcb8:	d11b      	bne.n	800bcf2 <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bcba:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bcbe:	d0a4      	beq.n	800bc0a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800bcc0:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bcc2:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bcc6:	4f1a      	ldr	r7, [pc, #104]	; (800bd30 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800bcc8:	f022 0203 	bic.w	r2, r2, #3
 800bccc:	430a      	orrs	r2, r1
 800bcce:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800bcd0:	f7fc f900 	bl	8007ed4 <HAL_GetTick>
 800bcd4:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bcd6:	68bb      	ldr	r3, [r7, #8]
 800bcd8:	6862      	ldr	r2, [r4, #4]
 800bcda:	f003 030c 	and.w	r3, r3, #12
 800bcde:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800bce2:	d0a0      	beq.n	800bc26 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bce4:	f7fc f8f6 	bl	8007ed4 <HAL_GetTick>
 800bce8:	1b80      	subs	r0, r0, r6
 800bcea:	4540      	cmp	r0, r8
 800bcec:	d9f3      	bls.n	800bcd6 <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 800bcee:	2003      	movs	r0, #3
 800bcf0:	e78c      	b.n	800bc0c <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bcf2:	2902      	cmp	r1, #2
 800bcf4:	d102      	bne.n	800bcfc <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bcf6:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800bcfa:	e7e0      	b.n	800bcbe <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bcfc:	f012 0f02 	tst.w	r2, #2
 800bd00:	e7dd      	b.n	800bcbe <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bd02:	6813      	ldr	r3, [r2, #0]
 800bd04:	f023 030f 	bic.w	r3, r3, #15
 800bd08:	432b      	orrs	r3, r5
 800bd0a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bd0c:	6813      	ldr	r3, [r2, #0]
 800bd0e:	f003 030f 	and.w	r3, r3, #15
 800bd12:	42ab      	cmp	r3, r5
 800bd14:	f47f af79 	bne.w	800bc0a <HAL_RCC_ClockConfig+0xa>
 800bd18:	e78b      	b.n	800bc32 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bd1a:	4905      	ldr	r1, [pc, #20]	; (800bd30 <HAL_RCC_ClockConfig+0x130>)
 800bd1c:	68e0      	ldr	r0, [r4, #12]
 800bd1e:	688b      	ldr	r3, [r1, #8]
 800bd20:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800bd24:	4303      	orrs	r3, r0
 800bd26:	608b      	str	r3, [r1, #8]
 800bd28:	e786      	b.n	800bc38 <HAL_RCC_ClockConfig+0x38>
 800bd2a:	bf00      	nop
 800bd2c:	40023c00 	.word	0x40023c00
 800bd30:	40023800 	.word	0x40023800
 800bd34:	0802a17d 	.word	0x0802a17d
 800bd38:	20000060 	.word	0x20000060
 800bd3c:	20000068 	.word	0x20000068

0800bd40 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800bd40:	4b04      	ldr	r3, [pc, #16]	; (800bd54 <HAL_RCC_GetPCLK1Freq+0x14>)
 800bd42:	4a05      	ldr	r2, [pc, #20]	; (800bd58 <HAL_RCC_GetPCLK1Freq+0x18>)
 800bd44:	689b      	ldr	r3, [r3, #8]
 800bd46:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800bd4a:	5cd3      	ldrb	r3, [r2, r3]
 800bd4c:	4a03      	ldr	r2, [pc, #12]	; (800bd5c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800bd4e:	6810      	ldr	r0, [r2, #0]
}
 800bd50:	40d8      	lsrs	r0, r3
 800bd52:	4770      	bx	lr
 800bd54:	40023800 	.word	0x40023800
 800bd58:	0802a18d 	.word	0x0802a18d
 800bd5c:	20000060 	.word	0x20000060

0800bd60 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800bd60:	230f      	movs	r3, #15
 800bd62:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800bd64:	4b0b      	ldr	r3, [pc, #44]	; (800bd94 <HAL_RCC_GetClockConfig+0x34>)
 800bd66:	689a      	ldr	r2, [r3, #8]
 800bd68:	f002 0203 	and.w	r2, r2, #3
 800bd6c:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800bd6e:	689a      	ldr	r2, [r3, #8]
 800bd70:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800bd74:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800bd76:	689a      	ldr	r2, [r3, #8]
 800bd78:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 800bd7c:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800bd7e:	689b      	ldr	r3, [r3, #8]
 800bd80:	08db      	lsrs	r3, r3, #3
 800bd82:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800bd86:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800bd88:	4b03      	ldr	r3, [pc, #12]	; (800bd98 <HAL_RCC_GetClockConfig+0x38>)
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	f003 030f 	and.w	r3, r3, #15
 800bd90:	600b      	str	r3, [r1, #0]
}
 800bd92:	4770      	bx	lr
 800bd94:	40023800 	.word	0x40023800
 800bd98:	40023c00 	.word	0x40023c00

0800bd9c <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800bd9c:	6803      	ldr	r3, [r0, #0]
{
 800bd9e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800bda2:	f013 0601 	ands.w	r6, r3, #1
{
 800bda6:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800bda8:	d00b      	beq.n	800bdc2 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800bdaa:	4ab0      	ldr	r2, [pc, #704]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800bdac:	6891      	ldr	r1, [r2, #8]
 800bdae:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 800bdb2:	6091      	str	r1, [r2, #8]
 800bdb4:	6b46      	ldr	r6, [r0, #52]	; 0x34
 800bdb6:	6891      	ldr	r1, [r2, #8]
 800bdb8:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800bdba:	fab6 f686 	clz	r6, r6
 800bdbe:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800bdc0:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800bdc2:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 800bdc6:	d012      	beq.n	800bdee <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bdc8:	49a8      	ldr	r1, [pc, #672]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800bdca:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800bdcc:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800bdd0:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bdd4:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    {
      plli2sused = 1;
 800bdd8:	bf08      	it	eq
 800bdda:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bddc:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800bde0:	bf16      	itet	ne
 800bde2:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 800bde6:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800bde8:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bdea:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800bdee:	02d9      	lsls	r1, r3, #11
 800bdf0:	d510      	bpl.n	800be14 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800bdf2:	489e      	ldr	r0, [pc, #632]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800bdf4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800bdf6:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800bdfa:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800bdfe:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800be02:	ea42 0201 	orr.w	r2, r2, r1
 800be06:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800be0a:	f000 81a7 	beq.w	800c15c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 800be0e:	2900      	cmp	r1, #0
 800be10:	bf08      	it	eq
 800be12:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 800be14:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800be18:	bf18      	it	ne
 800be1a:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800be1c:	069a      	lsls	r2, r3, #26
 800be1e:	d531      	bpl.n	800be84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800be20:	4b92      	ldr	r3, [pc, #584]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800be22:	4f93      	ldr	r7, [pc, #588]	; (800c070 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800be24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800be26:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800be2a:	641a      	str	r2, [r3, #64]	; 0x40
 800be2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800be32:	9301      	str	r3, [sp, #4]
 800be34:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800be3c:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800be3e:	f7fc f849 	bl	8007ed4 <HAL_GetTick>
 800be42:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	05db      	lsls	r3, r3, #23
 800be48:	f140 818a 	bpl.w	800c160 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800be4c:	4f87      	ldr	r7, [pc, #540]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800be4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800be50:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800be54:	f040 818f 	bne.w	800c176 <HAL_RCCEx_PeriphCLKConfig+0x3da>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800be58:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800be5a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800be5e:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800be62:	4a82      	ldr	r2, [pc, #520]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800be64:	f040 81ad 	bne.w	800c1c2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800be68:	6891      	ldr	r1, [r2, #8]
 800be6a:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 800be6e:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800be72:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 800be76:	4301      	orrs	r1, r0
 800be78:	6091      	str	r1, [r2, #8]
 800be7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800be7e:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800be80:	430b      	orrs	r3, r1
 800be82:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800be84:	6823      	ldr	r3, [r4, #0]
 800be86:	06da      	lsls	r2, r3, #27
 800be88:	d50c      	bpl.n	800bea4 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800be8a:	4a78      	ldr	r2, [pc, #480]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800be8c:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800be90:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 800be94:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 800be98:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800be9c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800be9e:	4301      	orrs	r1, r0
 800bea0:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800bea4:	045f      	lsls	r7, r3, #17
 800bea6:	d508      	bpl.n	800beba <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800bea8:	4970      	ldr	r1, [pc, #448]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800beaa:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800beac:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800beb0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800beb4:	4302      	orrs	r2, r0
 800beb6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800beba:	0418      	lsls	r0, r3, #16
 800bebc:	d508      	bpl.n	800bed0 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800bebe:	496b      	ldr	r1, [pc, #428]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800bec0:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800bec2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800bec6:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800beca:	4302      	orrs	r2, r0
 800becc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800bed0:	03d9      	lsls	r1, r3, #15
 800bed2:	d508      	bpl.n	800bee6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800bed4:	4965      	ldr	r1, [pc, #404]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800bed6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800bed8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800bedc:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800bee0:	4302      	orrs	r2, r0
 800bee2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bee6:	039a      	lsls	r2, r3, #14
 800bee8:	d508      	bpl.n	800befc <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800beea:	4960      	ldr	r1, [pc, #384]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800beec:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800beee:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800bef2:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800bef6:	4302      	orrs	r2, r0
 800bef8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800befc:	065f      	lsls	r7, r3, #25
 800befe:	d508      	bpl.n	800bf12 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800bf00:	495a      	ldr	r1, [pc, #360]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800bf02:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800bf04:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800bf08:	f022 0203 	bic.w	r2, r2, #3
 800bf0c:	4302      	orrs	r2, r0
 800bf0e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800bf12:	0618      	lsls	r0, r3, #24
 800bf14:	d508      	bpl.n	800bf28 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800bf16:	4955      	ldr	r1, [pc, #340]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800bf18:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800bf1a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800bf1e:	f022 020c 	bic.w	r2, r2, #12
 800bf22:	4302      	orrs	r2, r0
 800bf24:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800bf28:	05d9      	lsls	r1, r3, #23
 800bf2a:	d508      	bpl.n	800bf3e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800bf2c:	494f      	ldr	r1, [pc, #316]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800bf2e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800bf30:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800bf34:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800bf38:	4302      	orrs	r2, r0
 800bf3a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800bf3e:	059a      	lsls	r2, r3, #22
 800bf40:	d508      	bpl.n	800bf54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800bf42:	494a      	ldr	r1, [pc, #296]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800bf44:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800bf46:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800bf4a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800bf4e:	4302      	orrs	r2, r0
 800bf50:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800bf54:	055f      	lsls	r7, r3, #21
 800bf56:	d508      	bpl.n	800bf6a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800bf58:	4944      	ldr	r1, [pc, #272]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800bf5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bf5c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800bf60:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800bf64:	4302      	orrs	r2, r0
 800bf66:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800bf6a:	0518      	lsls	r0, r3, #20
 800bf6c:	d508      	bpl.n	800bf80 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800bf6e:	493f      	ldr	r1, [pc, #252]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800bf70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf72:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800bf76:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800bf7a:	4302      	orrs	r2, r0
 800bf7c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800bf80:	04d9      	lsls	r1, r3, #19
 800bf82:	d508      	bpl.n	800bf96 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800bf84:	4939      	ldr	r1, [pc, #228]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800bf86:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800bf88:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800bf8c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800bf90:	4302      	orrs	r2, r0
 800bf92:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800bf96:	049a      	lsls	r2, r3, #18
 800bf98:	d508      	bpl.n	800bfac <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800bf9a:	4934      	ldr	r1, [pc, #208]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800bf9c:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800bf9e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800bfa2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800bfa6:	4302      	orrs	r2, r0
 800bfa8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bfac:	025f      	lsls	r7, r3, #9
 800bfae:	d508      	bpl.n	800bfc2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bfb0:	492e      	ldr	r1, [pc, #184]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800bfb2:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800bfb4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800bfb8:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800bfbc:	4302      	orrs	r2, r0
 800bfbe:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800bfc2:	0298      	lsls	r0, r3, #10
 800bfc4:	d50c      	bpl.n	800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800bfc6:	4829      	ldr	r0, [pc, #164]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800bfc8:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800bfca:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 800bfce:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800bfd2:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 800bfd6:	bf08      	it	eq
 800bfd8:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800bfda:	430a      	orrs	r2, r1
 800bfdc:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 800bfe0:	f013 0f08 	tst.w	r3, #8
 800bfe4:	bf18      	it	ne
 800bfe6:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bfe8:	0359      	lsls	r1, r3, #13
 800bfea:	d508      	bpl.n	800bffe <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bfec:	491f      	ldr	r1, [pc, #124]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800bfee:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800bff0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800bff4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800bff8:	4302      	orrs	r2, r0
 800bffa:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800bffe:	021a      	lsls	r2, r3, #8
 800c000:	d509      	bpl.n	800c016 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800c002:	491a      	ldr	r1, [pc, #104]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800c004:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800c008:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800c00c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800c010:	4302      	orrs	r2, r0
 800c012:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800c016:	015f      	lsls	r7, r3, #5
 800c018:	d509      	bpl.n	800c02e <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800c01a:	4914      	ldr	r1, [pc, #80]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800c01c:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800c020:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800c024:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800c028:	4302      	orrs	r2, r0
 800c02a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c02e:	0118      	lsls	r0, r3, #4
 800c030:	d509      	bpl.n	800c046 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c032:	490e      	ldr	r1, [pc, #56]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800c034:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800c038:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 800c03c:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800c040:	4302      	orrs	r2, r0
 800c042:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800c046:	00d9      	lsls	r1, r3, #3
 800c048:	d509      	bpl.n	800c05e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800c04a:	4908      	ldr	r1, [pc, #32]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800c04c:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800c050:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 800c054:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800c058:	4302      	orrs	r2, r0
 800c05a:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c05e:	2e01      	cmp	r6, #1
 800c060:	f000 80b3 	beq.w	800c1ca <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800c064:	019a      	lsls	r2, r3, #6
 800c066:	f100 80b0 	bmi.w	800c1ca <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800c06a:	e003      	b.n	800c074 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800c06c:	40023800 	.word	0x40023800
 800c070:	40007000 	.word	0x40007000
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800c074:	2d01      	cmp	r5, #1
 800c076:	d16f      	bne.n	800c158 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800c078:	4d9d      	ldr	r5, [pc, #628]	; (800c2f0 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 800c07a:	682b      	ldr	r3, [r5, #0]
 800c07c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c080:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c082:	f7fb ff27 	bl	8007ed4 <HAL_GetTick>
 800c086:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c088:	682b      	ldr	r3, [r5, #0]
 800c08a:	009f      	lsls	r7, r3, #2
 800c08c:	f100 8121 	bmi.w	800c2d2 <HAL_RCCEx_PeriphCLKConfig+0x536>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800c090:	6822      	ldr	r2, [r4, #0]
 800c092:	0316      	lsls	r6, r2, #12
 800c094:	d501      	bpl.n	800c09a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 800c096:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c098:	b11b      	cbz	r3, 800c0a2 <HAL_RCCEx_PeriphCLKConfig+0x306>
 800c09a:	02d0      	lsls	r0, r2, #11
 800c09c:	d51c      	bpl.n	800c0d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800c09e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c0a0:	b9d3      	cbnz	r3, 800c0d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800c0a2:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c0a6:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800c0aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c0ae:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 800c0b2:	430b      	orrs	r3, r1
 800c0b4:	6961      	ldr	r1, [r4, #20]
 800c0b6:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800c0ba:	69a1      	ldr	r1, [r4, #24]
 800c0bc:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800c0c0:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800c0c4:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 800c0c8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800c0ca:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800c0ce:	3901      	subs	r1, #1
 800c0d0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800c0d4:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800c0d8:	0291      	lsls	r1, r2, #10
 800c0da:	d515      	bpl.n	800c108 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800c0dc:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800c0de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c0e2:	d111      	bne.n	800c108 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c0e4:	4982      	ldr	r1, [pc, #520]	; (800c2f0 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 800c0e6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c0ea:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800c0ee:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800c0f2:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800c0f6:	4303      	orrs	r3, r0
 800c0f8:	6960      	ldr	r0, [r4, #20]
 800c0fa:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800c0fe:	6a20      	ldr	r0, [r4, #32]
 800c100:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c104:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800c108:	0712      	lsls	r2, r2, #28
 800c10a:	d519      	bpl.n	800c140 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c10c:	4a78      	ldr	r2, [pc, #480]	; (800c2f0 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 800c10e:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800c112:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800c116:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800c11a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c11e:	430b      	orrs	r3, r1
 800c120:	6961      	ldr	r1, [r4, #20]
 800c122:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800c126:	69e1      	ldr	r1, [r4, #28]
 800c128:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800c12c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800c130:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800c134:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c136:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800c13a:	430b      	orrs	r3, r1
 800c13c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800c140:	4c6b      	ldr	r4, [pc, #428]	; (800c2f0 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 800c142:	6823      	ldr	r3, [r4, #0]
 800c144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c148:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c14a:	f7fb fec3 	bl	8007ed4 <HAL_GetTick>
 800c14e:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c150:	6823      	ldr	r3, [r4, #0]
 800c152:	009b      	lsls	r3, r3, #2
 800c154:	f140 80c4 	bpl.w	800c2e0 <HAL_RCCEx_PeriphCLKConfig+0x544>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800c158:	2000      	movs	r0, #0
 800c15a:	e009      	b.n	800c170 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
      plli2sused = 1;
 800c15c:	2601      	movs	r6, #1
 800c15e:	e659      	b.n	800be14 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c160:	f7fb feb8 	bl	8007ed4 <HAL_GetTick>
 800c164:	eba0 0008 	sub.w	r0, r0, r8
 800c168:	2864      	cmp	r0, #100	; 0x64
 800c16a:	f67f ae6b 	bls.w	800be44 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 800c16e:	2003      	movs	r0, #3
}
 800c170:	b003      	add	sp, #12
 800c172:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c176:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800c178:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800c17c:	4293      	cmp	r3, r2
 800c17e:	f43f ae6b 	beq.w	800be58 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c182:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 800c184:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c186:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800c18a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800c18e:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c190:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c192:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800c196:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 800c198:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c19a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c19c:	07d8      	lsls	r0, r3, #31
 800c19e:	f57f ae5b 	bpl.w	800be58 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 800c1a2:	f7fb fe97 	bl	8007ed4 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c1a6:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800c1aa:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c1ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c1ae:	0799      	lsls	r1, r3, #30
 800c1b0:	f53f ae52 	bmi.w	800be58 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c1b4:	f7fb fe8e 	bl	8007ed4 <HAL_GetTick>
 800c1b8:	eba0 0008 	sub.w	r0, r0, r8
 800c1bc:	4548      	cmp	r0, r9
 800c1be:	d9f5      	bls.n	800c1ac <HAL_RCCEx_PeriphCLKConfig+0x410>
 800c1c0:	e7d5      	b.n	800c16e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c1c2:	6891      	ldr	r1, [r2, #8]
 800c1c4:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800c1c8:	e656      	b.n	800be78 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 800c1ca:	4e49      	ldr	r6, [pc, #292]	; (800c2f0 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 800c1cc:	6833      	ldr	r3, [r6, #0]
 800c1ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c1d2:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800c1d4:	f7fb fe7e 	bl	8007ed4 <HAL_GetTick>
 800c1d8:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c1da:	6833      	ldr	r3, [r6, #0]
 800c1dc:	011b      	lsls	r3, r3, #4
 800c1de:	d472      	bmi.n	800c2c6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800c1e0:	6822      	ldr	r2, [r4, #0]
 800c1e2:	07d7      	lsls	r7, r2, #31
 800c1e4:	d512      	bpl.n	800c20c <HAL_RCCEx_PeriphCLKConfig+0x470>
 800c1e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c1e8:	b983      	cbnz	r3, 800c20c <HAL_RCCEx_PeriphCLKConfig+0x470>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800c1ea:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800c1ee:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800c1f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c1f6:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800c1fa:	430b      	orrs	r3, r1
 800c1fc:	6861      	ldr	r1, [r4, #4]
 800c1fe:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800c202:	68a1      	ldr	r1, [r4, #8]
 800c204:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800c208:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800c20c:	0316      	lsls	r6, r2, #12
 800c20e:	d503      	bpl.n	800c218 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800c210:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c212:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c216:	d005      	beq.n	800c224 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800c218:	02d0      	lsls	r0, r2, #11
 800c21a:	d51e      	bpl.n	800c25a <HAL_RCCEx_PeriphCLKConfig+0x4be>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800c21c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c21e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c222:	d11a      	bne.n	800c25a <HAL_RCCEx_PeriphCLKConfig+0x4be>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800c224:	4932      	ldr	r1, [pc, #200]	; (800c2f0 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 800c226:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c22a:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800c22e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c232:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800c236:	4303      	orrs	r3, r0
 800c238:	6860      	ldr	r0, [r4, #4]
 800c23a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800c23e:	68e0      	ldr	r0, [r4, #12]
 800c240:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800c244:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c248:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 800c24c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c24e:	f020 001f 	bic.w	r0, r0, #31
 800c252:	3b01      	subs	r3, #1
 800c254:	4303      	orrs	r3, r0
 800c256:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c25a:	01d1      	lsls	r1, r2, #7
 800c25c:	d511      	bpl.n	800c282 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800c25e:	4924      	ldr	r1, [pc, #144]	; (800c2f0 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 800c260:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c264:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800c268:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800c26c:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800c270:	4303      	orrs	r3, r0
 800c272:	6860      	ldr	r0, [r4, #4]
 800c274:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800c278:	6920      	ldr	r0, [r4, #16]
 800c27a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c27e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c282:	0192      	lsls	r2, r2, #6
 800c284:	d50d      	bpl.n	800c2a2 <HAL_RCCEx_PeriphCLKConfig+0x506>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c286:	6923      	ldr	r3, [r4, #16]
 800c288:	6862      	ldr	r2, [r4, #4]
 800c28a:	041b      	lsls	r3, r3, #16
 800c28c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800c290:	68e2      	ldr	r2, [r4, #12]
 800c292:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800c296:	68a2      	ldr	r2, [r4, #8]
 800c298:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800c29c:	4a14      	ldr	r2, [pc, #80]	; (800c2f0 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 800c29e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800c2a2:	4e13      	ldr	r6, [pc, #76]	; (800c2f0 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 800c2a4:	6833      	ldr	r3, [r6, #0]
 800c2a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c2aa:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800c2ac:	f7fb fe12 	bl	8007ed4 <HAL_GetTick>
 800c2b0:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c2b2:	6833      	ldr	r3, [r6, #0]
 800c2b4:	011b      	lsls	r3, r3, #4
 800c2b6:	f53f aedd 	bmi.w	800c074 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800c2ba:	f7fb fe0b 	bl	8007ed4 <HAL_GetTick>
 800c2be:	1bc0      	subs	r0, r0, r7
 800c2c0:	2864      	cmp	r0, #100	; 0x64
 800c2c2:	d9f6      	bls.n	800c2b2 <HAL_RCCEx_PeriphCLKConfig+0x516>
 800c2c4:	e753      	b.n	800c16e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800c2c6:	f7fb fe05 	bl	8007ed4 <HAL_GetTick>
 800c2ca:	1bc0      	subs	r0, r0, r7
 800c2cc:	2864      	cmp	r0, #100	; 0x64
 800c2ce:	d984      	bls.n	800c1da <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800c2d0:	e74d      	b.n	800c16e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800c2d2:	f7fb fdff 	bl	8007ed4 <HAL_GetTick>
 800c2d6:	1b80      	subs	r0, r0, r6
 800c2d8:	2864      	cmp	r0, #100	; 0x64
 800c2da:	f67f aed5 	bls.w	800c088 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
 800c2de:	e746      	b.n	800c16e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800c2e0:	f7fb fdf8 	bl	8007ed4 <HAL_GetTick>
 800c2e4:	1b40      	subs	r0, r0, r5
 800c2e6:	2864      	cmp	r0, #100	; 0x64
 800c2e8:	f67f af32 	bls.w	800c150 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 800c2ec:	e73f      	b.n	800c16e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 800c2ee:	bf00      	nop
 800c2f0:	40023800 	.word	0x40023800

0800c2f4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800c2f4:	b538      	push	{r3, r4, r5, lr}
 800c2f6:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800c2f8:	4604      	mov	r4, r0
 800c2fa:	b1c8      	cbz	r0, 800c330 <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800c2fc:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800c300:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c304:	b91b      	cbnz	r3, 800c30e <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800c306:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800c30a:	f7f8 fe93 	bl	8005034 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c30e:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800c310:	1d21      	adds	r1, r4, #4
 800c312:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c314:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800c318:	f000 fcc1 	bl	800cc9e <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800c31c:	6862      	ldr	r2, [r4, #4]
 800c31e:	4629      	mov	r1, r5
 800c320:	6820      	ldr	r0, [r4, #0]
 800c322:	f000 fcf7 	bl	800cd14 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800c326:	2301      	movs	r3, #1

  return HAL_OK;
 800c328:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 800c32a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 800c32e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800c330:	2001      	movs	r0, #1
 800c332:	e7fc      	b.n	800c32e <HAL_SDRAM_Init+0x3a>

0800c334 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800c334:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800c336:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800c33a:	4605      	mov	r5, r0
 800c33c:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800c33e:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800c340:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 800c342:	d010      	beq.n	800c366 <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800c344:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 800c348:	2c01      	cmp	r4, #1
 800c34a:	d110      	bne.n	800c36e <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c34c:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800c34e:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c350:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800c354:	f000 fd14 	bl	800cd80 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800c358:	6833      	ldr	r3, [r6, #0]
 800c35a:	2b02      	cmp	r3, #2
 800c35c:	d104      	bne.n	800c368 <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800c35e:	2305      	movs	r3, #5
 800c360:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800c364:	2000      	movs	r0, #0
}
 800c366:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 800c368:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
 800c36c:	e7fa      	b.n	800c364 <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 800c36e:	2001      	movs	r0, #1
 800c370:	e7f9      	b.n	800c366 <HAL_SDRAM_SendCommand+0x32>

0800c372 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800c372:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800c374:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800c378:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800c37a:	2b02      	cmp	r3, #2
 800c37c:	b2d8      	uxtb	r0, r3
 800c37e:	d00d      	beq.n	800c39c <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800c380:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800c384:	2b01      	cmp	r3, #1
 800c386:	b2dd      	uxtb	r5, r3
 800c388:	d109      	bne.n	800c39e <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c38a:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800c38c:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c38e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800c392:	f000 fd07 	bl	800cda4 <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800c396:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 800c398:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 800c39c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800c39e:	2001      	movs	r0, #1
 800c3a0:	e7fc      	b.n	800c39c <HAL_SDRAM_ProgramRefreshRate+0x2a>
	...

0800c3a4 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c3a4:	6a03      	ldr	r3, [r0, #32]
 800c3a6:	f023 0301 	bic.w	r3, r3, #1
{
 800c3aa:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c3ac:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c3ae:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c3b0:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c3b2:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c3b4:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx |= OC_Config->OCMode;
 800c3b8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c3ba:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 800c3be:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800c3c2:	432c      	orrs	r4, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c3c4:	688d      	ldr	r5, [r1, #8]
 800c3c6:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c3c8:	4d0e      	ldr	r5, [pc, #56]	; (800c404 <TIM_OC1_SetConfig+0x60>)
 800c3ca:	42a8      	cmp	r0, r5
 800c3cc:	d002      	beq.n	800c3d4 <TIM_OC1_SetConfig+0x30>
 800c3ce:	4e0e      	ldr	r6, [pc, #56]	; (800c408 <TIM_OC1_SetConfig+0x64>)
 800c3d0:	42b0      	cmp	r0, r6
 800c3d2:	d111      	bne.n	800c3f8 <TIM_OC1_SetConfig+0x54>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c3d4:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c3d8:	68ce      	ldr	r6, [r1, #12]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c3da:	42a8      	cmp	r0, r5
    tmpccer |= OC_Config->OCNPolarity;
 800c3dc:	ea43 0306 	orr.w	r3, r3, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 800c3e0:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c3e4:	d002      	beq.n	800c3ec <TIM_OC1_SetConfig+0x48>
 800c3e6:	4d08      	ldr	r5, [pc, #32]	; (800c408 <TIM_OC1_SetConfig+0x64>)
 800c3e8:	42a8      	cmp	r0, r5
 800c3ea:	d105      	bne.n	800c3f8 <TIM_OC1_SetConfig+0x54>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c3ec:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c3f0:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800c3f4:	4335      	orrs	r5, r6
 800c3f6:	432a      	orrs	r2, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c3f8:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c3fa:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 800c3fc:	6184      	str	r4, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800c3fe:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c400:	6203      	str	r3, [r0, #32]
}
 800c402:	bd70      	pop	{r4, r5, r6, pc}
 800c404:	40010000 	.word	0x40010000
 800c408:	40010400 	.word	0x40010400

0800c40c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c40c:	6a03      	ldr	r3, [r0, #32]
 800c40e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
{
 800c412:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c414:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c416:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c418:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c41a:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c41c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx |= OC_Config->OCMode;
 800c420:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c422:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 800c426:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800c42a:	432c      	orrs	r4, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c42c:	688d      	ldr	r5, [r1, #8]
 800c42e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c432:	4d11      	ldr	r5, [pc, #68]	; (800c478 <TIM_OC3_SetConfig+0x6c>)
 800c434:	42a8      	cmp	r0, r5
 800c436:	d003      	beq.n	800c440 <TIM_OC3_SetConfig+0x34>
 800c438:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800c43c:	42a8      	cmp	r0, r5
 800c43e:	d114      	bne.n	800c46a <TIM_OC3_SetConfig+0x5e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c440:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800c442:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c446:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c44a:	4d0b      	ldr	r5, [pc, #44]	; (800c478 <TIM_OC3_SetConfig+0x6c>)
 800c44c:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 800c44e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c452:	d003      	beq.n	800c45c <TIM_OC3_SetConfig+0x50>
 800c454:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800c458:	42a8      	cmp	r0, r5
 800c45a:	d106      	bne.n	800c46a <TIM_OC3_SetConfig+0x5e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c45c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c460:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800c464:	4335      	orrs	r5, r6
 800c466:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c46a:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c46c:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 800c46e:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800c470:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c472:	6203      	str	r3, [r0, #32]
}
 800c474:	bd70      	pop	{r4, r5, r6, pc}
 800c476:	bf00      	nop
 800c478:	40010000 	.word	0x40010000

0800c47c <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c47c:	6a03      	ldr	r3, [r0, #32]
 800c47e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 800c482:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c484:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c486:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c488:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c48a:	69c3      	ldr	r3, [r0, #28]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c48c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c490:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c492:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c496:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c49a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c49e:	688d      	ldr	r5, [r1, #8]
 800c4a0:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c4a4:	4d08      	ldr	r5, [pc, #32]	; (800c4c8 <TIM_OC4_SetConfig+0x4c>)
 800c4a6:	42a8      	cmp	r0, r5
 800c4a8:	d003      	beq.n	800c4b2 <TIM_OC4_SetConfig+0x36>
 800c4aa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800c4ae:	42a8      	cmp	r0, r5
 800c4b0:	d104      	bne.n	800c4bc <TIM_OC4_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c4b2:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c4b6:	694d      	ldr	r5, [r1, #20]
 800c4b8:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c4bc:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c4be:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c4c0:	684b      	ldr	r3, [r1, #4]
 800c4c2:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c4c4:	6202      	str	r2, [r0, #32]
}
 800c4c6:	bd30      	pop	{r4, r5, pc}
 800c4c8:	40010000 	.word	0x40010000

0800c4cc <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c4cc:	6a03      	ldr	r3, [r0, #32]
 800c4ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
{
 800c4d2:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c4d4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c4d6:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c4d8:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c4da:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c4dc:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccmrx |= OC_Config->OCMode;
 800c4e0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c4e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c4e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 800c4ea:	432b      	orrs	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c4ec:	688d      	ldr	r5, [r1, #8]
 800c4ee:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c4f2:	4d09      	ldr	r5, [pc, #36]	; (800c518 <TIM_OC5_SetConfig+0x4c>)
 800c4f4:	42a8      	cmp	r0, r5
 800c4f6:	d003      	beq.n	800c500 <TIM_OC5_SetConfig+0x34>
 800c4f8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800c4fc:	42a8      	cmp	r0, r5
 800c4fe:	d104      	bne.n	800c50a <TIM_OC5_SetConfig+0x3e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c500:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c504:	694d      	ldr	r5, [r1, #20]
 800c506:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c50a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c50c:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c50e:	684b      	ldr	r3, [r1, #4]
 800c510:	6583      	str	r3, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c512:	6202      	str	r2, [r0, #32]
}
 800c514:	bd30      	pop	{r4, r5, pc}
 800c516:	bf00      	nop
 800c518:	40010000 	.word	0x40010000

0800c51c <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c51c:	6a03      	ldr	r3, [r0, #32]
 800c51e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
{
 800c522:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c524:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c526:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c528:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c52a:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c52c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c530:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c532:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c536:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c53a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c53e:	688d      	ldr	r5, [r1, #8]
 800c540:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c544:	4d08      	ldr	r5, [pc, #32]	; (800c568 <TIM_OC6_SetConfig+0x4c>)
 800c546:	42a8      	cmp	r0, r5
 800c548:	d003      	beq.n	800c552 <TIM_OC6_SetConfig+0x36>
 800c54a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800c54e:	42a8      	cmp	r0, r5
 800c550:	d104      	bne.n	800c55c <TIM_OC6_SetConfig+0x40>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c552:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c556:	694d      	ldr	r5, [r1, #20]
 800c558:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c55c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c55e:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c560:	684b      	ldr	r3, [r1, #4]
 800c562:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c564:	6202      	str	r2, [r0, #32]
}
 800c566:	bd30      	pop	{r4, r5, pc}
 800c568:	40010000 	.word	0x40010000

0800c56c <HAL_TIM_Base_MspInit>:
}
 800c56c:	4770      	bx	lr
	...

0800c570 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800c570:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800c574:	2b01      	cmp	r3, #1
 800c576:	d133      	bne.n	800c5e0 <HAL_TIM_Base_Start_IT+0x70>
  htim->State = HAL_TIM_STATE_BUSY;
 800c578:	2302      	movs	r3, #2
 800c57a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c57e:	6803      	ldr	r3, [r0, #0]
 800c580:	68da      	ldr	r2, [r3, #12]
 800c582:	f042 0201 	orr.w	r2, r2, #1
 800c586:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c588:	4a16      	ldr	r2, [pc, #88]	; (800c5e4 <HAL_TIM_Base_Start_IT+0x74>)
 800c58a:	4293      	cmp	r3, r2
 800c58c:	d01a      	beq.n	800c5c4 <HAL_TIM_Base_Start_IT+0x54>
 800c58e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c592:	d017      	beq.n	800c5c4 <HAL_TIM_Base_Start_IT+0x54>
 800c594:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800c598:	4293      	cmp	r3, r2
 800c59a:	d013      	beq.n	800c5c4 <HAL_TIM_Base_Start_IT+0x54>
 800c59c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c5a0:	4293      	cmp	r3, r2
 800c5a2:	d00f      	beq.n	800c5c4 <HAL_TIM_Base_Start_IT+0x54>
 800c5a4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c5a8:	4293      	cmp	r3, r2
 800c5aa:	d00b      	beq.n	800c5c4 <HAL_TIM_Base_Start_IT+0x54>
 800c5ac:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800c5b0:	4293      	cmp	r3, r2
 800c5b2:	d007      	beq.n	800c5c4 <HAL_TIM_Base_Start_IT+0x54>
 800c5b4:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800c5b8:	4293      	cmp	r3, r2
 800c5ba:	d003      	beq.n	800c5c4 <HAL_TIM_Base_Start_IT+0x54>
 800c5bc:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800c5c0:	4293      	cmp	r3, r2
 800c5c2:	d107      	bne.n	800c5d4 <HAL_TIM_Base_Start_IT+0x64>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c5c4:	6899      	ldr	r1, [r3, #8]
 800c5c6:	4a08      	ldr	r2, [pc, #32]	; (800c5e8 <HAL_TIM_Base_Start_IT+0x78>)
 800c5c8:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c5ca:	2a06      	cmp	r2, #6
 800c5cc:	d006      	beq.n	800c5dc <HAL_TIM_Base_Start_IT+0x6c>
 800c5ce:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800c5d2:	d003      	beq.n	800c5dc <HAL_TIM_Base_Start_IT+0x6c>
    __HAL_TIM_ENABLE(htim);
 800c5d4:	681a      	ldr	r2, [r3, #0]
 800c5d6:	f042 0201 	orr.w	r2, r2, #1
 800c5da:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800c5dc:	2000      	movs	r0, #0
}
 800c5de:	4770      	bx	lr
    return HAL_ERROR;
 800c5e0:	2001      	movs	r0, #1
 800c5e2:	4770      	bx	lr
 800c5e4:	40010000 	.word	0x40010000
 800c5e8:	00010007 	.word	0x00010007

0800c5ec <HAL_TIM_OC_DelayElapsedCallback>:
 800c5ec:	4770      	bx	lr

0800c5ee <HAL_TIM_IC_CaptureCallback>:
 800c5ee:	4770      	bx	lr

0800c5f0 <HAL_TIM_PWM_PulseFinishedCallback>:
 800c5f0:	4770      	bx	lr

0800c5f2 <HAL_TIM_TriggerCallback>:
 800c5f2:	4770      	bx	lr

0800c5f4 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c5f4:	6803      	ldr	r3, [r0, #0]
 800c5f6:	691a      	ldr	r2, [r3, #16]
 800c5f8:	0791      	lsls	r1, r2, #30
{
 800c5fa:	b510      	push	{r4, lr}
 800c5fc:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c5fe:	d50f      	bpl.n	800c620 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c600:	68da      	ldr	r2, [r3, #12]
 800c602:	0792      	lsls	r2, r2, #30
 800c604:	d50c      	bpl.n	800c620 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c606:	f06f 0202 	mvn.w	r2, #2
 800c60a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c60c:	2201      	movs	r2, #1
 800c60e:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c610:	699b      	ldr	r3, [r3, #24]
 800c612:	0799      	lsls	r1, r3, #30
 800c614:	f000 8085 	beq.w	800c722 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 800c618:	f7ff ffe9 	bl	800c5ee <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c61c:	2300      	movs	r3, #0
 800c61e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c620:	6823      	ldr	r3, [r4, #0]
 800c622:	691a      	ldr	r2, [r3, #16]
 800c624:	0752      	lsls	r2, r2, #29
 800c626:	d510      	bpl.n	800c64a <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c628:	68da      	ldr	r2, [r3, #12]
 800c62a:	0750      	lsls	r0, r2, #29
 800c62c:	d50d      	bpl.n	800c64a <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c62e:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800c632:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c634:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c636:	2202      	movs	r2, #2
 800c638:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c63a:	699b      	ldr	r3, [r3, #24]
 800c63c:	f413 7f40 	tst.w	r3, #768	; 0x300
 800c640:	d075      	beq.n	800c72e <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 800c642:	f7ff ffd4 	bl	800c5ee <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c646:	2300      	movs	r3, #0
 800c648:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c64a:	6823      	ldr	r3, [r4, #0]
 800c64c:	691a      	ldr	r2, [r3, #16]
 800c64e:	0711      	lsls	r1, r2, #28
 800c650:	d50f      	bpl.n	800c672 <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c652:	68da      	ldr	r2, [r3, #12]
 800c654:	0712      	lsls	r2, r2, #28
 800c656:	d50c      	bpl.n	800c672 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c658:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800c65c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c65e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c660:	2204      	movs	r2, #4
 800c662:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c664:	69db      	ldr	r3, [r3, #28]
 800c666:	079b      	lsls	r3, r3, #30
 800c668:	d067      	beq.n	800c73a <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800c66a:	f7ff ffc0 	bl	800c5ee <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c66e:	2300      	movs	r3, #0
 800c670:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c672:	6823      	ldr	r3, [r4, #0]
 800c674:	691a      	ldr	r2, [r3, #16]
 800c676:	06d0      	lsls	r0, r2, #27
 800c678:	d510      	bpl.n	800c69c <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c67a:	68da      	ldr	r2, [r3, #12]
 800c67c:	06d1      	lsls	r1, r2, #27
 800c67e:	d50d      	bpl.n	800c69c <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c680:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 800c684:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c686:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c688:	2208      	movs	r2, #8
 800c68a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c68c:	69db      	ldr	r3, [r3, #28]
 800c68e:	f413 7f40 	tst.w	r3, #768	; 0x300
 800c692:	d058      	beq.n	800c746 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 800c694:	f7ff ffab 	bl	800c5ee <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c698:	2300      	movs	r3, #0
 800c69a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c69c:	6823      	ldr	r3, [r4, #0]
 800c69e:	691a      	ldr	r2, [r3, #16]
 800c6a0:	07d2      	lsls	r2, r2, #31
 800c6a2:	d508      	bpl.n	800c6b6 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c6a4:	68da      	ldr	r2, [r3, #12]
 800c6a6:	07d0      	lsls	r0, r2, #31
 800c6a8:	d505      	bpl.n	800c6b6 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c6aa:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800c6ae:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c6b0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800c6b2:	f7f8 f9af 	bl	8004a14 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c6b6:	6823      	ldr	r3, [r4, #0]
 800c6b8:	691a      	ldr	r2, [r3, #16]
 800c6ba:	0611      	lsls	r1, r2, #24
 800c6bc:	d508      	bpl.n	800c6d0 <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c6be:	68da      	ldr	r2, [r3, #12]
 800c6c0:	0612      	lsls	r2, r2, #24
 800c6c2:	d505      	bpl.n	800c6d0 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c6c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800c6c8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c6ca:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800c6cc:	f000 fae5 	bl	800cc9a <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c6d0:	6823      	ldr	r3, [r4, #0]
 800c6d2:	691a      	ldr	r2, [r3, #16]
 800c6d4:	05d0      	lsls	r0, r2, #23
 800c6d6:	d508      	bpl.n	800c6ea <HAL_TIM_IRQHandler+0xf6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c6d8:	68da      	ldr	r2, [r3, #12]
 800c6da:	0611      	lsls	r1, r2, #24
 800c6dc:	d505      	bpl.n	800c6ea <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c6de:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 800c6e2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c6e4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800c6e6:	f000 fad9 	bl	800cc9c <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c6ea:	6823      	ldr	r3, [r4, #0]
 800c6ec:	691a      	ldr	r2, [r3, #16]
 800c6ee:	0652      	lsls	r2, r2, #25
 800c6f0:	d508      	bpl.n	800c704 <HAL_TIM_IRQHandler+0x110>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c6f2:	68da      	ldr	r2, [r3, #12]
 800c6f4:	0650      	lsls	r0, r2, #25
 800c6f6:	d505      	bpl.n	800c704 <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c6f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800c6fc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c6fe:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800c700:	f7ff ff77 	bl	800c5f2 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c704:	6823      	ldr	r3, [r4, #0]
 800c706:	691a      	ldr	r2, [r3, #16]
 800c708:	0691      	lsls	r1, r2, #26
 800c70a:	d522      	bpl.n	800c752 <HAL_TIM_IRQHandler+0x15e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c70c:	68da      	ldr	r2, [r3, #12]
 800c70e:	0692      	lsls	r2, r2, #26
 800c710:	d51f      	bpl.n	800c752 <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c712:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800c716:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c718:	611a      	str	r2, [r3, #16]
}
 800c71a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800c71e:	f000 babb 	b.w	800cc98 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c722:	f7ff ff63 	bl	800c5ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c726:	4620      	mov	r0, r4
 800c728:	f7ff ff62 	bl	800c5f0 <HAL_TIM_PWM_PulseFinishedCallback>
 800c72c:	e776      	b.n	800c61c <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c72e:	f7ff ff5d 	bl	800c5ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c732:	4620      	mov	r0, r4
 800c734:	f7ff ff5c 	bl	800c5f0 <HAL_TIM_PWM_PulseFinishedCallback>
 800c738:	e785      	b.n	800c646 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c73a:	f7ff ff57 	bl	800c5ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c73e:	4620      	mov	r0, r4
 800c740:	f7ff ff56 	bl	800c5f0 <HAL_TIM_PWM_PulseFinishedCallback>
 800c744:	e793      	b.n	800c66e <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c746:	f7ff ff51 	bl	800c5ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c74a:	4620      	mov	r0, r4
 800c74c:	f7ff ff50 	bl	800c5f0 <HAL_TIM_PWM_PulseFinishedCallback>
 800c750:	e7a2      	b.n	800c698 <HAL_TIM_IRQHandler+0xa4>
}
 800c752:	bd10      	pop	{r4, pc}

0800c754 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c754:	4a30      	ldr	r2, [pc, #192]	; (800c818 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800c756:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c758:	4290      	cmp	r0, r2
 800c75a:	d012      	beq.n	800c782 <TIM_Base_SetConfig+0x2e>
 800c75c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800c760:	d00f      	beq.n	800c782 <TIM_Base_SetConfig+0x2e>
 800c762:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800c766:	4290      	cmp	r0, r2
 800c768:	d00b      	beq.n	800c782 <TIM_Base_SetConfig+0x2e>
 800c76a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c76e:	4290      	cmp	r0, r2
 800c770:	d007      	beq.n	800c782 <TIM_Base_SetConfig+0x2e>
 800c772:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c776:	4290      	cmp	r0, r2
 800c778:	d003      	beq.n	800c782 <TIM_Base_SetConfig+0x2e>
 800c77a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800c77e:	4290      	cmp	r0, r2
 800c780:	d119      	bne.n	800c7b6 <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 800c782:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c784:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800c788:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c78a:	4a23      	ldr	r2, [pc, #140]	; (800c818 <TIM_Base_SetConfig+0xc4>)
 800c78c:	4290      	cmp	r0, r2
 800c78e:	d029      	beq.n	800c7e4 <TIM_Base_SetConfig+0x90>
 800c790:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800c794:	d026      	beq.n	800c7e4 <TIM_Base_SetConfig+0x90>
 800c796:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800c79a:	4290      	cmp	r0, r2
 800c79c:	d022      	beq.n	800c7e4 <TIM_Base_SetConfig+0x90>
 800c79e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c7a2:	4290      	cmp	r0, r2
 800c7a4:	d01e      	beq.n	800c7e4 <TIM_Base_SetConfig+0x90>
 800c7a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c7aa:	4290      	cmp	r0, r2
 800c7ac:	d01a      	beq.n	800c7e4 <TIM_Base_SetConfig+0x90>
 800c7ae:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800c7b2:	4290      	cmp	r0, r2
 800c7b4:	d016      	beq.n	800c7e4 <TIM_Base_SetConfig+0x90>
 800c7b6:	4a19      	ldr	r2, [pc, #100]	; (800c81c <TIM_Base_SetConfig+0xc8>)
 800c7b8:	4290      	cmp	r0, r2
 800c7ba:	d013      	beq.n	800c7e4 <TIM_Base_SetConfig+0x90>
 800c7bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c7c0:	4290      	cmp	r0, r2
 800c7c2:	d00f      	beq.n	800c7e4 <TIM_Base_SetConfig+0x90>
 800c7c4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c7c8:	4290      	cmp	r0, r2
 800c7ca:	d00b      	beq.n	800c7e4 <TIM_Base_SetConfig+0x90>
 800c7cc:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800c7d0:	4290      	cmp	r0, r2
 800c7d2:	d007      	beq.n	800c7e4 <TIM_Base_SetConfig+0x90>
 800c7d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c7d8:	4290      	cmp	r0, r2
 800c7da:	d003      	beq.n	800c7e4 <TIM_Base_SetConfig+0x90>
 800c7dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c7e0:	4290      	cmp	r0, r2
 800c7e2:	d103      	bne.n	800c7ec <TIM_Base_SetConfig+0x98>
    tmpcr1 &= ~TIM_CR1_CKD;
 800c7e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c7e8:	68ca      	ldr	r2, [r1, #12]
 800c7ea:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c7ec:	694a      	ldr	r2, [r1, #20]
 800c7ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c7f2:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800c7f4:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c7f6:	688b      	ldr	r3, [r1, #8]
 800c7f8:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800c7fa:	680b      	ldr	r3, [r1, #0]
 800c7fc:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c7fe:	4b06      	ldr	r3, [pc, #24]	; (800c818 <TIM_Base_SetConfig+0xc4>)
 800c800:	4298      	cmp	r0, r3
 800c802:	d003      	beq.n	800c80c <TIM_Base_SetConfig+0xb8>
 800c804:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c808:	4298      	cmp	r0, r3
 800c80a:	d101      	bne.n	800c810 <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 800c80c:	690b      	ldr	r3, [r1, #16]
 800c80e:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800c810:	2301      	movs	r3, #1
 800c812:	6143      	str	r3, [r0, #20]
}
 800c814:	4770      	bx	lr
 800c816:	bf00      	nop
 800c818:	40010000 	.word	0x40010000
 800c81c:	40014000 	.word	0x40014000

0800c820 <HAL_TIM_Base_Init>:
{
 800c820:	b510      	push	{r4, lr}
  if (htim == NULL)
 800c822:	4604      	mov	r4, r0
 800c824:	b350      	cbz	r0, 800c87c <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800c826:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800c82a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c82e:	b91b      	cbnz	r3, 800c838 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800c830:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800c834:	f7ff fe9a 	bl	800c56c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800c838:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c83a:	6820      	ldr	r0, [r4, #0]
 800c83c:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800c83e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c842:	f7ff ff87 	bl	800c754 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c846:	2301      	movs	r3, #1
  return HAL_OK;
 800c848:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c84a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c84e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800c852:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800c856:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800c85a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800c85e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c862:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c866:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800c86a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c86e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800c872:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800c876:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800c87a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800c87c:	2001      	movs	r0, #1
 800c87e:	e7fc      	b.n	800c87a <HAL_TIM_Base_Init+0x5a>

0800c880 <HAL_TIM_PWM_Init>:
{
 800c880:	b510      	push	{r4, lr}
  if (htim == NULL)
 800c882:	4604      	mov	r4, r0
 800c884:	b350      	cbz	r0, 800c8dc <HAL_TIM_PWM_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800c886:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800c88a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c88e:	b91b      	cbnz	r3, 800c898 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800c890:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800c894:	f7f8 fb92 	bl	8004fbc <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800c898:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c89a:	6820      	ldr	r0, [r4, #0]
 800c89c:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800c89e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c8a2:	f7ff ff57 	bl	800c754 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c8a6:	2301      	movs	r3, #1
  return HAL_OK;
 800c8a8:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c8aa:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c8ae:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800c8b2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800c8b6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800c8ba:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800c8be:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c8c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c8c6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800c8ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c8ce:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800c8d2:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800c8d6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800c8da:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800c8dc:	2001      	movs	r0, #1
 800c8de:	e7fc      	b.n	800c8da <HAL_TIM_PWM_Init+0x5a>

0800c8e0 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c8e0:	6a03      	ldr	r3, [r0, #32]
 800c8e2:	f023 0310 	bic.w	r3, r3, #16
{
 800c8e6:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c8e8:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800c8ea:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800c8ec:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800c8ee:	6984      	ldr	r4, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 800c8f0:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c8f4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c8f6:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 800c8fa:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c8fe:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c902:	688d      	ldr	r5, [r1, #8]
 800c904:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c908:	4d10      	ldr	r5, [pc, #64]	; (800c94c <TIM_OC2_SetConfig+0x6c>)
 800c90a:	42a8      	cmp	r0, r5
 800c90c:	d003      	beq.n	800c916 <TIM_OC2_SetConfig+0x36>
 800c90e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800c912:	42a8      	cmp	r0, r5
 800c914:	d114      	bne.n	800c940 <TIM_OC2_SetConfig+0x60>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c916:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800c918:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c91c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c920:	4d0a      	ldr	r5, [pc, #40]	; (800c94c <TIM_OC2_SetConfig+0x6c>)
 800c922:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 800c924:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c928:	d003      	beq.n	800c932 <TIM_OC2_SetConfig+0x52>
 800c92a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800c92e:	42a8      	cmp	r0, r5
 800c930:	d106      	bne.n	800c940 <TIM_OC2_SetConfig+0x60>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c932:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c936:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800c93a:	4335      	orrs	r5, r6
 800c93c:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 800c940:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 800c942:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 800c944:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800c946:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800c948:	6203      	str	r3, [r0, #32]
}
 800c94a:	bd70      	pop	{r4, r5, r6, pc}
 800c94c:	40010000 	.word	0x40010000

0800c950 <HAL_TIM_PWM_ConfigChannel>:
{
 800c950:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800c952:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800c956:	4605      	mov	r5, r0
  __HAL_LOCK(htim);
 800c958:	2b01      	cmp	r3, #1
 800c95a:	d079      	beq.n	800ca50 <HAL_TIM_PWM_ConfigChannel+0x100>
 800c95c:	2001      	movs	r0, #1
  switch (Channel)
 800c95e:	2a0c      	cmp	r2, #12
  __HAL_LOCK(htim);
 800c960:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
  switch (Channel)
 800c964:	d052      	beq.n	800ca0c <HAL_TIM_PWM_ConfigChannel+0xbc>
 800c966:	d808      	bhi.n	800c97a <HAL_TIM_PWM_ConfigChannel+0x2a>
 800c968:	2a04      	cmp	r2, #4
 800c96a:	d02d      	beq.n	800c9c8 <HAL_TIM_PWM_ConfigChannel+0x78>
 800c96c:	2a08      	cmp	r2, #8
 800c96e:	d03c      	beq.n	800c9ea <HAL_TIM_PWM_ConfigChannel+0x9a>
 800c970:	b1c2      	cbz	r2, 800c9a4 <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_UNLOCK(htim);
 800c972:	2300      	movs	r3, #0
 800c974:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 800c978:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 800c97a:	2a10      	cmp	r2, #16
 800c97c:	d057      	beq.n	800ca2e <HAL_TIM_PWM_ConfigChannel+0xde>
 800c97e:	2a14      	cmp	r2, #20
 800c980:	d1f7      	bne.n	800c972 <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c982:	6828      	ldr	r0, [r5, #0]
 800c984:	f7ff fdca 	bl	800c51c <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c988:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c98a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c98c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c98e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c992:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c994:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c996:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c99a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c99c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c99e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800c9a2:	e053      	b.n	800ca4c <HAL_TIM_PWM_ConfigChannel+0xfc>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c9a4:	6828      	ldr	r0, [r5, #0]
 800c9a6:	f7ff fcfd 	bl	800c3a4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c9aa:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c9ac:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c9ae:	699a      	ldr	r2, [r3, #24]
 800c9b0:	f042 0208 	orr.w	r2, r2, #8
 800c9b4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c9b6:	699a      	ldr	r2, [r3, #24]
 800c9b8:	f022 0204 	bic.w	r2, r2, #4
 800c9bc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c9be:	699a      	ldr	r2, [r3, #24]
 800c9c0:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c9c2:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800c9c4:	2000      	movs	r0, #0
      break;
 800c9c6:	e7d4      	b.n	800c972 <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c9c8:	6828      	ldr	r0, [r5, #0]
 800c9ca:	f7ff ff89 	bl	800c8e0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c9ce:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c9d0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c9d2:	699a      	ldr	r2, [r3, #24]
 800c9d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c9d8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c9da:	699a      	ldr	r2, [r3, #24]
 800c9dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c9e0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c9e2:	699a      	ldr	r2, [r3, #24]
 800c9e4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800c9e8:	e7eb      	b.n	800c9c2 <HAL_TIM_PWM_ConfigChannel+0x72>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c9ea:	6828      	ldr	r0, [r5, #0]
 800c9ec:	f7ff fd0e 	bl	800c40c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c9f0:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c9f2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c9f4:	69da      	ldr	r2, [r3, #28]
 800c9f6:	f042 0208 	orr.w	r2, r2, #8
 800c9fa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c9fc:	69da      	ldr	r2, [r3, #28]
 800c9fe:	f022 0204 	bic.w	r2, r2, #4
 800ca02:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ca04:	69da      	ldr	r2, [r3, #28]
 800ca06:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ca08:	61da      	str	r2, [r3, #28]
      break;
 800ca0a:	e7db      	b.n	800c9c4 <HAL_TIM_PWM_ConfigChannel+0x74>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ca0c:	6828      	ldr	r0, [r5, #0]
 800ca0e:	f7ff fd35 	bl	800c47c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ca12:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ca14:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ca16:	69da      	ldr	r2, [r3, #28]
 800ca18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ca1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ca1e:	69da      	ldr	r2, [r3, #28]
 800ca20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ca24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ca26:	69da      	ldr	r2, [r3, #28]
 800ca28:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800ca2c:	e7ec      	b.n	800ca08 <HAL_TIM_PWM_ConfigChannel+0xb8>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ca2e:	6828      	ldr	r0, [r5, #0]
 800ca30:	f7ff fd4c 	bl	800c4cc <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ca34:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ca36:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ca38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ca3a:	f042 0208 	orr.w	r2, r2, #8
 800ca3e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ca40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ca42:	f022 0204 	bic.w	r2, r2, #4
 800ca46:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ca48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ca4a:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ca4c:	655a      	str	r2, [r3, #84]	; 0x54
 800ca4e:	e7b9      	b.n	800c9c4 <HAL_TIM_PWM_ConfigChannel+0x74>
  __HAL_LOCK(htim);
 800ca50:	2002      	movs	r0, #2
 800ca52:	e791      	b.n	800c978 <HAL_TIM_PWM_ConfigChannel+0x28>

0800ca54 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ca54:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ca58:	6a03      	ldr	r3, [r0, #32]
{
 800ca5a:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ca5c:	2401      	movs	r4, #1

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ca5e:	408a      	lsls	r2, r1
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ca60:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 800ca62:	ea23 0304 	bic.w	r3, r3, r4
 800ca66:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ca68:	6a03      	ldr	r3, [r0, #32]
 800ca6a:	431a      	orrs	r2, r3
 800ca6c:	6202      	str	r2, [r0, #32]
}
 800ca6e:	bd10      	pop	{r4, pc}

0800ca70 <HAL_TIM_OC_Start>:
{
 800ca70:	b510      	push	{r4, lr}
 800ca72:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ca74:	b929      	cbnz	r1, 800ca82 <HAL_TIM_OC_Start+0x12>
 800ca76:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800ca7a:	2b01      	cmp	r3, #1
 800ca7c:	d02f      	beq.n	800cade <HAL_TIM_OC_Start+0x6e>
    return HAL_ERROR;
 800ca7e:	2001      	movs	r0, #1
 800ca80:	e044      	b.n	800cb0c <HAL_TIM_OC_Start+0x9c>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ca82:	2904      	cmp	r1, #4
 800ca84:	d107      	bne.n	800ca96 <HAL_TIM_OC_Start+0x26>
 800ca86:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 800ca8a:	2b01      	cmp	r3, #1
 800ca8c:	d1f7      	bne.n	800ca7e <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ca8e:	2302      	movs	r3, #2
 800ca90:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 800ca94:	e026      	b.n	800cae4 <HAL_TIM_OC_Start+0x74>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ca96:	2908      	cmp	r1, #8
 800ca98:	d107      	bne.n	800caaa <HAL_TIM_OC_Start+0x3a>
 800ca9a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800ca9e:	2b01      	cmp	r3, #1
 800caa0:	d1ed      	bne.n	800ca7e <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800caa2:	2302      	movs	r3, #2
 800caa4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800caa8:	e01c      	b.n	800cae4 <HAL_TIM_OC_Start+0x74>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800caaa:	290c      	cmp	r1, #12
 800caac:	d10f      	bne.n	800cace <HAL_TIM_OC_Start+0x5e>
 800caae:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800cab2:	3b01      	subs	r3, #1
 800cab4:	bf18      	it	ne
 800cab6:	2301      	movne	r3, #1
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d1e0      	bne.n	800ca7e <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cabc:	2908      	cmp	r1, #8
 800cabe:	d0f0      	beq.n	800caa2 <HAL_TIM_OC_Start+0x32>
 800cac0:	290c      	cmp	r1, #12
 800cac2:	f04f 0302 	mov.w	r3, #2
 800cac6:	d122      	bne.n	800cb0e <HAL_TIM_OC_Start+0x9e>
 800cac8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800cacc:	e00a      	b.n	800cae4 <HAL_TIM_OC_Start+0x74>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800cace:	2910      	cmp	r1, #16
 800cad0:	d102      	bne.n	800cad8 <HAL_TIM_OC_Start+0x68>
 800cad2:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800cad6:	e7ec      	b.n	800cab2 <HAL_TIM_OC_Start+0x42>
 800cad8:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 800cadc:	e7e9      	b.n	800cab2 <HAL_TIM_OC_Start+0x42>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cade:	2302      	movs	r3, #2
 800cae0:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800cae4:	2201      	movs	r2, #1
 800cae6:	6820      	ldr	r0, [r4, #0]
 800cae8:	f7ff ffb4 	bl	800ca54 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800caec:	6823      	ldr	r3, [r4, #0]
 800caee:	491f      	ldr	r1, [pc, #124]	; (800cb6c <HAL_TIM_OC_Start+0xfc>)
 800caf0:	428b      	cmp	r3, r1
 800caf2:	d014      	beq.n	800cb1e <HAL_TIM_OC_Start+0xae>
 800caf4:	4a1e      	ldr	r2, [pc, #120]	; (800cb70 <HAL_TIM_OC_Start+0x100>)
 800caf6:	4293      	cmp	r3, r2
 800caf8:	d011      	beq.n	800cb1e <HAL_TIM_OC_Start+0xae>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cafa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cafe:	d115      	bne.n	800cb2c <HAL_TIM_OC_Start+0xbc>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cb00:	6899      	ldr	r1, [r3, #8]
 800cb02:	4a1c      	ldr	r2, [pc, #112]	; (800cb74 <HAL_TIM_OC_Start+0x104>)
 800cb04:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cb06:	2a06      	cmp	r2, #6
 800cb08:	d12c      	bne.n	800cb64 <HAL_TIM_OC_Start+0xf4>
  return HAL_OK;
 800cb0a:	2000      	movs	r0, #0
}
 800cb0c:	bd10      	pop	{r4, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cb0e:	2910      	cmp	r1, #16
 800cb10:	d102      	bne.n	800cb18 <HAL_TIM_OC_Start+0xa8>
 800cb12:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cb16:	e7e5      	b.n	800cae4 <HAL_TIM_OC_Start+0x74>
 800cb18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb1c:	e7e2      	b.n	800cae4 <HAL_TIM_OC_Start+0x74>
    __HAL_TIM_MOE_ENABLE(htim);
 800cb1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cb20:	428b      	cmp	r3, r1
    __HAL_TIM_MOE_ENABLE(htim);
 800cb22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cb26:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cb28:	d0ea      	beq.n	800cb00 <HAL_TIM_OC_Start+0x90>
 800cb2a:	e7e6      	b.n	800cafa <HAL_TIM_OC_Start+0x8a>
 800cb2c:	4a12      	ldr	r2, [pc, #72]	; (800cb78 <HAL_TIM_OC_Start+0x108>)
 800cb2e:	4293      	cmp	r3, r2
 800cb30:	d0e6      	beq.n	800cb00 <HAL_TIM_OC_Start+0x90>
 800cb32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cb36:	4293      	cmp	r3, r2
 800cb38:	d0e2      	beq.n	800cb00 <HAL_TIM_OC_Start+0x90>
 800cb3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cb3e:	4293      	cmp	r3, r2
 800cb40:	d0de      	beq.n	800cb00 <HAL_TIM_OC_Start+0x90>
 800cb42:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800cb46:	4293      	cmp	r3, r2
 800cb48:	d0da      	beq.n	800cb00 <HAL_TIM_OC_Start+0x90>
 800cb4a:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800cb4e:	4293      	cmp	r3, r2
 800cb50:	d0d6      	beq.n	800cb00 <HAL_TIM_OC_Start+0x90>
 800cb52:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800cb56:	4293      	cmp	r3, r2
 800cb58:	d0d2      	beq.n	800cb00 <HAL_TIM_OC_Start+0x90>
    __HAL_TIM_ENABLE(htim);
 800cb5a:	681a      	ldr	r2, [r3, #0]
 800cb5c:	f042 0201 	orr.w	r2, r2, #1
 800cb60:	601a      	str	r2, [r3, #0]
 800cb62:	e7d2      	b.n	800cb0a <HAL_TIM_OC_Start+0x9a>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cb64:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800cb68:	d1f7      	bne.n	800cb5a <HAL_TIM_OC_Start+0xea>
 800cb6a:	e7ce      	b.n	800cb0a <HAL_TIM_OC_Start+0x9a>
 800cb6c:	40010000 	.word	0x40010000
 800cb70:	40010400 	.word	0x40010400
 800cb74:	00010007 	.word	0x00010007
 800cb78:	40000400 	.word	0x40000400

0800cb7c <HAL_TIM_PWM_Start>:
 800cb7c:	f7ff bf78 	b.w	800ca70 <HAL_TIM_OC_Start>

0800cb80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cb80:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cb82:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800cb86:	2b01      	cmp	r3, #1
 800cb88:	f04f 0302 	mov.w	r3, #2
 800cb8c:	d03d      	beq.n	800cc0a <HAL_TIMEx_MasterConfigSynchronization+0x8a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cb8e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cb92:	4d1f      	ldr	r5, [pc, #124]	; (800cc10 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
  tmpcr2 = htim->Instance->CR2;
 800cb94:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cb96:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 800cb98:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800cb9a:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cb9c:	d003      	beq.n	800cba6 <HAL_TIMEx_MasterConfigSynchronization+0x26>
 800cb9e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800cba2:	42ab      	cmp	r3, r5
 800cba4:	d103      	bne.n	800cbae <HAL_TIMEx_MasterConfigSynchronization+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cba6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cbaa:	684d      	ldr	r5, [r1, #4]
 800cbac:	432a      	orrs	r2, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cbae:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800cbb0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cbb4:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cbb6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cbb8:	4a15      	ldr	r2, [pc, #84]	; (800cc10 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 800cbba:	4293      	cmp	r3, r2
 800cbbc:	d01a      	beq.n	800cbf4 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 800cbbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cbc2:	d017      	beq.n	800cbf4 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 800cbc4:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800cbc8:	4293      	cmp	r3, r2
 800cbca:	d013      	beq.n	800cbf4 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 800cbcc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cbd0:	4293      	cmp	r3, r2
 800cbd2:	d00f      	beq.n	800cbf4 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 800cbd4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cbd8:	4293      	cmp	r3, r2
 800cbda:	d00b      	beq.n	800cbf4 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 800cbdc:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800cbe0:	4293      	cmp	r3, r2
 800cbe2:	d007      	beq.n	800cbf4 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 800cbe4:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800cbe8:	4293      	cmp	r3, r2
 800cbea:	d003      	beq.n	800cbf4 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 800cbec:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800cbf0:	4293      	cmp	r3, r2
 800cbf2:	d104      	bne.n	800cbfe <HAL_TIMEx_MasterConfigSynchronization+0x7e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cbf4:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cbf6:	f024 0280 	bic.w	r2, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cbfa:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cbfc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cbfe:	2301      	movs	r3, #1
 800cc00:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cc04:	2300      	movs	r3, #0
 800cc06:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 800cc0a:	4618      	mov	r0, r3

  return HAL_OK;
}
 800cc0c:	bd30      	pop	{r4, r5, pc}
 800cc0e:	bf00      	nop
 800cc10:	40010000 	.word	0x40010000

0800cc14 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800cc14:	b510      	push	{r4, lr}
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800cc16:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800cc1a:	2b01      	cmp	r3, #1
 800cc1c:	d038      	beq.n	800cc90 <HAL_TIMEx_ConfigBreakDeadTime+0x7c>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800cc1e:	68cb      	ldr	r3, [r1, #12]
 800cc20:	688a      	ldr	r2, [r1, #8]
 800cc22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800cc26:	4c1b      	ldr	r4, [pc, #108]	; (800cc94 <HAL_TIMEx_ConfigBreakDeadTime+0x80>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800cc28:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800cc2a:	684a      	ldr	r2, [r1, #4]
 800cc2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cc30:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800cc32:	680a      	ldr	r2, [r1, #0]
 800cc34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cc38:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800cc3a:	690a      	ldr	r2, [r1, #16]
 800cc3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cc40:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800cc42:	694a      	ldr	r2, [r1, #20]
 800cc44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cc48:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800cc4a:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800cc4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cc50:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800cc52:	698a      	ldr	r2, [r1, #24]
 800cc54:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800cc58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800cc5c:	6802      	ldr	r2, [r0, #0]
 800cc5e:	42a2      	cmp	r2, r4
 800cc60:	d003      	beq.n	800cc6a <HAL_TIMEx_ConfigBreakDeadTime+0x56>
 800cc62:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800cc66:	42a2      	cmp	r2, r4
 800cc68:	d10c      	bne.n	800cc84 <HAL_TIMEx_ConfigBreakDeadTime+0x70>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800cc6a:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 800cc6c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cc70:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800cc74:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800cc76:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800cc78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cc7c:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800cc7e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800cc82:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800cc84:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800cc86:	2300      	movs	r3, #0
 800cc88:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 800cc8c:	4618      	mov	r0, r3
}
 800cc8e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 800cc90:	2002      	movs	r0, #2
 800cc92:	e7fc      	b.n	800cc8e <HAL_TIMEx_ConfigBreakDeadTime+0x7a>
 800cc94:	40010000 	.word	0x40010000

0800cc98 <HAL_TIMEx_CommutCallback>:
 800cc98:	4770      	bx	lr

0800cc9a <HAL_TIMEx_BreakCallback>:
 800cc9a:	4770      	bx	lr

0800cc9c <HAL_TIMEx_Break2Callback>:
 800cc9c:	4770      	bx	lr

0800cc9e <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800cc9e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800cca2:	680a      	ldr	r2, [r1, #0]
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800cca4:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
 800cca8:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 800ccac:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
 800ccb0:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
 800ccb4:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
 800ccb8:	4323      	orrs	r3, r4
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800ccba:	b9a2      	cbnz	r2, 800cce6 <FMC_SDRAM_Init+0x48>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800ccbc:	ea43 0209 	orr.w	r2, r3, r9
 800ccc0:	6801      	ldr	r1, [r0, #0]
 800ccc2:	432a      	orrs	r2, r5
 800ccc4:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 800ccc8:	ea42 0308 	orr.w	r3, r2, r8
 800cccc:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 800ccd0:	ea43 030e 	orr.w	r3, r3, lr
 800ccd4:	ea43 030c 	orr.w	r3, r3, ip
 800ccd8:	433b      	orrs	r3, r7
 800ccda:	4333      	orrs	r3, r6
 800ccdc:	430b      	orrs	r3, r1
 800ccde:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800cce0:	2000      	movs	r0, #0
 800cce2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800cce6:	6802      	ldr	r2, [r0, #0]
 800cce8:	ea43 0309 	orr.w	r3, r3, r9
 800ccec:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800ccf0:	4313      	orrs	r3, r2
 800ccf2:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800ccf4:	ea45 0308 	orr.w	r3, r5, r8
 800ccf8:	6842      	ldr	r2, [r0, #4]
 800ccfa:	ea43 030e 	orr.w	r3, r3, lr
 800ccfe:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 800cd02:	ea43 030c 	orr.w	r3, r3, ip
 800cd06:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 800cd0a:	433b      	orrs	r3, r7
 800cd0c:	4333      	orrs	r3, r6
 800cd0e:	4313      	orrs	r3, r2
 800cd10:	6043      	str	r3, [r0, #4]
 800cd12:	e7e5      	b.n	800cce0 <FMC_SDRAM_Init+0x42>

0800cd14 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800cd14:	68cb      	ldr	r3, [r1, #12]
 800cd16:	f103 3cff 	add.w	ip, r3, #4294967295
 800cd1a:	694b      	ldr	r3, [r1, #20]
{
 800cd1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800cd1e:	3b01      	subs	r3, #1
 800cd20:	680f      	ldr	r7, [r1, #0]
 800cd22:	684c      	ldr	r4, [r1, #4]
 800cd24:	688e      	ldr	r6, [r1, #8]
 800cd26:	051b      	lsls	r3, r3, #20
 800cd28:	690d      	ldr	r5, [r1, #16]
 800cd2a:	3c01      	subs	r4, #1
 800cd2c:	6989      	ldr	r1, [r1, #24]
 800cd2e:	3e01      	subs	r6, #1
 800cd30:	3d01      	subs	r5, #1
 800cd32:	3f01      	subs	r7, #1
 800cd34:	3901      	subs	r1, #1
 800cd36:	0124      	lsls	r4, r4, #4
 800cd38:	0236      	lsls	r6, r6, #8
 800cd3a:	042d      	lsls	r5, r5, #16
 800cd3c:	0609      	lsls	r1, r1, #24
 800cd3e:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 800cd42:	b95a      	cbnz	r2, 800cd5c <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800cd44:	433b      	orrs	r3, r7
 800cd46:	6882      	ldr	r2, [r0, #8]
 800cd48:	4323      	orrs	r3, r4
 800cd4a:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800cd4e:	4333      	orrs	r3, r6
 800cd50:	432b      	orrs	r3, r5
 800cd52:	430b      	orrs	r3, r1
 800cd54:	4313      	orrs	r3, r2
 800cd56:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 800cd58:	2000      	movs	r0, #0
 800cd5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800cd5c:	6882      	ldr	r2, [r0, #8]
 800cd5e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800cd62:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 800cd66:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800cd68:	ea44 0306 	orr.w	r3, r4, r6
 800cd6c:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800cd6e:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800cd70:	68c2      	ldr	r2, [r0, #12]
 800cd72:	432b      	orrs	r3, r5
 800cd74:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800cd78:	430b      	orrs	r3, r1
 800cd7a:	4313      	orrs	r3, r2
 800cd7c:	60c3      	str	r3, [r0, #12]
 800cd7e:	e7eb      	b.n	800cd58 <FMC_SDRAM_Timing_Init+0x44>

0800cd80 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800cd80:	6902      	ldr	r2, [r0, #16]
{
 800cd82:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800cd84:	e9d1 3400 	ldrd	r3, r4, [r1]
 800cd88:	0d92      	lsrs	r2, r2, #22
 800cd8a:	4323      	orrs	r3, r4
 800cd8c:	68cc      	ldr	r4, [r1, #12]
 800cd8e:	0592      	lsls	r2, r2, #22
 800cd90:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 800cd94:	4313      	orrs	r3, r2
 800cd96:	688a      	ldr	r2, [r1, #8]
 800cd98:	3a01      	subs	r2, #1
 800cd9a:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800cd9e:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800cda0:	2000      	movs	r0, #0
 800cda2:	bd10      	pop	{r4, pc}

0800cda4 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800cda4:	6943      	ldr	r3, [r0, #20]
 800cda6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800cdaa:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 800cdae:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 800cdb2:	6141      	str	r1, [r0, #20]

  return HAL_OK;
}
 800cdb4:	2000      	movs	r0, #0
 800cdb6:	4770      	bx	lr

0800cdb8 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cdb8:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800cdbc:	b113      	cbz	r3, 800cdc4 <osKernelInitialize+0xc>
    stat = osErrorISR;
 800cdbe:	f06f 0005 	mvn.w	r0, #5
 800cdc2:	4770      	bx	lr
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cdc4:	f3ef 8210 	mrs	r2, PRIMASK
  return(result);
 800cdc8:	4b07      	ldr	r3, [pc, #28]	; (800cde8 <osKernelInitialize+0x30>)
  if (IS_IRQ()) {
 800cdca:	b912      	cbnz	r2, 800cdd2 <osKernelInitialize+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cdcc:	f3ef 8211 	mrs	r2, BASEPRI
 800cdd0:	b112      	cbz	r2, 800cdd8 <osKernelInitialize+0x20>
 800cdd2:	681a      	ldr	r2, [r3, #0]
 800cdd4:	2a02      	cmp	r2, #2
 800cdd6:	d0f2      	beq.n	800cdbe <osKernelInitialize+0x6>
  }
  else {
    if (KernelState == osKernelInactive) {
 800cdd8:	6818      	ldr	r0, [r3, #0]
 800cdda:	b910      	cbnz	r0, 800cde2 <osKernelInitialize+0x2a>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800cddc:	2201      	movs	r2, #1
 800cdde:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800cde0:	4770      	bx	lr
    } else {
      stat = osError;
 800cde2:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800cde6:	4770      	bx	lr
 800cde8:	200127ac 	.word	0x200127ac

0800cdec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800cdec:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cdee:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800cdf2:	b113      	cbz	r3, 800cdfa <osKernelStart+0xe>
    stat = osErrorISR;
 800cdf4:	f06f 0005 	mvn.w	r0, #5
      stat = osError;
    }
  }

  return (stat);
}
 800cdf8:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cdfa:	f3ef 8210 	mrs	r2, PRIMASK
  return(result);
 800cdfe:	4b0a      	ldr	r3, [pc, #40]	; (800ce28 <osKernelStart+0x3c>)
  if (IS_IRQ()) {
 800ce00:	b912      	cbnz	r2, 800ce08 <osKernelStart+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ce02:	f3ef 8211 	mrs	r2, BASEPRI
 800ce06:	b112      	cbz	r2, 800ce0e <osKernelStart+0x22>
 800ce08:	681a      	ldr	r2, [r3, #0]
 800ce0a:	2a02      	cmp	r2, #2
 800ce0c:	d0f2      	beq.n	800cdf4 <osKernelStart+0x8>
    if (KernelState == osKernelReady) {
 800ce0e:	681a      	ldr	r2, [r3, #0]
 800ce10:	2a01      	cmp	r2, #1
 800ce12:	d105      	bne.n	800ce20 <osKernelStart+0x34>
      KernelState = osKernelRunning;
 800ce14:	2202      	movs	r2, #2
 800ce16:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800ce18:	f001 fe52 	bl	800eac0 <vTaskStartScheduler>
      stat = osOK;
 800ce1c:	2000      	movs	r0, #0
 800ce1e:	e7eb      	b.n	800cdf8 <osKernelStart+0xc>
      stat = osError;
 800ce20:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 800ce24:	e7e8      	b.n	800cdf8 <osKernelStart+0xc>
 800ce26:	bf00      	nop
 800ce28:	200127ac 	.word	0x200127ac

0800ce2c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ce2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce2e:	4614      	mov	r4, r2
 800ce30:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ce32:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ce34:	460b      	mov	r3, r1
  hTask = NULL;
 800ce36:	9205      	str	r2, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ce38:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800ce3c:	bb22      	cbnz	r2, 800ce88 <osThreadNew+0x5c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce3e:	f3ef 8210 	mrs	r2, PRIMASK
 800ce42:	b912      	cbnz	r2, 800ce4a <osThreadNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ce44:	f3ef 8211 	mrs	r2, BASEPRI
 800ce48:	b11a      	cbz	r2, 800ce52 <osThreadNew+0x26>
 800ce4a:	4a22      	ldr	r2, [pc, #136]	; (800ced4 <osThreadNew+0xa8>)
 800ce4c:	6812      	ldr	r2, [r2, #0]
 800ce4e:	2a02      	cmp	r2, #2
 800ce50:	d01a      	beq.n	800ce88 <osThreadNew+0x5c>
 800ce52:	b1c8      	cbz	r0, 800ce88 <osThreadNew+0x5c>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800ce54:	2c00      	cmp	r4, #0
 800ce56:	d02f      	beq.n	800ceb8 <osThreadNew+0x8c>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800ce58:	69a5      	ldr	r5, [r4, #24]
 800ce5a:	2d00      	cmp	r5, #0
 800ce5c:	bf08      	it	eq
 800ce5e:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ce60:	1e6a      	subs	r2, r5, #1
 800ce62:	46ac      	mov	ip, r5
 800ce64:	2a37      	cmp	r2, #55	; 0x37
 800ce66:	d82b      	bhi.n	800cec0 <osThreadNew+0x94>
 800ce68:	6862      	ldr	r2, [r4, #4]
 800ce6a:	07d2      	lsls	r2, r2, #31
 800ce6c:	d428      	bmi.n	800cec0 <osThreadNew+0x94>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800ce6e:	6966      	ldr	r6, [r4, #20]
 800ce70:	b16e      	cbz	r6, 800ce8e <osThreadNew+0x62>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ce72:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 800ce74:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ce76:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 800ce7a:	b157      	cbz	r7, 800ce92 <osThreadNew+0x66>
 800ce7c:	f1be 0fbf 	cmp.w	lr, #191	; 0xbf
 800ce80:	d902      	bls.n	800ce88 <osThreadNew+0x5c>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ce82:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ce84:	b104      	cbz	r4, 800ce88 <osThreadNew+0x5c>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ce86:	b9ee      	cbnz	r6, 800cec4 <osThreadNew+0x98>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ce88:	9805      	ldr	r0, [sp, #20]
}
 800ce8a:	b007      	add	sp, #28
 800ce8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 800ce8e:	2280      	movs	r2, #128	; 0x80
 800ce90:	e7f0      	b.n	800ce74 <osThreadNew+0x48>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ce92:	f1be 0f00 	cmp.w	lr, #0
 800ce96:	d1f7      	bne.n	800ce88 <osThreadNew+0x5c>
      if (mem == 0) {
 800ce98:	6924      	ldr	r4, [r4, #16]
 800ce9a:	2c00      	cmp	r4, #0
 800ce9c:	d1f4      	bne.n	800ce88 <osThreadNew+0x5c>
 800ce9e:	460c      	mov	r4, r1
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800cea0:	a905      	add	r1, sp, #20
 800cea2:	b292      	uxth	r2, r2
 800cea4:	e9cd c100 	strd	ip, r1, [sp]
 800cea8:	4621      	mov	r1, r4
 800ceaa:	f001 fca3 	bl	800e7f4 <xTaskCreate>
 800ceae:	2801      	cmp	r0, #1
          hTask = NULL;
 800ceb0:	bf1c      	itt	ne
 800ceb2:	2300      	movne	r3, #0
 800ceb4:	9305      	strne	r3, [sp, #20]
 800ceb6:	e7e7      	b.n	800ce88 <osThreadNew+0x5c>
    prio  = (UBaseType_t)osPriorityNormal;
 800ceb8:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 800cebc:	2280      	movs	r2, #128	; 0x80
 800cebe:	e7ef      	b.n	800cea0 <osThreadNew+0x74>
        return (NULL);
 800cec0:	2000      	movs	r0, #0
 800cec2:	e7e2      	b.n	800ce8a <osThreadNew+0x5e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cec4:	e9cd 4701 	strd	r4, r7, [sp, #4]
 800cec8:	9500      	str	r5, [sp, #0]
 800ceca:	f001 fc55 	bl	800e778 <xTaskCreateStatic>
 800cece:	9005      	str	r0, [sp, #20]
 800ced0:	e7da      	b.n	800ce88 <osThreadNew+0x5c>
 800ced2:	bf00      	nop
 800ced4:	200127ac 	.word	0x200127ac

0800ced8 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800ced8:	b570      	push	{r4, r5, r6, lr}
 800ceda:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cedc:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 800cee0:	b116      	cbz	r6, 800cee8 <osMutexNew+0x10>
  hMutex = NULL;
 800cee2:	2400      	movs	r4, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 800cee4:	4620      	mov	r0, r4
 800cee6:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cee8:	f3ef 8210 	mrs	r2, PRIMASK
  if (!IS_IRQ()) {
 800ceec:	b912      	cbnz	r2, 800cef4 <osMutexNew+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ceee:	f3ef 8211 	mrs	r2, BASEPRI
 800cef2:	b11a      	cbz	r2, 800cefc <osMutexNew+0x24>
 800cef4:	4a18      	ldr	r2, [pc, #96]	; (800cf58 <osMutexNew+0x80>)
 800cef6:	6812      	ldr	r2, [r2, #0]
 800cef8:	2a02      	cmp	r2, #2
 800cefa:	d0f2      	beq.n	800cee2 <osMutexNew+0xa>
    if (attr != NULL) {
 800cefc:	b115      	cbz	r5, 800cf04 <osMutexNew+0x2c>
      type = attr->attr_bits;
 800cefe:	686e      	ldr	r6, [r5, #4]
    if ((type & osMutexRobust) != osMutexRobust) {
 800cf00:	0733      	lsls	r3, r6, #28
 800cf02:	d4ee      	bmi.n	800cee2 <osMutexNew+0xa>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 800cf04:	f006 0601 	and.w	r6, r6, #1
      if (attr != NULL) {
 800cf08:	b17d      	cbz	r5, 800cf2a <osMutexNew+0x52>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800cf0a:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
 800cf0e:	b151      	cbz	r1, 800cf26 <osMutexNew+0x4e>
 800cf10:	2b4f      	cmp	r3, #79	; 0x4f
 800cf12:	d9e6      	bls.n	800cee2 <osMutexNew+0xa>
        if (rmtx != 0U) {
 800cf14:	b1de      	cbz	r6, 800cf4e <osMutexNew+0x76>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800cf16:	2004      	movs	r0, #4
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800cf18:	f000 ff50 	bl	800ddbc <xQueueCreateMutexStatic>
 800cf1c:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 800cf1e:	2800      	cmp	r0, #0
 800cf20:	d0df      	beq.n	800cee2 <osMutexNew+0xa>
          name = attr->name;
 800cf22:	682d      	ldr	r5, [r5, #0]
 800cf24:	e00a      	b.n	800cf3c <osMutexNew+0x64>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d1db      	bne.n	800cee2 <osMutexNew+0xa>
          if (rmtx != 0U) {
 800cf2a:	b196      	cbz	r6, 800cf52 <osMutexNew+0x7a>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800cf2c:	2004      	movs	r0, #4
            hMutex = xSemaphoreCreateMutex ();
 800cf2e:	f000 ff7a 	bl	800de26 <xQueueCreateMutex>
 800cf32:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 800cf34:	2800      	cmp	r0, #0
 800cf36:	d0d4      	beq.n	800cee2 <osMutexNew+0xa>
        if (attr != NULL) {
 800cf38:	2d00      	cmp	r5, #0
 800cf3a:	d1f2      	bne.n	800cf22 <osMutexNew+0x4a>
        vQueueAddToRegistry (hMutex, name);
 800cf3c:	4629      	mov	r1, r5
 800cf3e:	4620      	mov	r0, r4
 800cf40:	f001 fa3c 	bl	800e3bc <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 800cf44:	2e00      	cmp	r6, #0
 800cf46:	d0cd      	beq.n	800cee4 <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800cf48:	f044 0401 	orr.w	r4, r4, #1
  return ((osMutexId_t)hMutex);
 800cf4c:	e7ca      	b.n	800cee4 <osMutexNew+0xc>
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800cf4e:	2001      	movs	r0, #1
 800cf50:	e7e2      	b.n	800cf18 <osMutexNew+0x40>
            hMutex = xSemaphoreCreateMutex ();
 800cf52:	2001      	movs	r0, #1
 800cf54:	e7eb      	b.n	800cf2e <osMutexNew+0x56>
 800cf56:	bf00      	nop
 800cf58:	200127ac 	.word	0x200127ac

0800cf5c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800cf5c:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800cf5e:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800cf62:	b510      	push	{r4, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 800cf64:	f003 0301 	and.w	r3, r3, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800cf68:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cf6a:	f3ef 8205 	mrs	r2, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800cf6e:	b112      	cbz	r2, 800cf76 <osMutexAcquire+0x1a>
    stat = osErrorISR;
 800cf70:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 800cf74:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cf76:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 800cf7a:	b912      	cbnz	r2, 800cf82 <osMutexAcquire+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cf7c:	f3ef 8211 	mrs	r2, BASEPRI
 800cf80:	b11a      	cbz	r2, 800cf8a <osMutexAcquire+0x2e>
 800cf82:	4a0d      	ldr	r2, [pc, #52]	; (800cfb8 <osMutexAcquire+0x5c>)
 800cf84:	6812      	ldr	r2, [r2, #0]
 800cf86:	2a02      	cmp	r2, #2
 800cf88:	d0f2      	beq.n	800cf70 <osMutexAcquire+0x14>
  else if (hMutex == NULL) {
 800cf8a:	b188      	cbz	r0, 800cfb0 <osMutexAcquire+0x54>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800cf8c:	4621      	mov	r1, r4
    if (rmtx != 0U) {
 800cf8e:	b163      	cbz	r3, 800cfaa <osMutexAcquire+0x4e>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800cf90:	f001 f99b 	bl	800e2ca <xQueueTakeMutexRecursive>
 800cf94:	2801      	cmp	r0, #1
 800cf96:	d101      	bne.n	800cf9c <osMutexAcquire+0x40>
  stat = osOK;
 800cf98:	2000      	movs	r0, #0
 800cf9a:	e7eb      	b.n	800cf74 <osMutexAcquire+0x18>
          stat = osErrorResource;
 800cf9c:	2c00      	cmp	r4, #0
 800cf9e:	bf14      	ite	ne
 800cfa0:	f06f 0001 	mvnne.w	r0, #1
 800cfa4:	f06f 0002 	mvneq.w	r0, #2
 800cfa8:	e7e4      	b.n	800cf74 <osMutexAcquire+0x18>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800cfaa:	f001 f8c3 	bl	800e134 <xQueueSemaphoreTake>
 800cfae:	e7f1      	b.n	800cf94 <osMutexAcquire+0x38>
    stat = osErrorParameter;
 800cfb0:	f06f 0003 	mvn.w	r0, #3
 800cfb4:	e7de      	b.n	800cf74 <osMutexAcquire+0x18>
 800cfb6:	bf00      	nop
 800cfb8:	200127ac 	.word	0x200127ac

0800cfbc <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800cfbc:	b508      	push	{r3, lr}
 800cfbe:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800cfc0:	f020 0001 	bic.w	r0, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 800cfc4:	f003 0301 	and.w	r3, r3, #1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cfc8:	f3ef 8205 	mrs	r2, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800cfcc:	b112      	cbz	r2, 800cfd4 <osMutexRelease+0x18>
    stat = osErrorISR;
 800cfce:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 800cfd2:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cfd4:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 800cfd8:	b912      	cbnz	r2, 800cfe0 <osMutexRelease+0x24>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cfda:	f3ef 8211 	mrs	r2, BASEPRI
 800cfde:	b11a      	cbz	r2, 800cfe8 <osMutexRelease+0x2c>
 800cfe0:	4a0a      	ldr	r2, [pc, #40]	; (800d00c <osMutexRelease+0x50>)
 800cfe2:	6812      	ldr	r2, [r2, #0]
 800cfe4:	2a02      	cmp	r2, #2
 800cfe6:	d0f2      	beq.n	800cfce <osMutexRelease+0x12>
  else if (hMutex == NULL) {
 800cfe8:	b168      	cbz	r0, 800d006 <osMutexRelease+0x4a>
    if (rmtx != 0U) {
 800cfea:	b13b      	cbz	r3, 800cffc <osMutexRelease+0x40>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800cfec:	f000 fefb 	bl	800dde6 <xQueueGiveMutexRecursive>
 800cff0:	2801      	cmp	r0, #1
  stat = osOK;
 800cff2:	bf0c      	ite	eq
 800cff4:	2000      	moveq	r0, #0
        stat = osErrorResource;
 800cff6:	f06f 0002 	mvnne.w	r0, #2
 800cffa:	e7ea      	b.n	800cfd2 <osMutexRelease+0x16>
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800cffc:	461a      	mov	r2, r3
 800cffe:	4619      	mov	r1, r3
 800d000:	f000 fe21 	bl	800dc46 <xQueueGenericSend>
 800d004:	e7f4      	b.n	800cff0 <osMutexRelease+0x34>
    stat = osErrorParameter;
 800d006:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800d00a:	e7e2      	b.n	800cfd2 <osMutexRelease+0x16>
 800d00c:	200127ac 	.word	0x200127ac

0800d010 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800d010:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d012:	460e      	mov	r6, r1
 800d014:	4615      	mov	r5, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d016:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800d01a:	b11b      	cbz	r3, 800d024 <osSemaphoreNew+0x14>
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
            vSemaphoreDelete (hSemaphore);
            hSemaphore = NULL;
 800d01c:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800d01e:	4620      	mov	r0, r4
 800d020:	b002      	add	sp, #8
 800d022:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d024:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800d028:	b913      	cbnz	r3, 800d030 <osSemaphoreNew+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d02a:	f3ef 8311 	mrs	r3, BASEPRI
 800d02e:	b11b      	cbz	r3, 800d038 <osSemaphoreNew+0x28>
 800d030:	4b21      	ldr	r3, [pc, #132]	; (800d0b8 <osSemaphoreNew+0xa8>)
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	2b02      	cmp	r3, #2
 800d036:	d0f1      	beq.n	800d01c <osSemaphoreNew+0xc>
 800d038:	2800      	cmp	r0, #0
 800d03a:	d0ef      	beq.n	800d01c <osSemaphoreNew+0xc>
 800d03c:	42b0      	cmp	r0, r6
 800d03e:	d3ed      	bcc.n	800d01c <osSemaphoreNew+0xc>
    if (attr != NULL) {
 800d040:	b1ed      	cbz	r5, 800d07e <osSemaphoreNew+0x6e>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800d042:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 800d046:	b1c3      	cbz	r3, 800d07a <osSemaphoreNew+0x6a>
 800d048:	2a4f      	cmp	r2, #79	; 0x4f
 800d04a:	d9e7      	bls.n	800d01c <osSemaphoreNew+0xc>
      if (max_count == 1U) {
 800d04c:	2801      	cmp	r0, #1
 800d04e:	d129      	bne.n	800d0a4 <osSemaphoreNew+0x94>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800d050:	2203      	movs	r2, #3
 800d052:	9200      	str	r2, [sp, #0]
 800d054:	2200      	movs	r2, #0
 800d056:	4611      	mov	r1, r2
 800d058:	f000 fd70 	bl	800db3c <xQueueGenericCreateStatic>
          hSemaphore = xSemaphoreCreateBinary();
 800d05c:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800d05e:	2800      	cmp	r0, #0
 800d060:	d0dc      	beq.n	800d01c <osSemaphoreNew+0xc>
 800d062:	b1ce      	cbz	r6, 800d098 <osSemaphoreNew+0x88>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800d064:	2300      	movs	r3, #0
 800d066:	461a      	mov	r2, r3
 800d068:	4619      	mov	r1, r3
 800d06a:	f000 fdec 	bl	800dc46 <xQueueGenericSend>
 800d06e:	2801      	cmp	r0, #1
 800d070:	d012      	beq.n	800d098 <osSemaphoreNew+0x88>
            vSemaphoreDelete (hSemaphore);
 800d072:	4620      	mov	r0, r4
 800d074:	f001 f9c8 	bl	800e408 <vQueueDelete>
 800d078:	e7d0      	b.n	800d01c <osSemaphoreNew+0xc>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800d07a:	2a00      	cmp	r2, #0
 800d07c:	d1ce      	bne.n	800d01c <osSemaphoreNew+0xc>
      if (max_count == 1U) {
 800d07e:	2801      	cmp	r0, #1
 800d080:	d104      	bne.n	800d08c <osSemaphoreNew+0x7c>
          hSemaphore = xSemaphoreCreateBinary();
 800d082:	2203      	movs	r2, #3
 800d084:	2100      	movs	r1, #0
 800d086:	f000 fd6d 	bl	800db64 <xQueueGenericCreate>
 800d08a:	e7e7      	b.n	800d05c <osSemaphoreNew+0x4c>
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800d08c:	4631      	mov	r1, r6
 800d08e:	f000 fdb8 	bl	800dc02 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 800d092:	4604      	mov	r4, r0
 800d094:	2800      	cmp	r0, #0
 800d096:	d0c1      	beq.n	800d01c <osSemaphoreNew+0xc>
        if (attr != NULL) {
 800d098:	b95d      	cbnz	r5, 800d0b2 <osSemaphoreNew+0xa2>
        vQueueAddToRegistry (hSemaphore, name);
 800d09a:	4629      	mov	r1, r5
 800d09c:	4620      	mov	r0, r4
 800d09e:	f001 f98d 	bl	800e3bc <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 800d0a2:	e7bc      	b.n	800d01e <osSemaphoreNew+0xe>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800d0a4:	461a      	mov	r2, r3
 800d0a6:	4631      	mov	r1, r6
 800d0a8:	f000 fd85 	bl	800dbb6 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 800d0ac:	4604      	mov	r4, r0
 800d0ae:	2800      	cmp	r0, #0
 800d0b0:	d0b4      	beq.n	800d01c <osSemaphoreNew+0xc>
          name = attr->name;
 800d0b2:	682d      	ldr	r5, [r5, #0]
 800d0b4:	e7f1      	b.n	800d09a <osSemaphoreNew+0x8a>
 800d0b6:	bf00      	nop
 800d0b8:	200127ac 	.word	0x200127ac

0800d0bc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800d0bc:	b513      	push	{r0, r1, r4, lr}
 800d0be:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800d0c0:	b918      	cbnz	r0, 800d0ca <osSemaphoreAcquire+0xe>
    stat = osErrorParameter;
 800d0c2:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 800d0c6:	b002      	add	sp, #8
 800d0c8:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d0ca:	f3ef 8305 	mrs	r3, IPSR
  else if (IS_IRQ()) {
 800d0ce:	b163      	cbz	r3, 800d0ea <osSemaphoreAcquire+0x2e>
    if (timeout != 0U) {
 800d0d0:	2c00      	cmp	r4, #0
 800d0d2:	d1f6      	bne.n	800d0c2 <osSemaphoreAcquire+0x6>
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800d0d4:	aa01      	add	r2, sp, #4
 800d0d6:	4621      	mov	r1, r4
      yield = pdFALSE;
 800d0d8:	9401      	str	r4, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800d0da:	f001 f91a 	bl	800e312 <xQueueReceiveFromISR>
 800d0de:	2801      	cmp	r0, #1
 800d0e0:	d113      	bne.n	800d10a <osSemaphoreAcquire+0x4e>
        portYIELD_FROM_ISR (yield);
 800d0e2:	9b01      	ldr	r3, [sp, #4]
 800d0e4:	b9a3      	cbnz	r3, 800d110 <osSemaphoreAcquire+0x54>
  stat = osOK;
 800d0e6:	2000      	movs	r0, #0
 800d0e8:	e7ed      	b.n	800d0c6 <osSemaphoreAcquire+0xa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d0ea:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 800d0ee:	b913      	cbnz	r3, 800d0f6 <osSemaphoreAcquire+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d0f0:	f3ef 8311 	mrs	r3, BASEPRI
 800d0f4:	b11b      	cbz	r3, 800d0fe <osSemaphoreAcquire+0x42>
 800d0f6:	4b0d      	ldr	r3, [pc, #52]	; (800d12c <osSemaphoreAcquire+0x70>)
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	2b02      	cmp	r3, #2
 800d0fc:	d0e8      	beq.n	800d0d0 <osSemaphoreAcquire+0x14>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800d0fe:	4621      	mov	r1, r4
 800d100:	f001 f818 	bl	800e134 <xQueueSemaphoreTake>
 800d104:	2801      	cmp	r0, #1
 800d106:	d0ee      	beq.n	800d0e6 <osSemaphoreAcquire+0x2a>
      if (timeout != 0U) {
 800d108:	b96c      	cbnz	r4, 800d126 <osSemaphoreAcquire+0x6a>
        stat = osErrorResource;
 800d10a:	f06f 0002 	mvn.w	r0, #2
 800d10e:	e7da      	b.n	800d0c6 <osSemaphoreAcquire+0xa>
        portYIELD_FROM_ISR (yield);
 800d110:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800d114:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d118:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800d11c:	f3bf 8f4f 	dsb	sy
 800d120:	f3bf 8f6f 	isb	sy
 800d124:	e7df      	b.n	800d0e6 <osSemaphoreAcquire+0x2a>
        stat = osErrorTimeout;
 800d126:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800d12a:	e7cc      	b.n	800d0c6 <osSemaphoreAcquire+0xa>
 800d12c:	200127ac 	.word	0x200127ac

0800d130 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800d130:	b513      	push	{r0, r1, r4, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800d132:	b370      	cbz	r0, 800d192 <osSemaphoreRelease+0x62>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d134:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800d138:	b14b      	cbz	r3, 800d14e <osSemaphoreRelease+0x1e>
    yield = pdFALSE;
 800d13a:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d13c:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 800d13e:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d140:	f000 fef7 	bl	800df32 <xQueueGiveFromISR>
 800d144:	2801      	cmp	r0, #1
 800d146:	d014      	beq.n	800d172 <osSemaphoreRelease+0x42>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 800d148:	f06f 0002 	mvn.w	r0, #2
 800d14c:	e014      	b.n	800d178 <osSemaphoreRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d14e:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 800d152:	b913      	cbnz	r3, 800d15a <osSemaphoreRelease+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d154:	f3ef 8311 	mrs	r3, BASEPRI
 800d158:	b11b      	cbz	r3, 800d162 <osSemaphoreRelease+0x32>
 800d15a:	4b0f      	ldr	r3, [pc, #60]	; (800d198 <osSemaphoreRelease+0x68>)
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	2b02      	cmp	r3, #2
 800d160:	d0eb      	beq.n	800d13a <osSemaphoreRelease+0xa>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800d162:	2300      	movs	r3, #0
 800d164:	461a      	mov	r2, r3
 800d166:	4619      	mov	r1, r3
 800d168:	f000 fd6d 	bl	800dc46 <xQueueGenericSend>
 800d16c:	2801      	cmp	r0, #1
 800d16e:	d002      	beq.n	800d176 <osSemaphoreRelease+0x46>
 800d170:	e7ea      	b.n	800d148 <osSemaphoreRelease+0x18>
      portYIELD_FROM_ISR (yield);
 800d172:	9b01      	ldr	r3, [sp, #4]
 800d174:	b913      	cbnz	r3, 800d17c <osSemaphoreRelease+0x4c>
  stat = osOK;
 800d176:	2000      	movs	r0, #0
    }
  }

  return (stat);
}
 800d178:	b002      	add	sp, #8
 800d17a:	bd10      	pop	{r4, pc}
      portYIELD_FROM_ISR (yield);
 800d17c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800d180:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d184:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800d188:	f3bf 8f4f 	dsb	sy
 800d18c:	f3bf 8f6f 	isb	sy
 800d190:	e7f1      	b.n	800d176 <osSemaphoreRelease+0x46>
    stat = osErrorParameter;
 800d192:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800d196:	e7ef      	b.n	800d178 <osSemaphoreRelease+0x48>
 800d198:	200127ac 	.word	0x200127ac

0800d19c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800d19c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d19e:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d1a0:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800d1a4:	b11b      	cbz	r3, 800d1ae <osMessageQueueNew+0x12>
  hQueue = NULL;
 800d1a6:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800d1a8:	4628      	mov	r0, r5
 800d1aa:	b002      	add	sp, #8
 800d1ac:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d1ae:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800d1b2:	b913      	cbnz	r3, 800d1ba <osMessageQueueNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d1b4:	f3ef 8311 	mrs	r3, BASEPRI
 800d1b8:	b11b      	cbz	r3, 800d1c2 <osMessageQueueNew+0x26>
 800d1ba:	4b1a      	ldr	r3, [pc, #104]	; (800d224 <osMessageQueueNew+0x88>)
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	2b02      	cmp	r3, #2
 800d1c0:	d0f1      	beq.n	800d1a6 <osMessageQueueNew+0xa>
 800d1c2:	2800      	cmp	r0, #0
 800d1c4:	d0ef      	beq.n	800d1a6 <osMessageQueueNew+0xa>
 800d1c6:	2900      	cmp	r1, #0
 800d1c8:	d0ed      	beq.n	800d1a6 <osMessageQueueNew+0xa>
    if (attr != NULL) {
 800d1ca:	b1ec      	cbz	r4, 800d208 <osMessageQueueNew+0x6c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d1cc:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 800d1d0:	b193      	cbz	r3, 800d1f8 <osMessageQueueNew+0x5c>
 800d1d2:	2a4f      	cmp	r2, #79	; 0x4f
 800d1d4:	d9e7      	bls.n	800d1a6 <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d1d6:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d1d8:	2a00      	cmp	r2, #0
 800d1da:	d0e4      	beq.n	800d1a6 <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d1dc:	fb01 f500 	mul.w	r5, r1, r0
 800d1e0:	6966      	ldr	r6, [r4, #20]
 800d1e2:	42ae      	cmp	r6, r5
 800d1e4:	d3df      	bcc.n	800d1a6 <osMessageQueueNew+0xa>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800d1e6:	2500      	movs	r5, #0
 800d1e8:	9500      	str	r5, [sp, #0]
 800d1ea:	f000 fca7 	bl	800db3c <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 800d1ee:	4605      	mov	r5, r0
 800d1f0:	2800      	cmp	r0, #0
 800d1f2:	d0d8      	beq.n	800d1a6 <osMessageQueueNew+0xa>
        name = attr->name;
 800d1f4:	6824      	ldr	r4, [r4, #0]
 800d1f6:	e00f      	b.n	800d218 <osMessageQueueNew+0x7c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d1f8:	2a00      	cmp	r2, #0
 800d1fa:	d1d4      	bne.n	800d1a6 <osMessageQueueNew+0xa>
 800d1fc:	6923      	ldr	r3, [r4, #16]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d1d1      	bne.n	800d1a6 <osMessageQueueNew+0xa>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d202:	6963      	ldr	r3, [r4, #20]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d1ce      	bne.n	800d1a6 <osMessageQueueNew+0xa>
        hQueue = xQueueCreate (msg_count, msg_size);
 800d208:	2200      	movs	r2, #0
 800d20a:	f000 fcab 	bl	800db64 <xQueueGenericCreate>
    if (hQueue != NULL) {
 800d20e:	4605      	mov	r5, r0
 800d210:	2800      	cmp	r0, #0
 800d212:	d0c8      	beq.n	800d1a6 <osMessageQueueNew+0xa>
      if (attr != NULL) {
 800d214:	2c00      	cmp	r4, #0
 800d216:	d1ed      	bne.n	800d1f4 <osMessageQueueNew+0x58>
      vQueueAddToRegistry (hQueue, name);
 800d218:	4621      	mov	r1, r4
 800d21a:	4628      	mov	r0, r5
 800d21c:	f001 f8ce 	bl	800e3bc <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 800d220:	e7c2      	b.n	800d1a8 <osMessageQueueNew+0xc>
 800d222:	bf00      	nop
 800d224:	200127ac 	.word	0x200127ac

0800d228 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800d228:	b513      	push	{r0, r1, r4, lr}
 800d22a:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d22c:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800d230:	b123      	cbz	r3, 800d23c <osMessageQueuePut+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d232:	b9d8      	cbnz	r0, 800d26c <osMessageQueuePut+0x44>
      stat = osErrorParameter;
 800d234:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 800d238:	b002      	add	sp, #8
 800d23a:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d23c:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800d240:	b913      	cbnz	r3, 800d248 <osMessageQueuePut+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d242:	f3ef 8311 	mrs	r3, BASEPRI
 800d246:	b11b      	cbz	r3, 800d250 <osMessageQueuePut+0x28>
 800d248:	4b17      	ldr	r3, [pc, #92]	; (800d2a8 <osMessageQueuePut+0x80>)
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	2b02      	cmp	r3, #2
 800d24e:	d0f0      	beq.n	800d232 <osMessageQueuePut+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d250:	2800      	cmp	r0, #0
 800d252:	d0ef      	beq.n	800d234 <osMessageQueuePut+0xc>
 800d254:	2900      	cmp	r1, #0
 800d256:	d0ed      	beq.n	800d234 <osMessageQueuePut+0xc>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d258:	2300      	movs	r3, #0
 800d25a:	4622      	mov	r2, r4
 800d25c:	f000 fcf3 	bl	800dc46 <xQueueGenericSend>
 800d260:	2801      	cmp	r0, #1
 800d262:	d010      	beq.n	800d286 <osMessageQueuePut+0x5e>
        if (timeout != 0U) {
 800d264:	b9e4      	cbnz	r4, 800d2a0 <osMessageQueuePut+0x78>
          stat = osErrorResource;
 800d266:	f06f 0002 	mvn.w	r0, #2
 800d26a:	e7e5      	b.n	800d238 <osMessageQueuePut+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d26c:	2900      	cmp	r1, #0
 800d26e:	d0e1      	beq.n	800d234 <osMessageQueuePut+0xc>
 800d270:	2c00      	cmp	r4, #0
 800d272:	d1df      	bne.n	800d234 <osMessageQueuePut+0xc>
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800d274:	4623      	mov	r3, r4
 800d276:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800d278:	9401      	str	r4, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800d27a:	f000 fdf1 	bl	800de60 <xQueueGenericSendFromISR>
 800d27e:	2801      	cmp	r0, #1
 800d280:	d1f1      	bne.n	800d266 <osMessageQueuePut+0x3e>
        portYIELD_FROM_ISR (yield);
 800d282:	9b01      	ldr	r3, [sp, #4]
 800d284:	b90b      	cbnz	r3, 800d28a <osMessageQueuePut+0x62>
  stat = osOK;
 800d286:	2000      	movs	r0, #0
 800d288:	e7d6      	b.n	800d238 <osMessageQueuePut+0x10>
        portYIELD_FROM_ISR (yield);
 800d28a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800d28e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d292:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800d296:	f3bf 8f4f 	dsb	sy
 800d29a:	f3bf 8f6f 	isb	sy
 800d29e:	e7f2      	b.n	800d286 <osMessageQueuePut+0x5e>
          stat = osErrorTimeout;
 800d2a0:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800d2a4:	e7c8      	b.n	800d238 <osMessageQueuePut+0x10>
 800d2a6:	bf00      	nop
 800d2a8:	200127ac 	.word	0x200127ac

0800d2ac <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800d2ac:	b513      	push	{r0, r1, r4, lr}
 800d2ae:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d2b0:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800d2b4:	b123      	cbz	r3, 800d2c0 <osMessageQueueGet+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d2b6:	b9d0      	cbnz	r0, 800d2ee <osMessageQueueGet+0x42>
      stat = osErrorParameter;
 800d2b8:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 800d2bc:	b002      	add	sp, #8
 800d2be:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d2c0:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800d2c4:	b913      	cbnz	r3, 800d2cc <osMessageQueueGet+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d2c6:	f3ef 8311 	mrs	r3, BASEPRI
 800d2ca:	b11b      	cbz	r3, 800d2d4 <osMessageQueueGet+0x28>
 800d2cc:	4b16      	ldr	r3, [pc, #88]	; (800d328 <osMessageQueueGet+0x7c>)
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	2b02      	cmp	r3, #2
 800d2d2:	d0f0      	beq.n	800d2b6 <osMessageQueueGet+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d2d4:	2800      	cmp	r0, #0
 800d2d6:	d0ef      	beq.n	800d2b8 <osMessageQueueGet+0xc>
 800d2d8:	2900      	cmp	r1, #0
 800d2da:	d0ed      	beq.n	800d2b8 <osMessageQueueGet+0xc>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d2dc:	4622      	mov	r2, r4
 800d2de:	f000 fe84 	bl	800dfea <xQueueReceive>
 800d2e2:	2801      	cmp	r0, #1
 800d2e4:	d00f      	beq.n	800d306 <osMessageQueueGet+0x5a>
        if (timeout != 0U) {
 800d2e6:	b9dc      	cbnz	r4, 800d320 <osMessageQueueGet+0x74>
          stat = osErrorResource;
 800d2e8:	f06f 0002 	mvn.w	r0, #2
 800d2ec:	e7e6      	b.n	800d2bc <osMessageQueueGet+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d2ee:	2900      	cmp	r1, #0
 800d2f0:	d0e2      	beq.n	800d2b8 <osMessageQueueGet+0xc>
 800d2f2:	2c00      	cmp	r4, #0
 800d2f4:	d1e0      	bne.n	800d2b8 <osMessageQueueGet+0xc>
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800d2f6:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800d2f8:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800d2fa:	f001 f80a 	bl	800e312 <xQueueReceiveFromISR>
 800d2fe:	2801      	cmp	r0, #1
 800d300:	d1f2      	bne.n	800d2e8 <osMessageQueueGet+0x3c>
        portYIELD_FROM_ISR (yield);
 800d302:	9b01      	ldr	r3, [sp, #4]
 800d304:	b90b      	cbnz	r3, 800d30a <osMessageQueueGet+0x5e>
  stat = osOK;
 800d306:	2000      	movs	r0, #0
 800d308:	e7d8      	b.n	800d2bc <osMessageQueueGet+0x10>
        portYIELD_FROM_ISR (yield);
 800d30a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800d30e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d312:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800d316:	f3bf 8f4f 	dsb	sy
 800d31a:	f3bf 8f6f 	isb	sy
 800d31e:	e7f2      	b.n	800d306 <osMessageQueueGet+0x5a>
          stat = osErrorTimeout;
 800d320:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800d324:	e7ca      	b.n	800d2bc <osMessageQueueGet+0x10>
 800d326:	bf00      	nop
 800d328:	200127ac 	.word	0x200127ac

0800d32c <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d32c:	4b03      	ldr	r3, [pc, #12]	; (800d33c <vApplicationGetIdleTaskMemory+0x10>)
 800d32e:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d330:	4b03      	ldr	r3, [pc, #12]	; (800d340 <vApplicationGetIdleTaskMemory+0x14>)
 800d332:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d334:	2380      	movs	r3, #128	; 0x80
 800d336:	6013      	str	r3, [r2, #0]
}
 800d338:	4770      	bx	lr
 800d33a:	bf00      	nop
 800d33c:	200126ec 	.word	0x200126ec
 800d340:	200124ec 	.word	0x200124ec

0800d344 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d344:	4b03      	ldr	r3, [pc, #12]	; (800d354 <vApplicationGetTimerTaskMemory+0x10>)
 800d346:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d348:	4b03      	ldr	r3, [pc, #12]	; (800d358 <vApplicationGetTimerTaskMemory+0x14>)
 800d34a:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d34c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d350:	6013      	str	r3, [r2, #0]
}
 800d352:	4770      	bx	lr
 800d354:	20012bb0 	.word	0x20012bb0
 800d358:	200127b0 	.word	0x200127b0

0800d35c <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d35c:	4b0f      	ldr	r3, [pc, #60]	; (800d39c <prvInsertBlockIntoFreeList+0x40>)
{
 800d35e:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d360:	461a      	mov	r2, r3
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	4283      	cmp	r3, r0
 800d366:	d3fb      	bcc.n	800d360 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d368:	6854      	ldr	r4, [r2, #4]
 800d36a:	1911      	adds	r1, r2, r4
 800d36c:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d36e:	bf01      	itttt	eq
 800d370:	6841      	ldreq	r1, [r0, #4]
 800d372:	4610      	moveq	r0, r2
 800d374:	1909      	addeq	r1, r1, r4
 800d376:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d378:	6844      	ldr	r4, [r0, #4]
 800d37a:	1901      	adds	r1, r0, r4
 800d37c:	428b      	cmp	r3, r1
 800d37e:	d107      	bne.n	800d390 <prvInsertBlockIntoFreeList+0x34>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d380:	4907      	ldr	r1, [pc, #28]	; (800d3a0 <prvInsertBlockIntoFreeList+0x44>)
 800d382:	6809      	ldr	r1, [r1, #0]
 800d384:	428b      	cmp	r3, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d386:	bf1f      	itttt	ne
 800d388:	6859      	ldrne	r1, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d38a:	681b      	ldrne	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d38c:	1909      	addne	r1, r1, r4
 800d38e:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d390:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d392:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d394:	bf18      	it	ne
 800d396:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d398:	bd10      	pop	{r4, pc}
 800d39a:	bf00      	nop
 800d39c:	20026500 	.word	0x20026500
 800d3a0:	20012c70 	.word	0x20012c70

0800d3a4 <pvPortMalloc>:
{
 800d3a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxEnd == NULL )
 800d3a8:	4f41      	ldr	r7, [pc, #260]	; (800d4b0 <pvPortMalloc+0x10c>)
{
 800d3aa:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800d3ac:	f001 fa50 	bl	800e850 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800d3b0:	4840      	ldr	r0, [pc, #256]	; (800d4b4 <pvPortMalloc+0x110>)
 800d3b2:	683b      	ldr	r3, [r7, #0]
 800d3b4:	b9f3      	cbnz	r3, 800d3f4 <pvPortMalloc+0x50>
	uxAddress = ( size_t ) ucHeap;
 800d3b6:	4940      	ldr	r1, [pc, #256]	; (800d4b8 <pvPortMalloc+0x114>)
	xStart.xBlockSize = ( size_t ) 0;
 800d3b8:	2300      	movs	r3, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d3ba:	074d      	lsls	r5, r1, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d3bc:	4d3f      	ldr	r5, [pc, #252]	; (800d4bc <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d3be:	bf1b      	ittet	ne
 800d3c0:	3107      	addne	r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d3c2:	4a3f      	ldrne	r2, [pc, #252]	; (800d4c0 <pvPortMalloc+0x11c>)
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d3c4:	4a3f      	ldreq	r2, [pc, #252]	; (800d4c4 <pvPortMalloc+0x120>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d3c6:	f021 0107 	bicne.w	r1, r1, #7
	xStart.xBlockSize = ( size_t ) 0;
 800d3ca:	606b      	str	r3, [r5, #4]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d3cc:	bf18      	it	ne
 800d3ce:	1a52      	subne	r2, r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d3d0:	6029      	str	r1, [r5, #0]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d3d2:	440a      	add	r2, r1
	uxAddress -= xHeapStructSize;
 800d3d4:	3a08      	subs	r2, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d3d6:	f022 0207 	bic.w	r2, r2, #7
	pxEnd->pxNextFreeBlock = NULL;
 800d3da:	e9c2 3300 	strd	r3, r3, [r2]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d3de:	1a53      	subs	r3, r2, r1
	pxEnd = ( void * ) uxAddress;
 800d3e0:	603a      	str	r2, [r7, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d3e2:	e9c1 2300 	strd	r2, r3, [r1]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d3e6:	4a38      	ldr	r2, [pc, #224]	; (800d4c8 <pvPortMalloc+0x124>)
 800d3e8:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d3ea:	4a38      	ldr	r2, [pc, #224]	; (800d4cc <pvPortMalloc+0x128>)
 800d3ec:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d3ee:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d3f2:	6003      	str	r3, [r0, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d3f4:	f8d0 8000 	ldr.w	r8, [r0]
 800d3f8:	ea18 0f04 	tst.w	r8, r4
 800d3fc:	d152      	bne.n	800d4a4 <pvPortMalloc+0x100>
			if( xWantedSize > 0 )
 800d3fe:	2c00      	cmp	r4, #0
 800d400:	d041      	beq.n	800d486 <pvPortMalloc+0xe2>
				xWantedSize += xHeapStructSize;
 800d402:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d406:	0761      	lsls	r1, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d408:	bf1c      	itt	ne
 800d40a:	f023 0307 	bicne.w	r3, r3, #7
 800d40e:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d410:	2b00      	cmp	r3, #0
 800d412:	d047      	beq.n	800d4a4 <pvPortMalloc+0x100>
 800d414:	4c2d      	ldr	r4, [pc, #180]	; (800d4cc <pvPortMalloc+0x128>)
 800d416:	6826      	ldr	r6, [r4, #0]
 800d418:	429e      	cmp	r6, r3
 800d41a:	d343      	bcc.n	800d4a4 <pvPortMalloc+0x100>
				pxBlock = xStart.pxNextFreeBlock;
 800d41c:	4a27      	ldr	r2, [pc, #156]	; (800d4bc <pvPortMalloc+0x118>)
 800d41e:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d420:	6869      	ldr	r1, [r5, #4]
 800d422:	4299      	cmp	r1, r3
 800d424:	d201      	bcs.n	800d42a <pvPortMalloc+0x86>
 800d426:	6828      	ldr	r0, [r5, #0]
 800d428:	b9b0      	cbnz	r0, 800d458 <pvPortMalloc+0xb4>
				if( pxBlock != pxEnd )
 800d42a:	6838      	ldr	r0, [r7, #0]
 800d42c:	42a8      	cmp	r0, r5
 800d42e:	d039      	beq.n	800d4a4 <pvPortMalloc+0x100>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d430:	1ac9      	subs	r1, r1, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d432:	6828      	ldr	r0, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d434:	6817      	ldr	r7, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d436:	2910      	cmp	r1, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d438:	6010      	str	r0, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d43a:	d914      	bls.n	800d466 <pvPortMalloc+0xc2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d43c:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d43e:	0742      	lsls	r2, r0, #29
 800d440:	d00d      	beq.n	800d45e <pvPortMalloc+0xba>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d442:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d446:	b672      	cpsid	i
 800d448:	f383 8811 	msr	BASEPRI, r3
 800d44c:	f3bf 8f6f 	isb	sy
 800d450:	f3bf 8f4f 	dsb	sy
 800d454:	b662      	cpsie	i
 800d456:	e7fe      	b.n	800d456 <pvPortMalloc+0xb2>
 800d458:	462a      	mov	r2, r5
 800d45a:	4605      	mov	r5, r0
 800d45c:	e7e0      	b.n	800d420 <pvPortMalloc+0x7c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d45e:	6041      	str	r1, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d460:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d462:	f7ff ff7b 	bl	800d35c <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d466:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d468:	4917      	ldr	r1, [pc, #92]	; (800d4c8 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d46a:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d46c:	ea48 0303 	orr.w	r3, r8, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d470:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d472:	6026      	str	r6, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d474:	f107 0408 	add.w	r4, r7, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d478:	4286      	cmp	r6, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d47a:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d47c:	f04f 0300 	mov.w	r3, #0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d480:	bf38      	it	cc
 800d482:	600e      	strcc	r6, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 800d484:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 800d486:	f001 fa89 	bl	800e99c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d48a:	0763      	lsls	r3, r4, #29
 800d48c:	d00c      	beq.n	800d4a8 <pvPortMalloc+0x104>
 800d48e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d492:	b672      	cpsid	i
 800d494:	f383 8811 	msr	BASEPRI, r3
 800d498:	f3bf 8f6f 	isb	sy
 800d49c:	f3bf 8f4f 	dsb	sy
 800d4a0:	b662      	cpsie	i
 800d4a2:	e7fe      	b.n	800d4a2 <pvPortMalloc+0xfe>
void *pvReturn = NULL;
 800d4a4:	2400      	movs	r4, #0
 800d4a6:	e7ee      	b.n	800d486 <pvPortMalloc+0xe2>
}
 800d4a8:	4620      	mov	r0, r4
 800d4aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4ae:	bf00      	nop
 800d4b0:	20012c70 	.word	0x20012c70
 800d4b4:	200264f4 	.word	0x200264f4
 800d4b8:	20012c74 	.word	0x20012c74
 800d4bc:	20026500 	.word	0x20026500
 800d4c0:	200264f4 	.word	0x200264f4
 800d4c4:	00013880 	.word	0x00013880
 800d4c8:	200264fc 	.word	0x200264fc
 800d4cc:	200264f8 	.word	0x200264f8

0800d4d0 <vPortFree>:
{
 800d4d0:	b510      	push	{r4, lr}
	if( pv != NULL )
 800d4d2:	4604      	mov	r4, r0
 800d4d4:	2800      	cmp	r0, #0
 800d4d6:	d032      	beq.n	800d53e <vPortFree+0x6e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d4d8:	4a19      	ldr	r2, [pc, #100]	; (800d540 <vPortFree+0x70>)
 800d4da:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800d4de:	6812      	ldr	r2, [r2, #0]
 800d4e0:	4213      	tst	r3, r2
 800d4e2:	d10a      	bne.n	800d4fa <vPortFree+0x2a>
 800d4e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4e8:	b672      	cpsid	i
 800d4ea:	f383 8811 	msr	BASEPRI, r3
 800d4ee:	f3bf 8f6f 	isb	sy
 800d4f2:	f3bf 8f4f 	dsb	sy
 800d4f6:	b662      	cpsie	i
 800d4f8:	e7fe      	b.n	800d4f8 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d4fa:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800d4fe:	b151      	cbz	r1, 800d516 <vPortFree+0x46>
 800d500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d504:	b672      	cpsid	i
 800d506:	f383 8811 	msr	BASEPRI, r3
 800d50a:	f3bf 8f6f 	isb	sy
 800d50e:	f3bf 8f4f 	dsb	sy
 800d512:	b662      	cpsie	i
 800d514:	e7fe      	b.n	800d514 <vPortFree+0x44>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d516:	ea23 0302 	bic.w	r3, r3, r2
 800d51a:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800d51e:	f001 f997 	bl	800e850 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d522:	4a08      	ldr	r2, [pc, #32]	; (800d544 <vPortFree+0x74>)
 800d524:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d528:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d52c:	6811      	ldr	r1, [r2, #0]
 800d52e:	440b      	add	r3, r1
 800d530:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d532:	f7ff ff13 	bl	800d35c <prvInsertBlockIntoFreeList>
}
 800d536:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 800d53a:	f001 ba2f 	b.w	800e99c <xTaskResumeAll>
}
 800d53e:	bd10      	pop	{r4, pc}
 800d540:	200264f4 	.word	0x200264f4
 800d544:	200264f8 	.word	0x200264f8

0800d548 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d548:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d54c:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d550:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d552:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d554:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d558:	2300      	movs	r3, #0
 800d55a:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d55c:	4770      	bx	lr

0800d55e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d55e:	2300      	movs	r3, #0
 800d560:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d562:	4770      	bx	lr

0800d564 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800d564:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d566:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800d568:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d56a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d56c:	689a      	ldr	r2, [r3, #8]
 800d56e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d570:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800d572:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800d574:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800d576:	3301      	adds	r3, #1
 800d578:	6003      	str	r3, [r0, #0]
}
 800d57a:	4770      	bx	lr

0800d57c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d57c:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d57e:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d580:	1c63      	adds	r3, r4, #1
 800d582:	d10a      	bne.n	800d59a <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d584:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d586:	685a      	ldr	r2, [r3, #4]
 800d588:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d58a:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d58c:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800d58e:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800d590:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800d592:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800d594:	3301      	adds	r3, #1
 800d596:	6003      	str	r3, [r0, #0]
}
 800d598:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d59a:	f100 0208 	add.w	r2, r0, #8
 800d59e:	4613      	mov	r3, r2
 800d5a0:	6852      	ldr	r2, [r2, #4]
 800d5a2:	6815      	ldr	r5, [r2, #0]
 800d5a4:	42a5      	cmp	r5, r4
 800d5a6:	d9fa      	bls.n	800d59e <vListInsert+0x22>
 800d5a8:	e7ed      	b.n	800d586 <vListInsert+0xa>

0800d5aa <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d5aa:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d5ac:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 800d5b0:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d5b2:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d5b4:	6859      	ldr	r1, [r3, #4]
 800d5b6:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d5b8:	bf08      	it	eq
 800d5ba:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d5bc:	2200      	movs	r2, #0
 800d5be:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800d5c0:	681a      	ldr	r2, [r3, #0]
 800d5c2:	3a01      	subs	r2, #1
 800d5c4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d5c6:	6818      	ldr	r0, [r3, #0]
}
 800d5c8:	4770      	bx	lr
	...

0800d5cc <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d5cc:	4808      	ldr	r0, [pc, #32]	; (800d5f0 <prvPortStartFirstTask+0x24>)
 800d5ce:	6800      	ldr	r0, [r0, #0]
 800d5d0:	6800      	ldr	r0, [r0, #0]
 800d5d2:	f380 8808 	msr	MSP, r0
 800d5d6:	f04f 0000 	mov.w	r0, #0
 800d5da:	f380 8814 	msr	CONTROL, r0
 800d5de:	b662      	cpsie	i
 800d5e0:	b661      	cpsie	f
 800d5e2:	f3bf 8f4f 	dsb	sy
 800d5e6:	f3bf 8f6f 	isb	sy
 800d5ea:	df00      	svc	0
 800d5ec:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d5ee:	0000      	.short	0x0000
 800d5f0:	e000ed08 	.word	0xe000ed08

0800d5f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d5f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d604 <vPortEnableVFP+0x10>
 800d5f8:	6801      	ldr	r1, [r0, #0]
 800d5fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d5fe:	6001      	str	r1, [r0, #0]
 800d600:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d602:	0000      	.short	0x0000
 800d604:	e000ed88 	.word	0xe000ed88

0800d608 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 800d608:	2300      	movs	r3, #0
{
 800d60a:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800d60c:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800d60e:	4b0f      	ldr	r3, [pc, #60]	; (800d64c <prvTaskExitError+0x44>)
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	3301      	adds	r3, #1
 800d614:	d00a      	beq.n	800d62c <prvTaskExitError+0x24>
 800d616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d61a:	b672      	cpsid	i
 800d61c:	f383 8811 	msr	BASEPRI, r3
 800d620:	f3bf 8f6f 	isb	sy
 800d624:	f3bf 8f4f 	dsb	sy
 800d628:	b662      	cpsie	i
 800d62a:	e7fe      	b.n	800d62a <prvTaskExitError+0x22>
 800d62c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d630:	b672      	cpsid	i
 800d632:	f383 8811 	msr	BASEPRI, r3
 800d636:	f3bf 8f6f 	isb	sy
 800d63a:	f3bf 8f4f 	dsb	sy
 800d63e:	b662      	cpsie	i
	while( ulDummy == 0 )
 800d640:	9b01      	ldr	r3, [sp, #4]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d0fc      	beq.n	800d640 <prvTaskExitError+0x38>
}
 800d646:	b002      	add	sp, #8
 800d648:	4770      	bx	lr
 800d64a:	bf00      	nop
 800d64c:	2000006c 	.word	0x2000006c

0800d650 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d650:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d654:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d658:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800d65c:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d65e:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d660:	4b03      	ldr	r3, [pc, #12]	; (800d670 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d662:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d664:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d666:	f06f 0302 	mvn.w	r3, #2
 800d66a:	6203      	str	r3, [r0, #32]
}
 800d66c:	4770      	bx	lr
 800d66e:	bf00      	nop
 800d670:	0800d609 	.word	0x0800d609
	...

0800d680 <SVC_Handler>:
	__asm volatile (
 800d680:	4b07      	ldr	r3, [pc, #28]	; (800d6a0 <pxCurrentTCBConst2>)
 800d682:	6819      	ldr	r1, [r3, #0]
 800d684:	6808      	ldr	r0, [r1, #0]
 800d686:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d68a:	f380 8809 	msr	PSP, r0
 800d68e:	f3bf 8f6f 	isb	sy
 800d692:	f04f 0000 	mov.w	r0, #0
 800d696:	f380 8811 	msr	BASEPRI, r0
 800d69a:	4770      	bx	lr
 800d69c:	f3af 8000 	nop.w

0800d6a0 <pxCurrentTCBConst2>:
 800d6a0:	20026550 	.word	0x20026550

0800d6a4 <vPortEnterCritical>:
 800d6a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6a8:	b672      	cpsid	i
 800d6aa:	f383 8811 	msr	BASEPRI, r3
 800d6ae:	f3bf 8f6f 	isb	sy
 800d6b2:	f3bf 8f4f 	dsb	sy
 800d6b6:	b662      	cpsie	i
	uxCriticalNesting++;
 800d6b8:	4a0b      	ldr	r2, [pc, #44]	; (800d6e8 <vPortEnterCritical+0x44>)
 800d6ba:	6813      	ldr	r3, [r2, #0]
 800d6bc:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800d6be:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800d6c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800d6c2:	d110      	bne.n	800d6e6 <vPortEnterCritical+0x42>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d6c4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800d6c8:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800d6cc:	b2db      	uxtb	r3, r3
 800d6ce:	b153      	cbz	r3, 800d6e6 <vPortEnterCritical+0x42>
 800d6d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6d4:	b672      	cpsid	i
 800d6d6:	f383 8811 	msr	BASEPRI, r3
 800d6da:	f3bf 8f6f 	isb	sy
 800d6de:	f3bf 8f4f 	dsb	sy
 800d6e2:	b662      	cpsie	i
 800d6e4:	e7fe      	b.n	800d6e4 <vPortEnterCritical+0x40>
}
 800d6e6:	4770      	bx	lr
 800d6e8:	2000006c 	.word	0x2000006c

0800d6ec <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800d6ec:	4a09      	ldr	r2, [pc, #36]	; (800d714 <vPortExitCritical+0x28>)
 800d6ee:	6813      	ldr	r3, [r2, #0]
 800d6f0:	b953      	cbnz	r3, 800d708 <vPortExitCritical+0x1c>
 800d6f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6f6:	b672      	cpsid	i
 800d6f8:	f383 8811 	msr	BASEPRI, r3
 800d6fc:	f3bf 8f6f 	isb	sy
 800d700:	f3bf 8f4f 	dsb	sy
 800d704:	b662      	cpsie	i
 800d706:	e7fe      	b.n	800d706 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 800d708:	3b01      	subs	r3, #1
 800d70a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d70c:	b90b      	cbnz	r3, 800d712 <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d70e:	f383 8811 	msr	BASEPRI, r3
}
 800d712:	4770      	bx	lr
 800d714:	2000006c 	.word	0x2000006c
	...

0800d720 <PendSV_Handler>:
	__asm volatile
 800d720:	f3ef 8009 	mrs	r0, PSP
 800d724:	f3bf 8f6f 	isb	sy
 800d728:	4b15      	ldr	r3, [pc, #84]	; (800d780 <pxCurrentTCBConst>)
 800d72a:	681a      	ldr	r2, [r3, #0]
 800d72c:	f01e 0f10 	tst.w	lr, #16
 800d730:	bf08      	it	eq
 800d732:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d736:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d73a:	6010      	str	r0, [r2, #0]
 800d73c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d740:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d744:	b672      	cpsid	i
 800d746:	f380 8811 	msr	BASEPRI, r0
 800d74a:	f3bf 8f4f 	dsb	sy
 800d74e:	f3bf 8f6f 	isb	sy
 800d752:	b662      	cpsie	i
 800d754:	f001 fa0c 	bl	800eb70 <vTaskSwitchContext>
 800d758:	f04f 0000 	mov.w	r0, #0
 800d75c:	f380 8811 	msr	BASEPRI, r0
 800d760:	bc09      	pop	{r0, r3}
 800d762:	6819      	ldr	r1, [r3, #0]
 800d764:	6808      	ldr	r0, [r1, #0]
 800d766:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d76a:	f01e 0f10 	tst.w	lr, #16
 800d76e:	bf08      	it	eq
 800d770:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d774:	f380 8809 	msr	PSP, r0
 800d778:	f3bf 8f6f 	isb	sy
 800d77c:	4770      	bx	lr
 800d77e:	bf00      	nop

0800d780 <pxCurrentTCBConst>:
 800d780:	20026550 	.word	0x20026550

0800d784 <SysTick_Handler>:
{
 800d784:	b508      	push	{r3, lr}
	__asm volatile
 800d786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d78a:	b672      	cpsid	i
 800d78c:	f383 8811 	msr	BASEPRI, r3
 800d790:	f3bf 8f6f 	isb	sy
 800d794:	f3bf 8f4f 	dsb	sy
 800d798:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 800d79a:	f001 f867 	bl	800e86c <xTaskIncrementTick>
 800d79e:	b128      	cbz	r0, 800d7ac <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d7a0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800d7a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7a8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	f383 8811 	msr	BASEPRI, r3
}
 800d7b2:	bd08      	pop	{r3, pc}

0800d7b4 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d7b4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800d7b8:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d7ba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d7be:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d7c0:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d7c2:	4b04      	ldr	r3, [pc, #16]	; (800d7d4 <vPortSetupTimerInterrupt+0x20>)
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	fbb3 f3f1 	udiv	r3, r3, r1
 800d7ca:	3b01      	subs	r3, #1
 800d7cc:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d7ce:	2307      	movs	r3, #7
 800d7d0:	6113      	str	r3, [r2, #16]
}
 800d7d2:	4770      	bx	lr
 800d7d4:	20000060 	.word	0x20000060

0800d7d8 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d7d8:	4b2e      	ldr	r3, [pc, #184]	; (800d894 <xPortStartScheduler+0xbc>)
{
 800d7da:	b537      	push	{r0, r1, r2, r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d7dc:	781a      	ldrb	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d7de:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d7e0:	b2d2      	uxtb	r2, r2
 800d7e2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d7e4:	22ff      	movs	r2, #255	; 0xff
 800d7e6:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d7e8:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d7ea:	4a2b      	ldr	r2, [pc, #172]	; (800d898 <xPortStartScheduler+0xc0>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d7ec:	b2db      	uxtb	r3, r3
 800d7ee:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d7f2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800d7f6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d7fa:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d7fc:	2307      	movs	r3, #7
 800d7fe:	4a27      	ldr	r2, [pc, #156]	; (800d89c <xPortStartScheduler+0xc4>)
 800d800:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d802:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800d806:	1e5c      	subs	r4, r3, #1
 800d808:	0600      	lsls	r0, r0, #24
 800d80a:	d40e      	bmi.n	800d82a <xPortStartScheduler+0x52>
 800d80c:	b111      	cbz	r1, 800d814 <xPortStartScheduler+0x3c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d80e:	2b03      	cmp	r3, #3
 800d810:	6013      	str	r3, [r2, #0]
 800d812:	d013      	beq.n	800d83c <xPortStartScheduler+0x64>
	__asm volatile
 800d814:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d818:	b672      	cpsid	i
 800d81a:	f383 8811 	msr	BASEPRI, r3
 800d81e:	f3bf 8f6f 	isb	sy
 800d822:	f3bf 8f4f 	dsb	sy
 800d826:	b662      	cpsie	i
 800d828:	e7fe      	b.n	800d828 <xPortStartScheduler+0x50>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d82a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800d82e:	2101      	movs	r1, #1
 800d830:	005b      	lsls	r3, r3, #1
 800d832:	b2db      	uxtb	r3, r3
 800d834:	f88d 3003 	strb.w	r3, [sp, #3]
 800d838:	4623      	mov	r3, r4
 800d83a:	e7e2      	b.n	800d802 <xPortStartScheduler+0x2a>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d83c:	f44f 7340 	mov.w	r3, #768	; 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d840:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
	uxCriticalNesting = 0;
 800d844:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d846:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d848:	9b01      	ldr	r3, [sp, #4]
 800d84a:	4a12      	ldr	r2, [pc, #72]	; (800d894 <xPortStartScheduler+0xbc>)
 800d84c:	b2db      	uxtb	r3, r3
 800d84e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d850:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 800d854:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d858:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d85c:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 800d860:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d864:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 800d868:	f7ff ffa4 	bl	800d7b4 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800d86c:	4b0c      	ldr	r3, [pc, #48]	; (800d8a0 <xPortStartScheduler+0xc8>)
 800d86e:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800d870:	f7ff fec0 	bl	800d5f4 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d874:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 800d878:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d87c:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 800d880:	f7ff fea4 	bl	800d5cc <prvPortStartFirstTask>
	vTaskSwitchContext();
 800d884:	f001 f974 	bl	800eb70 <vTaskSwitchContext>
}
 800d888:	4628      	mov	r0, r5
	prvTaskExitError();
 800d88a:	f7ff febd 	bl	800d608 <prvTaskExitError>
}
 800d88e:	b003      	add	sp, #12
 800d890:	bd30      	pop	{r4, r5, pc}
 800d892:	bf00      	nop
 800d894:	e000e400 	.word	0xe000e400
 800d898:	20026508 	.word	0x20026508
 800d89c:	2002650c 	.word	0x2002650c
 800d8a0:	2000006c 	.word	0x2000006c

0800d8a4 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d8a4:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d8a8:	2b0f      	cmp	r3, #15
 800d8aa:	d910      	bls.n	800d8ce <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d8ac:	4a13      	ldr	r2, [pc, #76]	; (800d8fc <vPortValidateInterruptPriority+0x58>)
 800d8ae:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d8b0:	4a13      	ldr	r2, [pc, #76]	; (800d900 <vPortValidateInterruptPriority+0x5c>)
 800d8b2:	7812      	ldrb	r2, [r2, #0]
 800d8b4:	429a      	cmp	r2, r3
 800d8b6:	d90a      	bls.n	800d8ce <vPortValidateInterruptPriority+0x2a>
 800d8b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8bc:	b672      	cpsid	i
 800d8be:	f383 8811 	msr	BASEPRI, r3
 800d8c2:	f3bf 8f6f 	isb	sy
 800d8c6:	f3bf 8f4f 	dsb	sy
 800d8ca:	b662      	cpsie	i
 800d8cc:	e7fe      	b.n	800d8cc <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d8ce:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800d8d2:	4a0c      	ldr	r2, [pc, #48]	; (800d904 <vPortValidateInterruptPriority+0x60>)
 800d8d4:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800d8d8:	6812      	ldr	r2, [r2, #0]
 800d8da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d8de:	4293      	cmp	r3, r2
 800d8e0:	d90a      	bls.n	800d8f8 <vPortValidateInterruptPriority+0x54>
 800d8e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8e6:	b672      	cpsid	i
 800d8e8:	f383 8811 	msr	BASEPRI, r3
 800d8ec:	f3bf 8f6f 	isb	sy
 800d8f0:	f3bf 8f4f 	dsb	sy
 800d8f4:	b662      	cpsie	i
 800d8f6:	e7fe      	b.n	800d8f6 <vPortValidateInterruptPriority+0x52>
	}
 800d8f8:	4770      	bx	lr
 800d8fa:	bf00      	nop
 800d8fc:	e000e3f0 	.word	0xe000e3f0
 800d900:	20026508 	.word	0x20026508
 800d904:	2002650c 	.word	0x2002650c

0800d908 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d908:	b510      	push	{r4, lr}
 800d90a:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d90c:	f7ff feca 	bl	800d6a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d910:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800d912:	f7ff feeb 	bl	800d6ec <vPortExitCritical>

	return xReturn;
}
 800d916:	fab4 f084 	clz	r0, r4
 800d91a:	0940      	lsrs	r0, r0, #5
 800d91c:	bd10      	pop	{r4, pc}

0800d91e <prvCopyDataToQueue>:
{
 800d91e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d920:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d922:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800d924:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d926:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d928:	b952      	cbnz	r2, 800d940 <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d92a:	6807      	ldr	r7, [r0, #0]
 800d92c:	bb47      	cbnz	r7, 800d980 <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d92e:	6880      	ldr	r0, [r0, #8]
 800d930:	f001 fa92 	bl	800ee58 <xTaskPriorityDisinherit>
 800d934:	4605      	mov	r5, r0
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d936:	60a7      	str	r7, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d938:	3601      	adds	r6, #1
}
 800d93a:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d93c:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800d93e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800d940:	b965      	cbnz	r5, 800d95c <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d942:	6840      	ldr	r0, [r0, #4]
 800d944:	f018 fadc 	bl	8025f00 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d948:	6863      	ldr	r3, [r4, #4]
 800d94a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800d94c:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d94e:	68a2      	ldr	r2, [r4, #8]
 800d950:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d952:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d954:	d3f0      	bcc.n	800d938 <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d956:	6823      	ldr	r3, [r4, #0]
 800d958:	6063      	str	r3, [r4, #4]
 800d95a:	e7ed      	b.n	800d938 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d95c:	68c0      	ldr	r0, [r0, #12]
 800d95e:	f018 facf 	bl	8025f00 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d962:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800d964:	68e3      	ldr	r3, [r4, #12]
 800d966:	4251      	negs	r1, r2
 800d968:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d96a:	6822      	ldr	r2, [r4, #0]
 800d96c:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d96e:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d970:	bf3e      	ittt	cc
 800d972:	68a3      	ldrcc	r3, [r4, #8]
 800d974:	185b      	addcc	r3, r3, r1
 800d976:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800d978:	2d02      	cmp	r5, #2
 800d97a:	d101      	bne.n	800d980 <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d97c:	b116      	cbz	r6, 800d984 <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 800d97e:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 800d980:	2500      	movs	r5, #0
 800d982:	e7d9      	b.n	800d938 <prvCopyDataToQueue+0x1a>
 800d984:	4635      	mov	r5, r6
 800d986:	e7d7      	b.n	800d938 <prvCopyDataToQueue+0x1a>

0800d988 <prvCopyDataFromQueue>:
{
 800d988:	4603      	mov	r3, r0
 800d98a:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d98c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 800d98e:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d990:	b162      	cbz	r2, 800d9ac <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d992:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d994:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d996:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d998:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d99a:	60dc      	str	r4, [r3, #12]
}
 800d99c:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d9a0:	bf24      	itt	cs
 800d9a2:	6819      	ldrcs	r1, [r3, #0]
 800d9a4:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d9a6:	68d9      	ldr	r1, [r3, #12]
 800d9a8:	f018 baaa 	b.w	8025f00 <memcpy>
}
 800d9ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d9b0:	4770      	bx	lr

0800d9b2 <prvUnlockQueue>:
{
 800d9b2:	b570      	push	{r4, r5, r6, lr}
 800d9b4:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800d9b6:	f7ff fe75 	bl	800d6a4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800d9ba:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d9be:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800d9c2:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d9c4:	2d00      	cmp	r5, #0
 800d9c6:	dc14      	bgt.n	800d9f2 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 800d9c8:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d9ca:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800d9ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800d9d2:	f7ff fe8b 	bl	800d6ec <vPortExitCritical>
	taskENTER_CRITICAL();
 800d9d6:	f7ff fe65 	bl	800d6a4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800d9da:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800d9de:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d9e0:	2d00      	cmp	r5, #0
 800d9e2:	dc12      	bgt.n	800da0a <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 800d9e4:	23ff      	movs	r3, #255	; 0xff
 800d9e6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800d9ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800d9ee:	f7ff be7d 	b.w	800d6ec <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d9f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d0e7      	beq.n	800d9c8 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d9f8:	4630      	mov	r0, r6
 800d9fa:	f001 f93f 	bl	800ec7c <xTaskRemoveFromEventList>
 800d9fe:	b108      	cbz	r0, 800da04 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 800da00:	f001 f9ce 	bl	800eda0 <vTaskMissedYield>
			--cTxLock;
 800da04:	3d01      	subs	r5, #1
 800da06:	b26d      	sxtb	r5, r5
 800da08:	e7dc      	b.n	800d9c4 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800da0a:	6923      	ldr	r3, [r4, #16]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d0e9      	beq.n	800d9e4 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800da10:	4630      	mov	r0, r6
 800da12:	f001 f933 	bl	800ec7c <xTaskRemoveFromEventList>
 800da16:	b108      	cbz	r0, 800da1c <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800da18:	f001 f9c2 	bl	800eda0 <vTaskMissedYield>
				--cRxLock;
 800da1c:	3d01      	subs	r5, #1
 800da1e:	b26d      	sxtb	r5, r5
 800da20:	e7de      	b.n	800d9e0 <prvUnlockQueue+0x2e>

0800da22 <xQueueGenericReset>:
{
 800da22:	b538      	push	{r3, r4, r5, lr}
 800da24:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800da26:	4604      	mov	r4, r0
 800da28:	b950      	cbnz	r0, 800da40 <xQueueGenericReset+0x1e>
 800da2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da2e:	b672      	cpsid	i
 800da30:	f383 8811 	msr	BASEPRI, r3
 800da34:	f3bf 8f6f 	isb	sy
 800da38:	f3bf 8f4f 	dsb	sy
 800da3c:	b662      	cpsie	i
 800da3e:	e7fe      	b.n	800da3e <xQueueGenericReset+0x1c>
	taskENTER_CRITICAL();
 800da40:	f7ff fe30 	bl	800d6a4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800da44:	6822      	ldr	r2, [r4, #0]
 800da46:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800da4a:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800da4c:	434b      	muls	r3, r1
 800da4e:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800da50:	1a5b      	subs	r3, r3, r1
 800da52:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800da54:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800da56:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800da58:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800da5a:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800da5c:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800da5e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800da62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800da66:	b9a5      	cbnz	r5, 800da92 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800da68:	6923      	ldr	r3, [r4, #16]
 800da6a:	b173      	cbz	r3, 800da8a <xQueueGenericReset+0x68>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800da6c:	f104 0010 	add.w	r0, r4, #16
 800da70:	f001 f904 	bl	800ec7c <xTaskRemoveFromEventList>
 800da74:	b148      	cbz	r0, 800da8a <xQueueGenericReset+0x68>
					queueYIELD_IF_USING_PREEMPTION();
 800da76:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800da7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da7e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800da82:	f3bf 8f4f 	dsb	sy
 800da86:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800da8a:	f7ff fe2f 	bl	800d6ec <vPortExitCritical>
}
 800da8e:	2001      	movs	r0, #1
 800da90:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800da92:	f104 0010 	add.w	r0, r4, #16
 800da96:	f7ff fd57 	bl	800d548 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800da9a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800da9e:	f7ff fd53 	bl	800d548 <vListInitialise>
 800daa2:	e7f2      	b.n	800da8a <xQueueGenericReset+0x68>

0800daa4 <xQueueGenericCreateStatic.part.0>:
	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
 800daa4:	b513      	push	{r0, r1, r4, lr}
		configASSERT( pxStaticQueue != NULL );
 800daa6:	461c      	mov	r4, r3
 800daa8:	b953      	cbnz	r3, 800dac0 <xQueueGenericCreateStatic.part.0+0x1c>
 800daaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daae:	b672      	cpsid	i
 800dab0:	f383 8811 	msr	BASEPRI, r3
 800dab4:	f3bf 8f6f 	isb	sy
 800dab8:	f3bf 8f4f 	dsb	sy
 800dabc:	b662      	cpsie	i
 800dabe:	e7fe      	b.n	800dabe <xQueueGenericCreateStatic.part.0+0x1a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800dac0:	b15a      	cbz	r2, 800dada <xQueueGenericCreateStatic.part.0+0x36>
 800dac2:	b9b1      	cbnz	r1, 800daf2 <xQueueGenericCreateStatic.part.0+0x4e>
 800dac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dac8:	b672      	cpsid	i
 800daca:	f383 8811 	msr	BASEPRI, r3
 800dace:	f3bf 8f6f 	isb	sy
 800dad2:	f3bf 8f4f 	dsb	sy
 800dad6:	b662      	cpsie	i
 800dad8:	e7fe      	b.n	800dad8 <xQueueGenericCreateStatic.part.0+0x34>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800dada:	b151      	cbz	r1, 800daf2 <xQueueGenericCreateStatic.part.0+0x4e>
 800dadc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dae0:	b672      	cpsid	i
 800dae2:	f383 8811 	msr	BASEPRI, r3
 800dae6:	f3bf 8f6f 	isb	sy
 800daea:	f3bf 8f4f 	dsb	sy
 800daee:	b662      	cpsie	i
 800daf0:	e7fe      	b.n	800daf0 <xQueueGenericCreateStatic.part.0+0x4c>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800daf2:	2350      	movs	r3, #80	; 0x50
 800daf4:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800daf6:	9b01      	ldr	r3, [sp, #4]
 800daf8:	2b50      	cmp	r3, #80	; 0x50
 800dafa:	d00a      	beq.n	800db12 <xQueueGenericCreateStatic.part.0+0x6e>
 800dafc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db00:	b672      	cpsid	i
 800db02:	f383 8811 	msr	BASEPRI, r3
 800db06:	f3bf 8f6f 	isb	sy
 800db0a:	f3bf 8f4f 	dsb	sy
 800db0e:	b662      	cpsie	i
 800db10:	e7fe      	b.n	800db10 <xQueueGenericCreateStatic.part.0+0x6c>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800db12:	2900      	cmp	r1, #0
 800db14:	bf08      	it	eq
 800db16:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800db18:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800db1a:	2301      	movs	r3, #1
 800db1c:	6022      	str	r2, [r4, #0]
 800db1e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800db22:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800db26:	4619      	mov	r1, r3
 800db28:	4620      	mov	r0, r4
 800db2a:	f7ff ff7a 	bl	800da22 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800db2e:	f89d 3010 	ldrb.w	r3, [sp, #16]
	}
 800db32:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800db34:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 800db38:	b002      	add	sp, #8
 800db3a:	bd10      	pop	{r4, pc}

0800db3c <xQueueGenericCreateStatic>:
	{
 800db3c:	b410      	push	{r4}
 800db3e:	f89d 4004 	ldrb.w	r4, [sp, #4]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800db42:	b950      	cbnz	r0, 800db5a <xQueueGenericCreateStatic+0x1e>
 800db44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db48:	b672      	cpsid	i
 800db4a:	f383 8811 	msr	BASEPRI, r3
 800db4e:	f3bf 8f6f 	isb	sy
 800db52:	f3bf 8f4f 	dsb	sy
 800db56:	b662      	cpsie	i
 800db58:	e7fe      	b.n	800db58 <xQueueGenericCreateStatic+0x1c>
 800db5a:	9401      	str	r4, [sp, #4]
	}
 800db5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800db60:	f7ff bfa0 	b.w	800daa4 <xQueueGenericCreateStatic.part.0>

0800db64 <xQueueGenericCreate>:
	{
 800db64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db66:	460d      	mov	r5, r1
 800db68:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800db6a:	4606      	mov	r6, r0
 800db6c:	b950      	cbnz	r0, 800db84 <xQueueGenericCreate+0x20>
 800db6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db72:	b672      	cpsid	i
 800db74:	f383 8811 	msr	BASEPRI, r3
 800db78:	f3bf 8f6f 	isb	sy
 800db7c:	f3bf 8f4f 	dsb	sy
 800db80:	b662      	cpsie	i
 800db82:	e7fe      	b.n	800db82 <xQueueGenericCreate+0x1e>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db84:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800db86:	3050      	adds	r0, #80	; 0x50
 800db88:	f7ff fc0c 	bl	800d3a4 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800db8c:	4604      	mov	r4, r0
 800db8e:	b170      	cbz	r0, 800dbae <xQueueGenericCreate+0x4a>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800db90:	2300      	movs	r3, #0
 800db92:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800db96:	b165      	cbz	r5, 800dbb2 <xQueueGenericCreate+0x4e>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800db98:	f100 0350 	add.w	r3, r0, #80	; 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800db9c:	2101      	movs	r1, #1
 800db9e:	4620      	mov	r0, r4
 800dba0:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800dba2:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800dba6:	f7ff ff3c 	bl	800da22 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800dbaa:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 800dbae:	4620      	mov	r0, r4
 800dbb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dbb2:	4603      	mov	r3, r0
 800dbb4:	e7f2      	b.n	800db9c <xQueueGenericCreate+0x38>

0800dbb6 <xQueueCreateCountingSemaphoreStatic>:
	{
 800dbb6:	b513      	push	{r0, r1, r4, lr}
 800dbb8:	4613      	mov	r3, r2
 800dbba:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800dbbc:	b950      	cbnz	r0, 800dbd4 <xQueueCreateCountingSemaphoreStatic+0x1e>
 800dbbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbc2:	b672      	cpsid	i
 800dbc4:	f383 8811 	msr	BASEPRI, r3
 800dbc8:	f3bf 8f6f 	isb	sy
 800dbcc:	f3bf 8f4f 	dsb	sy
 800dbd0:	b662      	cpsie	i
 800dbd2:	e7fe      	b.n	800dbd2 <xQueueCreateCountingSemaphoreStatic+0x1c>
		configASSERT( uxInitialCount <= uxMaxCount );
 800dbd4:	4288      	cmp	r0, r1
 800dbd6:	d20a      	bcs.n	800dbee <xQueueCreateCountingSemaphoreStatic+0x38>
 800dbd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbdc:	b672      	cpsid	i
 800dbde:	f383 8811 	msr	BASEPRI, r3
 800dbe2:	f3bf 8f6f 	isb	sy
 800dbe6:	f3bf 8f4f 	dsb	sy
 800dbea:	b662      	cpsie	i
 800dbec:	e7fe      	b.n	800dbec <xQueueCreateCountingSemaphoreStatic+0x36>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800dbee:	2202      	movs	r2, #2
 800dbf0:	9200      	str	r2, [sp, #0]
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	4611      	mov	r1, r2
 800dbf6:	f7ff ffa1 	bl	800db3c <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800dbfa:	b100      	cbz	r0, 800dbfe <xQueueCreateCountingSemaphoreStatic+0x48>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800dbfc:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800dbfe:	b002      	add	sp, #8
 800dc00:	bd10      	pop	{r4, pc}

0800dc02 <xQueueCreateCountingSemaphore>:
	{
 800dc02:	b510      	push	{r4, lr}
 800dc04:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800dc06:	b950      	cbnz	r0, 800dc1e <xQueueCreateCountingSemaphore+0x1c>
 800dc08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc0c:	b672      	cpsid	i
 800dc0e:	f383 8811 	msr	BASEPRI, r3
 800dc12:	f3bf 8f6f 	isb	sy
 800dc16:	f3bf 8f4f 	dsb	sy
 800dc1a:	b662      	cpsie	i
 800dc1c:	e7fe      	b.n	800dc1c <xQueueCreateCountingSemaphore+0x1a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800dc1e:	4288      	cmp	r0, r1
 800dc20:	d20a      	bcs.n	800dc38 <xQueueCreateCountingSemaphore+0x36>
 800dc22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc26:	b672      	cpsid	i
 800dc28:	f383 8811 	msr	BASEPRI, r3
 800dc2c:	f3bf 8f6f 	isb	sy
 800dc30:	f3bf 8f4f 	dsb	sy
 800dc34:	b662      	cpsie	i
 800dc36:	e7fe      	b.n	800dc36 <xQueueCreateCountingSemaphore+0x34>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800dc38:	2202      	movs	r2, #2
 800dc3a:	2100      	movs	r1, #0
 800dc3c:	f7ff ff92 	bl	800db64 <xQueueGenericCreate>
		if( xHandle != NULL )
 800dc40:	b100      	cbz	r0, 800dc44 <xQueueCreateCountingSemaphore+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800dc42:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800dc44:	bd10      	pop	{r4, pc}

0800dc46 <xQueueGenericSend>:
{
 800dc46:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dc4a:	b085      	sub	sp, #20
 800dc4c:	4688      	mov	r8, r1
 800dc4e:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800dc50:	4604      	mov	r4, r0
{
 800dc52:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800dc54:	b950      	cbnz	r0, 800dc6c <xQueueGenericSend+0x26>
 800dc56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc5a:	b672      	cpsid	i
 800dc5c:	f383 8811 	msr	BASEPRI, r3
 800dc60:	f3bf 8f6f 	isb	sy
 800dc64:	f3bf 8f4f 	dsb	sy
 800dc68:	b662      	cpsie	i
 800dc6a:	e7fe      	b.n	800dc6a <xQueueGenericSend+0x24>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dc6c:	b961      	cbnz	r1, 800dc88 <xQueueGenericSend+0x42>
 800dc6e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800dc70:	b153      	cbz	r3, 800dc88 <xQueueGenericSend+0x42>
 800dc72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc76:	b672      	cpsid	i
 800dc78:	f383 8811 	msr	BASEPRI, r3
 800dc7c:	f3bf 8f6f 	isb	sy
 800dc80:	f3bf 8f4f 	dsb	sy
 800dc84:	b662      	cpsie	i
 800dc86:	e7fe      	b.n	800dc86 <xQueueGenericSend+0x40>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dc88:	2f02      	cmp	r7, #2
 800dc8a:	d10d      	bne.n	800dca8 <xQueueGenericSend+0x62>
 800dc8c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800dc8e:	2b01      	cmp	r3, #1
 800dc90:	d00a      	beq.n	800dca8 <xQueueGenericSend+0x62>
 800dc92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc96:	b672      	cpsid	i
 800dc98:	f383 8811 	msr	BASEPRI, r3
 800dc9c:	f3bf 8f6f 	isb	sy
 800dca0:	f3bf 8f4f 	dsb	sy
 800dca4:	b662      	cpsie	i
 800dca6:	e7fe      	b.n	800dca6 <xQueueGenericSend+0x60>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dca8:	f001 f886 	bl	800edb8 <xTaskGetSchedulerState>
 800dcac:	4606      	mov	r6, r0
 800dcae:	b960      	cbnz	r0, 800dcca <xQueueGenericSend+0x84>
 800dcb0:	9b01      	ldr	r3, [sp, #4]
 800dcb2:	b15b      	cbz	r3, 800dccc <xQueueGenericSend+0x86>
 800dcb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcb8:	b672      	cpsid	i
 800dcba:	f383 8811 	msr	BASEPRI, r3
 800dcbe:	f3bf 8f6f 	isb	sy
 800dcc2:	f3bf 8f4f 	dsb	sy
 800dcc6:	b662      	cpsie	i
 800dcc8:	e7fe      	b.n	800dcc8 <xQueueGenericSend+0x82>
 800dcca:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800dccc:	f04f 0900 	mov.w	r9, #0
 800dcd0:	e037      	b.n	800dd42 <xQueueGenericSend+0xfc>
				if( xTicksToWait == ( TickType_t ) 0 )
 800dcd2:	9d01      	ldr	r5, [sp, #4]
 800dcd4:	b91d      	cbnz	r5, 800dcde <xQueueGenericSend+0x98>
					taskEXIT_CRITICAL();
 800dcd6:	f7ff fd09 	bl	800d6ec <vPortExitCritical>
			return errQUEUE_FULL;
 800dcda:	2000      	movs	r0, #0
 800dcdc:	e052      	b.n	800dd84 <xQueueGenericSend+0x13e>
				else if( xEntryTimeSet == pdFALSE )
 800dcde:	b916      	cbnz	r6, 800dce6 <xQueueGenericSend+0xa0>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dce0:	a802      	add	r0, sp, #8
 800dce2:	f001 f811 	bl	800ed08 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800dce6:	f7ff fd01 	bl	800d6ec <vPortExitCritical>
		vTaskSuspendAll();
 800dcea:	f000 fdb1 	bl	800e850 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dcee:	f7ff fcd9 	bl	800d6a4 <vPortEnterCritical>
 800dcf2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800dcf6:	2bff      	cmp	r3, #255	; 0xff
 800dcf8:	d101      	bne.n	800dcfe <xQueueGenericSend+0xb8>
 800dcfa:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 800dcfe:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800dd02:	2bff      	cmp	r3, #255	; 0xff
 800dd04:	d101      	bne.n	800dd0a <xQueueGenericSend+0xc4>
 800dd06:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 800dd0a:	f7ff fcef 	bl	800d6ec <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dd0e:	a901      	add	r1, sp, #4
 800dd10:	a802      	add	r0, sp, #8
 800dd12:	f001 f805 	bl	800ed20 <xTaskCheckForTimeOut>
 800dd16:	2800      	cmp	r0, #0
 800dd18:	d14a      	bne.n	800ddb0 <xQueueGenericSend+0x16a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dd1a:	f7ff fcc3 	bl	800d6a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dd1e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800dd20:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800dd22:	429a      	cmp	r2, r3
 800dd24:	d131      	bne.n	800dd8a <xQueueGenericSend+0x144>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800dd26:	f7ff fce1 	bl	800d6ec <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800dd2a:	9901      	ldr	r1, [sp, #4]
 800dd2c:	f104 0010 	add.w	r0, r4, #16
 800dd30:	f000 ff68 	bl	800ec04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dd34:	4620      	mov	r0, r4
 800dd36:	f7ff fe3c 	bl	800d9b2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dd3a:	f000 fe2f 	bl	800e99c <xTaskResumeAll>
 800dd3e:	b360      	cbz	r0, 800dd9a <xQueueGenericSend+0x154>
 800dd40:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800dd42:	f7ff fcaf 	bl	800d6a4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dd46:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800dd48:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800dd4a:	429a      	cmp	r2, r3
 800dd4c:	d301      	bcc.n	800dd52 <xQueueGenericSend+0x10c>
 800dd4e:	2f02      	cmp	r7, #2
 800dd50:	d1bf      	bne.n	800dcd2 <xQueueGenericSend+0x8c>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dd52:	463a      	mov	r2, r7
 800dd54:	4641      	mov	r1, r8
 800dd56:	4620      	mov	r0, r4
 800dd58:	f7ff fde1 	bl	800d91e <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dd5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dd5e:	b11b      	cbz	r3, 800dd68 <xQueueGenericSend+0x122>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dd60:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800dd64:	f000 ff8a 	bl	800ec7c <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800dd68:	b148      	cbz	r0, 800dd7e <xQueueGenericSend+0x138>
						queueYIELD_IF_USING_PREEMPTION();
 800dd6a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800dd6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd72:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800dd76:	f3bf 8f4f 	dsb	sy
 800dd7a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800dd7e:	f7ff fcb5 	bl	800d6ec <vPortExitCritical>
				return pdPASS;
 800dd82:	2001      	movs	r0, #1
}
 800dd84:	b005      	add	sp, #20
 800dd86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 800dd8a:	f7ff fcaf 	bl	800d6ec <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800dd8e:	4620      	mov	r0, r4
 800dd90:	f7ff fe0f 	bl	800d9b2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dd94:	f000 fe02 	bl	800e99c <xTaskResumeAll>
 800dd98:	e7d2      	b.n	800dd40 <xQueueGenericSend+0xfa>
					portYIELD_WITHIN_API();
 800dd9a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800dd9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dda2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800dda6:	f3bf 8f4f 	dsb	sy
 800ddaa:	f3bf 8f6f 	isb	sy
 800ddae:	e7c7      	b.n	800dd40 <xQueueGenericSend+0xfa>
			prvUnlockQueue( pxQueue );
 800ddb0:	4620      	mov	r0, r4
 800ddb2:	f7ff fdfe 	bl	800d9b2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ddb6:	f000 fdf1 	bl	800e99c <xTaskResumeAll>
 800ddba:	e78e      	b.n	800dcda <xQueueGenericSend+0x94>

0800ddbc <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800ddbc:	2200      	movs	r2, #0
	{
 800ddbe:	460b      	mov	r3, r1
 800ddc0:	b513      	push	{r0, r1, r4, lr}
 800ddc2:	4611      	mov	r1, r2
 800ddc4:	9000      	str	r0, [sp, #0]
 800ddc6:	2001      	movs	r0, #1
 800ddc8:	f7ff fe6c 	bl	800daa4 <xQueueGenericCreateStatic.part.0>
		if( pxNewQueue != NULL )
 800ddcc:	4604      	mov	r4, r0
 800ddce:	b138      	cbz	r0, 800dde0 <xQueueCreateMutexStatic+0x24>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800ddd0:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ddd2:	461a      	mov	r2, r3
 800ddd4:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800ddd6:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ddd8:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800ddda:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800dddc:	f7ff ff33 	bl	800dc46 <xQueueGenericSend>
	}
 800dde0:	4620      	mov	r0, r4
 800dde2:	b002      	add	sp, #8
 800dde4:	bd10      	pop	{r4, pc}

0800dde6 <xQueueGiveMutexRecursive>:
	{
 800dde6:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 800dde8:	4604      	mov	r4, r0
 800ddea:	b950      	cbnz	r0, 800de02 <xQueueGiveMutexRecursive+0x1c>
 800ddec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddf0:	b672      	cpsid	i
 800ddf2:	f383 8811 	msr	BASEPRI, r3
 800ddf6:	f3bf 8f6f 	isb	sy
 800ddfa:	f3bf 8f4f 	dsb	sy
 800ddfe:	b662      	cpsie	i
 800de00:	e7fe      	b.n	800de00 <xQueueGiveMutexRecursive+0x1a>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800de02:	6885      	ldr	r5, [r0, #8]
 800de04:	f000 ffd2 	bl	800edac <xTaskGetCurrentTaskHandle>
 800de08:	4285      	cmp	r5, r0
 800de0a:	d10a      	bne.n	800de22 <xQueueGiveMutexRecursive+0x3c>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800de0c:	68e3      	ldr	r3, [r4, #12]
 800de0e:	3b01      	subs	r3, #1
 800de10:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800de12:	b923      	cbnz	r3, 800de1e <xQueueGiveMutexRecursive+0x38>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800de14:	461a      	mov	r2, r3
 800de16:	4619      	mov	r1, r3
 800de18:	4620      	mov	r0, r4
 800de1a:	f7ff ff14 	bl	800dc46 <xQueueGenericSend>
			xReturn = pdPASS;
 800de1e:	2001      	movs	r0, #1
		return xReturn;
 800de20:	e000      	b.n	800de24 <xQueueGiveMutexRecursive+0x3e>
			xReturn = pdFAIL;
 800de22:	2000      	movs	r0, #0
	}
 800de24:	bd38      	pop	{r3, r4, r5, pc}

0800de26 <xQueueCreateMutex>:
	{
 800de26:	b570      	push	{r4, r5, r6, lr}
 800de28:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800de2a:	2050      	movs	r0, #80	; 0x50
 800de2c:	f7ff faba 	bl	800d3a4 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800de30:	4604      	mov	r4, r0
 800de32:	b198      	cbz	r0, 800de5c <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800de34:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 800de36:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800de38:	6000      	str	r0, [r0, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800de3a:	f880 5046 	strb.w	r5, [r0, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800de3e:	e9c0 150f 	strd	r1, r5, [r0, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800de42:	f7ff fdee 	bl	800da22 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800de46:	462b      	mov	r3, r5
 800de48:	462a      	mov	r2, r5
 800de4a:	4629      	mov	r1, r5
 800de4c:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800de4e:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800de52:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800de54:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800de56:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800de58:	f7ff fef5 	bl	800dc46 <xQueueGenericSend>
	}
 800de5c:	4620      	mov	r0, r4
 800de5e:	bd70      	pop	{r4, r5, r6, pc}

0800de60 <xQueueGenericSendFromISR>:
{
 800de60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de64:	4689      	mov	r9, r1
 800de66:	4690      	mov	r8, r2
 800de68:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800de6a:	4604      	mov	r4, r0
 800de6c:	b950      	cbnz	r0, 800de84 <xQueueGenericSendFromISR+0x24>
 800de6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de72:	b672      	cpsid	i
 800de74:	f383 8811 	msr	BASEPRI, r3
 800de78:	f3bf 8f6f 	isb	sy
 800de7c:	f3bf 8f4f 	dsb	sy
 800de80:	b662      	cpsie	i
 800de82:	e7fe      	b.n	800de82 <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800de84:	b961      	cbnz	r1, 800dea0 <xQueueGenericSendFromISR+0x40>
 800de86:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800de88:	b153      	cbz	r3, 800dea0 <xQueueGenericSendFromISR+0x40>
 800de8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de8e:	b672      	cpsid	i
 800de90:	f383 8811 	msr	BASEPRI, r3
 800de94:	f3bf 8f6f 	isb	sy
 800de98:	f3bf 8f4f 	dsb	sy
 800de9c:	b662      	cpsie	i
 800de9e:	e7fe      	b.n	800de9e <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dea0:	2f02      	cmp	r7, #2
 800dea2:	d10d      	bne.n	800dec0 <xQueueGenericSendFromISR+0x60>
 800dea4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800dea6:	2b01      	cmp	r3, #1
 800dea8:	d00a      	beq.n	800dec0 <xQueueGenericSendFromISR+0x60>
 800deaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800deae:	b672      	cpsid	i
 800deb0:	f383 8811 	msr	BASEPRI, r3
 800deb4:	f3bf 8f6f 	isb	sy
 800deb8:	f3bf 8f4f 	dsb	sy
 800debc:	b662      	cpsie	i
 800debe:	e7fe      	b.n	800debe <xQueueGenericSendFromISR+0x5e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dec0:	f7ff fcf0 	bl	800d8a4 <vPortValidateInterruptPriority>
	__asm volatile
 800dec4:	f3ef 8611 	mrs	r6, BASEPRI
 800dec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800decc:	b672      	cpsid	i
 800dece:	f383 8811 	msr	BASEPRI, r3
 800ded2:	f3bf 8f6f 	isb	sy
 800ded6:	f3bf 8f4f 	dsb	sy
 800deda:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dedc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800dede:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800dee0:	429a      	cmp	r2, r3
 800dee2:	d301      	bcc.n	800dee8 <xQueueGenericSendFromISR+0x88>
 800dee4:	2f02      	cmp	r7, #2
 800dee6:	d122      	bne.n	800df2e <xQueueGenericSendFromISR+0xce>
			const int8_t cTxLock = pxQueue->cTxLock;
 800dee8:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800deec:	463a      	mov	r2, r7
 800deee:	4649      	mov	r1, r9
 800def0:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800def2:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800def4:	f7ff fd13 	bl	800d91e <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800def8:	1c6b      	adds	r3, r5, #1
 800defa:	d113      	bne.n	800df24 <xQueueGenericSendFromISR+0xc4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800defc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800defe:	b90b      	cbnz	r3, 800df04 <xQueueGenericSendFromISR+0xa4>
			xReturn = pdPASS;
 800df00:	2001      	movs	r0, #1
 800df02:	e00b      	b.n	800df1c <xQueueGenericSendFromISR+0xbc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800df04:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800df08:	f000 feb8 	bl	800ec7c <xTaskRemoveFromEventList>
 800df0c:	2800      	cmp	r0, #0
 800df0e:	d0f7      	beq.n	800df00 <xQueueGenericSendFromISR+0xa0>
							if( pxHigherPriorityTaskWoken != NULL )
 800df10:	f1b8 0f00 	cmp.w	r8, #0
 800df14:	d0f4      	beq.n	800df00 <xQueueGenericSendFromISR+0xa0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800df16:	2001      	movs	r0, #1
 800df18:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 800df1c:	f386 8811 	msr	BASEPRI, r6
}
 800df20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800df24:	3501      	adds	r5, #1
 800df26:	b26d      	sxtb	r5, r5
 800df28:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 800df2c:	e7e8      	b.n	800df00 <xQueueGenericSendFromISR+0xa0>
			xReturn = errQUEUE_FULL;
 800df2e:	2000      	movs	r0, #0
 800df30:	e7f4      	b.n	800df1c <xQueueGenericSendFromISR+0xbc>

0800df32 <xQueueGiveFromISR>:
{
 800df32:	b570      	push	{r4, r5, r6, lr}
 800df34:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800df36:	4604      	mov	r4, r0
 800df38:	b950      	cbnz	r0, 800df50 <xQueueGiveFromISR+0x1e>
	__asm volatile
 800df3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df3e:	b672      	cpsid	i
 800df40:	f383 8811 	msr	BASEPRI, r3
 800df44:	f3bf 8f6f 	isb	sy
 800df48:	f3bf 8f4f 	dsb	sy
 800df4c:	b662      	cpsie	i
 800df4e:	e7fe      	b.n	800df4e <xQueueGiveFromISR+0x1c>
	configASSERT( pxQueue->uxItemSize == 0 );
 800df50:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800df52:	b153      	cbz	r3, 800df6a <xQueueGiveFromISR+0x38>
 800df54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df58:	b672      	cpsid	i
 800df5a:	f383 8811 	msr	BASEPRI, r3
 800df5e:	f3bf 8f6f 	isb	sy
 800df62:	f3bf 8f4f 	dsb	sy
 800df66:	b662      	cpsie	i
 800df68:	e7fe      	b.n	800df68 <xQueueGiveFromISR+0x36>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800df6a:	6803      	ldr	r3, [r0, #0]
 800df6c:	b963      	cbnz	r3, 800df88 <xQueueGiveFromISR+0x56>
 800df6e:	6883      	ldr	r3, [r0, #8]
 800df70:	b153      	cbz	r3, 800df88 <xQueueGiveFromISR+0x56>
 800df72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df76:	b672      	cpsid	i
 800df78:	f383 8811 	msr	BASEPRI, r3
 800df7c:	f3bf 8f6f 	isb	sy
 800df80:	f3bf 8f4f 	dsb	sy
 800df84:	b662      	cpsie	i
 800df86:	e7fe      	b.n	800df86 <xQueueGiveFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800df88:	f7ff fc8c 	bl	800d8a4 <vPortValidateInterruptPriority>
	__asm volatile
 800df8c:	f3ef 8611 	mrs	r6, BASEPRI
 800df90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df94:	b672      	cpsid	i
 800df96:	f383 8811 	msr	BASEPRI, r3
 800df9a:	f3bf 8f6f 	isb	sy
 800df9e:	f3bf 8f4f 	dsb	sy
 800dfa2:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dfa4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800dfa6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800dfa8:	4293      	cmp	r3, r2
 800dfaa:	d91c      	bls.n	800dfe6 <xQueueGiveFromISR+0xb4>
			const int8_t cTxLock = pxQueue->cTxLock;
 800dfac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dfb0:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 800dfb2:	29ff      	cmp	r1, #255	; 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 800dfb4:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dfb6:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 800dfb8:	d110      	bne.n	800dfdc <xQueueGiveFromISR+0xaa>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dfba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dfbc:	b90b      	cbnz	r3, 800dfc2 <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 800dfbe:	2001      	movs	r0, #1
 800dfc0:	e009      	b.n	800dfd6 <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dfc2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800dfc6:	f000 fe59 	bl	800ec7c <xTaskRemoveFromEventList>
 800dfca:	2800      	cmp	r0, #0
 800dfcc:	d0f7      	beq.n	800dfbe <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 800dfce:	2d00      	cmp	r5, #0
 800dfd0:	d0f5      	beq.n	800dfbe <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dfd2:	2001      	movs	r0, #1
 800dfd4:	6028      	str	r0, [r5, #0]
	__asm volatile
 800dfd6:	f386 8811 	msr	BASEPRI, r6
}
 800dfda:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800dfdc:	3301      	adds	r3, #1
 800dfde:	b25b      	sxtb	r3, r3
 800dfe0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dfe4:	e7eb      	b.n	800dfbe <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 800dfe6:	2000      	movs	r0, #0
 800dfe8:	e7f5      	b.n	800dfd6 <xQueueGiveFromISR+0xa4>

0800dfea <xQueueReceive>:
{
 800dfea:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800dfee:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 800dff0:	4604      	mov	r4, r0
{
 800dff2:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800dff4:	b950      	cbnz	r0, 800e00c <xQueueReceive+0x22>
	__asm volatile
 800dff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dffa:	b672      	cpsid	i
 800dffc:	f383 8811 	msr	BASEPRI, r3
 800e000:	f3bf 8f6f 	isb	sy
 800e004:	f3bf 8f4f 	dsb	sy
 800e008:	b662      	cpsie	i
 800e00a:	e7fe      	b.n	800e00a <xQueueReceive+0x20>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e00c:	b961      	cbnz	r1, 800e028 <xQueueReceive+0x3e>
 800e00e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800e010:	b153      	cbz	r3, 800e028 <xQueueReceive+0x3e>
 800e012:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e016:	b672      	cpsid	i
 800e018:	f383 8811 	msr	BASEPRI, r3
 800e01c:	f3bf 8f6f 	isb	sy
 800e020:	f3bf 8f4f 	dsb	sy
 800e024:	b662      	cpsie	i
 800e026:	e7fe      	b.n	800e026 <xQueueReceive+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e028:	f000 fec6 	bl	800edb8 <xTaskGetSchedulerState>
 800e02c:	4606      	mov	r6, r0
 800e02e:	b960      	cbnz	r0, 800e04a <xQueueReceive+0x60>
 800e030:	9b01      	ldr	r3, [sp, #4]
 800e032:	b15b      	cbz	r3, 800e04c <xQueueReceive+0x62>
 800e034:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e038:	b672      	cpsid	i
 800e03a:	f383 8811 	msr	BASEPRI, r3
 800e03e:	f3bf 8f6f 	isb	sy
 800e042:	f3bf 8f4f 	dsb	sy
 800e046:	b662      	cpsie	i
 800e048:	e7fe      	b.n	800e048 <xQueueReceive+0x5e>
 800e04a:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800e04c:	f04f 0800 	mov.w	r8, #0
 800e050:	e03d      	b.n	800e0ce <xQueueReceive+0xe4>
				if( xTicksToWait == ( TickType_t ) 0 )
 800e052:	9d01      	ldr	r5, [sp, #4]
 800e054:	b91d      	cbnz	r5, 800e05e <xQueueReceive+0x74>
					taskEXIT_CRITICAL();
 800e056:	f7ff fb49 	bl	800d6ec <vPortExitCritical>
				return errQUEUE_EMPTY;
 800e05a:	2000      	movs	r0, #0
 800e05c:	e056      	b.n	800e10c <xQueueReceive+0x122>
				else if( xEntryTimeSet == pdFALSE )
 800e05e:	b916      	cbnz	r6, 800e066 <xQueueReceive+0x7c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e060:	a802      	add	r0, sp, #8
 800e062:	f000 fe51 	bl	800ed08 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800e066:	f7ff fb41 	bl	800d6ec <vPortExitCritical>
		vTaskSuspendAll();
 800e06a:	f000 fbf1 	bl	800e850 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e06e:	f7ff fb19 	bl	800d6a4 <vPortEnterCritical>
 800e072:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800e076:	2bff      	cmp	r3, #255	; 0xff
 800e078:	d101      	bne.n	800e07e <xQueueReceive+0x94>
 800e07a:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 800e07e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800e082:	2bff      	cmp	r3, #255	; 0xff
 800e084:	d101      	bne.n	800e08a <xQueueReceive+0xa0>
 800e086:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 800e08a:	f7ff fb2f 	bl	800d6ec <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e08e:	a901      	add	r1, sp, #4
 800e090:	a802      	add	r0, sp, #8
 800e092:	f000 fe45 	bl	800ed20 <xTaskCheckForTimeOut>
 800e096:	2800      	cmp	r0, #0
 800e098:	d141      	bne.n	800e11e <xQueueReceive+0x134>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e09a:	4620      	mov	r0, r4
 800e09c:	f7ff fc34 	bl	800d908 <prvIsQueueEmpty>
 800e0a0:	b3b8      	cbz	r0, 800e112 <xQueueReceive+0x128>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e0a2:	9901      	ldr	r1, [sp, #4]
 800e0a4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800e0a8:	f000 fdac 	bl	800ec04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e0ac:	4620      	mov	r0, r4
 800e0ae:	f7ff fc80 	bl	800d9b2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e0b2:	f000 fc73 	bl	800e99c <xTaskResumeAll>
 800e0b6:	b948      	cbnz	r0, 800e0cc <xQueueReceive+0xe2>
					portYIELD_WITHIN_API();
 800e0b8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800e0bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0c0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800e0c4:	f3bf 8f4f 	dsb	sy
 800e0c8:	f3bf 8f6f 	isb	sy
 800e0cc:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800e0ce:	f7ff fae9 	bl	800d6a4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e0d2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e0d4:	2d00      	cmp	r5, #0
 800e0d6:	d0bc      	beq.n	800e052 <xQueueReceive+0x68>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e0d8:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e0da:	4639      	mov	r1, r7
 800e0dc:	4620      	mov	r0, r4
 800e0de:	f7ff fc53 	bl	800d988 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e0e2:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e0e4:	6923      	ldr	r3, [r4, #16]
 800e0e6:	b173      	cbz	r3, 800e106 <xQueueReceive+0x11c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e0e8:	f104 0010 	add.w	r0, r4, #16
 800e0ec:	f000 fdc6 	bl	800ec7c <xTaskRemoveFromEventList>
 800e0f0:	b148      	cbz	r0, 800e106 <xQueueReceive+0x11c>
						queueYIELD_IF_USING_PREEMPTION();
 800e0f2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800e0f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0fa:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800e0fe:	f3bf 8f4f 	dsb	sy
 800e102:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800e106:	f7ff faf1 	bl	800d6ec <vPortExitCritical>
				return pdPASS;
 800e10a:	2001      	movs	r0, #1
}
 800e10c:	b004      	add	sp, #16
 800e10e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 800e112:	4620      	mov	r0, r4
 800e114:	f7ff fc4d 	bl	800d9b2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e118:	f000 fc40 	bl	800e99c <xTaskResumeAll>
 800e11c:	e7d6      	b.n	800e0cc <xQueueReceive+0xe2>
			prvUnlockQueue( pxQueue );
 800e11e:	4620      	mov	r0, r4
 800e120:	f7ff fc47 	bl	800d9b2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e124:	f000 fc3a 	bl	800e99c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e128:	4620      	mov	r0, r4
 800e12a:	f7ff fbed 	bl	800d908 <prvIsQueueEmpty>
 800e12e:	2800      	cmp	r0, #0
 800e130:	d0cc      	beq.n	800e0cc <xQueueReceive+0xe2>
 800e132:	e792      	b.n	800e05a <xQueueReceive+0x70>

0800e134 <xQueueSemaphoreTake>:
{
 800e134:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e136:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 800e138:	4604      	mov	r4, r0
{
 800e13a:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800e13c:	b950      	cbnz	r0, 800e154 <xQueueSemaphoreTake+0x20>
 800e13e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e142:	b672      	cpsid	i
 800e144:	f383 8811 	msr	BASEPRI, r3
 800e148:	f3bf 8f6f 	isb	sy
 800e14c:	f3bf 8f4f 	dsb	sy
 800e150:	b662      	cpsie	i
 800e152:	e7fe      	b.n	800e152 <xQueueSemaphoreTake+0x1e>
	configASSERT( pxQueue->uxItemSize == 0 );
 800e154:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800e156:	b155      	cbz	r5, 800e16e <xQueueSemaphoreTake+0x3a>
 800e158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e15c:	b672      	cpsid	i
 800e15e:	f383 8811 	msr	BASEPRI, r3
 800e162:	f3bf 8f6f 	isb	sy
 800e166:	f3bf 8f4f 	dsb	sy
 800e16a:	b662      	cpsie	i
 800e16c:	e7fe      	b.n	800e16c <xQueueSemaphoreTake+0x38>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e16e:	f000 fe23 	bl	800edb8 <xTaskGetSchedulerState>
 800e172:	4606      	mov	r6, r0
 800e174:	b960      	cbnz	r0, 800e190 <xQueueSemaphoreTake+0x5c>
 800e176:	9b01      	ldr	r3, [sp, #4]
 800e178:	b16b      	cbz	r3, 800e196 <xQueueSemaphoreTake+0x62>
 800e17a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e17e:	b672      	cpsid	i
 800e180:	f383 8811 	msr	BASEPRI, r3
 800e184:	f3bf 8f6f 	isb	sy
 800e188:	f3bf 8f4f 	dsb	sy
 800e18c:	b662      	cpsie	i
 800e18e:	e7fe      	b.n	800e18e <xQueueSemaphoreTake+0x5a>
 800e190:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 800e192:	2700      	movs	r7, #0
 800e194:	e055      	b.n	800e242 <xQueueSemaphoreTake+0x10e>
 800e196:	4605      	mov	r5, r0
 800e198:	e7fb      	b.n	800e192 <xQueueSemaphoreTake+0x5e>
				if( xTicksToWait == ( TickType_t ) 0 )
 800e19a:	9b01      	ldr	r3, [sp, #4]
 800e19c:	b973      	cbnz	r3, 800e1bc <xQueueSemaphoreTake+0x88>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800e19e:	b155      	cbz	r5, 800e1b6 <xQueueSemaphoreTake+0x82>
 800e1a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1a4:	b672      	cpsid	i
 800e1a6:	f383 8811 	msr	BASEPRI, r3
 800e1aa:	f3bf 8f6f 	isb	sy
 800e1ae:	f3bf 8f4f 	dsb	sy
 800e1b2:	b662      	cpsie	i
 800e1b4:	e7fe      	b.n	800e1b4 <xQueueSemaphoreTake+0x80>
					taskEXIT_CRITICAL();
 800e1b6:	f7ff fa99 	bl	800d6ec <vPortExitCritical>
					return errQUEUE_EMPTY;
 800e1ba:	e062      	b.n	800e282 <xQueueSemaphoreTake+0x14e>
				else if( xEntryTimeSet == pdFALSE )
 800e1bc:	b916      	cbnz	r6, 800e1c4 <xQueueSemaphoreTake+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e1be:	a802      	add	r0, sp, #8
 800e1c0:	f000 fda2 	bl	800ed08 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800e1c4:	f7ff fa92 	bl	800d6ec <vPortExitCritical>
		vTaskSuspendAll();
 800e1c8:	f000 fb42 	bl	800e850 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e1cc:	f7ff fa6a 	bl	800d6a4 <vPortEnterCritical>
 800e1d0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800e1d4:	2bff      	cmp	r3, #255	; 0xff
 800e1d6:	d101      	bne.n	800e1dc <xQueueSemaphoreTake+0xa8>
 800e1d8:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 800e1dc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800e1e0:	2bff      	cmp	r3, #255	; 0xff
 800e1e2:	d101      	bne.n	800e1e8 <xQueueSemaphoreTake+0xb4>
 800e1e4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e1e8:	f7ff fa80 	bl	800d6ec <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e1ec:	a901      	add	r1, sp, #4
 800e1ee:	a802      	add	r0, sp, #8
 800e1f0:	f000 fd96 	bl	800ed20 <xTaskCheckForTimeOut>
 800e1f4:	2800      	cmp	r0, #0
 800e1f6:	d14d      	bne.n	800e294 <xQueueSemaphoreTake+0x160>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e1f8:	4620      	mov	r0, r4
 800e1fa:	f7ff fb85 	bl	800d908 <prvIsQueueEmpty>
 800e1fe:	2800      	cmp	r0, #0
 800e200:	d042      	beq.n	800e288 <xQueueSemaphoreTake+0x154>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e202:	6823      	ldr	r3, [r4, #0]
 800e204:	b93b      	cbnz	r3, 800e216 <xQueueSemaphoreTake+0xe2>
						taskENTER_CRITICAL();
 800e206:	f7ff fa4d 	bl	800d6a4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e20a:	68a0      	ldr	r0, [r4, #8]
 800e20c:	f000 fde4 	bl	800edd8 <xTaskPriorityInherit>
 800e210:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800e212:	f7ff fa6b 	bl	800d6ec <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e216:	9901      	ldr	r1, [sp, #4]
 800e218:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800e21c:	f000 fcf2 	bl	800ec04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e220:	4620      	mov	r0, r4
 800e222:	f7ff fbc6 	bl	800d9b2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e226:	f000 fbb9 	bl	800e99c <xTaskResumeAll>
 800e22a:	b948      	cbnz	r0, 800e240 <xQueueSemaphoreTake+0x10c>
					portYIELD_WITHIN_API();
 800e22c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800e230:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e234:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800e238:	f3bf 8f4f 	dsb	sy
 800e23c:	f3bf 8f6f 	isb	sy
 800e240:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800e242:	f7ff fa2f 	bl	800d6a4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800e246:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d0a6      	beq.n	800e19a <xQueueSemaphoreTake+0x66>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800e24c:	3b01      	subs	r3, #1
 800e24e:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e250:	6823      	ldr	r3, [r4, #0]
 800e252:	b913      	cbnz	r3, 800e25a <xQueueSemaphoreTake+0x126>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800e254:	f000 fe9e 	bl	800ef94 <pvTaskIncrementMutexHeldCount>
 800e258:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e25a:	6923      	ldr	r3, [r4, #16]
 800e25c:	b173      	cbz	r3, 800e27c <xQueueSemaphoreTake+0x148>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e25e:	f104 0010 	add.w	r0, r4, #16
 800e262:	f000 fd0b 	bl	800ec7c <xTaskRemoveFromEventList>
 800e266:	b148      	cbz	r0, 800e27c <xQueueSemaphoreTake+0x148>
						queueYIELD_IF_USING_PREEMPTION();
 800e268:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800e26c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e270:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800e274:	f3bf 8f4f 	dsb	sy
 800e278:	f3bf 8f6f 	isb	sy
				return pdPASS;
 800e27c:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 800e27e:	f7ff fa35 	bl	800d6ec <vPortExitCritical>
}
 800e282:	4628      	mov	r0, r5
 800e284:	b005      	add	sp, #20
 800e286:	bdf0      	pop	{r4, r5, r6, r7, pc}
				prvUnlockQueue( pxQueue );
 800e288:	4620      	mov	r0, r4
 800e28a:	f7ff fb92 	bl	800d9b2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e28e:	f000 fb85 	bl	800e99c <xTaskResumeAll>
 800e292:	e7d5      	b.n	800e240 <xQueueSemaphoreTake+0x10c>
			prvUnlockQueue( pxQueue );
 800e294:	4620      	mov	r0, r4
 800e296:	f7ff fb8c 	bl	800d9b2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e29a:	f000 fb7f 	bl	800e99c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e29e:	4620      	mov	r0, r4
 800e2a0:	f7ff fb32 	bl	800d908 <prvIsQueueEmpty>
 800e2a4:	2800      	cmp	r0, #0
 800e2a6:	d0cb      	beq.n	800e240 <xQueueSemaphoreTake+0x10c>
					if( xInheritanceOccurred != pdFALSE )
 800e2a8:	2d00      	cmp	r5, #0
 800e2aa:	d0ea      	beq.n	800e282 <xQueueSemaphoreTake+0x14e>
						taskENTER_CRITICAL();
 800e2ac:	f7ff f9fa 	bl	800d6a4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800e2b0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e2b2:	b119      	cbz	r1, 800e2bc <xQueueSemaphoreTake+0x188>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e2b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e2b6:	6819      	ldr	r1, [r3, #0]
 800e2b8:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800e2bc:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 800e2be:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800e2c0:	f000 fe12 	bl	800eee8 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800e2c4:	f7ff fa12 	bl	800d6ec <vPortExitCritical>
 800e2c8:	e7db      	b.n	800e282 <xQueueSemaphoreTake+0x14e>

0800e2ca <xQueueTakeMutexRecursive>:
	{
 800e2ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
		configASSERT( pxMutex );
 800e2cc:	4604      	mov	r4, r0
 800e2ce:	b950      	cbnz	r0, 800e2e6 <xQueueTakeMutexRecursive+0x1c>
 800e2d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2d4:	b672      	cpsid	i
 800e2d6:	f383 8811 	msr	BASEPRI, r3
 800e2da:	f3bf 8f6f 	isb	sy
 800e2de:	f3bf 8f4f 	dsb	sy
 800e2e2:	b662      	cpsie	i
 800e2e4:	e7fe      	b.n	800e2e4 <xQueueTakeMutexRecursive+0x1a>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800e2e6:	6885      	ldr	r5, [r0, #8]
 800e2e8:	9101      	str	r1, [sp, #4]
 800e2ea:	f000 fd5f 	bl	800edac <xTaskGetCurrentTaskHandle>
 800e2ee:	4285      	cmp	r5, r0
 800e2f0:	9901      	ldr	r1, [sp, #4]
 800e2f2:	d105      	bne.n	800e300 <xQueueTakeMutexRecursive+0x36>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e2f4:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 800e2f6:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e2f8:	3301      	adds	r3, #1
 800e2fa:	60e3      	str	r3, [r4, #12]
	}
 800e2fc:	b003      	add	sp, #12
 800e2fe:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800e300:	4620      	mov	r0, r4
 800e302:	f7ff ff17 	bl	800e134 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 800e306:	2800      	cmp	r0, #0
 800e308:	d0f8      	beq.n	800e2fc <xQueueTakeMutexRecursive+0x32>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e30a:	68e3      	ldr	r3, [r4, #12]
 800e30c:	3301      	adds	r3, #1
 800e30e:	60e3      	str	r3, [r4, #12]
		return xReturn;
 800e310:	e7f4      	b.n	800e2fc <xQueueTakeMutexRecursive+0x32>

0800e312 <xQueueReceiveFromISR>:
{
 800e312:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e316:	4689      	mov	r9, r1
 800e318:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800e31a:	4605      	mov	r5, r0
 800e31c:	b950      	cbnz	r0, 800e334 <xQueueReceiveFromISR+0x22>
 800e31e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e322:	b672      	cpsid	i
 800e324:	f383 8811 	msr	BASEPRI, r3
 800e328:	f3bf 8f6f 	isb	sy
 800e32c:	f3bf 8f4f 	dsb	sy
 800e330:	b662      	cpsie	i
 800e332:	e7fe      	b.n	800e332 <xQueueReceiveFromISR+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e334:	b961      	cbnz	r1, 800e350 <xQueueReceiveFromISR+0x3e>
 800e336:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800e338:	b153      	cbz	r3, 800e350 <xQueueReceiveFromISR+0x3e>
 800e33a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e33e:	b672      	cpsid	i
 800e340:	f383 8811 	msr	BASEPRI, r3
 800e344:	f3bf 8f6f 	isb	sy
 800e348:	f3bf 8f4f 	dsb	sy
 800e34c:	b662      	cpsie	i
 800e34e:	e7fe      	b.n	800e34e <xQueueReceiveFromISR+0x3c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e350:	f7ff faa8 	bl	800d8a4 <vPortValidateInterruptPriority>
	__asm volatile
 800e354:	f3ef 8711 	mrs	r7, BASEPRI
 800e358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e35c:	b672      	cpsid	i
 800e35e:	f383 8811 	msr	BASEPRI, r3
 800e362:	f3bf 8f6f 	isb	sy
 800e366:	f3bf 8f4f 	dsb	sy
 800e36a:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e36c:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e36e:	b31c      	cbz	r4, 800e3b8 <xQueueReceiveFromISR+0xa6>
			const int8_t cRxLock = pxQueue->cRxLock;
 800e370:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e374:	4649      	mov	r1, r9
 800e376:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e378:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 800e37a:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e37c:	f7ff fb04 	bl	800d988 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e380:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800e382:	1c73      	adds	r3, r6, #1
 800e384:	d113      	bne.n	800e3ae <xQueueReceiveFromISR+0x9c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e386:	692b      	ldr	r3, [r5, #16]
 800e388:	b90b      	cbnz	r3, 800e38e <xQueueReceiveFromISR+0x7c>
			xReturn = pdPASS;
 800e38a:	2001      	movs	r0, #1
 800e38c:	e00b      	b.n	800e3a6 <xQueueReceiveFromISR+0x94>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e38e:	f105 0010 	add.w	r0, r5, #16
 800e392:	f000 fc73 	bl	800ec7c <xTaskRemoveFromEventList>
 800e396:	2800      	cmp	r0, #0
 800e398:	d0f7      	beq.n	800e38a <xQueueReceiveFromISR+0x78>
						if( pxHigherPriorityTaskWoken != NULL )
 800e39a:	f1b8 0f00 	cmp.w	r8, #0
 800e39e:	d0f4      	beq.n	800e38a <xQueueReceiveFromISR+0x78>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e3a0:	2001      	movs	r0, #1
 800e3a2:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 800e3a6:	f387 8811 	msr	BASEPRI, r7
}
 800e3aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e3ae:	3601      	adds	r6, #1
 800e3b0:	b276      	sxtb	r6, r6
 800e3b2:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 800e3b6:	e7e8      	b.n	800e38a <xQueueReceiveFromISR+0x78>
			xReturn = pdFAIL;
 800e3b8:	4620      	mov	r0, r4
 800e3ba:	e7f4      	b.n	800e3a6 <xQueueReceiveFromISR+0x94>

0800e3bc <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e3bc:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e3be:	4a07      	ldr	r2, [pc, #28]	; (800e3dc <vQueueAddToRegistry+0x20>)
	{
 800e3c0:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e3c2:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 800e3c6:	b92c      	cbnz	r4, 800e3d4 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e3c8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e3cc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e3d0:	6058      	str	r0, [r3, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e3d2:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e3d4:	3301      	adds	r3, #1
 800e3d6:	2b08      	cmp	r3, #8
 800e3d8:	d1f3      	bne.n	800e3c2 <vQueueAddToRegistry+0x6>
 800e3da:	e7fa      	b.n	800e3d2 <vQueueAddToRegistry+0x16>
 800e3dc:	20026510 	.word	0x20026510

0800e3e0 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e3e0:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800e3e2:	4a08      	ldr	r2, [pc, #32]	; (800e404 <vQueueUnregisterQueue+0x24>)
	{
 800e3e4:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800e3e6:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800e3ea:	684c      	ldr	r4, [r1, #4]
 800e3ec:	4284      	cmp	r4, r0
 800e3ee:	d104      	bne.n	800e3fa <vQueueUnregisterQueue+0x1a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800e3f0:	2000      	movs	r0, #0
 800e3f2:	f842 0033 	str.w	r0, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800e3f6:	6048      	str	r0, [r1, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800e3f8:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e3fa:	3301      	adds	r3, #1
 800e3fc:	2b08      	cmp	r3, #8
 800e3fe:	d1f2      	bne.n	800e3e6 <vQueueUnregisterQueue+0x6>
 800e400:	e7fa      	b.n	800e3f8 <vQueueUnregisterQueue+0x18>
 800e402:	bf00      	nop
 800e404:	20026510 	.word	0x20026510

0800e408 <vQueueDelete>:
{
 800e408:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 800e40a:	4604      	mov	r4, r0
 800e40c:	b950      	cbnz	r0, 800e424 <vQueueDelete+0x1c>
	__asm volatile
 800e40e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e412:	b672      	cpsid	i
 800e414:	f383 8811 	msr	BASEPRI, r3
 800e418:	f3bf 8f6f 	isb	sy
 800e41c:	f3bf 8f4f 	dsb	sy
 800e420:	b662      	cpsie	i
 800e422:	e7fe      	b.n	800e422 <vQueueDelete+0x1a>
		vQueueUnregisterQueue( pxQueue );
 800e424:	f7ff ffdc 	bl	800e3e0 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800e428:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800e42c:	b923      	cbnz	r3, 800e438 <vQueueDelete+0x30>
			vPortFree( pxQueue );
 800e42e:	4620      	mov	r0, r4
}
 800e430:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 800e434:	f7ff b84c 	b.w	800d4d0 <vPortFree>
}
 800e438:	bd10      	pop	{r4, pc}

0800e43a <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e43a:	b570      	push	{r4, r5, r6, lr}
 800e43c:	4604      	mov	r4, r0
 800e43e:	460d      	mov	r5, r1
 800e440:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e442:	f7ff f92f 	bl	800d6a4 <vPortEnterCritical>
 800e446:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800e44a:	2bff      	cmp	r3, #255	; 0xff
 800e44c:	d102      	bne.n	800e454 <vQueueWaitForMessageRestricted+0x1a>
 800e44e:	2300      	movs	r3, #0
 800e450:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800e454:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800e458:	2bff      	cmp	r3, #255	; 0xff
 800e45a:	d102      	bne.n	800e462 <vQueueWaitForMessageRestricted+0x28>
 800e45c:	2300      	movs	r3, #0
 800e45e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e462:	f7ff f943 	bl	800d6ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e466:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e468:	b92b      	cbnz	r3, 800e476 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e46a:	4632      	mov	r2, r6
 800e46c:	4629      	mov	r1, r5
 800e46e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800e472:	f000 fbe3 	bl	800ec3c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e476:	4620      	mov	r0, r4
	}
 800e478:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 800e47c:	f7ff ba99 	b.w	800d9b2 <prvUnlockQueue>

0800e480 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e484:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e486:	f7ff f90d 	bl	800d6a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e48a:	4b2f      	ldr	r3, [pc, #188]	; (800e548 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 800e48c:	4e2f      	ldr	r6, [pc, #188]	; (800e54c <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 800e48e:	681a      	ldr	r2, [r3, #0]
 800e490:	4f2f      	ldr	r7, [pc, #188]	; (800e550 <prvAddNewTaskToReadyList+0xd0>)
 800e492:	3201      	adds	r2, #1
 800e494:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800e496:	6835      	ldr	r5, [r6, #0]
 800e498:	2d00      	cmp	r5, #0
 800e49a:	d14a      	bne.n	800e532 <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e49c:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	2b01      	cmp	r3, #1
 800e4a2:	d11f      	bne.n	800e4e4 <prvAddNewTaskToReadyList+0x64>
 800e4a4:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e4a6:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e4a8:	4640      	mov	r0, r8
 800e4aa:	f7ff f84d 	bl	800d548 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e4ae:	f108 0814 	add.w	r8, r8, #20
 800e4b2:	2d38      	cmp	r5, #56	; 0x38
 800e4b4:	d1f7      	bne.n	800e4a6 <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e4b6:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800e578 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 800e4ba:	4d26      	ldr	r5, [pc, #152]	; (800e554 <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 800e4bc:	4640      	mov	r0, r8
 800e4be:	f7ff f843 	bl	800d548 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e4c2:	4628      	mov	r0, r5
 800e4c4:	f7ff f840 	bl	800d548 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e4c8:	4823      	ldr	r0, [pc, #140]	; (800e558 <prvAddNewTaskToReadyList+0xd8>)
 800e4ca:	f7ff f83d 	bl	800d548 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e4ce:	4823      	ldr	r0, [pc, #140]	; (800e55c <prvAddNewTaskToReadyList+0xdc>)
 800e4d0:	f7ff f83a 	bl	800d548 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e4d4:	4822      	ldr	r0, [pc, #136]	; (800e560 <prvAddNewTaskToReadyList+0xe0>)
 800e4d6:	f7ff f837 	bl	800d548 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e4da:	4b22      	ldr	r3, [pc, #136]	; (800e564 <prvAddNewTaskToReadyList+0xe4>)
 800e4dc:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e4e0:	4b21      	ldr	r3, [pc, #132]	; (800e568 <prvAddNewTaskToReadyList+0xe8>)
 800e4e2:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800e4e4:	4a21      	ldr	r2, [pc, #132]	; (800e56c <prvAddNewTaskToReadyList+0xec>)
 800e4e6:	6813      	ldr	r3, [r2, #0]
 800e4e8:	3301      	adds	r3, #1
 800e4ea:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800e4ec:	4a20      	ldr	r2, [pc, #128]	; (800e570 <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e4ee:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800e4f0:	6811      	ldr	r1, [r2, #0]
 800e4f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e4f4:	428b      	cmp	r3, r1
 800e4f6:	d900      	bls.n	800e4fa <prvAddNewTaskToReadyList+0x7a>
 800e4f8:	6013      	str	r3, [r2, #0]
 800e4fa:	2014      	movs	r0, #20
 800e4fc:	1d21      	adds	r1, r4, #4
 800e4fe:	fb00 7003 	mla	r0, r0, r3, r7
 800e502:	f7ff f82f 	bl	800d564 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800e506:	f7ff f8f1 	bl	800d6ec <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800e50a:	4b1a      	ldr	r3, [pc, #104]	; (800e574 <prvAddNewTaskToReadyList+0xf4>)
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	b173      	cbz	r3, 800e52e <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e510:	6833      	ldr	r3, [r6, #0]
 800e512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e514:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e516:	429a      	cmp	r2, r3
 800e518:	d209      	bcs.n	800e52e <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 800e51a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800e51e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e522:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800e526:	f3bf 8f4f 	dsb	sy
 800e52a:	f3bf 8f6f 	isb	sy
}
 800e52e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 800e532:	4b10      	ldr	r3, [pc, #64]	; (800e574 <prvAddNewTaskToReadyList+0xf4>)
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d1d4      	bne.n	800e4e4 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e53a:	6833      	ldr	r3, [r6, #0]
 800e53c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e53e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e540:	429a      	cmp	r2, r3
 800e542:	d8cf      	bhi.n	800e4e4 <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 800e544:	6034      	str	r4, [r6, #0]
 800e546:	e7cd      	b.n	800e4e4 <prvAddNewTaskToReadyList+0x64>
 800e548:	200269bc 	.word	0x200269bc
 800e54c:	20026550 	.word	0x20026550
 800e550:	2002655c 	.word	0x2002655c
 800e554:	200269e8 	.word	0x200269e8
 800e558:	20026a04 	.word	0x20026a04
 800e55c:	20026a30 	.word	0x20026a30
 800e560:	20026a1c 	.word	0x20026a1c
 800e564:	20026554 	.word	0x20026554
 800e568:	20026558 	.word	0x20026558
 800e56c:	200269cc 	.word	0x200269cc
 800e570:	200269d0 	.word	0x200269d0
 800e574:	20026a18 	.word	0x20026a18
 800e578:	200269d4 	.word	0x200269d4

0800e57c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e57c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e57e:	4b15      	ldr	r3, [pc, #84]	; (800e5d4 <prvAddCurrentTaskToDelayedList+0x58>)
{
 800e580:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e582:	4e15      	ldr	r6, [pc, #84]	; (800e5d8 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 800e584:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 800e586:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e588:	6830      	ldr	r0, [r6, #0]
 800e58a:	3004      	adds	r0, #4
 800e58c:	f7ff f80d 	bl	800d5aa <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e590:	1c63      	adds	r3, r4, #1
 800e592:	d107      	bne.n	800e5a4 <prvAddCurrentTaskToDelayedList+0x28>
 800e594:	b137      	cbz	r7, 800e5a4 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e596:	6831      	ldr	r1, [r6, #0]
 800e598:	4810      	ldr	r0, [pc, #64]	; (800e5dc <prvAddCurrentTaskToDelayedList+0x60>)
 800e59a:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e59c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e5a0:	f7fe bfe0 	b.w	800d564 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e5a4:	192c      	adds	r4, r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e5a6:	6833      	ldr	r3, [r6, #0]
 800e5a8:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e5aa:	d307      	bcc.n	800e5bc <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e5ac:	4b0c      	ldr	r3, [pc, #48]	; (800e5e0 <prvAddCurrentTaskToDelayedList+0x64>)
 800e5ae:	6818      	ldr	r0, [r3, #0]
 800e5b0:	6831      	ldr	r1, [r6, #0]
}
 800e5b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e5b6:	3104      	adds	r1, #4
 800e5b8:	f7fe bfe0 	b.w	800d57c <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e5bc:	4b09      	ldr	r3, [pc, #36]	; (800e5e4 <prvAddCurrentTaskToDelayedList+0x68>)
 800e5be:	6818      	ldr	r0, [r3, #0]
 800e5c0:	6831      	ldr	r1, [r6, #0]
 800e5c2:	3104      	adds	r1, #4
 800e5c4:	f7fe ffda 	bl	800d57c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e5c8:	4b07      	ldr	r3, [pc, #28]	; (800e5e8 <prvAddCurrentTaskToDelayedList+0x6c>)
 800e5ca:	681a      	ldr	r2, [r3, #0]
 800e5cc:	42a2      	cmp	r2, r4
 800e5ce:	d900      	bls.n	800e5d2 <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 800e5d0:	601c      	str	r4, [r3, #0]
}
 800e5d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5d4:	20026a44 	.word	0x20026a44
 800e5d8:	20026550 	.word	0x20026550
 800e5dc:	20026a1c 	.word	0x20026a1c
 800e5e0:	20026558 	.word	0x20026558
 800e5e4:	20026554 	.word	0x20026554
 800e5e8:	200269fc 	.word	0x200269fc

0800e5ec <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e5ec:	4a06      	ldr	r2, [pc, #24]	; (800e608 <prvResetNextTaskUnblockTime+0x1c>)
 800e5ee:	6813      	ldr	r3, [r2, #0]
 800e5f0:	6819      	ldr	r1, [r3, #0]
 800e5f2:	4b06      	ldr	r3, [pc, #24]	; (800e60c <prvResetNextTaskUnblockTime+0x20>)
 800e5f4:	b919      	cbnz	r1, 800e5fe <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 800e5f6:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e5fa:	601a      	str	r2, [r3, #0]
}
 800e5fc:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e5fe:	6812      	ldr	r2, [r2, #0]
 800e600:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e602:	68d2      	ldr	r2, [r2, #12]
 800e604:	6852      	ldr	r2, [r2, #4]
 800e606:	e7f8      	b.n	800e5fa <prvResetNextTaskUnblockTime+0xe>
 800e608:	20026554 	.word	0x20026554
 800e60c:	200269fc 	.word	0x200269fc

0800e610 <prvDeleteTCB>:
	{
 800e610:	b510      	push	{r4, lr}
 800e612:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e614:	3058      	adds	r0, #88	; 0x58
 800e616:	f018 f865 	bl	80266e4 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e61a:	f894 30bd 	ldrb.w	r3, [r4, #189]	; 0xbd
 800e61e:	b93b      	cbnz	r3, 800e630 <prvDeleteTCB+0x20>
				vPortFree( pxTCB->pxStack );
 800e620:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800e622:	f7fe ff55 	bl	800d4d0 <vPortFree>
				vPortFree( pxTCB );
 800e626:	4620      	mov	r0, r4
	}
 800e628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800e62c:	f7fe bf50 	b.w	800d4d0 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e630:	2b01      	cmp	r3, #1
 800e632:	d0f8      	beq.n	800e626 <prvDeleteTCB+0x16>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e634:	2b02      	cmp	r3, #2
 800e636:	d00a      	beq.n	800e64e <prvDeleteTCB+0x3e>
 800e638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e63c:	b672      	cpsid	i
 800e63e:	f383 8811 	msr	BASEPRI, r3
 800e642:	f3bf 8f6f 	isb	sy
 800e646:	f3bf 8f4f 	dsb	sy
 800e64a:	b662      	cpsie	i
 800e64c:	e7fe      	b.n	800e64c <prvDeleteTCB+0x3c>
	}
 800e64e:	bd10      	pop	{r4, pc}

0800e650 <prvIdleTask>:
{
 800e650:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e652:	4c14      	ldr	r4, [pc, #80]	; (800e6a4 <prvIdleTask+0x54>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e654:	4f14      	ldr	r7, [pc, #80]	; (800e6a8 <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 800e656:	4d15      	ldr	r5, [pc, #84]	; (800e6ac <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e658:	6823      	ldr	r3, [r4, #0]
 800e65a:	b983      	cbnz	r3, 800e67e <prvIdleTask+0x2e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e65c:	4b14      	ldr	r3, [pc, #80]	; (800e6b0 <prvIdleTask+0x60>)
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	2b01      	cmp	r3, #1
 800e662:	d909      	bls.n	800e678 <prvIdleTask+0x28>
				taskYIELD();
 800e664:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800e668:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e66c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800e670:	f3bf 8f4f 	dsb	sy
 800e674:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 800e678:	f7f5 faa4 	bl	8003bc4 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800e67c:	e7eb      	b.n	800e656 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 800e67e:	f7ff f811 	bl	800d6a4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e686:	1d30      	adds	r0, r6, #4
 800e688:	f7fe ff8f 	bl	800d5aa <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e68c:	682b      	ldr	r3, [r5, #0]
 800e68e:	3b01      	subs	r3, #1
 800e690:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e692:	6823      	ldr	r3, [r4, #0]
 800e694:	3b01      	subs	r3, #1
 800e696:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800e698:	f7ff f828 	bl	800d6ec <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800e69c:	4630      	mov	r0, r6
 800e69e:	f7ff ffb7 	bl	800e610 <prvDeleteTCB>
 800e6a2:	e7d9      	b.n	800e658 <prvIdleTask+0x8>
 800e6a4:	200269c0 	.word	0x200269c0
 800e6a8:	20026a30 	.word	0x20026a30
 800e6ac:	200269bc 	.word	0x200269bc
 800e6b0:	2002655c 	.word	0x2002655c

0800e6b4 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800e6b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e6b8:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800e6bc:	4606      	mov	r6, r0
 800e6be:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e6c0:	21a5      	movs	r1, #165	; 0xa5
 800e6c2:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800e6c4:	461f      	mov	r7, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e6c6:	f1a9 0904 	sub.w	r9, r9, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800e6ca:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e6ce:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800e6d0:	f017 fc24 	bl	8025f1c <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e6d4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800e6d6:	4491      	add	r9, r2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e6d8:	f029 0907 	bic.w	r9, r9, #7
	if( pcName != NULL )
 800e6dc:	2d00      	cmp	r5, #0
 800e6de:	d042      	beq.n	800e766 <prvInitialiseNewTask.constprop.0+0xb2>
 800e6e0:	1e6b      	subs	r3, r5, #1
 800e6e2:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800e6e6:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e6e8:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800e6ec:	f802 0b01 	strb.w	r0, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 800e6f0:	b108      	cbz	r0, 800e6f6 <prvInitialiseNewTask.constprop.0+0x42>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e6f2:	42ab      	cmp	r3, r5
 800e6f4:	d1f8      	bne.n	800e6e8 <prvInitialiseNewTask.constprop.0+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e6f6:	2300      	movs	r3, #0
 800e6f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e6fc:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 800e6fe:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e702:	1d20      	adds	r0, r4, #4
 800e704:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 800e706:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
 800e70a:	bf28      	it	cs
 800e70c:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 800e70e:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800e710:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e712:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e716:	f7fe ff22 	bl	800d55e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e71a:	f104 0018 	add.w	r0, r4, #24
 800e71e:	f7fe ff1e 	bl	800d55e <vListInitialiseItem>
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e722:	2260      	movs	r2, #96	; 0x60
 800e724:	4651      	mov	r1, sl
		pxNewTCB->ulNotifiedValue = 0;
 800e726:	f8c4 a0b8 	str.w	sl, [r4, #184]	; 0xb8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e72a:	f104 0058 	add.w	r0, r4, #88	; 0x58
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e72e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e730:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e732:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
 800e734:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e738:	f884 a0bc 	strb.w	sl, [r4, #188]	; 0xbc
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e73c:	f017 fbee 	bl	8025f1c <memset>
 800e740:	4b0a      	ldr	r3, [pc, #40]	; (800e76c <prvInitialiseNewTask.constprop.0+0xb8>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e742:	463a      	mov	r2, r7
 800e744:	4631      	mov	r1, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e746:	65e3      	str	r3, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e748:	4648      	mov	r0, r9
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e74a:	4b09      	ldr	r3, [pc, #36]	; (800e770 <prvInitialiseNewTask.constprop.0+0xbc>)
 800e74c:	6623      	str	r3, [r4, #96]	; 0x60
 800e74e:	4b09      	ldr	r3, [pc, #36]	; (800e774 <prvInitialiseNewTask.constprop.0+0xc0>)
 800e750:	6663      	str	r3, [r4, #100]	; 0x64
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e752:	f7fe ff7d 	bl	800d650 <pxPortInitialiseStack>
 800e756:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800e758:	f1b8 0f00 	cmp.w	r8, #0
 800e75c:	d001      	beq.n	800e762 <prvInitialiseNewTask.constprop.0+0xae>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e75e:	f8c8 4000 	str.w	r4, [r8]
}
 800e762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e766:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 800e76a:	e7c7      	b.n	800e6fc <prvInitialiseNewTask.constprop.0+0x48>
 800e76c:	0802b6c0 	.word	0x0802b6c0
 800e770:	0802b6e0 	.word	0x0802b6e0
 800e774:	0802b6a0 	.word	0x0802b6a0

0800e778 <xTaskCreateStatic>:
	{
 800e778:	b570      	push	{r4, r5, r6, lr}
 800e77a:	b086      	sub	sp, #24
 800e77c:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 800e780:	b955      	cbnz	r5, 800e798 <xTaskCreateStatic+0x20>
 800e782:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e786:	b672      	cpsid	i
 800e788:	f383 8811 	msr	BASEPRI, r3
 800e78c:	f3bf 8f6f 	isb	sy
 800e790:	f3bf 8f4f 	dsb	sy
 800e794:	b662      	cpsie	i
 800e796:	e7fe      	b.n	800e796 <xTaskCreateStatic+0x1e>
		configASSERT( pxTaskBuffer != NULL );
 800e798:	b954      	cbnz	r4, 800e7b0 <xTaskCreateStatic+0x38>
 800e79a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e79e:	b672      	cpsid	i
 800e7a0:	f383 8811 	msr	BASEPRI, r3
 800e7a4:	f3bf 8f6f 	isb	sy
 800e7a8:	f3bf 8f4f 	dsb	sy
 800e7ac:	b662      	cpsie	i
 800e7ae:	e7fe      	b.n	800e7ae <xTaskCreateStatic+0x36>
			volatile size_t xSize = sizeof( StaticTask_t );
 800e7b0:	26c0      	movs	r6, #192	; 0xc0
 800e7b2:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e7b4:	9e05      	ldr	r6, [sp, #20]
 800e7b6:	2ec0      	cmp	r6, #192	; 0xc0
 800e7b8:	d00a      	beq.n	800e7d0 <xTaskCreateStatic+0x58>
 800e7ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7be:	b672      	cpsid	i
 800e7c0:	f383 8811 	msr	BASEPRI, r3
 800e7c4:	f3bf 8f6f 	isb	sy
 800e7c8:	f3bf 8f4f 	dsb	sy
 800e7cc:	b662      	cpsie	i
 800e7ce:	e7fe      	b.n	800e7ce <xTaskCreateStatic+0x56>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e7d0:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e7d2:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e7d4:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e7d6:	f884 50bd 	strb.w	r5, [r4, #189]	; 0xbd
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e7da:	ad04      	add	r5, sp, #16
 800e7dc:	9402      	str	r4, [sp, #8]
 800e7de:	9501      	str	r5, [sp, #4]
 800e7e0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800e7e2:	9500      	str	r5, [sp, #0]
 800e7e4:	f7ff ff66 	bl	800e6b4 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e7e8:	4620      	mov	r0, r4
 800e7ea:	f7ff fe49 	bl	800e480 <prvAddNewTaskToReadyList>
	}
 800e7ee:	9804      	ldr	r0, [sp, #16]
 800e7f0:	b006      	add	sp, #24
 800e7f2:	bd70      	pop	{r4, r5, r6, pc}

0800e7f4 <xTaskCreate>:
	{
 800e7f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e7f8:	4607      	mov	r7, r0
 800e7fa:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e7fc:	0090      	lsls	r0, r2, #2
	{
 800e7fe:	4688      	mov	r8, r1
 800e800:	4616      	mov	r6, r2
 800e802:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e804:	f7fe fdce 	bl	800d3a4 <pvPortMalloc>
			if( pxStack != NULL )
 800e808:	4605      	mov	r5, r0
 800e80a:	b1e8      	cbz	r0, 800e848 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e80c:	20c0      	movs	r0, #192	; 0xc0
 800e80e:	f7fe fdc9 	bl	800d3a4 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800e812:	4604      	mov	r4, r0
 800e814:	b1a8      	cbz	r0, 800e842 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e816:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 800e818:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e81a:	4632      	mov	r2, r6
 800e81c:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e81e:	f880 30bd 	strb.w	r3, [r0, #189]	; 0xbd
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e822:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e824:	9002      	str	r0, [sp, #8]
 800e826:	4638      	mov	r0, r7
 800e828:	9301      	str	r3, [sp, #4]
 800e82a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e82c:	9300      	str	r3, [sp, #0]
 800e82e:	464b      	mov	r3, r9
 800e830:	f7ff ff40 	bl	800e6b4 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e834:	4620      	mov	r0, r4
 800e836:	f7ff fe23 	bl	800e480 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e83a:	2001      	movs	r0, #1
	}
 800e83c:	b005      	add	sp, #20
 800e83e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 800e842:	4628      	mov	r0, r5
 800e844:	f7fe fe44 	bl	800d4d0 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e848:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 800e84c:	e7f6      	b.n	800e83c <xTaskCreate+0x48>
	...

0800e850 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800e850:	4a02      	ldr	r2, [pc, #8]	; (800e85c <vTaskSuspendAll+0xc>)
 800e852:	6813      	ldr	r3, [r2, #0]
 800e854:	3301      	adds	r3, #1
 800e856:	6013      	str	r3, [r2, #0]
}
 800e858:	4770      	bx	lr
 800e85a:	bf00      	nop
 800e85c:	200269c8 	.word	0x200269c8

0800e860 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800e860:	4b01      	ldr	r3, [pc, #4]	; (800e868 <xTaskGetTickCount+0x8>)
 800e862:	6818      	ldr	r0, [r3, #0]
}
 800e864:	4770      	bx	lr
 800e866:	bf00      	nop
 800e868:	20026a44 	.word	0x20026a44

0800e86c <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e86c:	4b40      	ldr	r3, [pc, #256]	; (800e970 <xTaskIncrementTick+0x104>)
 800e86e:	681b      	ldr	r3, [r3, #0]
{
 800e870:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e874:	2b00      	cmp	r3, #0
 800e876:	d174      	bne.n	800e962 <xTaskIncrementTick+0xf6>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e878:	4b3e      	ldr	r3, [pc, #248]	; (800e974 <xTaskIncrementTick+0x108>)
 800e87a:	681d      	ldr	r5, [r3, #0]
 800e87c:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800e87e:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e880:	b9cd      	cbnz	r5, 800e8b6 <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 800e882:	4b3d      	ldr	r3, [pc, #244]	; (800e978 <xTaskIncrementTick+0x10c>)
 800e884:	681a      	ldr	r2, [r3, #0]
 800e886:	6812      	ldr	r2, [r2, #0]
 800e888:	b152      	cbz	r2, 800e8a0 <xTaskIncrementTick+0x34>
 800e88a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e88e:	b672      	cpsid	i
 800e890:	f383 8811 	msr	BASEPRI, r3
 800e894:	f3bf 8f6f 	isb	sy
 800e898:	f3bf 8f4f 	dsb	sy
 800e89c:	b662      	cpsie	i
 800e89e:	e7fe      	b.n	800e89e <xTaskIncrementTick+0x32>
 800e8a0:	4a36      	ldr	r2, [pc, #216]	; (800e97c <xTaskIncrementTick+0x110>)
 800e8a2:	6819      	ldr	r1, [r3, #0]
 800e8a4:	6810      	ldr	r0, [r2, #0]
 800e8a6:	6018      	str	r0, [r3, #0]
 800e8a8:	6011      	str	r1, [r2, #0]
 800e8aa:	4a35      	ldr	r2, [pc, #212]	; (800e980 <xTaskIncrementTick+0x114>)
 800e8ac:	6813      	ldr	r3, [r2, #0]
 800e8ae:	3301      	adds	r3, #1
 800e8b0:	6013      	str	r3, [r2, #0]
 800e8b2:	f7ff fe9b 	bl	800e5ec <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e8b6:	4e33      	ldr	r6, [pc, #204]	; (800e984 <xTaskIncrementTick+0x118>)
BaseType_t xSwitchRequired = pdFALSE;
 800e8b8:	2400      	movs	r4, #0
 800e8ba:	4f33      	ldr	r7, [pc, #204]	; (800e988 <xTaskIncrementTick+0x11c>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e8bc:	6833      	ldr	r3, [r6, #0]
 800e8be:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 800e994 <xTaskIncrementTick+0x128>
 800e8c2:	42ab      	cmp	r3, r5
 800e8c4:	d911      	bls.n	800e8ea <xTaskIncrementTick+0x7e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e8c6:	f8d8 3000 	ldr.w	r3, [r8]
 800e8ca:	2214      	movs	r2, #20
 800e8cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8ce:	4353      	muls	r3, r2
 800e8d0:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 800e8d2:	2b02      	cmp	r3, #2
 800e8d4:	bf28      	it	cs
 800e8d6:	2401      	movcs	r4, #1
		if( xYieldPending != pdFALSE )
 800e8d8:	4b2c      	ldr	r3, [pc, #176]	; (800e98c <xTaskIncrementTick+0x120>)
 800e8da:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 800e8dc:	2b00      	cmp	r3, #0
}
 800e8de:	bf0c      	ite	eq
 800e8e0:	4620      	moveq	r0, r4
 800e8e2:	2001      	movne	r0, #1
 800e8e4:	b003      	add	sp, #12
 800e8e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e8ea:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800e978 <xTaskIncrementTick+0x10c>
					prvAddTaskToReadyList( pxTCB );
 800e8ee:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 800e998 <xTaskIncrementTick+0x12c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e8f2:	f8d9 3000 	ldr.w	r3, [r9]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	b91b      	cbnz	r3, 800e902 <xTaskIncrementTick+0x96>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e8fa:	f04f 33ff 	mov.w	r3, #4294967295
 800e8fe:	6033      	str	r3, [r6, #0]
					break;
 800e900:	e7e1      	b.n	800e8c6 <xTaskIncrementTick+0x5a>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e902:	f8d9 3000 	ldr.w	r3, [r9]
 800e906:	68db      	ldr	r3, [r3, #12]
 800e908:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e90c:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
 800e910:	4295      	cmp	r5, r2
 800e912:	d201      	bcs.n	800e918 <xTaskIncrementTick+0xac>
						xNextTaskUnblockTime = xItemValue;
 800e914:	6032      	str	r2, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e916:	e7d6      	b.n	800e8c6 <xTaskIncrementTick+0x5a>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e918:	f10b 0104 	add.w	r1, fp, #4
 800e91c:	4608      	mov	r0, r1
 800e91e:	9101      	str	r1, [sp, #4]
 800e920:	f7fe fe43 	bl	800d5aa <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e924:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 800e928:	9901      	ldr	r1, [sp, #4]
 800e92a:	b122      	cbz	r2, 800e936 <xTaskIncrementTick+0xca>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e92c:	f10b 0018 	add.w	r0, fp, #24
 800e930:	f7fe fe3b 	bl	800d5aa <uxListRemove>
 800e934:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 800e936:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 800e93a:	f8da 2000 	ldr.w	r2, [sl]
 800e93e:	4290      	cmp	r0, r2
 800e940:	d901      	bls.n	800e946 <xTaskIncrementTick+0xda>
 800e942:	f8ca 0000 	str.w	r0, [sl]
 800e946:	2314      	movs	r3, #20
 800e948:	fb03 7000 	mla	r0, r3, r0, r7
 800e94c:	f7fe fe0a 	bl	800d564 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e950:	f8d8 1000 	ldr.w	r1, [r8]
 800e954:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 800e958:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800e95a:	429a      	cmp	r2, r3
 800e95c:	bf28      	it	cs
 800e95e:	2401      	movcs	r4, #1
 800e960:	e7c7      	b.n	800e8f2 <xTaskIncrementTick+0x86>
		++uxPendedTicks;
 800e962:	4a0b      	ldr	r2, [pc, #44]	; (800e990 <xTaskIncrementTick+0x124>)
BaseType_t xSwitchRequired = pdFALSE;
 800e964:	2400      	movs	r4, #0
		++uxPendedTicks;
 800e966:	6813      	ldr	r3, [r2, #0]
 800e968:	3301      	adds	r3, #1
 800e96a:	6013      	str	r3, [r2, #0]
 800e96c:	e7b4      	b.n	800e8d8 <xTaskIncrementTick+0x6c>
 800e96e:	bf00      	nop
 800e970:	200269c8 	.word	0x200269c8
 800e974:	20026a44 	.word	0x20026a44
 800e978:	20026554 	.word	0x20026554
 800e97c:	20026558 	.word	0x20026558
 800e980:	20026a00 	.word	0x20026a00
 800e984:	200269fc 	.word	0x200269fc
 800e988:	2002655c 	.word	0x2002655c
 800e98c:	20026a48 	.word	0x20026a48
 800e990:	200269c4 	.word	0x200269c4
 800e994:	20026550 	.word	0x20026550
 800e998:	200269d0 	.word	0x200269d0

0800e99c <xTaskResumeAll>:
{
 800e99c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 800e99e:	4c32      	ldr	r4, [pc, #200]	; (800ea68 <xTaskResumeAll+0xcc>)
 800e9a0:	6823      	ldr	r3, [r4, #0]
 800e9a2:	b953      	cbnz	r3, 800e9ba <xTaskResumeAll+0x1e>
 800e9a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9a8:	b672      	cpsid	i
 800e9aa:	f383 8811 	msr	BASEPRI, r3
 800e9ae:	f3bf 8f6f 	isb	sy
 800e9b2:	f3bf 8f4f 	dsb	sy
 800e9b6:	b662      	cpsie	i
 800e9b8:	e7fe      	b.n	800e9b8 <xTaskResumeAll+0x1c>
	taskENTER_CRITICAL();
 800e9ba:	f7fe fe73 	bl	800d6a4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800e9be:	6823      	ldr	r3, [r4, #0]
 800e9c0:	3b01      	subs	r3, #1
 800e9c2:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e9c4:	6824      	ldr	r4, [r4, #0]
 800e9c6:	b12c      	cbz	r4, 800e9d4 <xTaskResumeAll+0x38>
BaseType_t xAlreadyYielded = pdFALSE;
 800e9c8:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800e9ca:	f7fe fe8f 	bl	800d6ec <vPortExitCritical>
}
 800e9ce:	4620      	mov	r0, r4
 800e9d0:	b003      	add	sp, #12
 800e9d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e9d4:	4b25      	ldr	r3, [pc, #148]	; (800ea6c <xTaskResumeAll+0xd0>)
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d0f5      	beq.n	800e9c8 <xTaskResumeAll+0x2c>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e9dc:	4d24      	ldr	r5, [pc, #144]	; (800ea70 <xTaskResumeAll+0xd4>)
					prvAddTaskToReadyList( pxTCB );
 800e9de:	4e25      	ldr	r6, [pc, #148]	; (800ea74 <xTaskResumeAll+0xd8>)
 800e9e0:	4f25      	ldr	r7, [pc, #148]	; (800ea78 <xTaskResumeAll+0xdc>)
 800e9e2:	e01e      	b.n	800ea22 <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e9e4:	68eb      	ldr	r3, [r5, #12]
 800e9e6:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e9e8:	f104 0018 	add.w	r0, r4, #24
 800e9ec:	f7fe fddd 	bl	800d5aa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e9f0:	1d21      	adds	r1, r4, #4
 800e9f2:	4608      	mov	r0, r1
 800e9f4:	9101      	str	r1, [sp, #4]
 800e9f6:	f7fe fdd8 	bl	800d5aa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e9fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e9fc:	6832      	ldr	r2, [r6, #0]
 800e9fe:	9901      	ldr	r1, [sp, #4]
 800ea00:	4293      	cmp	r3, r2
 800ea02:	d900      	bls.n	800ea06 <xTaskResumeAll+0x6a>
 800ea04:	6033      	str	r3, [r6, #0]
 800ea06:	2014      	movs	r0, #20
 800ea08:	fb00 7003 	mla	r0, r0, r3, r7
 800ea0c:	f7fe fdaa 	bl	800d564 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ea10:	4b1a      	ldr	r3, [pc, #104]	; (800ea7c <xTaskResumeAll+0xe0>)
 800ea12:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea18:	429a      	cmp	r2, r3
 800ea1a:	d302      	bcc.n	800ea22 <xTaskResumeAll+0x86>
						xYieldPending = pdTRUE;
 800ea1c:	4b18      	ldr	r3, [pc, #96]	; (800ea80 <xTaskResumeAll+0xe4>)
 800ea1e:	2201      	movs	r2, #1
 800ea20:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ea22:	682b      	ldr	r3, [r5, #0]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d1dd      	bne.n	800e9e4 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 800ea28:	b10c      	cbz	r4, 800ea2e <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 800ea2a:	f7ff fddf 	bl	800e5ec <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800ea2e:	4d15      	ldr	r5, [pc, #84]	; (800ea84 <xTaskResumeAll+0xe8>)
 800ea30:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800ea32:	b144      	cbz	r4, 800ea46 <xTaskResumeAll+0xaa>
								xYieldPending = pdTRUE;
 800ea34:	4e12      	ldr	r6, [pc, #72]	; (800ea80 <xTaskResumeAll+0xe4>)
 800ea36:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800ea38:	f7ff ff18 	bl	800e86c <xTaskIncrementTick>
 800ea3c:	b100      	cbz	r0, 800ea40 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
 800ea3e:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800ea40:	3c01      	subs	r4, #1
 800ea42:	d1f9      	bne.n	800ea38 <xTaskResumeAll+0x9c>
						uxPendedTicks = 0;
 800ea44:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800ea46:	4b0e      	ldr	r3, [pc, #56]	; (800ea80 <xTaskResumeAll+0xe4>)
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d0bc      	beq.n	800e9c8 <xTaskResumeAll+0x2c>
					taskYIELD_IF_USING_PREEMPTION();
 800ea4e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ea52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea56:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800ea5a:	f3bf 8f4f 	dsb	sy
 800ea5e:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800ea62:	2401      	movs	r4, #1
 800ea64:	e7b1      	b.n	800e9ca <xTaskResumeAll+0x2e>
 800ea66:	bf00      	nop
 800ea68:	200269c8 	.word	0x200269c8
 800ea6c:	200269bc 	.word	0x200269bc
 800ea70:	20026a04 	.word	0x20026a04
 800ea74:	200269d0 	.word	0x200269d0
 800ea78:	2002655c 	.word	0x2002655c
 800ea7c:	20026550 	.word	0x20026550
 800ea80:	20026a48 	.word	0x20026a48
 800ea84:	200269c4 	.word	0x200269c4

0800ea88 <vTaskSetApplicationTaskTag>:
	{
 800ea88:	b538      	push	{r3, r4, r5, lr}
 800ea8a:	460d      	mov	r5, r1
		if( xTask == NULL )
 800ea8c:	4604      	mov	r4, r0
 800ea8e:	b908      	cbnz	r0, 800ea94 <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 800ea90:	4b04      	ldr	r3, [pc, #16]	; (800eaa4 <vTaskSetApplicationTaskTag+0x1c>)
 800ea92:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 800ea94:	f7fe fe06 	bl	800d6a4 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 800ea98:	6565      	str	r5, [r4, #84]	; 0x54
	}
 800ea9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 800ea9e:	f7fe be25 	b.w	800d6ec <vPortExitCritical>
 800eaa2:	bf00      	nop
 800eaa4:	20026550 	.word	0x20026550

0800eaa8 <xTaskCallApplicationTaskHook>:
	{
 800eaa8:	4603      	mov	r3, r0
 800eaaa:	4608      	mov	r0, r1
		if( xTask == NULL )
 800eaac:	b90b      	cbnz	r3, 800eab2 <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 800eaae:	4b03      	ldr	r3, [pc, #12]	; (800eabc <xTaskCallApplicationTaskHook+0x14>)
 800eab0:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 800eab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eab4:	b103      	cbz	r3, 800eab8 <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 800eab6:	4718      	bx	r3
	}
 800eab8:	4618      	mov	r0, r3
 800eaba:	4770      	bx	lr
 800eabc:	20026550 	.word	0x20026550

0800eac0 <vTaskStartScheduler>:
{
 800eac0:	b510      	push	{r4, lr}
 800eac2:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800eac4:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800eac6:	aa07      	add	r2, sp, #28
 800eac8:	a906      	add	r1, sp, #24
 800eaca:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800eacc:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ead0:	f7fe fc2c 	bl	800d32c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ead4:	9b05      	ldr	r3, [sp, #20]
 800ead6:	9a07      	ldr	r2, [sp, #28]
 800ead8:	9302      	str	r3, [sp, #8]
 800eada:	9b06      	ldr	r3, [sp, #24]
 800eadc:	491d      	ldr	r1, [pc, #116]	; (800eb54 <vTaskStartScheduler+0x94>)
 800eade:	481e      	ldr	r0, [pc, #120]	; (800eb58 <vTaskStartScheduler+0x98>)
 800eae0:	e9cd 4300 	strd	r4, r3, [sp]
 800eae4:	4623      	mov	r3, r4
 800eae6:	f7ff fe47 	bl	800e778 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800eaea:	2800      	cmp	r0, #0
 800eaec:	d030      	beq.n	800eb50 <vTaskStartScheduler+0x90>
			xReturn = xTimerCreateTimerTask();
 800eaee:	f000 faaf 	bl	800f050 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800eaf2:	2801      	cmp	r0, #1
 800eaf4:	d11f      	bne.n	800eb36 <vTaskStartScheduler+0x76>
 800eaf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eafa:	b672      	cpsid	i
 800eafc:	f383 8811 	msr	BASEPRI, r3
 800eb00:	f3bf 8f6f 	isb	sy
 800eb04:	f3bf 8f4f 	dsb	sy
 800eb08:	b662      	cpsie	i
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800eb0a:	4a14      	ldr	r2, [pc, #80]	; (800eb5c <vTaskStartScheduler+0x9c>)
 800eb0c:	4914      	ldr	r1, [pc, #80]	; (800eb60 <vTaskStartScheduler+0xa0>)
 800eb0e:	6813      	ldr	r3, [r2, #0]
 800eb10:	3358      	adds	r3, #88	; 0x58
 800eb12:	600b      	str	r3, [r1, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 800eb14:	f04f 31ff 	mov.w	r1, #4294967295
 800eb18:	4b12      	ldr	r3, [pc, #72]	; (800eb64 <vTaskStartScheduler+0xa4>)
 800eb1a:	6019      	str	r1, [r3, #0]
		traceTASK_SWITCHED_IN();
 800eb1c:	4621      	mov	r1, r4
		xSchedulerRunning = pdTRUE;
 800eb1e:	4b12      	ldr	r3, [pc, #72]	; (800eb68 <vTaskStartScheduler+0xa8>)
 800eb20:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800eb22:	4b12      	ldr	r3, [pc, #72]	; (800eb6c <vTaskStartScheduler+0xac>)
 800eb24:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 800eb26:	6810      	ldr	r0, [r2, #0]
 800eb28:	f7ff ffbe 	bl	800eaa8 <xTaskCallApplicationTaskHook>
}
 800eb2c:	b008      	add	sp, #32
 800eb2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 800eb32:	f7fe be51 	b.w	800d7d8 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800eb36:	3001      	adds	r0, #1
 800eb38:	d10a      	bne.n	800eb50 <vTaskStartScheduler+0x90>
 800eb3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb3e:	b672      	cpsid	i
 800eb40:	f383 8811 	msr	BASEPRI, r3
 800eb44:	f3bf 8f6f 	isb	sy
 800eb48:	f3bf 8f4f 	dsb	sy
 800eb4c:	b662      	cpsie	i
 800eb4e:	e7fe      	b.n	800eb4e <vTaskStartScheduler+0x8e>
}
 800eb50:	b008      	add	sp, #32
 800eb52:	bd10      	pop	{r4, pc}
 800eb54:	0802a3f9 	.word	0x0802a3f9
 800eb58:	0800e651 	.word	0x0800e651
 800eb5c:	20026550 	.word	0x20026550
 800eb60:	200000e8 	.word	0x200000e8
 800eb64:	200269fc 	.word	0x200269fc
 800eb68:	20026a18 	.word	0x20026a18
 800eb6c:	20026a44 	.word	0x20026a44

0800eb70 <vTaskSwitchContext>:
{
 800eb70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800eb72:	4b1e      	ldr	r3, [pc, #120]	; (800ebec <vTaskSwitchContext+0x7c>)
 800eb74:	681a      	ldr	r2, [r3, #0]
 800eb76:	4b1e      	ldr	r3, [pc, #120]	; (800ebf0 <vTaskSwitchContext+0x80>)
 800eb78:	b112      	cbz	r2, 800eb80 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800eb7a:	2201      	movs	r2, #1
 800eb7c:	601a      	str	r2, [r3, #0]
}
 800eb7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 800eb80:	4c1c      	ldr	r4, [pc, #112]	; (800ebf4 <vTaskSwitchContext+0x84>)
 800eb82:	2101      	movs	r1, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb84:	4e1c      	ldr	r6, [pc, #112]	; (800ebf8 <vTaskSwitchContext+0x88>)
 800eb86:	2714      	movs	r7, #20
		xYieldPending = pdFALSE;
 800eb88:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 800eb8a:	6820      	ldr	r0, [r4, #0]
 800eb8c:	f7ff ff8c 	bl	800eaa8 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb90:	6832      	ldr	r2, [r6, #0]
 800eb92:	491a      	ldr	r1, [pc, #104]	; (800ebfc <vTaskSwitchContext+0x8c>)
 800eb94:	fb07 f302 	mul.w	r3, r7, r2
 800eb98:	58cd      	ldr	r5, [r1, r3]
 800eb9a:	18c8      	adds	r0, r1, r3
 800eb9c:	b1c5      	cbz	r5, 800ebd0 <vTaskSwitchContext+0x60>
 800eb9e:	6845      	ldr	r5, [r0, #4]
 800eba0:	3308      	adds	r3, #8
 800eba2:	686d      	ldr	r5, [r5, #4]
 800eba4:	440b      	add	r3, r1
 800eba6:	429d      	cmp	r5, r3
 800eba8:	6045      	str	r5, [r0, #4]
 800ebaa:	bf04      	itt	eq
 800ebac:	686b      	ldreq	r3, [r5, #4]
 800ebae:	6043      	streq	r3, [r0, #4]
 800ebb0:	2314      	movs	r3, #20
 800ebb2:	fb03 1102 	mla	r1, r3, r2, r1
 800ebb6:	684b      	ldr	r3, [r1, #4]
		traceTASK_SWITCHED_IN();
 800ebb8:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ebba:	68db      	ldr	r3, [r3, #12]
 800ebbc:	6023      	str	r3, [r4, #0]
 800ebbe:	6032      	str	r2, [r6, #0]
		traceTASK_SWITCHED_IN();
 800ebc0:	6820      	ldr	r0, [r4, #0]
 800ebc2:	f7ff ff71 	bl	800eaa8 <xTaskCallApplicationTaskHook>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ebc6:	6823      	ldr	r3, [r4, #0]
 800ebc8:	4a0d      	ldr	r2, [pc, #52]	; (800ec00 <vTaskSwitchContext+0x90>)
 800ebca:	3358      	adds	r3, #88	; 0x58
 800ebcc:	6013      	str	r3, [r2, #0]
}
 800ebce:	e7d6      	b.n	800eb7e <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ebd0:	b952      	cbnz	r2, 800ebe8 <vTaskSwitchContext+0x78>
 800ebd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebd6:	b672      	cpsid	i
 800ebd8:	f383 8811 	msr	BASEPRI, r3
 800ebdc:	f3bf 8f6f 	isb	sy
 800ebe0:	f3bf 8f4f 	dsb	sy
 800ebe4:	b662      	cpsie	i
 800ebe6:	e7fe      	b.n	800ebe6 <vTaskSwitchContext+0x76>
 800ebe8:	3a01      	subs	r2, #1
 800ebea:	e7d3      	b.n	800eb94 <vTaskSwitchContext+0x24>
 800ebec:	200269c8 	.word	0x200269c8
 800ebf0:	20026a48 	.word	0x20026a48
 800ebf4:	20026550 	.word	0x20026550
 800ebf8:	200269d0 	.word	0x200269d0
 800ebfc:	2002655c 	.word	0x2002655c
 800ec00:	200000e8 	.word	0x200000e8

0800ec04 <vTaskPlaceOnEventList>:
{
 800ec04:	b510      	push	{r4, lr}
 800ec06:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800ec08:	b950      	cbnz	r0, 800ec20 <vTaskPlaceOnEventList+0x1c>
 800ec0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec0e:	b672      	cpsid	i
 800ec10:	f383 8811 	msr	BASEPRI, r3
 800ec14:	f3bf 8f6f 	isb	sy
 800ec18:	f3bf 8f4f 	dsb	sy
 800ec1c:	b662      	cpsie	i
 800ec1e:	e7fe      	b.n	800ec1e <vTaskPlaceOnEventList+0x1a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ec20:	4b05      	ldr	r3, [pc, #20]	; (800ec38 <vTaskPlaceOnEventList+0x34>)
 800ec22:	6819      	ldr	r1, [r3, #0]
 800ec24:	3118      	adds	r1, #24
 800ec26:	f7fe fca9 	bl	800d57c <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ec2a:	4620      	mov	r0, r4
 800ec2c:	2101      	movs	r1, #1
}
 800ec2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ec32:	f7ff bca3 	b.w	800e57c <prvAddCurrentTaskToDelayedList>
 800ec36:	bf00      	nop
 800ec38:	20026550 	.word	0x20026550

0800ec3c <vTaskPlaceOnEventListRestricted>:
	{
 800ec3c:	b538      	push	{r3, r4, r5, lr}
 800ec3e:	460d      	mov	r5, r1
 800ec40:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800ec42:	b950      	cbnz	r0, 800ec5a <vTaskPlaceOnEventListRestricted+0x1e>
 800ec44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec48:	b672      	cpsid	i
 800ec4a:	f383 8811 	msr	BASEPRI, r3
 800ec4e:	f3bf 8f6f 	isb	sy
 800ec52:	f3bf 8f4f 	dsb	sy
 800ec56:	b662      	cpsie	i
 800ec58:	e7fe      	b.n	800ec58 <vTaskPlaceOnEventListRestricted+0x1c>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ec5a:	4b07      	ldr	r3, [pc, #28]	; (800ec78 <vTaskPlaceOnEventListRestricted+0x3c>)
 800ec5c:	6819      	ldr	r1, [r3, #0]
 800ec5e:	3118      	adds	r1, #24
 800ec60:	f7fe fc80 	bl	800d564 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 800ec64:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ec66:	4621      	mov	r1, r4
 800ec68:	bf0c      	ite	eq
 800ec6a:	4628      	moveq	r0, r5
 800ec6c:	f04f 30ff 	movne.w	r0, #4294967295
	}
 800ec70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ec74:	f7ff bc82 	b.w	800e57c <prvAddCurrentTaskToDelayedList>
 800ec78:	20026550 	.word	0x20026550

0800ec7c <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec7c:	68c3      	ldr	r3, [r0, #12]
{
 800ec7e:	b513      	push	{r0, r1, r4, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec80:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800ec82:	b954      	cbnz	r4, 800ec9a <xTaskRemoveFromEventList+0x1e>
 800ec84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec88:	b672      	cpsid	i
 800ec8a:	f383 8811 	msr	BASEPRI, r3
 800ec8e:	f3bf 8f6f 	isb	sy
 800ec92:	f3bf 8f4f 	dsb	sy
 800ec96:	b662      	cpsie	i
 800ec98:	e7fe      	b.n	800ec98 <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ec9a:	f104 0118 	add.w	r1, r4, #24
 800ec9e:	4608      	mov	r0, r1
 800eca0:	9101      	str	r1, [sp, #4]
 800eca2:	f7fe fc82 	bl	800d5aa <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eca6:	4b12      	ldr	r3, [pc, #72]	; (800ecf0 <xTaskRemoveFromEventList+0x74>)
 800eca8:	9901      	ldr	r1, [sp, #4]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	b9e3      	cbnz	r3, 800ece8 <xTaskRemoveFromEventList+0x6c>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ecae:	1d21      	adds	r1, r4, #4
 800ecb0:	4608      	mov	r0, r1
 800ecb2:	9101      	str	r1, [sp, #4]
 800ecb4:	f7fe fc79 	bl	800d5aa <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ecb8:	4a0e      	ldr	r2, [pc, #56]	; (800ecf4 <xTaskRemoveFromEventList+0x78>)
 800ecba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ecbc:	6810      	ldr	r0, [r2, #0]
 800ecbe:	9901      	ldr	r1, [sp, #4]
 800ecc0:	4283      	cmp	r3, r0
 800ecc2:	d900      	bls.n	800ecc6 <xTaskRemoveFromEventList+0x4a>
 800ecc4:	6013      	str	r3, [r2, #0]
 800ecc6:	4a0c      	ldr	r2, [pc, #48]	; (800ecf8 <xTaskRemoveFromEventList+0x7c>)
 800ecc8:	2014      	movs	r0, #20
 800ecca:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ecce:	f7fe fc49 	bl	800d564 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ecd2:	4b0a      	ldr	r3, [pc, #40]	; (800ecfc <xTaskRemoveFromEventList+0x80>)
 800ecd4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecda:	429a      	cmp	r2, r3
 800ecdc:	d906      	bls.n	800ecec <xTaskRemoveFromEventList+0x70>
		xYieldPending = pdTRUE;
 800ecde:	2001      	movs	r0, #1
 800ece0:	4b07      	ldr	r3, [pc, #28]	; (800ed00 <xTaskRemoveFromEventList+0x84>)
 800ece2:	6018      	str	r0, [r3, #0]
}
 800ece4:	b002      	add	sp, #8
 800ece6:	bd10      	pop	{r4, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ece8:	4806      	ldr	r0, [pc, #24]	; (800ed04 <xTaskRemoveFromEventList+0x88>)
 800ecea:	e7f0      	b.n	800ecce <xTaskRemoveFromEventList+0x52>
		xReturn = pdFALSE;
 800ecec:	2000      	movs	r0, #0
	return xReturn;
 800ecee:	e7f9      	b.n	800ece4 <xTaskRemoveFromEventList+0x68>
 800ecf0:	200269c8 	.word	0x200269c8
 800ecf4:	200269d0 	.word	0x200269d0
 800ecf8:	2002655c 	.word	0x2002655c
 800ecfc:	20026550 	.word	0x20026550
 800ed00:	20026a48 	.word	0x20026a48
 800ed04:	20026a04 	.word	0x20026a04

0800ed08 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ed08:	4b03      	ldr	r3, [pc, #12]	; (800ed18 <vTaskInternalSetTimeOutState+0x10>)
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ed0e:	4b03      	ldr	r3, [pc, #12]	; (800ed1c <vTaskInternalSetTimeOutState+0x14>)
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	6043      	str	r3, [r0, #4]
}
 800ed14:	4770      	bx	lr
 800ed16:	bf00      	nop
 800ed18:	20026a00 	.word	0x20026a00
 800ed1c:	20026a44 	.word	0x20026a44

0800ed20 <xTaskCheckForTimeOut>:
{
 800ed20:	b570      	push	{r4, r5, r6, lr}
 800ed22:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 800ed24:	4605      	mov	r5, r0
 800ed26:	b950      	cbnz	r0, 800ed3e <xTaskCheckForTimeOut+0x1e>
 800ed28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed2c:	b672      	cpsid	i
 800ed2e:	f383 8811 	msr	BASEPRI, r3
 800ed32:	f3bf 8f6f 	isb	sy
 800ed36:	f3bf 8f4f 	dsb	sy
 800ed3a:	b662      	cpsie	i
 800ed3c:	e7fe      	b.n	800ed3c <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 800ed3e:	b951      	cbnz	r1, 800ed56 <xTaskCheckForTimeOut+0x36>
 800ed40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed44:	b672      	cpsid	i
 800ed46:	f383 8811 	msr	BASEPRI, r3
 800ed4a:	f3bf 8f6f 	isb	sy
 800ed4e:	f3bf 8f4f 	dsb	sy
 800ed52:	b662      	cpsie	i
 800ed54:	e7fe      	b.n	800ed54 <xTaskCheckForTimeOut+0x34>
	taskENTER_CRITICAL();
 800ed56:	f7fe fca5 	bl	800d6a4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800ed5a:	4b0f      	ldr	r3, [pc, #60]	; (800ed98 <xTaskCheckForTimeOut+0x78>)
 800ed5c:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800ed5e:	6823      	ldr	r3, [r4, #0]
 800ed60:	1c5a      	adds	r2, r3, #1
 800ed62:	d010      	beq.n	800ed86 <xTaskCheckForTimeOut+0x66>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ed64:	480d      	ldr	r0, [pc, #52]	; (800ed9c <xTaskCheckForTimeOut+0x7c>)
 800ed66:	682e      	ldr	r6, [r5, #0]
 800ed68:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ed6a:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ed6c:	4286      	cmp	r6, r0
 800ed6e:	d001      	beq.n	800ed74 <xTaskCheckForTimeOut+0x54>
 800ed70:	428a      	cmp	r2, r1
 800ed72:	d90f      	bls.n	800ed94 <xTaskCheckForTimeOut+0x74>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ed74:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ed76:	4283      	cmp	r3, r0
 800ed78:	d90a      	bls.n	800ed90 <xTaskCheckForTimeOut+0x70>
			*pxTicksToWait -= xElapsedTime;
 800ed7a:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ed7c:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800ed7e:	4413      	add	r3, r2
 800ed80:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ed82:	f7ff ffc1 	bl	800ed08 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800ed86:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800ed88:	f7fe fcb0 	bl	800d6ec <vPortExitCritical>
}
 800ed8c:	4620      	mov	r0, r4
 800ed8e:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800ed90:	2300      	movs	r3, #0
 800ed92:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800ed94:	2401      	movs	r4, #1
 800ed96:	e7f7      	b.n	800ed88 <xTaskCheckForTimeOut+0x68>
 800ed98:	20026a44 	.word	0x20026a44
 800ed9c:	20026a00 	.word	0x20026a00

0800eda0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800eda0:	4b01      	ldr	r3, [pc, #4]	; (800eda8 <vTaskMissedYield+0x8>)
 800eda2:	2201      	movs	r2, #1
 800eda4:	601a      	str	r2, [r3, #0]
}
 800eda6:	4770      	bx	lr
 800eda8:	20026a48 	.word	0x20026a48

0800edac <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 800edac:	4b01      	ldr	r3, [pc, #4]	; (800edb4 <xTaskGetCurrentTaskHandle+0x8>)
 800edae:	6818      	ldr	r0, [r3, #0]
	}
 800edb0:	4770      	bx	lr
 800edb2:	bf00      	nop
 800edb4:	20026550 	.word	0x20026550

0800edb8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800edb8:	4b05      	ldr	r3, [pc, #20]	; (800edd0 <xTaskGetSchedulerState+0x18>)
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	b133      	cbz	r3, 800edcc <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800edbe:	4b05      	ldr	r3, [pc, #20]	; (800edd4 <xTaskGetSchedulerState+0x1c>)
 800edc0:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	bf0c      	ite	eq
 800edc6:	2002      	moveq	r0, #2
 800edc8:	2000      	movne	r0, #0
 800edca:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800edcc:	2001      	movs	r0, #1
	}
 800edce:	4770      	bx	lr
 800edd0:	20026a18 	.word	0x20026a18
 800edd4:	200269c8 	.word	0x200269c8

0800edd8 <xTaskPriorityInherit>:
	{
 800edd8:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800edda:	4604      	mov	r4, r0
 800eddc:	b340      	cbz	r0, 800ee30 <xTaskPriorityInherit+0x58>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800edde:	4d1b      	ldr	r5, [pc, #108]	; (800ee4c <xTaskPriorityInherit+0x74>)
 800ede0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800ede2:	682a      	ldr	r2, [r5, #0]
 800ede4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ede6:	4293      	cmp	r3, r2
 800ede8:	d228      	bcs.n	800ee3c <xTaskPriorityInherit+0x64>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800edea:	6982      	ldr	r2, [r0, #24]
 800edec:	2a00      	cmp	r2, #0
 800edee:	db04      	blt.n	800edfa <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800edf0:	682a      	ldr	r2, [r5, #0]
 800edf2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800edf4:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800edf8:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800edfa:	2214      	movs	r2, #20
 800edfc:	4e14      	ldr	r6, [pc, #80]	; (800ee50 <xTaskPriorityInherit+0x78>)
 800edfe:	fb02 6303 	mla	r3, r2, r3, r6
 800ee02:	6962      	ldr	r2, [r4, #20]
 800ee04:	429a      	cmp	r2, r3
 800ee06:	d115      	bne.n	800ee34 <xTaskPriorityInherit+0x5c>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ee08:	1d21      	adds	r1, r4, #4
 800ee0a:	4608      	mov	r0, r1
 800ee0c:	9101      	str	r1, [sp, #4]
 800ee0e:	f7fe fbcc 	bl	800d5aa <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ee12:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ee14:	4a0f      	ldr	r2, [pc, #60]	; (800ee54 <xTaskPriorityInherit+0x7c>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ee16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ee18:	6810      	ldr	r0, [r2, #0]
 800ee1a:	9901      	ldr	r1, [sp, #4]
 800ee1c:	4283      	cmp	r3, r0
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ee1e:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ee20:	d900      	bls.n	800ee24 <xTaskPriorityInherit+0x4c>
 800ee22:	6013      	str	r3, [r2, #0]
 800ee24:	2014      	movs	r0, #20
 800ee26:	fb00 6003 	mla	r0, r0, r3, r6
 800ee2a:	f7fe fb9b 	bl	800d564 <vListInsertEnd>
				xReturn = pdTRUE;
 800ee2e:	2001      	movs	r0, #1
	}
 800ee30:	b002      	add	sp, #8
 800ee32:	bd70      	pop	{r4, r5, r6, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ee34:	682b      	ldr	r3, [r5, #0]
 800ee36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee38:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ee3a:	e7f8      	b.n	800ee2e <xTaskPriorityInherit+0x56>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ee3c:	682b      	ldr	r3, [r5, #0]
 800ee3e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800ee40:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800ee42:	42a0      	cmp	r0, r4
 800ee44:	bf2c      	ite	cs
 800ee46:	2000      	movcs	r0, #0
 800ee48:	2001      	movcc	r0, #1
 800ee4a:	e7f1      	b.n	800ee30 <xTaskPriorityInherit+0x58>
 800ee4c:	20026550 	.word	0x20026550
 800ee50:	2002655c 	.word	0x2002655c
 800ee54:	200269d0 	.word	0x200269d0

0800ee58 <xTaskPriorityDisinherit>:
	{
 800ee58:	b513      	push	{r0, r1, r4, lr}
		if( pxMutexHolder != NULL )
 800ee5a:	b910      	cbnz	r0, 800ee62 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 800ee5c:	2000      	movs	r0, #0
	}
 800ee5e:	b002      	add	sp, #8
 800ee60:	bd10      	pop	{r4, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800ee62:	4b1e      	ldr	r3, [pc, #120]	; (800eedc <xTaskPriorityDisinherit+0x84>)
 800ee64:	681c      	ldr	r4, [r3, #0]
 800ee66:	4284      	cmp	r4, r0
 800ee68:	d00a      	beq.n	800ee80 <xTaskPriorityDisinherit+0x28>
 800ee6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee6e:	b672      	cpsid	i
 800ee70:	f383 8811 	msr	BASEPRI, r3
 800ee74:	f3bf 8f6f 	isb	sy
 800ee78:	f3bf 8f4f 	dsb	sy
 800ee7c:	b662      	cpsie	i
 800ee7e:	e7fe      	b.n	800ee7e <xTaskPriorityDisinherit+0x26>
			configASSERT( pxTCB->uxMutexesHeld );
 800ee80:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ee82:	b953      	cbnz	r3, 800ee9a <xTaskPriorityDisinherit+0x42>
 800ee84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee88:	b672      	cpsid	i
 800ee8a:	f383 8811 	msr	BASEPRI, r3
 800ee8e:	f3bf 8f6f 	isb	sy
 800ee92:	f3bf 8f4f 	dsb	sy
 800ee96:	b662      	cpsie	i
 800ee98:	e7fe      	b.n	800ee98 <xTaskPriorityDisinherit+0x40>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ee9a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 800ee9c:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ee9e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 800eea0:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800eea2:	4291      	cmp	r1, r2
 800eea4:	d0da      	beq.n	800ee5c <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d1d8      	bne.n	800ee5c <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eeaa:	1d21      	adds	r1, r4, #4
 800eeac:	4608      	mov	r0, r1
 800eeae:	9101      	str	r1, [sp, #4]
 800eeb0:	f7fe fb7b 	bl	800d5aa <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800eeb4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 800eeb6:	9901      	ldr	r1, [sp, #4]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eeb8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800eebc:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eebe:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800eec0:	4a07      	ldr	r2, [pc, #28]	; (800eee0 <xTaskPriorityDisinherit+0x88>)
 800eec2:	6810      	ldr	r0, [r2, #0]
 800eec4:	4283      	cmp	r3, r0
 800eec6:	d900      	bls.n	800eeca <xTaskPriorityDisinherit+0x72>
 800eec8:	6013      	str	r3, [r2, #0]
 800eeca:	4a06      	ldr	r2, [pc, #24]	; (800eee4 <xTaskPriorityDisinherit+0x8c>)
 800eecc:	2014      	movs	r0, #20
 800eece:	fb00 2003 	mla	r0, r0, r3, r2
 800eed2:	f7fe fb47 	bl	800d564 <vListInsertEnd>
					xReturn = pdTRUE;
 800eed6:	2001      	movs	r0, #1
		return xReturn;
 800eed8:	e7c1      	b.n	800ee5e <xTaskPriorityDisinherit+0x6>
 800eeda:	bf00      	nop
 800eedc:	20026550 	.word	0x20026550
 800eee0:	200269d0 	.word	0x200269d0
 800eee4:	2002655c 	.word	0x2002655c

0800eee8 <vTaskPriorityDisinheritAfterTimeout>:
	{
 800eee8:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if( pxMutexHolder != NULL )
 800eeea:	4604      	mov	r4, r0
 800eeec:	2800      	cmp	r0, #0
 800eeee:	d048      	beq.n	800ef82 <vTaskPriorityDisinheritAfterTimeout+0x9a>
			configASSERT( pxTCB->uxMutexesHeld );
 800eef0:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800eef2:	b952      	cbnz	r2, 800ef0a <vTaskPriorityDisinheritAfterTimeout+0x22>
 800eef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eef8:	b672      	cpsid	i
 800eefa:	f383 8811 	msr	BASEPRI, r3
 800eefe:	f3bf 8f6f 	isb	sy
 800ef02:	f3bf 8f4f 	dsb	sy
 800ef06:	b662      	cpsie	i
 800ef08:	e7fe      	b.n	800ef08 <vTaskPriorityDisinheritAfterTimeout+0x20>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ef0a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800ef0c:	4299      	cmp	r1, r3
 800ef0e:	bf38      	it	cc
 800ef10:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ef12:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800ef14:	428b      	cmp	r3, r1
 800ef16:	d034      	beq.n	800ef82 <vTaskPriorityDisinheritAfterTimeout+0x9a>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ef18:	2a01      	cmp	r2, #1
 800ef1a:	d132      	bne.n	800ef82 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					configASSERT( pxTCB != pxCurrentTCB );
 800ef1c:	4a1a      	ldr	r2, [pc, #104]	; (800ef88 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 800ef1e:	6812      	ldr	r2, [r2, #0]
 800ef20:	4282      	cmp	r2, r0
 800ef22:	d10a      	bne.n	800ef3a <vTaskPriorityDisinheritAfterTimeout+0x52>
 800ef24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef28:	b672      	cpsid	i
 800ef2a:	f383 8811 	msr	BASEPRI, r3
 800ef2e:	f3bf 8f6f 	isb	sy
 800ef32:	f3bf 8f4f 	dsb	sy
 800ef36:	b662      	cpsie	i
 800ef38:	e7fe      	b.n	800ef38 <vTaskPriorityDisinheritAfterTimeout+0x50>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ef3a:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ef3c:	4d13      	ldr	r5, [pc, #76]	; (800ef8c <vTaskPriorityDisinheritAfterTimeout+0xa4>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ef3e:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ef40:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 800ef44:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ef46:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef4a:	bfa8      	it	ge
 800ef4c:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ef50:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef52:	bfa8      	it	ge
 800ef54:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ef56:	429a      	cmp	r2, r3
 800ef58:	d113      	bne.n	800ef82 <vTaskPriorityDisinheritAfterTimeout+0x9a>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ef5a:	1d01      	adds	r1, r0, #4
 800ef5c:	4608      	mov	r0, r1
 800ef5e:	9101      	str	r1, [sp, #4]
 800ef60:	f7fe fb23 	bl	800d5aa <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800ef64:	4a0a      	ldr	r2, [pc, #40]	; (800ef90 <vTaskPriorityDisinheritAfterTimeout+0xa8>)
 800ef66:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ef68:	6810      	ldr	r0, [r2, #0]
 800ef6a:	9901      	ldr	r1, [sp, #4]
 800ef6c:	4283      	cmp	r3, r0
 800ef6e:	d900      	bls.n	800ef72 <vTaskPriorityDisinheritAfterTimeout+0x8a>
 800ef70:	6013      	str	r3, [r2, #0]
 800ef72:	2014      	movs	r0, #20
 800ef74:	fb00 5003 	mla	r0, r0, r3, r5
	}
 800ef78:	b003      	add	sp, #12
 800ef7a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 800ef7e:	f7fe baf1 	b.w	800d564 <vListInsertEnd>
	}
 800ef82:	b003      	add	sp, #12
 800ef84:	bd30      	pop	{r4, r5, pc}
 800ef86:	bf00      	nop
 800ef88:	20026550 	.word	0x20026550
 800ef8c:	2002655c 	.word	0x2002655c
 800ef90:	200269d0 	.word	0x200269d0

0800ef94 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800ef94:	4b04      	ldr	r3, [pc, #16]	; (800efa8 <pvTaskIncrementMutexHeldCount+0x14>)
 800ef96:	681a      	ldr	r2, [r3, #0]
 800ef98:	b11a      	cbz	r2, 800efa2 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800ef9a:	6819      	ldr	r1, [r3, #0]
 800ef9c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800ef9e:	3201      	adds	r2, #1
 800efa0:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 800efa2:	6818      	ldr	r0, [r3, #0]
	}
 800efa4:	4770      	bx	lr
 800efa6:	bf00      	nop
 800efa8:	20026550 	.word	0x20026550

0800efac <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800efac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800efae:	4c11      	ldr	r4, [pc, #68]	; (800eff4 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 800efb0:	f7fe fb78 	bl	800d6a4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800efb4:	6825      	ldr	r5, [r4, #0]
 800efb6:	b9bd      	cbnz	r5, 800efe8 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 800efb8:	4f0f      	ldr	r7, [pc, #60]	; (800eff8 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 800efba:	4e10      	ldr	r6, [pc, #64]	; (800effc <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 800efbc:	4638      	mov	r0, r7
 800efbe:	f7fe fac3 	bl	800d548 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800efc2:	4630      	mov	r0, r6
 800efc4:	f7fe fac0 	bl	800d548 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800efc8:	4b0d      	ldr	r3, [pc, #52]	; (800f000 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800efca:	4a0e      	ldr	r2, [pc, #56]	; (800f004 <prvCheckForValidListAndQueue+0x58>)
 800efcc:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 800efce:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800efd0:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800efd2:	4b0d      	ldr	r3, [pc, #52]	; (800f008 <prvCheckForValidListAndQueue+0x5c>)
 800efd4:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800efd6:	4b0d      	ldr	r3, [pc, #52]	; (800f00c <prvCheckForValidListAndQueue+0x60>)
 800efd8:	9500      	str	r5, [sp, #0]
 800efda:	f7fe fdaf 	bl	800db3c <xQueueGenericCreateStatic>
 800efde:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800efe0:	b110      	cbz	r0, 800efe8 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800efe2:	490b      	ldr	r1, [pc, #44]	; (800f010 <prvCheckForValidListAndQueue+0x64>)
 800efe4:	f7ff f9ea 	bl	800e3bc <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 800efe8:	b003      	add	sp, #12
 800efea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 800efee:	f7fe bb7d 	b.w	800d6ec <vPortExitCritical>
 800eff2:	bf00      	nop
 800eff4:	20026b70 	.word	0x20026b70
 800eff8:	20026af4 	.word	0x20026af4
 800effc:	20026b08 	.word	0x20026b08
 800f000:	20026a4c 	.word	0x20026a4c
 800f004:	20026a54 	.word	0x20026a54
 800f008:	20026a50 	.word	0x20026a50
 800f00c:	20026b20 	.word	0x20026b20
 800f010:	0802a3fe 	.word	0x0802a3fe

0800f014 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 800f014:	4291      	cmp	r1, r2
{
 800f016:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f018:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f01a:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800f01c:	d80a      	bhi.n	800f034 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f01e:	1ad2      	subs	r2, r2, r3
 800f020:	6983      	ldr	r3, [r0, #24]
 800f022:	429a      	cmp	r2, r3
 800f024:	d20d      	bcs.n	800f042 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f026:	1d01      	adds	r1, r0, #4
 800f028:	4b07      	ldr	r3, [pc, #28]	; (800f048 <prvInsertTimerInActiveList+0x34>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f02a:	6818      	ldr	r0, [r3, #0]
 800f02c:	f7fe faa6 	bl	800d57c <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800f030:	2000      	movs	r0, #0
}
 800f032:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f034:	429a      	cmp	r2, r3
 800f036:	d201      	bcs.n	800f03c <prvInsertTimerInActiveList+0x28>
 800f038:	4299      	cmp	r1, r3
 800f03a:	d202      	bcs.n	800f042 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f03c:	1d01      	adds	r1, r0, #4
 800f03e:	4b03      	ldr	r3, [pc, #12]	; (800f04c <prvInsertTimerInActiveList+0x38>)
 800f040:	e7f3      	b.n	800f02a <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 800f042:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800f044:	e7f5      	b.n	800f032 <prvInsertTimerInActiveList+0x1e>
 800f046:	bf00      	nop
 800f048:	20026a50 	.word	0x20026a50
 800f04c:	20026a4c 	.word	0x20026a4c

0800f050 <xTimerCreateTimerTask>:
{
 800f050:	b510      	push	{r4, lr}
 800f052:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800f054:	f7ff ffaa 	bl	800efac <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800f058:	4b13      	ldr	r3, [pc, #76]	; (800f0a8 <xTimerCreateTimerTask+0x58>)
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	b1b3      	cbz	r3, 800f08c <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f05e:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f060:	aa07      	add	r2, sp, #28
 800f062:	a906      	add	r1, sp, #24
 800f064:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f066:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f06a:	f7fe f96b 	bl	800d344 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f06e:	9b05      	ldr	r3, [sp, #20]
 800f070:	9a07      	ldr	r2, [sp, #28]
 800f072:	9302      	str	r3, [sp, #8]
 800f074:	9b06      	ldr	r3, [sp, #24]
 800f076:	490d      	ldr	r1, [pc, #52]	; (800f0ac <xTimerCreateTimerTask+0x5c>)
 800f078:	9301      	str	r3, [sp, #4]
 800f07a:	2302      	movs	r3, #2
 800f07c:	480c      	ldr	r0, [pc, #48]	; (800f0b0 <xTimerCreateTimerTask+0x60>)
 800f07e:	9300      	str	r3, [sp, #0]
 800f080:	4623      	mov	r3, r4
 800f082:	f7ff fb79 	bl	800e778 <xTaskCreateStatic>
 800f086:	4b0b      	ldr	r3, [pc, #44]	; (800f0b4 <xTimerCreateTimerTask+0x64>)
 800f088:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800f08a:	b950      	cbnz	r0, 800f0a2 <xTimerCreateTimerTask+0x52>
 800f08c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f090:	b672      	cpsid	i
 800f092:	f383 8811 	msr	BASEPRI, r3
 800f096:	f3bf 8f6f 	isb	sy
 800f09a:	f3bf 8f4f 	dsb	sy
 800f09e:	b662      	cpsie	i
	configASSERT( xReturn );
 800f0a0:	e7fe      	b.n	800f0a0 <xTimerCreateTimerTask+0x50>
}
 800f0a2:	2001      	movs	r0, #1
 800f0a4:	b008      	add	sp, #32
 800f0a6:	bd10      	pop	{r4, pc}
 800f0a8:	20026b70 	.word	0x20026b70
 800f0ac:	0802a403 	.word	0x0802a403
 800f0b0:	0800f1c1 	.word	0x0800f1c1
 800f0b4:	20026b74 	.word	0x20026b74

0800f0b8 <xTimerGenericCommand>:
{
 800f0b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800f0ba:	4616      	mov	r6, r2
	configASSERT( xTimer );
 800f0bc:	4604      	mov	r4, r0
{
 800f0be:	461a      	mov	r2, r3
	configASSERT( xTimer );
 800f0c0:	b950      	cbnz	r0, 800f0d8 <xTimerGenericCommand+0x20>
 800f0c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0c6:	b672      	cpsid	i
 800f0c8:	f383 8811 	msr	BASEPRI, r3
 800f0cc:	f3bf 8f6f 	isb	sy
 800f0d0:	f3bf 8f4f 	dsb	sy
 800f0d4:	b662      	cpsie	i
 800f0d6:	e7fe      	b.n	800f0d6 <xTimerGenericCommand+0x1e>
	if( xTimerQueue != NULL )
 800f0d8:	4d0c      	ldr	r5, [pc, #48]	; (800f10c <xTimerGenericCommand+0x54>)
 800f0da:	6828      	ldr	r0, [r5, #0]
 800f0dc:	b178      	cbz	r0, 800f0fe <xTimerGenericCommand+0x46>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f0de:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f0e0:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f0e2:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f0e6:	dc0c      	bgt.n	800f102 <xTimerGenericCommand+0x4a>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f0e8:	f7ff fe66 	bl	800edb8 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f0ec:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f0ee:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f0f0:	4669      	mov	r1, sp
 800f0f2:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f0f4:	bf0c      	ite	eq
 800f0f6:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f0f8:	461a      	movne	r2, r3
 800f0fa:	f7fe fda4 	bl	800dc46 <xQueueGenericSend>
}
 800f0fe:	b004      	add	sp, #16
 800f100:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f102:	2300      	movs	r3, #0
 800f104:	4669      	mov	r1, sp
 800f106:	f7fe feab 	bl	800de60 <xQueueGenericSendFromISR>
 800f10a:	e7f8      	b.n	800f0fe <xTimerGenericCommand+0x46>
 800f10c:	20026b70 	.word	0x20026b70

0800f110 <prvSampleTimeNow>:
{
 800f110:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 800f114:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800f1bc <prvSampleTimeNow+0xac>
{
 800f118:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 800f11a:	f7ff fba1 	bl	800e860 <xTaskGetTickCount>
 800f11e:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800f120:	f8d8 3000 	ldr.w	r3, [r8]
 800f124:	4283      	cmp	r3, r0
 800f126:	d942      	bls.n	800f1ae <prvSampleTimeNow+0x9e>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f128:	4f22      	ldr	r7, [pc, #136]	; (800f1b4 <prvSampleTimeNow+0xa4>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f12a:	f04f 0900 	mov.w	r9, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f12e:	683b      	ldr	r3, [r7, #0]
 800f130:	681a      	ldr	r2, [r3, #0]
 800f132:	b95a      	cbnz	r2, 800f14c <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 800f134:	4a20      	ldr	r2, [pc, #128]	; (800f1b8 <prvSampleTimeNow+0xa8>)
 800f136:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f138:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800f13a:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 800f13c:	6039      	str	r1, [r7, #0]
}
 800f13e:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdFALSE;
 800f140:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 800f142:	f8c8 5000 	str.w	r5, [r8]
}
 800f146:	b004      	add	sp, #16
 800f148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f14c:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f14e:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f150:	f8d3 a000 	ldr.w	sl, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f154:	1d21      	adds	r1, r4, #4
 800f156:	4608      	mov	r0, r1
 800f158:	9103      	str	r1, [sp, #12]
 800f15a:	f7fe fa26 	bl	800d5aa <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f15e:	6a23      	ldr	r3, [r4, #32]
 800f160:	4620      	mov	r0, r4
 800f162:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f164:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800f168:	9903      	ldr	r1, [sp, #12]
 800f16a:	f013 0f04 	tst.w	r3, #4
 800f16e:	d0de      	beq.n	800f12e <prvSampleTimeNow+0x1e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f170:	69a3      	ldr	r3, [r4, #24]
 800f172:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 800f174:	459a      	cmp	sl, r3
 800f176:	d205      	bcs.n	800f184 <prvSampleTimeNow+0x74>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f178:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f17a:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f17c:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f17e:	f7fe f9fd 	bl	800d57c <vListInsert>
 800f182:	e7d4      	b.n	800f12e <prvSampleTimeNow+0x1e>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f184:	2300      	movs	r3, #0
 800f186:	4652      	mov	r2, sl
 800f188:	4620      	mov	r0, r4
 800f18a:	f8cd 9000 	str.w	r9, [sp]
 800f18e:	4619      	mov	r1, r3
 800f190:	f7ff ff92 	bl	800f0b8 <xTimerGenericCommand>
				configASSERT( xResult );
 800f194:	2800      	cmp	r0, #0
 800f196:	d1ca      	bne.n	800f12e <prvSampleTimeNow+0x1e>
 800f198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f19c:	b672      	cpsid	i
 800f19e:	f383 8811 	msr	BASEPRI, r3
 800f1a2:	f3bf 8f6f 	isb	sy
 800f1a6:	f3bf 8f4f 	dsb	sy
 800f1aa:	b662      	cpsie	i
 800f1ac:	e7fe      	b.n	800f1ac <prvSampleTimeNow+0x9c>
		*pxTimerListsWereSwitched = pdFALSE;
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	e7c5      	b.n	800f13e <prvSampleTimeNow+0x2e>
 800f1b2:	bf00      	nop
 800f1b4:	20026a4c 	.word	0x20026a4c
 800f1b8:	20026a50 	.word	0x20026a50
 800f1bc:	20026b1c 	.word	0x20026b1c

0800f1c0 <prvTimerTask>:
{
 800f1c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f1c4:	4d71      	ldr	r5, [pc, #452]	; (800f38c <prvTimerTask+0x1cc>)
{
 800f1c6:	b089      	sub	sp, #36	; 0x24
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f1c8:	4e71      	ldr	r6, [pc, #452]	; (800f390 <prvTimerTask+0x1d0>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f1ca:	682b      	ldr	r3, [r5, #0]
 800f1cc:	f8d3 8000 	ldr.w	r8, [r3]
 800f1d0:	f1b8 0f00 	cmp.w	r8, #0
 800f1d4:	d037      	beq.n	800f246 <prvTimerTask+0x86>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f1d6:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f1d8:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f1da:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 800f1de:	f7ff fb37 	bl	800e850 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f1e2:	a804      	add	r0, sp, #16
 800f1e4:	f7ff ff94 	bl	800f110 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800f1e8:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f1ea:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d16b      	bne.n	800f2c8 <prvTimerTask+0x108>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f1f0:	2c00      	cmp	r4, #0
 800f1f2:	d14e      	bne.n	800f292 <prvTimerTask+0xd2>
 800f1f4:	4540      	cmp	r0, r8
 800f1f6:	d352      	bcc.n	800f29e <prvTimerTask+0xde>
				( void ) xTaskResumeAll();
 800f1f8:	f7ff fbd0 	bl	800e99c <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f1fc:	682b      	ldr	r3, [r5, #0]
 800f1fe:	68db      	ldr	r3, [r3, #12]
 800f200:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f202:	1d38      	adds	r0, r7, #4
 800f204:	f7fe f9d1 	bl	800d5aa <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f208:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f20c:	0758      	lsls	r0, r3, #29
 800f20e:	d51c      	bpl.n	800f24a <prvTimerTask+0x8a>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f210:	69b9      	ldr	r1, [r7, #24]
 800f212:	4643      	mov	r3, r8
 800f214:	464a      	mov	r2, r9
 800f216:	4638      	mov	r0, r7
 800f218:	4441      	add	r1, r8
 800f21a:	f7ff fefb 	bl	800f014 <prvInsertTimerInActiveList>
 800f21e:	b1c0      	cbz	r0, 800f252 <prvTimerTask+0x92>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f220:	4623      	mov	r3, r4
 800f222:	4642      	mov	r2, r8
 800f224:	4621      	mov	r1, r4
 800f226:	4638      	mov	r0, r7
 800f228:	9400      	str	r4, [sp, #0]
 800f22a:	f7ff ff45 	bl	800f0b8 <xTimerGenericCommand>
			configASSERT( xResult );
 800f22e:	b980      	cbnz	r0, 800f252 <prvTimerTask+0x92>
 800f230:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f234:	b672      	cpsid	i
 800f236:	f383 8811 	msr	BASEPRI, r3
 800f23a:	f3bf 8f6f 	isb	sy
 800f23e:	f3bf 8f4f 	dsb	sy
 800f242:	b662      	cpsie	i
 800f244:	e7fe      	b.n	800f244 <prvTimerTask+0x84>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f246:	2401      	movs	r4, #1
 800f248:	e7c9      	b.n	800f1de <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f24a:	f023 0301 	bic.w	r3, r3, #1
 800f24e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f252:	6a3b      	ldr	r3, [r7, #32]
 800f254:	4638      	mov	r0, r7
 800f256:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f258:	2200      	movs	r2, #0
 800f25a:	a904      	add	r1, sp, #16
 800f25c:	6830      	ldr	r0, [r6, #0]
 800f25e:	f7fe fec4 	bl	800dfea <xQueueReceive>
 800f262:	2800      	cmp	r0, #0
 800f264:	d0b1      	beq.n	800f1ca <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f266:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f268:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	db2f      	blt.n	800f2ce <prvTimerTask+0x10e>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f26e:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f270:	6963      	ldr	r3, [r4, #20]
 800f272:	2b00      	cmp	r3, #0
 800f274:	d132      	bne.n	800f2dc <prvTimerTask+0x11c>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f276:	a803      	add	r0, sp, #12
 800f278:	f7ff ff4a 	bl	800f110 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800f27c:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f27e:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 800f280:	2b09      	cmp	r3, #9
 800f282:	d8e9      	bhi.n	800f258 <prvTimerTask+0x98>
 800f284:	e8df f003 	tbb	[pc, r3]
 800f288:	592e2e2e 	.word	0x592e2e2e
 800f28c:	2e2e7a60 	.word	0x2e2e7a60
 800f290:	6059      	.short	0x6059
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f292:	4b40      	ldr	r3, [pc, #256]	; (800f394 <prvTimerTask+0x1d4>)
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	681c      	ldr	r4, [r3, #0]
 800f298:	fab4 f484 	clz	r4, r4
 800f29c:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f29e:	4622      	mov	r2, r4
 800f2a0:	eba8 0109 	sub.w	r1, r8, r9
 800f2a4:	6830      	ldr	r0, [r6, #0]
 800f2a6:	f7ff f8c8 	bl	800e43a <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f2aa:	f7ff fb77 	bl	800e99c <xTaskResumeAll>
 800f2ae:	2800      	cmp	r0, #0
 800f2b0:	d1d2      	bne.n	800f258 <prvTimerTask+0x98>
					portYIELD_WITHIN_API();
 800f2b2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f2b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f2ba:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800f2be:	f3bf 8f4f 	dsb	sy
 800f2c2:	f3bf 8f6f 	isb	sy
 800f2c6:	e7c7      	b.n	800f258 <prvTimerTask+0x98>
			( void ) xTaskResumeAll();
 800f2c8:	f7ff fb68 	bl	800e99c <xTaskResumeAll>
}
 800f2cc:	e7c4      	b.n	800f258 <prvTimerTask+0x98>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f2ce:	9b05      	ldr	r3, [sp, #20]
 800f2d0:	9907      	ldr	r1, [sp, #28]
 800f2d2:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f2d4:	9b04      	ldr	r3, [sp, #16]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	dbbe      	blt.n	800f258 <prvTimerTask+0x98>
 800f2da:	e7c8      	b.n	800f26e <prvTimerTask+0xae>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f2dc:	1d20      	adds	r0, r4, #4
 800f2de:	f7fe f964 	bl	800d5aa <uxListRemove>
 800f2e2:	e7c8      	b.n	800f276 <prvTimerTask+0xb6>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f2e4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f2e8:	4620      	mov	r0, r4
 800f2ea:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f2ec:	f043 0301 	orr.w	r3, r3, #1
 800f2f0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f2f4:	9b05      	ldr	r3, [sp, #20]
 800f2f6:	4419      	add	r1, r3
 800f2f8:	f7ff fe8c 	bl	800f014 <prvInsertTimerInActiveList>
 800f2fc:	2800      	cmp	r0, #0
 800f2fe:	d0ab      	beq.n	800f258 <prvTimerTask+0x98>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f300:	6a23      	ldr	r3, [r4, #32]
 800f302:	4620      	mov	r0, r4
 800f304:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f306:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800f30a:	0759      	lsls	r1, r3, #29
 800f30c:	d5a4      	bpl.n	800f258 <prvTimerTask+0x98>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f30e:	69a2      	ldr	r2, [r4, #24]
 800f310:	2300      	movs	r3, #0
 800f312:	9905      	ldr	r1, [sp, #20]
 800f314:	4620      	mov	r0, r4
 800f316:	9300      	str	r3, [sp, #0]
 800f318:	440a      	add	r2, r1
 800f31a:	4619      	mov	r1, r3
 800f31c:	f7ff fecc 	bl	800f0b8 <xTimerGenericCommand>
							configASSERT( xResult );
 800f320:	2800      	cmp	r0, #0
 800f322:	d199      	bne.n	800f258 <prvTimerTask+0x98>
 800f324:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f328:	b672      	cpsid	i
 800f32a:	f383 8811 	msr	BASEPRI, r3
 800f32e:	f3bf 8f6f 	isb	sy
 800f332:	f3bf 8f4f 	dsb	sy
 800f336:	b662      	cpsie	i
 800f338:	e7fe      	b.n	800f338 <prvTimerTask+0x178>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f33a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f33e:	f023 0301 	bic.w	r3, r3, #1
 800f342:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800f346:	e787      	b.n	800f258 <prvTimerTask+0x98>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f348:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800f34c:	f043 0301 	orr.w	r3, r3, #1
 800f350:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f354:	9905      	ldr	r1, [sp, #20]
 800f356:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f358:	b951      	cbnz	r1, 800f370 <prvTimerTask+0x1b0>
 800f35a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f35e:	b672      	cpsid	i
 800f360:	f383 8811 	msr	BASEPRI, r3
 800f364:	f3bf 8f6f 	isb	sy
 800f368:	f3bf 8f4f 	dsb	sy
 800f36c:	b662      	cpsie	i
 800f36e:	e7fe      	b.n	800f36e <prvTimerTask+0x1ae>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f370:	4603      	mov	r3, r0
 800f372:	4401      	add	r1, r0
 800f374:	4620      	mov	r0, r4
 800f376:	f7ff fe4d 	bl	800f014 <prvInsertTimerInActiveList>
					break;
 800f37a:	e76d      	b.n	800f258 <prvTimerTask+0x98>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f37c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800f380:	079a      	lsls	r2, r3, #30
 800f382:	d4dc      	bmi.n	800f33e <prvTimerTask+0x17e>
							vPortFree( pxTimer );
 800f384:	4620      	mov	r0, r4
 800f386:	f7fe f8a3 	bl	800d4d0 <vPortFree>
 800f38a:	e765      	b.n	800f258 <prvTimerTask+0x98>
 800f38c:	20026a4c 	.word	0x20026a4c
 800f390:	20026b70 	.word	0x20026b70
 800f394:	20026a50 	.word	0x20026a50

0800f398 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 800f398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f39c:	b093      	sub	sp, #76	; 0x4c
 800f39e:	9209      	str	r2, [sp, #36]	; 0x24
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr, *pOutAddr2;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
 800f3a0:	f44f 72c0 	mov.w	r2, #384	; 0x180
  currentMCU = BlockIndex;
 800f3a4:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
{  
 800f3a8:	9111      	str	r1, [sp, #68]	; 0x44
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
 800f3aa:	fbb3 f3f2 	udiv	r3, r3, r2
 800f3ae:	9308      	str	r3, [sp, #32]
  

  while(currentMCU < (numberMCU + BlockIndex))
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 800f3b0:	4b73      	ldr	r3, [pc, #460]	; (800f580 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1e8>)
 800f3b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f3b4:	9206      	str	r2, [sp, #24]
    
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f3b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      if(i == 8)
      {
        pLum = pInBuffer + 128;
      }
      
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800f3b8:	691b      	ldr	r3, [r3, #16]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f3ba:	9201      	str	r2, [sp, #4]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800f3bc:	930c      	str	r3, [sp, #48]	; 0x30
          pLum += 64;                      
        }

        pLum = pLum - 128 + 16;
        
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
 800f3be:	0053      	lsls	r3, r2, #1
 800f3c0:	930d      	str	r3, [sp, #52]	; 0x34
  while(currentMCU < (numberMCU + BlockIndex))
 800f3c2:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 800f3c6:	4413      	add	r3, r2
 800f3c8:	455b      	cmp	r3, fp
 800f3ca:	d803      	bhi.n	800f3d4 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x3c>
    }   
    
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
  }
  return numberMCU;
}
 800f3cc:	9808      	ldr	r0, [sp, #32]
 800f3ce:	b013      	add	sp, #76	; 0x4c
 800f3d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 800f3d4:	ea4f 120b 	mov.w	r2, fp, lsl #4
 800f3d8:	9b06      	ldr	r3, [sp, #24]
    currentMCU++;
 800f3da:	f10b 0b01 	add.w	fp, fp, #1
    pLum = pInBuffer;
 800f3de:	4681      	mov	r9, r0
    for(i= 0; i <  16; i+=2)
 800f3e0:	f04f 0800 	mov.w	r8, #0
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 800f3e4:	fbb2 f1f3 	udiv	r1, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f3e8:	9b01      	ldr	r3, [sp, #4]
 800f3ea:	fb03 f401 	mul.w	r4, r3, r1
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 800f3ee:	9b06      	ldr	r3, [sp, #24]
 800f3f0:	fb03 2311 	mls	r3, r3, r1, r2
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f3f4:	005b      	lsls	r3, r3, #1
 800f3f6:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800f3fa:	9300      	str	r3, [sp, #0]
    pChrom = pInBuffer + 256; /* pChroma = pInBuffer + 4*64 */
 800f3fc:	f500 7380 	add.w	r3, r0, #256	; 0x100
 800f400:	9302      	str	r3, [sp, #8]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800f402:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f404:	9a00      	ldr	r2, [sp, #0]
 800f406:	4293      	cmp	r3, r2
 800f408:	f240 80ac 	bls.w	800f564 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1cc>
        pOutAddr = pOutBuffer + refline;
 800f40c:	9b11      	ldr	r3, [sp, #68]	; 0x44
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
 800f40e:	f04f 0c00 	mov.w	ip, #0
 800f412:	f8cd 900c 	str.w	r9, [sp, #12]
        pOutAddr = pOutBuffer + refline;
 800f416:	4413      	add	r3, r2
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
 800f418:	9a01      	ldr	r2, [sp, #4]
        pOutAddr = pOutBuffer + refline;
 800f41a:	9307      	str	r3, [sp, #28]
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
 800f41c:	4413      	add	r3, r2
 800f41e:	930e      	str	r3, [sp, #56]	; 0x38
 800f420:	9b02      	ldr	r3, [sp, #8]
 800f422:	9304      	str	r3, [sp, #16]
          for(j=0; j < 8; j+=2)
 800f424:	9b04      	ldr	r3, [sp, #16]
    for(i= 0; i <  16; i+=2)
 800f426:	2600      	movs	r6, #0
 800f428:	9f03      	ldr	r7, [sp, #12]
 800f42a:	3b01      	subs	r3, #1
 800f42c:	9305      	str	r3, [sp, #20]
 800f42e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f430:	4463      	add	r3, ip
 800f432:	930a      	str	r3, [sp, #40]	; 0x28
 800f434:	9b07      	ldr	r3, [sp, #28]
 800f436:	4463      	add	r3, ip
 800f438:	930b      	str	r3, [sp, #44]	; 0x2c
 800f43a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
          for(j=0; j < 8; j+=2)
 800f43c:	3702      	adds	r7, #2
            ycomp = (int32_t)(*(pLum +j));
 800f43e:	f817 ec02 	ldrb.w	lr, [r7, #-2]
 800f442:	4433      	add	r3, r6
 800f444:	930f      	str	r3, [sp, #60]	; 0x3c
 800f446:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f448:	4433      	add	r3, r6
 800f44a:	9310      	str	r3, [sp, #64]	; 0x40
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 800f44c:	9b05      	ldr	r3, [sp, #20]
 800f44e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800f452:	9305      	str	r3, [sp, #20]
 800f454:	4b4b      	ldr	r3, [pc, #300]	; (800f584 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1ec>)
 800f456:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 800f45a:	9b05      	ldr	r3, [sp, #20]
 800f45c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800f460:	4b49      	ldr	r3, [pc, #292]	; (800f588 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1f0>)
 800f462:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 800f466:	4b49      	ldr	r3, [pc, #292]	; (800f58c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1f4>)
 800f468:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f46c:	4b48      	ldr	r3, [pc, #288]	; (800f590 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1f8>)
 800f46e:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800f472:	440a      	add	r2, r1
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f474:	4947      	ldr	r1, [pc, #284]	; (800f594 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1fc>)
 800f476:	440d      	add	r5, r1
 800f478:	460b      	mov	r3, r1
 800f47a:	eb05 010e 	add.w	r1, r5, lr
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f47e:	eb03 4222 	add.w	r2, r3, r2, asr #16
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 800f482:	441c      	add	r4, r3
            *(__IO uint16_t *)pOutAddr = 
 800f484:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f486:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
 800f48a:	ea4f 0ad1 	mov.w	sl, r1, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f48e:	eb02 010e 	add.w	r1, r2, lr
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 800f492:	44a6      	add	lr, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f494:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
 800f498:	f89e e100 	ldrb.w	lr, [lr, #256]	; 0x100
 800f49c:	0889      	lsrs	r1, r1, #2
 800f49e:	0149      	lsls	r1, r1, #5
 800f4a0:	ea41 21ca 	orr.w	r1, r1, sl, lsl #11
 800f4a4:	ea41 01de 	orr.w	r1, r1, lr, lsr #3
            *(__IO uint16_t *)pOutAddr = 
 800f4a8:	5399      	strh	r1, [r3, r6]
            ycomp = (int32_t)(*(pLum +j +1));
 800f4aa:	f817 ec01 	ldrb.w	lr, [r7, #-1]
            *((__IO uint16_t *)(pOutAddr + 2)) = 
 800f4ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f4b0:	eb05 010e 	add.w	r1, r5, lr
 800f4b4:	f891 a100 	ldrb.w	sl, [r1, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f4b8:	eb02 010e 	add.w	r1, r2, lr
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 800f4bc:	44a6      	add	lr, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f4be:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f4c2:	ea4f 0ada 	mov.w	sl, sl, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f4c6:	0889      	lsrs	r1, r1, #2
 800f4c8:	0149      	lsls	r1, r1, #5
 800f4ca:	ea41 21ca 	orr.w	r1, r1, sl, lsl #11
 800f4ce:	f89e a100 	ldrb.w	sl, [lr, #256]	; 0x100
 800f4d2:	ea41 01da 	orr.w	r1, r1, sl, lsr #3
            *((__IO uint16_t *)(pOutAddr + 2)) = 
 800f4d6:	8059      	strh	r1, [r3, #2]
            ycomp = (int32_t)(*(pLum +j +8));
 800f4d8:	f897 e006 	ldrb.w	lr, [r7, #6]
            *(__IO uint16_t *)pOutAddr2 = 
 800f4dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f4de:	eb05 010e 	add.w	r1, r5, lr
 800f4e2:	f891 a100 	ldrb.w	sl, [r1, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f4e6:	eb02 010e 	add.w	r1, r2, lr
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 800f4ea:	44a6      	add	lr, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f4ec:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f4f0:	ea4f 0ada 	mov.w	sl, sl, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f4f4:	0889      	lsrs	r1, r1, #2
 800f4f6:	0149      	lsls	r1, r1, #5
 800f4f8:	ea41 21ca 	orr.w	r1, r1, sl, lsl #11
 800f4fc:	f89e a100 	ldrb.w	sl, [lr, #256]	; 0x100
 800f500:	ea41 01da 	orr.w	r1, r1, sl, lsr #3
            *(__IO uint16_t *)pOutAddr2 = 
 800f504:	5399      	strh	r1, [r3, r6]
          for(j=0; j < 8; j+=2)
 800f506:	3604      	adds	r6, #4
            ycomp = (int32_t)(*(pLum +j +8 +1));
 800f508:	79f9      	ldrb	r1, [r7, #7]
          for(j=0; j < 8; j+=2)
 800f50a:	2e10      	cmp	r6, #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f50c:	440d      	add	r5, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f50e:	440a      	add	r2, r1
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
 800f510:	4421      	add	r1, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f512:	f895 5100 	ldrb.w	r5, [r5, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f516:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f51a:	ea4f 05d5 	mov.w	r5, r5, lsr #3
            *((__IO uint16_t *)(pOutAddr2 +2)) = 
 800f51e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f520:	ea4f 0292 	mov.w	r2, r2, lsr #2
 800f524:	ea4f 1242 	mov.w	r2, r2, lsl #5
 800f528:	ea42 22c5 	orr.w	r2, r2, r5, lsl #11
 800f52c:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
 800f530:	ea42 02d5 	orr.w	r2, r2, r5, lsr #3
            *((__IO uint16_t *)(pOutAddr2 +2)) = 
 800f534:	805a      	strh	r2, [r3, #2]
          for(j=0; j < 8; j+=2)
 800f536:	d180      	bne.n	800f43a <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xa2>
            pChrom++;
 800f538:	9b04      	ldr	r3, [sp, #16]
        for(k= 0; k<2; k++)
 800f53a:	f10c 0c10 	add.w	ip, ip, #16
            pChrom++;
 800f53e:	3304      	adds	r3, #4
        for(k= 0; k<2; k++)
 800f540:	f1bc 0f20 	cmp.w	ip, #32
            pChrom++;
 800f544:	9304      	str	r3, [sp, #16]
          pLum += 64;                      
 800f546:	9b03      	ldr	r3, [sp, #12]
 800f548:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800f54c:	9303      	str	r3, [sp, #12]
        for(k= 0; k<2; k++)
 800f54e:	f47f af69 	bne.w	800f424 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x8c>
            pChrom++;
 800f552:	9b02      	ldr	r3, [sp, #8]
        pLum = pLum - 128 + 16;
 800f554:	f109 0910 	add.w	r9, r9, #16
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
 800f558:	9a00      	ldr	r2, [sp, #0]
            pChrom++;
 800f55a:	3308      	adds	r3, #8
 800f55c:	9302      	str	r3, [sp, #8]
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
 800f55e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f560:	441a      	add	r2, r3
 800f562:	9200      	str	r2, [sp, #0]
    for(i= 0; i <  16; i+=2)
 800f564:	f108 0802 	add.w	r8, r8, #2
 800f568:	f1b8 0f10 	cmp.w	r8, #16
 800f56c:	d102      	bne.n	800f574 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1dc>
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
 800f56e:	f500 70c0 	add.w	r0, r0, #384	; 0x180
 800f572:	e726      	b.n	800f3c2 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a>
      if(i == 8)
 800f574:	f1b8 0f08 	cmp.w	r8, #8
        pLum = pInBuffer + 128;
 800f578:	bf08      	it	eq
 800f57a:	f100 0980 	addeq.w	r9, r0, #128	; 0x80
 800f57e:	e740      	b.n	800f402 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x6a>
 800f580:	20027b78 	.word	0x20027b78
 800f584:	20026b78 	.word	0x20026b78
 800f588:	20027778 	.word	0x20027778
 800f58c:	20027378 	.word	0x20027378
 800f590:	20026f78 	.word	0x20026f78
 800f594:	0802a40b 	.word	0x0802a40b

0800f598 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 800f598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
 800f59c:	0a1b      	lsrs	r3, r3, #8
{  
 800f59e:	b08d      	sub	sp, #52	; 0x34
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
 800f5a0:	9305      	str	r3, [sp, #20]
  currentMCU = BlockIndex;
  

  while(currentMCU < (numberMCU + BlockIndex))
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 800f5a2:	4b4f      	ldr	r3, [pc, #316]	; (800f6e0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x148>)
{  
 800f5a4:	9206      	str	r2, [sp, #24]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 800f5a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  currentMCU = BlockIndex;
 800f5a8:	f8dd e018 	ldr.w	lr, [sp, #24]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 800f5ac:	9202      	str	r2, [sp, #8]
    
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f5ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    
    pLum = pInBuffer;
    
    for(i= 0; i <  8; i++)
    {
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800f5b0:	691b      	ldr	r3, [r3, #16]
{  
 800f5b2:	910a      	str	r1, [sp, #40]	; 0x28
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f5b4:	9203      	str	r2, [sp, #12]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800f5b6:	9307      	str	r3, [sp, #28]
  while(currentMCU < (numberMCU + BlockIndex))
 800f5b8:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 800f5bc:	4413      	add	r3, r2
 800f5be:	4573      	cmp	r3, lr
 800f5c0:	d803      	bhi.n	800f5ca <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x32>
    }   
    
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
  }
  return numberMCU;
}
 800f5c2:	9805      	ldr	r0, [sp, #20]
 800f5c4:	b00d      	add	sp, #52	; 0x34
 800f5c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 800f5ca:	ea4f 120e 	mov.w	r2, lr, lsl #4
 800f5ce:	9b02      	ldr	r3, [sp, #8]
    currentMCU++;
 800f5d0:	f10e 0e01 	add.w	lr, lr, #1
 800f5d4:	f100 0780 	add.w	r7, r0, #128	; 0x80
    pLum = pInBuffer;
 800f5d8:	4682      	mov	sl, r0
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 800f5da:	fbb2 f1f3 	udiv	r1, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f5de:	9b03      	ldr	r3, [sp, #12]
 800f5e0:	fb03 f401 	mul.w	r4, r3, r1
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 800f5e4:	9b02      	ldr	r3, [sp, #8]
 800f5e6:	fb03 2311 	mls	r3, r3, r1, r2
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f5ea:	005b      	lsls	r3, r3, #1
 800f5ec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f5f0:	9300      	str	r3, [sp, #0]
    currentMCU++;
 800f5f2:	2308      	movs	r3, #8
 800f5f4:	9304      	str	r3, [sp, #16]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800f5f6:	9b07      	ldr	r3, [sp, #28]
 800f5f8:	9a00      	ldr	r2, [sp, #0]
 800f5fa:	4293      	cmp	r3, r2
 800f5fc:	d969      	bls.n	800f6d2 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x13a>
        pOutAddr = pOutBuffer + refline;
 800f5fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f600:	46d0      	mov	r8, sl
 800f602:	eb03 0902 	add.w	r9, r3, r2
        for(k= 0; k<2; k++)
 800f606:	f107 0308 	add.w	r3, r7, #8
 800f60a:	9308      	str	r3, [sp, #32]
          for(j=0; j < 8; j+=2)
 800f60c:	1e7b      	subs	r3, r7, #1
    currentMCU++;
 800f60e:	2400      	movs	r4, #0
 800f610:	9301      	str	r3, [sp, #4]
            ycomp = (int32_t)(*(pLum +j +1));
 800f612:	f108 0301 	add.w	r3, r8, #1
 800f616:	930b      	str	r3, [sp, #44]	; 0x2c
 800f618:	eb09 0384 	add.w	r3, r9, r4, lsl #2
            ycomp = (int32_t)(*(pLum +j));
 800f61c:	f818 c014 	ldrb.w	ip, [r8, r4, lsl #1]
 800f620:	9309      	str	r3, [sp, #36]	; 0x24
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 800f622:	9b01      	ldr	r3, [sp, #4]
 800f624:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800f628:	9301      	str	r3, [sp, #4]
 800f62a:	4b2e      	ldr	r3, [pc, #184]	; (800f6e4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x14c>)
 800f62c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 800f630:	9b01      	ldr	r3, [sp, #4]
 800f632:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
 800f636:	4b2c      	ldr	r3, [pc, #176]	; (800f6e8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x150>)
 800f638:	f853 6021 	ldr.w	r6, [r3, r1, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 800f63c:	4b2b      	ldr	r3, [pc, #172]	; (800f6ec <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x154>)
 800f63e:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800f642:	4b2b      	ldr	r3, [pc, #172]	; (800f6f0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x158>)
 800f644:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f648:	4411      	add	r1, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f64a:	4a2a      	ldr	r2, [pc, #168]	; (800f6f4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x15c>)
 800f64c:	4613      	mov	r3, r2
 800f64e:	4416      	add	r6, r2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f650:	eb03 4121 	add.w	r1, r3, r1, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f654:	eb06 020c 	add.w	r2, r6, ip
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 800f658:	441d      	add	r5, r3
            ycomp = (int32_t)(*(pLum +j +1));
 800f65a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f65c:	f892 b100 	ldrb.w	fp, [r2, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f660:	eb01 020c 	add.w	r2, r1, ip
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 800f664:	44ac      	add	ip, r5
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f666:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f66a:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f66e:	0892      	lsrs	r2, r2, #2
 800f670:	0152      	lsls	r2, r2, #5
 800f672:	ea42 22cb 	orr.w	r2, r2, fp, lsl #11
 800f676:	f89c b100 	ldrb.w	fp, [ip, #256]	; 0x100
 800f67a:	ea42 02db 	orr.w	r2, r2, fp, lsr #3
            *(__IO uint16_t *)pOutAddr = 
 800f67e:	f829 2024 	strh.w	r2, [r9, r4, lsl #2]
            ycomp = (int32_t)(*(pLum +j +1));
 800f682:	f813 2014 	ldrb.w	r2, [r3, r4, lsl #1]
          for(j=0; j < 8; j+=2)
 800f686:	3401      	adds	r4, #1
            *((__IO uint16_t *)(pOutAddr + 2)) = 
 800f688:	9b09      	ldr	r3, [sp, #36]	; 0x24
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f68a:	4411      	add	r1, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f68c:	4416      	add	r6, r2
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
 800f68e:	4415      	add	r5, r2
          for(j=0; j < 8; j+=2)
 800f690:	2c04      	cmp	r4, #4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f692:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f696:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f69a:	ea4f 0191 	mov.w	r1, r1, lsr #2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f69e:	ea4f 06d6 	mov.w	r6, r6, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f6a2:	ea4f 1141 	mov.w	r1, r1, lsl #5
 800f6a6:	ea41 21c6 	orr.w	r1, r1, r6, lsl #11
 800f6aa:	f895 6100 	ldrb.w	r6, [r5, #256]	; 0x100
 800f6ae:	ea41 01d6 	orr.w	r1, r1, r6, lsr #3
            *((__IO uint16_t *)(pOutAddr + 2)) = 
 800f6b2:	8059      	strh	r1, [r3, #2]
          for(j=0; j < 8; j+=2)
 800f6b4:	d1b0      	bne.n	800f618 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x80>
            pChrom++;
 800f6b6:	3704      	adds	r7, #4
        for(k= 0; k<2; k++)
 800f6b8:	9b08      	ldr	r3, [sp, #32]
            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 800f6ba:	f109 0910 	add.w	r9, r9, #16
          pLum += 64;                      
 800f6be:	f108 0840 	add.w	r8, r8, #64	; 0x40
        for(k= 0; k<2; k++)
 800f6c2:	42bb      	cmp	r3, r7
 800f6c4:	d1a2      	bne.n	800f60c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x74>
        refline += JPEG_ConvertorParams.ScaledWidth;          
 800f6c6:	9a00      	ldr	r2, [sp, #0]
        pLum = pLum - 128 + 8;
 800f6c8:	f10a 0a08 	add.w	sl, sl, #8
        refline += JPEG_ConvertorParams.ScaledWidth;          
 800f6cc:	9b03      	ldr	r3, [sp, #12]
 800f6ce:	441a      	add	r2, r3
 800f6d0:	9200      	str	r2, [sp, #0]
    for(i= 0; i <  8; i++)
 800f6d2:	9b04      	ldr	r3, [sp, #16]
 800f6d4:	3b01      	subs	r3, #1
 800f6d6:	9304      	str	r3, [sp, #16]
 800f6d8:	d18d      	bne.n	800f5f6 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x5e>
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
 800f6da:	f500 7080 	add.w	r0, r0, #256	; 0x100
 800f6de:	e76b      	b.n	800f5b8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x20>
 800f6e0:	20027b78 	.word	0x20027b78
 800f6e4:	20026b78 	.word	0x20026b78
 800f6e8:	20027778 	.word	0x20027778
 800f6ec:	20027378 	.word	0x20027378
 800f6f0:	20026f78 	.word	0x20026f78
 800f6f4:	0802a40b 	.word	0x0802a40b

0800f6f8 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 800f6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6fc:	4692      	mov	sl, r2
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 800f6fe:	22c0      	movs	r2, #192	; 0xc0
{  
 800f700:	b089      	sub	sp, #36	; 0x24
  currentMCU = BlockIndex;
 800f702:	4654      	mov	r4, sl
{  
 800f704:	9107      	str	r1, [sp, #28]
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 800f706:	fbb3 f3f2 	udiv	r3, r3, r2
  

  while(currentMCU < (numberMCU + BlockIndex))
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800f70a:	4a35      	ldr	r2, [pc, #212]	; (800f7e0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xe8>)
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 800f70c:	9304      	str	r3, [sp, #16]
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800f70e:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800f710:	9100      	str	r1, [sp, #0]
    
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f712:	6a91      	ldr	r1, [r2, #40]	; 0x28
    
    pLum = pInBuffer;
    
    for(i= 0; i <  8; i++)
    {
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800f714:	6912      	ldr	r2, [r2, #16]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f716:	9101      	str	r1, [sp, #4]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800f718:	9205      	str	r2, [sp, #20]
  while(currentMCU < (numberMCU + BlockIndex))
 800f71a:	9b04      	ldr	r3, [sp, #16]
 800f71c:	eb03 020a 	add.w	r2, r3, sl
 800f720:	42a2      	cmp	r2, r4
 800f722:	d803      	bhi.n	800f72c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x34>
    }   
    
    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
  }
  return numberMCU;
}
 800f724:	4618      	mov	r0, r3
 800f726:	b009      	add	sp, #36	; 0x24
 800f728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800f72c:	00e1      	lsls	r1, r4, #3
 800f72e:	9a00      	ldr	r2, [sp, #0]
    currentMCU++;   
 800f730:	3401      	adds	r4, #1
    pLum = pInBuffer;
 800f732:	4684      	mov	ip, r0
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800f734:	fbb1 f5f2 	udiv	r5, r1, r2
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f738:	9a01      	ldr	r2, [sp, #4]
 800f73a:	fb02 f605 	mul.w	r6, r2, r5
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 800f73e:	9a00      	ldr	r2, [sp, #0]
 800f740:	fb02 1215 	mls	r2, r2, r5, r1
    currentMCU++;   
 800f744:	2108      	movs	r1, #8
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f746:	0052      	lsls	r2, r2, #1
    currentMCU++;   
 800f748:	9103      	str	r1, [sp, #12]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f74a:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
    pChrom = pInBuffer + 64; /* pChroma = pInBuffer + 4*64 */
 800f74e:	f100 0640 	add.w	r6, r0, #64	; 0x40
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800f752:	9905      	ldr	r1, [sp, #20]
 800f754:	4291      	cmp	r1, r2
 800f756:	d93d      	bls.n	800f7d4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xdc>
        pOutAddr = pOutBuffer+ refline;
 800f758:	9907      	ldr	r1, [sp, #28]
 800f75a:	f106 3eff 	add.w	lr, r6, #4294967295
 800f75e:	188d      	adds	r5, r1, r2
          for(j=0; j < 8; j++)
 800f760:	f10c 31ff 	add.w	r1, ip, #4294967295
 800f764:	9102      	str	r1, [sp, #8]
 800f766:	f105 0110 	add.w	r1, r5, #16
 800f76a:	9106      	str	r1, [sp, #24]
            ycomp = (int32_t)(*(pLum +j));
 800f76c:	9f02      	ldr	r7, [sp, #8]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 800f76e:	f81e 8f01 	ldrb.w	r8, [lr, #1]!
            ycomp = (int32_t)(*(pLum +j));
 800f772:	f817 1f01 	ldrb.w	r1, [r7, #1]!
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 800f776:	f89e 9040 	ldrb.w	r9, [lr, #64]	; 0x40
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f77a:	4b1a      	ldr	r3, [pc, #104]	; (800f7e4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xec>)
            ycomp = (int32_t)(*(pLum +j));
 800f77c:	9702      	str	r7, [sp, #8]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f77e:	4f1a      	ldr	r7, [pc, #104]	; (800f7e8 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xf0>)
 800f780:	4419      	add	r1, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
 800f782:	4b1a      	ldr	r3, [pc, #104]	; (800f7ec <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xf4>)
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f784:	f857 7029 	ldr.w	r7, [r7, r9, lsl #2]
 800f788:	440f      	add	r7, r1
 800f78a:	f897 b100 	ldrb.w	fp, [r7, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
 800f78e:	f853 7028 	ldr.w	r7, [r3, r8, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 800f792:	4b17      	ldr	r3, [pc, #92]	; (800f7f0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xf8>)
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f794:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
 800f798:	440f      	add	r7, r1
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 800f79a:	f853 9029 	ldr.w	r9, [r3, r9, lsl #2]
 800f79e:	4b15      	ldr	r3, [pc, #84]	; (800f7f4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xfc>)
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f7a0:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 800f7a4:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f7a8:	08ff      	lsrs	r7, r7, #3
          for(j=0; j < 8; j++)
 800f7aa:	9b06      	ldr	r3, [sp, #24]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 800f7ac:	44c8      	add	r8, r9
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f7ae:	ea47 27cb 	orr.w	r7, r7, fp, lsl #11
 800f7b2:	eb01 4828 	add.w	r8, r1, r8, asr #16
 800f7b6:	f898 b100 	ldrb.w	fp, [r8, #256]	; 0x100
 800f7ba:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 800f7be:	ea47 174b 	orr.w	r7, r7, fp, lsl #5
            *(__IO uint16_t *)pOutAddr = 
 800f7c2:	f825 7b02 	strh.w	r7, [r5], #2
          for(j=0; j < 8; j++)
 800f7c6:	429d      	cmp	r5, r3
 800f7c8:	d1d0      	bne.n	800f76c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x74>
        refline += JPEG_ConvertorParams.ScaledWidth;          
 800f7ca:	9b01      	ldr	r3, [sp, #4]
            pChrom++;
 800f7cc:	3608      	adds	r6, #8
          pLum += 8;
 800f7ce:	f10c 0c08 	add.w	ip, ip, #8
        refline += JPEG_ConvertorParams.ScaledWidth;          
 800f7d2:	441a      	add	r2, r3
    for(i= 0; i <  8; i++)
 800f7d4:	9b03      	ldr	r3, [sp, #12]
 800f7d6:	3b01      	subs	r3, #1
 800f7d8:	9303      	str	r3, [sp, #12]
 800f7da:	d1ba      	bne.n	800f752 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x5a>
    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
 800f7dc:	30c0      	adds	r0, #192	; 0xc0
 800f7de:	e79c      	b.n	800f71a <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x22>
 800f7e0:	20027b78 	.word	0x20027b78
 800f7e4:	0802a40b 	.word	0x0802a40b
 800f7e8:	20027778 	.word	0x20027778
 800f7ec:	20026b78 	.word	0x20026b78
 800f7f0:	20027378 	.word	0x20027378
 800f7f4:	20026f78 	.word	0x20026f78

0800f7f8 <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 800f7f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7fc:	b085      	sub	sp, #20
 800f7fe:	4604      	mov	r4, r0

  uint32_t i,j, ySample;
  uint8_t *pOutAddr,  *pLum;

  
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
 800f800:	0998      	lsrs	r0, r3, #6
{
 800f802:	9102      	str	r1, [sp, #8]
  currentMCU = BlockIndex;
  
  while(currentMCU < (numberMCU + BlockIndex))
 800f804:	eb02 1393 	add.w	r3, r2, r3, lsr #6
  {
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800f808:	491a      	ldr	r1, [pc, #104]	; (800f874 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x7c>)
  while(currentMCU < (numberMCU + BlockIndex))
 800f80a:	9303      	str	r3, [sp, #12]
    
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f80c:	e9d1 8909 	ldrd	r8, r9, [r1, #36]	; 0x24
    pLum = pInBuffer;
    
    for(i= 0; i <  8; i++)
    { 
      pOutAddr = pOutBuffer + refline;
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800f810:	6909      	ldr	r1, [r1, #16]
 800f812:	9101      	str	r1, [sp, #4]
  while(currentMCU < (numberMCU + BlockIndex))
 800f814:	9b03      	ldr	r3, [sp, #12]
 800f816:	4293      	cmp	r3, r2
 800f818:	d802      	bhi.n	800f820 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x28>
    }
    
    pInBuffer +=  GRAY_444_BLOCK_SIZE;    
  }
  return numberMCU;
}
 800f81a:	b005      	add	sp, #20
 800f81c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800f820:	00d1      	lsls	r1, r2, #3
    pLum = pInBuffer;
 800f822:	46a4      	mov	ip, r4
    currentMCU++;
 800f824:	3201      	adds	r2, #1
 800f826:	2708      	movs	r7, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800f828:	fbb1 f3f8 	udiv	r3, r1, r8
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f82c:	fb09 f503 	mul.w	r5, r9, r3
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 800f830:	fb08 1313 	mls	r3, r8, r3, r1
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f834:	005b      	lsls	r3, r3, #1
 800f836:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800f83a:	9901      	ldr	r1, [sp, #4]
 800f83c:	4299      	cmp	r1, r3
 800f83e:	d914      	bls.n	800f86a <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x72>
      pOutAddr = pOutBuffer + refline;
 800f840:	9902      	ldr	r1, [sp, #8]
 800f842:	46e2      	mov	sl, ip
 800f844:	4419      	add	r1, r3
 800f846:	f101 0b10 	add.w	fp, r1, #16
          ySample =   (uint32_t)(*pLum);
 800f84a:	f81a 6b01 	ldrb.w	r6, [sl], #1
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
 800f84e:	08f5      	lsrs	r5, r6, #3
 800f850:	08b6      	lsrs	r6, r6, #2
 800f852:	ea4f 2ec5 	mov.w	lr, r5, lsl #11
 800f856:	ea4e 1646 	orr.w	r6, lr, r6, lsl #5
 800f85a:	432e      	orrs	r6, r5
 800f85c:	f821 6b02 	strh.w	r6, [r1], #2
        for(j=0; j < 8; j++)
 800f860:	4559      	cmp	r1, fp
 800f862:	d1f2      	bne.n	800f84a <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x52>
          pLum++;
 800f864:	f10c 0c08 	add.w	ip, ip, #8
        refline += JPEG_ConvertorParams.ScaledWidth;        
 800f868:	444b      	add	r3, r9
    for(i= 0; i <  8; i++)
 800f86a:	3f01      	subs	r7, #1
 800f86c:	d1e5      	bne.n	800f83a <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x42>
    pInBuffer +=  GRAY_444_BLOCK_SIZE;    
 800f86e:	3440      	adds	r4, #64	; 0x40
 800f870:	e7d0      	b.n	800f814 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1c>
 800f872:	bf00      	nop
 800f874:	20027b78 	.word	0x20027b78

0800f878 <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 800f878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f87c:	b085      	sub	sp, #20
 800f87e:	4605      	mov	r5, r0
        pOutAddr = pOutBuffer+ refline;        

          for(j=0; j < 8; j++)
          {           
            color_k = (int32_t)(*(pChrom + 192));
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 800f880:	27ff      	movs	r7, #255	; 0xff
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
 800f882:	0a18      	lsrs	r0, r3, #8
{  
 800f884:	9102      	str	r1, [sp, #8]
  while(currentMCU < (numberMCU + BlockIndex))
 800f886:	eb02 2313 	add.w	r3, r2, r3, lsr #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800f88a:	4928      	ldr	r1, [pc, #160]	; (800f92c <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0xb4>)
  while(currentMCU < (numberMCU + BlockIndex))
 800f88c:	9303      	str	r3, [sp, #12]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f88e:	e9d1 9a09 	ldrd	r9, sl, [r1, #36]	; 0x24
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800f892:	6909      	ldr	r1, [r1, #16]
 800f894:	9100      	str	r1, [sp, #0]
  while(currentMCU < (numberMCU + BlockIndex))
 800f896:	9b03      	ldr	r3, [sp, #12]
 800f898:	4293      	cmp	r3, r2
 800f89a:	d802      	bhi.n	800f8a2 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x2a>
    }   
    
    pInBuffer +=  CMYK_444_BLOCK_SIZE;
  }
  return numberMCU;
}
 800f89c:	b005      	add	sp, #20
 800f89e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800f8a2:	00d3      	lsls	r3, r2, #3
    pChrom = pInBuffer;
 800f8a4:	46ae      	mov	lr, r5
    currentMCU++;
 800f8a6:	3201      	adds	r2, #1
 800f8a8:	f04f 0c08 	mov.w	ip, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800f8ac:	fbb3 f1f9 	udiv	r1, r3, r9
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f8b0:	fb0a f401 	mul.w	r4, sl, r1
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 800f8b4:	fb09 3111 	mls	r1, r9, r1, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f8b8:	0049      	lsls	r1, r1, #1
 800f8ba:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800f8be:	9b00      	ldr	r3, [sp, #0]
 800f8c0:	428b      	cmp	r3, r1
 800f8c2:	d92c      	bls.n	800f91e <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0xa6>
        pOutAddr = pOutBuffer+ refline;        
 800f8c4:	9b02      	ldr	r3, [sp, #8]
 800f8c6:	4674      	mov	r4, lr
 800f8c8:	185e      	adds	r6, r3, r1
          for(j=0; j < 8; j++)
 800f8ca:	f106 0310 	add.w	r3, r6, #16
 800f8ce:	9301      	str	r3, [sp, #4]
            color_k = (int32_t)(*(pChrom + 192));
 800f8d0:	f894 80c0 	ldrb.w	r8, [r4, #192]	; 0xc0
            pChrom++;
 800f8d4:	3401      	adds	r4, #1
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 800f8d6:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 800f8da:	fb13 f308 	smulbb	r3, r3, r8
 800f8de:	fbb3 f3f7 	udiv	r3, r3, r7
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
 800f8e2:	ea4f 0be3 	mov.w	fp, r3, asr #3
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
 800f8e6:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 800f8ea:	fb13 f308 	smulbb	r3, r3, r8
 800f8ee:	fbb3 f3f7 	udiv	r3, r3, r7
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 800f8f2:	109b      	asrs	r3, r3, #2
 800f8f4:	015b      	lsls	r3, r3, #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
 800f8f6:	ea43 23cb 	orr.w	r3, r3, fp, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
 800f8fa:	f894 b07f 	ldrb.w	fp, [r4, #127]	; 0x7f
 800f8fe:	fb1b fb08 	smulbb	fp, fp, r8
 800f902:	fbbb fbf7 	udiv	fp, fp, r7
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 800f906:	ea43 0bdb 	orr.w	fp, r3, fp, lsr #3
          for(j=0; j < 8; j++)
 800f90a:	9b01      	ldr	r3, [sp, #4]
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 800f90c:	fa1f fb8b 	uxth.w	fp, fp
          *(__IO uint16_t *)pOutAddr = 
 800f910:	f826 bb02 	strh.w	fp, [r6], #2
          for(j=0; j < 8; j++)
 800f914:	429e      	cmp	r6, r3
 800f916:	d1db      	bne.n	800f8d0 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x58>
            pChrom++;
 800f918:	f10e 0e08 	add.w	lr, lr, #8
        refline += JPEG_ConvertorParams.ScaledWidth;          
 800f91c:	4451      	add	r1, sl
    for(i= 0; i <  8; i++)
 800f91e:	f1bc 0c01 	subs.w	ip, ip, #1
 800f922:	d1cc      	bne.n	800f8be <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x46>
    pInBuffer +=  CMYK_444_BLOCK_SIZE;
 800f924:	f505 7580 	add.w	r5, r5, #256	; 0x100
 800f928:	e7b5      	b.n	800f896 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x1e>
 800f92a:	bf00      	nop
 800f92c:	20027b78 	.word	0x20027b78

0800f930 <JPEG_GetDecodeColorConvertFunc>:
  *                      depending of the jpeg image color space and chroma sampling info. 
  * @param ImageNbMCUs : pointer to uint32_t, used to retrive the total number of MCU blocks in the jpeg image.  
  * @retval HAL status : HAL_OK or HAL_ERROR.
  */
HAL_StatusTypeDef JPEG_GetDecodeColorConvertFunc(JPEG_ConfTypeDef *pJpegInfo, JPEG_YCbCrToRGB_Convert_Function *pFunction, uint32_t *ImageNbMCUs)
{
 800f930:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t hMCU, vMCU;

  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
 800f932:	68c4      	ldr	r4, [r0, #12]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
 800f934:	6885      	ldr	r5, [r0, #8]
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 800f936:	6806      	ldr	r6, [r0, #0]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 800f938:	fb05 f704 	mul.w	r7, r5, r4
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 800f93c:	4b28      	ldr	r3, [pc, #160]	; (800f9e0 <JPEG_GetDecodeColorConvertFunc+0xb0>)
  
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;  
 800f93e:	6840      	ldr	r0, [r0, #4]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
 800f940:	2e10      	cmp	r6, #16
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 800f942:	ea4f 0747 	mov.w	r7, r7, lsl #1
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 800f946:	601e      	str	r6, [r3, #0]
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
 800f948:	609c      	str	r4, [r3, #8]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
 800f94a:	60dd      	str	r5, [r3, #12]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 800f94c:	611f      	str	r7, [r3, #16]
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;  
 800f94e:	6058      	str	r0, [r3, #4]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
 800f950:	d13c      	bne.n	800f9cc <JPEG_GetDecodeColorConvertFunc+0x9c>
  {
    if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
 800f952:	2801      	cmp	r0, #1
 800f954:	d122      	bne.n	800f99c <JPEG_GetDecodeColorConvertFunc+0x6c>
    {
      *pFunction = JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
 800f956:	4823      	ldr	r0, [pc, #140]	; (800f9e4 <JPEG_GetDecodeColorConvertFunc+0xb4>)
 800f958:	6008      	str	r0, [r1, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
      
      if(JPEG_ConvertorParams.LineOffset != 0)
 800f95a:	f014 010f 	ands.w	r1, r4, #15
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
 800f95e:	bf18      	it	ne
 800f960:	f1c1 0110 	rsbne	r1, r1, #16
 800f964:	6159      	str	r1, [r3, #20]
      }
      JPEG_ConvertorParams.H_factor = 16;
 800f966:	2110      	movs	r1, #16
 800f968:	61d9      	str	r1, [r3, #28]
      if(JPEG_ConvertorParams.LineOffset != 0)
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
      }
      JPEG_ConvertorParams.H_factor = 16;
      JPEG_ConvertorParams.V_factor  = 8;
 800f96a:	6219      	str	r1, [r3, #32]
  else
  {  
    return HAL_ERROR; /* Color space Not supported*/
  }
 
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
 800f96c:	6959      	ldr	r1, [r3, #20]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
  
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
 800f96e:	69d8      	ldr	r0, [r3, #28]
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
 800f970:	4421      	add	r1, r4
 800f972:	6259      	str	r1, [r3, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
 800f974:	0061      	lsls	r1, r4, #1
 800f976:	6299      	str	r1, [r3, #40]	; 0x28
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
 800f978:	fbb4 f1f0 	udiv	r1, r4, r0
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
 800f97c:	fb00 4411 	mls	r4, r0, r1, r4
 800f980:	b104      	cbz	r4, 800f984 <JPEG_GetDecodeColorConvertFunc+0x54>
  {
    hMCU++; /*+1 for horizenatl incomplete MCU */                
 800f982:	3101      	adds	r1, #1
  }

  vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
 800f984:	6a1c      	ldr	r4, [r3, #32]
 800f986:	fbb5 f0f4 	udiv	r0, r5, r4
  if((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
 800f98a:	fb04 5510 	mls	r5, r4, r0, r5
 800f98e:	b105      	cbz	r5, 800f992 <JPEG_GetDecodeColorConvertFunc+0x62>
  {
    vMCU++; /*+1 for vertical incomplete MCU */                
 800f990:	3001      	adds	r0, #1
  }
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
 800f992:	4341      	muls	r1, r0
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;

  return HAL_OK;
 800f994:	2000      	movs	r0, #0
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
 800f996:	62d9      	str	r1, [r3, #44]	; 0x2c
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
 800f998:	6011      	str	r1, [r2, #0]
}
 800f99a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
 800f99c:	2802      	cmp	r0, #2
 800f99e:	d10b      	bne.n	800f9b8 <JPEG_GetDecodeColorConvertFunc+0x88>
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
 800f9a0:	4811      	ldr	r0, [pc, #68]	; (800f9e8 <JPEG_GetDecodeColorConvertFunc+0xb8>)
 800f9a2:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
 800f9a4:	f014 010f 	ands.w	r1, r4, #15
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
 800f9a8:	bf18      	it	ne
 800f9aa:	f1c1 0110 	rsbne	r1, r1, #16
 800f9ae:	6159      	str	r1, [r3, #20]
      JPEG_ConvertorParams.H_factor = 16;
 800f9b0:	2110      	movs	r1, #16
 800f9b2:	61d9      	str	r1, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 8;
 800f9b4:	2108      	movs	r1, #8
 800f9b6:	e7d8      	b.n	800f96a <JPEG_GetDecodeColorConvertFunc+0x3a>
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
 800f9b8:	480c      	ldr	r0, [pc, #48]	; (800f9ec <JPEG_GetDecodeColorConvertFunc+0xbc>)
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
 800f9ba:	6008      	str	r0, [r1, #0]
    if(JPEG_ConvertorParams.LineOffset != 0)
 800f9bc:	f014 0107 	ands.w	r1, r4, #7
 800f9c0:	d001      	beq.n	800f9c6 <JPEG_GetDecodeColorConvertFunc+0x96>
        JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
 800f9c2:	f1c1 0108 	rsb	r1, r1, #8
 800f9c6:	6159      	str	r1, [r3, #20]
      JPEG_ConvertorParams.H_factor = 8;
 800f9c8:	2108      	movs	r1, #8
 800f9ca:	e7cd      	b.n	800f968 <JPEG_GetDecodeColorConvertFunc+0x38>
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
 800f9cc:	b90e      	cbnz	r6, 800f9d2 <JPEG_GetDecodeColorConvertFunc+0xa2>
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
 800f9ce:	4808      	ldr	r0, [pc, #32]	; (800f9f0 <JPEG_GetDecodeColorConvertFunc+0xc0>)
 800f9d0:	e7f3      	b.n	800f9ba <JPEG_GetDecodeColorConvertFunc+0x8a>
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
 800f9d2:	2e30      	cmp	r6, #48	; 0x30
 800f9d4:	d101      	bne.n	800f9da <JPEG_GetDecodeColorConvertFunc+0xaa>
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
 800f9d6:	4807      	ldr	r0, [pc, #28]	; (800f9f4 <JPEG_GetDecodeColorConvertFunc+0xc4>)
 800f9d8:	e7ef      	b.n	800f9ba <JPEG_GetDecodeColorConvertFunc+0x8a>
    return HAL_ERROR; /* Color space Not supported*/
 800f9da:	2001      	movs	r0, #1
 800f9dc:	e7dd      	b.n	800f99a <JPEG_GetDecodeColorConvertFunc+0x6a>
 800f9de:	bf00      	nop
 800f9e0:	20027b78 	.word	0x20027b78
 800f9e4:	0800f399 	.word	0x0800f399
 800f9e8:	0800f599 	.word	0x0800f599
 800f9ec:	0800f6f9 	.word	0x0800f6f9
 800f9f0:	0800f7f9 	.word	0x0800f7f9
 800f9f4:	0800f879 	.word	0x0800f879

0800f9f8 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800f9f8:	8880      	ldrh	r0, [r0, #4]
 800f9fa:	4770      	bx	lr

0800f9fc <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800f9fc:	b570      	push	{r4, r5, r6, lr}
 800f9fe:	6803      	ldr	r3, [r0, #0]
 800fa00:	460c      	mov	r4, r1
 800fa02:	2100      	movs	r1, #0
 800fa04:	4605      	mov	r5, r0
 800fa06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa08:	4798      	blx	r3
 800fa0a:	4606      	mov	r6, r0
 800fa0c:	682b      	ldr	r3, [r5, #0]
 800fa0e:	4628      	mov	r0, r5
 800fa10:	1ba4      	subs	r4, r4, r6
 800fa12:	6a1b      	ldr	r3, [r3, #32]
 800fa14:	b2a4      	uxth	r4, r4
 800fa16:	4798      	blx	r3
 800fa18:	fbb4 f0f0 	udiv	r0, r4, r0
 800fa1c:	bd70      	pop	{r4, r5, r6, pc}

0800fa1e <_ZN8touchgfx17AbstractPartition5clearEv>:
 800fa1e:	2300      	movs	r3, #0
 800fa20:	8083      	strh	r3, [r0, #4]
 800fa22:	4770      	bx	lr

0800fa24 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800fa24:	b510      	push	{r4, lr}
 800fa26:	6803      	ldr	r3, [r0, #0]
 800fa28:	4604      	mov	r4, r0
 800fa2a:	8881      	ldrh	r1, [r0, #4]
 800fa2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa2e:	4798      	blx	r3
 800fa30:	88a3      	ldrh	r3, [r4, #4]
 800fa32:	3301      	adds	r3, #1
 800fa34:	80a3      	strh	r3, [r4, #4]
 800fa36:	bd10      	pop	{r4, pc}

0800fa38 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800fa38:	6803      	ldr	r3, [r0, #0]
 800fa3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa3c:	4718      	bx	r3

0800fa3e <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800fa3e:	4770      	bx	lr

0800fa40 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800fa40:	4a02      	ldr	r2, [pc, #8]	; (800fa4c <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800fa42:	6002      	str	r2, [r0, #0]
 800fa44:	2200      	movs	r2, #0
 800fa46:	8082      	strh	r2, [r0, #4]
 800fa48:	4770      	bx	lr
 800fa4a:	bf00      	nop
 800fa4c:	0802a714 	.word	0x0802a714

0800fa50 <_ZN8touchgfx12LineProgress10setPainterERNS_15AbstractPainterE>:
 800fa50:	f8c0 10dc 	str.w	r1, [r0, #220]	; 0xdc
 800fa54:	4770      	bx	lr

0800fa56 <_ZNK8touchgfx12LineProgress8getStartERiS1_>:
 800fa56:	b530      	push	{r4, r5, lr}
 800fa58:	f8d0 4124 	ldr.w	r4, [r0, #292]	; 0x124
 800fa5c:	2520      	movs	r5, #32
 800fa5e:	fb94 f4f5 	sdiv	r4, r4, r5
 800fa62:	600c      	str	r4, [r1, #0]
 800fa64:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
 800fa68:	fb93 f3f5 	sdiv	r3, r3, r5
 800fa6c:	6013      	str	r3, [r2, #0]
 800fa6e:	bd30      	pop	{r4, r5, pc}

0800fa70 <_ZN8touchgfx12LineProgress6setEndEii>:
 800fa70:	0149      	lsls	r1, r1, #5
 800fa72:	0152      	lsls	r2, r2, #5
 800fa74:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 800fa78:	f8c0 2130 	str.w	r2, [r0, #304]	; 0x130
 800fa7c:	4770      	bx	lr

0800fa7e <_ZNK8touchgfx12LineProgress6getEndERiS1_>:
 800fa7e:	b530      	push	{r4, r5, lr}
 800fa80:	f8d0 412c 	ldr.w	r4, [r0, #300]	; 0x12c
 800fa84:	2520      	movs	r5, #32
 800fa86:	fb94 f4f5 	sdiv	r4, r4, r5
 800fa8a:	600c      	str	r4, [r1, #0]
 800fa8c:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
 800fa90:	fb93 f3f5 	sdiv	r3, r3, r5
 800fa94:	6013      	str	r3, [r2, #0]
 800fa96:	bd30      	pop	{r4, r5, pc}

0800fa98 <_ZNK8touchgfx12LineProgress12getLineWidthEv>:
 800fa98:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
 800fa9c:	2320      	movs	r3, #32
 800fa9e:	fb90 f0f3 	sdiv	r0, r0, r3
 800faa2:	4770      	bx	lr

0800faa4 <_ZN8touchgfx12LineProgressD1Ev>:
 800faa4:	4770      	bx	lr

0800faa6 <_ZN8touchgfx12LineProgress8setStartEii>:
 800faa6:	0149      	lsls	r1, r1, #5
 800faa8:	30b4      	adds	r0, #180	; 0xb4
 800faaa:	0152      	lsls	r2, r2, #5
 800faac:	6701      	str	r1, [r0, #112]	; 0x70
 800faae:	6742      	str	r2, [r0, #116]	; 0x74
 800fab0:	f002 b927 	b.w	8011d02 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>

0800fab4 <_ZN8touchgfx12LineProgress12setLineWidthEi>:
 800fab4:	0149      	lsls	r1, r1, #5
 800fab6:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
 800faba:	4299      	cmp	r1, r3
 800fabc:	d004      	beq.n	800fac8 <_ZN8touchgfx12LineProgress12setLineWidthEi+0x14>
 800fabe:	f8c0 10f0 	str.w	r1, [r0, #240]	; 0xf0
 800fac2:	30b4      	adds	r0, #180	; 0xb4
 800fac4:	f002 b827 	b.w	8011b16 <_ZN8touchgfx4Line17updateCachedShapeEv>
 800fac8:	4770      	bx	lr

0800faca <_ZN8touchgfx12LineProgress18setLineEndingStyleENS_4Line17LINE_ENDING_STYLEE>:
 800faca:	30b4      	adds	r0, #180	; 0xb4
 800facc:	f002 b93e 	b.w	8011d4c <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

0800fad0 <_ZNK8touchgfx12LineProgress18getLineEndingStyleEv>:
 800fad0:	30b4      	adds	r0, #180	; 0xb4
 800fad2:	f002 b81d 	b.w	8011b10 <_ZNK8touchgfx4Line18getLineEndingStyleEv>

0800fad6 <_ZN8touchgfx12LineProgress8setAlphaEh>:
 800fad6:	b538      	push	{r3, r4, r5, lr}
 800fad8:	4604      	mov	r4, r0
 800fada:	460d      	mov	r5, r1
 800fadc:	f000 f8e2 	bl	800fca4 <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>
 800fae0:	f884 50da 	strb.w	r5, [r4, #218]	; 0xda
 800fae4:	bd38      	pop	{r3, r4, r5, pc}

0800fae6 <_ZN8touchgfx12LineProgressD0Ev>:
 800fae6:	b510      	push	{r4, lr}
 800fae8:	4604      	mov	r4, r0
 800faea:	f44f 719a 	mov.w	r1, #308	; 0x134
 800faee:	f016 f860 	bl	8025bb2 <_ZdlPvj>
 800faf2:	4620      	mov	r0, r4
 800faf4:	bd10      	pop	{r4, pc}

0800faf6 <_ZN8touchgfx12LineProgress8setValueEi>:
 800faf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800faf8:	f8b0 3090 	ldrh.w	r3, [r0, #144]	; 0x90
 800fafc:	4604      	mov	r4, r0
 800fafe:	b33b      	cbz	r3, 800fb50 <_ZN8touchgfx12LineProgress8setValueEi+0x5a>
 800fb00:	f000 f923 	bl	800fd4a <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 800fb04:	f8b4 1090 	ldrh.w	r1, [r4, #144]	; 0x90
 800fb08:	4620      	mov	r0, r4
 800fb0a:	2720      	movs	r7, #32
 800fb0c:	f000 f93f 	bl	800fd8e <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 800fb10:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
 800fb14:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
 800fb18:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 800fb1c:	f8d4 5130 	ldr.w	r5, [r4, #304]	; 0x130
 800fb20:	1a5b      	subs	r3, r3, r1
 800fb22:	f8b4 6090 	ldrh.w	r6, [r4, #144]	; 0x90
 800fb26:	1aad      	subs	r5, r5, r2
 800fb28:	015b      	lsls	r3, r3, #5
 800fb2a:	016d      	lsls	r5, r5, #5
 800fb2c:	fb93 f3f6 	sdiv	r3, r3, r6
 800fb30:	fb95 f5f6 	sdiv	r5, r5, r6
 800fb34:	4343      	muls	r3, r0
 800fb36:	4368      	muls	r0, r5
 800fb38:	fb93 f3f7 	sdiv	r3, r3, r7
 800fb3c:	fb90 f0f7 	sdiv	r0, r0, r7
 800fb40:	4419      	add	r1, r3
 800fb42:	4402      	add	r2, r0
 800fb44:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
 800fb48:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800fb4c:	f002 b8e4 	b.w	8011d18 <_ZN8touchgfx4Line9updateEndENS_7CWRUtil2Q5ES2_>
 800fb50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fb52 <_ZNK8touchgfx25AbstractProgressIndicator17invalidateContentEv>:
 800fb52:	b510      	push	{r4, lr}
 800fb54:	6803      	ldr	r3, [r0, #0]
 800fb56:	4604      	mov	r4, r0
 800fb58:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800fb5c:	4798      	blx	r3
 800fb5e:	b140      	cbz	r0, 800fb72 <_ZNK8touchgfx25AbstractProgressIndicator17invalidateContentEv+0x20>
 800fb60:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800fb64:	b12b      	cbz	r3, 800fb72 <_ZNK8touchgfx25AbstractProgressIndicator17invalidateContentEv+0x20>
 800fb66:	6823      	ldr	r3, [r4, #0]
 800fb68:	4620      	mov	r0, r4
 800fb6a:	695b      	ldr	r3, [r3, #20]
 800fb6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb70:	4718      	bx	r3
 800fb72:	bd10      	pop	{r4, pc}

0800fb74 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 800fb74:	b570      	push	{r4, r5, r6, lr}
 800fb76:	6803      	ldr	r3, [r0, #0]
 800fb78:	4604      	mov	r4, r0
 800fb7a:	4615      	mov	r5, r2
 800fb7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb7e:	4798      	blx	r3
 800fb80:	6823      	ldr	r3, [r4, #0]
 800fb82:	4629      	mov	r1, r5
 800fb84:	4620      	mov	r0, r4
 800fb86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fb88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fb8c:	4718      	bx	r3

0800fb8e <_ZN8touchgfx12LineProgress28setProgressIndicatorPositionEssss>:
 800fb8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb92:	461d      	mov	r5, r3
 800fb94:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
 800fb98:	2300      	movs	r3, #0
 800fb9a:	4604      	mov	r4, r0
 800fb9c:	460f      	mov	r7, r1
 800fb9e:	4690      	mov	r8, r2
 800fba0:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
 800fba4:	4632      	mov	r2, r6
 800fba6:	4629      	mov	r1, r5
 800fba8:	30b4      	adds	r0, #180	; 0xb4
 800fbaa:	f7ff ffe3 	bl	800fb74 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800fbae:	9606      	str	r6, [sp, #24]
 800fbb0:	462b      	mov	r3, r5
 800fbb2:	4642      	mov	r2, r8
 800fbb4:	4639      	mov	r1, r7
 800fbb6:	4620      	mov	r0, r4
 800fbb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fbbc:	f000 b95a 	b.w	800fe74 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

0800fbc0 <_ZN8touchgfx12LineProgressC1Ev>:
 800fbc0:	b570      	push	{r4, r5, r6, lr}
 800fbc2:	4604      	mov	r4, r0
 800fbc4:	f000 f982 	bl	800fecc <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 800fbc8:	4b0f      	ldr	r3, [pc, #60]	; (800fc08 <_ZN8touchgfx12LineProgressC1Ev+0x48>)
 800fbca:	2600      	movs	r6, #0
 800fbcc:	4625      	mov	r5, r4
 800fbce:	f845 3bb4 	str.w	r3, [r5], #180
 800fbd2:	4628      	mov	r0, r5
 800fbd4:	f001 ff7c 	bl	8011ad0 <_ZN8touchgfx4LineC1Ev>
 800fbd8:	4629      	mov	r1, r5
 800fbda:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fbde:	f8c4 6124 	str.w	r6, [r4, #292]	; 0x124
 800fbe2:	f8c4 6128 	str.w	r6, [r4, #296]	; 0x128
 800fbe6:	f8c4 612c 	str.w	r6, [r4, #300]	; 0x12c
 800fbea:	f8c4 6130 	str.w	r6, [r4, #304]	; 0x130
 800fbee:	f000 f9cd 	bl	800ff8c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800fbf2:	4628      	mov	r0, r5
 800fbf4:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800fbf8:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 800fbfc:	f8c4 60b8 	str.w	r6, [r4, #184]	; 0xb8
 800fc00:	f7ff ffb8 	bl	800fb74 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800fc04:	4620      	mov	r0, r4
 800fc06:	bd70      	pop	{r4, r5, r6, pc}
 800fc08:	0802a748 	.word	0x0802a748

0800fc0c <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 800fc0c:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	; 0x5c
 800fc10:	4770      	bx	lr

0800fc12 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 800fc12:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	; 0x5e
 800fc16:	4770      	bx	lr

0800fc18 <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 800fc18:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	; 0x60
 800fc1c:	4770      	bx	lr

0800fc1e <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 800fc1e:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	; 0x62
 800fc22:	4770      	bx	lr

0800fc24 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>:
 800fc24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc26:	461e      	mov	r6, r3
 800fc28:	6803      	ldr	r3, [r0, #0]
 800fc2a:	460f      	mov	r7, r1
 800fc2c:	4604      	mov	r4, r0
 800fc2e:	4615      	mov	r5, r2
 800fc30:	e9c0 1221 	strd	r1, r2, [r0, #132]	; 0x84
 800fc34:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
 800fc38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800fc3c:	4798      	blx	r3
 800fc3e:	b93e      	cbnz	r6, 800fc50 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x2c>
 800fc40:	1bed      	subs	r5, r5, r7
 800fc42:	f8a4 5090 	strh.w	r5, [r4, #144]	; 0x90
 800fc46:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800fc4a:	f8a4 3092 	strh.w	r3, [r4, #146]	; 0x92
 800fc4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc50:	f8a4 6090 	strh.w	r6, [r4, #144]	; 0x90
 800fc54:	e7f7      	b.n	800fc46 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x22>

0800fc56 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_RtS2_>:
 800fc56:	b510      	push	{r4, lr}
 800fc58:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
 800fc5c:	600c      	str	r4, [r1, #0]
 800fc5e:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 800fc62:	6011      	str	r1, [r2, #0]
 800fc64:	f8b0 2090 	ldrh.w	r2, [r0, #144]	; 0x90
 800fc68:	801a      	strh	r2, [r3, #0]
 800fc6a:	9b02      	ldr	r3, [sp, #8]
 800fc6c:	f8b0 2092 	ldrh.w	r2, [r0, #146]	; 0x92
 800fc70:	801a      	strh	r2, [r3, #0]
 800fc72:	bd10      	pop	{r4, pc}

0800fc74 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_Rt>:
 800fc74:	b510      	push	{r4, lr}
 800fc76:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
 800fc7a:	600c      	str	r4, [r1, #0]
 800fc7c:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 800fc80:	6011      	str	r1, [r2, #0]
 800fc82:	f8b0 2090 	ldrh.w	r2, [r0, #144]	; 0x90
 800fc86:	801a      	strh	r2, [r3, #0]
 800fc88:	bd10      	pop	{r4, pc}

0800fc8a <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_>:
 800fc8a:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800fc8e:	600b      	str	r3, [r1, #0]
 800fc90:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800fc94:	6013      	str	r3, [r2, #0]
 800fc96:	4770      	bx	lr

0800fc98 <_ZN8touchgfx25AbstractProgressIndicator17setEasingEquationEPFstsstE>:
 800fc98:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
 800fc9c:	4770      	bx	lr

0800fc9e <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 800fc9e:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
 800fca2:	4770      	bx	lr

0800fca4 <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>:
 800fca4:	f880 1054 	strb.w	r1, [r0, #84]	; 0x54
 800fca8:	4770      	bx	lr

0800fcaa <_ZNK8touchgfx25AbstractProgressIndicator8getAlphaEv>:
 800fcaa:	f890 0054 	ldrb.w	r0, [r0, #84]	; 0x54
 800fcae:	4770      	bx	lr

0800fcb0 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 800fcb0:	4770      	bx	lr

0800fcb2 <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 800fcb2:	b510      	push	{r4, lr}
 800fcb4:	4604      	mov	r4, r0
 800fcb6:	21b4      	movs	r1, #180	; 0xb4
 800fcb8:	f015 ff7b 	bl	8025bb2 <_ZdlPvj>
 800fcbc:	4620      	mov	r0, r4
 800fcbe:	bd10      	pop	{r4, pc}

0800fcc0 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit>:
 800fcc0:	b570      	push	{r4, r5, r6, lr}
 800fcc2:	f8d0 5084 	ldr.w	r5, [r0, #132]	; 0x84
 800fcc6:	4604      	mov	r4, r0
 800fcc8:	4616      	mov	r6, r2
 800fcca:	428d      	cmp	r5, r1
 800fccc:	bfb8      	it	lt
 800fcce:	460d      	movlt	r5, r1
 800fcd0:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 800fcd4:	428d      	cmp	r5, r1
 800fcd6:	bfa8      	it	ge
 800fcd8:	460d      	movge	r5, r1
 800fcda:	b99a      	cbnz	r2, 800fd04 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x44>
 800fcdc:	6803      	ldr	r3, [r0, #0]
 800fcde:	4629      	mov	r1, r5
 800fce0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800fce4:	4798      	blx	r3
 800fce6:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 800fcea:	b368      	cbz	r0, 800fd48 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x88>
 800fcec:	6803      	ldr	r3, [r0, #0]
 800fcee:	68db      	ldr	r3, [r3, #12]
 800fcf0:	4798      	blx	r3
 800fcf2:	b348      	cbz	r0, 800fd48 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x88>
 800fcf4:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 800fcf8:	4621      	mov	r1, r4
 800fcfa:	6803      	ldr	r3, [r0, #0]
 800fcfc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fd00:	689b      	ldr	r3, [r3, #8]
 800fd02:	4718      	bx	r3
 800fd04:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	dd08      	ble.n	800fd1e <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x5e>
 800fd0c:	f006 fa16 	bl	801613c <_ZN8touchgfx11Application11getInstanceEv>
 800fd10:	4621      	mov	r1, r4
 800fd12:	3004      	adds	r0, #4
 800fd14:	f006 fa5f 	bl	80161d6 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 800fd18:	2300      	movs	r3, #0
 800fd1a:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
 800fd1e:	6823      	ldr	r3, [r4, #0]
 800fd20:	4620      	mov	r0, r4
 800fd22:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800fd26:	4798      	blx	r3
 800fd28:	2300      	movs	r3, #0
 800fd2a:	f8c4 60a4 	str.w	r6, [r4, #164]	; 0xa4
 800fd2e:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 800fd32:	e9c4 0527 	strd	r0, r5, [r4, #156]	; 0x9c
 800fd36:	f006 fa01 	bl	801613c <_ZN8touchgfx11Application11getInstanceEv>
 800fd3a:	4621      	mov	r1, r4
 800fd3c:	3004      	adds	r0, #4
 800fd3e:	f006 faf3 	bl	8016328 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
 800fd42:	2301      	movs	r3, #1
 800fd44:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
 800fd48:	bd70      	pop	{r4, r5, r6, pc}

0800fd4a <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 800fd4a:	b510      	push	{r4, lr}
 800fd4c:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800fd50:	4604      	mov	r4, r0
 800fd52:	4299      	cmp	r1, r3
 800fd54:	bfb8      	it	lt
 800fd56:	4619      	movlt	r1, r3
 800fd58:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800fd5c:	4299      	cmp	r1, r3
 800fd5e:	bfa8      	it	ge
 800fd60:	4619      	movge	r1, r3
 800fd62:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 800fd66:	428b      	cmp	r3, r1
 800fd68:	d010      	beq.n	800fd8c <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 800fd6a:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
 800fd6e:	f8d0 00ac 	ldr.w	r0, [r0, #172]	; 0xac
 800fd72:	b158      	cbz	r0, 800fd8c <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 800fd74:	6803      	ldr	r3, [r0, #0]
 800fd76:	68db      	ldr	r3, [r3, #12]
 800fd78:	4798      	blx	r3
 800fd7a:	b138      	cbz	r0, 800fd8c <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 800fd7c:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 800fd80:	4621      	mov	r1, r4
 800fd82:	6803      	ldr	r3, [r0, #0]
 800fd84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd88:	689b      	ldr	r3, [r3, #8]
 800fd8a:	4718      	bx	r3
 800fd8c:	bd10      	pop	{r4, pc}

0800fd8e <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 800fd8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fd90:	4604      	mov	r4, r0
 800fd92:	460d      	mov	r5, r1
 800fd94:	b1a9      	cbz	r1, 800fdc2 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x34>
 800fd96:	f8b0 6092 	ldrh.w	r6, [r0, #146]	; 0x92
 800fd9a:	ab01      	add	r3, sp, #4
 800fd9c:	f8b4 1090 	ldrh.w	r1, [r4, #144]	; 0x90
 800fda0:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
 800fda4:	1b89      	subs	r1, r1, r6
 800fda6:	e9d0 0221 	ldrd	r0, r2, [r0, #132]	; 0x84
 800fdaa:	1a12      	subs	r2, r2, r0
 800fdac:	1a38      	subs	r0, r7, r0
 800fdae:	f007 fc24 	bl	80175fa <_ZN8touchgfx6muldivElllRl>
 800fdb2:	4629      	mov	r1, r5
 800fdb4:	ab01      	add	r3, sp, #4
 800fdb6:	f8b4 2090 	ldrh.w	r2, [r4, #144]	; 0x90
 800fdba:	4430      	add	r0, r6
 800fdbc:	f007 fc1d 	bl	80175fa <_ZN8touchgfx6muldivElllRl>
 800fdc0:	b285      	uxth	r5, r0
 800fdc2:	4628      	mov	r0, r5
 800fdc4:	b003      	add	sp, #12
 800fdc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fdc8 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv>:
 800fdc8:	b570      	push	{r4, r5, r6, lr}
 800fdca:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
 800fdce:	4604      	mov	r4, r0
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d035      	beq.n	800fe40 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 800fdd4:	f8d0 00a8 	ldr.w	r0, [r0, #168]	; 0xa8
 800fdd8:	2100      	movs	r1, #0
 800fdda:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
 800fdde:	3001      	adds	r0, #1
 800fde0:	e9d4 3227 	ldrd	r3, r2, [r4, #156]	; 0x9c
 800fde4:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
 800fde8:	b280      	uxth	r0, r0
 800fdea:	1ad2      	subs	r2, r2, r3
 800fdec:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 800fdf0:	b212      	sxth	r2, r2
 800fdf2:	47a8      	blx	r5
 800fdf4:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 800fdf8:	6823      	ldr	r3, [r4, #0]
 800fdfa:	4401      	add	r1, r0
 800fdfc:	4620      	mov	r0, r4
 800fdfe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800fe02:	4798      	blx	r3
 800fe04:	e9d4 3229 	ldrd	r3, r2, [r4, #164]	; 0xa4
 800fe08:	429a      	cmp	r2, r3
 800fe0a:	db19      	blt.n	800fe40 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 800fe0c:	2500      	movs	r5, #0
 800fe0e:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 800fe12:	f006 f993 	bl	801613c <_ZN8touchgfx11Application11getInstanceEv>
 800fe16:	4621      	mov	r1, r4
 800fe18:	3004      	adds	r0, #4
 800fe1a:	f006 f9dc 	bl	80161d6 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 800fe1e:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 800fe22:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
 800fe26:	b158      	cbz	r0, 800fe40 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 800fe28:	6803      	ldr	r3, [r0, #0]
 800fe2a:	68db      	ldr	r3, [r3, #12]
 800fe2c:	4798      	blx	r3
 800fe2e:	b138      	cbz	r0, 800fe40 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 800fe30:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 800fe34:	4621      	mov	r1, r4
 800fe36:	6803      	ldr	r3, [r0, #0]
 800fe38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fe3c:	689b      	ldr	r3, [r3, #8]
 800fe3e:	4718      	bx	r3
 800fe40:	bd70      	pop	{r4, r5, r6, pc}
	...

0800fe44 <_ZN8touchgfx8DrawableC1Ev>:
 800fe44:	4a0a      	ldr	r2, [pc, #40]	; (800fe70 <_ZN8touchgfx8DrawableC1Ev+0x2c>)
 800fe46:	6002      	str	r2, [r0, #0]
 800fe48:	2200      	movs	r2, #0
 800fe4a:	8082      	strh	r2, [r0, #4]
 800fe4c:	80c2      	strh	r2, [r0, #6]
 800fe4e:	8102      	strh	r2, [r0, #8]
 800fe50:	8142      	strh	r2, [r0, #10]
 800fe52:	8182      	strh	r2, [r0, #12]
 800fe54:	81c2      	strh	r2, [r0, #14]
 800fe56:	8202      	strh	r2, [r0, #16]
 800fe58:	8242      	strh	r2, [r0, #18]
 800fe5a:	61c2      	str	r2, [r0, #28]
 800fe5c:	8402      	strh	r2, [r0, #32]
 800fe5e:	8442      	strh	r2, [r0, #34]	; 0x22
 800fe60:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 800fe64:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800fe68:	2201      	movs	r2, #1
 800fe6a:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
 800fe6e:	4770      	bx	lr
 800fe70:	0802b298 	.word	0x0802b298

0800fe74 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 800fe74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe78:	4604      	mov	r4, r0
 800fe7a:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
 800fe7e:	4698      	mov	r8, r3
 800fe80:	460e      	mov	r6, r1
 800fe82:	4615      	mov	r5, r2
 800fe84:	f8a4 105c 	strh.w	r1, [r4, #92]	; 0x5c
 800fe88:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 800fe8c:	4619      	mov	r1, r3
 800fe8e:	463a      	mov	r2, r7
 800fe90:	3058      	adds	r0, #88	; 0x58
 800fe92:	f7ff fe6f 	bl	800fb74 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800fe96:	4446      	add	r6, r8
 800fe98:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800fe9c:	443d      	add	r5, r7
 800fe9e:	42b3      	cmp	r3, r6
 800fea0:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800fea4:	bfb8      	it	lt
 800fea6:	8126      	strhlt	r6, [r4, #8]
 800fea8:	42ab      	cmp	r3, r5
 800feaa:	bfb8      	it	lt
 800feac:	8165      	strhlt	r5, [r4, #10]
 800feae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800feb2 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 800feb2:	b510      	push	{r4, lr}
 800feb4:	4604      	mov	r4, r0
 800feb6:	302c      	adds	r0, #44	; 0x2c
 800feb8:	f003 fdbd 	bl	8013a36 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800febc:	f9b4 2036 	ldrsh.w	r2, [r4, #54]	; 0x36
 800fec0:	4620      	mov	r0, r4
 800fec2:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
 800fec6:	f7ff fe55 	bl	800fb74 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800feca:	bd10      	pop	{r4, pc}

0800fecc <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 800fecc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fece:	4604      	mov	r4, r0
 800fed0:	2500      	movs	r5, #0
 800fed2:	f7ff ffb7 	bl	800fe44 <_ZN8touchgfx8DrawableC1Ev>
 800fed6:	4b24      	ldr	r3, [pc, #144]	; (800ff68 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x9c>)
 800fed8:	4626      	mov	r6, r4
 800feda:	f64f 77ff 	movw	r7, #65535	; 0xffff
 800fede:	2226      	movs	r2, #38	; 0x26
 800fee0:	4629      	mov	r1, r5
 800fee2:	62a5      	str	r5, [r4, #40]	; 0x28
 800fee4:	f846 3b2c 	str.w	r3, [r6], #44
 800fee8:	4630      	mov	r0, r6
 800feea:	f8ad 7004 	strh.w	r7, [sp, #4]
 800feee:	f016 f815 	bl	8025f1c <memset>
 800fef2:	4630      	mov	r0, r6
 800fef4:	f7ff ffa6 	bl	800fe44 <_ZN8touchgfx8DrawableC1Ev>
 800fef8:	a902      	add	r1, sp, #8
 800fefa:	4b1c      	ldr	r3, [pc, #112]	; (800ff6c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa0>)
 800fefc:	4630      	mov	r0, r6
 800fefe:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
 800ff02:	f104 0758 	add.w	r7, r4, #88	; 0x58
 800ff06:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ff08:	f831 3d04 	ldrh.w	r3, [r1, #-4]!
 800ff0c:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 800ff10:	f003 fd91 	bl	8013a36 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800ff14:	4638      	mov	r0, r7
 800ff16:	f7ff ff95 	bl	800fe44 <_ZN8touchgfx8DrawableC1Ev>
 800ff1a:	4b15      	ldr	r3, [pc, #84]	; (800ff70 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa4>)
 800ff1c:	4629      	mov	r1, r5
 800ff1e:	4630      	mov	r0, r6
 800ff20:	65a3      	str	r3, [r4, #88]	; 0x58
 800ff22:	2364      	movs	r3, #100	; 0x64
 800ff24:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
 800ff28:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800ff2c:	e9c4 3522 	strd	r3, r5, [r4, #136]	; 0x88
 800ff30:	4b10      	ldr	r3, [pc, #64]	; (800ff74 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa8>)
 800ff32:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
 800ff36:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 800ff3a:	e9c4 5527 	strd	r5, r5, [r4, #156]	; 0x9c
 800ff3e:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 800ff42:	e9c4 552b 	strd	r5, r5, [r4, #172]	; 0xac
 800ff46:	f7f2 f967 	bl	8002218 <_ZN8touchgfx8Drawable4setXEs>
 800ff4a:	4629      	mov	r1, r5
 800ff4c:	4630      	mov	r0, r6
 800ff4e:	f7f2 f965 	bl	800221c <_ZN8touchgfx8Drawable4setYEs>
 800ff52:	4631      	mov	r1, r6
 800ff54:	4620      	mov	r0, r4
 800ff56:	f000 f819 	bl	800ff8c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800ff5a:	4620      	mov	r0, r4
 800ff5c:	4639      	mov	r1, r7
 800ff5e:	f000 f815 	bl	800ff8c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800ff62:	4620      	mov	r0, r4
 800ff64:	b003      	add	sp, #12
 800ff66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff68:	0802a840 	.word	0x0802a840
 800ff6c:	0802b1d0 	.word	0x0802b1d0
 800ff70:	0802a914 	.word	0x0802a914
 800ff74:	08017d57 	.word	0x08017d57

0800ff78 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800ff78:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800ff7a:	2000      	movs	r0, #0
 800ff7c:	b12b      	cbz	r3, 800ff8a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800ff7e:	b920      	cbnz	r0, 800ff8a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800ff80:	1a5a      	subs	r2, r3, r1
 800ff82:	699b      	ldr	r3, [r3, #24]
 800ff84:	4250      	negs	r0, r2
 800ff86:	4150      	adcs	r0, r2
 800ff88:	e7f8      	b.n	800ff7c <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800ff8a:	4770      	bx	lr

0800ff8c <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800ff8c:	2300      	movs	r3, #0
 800ff8e:	6148      	str	r0, [r1, #20]
 800ff90:	618b      	str	r3, [r1, #24]
 800ff92:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800ff94:	b913      	cbnz	r3, 800ff9c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 800ff96:	6281      	str	r1, [r0, #40]	; 0x28
 800ff98:	4770      	bx	lr
 800ff9a:	4613      	mov	r3, r2
 800ff9c:	699a      	ldr	r2, [r3, #24]
 800ff9e:	2a00      	cmp	r2, #0
 800ffa0:	d1fb      	bne.n	800ff9a <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 800ffa2:	6199      	str	r1, [r3, #24]
 800ffa4:	4770      	bx	lr

0800ffa6 <_ZN8touchgfx9Container9removeAllEv>:
 800ffa6:	2200      	movs	r2, #0
 800ffa8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800ffaa:	b123      	cbz	r3, 800ffb6 <_ZN8touchgfx9Container9removeAllEv+0x10>
 800ffac:	6999      	ldr	r1, [r3, #24]
 800ffae:	6281      	str	r1, [r0, #40]	; 0x28
 800ffb0:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800ffb4:	e7f8      	b.n	800ffa8 <_ZN8touchgfx9Container9removeAllEv+0x2>
 800ffb6:	4770      	bx	lr

0800ffb8 <_ZN8touchgfx9Container6unlinkEv>:
 800ffb8:	2300      	movs	r3, #0
 800ffba:	6283      	str	r3, [r0, #40]	; 0x28
 800ffbc:	4770      	bx	lr

0800ffbe <_ZNK8touchgfx9Container12getSolidRectEv>:
 800ffbe:	2200      	movs	r2, #0
 800ffc0:	8002      	strh	r2, [r0, #0]
 800ffc2:	8042      	strh	r2, [r0, #2]
 800ffc4:	8082      	strh	r2, [r0, #4]
 800ffc6:	80c2      	strh	r2, [r0, #6]
 800ffc8:	4770      	bx	lr

0800ffca <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800ffca:	b570      	push	{r4, r5, r6, lr}
 800ffcc:	460d      	mov	r5, r1
 800ffce:	4616      	mov	r6, r2
 800ffd0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800ffd2:	b13c      	cbz	r4, 800ffe4 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 800ffd4:	6823      	ldr	r3, [r4, #0]
 800ffd6:	4620      	mov	r0, r4
 800ffd8:	4632      	mov	r2, r6
 800ffda:	4629      	mov	r1, r5
 800ffdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ffde:	4798      	blx	r3
 800ffe0:	69a4      	ldr	r4, [r4, #24]
 800ffe2:	e7f6      	b.n	800ffd2 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800ffe4:	bd70      	pop	{r4, r5, r6, pc}

0800ffe6 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800ffe6:	b538      	push	{r3, r4, r5, lr}
 800ffe8:	460d      	mov	r5, r1
 800ffea:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800ffec:	b134      	cbz	r4, 800fffc <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800ffee:	682b      	ldr	r3, [r5, #0]
 800fff0:	4621      	mov	r1, r4
 800fff2:	4628      	mov	r0, r5
 800fff4:	689b      	ldr	r3, [r3, #8]
 800fff6:	4798      	blx	r3
 800fff8:	69a4      	ldr	r4, [r4, #24]
 800fffa:	e7f7      	b.n	800ffec <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800fffc:	bd38      	pop	{r3, r4, r5, pc}

0800fffe <_ZN8touchgfx9ContainerD1Ev>:
 800fffe:	4770      	bx	lr

08010000 <_ZN8touchgfx9ContainerD0Ev>:
 8010000:	b510      	push	{r4, lr}
 8010002:	4604      	mov	r4, r0
 8010004:	212c      	movs	r1, #44	; 0x2c
 8010006:	f015 fdd4 	bl	8025bb2 <_ZdlPvj>
 801000a:	4620      	mov	r0, r4
 801000c:	bd10      	pop	{r4, pc}

0801000e <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 801000e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8010010:	b19b      	cbz	r3, 801003a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8010012:	428b      	cmp	r3, r1
 8010014:	d109      	bne.n	801002a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8010016:	699a      	ldr	r2, [r3, #24]
 8010018:	2100      	movs	r1, #0
 801001a:	6159      	str	r1, [r3, #20]
 801001c:	6282      	str	r2, [r0, #40]	; 0x28
 801001e:	b902      	cbnz	r2, 8010022 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8010020:	4770      	bx	lr
 8010022:	6199      	str	r1, [r3, #24]
 8010024:	4770      	bx	lr
 8010026:	4613      	mov	r3, r2
 8010028:	b13a      	cbz	r2, 801003a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801002a:	699a      	ldr	r2, [r3, #24]
 801002c:	428a      	cmp	r2, r1
 801002e:	d1fa      	bne.n	8010026 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8010030:	698a      	ldr	r2, [r1, #24]
 8010032:	619a      	str	r2, [r3, #24]
 8010034:	2300      	movs	r3, #0
 8010036:	e9c1 3305 	strd	r3, r3, [r1, #20]
 801003a:	4770      	bx	lr

0801003c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 801003c:	b410      	push	{r4}
 801003e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8010040:	4604      	mov	r4, r0
 8010042:	b92b      	cbnz	r3, 8010050 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8010044:	6803      	ldr	r3, [r0, #0]
 8010046:	4611      	mov	r1, r2
 8010048:	f85d 4b04 	ldr.w	r4, [sp], #4
 801004c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801004e:	4718      	bx	r3
 8010050:	b941      	cbnz	r1, 8010064 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8010052:	6193      	str	r3, [r2, #24]
 8010054:	6282      	str	r2, [r0, #40]	; 0x28
 8010056:	6154      	str	r4, [r2, #20]
 8010058:	f85d 4b04 	ldr.w	r4, [sp], #4
 801005c:	4770      	bx	lr
 801005e:	4603      	mov	r3, r0
 8010060:	2800      	cmp	r0, #0
 8010062:	d0f9      	beq.n	8010058 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8010064:	4299      	cmp	r1, r3
 8010066:	6998      	ldr	r0, [r3, #24]
 8010068:	d1f9      	bne.n	801005e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 801006a:	6190      	str	r0, [r2, #24]
 801006c:	618a      	str	r2, [r1, #24]
 801006e:	e7f2      	b.n	8010056 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08010070 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8010070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010074:	461f      	mov	r7, r3
 8010076:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 801007a:	460d      	mov	r5, r1
 801007c:	4616      	mov	r6, r2
 801007e:	b103      	cbz	r3, 8010082 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8010080:	6038      	str	r0, [r7, #0]
 8010082:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8010084:	b314      	cbz	r4, 80100cc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8010086:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801008a:	b1eb      	cbz	r3, 80100c8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801008c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8010090:	428d      	cmp	r5, r1
 8010092:	db19      	blt.n	80100c8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8010094:	b289      	uxth	r1, r1
 8010096:	8923      	ldrh	r3, [r4, #8]
 8010098:	440b      	add	r3, r1
 801009a:	b21b      	sxth	r3, r3
 801009c:	429d      	cmp	r5, r3
 801009e:	da13      	bge.n	80100c8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80100a0:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80100a4:	4296      	cmp	r6, r2
 80100a6:	db0f      	blt.n	80100c8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80100a8:	b292      	uxth	r2, r2
 80100aa:	8963      	ldrh	r3, [r4, #10]
 80100ac:	4413      	add	r3, r2
 80100ae:	b21b      	sxth	r3, r3
 80100b0:	429e      	cmp	r6, r3
 80100b2:	da09      	bge.n	80100c8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80100b4:	6823      	ldr	r3, [r4, #0]
 80100b6:	1ab2      	subs	r2, r6, r2
 80100b8:	1a69      	subs	r1, r5, r1
 80100ba:	4620      	mov	r0, r4
 80100bc:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 80100c0:	b212      	sxth	r2, r2
 80100c2:	463b      	mov	r3, r7
 80100c4:	b209      	sxth	r1, r1
 80100c6:	47c0      	blx	r8
 80100c8:	69a4      	ldr	r4, [r4, #24]
 80100ca:	e7db      	b.n	8010084 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 80100cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080100d0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 80100d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100d4:	4c6d      	ldr	r4, [pc, #436]	; (801028c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 80100d6:	b0a1      	sub	sp, #132	; 0x84
 80100d8:	4606      	mov	r6, r0
 80100da:	6824      	ldr	r4, [r4, #0]
 80100dc:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 80100de:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 80100e2:	2400      	movs	r4, #0
 80100e4:	9303      	str	r3, [sp, #12]
 80100e6:	802c      	strh	r4, [r5, #0]
 80100e8:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 80100ea:	802c      	strh	r4, [r5, #0]
 80100ec:	601c      	str	r4, [r3, #0]
 80100ee:	e9cd 1201 	strd	r1, r2, [sp, #4]
 80100f2:	f7ff ffbd 	bl	8010070 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80100f6:	f1b9 0f03 	cmp.w	r9, #3
 80100fa:	f340 80c1 	ble.w	8010280 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 80100fe:	4631      	mov	r1, r6
 8010100:	a80c      	add	r0, sp, #48	; 0x30
 8010102:	f007 f96d 	bl	80173e0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8010106:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801010a:	9306      	str	r3, [sp, #24]
 801010c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8010110:	9307      	str	r3, [sp, #28]
 8010112:	9b03      	ldr	r3, [sp, #12]
 8010114:	f8d3 a000 	ldr.w	sl, [r3]
 8010118:	f1ba 0f00 	cmp.w	sl, #0
 801011c:	f000 80b3 	beq.w	8010286 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8010120:	4651      	mov	r1, sl
 8010122:	a810      	add	r0, sp, #64	; 0x40
 8010124:	f007 f95c 	bl	80173e0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8010128:	2002      	movs	r0, #2
 801012a:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 801012e:	9b01      	ldr	r3, [sp, #4]
 8010130:	9a06      	ldr	r2, [sp, #24]
 8010132:	fb91 f1f0 	sdiv	r1, r1, r0
 8010136:	189d      	adds	r5, r3, r2
 8010138:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 801013c:	9a07      	ldr	r2, [sp, #28]
 801013e:	4419      	add	r1, r3
 8010140:	9b02      	ldr	r3, [sp, #8]
 8010142:	4413      	add	r3, r2
 8010144:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 8010148:	1a6d      	subs	r5, r5, r1
 801014a:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801014e:	fb92 f2f0 	sdiv	r2, r2, r0
 8010152:	440a      	add	r2, r1
 8010154:	1a9b      	subs	r3, r3, r2
 8010156:	435b      	muls	r3, r3
 8010158:	fb05 3505 	mla	r5, r5, r5, r3
 801015c:	4f4c      	ldr	r7, [pc, #304]	; (8010290 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 801015e:	ac10      	add	r4, sp, #64	; 0x40
 8010160:	f1b9 0f0c 	cmp.w	r9, #12
 8010164:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8010166:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010168:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801016a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801016c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801016e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010170:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8010174:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8010178:	f04f 0303 	mov.w	r3, #3
 801017c:	bfd8      	it	le
 801017e:	f109 32ff 	addle.w	r2, r9, #4294967295
 8010182:	f04f 0400 	mov.w	r4, #0
 8010186:	f8cd 9000 	str.w	r9, [sp]
 801018a:	bfcc      	ite	gt
 801018c:	4698      	movgt	r8, r3
 801018e:	fb92 f8f3 	sdivle	r8, r2, r3
 8010192:	1c63      	adds	r3, r4, #1
 8010194:	aa10      	add	r2, sp, #64	; 0x40
 8010196:	f004 0401 	and.w	r4, r4, #1
 801019a:	f04f 0b00 	mov.w	fp, #0
 801019e:	9308      	str	r3, [sp, #32]
 80101a0:	9b00      	ldr	r3, [sp, #0]
 80101a2:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 80101a6:	fb93 f3f8 	sdiv	r3, r3, r8
 80101aa:	3404      	adds	r4, #4
 80101ac:	b29b      	uxth	r3, r3
 80101ae:	9304      	str	r3, [sp, #16]
 80101b0:	9a04      	ldr	r2, [sp, #16]
 80101b2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80101b6:	fb13 f302 	smulbb	r3, r3, r2
 80101ba:	9a01      	ldr	r2, [sp, #4]
 80101bc:	b29b      	uxth	r3, r3
 80101be:	1899      	adds	r1, r3, r2
 80101c0:	9305      	str	r3, [sp, #20]
 80101c2:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80101c6:	b209      	sxth	r1, r1
 80101c8:	4299      	cmp	r1, r3
 80101ca:	db4d      	blt.n	8010268 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80101cc:	8932      	ldrh	r2, [r6, #8]
 80101ce:	4413      	add	r3, r2
 80101d0:	b21b      	sxth	r3, r3
 80101d2:	4299      	cmp	r1, r3
 80101d4:	da48      	bge.n	8010268 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80101d6:	9b04      	ldr	r3, [sp, #16]
 80101d8:	6827      	ldr	r7, [r4, #0]
 80101da:	fb17 f703 	smulbb	r7, r7, r3
 80101de:	9b02      	ldr	r3, [sp, #8]
 80101e0:	b2bf      	uxth	r7, r7
 80101e2:	18fa      	adds	r2, r7, r3
 80101e4:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80101e8:	b212      	sxth	r2, r2
 80101ea:	429a      	cmp	r2, r3
 80101ec:	db3c      	blt.n	8010268 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80101ee:	8970      	ldrh	r0, [r6, #10]
 80101f0:	4403      	add	r3, r0
 80101f2:	b21b      	sxth	r3, r3
 80101f4:	429a      	cmp	r2, r3
 80101f6:	da37      	bge.n	8010268 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80101f8:	2300      	movs	r3, #0
 80101fa:	4630      	mov	r0, r6
 80101fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80101fe:	ab0b      	add	r3, sp, #44	; 0x2c
 8010200:	f7ff ff36 	bl	8010070 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8010204:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010206:	b37a      	cbz	r2, 8010268 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8010208:	4552      	cmp	r2, sl
 801020a:	d02d      	beq.n	8010268 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801020c:	4611      	mov	r1, r2
 801020e:	a80e      	add	r0, sp, #56	; 0x38
 8010210:	9209      	str	r2, [sp, #36]	; 0x24
 8010212:	f007 f8e5 	bl	80173e0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8010216:	f04f 0e02 	mov.w	lr, #2
 801021a:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 801021e:	9a06      	ldr	r2, [sp, #24]
 8010220:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8010224:	9b01      	ldr	r3, [sp, #4]
 8010226:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 801022a:	4413      	add	r3, r2
 801022c:	9a07      	ldr	r2, [sp, #28]
 801022e:	fb91 f1fe 	sdiv	r1, r1, lr
 8010232:	fb9c fcfe 	sdiv	ip, ip, lr
 8010236:	4401      	add	r1, r0
 8010238:	1a58      	subs	r0, r3, r1
 801023a:	9b02      	ldr	r3, [sp, #8]
 801023c:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8010240:	4413      	add	r3, r2
 8010242:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010244:	448c      	add	ip, r1
 8010246:	eba3 030c 	sub.w	r3, r3, ip
 801024a:	435b      	muls	r3, r3
 801024c:	fb00 3300 	mla	r3, r0, r0, r3
 8010250:	42ab      	cmp	r3, r5
 8010252:	d208      	bcs.n	8010266 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8010254:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010256:	461d      	mov	r5, r3
 8010258:	9803      	ldr	r0, [sp, #12]
 801025a:	6001      	str	r1, [r0, #0]
 801025c:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801025e:	9805      	ldr	r0, [sp, #20]
 8010260:	8008      	strh	r0, [r1, #0]
 8010262:	992b      	ldr	r1, [sp, #172]	; 0xac
 8010264:	800f      	strh	r7, [r1, #0]
 8010266:	4692      	mov	sl, r2
 8010268:	f10b 0b01 	add.w	fp, fp, #1
 801026c:	3408      	adds	r4, #8
 801026e:	f1bb 0f04 	cmp.w	fp, #4
 8010272:	d19d      	bne.n	80101b0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8010274:	9b00      	ldr	r3, [sp, #0]
 8010276:	9c08      	ldr	r4, [sp, #32]
 8010278:	444b      	add	r3, r9
 801027a:	4544      	cmp	r4, r8
 801027c:	9300      	str	r3, [sp, #0]
 801027e:	d188      	bne.n	8010192 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8010280:	b021      	add	sp, #132	; 0x84
 8010282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010286:	f04f 35ff 	mov.w	r5, #4294967295
 801028a:	e767      	b.n	801015c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 801028c:	20027bc4 	.word	0x20027bc4
 8010290:	08026f10 	.word	0x08026f10

08010294 <_ZN8touchgfx4RectaNERKS0_>:
 8010294:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010298:	f9b1 7000 	ldrsh.w	r7, [r1]
 801029c:	888c      	ldrh	r4, [r1, #4]
 801029e:	f9b0 9000 	ldrsh.w	r9, [r0]
 80102a2:	443c      	add	r4, r7
 80102a4:	b2a4      	uxth	r4, r4
 80102a6:	fa0f f884 	sxth.w	r8, r4
 80102aa:	45c1      	cmp	r9, r8
 80102ac:	da2f      	bge.n	801030e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80102ae:	8882      	ldrh	r2, [r0, #4]
 80102b0:	444a      	add	r2, r9
 80102b2:	b292      	uxth	r2, r2
 80102b4:	fa0f fe82 	sxth.w	lr, r2
 80102b8:	4577      	cmp	r7, lr
 80102ba:	da28      	bge.n	801030e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80102bc:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80102c0:	88cb      	ldrh	r3, [r1, #6]
 80102c2:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80102c6:	442b      	add	r3, r5
 80102c8:	b21b      	sxth	r3, r3
 80102ca:	429e      	cmp	r6, r3
 80102cc:	da1f      	bge.n	801030e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80102ce:	88c3      	ldrh	r3, [r0, #6]
 80102d0:	4433      	add	r3, r6
 80102d2:	b29b      	uxth	r3, r3
 80102d4:	fa0f fc83 	sxth.w	ip, r3
 80102d8:	4565      	cmp	r5, ip
 80102da:	da18      	bge.n	801030e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80102dc:	454f      	cmp	r7, r9
 80102de:	bfb8      	it	lt
 80102e0:	464f      	movlt	r7, r9
 80102e2:	42b5      	cmp	r5, r6
 80102e4:	bfb8      	it	lt
 80102e6:	4635      	movlt	r5, r6
 80102e8:	45f0      	cmp	r8, lr
 80102ea:	bfd8      	it	le
 80102ec:	4622      	movle	r2, r4
 80102ee:	1bd2      	subs	r2, r2, r7
 80102f0:	8082      	strh	r2, [r0, #4]
 80102f2:	884a      	ldrh	r2, [r1, #2]
 80102f4:	88c9      	ldrh	r1, [r1, #6]
 80102f6:	8007      	strh	r7, [r0, #0]
 80102f8:	440a      	add	r2, r1
 80102fa:	8045      	strh	r5, [r0, #2]
 80102fc:	b292      	uxth	r2, r2
 80102fe:	b211      	sxth	r1, r2
 8010300:	458c      	cmp	ip, r1
 8010302:	bfa8      	it	ge
 8010304:	4613      	movge	r3, r2
 8010306:	1b5b      	subs	r3, r3, r5
 8010308:	80c3      	strh	r3, [r0, #6]
 801030a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801030e:	2300      	movs	r3, #0
 8010310:	8003      	strh	r3, [r0, #0]
 8010312:	8043      	strh	r3, [r0, #2]
 8010314:	8083      	strh	r3, [r0, #4]
 8010316:	80c3      	strh	r3, [r0, #6]
 8010318:	e7f7      	b.n	801030a <_ZN8touchgfx4RectaNERKS0_+0x76>

0801031a <_ZNK8touchgfx4Rect7isEmptyEv>:
 801031a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801031e:	2b00      	cmp	r3, #0
 8010320:	dd06      	ble.n	8010330 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8010322:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8010326:	2800      	cmp	r0, #0
 8010328:	bfcc      	ite	gt
 801032a:	2000      	movgt	r0, #0
 801032c:	2001      	movle	r0, #1
 801032e:	4770      	bx	lr
 8010330:	2001      	movs	r0, #1
 8010332:	4770      	bx	lr

08010334 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8010334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010338:	2300      	movs	r3, #0
 801033a:	4604      	mov	r4, r0
 801033c:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801033e:	8003      	strh	r3, [r0, #0]
 8010340:	8043      	strh	r3, [r0, #2]
 8010342:	8083      	strh	r3, [r0, #4]
 8010344:	80c3      	strh	r3, [r0, #6]
 8010346:	2d00      	cmp	r5, #0
 8010348:	d040      	beq.n	80103cc <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 801034a:	1d28      	adds	r0, r5, #4
 801034c:	f7ff ffe5 	bl	801031a <_ZNK8touchgfx4Rect7isEmptyEv>
 8010350:	b988      	cbnz	r0, 8010376 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8010352:	4620      	mov	r0, r4
 8010354:	f7ff ffe1 	bl	801031a <_ZNK8touchgfx4Rect7isEmptyEv>
 8010358:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801035c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8010360:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8010364:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8010368:	b138      	cbz	r0, 801037a <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 801036a:	8022      	strh	r2, [r4, #0]
 801036c:	8063      	strh	r3, [r4, #2]
 801036e:	f8a4 e004 	strh.w	lr, [r4, #4]
 8010372:	f8a4 c006 	strh.w	ip, [r4, #6]
 8010376:	69ad      	ldr	r5, [r5, #24]
 8010378:	e7e5      	b.n	8010346 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 801037a:	f9b4 0000 	ldrsh.w	r0, [r4]
 801037e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8010382:	4290      	cmp	r0, r2
 8010384:	4607      	mov	r7, r0
 8010386:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 801038a:	460e      	mov	r6, r1
 801038c:	bfa8      	it	ge
 801038e:	4617      	movge	r7, r2
 8010390:	4299      	cmp	r1, r3
 8010392:	4472      	add	r2, lr
 8010394:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8010398:	bfa8      	it	ge
 801039a:	461e      	movge	r6, r3
 801039c:	4440      	add	r0, r8
 801039e:	4471      	add	r1, lr
 80103a0:	4463      	add	r3, ip
 80103a2:	b200      	sxth	r0, r0
 80103a4:	8027      	strh	r7, [r4, #0]
 80103a6:	b212      	sxth	r2, r2
 80103a8:	8066      	strh	r6, [r4, #2]
 80103aa:	b209      	sxth	r1, r1
 80103ac:	b21b      	sxth	r3, r3
 80103ae:	4290      	cmp	r0, r2
 80103b0:	bfac      	ite	ge
 80103b2:	ebc7 0200 	rsbge	r2, r7, r0
 80103b6:	ebc7 0202 	rsblt	r2, r7, r2
 80103ba:	4299      	cmp	r1, r3
 80103bc:	bfac      	ite	ge
 80103be:	ebc6 0301 	rsbge	r3, r6, r1
 80103c2:	ebc6 0303 	rsblt	r3, r6, r3
 80103c6:	80a2      	strh	r2, [r4, #4]
 80103c8:	80e3      	strh	r3, [r4, #6]
 80103ca:	e7d4      	b.n	8010376 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80103cc:	4620      	mov	r0, r4
 80103ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080103d2 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 80103d2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80103d6:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80103da:	b383      	cbz	r3, 801043e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80103dc:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80103de:	b374      	cbz	r4, 801043e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80103e0:	f9b1 5000 	ldrsh.w	r5, [r1]
 80103e4:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 80103e8:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 80103ec:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 80103f0:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80103f4:	b303      	cbz	r3, 8010438 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80103f6:	4668      	mov	r0, sp
 80103f8:	1d21      	adds	r1, r4, #4
 80103fa:	f8ad 5000 	strh.w	r5, [sp]
 80103fe:	f8ad 6002 	strh.w	r6, [sp, #2]
 8010402:	f8ad 7004 	strh.w	r7, [sp, #4]
 8010406:	f8ad 8006 	strh.w	r8, [sp, #6]
 801040a:	f7ff ff43 	bl	8010294 <_ZN8touchgfx4RectaNERKS0_>
 801040e:	4668      	mov	r0, sp
 8010410:	f7ff ff83 	bl	801031a <_ZNK8touchgfx4Rect7isEmptyEv>
 8010414:	b980      	cbnz	r0, 8010438 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8010416:	f8bd 3000 	ldrh.w	r3, [sp]
 801041a:	4669      	mov	r1, sp
 801041c:	88a2      	ldrh	r2, [r4, #4]
 801041e:	4620      	mov	r0, r4
 8010420:	1a9b      	subs	r3, r3, r2
 8010422:	88e2      	ldrh	r2, [r4, #6]
 8010424:	f8ad 3000 	strh.w	r3, [sp]
 8010428:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801042c:	1a9b      	subs	r3, r3, r2
 801042e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8010432:	6823      	ldr	r3, [r4, #0]
 8010434:	689b      	ldr	r3, [r3, #8]
 8010436:	4798      	blx	r3
 8010438:	69a4      	ldr	r4, [r4, #24]
 801043a:	2c00      	cmp	r4, #0
 801043c:	d1d8      	bne.n	80103f0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 801043e:	b002      	add	sp, #8
 8010440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010444 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8010444:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010446:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801044a:	460d      	mov	r5, r1
 801044c:	4616      	mov	r6, r2
 801044e:	b323      	cbz	r3, 801049a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8010450:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8010452:	b314      	cbz	r4, 801049a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8010454:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8010458:	b1eb      	cbz	r3, 8010496 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801045a:	6828      	ldr	r0, [r5, #0]
 801045c:	466b      	mov	r3, sp
 801045e:	6869      	ldr	r1, [r5, #4]
 8010460:	c303      	stmia	r3!, {r0, r1}
 8010462:	4668      	mov	r0, sp
 8010464:	1d21      	adds	r1, r4, #4
 8010466:	f7ff ff15 	bl	8010294 <_ZN8touchgfx4RectaNERKS0_>
 801046a:	4668      	mov	r0, sp
 801046c:	f7ff ff55 	bl	801031a <_ZNK8touchgfx4Rect7isEmptyEv>
 8010470:	b988      	cbnz	r0, 8010496 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8010472:	f8bd 3000 	ldrh.w	r3, [sp]
 8010476:	4669      	mov	r1, sp
 8010478:	88a2      	ldrh	r2, [r4, #4]
 801047a:	4620      	mov	r0, r4
 801047c:	1a9b      	subs	r3, r3, r2
 801047e:	88e2      	ldrh	r2, [r4, #6]
 8010480:	f8ad 3000 	strh.w	r3, [sp]
 8010484:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8010488:	1a9b      	subs	r3, r3, r2
 801048a:	4632      	mov	r2, r6
 801048c:	f8ad 3002 	strh.w	r3, [sp, #2]
 8010490:	6823      	ldr	r3, [r4, #0]
 8010492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010494:	4798      	blx	r3
 8010496:	69a4      	ldr	r4, [r4, #24]
 8010498:	e7db      	b.n	8010452 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 801049a:	b002      	add	sp, #8
 801049c:	bd70      	pop	{r4, r5, r6, pc}

0801049e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 801049e:	6803      	ldr	r3, [r0, #0]
 80104a0:	b513      	push	{r0, r1, r4, lr}
 80104a2:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 80104a6:	2300      	movs	r3, #0
 80104a8:	e9cd 3300 	strd	r3, r3, [sp]
 80104ac:	466b      	mov	r3, sp
 80104ae:	47a0      	blx	r4
 80104b0:	b002      	add	sp, #8
 80104b2:	bd10      	pop	{r4, pc}

080104b4 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 80104b4:	2301      	movs	r3, #1
 80104b6:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80104ba:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80104be:	4770      	bx	lr

080104c0 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 80104c0:	2301      	movs	r3, #1
 80104c2:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80104c6:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80104ca:	4770      	bx	lr

080104cc <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 80104cc:	6843      	ldr	r3, [r0, #4]
 80104ce:	2201      	movs	r2, #1
 80104d0:	725a      	strb	r2, [r3, #9]
 80104d2:	6840      	ldr	r0, [r0, #4]
 80104d4:	6803      	ldr	r3, [r0, #0]
 80104d6:	691b      	ldr	r3, [r3, #16]
 80104d8:	4718      	bx	r3

080104da <_ZN8touchgfx3HAL8flushDMAEv>:
 80104da:	6840      	ldr	r0, [r0, #4]
 80104dc:	6803      	ldr	r3, [r0, #0]
 80104de:	689b      	ldr	r3, [r3, #8]
 80104e0:	4718      	bx	r3

080104e2 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 80104e2:	b530      	push	{r4, r5, lr}
 80104e4:	b08b      	sub	sp, #44	; 0x2c
 80104e6:	6804      	ldr	r4, [r0, #0]
 80104e8:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 80104ec:	9509      	str	r5, [sp, #36]	; 0x24
 80104ee:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 80104f2:	9508      	str	r5, [sp, #32]
 80104f4:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 80104f8:	9507      	str	r5, [sp, #28]
 80104fa:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 80104fe:	9506      	str	r5, [sp, #24]
 8010500:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8010504:	9505      	str	r5, [sp, #20]
 8010506:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 801050a:	9504      	str	r5, [sp, #16]
 801050c:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 8010510:	9503      	str	r5, [sp, #12]
 8010512:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8010516:	9502      	str	r5, [sp, #8]
 8010518:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 801051c:	e9cd 3500 	strd	r3, r5, [sp]
 8010520:	4613      	mov	r3, r2
 8010522:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8010524:	2200      	movs	r2, #0
 8010526:	47a0      	blx	r4
 8010528:	b00b      	add	sp, #44	; 0x2c
 801052a:	bd30      	pop	{r4, r5, pc}

0801052c <_ZN8touchgfx3HAL10beginFrameEv>:
 801052c:	4b04      	ldr	r3, [pc, #16]	; (8010540 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 801052e:	781b      	ldrb	r3, [r3, #0]
 8010530:	b123      	cbz	r3, 801053c <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8010532:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8010536:	f080 0001 	eor.w	r0, r0, #1
 801053a:	4770      	bx	lr
 801053c:	2001      	movs	r0, #1
 801053e:	4770      	bx	lr
 8010540:	20027bc2 	.word	0x20027bc2

08010544 <_ZN8touchgfx3HAL8endFrameEv>:
 8010544:	b510      	push	{r4, lr}
 8010546:	4604      	mov	r4, r0
 8010548:	6840      	ldr	r0, [r0, #4]
 801054a:	6803      	ldr	r3, [r0, #0]
 801054c:	689b      	ldr	r3, [r3, #8]
 801054e:	4798      	blx	r3
 8010550:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8010554:	b113      	cbz	r3, 801055c <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8010556:	2301      	movs	r3, #1
 8010558:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 801055c:	bd10      	pop	{r4, pc}

0801055e <_ZN8touchgfx3HAL10initializeEv>:
 801055e:	b510      	push	{r4, lr}
 8010560:	4604      	mov	r4, r0
 8010562:	f7f1 fab5 	bl	8001ad0 <_ZN8touchgfx10OSWrappers10initializeEv>
 8010566:	f7f0 fb4d 	bl	8000c04 <_ZN8touchgfx4GPIO4initEv>
 801056a:	6860      	ldr	r0, [r4, #4]
 801056c:	6803      	ldr	r3, [r0, #0]
 801056e:	68db      	ldr	r3, [r3, #12]
 8010570:	4798      	blx	r3
 8010572:	68e0      	ldr	r0, [r4, #12]
 8010574:	6803      	ldr	r3, [r0, #0]
 8010576:	689b      	ldr	r3, [r3, #8]
 8010578:	4798      	blx	r3
 801057a:	6823      	ldr	r3, [r4, #0]
 801057c:	4620      	mov	r0, r4
 801057e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010584:	4718      	bx	r3
	...

08010588 <_ZN8touchgfx3HAL4tickEv>:
 8010588:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801058a:	6803      	ldr	r3, [r0, #0]
 801058c:	4604      	mov	r4, r0
 801058e:	4d5b      	ldr	r5, [pc, #364]	; (80106fc <_ZN8touchgfx3HAL4tickEv+0x174>)
 8010590:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8010594:	4798      	blx	r3
 8010596:	2800      	cmp	r0, #0
 8010598:	f000 8095 	beq.w	80106c6 <_ZN8touchgfx3HAL4tickEv+0x13e>
 801059c:	2001      	movs	r0, #1
 801059e:	2600      	movs	r6, #0
 80105a0:	f7f0 fa96 	bl	8000ad0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80105a4:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 80105a8:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 80105ac:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80105b0:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 80105b4:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 80105b8:	b133      	cbz	r3, 80105c8 <_ZN8touchgfx3HAL4tickEv+0x40>
 80105ba:	6823      	ldr	r3, [r4, #0]
 80105bc:	4620      	mov	r0, r4
 80105be:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80105c2:	4798      	blx	r3
 80105c4:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 80105c8:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 80105cc:	2601      	movs	r6, #1
 80105ce:	6862      	ldr	r2, [r4, #4]
 80105d0:	f083 0301 	eor.w	r3, r3, #1
 80105d4:	702e      	strb	r6, [r5, #0]
 80105d6:	7253      	strb	r3, [r2, #9]
 80105d8:	f005 fdb0 	bl	801613c <_ZN8touchgfx11Application11getInstanceEv>
 80105dc:	6803      	ldr	r3, [r0, #0]
 80105de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80105e0:	4798      	blx	r3
 80105e2:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 80105e6:	b90b      	cbnz	r3, 80105ec <_ZN8touchgfx3HAL4tickEv+0x64>
 80105e8:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 80105ec:	f005 fda6 	bl	801613c <_ZN8touchgfx11Application11getInstanceEv>
 80105f0:	6803      	ldr	r3, [r0, #0]
 80105f2:	695b      	ldr	r3, [r3, #20]
 80105f4:	4798      	blx	r3
 80105f6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80105f8:	6803      	ldr	r3, [r0, #0]
 80105fa:	691b      	ldr	r3, [r3, #16]
 80105fc:	4798      	blx	r3
 80105fe:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8010602:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8010606:	3b01      	subs	r3, #1
 8010608:	b2db      	uxtb	r3, r3
 801060a:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 801060e:	b10a      	cbz	r2, 8010614 <_ZN8touchgfx3HAL4tickEv+0x8c>
 8010610:	2b00      	cmp	r3, #0
 8010612:	d1eb      	bne.n	80105ec <_ZN8touchgfx3HAL4tickEv+0x64>
 8010614:	4a3a      	ldr	r2, [pc, #232]	; (8010700 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8010616:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 801061a:	7813      	ldrb	r3, [r2, #0]
 801061c:	3301      	adds	r3, #1
 801061e:	b25b      	sxtb	r3, r3
 8010620:	4299      	cmp	r1, r3
 8010622:	7013      	strb	r3, [r2, #0]
 8010624:	dc10      	bgt.n	8010648 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8010626:	2300      	movs	r3, #0
 8010628:	68e0      	ldr	r0, [r4, #12]
 801062a:	a902      	add	r1, sp, #8
 801062c:	7013      	strb	r3, [r2, #0]
 801062e:	aa03      	add	r2, sp, #12
 8010630:	6803      	ldr	r3, [r0, #0]
 8010632:	68db      	ldr	r3, [r3, #12]
 8010634:	4798      	blx	r3
 8010636:	6823      	ldr	r3, [r4, #0]
 8010638:	2800      	cmp	r0, #0
 801063a:	d050      	beq.n	80106de <_ZN8touchgfx3HAL4tickEv+0x156>
 801063c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8010640:	4620      	mov	r0, r4
 8010642:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8010646:	4798      	blx	r3
 8010648:	2300      	movs	r3, #0
 801064a:	6960      	ldr	r0, [r4, #20]
 801064c:	f88d 3007 	strb.w	r3, [sp, #7]
 8010650:	b158      	cbz	r0, 801066a <_ZN8touchgfx3HAL4tickEv+0xe2>
 8010652:	6803      	ldr	r3, [r0, #0]
 8010654:	f10d 0107 	add.w	r1, sp, #7
 8010658:	68db      	ldr	r3, [r3, #12]
 801065a:	4798      	blx	r3
 801065c:	b128      	cbz	r0, 801066a <_ZN8touchgfx3HAL4tickEv+0xe2>
 801065e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010660:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8010664:	6803      	ldr	r3, [r0, #0]
 8010666:	68db      	ldr	r3, [r3, #12]
 8010668:	4798      	blx	r3
 801066a:	f104 001c 	add.w	r0, r4, #28
 801066e:	f014 fdff 	bl	8025270 <_ZN8touchgfx8Gestures4tickEv>
 8010672:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8010676:	b30b      	cbz	r3, 80106bc <_ZN8touchgfx3HAL4tickEv+0x134>
 8010678:	6920      	ldr	r0, [r4, #16]
 801067a:	6803      	ldr	r3, [r0, #0]
 801067c:	691b      	ldr	r3, [r3, #16]
 801067e:	4798      	blx	r3
 8010680:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010682:	4606      	mov	r6, r0
 8010684:	b903      	cbnz	r3, 8010688 <_ZN8touchgfx3HAL4tickEv+0x100>
 8010686:	6720      	str	r0, [r4, #112]	; 0x70
 8010688:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801068a:	4a1e      	ldr	r2, [pc, #120]	; (8010704 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 801068c:	1af3      	subs	r3, r6, r3
 801068e:	4293      	cmp	r3, r2
 8010690:	d914      	bls.n	80106bc <_ZN8touchgfx3HAL4tickEv+0x134>
 8010692:	6920      	ldr	r0, [r4, #16]
 8010694:	6803      	ldr	r3, [r0, #0]
 8010696:	699b      	ldr	r3, [r3, #24]
 8010698:	4798      	blx	r3
 801069a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801069c:	2264      	movs	r2, #100	; 0x64
 801069e:	1af3      	subs	r3, r6, r3
 80106a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80106a4:	fbb0 f0f3 	udiv	r0, r0, r3
 80106a8:	2800      	cmp	r0, #0
 80106aa:	dc1d      	bgt.n	80106e8 <_ZN8touchgfx3HAL4tickEv+0x160>
 80106ac:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 80106b0:	6920      	ldr	r0, [r4, #16]
 80106b2:	2100      	movs	r1, #0
 80106b4:	6803      	ldr	r3, [r0, #0]
 80106b6:	69db      	ldr	r3, [r3, #28]
 80106b8:	4798      	blx	r3
 80106ba:	6726      	str	r6, [r4, #112]	; 0x70
 80106bc:	f005 fd3e 	bl	801613c <_ZN8touchgfx11Application11getInstanceEv>
 80106c0:	6803      	ldr	r3, [r0, #0]
 80106c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80106c4:	4798      	blx	r3
 80106c6:	6823      	ldr	r3, [r4, #0]
 80106c8:	4620      	mov	r0, r4
 80106ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80106ce:	4798      	blx	r3
 80106d0:	2001      	movs	r0, #1
 80106d2:	f7f0 fa2d 	bl	8000b30 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80106d6:	2300      	movs	r3, #0
 80106d8:	702b      	strb	r3, [r5, #0]
 80106da:	b004      	add	sp, #16
 80106dc:	bd70      	pop	{r4, r5, r6, pc}
 80106de:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80106e2:	4620      	mov	r0, r4
 80106e4:	4798      	blx	r3
 80106e6:	e7af      	b.n	8010648 <_ZN8touchgfx3HAL4tickEv+0xc0>
 80106e8:	2863      	cmp	r0, #99	; 0x63
 80106ea:	bfcb      	itete	gt
 80106ec:	2300      	movgt	r3, #0
 80106ee:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 80106f2:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 80106f6:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 80106fa:	e7d9      	b.n	80106b0 <_ZN8touchgfx3HAL4tickEv+0x128>
 80106fc:	20027bc8 	.word	0x20027bc8
 8010700:	20027bc9 	.word	0x20027bc9
 8010704:	05f5e100 	.word	0x05f5e100

08010708 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8010708:	f7f1 ba12 	b.w	8001b30 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801070c <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 801070c:	6581      	str	r1, [r0, #88]	; 0x58
 801070e:	301c      	adds	r0, #28
 8010710:	f014 bdac 	b.w	802526c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08010714 <_ZN8touchgfx3HAL5touchEll>:
 8010714:	b530      	push	{r4, r5, lr}
 8010716:	b087      	sub	sp, #28
 8010718:	4604      	mov	r4, r0
 801071a:	a804      	add	r0, sp, #16
 801071c:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8010720:	f005 fb52 	bl	8015dc8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8010724:	9b04      	ldr	r3, [sp, #16]
 8010726:	a906      	add	r1, sp, #24
 8010728:	a803      	add	r0, sp, #12
 801072a:	f8ad 300c 	strh.w	r3, [sp, #12]
 801072e:	9b05      	ldr	r3, [sp, #20]
 8010730:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8010734:	f005 fb9a 	bl	8015e6c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8010738:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 801073c:	f104 001c 	add.w	r0, r4, #28
 8010740:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8010744:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8010748:	b189      	cbz	r1, 801076e <_ZN8touchgfx3HAL5touchEll+0x5a>
 801074a:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 801074e:	9300      	str	r3, [sp, #0]
 8010750:	4613      	mov	r3, r2
 8010752:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8010756:	462a      	mov	r2, r5
 8010758:	f014 fd98 	bl	802528c <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 801075c:	b128      	cbz	r0, 801076a <_ZN8touchgfx3HAL5touchEll+0x56>
 801075e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8010762:	65e3      	str	r3, [r4, #92]	; 0x5c
 8010764:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8010768:	6623      	str	r3, [r4, #96]	; 0x60
 801076a:	b007      	add	sp, #28
 801076c:	bd30      	pop	{r4, r5, pc}
 801076e:	f014 fdcd 	bl	802530c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8010772:	2301      	movs	r3, #1
 8010774:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8010778:	e7f1      	b.n	801075e <_ZN8touchgfx3HAL5touchEll+0x4a>

0801077a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 801077a:	b510      	push	{r4, lr}
 801077c:	2b00      	cmp	r3, #0
 801077e:	d046      	beq.n	801080e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8010780:	ea81 0002 	eor.w	r0, r1, r2
 8010784:	07c4      	lsls	r4, r0, #31
 8010786:	d508      	bpl.n	801079a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8010788:	440b      	add	r3, r1
 801078a:	3a01      	subs	r2, #1
 801078c:	428b      	cmp	r3, r1
 801078e:	d93e      	bls.n	801080e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8010790:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8010794:	f801 0b01 	strb.w	r0, [r1], #1
 8010798:	e7f8      	b.n	801078c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 801079a:	07d0      	lsls	r0, r2, #31
 801079c:	bf42      	ittt	mi
 801079e:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 80107a2:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80107a6:	f801 0b01 	strbmi.w	r0, [r1], #1
 80107aa:	2b01      	cmp	r3, #1
 80107ac:	d911      	bls.n	80107d2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80107ae:	ea81 0402 	eor.w	r4, r1, r2
 80107b2:	4610      	mov	r0, r2
 80107b4:	07a4      	lsls	r4, r4, #30
 80107b6:	d022      	beq.n	80107fe <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 80107b8:	f023 0401 	bic.w	r4, r3, #1
 80107bc:	440c      	add	r4, r1
 80107be:	428c      	cmp	r4, r1
 80107c0:	4602      	mov	r2, r0
 80107c2:	d904      	bls.n	80107ce <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 80107c4:	8812      	ldrh	r2, [r2, #0]
 80107c6:	3002      	adds	r0, #2
 80107c8:	f821 2b02 	strh.w	r2, [r1], #2
 80107cc:	e7f7      	b.n	80107be <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 80107ce:	f003 0301 	and.w	r3, r3, #1
 80107d2:	f023 0003 	bic.w	r0, r3, #3
 80107d6:	4408      	add	r0, r1
 80107d8:	4288      	cmp	r0, r1
 80107da:	4614      	mov	r4, r2
 80107dc:	d904      	bls.n	80107e8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 80107de:	6824      	ldr	r4, [r4, #0]
 80107e0:	3204      	adds	r2, #4
 80107e2:	f841 4b04 	str.w	r4, [r1], #4
 80107e6:	e7f7      	b.n	80107d8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 80107e8:	f003 0303 	and.w	r3, r3, #3
 80107ec:	3a01      	subs	r2, #1
 80107ee:	440b      	add	r3, r1
 80107f0:	428b      	cmp	r3, r1
 80107f2:	d90c      	bls.n	801080e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80107f4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80107f8:	f801 0b01 	strb.w	r0, [r1], #1
 80107fc:	e7f8      	b.n	80107f0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 80107fe:	0790      	lsls	r0, r2, #30
 8010800:	d0e7      	beq.n	80107d2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8010802:	f832 0b02 	ldrh.w	r0, [r2], #2
 8010806:	3b02      	subs	r3, #2
 8010808:	f821 0b02 	strh.w	r0, [r1], #2
 801080c:	e7e1      	b.n	80107d2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801080e:	2001      	movs	r0, #1
 8010810:	bd10      	pop	{r4, pc}

08010812 <_ZN8touchgfx3HAL7noTouchEv>:
 8010812:	b510      	push	{r4, lr}
 8010814:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8010818:	4604      	mov	r4, r0
 801081a:	b153      	cbz	r3, 8010832 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 801081c:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8010820:	2101      	movs	r1, #1
 8010822:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8010826:	301c      	adds	r0, #28
 8010828:	f014 fd70 	bl	802530c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801082c:	2300      	movs	r3, #0
 801082e:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8010832:	bd10      	pop	{r4, pc}

08010834 <_ZN8touchgfx3HAL3lcdEv>:
 8010834:	4b04      	ldr	r3, [pc, #16]	; (8010848 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801083c:	b10a      	cbz	r2, 8010842 <_ZN8touchgfx3HAL3lcdEv+0xe>
 801083e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8010840:	b900      	cbnz	r0, 8010844 <_ZN8touchgfx3HAL3lcdEv+0x10>
 8010842:	6898      	ldr	r0, [r3, #8]
 8010844:	4770      	bx	lr
 8010846:	bf00      	nop
 8010848:	20027bc4 	.word	0x20027bc4

0801084c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 801084c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010850:	b085      	sub	sp, #20
 8010852:	4604      	mov	r4, r0
 8010854:	2000      	movs	r0, #0
 8010856:	4699      	mov	r9, r3
 8010858:	ad04      	add	r5, sp, #16
 801085a:	460f      	mov	r7, r1
 801085c:	4690      	mov	r8, r2
 801085e:	f845 0d04 	str.w	r0, [r5, #-4]!
 8010862:	69a0      	ldr	r0, [r4, #24]
 8010864:	6806      	ldr	r6, [r0, #0]
 8010866:	9501      	str	r5, [sp, #4]
 8010868:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 801086c:	9500      	str	r5, [sp, #0]
 801086e:	6835      	ldr	r5, [r6, #0]
 8010870:	47a8      	blx	r5
 8010872:	4d10      	ldr	r5, [pc, #64]	; (80108b4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8010874:	4606      	mov	r6, r0
 8010876:	f8a5 9000 	strh.w	r9, [r5]
 801087a:	f7ff ffdb 	bl	8010834 <_ZN8touchgfx3HAL3lcdEv>
 801087e:	6803      	ldr	r3, [r0, #0]
 8010880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010882:	4798      	blx	r3
 8010884:	b128      	cbz	r0, 8010892 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8010886:	2801      	cmp	r0, #1
 8010888:	d00b      	beq.n	80108a2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 801088a:	4630      	mov	r0, r6
 801088c:	b005      	add	sp, #20
 801088e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010892:	882b      	ldrh	r3, [r5, #0]
 8010894:	fb08 7203 	mla	r2, r8, r3, r7
 8010898:	9b03      	ldr	r3, [sp, #12]
 801089a:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 801089e:	63e3      	str	r3, [r4, #60]	; 0x3c
 80108a0:	e7f3      	b.n	801088a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 80108a2:	882a      	ldrh	r2, [r5, #0]
 80108a4:	9b03      	ldr	r3, [sp, #12]
 80108a6:	fb08 7202 	mla	r2, r8, r2, r7
 80108aa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80108ae:	1a9a      	subs	r2, r3, r2
 80108b0:	63e2      	str	r2, [r4, #60]	; 0x3c
 80108b2:	e7ea      	b.n	801088a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 80108b4:	20027bbe 	.word	0x20027bbe

080108b8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 80108b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80108ba:	b08b      	sub	sp, #44	; 0x2c
 80108bc:	4617      	mov	r7, r2
 80108be:	4604      	mov	r4, r0
 80108c0:	460e      	mov	r6, r1
 80108c2:	461d      	mov	r5, r3
 80108c4:	f7ff ffb6 	bl	8010834 <_ZN8touchgfx3HAL3lcdEv>
 80108c8:	6803      	ldr	r3, [r0, #0]
 80108ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108cc:	4798      	blx	r3
 80108ce:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80108d2:	9007      	str	r0, [sp, #28]
 80108d4:	4631      	mov	r1, r6
 80108d6:	6822      	ldr	r2, [r4, #0]
 80108d8:	e9cd 0308 	strd	r0, r3, [sp, #32]
 80108dc:	4b0c      	ldr	r3, [pc, #48]	; (8010910 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 80108de:	4620      	mov	r0, r4
 80108e0:	881b      	ldrh	r3, [r3, #0]
 80108e2:	9306      	str	r3, [sp, #24]
 80108e4:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 80108e8:	9305      	str	r3, [sp, #20]
 80108ea:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80108ee:	9304      	str	r3, [sp, #16]
 80108f0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80108f4:	9303      	str	r3, [sp, #12]
 80108f6:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80108fa:	9302      	str	r3, [sp, #8]
 80108fc:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8010900:	e9cd 5300 	strd	r5, r3, [sp]
 8010904:	463b      	mov	r3, r7
 8010906:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8010908:	2200      	movs	r2, #0
 801090a:	47a8      	blx	r5
 801090c:	b00b      	add	sp, #44	; 0x2c
 801090e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010910:	20027bbe 	.word	0x20027bbe

08010914 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8010914:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010918:	4698      	mov	r8, r3
 801091a:	6803      	ldr	r3, [r0, #0]
 801091c:	b08b      	sub	sp, #44	; 0x2c
 801091e:	4617      	mov	r7, r2
 8010920:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8010922:	460e      	mov	r6, r1
 8010924:	4b13      	ldr	r3, [pc, #76]	; (8010974 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8010926:	4604      	mov	r4, r0
 8010928:	f8b3 9000 	ldrh.w	r9, [r3]
 801092c:	f7ff ff82 	bl	8010834 <_ZN8touchgfx3HAL3lcdEv>
 8010930:	6803      	ldr	r3, [r0, #0]
 8010932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010934:	4798      	blx	r3
 8010936:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801093a:	2200      	movs	r2, #0
 801093c:	4631      	mov	r1, r6
 801093e:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8010942:	2302      	movs	r3, #2
 8010944:	4620      	mov	r0, r4
 8010946:	e9cd 9306 	strd	r9, r3, [sp, #24]
 801094a:	2301      	movs	r3, #1
 801094c:	9305      	str	r3, [sp, #20]
 801094e:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8010952:	9304      	str	r3, [sp, #16]
 8010954:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8010958:	9303      	str	r3, [sp, #12]
 801095a:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801095e:	9302      	str	r3, [sp, #8]
 8010960:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8010964:	e9cd 8300 	strd	r8, r3, [sp]
 8010968:	463b      	mov	r3, r7
 801096a:	47a8      	blx	r5
 801096c:	b00b      	add	sp, #44	; 0x2c
 801096e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010972:	bf00      	nop
 8010974:	20027bbe 	.word	0x20027bbe

08010978 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8010978:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801097c:	4698      	mov	r8, r3
 801097e:	6803      	ldr	r3, [r0, #0]
 8010980:	b087      	sub	sp, #28
 8010982:	460e      	mov	r6, r1
 8010984:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 8010986:	4617      	mov	r7, r2
 8010988:	4b0f      	ldr	r3, [pc, #60]	; (80109c8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 801098a:	4604      	mov	r4, r0
 801098c:	f8b3 9000 	ldrh.w	r9, [r3]
 8010990:	f7ff ff50 	bl	8010834 <_ZN8touchgfx3HAL3lcdEv>
 8010994:	6803      	ldr	r3, [r0, #0]
 8010996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010998:	4798      	blx	r3
 801099a:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 801099e:	463a      	mov	r2, r7
 80109a0:	4631      	mov	r1, r6
 80109a2:	f8cd 900c 	str.w	r9, [sp, #12]
 80109a6:	e9cd 0304 	strd	r0, r3, [sp, #16]
 80109aa:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80109ae:	4620      	mov	r0, r4
 80109b0:	9302      	str	r3, [sp, #8]
 80109b2:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80109b6:	9301      	str	r3, [sp, #4]
 80109b8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80109bc:	9300      	str	r3, [sp, #0]
 80109be:	4643      	mov	r3, r8
 80109c0:	47a8      	blx	r5
 80109c2:	b007      	add	sp, #28
 80109c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80109c8:	20027bbe 	.word	0x20027bbe

080109cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 80109cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109d0:	4604      	mov	r4, r0
 80109d2:	b08f      	sub	sp, #60	; 0x3c
 80109d4:	4610      	mov	r0, r2
 80109d6:	460d      	mov	r5, r1
 80109d8:	4691      	mov	r9, r2
 80109da:	461e      	mov	r6, r3
 80109dc:	f008 fe86 	bl	80196ec <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80109e0:	2800      	cmp	r0, #0
 80109e2:	f000 809d 	beq.w	8010b20 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 80109e6:	6823      	ldr	r3, [r4, #0]
 80109e8:	4620      	mov	r0, r4
 80109ea:	f8df b198 	ldr.w	fp, [pc, #408]	; 8010b84 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 80109ee:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80109f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109f4:	4798      	blx	r3
 80109f6:	6823      	ldr	r3, [r4, #0]
 80109f8:	4620      	mov	r0, r4
 80109fa:	f8df a18c 	ldr.w	sl, [pc, #396]	; 8010b88 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 80109fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a00:	4798      	blx	r3
 8010a02:	f8bb 3000 	ldrh.w	r3, [fp]
 8010a06:	4f5c      	ldr	r7, [pc, #368]	; (8010b78 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8010a08:	9301      	str	r3, [sp, #4]
 8010a0a:	f8ba 3000 	ldrh.w	r3, [sl]
 8010a0e:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8010a12:	4640      	mov	r0, r8
 8010a14:	9302      	str	r3, [sp, #8]
 8010a16:	883b      	ldrh	r3, [r7, #0]
 8010a18:	9303      	str	r3, [sp, #12]
 8010a1a:	4b58      	ldr	r3, [pc, #352]	; (8010b7c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8010a1c:	881a      	ldrh	r2, [r3, #0]
 8010a1e:	9305      	str	r3, [sp, #20]
 8010a20:	9204      	str	r2, [sp, #16]
 8010a22:	f008 fef7 	bl	8019814 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010a26:	8038      	strh	r0, [r7, #0]
 8010a28:	4640      	mov	r0, r8
 8010a2a:	f008 ff27 	bl	801987c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8010a2e:	9b05      	ldr	r3, [sp, #20]
 8010a30:	b280      	uxth	r0, r0
 8010a32:	8018      	strh	r0, [r3, #0]
 8010a34:	4b52      	ldr	r3, [pc, #328]	; (8010b80 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8010a36:	781b      	ldrb	r3, [r3, #0]
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d174      	bne.n	8010b26 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8010a3c:	883b      	ldrh	r3, [r7, #0]
 8010a3e:	f8aa 0000 	strh.w	r0, [sl]
 8010a42:	f8ab 3000 	strh.w	r3, [fp]
 8010a46:	4648      	mov	r0, r9
 8010a48:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8010a4c:	f008 fe4e 	bl	80196ec <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8010a50:	2200      	movs	r2, #0
 8010a52:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8010a56:	4611      	mov	r1, r2
 8010a58:	4628      	mov	r0, r5
 8010a5a:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8010a5e:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8010a62:	f7f5 fe7a 	bl	800675a <_ZN8touchgfx8Drawable5setXYEss>
 8010a66:	2301      	movs	r3, #1
 8010a68:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8010a6c:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8010a70:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	dd5c      	ble.n	8010b32 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8010a78:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	dd58      	ble.n	8010b32 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8010a80:	462a      	mov	r2, r5
 8010a82:	ab0a      	add	r3, sp, #40	; 0x28
 8010a84:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8010a88:	6851      	ldr	r1, [r2, #4]
 8010a8a:	c303      	stmia	r3!, {r0, r1}
 8010a8c:	4631      	mov	r1, r6
 8010a8e:	a80a      	add	r0, sp, #40	; 0x28
 8010a90:	f7ff fc00 	bl	8010294 <_ZN8touchgfx4RectaNERKS0_>
 8010a94:	4b38      	ldr	r3, [pc, #224]	; (8010b78 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8010a96:	2100      	movs	r1, #0
 8010a98:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010a9c:	4b37      	ldr	r3, [pc, #220]	; (8010b7c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8010a9e:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8010aa2:	aa0a      	add	r2, sp, #40	; 0x28
 8010aa4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010aa8:	910c      	str	r1, [sp, #48]	; 0x30
 8010aaa:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8010aae:	ab08      	add	r3, sp, #32
 8010ab0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010ab4:	e883 0003 	stmia.w	r3, {r0, r1}
 8010ab8:	4618      	mov	r0, r3
 8010aba:	a90c      	add	r1, sp, #48	; 0x30
 8010abc:	f7ff fbea 	bl	8010294 <_ZN8touchgfx4RectaNERKS0_>
 8010ac0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d13c      	bne.n	8010b40 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8010ac6:	2000      	movs	r0, #0
 8010ac8:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 8010acc:	2600      	movs	r6, #0
 8010ace:	696b      	ldr	r3, [r5, #20]
 8010ad0:	a908      	add	r1, sp, #32
 8010ad2:	682a      	ldr	r2, [r5, #0]
 8010ad4:	4628      	mov	r0, r5
 8010ad6:	9305      	str	r3, [sp, #20]
 8010ad8:	616e      	str	r6, [r5, #20]
 8010ada:	6892      	ldr	r2, [r2, #8]
 8010adc:	4790      	blx	r2
 8010ade:	9b05      	ldr	r3, [sp, #20]
 8010ae0:	4652      	mov	r2, sl
 8010ae2:	4649      	mov	r1, r9
 8010ae4:	616b      	str	r3, [r5, #20]
 8010ae6:	4628      	mov	r0, r5
 8010ae8:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 8010aec:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8010af0:	f7f5 fe33 	bl	800675a <_ZN8touchgfx8Drawable5setXYEss>
 8010af4:	9a01      	ldr	r2, [sp, #4]
 8010af6:	4b23      	ldr	r3, [pc, #140]	; (8010b84 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8010af8:	4620      	mov	r0, r4
 8010afa:	801a      	strh	r2, [r3, #0]
 8010afc:	9a02      	ldr	r2, [sp, #8]
 8010afe:	4b22      	ldr	r3, [pc, #136]	; (8010b88 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8010b00:	801a      	strh	r2, [r3, #0]
 8010b02:	9a03      	ldr	r2, [sp, #12]
 8010b04:	4b1c      	ldr	r3, [pc, #112]	; (8010b78 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8010b06:	801a      	strh	r2, [r3, #0]
 8010b08:	4b1c      	ldr	r3, [pc, #112]	; (8010b7c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8010b0a:	9a04      	ldr	r2, [sp, #16]
 8010b0c:	801a      	strh	r2, [r3, #0]
 8010b0e:	6823      	ldr	r3, [r4, #0]
 8010b10:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8010b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b16:	4798      	blx	r3
 8010b18:	6823      	ldr	r3, [r4, #0]
 8010b1a:	4620      	mov	r0, r4
 8010b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b1e:	4798      	blx	r3
 8010b20:	b00f      	add	sp, #60	; 0x3c
 8010b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b26:	883b      	ldrh	r3, [r7, #0]
 8010b28:	f8ab 0000 	strh.w	r0, [fp]
 8010b2c:	f8aa 3000 	strh.w	r3, [sl]
 8010b30:	e789      	b.n	8010a46 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 8010b32:	462a      	mov	r2, r5
 8010b34:	ab0a      	add	r3, sp, #40	; 0x28
 8010b36:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8010b3a:	6851      	ldr	r1, [r2, #4]
 8010b3c:	c303      	stmia	r3!, {r0, r1}
 8010b3e:	e7a9      	b.n	8010a94 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8010b40:	a807      	add	r0, sp, #28
 8010b42:	f008 ffd7 	bl	8019af4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8010b46:	4606      	mov	r6, r0
 8010b48:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8010b4a:	6803      	ldr	r3, [r0, #0]
 8010b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b4e:	4798      	blx	r3
 8010b50:	4286      	cmp	r6, r0
 8010b52:	d1b8      	bne.n	8010ac6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8010b54:	f7ff fe6e 	bl	8010834 <_ZN8touchgfx3HAL3lcdEv>
 8010b58:	6803      	ldr	r3, [r0, #0]
 8010b5a:	4606      	mov	r6, r0
 8010b5c:	a807      	add	r0, sp, #28
 8010b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b60:	9305      	str	r3, [sp, #20]
 8010b62:	f008 ffc7 	bl	8019af4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8010b66:	9b05      	ldr	r3, [sp, #20]
 8010b68:	4601      	mov	r1, r0
 8010b6a:	4630      	mov	r0, r6
 8010b6c:	4798      	blx	r3
 8010b6e:	f080 0001 	eor.w	r0, r0, #1
 8010b72:	b2c0      	uxtb	r0, r0
 8010b74:	e7a8      	b.n	8010ac8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 8010b76:	bf00      	nop
 8010b78:	20027bb8 	.word	0x20027bb8
 8010b7c:	20027bba 	.word	0x20027bba
 8010b80:	20027bbc 	.word	0x20027bbc
 8010b84:	20027bbe 	.word	0x20027bbe
 8010b88:	20027bc0 	.word	0x20027bc0

08010b8c <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8010b8c:	4b07      	ldr	r3, [pc, #28]	; (8010bac <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8010b8e:	b510      	push	{r4, lr}
 8010b90:	781b      	ldrb	r3, [r3, #0]
 8010b92:	4604      	mov	r4, r0
 8010b94:	b13b      	cbz	r3, 8010ba6 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8010b96:	6803      	ldr	r3, [r0, #0]
 8010b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b9a:	4798      	blx	r3
 8010b9c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010b9e:	4283      	cmp	r3, r0
 8010ba0:	d101      	bne.n	8010ba6 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8010ba2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8010ba4:	bd10      	pop	{r4, pc}
 8010ba6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8010ba8:	e7fc      	b.n	8010ba4 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8010baa:	bf00      	nop
 8010bac:	20027bc2 	.word	0x20027bc2

08010bb0 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8010bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010bb4:	461d      	mov	r5, r3
 8010bb6:	b08a      	sub	sp, #40	; 0x28
 8010bb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010bbc:	4690      	mov	r8, r2
 8010bbe:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8010bc2:	2400      	movs	r4, #0
 8010bc4:	4607      	mov	r7, r0
 8010bc6:	fb06 8505 	mla	r5, r6, r5, r8
 8010bca:	9404      	str	r4, [sp, #16]
 8010bcc:	f88d 4020 	strb.w	r4, [sp, #32]
 8010bd0:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8010bd4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8010bd8:	f8ad 3018 	strh.w	r3, [sp, #24]
 8010bdc:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8010be0:	f8ad 301a 	strh.w	r3, [sp, #26]
 8010be4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8010be8:	f8ad 301c 	strh.w	r3, [sp, #28]
 8010bec:	f7ff ffce 	bl	8010b8c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010bf0:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8010bf4:	6878      	ldr	r0, [r7, #4]
 8010bf6:	f8ad 601e 	strh.w	r6, [sp, #30]
 8010bfa:	a901      	add	r1, sp, #4
 8010bfc:	9505      	str	r5, [sp, #20]
 8010bfe:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8010c02:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 8010c06:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8010c0a:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8010c0e:	6803      	ldr	r3, [r0, #0]
 8010c10:	685b      	ldr	r3, [r3, #4]
 8010c12:	4798      	blx	r3
 8010c14:	b00a      	add	sp, #40	; 0x28
 8010c16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010c1a <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8010c1a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010c1e:	b08b      	sub	sp, #44	; 0x2c
 8010c20:	2400      	movs	r4, #0
 8010c22:	4691      	mov	r9, r2
 8010c24:	461d      	mov	r5, r3
 8010c26:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8010c2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010c2e:	4688      	mov	r8, r1
 8010c30:	4607      	mov	r7, r0
 8010c32:	9404      	str	r4, [sp, #16]
 8010c34:	fb06 9505 	mla	r5, r6, r5, r9
 8010c38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010c3c:	f7ff ffa6 	bl	8010b8c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010c40:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8010c44:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8010c48:	6878      	ldr	r0, [r7, #4]
 8010c4a:	f8ad 3018 	strh.w	r3, [sp, #24]
 8010c4e:	a901      	add	r1, sp, #4
 8010c50:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8010c54:	9505      	str	r5, [sp, #20]
 8010c56:	f8ad 301a 	strh.w	r3, [sp, #26]
 8010c5a:	f8ad 401c 	strh.w	r4, [sp, #28]
 8010c5e:	f8ad 601e 	strh.w	r6, [sp, #30]
 8010c62:	f8cd 8010 	str.w	r8, [sp, #16]
 8010c66:	f8ad 4020 	strh.w	r4, [sp, #32]
 8010c6a:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8010c6e:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8010c72:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8010c76:	6803      	ldr	r3, [r0, #0]
 8010c78:	685b      	ldr	r3, [r3, #4]
 8010c7a:	4798      	blx	r3
 8010c7c:	b00b      	add	sp, #44	; 0x2c
 8010c7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08010c84 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8010c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c88:	b08a      	sub	sp, #40	; 0x28
 8010c8a:	4698      	mov	r8, r3
 8010c8c:	2300      	movs	r3, #0
 8010c8e:	4606      	mov	r6, r0
 8010c90:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8010c94:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8010c98:	2d0b      	cmp	r5, #11
 8010c9a:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 8010c9e:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 8010ca2:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 8010ca6:	9304      	str	r3, [sp, #16]
 8010ca8:	d137      	bne.n	8010d1a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 8010caa:	2380      	movs	r3, #128	; 0x80
 8010cac:	f88d 0020 	strb.w	r0, [sp, #32]
 8010cb0:	4630      	mov	r0, r6
 8010cb2:	9203      	str	r2, [sp, #12]
 8010cb4:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8010cb8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8010cbc:	f8ad 3018 	strh.w	r3, [sp, #24]
 8010cc0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8010cc4:	f8ad 301a 	strh.w	r3, [sp, #26]
 8010cc8:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8010ccc:	f8ad 301c 	strh.w	r3, [sp, #28]
 8010cd0:	f7ff ff5c 	bl	8010b8c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010cd4:	2c0b      	cmp	r4, #11
 8010cd6:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8010cda:	f8ad 701e 	strh.w	r7, [sp, #30]
 8010cde:	bf94      	ite	ls
 8010ce0:	4b19      	ldrls	r3, [pc, #100]	; (8010d48 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8010ce2:	2100      	movhi	r1, #0
 8010ce4:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8010ce8:	bf98      	it	ls
 8010cea:	5d19      	ldrbls	r1, [r3, r4]
 8010cec:	fb02 8307 	mla	r3, r2, r7, r8
 8010cf0:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8010cf4:	10c9      	asrs	r1, r1, #3
 8010cf6:	fb01 0003 	mla	r0, r1, r3, r0
 8010cfa:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8010cfe:	a901      	add	r1, sp, #4
 8010d00:	9005      	str	r0, [sp, #20]
 8010d02:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8010d06:	2300      	movs	r3, #0
 8010d08:	6870      	ldr	r0, [r6, #4]
 8010d0a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8010d0e:	6803      	ldr	r3, [r0, #0]
 8010d10:	685b      	ldr	r3, [r3, #4]
 8010d12:	4798      	blx	r3
 8010d14:	b00a      	add	sp, #40	; 0x28
 8010d16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d1a:	2d02      	cmp	r5, #2
 8010d1c:	d109      	bne.n	8010d32 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 8010d1e:	28ff      	cmp	r0, #255	; 0xff
 8010d20:	d105      	bne.n	8010d2e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 8010d22:	f1bc 0f00 	cmp.w	ip, #0
 8010d26:	bf14      	ite	ne
 8010d28:	2340      	movne	r3, #64	; 0x40
 8010d2a:	2320      	moveq	r3, #32
 8010d2c:	e7be      	b.n	8010cac <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8010d2e:	2340      	movs	r3, #64	; 0x40
 8010d30:	e7bc      	b.n	8010cac <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8010d32:	28ff      	cmp	r0, #255	; 0xff
 8010d34:	d105      	bne.n	8010d42 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 8010d36:	f1bc 0f00 	cmp.w	ip, #0
 8010d3a:	bf14      	ite	ne
 8010d3c:	2304      	movne	r3, #4
 8010d3e:	2301      	moveq	r3, #1
 8010d40:	e7b4      	b.n	8010cac <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8010d42:	2304      	movs	r3, #4
 8010d44:	e7b2      	b.n	8010cac <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8010d46:	bf00      	nop
 8010d48:	0802a99c 	.word	0x0802a99c

08010d4c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8010d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d50:	b08b      	sub	sp, #44	; 0x2c
 8010d52:	461d      	mov	r5, r3
 8010d54:	2400      	movs	r4, #0
 8010d56:	4688      	mov	r8, r1
 8010d58:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 8010d5c:	4693      	mov	fp, r2
 8010d5e:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 8010d62:	4607      	mov	r7, r0
 8010d64:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8010d68:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 8010d6c:	9404      	str	r4, [sp, #16]
 8010d6e:	bf14      	ite	ne
 8010d70:	2308      	movne	r3, #8
 8010d72:	2302      	moveq	r3, #2
 8010d74:	fb05 b50a 	mla	r5, r5, sl, fp
 8010d78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010d7c:	f7ff ff06 	bl	8010b8c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010d80:	2e0b      	cmp	r6, #11
 8010d82:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8010d86:	a901      	add	r1, sp, #4
 8010d88:	bf98      	it	ls
 8010d8a:	4b13      	ldrls	r3, [pc, #76]	; (8010dd8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8010d8c:	f8ad a01e 	strh.w	sl, [sp, #30]
 8010d90:	bf98      	it	ls
 8010d92:	5d9c      	ldrbls	r4, [r3, r6]
 8010d94:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8010d98:	10e4      	asrs	r4, r4, #3
 8010d9a:	f8cd 8010 	str.w	r8, [sp, #16]
 8010d9e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8010da2:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8010da6:	fb04 0405 	mla	r4, r4, r5, r0
 8010daa:	6878      	ldr	r0, [r7, #4]
 8010dac:	f8ad 301a 	strh.w	r3, [sp, #26]
 8010db0:	2300      	movs	r3, #0
 8010db2:	9405      	str	r4, [sp, #20]
 8010db4:	f8ad 301c 	strh.w	r3, [sp, #28]
 8010db8:	f88d 9020 	strb.w	r9, [sp, #32]
 8010dbc:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 8010dc0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8010dc4:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 8010dc8:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 8010dcc:	6803      	ldr	r3, [r0, #0]
 8010dce:	685b      	ldr	r3, [r3, #4]
 8010dd0:	4798      	blx	r3
 8010dd2:	b00b      	add	sp, #44	; 0x2c
 8010dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010dd8:	0802a99c 	.word	0x0802a99c

08010ddc <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8010ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010de0:	461e      	mov	r6, r3
 8010de2:	4b0a      	ldr	r3, [pc, #40]	; (8010e0c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8010de4:	460f      	mov	r7, r1
 8010de6:	4690      	mov	r8, r2
 8010de8:	881d      	ldrh	r5, [r3, #0]
 8010dea:	f7ff fd23 	bl	8010834 <_ZN8touchgfx3HAL3lcdEv>
 8010dee:	6803      	ldr	r3, [r0, #0]
 8010df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010df2:	4798      	blx	r3
 8010df4:	280b      	cmp	r0, #11
 8010df6:	bf96      	itet	ls
 8010df8:	4b05      	ldrls	r3, [pc, #20]	; (8010e10 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8010dfa:	2400      	movhi	r4, #0
 8010dfc:	5c1c      	ldrbls	r4, [r3, r0]
 8010dfe:	fb08 7005 	mla	r0, r8, r5, r7
 8010e02:	10e4      	asrs	r4, r4, #3
 8010e04:	fb04 6000 	mla	r0, r4, r0, r6
 8010e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e0c:	20027bbe 	.word	0x20027bbe
 8010e10:	0802a99c 	.word	0x0802a99c

08010e14 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8010e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e16:	b08b      	sub	sp, #44	; 0x2c
 8010e18:	461f      	mov	r7, r3
 8010e1a:	4604      	mov	r4, r0
 8010e1c:	4616      	mov	r6, r2
 8010e1e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8010e22:	2500      	movs	r5, #0
 8010e24:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8010e28:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8010e2c:	9504      	str	r5, [sp, #16]
 8010e2e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8010e32:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8010e36:	f8ad 301a 	strh.w	r3, [sp, #26]
 8010e3a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8010e3e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8010e42:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8010e46:	f88d 3020 	strb.w	r3, [sp, #32]
 8010e4a:	f7ff fe9f 	bl	8010b8c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010e4e:	463a      	mov	r2, r7
 8010e50:	4631      	mov	r1, r6
 8010e52:	4603      	mov	r3, r0
 8010e54:	4620      	mov	r0, r4
 8010e56:	f7ff ffc1 	bl	8010ddc <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8010e5a:	4b0e      	ldr	r3, [pc, #56]	; (8010e94 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8010e5c:	9005      	str	r0, [sp, #20]
 8010e5e:	881b      	ldrh	r3, [r3, #0]
 8010e60:	f8ad 301e 	strh.w	r3, [sp, #30]
 8010e64:	f7ff fce6 	bl	8010834 <_ZN8touchgfx3HAL3lcdEv>
 8010e68:	6803      	ldr	r3, [r0, #0]
 8010e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e6c:	4798      	blx	r3
 8010e6e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010e70:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8010e74:	a901      	add	r1, sp, #4
 8010e76:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8010e7a:	9304      	str	r3, [sp, #16]
 8010e7c:	6860      	ldr	r0, [r4, #4]
 8010e7e:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8010e82:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 8010e86:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8010e8a:	6803      	ldr	r3, [r0, #0]
 8010e8c:	685b      	ldr	r3, [r3, #4]
 8010e8e:	4798      	blx	r3
 8010e90:	b00b      	add	sp, #44	; 0x2c
 8010e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e94:	20027bbe 	.word	0x20027bbe

08010e98 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8010e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e9a:	b08d      	sub	sp, #52	; 0x34
 8010e9c:	2501      	movs	r5, #1
 8010e9e:	4604      	mov	r4, r0
 8010ea0:	466b      	mov	r3, sp
 8010ea2:	9503      	str	r5, [sp, #12]
 8010ea4:	e883 0006 	stmia.w	r3, {r1, r2}
 8010ea8:	2300      	movs	r3, #0
 8010eaa:	f8bd 6000 	ldrh.w	r6, [sp]
 8010eae:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8010eb2:	9306      	str	r3, [sp, #24]
 8010eb4:	6803      	ldr	r3, [r0, #0]
 8010eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010eb8:	4798      	blx	r3
 8010eba:	463a      	mov	r2, r7
 8010ebc:	4631      	mov	r1, r6
 8010ebe:	4603      	mov	r3, r0
 8010ec0:	4620      	mov	r0, r4
 8010ec2:	f7ff ff8b 	bl	8010ddc <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8010ec6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010ec8:	9004      	str	r0, [sp, #16]
 8010eca:	9307      	str	r3, [sp, #28]
 8010ecc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8010ed0:	f8ad 3020 	strh.w	r3, [sp, #32]
 8010ed4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8010ed8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8010edc:	4b0e      	ldr	r3, [pc, #56]	; (8010f18 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8010ede:	881b      	ldrh	r3, [r3, #0]
 8010ee0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8010ee4:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8010ee8:	f7ff fca4 	bl	8010834 <_ZN8touchgfx3HAL3lcdEv>
 8010eec:	6803      	ldr	r3, [r0, #0]
 8010eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ef0:	4798      	blx	r3
 8010ef2:	23ff      	movs	r3, #255	; 0xff
 8010ef4:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8010ef8:	a903      	add	r1, sp, #12
 8010efa:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8010efe:	6860      	ldr	r0, [r4, #4]
 8010f00:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8010f04:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8010f08:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8010f0c:	6803      	ldr	r3, [r0, #0]
 8010f0e:	685b      	ldr	r3, [r3, #4]
 8010f10:	4798      	blx	r3
 8010f12:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8010f14:	b00d      	add	sp, #52	; 0x34
 8010f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f18:	20027bbe 	.word	0x20027bbe

08010f1c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8010f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f20:	b08c      	sub	sp, #48	; 0x30
 8010f22:	461e      	mov	r6, r3
 8010f24:	2300      	movs	r3, #0
 8010f26:	4604      	mov	r4, r0
 8010f28:	466d      	mov	r5, sp
 8010f2a:	9306      	str	r3, [sp, #24]
 8010f2c:	6803      	ldr	r3, [r0, #0]
 8010f2e:	e885 0006 	stmia.w	r5, {r1, r2}
 8010f32:	2501      	movs	r5, #1
 8010f34:	f8bd 7000 	ldrh.w	r7, [sp]
 8010f38:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8010f3c:	9503      	str	r5, [sp, #12]
 8010f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f40:	4798      	blx	r3
 8010f42:	4642      	mov	r2, r8
 8010f44:	4639      	mov	r1, r7
 8010f46:	4603      	mov	r3, r0
 8010f48:	4620      	mov	r0, r4
 8010f4a:	f7ff ff47 	bl	8010ddc <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8010f4e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8010f52:	9004      	str	r0, [sp, #16]
 8010f54:	f8ad 3020 	strh.w	r3, [sp, #32]
 8010f58:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8010f5c:	9607      	str	r6, [sp, #28]
 8010f5e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8010f62:	4b10      	ldr	r3, [pc, #64]	; (8010fa4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8010f64:	881b      	ldrh	r3, [r3, #0]
 8010f66:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8010f6a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010f6c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8010f70:	f7ff fc60 	bl	8010834 <_ZN8touchgfx3HAL3lcdEv>
 8010f74:	6803      	ldr	r3, [r0, #0]
 8010f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f78:	4798      	blx	r3
 8010f7a:	23ff      	movs	r3, #255	; 0xff
 8010f7c:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8010f80:	a903      	add	r1, sp, #12
 8010f82:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8010f86:	6860      	ldr	r0, [r4, #4]
 8010f88:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8010f8c:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8010f90:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8010f94:	6803      	ldr	r3, [r0, #0]
 8010f96:	685b      	ldr	r3, [r3, #4]
 8010f98:	4798      	blx	r3
 8010f9a:	4630      	mov	r0, r6
 8010f9c:	b00c      	add	sp, #48	; 0x30
 8010f9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010fa2:	bf00      	nop
 8010fa4:	20027bbe 	.word	0x20027bbe

08010fa8 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8010fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010faa:	b085      	sub	sp, #20
 8010fac:	4605      	mov	r5, r0
 8010fae:	ac02      	add	r4, sp, #8
 8010fb0:	e884 0006 	stmia.w	r4, {r1, r2}
 8010fb4:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8010fb8:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8010fbc:	f7ff fde6 	bl	8010b8c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010fc0:	4631      	mov	r1, r6
 8010fc2:	4603      	mov	r3, r0
 8010fc4:	463a      	mov	r2, r7
 8010fc6:	4628      	mov	r0, r5
 8010fc8:	f7ff ff08 	bl	8010ddc <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8010fcc:	4a05      	ldr	r2, [pc, #20]	; (8010fe4 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8010fce:	682b      	ldr	r3, [r5, #0]
 8010fd0:	8812      	ldrh	r2, [r2, #0]
 8010fd2:	9200      	str	r2, [sp, #0]
 8010fd4:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8010fd6:	4603      	mov	r3, r0
 8010fd8:	4628      	mov	r0, r5
 8010fda:	e894 0006 	ldmia.w	r4, {r1, r2}
 8010fde:	47b0      	blx	r6
 8010fe0:	b005      	add	sp, #20
 8010fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010fe4:	20027bbe 	.word	0x20027bbe

08010fe8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8010fe8:	b570      	push	{r4, r5, r6, lr}
 8010fea:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8010fee:	4604      	mov	r4, r0
 8010ff0:	b19b      	cbz	r3, 801101a <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8010ff2:	2002      	movs	r0, #2
 8010ff4:	f7ef fdcc 	bl	8000b90 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8010ff8:	2300      	movs	r3, #0
 8010ffa:	4620      	mov	r0, r4
 8010ffc:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8011000:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8011004:	6823      	ldr	r3, [r4, #0]
 8011006:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 801100a:	f7ff fdbf 	bl	8010b8c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801100e:	4601      	mov	r1, r0
 8011010:	4620      	mov	r0, r4
 8011012:	462b      	mov	r3, r5
 8011014:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011018:	4718      	bx	r3
 801101a:	bd70      	pop	{r4, r5, r6, pc}

0801101c <_ZN8touchgfx3HAL12setMCUActiveEb>:
 801101c:	b570      	push	{r4, r5, r6, lr}
 801101e:	4605      	mov	r5, r0
 8011020:	460c      	mov	r4, r1
 8011022:	2003      	movs	r0, #3
 8011024:	b149      	cbz	r1, 801103a <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 8011026:	f7ef fd53 	bl	8000ad0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801102a:	6928      	ldr	r0, [r5, #16]
 801102c:	b168      	cbz	r0, 801104a <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 801102e:	6803      	ldr	r3, [r0, #0]
 8011030:	2101      	movs	r1, #1
 8011032:	695b      	ldr	r3, [r3, #20]
 8011034:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011038:	4718      	bx	r3
 801103a:	f7ef fd79 	bl	8000b30 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801103e:	6928      	ldr	r0, [r5, #16]
 8011040:	b118      	cbz	r0, 801104a <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 8011042:	6803      	ldr	r3, [r0, #0]
 8011044:	4621      	mov	r1, r4
 8011046:	695b      	ldr	r3, [r3, #20]
 8011048:	e7f4      	b.n	8011034 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 801104a:	bd70      	pop	{r4, r5, r6, pc}

0801104c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 801104c:	b538      	push	{r3, r4, r5, lr}
 801104e:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 8011052:	4604      	mov	r4, r0
 8011054:	460d      	mov	r5, r1
 8011056:	428b      	cmp	r3, r1
 8011058:	d006      	beq.n	8011068 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 801105a:	6803      	ldr	r3, [r0, #0]
 801105c:	b929      	cbnz	r1, 801106a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 801105e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8011062:	4798      	blx	r3
 8011064:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 8011068:	bd38      	pop	{r3, r4, r5, pc}
 801106a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801106e:	e7f8      	b.n	8011062 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08011070 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8011070:	4b0d      	ldr	r3, [pc, #52]	; (80110a8 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8011072:	b510      	push	{r4, lr}
 8011074:	781b      	ldrb	r3, [r3, #0]
 8011076:	4604      	mov	r4, r0
 8011078:	b95b      	cbnz	r3, 8011092 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801107a:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 801107e:	2b02      	cmp	r3, #2
 8011080:	d007      	beq.n	8011092 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8011082:	6840      	ldr	r0, [r0, #4]
 8011084:	f000 f92a 	bl	80112dc <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8011088:	b118      	cbz	r0, 8011092 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801108a:	6862      	ldr	r2, [r4, #4]
 801108c:	7a53      	ldrb	r3, [r2, #9]
 801108e:	2b00      	cmp	r3, #0
 8011090:	d0fc      	beq.n	801108c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8011092:	f7f0 fd45 	bl	8001b20 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8011096:	4620      	mov	r0, r4
 8011098:	2100      	movs	r1, #0
 801109a:	f7ff ffd7 	bl	801104c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801109e:	4620      	mov	r0, r4
 80110a0:	f7ff fd74 	bl	8010b8c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80110a4:	bd10      	pop	{r4, pc}
 80110a6:	bf00      	nop
 80110a8:	20027bc2 	.word	0x20027bc2

080110ac <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 80110ac:	b570      	push	{r4, r5, r6, lr}
 80110ae:	4604      	mov	r4, r0
 80110b0:	6803      	ldr	r3, [r0, #0]
 80110b2:	b919      	cbnz	r1, 80110bc <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 80110b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80110b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80110ba:	4718      	bx	r3
 80110bc:	2200      	movs	r2, #0
 80110be:	f890 6078 	ldrb.w	r6, [r0, #120]	; 0x78
 80110c2:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
 80110c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80110c8:	4798      	blx	r3
 80110ca:	4605      	mov	r5, r0
 80110cc:	f884 6078 	strb.w	r6, [r4, #120]	; 0x78
 80110d0:	4620      	mov	r0, r4
 80110d2:	2101      	movs	r1, #1
 80110d4:	f7ff ffba 	bl	801104c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80110d8:	4628      	mov	r0, r5
 80110da:	bd70      	pop	{r4, r5, r6, pc}

080110dc <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 80110dc:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 80110e0:	1a13      	subs	r3, r2, r0
 80110e2:	4258      	negs	r0, r3
 80110e4:	4158      	adcs	r0, r3
 80110e6:	4770      	bx	lr

080110e8 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 80110e8:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 80110ec:	1a9b      	subs	r3, r3, r2
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	bfdc      	itt	le
 80110f2:	6882      	ldrle	r2, [r0, #8]
 80110f4:	189b      	addle	r3, r3, r2
 80110f6:	2b01      	cmp	r3, #1
 80110f8:	bfcc      	ite	gt
 80110fa:	2000      	movgt	r0, #0
 80110fc:	2001      	movle	r0, #1
 80110fe:	4770      	bx	lr

08011100 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8011100:	6902      	ldr	r2, [r0, #16]
 8011102:	6843      	ldr	r3, [r0, #4]
 8011104:	2024      	movs	r0, #36	; 0x24
 8011106:	fb00 3002 	mla	r0, r0, r2, r3
 801110a:	4770      	bx	lr

0801110c <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 801110c:	6803      	ldr	r3, [r0, #0]
 801110e:	691b      	ldr	r3, [r3, #16]
 8011110:	4718      	bx	r3

08011112 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8011112:	2301      	movs	r3, #1
 8011114:	b570      	push	{r4, r5, r6, lr}
 8011116:	7203      	strb	r3, [r0, #8]
 8011118:	4604      	mov	r4, r0
 801111a:	6840      	ldr	r0, [r0, #4]
 801111c:	6803      	ldr	r3, [r0, #0]
 801111e:	699b      	ldr	r3, [r3, #24]
 8011120:	4798      	blx	r3
 8011122:	6803      	ldr	r3, [r0, #0]
 8011124:	4605      	mov	r5, r0
 8011126:	2b40      	cmp	r3, #64	; 0x40
 8011128:	d00c      	beq.n	8011144 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801112a:	d810      	bhi.n	801114e <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 801112c:	2b04      	cmp	r3, #4
 801112e:	d01d      	beq.n	801116c <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8011130:	d804      	bhi.n	801113c <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8011132:	2b01      	cmp	r3, #1
 8011134:	d006      	beq.n	8011144 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8011136:	2b02      	cmp	r3, #2
 8011138:	d02c      	beq.n	8011194 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 801113a:	bd70      	pop	{r4, r5, r6, pc}
 801113c:	2b08      	cmp	r3, #8
 801113e:	d01d      	beq.n	801117c <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8011140:	2b20      	cmp	r3, #32
 8011142:	d1fa      	bne.n	801113a <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8011144:	6823      	ldr	r3, [r4, #0]
 8011146:	4620      	mov	r0, r4
 8011148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801114a:	4798      	blx	r3
 801114c:	e013      	b.n	8011176 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 801114e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011152:	d0f7      	beq.n	8011144 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8011154:	d804      	bhi.n	8011160 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8011156:	2b80      	cmp	r3, #128	; 0x80
 8011158:	d0f4      	beq.n	8011144 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801115a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801115e:	e7f0      	b.n	8011142 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8011160:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011164:	d0ee      	beq.n	8011144 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8011166:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801116a:	e7e5      	b.n	8011138 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 801116c:	6823      	ldr	r3, [r4, #0]
 801116e:	7f01      	ldrb	r1, [r0, #28]
 8011170:	4620      	mov	r0, r4
 8011172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011174:	4798      	blx	r3
 8011176:	6823      	ldr	r3, [r4, #0]
 8011178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801117a:	e006      	b.n	801118a <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801117c:	6823      	ldr	r3, [r4, #0]
 801117e:	7f01      	ldrb	r1, [r0, #28]
 8011180:	4620      	mov	r0, r4
 8011182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011184:	4798      	blx	r3
 8011186:	6823      	ldr	r3, [r4, #0]
 8011188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801118a:	4629      	mov	r1, r5
 801118c:	4620      	mov	r0, r4
 801118e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011192:	4718      	bx	r3
 8011194:	6823      	ldr	r3, [r4, #0]
 8011196:	4620      	mov	r0, r4
 8011198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801119a:	4798      	blx	r3
 801119c:	e7f3      	b.n	8011186 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

0801119e <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 801119e:	4770      	bx	lr

080111a0 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 80111a0:	4770      	bx	lr

080111a2 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 80111a2:	4770      	bx	lr

080111a4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 80111a4:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 80111a8:	b510      	push	{r4, lr}
 80111aa:	1ad2      	subs	r2, r2, r3
 80111ac:	2a00      	cmp	r2, #0
 80111ae:	bfdc      	itt	le
 80111b0:	6884      	ldrle	r4, [r0, #8]
 80111b2:	1912      	addle	r2, r2, r4
 80111b4:	2a01      	cmp	r2, #1
 80111b6:	dd16      	ble.n	80111e6 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 80111b8:	6842      	ldr	r2, [r0, #4]
 80111ba:	2424      	movs	r4, #36	; 0x24
 80111bc:	fb04 2303 	mla	r3, r4, r3, r2
 80111c0:	f101 0220 	add.w	r2, r1, #32
 80111c4:	f851 4b04 	ldr.w	r4, [r1], #4
 80111c8:	4291      	cmp	r1, r2
 80111ca:	f843 4b04 	str.w	r4, [r3], #4
 80111ce:	d1f9      	bne.n	80111c4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 80111d0:	780a      	ldrb	r2, [r1, #0]
 80111d2:	701a      	strb	r2, [r3, #0]
 80111d4:	68c3      	ldr	r3, [r0, #12]
 80111d6:	6882      	ldr	r2, [r0, #8]
 80111d8:	f3bf 8f5b 	dmb	ish
 80111dc:	3301      	adds	r3, #1
 80111de:	429a      	cmp	r2, r3
 80111e0:	bfd8      	it	le
 80111e2:	1a9b      	suble	r3, r3, r2
 80111e4:	60c3      	str	r3, [r0, #12]
 80111e6:	bd10      	pop	{r4, pc}

080111e8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 80111e8:	6903      	ldr	r3, [r0, #16]
 80111ea:	6882      	ldr	r2, [r0, #8]
 80111ec:	f3bf 8f5b 	dmb	ish
 80111f0:	3301      	adds	r3, #1
 80111f2:	429a      	cmp	r2, r3
 80111f4:	bfd8      	it	le
 80111f6:	1a9b      	suble	r3, r3, r2
 80111f8:	6103      	str	r3, [r0, #16]
 80111fa:	4770      	bx	lr

080111fc <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 80111fc:	b570      	push	{r4, r5, r6, lr}
 80111fe:	4604      	mov	r4, r0
 8011200:	460e      	mov	r6, r1
 8011202:	6860      	ldr	r0, [r4, #4]
 8011204:	6803      	ldr	r3, [r0, #0]
 8011206:	685b      	ldr	r3, [r3, #4]
 8011208:	4798      	blx	r3
 801120a:	2800      	cmp	r0, #0
 801120c:	d1f9      	bne.n	8011202 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801120e:	4d0d      	ldr	r5, [pc, #52]	; (8011244 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8011210:	6828      	ldr	r0, [r5, #0]
 8011212:	6803      	ldr	r3, [r0, #0]
 8011214:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011216:	4798      	blx	r3
 8011218:	f7f0 fc90 	bl	8001b3c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 801121c:	6828      	ldr	r0, [r5, #0]
 801121e:	2101      	movs	r1, #1
 8011220:	f7ff ff14 	bl	801104c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8011224:	6860      	ldr	r0, [r4, #4]
 8011226:	4631      	mov	r1, r6
 8011228:	6803      	ldr	r3, [r0, #0]
 801122a:	689b      	ldr	r3, [r3, #8]
 801122c:	4798      	blx	r3
 801122e:	6823      	ldr	r3, [r4, #0]
 8011230:	4620      	mov	r0, r4
 8011232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011234:	4798      	blx	r3
 8011236:	6828      	ldr	r0, [r5, #0]
 8011238:	6803      	ldr	r3, [r0, #0]
 801123a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801123e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011240:	4718      	bx	r3
 8011242:	bf00      	nop
 8011244:	20027bc4 	.word	0x20027bc4

08011248 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8011248:	b508      	push	{r3, lr}
 801124a:	f7f0 fc69 	bl	8001b20 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801124e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011252:	f7f0 bc6d 	b.w	8001b30 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08011256 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8011256:	b510      	push	{r4, lr}
 8011258:	4604      	mov	r4, r0
 801125a:	2114      	movs	r1, #20
 801125c:	f014 fca9 	bl	8025bb2 <_ZdlPvj>
 8011260:	4620      	mov	r0, r4
 8011262:	bd10      	pop	{r4, pc}

08011264 <_ZN8touchgfx13DMA_Interface5startEv>:
 8011264:	b510      	push	{r4, lr}
 8011266:	4604      	mov	r4, r0
 8011268:	6840      	ldr	r0, [r0, #4]
 801126a:	6803      	ldr	r3, [r0, #0]
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	4798      	blx	r3
 8011270:	b948      	cbnz	r0, 8011286 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8011272:	7a63      	ldrb	r3, [r4, #9]
 8011274:	b13b      	cbz	r3, 8011286 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8011276:	7a23      	ldrb	r3, [r4, #8]
 8011278:	b92b      	cbnz	r3, 8011286 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801127a:	6823      	ldr	r3, [r4, #0]
 801127c:	4620      	mov	r0, r4
 801127e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011284:	4718      	bx	r3
 8011286:	bd10      	pop	{r4, pc}

08011288 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8011288:	b570      	push	{r4, r5, r6, lr}
 801128a:	4604      	mov	r4, r0
 801128c:	6840      	ldr	r0, [r0, #4]
 801128e:	6803      	ldr	r3, [r0, #0]
 8011290:	681b      	ldr	r3, [r3, #0]
 8011292:	4798      	blx	r3
 8011294:	4605      	mov	r5, r0
 8011296:	b930      	cbnz	r0, 80112a6 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8011298:	7a23      	ldrb	r3, [r4, #8]
 801129a:	b123      	cbz	r3, 80112a6 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801129c:	6860      	ldr	r0, [r4, #4]
 801129e:	6803      	ldr	r3, [r0, #0]
 80112a0:	695b      	ldr	r3, [r3, #20]
 80112a2:	4798      	blx	r3
 80112a4:	7225      	strb	r5, [r4, #8]
 80112a6:	6860      	ldr	r0, [r4, #4]
 80112a8:	6803      	ldr	r3, [r0, #0]
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	4798      	blx	r3
 80112ae:	b928      	cbnz	r0, 80112bc <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 80112b0:	6823      	ldr	r3, [r4, #0]
 80112b2:	4620      	mov	r0, r4
 80112b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80112ba:	4718      	bx	r3
 80112bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80112c0:	f7f0 bc44 	b.w	8001b4c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

080112c4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 80112c4:	b510      	push	{r4, lr}
 80112c6:	6082      	str	r2, [r0, #8]
 80112c8:	2200      	movs	r2, #0
 80112ca:	4c03      	ldr	r4, [pc, #12]	; (80112d8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 80112cc:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80112d0:	e9c0 4100 	strd	r4, r1, [r0]
 80112d4:	bd10      	pop	{r4, pc}
 80112d6:	bf00      	nop
 80112d8:	0802a9b0 	.word	0x0802a9b0

080112dc <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 80112dc:	6840      	ldr	r0, [r0, #4]
 80112de:	6803      	ldr	r3, [r0, #0]
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	4718      	bx	r3

080112e4 <_ZNK8touchgfx19PainterRGB565Bitmap18getRenderingMethodEv>:
 80112e4:	b508      	push	{r3, lr}
 80112e6:	4b05      	ldr	r3, [pc, #20]	; (80112fc <_ZNK8touchgfx19PainterRGB565Bitmap18getRenderingMethodEv+0x18>)
 80112e8:	6818      	ldr	r0, [r3, #0]
 80112ea:	6803      	ldr	r3, [r0, #0]
 80112ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80112f0:	4798      	blx	r3
 80112f2:	1e43      	subs	r3, r0, #1
 80112f4:	4258      	negs	r0, r3
 80112f6:	4158      	adcs	r0, r3
 80112f8:	bd08      	pop	{r3, pc}
 80112fa:	bf00      	nop
 80112fc:	20027bc4 	.word	0x20027bc4

08011300 <_ZN8touchgfx19PainterRGB565BitmapD1Ev>:
 8011300:	4770      	bx	lr

08011302 <_ZThn8_N8touchgfx19PainterRGB565BitmapD1Ev>:
 8011302:	3808      	subs	r0, #8
 8011304:	4770      	bx	lr
	...

08011308 <_ZNK8touchgfx19PainterRGB565Bitmap5setupERKNS_4RectE>:
 8011308:	b538      	push	{r3, r4, r5, lr}
 801130a:	4b10      	ldr	r3, [pc, #64]	; (801134c <_ZNK8touchgfx19PainterRGB565Bitmap5setupERKNS_4RectE+0x44>)
 801130c:	4604      	mov	r4, r0
 801130e:	f9b1 5004 	ldrsh.w	r5, [r1, #4]
 8011312:	781b      	ldrb	r3, [r3, #0]
 8011314:	8085      	strh	r5, [r0, #4]
 8011316:	b96b      	cbnz	r3, 8011334 <_ZNK8touchgfx19PainterRGB565Bitmap5setupERKNS_4RectE+0x2c>
 8011318:	f9b0 201c 	ldrsh.w	r2, [r0, #28]
 801131c:	8462      	strh	r2, [r4, #34]	; 0x22
 801131e:	b963      	cbnz	r3, 801133a <_ZNK8touchgfx19PainterRGB565Bitmap5setupERKNS_4RectE+0x32>
 8011320:	f9b4 001e 	ldrsh.w	r0, [r4, #30]
 8011324:	84a0      	strh	r0, [r4, #36]	; 0x24
 8011326:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801132a:	89a0      	ldrh	r0, [r4, #12]
 801132c:	1ac0      	subs	r0, r0, r3
 801132e:	bf18      	it	ne
 8011330:	2001      	movne	r0, #1
 8011332:	bd38      	pop	{r3, r4, r5, pc}
 8011334:	f9b0 201e 	ldrsh.w	r2, [r0, #30]
 8011338:	e7f0      	b.n	801131c <_ZNK8touchgfx19PainterRGB565Bitmap5setupERKNS_4RectE+0x14>
 801133a:	f104 000c 	add.w	r0, r4, #12
 801133e:	f008 fa69 	bl	8019814 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8011342:	1b40      	subs	r0, r0, r5
 8011344:	8ba5      	ldrh	r5, [r4, #28]
 8011346:	1b40      	subs	r0, r0, r5
 8011348:	b200      	sxth	r0, r0
 801134a:	e7eb      	b.n	8011324 <_ZNK8touchgfx19PainterRGB565Bitmap5setupERKNS_4RectE+0x1c>
 801134c:	20027bbc 	.word	0x20027bbc

08011350 <_ZNK8touchgfx19PainterRGB565Bitmap8tearDownEv>:
 8011350:	f7f0 bdae 	b.w	8001eb0 <_ZN8touchgfx5paint8tearDownEv>

08011354 <_ZN8touchgfx19PainterRGB565BitmapD0Ev>:
 8011354:	b510      	push	{r4, lr}
 8011356:	4604      	mov	r4, r0
 8011358:	212c      	movs	r1, #44	; 0x2c
 801135a:	f014 fc2a 	bl	8025bb2 <_ZdlPvj>
 801135e:	4620      	mov	r0, r4
 8011360:	bd10      	pop	{r4, pc}

08011362 <_ZThn8_N8touchgfx19PainterRGB565BitmapD0Ev>:
 8011362:	f1a0 0008 	sub.w	r0, r0, #8
 8011366:	e7f5      	b.n	8011354 <_ZN8touchgfx19PainterRGB565BitmapD0Ev>

08011368 <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh>:
 8011368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801136c:	4606      	mov	r6, r0
 801136e:	b085      	sub	sp, #20
 8011370:	8c77      	ldrh	r7, [r6, #34]	; 0x22
 8011372:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 8011376:	441f      	add	r7, r3
 8011378:	8cb5      	ldrh	r5, [r6, #36]	; 0x24
 801137a:	9001      	str	r0, [sp, #4]
 801137c:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8011380:	b2bf      	uxth	r7, r7
 8011382:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 8011386:	4428      	add	r0, r5
 8011388:	f896 5020 	ldrb.w	r5, [r6, #32]
 801138c:	b23b      	sxth	r3, r7
 801138e:	b200      	sxth	r0, r0
 8011390:	b1a5      	cbz	r5, 80113bc <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0x54>
 8011392:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
 8011396:	fb93 f5f7 	sdiv	r5, r3, r7
 801139a:	fb07 3315 	mls	r3, r7, r5, r3
 801139e:	f9b6 5016 	ldrsh.w	r5, [r6, #22]
 80113a2:	fb90 fcf5 	sdiv	ip, r0, r5
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	fb05 001c 	mls	r0, r5, ip, r0
 80113ac:	bfb8      	it	lt
 80113ae:	19db      	addlt	r3, r3, r7
 80113b0:	2800      	cmp	r0, #0
 80113b2:	b21b      	sxth	r3, r3
 80113b4:	da00      	bge.n	80113b8 <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0x50>
 80113b6:	4428      	add	r0, r5
 80113b8:	b200      	sxth	r0, r0
 80113ba:	e018      	b.n	80113ee <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0x86>
 80113bc:	2b00      	cmp	r3, #0
 80113be:	da07      	bge.n	80113d0 <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0x68>
 80113c0:	4423      	add	r3, r4
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	dd61      	ble.n	801148a <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0x122>
 80113c6:	443c      	add	r4, r7
 80113c8:	1bd7      	subs	r7, r2, r7
 80113ca:	462b      	mov	r3, r5
 80113cc:	b224      	sxth	r4, r4
 80113ce:	b23a      	sxth	r2, r7
 80113d0:	f9b6 5014 	ldrsh.w	r5, [r6, #20]
 80113d4:	429d      	cmp	r5, r3
 80113d6:	dd58      	ble.n	801148a <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0x122>
 80113d8:	2800      	cmp	r0, #0
 80113da:	db56      	blt.n	801148a <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0x122>
 80113dc:	f9b6 7016 	ldrsh.w	r7, [r6, #22]
 80113e0:	4287      	cmp	r7, r0
 80113e2:	dd52      	ble.n	801148a <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0x122>
 80113e4:	191f      	adds	r7, r3, r4
 80113e6:	42af      	cmp	r7, r5
 80113e8:	dd01      	ble.n	80113ee <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0x86>
 80113ea:	1aec      	subs	r4, r5, r3
 80113ec:	b224      	sxth	r4, r4
 80113ee:	eb01 0542 	add.w	r5, r1, r2, lsl #1
 80113f2:	f9b6 1014 	ldrsh.w	r1, [r6, #20]
 80113f6:	69b7      	ldr	r7, [r6, #24]
 80113f8:	1aca      	subs	r2, r1, r3
 80113fa:	4348      	muls	r0, r1
 80113fc:	7bb1      	ldrb	r1, [r6, #14]
 80113fe:	eb05 0944 	add.w	r9, r5, r4, lsl #1
 8011402:	b212      	sxth	r2, r2
 8011404:	b1a9      	cbz	r1, 8011432 <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0xca>
 8011406:	eb07 0780 	add.w	r7, r7, r0, lsl #2
 801140a:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 801140e:	42a2      	cmp	r2, r4
 8011410:	4628      	mov	r0, r5
 8011412:	9b01      	ldr	r3, [sp, #4]
 8011414:	bfa8      	it	ge
 8011416:	4622      	movge	r2, r4
 8011418:	4690      	mov	r8, r2
 801141a:	1aa4      	subs	r4, r4, r2
 801141c:	f7f0 fda2 	bl	8001f64 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh>
 8011420:	4639      	mov	r1, r7
 8011422:	eb05 0548 	add.w	r5, r5, r8, lsl #1
 8011426:	f9b6 2014 	ldrsh.w	r2, [r6, #20]
 801142a:	b224      	sxth	r4, r4
 801142c:	45a9      	cmp	r9, r5
 801142e:	d8ee      	bhi.n	801140e <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0xa6>
 8011430:	e02b      	b.n	801148a <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0x122>
 8011432:	eb07 0140 	add.w	r1, r7, r0, lsl #1
 8011436:	6ab7      	ldr	r7, [r6, #40]	; 0x28
 8011438:	9100      	str	r1, [sp, #0]
 801143a:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 801143e:	2f00      	cmp	r7, #0
 8011440:	d062      	beq.n	8011508 <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0x1a0>
 8011442:	1838      	adds	r0, r7, r0
 8011444:	f04f 0aff 	mov.w	sl, #255	; 0xff
 8011448:	4403      	add	r3, r0
 801144a:	9002      	str	r0, [sp, #8]
 801144c:	42a2      	cmp	r2, r4
 801144e:	bfa8      	it	ge
 8011450:	4622      	movge	r2, r4
 8011452:	1aa4      	subs	r4, r4, r2
 8011454:	eb05 0042 	add.w	r0, r5, r2, lsl #1
 8011458:	b224      	sxth	r4, r4
 801145a:	9003      	str	r0, [sp, #12]
 801145c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011460:	9801      	ldr	r0, [sp, #4]
 8011462:	4342      	muls	r2, r0
 8011464:	1c57      	adds	r7, r2, #1
 8011466:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801146a:	123f      	asrs	r7, r7, #8
 801146c:	2fff      	cmp	r7, #255	; 0xff
 801146e:	d10f      	bne.n	8011490 <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0x128>
 8011470:	880a      	ldrh	r2, [r1, #0]
 8011472:	802a      	strh	r2, [r5, #0]
 8011474:	3502      	adds	r5, #2
 8011476:	9a03      	ldr	r2, [sp, #12]
 8011478:	3102      	adds	r1, #2
 801147a:	42aa      	cmp	r2, r5
 801147c:	d8ee      	bhi.n	801145c <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0xf4>
 801147e:	45a9      	cmp	r9, r5
 8011480:	9900      	ldr	r1, [sp, #0]
 8011482:	9b02      	ldr	r3, [sp, #8]
 8011484:	f9b6 2014 	ldrsh.w	r2, [r6, #20]
 8011488:	d8e0      	bhi.n	801144c <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0xe4>
 801148a:	b005      	add	sp, #20
 801148c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011490:	fa5f fc87 	uxtb.w	ip, r7
 8011494:	2f00      	cmp	r7, #0
 8011496:	d0ed      	beq.n	8011474 <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0x10c>
 8011498:	f8b5 8000 	ldrh.w	r8, [r5]
 801149c:	ea6f 0c0c 	mvn.w	ip, ip
 80114a0:	8808      	ldrh	r0, [r1, #0]
 80114a2:	f428 62ff 	bic.w	r2, r8, #2040	; 0x7f8
 80114a6:	fa5f fc8c 	uxtb.w	ip, ip
 80114aa:	f420 6eff 	bic.w	lr, r0, #2040	; 0x7f8
 80114ae:	f408 6bfc 	and.w	fp, r8, #2016	; 0x7e0
 80114b2:	f022 0207 	bic.w	r2, r2, #7
 80114b6:	f008 081f 	and.w	r8, r8, #31
 80114ba:	f02e 0e07 	bic.w	lr, lr, #7
 80114be:	fb0c fb0b 	mul.w	fp, ip, fp
 80114c2:	fb0c f202 	mul.w	r2, ip, r2
 80114c6:	fb0c f808 	mul.w	r8, ip, r8
 80114ca:	fb07 2e0e 	mla	lr, r7, lr, r2
 80114ce:	f400 62fc 	and.w	r2, r0, #2016	; 0x7e0
 80114d2:	f000 001f 	and.w	r0, r0, #31
 80114d6:	fb07 b202 	mla	r2, r7, r2, fp
 80114da:	fb07 8000 	mla	r0, r7, r0, r8
 80114de:	fb9e fefa 	sdiv	lr, lr, sl
 80114e2:	fb92 f2fa 	sdiv	r2, r2, sl
 80114e6:	f42e 6eff 	bic.w	lr, lr, #2040	; 0x7f8
 80114ea:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80114ee:	f02e 0e07 	bic.w	lr, lr, #7
 80114f2:	ea4e 0e02 	orr.w	lr, lr, r2
 80114f6:	fb90 f2fa 	sdiv	r2, r0, sl
 80114fa:	f002 021f 	and.w	r2, r2, #31
 80114fe:	ea4e 0e02 	orr.w	lr, lr, r2
 8011502:	f8a5 e000 	strh.w	lr, [r5]
 8011506:	e7b5      	b.n	8011474 <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0x10c>
 8011508:	42a2      	cmp	r2, r4
 801150a:	4628      	mov	r0, r5
 801150c:	9b01      	ldr	r3, [sp, #4]
 801150e:	bfa8      	it	ge
 8011510:	4622      	movge	r2, r4
 8011512:	4617      	mov	r7, r2
 8011514:	1aa4      	subs	r4, r4, r2
 8011516:	f7f0 fcff 	bl	8001f18 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh>
 801151a:	9900      	ldr	r1, [sp, #0]
 801151c:	eb05 0547 	add.w	r5, r5, r7, lsl #1
 8011520:	f9b6 2014 	ldrsh.w	r2, [r6, #20]
 8011524:	b224      	sxth	r4, r4
 8011526:	45a9      	cmp	r9, r5
 8011528:	d8ee      	bhi.n	8011508 <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0x1a0>
 801152a:	e7ae      	b.n	801148a <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0x122>

0801152c <_ZN8touchgfx19PainterRGB565Bitmap9setBitmapERKNS_6BitmapE>:
 801152c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801152e:	880b      	ldrh	r3, [r1, #0]
 8011530:	f100 050c 	add.w	r5, r0, #12
 8011534:	4604      	mov	r4, r0
 8011536:	8183      	strh	r3, [r0, #12]
 8011538:	4628      	mov	r0, r5
 801153a:	f008 fadb 	bl	8019af4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801153e:	73a0      	strb	r0, [r4, #14]
 8011540:	4628      	mov	r0, r5
 8011542:	f008 f967 	bl	8019814 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8011546:	4607      	mov	r7, r0
 8011548:	4628      	mov	r0, r5
 801154a:	f008 f997 	bl	801987c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801154e:	2300      	movs	r3, #0
 8011550:	82e0      	strh	r0, [r4, #22]
 8011552:	f104 0010 	add.w	r0, r4, #16
 8011556:	6123      	str	r3, [r4, #16]
 8011558:	82a7      	strh	r7, [r4, #20]
 801155a:	f004 fcb5 	bl	8015ec8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801155e:	4628      	mov	r0, r5
 8011560:	f008 fa44 	bl	80199ec <_ZNK8touchgfx6Bitmap7getDataEv>
 8011564:	61a0      	str	r0, [r4, #24]
 8011566:	4628      	mov	r0, r5
 8011568:	f008 fa70 	bl	8019a4c <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801156c:	62a0      	str	r0, [r4, #40]	; 0x28
 801156e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011570 <_ZThn8_N8touchgfx19PainterRGB565Bitmap9setBitmapERKNS_6BitmapE>:
 8011570:	f1a0 0008 	sub.w	r0, r0, #8
 8011574:	f7ff bfda 	b.w	801152c <_ZN8touchgfx19PainterRGB565Bitmap9setBitmapERKNS_6BitmapE>

08011578 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>:
 8011578:	094a      	lsrs	r2, r1, #5
 801157a:	4b06      	ldr	r3, [pc, #24]	; (8011594 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE+0x1c>)
 801157c:	60c1      	str	r1, [r0, #12]
 801157e:	ea03 2311 	and.w	r3, r3, r1, lsr #8
 8011582:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8011586:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 801158a:	4313      	orrs	r3, r2
 801158c:	4319      	orrs	r1, r3
 801158e:	8201      	strh	r1, [r0, #16]
 8011590:	4770      	bx	lr
 8011592:	bf00      	nop
 8011594:	fffff800 	.word	0xfffff800

08011598 <_ZThn8_N8touchgfx13PainterRGB5658setColorENS_9colortypeE>:
 8011598:	f1a0 0008 	sub.w	r0, r0, #8
 801159c:	e7ec      	b.n	8011578 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>
 801159e:	bf00      	nop

080115a0 <_ZNK8touchgfx13PainterRGB56518getRenderingMethodEv>:
 80115a0:	b508      	push	{r3, lr}
 80115a2:	4b05      	ldr	r3, [pc, #20]	; (80115b8 <_ZNK8touchgfx13PainterRGB56518getRenderingMethodEv+0x18>)
 80115a4:	6818      	ldr	r0, [r3, #0]
 80115a6:	6803      	ldr	r3, [r0, #0]
 80115a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80115ac:	4798      	blx	r3
 80115ae:	1e43      	subs	r3, r0, #1
 80115b0:	4258      	negs	r0, r3
 80115b2:	4158      	adcs	r0, r3
 80115b4:	bd08      	pop	{r3, pc}
 80115b6:	bf00      	nop
 80115b8:	20027bc4 	.word	0x20027bc4

080115bc <_ZN8touchgfx13PainterRGB565D1Ev>:
 80115bc:	4770      	bx	lr

080115be <_ZThn8_N8touchgfx13PainterRGB565D1Ev>:
 80115be:	3808      	subs	r0, #8
 80115c0:	4770      	bx	lr

080115c2 <_ZNK8touchgfx13PainterRGB5655paintEPhssssh>:
 80115c2:	b430      	push	{r4, r5}
 80115c4:	eb01 0442 	add.w	r4, r1, r2, lsl #1
 80115c8:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 80115cc:	8a02      	ldrh	r2, [r0, #16]
 80115ce:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80115d2:	4629      	mov	r1, r5
 80115d4:	9202      	str	r2, [sp, #8]
 80115d6:	68c2      	ldr	r2, [r0, #12]
 80115d8:	4620      	mov	r0, r4
 80115da:	bc30      	pop	{r4, r5}
 80115dc:	f7f0 bc72 	b.w	8001ec4 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm>

080115e0 <_ZNK8touchgfx13PainterRGB5658tearDownEv>:
 80115e0:	f7f0 bc66 	b.w	8001eb0 <_ZN8touchgfx5paint8tearDownEv>

080115e4 <_ZN8touchgfx13PainterRGB565D0Ev>:
 80115e4:	b510      	push	{r4, lr}
 80115e6:	4604      	mov	r4, r0
 80115e8:	2114      	movs	r1, #20
 80115ea:	f014 fae2 	bl	8025bb2 <_ZdlPvj>
 80115ee:	4620      	mov	r0, r4
 80115f0:	bd10      	pop	{r4, pc}

080115f2 <_ZThn8_N8touchgfx13PainterRGB565D0Ev>:
 80115f2:	f1a0 0008 	sub.w	r0, r0, #8
 80115f6:	e7f5      	b.n	80115e4 <_ZN8touchgfx13PainterRGB565D0Ev>

080115f8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 80115f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80115fa:	6803      	ldr	r3, [r0, #0]
 80115fc:	460d      	mov	r5, r1
 80115fe:	4604      	mov	r4, r0
 8011600:	4601      	mov	r1, r0
 8011602:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011604:	a802      	add	r0, sp, #8
 8011606:	4798      	blx	r3
 8011608:	6828      	ldr	r0, [r5, #0]
 801160a:	6869      	ldr	r1, [r5, #4]
 801160c:	466b      	mov	r3, sp
 801160e:	c303      	stmia	r3!, {r0, r1}
 8011610:	4668      	mov	r0, sp
 8011612:	4619      	mov	r1, r3
 8011614:	f7fe fe3e 	bl	8010294 <_ZN8touchgfx4RectaNERKS0_>
 8011618:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801161a:	b1a8      	cbz	r0, 8011648 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 801161c:	6803      	ldr	r3, [r0, #0]
 801161e:	1d21      	adds	r1, r4, #4
 8011620:	68db      	ldr	r3, [r3, #12]
 8011622:	4798      	blx	r3
 8011624:	b180      	cbz	r0, 8011648 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 8011626:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801162a:	2b00      	cmp	r3, #0
 801162c:	dd0c      	ble.n	8011648 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 801162e:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 8011632:	2d00      	cmp	r5, #0
 8011634:	dd08      	ble.n	8011648 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 8011636:	4a2d      	ldr	r2, [pc, #180]	; (80116ec <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xf4>)
 8011638:	7812      	ldrb	r2, [r2, #0]
 801163a:	b13a      	cbz	r2, 801164c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x54>
 801163c:	2a01      	cmp	r2, #1
 801163e:	d02d      	beq.n	801169c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa4>
 8011640:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8011642:	6803      	ldr	r3, [r0, #0]
 8011644:	691b      	ldr	r3, [r3, #16]
 8011646:	4798      	blx	r3
 8011648:	b004      	add	sp, #16
 801164a:	bd70      	pop	{r4, r5, r6, pc}
 801164c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8011650:	441d      	add	r5, r3
 8011652:	b2ad      	uxth	r5, r5
 8011654:	b22e      	sxth	r6, r5
 8011656:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 801165a:	42b3      	cmp	r3, r6
 801165c:	daf0      	bge.n	8011640 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801165e:	6823      	ldr	r3, [r4, #0]
 8011660:	4669      	mov	r1, sp
 8011662:	4620      	mov	r0, r4
 8011664:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011666:	4798      	blx	r3
 8011668:	b940      	cbnz	r0, 801167c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x84>
 801166a:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801166e:	2b01      	cmp	r3, #1
 8011670:	d004      	beq.n	801167c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x84>
 8011672:	3301      	adds	r3, #1
 8011674:	105b      	asrs	r3, r3, #1
 8011676:	f8ad 3006 	strh.w	r3, [sp, #6]
 801167a:	e7f0      	b.n	801165e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x66>
 801167c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8011680:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8011684:	4413      	add	r3, r2
 8011686:	b29b      	uxth	r3, r3
 8011688:	441a      	add	r2, r3
 801168a:	f8ad 3002 	strh.w	r3, [sp, #2]
 801168e:	b212      	sxth	r2, r2
 8011690:	4296      	cmp	r6, r2
 8011692:	dae0      	bge.n	8011656 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8011694:	1aeb      	subs	r3, r5, r3
 8011696:	f8ad 3006 	strh.w	r3, [sp, #6]
 801169a:	e7dc      	b.n	8011656 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 801169c:	f8bd 5000 	ldrh.w	r5, [sp]
 80116a0:	441d      	add	r5, r3
 80116a2:	b2ad      	uxth	r5, r5
 80116a4:	b22e      	sxth	r6, r5
 80116a6:	f9bd 3000 	ldrsh.w	r3, [sp]
 80116aa:	42b3      	cmp	r3, r6
 80116ac:	dac8      	bge.n	8011640 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80116ae:	6823      	ldr	r3, [r4, #0]
 80116b0:	4669      	mov	r1, sp
 80116b2:	4620      	mov	r0, r4
 80116b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80116b6:	4798      	blx	r3
 80116b8:	b940      	cbnz	r0, 80116cc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd4>
 80116ba:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80116be:	2b01      	cmp	r3, #1
 80116c0:	d004      	beq.n	80116cc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd4>
 80116c2:	3301      	adds	r3, #1
 80116c4:	105b      	asrs	r3, r3, #1
 80116c6:	f8ad 3004 	strh.w	r3, [sp, #4]
 80116ca:	e7f0      	b.n	80116ae <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb6>
 80116cc:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80116d0:	f8bd 3000 	ldrh.w	r3, [sp]
 80116d4:	4413      	add	r3, r2
 80116d6:	b29b      	uxth	r3, r3
 80116d8:	441a      	add	r2, r3
 80116da:	f8ad 3000 	strh.w	r3, [sp]
 80116de:	b212      	sxth	r2, r2
 80116e0:	4296      	cmp	r6, r2
 80116e2:	dae0      	bge.n	80116a6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 80116e4:	1aeb      	subs	r3, r5, r3
 80116e6:	f8ad 3004 	strh.w	r3, [sp, #4]
 80116ea:	e7dc      	b.n	80116a6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 80116ec:	20027bbc 	.word	0x20027bbc

080116f0 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 80116f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80116f2:	6803      	ldr	r3, [r0, #0]
 80116f4:	4604      	mov	r4, r0
 80116f6:	4601      	mov	r1, r0
 80116f8:	4668      	mov	r0, sp
 80116fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80116fc:	4798      	blx	r3
 80116fe:	2100      	movs	r1, #0
 8011700:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8011704:	4668      	mov	r0, sp
 8011706:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801170a:	9102      	str	r1, [sp, #8]
 801170c:	a902      	add	r1, sp, #8
 801170e:	f8ad 200c 	strh.w	r2, [sp, #12]
 8011712:	f8ad 300e 	strh.w	r3, [sp, #14]
 8011716:	f7fe fdbd 	bl	8010294 <_ZN8touchgfx4RectaNERKS0_>
 801171a:	6823      	ldr	r3, [r4, #0]
 801171c:	4669      	mov	r1, sp
 801171e:	4620      	mov	r0, r4
 8011720:	691b      	ldr	r3, [r3, #16]
 8011722:	4798      	blx	r3
 8011724:	b004      	add	sp, #16
 8011726:	bd10      	pop	{r4, pc}

08011728 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8011728:	2101      	movs	r1, #1
 801172a:	2200      	movs	r2, #0
 801172c:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8011730:	490a      	ldr	r1, [pc, #40]	; (801175c <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 8011732:	8082      	strh	r2, [r0, #4]
 8011734:	6001      	str	r1, [r0, #0]
 8011736:	21ff      	movs	r1, #255	; 0xff
 8011738:	80c2      	strh	r2, [r0, #6]
 801173a:	8102      	strh	r2, [r0, #8]
 801173c:	8142      	strh	r2, [r0, #10]
 801173e:	8182      	strh	r2, [r0, #12]
 8011740:	81c2      	strh	r2, [r0, #14]
 8011742:	8202      	strh	r2, [r0, #16]
 8011744:	8242      	strh	r2, [r0, #18]
 8011746:	61c2      	str	r2, [r0, #28]
 8011748:	8402      	strh	r2, [r0, #32]
 801174a:	8442      	strh	r2, [r0, #34]	; 0x22
 801174c:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8011750:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
 8011754:	6282      	str	r2, [r0, #40]	; 0x28
 8011756:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801175a:	4770      	bx	lr
 801175c:	0802aa4c 	.word	0x0802aa4c

08011760 <_ZNK8touchgfx4Line14getMinimalRectEv>:
 8011760:	f101 0364 	add.w	r3, r1, #100	; 0x64
 8011764:	4602      	mov	r2, r0
 8011766:	cb03      	ldmia	r3!, {r0, r1}
 8011768:	6010      	str	r0, [r2, #0]
 801176a:	4610      	mov	r0, r2
 801176c:	6051      	str	r1, [r2, #4]
 801176e:	4770      	bx	lr

08011770 <_ZN8touchgfx4LineD1Ev>:
 8011770:	4770      	bx	lr

08011772 <_ZN8touchgfx4LineD0Ev>:
 8011772:	b510      	push	{r4, lr}
 8011774:	4604      	mov	r4, r0
 8011776:	2170      	movs	r1, #112	; 0x70
 8011778:	f014 fa1b 	bl	8025bb2 <_ZdlPvj>
 801177c:	4620      	mov	r0, r4
 801177e:	bd10      	pop	{r4, pc}

08011780 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 8011780:	b507      	push	{r0, r1, r2, lr}
 8011782:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8011786:	ab01      	add	r3, sp, #4
 8011788:	6809      	ldr	r1, [r1, #0]
 801178a:	6800      	ldr	r0, [r0, #0]
 801178c:	f005 ff35 	bl	80175fa <_ZN8touchgfx6muldivElllRl>
 8011790:	b003      	add	sp, #12
 8011792:	f85d fb04 	ldr.w	pc, [sp], #4

08011796 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>:
 8011796:	6800      	ldr	r0, [r0, #0]
 8011798:	2800      	cmp	r0, #0
 801179a:	bfb9      	ittee	lt
 801179c:	2320      	movlt	r3, #32
 801179e:	fb90 f0f3 	sdivlt	r0, r0, r3
 80117a2:	301f      	addge	r0, #31
 80117a4:	1140      	asrge	r0, r0, #5
 80117a6:	4770      	bx	lr

080117a8 <_ZNK8touchgfx4Line17invalidateContentEv>:
 80117a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117ac:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 80117b0:	b089      	sub	sp, #36	; 0x24
 80117b2:	4604      	mov	r4, r0
 80117b4:	b353      	cbz	r3, 801180c <_ZNK8touchgfx4Line17invalidateContentEv+0x64>
 80117b6:	6803      	ldr	r3, [r0, #0]
 80117b8:	4601      	mov	r1, r0
 80117ba:	a802      	add	r0, sp, #8
 80117bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80117be:	4798      	blx	r3
 80117c0:	2220      	movs	r2, #32
 80117c2:	f8d4 a02c 	ldr.w	sl, [r4, #44]	; 0x2c
 80117c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80117c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80117ca:	f8d4 b000 	ldr.w	fp, [r4]
 80117ce:	fb9a f0f2 	sdiv	r0, sl, r2
 80117d2:	fb91 f5f2 	sdiv	r5, r1, r2
 80117d6:	fb93 f6f2 	sdiv	r6, r3, r2
 80117da:	1b40      	subs	r0, r0, r5
 80117dc:	0076      	lsls	r6, r6, #1
 80117de:	2800      	cmp	r0, #0
 80117e0:	bfb8      	it	lt
 80117e2:	4240      	neglt	r0, r0
 80117e4:	4286      	cmp	r6, r0
 80117e6:	dc0c      	bgt.n	8011802 <_ZNK8touchgfx4Line17invalidateContentEv+0x5a>
 80117e8:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80117ea:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
 80117ee:	fb95 f0f2 	sdiv	r0, r5, r2
 80117f2:	fb98 f7f2 	sdiv	r7, r8, r2
 80117f6:	1bc0      	subs	r0, r0, r7
 80117f8:	2800      	cmp	r0, #0
 80117fa:	bfb8      	it	lt
 80117fc:	4240      	neglt	r0, r0
 80117fe:	4286      	cmp	r6, r0
 8011800:	dd07      	ble.n	8011812 <_ZNK8touchgfx4Line17invalidateContentEv+0x6a>
 8011802:	f8db 3010 	ldr.w	r3, [fp, #16]
 8011806:	a902      	add	r1, sp, #8
 8011808:	4620      	mov	r0, r4
 801180a:	4798      	blx	r3
 801180c:	b009      	add	sp, #36	; 0x24
 801180e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011812:	eb01 060a 	add.w	r6, r1, sl
 8011816:	2002      	movs	r0, #2
 8011818:	eb08 0705 	add.w	r7, r8, r5
 801181c:	3301      	adds	r3, #1
 801181e:	f10d 0920 	add.w	r9, sp, #32
 8011822:	9101      	str	r1, [sp, #4]
 8011824:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011828:	fb96 f6f0 	sdiv	r6, r6, r0
 801182c:	fb97 f7f0 	sdiv	r7, r7, r0
 8011830:	4103      	asrs	r3, r0
 8011832:	b236      	sxth	r6, r6
 8011834:	b23f      	sxth	r7, r7
 8011836:	f849 3d08 	str.w	r3, [r9, #-8]!
 801183a:	4648      	mov	r0, r9
 801183c:	fb96 f6f2 	sdiv	r6, r6, r2
 8011840:	fb97 f7f2 	sdiv	r7, r7, r2
 8011844:	f7ff ffa7 	bl	8011796 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8011848:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801184c:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 8011850:	fa1f fe87 	uxth.w	lr, r7
 8011854:	9901      	ldr	r1, [sp, #4]
 8011856:	fa1f fc86 	uxth.w	ip, r6
 801185a:	4293      	cmp	r3, r2
 801185c:	b280      	uxth	r0, r0
 801185e:	eba1 0a0a 	sub.w	sl, r1, sl
 8011862:	da54      	bge.n	801190e <_ZNK8touchgfx4Line17invalidateContentEv+0x166>
 8011864:	ebac 0100 	sub.w	r1, ip, r0
 8011868:	f1ba 0f00 	cmp.w	sl, #0
 801186c:	4460      	add	r0, ip
 801186e:	f9bd a008 	ldrsh.w	sl, [sp, #8]
 8011872:	b289      	uxth	r1, r1
 8011874:	f9bd c00a 	ldrsh.w	ip, [sp, #10]
 8011878:	b280      	uxth	r0, r0
 801187a:	b20e      	sxth	r6, r1
 801187c:	da29      	bge.n	80118d2 <_ZNK8touchgfx4Line17invalidateContentEv+0x12a>
 801187e:	eba8 0505 	sub.w	r5, r8, r5
 8011882:	2d00      	cmp	r5, #0
 8011884:	da2a      	bge.n	80118dc <_ZNK8touchgfx4Line17invalidateContentEv+0x134>
 8011886:	fa1f f88a 	uxth.w	r8, sl
 801188a:	f8ad a010 	strh.w	sl, [sp, #16]
 801188e:	fa1f f58c 	uxth.w	r5, ip
 8011892:	f8ad c012 	strh.w	ip, [sp, #18]
 8011896:	eba0 0008 	sub.w	r0, r0, r8
 801189a:	4443      	add	r3, r8
 801189c:	f8ad 6018 	strh.w	r6, [sp, #24]
 80118a0:	f8ad 0014 	strh.w	r0, [sp, #20]
 80118a4:	1a59      	subs	r1, r3, r1
 80118a6:	ebae 0005 	sub.w	r0, lr, r5
 80118aa:	f8ad 701a 	strh.w	r7, [sp, #26]
 80118ae:	f8ad 101c 	strh.w	r1, [sp, #28]
 80118b2:	f8ad 0016 	strh.w	r0, [sp, #22]
 80118b6:	442a      	add	r2, r5
 80118b8:	eba2 0e0e 	sub.w	lr, r2, lr
 80118bc:	f8ad e01e 	strh.w	lr, [sp, #30]
 80118c0:	f8db 3010 	ldr.w	r3, [fp, #16]
 80118c4:	a904      	add	r1, sp, #16
 80118c6:	4620      	mov	r0, r4
 80118c8:	4798      	blx	r3
 80118ca:	6823      	ldr	r3, [r4, #0]
 80118cc:	4649      	mov	r1, r9
 80118ce:	691b      	ldr	r3, [r3, #16]
 80118d0:	e79a      	b.n	8011808 <_ZNK8touchgfx4Line17invalidateContentEv+0x60>
 80118d2:	d003      	beq.n	80118dc <_ZNK8touchgfx4Line17invalidateContentEv+0x134>
 80118d4:	eba8 0505 	sub.w	r5, r8, r5
 80118d8:	2d00      	cmp	r5, #0
 80118da:	dcd4      	bgt.n	8011886 <_ZNK8touchgfx4Line17invalidateContentEv+0xde>
 80118dc:	fa1f f88a 	uxth.w	r8, sl
 80118e0:	f8ad 6010 	strh.w	r6, [sp, #16]
 80118e4:	fa1f f58c 	uxth.w	r5, ip
 80118e8:	f8ad c012 	strh.w	ip, [sp, #18]
 80118ec:	4443      	add	r3, r8
 80118ee:	eba0 0008 	sub.w	r0, r0, r8
 80118f2:	f8ad a018 	strh.w	sl, [sp, #24]
 80118f6:	1a59      	subs	r1, r3, r1
 80118f8:	ebae 0305 	sub.w	r3, lr, r5
 80118fc:	f8ad 701a 	strh.w	r7, [sp, #26]
 8011900:	f8ad 1014 	strh.w	r1, [sp, #20]
 8011904:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011908:	f8ad 001c 	strh.w	r0, [sp, #28]
 801190c:	e7d3      	b.n	80118b6 <_ZNK8touchgfx4Line17invalidateContentEv+0x10e>
 801190e:	ebae 0100 	sub.w	r1, lr, r0
 8011912:	f1ba 0f00 	cmp.w	sl, #0
 8011916:	4470      	add	r0, lr
 8011918:	f9bd a00a 	ldrsh.w	sl, [sp, #10]
 801191c:	b289      	uxth	r1, r1
 801191e:	f9bd e008 	ldrsh.w	lr, [sp, #8]
 8011922:	b280      	uxth	r0, r0
 8011924:	b20f      	sxth	r7, r1
 8011926:	da20      	bge.n	801196a <_ZNK8touchgfx4Line17invalidateContentEv+0x1c2>
 8011928:	eba8 0505 	sub.w	r5, r8, r5
 801192c:	2d00      	cmp	r5, #0
 801192e:	da21      	bge.n	8011974 <_ZNK8touchgfx4Line17invalidateContentEv+0x1cc>
 8011930:	fa1f f88e 	uxth.w	r8, lr
 8011934:	f8ad e010 	strh.w	lr, [sp, #16]
 8011938:	fa1f f58a 	uxth.w	r5, sl
 801193c:	f8ad a012 	strh.w	sl, [sp, #18]
 8011940:	4443      	add	r3, r8
 8011942:	ebac 0e08 	sub.w	lr, ip, r8
 8011946:	442a      	add	r2, r5
 8011948:	1b40      	subs	r0, r0, r5
 801194a:	eba3 0c0c 	sub.w	ip, r3, ip
 801194e:	f8ad e014 	strh.w	lr, [sp, #20]
 8011952:	1a51      	subs	r1, r2, r1
 8011954:	f8ad 0016 	strh.w	r0, [sp, #22]
 8011958:	f8ad 6018 	strh.w	r6, [sp, #24]
 801195c:	f8ad 701a 	strh.w	r7, [sp, #26]
 8011960:	f8ad c01c 	strh.w	ip, [sp, #28]
 8011964:	f8ad 101e 	strh.w	r1, [sp, #30]
 8011968:	e7aa      	b.n	80118c0 <_ZNK8touchgfx4Line17invalidateContentEv+0x118>
 801196a:	d003      	beq.n	8011974 <_ZNK8touchgfx4Line17invalidateContentEv+0x1cc>
 801196c:	eba8 0505 	sub.w	r5, r8, r5
 8011970:	2d00      	cmp	r5, #0
 8011972:	dcdd      	bgt.n	8011930 <_ZNK8touchgfx4Line17invalidateContentEv+0x188>
 8011974:	fa1f f58e 	uxth.w	r5, lr
 8011978:	f8ad 7012 	strh.w	r7, [sp, #18]
 801197c:	fa1f f88a 	uxth.w	r8, sl
 8011980:	f8ad e010 	strh.w	lr, [sp, #16]
 8011984:	442b      	add	r3, r5
 8011986:	ebac 0705 	sub.w	r7, ip, r5
 801198a:	4442      	add	r2, r8
 801198c:	eba0 0008 	sub.w	r0, r0, r8
 8011990:	eba3 0c0c 	sub.w	ip, r3, ip
 8011994:	f8ad 7014 	strh.w	r7, [sp, #20]
 8011998:	1a51      	subs	r1, r2, r1
 801199a:	f8ad 6018 	strh.w	r6, [sp, #24]
 801199e:	f8ad a01a 	strh.w	sl, [sp, #26]
 80119a2:	f8ad 1016 	strh.w	r1, [sp, #22]
 80119a6:	f8ad c01c 	strh.w	ip, [sp, #28]
 80119aa:	f8ad 001e 	strh.w	r0, [sp, #30]
 80119ae:	e787      	b.n	80118c0 <_ZNK8touchgfx4Line17invalidateContentEv+0x118>

080119b0 <_ZN8touchgfx7CWRUtil4sineEi>:
 80119b0:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80119b4:	fb90 f2f3 	sdiv	r2, r0, r3
 80119b8:	fb02 0013 	mls	r0, r2, r3, r0
 80119bc:	2800      	cmp	r0, #0
 80119be:	bfb8      	it	lt
 80119c0:	18c0      	addlt	r0, r0, r3
 80119c2:	4b0a      	ldr	r3, [pc, #40]	; (80119ec <_ZN8touchgfx7CWRUtil4sineEi+0x3c>)
 80119c4:	285a      	cmp	r0, #90	; 0x5a
 80119c6:	dc02      	bgt.n	80119ce <_ZN8touchgfx7CWRUtil4sineEi+0x1e>
 80119c8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80119cc:	4770      	bx	lr
 80119ce:	28b4      	cmp	r0, #180	; 0xb4
 80119d0:	dc02      	bgt.n	80119d8 <_ZN8touchgfx7CWRUtil4sineEi+0x28>
 80119d2:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 80119d6:	e7f7      	b.n	80119c8 <_ZN8touchgfx7CWRUtil4sineEi+0x18>
 80119d8:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 80119dc:	bfd4      	ite	le
 80119de:	38b4      	suble	r0, #180	; 0xb4
 80119e0:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 80119e4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80119e8:	4240      	negs	r0, r0
 80119ea:	4770      	bx	lr
 80119ec:	0802ab18 	.word	0x0802ab18

080119f0 <_ZN8touchgfx7CWRUtil5isqrtEm>:
 80119f0:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80119f4:	f04f 0300 	mov.w	r3, #0
 80119f8:	bf2c      	ite	cs
 80119fa:	f04f 4280 	movcs.w	r2, #1073741824	; 0x40000000
 80119fe:	f44f 4280 	movcc.w	r2, #16384	; 0x4000
 8011a02:	1899      	adds	r1, r3, r2
 8011a04:	4288      	cmp	r0, r1
 8011a06:	bf24      	itt	cs
 8011a08:	1853      	addcs	r3, r2, r1
 8011a0a:	1a40      	subcs	r0, r0, r1
 8011a0c:	0892      	lsrs	r2, r2, #2
 8011a0e:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8011a12:	d1f6      	bne.n	8011a02 <_ZN8touchgfx7CWRUtil5isqrtEm+0x12>
 8011a14:	4618      	mov	r0, r3
 8011a16:	4770      	bx	lr

08011a18 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>:
 8011a18:	b510      	push	{r4, lr}
 8011a1a:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 8011a1e:	ea81 74e1 	eor.w	r4, r1, r1, asr #31
 8011a22:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 8011a26:	eba4 74e1 	sub.w	r4, r4, r1, asr #31
 8011a2a:	139b      	asrs	r3, r3, #14
 8011a2c:	13a4      	asrs	r4, r4, #14
 8011a2e:	429c      	cmp	r4, r3
 8011a30:	bfb8      	it	lt
 8011a32:	461c      	movlt	r4, r3
 8011a34:	2c01      	cmp	r4, #1
 8011a36:	dd07      	ble.n	8011a48 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x30>
 8011a38:	fb91 f1f4 	sdiv	r1, r1, r4
 8011a3c:	fb90 f0f4 	sdiv	r0, r0, r4
 8011a40:	f7ff ffea 	bl	8011a18 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8011a44:	4360      	muls	r0, r4
 8011a46:	bd10      	pop	{r4, pc}
 8011a48:	4340      	muls	r0, r0
 8011a4a:	fb01 0001 	mla	r0, r1, r1, r0
 8011a4e:	f7ff ffcf 	bl	80119f0 <_ZN8touchgfx7CWRUtil5isqrtEm>
 8011a52:	e7f8      	b.n	8011a46 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x2e>

08011a54 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>:
 8011a54:	2800      	cmp	r0, #0
 8011a56:	b508      	push	{r3, lr}
 8011a58:	da05      	bge.n	8011a66 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x12>
 8011a5a:	4240      	negs	r0, r0
 8011a5c:	f7ff fffa 	bl	8011a54 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8011a60:	4240      	negs	r0, r0
 8011a62:	b240      	sxtb	r0, r0
 8011a64:	bd08      	pop	{r3, pc}
 8011a66:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8011a6a:	dc11      	bgt.n	8011a90 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x3c>
 8011a6c:	f5b0 7f35 	cmp.w	r0, #724	; 0x2d4
 8011a70:	dd09      	ble.n	8011a86 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x32>
 8011a72:	4340      	muls	r0, r0
 8011a74:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
 8011a78:	f7ff ffba 	bl	80119f0 <_ZN8touchgfx7CWRUtil5isqrtEm>
 8011a7c:	f7ff ffea 	bl	8011a54 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8011a80:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8011a84:	e7ed      	b.n	8011a62 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0xe>
 8011a86:	3003      	adds	r0, #3
 8011a88:	4b02      	ldr	r3, [pc, #8]	; (8011a94 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x40>)
 8011a8a:	10c0      	asrs	r0, r0, #3
 8011a8c:	5618      	ldrsb	r0, [r3, r0]
 8011a8e:	e7e9      	b.n	8011a64 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 8011a90:	2000      	movs	r0, #0
 8011a92:	e7e7      	b.n	8011a64 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 8011a94:	0802aabc 	.word	0x0802aabc

08011a98 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>:
 8011a98:	4281      	cmp	r1, r0
 8011a9a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011a9c:	460c      	mov	r4, r1
 8011a9e:	4615      	mov	r5, r2
 8011aa0:	dd07      	ble.n	8011ab2 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x1a>
 8011aa2:	4601      	mov	r1, r0
 8011aa4:	4620      	mov	r0, r4
 8011aa6:	f7ff fff7 	bl	8011a98 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8011aaa:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8011aae:	b003      	add	sp, #12
 8011ab0:	bd30      	pop	{r4, r5, pc}
 8011ab2:	f7ff ffb1 	bl	8011a18 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8011ab6:	6028      	str	r0, [r5, #0]
 8011ab8:	2800      	cmp	r0, #0
 8011aba:	d0f8      	beq.n	8011aae <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x16>
 8011abc:	4602      	mov	r2, r0
 8011abe:	ab01      	add	r3, sp, #4
 8011ac0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8011ac4:	4620      	mov	r0, r4
 8011ac6:	f005 fd98 	bl	80175fa <_ZN8touchgfx6muldivElllRl>
 8011aca:	f7ff ffc3 	bl	8011a54 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8011ace:	e7ee      	b.n	8011aae <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x16>

08011ad0 <_ZN8touchgfx4LineC1Ev>:
 8011ad0:	b510      	push	{r4, lr}
 8011ad2:	4604      	mov	r4, r0
 8011ad4:	f7ff fe28 	bl	8011728 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8011ad8:	4b0c      	ldr	r3, [pc, #48]	; (8011b0c <_ZN8touchgfx4LineC1Ev+0x3c>)
 8011ada:	2220      	movs	r2, #32
 8011adc:	4620      	mov	r0, r4
 8011ade:	6023      	str	r3, [r4, #0]
 8011ae0:	2300      	movs	r3, #0
 8011ae2:	63e2      	str	r2, [r4, #60]	; 0x3c
 8011ae4:	2212      	movs	r2, #18
 8011ae6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8011aea:	66e2      	str	r2, [r4, #108]	; 0x6c
 8011aec:	60a3      	str	r3, [r4, #8]
 8011aee:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 8011af2:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8011af6:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
 8011afa:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 8011afe:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
 8011b02:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
 8011b06:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
 8011b0a:	bd10      	pop	{r4, pc}
 8011b0c:	0802abd8 	.word	0x0802abd8

08011b10 <_ZNK8touchgfx4Line18getLineEndingStyleEv>:
 8011b10:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8011b14:	4770      	bx	lr

08011b16 <_ZN8touchgfx4Line17updateCachedShapeEv>:
 8011b16:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8011b1a:	6b47      	ldr	r7, [r0, #52]	; 0x34
 8011b1c:	4604      	mov	r4, r0
 8011b1e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8011b20:	6b85      	ldr	r5, [r0, #56]	; 0x38
 8011b22:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8011b24:	1aff      	subs	r7, r7, r3
 8011b26:	eba5 0502 	sub.w	r5, r5, r2
 8011b2a:	d142      	bne.n	8011bb2 <_ZN8touchgfx4Line17updateCachedShapeEv+0x9c>
 8011b2c:	b955      	cbnz	r5, 8011b44 <_ZN8touchgfx4Line17updateCachedShapeEv+0x2e>
 8011b2e:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
 8011b32:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
 8011b36:	e9c0 2217 	strd	r2, r2, [r0, #92]	; 0x5c
 8011b3a:	e9c0 2215 	strd	r2, r2, [r0, #84]	; 0x54
 8011b3e:	b002      	add	sp, #8
 8011b40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b44:	ea85 78e5 	eor.w	r8, r5, r5, asr #31
 8011b48:	eba8 78e5 	sub.w	r8, r8, r5, asr #31
 8011b4c:	4629      	mov	r1, r5
 8011b4e:	2502      	movs	r5, #2
 8011b50:	4642      	mov	r2, r8
 8011b52:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8011b54:	f005 fd70 	bl	8017638 <_ZN8touchgfx6muldivElll>
 8011b58:	4642      	mov	r2, r8
 8011b5a:	4639      	mov	r1, r7
 8011b5c:	fb90 f6f5 	sdiv	r6, r0, r5
 8011b60:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8011b62:	f005 fd69 	bl	8017638 <_ZN8touchgfx6muldivElll>
 8011b66:	f894 9040 	ldrb.w	r9, [r4, #64]	; 0x40
 8011b6a:	fb90 f5f5 	sdiv	r5, r0, r5
 8011b6e:	f1b9 0f00 	cmp.w	r9, #0
 8011b72:	d067      	beq.n	8011c44 <_ZN8touchgfx4Line17updateCachedShapeEv+0x12e>
 8011b74:	f1b9 0f02 	cmp.w	r9, #2
 8011b78:	d878      	bhi.n	8011c6c <_ZN8touchgfx4Line17updateCachedShapeEv+0x156>
 8011b7a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8011b7c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8011b7e:	1b93      	subs	r3, r2, r6
 8011b80:	4432      	add	r2, r6
 8011b82:	1b5b      	subs	r3, r3, r5
 8011b84:	1b52      	subs	r2, r2, r5
 8011b86:	6463      	str	r3, [r4, #68]	; 0x44
 8011b88:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011b8a:	6522      	str	r2, [r4, #80]	; 0x50
 8011b8c:	18e9      	adds	r1, r5, r3
 8011b8e:	1b5b      	subs	r3, r3, r5
 8011b90:	1b89      	subs	r1, r1, r6
 8011b92:	1b9b      	subs	r3, r3, r6
 8011b94:	6561      	str	r1, [r4, #84]	; 0x54
 8011b96:	1b81      	subs	r1, r0, r6
 8011b98:	4430      	add	r0, r6
 8011b9a:	4429      	add	r1, r5
 8011b9c:	4428      	add	r0, r5
 8011b9e:	64a1      	str	r1, [r4, #72]	; 0x48
 8011ba0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011ba2:	64e0      	str	r0, [r4, #76]	; 0x4c
 8011ba4:	186f      	adds	r7, r5, r1
 8011ba6:	1b49      	subs	r1, r1, r5
 8011ba8:	4437      	add	r7, r6
 8011baa:	4431      	add	r1, r6
 8011bac:	65a7      	str	r7, [r4, #88]	; 0x58
 8011bae:	65e1      	str	r1, [r4, #92]	; 0x5c
 8011bb0:	e05b      	b.n	8011c6a <_ZN8touchgfx4Line17updateCachedShapeEv+0x154>
 8011bb2:	ea87 78e7 	eor.w	r8, r7, r7, asr #31
 8011bb6:	eba8 78e7 	sub.w	r8, r8, r7, asr #31
 8011bba:	2d00      	cmp	r5, #0
 8011bbc:	d0c6      	beq.n	8011b4c <_ZN8touchgfx4Line17updateCachedShapeEv+0x36>
 8011bbe:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
 8011bc2:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
 8011bc6:	fb93 f2f8 	sdiv	r2, r3, r8
 8011bca:	fb08 3312 	mls	r3, r8, r2, r3
 8011bce:	b353      	cbz	r3, 8011c26 <_ZN8touchgfx4Line17updateCachedShapeEv+0x110>
 8011bd0:	fb98 f2f3 	sdiv	r2, r8, r3
 8011bd4:	fb03 8812 	mls	r8, r3, r2, r8
 8011bd8:	f1b8 0f00 	cmp.w	r8, #0
 8011bdc:	d1f3      	bne.n	8011bc6 <_ZN8touchgfx4Line17updateCachedShapeEv+0xb0>
 8011bde:	2b01      	cmp	r3, #1
 8011be0:	f24b 5104 	movw	r1, #46340	; 0xb504
 8011be4:	bf1c      	itt	ne
 8011be6:	fb97 f7f3 	sdivne	r7, r7, r3
 8011bea:	fb95 f5f3 	sdivne	r5, r5, r3
 8011bee:	ea87 73e7 	eor.w	r3, r7, r7, asr #31
 8011bf2:	4608      	mov	r0, r1
 8011bf4:	ea85 72e5 	eor.w	r2, r5, r5, asr #31
 8011bf8:	eba3 73e7 	sub.w	r3, r3, r7, asr #31
 8011bfc:	eba2 72e5 	sub.w	r2, r2, r5, asr #31
 8011c00:	428b      	cmp	r3, r1
 8011c02:	dd01      	ble.n	8011c08 <_ZN8touchgfx4Line17updateCachedShapeEv+0xf2>
 8011c04:	428a      	cmp	r2, r1
 8011c06:	dc10      	bgt.n	8011c2a <_ZN8touchgfx4Line17updateCachedShapeEv+0x114>
 8011c08:	fb90 f3f3 	sdiv	r3, r0, r3
 8011c0c:	fb90 f2f2 	sdiv	r2, r0, r2
 8011c10:	4293      	cmp	r3, r2
 8011c12:	bfa8      	it	ge
 8011c14:	4613      	movge	r3, r2
 8011c16:	435f      	muls	r7, r3
 8011c18:	435d      	muls	r5, r3
 8011c1a:	4629      	mov	r1, r5
 8011c1c:	4638      	mov	r0, r7
 8011c1e:	f7ff fefb 	bl	8011a18 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8011c22:	4680      	mov	r8, r0
 8011c24:	e792      	b.n	8011b4c <_ZN8touchgfx4Line17updateCachedShapeEv+0x36>
 8011c26:	4643      	mov	r3, r8
 8011c28:	e7d9      	b.n	8011bde <_ZN8touchgfx4Line17updateCachedShapeEv+0xc8>
 8011c2a:	fb93 f3f1 	sdiv	r3, r3, r1
 8011c2e:	fb92 f2f1 	sdiv	r2, r2, r1
 8011c32:	4293      	cmp	r3, r2
 8011c34:	bfcc      	ite	gt
 8011c36:	3301      	addgt	r3, #1
 8011c38:	1c53      	addle	r3, r2, #1
 8011c3a:	fb97 f7f3 	sdiv	r7, r7, r3
 8011c3e:	fb95 f5f3 	sdiv	r5, r5, r3
 8011c42:	e7ea      	b.n	8011c1a <_ZN8touchgfx4Line17updateCachedShapeEv+0x104>
 8011c44:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8011c46:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8011c48:	1b93      	subs	r3, r2, r6
 8011c4a:	4432      	add	r2, r6
 8011c4c:	6463      	str	r3, [r4, #68]	; 0x44
 8011c4e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011c50:	6522      	str	r2, [r4, #80]	; 0x50
 8011c52:	18e9      	adds	r1, r5, r3
 8011c54:	1b5b      	subs	r3, r3, r5
 8011c56:	6561      	str	r1, [r4, #84]	; 0x54
 8011c58:	1b81      	subs	r1, r0, r6
 8011c5a:	4430      	add	r0, r6
 8011c5c:	64a1      	str	r1, [r4, #72]	; 0x48
 8011c5e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011c60:	64e0      	str	r0, [r4, #76]	; 0x4c
 8011c62:	186f      	adds	r7, r5, r1
 8011c64:	1b49      	subs	r1, r1, r5
 8011c66:	65a7      	str	r7, [r4, #88]	; 0x58
 8011c68:	65e1      	str	r1, [r4, #92]	; 0x5c
 8011c6a:	6623      	str	r3, [r4, #96]	; 0x60
 8011c6c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8011c6e:	f104 0148 	add.w	r1, r4, #72	; 0x48
 8011c72:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8011c74:	f104 0c54 	add.w	ip, r4, #84	; 0x54
 8011c78:	9200      	str	r2, [sp, #0]
 8011c7a:	9301      	str	r3, [sp, #4]
 8011c7c:	680f      	ldr	r7, [r1, #0]
 8011c7e:	3104      	adds	r1, #4
 8011c80:	9800      	ldr	r0, [sp, #0]
 8011c82:	42ba      	cmp	r2, r7
 8011c84:	bfa8      	it	ge
 8011c86:	463a      	movge	r2, r7
 8011c88:	4287      	cmp	r7, r0
 8011c8a:	9801      	ldr	r0, [sp, #4]
 8011c8c:	bfc8      	it	gt
 8011c8e:	9700      	strgt	r7, [sp, #0]
 8011c90:	68cf      	ldr	r7, [r1, #12]
 8011c92:	42bb      	cmp	r3, r7
 8011c94:	bfa8      	it	ge
 8011c96:	463b      	movge	r3, r7
 8011c98:	4287      	cmp	r7, r0
 8011c9a:	bfc8      	it	gt
 8011c9c:	9701      	strgt	r7, [sp, #4]
 8011c9e:	458c      	cmp	ip, r1
 8011ca0:	d1ec      	bne.n	8011c7c <_ZN8touchgfx4Line17updateCachedShapeEv+0x166>
 8011ca2:	2720      	movs	r7, #32
 8011ca4:	4668      	mov	r0, sp
 8011ca6:	fb92 f8f7 	sdiv	r8, r2, r7
 8011caa:	fb93 f7f7 	sdiv	r7, r3, r7
 8011cae:	f7ff fd72 	bl	8011796 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8011cb2:	4682      	mov	sl, r0
 8011cb4:	a801      	add	r0, sp, #4
 8011cb6:	f7ff fd6e 	bl	8011796 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8011cba:	ebaa 0208 	sub.w	r2, sl, r8
 8011cbe:	1bc0      	subs	r0, r0, r7
 8011cc0:	f1b9 0f01 	cmp.w	r9, #1
 8011cc4:	f8a4 8064 	strh.w	r8, [r4, #100]	; 0x64
 8011cc8:	f8a4 7066 	strh.w	r7, [r4, #102]	; 0x66
 8011ccc:	f8a4 2068 	strh.w	r2, [r4, #104]	; 0x68
 8011cd0:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
 8011cd4:	f47f af33 	bne.w	8011b3e <_ZN8touchgfx4Line17updateCachedShapeEv+0x28>
 8011cd8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8011cda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011cdc:	1b83      	subs	r3, r0, r6
 8011cde:	6463      	str	r3, [r4, #68]	; 0x44
 8011ce0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011ce2:	18ea      	adds	r2, r5, r3
 8011ce4:	6562      	str	r2, [r4, #84]	; 0x54
 8011ce6:	1b8a      	subs	r2, r1, r6
 8011ce8:	4431      	add	r1, r6
 8011cea:	4406      	add	r6, r0
 8011cec:	64a2      	str	r2, [r4, #72]	; 0x48
 8011cee:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8011cf0:	64e1      	str	r1, [r4, #76]	; 0x4c
 8011cf2:	18af      	adds	r7, r5, r2
 8011cf4:	1b52      	subs	r2, r2, r5
 8011cf6:	1b5d      	subs	r5, r3, r5
 8011cf8:	6526      	str	r6, [r4, #80]	; 0x50
 8011cfa:	65a7      	str	r7, [r4, #88]	; 0x58
 8011cfc:	65e2      	str	r2, [r4, #92]	; 0x5c
 8011cfe:	6625      	str	r5, [r4, #96]	; 0x60
 8011d00:	e71d      	b.n	8011b3e <_ZN8touchgfx4Line17updateCachedShapeEv+0x28>

08011d02 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>:
 8011d02:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8011d04:	428b      	cmp	r3, r1
 8011d06:	d102      	bne.n	8011d0e <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0xc>
 8011d08:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8011d0a:	4293      	cmp	r3, r2
 8011d0c:	d003      	beq.n	8011d16 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0x14>
 8011d0e:	e9c0 120b 	strd	r1, r2, [r0, #44]	; 0x2c
 8011d12:	f7ff bf00 	b.w	8011b16 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8011d16:	4770      	bx	lr

08011d18 <_ZN8touchgfx4Line9updateEndENS_7CWRUtil2Q5ES2_>:
 8011d18:	b570      	push	{r4, r5, r6, lr}
 8011d1a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011d1c:	4604      	mov	r4, r0
 8011d1e:	460e      	mov	r6, r1
 8011d20:	4615      	mov	r5, r2
 8011d22:	428b      	cmp	r3, r1
 8011d24:	d102      	bne.n	8011d2c <_ZN8touchgfx4Line9updateEndENS_7CWRUtil2Q5ES2_+0x14>
 8011d26:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8011d28:	4293      	cmp	r3, r2
 8011d2a:	d00e      	beq.n	8011d4a <_ZN8touchgfx4Line9updateEndENS_7CWRUtil2Q5ES2_+0x32>
 8011d2c:	6823      	ldr	r3, [r4, #0]
 8011d2e:	4620      	mov	r0, r4
 8011d30:	699b      	ldr	r3, [r3, #24]
 8011d32:	4798      	blx	r3
 8011d34:	4620      	mov	r0, r4
 8011d36:	e9c4 650d 	strd	r6, r5, [r4, #52]	; 0x34
 8011d3a:	f7ff feec 	bl	8011b16 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8011d3e:	6823      	ldr	r3, [r4, #0]
 8011d40:	4620      	mov	r0, r4
 8011d42:	699b      	ldr	r3, [r3, #24]
 8011d44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011d48:	4718      	bx	r3
 8011d4a:	bd70      	pop	{r4, r5, r6, pc}

08011d4c <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>:
 8011d4c:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
 8011d50:	f7ff bee1 	b.w	8011b16 <_ZN8touchgfx4Line17updateCachedShapeEv>

08011d54 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE>:
 8011d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d58:	b0a0      	sub	sp, #128	; 0x80
 8011d5a:	4604      	mov	r4, r0
 8011d5c:	460a      	mov	r2, r1
 8011d5e:	4601      	mov	r1, r0
 8011d60:	a804      	add	r0, sp, #16
 8011d62:	f013 fc21 	bl	80255a8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 8011d66:	2300      	movs	r3, #0
 8011d68:	9301      	str	r3, [sp, #4]
 8011d6a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8011d6e:	2b01      	cmp	r3, #1
 8011d70:	d17c      	bne.n	8011e6c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x118>
 8011d72:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8011d74:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8011d76:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8011d78:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8011d7a:	1ac0      	subs	r0, r0, r3
 8011d7c:	eba1 0102 	sub.w	r1, r1, r2
 8011d80:	d437      	bmi.n	8011df2 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x9e>
 8011d82:	2900      	cmp	r1, #0
 8011d84:	aa01      	add	r2, sp, #4
 8011d86:	db2e      	blt.n	8011de6 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x92>
 8011d88:	f7ff fe86 	bl	8011a98 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8011d8c:	f100 065a 	add.w	r6, r0, #90	; 0x5a
 8011d90:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8011d92:	a804      	add	r0, sp, #16
 8011d94:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8011d96:	f013 fd81 	bl	802589c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8011d9a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8011d9c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8011d9e:	a804      	add	r0, sp, #16
 8011da0:	f013 fdc9 	bl	8025936 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8011da4:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8011da6:	2db3      	cmp	r5, #179	; 0xb3
 8011da8:	dc33      	bgt.n	8011e12 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xbe>
 8011daa:	eba6 0805 	sub.w	r8, r6, r5
 8011dae:	4640      	mov	r0, r8
 8011db0:	f7ff fdfe 	bl	80119b0 <_ZN8touchgfx7CWRUtil4sineEi>
 8011db4:	a902      	add	r1, sp, #8
 8011db6:	9002      	str	r0, [sp, #8]
 8011db8:	a801      	add	r0, sp, #4
 8011dba:	f7ff fce1 	bl	8011780 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8011dbe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011dc0:	1847      	adds	r7, r0, r1
 8011dc2:	f1c8 005a 	rsb	r0, r8, #90	; 0x5a
 8011dc6:	f7ff fdf3 	bl	80119b0 <_ZN8touchgfx7CWRUtil4sineEi>
 8011dca:	a903      	add	r1, sp, #12
 8011dcc:	9003      	str	r0, [sp, #12]
 8011dce:	a801      	add	r0, sp, #4
 8011dd0:	f7ff fcd6 	bl	8011780 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8011dd4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8011dd6:	4639      	mov	r1, r7
 8011dd8:	1a12      	subs	r2, r2, r0
 8011dda:	a804      	add	r0, sp, #16
 8011ddc:	f013 fdab 	bl	8025936 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8011de0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8011de2:	441d      	add	r5, r3
 8011de4:	e7df      	b.n	8011da6 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x52>
 8011de6:	4249      	negs	r1, r1
 8011de8:	f7ff fe56 	bl	8011a98 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8011dec:	f1c0 065a 	rsb	r6, r0, #90	; 0x5a
 8011df0:	e7ce      	b.n	8011d90 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x3c>
 8011df2:	2900      	cmp	r1, #0
 8011df4:	f1c0 0000 	rsb	r0, r0, #0
 8011df8:	aa01      	add	r2, sp, #4
 8011dfa:	db04      	blt.n	8011e06 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xb2>
 8011dfc:	f7ff fe4c 	bl	8011a98 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8011e00:	f5c0 7687 	rsb	r6, r0, #270	; 0x10e
 8011e04:	e7c4      	b.n	8011d90 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x3c>
 8011e06:	4249      	negs	r1, r1
 8011e08:	f7ff fe46 	bl	8011a98 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8011e0c:	f500 7687 	add.w	r6, r0, #270	; 0x10e
 8011e10:	e7be      	b.n	8011d90 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x3c>
 8011e12:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8011e14:	a804      	add	r0, sp, #16
 8011e16:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8011e18:	f013 fd8d 	bl	8025936 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8011e1c:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8011e1e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8011e20:	a804      	add	r0, sp, #16
 8011e22:	f013 fd88 	bl	8025936 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8011e26:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8011e28:	f1c5 05b4 	rsb	r5, r5, #180	; 0xb4
 8011e2c:	2d00      	cmp	r5, #0
 8011e2e:	dd31      	ble.n	8011e94 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x140>
 8011e30:	eb05 0806 	add.w	r8, r5, r6
 8011e34:	4640      	mov	r0, r8
 8011e36:	f7ff fdbb 	bl	80119b0 <_ZN8touchgfx7CWRUtil4sineEi>
 8011e3a:	a902      	add	r1, sp, #8
 8011e3c:	9002      	str	r0, [sp, #8]
 8011e3e:	a801      	add	r0, sp, #4
 8011e40:	f7ff fc9e 	bl	8011780 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8011e44:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8011e46:	1847      	adds	r7, r0, r1
 8011e48:	f1c8 005a 	rsb	r0, r8, #90	; 0x5a
 8011e4c:	f7ff fdb0 	bl	80119b0 <_ZN8touchgfx7CWRUtil4sineEi>
 8011e50:	a903      	add	r1, sp, #12
 8011e52:	9003      	str	r0, [sp, #12]
 8011e54:	a801      	add	r0, sp, #4
 8011e56:	f7ff fc93 	bl	8011780 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8011e5a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8011e5c:	4639      	mov	r1, r7
 8011e5e:	1a12      	subs	r2, r2, r0
 8011e60:	a804      	add	r0, sp, #16
 8011e62:	f013 fd68 	bl	8025936 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8011e66:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8011e68:	1aed      	subs	r5, r5, r3
 8011e6a:	e7df      	b.n	8011e2c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xd8>
 8011e6c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8011e6e:	a804      	add	r0, sp, #16
 8011e70:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8011e72:	f013 fd13 	bl	802589c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8011e76:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8011e78:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8011e7a:	a804      	add	r0, sp, #16
 8011e7c:	f013 fd5b 	bl	8025936 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8011e80:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8011e82:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8011e84:	a804      	add	r0, sp, #16
 8011e86:	f013 fd56 	bl	8025936 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8011e8a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8011e8c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8011e8e:	a804      	add	r0, sp, #16
 8011e90:	f013 fd51 	bl	8025936 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8011e94:	21ff      	movs	r1, #255	; 0xff
 8011e96:	a804      	add	r0, sp, #16
 8011e98:	f013 fc42 	bl	8025720 <_ZN8touchgfx6Canvas6renderEh>
 8011e9c:	4b04      	ldr	r3, [pc, #16]	; (8011eb0 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x15c>)
 8011e9e:	4604      	mov	r4, r0
 8011ea0:	a80c      	add	r0, sp, #48	; 0x30
 8011ea2:	9304      	str	r3, [sp, #16]
 8011ea4:	f001 fe44 	bl	8013b30 <_ZN8touchgfx7OutlineD1Ev>
 8011ea8:	4620      	mov	r0, r4
 8011eaa:	b020      	add	sp, #128	; 0x80
 8011eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011eb0:	0802b658 	.word	0x0802b658

08011eb4 <_ZN8touchgfx17AbstractDataGraph9setScaleXEib>:
 8011eb4:	6301      	str	r1, [r0, #48]	; 0x30
 8011eb6:	4770      	bx	lr

08011eb8 <_ZNK8touchgfx17AbstractDataGraph9getScaleXEv>:
 8011eb8:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8011eba:	4770      	bx	lr

08011ebc <_ZN8touchgfx17AbstractDataGraph9setScaleYEib>:
 8011ebc:	6341      	str	r1, [r0, #52]	; 0x34
 8011ebe:	4770      	bx	lr

08011ec0 <_ZNK8touchgfx17AbstractDataGraph9getScaleYEv>:
 8011ec0:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8011ec2:	4770      	bx	lr

08011ec4 <_ZN8touchgfx16DynamicDataGraph14beforeAddValueEv>:
 8011ec4:	4770      	bx	lr

08011ec6 <_ZNK8touchgfx16DynamicDataGraph9dataIndexEs>:
 8011ec6:	4608      	mov	r0, r1
 8011ec8:	4770      	bx	lr

08011eca <_ZNK8touchgfx16DynamicDataGraph18indexToGlobalIndexEs>:
 8011eca:	4608      	mov	r0, r1
 8011ecc:	4770      	bx	lr

08011ece <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE>:
 8011ece:	b530      	push	{r4, r5, lr}
 8011ed0:	460d      	mov	r5, r1
 8011ed2:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 8011ed4:	8949      	ldrh	r1, [r1, #10]
 8011ed6:	b085      	sub	sp, #20
 8011ed8:	4604      	mov	r4, r0
 8011eda:	1ac9      	subs	r1, r1, r3
 8011edc:	6803      	ldr	r3, [r0, #0]
 8011ede:	f10d 0206 	add.w	r2, sp, #6
 8011ee2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8011ee6:	b209      	sxth	r1, r1
 8011ee8:	4798      	blx	r3
 8011eea:	b1a0      	cbz	r0, 8011f16 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 8011eec:	792b      	ldrb	r3, [r5, #4]
 8011eee:	b993      	cbnz	r3, 8011f16 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 8011ef0:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
 8011ef4:	b178      	cbz	r0, 8011f16 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 8011ef6:	6803      	ldr	r3, [r0, #0]
 8011ef8:	68db      	ldr	r3, [r3, #12]
 8011efa:	4798      	blx	r3
 8011efc:	b158      	cbz	r0, 8011f16 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 8011efe:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8011f02:	aa02      	add	r2, sp, #8
 8011f04:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
 8011f08:	4621      	mov	r1, r4
 8011f0a:	f8ad 3008 	strh.w	r3, [sp, #8]
 8011f0e:	9503      	str	r5, [sp, #12]
 8011f10:	6803      	ldr	r3, [r0, #0]
 8011f12:	689b      	ldr	r3, [r3, #8]
 8011f14:	4798      	blx	r3
 8011f16:	b005      	add	sp, #20
 8011f18:	bd30      	pop	{r4, r5, pc}

08011f1a <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii>:
 8011f1a:	428a      	cmp	r2, r1
 8011f1c:	bfbc      	itt	lt
 8011f1e:	460b      	movlt	r3, r1
 8011f20:	4611      	movlt	r1, r2
 8011f22:	b510      	push	{r4, lr}
 8011f24:	bfb8      	it	lt
 8011f26:	461a      	movlt	r2, r3
 8011f28:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
 8011f2c:	4604      	mov	r4, r0
 8011f2e:	428b      	cmp	r3, r1
 8011f30:	d103      	bne.n	8011f3a <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x20>
 8011f32:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
 8011f36:	4293      	cmp	r3, r2
 8011f38:	d011      	beq.n	8011f5e <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x44>
 8011f3a:	f8c4 112c 	str.w	r1, [r4, #300]	; 0x12c
 8011f3e:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 8011f42:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
 8011f46:	f005 f9b0 	bl	80172aa <_ZNK8touchgfx8Drawable10invalidateEv>
 8011f4a:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8011f4e:	f005 f9ac 	bl	80172aa <_ZNK8touchgfx8Drawable10invalidateEv>
 8011f52:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 8011f56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f5a:	f005 b9a6 	b.w	80172aa <_ZNK8touchgfx8Drawable10invalidateEv>
 8011f5e:	bd10      	pop	{r4, pc}

08011f60 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii>:
 8011f60:	428a      	cmp	r2, r1
 8011f62:	bfbc      	itt	lt
 8011f64:	460b      	movlt	r3, r1
 8011f66:	4611      	movlt	r1, r2
 8011f68:	b510      	push	{r4, lr}
 8011f6a:	bfb8      	it	lt
 8011f6c:	461a      	movlt	r2, r3
 8011f6e:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
 8011f72:	4604      	mov	r4, r0
 8011f74:	428b      	cmp	r3, r1
 8011f76:	d103      	bne.n	8011f80 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x20>
 8011f78:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
 8011f7c:	4293      	cmp	r3, r2
 8011f7e:	d011      	beq.n	8011fa4 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x44>
 8011f80:	f8c4 1134 	str.w	r1, [r4, #308]	; 0x134
 8011f84:	f104 0064 	add.w	r0, r4, #100	; 0x64
 8011f88:	f8c4 2138 	str.w	r2, [r4, #312]	; 0x138
 8011f8c:	f005 f98d 	bl	80172aa <_ZNK8touchgfx8Drawable10invalidateEv>
 8011f90:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8011f94:	f005 f989 	bl	80172aa <_ZNK8touchgfx8Drawable10invalidateEv>
 8011f98:	f104 0090 	add.w	r0, r4, #144	; 0x90
 8011f9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011fa0:	f005 b983 	b.w	80172aa <_ZNK8touchgfx8Drawable10invalidateEv>
 8011fa4:	bd10      	pop	{r4, pc}

08011fa6 <_ZN8touchgfx17AbstractDataGraph5clearEv>:
 8011fa6:	2300      	movs	r3, #0
 8011fa8:	3038      	adds	r0, #56	; 0x38
 8011faa:	f8a0 30e6 	strh.w	r3, [r0, #230]	; 0xe6
 8011fae:	f005 b97c 	b.w	80172aa <_ZNK8touchgfx8Drawable10invalidateEv>

08011fb2 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi>:
 8011fb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011fb6:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
 8011fba:	4605      	mov	r5, r0
 8011fbc:	4688      	mov	r8, r1
 8011fbe:	4617      	mov	r7, r2
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d03e      	beq.n	8012042 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x90>
 8011fc4:	6803      	ldr	r3, [r0, #0]
 8011fc6:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8011fca:	4798      	blx	r3
 8011fcc:	682b      	ldr	r3, [r5, #0]
 8011fce:	4604      	mov	r4, r0
 8011fd0:	4628      	mov	r0, r5
 8011fd2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8011fd6:	4798      	blx	r3
 8011fd8:	4284      	cmp	r4, r0
 8011fda:	f9b5 611e 	ldrsh.w	r6, [r5, #286]	; 0x11e
 8011fde:	bfc2      	ittt	gt
 8011fe0:	4623      	movgt	r3, r4
 8011fe2:	4604      	movgt	r4, r0
 8011fe4:	4618      	movgt	r0, r3
 8011fe6:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 8011fea:	42b3      	cmp	r3, r6
 8011fec:	da29      	bge.n	8012042 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x90>
 8011fee:	42b0      	cmp	r0, r6
 8011ff0:	bfa8      	it	ge
 8011ff2:	4630      	movge	r0, r6
 8011ff4:	2800      	cmp	r0, #0
 8011ff6:	db24      	blt.n	8012042 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x90>
 8011ff8:	f1b8 0f00 	cmp.w	r8, #0
 8011ffc:	d11e      	bne.n	801203c <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x8a>
 8011ffe:	f8d5 2144 	ldr.w	r2, [r5, #324]	; 0x144
 8012002:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8012006:	460c      	mov	r4, r1
 8012008:	009a      	lsls	r2, r3, #2
 801200a:	4298      	cmp	r0, r3
 801200c:	dd0b      	ble.n	8012026 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x74>
 801200e:	f8d5 6144 	ldr.w	r6, [r5, #324]	; 0x144
 8012012:	3301      	adds	r3, #1
 8012014:	58b6      	ldr	r6, [r6, r2]
 8012016:	3204      	adds	r2, #4
 8012018:	42b1      	cmp	r1, r6
 801201a:	bfa8      	it	ge
 801201c:	4631      	movge	r1, r6
 801201e:	42b4      	cmp	r4, r6
 8012020:	bfb8      	it	lt
 8012022:	4634      	movlt	r4, r6
 8012024:	e7f1      	b.n	801200a <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x58>
 8012026:	1bc9      	subs	r1, r1, r7
 8012028:	193a      	adds	r2, r7, r4
 801202a:	4291      	cmp	r1, r2
 801202c:	d009      	beq.n	8012042 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x90>
 801202e:	682b      	ldr	r3, [r5, #0]
 8012030:	4628      	mov	r0, r5
 8012032:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8012036:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801203a:	4718      	bx	r3
 801203c:	427c      	negs	r4, r7
 801203e:	4639      	mov	r1, r7
 8012040:	e7e2      	b.n	8012008 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x56>
 8012042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012046 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE>:
 8012046:	b530      	push	{r4, r5, lr}
 8012048:	790b      	ldrb	r3, [r1, #4]
 801204a:	b085      	sub	sp, #20
 801204c:	4604      	mov	r4, r0
 801204e:	460d      	mov	r5, r1
 8012050:	2b02      	cmp	r3, #2
 8012052:	d020      	beq.n	8012096 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8012054:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 8012056:	f10d 0206 	add.w	r2, sp, #6
 801205a:	88c9      	ldrh	r1, [r1, #6]
 801205c:	1ac9      	subs	r1, r1, r3
 801205e:	6803      	ldr	r3, [r0, #0]
 8012060:	b209      	sxth	r1, r1
 8012062:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8012066:	4798      	blx	r3
 8012068:	b1a8      	cbz	r0, 8012096 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 801206a:	792b      	ldrb	r3, [r5, #4]
 801206c:	2b01      	cmp	r3, #1
 801206e:	d812      	bhi.n	8012096 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8012070:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
 8012074:	b178      	cbz	r0, 8012096 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8012076:	6803      	ldr	r3, [r0, #0]
 8012078:	68db      	ldr	r3, [r3, #12]
 801207a:	4798      	blx	r3
 801207c:	b158      	cbz	r0, 8012096 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 801207e:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8012082:	aa02      	add	r2, sp, #8
 8012084:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
 8012088:	4621      	mov	r1, r4
 801208a:	f8ad 3008 	strh.w	r3, [sp, #8]
 801208e:	9503      	str	r5, [sp, #12]
 8012090:	6803      	ldr	r3, [r0, #0]
 8012092:	689b      	ldr	r3, [r3, #8]
 8012094:	4798      	blx	r3
 8012096:	b005      	add	sp, #20
 8012098:	bd30      	pop	{r4, r5, pc}

0801209a <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_>:
 801209a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801209e:	4604      	mov	r4, r0
 80120a0:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	; 0x11e
 80120a4:	4690      	mov	r8, r2
 80120a6:	461f      	mov	r7, r3
 80120a8:	9e06      	ldr	r6, [sp, #24]
 80120aa:	b928      	cbnz	r0, 80120b8 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1e>
 80120ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80120b0:	8033      	strh	r3, [r6, #0]
 80120b2:	803b      	strh	r3, [r7, #0]
 80120b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120b8:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
 80120bc:	f9b4 0116 	ldrsh.w	r0, [r4, #278]	; 0x116
 80120c0:	1883      	adds	r3, r0, r2
 80120c2:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
 80120c6:	1ad2      	subs	r2, r2, r3
 80120c8:	b212      	sxth	r2, r2
 80120ca:	2a01      	cmp	r2, #1
 80120cc:	dc07      	bgt.n	80120de <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x44>
 80120ce:	2300      	movs	r3, #0
 80120d0:	803b      	strh	r3, [r7, #0]
 80120d2:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
 80120d6:	3b01      	subs	r3, #1
 80120d8:	8033      	strh	r3, [r6, #0]
 80120da:	2001      	movs	r0, #1
 80120dc:	e7ea      	b.n	80120b4 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 80120de:	1a08      	subs	r0, r1, r0
 80120e0:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 80120e4:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
 80120e8:	0140      	lsls	r0, r0, #5
 80120ea:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80120ec:	1a5b      	subs	r3, r3, r1
 80120ee:	d459      	bmi.n	80121a4 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x10a>
 80120f0:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80120f4:	fb93 f1f5 	sdiv	r1, r3, r5
 80120f8:	2302      	movs	r3, #2
 80120fa:	fb91 f1f3 	sdiv	r1, r1, r3
 80120fe:	3a01      	subs	r2, #1
 8012100:	f005 fa9a 	bl	8017638 <_ZN8touchgfx6muldivElll>
 8012104:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
 8012108:	f8d4 c030 	ldr.w	ip, [r4, #48]	; 0x30
 801210c:	2900      	cmp	r1, #0
 801210e:	db55      	blt.n	80121bc <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x122>
 8012110:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
 8012114:	2502      	movs	r5, #2
 8012116:	fb93 f3fc 	sdiv	r3, r3, ip
 801211a:	fb93 f3f5 	sdiv	r3, r3, r5
 801211e:	eb00 1543 	add.w	r5, r0, r3, lsl #5
 8012122:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
 8012126:	f9b4 3116 	ldrsh.w	r3, [r4, #278]	; 0x116
 801212a:	1a52      	subs	r2, r2, r1
 801212c:	eba8 0003 	sub.w	r0, r8, r3
 8012130:	ea4f 1040 	mov.w	r0, r0, lsl #5
 8012134:	d44e      	bmi.n	80121d4 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x13a>
 8012136:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 801213a:	fb92 f1fc 	sdiv	r1, r2, ip
 801213e:	2202      	movs	r2, #2
 8012140:	fb91 f1f2 	sdiv	r1, r1, r2
 8012144:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
 8012148:	4413      	add	r3, r2
 801214a:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
 801214e:	1ad2      	subs	r2, r2, r3
 8012150:	b212      	sxth	r2, r2
 8012152:	3a01      	subs	r2, #1
 8012154:	f005 fa70 	bl	8017638 <_ZN8touchgfx6muldivElll>
 8012158:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 801215c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801215e:	2b00      	cmp	r3, #0
 8012160:	db44      	blt.n	80121ec <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x152>
 8012162:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8012166:	fb93 f3f2 	sdiv	r3, r3, r2
 801216a:	2202      	movs	r2, #2
 801216c:	fb93 f3f2 	sdiv	r3, r3, r2
 8012170:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8012174:	2020      	movs	r0, #32
 8012176:	429d      	cmp	r5, r3
 8012178:	bfde      	ittt	le
 801217a:	461a      	movle	r2, r3
 801217c:	462b      	movle	r3, r5
 801217e:	4615      	movle	r5, r2
 8012180:	b21b      	sxth	r3, r3
 8012182:	2d00      	cmp	r5, #0
 8012184:	bfaa      	itet	ge
 8012186:	351f      	addge	r5, #31
 8012188:	fb95 f5f0 	sdivlt	r5, r5, r0
 801218c:	116d      	asrge	r5, r5, #5
 801218e:	fb93 f3f0 	sdiv	r3, r3, r0
 8012192:	b22d      	sxth	r5, r5
 8012194:	803b      	strh	r3, [r7, #0]
 8012196:	2d00      	cmp	r5, #0
 8012198:	8035      	strh	r5, [r6, #0]
 801219a:	da33      	bge.n	8012204 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x16a>
 801219c:	2000      	movs	r0, #0
 801219e:	8030      	strh	r0, [r6, #0]
 80121a0:	8038      	strh	r0, [r7, #0]
 80121a2:	e787      	b.n	80120b4 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 80121a4:	f06f 0101 	mvn.w	r1, #1
 80121a8:	fb01 5303 	mla	r3, r1, r3, r5
 80121ac:	1e59      	subs	r1, r3, #1
 80121ae:	2302      	movs	r3, #2
 80121b0:	fb91 f1f5 	sdiv	r1, r1, r5
 80121b4:	fb91 f1f3 	sdiv	r1, r1, r3
 80121b8:	4249      	negs	r1, r1
 80121ba:	e7a0      	b.n	80120fe <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x64>
 80121bc:	f06f 0301 	mvn.w	r3, #1
 80121c0:	2502      	movs	r5, #2
 80121c2:	fb03 c301 	mla	r3, r3, r1, ip
 80121c6:	3b01      	subs	r3, #1
 80121c8:	fb93 f3fc 	sdiv	r3, r3, ip
 80121cc:	fb93 f3f5 	sdiv	r3, r3, r5
 80121d0:	425b      	negs	r3, r3
 80121d2:	e7a4      	b.n	801211e <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x84>
 80121d4:	f06f 0101 	mvn.w	r1, #1
 80121d8:	fb01 c202 	mla	r2, r1, r2, ip
 80121dc:	1e51      	subs	r1, r2, #1
 80121de:	2202      	movs	r2, #2
 80121e0:	fb91 f1fc 	sdiv	r1, r1, ip
 80121e4:	fb91 f1f2 	sdiv	r1, r1, r2
 80121e8:	4249      	negs	r1, r1
 80121ea:	e7ab      	b.n	8012144 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xaa>
 80121ec:	f06f 0101 	mvn.w	r1, #1
 80121f0:	fb01 2303 	mla	r3, r1, r3, r2
 80121f4:	3b01      	subs	r3, #1
 80121f6:	fb93 f3f2 	sdiv	r3, r3, r2
 80121fa:	2202      	movs	r2, #2
 80121fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8012200:	425b      	negs	r3, r3
 8012202:	e7b5      	b.n	8012170 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xd6>
 8012204:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 8012208:	f9b7 2000 	ldrsh.w	r2, [r7]
 801220c:	4293      	cmp	r3, r2
 801220e:	dc05      	bgt.n	801221c <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x182>
 8012210:	3b01      	subs	r3, #1
 8012212:	2000      	movs	r0, #0
 8012214:	b21b      	sxth	r3, r3
 8012216:	8033      	strh	r3, [r6, #0]
 8012218:	803b      	strh	r3, [r7, #0]
 801221a:	e74b      	b.n	80120b4 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 801221c:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8012220:	803a      	strh	r2, [r7, #0]
 8012222:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 8012226:	f9b6 2000 	ldrsh.w	r2, [r6]
 801222a:	4293      	cmp	r3, r2
 801222c:	bfdc      	itt	le
 801222e:	f103 33ff 	addle.w	r3, r3, #4294967295
 8012232:	b21a      	sxthle	r2, r3
 8012234:	8032      	strh	r2, [r6, #0]
 8012236:	e750      	b.n	80120da <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x40>

08012238 <_ZN8touchgfx9ContainerC1Ev>:
 8012238:	2101      	movs	r1, #1
 801223a:	2200      	movs	r2, #0
 801223c:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8012240:	4909      	ldr	r1, [pc, #36]	; (8012268 <_ZN8touchgfx9ContainerC1Ev+0x30>)
 8012242:	8082      	strh	r2, [r0, #4]
 8012244:	80c2      	strh	r2, [r0, #6]
 8012246:	8102      	strh	r2, [r0, #8]
 8012248:	8142      	strh	r2, [r0, #10]
 801224a:	8182      	strh	r2, [r0, #12]
 801224c:	81c2      	strh	r2, [r0, #14]
 801224e:	8202      	strh	r2, [r0, #16]
 8012250:	8242      	strh	r2, [r0, #18]
 8012252:	61c2      	str	r2, [r0, #28]
 8012254:	8402      	strh	r2, [r0, #32]
 8012256:	8442      	strh	r2, [r0, #34]	; 0x22
 8012258:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 801225c:	6001      	str	r1, [r0, #0]
 801225e:	6282      	str	r2, [r0, #40]	; 0x28
 8012260:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8012264:	4770      	bx	lr
 8012266:	bf00      	nop
 8012268:	0802a914 	.word	0x0802a914

0801226c <_ZNK8touchgfx7CWRUtil2Q55roundEv>:
 801226c:	6800      	ldr	r0, [r0, #0]
 801226e:	2800      	cmp	r0, #0
 8012270:	bfbd      	ittte	lt
 8012272:	380f      	sublt	r0, #15
 8012274:	2320      	movlt	r3, #32
 8012276:	fb90 f0f3 	sdivlt	r0, r0, r3
 801227a:	3010      	addge	r0, #16
 801227c:	bfa8      	it	ge
 801227e:	1140      	asrge	r0, r0, #5
 8012280:	4770      	bx	lr

08012282 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs>:
 8012282:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012286:	4605      	mov	r5, r0
 8012288:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	; 0x11e
 801228c:	4688      	mov	r8, r1
 801228e:	4691      	mov	r9, r2
 8012290:	469a      	mov	sl, r3
 8012292:	b360      	cbz	r0, 80122ee <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x6c>
 8012294:	2700      	movs	r7, #0
 8012296:	f04f 3bff 	mov.w	fp, #4294967295
 801229a:	b23e      	sxth	r6, r7
 801229c:	f9b5 311e 	ldrsh.w	r3, [r5, #286]	; 0x11e
 80122a0:	42b3      	cmp	r3, r6
 80122a2:	dd23      	ble.n	80122ec <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x6a>
 80122a4:	682b      	ldr	r3, [r5, #0]
 80122a6:	4631      	mov	r1, r6
 80122a8:	4628      	mov	r0, r5
 80122aa:	3701      	adds	r7, #1
 80122ac:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80122b0:	4798      	blx	r3
 80122b2:	9001      	str	r0, [sp, #4]
 80122b4:	a801      	add	r0, sp, #4
 80122b6:	f7ff ffd9 	bl	801226c <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80122ba:	682b      	ldr	r3, [r5, #0]
 80122bc:	eba0 0008 	sub.w	r0, r0, r8
 80122c0:	4631      	mov	r1, r6
 80122c2:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80122c6:	b204      	sxth	r4, r0
 80122c8:	4628      	mov	r0, r5
 80122ca:	4798      	blx	r3
 80122cc:	9001      	str	r0, [sp, #4]
 80122ce:	a801      	add	r0, sp, #4
 80122d0:	f7ff ffcc 	bl	801226c <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80122d4:	eba0 0009 	sub.w	r0, r0, r9
 80122d8:	fb10 f000 	smulbb	r0, r0, r0
 80122dc:	fb04 0404 	mla	r4, r4, r4, r0
 80122e0:	455c      	cmp	r4, fp
 80122e2:	bf3c      	itt	cc
 80122e4:	f8aa 6000 	strhcc.w	r6, [sl]
 80122e8:	46a3      	movcc	fp, r4
 80122ea:	e7d6      	b.n	801229a <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x18>
 80122ec:	2001      	movs	r0, #1
 80122ee:	b003      	add	sp, #12
 80122f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080122f4 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs>:
 80122f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80122f8:	4604      	mov	r4, r0
 80122fa:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	; 0x11e
 80122fe:	4688      	mov	r8, r1
 8012300:	4691      	mov	r9, r2
 8012302:	b1f8      	cbz	r0, 8012344 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x50>
 8012304:	2500      	movs	r5, #0
 8012306:	f04f 37ff 	mov.w	r7, #4294967295
 801230a:	b22e      	sxth	r6, r5
 801230c:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 8012310:	42b3      	cmp	r3, r6
 8012312:	dd16      	ble.n	8012342 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x4e>
 8012314:	6823      	ldr	r3, [r4, #0]
 8012316:	4631      	mov	r1, r6
 8012318:	4620      	mov	r0, r4
 801231a:	3501      	adds	r5, #1
 801231c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8012320:	4798      	blx	r3
 8012322:	9001      	str	r0, [sp, #4]
 8012324:	a801      	add	r0, sp, #4
 8012326:	f7ff ffa1 	bl	801226c <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801232a:	b200      	sxth	r0, r0
 801232c:	eba0 0008 	sub.w	r0, r0, r8
 8012330:	2800      	cmp	r0, #0
 8012332:	bfb8      	it	lt
 8012334:	4240      	neglt	r0, r0
 8012336:	42b8      	cmp	r0, r7
 8012338:	bf3c      	itt	cc
 801233a:	f8a9 6000 	strhcc.w	r6, [r9]
 801233e:	4607      	movcc	r7, r0
 8012340:	e7e3      	b.n	801230a <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x16>
 8012342:	2001      	movs	r0, #1
 8012344:	b003      	add	sp, #12
 8012346:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801234a <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>:
 801234a:	f8a0 3118 	strh.w	r3, [r0, #280]	; 0x118
 801234e:	f9bd 3000 	ldrsh.w	r3, [sp]
 8012352:	f8a0 1114 	strh.w	r1, [r0, #276]	; 0x114
 8012356:	f8a0 2116 	strh.w	r2, [r0, #278]	; 0x116
 801235a:	f8a0 311a 	strh.w	r3, [r0, #282]	; 0x11a
 801235e:	4770      	bx	lr

08012360 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>:
 8012360:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012362:	4604      	mov	r4, r0
 8012364:	3038      	adds	r0, #56	; 0x38
 8012366:	460d      	mov	r5, r1
 8012368:	f7fd fe10 	bl	800ff8c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801236c:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
 8012370:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8012374:	4628      	mov	r0, r5
 8012376:	9200      	str	r2, [sp, #0]
 8012378:	2200      	movs	r2, #0
 801237a:	4611      	mov	r1, r2
 801237c:	f7f3 fa28 	bl	80057d0 <_ZN8touchgfx8Drawable11setPositionEssss>
 8012380:	b003      	add	sp, #12
 8012382:	bd30      	pop	{r4, r5, pc}

08012384 <_ZN8touchgfx17AbstractDataGraph14addLeftElementERNS_23AbstractGraphDecorationE>:
 8012384:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012386:	4604      	mov	r4, r0
 8012388:	3064      	adds	r0, #100	; 0x64
 801238a:	460d      	mov	r5, r1
 801238c:	f7fd fdfe 	bl	800ff8c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8012390:	f9b4 206e 	ldrsh.w	r2, [r4, #110]	; 0x6e
 8012394:	f9b4 306c 	ldrsh.w	r3, [r4, #108]	; 0x6c
 8012398:	4628      	mov	r0, r5
 801239a:	9200      	str	r2, [sp, #0]
 801239c:	2200      	movs	r2, #0
 801239e:	4611      	mov	r1, r2
 80123a0:	f7f3 fa16 	bl	80057d0 <_ZN8touchgfx8Drawable11setPositionEssss>
 80123a4:	b003      	add	sp, #12
 80123a6:	bd30      	pop	{r4, r5, pc}

080123a8 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>:
 80123a8:	b538      	push	{r3, r4, r5, lr}
 80123aa:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
 80123ae:	460d      	mov	r5, r1
 80123b0:	428b      	cmp	r3, r1
 80123b2:	dd08      	ble.n	80123c6 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
 80123b4:	6e04      	ldr	r4, [r0, #96]	; 0x60
 80123b6:	b134      	cbz	r4, 80123c6 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
 80123b8:	6823      	ldr	r3, [r4, #0]
 80123ba:	4620      	mov	r0, r4
 80123bc:	4629      	mov	r1, r5
 80123be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123c0:	4798      	blx	r3
 80123c2:	69a4      	ldr	r4, [r4, #24]
 80123c4:	e7f7      	b.n	80123b6 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0xe>
 80123c6:	bd38      	pop	{r3, r4, r5, pc}

080123c8 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>:
 80123c8:	b570      	push	{r4, r5, r6, lr}
 80123ca:	4606      	mov	r6, r0
 80123cc:	460d      	mov	r5, r1
 80123ce:	f8d0 40e4 	ldr.w	r4, [r0, #228]	; 0xe4
 80123d2:	b134      	cbz	r4, 80123e2 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x1a>
 80123d4:	6823      	ldr	r3, [r4, #0]
 80123d6:	4620      	mov	r0, r4
 80123d8:	4629      	mov	r1, r5
 80123da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123dc:	4798      	blx	r3
 80123de:	69a4      	ldr	r4, [r4, #24]
 80123e0:	e7f7      	b.n	80123d2 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0xa>
 80123e2:	f8d6 4110 	ldr.w	r4, [r6, #272]	; 0x110
 80123e6:	b134      	cbz	r4, 80123f6 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x2e>
 80123e8:	6823      	ldr	r3, [r4, #0]
 80123ea:	4620      	mov	r0, r4
 80123ec:	4629      	mov	r1, r5
 80123ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123f0:	4798      	blx	r3
 80123f2:	69a4      	ldr	r4, [r4, #24]
 80123f4:	e7f7      	b.n	80123e6 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x1e>
 80123f6:	bd70      	pop	{r4, r5, r6, pc}

080123f8 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>:
 80123f8:	b538      	push	{r3, r4, r5, lr}
 80123fa:	4604      	mov	r4, r0
 80123fc:	2500      	movs	r5, #0
 80123fe:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 8012402:	42ab      	cmp	r3, r5
 8012404:	db05      	blt.n	8012412 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv+0x1a>
 8012406:	b229      	sxth	r1, r5
 8012408:	4620      	mov	r0, r4
 801240a:	f7ff ffdd 	bl	80123c8 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>
 801240e:	3501      	adds	r5, #1
 8012410:	e7f5      	b.n	80123fe <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv+0x6>
 8012412:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 8012416:	f004 ff48 	bl	80172aa <_ZNK8touchgfx8Drawable10invalidateEv>
 801241a:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 801241e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012422:	f004 bf42 	b.w	80172aa <_ZNK8touchgfx8Drawable10invalidateEv>

08012426 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>:
 8012426:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012428:	4604      	mov	r4, r0
 801242a:	6e05      	ldr	r5, [r0, #96]	; 0x60
 801242c:	b15d      	cbz	r5, 8012446 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x20>
 801242e:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
 8012432:	4628      	mov	r0, r5
 8012434:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8012438:	9200      	str	r2, [sp, #0]
 801243a:	2200      	movs	r2, #0
 801243c:	4611      	mov	r1, r2
 801243e:	f7f3 f9c7 	bl	80057d0 <_ZN8touchgfx8Drawable11setPositionEssss>
 8012442:	69ad      	ldr	r5, [r5, #24]
 8012444:	e7f2      	b.n	801242c <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x6>
 8012446:	f8d4 50e4 	ldr.w	r5, [r4, #228]	; 0xe4
 801244a:	b15d      	cbz	r5, 8012464 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x3e>
 801244c:	f9b4 20c6 	ldrsh.w	r2, [r4, #198]	; 0xc6
 8012450:	4628      	mov	r0, r5
 8012452:	f9b4 30c4 	ldrsh.w	r3, [r4, #196]	; 0xc4
 8012456:	9200      	str	r2, [sp, #0]
 8012458:	2200      	movs	r2, #0
 801245a:	4611      	mov	r1, r2
 801245c:	f7f3 f9b8 	bl	80057d0 <_ZN8touchgfx8Drawable11setPositionEssss>
 8012460:	69ad      	ldr	r5, [r5, #24]
 8012462:	e7f2      	b.n	801244a <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x24>
 8012464:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
 8012468:	b15d      	cbz	r5, 8012482 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x5c>
 801246a:	f9b4 206e 	ldrsh.w	r2, [r4, #110]	; 0x6e
 801246e:	4628      	mov	r0, r5
 8012470:	f9b4 306c 	ldrsh.w	r3, [r4, #108]	; 0x6c
 8012474:	9200      	str	r2, [sp, #0]
 8012476:	2200      	movs	r2, #0
 8012478:	4611      	mov	r1, r2
 801247a:	f7f3 f9a9 	bl	80057d0 <_ZN8touchgfx8Drawable11setPositionEssss>
 801247e:	69ad      	ldr	r5, [r5, #24]
 8012480:	e7f2      	b.n	8012468 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x42>
 8012482:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 8012486:	b15d      	cbz	r5, 80124a0 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7a>
 8012488:	f9b4 209a 	ldrsh.w	r2, [r4, #154]	; 0x9a
 801248c:	4628      	mov	r0, r5
 801248e:	f9b4 3098 	ldrsh.w	r3, [r4, #152]	; 0x98
 8012492:	9200      	str	r2, [sp, #0]
 8012494:	2200      	movs	r2, #0
 8012496:	4611      	mov	r1, r2
 8012498:	f7f3 f99a 	bl	80057d0 <_ZN8touchgfx8Drawable11setPositionEssss>
 801249c:	69ad      	ldr	r5, [r5, #24]
 801249e:	e7f2      	b.n	8012486 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x60>
 80124a0:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
 80124a4:	b15d      	cbz	r5, 80124be <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x98>
 80124a6:	f9b4 20f2 	ldrsh.w	r2, [r4, #242]	; 0xf2
 80124aa:	4628      	mov	r0, r5
 80124ac:	f9b4 30f0 	ldrsh.w	r3, [r4, #240]	; 0xf0
 80124b0:	9200      	str	r2, [sp, #0]
 80124b2:	2200      	movs	r2, #0
 80124b4:	4611      	mov	r1, r2
 80124b6:	f7f3 f98b 	bl	80057d0 <_ZN8touchgfx8Drawable11setPositionEssss>
 80124ba:	69ad      	ldr	r5, [r5, #24]
 80124bc:	e7f2      	b.n	80124a4 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7e>
 80124be:	6823      	ldr	r3, [r4, #0]
 80124c0:	4620      	mov	r0, r4
 80124c2:	695b      	ldr	r3, [r3, #20]
 80124c4:	b003      	add	sp, #12
 80124c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80124ca:	4718      	bx	r3

080124cc <_ZN8touchgfx17AbstractDataGraph8setWidthEs>:
 80124cc:	b430      	push	{r4, r5}
 80124ce:	b28a      	uxth	r2, r1
 80124d0:	f8b0 4098 	ldrh.w	r4, [r0, #152]	; 0x98
 80124d4:	f8a0 10c4 	strh.w	r1, [r0, #196]	; 0xc4
 80124d8:	1b15      	subs	r5, r2, r4
 80124da:	f8a0 10f0 	strh.w	r1, [r0, #240]	; 0xf0
 80124de:	8101      	strh	r1, [r0, #8]
 80124e0:	f8a0 5094 	strh.w	r5, [r0, #148]	; 0x94
 80124e4:	f8b0 506c 	ldrh.w	r5, [r0, #108]	; 0x6c
 80124e8:	442c      	add	r4, r5
 80124ea:	1b12      	subs	r2, r2, r4
 80124ec:	bc30      	pop	{r4, r5}
 80124ee:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 80124f2:	f7ff bf98 	b.w	8012426 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

080124f6 <_ZN8touchgfx17AbstractDataGraph9setHeightEs>:
 80124f6:	b430      	push	{r4, r5}
 80124f8:	b28a      	uxth	r2, r1
 80124fa:	f8b0 40f2 	ldrh.w	r4, [r0, #242]	; 0xf2
 80124fe:	f8a0 106e 	strh.w	r1, [r0, #110]	; 0x6e
 8012502:	1b15      	subs	r5, r2, r4
 8012504:	f8a0 109a 	strh.w	r1, [r0, #154]	; 0x9a
 8012508:	8141      	strh	r1, [r0, #10]
 801250a:	f8a0 50ee 	strh.w	r5, [r0, #238]	; 0xee
 801250e:	f8b0 50c6 	ldrh.w	r5, [r0, #198]	; 0xc6
 8012512:	442c      	add	r4, r5
 8012514:	1b12      	subs	r2, r2, r4
 8012516:	bc30      	pop	{r4, r5}
 8012518:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
 801251c:	f7ff bf83 	b.w	8012426 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

08012520 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>:
 8012520:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8012524:	fa1f fa83 	uxth.w	sl, r3
 8012528:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
 801252c:	4615      	mov	r5, r2
 801252e:	4699      	mov	r9, r3
 8012530:	fa1f f887 	uxth.w	r8, r7
 8012534:	8903      	ldrh	r3, [r0, #8]
 8012536:	4452      	add	r2, sl
 8012538:	4604      	mov	r4, r0
 801253a:	8940      	ldrh	r0, [r0, #10]
 801253c:	460e      	mov	r6, r1
 801253e:	1a9b      	subs	r3, r3, r2
 8012540:	eb08 0201 	add.w	r2, r8, r1
 8012544:	1a80      	subs	r0, r0, r2
 8012546:	b21b      	sxth	r3, r3
 8012548:	460a      	mov	r2, r1
 801254a:	4629      	mov	r1, r5
 801254c:	b200      	sxth	r0, r0
 801254e:	9000      	str	r0, [sp, #0]
 8012550:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8012554:	f7f3 f93c 	bl	80057d0 <_ZN8touchgfx8Drawable11setPositionEssss>
 8012558:	2200      	movs	r2, #0
 801255a:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 801255e:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 8012562:	4611      	mov	r1, r2
 8012564:	9600      	str	r6, [sp, #0]
 8012566:	f7f3 f933 	bl	80057d0 <_ZN8touchgfx8Drawable11setPositionEssss>
 801256a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801256e:	2200      	movs	r2, #0
 8012570:	f104 0064 	add.w	r0, r4, #100	; 0x64
 8012574:	9300      	str	r3, [sp, #0]
 8012576:	462b      	mov	r3, r5
 8012578:	4611      	mov	r1, r2
 801257a:	f7f3 f929 	bl	80057d0 <_ZN8touchgfx8Drawable11setPositionEssss>
 801257e:	8921      	ldrh	r1, [r4, #8]
 8012580:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8012584:	f104 0090 	add.w	r0, r4, #144	; 0x90
 8012588:	eba1 010a 	sub.w	r1, r1, sl
 801258c:	2200      	movs	r2, #0
 801258e:	9300      	str	r3, [sp, #0]
 8012590:	464b      	mov	r3, r9
 8012592:	b209      	sxth	r1, r1
 8012594:	f7f3 f91c 	bl	80057d0 <_ZN8touchgfx8Drawable11setPositionEssss>
 8012598:	8962      	ldrh	r2, [r4, #10]
 801259a:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 801259e:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80125a2:	eba2 0208 	sub.w	r2, r2, r8
 80125a6:	9700      	str	r7, [sp, #0]
 80125a8:	2100      	movs	r1, #0
 80125aa:	b212      	sxth	r2, r2
 80125ac:	f7f3 f910 	bl	80057d0 <_ZN8touchgfx8Drawable11setPositionEssss>
 80125b0:	4620      	mov	r0, r4
 80125b2:	b002      	add	sp, #8
 80125b4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80125b8:	f7ff bf35 	b.w	8012426 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

080125bc <_ZN8touchgfx17AbstractDataGraphC1Es>:
 80125bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125c0:	b085      	sub	sp, #20
 80125c2:	4604      	mov	r4, r0
 80125c4:	2601      	movs	r6, #1
 80125c6:	2500      	movs	r5, #0
 80125c8:	9103      	str	r1, [sp, #12]
 80125ca:	f7ff fe35 	bl	8012238 <_ZN8touchgfx9ContainerC1Ev>
 80125ce:	4b2c      	ldr	r3, [pc, #176]	; (8012680 <_ZN8touchgfx17AbstractDataGraphC1Es+0xc4>)
 80125d0:	f104 0b38 	add.w	fp, r4, #56	; 0x38
 80125d4:	f104 0964 	add.w	r9, r4, #100	; 0x64
 80125d8:	f104 0890 	add.w	r8, r4, #144	; 0x90
 80125dc:	6023      	str	r3, [r4, #0]
 80125de:	23ff      	movs	r3, #255	; 0xff
 80125e0:	4658      	mov	r0, fp
 80125e2:	f104 0abc 	add.w	sl, r4, #188	; 0xbc
 80125e6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 80125ea:	f104 07e8 	add.w	r7, r4, #232	; 0xe8
 80125ee:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 80125f2:	f7ff fe21 	bl	8012238 <_ZN8touchgfx9ContainerC1Ev>
 80125f6:	4648      	mov	r0, r9
 80125f8:	f7ff fe1e 	bl	8012238 <_ZN8touchgfx9ContainerC1Ev>
 80125fc:	4640      	mov	r0, r8
 80125fe:	f7ff fe1b 	bl	8012238 <_ZN8touchgfx9ContainerC1Ev>
 8012602:	4650      	mov	r0, sl
 8012604:	f7ff fe18 	bl	8012238 <_ZN8touchgfx9ContainerC1Ev>
 8012608:	4638      	mov	r0, r7
 801260a:	f7ff fe15 	bl	8012238 <_ZN8touchgfx9ContainerC1Ev>
 801260e:	9903      	ldr	r1, [sp, #12]
 8012610:	4620      	mov	r0, r4
 8012612:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
 8012616:	f8a4 111c 	strh.w	r1, [r4, #284]	; 0x11c
 801261a:	4659      	mov	r1, fp
 801261c:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
 8012620:	f8a4 511e 	strh.w	r5, [r4, #286]	; 0x11e
 8012624:	f8a4 5120 	strh.w	r5, [r4, #288]	; 0x120
 8012628:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
 801262c:	f8c4 5128 	str.w	r5, [r4, #296]	; 0x128
 8012630:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 8012634:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 8012638:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 801263c:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
 8012640:	f7fd fca4 	bl	800ff8c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8012644:	4651      	mov	r1, sl
 8012646:	4620      	mov	r0, r4
 8012648:	f7fd fca0 	bl	800ff8c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801264c:	4649      	mov	r1, r9
 801264e:	4620      	mov	r0, r4
 8012650:	f7fd fc9c 	bl	800ff8c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8012654:	4641      	mov	r1, r8
 8012656:	4620      	mov	r0, r4
 8012658:	f7fd fc98 	bl	800ff8c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801265c:	4639      	mov	r1, r7
 801265e:	4620      	mov	r0, r4
 8012660:	f7fd fc94 	bl	800ff8c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8012664:	4620      	mov	r0, r4
 8012666:	9500      	str	r5, [sp, #0]
 8012668:	462b      	mov	r3, r5
 801266a:	462a      	mov	r2, r5
 801266c:	4629      	mov	r1, r5
 801266e:	f7ff ff57 	bl	8012520 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
 8012672:	4620      	mov	r0, r4
 8012674:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
 8012678:	b005      	add	sp, #20
 801267a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801267e:	bf00      	nop
 8012680:	0802ade8 	.word	0x0802ade8

08012684 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>:
 8012684:	4291      	cmp	r1, r2
 8012686:	4613      	mov	r3, r2
 8012688:	d003      	beq.n	8012692 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii+0xe>
 801268a:	460a      	mov	r2, r1
 801268c:	4619      	mov	r1, r3
 801268e:	f004 bfd3 	b.w	8017638 <_ZN8touchgfx6muldivElll>
 8012692:	4770      	bx	lr

08012694 <_ZN8touchgfx16DynamicDataGraph9setScaleXEib>:
 8012694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012698:	6803      	ldr	r3, [r0, #0]
 801269a:	460d      	mov	r5, r1
 801269c:	4604      	mov	r4, r0
 801269e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80126a2:	4798      	blx	r3
 80126a4:	42a8      	cmp	r0, r5
 80126a6:	4606      	mov	r6, r0
 80126a8:	d024      	beq.n	80126f4 <_ZN8touchgfx16DynamicDataGraph9setScaleXEib+0x60>
 80126aa:	6823      	ldr	r3, [r4, #0]
 80126ac:	4601      	mov	r1, r0
 80126ae:	462a      	mov	r2, r5
 80126b0:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
 80126b4:	f8d3 70a4 	ldr.w	r7, [r3, #164]	; 0xa4
 80126b8:	f7ff ffe4 	bl	8012684 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 80126bc:	4680      	mov	r8, r0
 80126be:	462a      	mov	r2, r5
 80126c0:	4631      	mov	r1, r6
 80126c2:	f8d4 0130 	ldr.w	r0, [r4, #304]	; 0x130
 80126c6:	f7ff ffdd 	bl	8012684 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 80126ca:	4641      	mov	r1, r8
 80126cc:	4602      	mov	r2, r0
 80126ce:	4620      	mov	r0, r4
 80126d0:	47b8      	blx	r7
 80126d2:	462a      	mov	r2, r5
 80126d4:	4631      	mov	r1, r6
 80126d6:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 80126da:	f7ff ffd3 	bl	8012684 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 80126de:	462a      	mov	r2, r5
 80126e0:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
 80126e4:	4631      	mov	r1, r6
 80126e6:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
 80126ea:	f7ff ffcb 	bl	8012684 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 80126ee:	6325      	str	r5, [r4, #48]	; 0x30
 80126f0:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
 80126f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080126f8 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib>:
 80126f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80126fc:	4604      	mov	r4, r0
 80126fe:	460f      	mov	r7, r1
 8012700:	b1b2      	cbz	r2, 8012730 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x38>
 8012702:	6803      	ldr	r3, [r0, #0]
 8012704:	2600      	movs	r6, #0
 8012706:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801270a:	4798      	blx	r3
 801270c:	4681      	mov	r9, r0
 801270e:	b235      	sxth	r5, r6
 8012710:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 8012714:	3601      	adds	r6, #1
 8012716:	42ab      	cmp	r3, r5
 8012718:	dd0a      	ble.n	8012730 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x38>
 801271a:	f8d4 8144 	ldr.w	r8, [r4, #324]	; 0x144
 801271e:	463a      	mov	r2, r7
 8012720:	4649      	mov	r1, r9
 8012722:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]
 8012726:	f7ff ffad 	bl	8012684 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 801272a:	f848 0025 	str.w	r0, [r8, r5, lsl #2]
 801272e:	e7ee      	b.n	801270e <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x16>
 8012730:	6367      	str	r7, [r4, #52]	; 0x34
 8012732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08012736 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>:
 8012736:	b570      	push	{r4, r5, r6, lr}
 8012738:	6803      	ldr	r3, [r0, #0]
 801273a:	4604      	mov	r4, r0
 801273c:	460d      	mov	r5, r1
 801273e:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8012742:	4798      	blx	r3
 8012744:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 8012748:	4629      	mov	r1, r5
 801274a:	4620      	mov	r0, r4
 801274c:	3301      	adds	r3, #1
 801274e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
 8012752:	6823      	ldr	r3, [r4, #0]
 8012754:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012758:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 801275c:	4718      	bx	r3

0801275e <_ZN8touchgfx16GraphElementLineD1Ev>:
 801275e:	4770      	bx	lr

08012760 <_ZN8touchgfx16GraphElementLineD0Ev>:
 8012760:	b510      	push	{r4, lr}
 8012762:	4604      	mov	r4, r0
 8012764:	2130      	movs	r1, #48	; 0x30
 8012766:	f013 fa24 	bl	8025bb2 <_ZdlPvj>
 801276a:	4620      	mov	r0, r4
 801276c:	bd10      	pop	{r4, pc}

0801276e <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801276e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012770:	4604      	mov	r4, r0
 8012772:	4608      	mov	r0, r1
 8012774:	460d      	mov	r5, r1
 8012776:	f7fd fdd0 	bl	801031a <_ZNK8touchgfx4Rect7isEmptyEv>
 801277a:	b978      	cbnz	r0, 801279c <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801277c:	4620      	mov	r0, r4
 801277e:	f7fd fdcc 	bl	801031a <_ZNK8touchgfx4Rect7isEmptyEv>
 8012782:	f9b5 6000 	ldrsh.w	r6, [r5]
 8012786:	b150      	cbz	r0, 801279e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8012788:	8026      	strh	r6, [r4, #0]
 801278a:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801278e:	8063      	strh	r3, [r4, #2]
 8012790:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8012794:	80a3      	strh	r3, [r4, #4]
 8012796:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801279a:	80e3      	strh	r3, [r4, #6]
 801279c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801279e:	f9b4 1000 	ldrsh.w	r1, [r4]
 80127a2:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80127a6:	42b1      	cmp	r1, r6
 80127a8:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 80127ac:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 80127b0:	460f      	mov	r7, r1
 80127b2:	88ed      	ldrh	r5, [r5, #6]
 80127b4:	bfa8      	it	ge
 80127b6:	4637      	movge	r7, r6
 80127b8:	4293      	cmp	r3, r2
 80127ba:	4618      	mov	r0, r3
 80127bc:	4466      	add	r6, ip
 80127be:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 80127c2:	bfa8      	it	ge
 80127c4:	4610      	movge	r0, r2
 80127c6:	442a      	add	r2, r5
 80127c8:	88e5      	ldrh	r5, [r4, #6]
 80127ca:	4461      	add	r1, ip
 80127cc:	b236      	sxth	r6, r6
 80127ce:	8027      	strh	r7, [r4, #0]
 80127d0:	442b      	add	r3, r5
 80127d2:	b209      	sxth	r1, r1
 80127d4:	b212      	sxth	r2, r2
 80127d6:	8060      	strh	r0, [r4, #2]
 80127d8:	b21b      	sxth	r3, r3
 80127da:	428e      	cmp	r6, r1
 80127dc:	bfac      	ite	ge
 80127de:	ebc7 0106 	rsbge	r1, r7, r6
 80127e2:	ebc7 0101 	rsblt	r1, r7, r1
 80127e6:	429a      	cmp	r2, r3
 80127e8:	bfac      	ite	ge
 80127ea:	ebc0 0202 	rsbge	r2, r0, r2
 80127ee:	ebc0 0203 	rsblt	r2, r0, r3
 80127f2:	80a1      	strh	r1, [r4, #4]
 80127f4:	80e2      	strh	r2, [r4, #6]
 80127f6:	e7d1      	b.n	801279c <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>

080127f8 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE>:
 80127f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127fc:	6803      	ldr	r3, [r0, #0]
 80127fe:	b093      	sub	sp, #76	; 0x4c
 8012800:	6945      	ldr	r5, [r0, #20]
 8012802:	4604      	mov	r4, r0
 8012804:	460f      	mov	r7, r1
 8012806:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012808:	2d00      	cmp	r5, #0
 801280a:	f000 81ad 	beq.w	8012b68 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x370>
 801280e:	696d      	ldr	r5, [r5, #20]
 8012810:	4798      	blx	r3
 8012812:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8012816:	2b00      	cmp	r3, #0
 8012818:	d077      	beq.n	801290a <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 801281a:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 801281e:	fb13 f000 	smulbb	r0, r3, r0
 8012822:	b283      	uxth	r3, r0
 8012824:	1c58      	adds	r0, r3, #1
 8012826:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801282a:	1200      	asrs	r0, r0, #8
 801282c:	d06d      	beq.n	801290a <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 801282e:	b2c3      	uxtb	r3, r0
 8012830:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 8012834:	462a      	mov	r2, r5
 8012836:	4621      	mov	r1, r4
 8012838:	9308      	str	r3, [sp, #32]
 801283a:	4640      	mov	r0, r8
 801283c:	6823      	ldr	r3, [r4, #0]
 801283e:	ae0e      	add	r6, sp, #56	; 0x38
 8012840:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012844:	4798      	blx	r3
 8012846:	e898 0003 	ldmia.w	r8, {r0, r1}
 801284a:	e886 0003 	stmia.w	r6, {r0, r1}
 801284e:	4639      	mov	r1, r7
 8012850:	4630      	mov	r0, r6
 8012852:	f7fd fd1f 	bl	8010294 <_ZN8touchgfx4RectaNERKS0_>
 8012856:	6823      	ldr	r3, [r4, #0]
 8012858:	4629      	mov	r1, r5
 801285a:	4620      	mov	r0, r4
 801285c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012860:	4798      	blx	r3
 8012862:	6823      	ldr	r3, [r4, #0]
 8012864:	4607      	mov	r7, r0
 8012866:	4629      	mov	r1, r5
 8012868:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801286c:	4620      	mov	r0, r4
 801286e:	4798      	blx	r3
 8012870:	4681      	mov	r9, r0
 8012872:	f894 0038 	ldrb.w	r0, [r4, #56]	; 0x38
 8012876:	4629      	mov	r1, r5
 8012878:	0103      	lsls	r3, r0, #4
 801287a:	4620      	mov	r0, r4
 801287c:	9309      	str	r3, [sp, #36]	; 0x24
 801287e:	6823      	ldr	r3, [r4, #0]
 8012880:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8012884:	4798      	blx	r3
 8012886:	4629      	mov	r1, r5
 8012888:	b203      	sxth	r3, r0
 801288a:	4620      	mov	r0, r4
 801288c:	9306      	str	r3, [sp, #24]
 801288e:	6823      	ldr	r3, [r4, #0]
 8012890:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8012894:	4798      	blx	r3
 8012896:	2f00      	cmp	r7, #0
 8012898:	b203      	sxth	r3, r0
 801289a:	9307      	str	r3, [sp, #28]
 801289c:	d138      	bne.n	8012910 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x118>
 801289e:	f1b9 0f00 	cmp.w	r9, #0
 80128a2:	d132      	bne.n	801290a <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 80128a4:	6823      	ldr	r3, [r4, #0]
 80128a6:	464a      	mov	r2, r9
 80128a8:	4629      	mov	r1, r5
 80128aa:	4620      	mov	r0, r4
 80128ac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80128b0:	4798      	blx	r3
 80128b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80128b4:	1ac0      	subs	r0, r0, r3
 80128b6:	9010      	str	r0, [sp, #64]	; 0x40
 80128b8:	4640      	mov	r0, r8
 80128ba:	f7ff fcd7 	bl	801226c <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80128be:	6823      	ldr	r3, [r4, #0]
 80128c0:	4607      	mov	r7, r0
 80128c2:	4629      	mov	r1, r5
 80128c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80128c8:	4620      	mov	r0, r4
 80128ca:	4798      	blx	r3
 80128cc:	1a38      	subs	r0, r7, r0
 80128ce:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80128d2:	fa0f f880 	sxth.w	r8, r0
 80128d6:	eb13 0f08 	cmn.w	r3, r8
 80128da:	d416      	bmi.n	801290a <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 80128dc:	6823      	ldr	r3, [r4, #0]
 80128de:	4629      	mov	r1, r5
 80128e0:	4620      	mov	r0, r4
 80128e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80128e6:	4798      	blx	r3
 80128e8:	4580      	cmp	r8, r0
 80128ea:	da0e      	bge.n	801290a <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 80128ec:	9a08      	ldr	r2, [sp, #32]
 80128ee:	b23f      	sxth	r7, r7
 80128f0:	6823      	ldr	r3, [r4, #0]
 80128f2:	4631      	mov	r1, r6
 80128f4:	9202      	str	r2, [sp, #8]
 80128f6:	4620      	mov	r0, r4
 80128f8:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 80128fc:	9700      	str	r7, [sp, #0]
 80128fe:	9201      	str	r2, [sp, #4]
 8012900:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8012904:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012908:	47a8      	blx	r5
 801290a:	b013      	add	sp, #76	; 0x4c
 801290c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012910:	ddfb      	ble.n	801290a <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8012912:	6823      	ldr	r3, [r4, #0]
 8012914:	4629      	mov	r1, r5
 8012916:	4620      	mov	r0, r4
 8012918:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801291c:	4798      	blx	r3
 801291e:	6823      	ldr	r3, [r4, #0]
 8012920:	4683      	mov	fp, r0
 8012922:	4629      	mov	r1, r5
 8012924:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8012928:	4620      	mov	r0, r4
 801292a:	4798      	blx	r3
 801292c:	eba0 030b 	sub.w	r3, r0, fp
 8012930:	4680      	mov	r8, r0
 8012932:	2b00      	cmp	r3, #0
 8012934:	bfb8      	it	lt
 8012936:	425b      	neglt	r3, r3
 8012938:	fb93 f3f7 	sdiv	r3, r3, r7
 801293c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8012940:	dce3      	bgt.n	801290a <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8012942:	6823      	ldr	r3, [r4, #0]
 8012944:	465a      	mov	r2, fp
 8012946:	4629      	mov	r1, r5
 8012948:	4620      	mov	r0, r4
 801294a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801294e:	4798      	blx	r3
 8012950:	6823      	ldr	r3, [r4, #0]
 8012952:	4606      	mov	r6, r0
 8012954:	4642      	mov	r2, r8
 8012956:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801295a:	4629      	mov	r1, r5
 801295c:	4620      	mov	r0, r4
 801295e:	4798      	blx	r3
 8012960:	42b0      	cmp	r0, r6
 8012962:	bfa2      	ittt	ge
 8012964:	4643      	movge	r3, r8
 8012966:	46d8      	movge	r8, fp
 8012968:	469b      	movge	fp, r3
 801296a:	fb98 f6f7 	sdiv	r6, r8, r7
 801296e:	fb9b f2f7 	sdiv	r2, fp, r7
 8012972:	45d8      	cmp	r8, fp
 8012974:	bfac      	ite	ge
 8012976:	f04f 33ff 	movge.w	r3, #4294967295
 801297a:	2301      	movlt	r3, #1
 801297c:	1af6      	subs	r6, r6, r3
 801297e:	441a      	add	r2, r3
 8012980:	4296      	cmp	r6, r2
 8012982:	bfac      	ite	ge
 8012984:	f04f 3aff 	movge.w	sl, #4294967295
 8012988:	f04f 0a01 	movlt.w	sl, #1
 801298c:	f1b9 0f00 	cmp.w	r9, #0
 8012990:	d13e      	bne.n	8012a10 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x218>
 8012992:	fb07 fb0a 	mul.w	fp, r7, sl
 8012996:	eb0a 0802 	add.w	r8, sl, r2
 801299a:	4377      	muls	r7, r6
 801299c:	45b0      	cmp	r8, r6
 801299e:	d0b4      	beq.n	801290a <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 80129a0:	6823      	ldr	r3, [r4, #0]
 80129a2:	463a      	mov	r2, r7
 80129a4:	4629      	mov	r1, r5
 80129a6:	4620      	mov	r0, r4
 80129a8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80129ac:	4798      	blx	r3
 80129ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80129b0:	1ac0      	subs	r0, r0, r3
 80129b2:	9010      	str	r0, [sp, #64]	; 0x40
 80129b4:	a810      	add	r0, sp, #64	; 0x40
 80129b6:	f7ff fc59 	bl	801226c <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80129ba:	6823      	ldr	r3, [r4, #0]
 80129bc:	4681      	mov	r9, r0
 80129be:	4629      	mov	r1, r5
 80129c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80129c4:	4620      	mov	r0, r4
 80129c6:	4798      	blx	r3
 80129c8:	eba9 0000 	sub.w	r0, r9, r0
 80129cc:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 80129d0:	b203      	sxth	r3, r0
 80129d2:	42da      	cmn	r2, r3
 80129d4:	9304      	str	r3, [sp, #16]
 80129d6:	d418      	bmi.n	8012a0a <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x212>
 80129d8:	6822      	ldr	r2, [r4, #0]
 80129da:	4629      	mov	r1, r5
 80129dc:	4620      	mov	r0, r4
 80129de:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
 80129e2:	4790      	blx	r2
 80129e4:	9b04      	ldr	r3, [sp, #16]
 80129e6:	4283      	cmp	r3, r0
 80129e8:	da0f      	bge.n	8012a0a <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x212>
 80129ea:	9b08      	ldr	r3, [sp, #32]
 80129ec:	a90e      	add	r1, sp, #56	; 0x38
 80129ee:	6822      	ldr	r2, [r4, #0]
 80129f0:	4620      	mov	r0, r4
 80129f2:	9302      	str	r3, [sp, #8]
 80129f4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80129f8:	9301      	str	r3, [sp, #4]
 80129fa:	fa0f f389 	sxth.w	r3, r9
 80129fe:	9300      	str	r3, [sp, #0]
 8012a00:	f8d2 9088 	ldr.w	r9, [r2, #136]	; 0x88
 8012a04:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012a08:	47c8      	blx	r9
 8012a0a:	4456      	add	r6, sl
 8012a0c:	445f      	add	r7, fp
 8012a0e:	e7c5      	b.n	801299c <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x1a4>
 8012a10:	fb98 f8f9 	sdiv	r8, r8, r9
 8012a14:	eba8 0203 	sub.w	r2, r8, r3
 8012a18:	4629      	mov	r1, r5
 8012a1a:	4620      	mov	r0, r4
 8012a1c:	9204      	str	r2, [sp, #16]
 8012a1e:	fb9b f8f9 	sdiv	r8, fp, r9
 8012a22:	4498      	add	r8, r3
 8012a24:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
 8012a28:	4542      	cmp	r2, r8
 8012a2a:	bfac      	ite	ge
 8012a2c:	f04f 33ff 	movge.w	r3, #4294967295
 8012a30:	2301      	movlt	r3, #1
 8012a32:	fb02 f209 	mul.w	r2, r2, r9
 8012a36:	930a      	str	r3, [sp, #40]	; 0x28
 8012a38:	6823      	ldr	r3, [r4, #0]
 8012a3a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8012a3e:	4798      	blx	r3
 8012a40:	f84b 0d08 	str.w	r0, [fp, #-8]!
 8012a44:	4658      	mov	r0, fp
 8012a46:	f7ff fc11 	bl	801226c <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8012a4a:	fb06 f207 	mul.w	r2, r6, r7
 8012a4e:	b203      	sxth	r3, r0
 8012a50:	4629      	mov	r1, r5
 8012a52:	4620      	mov	r0, r4
 8012a54:	9305      	str	r3, [sp, #20]
 8012a56:	6823      	ldr	r3, [r4, #0]
 8012a58:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8012a5c:	4798      	blx	r3
 8012a5e:	9010      	str	r0, [sp, #64]	; 0x40
 8012a60:	4658      	mov	r0, fp
 8012a62:	f7ff fc03 	bl	801226c <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8012a66:	fb07 f20a 	mul.w	r2, r7, sl
 8012a6a:	b203      	sxth	r3, r0
 8012a6c:	920b      	str	r2, [sp, #44]	; 0x2c
 8012a6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012a70:	4442      	add	r2, r8
 8012a72:	920c      	str	r2, [sp, #48]	; 0x30
 8012a74:	9a05      	ldr	r2, [sp, #20]
 8012a76:	429a      	cmp	r2, r3
 8012a78:	dc16      	bgt.n	8012aa8 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x2b0>
 8012a7a:	eb06 080a 	add.w	r8, r6, sl
 8012a7e:	fb07 f808 	mul.w	r8, r7, r8
 8012a82:	9a05      	ldr	r2, [sp, #20]
 8012a84:	429a      	cmp	r2, r3
 8012a86:	db54      	blt.n	8012b32 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x33a>
 8012a88:	6823      	ldr	r3, [r4, #0]
 8012a8a:	4642      	mov	r2, r8
 8012a8c:	4629      	mov	r1, r5
 8012a8e:	4620      	mov	r0, r4
 8012a90:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8012a94:	4456      	add	r6, sl
 8012a96:	4798      	blx	r3
 8012a98:	9010      	str	r0, [sp, #64]	; 0x40
 8012a9a:	4658      	mov	r0, fp
 8012a9c:	f7ff fbe6 	bl	801226c <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8012aa0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012aa2:	b203      	sxth	r3, r0
 8012aa4:	4490      	add	r8, r2
 8012aa6:	e7ec      	b.n	8012a82 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x28a>
 8012aa8:	6823      	ldr	r3, [r4, #0]
 8012aaa:	fb07 f206 	mul.w	r2, r7, r6
 8012aae:	4629      	mov	r1, r5
 8012ab0:	4620      	mov	r0, r4
 8012ab2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8012ab6:	4798      	blx	r3
 8012ab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012aba:	1ac0      	subs	r0, r0, r3
 8012abc:	9010      	str	r0, [sp, #64]	; 0x40
 8012abe:	4658      	mov	r0, fp
 8012ac0:	f7ff fbd4 	bl	801226c <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8012ac4:	6823      	ldr	r3, [r4, #0]
 8012ac6:	4680      	mov	r8, r0
 8012ac8:	4629      	mov	r1, r5
 8012aca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8012ace:	4620      	mov	r0, r4
 8012ad0:	4798      	blx	r3
 8012ad2:	eba8 0000 	sub.w	r0, r8, r0
 8012ad6:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8012ada:	b203      	sxth	r3, r0
 8012adc:	42da      	cmn	r2, r3
 8012ade:	930d      	str	r3, [sp, #52]	; 0x34
 8012ae0:	d418      	bmi.n	8012b14 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x31c>
 8012ae2:	6822      	ldr	r2, [r4, #0]
 8012ae4:	4629      	mov	r1, r5
 8012ae6:	4620      	mov	r0, r4
 8012ae8:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
 8012aec:	4790      	blx	r2
 8012aee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012af0:	4283      	cmp	r3, r0
 8012af2:	da0f      	bge.n	8012b14 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x31c>
 8012af4:	9b08      	ldr	r3, [sp, #32]
 8012af6:	a90e      	add	r1, sp, #56	; 0x38
 8012af8:	6822      	ldr	r2, [r4, #0]
 8012afa:	4620      	mov	r0, r4
 8012afc:	9302      	str	r3, [sp, #8]
 8012afe:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8012b02:	9301      	str	r3, [sp, #4]
 8012b04:	fa0f f388 	sxth.w	r3, r8
 8012b08:	9300      	str	r3, [sp, #0]
 8012b0a:	f8d2 8088 	ldr.w	r8, [r2, #136]	; 0x88
 8012b0e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012b12:	47c0      	blx	r8
 8012b14:	6823      	ldr	r3, [r4, #0]
 8012b16:	4456      	add	r6, sl
 8012b18:	4629      	mov	r1, r5
 8012b1a:	4620      	mov	r0, r4
 8012b1c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8012b20:	fb06 f207 	mul.w	r2, r6, r7
 8012b24:	4798      	blx	r3
 8012b26:	9010      	str	r0, [sp, #64]	; 0x40
 8012b28:	4658      	mov	r0, fp
 8012b2a:	f7ff fb9f 	bl	801226c <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8012b2e:	b203      	sxth	r3, r0
 8012b30:	e7a0      	b.n	8012a74 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x27c>
 8012b32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012b34:	930d      	str	r3, [sp, #52]	; 0x34
 8012b36:	9b04      	ldr	r3, [sp, #16]
 8012b38:	4413      	add	r3, r2
 8012b3a:	9304      	str	r3, [sp, #16]
 8012b3c:	9a04      	ldr	r2, [sp, #16]
 8012b3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012b40:	4293      	cmp	r3, r2
 8012b42:	f43f aee2 	beq.w	801290a <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8012b46:	9b04      	ldr	r3, [sp, #16]
 8012b48:	4629      	mov	r1, r5
 8012b4a:	6822      	ldr	r2, [r4, #0]
 8012b4c:	4620      	mov	r0, r4
 8012b4e:	f8d2 80ac 	ldr.w	r8, [r2, #172]	; 0xac
 8012b52:	fb03 f209 	mul.w	r2, r3, r9
 8012b56:	47c0      	blx	r8
 8012b58:	9010      	str	r0, [sp, #64]	; 0x40
 8012b5a:	4658      	mov	r0, fp
 8012b5c:	f7ff fb86 	bl	801226c <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8012b60:	b203      	sxth	r3, r0
 8012b62:	9305      	str	r3, [sp, #20]
 8012b64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012b66:	e785      	b.n	8012a74 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x27c>
 8012b68:	4798      	blx	r3
 8012b6a:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8012b6e:	deff      	udf	#255	; 0xff

08012b70 <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>:
 8012b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b72:	9906      	ldr	r1, [sp, #24]
 8012b74:	4606      	mov	r6, r0
 8012b76:	461c      	mov	r4, r3
 8012b78:	2020      	movs	r0, #32
 8012b7a:	4291      	cmp	r1, r2
 8012b7c:	bfbc      	itt	lt
 8012b7e:	9206      	strlt	r2, [sp, #24]
 8012b80:	460a      	movlt	r2, r1
 8012b82:	9907      	ldr	r1, [sp, #28]
 8012b84:	428b      	cmp	r3, r1
 8012b86:	bfc4      	itt	gt
 8012b88:	460c      	movgt	r4, r1
 8012b8a:	9307      	strgt	r3, [sp, #28]
 8012b8c:	fb92 f5f0 	sdiv	r5, r2, r0
 8012b90:	fb94 f4f0 	sdiv	r4, r4, r0
 8012b94:	a806      	add	r0, sp, #24
 8012b96:	f7fe fdfe 	bl	8011796 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8012b9a:	4607      	mov	r7, r0
 8012b9c:	a807      	add	r0, sp, #28
 8012b9e:	f7fe fdfa 	bl	8011796 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8012ba2:	1b7a      	subs	r2, r7, r5
 8012ba4:	1b00      	subs	r0, r0, r4
 8012ba6:	8035      	strh	r5, [r6, #0]
 8012ba8:	8074      	strh	r4, [r6, #2]
 8012baa:	80f0      	strh	r0, [r6, #6]
 8012bac:	4630      	mov	r0, r6
 8012bae:	80b2      	strh	r2, [r6, #4]
 8012bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012bb2 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>:
 8012bb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012bb4:	9c08      	ldr	r4, [sp, #32]
 8012bb6:	2602      	movs	r6, #2
 8012bb8:	4605      	mov	r5, r0
 8012bba:	3401      	adds	r4, #1
 8012bbc:	fb94 f4f6 	sdiv	r4, r4, r6
 8012bc0:	18a6      	adds	r6, r4, r2
 8012bc2:	191f      	adds	r7, r3, r4
 8012bc4:	1b12      	subs	r2, r2, r4
 8012bc6:	1b1b      	subs	r3, r3, r4
 8012bc8:	e9cd 6700 	strd	r6, r7, [sp]
 8012bcc:	f7ff ffd0 	bl	8012b70 <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>
 8012bd0:	4628      	mov	r0, r5
 8012bd2:	b003      	add	sp, #12
 8012bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012bd6 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs>:
 8012bd6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012bda:	6943      	ldr	r3, [r0, #20]
 8012bdc:	b087      	sub	sp, #28
 8012bde:	4606      	mov	r6, r0
 8012be0:	460d      	mov	r5, r1
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d072      	beq.n	8012ccc <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0xf6>
 8012be6:	695c      	ldr	r4, [r3, #20]
 8012be8:	f890 702c 	ldrb.w	r7, [r0, #44]	; 0x2c
 8012bec:	6823      	ldr	r3, [r4, #0]
 8012bee:	4620      	mov	r0, r4
 8012bf0:	017f      	lsls	r7, r7, #5
 8012bf2:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8012bf6:	4798      	blx	r3
 8012bf8:	6823      	ldr	r3, [r4, #0]
 8012bfa:	4680      	mov	r8, r0
 8012bfc:	4629      	mov	r1, r5
 8012bfe:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8012c02:	4620      	mov	r0, r4
 8012c04:	4798      	blx	r3
 8012c06:	9700      	str	r7, [sp, #0]
 8012c08:	4603      	mov	r3, r0
 8012c0a:	4642      	mov	r2, r8
 8012c0c:	4631      	mov	r1, r6
 8012c0e:	a802      	add	r0, sp, #8
 8012c10:	f7ff ffcf 	bl	8012bb2 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 8012c14:	2d00      	cmp	r5, #0
 8012c16:	dd1b      	ble.n	8012c50 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0x7a>
 8012c18:	f105 38ff 	add.w	r8, r5, #4294967295
 8012c1c:	6823      	ldr	r3, [r4, #0]
 8012c1e:	4620      	mov	r0, r4
 8012c20:	fa0f f888 	sxth.w	r8, r8
 8012c24:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8012c28:	4641      	mov	r1, r8
 8012c2a:	4798      	blx	r3
 8012c2c:	6823      	ldr	r3, [r4, #0]
 8012c2e:	4681      	mov	r9, r0
 8012c30:	4641      	mov	r1, r8
 8012c32:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8012c36:	4620      	mov	r0, r4
 8012c38:	4798      	blx	r3
 8012c3a:	4631      	mov	r1, r6
 8012c3c:	4603      	mov	r3, r0
 8012c3e:	9700      	str	r7, [sp, #0]
 8012c40:	a804      	add	r0, sp, #16
 8012c42:	464a      	mov	r2, r9
 8012c44:	f7ff ffb5 	bl	8012bb2 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 8012c48:	a904      	add	r1, sp, #16
 8012c4a:	a802      	add	r0, sp, #8
 8012c4c:	f7ff fd8f 	bl	801276e <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8012c50:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 8012c54:	3b01      	subs	r3, #1
 8012c56:	429d      	cmp	r5, r3
 8012c58:	da19      	bge.n	8012c8e <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0xb8>
 8012c5a:	3501      	adds	r5, #1
 8012c5c:	6823      	ldr	r3, [r4, #0]
 8012c5e:	4620      	mov	r0, r4
 8012c60:	b22d      	sxth	r5, r5
 8012c62:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8012c66:	4629      	mov	r1, r5
 8012c68:	4798      	blx	r3
 8012c6a:	6823      	ldr	r3, [r4, #0]
 8012c6c:	4680      	mov	r8, r0
 8012c6e:	4629      	mov	r1, r5
 8012c70:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8012c74:	4620      	mov	r0, r4
 8012c76:	4798      	blx	r3
 8012c78:	4631      	mov	r1, r6
 8012c7a:	4603      	mov	r3, r0
 8012c7c:	9700      	str	r7, [sp, #0]
 8012c7e:	a804      	add	r0, sp, #16
 8012c80:	4642      	mov	r2, r8
 8012c82:	f7ff ff96 	bl	8012bb2 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 8012c86:	a904      	add	r1, sp, #16
 8012c88:	a802      	add	r0, sp, #8
 8012c8a:	f7ff fd70 	bl	801276e <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8012c8e:	f9b4 1114 	ldrsh.w	r1, [r4, #276]	; 0x114
 8012c92:	f8b4 311a 	ldrh.w	r3, [r4, #282]	; 0x11a
 8012c96:	f9b4 0040 	ldrsh.w	r0, [r4, #64]	; 0x40
 8012c9a:	18ca      	adds	r2, r1, r3
 8012c9c:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 8012ca0:	f8ad 1012 	strh.w	r1, [sp, #18]
 8012ca4:	a904      	add	r1, sp, #16
 8012ca6:	1a9b      	subs	r3, r3, r2
 8012ca8:	2200      	movs	r2, #0
 8012caa:	f8ad 0014 	strh.w	r0, [sp, #20]
 8012cae:	a802      	add	r0, sp, #8
 8012cb0:	f8ad 2010 	strh.w	r2, [sp, #16]
 8012cb4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012cb8:	f7fd faec 	bl	8010294 <_ZN8touchgfx4RectaNERKS0_>
 8012cbc:	6833      	ldr	r3, [r6, #0]
 8012cbe:	a902      	add	r1, sp, #8
 8012cc0:	4630      	mov	r0, r6
 8012cc2:	691b      	ldr	r3, [r3, #16]
 8012cc4:	4798      	blx	r3
 8012cc6:	b007      	add	sp, #28
 8012cc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012ccc:	681b      	ldr	r3, [r3, #0]
 8012cce:	deff      	udf	#255	; 0xff

08012cd0 <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE>:
 8012cd0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	da05      	bge.n	8012ce4 <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE+0x14>
 8012cd8:	b29b      	uxth	r3, r3
 8012cda:	880a      	ldrh	r2, [r1, #0]
 8012cdc:	441a      	add	r2, r3
 8012cde:	425b      	negs	r3, r3
 8012ce0:	800a      	strh	r2, [r1, #0]
 8012ce2:	808b      	strh	r3, [r1, #4]
 8012ce4:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	da05      	bge.n	8012cf8 <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE+0x28>
 8012cec:	b29b      	uxth	r3, r3
 8012cee:	884a      	ldrh	r2, [r1, #2]
 8012cf0:	441a      	add	r2, r3
 8012cf2:	425b      	negs	r3, r3
 8012cf4:	804a      	strh	r2, [r1, #2]
 8012cf6:	80cb      	strh	r3, [r1, #6]
 8012cf8:	4770      	bx	lr

08012cfa <_ZNK8touchgfx20GraphElementGridBase8drawLineERKNS_4RectEssssh>:
 8012cfa:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8012cfc:	4604      	mov	r4, r0
 8012cfe:	460d      	mov	r5, r1
 8012d00:	6801      	ldr	r1, [r0, #0]
 8012d02:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 8012d06:	9001      	str	r0, [sp, #4]
 8012d08:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 8012d0c:	9000      	str	r0, [sp, #0]
 8012d0e:	a802      	add	r0, sp, #8
 8012d10:	f8d1 6090 	ldr.w	r6, [r1, #144]	; 0x90
 8012d14:	4621      	mov	r1, r4
 8012d16:	47b0      	blx	r6
 8012d18:	a902      	add	r1, sp, #8
 8012d1a:	4620      	mov	r0, r4
 8012d1c:	f7ff ffd8 	bl	8012cd0 <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE>
 8012d20:	a802      	add	r0, sp, #8
 8012d22:	4629      	mov	r1, r5
 8012d24:	f7fd fab6 	bl	8010294 <_ZN8touchgfx4RectaNERKS0_>
 8012d28:	a802      	add	r0, sp, #8
 8012d2a:	f7fd faf6 	bl	801031a <_ZNK8touchgfx4Rect7isEmptyEv>
 8012d2e:	b968      	cbnz	r0, 8012d4c <_ZNK8touchgfx20GraphElementGridBase8drawLineERKNS_4RectEssssh+0x52>
 8012d30:	6823      	ldr	r3, [r4, #0]
 8012d32:	a902      	add	r1, sp, #8
 8012d34:	4620      	mov	r0, r4
 8012d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d38:	4798      	blx	r3
 8012d3a:	f7fd fd7b 	bl	8010834 <_ZN8touchgfx3HAL3lcdEv>
 8012d3e:	6803      	ldr	r3, [r0, #0]
 8012d40:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8012d42:	a902      	add	r1, sp, #8
 8012d44:	6a1d      	ldr	r5, [r3, #32]
 8012d46:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8012d4a:	47a8      	blx	r5
 8012d4c:	b004      	add	sp, #16
 8012d4e:	bd70      	pop	{r4, r5, r6, pc}

08012d50 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>:
 8012d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d54:	b08b      	sub	sp, #44	; 0x2c
 8012d56:	461e      	mov	r6, r3
 8012d58:	460f      	mov	r7, r1
 8012d5a:	4615      	mov	r5, r2
 8012d5c:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
 8012d60:	429e      	cmp	r6, r3
 8012d62:	9304      	str	r3, [sp, #16]
 8012d64:	d074      	beq.n	8012e50 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x100>
 8012d66:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8012d6a:	4631      	mov	r1, r6
 8012d6c:	4610      	mov	r0, r2
 8012d6e:	4634      	mov	r4, r6
 8012d70:	015b      	lsls	r3, r3, #5
 8012d72:	9303      	str	r3, [sp, #12]
 8012d74:	6813      	ldr	r3, [r2, #0]
 8012d76:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8012d7a:	4798      	blx	r3
 8012d7c:	ab0a      	add	r3, sp, #40	; 0x28
 8012d7e:	f843 0d10 	str.w	r0, [r3, #-16]!
 8012d82:	4618      	mov	r0, r3
 8012d84:	f7ff fa72 	bl	801226c <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8012d88:	682b      	ldr	r3, [r5, #0]
 8012d8a:	4631      	mov	r1, r6
 8012d8c:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8012d90:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8012d94:	4628      	mov	r0, r5
 8012d96:	4798      	blx	r3
 8012d98:	ab0a      	add	r3, sp, #40	; 0x28
 8012d9a:	f843 0d0c 	str.w	r0, [r3, #-12]!
 8012d9e:	4618      	mov	r0, r3
 8012da0:	f7ff fa64 	bl	801226c <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8012da4:	4641      	mov	r1, r8
 8012da6:	ea4f 1940 	mov.w	r9, r0, lsl #5
 8012daa:	4638      	mov	r0, r7
 8012dac:	464a      	mov	r2, r9
 8012dae:	f012 fd75 	bl	802589c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8012db2:	2301      	movs	r3, #1
 8012db4:	9300      	str	r3, [sp, #0]
 8012db6:	4628      	mov	r0, r5
 8012db8:	9b00      	ldr	r3, [sp, #0]
 8012dba:	441c      	add	r4, r3
 8012dbc:	682b      	ldr	r3, [r5, #0]
 8012dbe:	b224      	sxth	r4, r4
 8012dc0:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8012dc4:	4621      	mov	r1, r4
 8012dc6:	4798      	blx	r3
 8012dc8:	9008      	str	r0, [sp, #32]
 8012dca:	a808      	add	r0, sp, #32
 8012dcc:	f7ff fa4e 	bl	801226c <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8012dd0:	4621      	mov	r1, r4
 8012dd2:	0143      	lsls	r3, r0, #5
 8012dd4:	4628      	mov	r0, r5
 8012dd6:	9301      	str	r3, [sp, #4]
 8012dd8:	682b      	ldr	r3, [r5, #0]
 8012dda:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8012dde:	4798      	blx	r3
 8012de0:	9009      	str	r0, [sp, #36]	; 0x24
 8012de2:	a809      	add	r0, sp, #36	; 0x24
 8012de4:	f7ff fa42 	bl	801226c <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8012de8:	0143      	lsls	r3, r0, #5
 8012dea:	9302      	str	r3, [sp, #8]
 8012dec:	9b01      	ldr	r3, [sp, #4]
 8012dee:	eba3 0b08 	sub.w	fp, r3, r8
 8012df2:	9b02      	ldr	r3, [sp, #8]
 8012df4:	eba3 0a09 	sub.w	sl, r3, r9
 8012df8:	4658      	mov	r0, fp
 8012dfa:	4651      	mov	r1, sl
 8012dfc:	f7fe fe0c 	bl	8011a18 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8012e00:	b320      	cbz	r0, 8012e4c <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0xfc>
 8012e02:	4602      	mov	r2, r0
 8012e04:	4651      	mov	r1, sl
 8012e06:	9005      	str	r0, [sp, #20]
 8012e08:	9803      	ldr	r0, [sp, #12]
 8012e0a:	f004 fc15 	bl	8017638 <_ZN8touchgfx6muldivElll>
 8012e0e:	2302      	movs	r3, #2
 8012e10:	4659      	mov	r1, fp
 8012e12:	fb90 faf3 	sdiv	sl, r0, r3
 8012e16:	9b05      	ldr	r3, [sp, #20]
 8012e18:	9803      	ldr	r0, [sp, #12]
 8012e1a:	461a      	mov	r2, r3
 8012e1c:	f004 fc0c 	bl	8017638 <_ZN8touchgfx6muldivElll>
 8012e20:	2302      	movs	r3, #2
 8012e22:	eba8 010a 	sub.w	r1, r8, sl
 8012e26:	fb90 fbf3 	sdiv	fp, r0, r3
 8012e2a:	683b      	ldr	r3, [r7, #0]
 8012e2c:	eb0b 0209 	add.w	r2, fp, r9
 8012e30:	4638      	mov	r0, r7
 8012e32:	689b      	ldr	r3, [r3, #8]
 8012e34:	4798      	blx	r3
 8012e36:	683b      	ldr	r3, [r7, #0]
 8012e38:	9a02      	ldr	r2, [sp, #8]
 8012e3a:	4638      	mov	r0, r7
 8012e3c:	9901      	ldr	r1, [sp, #4]
 8012e3e:	689b      	ldr	r3, [r3, #8]
 8012e40:	445a      	add	r2, fp
 8012e42:	eba1 010a 	sub.w	r1, r1, sl
 8012e46:	4798      	blx	r3
 8012e48:	e9dd 8901 	ldrd	r8, r9, [sp, #4]
 8012e4c:	42a6      	cmp	r6, r4
 8012e4e:	db02      	blt.n	8012e56 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x106>
 8012e50:	b00b      	add	sp, #44	; 0x2c
 8012e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e56:	9b00      	ldr	r3, [sp, #0]
 8012e58:	9a04      	ldr	r2, [sp, #16]
 8012e5a:	42a2      	cmp	r2, r4
 8012e5c:	bf08      	it	eq
 8012e5e:	f04f 33ff 	moveq.w	r3, #4294967295
 8012e62:	e7a7      	b.n	8012db4 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x64>

08012e64 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE>:
 8012e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e68:	6943      	ldr	r3, [r0, #20]
 8012e6a:	b0a2      	sub	sp, #136	; 0x88
 8012e6c:	4606      	mov	r6, r0
 8012e6e:	460f      	mov	r7, r1
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d06c      	beq.n	8012f4e <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xea>
 8012e74:	695c      	ldr	r4, [r3, #20]
 8012e76:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 8012e7a:	2b01      	cmp	r3, #1
 8012e7c:	dc04      	bgt.n	8012e88 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x24>
 8012e7e:	2401      	movs	r4, #1
 8012e80:	4620      	mov	r0, r4
 8012e82:	b022      	add	sp, #136	; 0x88
 8012e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e88:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8012e8c:	ad22      	add	r5, sp, #136	; 0x88
 8012e8e:	011b      	lsls	r3, r3, #4
 8012e90:	f845 3d70 	str.w	r3, [r5, #-112]!
 8012e94:	4628      	mov	r0, r5
 8012e96:	f7fe fc7e 	bl	8011796 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8012e9a:	8839      	ldrh	r1, [r7, #0]
 8012e9c:	88ba      	ldrh	r2, [r7, #4]
 8012e9e:	b280      	uxth	r0, r0
 8012ea0:	6823      	ldr	r3, [r4, #0]
 8012ea2:	440a      	add	r2, r1
 8012ea4:	1a09      	subs	r1, r1, r0
 8012ea6:	4402      	add	r2, r0
 8012ea8:	f10d 000e 	add.w	r0, sp, #14
 8012eac:	b209      	sxth	r1, r1
 8012eae:	9000      	str	r0, [sp, #0]
 8012eb0:	b212      	sxth	r2, r2
 8012eb2:	f8d3 8124 	ldr.w	r8, [r3, #292]	; 0x124
 8012eb6:	4620      	mov	r0, r4
 8012eb8:	ab03      	add	r3, sp, #12
 8012eba:	47c0      	blx	r8
 8012ebc:	2800      	cmp	r0, #0
 8012ebe:	d0de      	beq.n	8012e7e <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x1a>
 8012ec0:	f9b4 1114 	ldrsh.w	r1, [r4, #276]	; 0x114
 8012ec4:	f8b4 311a 	ldrh.w	r3, [r4, #282]	; 0x11a
 8012ec8:	f9b4 0040 	ldrsh.w	r0, [r4, #64]	; 0x40
 8012ecc:	18ca      	adds	r2, r1, r3
 8012ece:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 8012ed2:	f8ad 1012 	strh.w	r1, [sp, #18]
 8012ed6:	4639      	mov	r1, r7
 8012ed8:	1a9b      	subs	r3, r3, r2
 8012eda:	2200      	movs	r2, #0
 8012edc:	f8ad 0014 	strh.w	r0, [sp, #20]
 8012ee0:	a804      	add	r0, sp, #16
 8012ee2:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012ee6:	f8ad 2010 	strh.w	r2, [sp, #16]
 8012eea:	f7fd f9d3 	bl	8010294 <_ZN8touchgfx4RectaNERKS0_>
 8012eee:	aa04      	add	r2, sp, #16
 8012ef0:	4631      	mov	r1, r6
 8012ef2:	4628      	mov	r0, r5
 8012ef4:	f012 fb58 	bl	80255a8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 8012ef8:	f9b4 7120 	ldrsh.w	r7, [r4, #288]	; 0x120
 8012efc:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8012f00:	2f00      	cmp	r7, #0
 8012f02:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 8012f06:	dd03      	ble.n	8012f10 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xac>
 8012f08:	42bb      	cmp	r3, r7
 8012f0a:	da01      	bge.n	8012f10 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xac>
 8012f0c:	42ba      	cmp	r2, r7
 8012f0e:	da11      	bge.n	8012f34 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xd0>
 8012f10:	9200      	str	r2, [sp, #0]
 8012f12:	4622      	mov	r2, r4
 8012f14:	4629      	mov	r1, r5
 8012f16:	4630      	mov	r0, r6
 8012f18:	f7ff ff1a 	bl	8012d50 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
 8012f1c:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8012f20:	4628      	mov	r0, r5
 8012f22:	f012 fbfd 	bl	8025720 <_ZN8touchgfx6Canvas6renderEh>
 8012f26:	4b0b      	ldr	r3, [pc, #44]	; (8012f54 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xf0>)
 8012f28:	4604      	mov	r4, r0
 8012f2a:	a80e      	add	r0, sp, #56	; 0x38
 8012f2c:	9306      	str	r3, [sp, #24]
 8012f2e:	f000 fdff 	bl	8013b30 <_ZN8touchgfx7OutlineD1Ev>
 8012f32:	e7a5      	b.n	8012e80 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x1c>
 8012f34:	1e7a      	subs	r2, r7, #1
 8012f36:	4629      	mov	r1, r5
 8012f38:	4630      	mov	r0, r6
 8012f3a:	b212      	sxth	r2, r2
 8012f3c:	9200      	str	r2, [sp, #0]
 8012f3e:	4622      	mov	r2, r4
 8012f40:	f7ff ff06 	bl	8012d50 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
 8012f44:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8012f48:	9300      	str	r3, [sp, #0]
 8012f4a:	463b      	mov	r3, r7
 8012f4c:	e7e1      	b.n	8012f12 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xae>
 8012f4e:	f8b3 311e 	ldrh.w	r3, [r3, #286]	; 0x11e
 8012f52:	deff      	udf	#255	; 0xff
 8012f54:	0802b658 	.word	0x0802b658

08012f58 <_ZN8touchgfx15GraphLabelsBase22invalidateGraphPointAtEs>:
 8012f58:	4770      	bx	lr

08012f5a <_ZNK8touchgfx15GraphLabelsBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE>:
 8012f5a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8012f5c:	b118      	cbz	r0, 8012f66 <_ZNK8touchgfx15GraphLabelsBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE+0xc>
 8012f5e:	6803      	ldr	r3, [r0, #0]
 8012f60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012f64:	4718      	bx	r3
 8012f66:	4770      	bx	lr

08012f68 <_ZNK8touchgfx12GraphLabelsY22getGraphRangeMinScaledEPKNS_17AbstractDataGraphE>:
 8012f68:	680b      	ldr	r3, [r1, #0]
 8012f6a:	4608      	mov	r0, r1
 8012f6c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8012f70:	4718      	bx	r3

08012f72 <_ZNK8touchgfx12GraphLabelsY22getGraphRangeMaxScaledEPKNS_17AbstractDataGraphE>:
 8012f72:	680b      	ldr	r3, [r1, #0]
 8012f74:	4608      	mov	r0, r1
 8012f76:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8012f7a:	4718      	bx	r3

08012f7c <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE>:
 8012f7c:	4a38      	ldr	r2, [pc, #224]	; (8013060 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0xe4>)
 8012f7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f82:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 8012f84:	b087      	sub	sp, #28
 8012f86:	8812      	ldrh	r2, [r2, #0]
 8012f88:	4604      	mov	r4, r0
 8012f8a:	4689      	mov	r9, r1
 8012f8c:	429a      	cmp	r2, r3
 8012f8e:	d937      	bls.n	8013000 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 8012f90:	4a34      	ldr	r2, [pc, #208]	; (8013064 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0xe8>)
 8012f92:	6812      	ldr	r2, [r2, #0]
 8012f94:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8012f98:	4b33      	ldr	r3, [pc, #204]	; (8013068 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0xec>)
 8012f9a:	681b      	ldr	r3, [r3, #0]
 8012f9c:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 8012fa0:	f1b8 0f00 	cmp.w	r8, #0
 8012fa4:	d02c      	beq.n	8013000 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 8012fa6:	6803      	ldr	r3, [r0, #0]
 8012fa8:	6945      	ldr	r5, [r0, #20]
 8012faa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012fac:	2d00      	cmp	r5, #0
 8012fae:	d052      	beq.n	8013056 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0xda>
 8012fb0:	696f      	ldr	r7, [r5, #20]
 8012fb2:	4798      	blx	r3
 8012fb4:	f897 502c 	ldrb.w	r5, [r7, #44]	; 0x2c
 8012fb8:	fb15 f000 	smulbb	r0, r5, r0
 8012fbc:	b280      	uxth	r0, r0
 8012fbe:	1c45      	adds	r5, r0, #1
 8012fc0:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8012fc4:	122d      	asrs	r5, r5, #8
 8012fc6:	d01b      	beq.n	8013000 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 8012fc8:	6823      	ldr	r3, [r4, #0]
 8012fca:	4639      	mov	r1, r7
 8012fcc:	4620      	mov	r0, r4
 8012fce:	b2ed      	uxtb	r5, r5
 8012fd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012fd4:	4798      	blx	r3
 8012fd6:	6823      	ldr	r3, [r4, #0]
 8012fd8:	4606      	mov	r6, r0
 8012fda:	4639      	mov	r1, r7
 8012fdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012fe0:	4620      	mov	r0, r4
 8012fe2:	4798      	blx	r3
 8012fe4:	4683      	mov	fp, r0
 8012fe6:	b970      	cbnz	r0, 8013006 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x8a>
 8012fe8:	b96e      	cbnz	r6, 8013006 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x8a>
 8012fea:	6823      	ldr	r3, [r4, #0]
 8012fec:	4642      	mov	r2, r8
 8012fee:	9600      	str	r6, [sp, #0]
 8012ff0:	4649      	mov	r1, r9
 8012ff2:	4620      	mov	r0, r4
 8012ff4:	e9cd 6501 	strd	r6, r5, [sp, #4]
 8012ff8:	f8d3 508c 	ldr.w	r5, [r3, #140]	; 0x8c
 8012ffc:	463b      	mov	r3, r7
 8012ffe:	47a8      	blx	r5
 8013000:	b007      	add	sp, #28
 8013002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013006:	2e00      	cmp	r6, #0
 8013008:	ddfa      	ble.n	8013000 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 801300a:	6823      	ldr	r3, [r4, #0]
 801300c:	4639      	mov	r1, r7
 801300e:	4620      	mov	r0, r4
 8013010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013014:	4798      	blx	r3
 8013016:	6823      	ldr	r3, [r4, #0]
 8013018:	4682      	mov	sl, r0
 801301a:	4639      	mov	r1, r7
 801301c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013020:	4620      	mov	r0, r4
 8013022:	4798      	blx	r3
 8013024:	4582      	cmp	sl, r0
 8013026:	bfde      	ittt	le
 8013028:	4603      	movle	r3, r0
 801302a:	4650      	movle	r0, sl
 801302c:	469a      	movle	sl, r3
 801302e:	ebaa 0300 	sub.w	r3, sl, r0
 8013032:	fb93 f3f6 	sdiv	r3, r3, r6
 8013036:	2b64      	cmp	r3, #100	; 0x64
 8013038:	dce2      	bgt.n	8013000 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 801303a:	6823      	ldr	r3, [r4, #0]
 801303c:	4642      	mov	r2, r8
 801303e:	9000      	str	r0, [sp, #0]
 8013040:	4649      	mov	r1, r9
 8013042:	4620      	mov	r0, r4
 8013044:	e9cd b503 	strd	fp, r5, [sp, #12]
 8013048:	e9cd a601 	strd	sl, r6, [sp, #4]
 801304c:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8013050:	463b      	mov	r3, r7
 8013052:	47a8      	blx	r5
 8013054:	e7d4      	b.n	8013000 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 8013056:	4798      	blx	r3
 8013058:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 801305c:	deff      	udf	#255	; 0xff
 801305e:	bf00      	nop
 8013060:	20027c20 	.word	0x20027c20
 8013064:	20027c1c 	.word	0x20027c1c
 8013068:	20027c24 	.word	0x20027c24

0801306c <_ZN8touchgfx12GraphLabelsYD1Ev>:
 801306c:	4770      	bx	lr

0801306e <_ZNK8touchgfx12GraphLabelsY31getCorrectlyScaledLabelIntervalEPKNS_17AbstractDataGraphE>:
 801306e:	b538      	push	{r3, r4, r5, lr}
 8013070:	680a      	ldr	r2, [r1, #0]
 8013072:	e9d0 540c 	ldrd	r5, r4, [r0, #48]	; 0x30
 8013076:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 801307a:	4608      	mov	r0, r1
 801307c:	4790      	blx	r2
 801307e:	4629      	mov	r1, r5
 8013080:	4602      	mov	r2, r0
 8013082:	4620      	mov	r0, r4
 8013084:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013088:	f7ff bafc 	b.w	8012684 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>

0801308c <_ZN8touchgfx12GraphLabelsYD0Ev>:
 801308c:	b510      	push	{r4, lr}
 801308e:	4604      	mov	r4, r0
 8013090:	214c      	movs	r1, #76	; 0x4c
 8013092:	f012 fd8e 	bl	8025bb2 <_ZdlPvj>
 8013096:	4620      	mov	r0, r4
 8013098:	bd10      	pop	{r4, pc}

0801309a <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih>:
 801309a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801309e:	b08d      	sub	sp, #52	; 0x34
 80130a0:	4606      	mov	r6, r0
 80130a2:	9309      	str	r3, [sp, #36]	; 0x24
 80130a4:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 80130a8:	e9dd 9a18 	ldrd	r9, sl, [sp, #96]	; 0x60
 80130ac:	e9cd 1207 	strd	r1, r2, [sp, #28]
 80130b0:	e9dd 7816 	ldrd	r7, r8, [sp, #88]	; 0x58
 80130b4:	930a      	str	r3, [sp, #40]	; 0x28
 80130b6:	f1b9 0f00 	cmp.w	r9, #0
 80130ba:	d117      	bne.n	80130ec <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x52>
 80130bc:	2f00      	cmp	r7, #0
 80130be:	dc7c      	bgt.n	80131ba <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x120>
 80130c0:	f1b8 0f00 	cmp.w	r8, #0
 80130c4:	da01      	bge.n	80130ca <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x30>
 80130c6:	2f00      	cmp	r7, #0
 80130c8:	d17a      	bne.n	80131c0 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x126>
 80130ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80130cc:	4630      	mov	r0, r6
 80130ce:	6832      	ldr	r2, [r6, #0]
 80130d0:	9318      	str	r3, [sp, #96]	; 0x60
 80130d2:	2300      	movs	r3, #0
 80130d4:	9907      	ldr	r1, [sp, #28]
 80130d6:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
 80130da:	f8d2 408c 	ldr.w	r4, [r2, #140]	; 0x8c
 80130de:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80130e2:	46a4      	mov	ip, r4
 80130e4:	b00d      	add	sp, #52	; 0x34
 80130e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130ea:	4760      	bx	ip
 80130ec:	fb97 f4f9 	sdiv	r4, r7, r9
 80130f0:	1e63      	subs	r3, r4, #1
 80130f2:	9305      	str	r3, [sp, #20]
 80130f4:	f1ba 0f00 	cmp.w	sl, #0
 80130f8:	d122      	bne.n	8013140 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xa6>
 80130fa:	fb03 f509 	mul.w	r5, r3, r9
 80130fe:	fb98 faf9 	sdiv	sl, r8, r9
 8013102:	f10a 0a02 	add.w	sl, sl, #2
 8013106:	9b05      	ldr	r3, [sp, #20]
 8013108:	459a      	cmp	sl, r3
 801310a:	d059      	beq.n	80131c0 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x126>
 801310c:	42af      	cmp	r7, r5
 801310e:	dc5a      	bgt.n	80131c6 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x12c>
 8013110:	45a8      	cmp	r8, r5
 8013112:	da01      	bge.n	8013118 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x7e>
 8013114:	42af      	cmp	r7, r5
 8013116:	db0e      	blt.n	8013136 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x9c>
 8013118:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801311a:	4630      	mov	r0, r6
 801311c:	9905      	ldr	r1, [sp, #20]
 801311e:	9302      	str	r3, [sp, #8]
 8013120:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8013122:	6832      	ldr	r2, [r6, #0]
 8013124:	434b      	muls	r3, r1
 8013126:	9907      	ldr	r1, [sp, #28]
 8013128:	e9cd 5300 	strd	r5, r3, [sp]
 801312c:	f8d2 b08c 	ldr.w	fp, [r2, #140]	; 0x8c
 8013130:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013134:	47d8      	blx	fp
 8013136:	9b05      	ldr	r3, [sp, #20]
 8013138:	444d      	add	r5, r9
 801313a:	3301      	adds	r3, #1
 801313c:	9305      	str	r3, [sp, #20]
 801313e:	e7e2      	b.n	8013106 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x6c>
 8013140:	fb97 f3fa 	sdiv	r3, r7, sl
 8013144:	3b01      	subs	r3, #1
 8013146:	9306      	str	r3, [sp, #24]
 8013148:	9a06      	ldr	r2, [sp, #24]
 801314a:	fb98 f3fa 	sdiv	r3, r8, sl
 801314e:	fb02 fb0a 	mul.w	fp, r2, sl
 8013152:	9a05      	ldr	r2, [sp, #20]
 8013154:	3302      	adds	r3, #2
 8013156:	fb02 f509 	mul.w	r5, r2, r9
 801315a:	930b      	str	r3, [sp, #44]	; 0x2c
 801315c:	45ab      	cmp	fp, r5
 801315e:	dd1d      	ble.n	801319c <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x102>
 8013160:	42af      	cmp	r7, r5
 8013162:	dc08      	bgt.n	8013176 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xdc>
 8013164:	45a8      	cmp	r8, r5
 8013166:	da08      	bge.n	801317a <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xe0>
 8013168:	42af      	cmp	r7, r5
 801316a:	da06      	bge.n	801317a <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xe0>
 801316c:	9b05      	ldr	r3, [sp, #20]
 801316e:	444d      	add	r5, r9
 8013170:	3301      	adds	r3, #1
 8013172:	9305      	str	r3, [sp, #20]
 8013174:	e7f2      	b.n	801315c <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xc2>
 8013176:	45a8      	cmp	r8, r5
 8013178:	dcf8      	bgt.n	801316c <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xd2>
 801317a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801317c:	4630      	mov	r0, r6
 801317e:	9905      	ldr	r1, [sp, #20]
 8013180:	9302      	str	r3, [sp, #8]
 8013182:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8013184:	6832      	ldr	r2, [r6, #0]
 8013186:	434b      	muls	r3, r1
 8013188:	9907      	ldr	r1, [sp, #28]
 801318a:	e9cd 5300 	strd	r5, r3, [sp]
 801318e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8013192:	461c      	mov	r4, r3
 8013194:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013198:	47a0      	blx	r4
 801319a:	e7e7      	b.n	801316c <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xd2>
 801319c:	45ab      	cmp	fp, r5
 801319e:	db04      	blt.n	80131aa <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x110>
 80131a0:	9b05      	ldr	r3, [sp, #20]
 80131a2:	444d      	add	r5, r9
 80131a4:	3301      	adds	r3, #1
 80131a6:	9305      	str	r3, [sp, #20]
 80131a8:	e7f8      	b.n	801319c <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x102>
 80131aa:	9b06      	ldr	r3, [sp, #24]
 80131ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80131ae:	3301      	adds	r3, #1
 80131b0:	4293      	cmp	r3, r2
 80131b2:	9306      	str	r3, [sp, #24]
 80131b4:	d004      	beq.n	80131c0 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x126>
 80131b6:	44d3      	add	fp, sl
 80131b8:	e7d0      	b.n	801315c <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xc2>
 80131ba:	f1b8 0f00 	cmp.w	r8, #0
 80131be:	dd84      	ble.n	80130ca <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x30>
 80131c0:	b00d      	add	sp, #52	; 0x34
 80131c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131c6:	45a8      	cmp	r8, r5
 80131c8:	dcb5      	bgt.n	8013136 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x9c>
 80131ca:	e7a5      	b.n	8013118 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x7e>

080131cc <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti>:
 80131cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80131d0:	f1b3 0900 	subs.w	r9, r3, #0
 80131d4:	460d      	mov	r5, r1
 80131d6:	4690      	mov	r8, r2
 80131d8:	9f08      	ldr	r7, [sp, #32]
 80131da:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
 80131de:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80131e0:	da18      	bge.n	8013214 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x48>
 80131e2:	2a01      	cmp	r2, #1
 80131e4:	dd16      	ble.n	8013214 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x48>
 80131e6:	232d      	movs	r3, #45	; 0x2d
 80131e8:	f1c9 0900 	rsb	r9, r9, #0
 80131ec:	2001      	movs	r0, #1
 80131ee:	800b      	strh	r3, [r1, #0]
 80131f0:	2f00      	cmp	r7, #0
 80131f2:	d111      	bne.n	8013218 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x4c>
 80131f4:	2302      	movs	r3, #2
 80131f6:	eba8 0100 	sub.w	r1, r8, r0
 80131fa:	4a26      	ldr	r2, [pc, #152]	; (8013294 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xc8>)
 80131fc:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 8013200:	b289      	uxth	r1, r1
 8013202:	fb96 f3f3 	sdiv	r3, r6, r3
 8013206:	444b      	add	r3, r9
 8013208:	fb93 f3f6 	sdiv	r3, r3, r6
 801320c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013210:	f006 b88e 	b.w	8019330 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8013214:	2000      	movs	r0, #0
 8013216:	e7eb      	b.n	80131f0 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x24>
 8013218:	dd39      	ble.n	801328e <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xc2>
 801321a:	eba8 0100 	sub.w	r1, r8, r0
 801321e:	4a1d      	ldr	r2, [pc, #116]	; (8013294 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xc8>)
 8013220:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 8013224:	f108 38ff 	add.w	r8, r8, #4294967295
 8013228:	b289      	uxth	r1, r1
 801322a:	fb99 f4f6 	sdiv	r4, r9, r6
 801322e:	4623      	mov	r3, r4
 8013230:	f006 f87e 	bl	8019330 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8013234:	4628      	mov	r0, r5
 8013236:	f005 fd09 	bl	8018c4c <_ZN8touchgfx7Unicode6strlenEPKt>
 801323a:	4580      	cmp	r8, r0
 801323c:	dd27      	ble.n	801328e <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xc2>
 801323e:	f04f 0e02 	mov.w	lr, #2
 8013242:	f825 a010 	strh.w	sl, [r5, r0, lsl #1]
 8013246:	fb06 9314 	mls	r3, r6, r4, r9
 801324a:	3001      	adds	r0, #1
 801324c:	2200      	movs	r2, #0
 801324e:	f04f 090a 	mov.w	r9, #10
 8013252:	f107 3aff 	add.w	sl, r7, #4294967295
 8013256:	fb96 fefe 	sdiv	lr, r6, lr
 801325a:	4580      	cmp	r8, r0
 801325c:	4684      	mov	ip, r0
 801325e:	dd13      	ble.n	8013288 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xbc>
 8013260:	fb09 f303 	mul.w	r3, r9, r3
 8013264:	4592      	cmp	sl, r2
 8013266:	f102 0201 	add.w	r2, r2, #1
 801326a:	f100 0c01 	add.w	ip, r0, #1
 801326e:	bf08      	it	eq
 8013270:	4473      	addeq	r3, lr
 8013272:	4297      	cmp	r7, r2
 8013274:	fb93 f4f6 	sdiv	r4, r3, r6
 8013278:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801327c:	fb06 3314 	mls	r3, r6, r4, r3
 8013280:	f825 1010 	strh.w	r1, [r5, r0, lsl #1]
 8013284:	4660      	mov	r0, ip
 8013286:	d1e8      	bne.n	801325a <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x8e>
 8013288:	2300      	movs	r3, #0
 801328a:	f825 301c 	strh.w	r3, [r5, ip, lsl #1]
 801328e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013292:	bf00      	nop
 8013294:	0802b044 	.word	0x0802b044

08013298 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih>:
 8013298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801329c:	b09b      	sub	sp, #108	; 0x6c
 801329e:	4698      	mov	r8, r3
 80132a0:	681b      	ldr	r3, [r3, #0]
 80132a2:	4604      	mov	r4, r0
 80132a4:	ae1a      	add	r6, sp, #104	; 0x68
 80132a6:	9104      	str	r1, [sp, #16]
 80132a8:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80132ac:	4640      	mov	r0, r8
 80132ae:	9924      	ldr	r1, [sp, #144]	; 0x90
 80132b0:	4617      	mov	r7, r2
 80132b2:	4798      	blx	r3
 80132b4:	f846 0d28 	str.w	r0, [r6, #-40]!
 80132b8:	4630      	mov	r0, r6
 80132ba:	f7fe ffd7 	bl	801226c <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80132be:	f8b8 3114 	ldrh.w	r3, [r8, #276]	; 0x114
 80132c2:	1ac0      	subs	r0, r0, r3
 80132c4:	b200      	sxth	r0, r0
 80132c6:	2800      	cmp	r0, #0
 80132c8:	f2c0 80ba 	blt.w	8013440 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a8>
 80132cc:	f8b8 211a 	ldrh.w	r2, [r8, #282]	; 0x11a
 80132d0:	441a      	add	r2, r3
 80132d2:	f8b8 3042 	ldrh.w	r3, [r8, #66]	; 0x42
 80132d6:	1a9b      	subs	r3, r3, r2
 80132d8:	b21b      	sxth	r3, r3
 80132da:	4298      	cmp	r0, r3
 80132dc:	f280 80b0 	bge.w	8013440 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a8>
 80132e0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80132e2:	2214      	movs	r2, #20
 80132e4:	4631      	mov	r1, r6
 80132e6:	4620      	mov	r0, r4
 80132e8:	9302      	str	r3, [sp, #8]
 80132ea:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
 80132ee:	9301      	str	r3, [sp, #4]
 80132f0:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 80132f4:	9300      	str	r3, [sp, #0]
 80132f6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80132f8:	f7ff ff68 	bl	80131cc <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti>
 80132fc:	4b55      	ldr	r3, [pc, #340]	; (8013454 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1bc>)
 80132fe:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 8013300:	6818      	ldr	r0, [r3, #0]
 8013302:	f7f4 f8d1 	bl	80074a8 <_ZNK8touchgfx5Texts7getTextEt>
 8013306:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 801330a:	4681      	mov	r9, r0
 801330c:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8013310:	683b      	ldr	r3, [r7, #0]
 8013312:	f040 8098 	bne.w	8013446 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1ae>
 8013316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013318:	4638      	mov	r0, r7
 801331a:	4798      	blx	r3
 801331c:	683b      	ldr	r3, [r7, #0]
 801331e:	4605      	mov	r5, r0
 8013320:	4632      	mov	r2, r6
 8013322:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013324:	4649      	mov	r1, r9
 8013326:	4638      	mov	r0, r7
 8013328:	4798      	blx	r3
 801332a:	fb15 f500 	smulbb	r5, r5, r0
 801332e:	683b      	ldr	r3, [r7, #0]
 8013330:	4632      	mov	r2, r6
 8013332:	b2ad      	uxth	r5, r5
 8013334:	4649      	mov	r1, r9
 8013336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013338:	4638      	mov	r0, r7
 801333a:	4798      	blx	r3
 801333c:	4405      	add	r5, r0
 801333e:	b22d      	sxth	r5, r5
 8013340:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8013344:	2002      	movs	r0, #2
 8013346:	f8d8 2000 	ldr.w	r2, [r8]
 801334a:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 801334e:	2b01      	cmp	r3, #1
 8013350:	f8b8 30c6 	ldrh.w	r3, [r8, #198]	; 0xc6
 8013354:	f8d2 2118 	ldr.w	r2, [r2, #280]	; 0x118
 8013358:	bf88      	it	hi
 801335a:	f105 0b01 	addhi.w	fp, r5, #1
 801335e:	9305      	str	r3, [sp, #20]
 8013360:	9924      	ldr	r1, [sp, #144]	; 0x90
 8013362:	bf8c      	ite	hi
 8013364:	fb9b fbf0 	sdivhi	fp, fp, r0
 8013368:	fb95 fbf0 	sdivls	fp, r5, r0
 801336c:	4640      	mov	r0, r8
 801336e:	bf88      	it	hi
 8013370:	fa0f fb8b 	sxthhi.w	fp, fp
 8013374:	4790      	blx	r2
 8013376:	f84a 0d3c 	str.w	r0, [sl, #-60]!
 801337a:	4650      	mov	r0, sl
 801337c:	f04f 0800 	mov.w	r8, #0
 8013380:	f7fe ff74 	bl	801226c <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8013384:	9b05      	ldr	r3, [sp, #20]
 8013386:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 801338a:	4418      	add	r0, r3
 801338c:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
 8013390:	ad07      	add	r5, sp, #28
 8013392:	f8ad 801c 	strh.w	r8, [sp, #28]
 8013396:	eba0 0b0b 	sub.w	fp, r0, fp
 801339a:	f8ad 1020 	strh.w	r1, [sp, #32]
 801339e:	f8ad b01e 	strh.w	fp, [sp, #30]
 80133a2:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
 80133a6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80133aa:	e88b 0003 	stmia.w	fp, {r0, r1}
 80133ae:	9904      	ldr	r1, [sp, #16]
 80133b0:	4658      	mov	r0, fp
 80133b2:	f7fc ff6f 	bl	8010294 <_ZN8touchgfx4RectaNERKS0_>
 80133b6:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 80133ba:	4543      	cmp	r3, r8
 80133bc:	dd40      	ble.n	8013440 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a8>
 80133be:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 80133c2:	4543      	cmp	r3, r8
 80133c4:	dd3c      	ble.n	8013440 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a8>
 80133c6:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 80133ca:	4620      	mov	r0, r4
 80133cc:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80133d0:	1a5b      	subs	r3, r3, r1
 80133d2:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 80133d6:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 80133da:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80133de:	1a5b      	subs	r3, r3, r1
 80133e0:	4629      	mov	r1, r5
 80133e2:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 80133e6:	6823      	ldr	r3, [r4, #0]
 80133e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133ea:	4798      	blx	r3
 80133ec:	4b1a      	ldr	r3, [pc, #104]	; (8013458 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1c0>)
 80133ee:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 80133f0:	681b      	ldr	r3, [r3, #0]
 80133f2:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 80133f6:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80133fa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80133fc:	785b      	ldrb	r3, [r3, #1]
 80133fe:	910d      	str	r1, [sp, #52]	; 0x34
 8013400:	f3c3 0c01 	ubfx	ip, r3, #0, #2
 8013404:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8013408:	970b      	str	r7, [sp, #44]	; 0x2c
 801340a:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 801340e:	f89d 3098 	ldrb.w	r3, [sp, #152]	; 0x98
 8013412:	f88d c030 	strb.w	ip, [sp, #48]	; 0x30
 8013416:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 801341a:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
 801341e:	f8ad 8038 	strh.w	r8, [sp, #56]	; 0x38
 8013422:	f88d 803b 	strb.w	r8, [sp, #59]	; 0x3b
 8013426:	f88d 803c 	strb.w	r8, [sp, #60]	; 0x3c
 801342a:	f7fd fa03 	bl	8010834 <_ZN8touchgfx3HAL3lcdEv>
 801342e:	465b      	mov	r3, fp
 8013430:	e9cd 6802 	strd	r6, r8, [sp, #8]
 8013434:	e9cd a900 	strd	sl, r9, [sp]
 8013438:	e895 0006 	ldmia.w	r5, {r1, r2}
 801343c:	f7f3 ffe6 	bl	800740c <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8013440:	b01b      	add	sp, #108	; 0x6c
 8013442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013446:	4601      	mov	r1, r0
 8013448:	699b      	ldr	r3, [r3, #24]
 801344a:	4632      	mov	r2, r6
 801344c:	4638      	mov	r0, r7
 801344e:	4798      	blx	r3
 8013450:	b205      	sxth	r5, r0
 8013452:	e775      	b.n	8013340 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0xa8>
 8013454:	20027c28 	.word	0x20027c28
 8013458:	20027c1c 	.word	0x20027c1c

0801345c <_ZN8touchgfx15GraphScrollData5clearEv>:
 801345c:	b510      	push	{r4, lr}
 801345e:	4604      	mov	r4, r0
 8013460:	f7fe fda1 	bl	8011fa6 <_ZN8touchgfx17AbstractDataGraph5clearEv>
 8013464:	2300      	movs	r3, #0
 8013466:	f8a4 314c 	strh.w	r3, [r4, #332]	; 0x14c
 801346a:	bd10      	pop	{r4, pc}

0801346c <_ZN8touchgfx15GraphScrollData14beforeAddValueEv>:
 801346c:	f9b0 211e 	ldrsh.w	r2, [r0, #286]	; 0x11e
 8013470:	f9b0 311c 	ldrsh.w	r3, [r0, #284]	; 0x11c
 8013474:	429a      	cmp	r2, r3
 8013476:	d101      	bne.n	801347c <_ZN8touchgfx15GraphScrollData14beforeAddValueEv+0x10>
 8013478:	f7fe bfbe 	b.w	80123f8 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>
 801347c:	4770      	bx	lr

0801347e <_ZNK8touchgfx15GraphScrollData18indexToGlobalIndexEs>:
 801347e:	b538      	push	{r3, r4, r5, lr}
 8013480:	f9b0 411c 	ldrsh.w	r4, [r0, #284]	; 0x11c
 8013484:	f9b0 511e 	ldrsh.w	r5, [r0, #286]	; 0x11e
 8013488:	42a5      	cmp	r5, r4
 801348a:	da04      	bge.n	8013496 <_ZNK8touchgfx15GraphScrollData18indexToGlobalIndexEs+0x18>
 801348c:	6803      	ldr	r3, [r0, #0]
 801348e:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8013492:	4798      	blx	r3
 8013494:	bd38      	pop	{r3, r4, r5, pc}
 8013496:	f8d0 0148 	ldr.w	r0, [r0, #328]	; 0x148
 801349a:	4408      	add	r0, r1
 801349c:	1b00      	subs	r0, r0, r4
 801349e:	e7f9      	b.n	8013494 <_ZNK8touchgfx15GraphScrollData18indexToGlobalIndexEs+0x16>

080134a0 <_ZN8touchgfx15GraphScrollData8addValueEi>:
 80134a0:	b570      	push	{r4, r5, r6, lr}
 80134a2:	f9b0 514c 	ldrsh.w	r5, [r0, #332]	; 0x14c
 80134a6:	4604      	mov	r4, r0
 80134a8:	f9b0 211c 	ldrsh.w	r2, [r0, #284]	; 0x11c
 80134ac:	1c6b      	adds	r3, r5, #1
 80134ae:	f9b0 611e 	ldrsh.w	r6, [r0, #286]	; 0x11e
 80134b2:	b21b      	sxth	r3, r3
 80134b4:	42ae      	cmp	r6, r5
 80134b6:	fb93 f0f2 	sdiv	r0, r3, r2
 80134ba:	bf08      	it	eq
 80134bc:	f8a4 311e 	strheq.w	r3, [r4, #286]	; 0x11e
 80134c0:	4296      	cmp	r6, r2
 80134c2:	fb02 3010 	mls	r0, r2, r0, r3
 80134c6:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
 80134ca:	f8a4 014c 	strh.w	r0, [r4, #332]	; 0x14c
 80134ce:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 80134d2:	d108      	bne.n	80134e6 <_ZN8touchgfx15GraphScrollData8addValueEi+0x46>
 80134d4:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80134d8:	f003 fee7 	bl	80172aa <_ZNK8touchgfx8Drawable10invalidateEv>
 80134dc:	4620      	mov	r0, r4
 80134de:	f7fe ff8b 	bl	80123f8 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>
 80134e2:	4628      	mov	r0, r5
 80134e4:	bd70      	pop	{r4, r5, r6, pc}
 80134e6:	4629      	mov	r1, r5
 80134e8:	4620      	mov	r0, r4
 80134ea:	f7fe ff5d 	bl	80123a8 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>
 80134ee:	e7f8      	b.n	80134e2 <_ZN8touchgfx15GraphScrollData8addValueEi+0x42>

080134f0 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 80134f0:	4b07      	ldr	r3, [pc, #28]	; (8013510 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 80134f2:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 80134f4:	881b      	ldrh	r3, [r3, #0]
 80134f6:	4293      	cmp	r3, r2
 80134f8:	bf81      	itttt	hi
 80134fa:	4b06      	ldrhi	r3, [pc, #24]	; (8013514 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 80134fc:	681b      	ldrhi	r3, [r3, #0]
 80134fe:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 8013502:	7858      	ldrbhi	r0, [r3, #1]
 8013504:	bf8c      	ite	hi
 8013506:	f000 0003 	andhi.w	r0, r0, #3
 801350a:	2000      	movls	r0, #0
 801350c:	4770      	bx	lr
 801350e:	bf00      	nop
 8013510:	20027c20 	.word	0x20027c20
 8013514:	20027c1c 	.word	0x20027c1c

08013518 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 8013518:	4b11      	ldr	r3, [pc, #68]	; (8013560 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 801351a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801351e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8013520:	4604      	mov	r4, r0
 8013522:	881b      	ldrh	r3, [r3, #0]
 8013524:	428b      	cmp	r3, r1
 8013526:	d918      	bls.n	801355a <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 8013528:	6803      	ldr	r3, [r0, #0]
 801352a:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 801352c:	4b0d      	ldr	r3, [pc, #52]	; (8013564 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 801352e:	6818      	ldr	r0, [r3, #0]
 8013530:	f7f3 ffba 	bl	80074a8 <_ZNK8touchgfx5Texts7getTextEt>
 8013534:	6823      	ldr	r3, [r4, #0]
 8013536:	4606      	mov	r6, r0
 8013538:	4620      	mov	r0, r4
 801353a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801353c:	4798      	blx	r3
 801353e:	6823      	ldr	r3, [r4, #0]
 8013540:	4607      	mov	r7, r0
 8013542:	4620      	mov	r0, r4
 8013544:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013548:	4798      	blx	r3
 801354a:	463a      	mov	r2, r7
 801354c:	4603      	mov	r3, r0
 801354e:	4631      	mov	r1, r6
 8013550:	4620      	mov	r0, r4
 8013552:	46ac      	mov	ip, r5
 8013554:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013558:	4760      	bx	ip
 801355a:	2000      	movs	r0, #0
 801355c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013560:	20027c20 	.word	0x20027c20
 8013564:	20027c28 	.word	0x20027c28

08013568 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8013568:	4b18      	ldr	r3, [pc, #96]	; (80135cc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 801356a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801356e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8013570:	4604      	mov	r4, r0
 8013572:	881b      	ldrh	r3, [r3, #0]
 8013574:	428b      	cmp	r3, r1
 8013576:	d926      	bls.n	80135c6 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 8013578:	4b15      	ldr	r3, [pc, #84]	; (80135d0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 801357a:	681b      	ldr	r3, [r3, #0]
 801357c:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8013580:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8013584:	4b13      	ldr	r3, [pc, #76]	; (80135d4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8013586:	7855      	ldrb	r5, [r2, #1]
 8013588:	681b      	ldr	r3, [r3, #0]
 801358a:	f3c5 0581 	ubfx	r5, r5, #2, #2
 801358e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8013592:	6833      	ldr	r3, [r6, #0]
 8013594:	69df      	ldr	r7, [r3, #28]
 8013596:	4b10      	ldr	r3, [pc, #64]	; (80135d8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8013598:	6818      	ldr	r0, [r3, #0]
 801359a:	f7f3 ff85 	bl	80074a8 <_ZNK8touchgfx5Texts7getTextEt>
 801359e:	6823      	ldr	r3, [r4, #0]
 80135a0:	4680      	mov	r8, r0
 80135a2:	4620      	mov	r0, r4
 80135a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80135a6:	4798      	blx	r3
 80135a8:	6823      	ldr	r3, [r4, #0]
 80135aa:	4681      	mov	r9, r0
 80135ac:	4620      	mov	r0, r4
 80135ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80135b2:	4798      	blx	r3
 80135b4:	464b      	mov	r3, r9
 80135b6:	9000      	str	r0, [sp, #0]
 80135b8:	4642      	mov	r2, r8
 80135ba:	4629      	mov	r1, r5
 80135bc:	4630      	mov	r0, r6
 80135be:	47b8      	blx	r7
 80135c0:	b003      	add	sp, #12
 80135c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80135c6:	2000      	movs	r0, #0
 80135c8:	e7fa      	b.n	80135c0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 80135ca:	bf00      	nop
 80135cc:	20027c20 	.word	0x20027c20
 80135d0:	20027c1c 	.word	0x20027c1c
 80135d4:	20027c24 	.word	0x20027c24
 80135d8:	20027c28 	.word	0x20027c28

080135dc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 80135dc:	b40e      	push	{r1, r2, r3}
 80135de:	4b30      	ldr	r3, [pc, #192]	; (80136a0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 80135e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80135e4:	881a      	ldrh	r2, [r3, #0]
 80135e6:	b09d      	sub	sp, #116	; 0x74
 80135e8:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 80135ea:	4604      	mov	r4, r0
 80135ec:	429a      	cmp	r2, r3
 80135ee:	d954      	bls.n	801369a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 80135f0:	aa26      	add	r2, sp, #152	; 0x98
 80135f2:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 80136a4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 80135f6:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80136a8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 80135fa:	9202      	str	r2, [sp, #8]
 80135fc:	f8d9 2000 	ldr.w	r2, [r9]
 8013600:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8013604:	f8d8 3000 	ldr.w	r3, [r8]
 8013608:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801360c:	682b      	ldr	r3, [r5, #0]
 801360e:	4628      	mov	r0, r5
 8013610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013612:	4798      	blx	r3
 8013614:	4606      	mov	r6, r0
 8013616:	b207      	sxth	r7, r0
 8013618:	a803      	add	r0, sp, #12
 801361a:	f004 fbc9 	bl	8017db0 <_ZN8touchgfx12TextProviderC1Ev>
 801361e:	682b      	ldr	r3, [r5, #0]
 8013620:	4628      	mov	r0, r5
 8013622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013624:	4798      	blx	r3
 8013626:	682b      	ldr	r3, [r5, #0]
 8013628:	4682      	mov	sl, r0
 801362a:	4628      	mov	r0, r5
 801362c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801362e:	4798      	blx	r3
 8013630:	4653      	mov	r3, sl
 8013632:	9000      	str	r0, [sp, #0]
 8013634:	a803      	add	r0, sp, #12
 8013636:	9a02      	ldr	r2, [sp, #8]
 8013638:	9925      	ldr	r1, [sp, #148]	; 0x94
 801363a:	f004 fc0c 	bl	8017e56 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801363e:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8013640:	f8d9 3000 	ldr.w	r3, [r9]
 8013644:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 8013648:	8925      	ldrh	r5, [r4, #8]
 801364a:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 801364e:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8013652:	eba5 050c 	sub.w	r5, r5, ip
 8013656:	784a      	ldrb	r2, [r1, #1]
 8013658:	f8d8 3000 	ldr.w	r3, [r8]
 801365c:	b22d      	sxth	r5, r5
 801365e:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 8013662:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8013666:	9500      	str	r5, [sp, #0]
 8013668:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801366c:	a803      	add	r0, sp, #12
 801366e:	f002 f939 	bl	80158e4 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8013672:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 8013676:	b203      	sxth	r3, r0
 8013678:	18b9      	adds	r1, r7, r2
 801367a:	2900      	cmp	r1, #0
 801367c:	dd0b      	ble.n	8013696 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 801367e:	3b01      	subs	r3, #1
 8013680:	fb13 f302 	smulbb	r3, r3, r2
 8013684:	fb16 3300 	smlabb	r3, r6, r0, r3
 8013688:	b21f      	sxth	r7, r3
 801368a:	4638      	mov	r0, r7
 801368c:	b01d      	add	sp, #116	; 0x74
 801368e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013692:	b003      	add	sp, #12
 8013694:	4770      	bx	lr
 8013696:	2b00      	cmp	r3, #0
 8013698:	dcf7      	bgt.n	801368a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 801369a:	2700      	movs	r7, #0
 801369c:	e7f5      	b.n	801368a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 801369e:	bf00      	nop
 80136a0:	20027c20 	.word	0x20027c20
 80136a4:	20027c1c 	.word	0x20027c1c
 80136a8:	20027c24 	.word	0x20027c24

080136ac <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 80136ac:	b538      	push	{r3, r4, r5, lr}
 80136ae:	4b0e      	ldr	r3, [pc, #56]	; (80136e8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 80136b0:	4604      	mov	r4, r0
 80136b2:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 80136b4:	881b      	ldrh	r3, [r3, #0]
 80136b6:	429a      	cmp	r2, r3
 80136b8:	d214      	bcs.n	80136e4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 80136ba:	6803      	ldr	r3, [r0, #0]
 80136bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80136be:	4798      	blx	r3
 80136c0:	6823      	ldr	r3, [r4, #0]
 80136c2:	4605      	mov	r5, r0
 80136c4:	4620      	mov	r0, r4
 80136c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80136c8:	4798      	blx	r3
 80136ca:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80136ce:	b22d      	sxth	r5, r5
 80136d0:	4601      	mov	r1, r0
 80136d2:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80136d6:	bf06      	itte	eq
 80136d8:	4602      	moveq	r2, r0
 80136da:	4629      	moveq	r1, r5
 80136dc:	462a      	movne	r2, r5
 80136de:	4620      	mov	r0, r4
 80136e0:	f7fc fa48 	bl	800fb74 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80136e4:	bd38      	pop	{r3, r4, r5, pc}
 80136e6:	bf00      	nop
 80136e8:	20027c20 	.word	0x20027c20

080136ec <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 80136ec:	b530      	push	{r4, r5, lr}
 80136ee:	888b      	ldrh	r3, [r1, #4]
 80136f0:	b085      	sub	sp, #20
 80136f2:	4604      	mov	r4, r0
 80136f4:	8583      	strh	r3, [r0, #44]	; 0x2c
 80136f6:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 80136fa:	b923      	cbnz	r3, 8013706 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 80136fc:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8013700:	b90b      	cbnz	r3, 8013706 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8013702:	f7ff ffd3 	bl	80136ac <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8013706:	6823      	ldr	r3, [r4, #0]
 8013708:	466d      	mov	r5, sp
 801370a:	4621      	mov	r1, r4
 801370c:	343c      	adds	r4, #60	; 0x3c
 801370e:	4628      	mov	r0, r5
 8013710:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013714:	4798      	blx	r3
 8013716:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801371a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801371e:	b005      	add	sp, #20
 8013720:	bd30      	pop	{r4, r5, pc}

08013722 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8013722:	2300      	movs	r3, #0
 8013724:	8083      	strh	r3, [r0, #4]
 8013726:	80c3      	strh	r3, [r0, #6]
 8013728:	8003      	strh	r3, [r0, #0]
 801372a:	8043      	strh	r3, [r0, #2]
 801372c:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8013730:	2bff      	cmp	r3, #255	; 0xff
 8013732:	bf01      	itttt	eq
 8013734:	890b      	ldrheq	r3, [r1, #8]
 8013736:	8083      	strheq	r3, [r0, #4]
 8013738:	894b      	ldrheq	r3, [r1, #10]
 801373a:	80c3      	strheq	r3, [r0, #6]
 801373c:	4770      	bx	lr
	...

08013740 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8013740:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013742:	4604      	mov	r4, r0
 8013744:	466b      	mov	r3, sp
 8013746:	6808      	ldr	r0, [r1, #0]
 8013748:	6849      	ldr	r1, [r1, #4]
 801374a:	c303      	stmia	r3!, {r0, r1}
 801374c:	6823      	ldr	r3, [r4, #0]
 801374e:	4669      	mov	r1, sp
 8013750:	4620      	mov	r0, r4
 8013752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013754:	4798      	blx	r3
 8013756:	4b08      	ldr	r3, [pc, #32]	; (8013778 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8013758:	681b      	ldr	r3, [r3, #0]
 801375a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801375e:	b10a      	cbz	r2, 8013764 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8013760:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8013762:	b900      	cbnz	r0, 8013766 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8013764:	6898      	ldr	r0, [r3, #8]
 8013766:	6803      	ldr	r3, [r0, #0]
 8013768:	4669      	mov	r1, sp
 801376a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801376c:	6a1d      	ldr	r5, [r3, #32]
 801376e:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8013772:	47a8      	blx	r5
 8013774:	b003      	add	sp, #12
 8013776:	bd30      	pop	{r4, r5, pc}
 8013778:	20027bc4 	.word	0x20027bc4

0801377c <_ZN8touchgfx3BoxD1Ev>:
 801377c:	4770      	bx	lr

0801377e <_ZN8touchgfx3BoxD0Ev>:
 801377e:	b510      	push	{r4, lr}
 8013780:	4604      	mov	r4, r0
 8013782:	212c      	movs	r1, #44	; 0x2c
 8013784:	f012 fa15 	bl	8025bb2 <_ZdlPvj>
 8013788:	4620      	mov	r0, r4
 801378a:	bd10      	pop	{r4, pc}

0801378c <_ZNK8touchgfx3Box17invalidateContentEv>:
 801378c:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 8013790:	b12a      	cbz	r2, 801379e <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8013792:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8013796:	b112      	cbz	r2, 801379e <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8013798:	6803      	ldr	r3, [r0, #0]
 801379a:	695b      	ldr	r3, [r3, #20]
 801379c:	4718      	bx	r3
 801379e:	4770      	bx	lr

080137a0 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 80137a0:	4b30      	ldr	r3, [pc, #192]	; (8013864 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 80137a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80137a6:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 80137a8:	b08d      	sub	sp, #52	; 0x34
 80137aa:	881b      	ldrh	r3, [r3, #0]
 80137ac:	4604      	mov	r4, r0
 80137ae:	460f      	mov	r7, r1
 80137b0:	4293      	cmp	r3, r2
 80137b2:	d954      	bls.n	801385e <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 80137b4:	4b2c      	ldr	r3, [pc, #176]	; (8013868 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 80137b6:	6819      	ldr	r1, [r3, #0]
 80137b8:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 80137bc:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 80137c0:	4a2a      	ldr	r2, [pc, #168]	; (801386c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 80137c2:	6812      	ldr	r2, [r2, #0]
 80137c4:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80137c8:	2900      	cmp	r1, #0
 80137ca:	d048      	beq.n	801385e <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 80137cc:	785a      	ldrb	r2, [r3, #1]
 80137ce:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80137d2:	f3c2 0801 	ubfx	r8, r2, #0, #2
 80137d6:	f3c2 0281 	ubfx	r2, r2, #2, #2
 80137da:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 80137de:	4b24      	ldr	r3, [pc, #144]	; (8013870 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 80137e0:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
 80137e4:	681a      	ldr	r2, [r3, #0]
 80137e6:	f890 5036 	ldrb.w	r5, [r0, #54]	; 0x36
 80137ea:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 80137ee:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 80137f2:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80137f4:	f890 0037 	ldrb.w	r0, [r0, #55]	; 0x37
 80137f8:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
 80137fc:	9107      	str	r1, [sp, #28]
 80137fe:	f88d 8020 	strb.w	r8, [sp, #32]
 8013802:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 8013806:	9609      	str	r6, [sp, #36]	; 0x24
 8013808:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 801380c:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 8013810:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
 8013814:	b10b      	cbz	r3, 801381a <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 8013816:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
 8013818:	b905      	cbnz	r5, 801381c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 801381a:	6895      	ldr	r5, [r2, #8]
 801381c:	ae05      	add	r6, sp, #20
 801381e:	4621      	mov	r1, r4
 8013820:	4630      	mov	r0, r6
 8013822:	f003 fddd 	bl	80173e0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013826:	4b13      	ldr	r3, [pc, #76]	; (8013874 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 8013828:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801382a:	6818      	ldr	r0, [r3, #0]
 801382c:	f7f3 fe3c 	bl	80074a8 <_ZNK8touchgfx5Texts7getTextEt>
 8013830:	6823      	ldr	r3, [r4, #0]
 8013832:	4680      	mov	r8, r0
 8013834:	4620      	mov	r0, r4
 8013836:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013838:	4798      	blx	r3
 801383a:	6823      	ldr	r3, [r4, #0]
 801383c:	4681      	mov	r9, r0
 801383e:	4620      	mov	r0, r4
 8013840:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013844:	4798      	blx	r3
 8013846:	ab07      	add	r3, sp, #28
 8013848:	f8cd 8004 	str.w	r8, [sp, #4]
 801384c:	9300      	str	r3, [sp, #0]
 801384e:	463b      	mov	r3, r7
 8013850:	e9cd 9002 	strd	r9, r0, [sp, #8]
 8013854:	4628      	mov	r0, r5
 8013856:	e896 0006 	ldmia.w	r6, {r1, r2}
 801385a:	f7f3 fdd7 	bl	800740c <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801385e:	b00d      	add	sp, #52	; 0x34
 8013860:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013864:	20027c20 	.word	0x20027c20
 8013868:	20027c1c 	.word	0x20027c1c
 801386c:	20027c24 	.word	0x20027c24
 8013870:	20027bc4 	.word	0x20027bc4
 8013874:	20027c28 	.word	0x20027c28

08013878 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 8013878:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 801387c:	4770      	bx	lr

0801387e <_ZNK8touchgfx6Button17invalidateContentEv>:
 801387e:	b508      	push	{r3, lr}
 8013880:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 8013884:	b10b      	cbz	r3, 801388a <_ZNK8touchgfx6Button17invalidateContentEv+0xc>
 8013886:	f7ee fda0 	bl	80023ca <_ZNK8touchgfx8Drawable17invalidateContentEv>
 801388a:	bd08      	pop	{r3, pc}

0801388c <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_>:
 801388c:	4770      	bx	lr

0801388e <_ZN8touchgfx14ButtonWithIconD1Ev>:
 801388e:	4770      	bx	lr

08013890 <_ZN8touchgfx14ButtonWithIconD0Ev>:
 8013890:	b510      	push	{r4, lr}
 8013892:	4604      	mov	r4, r0
 8013894:	213c      	movs	r1, #60	; 0x3c
 8013896:	f012 f98c 	bl	8025bb2 <_ZdlPvj>
 801389a:	4620      	mov	r0, r4
 801389c:	bd10      	pop	{r4, pc}

0801389e <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>:
 801389e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138a2:	461c      	mov	r4, r3
 80138a4:	4606      	mov	r6, r0
 80138a6:	9f06      	ldr	r7, [sp, #24]
 80138a8:	f012 f8d3 	bl	8025a52 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 80138ac:	8823      	ldrh	r3, [r4, #0]
 80138ae:	f04f 0802 	mov.w	r8, #2
 80138b2:	f9b6 5008 	ldrsh.w	r5, [r6, #8]
 80138b6:	4638      	mov	r0, r7
 80138b8:	86b3      	strh	r3, [r6, #52]	; 0x34
 80138ba:	883b      	ldrh	r3, [r7, #0]
 80138bc:	fb95 f5f8 	sdiv	r5, r5, r8
 80138c0:	86f3      	strh	r3, [r6, #54]	; 0x36
 80138c2:	b2ad      	uxth	r5, r5
 80138c4:	f005 ffa6 	bl	8019814 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80138c8:	f9b6 400a 	ldrsh.w	r4, [r6, #10]
 80138cc:	fb90 f0f8 	sdiv	r0, r0, r8
 80138d0:	1a2d      	subs	r5, r5, r0
 80138d2:	4638      	mov	r0, r7
 80138d4:	fb94 f4f8 	sdiv	r4, r4, r8
 80138d8:	8735      	strh	r5, [r6, #56]	; 0x38
 80138da:	b2a4      	uxth	r4, r4
 80138dc:	f005 ffce 	bl	801987c <_ZNK8touchgfx6Bitmap9getHeightEv>
 80138e0:	fb90 f0f8 	sdiv	r0, r0, r8
 80138e4:	1a24      	subs	r4, r4, r0
 80138e6:	8774      	strh	r4, [r6, #58]	; 0x3a
 80138e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080138ec <_ZN8touchgfx14AbstractButton13executeActionEv>:
 80138ec:	b510      	push	{r4, lr}
 80138ee:	4604      	mov	r4, r0
 80138f0:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80138f2:	b150      	cbz	r0, 801390a <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 80138f4:	6803      	ldr	r3, [r0, #0]
 80138f6:	68db      	ldr	r3, [r3, #12]
 80138f8:	4798      	blx	r3
 80138fa:	b130      	cbz	r0, 801390a <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 80138fc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80138fe:	4621      	mov	r1, r4
 8013900:	6803      	ldr	r3, [r0, #0]
 8013902:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013906:	689b      	ldr	r3, [r3, #8]
 8013908:	4718      	bx	r3
 801390a:	bd10      	pop	{r4, pc}

0801390c <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE>:
 801390c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013910:	4604      	mov	r4, r0
 8013912:	b08c      	sub	sp, #48	; 0x30
 8013914:	460d      	mov	r5, r1
 8013916:	f012 f8cf 	bl	8025ab8 <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 801391a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801391e:	2b00      	cmp	r3, #0
 8013920:	d05d      	beq.n	80139de <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xd2>
 8013922:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8013924:	a805      	add	r0, sp, #20
 8013926:	f8ad 3014 	strh.w	r3, [sp, #20]
 801392a:	f9b4 8038 	ldrsh.w	r8, [r4, #56]	; 0x38
 801392e:	f9b4 703a 	ldrsh.w	r7, [r4, #58]	; 0x3a
 8013932:	f005 ff6f 	bl	8019814 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8013936:	4606      	mov	r6, r0
 8013938:	a805      	add	r0, sp, #20
 801393a:	f005 ff9f 	bl	801987c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801393e:	6869      	ldr	r1, [r5, #4]
 8013940:	f8ad 001e 	strh.w	r0, [sp, #30]
 8013944:	ab08      	add	r3, sp, #32
 8013946:	6828      	ldr	r0, [r5, #0]
 8013948:	ad08      	add	r5, sp, #32
 801394a:	f8ad 8018 	strh.w	r8, [sp, #24]
 801394e:	f8ad 701a 	strh.w	r7, [sp, #26]
 8013952:	f8ad 601c 	strh.w	r6, [sp, #28]
 8013956:	c303      	stmia	r3!, {r0, r1}
 8013958:	a906      	add	r1, sp, #24
 801395a:	4628      	mov	r0, r5
 801395c:	f7fc fc9a 	bl	8010294 <_ZN8touchgfx4RectaNERKS0_>
 8013960:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8013964:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013968:	429a      	cmp	r2, r3
 801396a:	d035      	beq.n	80139d8 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xcc>
 801396c:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8013970:	2b00      	cmp	r3, #0
 8013972:	dd31      	ble.n	80139d8 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xcc>
 8013974:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 8013978:	2b00      	cmp	r3, #0
 801397a:	dd2d      	ble.n	80139d8 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xcc>
 801397c:	2300      	movs	r3, #0
 801397e:	a90a      	add	r1, sp, #40	; 0x28
 8013980:	4620      	mov	r0, r4
 8013982:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8013986:	6823      	ldr	r3, [r4, #0]
 8013988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801398a:	4798      	blx	r3
 801398c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8013990:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 8013992:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8013996:	1a9b      	subs	r3, r3, r2
 8013998:	f8ad 3020 	strh.w	r3, [sp, #32]
 801399c:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 801399e:	1ac9      	subs	r1, r1, r3
 80139a0:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 80139a4:	490f      	ldr	r1, [pc, #60]	; (80139e4 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xd8>)
 80139a6:	6809      	ldr	r1, [r1, #0]
 80139a8:	f891 0076 	ldrb.w	r0, [r1, #118]	; 0x76
 80139ac:	b108      	cbz	r0, 80139b2 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xa6>
 80139ae:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 80139b0:	b900      	cbnz	r0, 80139b4 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xa8>
 80139b2:	6888      	ldr	r0, [r1, #8]
 80139b4:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
 80139b8:	2601      	movs	r6, #1
 80139ba:	440b      	add	r3, r1
 80139bc:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 80139c0:	440a      	add	r2, r1
 80139c2:	6801      	ldr	r1, [r0, #0]
 80139c4:	9602      	str	r6, [sp, #8]
 80139c6:	b21b      	sxth	r3, r3
 80139c8:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 80139cc:	b212      	sxth	r2, r2
 80139ce:	e9cd 5400 	strd	r5, r4, [sp]
 80139d2:	688c      	ldr	r4, [r1, #8]
 80139d4:	a905      	add	r1, sp, #20
 80139d6:	47a0      	blx	r4
 80139d8:	b00c      	add	sp, #48	; 0x30
 80139da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80139de:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80139e0:	e7a0      	b.n	8013924 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x18>
 80139e2:	bf00      	nop
 80139e4:	20027bc4 	.word	0x20027bc4

080139e8 <_ZN8touchgfx14ButtonWithIconC1Ev>:
 80139e8:	2101      	movs	r1, #1
 80139ea:	2200      	movs	r2, #0
 80139ec:	b510      	push	{r4, lr}
 80139ee:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 80139f2:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 80139f6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80139fa:	4c0d      	ldr	r4, [pc, #52]	; (8013a30 <_ZN8touchgfx14ButtonWithIconC1Ev+0x48>)
 80139fc:	8082      	strh	r2, [r0, #4]
 80139fe:	80c2      	strh	r2, [r0, #6]
 8013a00:	8102      	strh	r2, [r0, #8]
 8013a02:	8142      	strh	r2, [r0, #10]
 8013a04:	8182      	strh	r2, [r0, #12]
 8013a06:	81c2      	strh	r2, [r0, #14]
 8013a08:	8202      	strh	r2, [r0, #16]
 8013a0a:	8242      	strh	r2, [r0, #18]
 8013a0c:	61c2      	str	r2, [r0, #28]
 8013a0e:	8402      	strh	r2, [r0, #32]
 8013a10:	8442      	strh	r2, [r0, #34]	; 0x22
 8013a12:	6282      	str	r2, [r0, #40]	; 0x28
 8013a14:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 8013a18:	85c1      	strh	r1, [r0, #46]	; 0x2e
 8013a1a:	8601      	strh	r1, [r0, #48]	; 0x30
 8013a1c:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 8013a20:	6004      	str	r4, [r0, #0]
 8013a22:	8681      	strh	r1, [r0, #52]	; 0x34
 8013a24:	86c1      	strh	r1, [r0, #54]	; 0x36
 8013a26:	8702      	strh	r2, [r0, #56]	; 0x38
 8013a28:	8742      	strh	r2, [r0, #58]	; 0x3a
 8013a2a:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8013a2e:	bd10      	pop	{r4, pc}
 8013a30:	0802b158 	.word	0x0802b158

08013a34 <_ZN8touchgfx5ImageD1Ev>:
 8013a34:	4770      	bx	lr

08013a36 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8013a36:	b570      	push	{r4, r5, r6, lr}
 8013a38:	880b      	ldrh	r3, [r1, #0]
 8013a3a:	460d      	mov	r5, r1
 8013a3c:	4604      	mov	r4, r0
 8013a3e:	84c3      	strh	r3, [r0, #38]	; 0x26
 8013a40:	4608      	mov	r0, r1
 8013a42:	f005 fee7 	bl	8019814 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8013a46:	4606      	mov	r6, r0
 8013a48:	4628      	mov	r0, r5
 8013a4a:	f005 ff17 	bl	801987c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8013a4e:	6823      	ldr	r3, [r4, #0]
 8013a50:	4605      	mov	r5, r0
 8013a52:	4631      	mov	r1, r6
 8013a54:	4620      	mov	r0, r4
 8013a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013a58:	4798      	blx	r3
 8013a5a:	6823      	ldr	r3, [r4, #0]
 8013a5c:	4629      	mov	r1, r5
 8013a5e:	4620      	mov	r0, r4
 8013a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013a62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013a66:	4718      	bx	r3

08013a68 <_ZN8touchgfx5ImageD0Ev>:
 8013a68:	b510      	push	{r4, lr}
 8013a6a:	4604      	mov	r4, r0
 8013a6c:	212c      	movs	r1, #44	; 0x2c
 8013a6e:	f012 f8a0 	bl	8025bb2 <_ZdlPvj>
 8013a72:	4620      	mov	r0, r4
 8013a74:	bd10      	pop	{r4, pc}

08013a76 <_ZNK8touchgfx5Image12getSolidRectEv>:
 8013a76:	b510      	push	{r4, lr}
 8013a78:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8013a7c:	4604      	mov	r4, r0
 8013a7e:	2bff      	cmp	r3, #255	; 0xff
 8013a80:	d006      	beq.n	8013a90 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8013a82:	2300      	movs	r3, #0
 8013a84:	8003      	strh	r3, [r0, #0]
 8013a86:	8043      	strh	r3, [r0, #2]
 8013a88:	8083      	strh	r3, [r0, #4]
 8013a8a:	80c3      	strh	r3, [r0, #6]
 8013a8c:	4620      	mov	r0, r4
 8013a8e:	bd10      	pop	{r4, pc}
 8013a90:	3126      	adds	r1, #38	; 0x26
 8013a92:	f005 ff27 	bl	80198e4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8013a96:	e7f9      	b.n	8013a8c <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08013a98 <_ZNK8touchgfx5Image17invalidateContentEv>:
 8013a98:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 8013a9c:	b12a      	cbz	r2, 8013aaa <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8013a9e:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8013aa2:	b112      	cbz	r2, 8013aaa <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8013aa4:	6803      	ldr	r3, [r0, #0]
 8013aa6:	695b      	ldr	r3, [r3, #20]
 8013aa8:	4718      	bx	r3
 8013aaa:	4770      	bx	lr

08013aac <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8013aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ab0:	4604      	mov	r4, r0
 8013ab2:	b088      	sub	sp, #32
 8013ab4:	2500      	movs	r5, #0
 8013ab6:	460f      	mov	r7, r1
 8013ab8:	f854 3b26 	ldr.w	r3, [r4], #38
 8013abc:	a904      	add	r1, sp, #16
 8013abe:	4606      	mov	r6, r0
 8013ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ac2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8013ac6:	4798      	blx	r3
 8013ac8:	4620      	mov	r0, r4
 8013aca:	f005 fea3 	bl	8019814 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8013ace:	4680      	mov	r8, r0
 8013ad0:	4620      	mov	r0, r4
 8013ad2:	f005 fed3 	bl	801987c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8013ad6:	9506      	str	r5, [sp, #24]
 8013ad8:	ad06      	add	r5, sp, #24
 8013ada:	f8ad 001e 	strh.w	r0, [sp, #30]
 8013ade:	4639      	mov	r1, r7
 8013ae0:	f8ad 801c 	strh.w	r8, [sp, #28]
 8013ae4:	4628      	mov	r0, r5
 8013ae6:	f7fc fbd5 	bl	8010294 <_ZN8touchgfx4RectaNERKS0_>
 8013aea:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	dd19      	ble.n	8013b26 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8013af2:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	dd15      	ble.n	8013b26 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8013afa:	4b0c      	ldr	r3, [pc, #48]	; (8013b2c <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8013afc:	681b      	ldr	r3, [r3, #0]
 8013afe:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8013b02:	b10a      	cbz	r2, 8013b08 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8013b04:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8013b06:	b900      	cbnz	r0, 8013b0a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8013b08:	6898      	ldr	r0, [r3, #8]
 8013b0a:	2701      	movs	r7, #1
 8013b0c:	6801      	ldr	r1, [r0, #0]
 8013b0e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8013b12:	9702      	str	r7, [sp, #8]
 8013b14:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 8013b18:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8013b1c:	e9cd 5600 	strd	r5, r6, [sp]
 8013b20:	688d      	ldr	r5, [r1, #8]
 8013b22:	4621      	mov	r1, r4
 8013b24:	47a8      	blx	r5
 8013b26:	b008      	add	sp, #32
 8013b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b2c:	20027bc4 	.word	0x20027bc4

08013b30 <_ZN8touchgfx7OutlineD1Ev>:
 8013b30:	4770      	bx	lr

08013b32 <_ZN8touchgfx7OutlineD0Ev>:
 8013b32:	b510      	push	{r4, lr}
 8013b34:	4604      	mov	r4, r0
 8013b36:	2130      	movs	r1, #48	; 0x30
 8013b38:	f012 f83b 	bl	8025bb2 <_ZdlPvj>
 8013b3c:	4620      	mov	r0, r4
 8013b3e:	bd10      	pop	{r4, pc}

08013b40 <_ZN8touchgfx7Outline5resetEv>:
 8013b40:	b510      	push	{r4, lr}
 8013b42:	4604      	mov	r4, r0
 8013b44:	f000 fe86 	bl	8014854 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8013b48:	60e0      	str	r0, [r4, #12]
 8013b4a:	f000 fe89 	bl	8014860 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 8013b4e:	68e3      	ldr	r3, [r4, #12]
 8013b50:	08c0      	lsrs	r0, r0, #3
 8013b52:	2200      	movs	r2, #0
 8013b54:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8013b58:	6123      	str	r3, [r4, #16]
 8013b5a:	3801      	subs	r0, #1
 8013b5c:	60a2      	str	r2, [r4, #8]
 8013b5e:	6060      	str	r0, [r4, #4]
 8013b60:	8019      	strh	r1, [r3, #0]
 8013b62:	8059      	strh	r1, [r3, #2]
 8013b64:	809a      	strh	r2, [r3, #4]
 8013b66:	80da      	strh	r2, [r3, #6]
 8013b68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013b6a:	f023 0301 	bic.w	r3, r3, #1
 8013b6e:	f043 0302 	orr.w	r3, r3, #2
 8013b72:	6263      	str	r3, [r4, #36]	; 0x24
 8013b74:	bd10      	pop	{r4, pc}
	...

08013b78 <_ZN8touchgfx7OutlineC1Ev>:
 8013b78:	4b0a      	ldr	r3, [pc, #40]	; (8013ba4 <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 8013b7a:	b510      	push	{r4, lr}
 8013b7c:	6003      	str	r3, [r0, #0]
 8013b7e:	2300      	movs	r3, #0
 8013b80:	4604      	mov	r4, r0
 8013b82:	6243      	str	r3, [r0, #36]	; 0x24
 8013b84:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8013b88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013b8c:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8013b90:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8013b94:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8013b98:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 8013b9c:	f7ff ffd0 	bl	8013b40 <_ZN8touchgfx7Outline5resetEv>
 8013ba0:	4620      	mov	r0, r4
 8013ba2:	bd10      	pop	{r4, pc}
 8013ba4:	0802b23c 	.word	0x0802b23c

08013ba8 <_ZN8touchgfx7Outline10renderLineEiiii>:
 8013ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bac:	b093      	sub	sp, #76	; 0x4c
 8013bae:	1156      	asrs	r6, r2, #5
 8013bb0:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8013bb2:	9305      	str	r3, [sp, #20]
 8013bb4:	1153      	asrs	r3, r2, #5
 8013bb6:	f004 051f 	and.w	r5, r4, #31
 8013bba:	9303      	str	r3, [sp, #12]
 8013bbc:	1163      	asrs	r3, r4, #5
 8013bbe:	9504      	str	r5, [sp, #16]
 8013bc0:	1165      	asrs	r5, r4, #5
 8013bc2:	9306      	str	r3, [sp, #24]
 8013bc4:	f002 031f 	and.w	r3, r2, #31
 8013bc8:	42ae      	cmp	r6, r5
 8013bca:	f040 80f4 	bne.w	8013db6 <_ZN8touchgfx7Outline10renderLineEiiii+0x20e>
 8013bce:	9c04      	ldr	r4, [sp, #16]
 8013bd0:	9a05      	ldr	r2, [sp, #20]
 8013bd2:	42a3      	cmp	r3, r4
 8013bd4:	ea4f 1e62 	mov.w	lr, r2, asr #5
 8013bd8:	6902      	ldr	r2, [r0, #16]
 8013bda:	d125      	bne.n	8013c28 <_ZN8touchgfx7Outline10renderLineEiiii+0x80>
 8013bdc:	f9b2 3000 	ldrsh.w	r3, [r2]
 8013be0:	459e      	cmp	lr, r3
 8013be2:	d103      	bne.n	8013bec <_ZN8touchgfx7Outline10renderLineEiiii+0x44>
 8013be4:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8013be8:	429e      	cmp	r6, r3
 8013bea:	d035      	beq.n	8013c58 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8013bec:	88d1      	ldrh	r1, [r2, #6]
 8013bee:	8893      	ldrh	r3, [r2, #4]
 8013bf0:	430b      	orrs	r3, r1
 8013bf2:	d010      	beq.n	8013c16 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8013bf4:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	db0c      	blt.n	8013c16 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8013bfc:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8013bfe:	428b      	cmp	r3, r1
 8013c00:	da09      	bge.n	8013c16 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8013c02:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8013c06:	428b      	cmp	r3, r1
 8013c08:	f103 0301 	add.w	r3, r3, #1
 8013c0c:	bf38      	it	cc
 8013c0e:	3208      	addcc	r2, #8
 8013c10:	6083      	str	r3, [r0, #8]
 8013c12:	bf38      	it	cc
 8013c14:	6102      	strcc	r2, [r0, #16]
 8013c16:	6903      	ldr	r3, [r0, #16]
 8013c18:	9a03      	ldr	r2, [sp, #12]
 8013c1a:	f8a3 e000 	strh.w	lr, [r3]
 8013c1e:	805a      	strh	r2, [r3, #2]
 8013c20:	2200      	movs	r2, #0
 8013c22:	809a      	strh	r2, [r3, #4]
 8013c24:	80da      	strh	r2, [r3, #6]
 8013c26:	e017      	b.n	8013c58 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8013c28:	9c05      	ldr	r4, [sp, #20]
 8013c2a:	114e      	asrs	r6, r1, #5
 8013c2c:	f001 0c1f 	and.w	ip, r1, #31
 8013c30:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 8013c34:	f004 041f 	and.w	r4, r4, #31
 8013c38:	4576      	cmp	r6, lr
 8013c3a:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 8013c3e:	9402      	str	r4, [sp, #8]
 8013c40:	9c04      	ldr	r4, [sp, #16]
 8013c42:	eba4 0403 	sub.w	r4, r4, r3
 8013c46:	d10a      	bne.n	8013c5e <_ZN8touchgfx7Outline10renderLineEiiii+0xb6>
 8013c48:	9b02      	ldr	r3, [sp, #8]
 8013c4a:	44a0      	add	r8, r4
 8013c4c:	449c      	add	ip, r3
 8013c4e:	f8a2 8004 	strh.w	r8, [r2, #4]
 8013c52:	fb04 a40c 	mla	r4, r4, ip, sl
 8013c56:	80d4      	strh	r4, [r2, #6]
 8013c58:	b013      	add	sp, #76	; 0x4c
 8013c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c5e:	9d05      	ldr	r5, [sp, #20]
 8013c60:	1a69      	subs	r1, r5, r1
 8013c62:	bf51      	iteee	pl
 8013c64:	f1cc 0520 	rsbpl	r5, ip, #32
 8013c68:	fb04 f40c 	mulmi.w	r4, r4, ip
 8013c6c:	4249      	negmi	r1, r1
 8013c6e:	2500      	movmi	r5, #0
 8013c70:	bf5d      	ittte	pl
 8013c72:	436c      	mulpl	r4, r5
 8013c74:	2520      	movpl	r5, #32
 8013c76:	f04f 0901 	movpl.w	r9, #1
 8013c7a:	f04f 39ff 	movmi.w	r9, #4294967295
 8013c7e:	9501      	str	r5, [sp, #4]
 8013c80:	9f01      	ldr	r7, [sp, #4]
 8013c82:	444e      	add	r6, r9
 8013c84:	fb94 f5f1 	sdiv	r5, r4, r1
 8013c88:	fb01 4415 	mls	r4, r1, r5, r4
 8013c8c:	44bc      	add	ip, r7
 8013c8e:	2c00      	cmp	r4, #0
 8013c90:	bfbc      	itt	lt
 8013c92:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8013c96:	1864      	addlt	r4, r4, r1
 8013c98:	44a8      	add	r8, r5
 8013c9a:	fb05 ac0c 	mla	ip, r5, ip, sl
 8013c9e:	f8a2 8004 	strh.w	r8, [r2, #4]
 8013ca2:	f8a2 c006 	strh.w	ip, [r2, #6]
 8013ca6:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8013caa:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8013cae:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 8013cb2:	ea58 0202 	orrs.w	r2, r8, r2
 8013cb6:	d011      	beq.n	8013cdc <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8013cb8:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8013cbc:	f1b8 0f00 	cmp.w	r8, #0
 8013cc0:	db0c      	blt.n	8013cdc <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8013cc2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8013cc4:	4590      	cmp	r8, r2
 8013cc6:	da09      	bge.n	8013cdc <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8013cc8:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 8013ccc:	4590      	cmp	r8, r2
 8013cce:	bf3c      	itt	cc
 8013cd0:	f10c 0208 	addcc.w	r2, ip, #8
 8013cd4:	6102      	strcc	r2, [r0, #16]
 8013cd6:	f108 0201 	add.w	r2, r8, #1
 8013cda:	6082      	str	r2, [r0, #8]
 8013cdc:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8013ce0:	2700      	movs	r7, #0
 8013ce2:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8013ce6:	45b6      	cmp	lr, r6
 8013ce8:	f8ac 6000 	strh.w	r6, [ip]
 8013cec:	442b      	add	r3, r5
 8013cee:	f8ac 2002 	strh.w	r2, [ip, #2]
 8013cf2:	f8ac 7004 	strh.w	r7, [ip, #4]
 8013cf6:	f8ac 7006 	strh.w	r7, [ip, #6]
 8013cfa:	d04b      	beq.n	8013d94 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ec>
 8013cfc:	9f04      	ldr	r7, [sp, #16]
 8013cfe:	1a64      	subs	r4, r4, r1
 8013d00:	f04f 0a00 	mov.w	sl, #0
 8013d04:	1aff      	subs	r7, r7, r3
 8013d06:	443d      	add	r5, r7
 8013d08:	016d      	lsls	r5, r5, #5
 8013d0a:	fb95 f8f1 	sdiv	r8, r5, r1
 8013d0e:	fb01 5518 	mls	r5, r1, r8, r5
 8013d12:	2d00      	cmp	r5, #0
 8013d14:	bfbc      	itt	lt
 8013d16:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8013d1a:	186d      	addlt	r5, r5, r1
 8013d1c:	f108 0701 	add.w	r7, r8, #1
 8013d20:	9703      	str	r7, [sp, #12]
 8013d22:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8013d26:	1964      	adds	r4, r4, r5
 8013d28:	444e      	add	r6, r9
 8013d2a:	bf54      	ite	pl
 8013d2c:	9f03      	ldrpl	r7, [sp, #12]
 8013d2e:	4647      	movmi	r7, r8
 8013d30:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8013d34:	bf58      	it	pl
 8013d36:	1a64      	subpl	r4, r4, r1
 8013d38:	443b      	add	r3, r7
 8013d3a:	44bb      	add	fp, r7
 8013d3c:	f8ac b004 	strh.w	fp, [ip, #4]
 8013d40:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8013d44:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8013d48:	f8ac b006 	strh.w	fp, [ip, #6]
 8013d4c:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8013d50:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8013d54:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8013d58:	ea5b 0707 	orrs.w	r7, fp, r7
 8013d5c:	d011      	beq.n	8013d82 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8013d5e:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8013d62:	f1bb 0f00 	cmp.w	fp, #0
 8013d66:	db0c      	blt.n	8013d82 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8013d68:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8013d6a:	45bb      	cmp	fp, r7
 8013d6c:	da09      	bge.n	8013d82 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8013d6e:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8013d72:	45bb      	cmp	fp, r7
 8013d74:	bf3c      	itt	cc
 8013d76:	f10c 0708 	addcc.w	r7, ip, #8
 8013d7a:	6107      	strcc	r7, [r0, #16]
 8013d7c:	f10b 0701 	add.w	r7, fp, #1
 8013d80:	6087      	str	r7, [r0, #8]
 8013d82:	6907      	ldr	r7, [r0, #16]
 8013d84:	45b6      	cmp	lr, r6
 8013d86:	803e      	strh	r6, [r7, #0]
 8013d88:	807a      	strh	r2, [r7, #2]
 8013d8a:	f8a7 a004 	strh.w	sl, [r7, #4]
 8013d8e:	f8a7 a006 	strh.w	sl, [r7, #6]
 8013d92:	d1c6      	bne.n	8013d22 <_ZN8touchgfx7Outline10renderLineEiiii+0x17a>
 8013d94:	9a04      	ldr	r2, [sp, #16]
 8013d96:	1ad3      	subs	r3, r2, r3
 8013d98:	6902      	ldr	r2, [r0, #16]
 8013d9a:	8891      	ldrh	r1, [r2, #4]
 8013d9c:	88d6      	ldrh	r6, [r2, #6]
 8013d9e:	4419      	add	r1, r3
 8013da0:	8091      	strh	r1, [r2, #4]
 8013da2:	9902      	ldr	r1, [sp, #8]
 8013da4:	f101 0c20 	add.w	ip, r1, #32
 8013da8:	9901      	ldr	r1, [sp, #4]
 8013daa:	ebac 0c01 	sub.w	ip, ip, r1
 8013dae:	fb03 630c 	mla	r3, r3, ip, r6
 8013db2:	80d3      	strh	r3, [r2, #6]
 8013db4:	e750      	b.n	8013c58 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8013db6:	9d05      	ldr	r5, [sp, #20]
 8013db8:	1aa2      	subs	r2, r4, r2
 8013dba:	eba5 0501 	sub.w	r5, r5, r1
 8013dbe:	9202      	str	r2, [sp, #8]
 8013dc0:	9508      	str	r5, [sp, #32]
 8013dc2:	f140 8128 	bpl.w	8014016 <_ZN8touchgfx7Outline10renderLineEiiii+0x46e>
 8013dc6:	9a03      	ldr	r2, [sp, #12]
 8013dc8:	2a00      	cmp	r2, #0
 8013dca:	f6ff af45 	blt.w	8013c58 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8013dce:	9a02      	ldr	r2, [sp, #8]
 8013dd0:	f04f 34ff 	mov.w	r4, #4294967295
 8013dd4:	4252      	negs	r2, r2
 8013dd6:	940b      	str	r4, [sp, #44]	; 0x2c
 8013dd8:	2400      	movs	r4, #0
 8013dda:	9202      	str	r2, [sp, #8]
 8013ddc:	9a06      	ldr	r2, [sp, #24]
 8013dde:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 8013de2:	9206      	str	r2, [sp, #24]
 8013de4:	462a      	mov	r2, r5
 8013de6:	435a      	muls	r2, r3
 8013de8:	9401      	str	r4, [sp, #4]
 8013dea:	9c02      	ldr	r4, [sp, #8]
 8013dec:	9d02      	ldr	r5, [sp, #8]
 8013dee:	fb92 f4f4 	sdiv	r4, r2, r4
 8013df2:	fb05 2214 	mls	r2, r5, r4, r2
 8013df6:	2a00      	cmp	r2, #0
 8013df8:	9207      	str	r2, [sp, #28]
 8013dfa:	bfbc      	itt	lt
 8013dfc:	1952      	addlt	r2, r2, r5
 8013dfe:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8013e02:	6905      	ldr	r5, [r0, #16]
 8013e04:	bfb8      	it	lt
 8013e06:	9207      	strlt	r2, [sp, #28]
 8013e08:	eb04 0901 	add.w	r9, r4, r1
 8013e0c:	9a01      	ldr	r2, [sp, #4]
 8013e0e:	ea4f 1669 	mov.w	r6, r9, asr #5
 8013e12:	429a      	cmp	r2, r3
 8013e14:	f040 8111 	bne.w	801403a <_ZN8touchgfx7Outline10renderLineEiiii+0x492>
 8013e18:	f9b5 3000 	ldrsh.w	r3, [r5]
 8013e1c:	429e      	cmp	r6, r3
 8013e1e:	d104      	bne.n	8013e2a <_ZN8touchgfx7Outline10renderLineEiiii+0x282>
 8013e20:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8013e24:	9a03      	ldr	r2, [sp, #12]
 8013e26:	429a      	cmp	r2, r3
 8013e28:	d01b      	beq.n	8013e62 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8013e2a:	88ea      	ldrh	r2, [r5, #6]
 8013e2c:	88ab      	ldrh	r3, [r5, #4]
 8013e2e:	4313      	orrs	r3, r2
 8013e30:	d010      	beq.n	8013e54 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8013e32:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8013e36:	2a00      	cmp	r2, #0
 8013e38:	db0c      	blt.n	8013e54 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8013e3a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8013e3c:	429a      	cmp	r2, r3
 8013e3e:	da09      	bge.n	8013e54 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8013e40:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8013e44:	429a      	cmp	r2, r3
 8013e46:	f102 0201 	add.w	r2, r2, #1
 8013e4a:	bf38      	it	cc
 8013e4c:	3508      	addcc	r5, #8
 8013e4e:	6082      	str	r2, [r0, #8]
 8013e50:	bf38      	it	cc
 8013e52:	6105      	strcc	r5, [r0, #16]
 8013e54:	6903      	ldr	r3, [r0, #16]
 8013e56:	9a03      	ldr	r2, [sp, #12]
 8013e58:	801e      	strh	r6, [r3, #0]
 8013e5a:	805a      	strh	r2, [r3, #2]
 8013e5c:	2200      	movs	r2, #0
 8013e5e:	809a      	strh	r2, [r3, #4]
 8013e60:	80da      	strh	r2, [r3, #6]
 8013e62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013e64:	9a03      	ldr	r2, [sp, #12]
 8013e66:	6901      	ldr	r1, [r0, #16]
 8013e68:	441a      	add	r2, r3
 8013e6a:	f9b1 3000 	ldrsh.w	r3, [r1]
 8013e6e:	42b3      	cmp	r3, r6
 8013e70:	d103      	bne.n	8013e7a <_ZN8touchgfx7Outline10renderLineEiiii+0x2d2>
 8013e72:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8013e76:	429a      	cmp	r2, r3
 8013e78:	d01a      	beq.n	8013eb0 <_ZN8touchgfx7Outline10renderLineEiiii+0x308>
 8013e7a:	88cc      	ldrh	r4, [r1, #6]
 8013e7c:	888b      	ldrh	r3, [r1, #4]
 8013e7e:	4323      	orrs	r3, r4
 8013e80:	d010      	beq.n	8013ea4 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8013e82:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8013e86:	2c00      	cmp	r4, #0
 8013e88:	db0c      	blt.n	8013ea4 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8013e8a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8013e8c:	429c      	cmp	r4, r3
 8013e8e:	da09      	bge.n	8013ea4 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8013e90:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8013e94:	429c      	cmp	r4, r3
 8013e96:	f104 0401 	add.w	r4, r4, #1
 8013e9a:	bf38      	it	cc
 8013e9c:	3108      	addcc	r1, #8
 8013e9e:	6084      	str	r4, [r0, #8]
 8013ea0:	bf38      	it	cc
 8013ea2:	6101      	strcc	r1, [r0, #16]
 8013ea4:	6903      	ldr	r3, [r0, #16]
 8013ea6:	2100      	movs	r1, #0
 8013ea8:	801e      	strh	r6, [r3, #0]
 8013eaa:	805a      	strh	r2, [r3, #2]
 8013eac:	8099      	strh	r1, [r3, #4]
 8013eae:	80d9      	strh	r1, [r3, #6]
 8013eb0:	9b06      	ldr	r3, [sp, #24]
 8013eb2:	4293      	cmp	r3, r2
 8013eb4:	f000 8082 	beq.w	8013fbc <_ZN8touchgfx7Outline10renderLineEiiii+0x414>
 8013eb8:	9b08      	ldr	r3, [sp, #32]
 8013eba:	9902      	ldr	r1, [sp, #8]
 8013ebc:	015b      	lsls	r3, r3, #5
 8013ebe:	9c02      	ldr	r4, [sp, #8]
 8013ec0:	fb93 f1f1 	sdiv	r1, r3, r1
 8013ec4:	fb04 3311 	mls	r3, r4, r1, r3
 8013ec8:	9103      	str	r1, [sp, #12]
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	9308      	str	r3, [sp, #32]
 8013ece:	da04      	bge.n	8013eda <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
 8013ed0:	1e4b      	subs	r3, r1, #1
 8013ed2:	9303      	str	r3, [sp, #12]
 8013ed4:	9b08      	ldr	r3, [sp, #32]
 8013ed6:	4423      	add	r3, r4
 8013ed8:	9308      	str	r3, [sp, #32]
 8013eda:	9b07      	ldr	r3, [sp, #28]
 8013edc:	464f      	mov	r7, r9
 8013ede:	9902      	ldr	r1, [sp, #8]
 8013ee0:	2600      	movs	r6, #0
 8013ee2:	1a5b      	subs	r3, r3, r1
 8013ee4:	9307      	str	r3, [sp, #28]
 8013ee6:	9b01      	ldr	r3, [sp, #4]
 8013ee8:	f1c3 0320 	rsb	r3, r3, #32
 8013eec:	930e      	str	r3, [sp, #56]	; 0x38
 8013eee:	990e      	ldr	r1, [sp, #56]	; 0x38
 8013ef0:	9b01      	ldr	r3, [sp, #4]
 8013ef2:	1a5b      	subs	r3, r3, r1
 8013ef4:	930a      	str	r3, [sp, #40]	; 0x28
 8013ef6:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 8013efa:	185b      	adds	r3, r3, r1
 8013efc:	bf58      	it	pl
 8013efe:	9902      	ldrpl	r1, [sp, #8]
 8013f00:	9307      	str	r3, [sp, #28]
 8013f02:	bf57      	itett	pl
 8013f04:	1a5b      	subpl	r3, r3, r1
 8013f06:	9903      	ldrmi	r1, [sp, #12]
 8013f08:	9307      	strpl	r3, [sp, #28]
 8013f0a:	9b03      	ldrpl	r3, [sp, #12]
 8013f0c:	bf58      	it	pl
 8013f0e:	1c59      	addpl	r1, r3, #1
 8013f10:	2a00      	cmp	r2, #0
 8013f12:	4489      	add	r9, r1
 8013f14:	ea4f 1a69 	mov.w	sl, r9, asr #5
 8013f18:	db2e      	blt.n	8013f78 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8013f1a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8013f1c:	4293      	cmp	r3, r2
 8013f1e:	dd2b      	ble.n	8013f78 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8013f20:	9c01      	ldr	r4, [sp, #4]
 8013f22:	6905      	ldr	r5, [r0, #16]
 8013f24:	46a0      	mov	r8, r4
 8013f26:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8013f28:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 8013f2c:	45a0      	cmp	r8, r4
 8013f2e:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 8013f32:	f040 814c 	bne.w	80141ce <_ZN8touchgfx7Outline10renderLineEiiii+0x626>
 8013f36:	f9b5 1000 	ldrsh.w	r1, [r5]
 8013f3a:	4551      	cmp	r1, sl
 8013f3c:	d103      	bne.n	8013f46 <_ZN8touchgfx7Outline10renderLineEiiii+0x39e>
 8013f3e:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8013f42:	4291      	cmp	r1, r2
 8013f44:	d018      	beq.n	8013f78 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8013f46:	ea5c 010e 	orrs.w	r1, ip, lr
 8013f4a:	d00f      	beq.n	8013f6c <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8013f4c:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8013f50:	2900      	cmp	r1, #0
 8013f52:	db0b      	blt.n	8013f6c <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8013f54:	428b      	cmp	r3, r1
 8013f56:	dd09      	ble.n	8013f6c <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8013f58:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 8013f5c:	4299      	cmp	r1, r3
 8013f5e:	f101 0101 	add.w	r1, r1, #1
 8013f62:	bf38      	it	cc
 8013f64:	3508      	addcc	r5, #8
 8013f66:	6081      	str	r1, [r0, #8]
 8013f68:	bf38      	it	cc
 8013f6a:	6105      	strcc	r5, [r0, #16]
 8013f6c:	6903      	ldr	r3, [r0, #16]
 8013f6e:	f8a3 a000 	strh.w	sl, [r3]
 8013f72:	805a      	strh	r2, [r3, #2]
 8013f74:	809e      	strh	r6, [r3, #4]
 8013f76:	80de      	strh	r6, [r3, #6]
 8013f78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013f7a:	6901      	ldr	r1, [r0, #16]
 8013f7c:	441a      	add	r2, r3
 8013f7e:	88cc      	ldrh	r4, [r1, #6]
 8013f80:	888b      	ldrh	r3, [r1, #4]
 8013f82:	4323      	orrs	r3, r4
 8013f84:	d010      	beq.n	8013fa8 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8013f86:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8013f8a:	2c00      	cmp	r4, #0
 8013f8c:	db0c      	blt.n	8013fa8 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8013f8e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8013f90:	429c      	cmp	r4, r3
 8013f92:	da09      	bge.n	8013fa8 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8013f94:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8013f98:	429c      	cmp	r4, r3
 8013f9a:	f104 0401 	add.w	r4, r4, #1
 8013f9e:	bf38      	it	cc
 8013fa0:	3108      	addcc	r1, #8
 8013fa2:	6084      	str	r4, [r0, #8]
 8013fa4:	bf38      	it	cc
 8013fa6:	6101      	strcc	r1, [r0, #16]
 8013fa8:	6903      	ldr	r3, [r0, #16]
 8013faa:	464f      	mov	r7, r9
 8013fac:	f8a3 a000 	strh.w	sl, [r3]
 8013fb0:	805a      	strh	r2, [r3, #2]
 8013fb2:	809e      	strh	r6, [r3, #4]
 8013fb4:	80de      	strh	r6, [r3, #6]
 8013fb6:	9b06      	ldr	r3, [sp, #24]
 8013fb8:	4293      	cmp	r3, r2
 8013fba:	d19c      	bne.n	8013ef6 <_ZN8touchgfx7Outline10renderLineEiiii+0x34e>
 8013fbc:	9b01      	ldr	r3, [sp, #4]
 8013fbe:	6907      	ldr	r7, [r0, #16]
 8013fc0:	f1c3 0620 	rsb	r6, r3, #32
 8013fc4:	9b05      	ldr	r3, [sp, #20]
 8013fc6:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8013fca:	9b04      	ldr	r3, [sp, #16]
 8013fcc:	429e      	cmp	r6, r3
 8013fce:	f040 81c7 	bne.w	8014360 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 8013fd2:	f9b7 3000 	ldrsh.w	r3, [r7]
 8013fd6:	459e      	cmp	lr, r3
 8013fd8:	d104      	bne.n	8013fe4 <_ZN8touchgfx7Outline10renderLineEiiii+0x43c>
 8013fda:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013fde:	429a      	cmp	r2, r3
 8013fe0:	f43f ae3a 	beq.w	8013c58 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8013fe4:	88f9      	ldrh	r1, [r7, #6]
 8013fe6:	88bb      	ldrh	r3, [r7, #4]
 8013fe8:	430b      	orrs	r3, r1
 8013fea:	d010      	beq.n	801400e <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8013fec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	db0c      	blt.n	801400e <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8013ff4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8013ff6:	428b      	cmp	r3, r1
 8013ff8:	da09      	bge.n	801400e <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8013ffa:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8013ffe:	428b      	cmp	r3, r1
 8014000:	f103 0301 	add.w	r3, r3, #1
 8014004:	bf38      	it	cc
 8014006:	3708      	addcc	r7, #8
 8014008:	6083      	str	r3, [r0, #8]
 801400a:	bf38      	it	cc
 801400c:	6107      	strcc	r7, [r0, #16]
 801400e:	6903      	ldr	r3, [r0, #16]
 8014010:	f8a3 e000 	strh.w	lr, [r3]
 8014014:	e603      	b.n	8013c1e <_ZN8touchgfx7Outline10renderLineEiiii+0x76>
 8014016:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8014018:	9c03      	ldr	r4, [sp, #12]
 801401a:	42a2      	cmp	r2, r4
 801401c:	f6ff ae1c 	blt.w	8013c58 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8014020:	9c06      	ldr	r4, [sp, #24]
 8014022:	42a2      	cmp	r2, r4
 8014024:	9c08      	ldr	r4, [sp, #32]
 8014026:	bfbc      	itt	lt
 8014028:	3201      	addlt	r2, #1
 801402a:	9206      	strlt	r2, [sp, #24]
 801402c:	f1c3 0220 	rsb	r2, r3, #32
 8014030:	4362      	muls	r2, r4
 8014032:	2401      	movs	r4, #1
 8014034:	940b      	str	r4, [sp, #44]	; 0x2c
 8014036:	2420      	movs	r4, #32
 8014038:	e6d6      	b.n	8013de8 <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 801403a:	ea4f 1861 	mov.w	r8, r1, asr #5
 801403e:	f009 021f 	and.w	r2, r9, #31
 8014042:	f001 011f 	and.w	r1, r1, #31
 8014046:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 801404a:	920c      	str	r2, [sp, #48]	; 0x30
 801404c:	45b0      	cmp	r8, r6
 801404e:	9a01      	ldr	r2, [sp, #4]
 8014050:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 8014054:	eba2 0203 	sub.w	r2, r2, r3
 8014058:	d108      	bne.n	801406c <_ZN8touchgfx7Outline10renderLineEiiii+0x4c4>
 801405a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801405c:	4496      	add	lr, r2
 801405e:	4419      	add	r1, r3
 8014060:	f8a5 e004 	strh.w	lr, [r5, #4]
 8014064:	fb02 a101 	mla	r1, r2, r1, sl
 8014068:	80e9      	strh	r1, [r5, #6]
 801406a:	e6fa      	b.n	8013e62 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 801406c:	2c00      	cmp	r4, #0
 801406e:	f2c0 80a7 	blt.w	80141c0 <_ZN8touchgfx7Outline10renderLineEiiii+0x618>
 8014072:	2701      	movs	r7, #1
 8014074:	f1c1 0c20 	rsb	ip, r1, #32
 8014078:	970a      	str	r7, [sp, #40]	; 0x28
 801407a:	2720      	movs	r7, #32
 801407c:	fb02 f20c 	mul.w	r2, r2, ip
 8014080:	9709      	str	r7, [sp, #36]	; 0x24
 8014082:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8014084:	fb92 fcf4 	sdiv	ip, r2, r4
 8014088:	fb04 221c 	mls	r2, r4, ip, r2
 801408c:	4439      	add	r1, r7
 801408e:	2a00      	cmp	r2, #0
 8014090:	bfbc      	itt	lt
 8014092:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8014096:	1912      	addlt	r2, r2, r4
 8014098:	fb0c a101 	mla	r1, ip, r1, sl
 801409c:	44e6      	add	lr, ip
 801409e:	80e9      	strh	r1, [r5, #6]
 80140a0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80140a2:	f8a5 e004 	strh.w	lr, [r5, #4]
 80140a6:	eb08 0501 	add.w	r5, r8, r1
 80140aa:	6901      	ldr	r1, [r0, #16]
 80140ac:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 80140b0:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 80140b4:	ea58 070e 	orrs.w	r7, r8, lr
 80140b8:	d010      	beq.n	80140dc <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 80140ba:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 80140be:	f1be 0f00 	cmp.w	lr, #0
 80140c2:	db0b      	blt.n	80140dc <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 80140c4:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 80140c6:	45be      	cmp	lr, r7
 80140c8:	da08      	bge.n	80140dc <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 80140ca:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 80140ce:	45be      	cmp	lr, r7
 80140d0:	bf3c      	itt	cc
 80140d2:	3108      	addcc	r1, #8
 80140d4:	6101      	strcc	r1, [r0, #16]
 80140d6:	f10e 0101 	add.w	r1, lr, #1
 80140da:	6081      	str	r1, [r0, #8]
 80140dc:	6901      	ldr	r1, [r0, #16]
 80140de:	f04f 0e00 	mov.w	lr, #0
 80140e2:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 80140e6:	42ae      	cmp	r6, r5
 80140e8:	800d      	strh	r5, [r1, #0]
 80140ea:	4463      	add	r3, ip
 80140ec:	f8a1 8002 	strh.w	r8, [r1, #2]
 80140f0:	f8a1 e004 	strh.w	lr, [r1, #4]
 80140f4:	f8a1 e006 	strh.w	lr, [r1, #6]
 80140f8:	d053      	beq.n	80141a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x5fa>
 80140fa:	9901      	ldr	r1, [sp, #4]
 80140fc:	1b12      	subs	r2, r2, r4
 80140fe:	1ac9      	subs	r1, r1, r3
 8014100:	4461      	add	r1, ip
 8014102:	0149      	lsls	r1, r1, #5
 8014104:	fb91 fef4 	sdiv	lr, r1, r4
 8014108:	fb04 111e 	mls	r1, r4, lr, r1
 801410c:	2900      	cmp	r1, #0
 801410e:	bfbc      	itt	lt
 8014110:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8014114:	1909      	addlt	r1, r1, r4
 8014116:	f10e 0701 	add.w	r7, lr, #1
 801411a:	970d      	str	r7, [sp, #52]	; 0x34
 801411c:	f8d0 a010 	ldr.w	sl, [r0, #16]
 8014120:	1852      	adds	r2, r2, r1
 8014122:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8014124:	bf54      	ite	pl
 8014126:	f8dd c034 	ldrpl.w	ip, [sp, #52]	; 0x34
 801412a:	46f4      	movmi	ip, lr
 801412c:	f8ba b004 	ldrh.w	fp, [sl, #4]
 8014130:	bf58      	it	pl
 8014132:	1b12      	subpl	r2, r2, r4
 8014134:	4463      	add	r3, ip
 8014136:	443d      	add	r5, r7
 8014138:	44e3      	add	fp, ip
 801413a:	f8aa b004 	strh.w	fp, [sl, #4]
 801413e:	f8ba b006 	ldrh.w	fp, [sl, #6]
 8014142:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 8014146:	f8aa b006 	strh.w	fp, [sl, #6]
 801414a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801414e:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8014152:	f8bc a004 	ldrh.w	sl, [ip, #4]
 8014156:	ea5b 070a 	orrs.w	r7, fp, sl
 801415a:	d014      	beq.n	8014186 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 801415c:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 8014160:	f1ba 0f00 	cmp.w	sl, #0
 8014164:	db0f      	blt.n	8014186 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8014166:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8014168:	45ba      	cmp	sl, r7
 801416a:	da0c      	bge.n	8014186 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 801416c:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 8014170:	45ba      	cmp	sl, r7
 8014172:	f10a 0a01 	add.w	sl, sl, #1
 8014176:	bf38      	it	cc
 8014178:	f10c 0c08 	addcc.w	ip, ip, #8
 801417c:	f8c0 a008 	str.w	sl, [r0, #8]
 8014180:	bf38      	it	cc
 8014182:	f8c0 c010 	strcc.w	ip, [r0, #16]
 8014186:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801418a:	f04f 0700 	mov.w	r7, #0
 801418e:	42ae      	cmp	r6, r5
 8014190:	f8ac 5000 	strh.w	r5, [ip]
 8014194:	f8ac 8002 	strh.w	r8, [ip, #2]
 8014198:	f8ac 7004 	strh.w	r7, [ip, #4]
 801419c:	f8ac 7006 	strh.w	r7, [ip, #6]
 80141a0:	d1bc      	bne.n	801411c <_ZN8touchgfx7Outline10renderLineEiiii+0x574>
 80141a2:	6904      	ldr	r4, [r0, #16]
 80141a4:	9a01      	ldr	r2, [sp, #4]
 80141a6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80141a8:	1ad3      	subs	r3, r2, r3
 80141aa:	88a2      	ldrh	r2, [r4, #4]
 80141ac:	3120      	adds	r1, #32
 80141ae:	441a      	add	r2, r3
 80141b0:	80a2      	strh	r2, [r4, #4]
 80141b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80141b4:	1a89      	subs	r1, r1, r2
 80141b6:	88e2      	ldrh	r2, [r4, #6]
 80141b8:	fb03 2301 	mla	r3, r3, r1, r2
 80141bc:	80e3      	strh	r3, [r4, #6]
 80141be:	e650      	b.n	8013e62 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 80141c0:	f04f 37ff 	mov.w	r7, #4294967295
 80141c4:	434a      	muls	r2, r1
 80141c6:	4264      	negs	r4, r4
 80141c8:	970a      	str	r7, [sp, #40]	; 0x28
 80141ca:	2700      	movs	r7, #0
 80141cc:	e758      	b.n	8014080 <_ZN8touchgfx7Outline10renderLineEiiii+0x4d8>
 80141ce:	ea4f 1867 	mov.w	r8, r7, asr #5
 80141d2:	f009 031f 	and.w	r3, r9, #31
 80141d6:	f007 071f 	and.w	r7, r7, #31
 80141da:	fa1f fc8c 	uxth.w	ip, ip
 80141de:	45d0      	cmp	r8, sl
 80141e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80141e2:	fa1f fe8e 	uxth.w	lr, lr
 80141e6:	d10a      	bne.n	80141fe <_ZN8touchgfx7Outline10renderLineEiiii+0x656>
 80141e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80141ea:	449c      	add	ip, r3
 80141ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80141ee:	441f      	add	r7, r3
 80141f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80141f2:	f8a5 c004 	strh.w	ip, [r5, #4]
 80141f6:	fb03 e707 	mla	r7, r3, r7, lr
 80141fa:	80ef      	strh	r7, [r5, #6]
 80141fc:	e6bc      	b.n	8013f78 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 80141fe:	2900      	cmp	r1, #0
 8014200:	f2c0 80a6 	blt.w	8014350 <_ZN8touchgfx7Outline10renderLineEiiii+0x7a8>
 8014204:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8014206:	f1c7 0320 	rsb	r3, r7, #32
 801420a:	4363      	muls	r3, r4
 801420c:	2401      	movs	r4, #1
 801420e:	940d      	str	r4, [sp, #52]	; 0x34
 8014210:	2420      	movs	r4, #32
 8014212:	940c      	str	r4, [sp, #48]	; 0x30
 8014214:	fb93 f4f1 	sdiv	r4, r3, r1
 8014218:	fb01 3b14 	mls	fp, r1, r4, r3
 801421c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801421e:	f1bb 0f00 	cmp.w	fp, #0
 8014222:	441f      	add	r7, r3
 8014224:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014226:	bfbc      	itt	lt
 8014228:	f104 34ff 	addlt.w	r4, r4, #4294967295
 801422c:	448b      	addlt	fp, r1
 801422e:	fb04 e707 	mla	r7, r4, r7, lr
 8014232:	44a4      	add	ip, r4
 8014234:	80ef      	strh	r7, [r5, #6]
 8014236:	f8a5 c004 	strh.w	ip, [r5, #4]
 801423a:	eb08 0503 	add.w	r5, r8, r3
 801423e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8014242:	f8bc e006 	ldrh.w	lr, [ip, #6]
 8014246:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 801424a:	ea5e 0307 	orrs.w	r3, lr, r7
 801424e:	d011      	beq.n	8014274 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8014250:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 8014254:	f1be 0f00 	cmp.w	lr, #0
 8014258:	db0c      	blt.n	8014274 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 801425a:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 801425c:	45be      	cmp	lr, r7
 801425e:	da09      	bge.n	8014274 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8014260:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8014264:	45be      	cmp	lr, r7
 8014266:	bf3c      	itt	cc
 8014268:	f10c 0708 	addcc.w	r7, ip, #8
 801426c:	6107      	strcc	r7, [r0, #16]
 801426e:	f10e 0701 	add.w	r7, lr, #1
 8014272:	6087      	str	r7, [r0, #8]
 8014274:	6907      	ldr	r7, [r0, #16]
 8014276:	b213      	sxth	r3, r2
 8014278:	4555      	cmp	r5, sl
 801427a:	9310      	str	r3, [sp, #64]	; 0x40
 801427c:	807b      	strh	r3, [r7, #2]
 801427e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014280:	803d      	strh	r5, [r7, #0]
 8014282:	80be      	strh	r6, [r7, #4]
 8014284:	eb04 0c03 	add.w	ip, r4, r3
 8014288:	80fe      	strh	r6, [r7, #6]
 801428a:	d050      	beq.n	801432e <_ZN8touchgfx7Outline10renderLineEiiii+0x786>
 801428c:	9b01      	ldr	r3, [sp, #4]
 801428e:	eba3 070c 	sub.w	r7, r3, ip
 8014292:	ebab 0301 	sub.w	r3, fp, r1
 8014296:	443c      	add	r4, r7
 8014298:	9309      	str	r3, [sp, #36]	; 0x24
 801429a:	0164      	lsls	r4, r4, #5
 801429c:	fb94 f8f1 	sdiv	r8, r4, r1
 80142a0:	fb01 4418 	mls	r4, r1, r8, r4
 80142a4:	2c00      	cmp	r4, #0
 80142a6:	bfbc      	itt	lt
 80142a8:	f108 38ff 	addlt.w	r8, r8, #4294967295
 80142ac:	1864      	addlt	r4, r4, r1
 80142ae:	f108 0701 	add.w	r7, r8, #1
 80142b2:	9711      	str	r7, [sp, #68]	; 0x44
 80142b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80142b6:	f8d0 e010 	ldr.w	lr, [r0, #16]
 80142ba:	191b      	adds	r3, r3, r4
 80142bc:	f8be b004 	ldrh.w	fp, [lr, #4]
 80142c0:	bf54      	ite	pl
 80142c2:	9f11      	ldrpl	r7, [sp, #68]	; 0x44
 80142c4:	4647      	movmi	r7, r8
 80142c6:	9309      	str	r3, [sp, #36]	; 0x24
 80142c8:	bf58      	it	pl
 80142ca:	1a5b      	subpl	r3, r3, r1
 80142cc:	44bb      	add	fp, r7
 80142ce:	44bc      	add	ip, r7
 80142d0:	bf58      	it	pl
 80142d2:	9309      	strpl	r3, [sp, #36]	; 0x24
 80142d4:	f8ae b004 	strh.w	fp, [lr, #4]
 80142d8:	f8be b006 	ldrh.w	fp, [lr, #6]
 80142dc:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 80142e0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80142e2:	f8ae b006 	strh.w	fp, [lr, #6]
 80142e6:	443d      	add	r5, r7
 80142e8:	f8d0 e010 	ldr.w	lr, [r0, #16]
 80142ec:	f8be b006 	ldrh.w	fp, [lr, #6]
 80142f0:	f8be 7004 	ldrh.w	r7, [lr, #4]
 80142f4:	ea5b 0307 	orrs.w	r3, fp, r7
 80142f8:	d011      	beq.n	801431e <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 80142fa:	f9be b002 	ldrsh.w	fp, [lr, #2]
 80142fe:	f1bb 0f00 	cmp.w	fp, #0
 8014302:	db0c      	blt.n	801431e <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8014304:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8014306:	45bb      	cmp	fp, r7
 8014308:	da09      	bge.n	801431e <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 801430a:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 801430e:	45bb      	cmp	fp, r7
 8014310:	bf3c      	itt	cc
 8014312:	f10e 0708 	addcc.w	r7, lr, #8
 8014316:	6107      	strcc	r7, [r0, #16]
 8014318:	f10b 0701 	add.w	r7, fp, #1
 801431c:	6087      	str	r7, [r0, #8]
 801431e:	6907      	ldr	r7, [r0, #16]
 8014320:	4555      	cmp	r5, sl
 8014322:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014324:	803d      	strh	r5, [r7, #0]
 8014326:	807b      	strh	r3, [r7, #2]
 8014328:	80be      	strh	r6, [r7, #4]
 801432a:	80fe      	strh	r6, [r7, #6]
 801432c:	d1c2      	bne.n	80142b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x70c>
 801432e:	9b01      	ldr	r3, [sp, #4]
 8014330:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8014332:	eba3 0c0c 	sub.w	ip, r3, ip
 8014336:	6903      	ldr	r3, [r0, #16]
 8014338:	3720      	adds	r7, #32
 801433a:	8899      	ldrh	r1, [r3, #4]
 801433c:	4461      	add	r1, ip
 801433e:	8099      	strh	r1, [r3, #4]
 8014340:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014342:	1a7f      	subs	r7, r7, r1
 8014344:	88d9      	ldrh	r1, [r3, #6]
 8014346:	fb0c 1c07 	mla	ip, ip, r7, r1
 801434a:	f8a3 c006 	strh.w	ip, [r3, #6]
 801434e:	e613      	b.n	8013f78 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8014350:	f04f 34ff 	mov.w	r4, #4294967295
 8014354:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014356:	4249      	negs	r1, r1
 8014358:	940d      	str	r4, [sp, #52]	; 0x34
 801435a:	2400      	movs	r4, #0
 801435c:	437b      	muls	r3, r7
 801435e:	e758      	b.n	8014212 <_ZN8touchgfx7Outline10renderLineEiiii+0x66a>
 8014360:	9905      	ldr	r1, [sp, #20]
 8014362:	ea4f 1b69 	mov.w	fp, r9, asr #5
 8014366:	f009 0c1f 	and.w	ip, r9, #31
 801436a:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 801436e:	f001 011f 	and.w	r1, r1, #31
 8014372:	45f3      	cmp	fp, lr
 8014374:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 8014378:	9102      	str	r1, [sp, #8]
 801437a:	9904      	ldr	r1, [sp, #16]
 801437c:	eba1 0406 	sub.w	r4, r1, r6
 8014380:	d108      	bne.n	8014394 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ec>
 8014382:	9b02      	ldr	r3, [sp, #8]
 8014384:	44a0      	add	r8, r4
 8014386:	449c      	add	ip, r3
 8014388:	f8a7 8004 	strh.w	r8, [r7, #4]
 801438c:	fb04 a40c 	mla	r4, r4, ip, sl
 8014390:	80fc      	strh	r4, [r7, #6]
 8014392:	e461      	b.n	8013c58 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8014394:	9905      	ldr	r1, [sp, #20]
 8014396:	ebb1 0109 	subs.w	r1, r1, r9
 801439a:	bf51      	iteee	pl
 801439c:	f1cc 0520 	rsbpl	r5, ip, #32
 80143a0:	fb04 f40c 	mulmi.w	r4, r4, ip
 80143a4:	4249      	negmi	r1, r1
 80143a6:	2500      	movmi	r5, #0
 80143a8:	bf5d      	ittte	pl
 80143aa:	436c      	mulpl	r4, r5
 80143ac:	2520      	movpl	r5, #32
 80143ae:	f04f 0901 	movpl.w	r9, #1
 80143b2:	f04f 39ff 	movmi.w	r9, #4294967295
 80143b6:	9501      	str	r5, [sp, #4]
 80143b8:	9b01      	ldr	r3, [sp, #4]
 80143ba:	fb94 f5f1 	sdiv	r5, r4, r1
 80143be:	fb01 4415 	mls	r4, r1, r5, r4
 80143c2:	449c      	add	ip, r3
 80143c4:	eb0b 0309 	add.w	r3, fp, r9
 80143c8:	2c00      	cmp	r4, #0
 80143ca:	bfbc      	itt	lt
 80143cc:	f105 35ff 	addlt.w	r5, r5, #4294967295
 80143d0:	1864      	addlt	r4, r4, r1
 80143d2:	44a8      	add	r8, r5
 80143d4:	fb05 ac0c 	mla	ip, r5, ip, sl
 80143d8:	f8a7 8004 	strh.w	r8, [r7, #4]
 80143dc:	f8a7 c006 	strh.w	ip, [r7, #6]
 80143e0:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80143e4:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 80143e8:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 80143ec:	ea58 0707 	orrs.w	r7, r8, r7
 80143f0:	d011      	beq.n	8014416 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 80143f2:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 80143f6:	f1b8 0f00 	cmp.w	r8, #0
 80143fa:	db0c      	blt.n	8014416 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 80143fc:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 80143fe:	45b8      	cmp	r8, r7
 8014400:	da09      	bge.n	8014416 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8014402:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 8014406:	45b8      	cmp	r8, r7
 8014408:	bf3c      	itt	cc
 801440a:	f10c 0708 	addcc.w	r7, ip, #8
 801440e:	6107      	strcc	r7, [r0, #16]
 8014410:	f108 0701 	add.w	r7, r8, #1
 8014414:	6087      	str	r7, [r0, #8]
 8014416:	6907      	ldr	r7, [r0, #16]
 8014418:	f04f 0c00 	mov.w	ip, #0
 801441c:	b212      	sxth	r2, r2
 801441e:	459e      	cmp	lr, r3
 8014420:	803b      	strh	r3, [r7, #0]
 8014422:	442e      	add	r6, r5
 8014424:	807a      	strh	r2, [r7, #2]
 8014426:	f8a7 c004 	strh.w	ip, [r7, #4]
 801442a:	f8a7 c006 	strh.w	ip, [r7, #6]
 801442e:	d04b      	beq.n	80144c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x920>
 8014430:	9f04      	ldr	r7, [sp, #16]
 8014432:	1a64      	subs	r4, r4, r1
 8014434:	f04f 0a00 	mov.w	sl, #0
 8014438:	1bbf      	subs	r7, r7, r6
 801443a:	443d      	add	r5, r7
 801443c:	016d      	lsls	r5, r5, #5
 801443e:	fb95 f8f1 	sdiv	r8, r5, r1
 8014442:	fb01 5518 	mls	r5, r1, r8, r5
 8014446:	4565      	cmp	r5, ip
 8014448:	bfbc      	itt	lt
 801444a:	f108 38ff 	addlt.w	r8, r8, #4294967295
 801444e:	186d      	addlt	r5, r5, r1
 8014450:	f108 0701 	add.w	r7, r8, #1
 8014454:	9703      	str	r7, [sp, #12]
 8014456:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801445a:	1964      	adds	r4, r4, r5
 801445c:	444b      	add	r3, r9
 801445e:	bf54      	ite	pl
 8014460:	9f03      	ldrpl	r7, [sp, #12]
 8014462:	4647      	movmi	r7, r8
 8014464:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8014468:	bf58      	it	pl
 801446a:	1a64      	subpl	r4, r4, r1
 801446c:	443e      	add	r6, r7
 801446e:	44bb      	add	fp, r7
 8014470:	f8ac b004 	strh.w	fp, [ip, #4]
 8014474:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8014478:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 801447c:	f8ac b006 	strh.w	fp, [ip, #6]
 8014480:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8014484:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8014488:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 801448c:	ea5b 0707 	orrs.w	r7, fp, r7
 8014490:	d011      	beq.n	80144b6 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8014492:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8014496:	f1bb 0f00 	cmp.w	fp, #0
 801449a:	db0c      	blt.n	80144b6 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 801449c:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 801449e:	45bb      	cmp	fp, r7
 80144a0:	da09      	bge.n	80144b6 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 80144a2:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 80144a6:	45bb      	cmp	fp, r7
 80144a8:	bf3c      	itt	cc
 80144aa:	f10c 0708 	addcc.w	r7, ip, #8
 80144ae:	6107      	strcc	r7, [r0, #16]
 80144b0:	f10b 0701 	add.w	r7, fp, #1
 80144b4:	6087      	str	r7, [r0, #8]
 80144b6:	6907      	ldr	r7, [r0, #16]
 80144b8:	459e      	cmp	lr, r3
 80144ba:	803b      	strh	r3, [r7, #0]
 80144bc:	807a      	strh	r2, [r7, #2]
 80144be:	f8a7 a004 	strh.w	sl, [r7, #4]
 80144c2:	f8a7 a006 	strh.w	sl, [r7, #6]
 80144c6:	d1c6      	bne.n	8014456 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ae>
 80144c8:	9b04      	ldr	r3, [sp, #16]
 80144ca:	1b9e      	subs	r6, r3, r6
 80144cc:	6903      	ldr	r3, [r0, #16]
 80144ce:	889a      	ldrh	r2, [r3, #4]
 80144d0:	4432      	add	r2, r6
 80144d2:	809a      	strh	r2, [r3, #4]
 80144d4:	9a02      	ldr	r2, [sp, #8]
 80144d6:	f102 0c20 	add.w	ip, r2, #32
 80144da:	9a01      	ldr	r2, [sp, #4]
 80144dc:	ebac 0c02 	sub.w	ip, ip, r2
 80144e0:	88da      	ldrh	r2, [r3, #6]
 80144e2:	fb06 260c 	mla	r6, r6, ip, r2
 80144e6:	80de      	strh	r6, [r3, #6]
 80144e8:	f7ff bbb6 	b.w	8013c58 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>

080144ec <_ZN8touchgfx7Outline6lineToEii>:
 80144ec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80144ee:	079b      	lsls	r3, r3, #30
 80144f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80144f2:	460e      	mov	r6, r1
 80144f4:	4615      	mov	r5, r2
 80144f6:	d511      	bpl.n	801451c <_ZN8touchgfx7Outline6lineToEii+0x30>
 80144f8:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 80144fc:	ea86 0701 	eor.w	r7, r6, r1
 8014500:	ea85 0302 	eor.w	r3, r5, r2
 8014504:	433b      	orrs	r3, r7
 8014506:	d009      	beq.n	801451c <_ZN8touchgfx7Outline6lineToEii+0x30>
 8014508:	4633      	mov	r3, r6
 801450a:	9500      	str	r5, [sp, #0]
 801450c:	f7ff fb4c 	bl	8013ba8 <_ZN8touchgfx7Outline10renderLineEiiii>
 8014510:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8014512:	f043 0301 	orr.w	r3, r3, #1
 8014516:	e9c0 6505 	strd	r6, r5, [r0, #20]
 801451a:	6243      	str	r3, [r0, #36]	; 0x24
 801451c:	b003      	add	sp, #12
 801451e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014520 <_ZN8touchgfx7Outline6moveToEii>:
 8014520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014522:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8014524:	4615      	mov	r5, r2
 8014526:	4604      	mov	r4, r0
 8014528:	460e      	mov	r6, r1
 801452a:	079a      	lsls	r2, r3, #30
 801452c:	d401      	bmi.n	8014532 <_ZN8touchgfx7Outline6moveToEii+0x12>
 801452e:	f7ff fb07 	bl	8013b40 <_ZN8touchgfx7Outline5resetEv>
 8014532:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014534:	07db      	lsls	r3, r3, #31
 8014536:	d504      	bpl.n	8014542 <_ZN8touchgfx7Outline6moveToEii+0x22>
 8014538:	4620      	mov	r0, r4
 801453a:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 801453e:	f7ff ffd5 	bl	80144ec <_ZN8touchgfx7Outline6lineToEii>
 8014542:	6923      	ldr	r3, [r4, #16]
 8014544:	1170      	asrs	r0, r6, #5
 8014546:	1169      	asrs	r1, r5, #5
 8014548:	f9b3 2000 	ldrsh.w	r2, [r3]
 801454c:	4290      	cmp	r0, r2
 801454e:	d103      	bne.n	8014558 <_ZN8touchgfx7Outline6moveToEii+0x38>
 8014550:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8014554:	4291      	cmp	r1, r2
 8014556:	d01a      	beq.n	801458e <_ZN8touchgfx7Outline6moveToEii+0x6e>
 8014558:	88df      	ldrh	r7, [r3, #6]
 801455a:	889a      	ldrh	r2, [r3, #4]
 801455c:	433a      	orrs	r2, r7
 801455e:	d010      	beq.n	8014582 <_ZN8touchgfx7Outline6moveToEii+0x62>
 8014560:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8014564:	2a00      	cmp	r2, #0
 8014566:	db0c      	blt.n	8014582 <_ZN8touchgfx7Outline6moveToEii+0x62>
 8014568:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 801456a:	42ba      	cmp	r2, r7
 801456c:	da09      	bge.n	8014582 <_ZN8touchgfx7Outline6moveToEii+0x62>
 801456e:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 8014572:	42ba      	cmp	r2, r7
 8014574:	f102 0201 	add.w	r2, r2, #1
 8014578:	bf38      	it	cc
 801457a:	3308      	addcc	r3, #8
 801457c:	60a2      	str	r2, [r4, #8]
 801457e:	bf38      	it	cc
 8014580:	6123      	strcc	r3, [r4, #16]
 8014582:	6923      	ldr	r3, [r4, #16]
 8014584:	2200      	movs	r2, #0
 8014586:	8018      	strh	r0, [r3, #0]
 8014588:	8059      	strh	r1, [r3, #2]
 801458a:	809a      	strh	r2, [r3, #4]
 801458c:	80da      	strh	r2, [r3, #6]
 801458e:	6166      	str	r6, [r4, #20]
 8014590:	6225      	str	r5, [r4, #32]
 8014592:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8014596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014598 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8014598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801459c:	b0d0      	sub	sp, #320	; 0x140
 801459e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80145a2:	466c      	mov	r4, sp
 80145a4:	4627      	mov	r7, r4
 80145a6:	1a0d      	subs	r5, r1, r0
 80145a8:	f100 0308 	add.w	r3, r0, #8
 80145ac:	2d48      	cmp	r5, #72	; 0x48
 80145ae:	f340 80d5 	ble.w	801475c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 80145b2:	112d      	asrs	r5, r5, #4
 80145b4:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 80145b8:	f9b0 9000 	ldrsh.w	r9, [r0]
 80145bc:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 80145c0:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 80145c4:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 80145c8:	6816      	ldr	r6, [r2, #0]
 80145ca:	6006      	str	r6, [r0, #0]
 80145cc:	6856      	ldr	r6, [r2, #4]
 80145ce:	6046      	str	r6, [r0, #4]
 80145d0:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 80145d4:	f8a2 8002 	strh.w	r8, [r2, #2]
 80145d8:	f8a2 e004 	strh.w	lr, [r2, #4]
 80145dc:	f8a2 c006 	strh.w	ip, [r2, #6]
 80145e0:	f1a1 0208 	sub.w	r2, r1, #8
 80145e4:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 80145e8:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 80145ec:	4565      	cmp	r5, ip
 80145ee:	db06      	blt.n	80145fe <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 80145f0:	d119      	bne.n	8014626 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 80145f2:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 80145f6:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 80145fa:	42ae      	cmp	r6, r5
 80145fc:	dd13      	ble.n	8014626 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 80145fe:	460e      	mov	r6, r1
 8014600:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 8014604:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 8014608:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 801460c:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 8014610:	601d      	str	r5, [r3, #0]
 8014612:	6875      	ldr	r5, [r6, #4]
 8014614:	605d      	str	r5, [r3, #4]
 8014616:	f821 9c08 	strh.w	r9, [r1, #-8]
 801461a:	f821 cc06 	strh.w	ip, [r1, #-6]
 801461e:	f821 8c04 	strh.w	r8, [r1, #-4]
 8014622:	f821 ec02 	strh.w	lr, [r1, #-2]
 8014626:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801462a:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 801462e:	42ae      	cmp	r6, r5
 8014630:	db06      	blt.n	8014640 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 8014632:	d116      	bne.n	8014662 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8014634:	f9b0 c000 	ldrsh.w	ip, [r0]
 8014638:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 801463c:	45ac      	cmp	ip, r5
 801463e:	da10      	bge.n	8014662 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8014640:	681d      	ldr	r5, [r3, #0]
 8014642:	f9b0 8000 	ldrsh.w	r8, [r0]
 8014646:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 801464a:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 801464e:	6005      	str	r5, [r0, #0]
 8014650:	685d      	ldr	r5, [r3, #4]
 8014652:	f8a0 8008 	strh.w	r8, [r0, #8]
 8014656:	6045      	str	r5, [r0, #4]
 8014658:	8146      	strh	r6, [r0, #10]
 801465a:	f8a0 e00c 	strh.w	lr, [r0, #12]
 801465e:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8014662:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8014666:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 801466a:	4565      	cmp	r5, ip
 801466c:	db06      	blt.n	801467c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 801466e:	d119      	bne.n	80146a4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8014670:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 8014674:	f9b0 5000 	ldrsh.w	r5, [r0]
 8014678:	42ae      	cmp	r6, r5
 801467a:	da13      	bge.n	80146a4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801467c:	460e      	mov	r6, r1
 801467e:	f9b0 9000 	ldrsh.w	r9, [r0]
 8014682:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8014686:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 801468a:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 801468e:	6005      	str	r5, [r0, #0]
 8014690:	6875      	ldr	r5, [r6, #4]
 8014692:	6045      	str	r5, [r0, #4]
 8014694:	f821 9c08 	strh.w	r9, [r1, #-8]
 8014698:	f821 cc06 	strh.w	ip, [r1, #-6]
 801469c:	f821 8c04 	strh.w	r8, [r1, #-4]
 80146a0:	f821 ec02 	strh.w	lr, [r1, #-2]
 80146a4:	3308      	adds	r3, #8
 80146a6:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 80146aa:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 80146ae:	45e6      	cmp	lr, ip
 80146b0:	dbf8      	blt.n	80146a4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 80146b2:	d105      	bne.n	80146c0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 80146b4:	f9b3 6000 	ldrsh.w	r6, [r3]
 80146b8:	f9b0 5000 	ldrsh.w	r5, [r0]
 80146bc:	42ae      	cmp	r6, r5
 80146be:	dbf1      	blt.n	80146a4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 80146c0:	4615      	mov	r5, r2
 80146c2:	3a08      	subs	r2, #8
 80146c4:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 80146c8:	45b4      	cmp	ip, r6
 80146ca:	dbf9      	blt.n	80146c0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 80146cc:	d105      	bne.n	80146da <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 80146ce:	f9b0 8000 	ldrsh.w	r8, [r0]
 80146d2:	f9b2 6000 	ldrsh.w	r6, [r2]
 80146d6:	45b0      	cmp	r8, r6
 80146d8:	dbf2      	blt.n	80146c0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 80146da:	4293      	cmp	r3, r2
 80146dc:	f1a5 0608 	sub.w	r6, r5, #8
 80146e0:	d816      	bhi.n	8014710 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 80146e2:	f8d6 c000 	ldr.w	ip, [r6]
 80146e6:	f9b3 a000 	ldrsh.w	sl, [r3]
 80146ea:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 80146ee:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 80146f2:	f8c3 c000 	str.w	ip, [r3]
 80146f6:	f8d6 c004 	ldr.w	ip, [r6, #4]
 80146fa:	f8c3 c004 	str.w	ip, [r3, #4]
 80146fe:	f825 ac08 	strh.w	sl, [r5, #-8]
 8014702:	f825 ec06 	strh.w	lr, [r5, #-6]
 8014706:	f825 9c04 	strh.w	r9, [r5, #-4]
 801470a:	f825 8c02 	strh.w	r8, [r5, #-2]
 801470e:	e7c9      	b.n	80146a4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8014710:	f8d6 e000 	ldr.w	lr, [r6]
 8014714:	f9b0 a000 	ldrsh.w	sl, [r0]
 8014718:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 801471c:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 8014720:	f8c0 e000 	str.w	lr, [r0]
 8014724:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8014728:	1a16      	subs	r6, r2, r0
 801472a:	f8c0 e004 	str.w	lr, [r0, #4]
 801472e:	f825 ac08 	strh.w	sl, [r5, #-8]
 8014732:	f825 cc06 	strh.w	ip, [r5, #-6]
 8014736:	f825 9c04 	strh.w	r9, [r5, #-4]
 801473a:	f825 8c02 	strh.w	r8, [r5, #-2]
 801473e:	1acd      	subs	r5, r1, r3
 8014740:	10ed      	asrs	r5, r5, #3
 8014742:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 8014746:	bfb5      	itete	lt
 8014748:	e9c4 0200 	strdlt	r0, r2, [r4]
 801474c:	e9c4 3100 	strdge	r3, r1, [r4]
 8014750:	460a      	movlt	r2, r1
 8014752:	4603      	movge	r3, r0
 8014754:	3408      	adds	r4, #8
 8014756:	4618      	mov	r0, r3
 8014758:	4611      	mov	r1, r2
 801475a:	e724      	b.n	80145a6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 801475c:	4299      	cmp	r1, r3
 801475e:	d927      	bls.n	80147b0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x218>
 8014760:	f1a3 0210 	sub.w	r2, r3, #16
 8014764:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 8014768:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 801476c:	45ac      	cmp	ip, r5
 801476e:	db06      	blt.n	801477e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 8014770:	d11c      	bne.n	80147ac <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 8014772:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 8014776:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 801477a:	42ae      	cmp	r6, r5
 801477c:	da16      	bge.n	80147ac <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 801477e:	4615      	mov	r5, r2
 8014780:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 8014784:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 8014788:	3a08      	subs	r2, #8
 801478a:	f855 6f08 	ldr.w	r6, [r5, #8]!
 801478e:	f9b2 e01e 	ldrsh.w	lr, [r2, #30]
 8014792:	6196      	str	r6, [r2, #24]
 8014794:	42a8      	cmp	r0, r5
 8014796:	686e      	ldr	r6, [r5, #4]
 8014798:	f8a2 9010 	strh.w	r9, [r2, #16]
 801479c:	61d6      	str	r6, [r2, #28]
 801479e:	f8a2 c012 	strh.w	ip, [r2, #18]
 80147a2:	f8a2 8014 	strh.w	r8, [r2, #20]
 80147a6:	f8a2 e016 	strh.w	lr, [r2, #22]
 80147aa:	d1db      	bne.n	8014764 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 80147ac:	3308      	adds	r3, #8
 80147ae:	e7d5      	b.n	801475c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 80147b0:	42bc      	cmp	r4, r7
 80147b2:	d903      	bls.n	80147bc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x224>
 80147b4:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 80147b8:	3c08      	subs	r4, #8
 80147ba:	e6f4      	b.n	80145a6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 80147bc:	b050      	add	sp, #320	; 0x140
 80147be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080147c2 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 80147c2:	b510      	push	{r4, lr}
 80147c4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80147c6:	4604      	mov	r4, r0
 80147c8:	07da      	lsls	r2, r3, #31
 80147ca:	d507      	bpl.n	80147dc <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 80147cc:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 80147d0:	f7ff fe8c 	bl	80144ec <_ZN8touchgfx7Outline6lineToEii>
 80147d4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80147d6:	f023 0301 	bic.w	r3, r3, #1
 80147da:	6243      	str	r3, [r0, #36]	; 0x24
 80147dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80147de:	079b      	lsls	r3, r3, #30
 80147e0:	d521      	bpl.n	8014826 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 80147e2:	6923      	ldr	r3, [r4, #16]
 80147e4:	88d9      	ldrh	r1, [r3, #6]
 80147e6:	889a      	ldrh	r2, [r3, #4]
 80147e8:	430a      	orrs	r2, r1
 80147ea:	d010      	beq.n	801480e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 80147ec:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80147f0:	2a00      	cmp	r2, #0
 80147f2:	db0c      	blt.n	801480e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 80147f4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80147f6:	428a      	cmp	r2, r1
 80147f8:	da09      	bge.n	801480e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 80147fa:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 80147fe:	4291      	cmp	r1, r2
 8014800:	f102 0201 	add.w	r2, r2, #1
 8014804:	bf88      	it	hi
 8014806:	3308      	addhi	r3, #8
 8014808:	60a2      	str	r2, [r4, #8]
 801480a:	bf88      	it	hi
 801480c:	6123      	strhi	r3, [r4, #16]
 801480e:	68a1      	ldr	r1, [r4, #8]
 8014810:	b129      	cbz	r1, 801481e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8014812:	6863      	ldr	r3, [r4, #4]
 8014814:	4299      	cmp	r1, r3
 8014816:	d802      	bhi.n	801481e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8014818:	68e0      	ldr	r0, [r4, #12]
 801481a:	f7ff febd 	bl	8014598 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 801481e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014820:	f023 0302 	bic.w	r3, r3, #2
 8014824:	6263      	str	r3, [r4, #36]	; 0x24
 8014826:	68e0      	ldr	r0, [r4, #12]
 8014828:	bd10      	pop	{r4, pc}
	...

0801482c <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 801482c:	4b02      	ldr	r3, [pc, #8]	; (8014838 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 801482e:	6018      	str	r0, [r3, #0]
 8014830:	4b02      	ldr	r3, [pc, #8]	; (801483c <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 8014832:	6019      	str	r1, [r3, #0]
 8014834:	4770      	bx	lr
 8014836:	bf00      	nop
 8014838:	20027bcc 	.word	0x20027bcc
 801483c:	20027bd0 	.word	0x20027bd0

08014840 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>:
 8014840:	2300      	movs	r3, #0
 8014842:	4a02      	ldr	r2, [pc, #8]	; (801484c <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0xc>)
 8014844:	6013      	str	r3, [r2, #0]
 8014846:	4a02      	ldr	r2, [pc, #8]	; (8014850 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0x10>)
 8014848:	6013      	str	r3, [r2, #0]
 801484a:	4770      	bx	lr
 801484c:	20027bcc 	.word	0x20027bcc
 8014850:	20027bd0 	.word	0x20027bd0

08014854 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8014854:	4b01      	ldr	r3, [pc, #4]	; (801485c <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 8014856:	6818      	ldr	r0, [r3, #0]
 8014858:	4770      	bx	lr
 801485a:	bf00      	nop
 801485c:	20027bcc 	.word	0x20027bcc

08014860 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 8014860:	4b01      	ldr	r3, [pc, #4]	; (8014868 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 8014862:	6818      	ldr	r0, [r3, #0]
 8014864:	4770      	bx	lr
 8014866:	bf00      	nop
 8014868:	20027bd0 	.word	0x20027bd0

0801486c <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 801486c:	b510      	push	{r4, lr}
 801486e:	6803      	ldr	r3, [r0, #0]
 8014870:	460c      	mov	r4, r1
 8014872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014874:	4798      	blx	r3
 8014876:	1b03      	subs	r3, r0, r4
 8014878:	4258      	negs	r0, r3
 801487a:	4158      	adcs	r0, r3
 801487c:	bd10      	pop	{r4, pc}
	...

08014880 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8014880:	4b01      	ldr	r3, [pc, #4]	; (8014888 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8014882:	6019      	str	r1, [r3, #0]
 8014884:	4770      	bx	lr
 8014886:	bf00      	nop
 8014888:	20027bd4 	.word	0x20027bd4

0801488c <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801488c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014890:	4696      	mov	lr, r2
 8014892:	b097      	sub	sp, #92	; 0x5c
 8014894:	4605      	mov	r5, r0
 8014896:	4614      	mov	r4, r2
 8014898:	460e      	mov	r6, r1
 801489a:	461f      	mov	r7, r3
 801489c:	f10d 0c1c 	add.w	ip, sp, #28
 80148a0:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 80148a4:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 80148a8:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 80148ac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80148b0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80148b4:	f8de 3000 	ldr.w	r3, [lr]
 80148b8:	f104 0e14 	add.w	lr, r4, #20
 80148bc:	f8cc 3000 	str.w	r3, [ip]
 80148c0:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80148c4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80148c8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80148cc:	f8de 3000 	ldr.w	r3, [lr]
 80148d0:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 80148d4:	f8cc 3000 	str.w	r3, [ip]
 80148d8:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 80148dc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80148e0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80148e4:	f8de 3000 	ldr.w	r3, [lr]
 80148e8:	4631      	mov	r1, r6
 80148ea:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80148ec:	4628      	mov	r0, r5
 80148ee:	f8cc 3000 	str.w	r3, [ip]
 80148f2:	682b      	ldr	r3, [r5, #0]
 80148f4:	9201      	str	r2, [sp, #4]
 80148f6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80148f8:	f8cd 8008 	str.w	r8, [sp, #8]
 80148fc:	9200      	str	r2, [sp, #0]
 80148fe:	aa07      	add	r2, sp, #28
 8014900:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8014904:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 8014908:	463b      	mov	r3, r7
 801490a:	47d8      	blx	fp
 801490c:	46a6      	mov	lr, r4
 801490e:	f10d 0c1c 	add.w	ip, sp, #28
 8014912:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014916:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801491a:	f8de 3000 	ldr.w	r3, [lr]
 801491e:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8014922:	343c      	adds	r4, #60	; 0x3c
 8014924:	f8cc 3000 	str.w	r3, [ip]
 8014928:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801492c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014930:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014934:	f8de 3000 	ldr.w	r3, [lr]
 8014938:	f8cc 3000 	str.w	r3, [ip]
 801493c:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8014940:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014942:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014946:	6823      	ldr	r3, [r4, #0]
 8014948:	4631      	mov	r1, r6
 801494a:	4628      	mov	r0, r5
 801494c:	f8cc 3000 	str.w	r3, [ip]
 8014950:	682b      	ldr	r3, [r5, #0]
 8014952:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8014956:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014958:	f8cd 8008 	str.w	r8, [sp, #8]
 801495c:	9201      	str	r2, [sp, #4]
 801495e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014960:	9200      	str	r2, [sp, #0]
 8014962:	aa07      	add	r2, sp, #28
 8014964:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8014966:	463b      	mov	r3, r7
 8014968:	47a0      	blx	r4
 801496a:	b017      	add	sp, #92	; 0x5c
 801496c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014970 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8014970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014974:	b08d      	sub	sp, #52	; 0x34
 8014976:	4688      	mov	r8, r1
 8014978:	f8d3 c000 	ldr.w	ip, [r3]
 801497c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801497e:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8014982:	680f      	ldr	r7, [r1, #0]
 8014984:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8014988:	eba7 070c 	sub.w	r7, r7, ip
 801498c:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8014990:	edd3 6a07 	vldr	s13, [r3, #28]
 8014994:	42bc      	cmp	r4, r7
 8014996:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014998:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 801499c:	bfa8      	it	ge
 801499e:	463c      	movge	r4, r7
 80149a0:	f9b1 9000 	ldrsh.w	r9, [r1]
 80149a4:	f9ba 1000 	ldrsh.w	r1, [sl]
 80149a8:	ee07 4a90 	vmov	s15, r4
 80149ac:	eb09 0e0c 	add.w	lr, r9, ip
 80149b0:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 80149b4:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 80149b8:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 80149bc:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 80149c0:	4571      	cmp	r1, lr
 80149c2:	ee25 4a04 	vmul.f32	s8, s10, s8
 80149c6:	ee65 4a24 	vmul.f32	s9, s10, s9
 80149ca:	ee25 5a27 	vmul.f32	s10, s10, s15
 80149ce:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80149d2:	ee71 0aa4 	vadd.f32	s1, s3, s9
 80149d6:	ee32 1a05 	vadd.f32	s2, s4, s10
 80149da:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80149de:	ee36 0a84 	vadd.f32	s0, s13, s8
 80149e2:	ee61 1a87 	vmul.f32	s3, s3, s14
 80149e6:	ee22 2a07 	vmul.f32	s4, s4, s14
 80149ea:	f340 808c 	ble.w	8014b06 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 80149ee:	eba1 060e 	sub.w	r6, r1, lr
 80149f2:	fb96 f5f4 	sdiv	r5, r6, r4
 80149f6:	ee07 5a10 	vmov	s14, r5
 80149fa:	2d00      	cmp	r5, #0
 80149fc:	fb04 6615 	mls	r6, r4, r5, r6
 8014a00:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014a04:	eea7 0a04 	vfma.f32	s0, s14, s8
 8014a08:	eee7 0a24 	vfma.f32	s1, s14, s9
 8014a0c:	eea7 1a05 	vfma.f32	s2, s14, s10
 8014a10:	dd12      	ble.n	8014a38 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8014a12:	ee70 6a44 	vsub.f32	s13, s0, s8
 8014a16:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8014a1a:	ee31 2a45 	vsub.f32	s4, s2, s10
 8014a1e:	eef5 6a40 	vcmp.f32	s13, #0.0
 8014a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a26:	bf14      	ite	ne
 8014a28:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8014a2c:	eeb0 7a67 	vmoveq.f32	s14, s15
 8014a30:	ee61 1a87 	vmul.f32	s3, s3, s14
 8014a34:	ee22 2a07 	vmul.f32	s4, s4, s14
 8014a38:	fb05 f204 	mul.w	r2, r5, r4
 8014a3c:	1abf      	subs	r7, r7, r2
 8014a3e:	4494      	add	ip, r2
 8014a40:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8014a44:	4411      	add	r1, r2
 8014a46:	eb09 020c 	add.w	r2, r9, ip
 8014a4a:	b209      	sxth	r1, r1
 8014a4c:	443a      	add	r2, r7
 8014a4e:	428a      	cmp	r2, r1
 8014a50:	bfc4      	itt	gt
 8014a52:	eba1 0209 	subgt.w	r2, r1, r9
 8014a56:	eba2 070c 	subgt.w	r7, r2, ip
 8014a5a:	2f00      	cmp	r7, #0
 8014a5c:	dd50      	ble.n	8014b00 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8014a5e:	fb97 f1f4 	sdiv	r1, r7, r4
 8014a62:	fb04 7211 	mls	r2, r4, r1, r7
 8014a66:	b90a      	cbnz	r2, 8014a6c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8014a68:	3901      	subs	r1, #1
 8014a6a:	4622      	mov	r2, r4
 8014a6c:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8014a70:	6840      	ldr	r0, [r0, #4]
 8014a72:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 8014a76:	44b6      	add	lr, r6
 8014a78:	f8d0 a000 	ldr.w	sl, [r0]
 8014a7c:	2900      	cmp	r1, #0
 8014a7e:	bfcc      	ite	gt
 8014a80:	46a1      	movgt	r9, r4
 8014a82:	4691      	movle	r9, r2
 8014a84:	900b      	str	r0, [sp, #44]	; 0x2c
 8014a86:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8014a88:	fb04 e505 	mla	r5, r4, r5, lr
 8014a8c:	eef0 6a42 	vmov.f32	s13, s4
 8014a90:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8014a94:	9008      	str	r0, [sp, #32]
 8014a96:	eeb0 7a61 	vmov.f32	s14, s3
 8014a9a:	9818      	ldr	r0, [sp, #96]	; 0x60
 8014a9c:	695b      	ldr	r3, [r3, #20]
 8014a9e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8014aa2:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8014aa6:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8014aaa:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8014aac:	445b      	add	r3, fp
 8014aae:	9307      	str	r3, [sp, #28]
 8014ab0:	ee16 3a90 	vmov	r3, s13
 8014ab4:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8014ab8:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8014abc:	ee21 3a23 	vmul.f32	s6, s2, s7
 8014ac0:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8014ac4:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8014ac8:	ee17 7a90 	vmov	r7, s15
 8014acc:	ee73 7a42 	vsub.f32	s15, s6, s4
 8014ad0:	fb97 f7f4 	sdiv	r7, r7, r4
 8014ad4:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8014ad8:	ee17 ca90 	vmov	ip, s15
 8014adc:	fb9c fcf4 	sdiv	ip, ip, r4
 8014ae0:	fb0c 3306 	mla	r3, ip, r6, r3
 8014ae4:	9302      	str	r3, [sp, #8]
 8014ae6:	ee17 3a10 	vmov	r3, s14
 8014aea:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8014aee:	fb07 3706 	mla	r7, r7, r6, r3
 8014af2:	eba9 0306 	sub.w	r3, r9, r6
 8014af6:	e9cd 4700 	strd	r4, r7, [sp]
 8014afa:	f8da 4008 	ldr.w	r4, [sl, #8]
 8014afe:	47a0      	blx	r4
 8014b00:	b00d      	add	sp, #52	; 0x34
 8014b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b06:	2500      	movs	r5, #0
 8014b08:	462e      	mov	r6, r5
 8014b0a:	e799      	b.n	8014a40 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08014b0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8014b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b10:	b0db      	sub	sp, #364	; 0x16c
 8014b12:	461d      	mov	r5, r3
 8014b14:	4614      	mov	r4, r2
 8014b16:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8014b1a:	910f      	str	r1, [sp, #60]	; 0x3c
 8014b1c:	4629      	mov	r1, r5
 8014b1e:	930a      	str	r3, [sp, #40]	; 0x28
 8014b20:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8014b24:	9009      	str	r0, [sp, #36]	; 0x24
 8014b26:	930b      	str	r3, [sp, #44]	; 0x2c
 8014b28:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8014b2c:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 8014b30:	9310      	str	r3, [sp, #64]	; 0x40
 8014b32:	6803      	ldr	r3, [r0, #0]
 8014b34:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 8014b36:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014b3a:	47b8      	blx	r7
 8014b3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b3e:	6058      	str	r0, [r3, #4]
 8014b40:	2800      	cmp	r0, #0
 8014b42:	f000 83a1 	beq.w	8015288 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014b46:	682b      	ldr	r3, [r5, #0]
 8014b48:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8014b4c:	ed94 7a02 	vldr	s14, [r4, #8]
 8014b50:	9314      	str	r3, [sp, #80]	; 0x50
 8014b52:	686b      	ldr	r3, [r5, #4]
 8014b54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014b58:	9315      	str	r3, [sp, #84]	; 0x54
 8014b5a:	4bc1      	ldr	r3, [pc, #772]	; (8014e60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8014b5c:	7819      	ldrb	r1, [r3, #0]
 8014b5e:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8014b62:	2900      	cmp	r1, #0
 8014b64:	bf16      	itet	ne
 8014b66:	4619      	movne	r1, r3
 8014b68:	4611      	moveq	r1, r2
 8014b6a:	4613      	movne	r3, r2
 8014b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b70:	9116      	str	r1, [sp, #88]	; 0x58
 8014b72:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 8014b76:	f240 8387 	bls.w	8015288 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014b7a:	ed94 7a07 	vldr	s14, [r4, #28]
 8014b7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b86:	f240 837f 	bls.w	8015288 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014b8a:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8014b8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b96:	f240 8377 	bls.w	8015288 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014b9a:	6822      	ldr	r2, [r4, #0]
 8014b9c:	4bb1      	ldr	r3, [pc, #708]	; (8014e64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8014b9e:	429a      	cmp	r2, r3
 8014ba0:	f2c0 8372 	blt.w	8015288 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014ba4:	49b0      	ldr	r1, [pc, #704]	; (8014e68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8014ba6:	6963      	ldr	r3, [r4, #20]
 8014ba8:	428a      	cmp	r2, r1
 8014baa:	f300 836d 	bgt.w	8015288 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014bae:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8014bb2:	48ae      	ldr	r0, [pc, #696]	; (8014e6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8014bb4:	33ff      	adds	r3, #255	; 0xff
 8014bb6:	4283      	cmp	r3, r0
 8014bb8:	f200 8366 	bhi.w	8015288 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014bbc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014bbe:	4dac      	ldr	r5, [pc, #688]	; (8014e70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8014bc0:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8014bc4:	33ff      	adds	r3, #255	; 0xff
 8014bc6:	42ab      	cmp	r3, r5
 8014bc8:	f200 835e 	bhi.w	8015288 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014bcc:	6862      	ldr	r2, [r4, #4]
 8014bce:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 8014bd2:	33ff      	adds	r3, #255	; 0xff
 8014bd4:	4283      	cmp	r3, r0
 8014bd6:	f200 8357 	bhi.w	8015288 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014bda:	69a1      	ldr	r1, [r4, #24]
 8014bdc:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8014be0:	33ff      	adds	r3, #255	; 0xff
 8014be2:	4283      	cmp	r3, r0
 8014be4:	f200 8350 	bhi.w	8015288 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014be8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8014bea:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 8014bee:	30ff      	adds	r0, #255	; 0xff
 8014bf0:	42a8      	cmp	r0, r5
 8014bf2:	f200 8349 	bhi.w	8015288 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014bf6:	428a      	cmp	r2, r1
 8014bf8:	f280 8110 	bge.w	8014e1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8014bfc:	429a      	cmp	r2, r3
 8014bfe:	f300 8119 	bgt.w	8014e34 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8014c02:	4299      	cmp	r1, r3
 8014c04:	f280 811d 	bge.w	8014e42 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8014c08:	2502      	movs	r5, #2
 8014c0a:	2701      	movs	r7, #1
 8014c0c:	46a9      	mov	r9, r5
 8014c0e:	46b8      	mov	r8, r7
 8014c10:	f04f 0a00 	mov.w	sl, #0
 8014c14:	4621      	mov	r1, r4
 8014c16:	a849      	add	r0, sp, #292	; 0x124
 8014c18:	f003 fdfc 	bl	8018814 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8014c1c:	4622      	mov	r2, r4
 8014c1e:	4653      	mov	r3, sl
 8014c20:	a949      	add	r1, sp, #292	; 0x124
 8014c22:	f8cd 9000 	str.w	r9, [sp]
 8014c26:	a819      	add	r0, sp, #100	; 0x64
 8014c28:	f003 ff24 	bl	8018a74 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8014c2c:	4622      	mov	r2, r4
 8014c2e:	4653      	mov	r3, sl
 8014c30:	a949      	add	r1, sp, #292	; 0x124
 8014c32:	f8cd 8000 	str.w	r8, [sp]
 8014c36:	a829      	add	r0, sp, #164	; 0xa4
 8014c38:	f003 ff1c 	bl	8018a74 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8014c3c:	4643      	mov	r3, r8
 8014c3e:	4622      	mov	r2, r4
 8014c40:	a949      	add	r1, sp, #292	; 0x124
 8014c42:	f8cd 9000 	str.w	r9, [sp]
 8014c46:	a839      	add	r0, sp, #228	; 0xe4
 8014c48:	f003 ff14 	bl	8018a74 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8014c4c:	42af      	cmp	r7, r5
 8014c4e:	af12      	add	r7, sp, #72	; 0x48
 8014c50:	bfb7      	itett	lt
 8014c52:	2300      	movlt	r3, #0
 8014c54:	2301      	movge	r3, #1
 8014c56:	ad29      	addlt	r5, sp, #164	; 0xa4
 8014c58:	ac19      	addlt	r4, sp, #100	; 0x64
 8014c5a:	bfb1      	iteee	lt
 8014c5c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8014c5e:	ad19      	addge	r5, sp, #100	; 0x64
 8014c60:	930e      	strge	r3, [sp, #56]	; 0x38
 8014c62:	ac29      	addge	r4, sp, #164	; 0xa4
 8014c64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014c66:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014c6a:	e887 0003 	stmia.w	r7, {r0, r1}
 8014c6e:	b928      	cbnz	r0, 8014c7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8014c70:	4b80      	ldr	r3, [pc, #512]	; (8014e74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8014c72:	6818      	ldr	r0, [r3, #0]
 8014c74:	6803      	ldr	r3, [r0, #0]
 8014c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014c78:	4798      	blx	r3
 8014c7a:	6038      	str	r0, [r7, #0]
 8014c7c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8014c7e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8014c82:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014c86:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8014c88:	930c      	str	r3, [sp, #48]	; 0x30
 8014c8a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014c8c:	6963      	ldr	r3, [r4, #20]
 8014c8e:	440b      	add	r3, r1
 8014c90:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8014c94:	4408      	add	r0, r1
 8014c96:	b200      	sxth	r0, r0
 8014c98:	4283      	cmp	r3, r0
 8014c9a:	900d      	str	r0, [sp, #52]	; 0x34
 8014c9c:	f280 80dd 	bge.w	8014e5a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8014ca0:	428b      	cmp	r3, r1
 8014ca2:	da08      	bge.n	8014cb6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8014ca4:	2a00      	cmp	r2, #0
 8014ca6:	dd06      	ble.n	8014cb6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8014ca8:	1acb      	subs	r3, r1, r3
 8014caa:	429a      	cmp	r2, r3
 8014cac:	f2c0 80e4 	blt.w	8014e78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8014cb0:	2b00      	cmp	r3, #0
 8014cb2:	f300 80e2 	bgt.w	8014e7a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8014cb6:	6967      	ldr	r7, [r4, #20]
 8014cb8:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8014cbc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014cbe:	443b      	add	r3, r7
 8014cc0:	461f      	mov	r7, r3
 8014cc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014cc4:	1bdf      	subs	r7, r3, r7
 8014cc6:	4297      	cmp	r7, r2
 8014cc8:	bfa8      	it	ge
 8014cca:	4617      	movge	r7, r2
 8014ccc:	2f00      	cmp	r7, #0
 8014cce:	f340 8166 	ble.w	8014f9e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8014cd2:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8014cd4:	6829      	ldr	r1, [r5, #0]
 8014cd6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014cda:	f9bb 3000 	ldrsh.w	r3, [fp]
 8014cde:	4411      	add	r1, r2
 8014ce0:	6820      	ldr	r0, [r4, #0]
 8014ce2:	4299      	cmp	r1, r3
 8014ce4:	dd1a      	ble.n	8014d1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8014ce6:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8014cea:	4402      	add	r2, r0
 8014cec:	440b      	add	r3, r1
 8014cee:	b21b      	sxth	r3, r3
 8014cf0:	429a      	cmp	r2, r3
 8014cf2:	dc13      	bgt.n	8014d1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8014cf4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014cf6:	a912      	add	r1, sp, #72	; 0x48
 8014cf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014cfa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014cfc:	681b      	ldr	r3, [r3, #0]
 8014cfe:	9206      	str	r2, [sp, #24]
 8014d00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014d02:	9500      	str	r5, [sp, #0]
 8014d04:	9205      	str	r2, [sp, #20]
 8014d06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014d08:	e9cd b203 	strd	fp, r2, [sp, #12]
 8014d0c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8014d0e:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8014d12:	aa49      	add	r2, sp, #292	; 0x124
 8014d14:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8014d18:	4623      	mov	r3, r4
 8014d1a:	47c8      	blx	r9
 8014d1c:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8014d20:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8014d24:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8014d28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014d2c:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8014d30:	68a1      	ldr	r1, [r4, #8]
 8014d32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014d36:	ed94 6a08 	vldr	s12, [r4, #32]
 8014d3a:	edd4 6a07 	vldr	s13, [r4, #28]
 8014d3e:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8014d42:	ee76 6a86 	vadd.f32	s13, s13, s12
 8014d46:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8014d4a:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014d4e:	edc4 6a07 	vstr	s13, [r4, #28]
 8014d52:	441a      	add	r2, r3
 8014d54:	6963      	ldr	r3, [r4, #20]
 8014d56:	3301      	adds	r3, #1
 8014d58:	6022      	str	r2, [r4, #0]
 8014d5a:	6163      	str	r3, [r4, #20]
 8014d5c:	69a3      	ldr	r3, [r4, #24]
 8014d5e:	3b01      	subs	r3, #1
 8014d60:	61a3      	str	r3, [r4, #24]
 8014d62:	6923      	ldr	r3, [r4, #16]
 8014d64:	440b      	add	r3, r1
 8014d66:	68e1      	ldr	r1, [r4, #12]
 8014d68:	428b      	cmp	r3, r1
 8014d6a:	6123      	str	r3, [r4, #16]
 8014d6c:	db15      	blt.n	8014d9a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8014d6e:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8014d72:	3201      	adds	r2, #1
 8014d74:	1a5b      	subs	r3, r3, r1
 8014d76:	ee76 6a26 	vadd.f32	s13, s12, s13
 8014d7a:	6022      	str	r2, [r4, #0]
 8014d7c:	6123      	str	r3, [r4, #16]
 8014d7e:	edc4 6a07 	vstr	s13, [r4, #28]
 8014d82:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8014d86:	ee36 7a87 	vadd.f32	s14, s13, s14
 8014d8a:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8014d8e:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8014d92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014d96:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8014d9a:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8014d9e:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8014da2:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8014da6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014daa:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8014dae:	68a9      	ldr	r1, [r5, #8]
 8014db0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014db4:	ed95 6a08 	vldr	s12, [r5, #32]
 8014db8:	edd5 6a07 	vldr	s13, [r5, #28]
 8014dbc:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8014dc0:	ee76 6a86 	vadd.f32	s13, s13, s12
 8014dc4:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8014dc8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014dcc:	edc5 6a07 	vstr	s13, [r5, #28]
 8014dd0:	441a      	add	r2, r3
 8014dd2:	696b      	ldr	r3, [r5, #20]
 8014dd4:	3301      	adds	r3, #1
 8014dd6:	602a      	str	r2, [r5, #0]
 8014dd8:	616b      	str	r3, [r5, #20]
 8014dda:	69ab      	ldr	r3, [r5, #24]
 8014ddc:	3b01      	subs	r3, #1
 8014dde:	61ab      	str	r3, [r5, #24]
 8014de0:	692b      	ldr	r3, [r5, #16]
 8014de2:	440b      	add	r3, r1
 8014de4:	68e9      	ldr	r1, [r5, #12]
 8014de6:	428b      	cmp	r3, r1
 8014de8:	612b      	str	r3, [r5, #16]
 8014dea:	db15      	blt.n	8014e18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8014dec:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8014df0:	3201      	adds	r2, #1
 8014df2:	1a5b      	subs	r3, r3, r1
 8014df4:	ee76 6a26 	vadd.f32	s13, s12, s13
 8014df8:	602a      	str	r2, [r5, #0]
 8014dfa:	612b      	str	r3, [r5, #16]
 8014dfc:	edc5 6a07 	vstr	s13, [r5, #28]
 8014e00:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8014e04:	ee36 7a87 	vadd.f32	s14, s13, s14
 8014e08:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8014e0c:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8014e10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014e14:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8014e18:	3f01      	subs	r7, #1
 8014e1a:	e757      	b.n	8014ccc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8014e1c:	4299      	cmp	r1, r3
 8014e1e:	dc13      	bgt.n	8014e48 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8014e20:	429a      	cmp	r2, r3
 8014e22:	da14      	bge.n	8014e4e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8014e24:	2502      	movs	r5, #2
 8014e26:	2703      	movs	r7, #3
 8014e28:	f04f 0800 	mov.w	r8, #0
 8014e2c:	46a9      	mov	r9, r5
 8014e2e:	f04f 0a01 	mov.w	sl, #1
 8014e32:	e6ef      	b.n	8014c14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8014e34:	2501      	movs	r5, #1
 8014e36:	2700      	movs	r7, #0
 8014e38:	46a9      	mov	r9, r5
 8014e3a:	46b8      	mov	r8, r7
 8014e3c:	f04f 0a02 	mov.w	sl, #2
 8014e40:	e6e8      	b.n	8014c14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8014e42:	2501      	movs	r5, #1
 8014e44:	2702      	movs	r7, #2
 8014e46:	e6e1      	b.n	8014c0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8014e48:	2500      	movs	r5, #0
 8014e4a:	2701      	movs	r7, #1
 8014e4c:	e7f4      	b.n	8014e38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8014e4e:	2702      	movs	r7, #2
 8014e50:	2503      	movs	r5, #3
 8014e52:	f04f 0900 	mov.w	r9, #0
 8014e56:	46b8      	mov	r8, r7
 8014e58:	e7e9      	b.n	8014e2e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8014e5a:	4613      	mov	r3, r2
 8014e5c:	e728      	b.n	8014cb0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8014e5e:	bf00      	nop
 8014e60:	20027bbc 	.word	0x20027bbc
 8014e64:	fffd8f01 	.word	0xfffd8f01
 8014e68:	00027100 	.word	0x00027100
 8014e6c:	0004e1ff 	.word	0x0004e1ff
 8014e70:	0004e1fe 	.word	0x0004e1fe
 8014e74:	20027bc4 	.word	0x20027bc4
 8014e78:	4613      	mov	r3, r2
 8014e7a:	992b      	ldr	r1, [sp, #172]	; 0xac
 8014e7c:	469e      	mov	lr, r3
 8014e7e:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8014e80:	469c      	mov	ip, r3
 8014e82:	9111      	str	r1, [sp, #68]	; 0x44
 8014e84:	f04f 0900 	mov.w	r9, #0
 8014e88:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8014e8c:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8014e90:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8014e94:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8014e98:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8014e9c:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8014ea0:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8014ea4:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8014ea8:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8014eac:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8014eb0:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8014eb4:	f1bc 0f00 	cmp.w	ip, #0
 8014eb8:	d147      	bne.n	8014f4a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8014eba:	eb03 0c07 	add.w	ip, r3, r7
 8014ebe:	1ad7      	subs	r7, r2, r3
 8014ec0:	f1b9 0f00 	cmp.w	r9, #0
 8014ec4:	d009      	beq.n	8014eda <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8014ec6:	9029      	str	r0, [sp, #164]	; 0xa4
 8014ec8:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8014ecc:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8014ed0:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8014ed4:	912d      	str	r1, [sp, #180]	; 0xb4
 8014ed6:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8014eda:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8014edc:	f04f 0800 	mov.w	r8, #0
 8014ee0:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8014ee4:	9111      	str	r1, [sp, #68]	; 0x44
 8014ee6:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8014eea:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8014eee:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8014ef2:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8014ef6:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8014efa:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8014efe:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8014f02:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8014f06:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8014f0a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8014f0e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8014f12:	f1be 0f00 	cmp.w	lr, #0
 8014f16:	d031      	beq.n	8014f7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8014f18:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8014f1a:	4450      	add	r0, sl
 8014f1c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8014f20:	4431      	add	r1, r6
 8014f22:	ee37 7a04 	vadd.f32	s14, s14, s8
 8014f26:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8014f2a:	4549      	cmp	r1, r9
 8014f2c:	db08      	blt.n	8014f40 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8014f2e:	ee77 7a85 	vadd.f32	s15, s15, s10
 8014f32:	3001      	adds	r0, #1
 8014f34:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8014f38:	eba1 0109 	sub.w	r1, r1, r9
 8014f3c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8014f40:	f10e 3eff 	add.w	lr, lr, #4294967295
 8014f44:	f04f 0801 	mov.w	r8, #1
 8014f48:	e7e3      	b.n	8014f12 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8014f4a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8014f4c:	4450      	add	r0, sl
 8014f4e:	ee37 7a24 	vadd.f32	s14, s14, s9
 8014f52:	4431      	add	r1, r6
 8014f54:	ee77 7a84 	vadd.f32	s15, s15, s8
 8014f58:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8014f5c:	4541      	cmp	r1, r8
 8014f5e:	db08      	blt.n	8014f72 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8014f60:	ee76 6a85 	vadd.f32	s13, s13, s10
 8014f64:	3001      	adds	r0, #1
 8014f66:	ee37 7a25 	vadd.f32	s14, s14, s11
 8014f6a:	eba1 0108 	sub.w	r1, r1, r8
 8014f6e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8014f72:	f10c 3cff 	add.w	ip, ip, #4294967295
 8014f76:	f04f 0901 	mov.w	r9, #1
 8014f7a:	e79b      	b.n	8014eb4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8014f7c:	449c      	add	ip, r3
 8014f7e:	1aff      	subs	r7, r7, r3
 8014f80:	f1b8 0f00 	cmp.w	r8, #0
 8014f84:	d009      	beq.n	8014f9a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8014f86:	9019      	str	r0, [sp, #100]	; 0x64
 8014f88:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8014f8c:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8014f90:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8014f94:	911d      	str	r1, [sp, #116]	; 0x74
 8014f96:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8014f9a:	1ad2      	subs	r2, r2, r3
 8014f9c:	e68b      	b.n	8014cb6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8014f9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014fa0:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8014fa2:	2b00      	cmp	r3, #0
 8014fa4:	f000 80d1 	beq.w	801514a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8014fa8:	ad19      	add	r5, sp, #100	; 0x64
 8014faa:	ac39      	add	r4, sp, #228	; 0xe4
 8014fac:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8014fae:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8014fb2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014fb6:	930c      	str	r3, [sp, #48]	; 0x30
 8014fb8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014fba:	6963      	ldr	r3, [r4, #20]
 8014fbc:	440b      	add	r3, r1
 8014fbe:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8014fc2:	4408      	add	r0, r1
 8014fc4:	b200      	sxth	r0, r0
 8014fc6:	4283      	cmp	r3, r0
 8014fc8:	900d      	str	r0, [sp, #52]	; 0x34
 8014fca:	f280 80c1 	bge.w	8015150 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8014fce:	428b      	cmp	r3, r1
 8014fd0:	da08      	bge.n	8014fe4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8014fd2:	2a00      	cmp	r2, #0
 8014fd4:	dd06      	ble.n	8014fe4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8014fd6:	1acb      	subs	r3, r1, r3
 8014fd8:	429a      	cmp	r2, r3
 8014fda:	f2c0 80bb 	blt.w	8015154 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	f300 80b9 	bgt.w	8015156 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8014fe4:	6967      	ldr	r7, [r4, #20]
 8014fe6:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8014fea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014fec:	443b      	add	r3, r7
 8014fee:	461f      	mov	r7, r3
 8014ff0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014ff2:	1bdf      	subs	r7, r3, r7
 8014ff4:	4297      	cmp	r7, r2
 8014ff6:	bfa8      	it	ge
 8014ff8:	4617      	movge	r7, r2
 8014ffa:	2f00      	cmp	r7, #0
 8014ffc:	f340 813c 	ble.w	8015278 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8015000:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8015002:	6829      	ldr	r1, [r5, #0]
 8015004:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015008:	f9bb 3000 	ldrsh.w	r3, [fp]
 801500c:	4411      	add	r1, r2
 801500e:	6820      	ldr	r0, [r4, #0]
 8015010:	4299      	cmp	r1, r3
 8015012:	dd1a      	ble.n	801504a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8015014:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8015018:	4402      	add	r2, r0
 801501a:	440b      	add	r3, r1
 801501c:	b21b      	sxth	r3, r3
 801501e:	429a      	cmp	r2, r3
 8015020:	dc13      	bgt.n	801504a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8015022:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015024:	a912      	add	r1, sp, #72	; 0x48
 8015026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015028:	9809      	ldr	r0, [sp, #36]	; 0x24
 801502a:	681b      	ldr	r3, [r3, #0]
 801502c:	9206      	str	r2, [sp, #24]
 801502e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015030:	9500      	str	r5, [sp, #0]
 8015032:	9205      	str	r2, [sp, #20]
 8015034:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015036:	e9cd b203 	strd	fp, r2, [sp, #12]
 801503a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801503c:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8015040:	aa49      	add	r2, sp, #292	; 0x124
 8015042:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8015046:	4623      	mov	r3, r4
 8015048:	47c8      	blx	r9
 801504a:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801504e:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8015052:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8015056:	ee37 7a27 	vadd.f32	s14, s14, s15
 801505a:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801505e:	68a1      	ldr	r1, [r4, #8]
 8015060:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015064:	ed94 6a08 	vldr	s12, [r4, #32]
 8015068:	edd4 6a07 	vldr	s13, [r4, #28]
 801506c:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8015070:	ee76 6a86 	vadd.f32	s13, s13, s12
 8015074:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8015078:	e9d4 2300 	ldrd	r2, r3, [r4]
 801507c:	edc4 6a07 	vstr	s13, [r4, #28]
 8015080:	441a      	add	r2, r3
 8015082:	6963      	ldr	r3, [r4, #20]
 8015084:	3301      	adds	r3, #1
 8015086:	6022      	str	r2, [r4, #0]
 8015088:	6163      	str	r3, [r4, #20]
 801508a:	69a3      	ldr	r3, [r4, #24]
 801508c:	3b01      	subs	r3, #1
 801508e:	61a3      	str	r3, [r4, #24]
 8015090:	6923      	ldr	r3, [r4, #16]
 8015092:	440b      	add	r3, r1
 8015094:	68e1      	ldr	r1, [r4, #12]
 8015096:	428b      	cmp	r3, r1
 8015098:	6123      	str	r3, [r4, #16]
 801509a:	db15      	blt.n	80150c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 801509c:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 80150a0:	3201      	adds	r2, #1
 80150a2:	1a5b      	subs	r3, r3, r1
 80150a4:	ee76 6a26 	vadd.f32	s13, s12, s13
 80150a8:	6022      	str	r2, [r4, #0]
 80150aa:	6123      	str	r3, [r4, #16]
 80150ac:	edc4 6a07 	vstr	s13, [r4, #28]
 80150b0:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 80150b4:	ee36 7a87 	vadd.f32	s14, s13, s14
 80150b8:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80150bc:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 80150c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80150c4:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80150c8:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 80150cc:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 80150d0:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 80150d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80150d8:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 80150dc:	68a9      	ldr	r1, [r5, #8]
 80150de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80150e2:	ed95 6a08 	vldr	s12, [r5, #32]
 80150e6:	edd5 6a07 	vldr	s13, [r5, #28]
 80150ea:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80150ee:	ee76 6a86 	vadd.f32	s13, s13, s12
 80150f2:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80150f6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80150fa:	edc5 6a07 	vstr	s13, [r5, #28]
 80150fe:	441a      	add	r2, r3
 8015100:	696b      	ldr	r3, [r5, #20]
 8015102:	3301      	adds	r3, #1
 8015104:	602a      	str	r2, [r5, #0]
 8015106:	616b      	str	r3, [r5, #20]
 8015108:	69ab      	ldr	r3, [r5, #24]
 801510a:	3b01      	subs	r3, #1
 801510c:	61ab      	str	r3, [r5, #24]
 801510e:	692b      	ldr	r3, [r5, #16]
 8015110:	440b      	add	r3, r1
 8015112:	68e9      	ldr	r1, [r5, #12]
 8015114:	428b      	cmp	r3, r1
 8015116:	612b      	str	r3, [r5, #16]
 8015118:	db15      	blt.n	8015146 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 801511a:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801511e:	3201      	adds	r2, #1
 8015120:	1a5b      	subs	r3, r3, r1
 8015122:	ee76 6a26 	vadd.f32	s13, s12, s13
 8015126:	602a      	str	r2, [r5, #0]
 8015128:	612b      	str	r3, [r5, #16]
 801512a:	edc5 6a07 	vstr	s13, [r5, #28]
 801512e:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8015132:	ee36 7a87 	vadd.f32	s14, s13, s14
 8015136:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801513a:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801513e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015142:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8015146:	3f01      	subs	r7, #1
 8015148:	e757      	b.n	8014ffa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 801514a:	ad39      	add	r5, sp, #228	; 0xe4
 801514c:	ac19      	add	r4, sp, #100	; 0x64
 801514e:	e72d      	b.n	8014fac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8015150:	4613      	mov	r3, r2
 8015152:	e744      	b.n	8014fde <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8015154:	4613      	mov	r3, r2
 8015156:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8015158:	469e      	mov	lr, r3
 801515a:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 801515e:	461f      	mov	r7, r3
 8015160:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8015164:	f04f 0900 	mov.w	r9, #0
 8015168:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 801516c:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 8015170:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8015174:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8015178:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 801517c:	993d      	ldr	r1, [sp, #244]	; 0xf4
 801517e:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 8015182:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8015186:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 801518a:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 801518e:	960e      	str	r6, [sp, #56]	; 0x38
 8015190:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8015194:	2f00      	cmp	r7, #0
 8015196:	d146      	bne.n	8015226 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8015198:	449c      	add	ip, r3
 801519a:	1ad7      	subs	r7, r2, r3
 801519c:	f1b9 0f00 	cmp.w	r9, #0
 80151a0:	d009      	beq.n	80151b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 80151a2:	9039      	str	r0, [sp, #228]	; 0xe4
 80151a4:	913d      	str	r1, [sp, #244]	; 0xf4
 80151a6:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 80151aa:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 80151ae:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 80151b2:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 80151b6:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80151b8:	f04f 0800 	mov.w	r8, #0
 80151bc:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 80151c0:	910e      	str	r1, [sp, #56]	; 0x38
 80151c2:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 80151c6:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 80151ca:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 80151ce:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 80151d2:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 80151d6:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 80151da:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 80151de:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 80151e2:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 80151e6:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 80151ea:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 80151ee:	f1be 0f00 	cmp.w	lr, #0
 80151f2:	d030      	beq.n	8015256 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 80151f4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80151f6:	4450      	add	r0, sl
 80151f8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80151fc:	4431      	add	r1, r6
 80151fe:	ee37 7a04 	vadd.f32	s14, s14, s8
 8015202:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8015206:	4549      	cmp	r1, r9
 8015208:	db08      	blt.n	801521c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801520a:	ee77 7a85 	vadd.f32	s15, s15, s10
 801520e:	3001      	adds	r0, #1
 8015210:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8015214:	eba1 0109 	sub.w	r1, r1, r9
 8015218:	ee37 7a06 	vadd.f32	s14, s14, s12
 801521c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8015220:	f04f 0801 	mov.w	r8, #1
 8015224:	e7e3      	b.n	80151ee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8015226:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8015228:	4450      	add	r0, sl
 801522a:	ee37 7a24 	vadd.f32	s14, s14, s9
 801522e:	4431      	add	r1, r6
 8015230:	ee77 7a84 	vadd.f32	s15, s15, s8
 8015234:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8015238:	4541      	cmp	r1, r8
 801523a:	db08      	blt.n	801524e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 801523c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8015240:	3001      	adds	r0, #1
 8015242:	ee37 7a25 	vadd.f32	s14, s14, s11
 8015246:	eba1 0108 	sub.w	r1, r1, r8
 801524a:	ee77 7a86 	vadd.f32	s15, s15, s12
 801524e:	3f01      	subs	r7, #1
 8015250:	f04f 0901 	mov.w	r9, #1
 8015254:	e79e      	b.n	8015194 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8015256:	449c      	add	ip, r3
 8015258:	1aff      	subs	r7, r7, r3
 801525a:	f1b8 0f00 	cmp.w	r8, #0
 801525e:	d009      	beq.n	8015274 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8015260:	9019      	str	r0, [sp, #100]	; 0x64
 8015262:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8015266:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801526a:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801526e:	911d      	str	r1, [sp, #116]	; 0x74
 8015270:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8015274:	1ad2      	subs	r2, r2, r3
 8015276:	e6b5      	b.n	8014fe4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8015278:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801527a:	681b      	ldr	r3, [r3, #0]
 801527c:	b923      	cbnz	r3, 8015288 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801527e:	4b04      	ldr	r3, [pc, #16]	; (8015290 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8015280:	6818      	ldr	r0, [r3, #0]
 8015282:	6803      	ldr	r3, [r0, #0]
 8015284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015286:	4798      	blx	r3
 8015288:	b05b      	add	sp, #364	; 0x16c
 801528a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801528e:	bf00      	nop
 8015290:	20027bc4 	.word	0x20027bc4

08015294 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 8015294:	b570      	push	{r4, r5, r6, lr}
 8015296:	4604      	mov	r4, r0
 8015298:	2500      	movs	r5, #0
 801529a:	9805      	ldr	r0, [sp, #20]
 801529c:	f89d 601c 	ldrb.w	r6, [sp, #28]
 80152a0:	6061      	str	r1, [r4, #4]
 80152a2:	8263      	strh	r3, [r4, #18]
 80152a4:	f89d 1010 	ldrb.w	r1, [sp, #16]
 80152a8:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80152ac:	8025      	strh	r5, [r4, #0]
 80152ae:	7221      	strb	r1, [r4, #8]
 80152b0:	7266      	strb	r6, [r4, #9]
 80152b2:	60e0      	str	r0, [r4, #12]
 80152b4:	8222      	strh	r2, [r4, #16]
 80152b6:	82a3      	strh	r3, [r4, #20]
 80152b8:	82e5      	strh	r5, [r4, #22]
 80152ba:	8325      	strh	r5, [r4, #24]
 80152bc:	8365      	strh	r5, [r4, #26]
 80152be:	83a5      	strh	r5, [r4, #28]
 80152c0:	83e5      	strh	r5, [r4, #30]
 80152c2:	8425      	strh	r5, [r4, #32]
 80152c4:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 80152c8:	b32e      	cbz	r6, 8015316 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 80152ca:	6803      	ldr	r3, [r0, #0]
 80152cc:	695b      	ldr	r3, [r3, #20]
 80152ce:	4798      	blx	r3
 80152d0:	4606      	mov	r6, r0
 80152d2:	b300      	cbz	r0, 8015316 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 80152d4:	68e0      	ldr	r0, [r4, #12]
 80152d6:	4631      	mov	r1, r6
 80152d8:	6803      	ldr	r3, [r0, #0]
 80152da:	68db      	ldr	r3, [r3, #12]
 80152dc:	4798      	blx	r3
 80152de:	4605      	mov	r5, r0
 80152e0:	b1c8      	cbz	r0, 8015316 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 80152e2:	7b43      	ldrb	r3, [r0, #13]
 80152e4:	7a82      	ldrb	r2, [r0, #10]
 80152e6:	005b      	lsls	r3, r3, #1
 80152e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80152ec:	4313      	orrs	r3, r2
 80152ee:	8423      	strh	r3, [r4, #32]
 80152f0:	7a63      	ldrb	r3, [r4, #9]
 80152f2:	2b06      	cmp	r3, #6
 80152f4:	d10f      	bne.n	8015316 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 80152f6:	68e0      	ldr	r0, [r4, #12]
 80152f8:	462a      	mov	r2, r5
 80152fa:	4631      	mov	r1, r6
 80152fc:	6803      	ldr	r3, [r0, #0]
 80152fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015300:	4798      	blx	r3
 8015302:	7b6b      	ldrb	r3, [r5, #13]
 8015304:	005b      	lsls	r3, r3, #1
 8015306:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801530a:	7aab      	ldrb	r3, [r5, #10]
 801530c:	4313      	orrs	r3, r2
 801530e:	4418      	add	r0, r3
 8015310:	8c23      	ldrh	r3, [r4, #32]
 8015312:	4418      	add	r0, r3
 8015314:	8420      	strh	r0, [r4, #32]
 8015316:	4620      	mov	r0, r4
 8015318:	bd70      	pop	{r4, r5, r6, pc}

0801531a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801531a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801531e:	2400      	movs	r4, #0
 8015320:	b085      	sub	sp, #20
 8015322:	4681      	mov	r9, r0
 8015324:	4688      	mov	r8, r1
 8015326:	4692      	mov	sl, r2
 8015328:	469b      	mov	fp, r3
 801532a:	4627      	mov	r7, r4
 801532c:	4625      	mov	r5, r4
 801532e:	4626      	mov	r6, r4
 8015330:	4554      	cmp	r4, sl
 8015332:	da2a      	bge.n	801538a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8015334:	2300      	movs	r3, #0
 8015336:	9303      	str	r3, [sp, #12]
 8015338:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801533c:	429d      	cmp	r5, r3
 801533e:	d004      	beq.n	801534a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8015340:	f242 030b 	movw	r3, #8203	; 0x200b
 8015344:	429d      	cmp	r5, r3
 8015346:	bf18      	it	ne
 8015348:	462f      	movne	r7, r5
 801534a:	ab03      	add	r3, sp, #12
 801534c:	4642      	mov	r2, r8
 801534e:	4659      	mov	r1, fp
 8015350:	4648      	mov	r0, r9
 8015352:	f003 f875 	bl	8018440 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8015356:	4605      	mov	r5, r0
 8015358:	b1b8      	cbz	r0, 801538a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801535a:	280a      	cmp	r0, #10
 801535c:	d015      	beq.n	801538a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801535e:	9a03      	ldr	r2, [sp, #12]
 8015360:	b18a      	cbz	r2, 8015386 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 8015362:	7b50      	ldrb	r0, [r2, #13]
 8015364:	4639      	mov	r1, r7
 8015366:	7a93      	ldrb	r3, [r2, #10]
 8015368:	0040      	lsls	r0, r0, #1
 801536a:	8895      	ldrh	r5, [r2, #4]
 801536c:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8015370:	4303      	orrs	r3, r0
 8015372:	4640      	mov	r0, r8
 8015374:	9301      	str	r3, [sp, #4]
 8015376:	f8d8 3000 	ldr.w	r3, [r8]
 801537a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801537c:	4798      	blx	r3
 801537e:	9b01      	ldr	r3, [sp, #4]
 8015380:	4418      	add	r0, r3
 8015382:	4406      	add	r6, r0
 8015384:	b2b6      	uxth	r6, r6
 8015386:	3401      	adds	r4, #1
 8015388:	e7d2      	b.n	8015330 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 801538a:	4630      	mov	r0, r6
 801538c:	b005      	add	sp, #20
 801538e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015392 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8015392:	2a02      	cmp	r2, #2
 8015394:	b530      	push	{r4, r5, lr}
 8015396:	d011      	beq.n	80153bc <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8015398:	2a03      	cmp	r2, #3
 801539a:	d01c      	beq.n	80153d6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801539c:	2a01      	cmp	r2, #1
 801539e:	d10c      	bne.n	80153ba <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 80153a0:	888b      	ldrh	r3, [r1, #4]
 80153a2:	8801      	ldrh	r1, [r0, #0]
 80153a4:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 80153a8:	1a5b      	subs	r3, r3, r1
 80153aa:	8844      	ldrh	r4, [r0, #2]
 80153ac:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80153b0:	1a9b      	subs	r3, r3, r2
 80153b2:	8004      	strh	r4, [r0, #0]
 80153b4:	8081      	strh	r1, [r0, #4]
 80153b6:	8043      	strh	r3, [r0, #2]
 80153b8:	80c2      	strh	r2, [r0, #6]
 80153ba:	bd30      	pop	{r4, r5, pc}
 80153bc:	88cb      	ldrh	r3, [r1, #6]
 80153be:	8842      	ldrh	r2, [r0, #2]
 80153c0:	1a9b      	subs	r3, r3, r2
 80153c2:	88c2      	ldrh	r2, [r0, #6]
 80153c4:	1a9b      	subs	r3, r3, r2
 80153c6:	888a      	ldrh	r2, [r1, #4]
 80153c8:	8801      	ldrh	r1, [r0, #0]
 80153ca:	8043      	strh	r3, [r0, #2]
 80153cc:	1a52      	subs	r2, r2, r1
 80153ce:	8881      	ldrh	r1, [r0, #4]
 80153d0:	1a52      	subs	r2, r2, r1
 80153d2:	8002      	strh	r2, [r0, #0]
 80153d4:	e7f1      	b.n	80153ba <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 80153d6:	88cb      	ldrh	r3, [r1, #6]
 80153d8:	8841      	ldrh	r1, [r0, #2]
 80153da:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 80153de:	1a5b      	subs	r3, r3, r1
 80153e0:	f9b0 5000 	ldrsh.w	r5, [r0]
 80153e4:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 80153e8:	1a9b      	subs	r3, r3, r2
 80153ea:	8045      	strh	r5, [r0, #2]
 80153ec:	8082      	strh	r2, [r0, #4]
 80153ee:	8003      	strh	r3, [r0, #0]
 80153f0:	80c4      	strh	r4, [r0, #6]
 80153f2:	e7e2      	b.n	80153ba <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

080153f4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 80153f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153f8:	b09f      	sub	sp, #124	; 0x7c
 80153fa:	9116      	str	r1, [sp, #88]	; 0x58
 80153fc:	9317      	str	r3, [sp, #92]	; 0x5c
 80153fe:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8015400:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8015402:	8809      	ldrh	r1, [r1, #0]
 8015404:	889b      	ldrh	r3, [r3, #4]
 8015406:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 801540a:	440b      	add	r3, r1
 801540c:	9212      	str	r2, [sp, #72]	; 0x48
 801540e:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 8015412:	b21b      	sxth	r3, r3
 8015414:	9011      	str	r0, [sp, #68]	; 0x44
 8015416:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 801541a:	9310      	str	r3, [sp, #64]	; 0x40
 801541c:	f8d8 3000 	ldr.w	r3, [r8]
 8015420:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	; 0xa0
 8015424:	7b19      	ldrb	r1, [r3, #12]
 8015426:	7adb      	ldrb	r3, [r3, #11]
 8015428:	9114      	str	r1, [sp, #80]	; 0x50
 801542a:	9315      	str	r3, [sp, #84]	; 0x54
 801542c:	2a00      	cmp	r2, #0
 801542e:	d06a      	beq.n	8015506 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 8015430:	f898 3010 	ldrb.w	r3, [r8, #16]
 8015434:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8015436:	2b06      	cmp	r3, #6
 8015438:	bf14      	ite	ne
 801543a:	2301      	movne	r3, #1
 801543c:	2302      	moveq	r3, #2
 801543e:	4413      	add	r3, r2
 8015440:	f04f 0900 	mov.w	r9, #0
 8015444:	930f      	str	r3, [sp, #60]	; 0x3c
 8015446:	464c      	mov	r4, r9
 8015448:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801544c:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8015450:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8015454:	4293      	cmp	r3, r2
 8015456:	f280 808f 	bge.w	8015578 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 801545a:	2300      	movs	r3, #0
 801545c:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 8015460:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8015464:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8015468:	429c      	cmp	r4, r3
 801546a:	d006      	beq.n	801547a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 801546c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801546e:	f242 020b 	movw	r2, #8203	; 0x200b
 8015472:	4294      	cmp	r4, r2
 8015474:	bf18      	it	ne
 8015476:	4623      	movne	r3, r4
 8015478:	930d      	str	r3, [sp, #52]	; 0x34
 801547a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801547c:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801547e:	f8d8 2000 	ldr.w	r2, [r8]
 8015482:	428b      	cmp	r3, r1
 8015484:	db41      	blt.n	801550a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 8015486:	6813      	ldr	r3, [r2, #0]
 8015488:	4610      	mov	r0, r2
 801548a:	695b      	ldr	r3, [r3, #20]
 801548c:	4798      	blx	r3
 801548e:	4604      	mov	r4, r0
 8015490:	f8d8 0000 	ldr.w	r0, [r8]
 8015494:	aa1d      	add	r2, sp, #116	; 0x74
 8015496:	4621      	mov	r1, r4
 8015498:	6803      	ldr	r3, [r0, #0]
 801549a:	689d      	ldr	r5, [r3, #8]
 801549c:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 80154a0:	47a8      	blx	r5
 80154a2:	901c      	str	r0, [sp, #112]	; 0x70
 80154a4:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80154a8:	429c      	cmp	r4, r3
 80154aa:	f000 80ec 	beq.w	8015686 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 80154ae:	f242 030b 	movw	r3, #8203	; 0x200b
 80154b2:	429c      	cmp	r4, r3
 80154b4:	f000 80e7 	beq.w	8015686 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 80154b8:	2c00      	cmp	r4, #0
 80154ba:	f000 80f9 	beq.w	80156b0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 80154be:	2c0a      	cmp	r4, #10
 80154c0:	d060      	beq.n	8015584 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 80154c2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80154c4:	b36a      	cbz	r2, 8015522 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 80154c6:	8894      	ldrh	r4, [r2, #4]
 80154c8:	f1bb 0f00 	cmp.w	fp, #0
 80154cc:	d03b      	beq.n	8015546 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 80154ce:	f892 900d 	ldrb.w	r9, [r2, #13]
 80154d2:	f1bb 0f01 	cmp.w	fp, #1
 80154d6:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80154da:	f409 7380 	and.w	r3, r9, #256	; 0x100
 80154de:	f892 900a 	ldrb.w	r9, [r2, #10]
 80154e2:	ea49 0903 	orr.w	r9, r9, r3
 80154e6:	d134      	bne.n	8015552 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
 80154e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80154ea:	eba6 0609 	sub.w	r6, r6, r9
 80154ee:	2b00      	cmp	r3, #0
 80154f0:	d14f      	bne.n	8015592 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 80154f2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80154f4:	eb09 0306 	add.w	r3, r9, r6
 80154f8:	4413      	add	r3, r2
 80154fa:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80154fc:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015500:	4293      	cmp	r3, r2
 8015502:	da51      	bge.n	80155a8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 8015504:	e038      	b.n	8015578 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 8015506:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015508:	e79a      	b.n	8015440 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
 801550a:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801550e:	4659      	mov	r1, fp
 8015510:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8015512:	9301      	str	r3, [sp, #4]
 8015514:	ab1d      	add	r3, sp, #116	; 0x74
 8015516:	9300      	str	r3, [sp, #0]
 8015518:	ab1c      	add	r3, sp, #112	; 0x70
 801551a:	f002 ffda 	bl	80184d2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 801551e:	4604      	mov	r4, r0
 8015520:	e7c0      	b.n	80154a4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 8015522:	f8d8 0000 	ldr.w	r0, [r8]
 8015526:	6803      	ldr	r3, [r0, #0]
 8015528:	691b      	ldr	r3, [r3, #16]
 801552a:	4798      	blx	r3
 801552c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8015530:	4298      	cmp	r0, r3
 8015532:	f000 80a8 	beq.w	8015686 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8015536:	f242 030b 	movw	r3, #8203	; 0x200b
 801553a:	4298      	cmp	r0, r3
 801553c:	f000 80a3 	beq.w	8015686 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8015540:	f1bb 0f00 	cmp.w	fp, #0
 8015544:	d100      	bne.n	8015548 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 8015546:	444e      	add	r6, r9
 8015548:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801554a:	2a00      	cmp	r2, #0
 801554c:	d1bf      	bne.n	80154ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 801554e:	4691      	mov	r9, r2
 8015550:	e099      	b.n	8015686 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8015552:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015554:	2b00      	cmp	r3, #0
 8015556:	f000 80ad 	beq.w	80156b4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c0>
 801555a:	f1bb 0f00 	cmp.w	fp, #0
 801555e:	d118      	bne.n	8015592 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 8015560:	f8d8 0000 	ldr.w	r0, [r8]
 8015564:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015566:	6803      	ldr	r3, [r0, #0]
 8015568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801556a:	4798      	blx	r3
 801556c:	4406      	add	r6, r0
 801556e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015570:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015572:	1af3      	subs	r3, r6, r3
 8015574:	4293      	cmp	r3, r2
 8015576:	dd17      	ble.n	80155a8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 8015578:	2c00      	cmp	r4, #0
 801557a:	f000 8099 	beq.w	80156b0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 801557e:	2c0a      	cmp	r4, #10
 8015580:	f040 8087 	bne.w	8015692 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29e>
 8015584:	240a      	movs	r4, #10
 8015586:	fab4 f084 	clz	r0, r4
 801558a:	0940      	lsrs	r0, r0, #5
 801558c:	b01f      	add	sp, #124	; 0x7c
 801558e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015592:	f8d8 0000 	ldr.w	r0, [r8]
 8015596:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015598:	6803      	ldr	r3, [r0, #0]
 801559a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801559c:	4798      	blx	r3
 801559e:	f1bb 0f01 	cmp.w	fp, #1
 80155a2:	eba6 0600 	sub.w	r6, r6, r0
 80155a6:	d0a4      	beq.n	80154f2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 80155a8:	981c      	ldr	r0, [sp, #112]	; 0x70
 80155aa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80155ac:	f990 1009 	ldrsb.w	r1, [r0, #9]
 80155b0:	f9b3 7000 	ldrsh.w	r7, [r3]
 80155b4:	7b43      	ldrb	r3, [r0, #13]
 80155b6:	4431      	add	r1, r6
 80155b8:	015b      	lsls	r3, r3, #5
 80155ba:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80155be:	7983      	ldrb	r3, [r0, #6]
 80155c0:	4313      	orrs	r3, r2
 80155c2:	440b      	add	r3, r1
 80155c4:	42bb      	cmp	r3, r7
 80155c6:	db5e      	blt.n	8015686 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 80155c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80155ca:	4299      	cmp	r1, r3
 80155cc:	da5b      	bge.n	8015686 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 80155ce:	f8d8 0000 	ldr.w	r0, [r8]
 80155d2:	42b7      	cmp	r7, r6
 80155d4:	6803      	ldr	r3, [r0, #0]
 80155d6:	bfcc      	ite	gt
 80155d8:	1bbf      	subgt	r7, r7, r6
 80155da:	2700      	movle	r7, #0
 80155dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80155de:	bfc8      	it	gt
 80155e0:	b2bf      	uxthgt	r7, r7
 80155e2:	4798      	blx	r3
 80155e4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80155e6:	7b5a      	ldrb	r2, [r3, #13]
 80155e8:	00d1      	lsls	r1, r2, #3
 80155ea:	f401 7580 	and.w	r5, r1, #256	; 0x100
 80155ee:	7a19      	ldrb	r1, [r3, #8]
 80155f0:	4329      	orrs	r1, r5
 80155f2:	0655      	lsls	r5, r2, #25
 80155f4:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80155f6:	bf48      	it	mi
 80155f8:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 80155fc:	4405      	add	r5, r0
 80155fe:	bf48      	it	mi
 8015600:	b209      	sxthmi	r1, r1
 8015602:	1a6d      	subs	r5, r5, r1
 8015604:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8015606:	b2ad      	uxth	r5, r5
 8015608:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801560c:	fa0f fa85 	sxth.w	sl, r5
 8015610:	4551      	cmp	r1, sl
 8015612:	dd3c      	ble.n	801568e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 8015614:	0112      	lsls	r2, r2, #4
 8015616:	79d8      	ldrb	r0, [r3, #7]
 8015618:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801561c:	4302      	orrs	r2, r0
 801561e:	4492      	add	sl, r2
 8015620:	4551      	cmp	r1, sl
 8015622:	dc30      	bgt.n	8015686 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8015624:	1b4d      	subs	r5, r1, r5
 8015626:	468a      	mov	sl, r1
 8015628:	b22d      	sxth	r5, r5
 801562a:	9319      	str	r3, [sp, #100]	; 0x64
 801562c:	b2ad      	uxth	r5, r5
 801562e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015630:	f8d8 0000 	ldr.w	r0, [r8]
 8015634:	681a      	ldr	r2, [r3, #0]
 8015636:	6801      	ldr	r1, [r0, #0]
 8015638:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 801563a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801563c:	9313      	str	r3, [sp, #76]	; 0x4c
 801563e:	9218      	str	r2, [sp, #96]	; 0x60
 8015640:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8015642:	4788      	blx	r1
 8015644:	f898 1006 	ldrb.w	r1, [r8, #6]
 8015648:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801564a:	910b      	str	r1, [sp, #44]	; 0x2c
 801564c:	f898 100e 	ldrb.w	r1, [r8, #14]
 8015650:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015652:	910a      	str	r1, [sp, #40]	; 0x28
 8015654:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 8015658:	9109      	str	r1, [sp, #36]	; 0x24
 801565a:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801565e:	9305      	str	r3, [sp, #20]
 8015660:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8015662:	9206      	str	r2, [sp, #24]
 8015664:	9304      	str	r3, [sp, #16]
 8015666:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015668:	f8cd a004 	str.w	sl, [sp, #4]
 801566c:	e9cd 7502 	strd	r7, r5, [sp, #8]
 8015670:	4437      	add	r7, r6
 8015672:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8015674:	b23f      	sxth	r7, r7
 8015676:	e9cd 0107 	strd	r0, r1, [sp, #28]
 801567a:	9700      	str	r7, [sp, #0]
 801567c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801567e:	681a      	ldr	r2, [r3, #0]
 8015680:	9811      	ldr	r0, [sp, #68]	; 0x44
 8015682:	685b      	ldr	r3, [r3, #4]
 8015684:	47a8      	blx	r5
 8015686:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015688:	3301      	adds	r3, #1
 801568a:	930e      	str	r3, [sp, #56]	; 0x38
 801568c:	e6e0      	b.n	8015450 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
 801568e:	2500      	movs	r5, #0
 8015690:	e7cb      	b.n	801562a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x236>
 8015692:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8015694:	3501      	adds	r5, #1
 8015696:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015698:	429d      	cmp	r5, r3
 801569a:	f6bf af74 	bge.w	8015586 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 801569e:	4659      	mov	r1, fp
 80156a0:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80156a2:	f7f1 fe6f 	bl	8007384 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80156a6:	4604      	mov	r4, r0
 80156a8:	b110      	cbz	r0, 80156b0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 80156aa:	280a      	cmp	r0, #10
 80156ac:	d1f2      	bne.n	8015694 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2a0>
 80156ae:	e769      	b.n	8015584 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 80156b0:	2400      	movs	r4, #0
 80156b2:	e768      	b.n	8015586 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 80156b4:	f1bb 0f00 	cmp.w	fp, #0
 80156b8:	f43f af59 	beq.w	801556e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
 80156bc:	e774      	b.n	80155a8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

080156be <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 80156be:	b530      	push	{r4, r5, lr}
 80156c0:	8ac4      	ldrh	r4, [r0, #22]
 80156c2:	8b45      	ldrh	r5, [r0, #26]
 80156c4:	8343      	strh	r3, [r0, #26]
 80156c6:	442c      	add	r4, r5
 80156c8:	1ae4      	subs	r4, r4, r3
 80156ca:	8b83      	ldrh	r3, [r0, #28]
 80156cc:	82c4      	strh	r4, [r0, #22]
 80156ce:	8b04      	ldrh	r4, [r0, #24]
 80156d0:	4422      	add	r2, r4
 80156d2:	440c      	add	r4, r1
 80156d4:	1a59      	subs	r1, r3, r1
 80156d6:	83c2      	strh	r2, [r0, #30]
 80156d8:	8304      	strh	r4, [r0, #24]
 80156da:	8381      	strh	r1, [r0, #28]
 80156dc:	bd30      	pop	{r4, r5, pc}

080156de <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 80156de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156e2:	4604      	mov	r4, r0
 80156e4:	8a47      	ldrh	r7, [r0, #18]
 80156e6:	68c0      	ldr	r0, [r0, #12]
 80156e8:	b085      	sub	sp, #20
 80156ea:	6803      	ldr	r3, [r0, #0]
 80156ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80156ee:	4798      	blx	r3
 80156f0:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 80156f4:	7a63      	ldrb	r3, [r4, #9]
 80156f6:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 80156fa:	3b01      	subs	r3, #1
 80156fc:	42b7      	cmp	r7, r6
 80156fe:	bfac      	ite	ge
 8015700:	f04f 0900 	movge.w	r9, #0
 8015704:	f04f 0901 	movlt.w	r9, #1
 8015708:	2b05      	cmp	r3, #5
 801570a:	d804      	bhi.n	8015716 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
 801570c:	e8df f003 	tbb	[pc, r3]
 8015710:	470f0854 	.word	0x470f0854
 8015714:	4c4c      	.short	0x4c4c
 8015716:	2500      	movs	r5, #0
 8015718:	46a9      	mov	r9, r5
 801571a:	462e      	mov	r6, r5
 801571c:	462f      	mov	r7, r5
 801571e:	e00e      	b.n	801573e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8015720:	42b7      	cmp	r7, r6
 8015722:	f04f 0500 	mov.w	r5, #0
 8015726:	bfb4      	ite	lt
 8015728:	2600      	movlt	r6, #0
 801572a:	2601      	movge	r6, #1
 801572c:	e7f6      	b.n	801571c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 801572e:	42b7      	cmp	r7, r6
 8015730:	464d      	mov	r5, r9
 8015732:	f04f 0900 	mov.w	r9, #0
 8015736:	bfb4      	ite	lt
 8015738:	2600      	movlt	r6, #0
 801573a:	2601      	movge	r6, #1
 801573c:	464f      	mov	r7, r9
 801573e:	f04f 0800 	mov.w	r8, #0
 8015742:	f8a4 8016 	strh.w	r8, [r4, #22]
 8015746:	f8a4 8018 	strh.w	r8, [r4, #24]
 801574a:	f8cd 8004 	str.w	r8, [sp, #4]
 801574e:	2300      	movs	r3, #0
 8015750:	9303      	str	r3, [sp, #12]
 8015752:	8823      	ldrh	r3, [r4, #0]
 8015754:	2b20      	cmp	r3, #32
 8015756:	d033      	beq.n	80157c0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
 8015758:	f242 010b 	movw	r1, #8203	; 0x200b
 801575c:	1a5a      	subs	r2, r3, r1
 801575e:	f1d2 0a00 	rsbs	sl, r2, #0
 8015762:	eb4a 0a02 	adc.w	sl, sl, r2
 8015766:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801576a:	4293      	cmp	r3, r2
 801576c:	d008      	beq.n	8015780 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 801576e:	428b      	cmp	r3, r1
 8015770:	9a01      	ldr	r2, [sp, #4]
 8015772:	bf0e      	itee	eq
 8015774:	f04f 0a01 	moveq.w	sl, #1
 8015778:	461a      	movne	r2, r3
 801577a:	f04f 0a00 	movne.w	sl, #0
 801577e:	9201      	str	r2, [sp, #4]
 8015780:	ab03      	add	r3, sp, #12
 8015782:	68e2      	ldr	r2, [r4, #12]
 8015784:	7a21      	ldrb	r1, [r4, #8]
 8015786:	6860      	ldr	r0, [r4, #4]
 8015788:	f002 fe5a 	bl	8018440 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801578c:	8020      	strh	r0, [r4, #0]
 801578e:	b9d8      	cbnz	r0, 80157c8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
 8015790:	8ba2      	ldrh	r2, [r4, #28]
 8015792:	2300      	movs	r3, #0
 8015794:	4611      	mov	r1, r2
 8015796:	4620      	mov	r0, r4
 8015798:	f7ff ff91 	bl	80156be <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801579c:	e06e      	b.n	801587c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 801579e:	2500      	movs	r5, #0
 80157a0:	2701      	movs	r7, #1
 80157a2:	46a9      	mov	r9, r5
 80157a4:	462e      	mov	r6, r5
 80157a6:	e7ca      	b.n	801573e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 80157a8:	42b7      	cmp	r7, r6
 80157aa:	f04f 0500 	mov.w	r5, #0
 80157ae:	bfb4      	ite	lt
 80157b0:	2700      	movlt	r7, #0
 80157b2:	2701      	movge	r7, #1
 80157b4:	462e      	mov	r6, r5
 80157b6:	e7c2      	b.n	801573e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 80157b8:	2500      	movs	r5, #0
 80157ba:	2601      	movs	r6, #1
 80157bc:	46a9      	mov	r9, r5
 80157be:	e7ad      	b.n	801571c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 80157c0:	9301      	str	r3, [sp, #4]
 80157c2:	f04f 0a01 	mov.w	sl, #1
 80157c6:	e7db      	b.n	8015780 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 80157c8:	8b63      	ldrh	r3, [r4, #26]
 80157ca:	280a      	cmp	r0, #10
 80157cc:	f103 0301 	add.w	r3, r3, #1
 80157d0:	8363      	strh	r3, [r4, #26]
 80157d2:	d0dd      	beq.n	8015790 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
 80157d4:	9a03      	ldr	r2, [sp, #12]
 80157d6:	bb62      	cbnz	r2, 8015832 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
 80157d8:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80157dc:	4298      	cmp	r0, r3
 80157de:	d003      	beq.n	80157e8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 80157e0:	f242 030b 	movw	r3, #8203	; 0x200b
 80157e4:	4298      	cmp	r0, r3
 80157e6:	d1b2      	bne.n	801574e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80157e8:	8823      	ldrh	r3, [r4, #0]
 80157ea:	8ba1      	ldrh	r1, [r4, #28]
 80157ec:	2b20      	cmp	r3, #32
 80157ee:	d003      	beq.n	80157f8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
 80157f0:	f242 000b 	movw	r0, #8203	; 0x200b
 80157f4:	4283      	cmp	r3, r0
 80157f6:	d131      	bne.n	801585c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
 80157f8:	f1ba 0f00 	cmp.w	sl, #0
 80157fc:	bf0a      	itet	eq
 80157fe:	4688      	moveq	r8, r1
 8015800:	4650      	movne	r0, sl
 8015802:	2001      	moveq	r0, #1
 8015804:	440a      	add	r2, r1
 8015806:	8b23      	ldrh	r3, [r4, #24]
 8015808:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801580c:	b292      	uxth	r2, r2
 801580e:	83a2      	strh	r2, [r4, #28]
 8015810:	4413      	add	r3, r2
 8015812:	f1b9 0f00 	cmp.w	r9, #0
 8015816:	d102      	bne.n	801581e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
 8015818:	2d00      	cmp	r5, #0
 801581a:	d042      	beq.n	80158a2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
 801581c:	b300      	cbz	r0, 8015860 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
 801581e:	8c21      	ldrh	r1, [r4, #32]
 8015820:	4419      	add	r1, r3
 8015822:	458c      	cmp	ip, r1
 8015824:	da37      	bge.n	8015896 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 8015826:	8ae1      	ldrh	r1, [r4, #22]
 8015828:	2900      	cmp	r1, #0
 801582a:	d034      	beq.n	8015896 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 801582c:	4563      	cmp	r3, ip
 801582e:	dd8e      	ble.n	801574e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015830:	e01d      	b.n	801586e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
 8015832:	8893      	ldrh	r3, [r2, #4]
 8015834:	9901      	ldr	r1, [sp, #4]
 8015836:	8023      	strh	r3, [r4, #0]
 8015838:	f892 b00d 	ldrb.w	fp, [r2, #13]
 801583c:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8015840:	f40b 7080 	and.w	r0, fp, #256	; 0x100
 8015844:	f892 b00a 	ldrb.w	fp, [r2, #10]
 8015848:	ea4b 0b00 	orr.w	fp, fp, r0
 801584c:	68e0      	ldr	r0, [r4, #12]
 801584e:	6803      	ldr	r3, [r0, #0]
 8015850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015852:	4798      	blx	r3
 8015854:	eb0b 0200 	add.w	r2, fp, r0
 8015858:	b292      	uxth	r2, r2
 801585a:	e7c5      	b.n	80157e8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 801585c:	2000      	movs	r0, #0
 801585e:	e7d1      	b.n	8015804 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
 8015860:	4563      	cmp	r3, ip
 8015862:	f77f af74 	ble.w	801574e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015866:	8ae3      	ldrh	r3, [r4, #22]
 8015868:	2b00      	cmp	r3, #0
 801586a:	f43f af70 	beq.w	801574e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801586e:	2301      	movs	r3, #1
 8015870:	8c22      	ldrh	r2, [r4, #32]
 8015872:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8015876:	8be3      	ldrh	r3, [r4, #30]
 8015878:	4413      	add	r3, r2
 801587a:	83e3      	strh	r3, [r4, #30]
 801587c:	68e0      	ldr	r0, [r4, #12]
 801587e:	6803      	ldr	r3, [r0, #0]
 8015880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015882:	4798      	blx	r3
 8015884:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8015888:	4418      	add	r0, r3
 801588a:	8a63      	ldrh	r3, [r4, #18]
 801588c:	1a18      	subs	r0, r3, r0
 801588e:	8260      	strh	r0, [r4, #18]
 8015890:	b005      	add	sp, #20
 8015892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015896:	2300      	movs	r3, #0
 8015898:	4611      	mov	r1, r2
 801589a:	4620      	mov	r0, r4
 801589c:	f7ff ff0f 	bl	80156be <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 80158a0:	e755      	b.n	801574e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80158a2:	4563      	cmp	r3, ip
 80158a4:	dd14      	ble.n	80158d0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
 80158a6:	b117      	cbz	r7, 80158ae <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
 80158a8:	2301      	movs	r3, #1
 80158aa:	460a      	mov	r2, r1
 80158ac:	e772      	b.n	8015794 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
 80158ae:	2e00      	cmp	r6, #0
 80158b0:	f43f af4d 	beq.w	801574e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80158b4:	2800      	cmp	r0, #0
 80158b6:	f47f af4a 	bne.w	801574e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80158ba:	f1ba 0f00 	cmp.w	sl, #0
 80158be:	d002      	beq.n	80158c6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
 80158c0:	2301      	movs	r3, #1
 80158c2:	4642      	mov	r2, r8
 80158c4:	e767      	b.n	8015796 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 80158c6:	8ae3      	ldrh	r3, [r4, #22]
 80158c8:	2b00      	cmp	r3, #0
 80158ca:	f43f af40 	beq.w	801574e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80158ce:	e7d5      	b.n	801587c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 80158d0:	2800      	cmp	r0, #0
 80158d2:	f47f af3c 	bne.w	801574e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80158d6:	f1ba 0f00 	cmp.w	sl, #0
 80158da:	f43f af38 	beq.w	801574e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80158de:	2301      	movs	r3, #1
 80158e0:	4642      	mov	r2, r8
 80158e2:	e7da      	b.n	801589a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

080158e4 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 80158e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80158e6:	4605      	mov	r5, r0
 80158e8:	b08f      	sub	sp, #60	; 0x3c
 80158ea:	4617      	mov	r7, r2
 80158ec:	461c      	mov	r4, r3
 80158ee:	460e      	mov	r6, r1
 80158f0:	b1d1      	cbz	r1, 8015928 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 80158f2:	681b      	ldr	r3, [r3, #0]
 80158f4:	4620      	mov	r0, r4
 80158f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80158f8:	4798      	blx	r3
 80158fa:	4240      	negs	r0, r0
 80158fc:	9603      	str	r6, [sp, #12]
 80158fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015902:	b200      	sxth	r0, r0
 8015904:	9700      	str	r7, [sp, #0]
 8015906:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801590a:	4629      	mov	r1, r5
 801590c:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8015910:	2401      	movs	r4, #1
 8015912:	a805      	add	r0, sp, #20
 8015914:	f7ff fcbe 	bl	8015294 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8015918:	a805      	add	r0, sp, #20
 801591a:	f7ff fee0 	bl	80156de <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801591e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8015922:	b163      	cbz	r3, 801593e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 8015924:	3401      	adds	r4, #1
 8015926:	e7f7      	b.n	8015918 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 8015928:	2401      	movs	r4, #1
 801592a:	f002 fe55 	bl	80185d8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801592e:	280a      	cmp	r0, #10
 8015930:	4628      	mov	r0, r5
 8015932:	bf08      	it	eq
 8015934:	3401      	addeq	r4, #1
 8015936:	f002 fe4f 	bl	80185d8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801593a:	2800      	cmp	r0, #0
 801593c:	d1f7      	bne.n	801592e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 801593e:	b2a0      	uxth	r0, r4
 8015940:	b00f      	add	sp, #60	; 0x3c
 8015942:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015944 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8015944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015948:	b0e3      	sub	sp, #396	; 0x18c
 801594a:	461c      	mov	r4, r3
 801594c:	4683      	mov	fp, r0
 801594e:	4688      	mov	r8, r1
 8015950:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
 8015952:	2b00      	cmp	r3, #0
 8015954:	f000 810f 	beq.w	8015b76 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8015958:	6823      	ldr	r3, [r4, #0]
 801595a:	2b00      	cmp	r3, #0
 801595c:	f000 810b 	beq.w	8015b76 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8015960:	7ba3      	ldrb	r3, [r4, #14]
 8015962:	2b00      	cmp	r3, #0
 8015964:	f000 8107 	beq.w	8015b76 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8015968:	ad0a      	add	r5, sp, #40	; 0x28
 801596a:	6810      	ldr	r0, [r2, #0]
 801596c:	6851      	ldr	r1, [r2, #4]
 801596e:	462b      	mov	r3, r5
 8015970:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 8015974:	c303      	stmia	r3!, {r0, r1}
 8015976:	2100      	movs	r1, #0
 8015978:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 801597c:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8015980:	4628      	mov	r0, r5
 8015982:	910c      	str	r1, [sp, #48]	; 0x30
 8015984:	a90c      	add	r1, sp, #48	; 0x30
 8015986:	79a2      	ldrb	r2, [r4, #6]
 8015988:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801598c:	f7ff fd01 	bl	8015392 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8015990:	a90c      	add	r1, sp, #48	; 0x30
 8015992:	79a2      	ldrb	r2, [r4, #6]
 8015994:	4608      	mov	r0, r1
 8015996:	f7ff fcfc 	bl	8015392 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801599a:	a817      	add	r0, sp, #92	; 0x5c
 801599c:	f002 fa08 	bl	8017db0 <_ZN8touchgfx12TextProviderC1Ev>
 80159a0:	6820      	ldr	r0, [r4, #0]
 80159a2:	6803      	ldr	r3, [r0, #0]
 80159a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80159a6:	4798      	blx	r3
 80159a8:	4606      	mov	r6, r0
 80159aa:	6820      	ldr	r0, [r4, #0]
 80159ac:	6803      	ldr	r3, [r0, #0]
 80159ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80159b0:	4798      	blx	r3
 80159b2:	4633      	mov	r3, r6
 80159b4:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 80159b6:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 80159b8:	9000      	str	r0, [sp, #0]
 80159ba:	a817      	add	r0, sp, #92	; 0x5c
 80159bc:	f002 fa4b 	bl	8017e56 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80159c0:	6820      	ldr	r0, [r4, #0]
 80159c2:	f894 a004 	ldrb.w	sl, [r4, #4]
 80159c6:	6803      	ldr	r3, [r0, #0]
 80159c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80159ca:	4798      	blx	r3
 80159cc:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 80159d0:	6823      	ldr	r3, [r4, #0]
 80159d2:	4607      	mov	r7, r0
 80159d4:	4406      	add	r6, r0
 80159d6:	a830      	add	r0, sp, #192	; 0xc0
 80159d8:	f893 9009 	ldrb.w	r9, [r3, #9]
 80159dc:	f002 f9e8 	bl	8017db0 <_ZN8touchgfx12TextProviderC1Ev>
 80159e0:	7c23      	ldrb	r3, [r4, #16]
 80159e2:	b17b      	cbz	r3, 8015a04 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 80159e4:	6820      	ldr	r0, [r4, #0]
 80159e6:	6803      	ldr	r3, [r0, #0]
 80159e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80159ea:	4798      	blx	r3
 80159ec:	9009      	str	r0, [sp, #36]	; 0x24
 80159ee:	6820      	ldr	r0, [r4, #0]
 80159f0:	6802      	ldr	r2, [r0, #0]
 80159f2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80159f4:	4790      	blx	r2
 80159f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80159f8:	9000      	str	r0, [sp, #0]
 80159fa:	a830      	add	r0, sp, #192	; 0xc0
 80159fc:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 80159fe:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 8015a00:	f002 fa29 	bl	8017e56 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8015a04:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8015a08:	a80e      	add	r0, sp, #56	; 0x38
 8015a0a:	7be2      	ldrb	r2, [r4, #15]
 8015a0c:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8015a10:	1a8a      	subs	r2, r1, r2
 8015a12:	7c21      	ldrb	r1, [r4, #16]
 8015a14:	9103      	str	r1, [sp, #12]
 8015a16:	b292      	uxth	r2, r2
 8015a18:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8015a1c:	9102      	str	r1, [sp, #8]
 8015a1e:	6821      	ldr	r1, [r4, #0]
 8015a20:	9101      	str	r1, [sp, #4]
 8015a22:	7961      	ldrb	r1, [r4, #5]
 8015a24:	9100      	str	r1, [sp, #0]
 8015a26:	a930      	add	r1, sp, #192	; 0xc0
 8015a28:	f7ff fc34 	bl	8015294 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8015a2c:	2e00      	cmp	r6, #0
 8015a2e:	dc5b      	bgt.n	8015ae8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 8015a30:	af17      	add	r7, sp, #92	; 0x5c
 8015a32:	f04f 0900 	mov.w	r9, #0
 8015a36:	7c23      	ldrb	r3, [r4, #16]
 8015a38:	2b00      	cmp	r3, #0
 8015a3a:	f000 80ae 	beq.w	8015b9a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 8015a3e:	a80e      	add	r0, sp, #56	; 0x38
 8015a40:	f7ff fe4d 	bl	80156de <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8015a44:	f1ba 0f00 	cmp.w	sl, #0
 8015a48:	f000 80a2 	beq.w	8015b90 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24c>
 8015a4c:	7c23      	ldrb	r3, [r4, #16]
 8015a4e:	2264      	movs	r2, #100	; 0x64
 8015a50:	4639      	mov	r1, r7
 8015a52:	a849      	add	r0, sp, #292	; 0x124
 8015a54:	9309      	str	r3, [sp, #36]	; 0x24
 8015a56:	f010 fa53 	bl	8025f00 <memcpy>
 8015a5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	f000 80a4 	beq.w	8015baa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x266>
 8015a62:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 8015a66:	7922      	ldrb	r2, [r4, #4]
 8015a68:	2a01      	cmp	r2, #1
 8015a6a:	f040 8087 	bne.w	8015b7c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8015a6e:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	; 0x34
 8015a72:	1ac0      	subs	r0, r0, r3
 8015a74:	2302      	movs	r3, #2
 8015a76:	fb90 f0f3 	sdiv	r0, r0, r3
 8015a7a:	b200      	sxth	r0, r0
 8015a7c:	7c23      	ldrb	r3, [r4, #16]
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	f000 8088 	beq.w	8015b94 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x250>
 8015a84:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
 8015a88:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
 8015a8c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8015a90:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8015a94:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8015a98:	2100      	movs	r1, #0
 8015a9a:	4410      	add	r0, r2
 8015a9c:	4642      	mov	r2, r8
 8015a9e:	b200      	sxth	r0, r0
 8015aa0:	e9cd 9703 	strd	r9, r7, [sp, #12]
 8015aa4:	9000      	str	r0, [sp, #0]
 8015aa6:	4658      	mov	r0, fp
 8015aa8:	e9cd 5401 	strd	r5, r4, [sp, #4]
 8015aac:	f7ff fca2 	bl	80153f4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8015ab0:	2800      	cmp	r0, #0
 8015ab2:	d160      	bne.n	8015b76 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8015ab4:	b2b2      	uxth	r2, r6
 8015ab6:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8015aba:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 8015abe:	4413      	add	r3, r2
 8015ac0:	1a8a      	subs	r2, r1, r2
 8015ac2:	b21b      	sxth	r3, r3
 8015ac4:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 8015ac8:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
 8015acc:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8015ad0:	2a00      	cmp	r2, #0
 8015ad2:	d150      	bne.n	8015b76 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8015ad4:	6822      	ldr	r2, [r4, #0]
 8015ad6:	8869      	ldrh	r1, [r5, #2]
 8015ad8:	7a12      	ldrb	r2, [r2, #8]
 8015ada:	1a9b      	subs	r3, r3, r2
 8015adc:	88ea      	ldrh	r2, [r5, #6]
 8015ade:	440a      	add	r2, r1
 8015ae0:	b212      	sxth	r2, r2
 8015ae2:	4293      	cmp	r3, r2
 8015ae4:	dda7      	ble.n	8015a36 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 8015ae6:	e046      	b.n	8015b76 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8015ae8:	7c23      	ldrb	r3, [r4, #16]
 8015aea:	444f      	add	r7, r9
 8015aec:	b1c3      	cbz	r3, 8015b20 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 8015aee:	f64f 79ff 	movw	r9, #65535	; 0xffff
 8015af2:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8015af6:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8015afa:	443b      	add	r3, r7
 8015afc:	4293      	cmp	r3, r2
 8015afe:	da97      	bge.n	8015a30 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8015b00:	a80e      	add	r0, sp, #56	; 0x38
 8015b02:	f7ff fdec 	bl	80156de <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8015b06:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 8015b0a:	3b01      	subs	r3, #1
 8015b0c:	b29b      	uxth	r3, r3
 8015b0e:	454b      	cmp	r3, r9
 8015b10:	9309      	str	r3, [sp, #36]	; 0x24
 8015b12:	d021      	beq.n	8015b58 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 8015b14:	7961      	ldrb	r1, [r4, #5]
 8015b16:	a817      	add	r0, sp, #92	; 0x5c
 8015b18:	f7f1 fc34 	bl	8007384 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8015b1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b1e:	e7f4      	b.n	8015b0a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 8015b20:	fa1f f986 	uxth.w	r9, r6
 8015b24:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8015b28:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8015b2c:	443b      	add	r3, r7
 8015b2e:	4293      	cmp	r3, r2
 8015b30:	f6bf af7e 	bge.w	8015a30 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8015b34:	a817      	add	r0, sp, #92	; 0x5c
 8015b36:	f002 fd4f 	bl	80185d8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8015b3a:	b1e0      	cbz	r0, 8015b76 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8015b3c:	280a      	cmp	r0, #10
 8015b3e:	d1f1      	bne.n	8015b24 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 8015b40:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8015b44:	444b      	add	r3, r9
 8015b46:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8015b4a:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8015b4e:	eba3 0309 	sub.w	r3, r3, r9
 8015b52:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8015b56:	e7e5      	b.n	8015b24 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 8015b58:	b2b3      	uxth	r3, r6
 8015b5a:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8015b5e:	441a      	add	r2, r3
 8015b60:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8015b64:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
 8015b68:	1ad3      	subs	r3, r2, r3
 8015b6a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8015b6e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	d1bd      	bne.n	8015af2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 8015b76:	b063      	add	sp, #396	; 0x18c
 8015b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b7c:	2a02      	cmp	r2, #2
 8015b7e:	d105      	bne.n	8015b8c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 8015b80:	7be2      	ldrb	r2, [r4, #15]
 8015b82:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8015b86:	1a80      	subs	r0, r0, r2
 8015b88:	1ac0      	subs	r0, r0, r3
 8015b8a:	e776      	b.n	8015a7a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 8015b8c:	2000      	movs	r0, #0
 8015b8e:	e775      	b.n	8015a7c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 8015b90:	7be0      	ldrb	r0, [r4, #15]
 8015b92:	e773      	b.n	8015a7c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 8015b94:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8015b98:	e776      	b.n	8015a88 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 8015b9a:	f1ba 0f00 	cmp.w	sl, #0
 8015b9e:	d0f7      	beq.n	8015b90 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24c>
 8015ba0:	2264      	movs	r2, #100	; 0x64
 8015ba2:	4639      	mov	r1, r7
 8015ba4:	a849      	add	r0, sp, #292	; 0x124
 8015ba6:	f010 f9ab 	bl	8025f00 <memcpy>
 8015baa:	2300      	movs	r3, #0
 8015bac:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8015bb0:	6821      	ldr	r1, [r4, #0]
 8015bb2:	a849      	add	r0, sp, #292	; 0x124
 8015bb4:	f7ff fbb1 	bl	801531a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8015bb8:	b203      	sxth	r3, r0
 8015bba:	e754      	b.n	8015a66 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

08015bbc <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8015bbc:	2b03      	cmp	r3, #3
 8015bbe:	d818      	bhi.n	8015bf2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 8015bc0:	e8df f003 	tbb	[pc, r3]
 8015bc4:	130d0602 	.word	0x130d0602
 8015bc8:	f9b0 2000 	ldrsh.w	r2, [r0]
 8015bcc:	1850      	adds	r0, r2, r1
 8015bce:	4770      	bx	lr
 8015bd0:	8803      	ldrh	r3, [r0, #0]
 8015bd2:	8880      	ldrh	r0, [r0, #4]
 8015bd4:	4418      	add	r0, r3
 8015bd6:	b200      	sxth	r0, r0
 8015bd8:	1a80      	subs	r0, r0, r2
 8015bda:	3801      	subs	r0, #1
 8015bdc:	4770      	bx	lr
 8015bde:	8803      	ldrh	r3, [r0, #0]
 8015be0:	8880      	ldrh	r0, [r0, #4]
 8015be2:	4418      	add	r0, r3
 8015be4:	b200      	sxth	r0, r0
 8015be6:	1a40      	subs	r0, r0, r1
 8015be8:	e7f7      	b.n	8015bda <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8015bea:	f9b0 0000 	ldrsh.w	r0, [r0]
 8015bee:	4410      	add	r0, r2
 8015bf0:	4770      	bx	lr
 8015bf2:	2000      	movs	r0, #0
 8015bf4:	4770      	bx	lr

08015bf6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8015bf6:	2b03      	cmp	r3, #3
 8015bf8:	d817      	bhi.n	8015c2a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 8015bfa:	e8df f003 	tbb	[pc, r3]
 8015bfe:	0602      	.short	0x0602
 8015c00:	1009      	.short	0x1009
 8015c02:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8015c06:	1850      	adds	r0, r2, r1
 8015c08:	4770      	bx	lr
 8015c0a:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8015c0e:	e7fa      	b.n	8015c06 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 8015c10:	8843      	ldrh	r3, [r0, #2]
 8015c12:	88c0      	ldrh	r0, [r0, #6]
 8015c14:	4418      	add	r0, r3
 8015c16:	b200      	sxth	r0, r0
 8015c18:	1a80      	subs	r0, r0, r2
 8015c1a:	3801      	subs	r0, #1
 8015c1c:	4770      	bx	lr
 8015c1e:	8843      	ldrh	r3, [r0, #2]
 8015c20:	88c0      	ldrh	r0, [r0, #6]
 8015c22:	4418      	add	r0, r3
 8015c24:	b200      	sxth	r0, r0
 8015c26:	1a40      	subs	r0, r0, r1
 8015c28:	e7f7      	b.n	8015c1a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8015c2a:	2000      	movs	r0, #0
 8015c2c:	4770      	bx	lr
	...

08015c30 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8015c30:	4b01      	ldr	r3, [pc, #4]	; (8015c38 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8015c32:	2200      	movs	r2, #0
 8015c34:	601a      	str	r2, [r3, #0]
 8015c36:	4770      	bx	lr
 8015c38:	20027bd4 	.word	0x20027bd4

08015c3c <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8015c3c:	4603      	mov	r3, r0
 8015c3e:	b1c8      	cbz	r0, 8015c74 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8015c40:	0c02      	lsrs	r2, r0, #16
 8015c42:	0412      	lsls	r2, r2, #16
 8015c44:	b9a2      	cbnz	r2, 8015c70 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 8015c46:	0403      	lsls	r3, r0, #16
 8015c48:	2010      	movs	r0, #16
 8015c4a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8015c4e:	bf04      	itt	eq
 8015c50:	021b      	lsleq	r3, r3, #8
 8015c52:	3008      	addeq	r0, #8
 8015c54:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8015c58:	bf04      	itt	eq
 8015c5a:	011b      	lsleq	r3, r3, #4
 8015c5c:	3004      	addeq	r0, #4
 8015c5e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8015c62:	bf04      	itt	eq
 8015c64:	009b      	lsleq	r3, r3, #2
 8015c66:	3002      	addeq	r0, #2
 8015c68:	2b00      	cmp	r3, #0
 8015c6a:	db04      	blt.n	8015c76 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8015c6c:	3001      	adds	r0, #1
 8015c6e:	4770      	bx	lr
 8015c70:	2000      	movs	r0, #0
 8015c72:	e7ea      	b.n	8015c4a <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8015c74:	2020      	movs	r0, #32
 8015c76:	4770      	bx	lr

08015c78 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8015c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c7c:	b087      	sub	sp, #28
 8015c7e:	4681      	mov	r9, r0
 8015c80:	4698      	mov	r8, r3
 8015c82:	4610      	mov	r0, r2
 8015c84:	460d      	mov	r5, r1
 8015c86:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 8015c8a:	b981      	cbnz	r1, 8015cae <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 8015c8c:	b14b      	cbz	r3, 8015ca2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 8015c8e:	460b      	mov	r3, r1
 8015c90:	464a      	mov	r2, r9
 8015c92:	4641      	mov	r1, r8
 8015c94:	e9cd 4700 	strd	r4, r7, [sp]
 8015c98:	f7ff ffee 	bl	8015c78 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8015c9c:	b007      	add	sp, #28
 8015c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8015ca6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8015caa:	603b      	str	r3, [r7, #0]
 8015cac:	e7f6      	b.n	8015c9c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8015cae:	fa32 fa01 	lsrs.w	sl, r2, r1
 8015cb2:	d107      	bne.n	8015cc4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 8015cb4:	fb09 f602 	mul.w	r6, r9, r2
 8015cb8:	fbb6 f0f4 	udiv	r0, r6, r4
 8015cbc:	fb04 6610 	mls	r6, r4, r0, r6
 8015cc0:	603e      	str	r6, [r7, #0]
 8015cc2:	e7eb      	b.n	8015c9c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8015cc4:	2601      	movs	r6, #1
 8015cc6:	fa09 fb01 	lsl.w	fp, r9, r1
 8015cca:	408e      	lsls	r6, r1
 8015ccc:	fbbb f3f4 	udiv	r3, fp, r4
 8015cd0:	3e01      	subs	r6, #1
 8015cd2:	9302      	str	r3, [sp, #8]
 8015cd4:	fb0a f303 	mul.w	r3, sl, r3
 8015cd8:	4016      	ands	r6, r2
 8015cda:	9303      	str	r3, [sp, #12]
 8015cdc:	4630      	mov	r0, r6
 8015cde:	f7ff ffad 	bl	8015c3c <_ZN8touchgfx16TouchCalibration4clzuEm>
 8015ce2:	464a      	mov	r2, r9
 8015ce4:	460b      	mov	r3, r1
 8015ce6:	4601      	mov	r1, r0
 8015ce8:	4630      	mov	r0, r6
 8015cea:	e9cd 4700 	strd	r4, r7, [sp]
 8015cee:	f7ff ffc3 	bl	8015c78 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8015cf2:	9b02      	ldr	r3, [sp, #8]
 8015cf4:	4606      	mov	r6, r0
 8015cf6:	eb05 0108 	add.w	r1, r5, r8
 8015cfa:	fb04 bb13 	mls	fp, r4, r3, fp
 8015cfe:	4658      	mov	r0, fp
 8015d00:	f7ff ff9c 	bl	8015c3c <_ZN8touchgfx16TouchCalibration4clzuEm>
 8015d04:	ab05      	add	r3, sp, #20
 8015d06:	465a      	mov	r2, fp
 8015d08:	e9cd 4300 	strd	r4, r3, [sp]
 8015d0c:	4603      	mov	r3, r0
 8015d0e:	4650      	mov	r0, sl
 8015d10:	f7ff ffb2 	bl	8015c78 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8015d14:	6839      	ldr	r1, [r7, #0]
 8015d16:	9a05      	ldr	r2, [sp, #20]
 8015d18:	9b03      	ldr	r3, [sp, #12]
 8015d1a:	4411      	add	r1, r2
 8015d1c:	fbb1 f2f4 	udiv	r2, r1, r4
 8015d20:	18d3      	adds	r3, r2, r3
 8015d22:	fb04 1412 	mls	r4, r4, r2, r1
 8015d26:	441e      	add	r6, r3
 8015d28:	603c      	str	r4, [r7, #0]
 8015d2a:	4430      	add	r0, r6
 8015d2c:	e7b6      	b.n	8015c9c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

08015d2e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8015d2e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015d32:	b085      	sub	sp, #20
 8015d34:	f1b0 0900 	subs.w	r9, r0, #0
 8015d38:	461d      	mov	r5, r3
 8015d3a:	4617      	mov	r7, r2
 8015d3c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8015d3e:	bfbb      	ittet	lt
 8015d40:	f1c9 0900 	rsblt	r9, r9, #0
 8015d44:	f04f 36ff 	movlt.w	r6, #4294967295
 8015d48:	2601      	movge	r6, #1
 8015d4a:	6823      	ldrlt	r3, [r4, #0]
 8015d4c:	bfbc      	itt	lt
 8015d4e:	425b      	neglt	r3, r3
 8015d50:	6023      	strlt	r3, [r4, #0]
 8015d52:	2a00      	cmp	r2, #0
 8015d54:	da04      	bge.n	8015d60 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8015d56:	6823      	ldr	r3, [r4, #0]
 8015d58:	4257      	negs	r7, r2
 8015d5a:	4276      	negs	r6, r6
 8015d5c:	425b      	negs	r3, r3
 8015d5e:	6023      	str	r3, [r4, #0]
 8015d60:	2d00      	cmp	r5, #0
 8015d62:	4638      	mov	r0, r7
 8015d64:	bfba      	itte	lt
 8015d66:	426d      	neglt	r5, r5
 8015d68:	f04f 38ff 	movlt.w	r8, #4294967295
 8015d6c:	f04f 0801 	movge.w	r8, #1
 8015d70:	f7ff ff64 	bl	8015c3c <_ZN8touchgfx16TouchCalibration4clzuEm>
 8015d74:	ab03      	add	r3, sp, #12
 8015d76:	463a      	mov	r2, r7
 8015d78:	e9cd 5300 	strd	r5, r3, [sp]
 8015d7c:	4603      	mov	r3, r0
 8015d7e:	4648      	mov	r0, r9
 8015d80:	f7ff ff7a 	bl	8015c78 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8015d84:	6823      	ldr	r3, [r4, #0]
 8015d86:	9a03      	ldr	r2, [sp, #12]
 8015d88:	4546      	cmp	r6, r8
 8015d8a:	441a      	add	r2, r3
 8015d8c:	fb92 f3f5 	sdiv	r3, r2, r5
 8015d90:	4418      	add	r0, r3
 8015d92:	fb05 2313 	mls	r3, r5, r3, r2
 8015d96:	bf18      	it	ne
 8015d98:	4240      	negne	r0, r0
 8015d9a:	1c72      	adds	r2, r6, #1
 8015d9c:	6023      	str	r3, [r4, #0]
 8015d9e:	d105      	bne.n	8015dac <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8015da0:	2b00      	cmp	r3, #0
 8015da2:	f1c3 0200 	rsb	r2, r3, #0
 8015da6:	db0b      	blt.n	8015dc0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8015da8:	6022      	str	r2, [r4, #0]
 8015daa:	e006      	b.n	8015dba <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8015dac:	2e01      	cmp	r6, #1
 8015dae:	d104      	bne.n	8015dba <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8015db0:	2b00      	cmp	r3, #0
 8015db2:	da02      	bge.n	8015dba <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8015db4:	442b      	add	r3, r5
 8015db6:	3801      	subs	r0, #1
 8015db8:	6023      	str	r3, [r4, #0]
 8015dba:	b005      	add	sp, #20
 8015dbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015dc0:	3801      	subs	r0, #1
 8015dc2:	1b52      	subs	r2, r2, r5
 8015dc4:	e7f0      	b.n	8015da8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

08015dc8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8015dc8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8015dcc:	4c1c      	ldr	r4, [pc, #112]	; (8015e40 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8015dce:	4605      	mov	r5, r0
 8015dd0:	6807      	ldr	r7, [r0, #0]
 8015dd2:	69a3      	ldr	r3, [r4, #24]
 8015dd4:	b92b      	cbnz	r3, 8015de2 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8015dd6:	6840      	ldr	r0, [r0, #4]
 8015dd8:	e9c5 7000 	strd	r7, r0, [r5]
 8015ddc:	b004      	add	sp, #16
 8015dde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015de2:	f04f 0802 	mov.w	r8, #2
 8015de6:	68a2      	ldr	r2, [r4, #8]
 8015de8:	ae04      	add	r6, sp, #16
 8015dea:	6820      	ldr	r0, [r4, #0]
 8015dec:	fb93 f1f8 	sdiv	r1, r3, r8
 8015df0:	440a      	add	r2, r1
 8015df2:	69e1      	ldr	r1, [r4, #28]
 8015df4:	f846 2d04 	str.w	r2, [r6, #-4]!
 8015df8:	463a      	mov	r2, r7
 8015dfa:	9600      	str	r6, [sp, #0]
 8015dfc:	f7ff ff97 	bl	8015d2e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8015e00:	69a3      	ldr	r3, [r4, #24]
 8015e02:	4607      	mov	r7, r0
 8015e04:	686a      	ldr	r2, [r5, #4]
 8015e06:	6a21      	ldr	r1, [r4, #32]
 8015e08:	9600      	str	r6, [sp, #0]
 8015e0a:	6860      	ldr	r0, [r4, #4]
 8015e0c:	f7ff ff8f 	bl	8015d2e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8015e10:	69a3      	ldr	r3, [r4, #24]
 8015e12:	6962      	ldr	r2, [r4, #20]
 8015e14:	4407      	add	r7, r0
 8015e16:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8015e18:	9600      	str	r6, [sp, #0]
 8015e1a:	68e0      	ldr	r0, [r4, #12]
 8015e1c:	fb93 f8f8 	sdiv	r8, r3, r8
 8015e20:	4442      	add	r2, r8
 8015e22:	9203      	str	r2, [sp, #12]
 8015e24:	682a      	ldr	r2, [r5, #0]
 8015e26:	f7ff ff82 	bl	8015d2e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8015e2a:	4680      	mov	r8, r0
 8015e2c:	9600      	str	r6, [sp, #0]
 8015e2e:	69a3      	ldr	r3, [r4, #24]
 8015e30:	686a      	ldr	r2, [r5, #4]
 8015e32:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8015e34:	6920      	ldr	r0, [r4, #16]
 8015e36:	f7ff ff7a 	bl	8015d2e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8015e3a:	4440      	add	r0, r8
 8015e3c:	e7cc      	b.n	8015dd8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8015e3e:	bf00      	nop
 8015e40:	20027bd8 	.word	0x20027bd8

08015e44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8015e44:	4b07      	ldr	r3, [pc, #28]	; (8015e64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 8015e46:	781b      	ldrb	r3, [r3, #0]
 8015e48:	2b01      	cmp	r3, #1
 8015e4a:	d109      	bne.n	8015e60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8015e4c:	f9b1 3000 	ldrsh.w	r3, [r1]
 8015e50:	f9b0 2000 	ldrsh.w	r2, [r0]
 8015e54:	8003      	strh	r3, [r0, #0]
 8015e56:	4b04      	ldr	r3, [pc, #16]	; (8015e68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8015e58:	881b      	ldrh	r3, [r3, #0]
 8015e5a:	3b01      	subs	r3, #1
 8015e5c:	1a9b      	subs	r3, r3, r2
 8015e5e:	800b      	strh	r3, [r1, #0]
 8015e60:	4770      	bx	lr
 8015e62:	bf00      	nop
 8015e64:	20027bbc 	.word	0x20027bbc
 8015e68:	20027bb8 	.word	0x20027bb8

08015e6c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8015e6c:	4b07      	ldr	r3, [pc, #28]	; (8015e8c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8015e6e:	b510      	push	{r4, lr}
 8015e70:	781b      	ldrb	r3, [r3, #0]
 8015e72:	2b01      	cmp	r3, #1
 8015e74:	d108      	bne.n	8015e88 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8015e76:	4b06      	ldr	r3, [pc, #24]	; (8015e90 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8015e78:	880c      	ldrh	r4, [r1, #0]
 8015e7a:	881b      	ldrh	r3, [r3, #0]
 8015e7c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8015e80:	3b01      	subs	r3, #1
 8015e82:	1b1b      	subs	r3, r3, r4
 8015e84:	8003      	strh	r3, [r0, #0]
 8015e86:	800a      	strh	r2, [r1, #0]
 8015e88:	bd10      	pop	{r4, pc}
 8015e8a:	bf00      	nop
 8015e8c:	20027bbc 	.word	0x20027bbc
 8015e90:	20027bb8 	.word	0x20027bb8

08015e94 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8015e94:	4b0a      	ldr	r3, [pc, #40]	; (8015ec0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8015e96:	b510      	push	{r4, lr}
 8015e98:	781b      	ldrb	r3, [r3, #0]
 8015e9a:	2b01      	cmp	r3, #1
 8015e9c:	d10e      	bne.n	8015ebc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8015e9e:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8015ea2:	8843      	ldrh	r3, [r0, #2]
 8015ea4:	f9b0 4000 	ldrsh.w	r4, [r0]
 8015ea8:	18ca      	adds	r2, r1, r3
 8015eaa:	4b06      	ldr	r3, [pc, #24]	; (8015ec4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8015eac:	8044      	strh	r4, [r0, #2]
 8015eae:	881b      	ldrh	r3, [r3, #0]
 8015eb0:	1a9b      	subs	r3, r3, r2
 8015eb2:	8003      	strh	r3, [r0, #0]
 8015eb4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8015eb8:	8081      	strh	r1, [r0, #4]
 8015eba:	80c3      	strh	r3, [r0, #6]
 8015ebc:	bd10      	pop	{r4, pc}
 8015ebe:	bf00      	nop
 8015ec0:	20027bbc 	.word	0x20027bbc
 8015ec4:	20027bb8 	.word	0x20027bb8

08015ec8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8015ec8:	4b08      	ldr	r3, [pc, #32]	; (8015eec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 8015eca:	781b      	ldrb	r3, [r3, #0]
 8015ecc:	2b01      	cmp	r3, #1
 8015ece:	d10c      	bne.n	8015eea <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8015ed0:	8803      	ldrh	r3, [r0, #0]
 8015ed2:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8015ed6:	8842      	ldrh	r2, [r0, #2]
 8015ed8:	8002      	strh	r2, [r0, #0]
 8015eda:	185a      	adds	r2, r3, r1
 8015edc:	4b04      	ldr	r3, [pc, #16]	; (8015ef0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8015ede:	881b      	ldrh	r3, [r3, #0]
 8015ee0:	1a9b      	subs	r3, r3, r2
 8015ee2:	8043      	strh	r3, [r0, #2]
 8015ee4:	88c3      	ldrh	r3, [r0, #6]
 8015ee6:	80c1      	strh	r1, [r0, #6]
 8015ee8:	8083      	strh	r3, [r0, #4]
 8015eea:	4770      	bx	lr
 8015eec:	20027bbc 	.word	0x20027bbc
 8015ef0:	20027bb8 	.word	0x20027bb8

08015ef4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8015ef4:	4b07      	ldr	r3, [pc, #28]	; (8015f14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8015ef6:	b510      	push	{r4, lr}
 8015ef8:	781b      	ldrb	r3, [r3, #0]
 8015efa:	2b01      	cmp	r3, #1
 8015efc:	d108      	bne.n	8015f10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8015efe:	f9b1 3000 	ldrsh.w	r3, [r1]
 8015f02:	f9b0 4000 	ldrsh.w	r4, [r0]
 8015f06:	8003      	strh	r3, [r0, #0]
 8015f08:	8893      	ldrh	r3, [r2, #4]
 8015f0a:	3b01      	subs	r3, #1
 8015f0c:	1b1b      	subs	r3, r3, r4
 8015f0e:	800b      	strh	r3, [r1, #0]
 8015f10:	bd10      	pop	{r4, pc}
 8015f12:	bf00      	nop
 8015f14:	20027bbc 	.word	0x20027bbc

08015f18 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8015f18:	4b0a      	ldr	r3, [pc, #40]	; (8015f44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8015f1a:	460a      	mov	r2, r1
 8015f1c:	b510      	push	{r4, lr}
 8015f1e:	781b      	ldrb	r3, [r3, #0]
 8015f20:	2b01      	cmp	r3, #1
 8015f22:	d10d      	bne.n	8015f40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8015f24:	8881      	ldrh	r1, [r0, #4]
 8015f26:	8803      	ldrh	r3, [r0, #0]
 8015f28:	440b      	add	r3, r1
 8015f2a:	4601      	mov	r1, r0
 8015f2c:	3b01      	subs	r3, #1
 8015f2e:	f821 3b02 	strh.w	r3, [r1], #2
 8015f32:	f7ff ffdf 	bl	8015ef4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8015f36:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8015f3a:	88c2      	ldrh	r2, [r0, #6]
 8015f3c:	80c3      	strh	r3, [r0, #6]
 8015f3e:	8082      	strh	r2, [r0, #4]
 8015f40:	bd10      	pop	{r4, pc}
 8015f42:	bf00      	nop
 8015f44:	20027bbc 	.word	0x20027bbc

08015f48 <_ZN8touchgfx11Application13requestRedrawEv>:
 8015f48:	4b06      	ldr	r3, [pc, #24]	; (8015f64 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8015f4a:	2100      	movs	r1, #0
 8015f4c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015f50:	4b05      	ldr	r3, [pc, #20]	; (8015f68 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8015f52:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
 8015f56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015f5a:	f8a0 2134 	strh.w	r2, [r0, #308]	; 0x134
 8015f5e:	f8a0 3136 	strh.w	r3, [r0, #310]	; 0x136
 8015f62:	4770      	bx	lr
 8015f64:	20027bb8 	.word	0x20027bb8
 8015f68:	20027bba 	.word	0x20027bba

08015f6c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8015f6c:	4b03      	ldr	r3, [pc, #12]	; (8015f7c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8015f6e:	6818      	ldr	r0, [r3, #0]
 8015f70:	b110      	cbz	r0, 8015f78 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8015f72:	6803      	ldr	r3, [r0, #0]
 8015f74:	699b      	ldr	r3, [r3, #24]
 8015f76:	4718      	bx	r3
 8015f78:	4770      	bx	lr
 8015f7a:	bf00      	nop
 8015f7c:	20027c08 	.word	0x20027c08

08015f80 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8015f80:	4770      	bx	lr
	...

08015f84 <_ZN8touchgfx11Application4drawEv>:
 8015f84:	4b09      	ldr	r3, [pc, #36]	; (8015fac <_ZN8touchgfx11Application4drawEv+0x28>)
 8015f86:	b507      	push	{r0, r1, r2, lr}
 8015f88:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015f8c:	2100      	movs	r1, #0
 8015f8e:	4b08      	ldr	r3, [pc, #32]	; (8015fb0 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8015f90:	9100      	str	r1, [sp, #0]
 8015f92:	4669      	mov	r1, sp
 8015f94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015f98:	f8ad 2004 	strh.w	r2, [sp, #4]
 8015f9c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8015fa0:	6803      	ldr	r3, [r0, #0]
 8015fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015fa4:	4798      	blx	r3
 8015fa6:	b003      	add	sp, #12
 8015fa8:	f85d fb04 	ldr.w	pc, [sp], #4
 8015fac:	20027bb8 	.word	0x20027bb8
 8015fb0:	20027bba 	.word	0x20027bba

08015fb4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8015fb4:	4b03      	ldr	r3, [pc, #12]	; (8015fc4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8015fb6:	6818      	ldr	r0, [r3, #0]
 8015fb8:	b110      	cbz	r0, 8015fc0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8015fba:	6803      	ldr	r3, [r0, #0]
 8015fbc:	69db      	ldr	r3, [r3, #28]
 8015fbe:	4718      	bx	r3
 8015fc0:	4770      	bx	lr
 8015fc2:	bf00      	nop
 8015fc4:	20027c08 	.word	0x20027c08

08015fc8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8015fc8:	4b03      	ldr	r3, [pc, #12]	; (8015fd8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8015fca:	6818      	ldr	r0, [r3, #0]
 8015fcc:	b110      	cbz	r0, 8015fd4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8015fce:	6803      	ldr	r3, [r0, #0]
 8015fd0:	6a1b      	ldr	r3, [r3, #32]
 8015fd2:	4718      	bx	r3
 8015fd4:	4770      	bx	lr
 8015fd6:	bf00      	nop
 8015fd8:	20027c08 	.word	0x20027c08

08015fdc <_ZN8touchgfx11Application16clearCachedAreasEv>:
 8015fdc:	2300      	movs	r3, #0
 8015fde:	f8a0 30ec 	strh.w	r3, [r0, #236]	; 0xec
 8015fe2:	4770      	bx	lr

08015fe4 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8015fe4:	4b03      	ldr	r3, [pc, #12]	; (8015ff4 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8015fe6:	6818      	ldr	r0, [r3, #0]
 8015fe8:	b110      	cbz	r0, 8015ff0 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8015fea:	6803      	ldr	r3, [r0, #0]
 8015fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015fee:	4718      	bx	r3
 8015ff0:	4770      	bx	lr
 8015ff2:	bf00      	nop
 8015ff4:	20027c08 	.word	0x20027c08

08015ff8 <_ZN8touchgfx11ApplicationD1Ev>:
 8015ff8:	4770      	bx	lr

08015ffa <_ZN8touchgfx11ApplicationD0Ev>:
 8015ffa:	b510      	push	{r4, lr}
 8015ffc:	4604      	mov	r4, r0
 8015ffe:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8016002:	f00f fdd6 	bl	8025bb2 <_ZdlPvj>
 8016006:	4620      	mov	r0, r4
 8016008:	bd10      	pop	{r4, pc}

0801600a <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801600a:	b510      	push	{r4, lr}
 801600c:	f9b1 4000 	ldrsh.w	r4, [r1]
 8016010:	888a      	ldrh	r2, [r1, #4]
 8016012:	f9b0 3000 	ldrsh.w	r3, [r0]
 8016016:	4422      	add	r2, r4
 8016018:	b212      	sxth	r2, r2
 801601a:	4293      	cmp	r3, r2
 801601c:	da15      	bge.n	801604a <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801601e:	8882      	ldrh	r2, [r0, #4]
 8016020:	4413      	add	r3, r2
 8016022:	b21b      	sxth	r3, r3
 8016024:	429c      	cmp	r4, r3
 8016026:	da10      	bge.n	801604a <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8016028:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801602c:	88c9      	ldrh	r1, [r1, #6]
 801602e:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8016032:	4419      	add	r1, r3
 8016034:	b209      	sxth	r1, r1
 8016036:	428a      	cmp	r2, r1
 8016038:	da07      	bge.n	801604a <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801603a:	88c0      	ldrh	r0, [r0, #6]
 801603c:	4410      	add	r0, r2
 801603e:	b200      	sxth	r0, r0
 8016040:	4283      	cmp	r3, r0
 8016042:	bfac      	ite	ge
 8016044:	2000      	movge	r0, #0
 8016046:	2001      	movlt	r0, #1
 8016048:	bd10      	pop	{r4, pc}
 801604a:	2000      	movs	r0, #0
 801604c:	e7fc      	b.n	8016048 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801604e <_ZN8touchgfx4Rect10restrictToEss>:
 801604e:	f9b0 3000 	ldrsh.w	r3, [r0]
 8016052:	2b00      	cmp	r3, #0
 8016054:	b510      	push	{r4, lr}
 8016056:	da04      	bge.n	8016062 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 8016058:	8884      	ldrh	r4, [r0, #4]
 801605a:	4423      	add	r3, r4
 801605c:	8083      	strh	r3, [r0, #4]
 801605e:	2300      	movs	r3, #0
 8016060:	8003      	strh	r3, [r0, #0]
 8016062:	f9b0 4000 	ldrsh.w	r4, [r0]
 8016066:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801606a:	1b09      	subs	r1, r1, r4
 801606c:	428b      	cmp	r3, r1
 801606e:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8016072:	bfc8      	it	gt
 8016074:	8081      	strhgt	r1, [r0, #4]
 8016076:	2b00      	cmp	r3, #0
 8016078:	da04      	bge.n	8016084 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 801607a:	88c1      	ldrh	r1, [r0, #6]
 801607c:	440b      	add	r3, r1
 801607e:	80c3      	strh	r3, [r0, #6]
 8016080:	2300      	movs	r3, #0
 8016082:	8043      	strh	r3, [r0, #2]
 8016084:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8016088:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801608c:	1a52      	subs	r2, r2, r1
 801608e:	4293      	cmp	r3, r2
 8016090:	bfc8      	it	gt
 8016092:	80c2      	strhgt	r2, [r0, #6]
 8016094:	bd10      	pop	{r4, pc}
	...

08016098 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8016098:	4b10      	ldr	r3, [pc, #64]	; (80160dc <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 801609a:	b510      	push	{r4, lr}
 801609c:	460c      	mov	r4, r1
 801609e:	f9b3 2000 	ldrsh.w	r2, [r3]
 80160a2:	4b0f      	ldr	r3, [pc, #60]	; (80160e0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 80160a4:	4620      	mov	r0, r4
 80160a6:	f9b3 1000 	ldrsh.w	r1, [r3]
 80160aa:	f7ff ffd0 	bl	801604e <_ZN8touchgfx4Rect10restrictToEss>
 80160ae:	4b0d      	ldr	r3, [pc, #52]	; (80160e4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 80160b0:	6818      	ldr	r0, [r3, #0]
 80160b2:	b190      	cbz	r0, 80160da <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 80160b4:	6803      	ldr	r3, [r0, #0]
 80160b6:	4621      	mov	r1, r4
 80160b8:	689b      	ldr	r3, [r3, #8]
 80160ba:	4798      	blx	r3
 80160bc:	4b0a      	ldr	r3, [pc, #40]	; (80160e8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 80160be:	6818      	ldr	r0, [r3, #0]
 80160c0:	b118      	cbz	r0, 80160ca <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 80160c2:	6803      	ldr	r3, [r0, #0]
 80160c4:	4621      	mov	r1, r4
 80160c6:	689b      	ldr	r3, [r3, #8]
 80160c8:	4798      	blx	r3
 80160ca:	4b08      	ldr	r3, [pc, #32]	; (80160ec <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 80160cc:	4621      	mov	r1, r4
 80160ce:	6818      	ldr	r0, [r3, #0]
 80160d0:	6803      	ldr	r3, [r0, #0]
 80160d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80160d6:	69db      	ldr	r3, [r3, #28]
 80160d8:	4718      	bx	r3
 80160da:	bd10      	pop	{r4, pc}
 80160dc:	20027bba 	.word	0x20027bba
 80160e0:	20027bb8 	.word	0x20027bb8
 80160e4:	20027c08 	.word	0x20027c08
 80160e8:	20027c04 	.word	0x20027c04
 80160ec:	20027bc4 	.word	0x20027bc4

080160f0 <_ZNK8touchgfx4Rect8includesERKS0_>:
 80160f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80160f2:	4606      	mov	r6, r0
 80160f4:	4608      	mov	r0, r1
 80160f6:	460f      	mov	r7, r1
 80160f8:	f7fa f90f 	bl	801031a <_ZNK8touchgfx4Rect7isEmptyEv>
 80160fc:	b9e8      	cbnz	r0, 801613a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80160fe:	f9b7 5000 	ldrsh.w	r5, [r7]
 8016102:	f9b6 4000 	ldrsh.w	r4, [r6]
 8016106:	42a5      	cmp	r5, r4
 8016108:	db17      	blt.n	801613a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801610a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801610e:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8016112:	429a      	cmp	r2, r3
 8016114:	db11      	blt.n	801613a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8016116:	88b9      	ldrh	r1, [r7, #4]
 8016118:	440d      	add	r5, r1
 801611a:	88b1      	ldrh	r1, [r6, #4]
 801611c:	440c      	add	r4, r1
 801611e:	b22d      	sxth	r5, r5
 8016120:	b224      	sxth	r4, r4
 8016122:	42a5      	cmp	r5, r4
 8016124:	dc09      	bgt.n	801613a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8016126:	88f8      	ldrh	r0, [r7, #6]
 8016128:	4410      	add	r0, r2
 801612a:	88f2      	ldrh	r2, [r6, #6]
 801612c:	4413      	add	r3, r2
 801612e:	b200      	sxth	r0, r0
 8016130:	b21b      	sxth	r3, r3
 8016132:	4298      	cmp	r0, r3
 8016134:	bfcc      	ite	gt
 8016136:	2000      	movgt	r0, #0
 8016138:	2001      	movle	r0, #1
 801613a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801613c <_ZN8touchgfx11Application11getInstanceEv>:
 801613c:	4b01      	ldr	r3, [pc, #4]	; (8016144 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801613e:	6818      	ldr	r0, [r3, #0]
 8016140:	4770      	bx	lr
 8016142:	bf00      	nop
 8016144:	20027c18 	.word	0x20027c18

08016148 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>:
 8016148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801614a:	4b10      	ldr	r3, [pc, #64]	; (801618c <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x44>)
 801614c:	4605      	mov	r5, r0
 801614e:	781b      	ldrb	r3, [r3, #0]
 8016150:	b1d3      	cbz	r3, 8016188 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x40>
 8016152:	4b0f      	ldr	r3, [pc, #60]	; (8016190 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x48>)
 8016154:	f100 06ee 	add.w	r6, r0, #238	; 0xee
 8016158:	4f0e      	ldr	r7, [pc, #56]	; (8016194 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x4c>)
 801615a:	881c      	ldrh	r4, [r3, #0]
 801615c:	f8b5 312e 	ldrh.w	r3, [r5, #302]	; 0x12e
 8016160:	42a3      	cmp	r3, r4
 8016162:	d90e      	bls.n	8016182 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x3a>
 8016164:	683b      	ldr	r3, [r7, #0]
 8016166:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801616a:	b10a      	cbz	r2, 8016170 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x28>
 801616c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801616e:	b900      	cbnz	r0, 8016172 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x2a>
 8016170:	6898      	ldr	r0, [r3, #8]
 8016172:	6803      	ldr	r3, [r0, #0]
 8016174:	eb06 01c4 	add.w	r1, r6, r4, lsl #3
 8016178:	3401      	adds	r4, #1
 801617a:	69db      	ldr	r3, [r3, #28]
 801617c:	4798      	blx	r3
 801617e:	b2a4      	uxth	r4, r4
 8016180:	e7ec      	b.n	801615c <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x14>
 8016182:	2300      	movs	r3, #0
 8016184:	f8a5 312e 	strh.w	r3, [r5, #302]	; 0x12e
 8016188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801618a:	bf00      	nop
 801618c:	20027bc2 	.word	0x20027bc2
 8016190:	20000070 	.word	0x20000070
 8016194:	20027bc4 	.word	0x20027bc4

08016198 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 8016198:	2300      	movs	r3, #0
 801619a:	b510      	push	{r4, lr}
 801619c:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
 80161a0:	4604      	mov	r4, r0
 80161a2:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 80161a6:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 80161aa:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 80161ae:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
 80161b2:	429a      	cmp	r2, r3
 80161b4:	d90e      	bls.n	80161d4 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 80161b6:	18e2      	adds	r2, r4, r3
 80161b8:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
 80161bc:	b122      	cbz	r2, 80161c8 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 80161be:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 80161c2:	6803      	ldr	r3, [r0, #0]
 80161c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80161c6:	4798      	blx	r3
 80161c8:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 80161cc:	3301      	adds	r3, #1
 80161ce:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 80161d2:	e7ea      	b.n	80161aa <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 80161d4:	bd10      	pop	{r4, pc}

080161d6 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>:
 80161d6:	b530      	push	{r4, r5, lr}
 80161d8:	2200      	movs	r2, #0
 80161da:	f8b0 5080 	ldrh.w	r5, [r0, #128]	; 0x80
 80161de:	b293      	uxth	r3, r2
 80161e0:	429d      	cmp	r5, r3
 80161e2:	d90e      	bls.n	8016202 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 80161e4:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 80161e8:	428b      	cmp	r3, r1
 80161ea:	d10b      	bne.n	8016204 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 80161ec:	1884      	adds	r4, r0, r2
 80161ee:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
 80161f2:	b13b      	cbz	r3, 8016204 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 80161f4:	3b01      	subs	r3, #1
 80161f6:	b2db      	uxtb	r3, r3
 80161f8:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
 80161fc:	b90b      	cbnz	r3, 8016202 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 80161fe:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8016202:	bd30      	pop	{r4, r5, pc}
 8016204:	3201      	adds	r2, #1
 8016206:	e7ea      	b.n	80161de <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x8>

08016208 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 8016208:	2300      	movs	r3, #0
 801620a:	f100 0284 	add.w	r2, r0, #132	; 0x84
 801620e:	30a4      	adds	r0, #164	; 0xa4
 8016210:	f820 3c24 	strh.w	r3, [r0, #-36]
 8016214:	f802 3b01 	strb.w	r3, [r2], #1
 8016218:	4282      	cmp	r2, r0
 801621a:	d1fb      	bne.n	8016214 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 801621c:	4770      	bx	lr
	...

08016220 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8016220:	b570      	push	{r4, r5, r6, lr}
 8016222:	4c0b      	ldr	r4, [pc, #44]	; (8016250 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8016224:	4605      	mov	r5, r0
 8016226:	460e      	mov	r6, r1
 8016228:	6820      	ldr	r0, [r4, #0]
 801622a:	b110      	cbz	r0, 8016232 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 801622c:	6803      	ldr	r3, [r0, #0]
 801622e:	695b      	ldr	r3, [r3, #20]
 8016230:	4798      	blx	r3
 8016232:	1d28      	adds	r0, r5, #4
 8016234:	f7ff ffe8 	bl	8016208 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8016238:	6026      	str	r6, [r4, #0]
 801623a:	6833      	ldr	r3, [r6, #0]
 801623c:	4630      	mov	r0, r6
 801623e:	68db      	ldr	r3, [r3, #12]
 8016240:	4798      	blx	r3
 8016242:	682b      	ldr	r3, [r5, #0]
 8016244:	4628      	mov	r0, r5
 8016246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016248:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801624c:	4718      	bx	r3
 801624e:	bf00      	nop
 8016250:	20027c08 	.word	0x20027c08

08016254 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 8016254:	2300      	movs	r3, #0
 8016256:	f8b0 c080 	ldrh.w	ip, [r0, #128]	; 0x80
 801625a:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
 801625e:	461a      	mov	r2, r3
 8016260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016262:	461c      	mov	r4, r3
 8016264:	461d      	mov	r5, r3
 8016266:	459c      	cmp	ip, r3
 8016268:	dd1a      	ble.n	80162a0 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 801626a:	18c6      	adds	r6, r0, r3
 801626c:	f896 6084 	ldrb.w	r6, [r6, #132]	; 0x84
 8016270:	b16e      	cbz	r6, 801628e <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 8016272:	429a      	cmp	r2, r3
 8016274:	d008      	beq.n	8016288 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 8016276:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 801627a:	fa1f fe82 	uxth.w	lr, r2
 801627e:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 8016282:	1887      	adds	r7, r0, r2
 8016284:	f887 6084 	strb.w	r6, [r7, #132]	; 0x84
 8016288:	3201      	adds	r2, #1
 801628a:	3301      	adds	r3, #1
 801628c:	e7eb      	b.n	8016266 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 801628e:	4299      	cmp	r1, r3
 8016290:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	; 0xa6
 8016294:	bfa8      	it	ge
 8016296:	3501      	addge	r5, #1
 8016298:	429e      	cmp	r6, r3
 801629a:	bfc8      	it	gt
 801629c:	3401      	addgt	r4, #1
 801629e:	e7f4      	b.n	801628a <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 80162a0:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 80162a4:	1b49      	subs	r1, r1, r5
 80162a6:	1b1b      	subs	r3, r3, r4
 80162a8:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
 80162ac:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 80162b0:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 80162b4:	4293      	cmp	r3, r2
 80162b6:	dd03      	ble.n	80162c0 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 80162b8:	3b01      	subs	r3, #1
 80162ba:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
 80162be:	e7f7      	b.n	80162b0 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 80162c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080162c4 <_ZN8touchgfx11Application15handleTickEventEv>:
 80162c4:	b570      	push	{r4, r5, r6, lr}
 80162c6:	4d16      	ldr	r5, [pc, #88]	; (8016320 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 80162c8:	4604      	mov	r4, r0
 80162ca:	6828      	ldr	r0, [r5, #0]
 80162cc:	b140      	cbz	r0, 80162e0 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 80162ce:	7a03      	ldrb	r3, [r0, #8]
 80162d0:	b933      	cbnz	r3, 80162e0 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 80162d2:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 80162d6:	6803      	ldr	r3, [r0, #0]
 80162d8:	689b      	ldr	r3, [r3, #8]
 80162da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80162de:	4718      	bx	r3
 80162e0:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 80162e4:	4e0f      	ldr	r6, [pc, #60]	; (8016324 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 80162e6:	b973      	cbnz	r3, 8016306 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80162e8:	b168      	cbz	r0, 8016306 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80162ea:	7a03      	ldrb	r3, [r0, #8]
 80162ec:	b15b      	cbz	r3, 8016306 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80162ee:	6830      	ldr	r0, [r6, #0]
 80162f0:	b110      	cbz	r0, 80162f8 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 80162f2:	6803      	ldr	r3, [r0, #0]
 80162f4:	691b      	ldr	r3, [r3, #16]
 80162f6:	4798      	blx	r3
 80162f8:	6828      	ldr	r0, [r5, #0]
 80162fa:	6803      	ldr	r3, [r0, #0]
 80162fc:	68db      	ldr	r3, [r3, #12]
 80162fe:	4798      	blx	r3
 8016300:	2301      	movs	r3, #1
 8016302:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 8016306:	3404      	adds	r4, #4
 8016308:	4620      	mov	r0, r4
 801630a:	f7ff ff45 	bl	8016198 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 801630e:	4620      	mov	r0, r4
 8016310:	f7ff ffa0 	bl	8016254 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 8016314:	6830      	ldr	r0, [r6, #0]
 8016316:	b110      	cbz	r0, 801631e <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 8016318:	6803      	ldr	r3, [r0, #0]
 801631a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801631c:	e7dd      	b.n	80162da <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801631e:	bd70      	pop	{r4, r5, r6, pc}
 8016320:	20027c0c 	.word	0x20027c0c
 8016324:	20027c08 	.word	0x20027c08

08016328 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>:
 8016328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801632a:	2300      	movs	r3, #0
 801632c:	4604      	mov	r4, r0
 801632e:	460d      	mov	r5, r1
 8016330:	f8b0 1080 	ldrh.w	r1, [r0, #128]	; 0x80
 8016334:	4618      	mov	r0, r3
 8016336:	b29a      	uxth	r2, r3
 8016338:	4291      	cmp	r1, r2
 801633a:	d912      	bls.n	8016362 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x3a>
 801633c:	f854 7023 	ldr.w	r7, [r4, r3, lsl #2]
 8016340:	18e6      	adds	r6, r4, r3
 8016342:	42af      	cmp	r7, r5
 8016344:	f896 2084 	ldrb.w	r2, [r6, #132]	; 0x84
 8016348:	d105      	bne.n	8016356 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2e>
 801634a:	2aff      	cmp	r2, #255	; 0xff
 801634c:	d002      	beq.n	8016354 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 801634e:	3201      	adds	r2, #1
 8016350:	f886 2084 	strb.w	r2, [r6, #132]	; 0x84
 8016354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016356:	2a00      	cmp	r2, #0
 8016358:	f103 0301 	add.w	r3, r3, #1
 801635c:	bf08      	it	eq
 801635e:	2001      	moveq	r0, #1
 8016360:	e7e9      	b.n	8016336 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0xe>
 8016362:	b120      	cbz	r0, 801636e <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x46>
 8016364:	2920      	cmp	r1, #32
 8016366:	d102      	bne.n	801636e <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x46>
 8016368:	4620      	mov	r0, r4
 801636a:	f7ff ff73 	bl	8016254 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 801636e:	f8b4 3080 	ldrh.w	r3, [r4, #128]	; 0x80
 8016372:	2b1f      	cmp	r3, #31
 8016374:	d8ee      	bhi.n	8016354 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 8016376:	18e2      	adds	r2, r4, r3
 8016378:	2101      	movs	r1, #1
 801637a:	f882 1084 	strb.w	r1, [r2, #132]	; 0x84
 801637e:	185a      	adds	r2, r3, r1
 8016380:	f8a4 2080 	strh.w	r2, [r4, #128]	; 0x80
 8016384:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8016388:	e7e4      	b.n	8016354 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>

0801638a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801638a:	4603      	mov	r3, r0
 801638c:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8016390:	2200      	movs	r2, #0
 8016392:	801a      	strh	r2, [r3, #0]
 8016394:	3308      	adds	r3, #8
 8016396:	f823 2c06 	strh.w	r2, [r3, #-6]
 801639a:	f823 2c04 	strh.w	r2, [r3, #-4]
 801639e:	f823 2c02 	strh.w	r2, [r3, #-2]
 80163a2:	428b      	cmp	r3, r1
 80163a4:	d1f5      	bne.n	8016392 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 80163a6:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 80163aa:	4770      	bx	lr

080163ac <_ZN8touchgfx11ApplicationC1Ev>:
 80163ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80163ae:	4b1d      	ldr	r3, [pc, #116]	; (8016424 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 80163b0:	4606      	mov	r6, r0
 80163b2:	4604      	mov	r4, r0
 80163b4:	2500      	movs	r5, #0
 80163b6:	f846 3b04 	str.w	r3, [r6], #4
 80163ba:	22a8      	movs	r2, #168	; 0xa8
 80163bc:	2100      	movs	r1, #0
 80163be:	4630      	mov	r0, r6
 80163c0:	f00f fdac 	bl	8025f1c <memset>
 80163c4:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
 80163c8:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 80163cc:	4f16      	ldr	r7, [pc, #88]	; (8016428 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 80163ce:	f7ff ffdc 	bl	801638a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80163d2:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 80163d6:	f7ff ffd8 	bl	801638a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80163da:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 80163de:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 80163e2:	f8a4 5134 	strh.w	r5, [r4, #308]	; 0x134
 80163e6:	f8a4 5136 	strh.w	r5, [r4, #310]	; 0x136
 80163ea:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
 80163ee:	490f      	ldr	r1, [pc, #60]	; (801642c <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 80163f0:	480f      	ldr	r0, [pc, #60]	; (8016430 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 80163f2:	f00e fee9 	bl	80251c8 <CRC_Lock>
 80163f6:	4b0f      	ldr	r3, [pc, #60]	; (8016434 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 80163f8:	b158      	cbz	r0, 8016412 <_ZN8touchgfx11ApplicationC1Ev+0x66>
 80163fa:	801d      	strh	r5, [r3, #0]
 80163fc:	2300      	movs	r3, #0
 80163fe:	4a0e      	ldr	r2, [pc, #56]	; (8016438 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 8016400:	4630      	mov	r0, r6
 8016402:	6013      	str	r3, [r2, #0]
 8016404:	4a0d      	ldr	r2, [pc, #52]	; (801643c <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 8016406:	603b      	str	r3, [r7, #0]
 8016408:	6013      	str	r3, [r2, #0]
 801640a:	f7ff fefd 	bl	8016208 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801640e:	4620      	mov	r0, r4
 8016410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016412:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8016416:	2002      	movs	r0, #2
 8016418:	801a      	strh	r2, [r3, #0]
 801641a:	6038      	str	r0, [r7, #0]
 801641c:	f001 faee 	bl	80179fc <_ZN8touchgfx6Screen4drawEv>
 8016420:	e7ec      	b.n	80163fc <_ZN8touchgfx11ApplicationC1Ev+0x50>
 8016422:	bf00      	nop
 8016424:	0802b24c 	.word	0x0802b24c
 8016428:	20027c08 	.word	0x20027c08
 801642c:	b5e8b5cd 	.word	0xb5e8b5cd
 8016430:	f407a5c2 	.word	0xf407a5c2
 8016434:	20000070 	.word	0x20000070
 8016438:	20027c18 	.word	0x20027c18
 801643c:	20027c0c 	.word	0x20027c0c

08016440 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8016440:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8016444:	3b01      	subs	r3, #1
 8016446:	b29b      	uxth	r3, r3
 8016448:	428b      	cmp	r3, r1
 801644a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 801644e:	b510      	push	{r4, lr}
 8016450:	d908      	bls.n	8016464 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 8016452:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8016456:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801645a:	681a      	ldr	r2, [r3, #0]
 801645c:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8016460:	685a      	ldr	r2, [r3, #4]
 8016462:	6062      	str	r2, [r4, #4]
 8016464:	bd10      	pop	{r4, pc}
	...

08016468 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8016468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801646c:	b08f      	sub	sp, #60	; 0x3c
 801646e:	4b8f      	ldr	r3, [pc, #572]	; (80166ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 8016470:	4683      	mov	fp, r0
 8016472:	ac0a      	add	r4, sp, #40	; 0x28
 8016474:	e884 0006 	stmia.w	r4, {r1, r2}
 8016478:	f9b3 2000 	ldrsh.w	r2, [r3]
 801647c:	4620      	mov	r0, r4
 801647e:	4b8c      	ldr	r3, [pc, #560]	; (80166b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 8016480:	f9b3 1000 	ldrsh.w	r1, [r3]
 8016484:	f7ff fde3 	bl	801604e <_ZN8touchgfx4Rect10restrictToEss>
 8016488:	4620      	mov	r0, r4
 801648a:	f7f9 ff46 	bl	801031a <_ZNK8touchgfx4Rect7isEmptyEv>
 801648e:	2800      	cmp	r0, #0
 8016490:	d16a      	bne.n	8016568 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8016492:	9403      	str	r4, [sp, #12]
 8016494:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 8016498:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 801649c:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 80164a0:	9301      	str	r3, [sp, #4]
 80164a2:	35a4      	adds	r5, #164	; 0xa4
 80164a4:	b15c      	cbz	r4, 80164be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 80164a6:	4629      	mov	r1, r5
 80164a8:	9803      	ldr	r0, [sp, #12]
 80164aa:	f7ff fe21 	bl	80160f0 <_ZNK8touchgfx4Rect8includesERKS0_>
 80164ae:	3c01      	subs	r4, #1
 80164b0:	b118      	cbz	r0, 80164ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 80164b2:	b2a1      	uxth	r1, r4
 80164b4:	9801      	ldr	r0, [sp, #4]
 80164b6:	f7ff ffc3 	bl	8016440 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80164ba:	3d08      	subs	r5, #8
 80164bc:	e7f2      	b.n	80164a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 80164be:	f8bb 80ec 	ldrh.w	r8, [fp, #236]	; 0xec
 80164c2:	f108 33ff 	add.w	r3, r8, #4294967295
 80164c6:	f8cd 8010 	str.w	r8, [sp, #16]
 80164ca:	9302      	str	r3, [sp, #8]
 80164cc:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80164d0:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 80164d4:	9306      	str	r3, [sp, #24]
 80164d6:	445c      	add	r4, fp
 80164d8:	2500      	movs	r5, #0
 80164da:	4626      	mov	r6, r4
 80164dc:	f8cd 8014 	str.w	r8, [sp, #20]
 80164e0:	462f      	mov	r7, r5
 80164e2:	9b05      	ldr	r3, [sp, #20]
 80164e4:	2b00      	cmp	r3, #0
 80164e6:	d073      	beq.n	80165d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 80164e8:	9903      	ldr	r1, [sp, #12]
 80164ea:	4630      	mov	r0, r6
 80164ec:	f7ff fd8d 	bl	801600a <_ZNK8touchgfx4Rect9intersectERKS0_>
 80164f0:	b350      	cbz	r0, 8016548 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 80164f2:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 80164f6:	f9b6 c000 	ldrsh.w	ip, [r6]
 80164fa:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 80164fe:	45e6      	cmp	lr, ip
 8016500:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8016504:	db33      	blt.n	801656e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8016506:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801650a:	88b3      	ldrh	r3, [r6, #4]
 801650c:	4472      	add	r2, lr
 801650e:	4463      	add	r3, ip
 8016510:	b212      	sxth	r2, r2
 8016512:	b21b      	sxth	r3, r3
 8016514:	429a      	cmp	r2, r3
 8016516:	dc2a      	bgt.n	801656e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8016518:	fa1f f289 	uxth.w	r2, r9
 801651c:	88f3      	ldrh	r3, [r6, #6]
 801651e:	45ca      	cmp	sl, r9
 8016520:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8016524:	4413      	add	r3, r2
 8016526:	fa1f fc8a 	uxth.w	ip, sl
 801652a:	b29b      	uxth	r3, r3
 801652c:	fa0f fe83 	sxth.w	lr, r3
 8016530:	db0f      	blt.n	8016552 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8016532:	eba3 030c 	sub.w	r3, r3, ip
 8016536:	1ac9      	subs	r1, r1, r3
 8016538:	b209      	sxth	r1, r1
 801653a:	2900      	cmp	r1, #0
 801653c:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8016540:	dd12      	ble.n	8016568 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8016542:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 8016546:	4605      	mov	r5, r0
 8016548:	9b05      	ldr	r3, [sp, #20]
 801654a:	3e08      	subs	r6, #8
 801654c:	3b01      	subs	r3, #1
 801654e:	9305      	str	r3, [sp, #20]
 8016550:	e7c7      	b.n	80164e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 8016552:	4461      	add	r1, ip
 8016554:	b209      	sxth	r1, r1
 8016556:	4571      	cmp	r1, lr
 8016558:	dc38      	bgt.n	80165cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801655a:	eba2 020c 	sub.w	r2, r2, ip
 801655e:	b212      	sxth	r2, r2
 8016560:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 8016564:	2a00      	cmp	r2, #0
 8016566:	dcee      	bgt.n	8016546 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8016568:	b00f      	add	sp, #60	; 0x3c
 801656a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801656e:	45ca      	cmp	sl, r9
 8016570:	db2c      	blt.n	80165cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8016572:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 8016576:	449a      	add	sl, r3
 8016578:	88f3      	ldrh	r3, [r6, #6]
 801657a:	4499      	add	r9, r3
 801657c:	fa0f fa8a 	sxth.w	sl, sl
 8016580:	fa0f f989 	sxth.w	r9, r9
 8016584:	45ca      	cmp	sl, r9
 8016586:	dc21      	bgt.n	80165cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8016588:	fa1f f28c 	uxth.w	r2, ip
 801658c:	88b3      	ldrh	r3, [r6, #4]
 801658e:	45e6      	cmp	lr, ip
 8016590:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8016594:	4413      	add	r3, r2
 8016596:	fa1f f98e 	uxth.w	r9, lr
 801659a:	b29b      	uxth	r3, r3
 801659c:	fa0f fa83 	sxth.w	sl, r3
 80165a0:	db0a      	blt.n	80165b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 80165a2:	eba3 0309 	sub.w	r3, r3, r9
 80165a6:	1ac9      	subs	r1, r1, r3
 80165a8:	b209      	sxth	r1, r1
 80165aa:	2900      	cmp	r1, #0
 80165ac:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 80165b0:	ddda      	ble.n	8016568 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80165b2:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 80165b6:	e7c6      	b.n	8016546 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 80165b8:	4449      	add	r1, r9
 80165ba:	b209      	sxth	r1, r1
 80165bc:	4551      	cmp	r1, sl
 80165be:	dc05      	bgt.n	80165cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 80165c0:	eba2 0209 	sub.w	r2, r2, r9
 80165c4:	b212      	sxth	r2, r2
 80165c6:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 80165ca:	e7cb      	b.n	8016564 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 80165cc:	4607      	mov	r7, r0
 80165ce:	e7bb      	b.n	8016548 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 80165d0:	2d00      	cmp	r5, #0
 80165d2:	d181      	bne.n	80164d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 80165d4:	2f00      	cmp	r7, #0
 80165d6:	f000 81dd 	beq.w	8016994 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 80165da:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 80165de:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 80165e2:	b2b3      	uxth	r3, r6
 80165e4:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 80165e8:	b2b9      	uxth	r1, r7
 80165ea:	f8bd a02e 	ldrh.w	sl, [sp, #46]	; 0x2e
 80165ee:	441a      	add	r2, r3
 80165f0:	448a      	add	sl, r1
 80165f2:	9105      	str	r1, [sp, #20]
 80165f4:	b292      	uxth	r2, r2
 80165f6:	fa1f fa8a 	uxth.w	sl, sl
 80165fa:	fa0f f882 	sxth.w	r8, r2
 80165fe:	fa0f f98a 	sxth.w	r9, sl
 8016602:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8016606:	9b04      	ldr	r3, [sp, #16]
 8016608:	2b00      	cmp	r3, #0
 801660a:	d053      	beq.n	80166b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 801660c:	9903      	ldr	r1, [sp, #12]
 801660e:	4620      	mov	r0, r4
 8016610:	f7ff fcfb 	bl	801600a <_ZNK8touchgfx4Rect9intersectERKS0_>
 8016614:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8016618:	b1c0      	cbz	r0, 801664c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801661a:	f9b4 e000 	ldrsh.w	lr, [r4]
 801661e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8016622:	4576      	cmp	r6, lr
 8016624:	dc23      	bgt.n	801666e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8016626:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801662a:	44f4      	add	ip, lr
 801662c:	fa0f fc8c 	sxth.w	ip, ip
 8016630:	45e0      	cmp	r8, ip
 8016632:	db1c      	blt.n	801666e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8016634:	428f      	cmp	r7, r1
 8016636:	fa1f fc81 	uxth.w	ip, r1
 801663a:	88e1      	ldrh	r1, [r4, #6]
 801663c:	dc0d      	bgt.n	801665a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 801663e:	ebaa 0c0c 	sub.w	ip, sl, ip
 8016642:	f8a4 9002 	strh.w	r9, [r4, #2]
 8016646:	eba1 010c 	sub.w	r1, r1, ip
 801664a:	80e1      	strh	r1, [r4, #6]
 801664c:	4628      	mov	r0, r5
 801664e:	9904      	ldr	r1, [sp, #16]
 8016650:	3c08      	subs	r4, #8
 8016652:	4605      	mov	r5, r0
 8016654:	3901      	subs	r1, #1
 8016656:	9104      	str	r1, [sp, #16]
 8016658:	e7d3      	b.n	8016602 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19a>
 801665a:	4461      	add	r1, ip
 801665c:	b209      	sxth	r1, r1
 801665e:	4549      	cmp	r1, r9
 8016660:	dcf5      	bgt.n	801664e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8016662:	9905      	ldr	r1, [sp, #20]
 8016664:	eba1 0c0c 	sub.w	ip, r1, ip
 8016668:	f8a4 c006 	strh.w	ip, [r4, #6]
 801666c:	e7ee      	b.n	801664c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801666e:	428f      	cmp	r7, r1
 8016670:	dced      	bgt.n	801664e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8016672:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 8016676:	4461      	add	r1, ip
 8016678:	b209      	sxth	r1, r1
 801667a:	4589      	cmp	r9, r1
 801667c:	dbe7      	blt.n	801664e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801667e:	4576      	cmp	r6, lr
 8016680:	fa1f fc8e 	uxth.w	ip, lr
 8016684:	88a1      	ldrh	r1, [r4, #4]
 8016686:	dc07      	bgt.n	8016698 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 8016688:	eba2 0c0c 	sub.w	ip, r2, ip
 801668c:	f8a4 8000 	strh.w	r8, [r4]
 8016690:	eba1 010c 	sub.w	r1, r1, ip
 8016694:	80a1      	strh	r1, [r4, #4]
 8016696:	e7d9      	b.n	801664c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8016698:	4461      	add	r1, ip
 801669a:	b209      	sxth	r1, r1
 801669c:	4588      	cmp	r8, r1
 801669e:	dbd6      	blt.n	801664e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 80166a0:	eba3 0c0c 	sub.w	ip, r3, ip
 80166a4:	f8a4 c004 	strh.w	ip, [r4, #4]
 80166a8:	e7d0      	b.n	801664c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 80166aa:	bf00      	nop
 80166ac:	20027bba 	.word	0x20027bba
 80166b0:	20027bb8 	.word	0x20027bb8
 80166b4:	2d00      	cmp	r5, #0
 80166b6:	f000 816d 	beq.w	8016994 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 80166ba:	9b06      	ldr	r3, [sp, #24]
 80166bc:	445b      	add	r3, fp
 80166be:	461c      	mov	r4, r3
 80166c0:	9b02      	ldr	r3, [sp, #8]
 80166c2:	3301      	adds	r3, #1
 80166c4:	f000 8166 	beq.w	8016994 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 80166c8:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
 80166cc:	9803      	ldr	r0, [sp, #12]
 80166ce:	4629      	mov	r1, r5
 80166d0:	f7ff fd0e 	bl	80160f0 <_ZNK8touchgfx4Rect8includesERKS0_>
 80166d4:	b120      	cbz	r0, 80166e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 80166d6:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80166da:	9801      	ldr	r0, [sp, #4]
 80166dc:	f7ff feb0 	bl	8016440 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80166e0:	9903      	ldr	r1, [sp, #12]
 80166e2:	4628      	mov	r0, r5
 80166e4:	f7ff fc91 	bl	801600a <_ZNK8touchgfx4Rect9intersectERKS0_>
 80166e8:	2800      	cmp	r0, #0
 80166ea:	f000 809c 	beq.w	8016826 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 80166ee:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	; 0xa4
 80166f2:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 80166f6:	fa1f f189 	uxth.w	r1, r9
 80166fa:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 80166fe:	9309      	str	r3, [sp, #36]	; 0x24
 8016700:	eb01 0c03 	add.w	ip, r1, r3
 8016704:	b283      	uxth	r3, r0
 8016706:	4548      	cmp	r0, r9
 8016708:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 801670c:	fa1f fa8c 	uxth.w	sl, ip
 8016710:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 8016714:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
 8016718:	eb03 050c 	add.w	r5, r3, ip
 801671c:	b2ad      	uxth	r5, r5
 801671e:	9505      	str	r5, [sp, #20]
 8016720:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8016724:	9504      	str	r5, [sp, #16]
 8016726:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	; 0xec
 801672a:	f340 8099 	ble.w	8016860 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 801672e:	1a5b      	subs	r3, r3, r1
 8016730:	4596      	cmp	lr, r2
 8016732:	fa0f f08a 	sxth.w	r0, sl
 8016736:	b29b      	uxth	r3, r3
 8016738:	b21e      	sxth	r6, r3
 801673a:	dd2e      	ble.n	801679a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 801673c:	9f02      	ldr	r7, [sp, #8]
 801673e:	fa1f fe8e 	uxth.w	lr, lr
 8016742:	b292      	uxth	r2, r2
 8016744:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 8016748:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 801674c:	9f04      	ldr	r7, [sp, #16]
 801674e:	ebae 0102 	sub.w	r1, lr, r2
 8016752:	44a6      	add	lr, r4
 8016754:	1a3f      	subs	r7, r7, r0
 8016756:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	; 0xb2
 801675a:	b289      	uxth	r1, r1
 801675c:	4402      	add	r2, r0
 801675e:	fa0f fe8e 	sxth.w	lr, lr
 8016762:	b20d      	sxth	r5, r1
 8016764:	b212      	sxth	r2, r2
 8016766:	436f      	muls	r7, r5
 8016768:	ebae 0202 	sub.w	r2, lr, r2
 801676c:	4372      	muls	r2, r6
 801676e:	4297      	cmp	r7, r2
 8016770:	db09      	blt.n	8016786 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 8016772:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	; 0xac
 8016776:	f8a8 50b2 	strh.w	r5, [r8, #178]	; 0xb2
 801677a:	449c      	add	ip, r3
 801677c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8016780:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8016784:	e686      	b.n	8016494 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8016786:	4421      	add	r1, r4
 8016788:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
 801678c:	f8a8 60b0 	strh.w	r6, [r8, #176]	; 0xb0
 8016790:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8016794:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8016798:	e67c      	b.n	8016494 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801679a:	9f04      	ldr	r7, [sp, #16]
 801679c:	42b8      	cmp	r0, r7
 801679e:	da27      	bge.n	80167f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 80167a0:	9902      	ldr	r1, [sp, #8]
 80167a2:	1a3f      	subs	r7, r7, r0
 80167a4:	f8bd 502e 	ldrh.w	r5, [sp, #46]	; 0x2e
 80167a8:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 80167ac:	eb05 010e 	add.w	r1, r5, lr
 80167b0:	fa1f f881 	uxth.w	r8, r1
 80167b4:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	; 0xb2
 80167b8:	4411      	add	r1, r2
 80167ba:	fa0f f988 	sxth.w	r9, r8
 80167be:	eba2 020e 	sub.w	r2, r2, lr
 80167c2:	eba1 0108 	sub.w	r1, r1, r8
 80167c6:	4372      	muls	r2, r6
 80167c8:	b289      	uxth	r1, r1
 80167ca:	fa0f f881 	sxth.w	r8, r1
 80167ce:	fb08 f707 	mul.w	r7, r8, r7
 80167d2:	42ba      	cmp	r2, r7
 80167d4:	dc06      	bgt.n	80167e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 80167d6:	f8a4 90ae 	strh.w	r9, [r4, #174]	; 0xae
 80167da:	f8a4 80b2 	strh.w	r8, [r4, #178]	; 0xb2
 80167de:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
 80167e2:	e7ca      	b.n	801677a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 80167e4:	4429      	add	r1, r5
 80167e6:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 80167ea:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 80167ee:	e651      	b.n	8016494 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80167f0:	9805      	ldr	r0, [sp, #20]
 80167f2:	2d06      	cmp	r5, #6
 80167f4:	ebaa 0000 	sub.w	r0, sl, r0
 80167f8:	b280      	uxth	r0, r0
 80167fa:	fa0f fe80 	sxth.w	lr, r0
 80167fe:	d817      	bhi.n	8016830 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 8016800:	9b04      	ldr	r3, [sp, #16]
 8016802:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
 8016806:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 801680a:	1c6b      	adds	r3, r5, #1
 801680c:	f8a4 e0a8 	strh.w	lr, [r4, #168]	; 0xa8
 8016810:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 8016814:	9b01      	ldr	r3, [sp, #4]
 8016816:	9801      	ldr	r0, [sp, #4]
 8016818:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801681c:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8016820:	805a      	strh	r2, [r3, #2]
 8016822:	809e      	strh	r6, [r3, #4]
 8016824:	80d9      	strh	r1, [r3, #6]
 8016826:	9b02      	ldr	r3, [sp, #8]
 8016828:	3c08      	subs	r4, #8
 801682a:	3b01      	subs	r3, #1
 801682c:	9302      	str	r3, [sp, #8]
 801682e:	e747      	b.n	80166c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 8016830:	9a02      	ldr	r2, [sp, #8]
 8016832:	45b6      	cmp	lr, r6
 8016834:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8016838:	db0d      	blt.n	8016856 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 801683a:	449c      	add	ip, r3
 801683c:	445a      	add	r2, fp
 801683e:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 8016842:	fa1f fc8c 	uxth.w	ip, ip
 8016846:	f8a2 e0b0 	strh.w	lr, [r2, #176]	; 0xb0
 801684a:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801684e:	448c      	add	ip, r1
 8016850:	f8a2 c0ac 	strh.w	ip, [r2, #172]	; 0xac
 8016854:	e61e      	b.n	8016494 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8016856:	445a      	add	r2, fp
 8016858:	4484      	add	ip, r0
 801685a:	f8a2 60b0 	strh.w	r6, [r2, #176]	; 0xb0
 801685e:	e78f      	b.n	8016780 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8016860:	fa1f f18e 	uxth.w	r1, lr
 8016864:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 8016868:	b293      	uxth	r3, r2
 801686a:	4596      	cmp	lr, r2
 801686c:	eb01 0806 	add.w	r8, r1, r6
 8016870:	9306      	str	r3, [sp, #24]
 8016872:	fa1f f888 	uxth.w	r8, r8
 8016876:	9f06      	ldr	r7, [sp, #24]
 8016878:	fa0f f388 	sxth.w	r3, r8
 801687c:	9307      	str	r3, [sp, #28]
 801687e:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 8016882:	443b      	add	r3, r7
 8016884:	b29b      	uxth	r3, r3
 8016886:	9308      	str	r3, [sp, #32]
 8016888:	da24      	bge.n	80168d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 801688a:	9905      	ldr	r1, [sp, #20]
 801688c:	eba3 0308 	sub.w	r3, r3, r8
 8016890:	eba2 020e 	sub.w	r2, r2, lr
 8016894:	eba9 0000 	sub.w	r0, r9, r0
 8016898:	ebaa 0401 	sub.w	r4, sl, r1
 801689c:	b29b      	uxth	r3, r3
 801689e:	b2a4      	uxth	r4, r4
 80168a0:	b219      	sxth	r1, r3
 80168a2:	b225      	sxth	r5, r4
 80168a4:	4348      	muls	r0, r1
 80168a6:	436a      	muls	r2, r5
 80168a8:	4282      	cmp	r2, r0
 80168aa:	9a02      	ldr	r2, [sp, #8]
 80168ac:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80168b0:	445a      	add	r2, fp
 80168b2:	dc06      	bgt.n	80168c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 80168b4:	9b07      	ldr	r3, [sp, #28]
 80168b6:	44a4      	add	ip, r4
 80168b8:	f8a2 10b2 	strh.w	r1, [r2, #178]	; 0xb2
 80168bc:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
 80168c0:	e75e      	b.n	8016780 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 80168c2:	9904      	ldr	r1, [sp, #16]
 80168c4:	f8a2 50b0 	strh.w	r5, [r2, #176]	; 0xb0
 80168c8:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
 80168cc:	4433      	add	r3, r6
 80168ce:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 80168d2:	e5df      	b.n	8016494 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80168d4:	9f06      	ldr	r7, [sp, #24]
 80168d6:	9b04      	ldr	r3, [sp, #16]
 80168d8:	1bc9      	subs	r1, r1, r7
 80168da:	fa0f f78a 	sxth.w	r7, sl
 80168de:	b289      	uxth	r1, r1
 80168e0:	429f      	cmp	r7, r3
 80168e2:	fa0f fe81 	sxth.w	lr, r1
 80168e6:	dd23      	ble.n	8016930 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 80168e8:	9a05      	ldr	r2, [sp, #20]
 80168ea:	eba9 0000 	sub.w	r0, r9, r0
 80168ee:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80168f2:	ebaa 0202 	sub.w	r2, sl, r2
 80168f6:	9d07      	ldr	r5, [sp, #28]
 80168f8:	fb0e f000 	mul.w	r0, lr, r0
 80168fc:	b292      	uxth	r2, r2
 80168fe:	eba5 0a03 	sub.w	sl, r5, r3
 8016902:	9b02      	ldr	r3, [sp, #8]
 8016904:	b214      	sxth	r4, r2
 8016906:	00db      	lsls	r3, r3, #3
 8016908:	fb04 fa0a 	mul.w	sl, r4, sl
 801690c:	445b      	add	r3, fp
 801690e:	4550      	cmp	r0, sl
 8016910:	db03      	blt.n	801691a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 8016912:	f8a3 e0b2 	strh.w	lr, [r3, #178]	; 0xb2
 8016916:	4494      	add	ip, r2
 8016918:	e732      	b.n	8016780 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801691a:	9a04      	ldr	r2, [sp, #16]
 801691c:	4431      	add	r1, r6
 801691e:	f8a3 40b0 	strh.w	r4, [r3, #176]	; 0xb0
 8016922:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 8016926:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 801692a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801692e:	e75c      	b.n	80167ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 8016930:	9b08      	ldr	r3, [sp, #32]
 8016932:	2d06      	cmp	r5, #6
 8016934:	eba3 0308 	sub.w	r3, r3, r8
 8016938:	b29b      	uxth	r3, r3
 801693a:	b218      	sxth	r0, r3
 801693c:	d813      	bhi.n	8016966 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 801693e:	9b07      	ldr	r3, [sp, #28]
 8016940:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
 8016944:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
 8016948:	1c6b      	adds	r3, r5, #1
 801694a:	9901      	ldr	r1, [sp, #4]
 801694c:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 8016950:	9b01      	ldr	r3, [sp, #4]
 8016952:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 8016956:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801695a:	805a      	strh	r2, [r3, #2]
 801695c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801695e:	f8a3 e006 	strh.w	lr, [r3, #6]
 8016962:	809a      	strh	r2, [r3, #4]
 8016964:	e75f      	b.n	8016826 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8016966:	9c02      	ldr	r4, [sp, #8]
 8016968:	4570      	cmp	r0, lr
 801696a:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801696e:	db0d      	blt.n	801698c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 8016970:	4431      	add	r1, r6
 8016972:	9b06      	ldr	r3, [sp, #24]
 8016974:	445c      	add	r4, fp
 8016976:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801697a:	b289      	uxth	r1, r1
 801697c:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
 8016980:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8016984:	4419      	add	r1, r3
 8016986:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
 801698a:	e583      	b.n	8016494 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801698c:	445c      	add	r4, fp
 801698e:	f8a4 e0b2 	strh.w	lr, [r4, #178]	; 0xb2
 8016992:	e79b      	b.n	80168cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 8016994:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	; 0xec
 8016998:	2e07      	cmp	r6, #7
 801699a:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 801699e:	d812      	bhi.n	80169c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x55e>
 80169a0:	1c75      	adds	r5, r6, #1
 80169a2:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 80169a6:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 80169aa:	f8ab 50ec 	strh.w	r5, [fp, #236]	; 0xec
 80169ae:	9d01      	ldr	r5, [sp, #4]
 80169b0:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 80169b4:	442c      	add	r4, r5
 80169b6:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 80169ba:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 80169be:	8061      	strh	r1, [r4, #2]
 80169c0:	80a2      	strh	r2, [r4, #4]
 80169c2:	80e3      	strh	r3, [r4, #6]
 80169c4:	e5d0      	b.n	8016568 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80169c6:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 80169ca:	3e01      	subs	r6, #1
 80169cc:	445c      	add	r4, fp
 80169ce:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 80169d2:	f04f 37ff 	mov.w	r7, #4294967295
 80169d6:	2500      	movs	r5, #0
 80169d8:	9305      	str	r3, [sp, #20]
 80169da:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 80169de:	1e72      	subs	r2, r6, #1
 80169e0:	9302      	str	r3, [sp, #8]
 80169e2:	4691      	mov	r9, r2
 80169e4:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 80169e8:	9304      	str	r3, [sp, #16]
 80169ea:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
 80169ee:	f1b9 3fff 	cmp.w	r9, #4294967295
 80169f2:	6818      	ldr	r0, [r3, #0]
 80169f4:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80169f8:	9207      	str	r2, [sp, #28]
 80169fa:	bf16      	itet	ne
 80169fc:	9905      	ldrne	r1, [sp, #20]
 80169fe:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 8016a02:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 8016a06:	9306      	str	r3, [sp, #24]
 8016a08:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8016a0c:	f8be 8004 	ldrh.w	r8, [lr, #4]
 8016a10:	fb18 f801 	smulbb	r8, r8, r1
 8016a14:	6859      	ldr	r1, [r3, #4]
 8016a16:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8016a1a:	4671      	mov	r1, lr
 8016a1c:	a80c      	add	r0, sp, #48	; 0x30
 8016a1e:	f7fb fea6 	bl	801276e <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8016a22:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 8016a26:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8016a2a:	f04f 0c08 	mov.w	ip, #8
 8016a2e:	9b04      	ldr	r3, [sp, #16]
 8016a30:	9a02      	ldr	r2, [sp, #8]
 8016a32:	fb10 f001 	smulbb	r0, r0, r1
 8016a36:	fb02 8803 	mla	r8, r2, r3, r8
 8016a3a:	eba0 0108 	sub.w	r1, r0, r8
 8016a3e:	fb90 f0fc 	sdiv	r0, r0, ip
 8016a42:	4288      	cmp	r0, r1
 8016a44:	dc20      	bgt.n	8016a88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
 8016a46:	4551      	cmp	r1, sl
 8016a48:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8016a4c:	da03      	bge.n	8016a56 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ee>
 8016a4e:	b1d9      	cbz	r1, 8016a88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
 8016a50:	468a      	mov	sl, r1
 8016a52:	464f      	mov	r7, r9
 8016a54:	4635      	mov	r5, r6
 8016a56:	f109 39ff 	add.w	r9, r9, #4294967295
 8016a5a:	f119 0f02 	cmn.w	r9, #2
 8016a5e:	d1c6      	bne.n	80169ee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x586>
 8016a60:	4616      	mov	r6, r2
 8016a62:	3201      	adds	r2, #1
 8016a64:	f1a4 0408 	sub.w	r4, r4, #8
 8016a68:	d1b7      	bne.n	80169da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x572>
 8016a6a:	9b01      	ldr	r3, [sp, #4]
 8016a6c:	b2ac      	uxth	r4, r5
 8016a6e:	00ed      	lsls	r5, r5, #3
 8016a70:	1958      	adds	r0, r3, r5
 8016a72:	1c7b      	adds	r3, r7, #1
 8016a74:	d10b      	bne.n	8016a8e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x626>
 8016a76:	4601      	mov	r1, r0
 8016a78:	9803      	ldr	r0, [sp, #12]
 8016a7a:	f7fb fe78 	bl	801276e <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8016a7e:	4621      	mov	r1, r4
 8016a80:	9801      	ldr	r0, [sp, #4]
 8016a82:	f7ff fcdd 	bl	8016440 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8016a86:	e505      	b.n	8016494 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8016a88:	464f      	mov	r7, r9
 8016a8a:	4635      	mov	r5, r6
 8016a8c:	e7ed      	b.n	8016a6a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x602>
 8016a8e:	9b01      	ldr	r3, [sp, #4]
 8016a90:	00ff      	lsls	r7, r7, #3
 8016a92:	445d      	add	r5, fp
 8016a94:	19d9      	adds	r1, r3, r7
 8016a96:	445f      	add	r7, fp
 8016a98:	f7fb fe69 	bl	801276e <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8016a9c:	9b03      	ldr	r3, [sp, #12]
 8016a9e:	cb03      	ldmia	r3!, {r0, r1}
 8016aa0:	9b03      	ldr	r3, [sp, #12]
 8016aa2:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
 8016aa6:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8016aaa:	f855 0fac 	ldr.w	r0, [r5, #172]!
 8016aae:	6869      	ldr	r1, [r5, #4]
 8016ab0:	c303      	stmia	r3!, {r0, r1}
 8016ab2:	e7e4      	b.n	8016a7e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x616>

08016ab4 <_ZN8touchgfx11Application10invalidateEv>:
 8016ab4:	4b09      	ldr	r3, [pc, #36]	; (8016adc <_ZN8touchgfx11Application10invalidateEv+0x28>)
 8016ab6:	b082      	sub	sp, #8
 8016ab8:	2100      	movs	r1, #0
 8016aba:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016abe:	4b08      	ldr	r3, [pc, #32]	; (8016ae0 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 8016ac0:	9100      	str	r1, [sp, #0]
 8016ac2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ac6:	f8ad 2004 	strh.w	r2, [sp, #4]
 8016aca:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016ace:	ab02      	add	r3, sp, #8
 8016ad0:	e913 0006 	ldmdb	r3, {r1, r2}
 8016ad4:	b002      	add	sp, #8
 8016ad6:	f7ff bcc7 	b.w	8016468 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8016ada:	bf00      	nop
 8016adc:	20027bb8 	.word	0x20027bb8
 8016ae0:	20027bba 	.word	0x20027bba

08016ae4 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 8016ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ae8:	f500 7698 	add.w	r6, r0, #304	; 0x130
 8016aec:	b09b      	sub	sp, #108	; 0x6c
 8016aee:	4604      	mov	r4, r0
 8016af0:	4630      	mov	r0, r6
 8016af2:	f7f9 fc12 	bl	801031a <_ZNK8touchgfx4Rect7isEmptyEv>
 8016af6:	4605      	mov	r5, r0
 8016af8:	b940      	cbnz	r0, 8016b0c <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 8016afa:	4620      	mov	r0, r4
 8016afc:	e896 0006 	ldmia.w	r6, {r1, r2}
 8016b00:	f7ff fcb2 	bl	8016468 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8016b04:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 8016b08:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 8016b0c:	4bc8      	ldr	r3, [pc, #800]	; (8016e30 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 8016b0e:	681b      	ldr	r3, [r3, #0]
 8016b10:	2b00      	cmp	r3, #0
 8016b12:	d03e      	beq.n	8016b92 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 8016b14:	4dc7      	ldr	r5, [pc, #796]	; (8016e34 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 8016b16:	4628      	mov	r0, r5
 8016b18:	f7f9 fbff 	bl	801031a <_ZNK8touchgfx4Rect7isEmptyEv>
 8016b1c:	4606      	mov	r6, r0
 8016b1e:	2800      	cmp	r0, #0
 8016b20:	d137      	bne.n	8016b92 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 8016b22:	4628      	mov	r0, r5
 8016b24:	f7ff f9b6 	bl	8015e94 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8016b28:	6829      	ldr	r1, [r5, #0]
 8016b2a:	686a      	ldr	r2, [r5, #4]
 8016b2c:	4620      	mov	r0, r4
 8016b2e:	f7ff fc9b 	bl	8016468 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8016b32:	802e      	strh	r6, [r5, #0]
 8016b34:	806e      	strh	r6, [r5, #2]
 8016b36:	80ae      	strh	r6, [r5, #4]
 8016b38:	80ee      	strh	r6, [r5, #6]
 8016b3a:	ae09      	add	r6, sp, #36	; 0x24
 8016b3c:	4630      	mov	r0, r6
 8016b3e:	f7ff fc24 	bl	801638a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8016b42:	4abd      	ldr	r2, [pc, #756]	; (8016e38 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 8016b44:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 8016b48:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8016b4c:	8815      	ldrh	r5, [r2, #0]
 8016b4e:	9202      	str	r2, [sp, #8]
 8016b50:	462b      	mov	r3, r5
 8016b52:	429f      	cmp	r7, r3
 8016b54:	d924      	bls.n	8016ba0 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 8016b56:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 8016b5a:	2907      	cmp	r1, #7
 8016b5c:	d816      	bhi.n	8016b8c <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 8016b5e:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8016b62:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 8016b66:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 8016b6a:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 8016b6e:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 8016b72:	1c4a      	adds	r2, r1, #1
 8016b74:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 8016b78:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 8016b7c:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 8016b80:	f8a2 9002 	strh.w	r9, [r2, #2]
 8016b84:	f8a2 e004 	strh.w	lr, [r2, #4]
 8016b88:	f8a2 c006 	strh.w	ip, [r2, #6]
 8016b8c:	3301      	adds	r3, #1
 8016b8e:	b29b      	uxth	r3, r3
 8016b90:	e7df      	b.n	8016b52 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 8016b92:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8016b96:	2b00      	cmp	r3, #0
 8016b98:	d1cf      	bne.n	8016b3a <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 8016b9a:	b01b      	add	sp, #108	; 0x6c
 8016b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ba0:	462f      	mov	r7, r5
 8016ba2:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
 8016ba6:	42bb      	cmp	r3, r7
 8016ba8:	d90b      	bls.n	8016bc2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 8016baa:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 8016bae:	3701      	adds	r7, #1
 8016bb0:	4620      	mov	r0, r4
 8016bb2:	f8d3 10ee 	ldr.w	r1, [r3, #238]	; 0xee
 8016bb6:	b2bf      	uxth	r7, r7
 8016bb8:	f8d3 20f2 	ldr.w	r2, [r3, #242]	; 0xf2
 8016bbc:	f7ff fc54 	bl	8016468 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8016bc0:	e7ef      	b.n	8016ba2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 8016bc2:	4a9e      	ldr	r2, [pc, #632]	; (8016e3c <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 8016bc4:	6813      	ldr	r3, [r2, #0]
 8016bc6:	4690      	mov	r8, r2
 8016bc8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8016bcc:	2b01      	cmp	r3, #1
 8016bce:	f040 80e4 	bne.w	8016d9a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 8016bd2:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8016bd6:	4629      	mov	r1, r5
 8016bd8:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 8016bdc:	2500      	movs	r5, #0
 8016bde:	33ae      	adds	r3, #174	; 0xae
 8016be0:	428f      	cmp	r7, r1
 8016be2:	f103 0308 	add.w	r3, r3, #8
 8016be6:	dd0a      	ble.n	8016bfe <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 8016be8:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 8016bec:	3101      	adds	r1, #1
 8016bee:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 8016bf2:	4402      	add	r2, r0
 8016bf4:	b212      	sxth	r2, r2
 8016bf6:	4295      	cmp	r5, r2
 8016bf8:	bfb8      	it	lt
 8016bfa:	4615      	movlt	r5, r2
 8016bfc:	e7f0      	b.n	8016be0 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 8016bfe:	4b90      	ldr	r3, [pc, #576]	; (8016e40 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 8016c00:	f8df b238 	ldr.w	fp, [pc, #568]	; 8016e3c <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>
 8016c04:	881b      	ldrh	r3, [r3, #0]
 8016c06:	46d8      	mov	r8, fp
 8016c08:	2b0f      	cmp	r3, #15
 8016c0a:	bf8c      	ite	hi
 8016c0c:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 8016c10:	f04f 0a01 	movls.w	sl, #1
 8016c14:	2300      	movs	r3, #0
 8016c16:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8016c1a:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 8016c1e:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8016c22:	4438      	add	r0, r7
 8016c24:	b207      	sxth	r7, r0
 8016c26:	f8db 0000 	ldr.w	r0, [fp]
 8016c2a:	42bd      	cmp	r5, r7
 8016c2c:	6803      	ldr	r3, [r0, #0]
 8016c2e:	f340 8084 	ble.w	8016d3a <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 8016c32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8016c36:	4798      	blx	r3
 8016c38:	eb07 030a 	add.w	r3, r7, sl
 8016c3c:	4298      	cmp	r0, r3
 8016c3e:	da07      	bge.n	8016c50 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 8016c40:	4285      	cmp	r5, r0
 8016c42:	dd05      	ble.n	8016c50 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 8016c44:	4287      	cmp	r7, r0
 8016c46:	dd6d      	ble.n	8016d24 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8016c48:	2f00      	cmp	r7, #0
 8016c4a:	dd6b      	ble.n	8016d24 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8016c4c:	4628      	mov	r0, r5
 8016c4e:	e004      	b.n	8016c5a <_ZN8touchgfx11Application15drawCachedAreasEv+0x176>
 8016c50:	4287      	cmp	r7, r0
 8016c52:	dcfb      	bgt.n	8016c4c <_ZN8touchgfx11Application15drawCachedAreasEv+0x168>
 8016c54:	42a8      	cmp	r0, r5
 8016c56:	bfa8      	it	ge
 8016c58:	4628      	movge	r0, r5
 8016c5a:	4b7a      	ldr	r3, [pc, #488]	; (8016e44 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 8016c5c:	1bc0      	subs	r0, r0, r7
 8016c5e:	2200      	movs	r2, #0
 8016c60:	f8ad 7016 	strh.w	r7, [sp, #22]
 8016c64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016c68:	f8ad 2014 	strh.w	r2, [sp, #20]
 8016c6c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8016c70:	9b02      	ldr	r3, [sp, #8]
 8016c72:	f8ad 001a 	strh.w	r0, [sp, #26]
 8016c76:	881f      	ldrh	r7, [r3, #0]
 8016c78:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8016c7c:	42bb      	cmp	r3, r7
 8016c7e:	d9cc      	bls.n	8016c1a <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 8016c80:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 8016c84:	ab07      	add	r3, sp, #28
 8016c86:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8016c8a:	6851      	ldr	r1, [r2, #4]
 8016c8c:	c303      	stmia	r3!, {r0, r1}
 8016c8e:	a905      	add	r1, sp, #20
 8016c90:	a807      	add	r0, sp, #28
 8016c92:	f7ff f9ba 	bl	801600a <_ZNK8touchgfx4Rect9intersectERKS0_>
 8016c96:	2800      	cmp	r0, #0
 8016c98:	d04c      	beq.n	8016d34 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 8016c9a:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8016c9e:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8016ca2:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 8016ca6:	4686      	mov	lr, r0
 8016ca8:	4290      	cmp	r0, r2
 8016caa:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 8016cae:	4448      	add	r0, r9
 8016cb0:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 8016cb4:	bfb8      	it	lt
 8016cb6:	4696      	movlt	lr, r2
 8016cb8:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8016cbc:	444a      	add	r2, r9
 8016cbe:	b280      	uxth	r0, r0
 8016cc0:	4299      	cmp	r1, r3
 8016cc2:	468c      	mov	ip, r1
 8016cc4:	b292      	uxth	r2, r2
 8016cc6:	9303      	str	r3, [sp, #12]
 8016cc8:	bfb8      	it	lt
 8016cca:	469c      	movlt	ip, r3
 8016ccc:	b203      	sxth	r3, r0
 8016cce:	fa0f f982 	sxth.w	r9, r2
 8016cd2:	f8ad e01c 	strh.w	lr, [sp, #28]
 8016cd6:	f8ad c01e 	strh.w	ip, [sp, #30]
 8016cda:	454b      	cmp	r3, r9
 8016cdc:	bfb8      	it	lt
 8016cde:	4602      	movlt	r2, r0
 8016ce0:	9b03      	ldr	r3, [sp, #12]
 8016ce2:	eba2 020e 	sub.w	r2, r2, lr
 8016ce6:	f8ad 2020 	strh.w	r2, [sp, #32]
 8016cea:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8016cee:	4411      	add	r1, r2
 8016cf0:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8016cf4:	4413      	add	r3, r2
 8016cf6:	b289      	uxth	r1, r1
 8016cf8:	b29b      	uxth	r3, r3
 8016cfa:	b208      	sxth	r0, r1
 8016cfc:	b21a      	sxth	r2, r3
 8016cfe:	4290      	cmp	r0, r2
 8016d00:	bfb8      	it	lt
 8016d02:	460b      	movlt	r3, r1
 8016d04:	eba3 030c 	sub.w	r3, r3, ip
 8016d08:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8016d0c:	a807      	add	r0, sp, #28
 8016d0e:	f7f9 fb04 	bl	801031a <_ZNK8touchgfx4Rect7isEmptyEv>
 8016d12:	b920      	cbnz	r0, 8016d1e <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 8016d14:	6823      	ldr	r3, [r4, #0]
 8016d16:	a907      	add	r1, sp, #28
 8016d18:	4620      	mov	r0, r4
 8016d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016d1c:	4798      	blx	r3
 8016d1e:	3701      	adds	r7, #1
 8016d20:	b2bf      	uxth	r7, r7
 8016d22:	e7a9      	b.n	8016c78 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 8016d24:	f8d8 0000 	ldr.w	r0, [r8]
 8016d28:	2101      	movs	r1, #1
 8016d2a:	6803      	ldr	r3, [r0, #0]
 8016d2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8016d30:	4798      	blx	r3
 8016d32:	e772      	b.n	8016c1a <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 8016d34:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8016d38:	e7e8      	b.n	8016d0c <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 8016d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d3c:	4798      	blx	r3
 8016d3e:	4b42      	ldr	r3, [pc, #264]	; (8016e48 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 8016d40:	781b      	ldrb	r3, [r3, #0]
 8016d42:	2b00      	cmp	r3, #0
 8016d44:	f43f af29 	beq.w	8016b9a <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 8016d48:	2300      	movs	r3, #0
 8016d4a:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 8016d4e:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 8016d52:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
 8016d56:	9b02      	ldr	r3, [sp, #8]
 8016d58:	881b      	ldrh	r3, [r3, #0]
 8016d5a:	429d      	cmp	r5, r3
 8016d5c:	f67f af1d 	bls.w	8016b9a <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 8016d60:	f8b4 112e 	ldrh.w	r1, [r4, #302]	; 0x12e
 8016d64:	2907      	cmp	r1, #7
 8016d66:	d815      	bhi.n	8016d94 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 8016d68:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8016d6c:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 8016d70:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 8016d74:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 8016d78:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 8016d7c:	1c4a      	adds	r2, r1, #1
 8016d7e:	f8a4 212e 	strh.w	r2, [r4, #302]	; 0x12e
 8016d82:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 8016d86:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 8016d8a:	f8a2 e002 	strh.w	lr, [r2, #2]
 8016d8e:	f8a2 c004 	strh.w	ip, [r2, #4]
 8016d92:	80d7      	strh	r7, [r2, #6]
 8016d94:	3301      	adds	r3, #1
 8016d96:	b29b      	uxth	r3, r3
 8016d98:	e7df      	b.n	8016d5a <_ZN8touchgfx11Application15drawCachedAreasEv+0x276>
 8016d9a:	2b02      	cmp	r3, #2
 8016d9c:	f040 8135 	bne.w	801700a <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 8016da0:	4b2a      	ldr	r3, [pc, #168]	; (8016e4c <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 8016da2:	f104 09ac 	add.w	r9, r4, #172	; 0xac
 8016da6:	781b      	ldrb	r3, [r3, #0]
 8016da8:	2b01      	cmp	r3, #1
 8016daa:	f000 809c 	beq.w	8016ee6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 8016dae:	9b02      	ldr	r3, [sp, #8]
 8016db0:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	; 0xec
 8016db4:	f8b3 b000 	ldrh.w	fp, [r3]
 8016db8:	f10b 0b01 	add.w	fp, fp, #1
 8016dbc:	fa1f fb8b 	uxth.w	fp, fp
 8016dc0:	2a00      	cmp	r2, #0
 8016dc2:	d0bc      	beq.n	8016d3e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8016dc4:	f8b4 50ae 	ldrh.w	r5, [r4, #174]	; 0xae
 8016dc8:	4659      	mov	r1, fp
 8016dca:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 8016dce:	f04f 0800 	mov.w	r8, #0
 8016dd2:	441d      	add	r5, r3
 8016dd4:	b22d      	sxth	r5, r5
 8016dd6:	b28b      	uxth	r3, r1
 8016dd8:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 8016ddc:	429a      	cmp	r2, r3
 8016dde:	f240 80c0 	bls.w	8016f62 <_ZN8touchgfx11Application15drawCachedAreasEv+0x47e>
 8016de2:	4427      	add	r7, r4
 8016de4:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 8016de8:	4608      	mov	r0, r1
 8016dea:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 8016dee:	f9be c0ae 	ldrsh.w	ip, [lr, #174]	; 0xae
 8016df2:	4563      	cmp	r3, ip
 8016df4:	f340 80a2 	ble.w	8016f3c <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 8016df8:	f8be 50b2 	ldrh.w	r5, [lr, #178]	; 0xb2
 8016dfc:	4465      	add	r5, ip
 8016dfe:	b22d      	sxth	r5, r5
 8016e00:	429d      	cmp	r5, r3
 8016e02:	bfa8      	it	ge
 8016e04:	461d      	movge	r5, r3
 8016e06:	3101      	adds	r1, #1
 8016e08:	4680      	mov	r8, r0
 8016e0a:	e7e4      	b.n	8016dd6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
 8016e0c:	d10b      	bne.n	8016e26 <_ZN8touchgfx11Application15drawCachedAreasEv+0x342>
 8016e0e:	f9b5 c0b2 	ldrsh.w	ip, [r5, #178]	; 0xb2
 8016e12:	f9ba 10b2 	ldrsh.w	r1, [sl, #178]	; 0xb2
 8016e16:	458c      	cmp	ip, r1
 8016e18:	bfb4      	ite	lt
 8016e1a:	469c      	movlt	ip, r3
 8016e1c:	46bc      	movge	ip, r7
 8016e1e:	4572      	cmp	r2, lr
 8016e20:	bfb8      	it	lt
 8016e22:	4672      	movlt	r2, lr
 8016e24:	e087      	b.n	8016f36 <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 8016e26:	428a      	cmp	r2, r1
 8016e28:	46bc      	mov	ip, r7
 8016e2a:	bfb8      	it	lt
 8016e2c:	460a      	movlt	r2, r1
 8016e2e:	e082      	b.n	8016f36 <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 8016e30:	20027c04 	.word	0x20027c04
 8016e34:	20027c10 	.word	0x20027c10
 8016e38:	20000070 	.word	0x20000070
 8016e3c:	20027bc4 	.word	0x20027bc4
 8016e40:	20027bba 	.word	0x20027bba
 8016e44:	20027bb8 	.word	0x20027bb8
 8016e48:	20027bc2 	.word	0x20027bc2
 8016e4c:	20027bbc 	.word	0x20027bbc
 8016e50:	1961      	adds	r1, r4, r5
 8016e52:	ab07      	add	r3, sp, #28
 8016e54:	f851 0fac 	ldr.w	r0, [r1, #172]!
 8016e58:	6849      	ldr	r1, [r1, #4]
 8016e5a:	c303      	stmia	r3!, {r0, r1}
 8016e5c:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8016e60:	a807      	add	r0, sp, #28
 8016e62:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8016e66:	2b13      	cmp	r3, #19
 8016e68:	440b      	add	r3, r1
 8016e6a:	bfd8      	it	le
 8016e6c:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8016e70:	1a9b      	subs	r3, r3, r2
 8016e72:	f8ad 201c 	strh.w	r2, [sp, #28]
 8016e76:	f8ad 3020 	strh.w	r3, [sp, #32]
 8016e7a:	f7ff f825 	bl	8015ec8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8016e7e:	a807      	add	r0, sp, #28
 8016e80:	f7f9 fa4b 	bl	801031a <_ZNK8touchgfx4Rect7isEmptyEv>
 8016e84:	bb78      	cbnz	r0, 8016ee6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 8016e86:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8016e8a:	4425      	add	r5, r4
 8016e8c:	f8d8 0000 	ldr.w	r0, [r8]
 8016e90:	f1bc 0f14 	cmp.w	ip, #20
 8016e94:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8016e98:	f8d0 e000 	ldr.w	lr, [r0]
 8016e9c:	bfa8      	it	ge
 8016e9e:	f04f 0c14 	movge.w	ip, #20
 8016ea2:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8016ea6:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8016eaa:	fa1f fc8c 	uxth.w	ip, ip
 8016eae:	f8cd c000 	str.w	ip, [sp]
 8016eb2:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 8016eb6:	47d0      	blx	sl
 8016eb8:	4682      	mov	sl, r0
 8016eba:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8016ebe:	a807      	add	r0, sp, #28
 8016ec0:	f7fe ffe8 	bl	8015e94 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8016ec4:	6823      	ldr	r3, [r4, #0]
 8016ec6:	4620      	mov	r0, r4
 8016ec8:	a907      	add	r1, sp, #28
 8016eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016ecc:	4798      	blx	r3
 8016ece:	f8b5 00b0 	ldrh.w	r0, [r5, #176]	; 0xb0
 8016ed2:	eba0 000a 	sub.w	r0, r0, sl
 8016ed6:	b200      	sxth	r0, r0
 8016ed8:	f8a5 00b0 	strh.w	r0, [r5, #176]	; 0xb0
 8016edc:	b918      	cbnz	r0, 8016ee6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 8016ede:	b2b9      	uxth	r1, r7
 8016ee0:	4648      	mov	r0, r9
 8016ee2:	f7ff faad 	bl	8016440 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8016ee6:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	; 0xec
 8016eea:	f1bb 0f00 	cmp.w	fp, #0
 8016eee:	f43f af26 	beq.w	8016d3e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8016ef2:	9b02      	ldr	r3, [sp, #8]
 8016ef4:	2700      	movs	r7, #0
 8016ef6:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
 8016efa:	881b      	ldrh	r3, [r3, #0]
 8016efc:	3301      	adds	r3, #1
 8016efe:	b29b      	uxth	r3, r3
 8016f00:	b299      	uxth	r1, r3
 8016f02:	00fd      	lsls	r5, r7, #3
 8016f04:	458b      	cmp	fp, r1
 8016f06:	d9a3      	bls.n	8016e50 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>
 8016f08:	4425      	add	r5, r4
 8016f0a:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 8016f0e:	469c      	mov	ip, r3
 8016f10:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	; 0xb0
 8016f14:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 8016f18:	f9ba e0ac 	ldrsh.w	lr, [sl, #172]	; 0xac
 8016f1c:	4408      	add	r0, r1
 8016f1e:	f8ba 10b0 	ldrh.w	r1, [sl, #176]	; 0xb0
 8016f22:	4471      	add	r1, lr
 8016f24:	b200      	sxth	r0, r0
 8016f26:	b209      	sxth	r1, r1
 8016f28:	4288      	cmp	r0, r1
 8016f2a:	f6bf af6f 	bge.w	8016e0c <_ZN8touchgfx11Application15drawCachedAreasEv+0x328>
 8016f2e:	4586      	cmp	lr, r0
 8016f30:	4672      	mov	r2, lr
 8016f32:	bfb8      	it	lt
 8016f34:	4602      	movlt	r2, r0
 8016f36:	3301      	adds	r3, #1
 8016f38:	4667      	mov	r7, ip
 8016f3a:	e7e1      	b.n	8016f00 <_ZN8touchgfx11Application15drawCachedAreasEv+0x41c>
 8016f3c:	d10c      	bne.n	8016f58 <_ZN8touchgfx11Application15drawCachedAreasEv+0x474>
 8016f3e:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	; 0xb0
 8016f42:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	; 0xb0
 8016f46:	4287      	cmp	r7, r0
 8016f48:	bfb4      	ite	lt
 8016f4a:	4608      	movlt	r0, r1
 8016f4c:	4640      	movge	r0, r8
 8016f4e:	f8be 70b2 	ldrh.w	r7, [lr, #178]	; 0xb2
 8016f52:	443b      	add	r3, r7
 8016f54:	b21b      	sxth	r3, r3
 8016f56:	e753      	b.n	8016e00 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 8016f58:	4565      	cmp	r5, ip
 8016f5a:	4640      	mov	r0, r8
 8016f5c:	bfa8      	it	ge
 8016f5e:	4665      	movge	r5, ip
 8016f60:	e751      	b.n	8016e06 <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 8016f62:	eb09 0007 	add.w	r0, r9, r7
 8016f66:	4427      	add	r7, r4
 8016f68:	9203      	str	r2, [sp, #12]
 8016f6a:	f9b7 a0b2 	ldrsh.w	sl, [r7, #178]	; 0xb2
 8016f6e:	f1ba 0f13 	cmp.w	sl, #19
 8016f72:	bfde      	ittt	le
 8016f74:	f8b7 50ae 	ldrhle.w	r5, [r7, #174]	; 0xae
 8016f78:	4455      	addle	r5, sl
 8016f7a:	b22d      	sxthle	r5, r5
 8016f7c:	f7f9 f9cd 	bl	801031a <_ZNK8touchgfx4Rect7isEmptyEv>
 8016f80:	9a03      	ldr	r2, [sp, #12]
 8016f82:	2800      	cmp	r0, #0
 8016f84:	f47f af1c 	bne.w	8016dc0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2dc>
 8016f88:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 8016f8c:	fa1f fa8a 	uxth.w	sl, sl
 8016f90:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8016f94:	1aad      	subs	r5, r5, r2
 8016f96:	4829      	ldr	r0, [pc, #164]	; (801703c <_ZN8touchgfx11Application15drawCachedAreasEv+0x558>)
 8016f98:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	; 0xac
 8016f9c:	2d14      	cmp	r5, #20
 8016f9e:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 8016fa2:	6800      	ldr	r0, [r0, #0]
 8016fa4:	bfa8      	it	ge
 8016fa6:	2514      	movge	r5, #20
 8016fa8:	f8ad 101c 	strh.w	r1, [sp, #28]
 8016fac:	f8ad 201e 	strh.w	r2, [sp, #30]
 8016fb0:	b289      	uxth	r1, r1
 8016fb2:	f8ad 3020 	strh.w	r3, [sp, #32]
 8016fb6:	b2ad      	uxth	r5, r5
 8016fb8:	f8d0 c000 	ldr.w	ip, [r0]
 8016fbc:	b292      	uxth	r2, r2
 8016fbe:	4555      	cmp	r5, sl
 8016fc0:	bf94      	ite	ls
 8016fc2:	9500      	strls	r5, [sp, #0]
 8016fc4:	f8cd a000 	strhi.w	sl, [sp]
 8016fc8:	b29b      	uxth	r3, r3
 8016fca:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 8016fce:	47a8      	blx	r5
 8016fd0:	6823      	ldr	r3, [r4, #0]
 8016fd2:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8016fd6:	a907      	add	r1, sp, #28
 8016fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016fda:	4620      	mov	r0, r4
 8016fdc:	4798      	blx	r3
 8016fde:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8016fe2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8016fe6:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 8016fea:	1a5b      	subs	r3, r3, r1
 8016fec:	440a      	add	r2, r1
 8016fee:	b21b      	sxth	r3, r3
 8016ff0:	f8a7 20ae 	strh.w	r2, [r7, #174]	; 0xae
 8016ff4:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 8016ff8:	2b00      	cmp	r3, #0
 8016ffa:	f47f aed8 	bne.w	8016dae <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 8016ffe:	fa1f f188 	uxth.w	r1, r8
 8017002:	4648      	mov	r0, r9
 8017004:	f7ff fa1c 	bl	8016440 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8017008:	e6d1      	b.n	8016dae <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 801700a:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 801700e:	42ab      	cmp	r3, r5
 8017010:	f67f ae95 	bls.w	8016d3e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8017014:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8017018:	ab07      	add	r3, sp, #28
 801701a:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801701e:	6851      	ldr	r1, [r2, #4]
 8017020:	c303      	stmia	r3!, {r0, r1}
 8017022:	a807      	add	r0, sp, #28
 8017024:	f7f9 f979 	bl	801031a <_ZNK8touchgfx4Rect7isEmptyEv>
 8017028:	b920      	cbnz	r0, 8017034 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>
 801702a:	6823      	ldr	r3, [r4, #0]
 801702c:	a907      	add	r1, sp, #28
 801702e:	4620      	mov	r0, r4
 8017030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017032:	4798      	blx	r3
 8017034:	3501      	adds	r5, #1
 8017036:	b2ad      	uxth	r5, r5
 8017038:	e7e7      	b.n	801700a <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 801703a:	bf00      	nop
 801703c:	20027bc4 	.word	0x20027bc4

08017040 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8017040:	4b03      	ldr	r3, [pc, #12]	; (8017050 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8017042:	2200      	movs	r2, #0
 8017044:	801a      	strh	r2, [r3, #0]
 8017046:	805a      	strh	r2, [r3, #2]
 8017048:	809a      	strh	r2, [r3, #4]
 801704a:	80da      	strh	r2, [r3, #6]
 801704c:	4770      	bx	lr
 801704e:	bf00      	nop
 8017050:	20027c10 	.word	0x20027c10

08017054 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8017054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017058:	b09d      	sub	sp, #116	; 0x74
 801705a:	4606      	mov	r6, r0
 801705c:	4614      	mov	r4, r2
 801705e:	468a      	mov	sl, r1
 8017060:	a803      	add	r0, sp, #12
 8017062:	461d      	mov	r5, r3
 8017064:	f000 fea4 	bl	8017db0 <_ZN8touchgfx12TextProviderC1Ev>
 8017068:	6833      	ldr	r3, [r6, #0]
 801706a:	4630      	mov	r0, r6
 801706c:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8017070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017072:	4798      	blx	r3
 8017074:	6833      	ldr	r3, [r6, #0]
 8017076:	4607      	mov	r7, r0
 8017078:	4630      	mov	r0, r6
 801707a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801707c:	4798      	blx	r3
 801707e:	462a      	mov	r2, r5
 8017080:	2500      	movs	r5, #0
 8017082:	4621      	mov	r1, r4
 8017084:	9000      	str	r0, [sp, #0]
 8017086:	463b      	mov	r3, r7
 8017088:	462c      	mov	r4, r5
 801708a:	46a9      	mov	r9, r5
 801708c:	46a8      	mov	r8, r5
 801708e:	a803      	add	r0, sp, #12
 8017090:	f000 fee1 	bl	8017e56 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017094:	2300      	movs	r3, #0
 8017096:	9302      	str	r3, [sp, #8]
 8017098:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801709c:	429c      	cmp	r4, r3
 801709e:	d002      	beq.n	80170a6 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 80170a0:	455c      	cmp	r4, fp
 80170a2:	bf18      	it	ne
 80170a4:	4625      	movne	r5, r4
 80170a6:	ab02      	add	r3, sp, #8
 80170a8:	4632      	mov	r2, r6
 80170aa:	4651      	mov	r1, sl
 80170ac:	a803      	add	r0, sp, #12
 80170ae:	f001 f9c7 	bl	8018440 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80170b2:	4604      	mov	r4, r0
 80170b4:	b108      	cbz	r0, 80170ba <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 80170b6:	280a      	cmp	r0, #10
 80170b8:	d10a      	bne.n	80170d0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 80170ba:	45c1      	cmp	r9, r8
 80170bc:	bf38      	it	cc
 80170be:	46c1      	movcc	r9, r8
 80170c0:	f04f 0800 	mov.w	r8, #0
 80170c4:	2c00      	cmp	r4, #0
 80170c6:	d1e5      	bne.n	8017094 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80170c8:	4648      	mov	r0, r9
 80170ca:	b01d      	add	sp, #116	; 0x74
 80170cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170d0:	9a02      	ldr	r2, [sp, #8]
 80170d2:	2a00      	cmp	r2, #0
 80170d4:	d0de      	beq.n	8017094 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80170d6:	7b57      	ldrb	r7, [r2, #13]
 80170d8:	4629      	mov	r1, r5
 80170da:	6833      	ldr	r3, [r6, #0]
 80170dc:	007f      	lsls	r7, r7, #1
 80170de:	8894      	ldrh	r4, [r2, #4]
 80170e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80170e2:	f407 7080 	and.w	r0, r7, #256	; 0x100
 80170e6:	7a97      	ldrb	r7, [r2, #10]
 80170e8:	4307      	orrs	r7, r0
 80170ea:	4630      	mov	r0, r6
 80170ec:	4798      	blx	r3
 80170ee:	4438      	add	r0, r7
 80170f0:	4480      	add	r8, r0
 80170f2:	fa1f f888 	uxth.w	r8, r8
 80170f6:	e7e5      	b.n	80170c4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

080170f8 <_ZNK8touchgfx4Font12getCharWidthEt>:
 80170f8:	b508      	push	{r3, lr}
 80170fa:	6803      	ldr	r3, [r0, #0]
 80170fc:	68db      	ldr	r3, [r3, #12]
 80170fe:	4798      	blx	r3
 8017100:	b128      	cbz	r0, 801710e <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8017102:	7b43      	ldrb	r3, [r0, #13]
 8017104:	7a80      	ldrb	r0, [r0, #10]
 8017106:	005b      	lsls	r3, r3, #1
 8017108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801710c:	4318      	orrs	r0, r3
 801710e:	bd08      	pop	{r3, pc}

08017110 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8017110:	b40e      	push	{r1, r2, r3}
 8017112:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017114:	b09e      	sub	sp, #120	; 0x78
 8017116:	4605      	mov	r5, r0
 8017118:	ab23      	add	r3, sp, #140	; 0x8c
 801711a:	a805      	add	r0, sp, #20
 801711c:	f853 4b04 	ldr.w	r4, [r3], #4
 8017120:	9303      	str	r3, [sp, #12]
 8017122:	f000 fe45 	bl	8017db0 <_ZN8touchgfx12TextProviderC1Ev>
 8017126:	682b      	ldr	r3, [r5, #0]
 8017128:	4628      	mov	r0, r5
 801712a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801712c:	4798      	blx	r3
 801712e:	682b      	ldr	r3, [r5, #0]
 8017130:	4606      	mov	r6, r0
 8017132:	4628      	mov	r0, r5
 8017134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017136:	4798      	blx	r3
 8017138:	4633      	mov	r3, r6
 801713a:	4621      	mov	r1, r4
 801713c:	ae1e      	add	r6, sp, #120	; 0x78
 801713e:	2400      	movs	r4, #0
 8017140:	9000      	str	r0, [sp, #0]
 8017142:	9a03      	ldr	r2, [sp, #12]
 8017144:	a805      	add	r0, sp, #20
 8017146:	f000 fe86 	bl	8017e56 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801714a:	f846 4d68 	str.w	r4, [r6, #-104]!
 801714e:	462a      	mov	r2, r5
 8017150:	4633      	mov	r3, r6
 8017152:	4621      	mov	r1, r4
 8017154:	a805      	add	r0, sp, #20
 8017156:	f001 f973 	bl	8018440 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801715a:	b300      	cbz	r0, 801719e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801715c:	280a      	cmp	r0, #10
 801715e:	d01a      	beq.n	8017196 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8017160:	9f04      	ldr	r7, [sp, #16]
 8017162:	b1c7      	cbz	r7, 8017196 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8017164:	7b78      	ldrb	r0, [r7, #13]
 8017166:	7a3b      	ldrb	r3, [r7, #8]
 8017168:	00c1      	lsls	r1, r0, #3
 801716a:	88ea      	ldrh	r2, [r5, #6]
 801716c:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8017170:	4319      	orrs	r1, r3
 8017172:	0643      	lsls	r3, r0, #25
 8017174:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8017178:	bf48      	it	mi
 801717a:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801717e:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8017182:	bf48      	it	mi
 8017184:	b219      	sxthmi	r1, r3
 8017186:	79fb      	ldrb	r3, [r7, #7]
 8017188:	4303      	orrs	r3, r0
 801718a:	4413      	add	r3, r2
 801718c:	1a5b      	subs	r3, r3, r1
 801718e:	b21b      	sxth	r3, r3
 8017190:	429c      	cmp	r4, r3
 8017192:	bfb8      	it	lt
 8017194:	461c      	movlt	r4, r3
 8017196:	4633      	mov	r3, r6
 8017198:	462a      	mov	r2, r5
 801719a:	2100      	movs	r1, #0
 801719c:	e7da      	b.n	8017154 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801719e:	b2a0      	uxth	r0, r4
 80171a0:	b01e      	add	sp, #120	; 0x78
 80171a2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80171a6:	b003      	add	sp, #12
 80171a8:	4770      	bx	lr

080171aa <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 80171aa:	7a43      	ldrb	r3, [r0, #9]
 80171ac:	8880      	ldrh	r0, [r0, #4]
 80171ae:	4418      	add	r0, r3
 80171b0:	b280      	uxth	r0, r0
 80171b2:	4770      	bx	lr

080171b4 <_ZNK8touchgfx4Font13getFontHeightEv>:
 80171b4:	6803      	ldr	r3, [r0, #0]
 80171b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80171b8:	4718      	bx	r3

080171ba <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 80171ba:	b40e      	push	{r1, r2, r3}
 80171bc:	b570      	push	{r4, r5, r6, lr}
 80171be:	b09d      	sub	sp, #116	; 0x74
 80171c0:	4604      	mov	r4, r0
 80171c2:	ab21      	add	r3, sp, #132	; 0x84
 80171c4:	a803      	add	r0, sp, #12
 80171c6:	f853 5b04 	ldr.w	r5, [r3], #4
 80171ca:	9302      	str	r3, [sp, #8]
 80171cc:	f000 fdf0 	bl	8017db0 <_ZN8touchgfx12TextProviderC1Ev>
 80171d0:	6823      	ldr	r3, [r4, #0]
 80171d2:	4620      	mov	r0, r4
 80171d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80171d6:	4798      	blx	r3
 80171d8:	6823      	ldr	r3, [r4, #0]
 80171da:	4606      	mov	r6, r0
 80171dc:	4620      	mov	r0, r4
 80171de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80171e0:	2401      	movs	r4, #1
 80171e2:	4798      	blx	r3
 80171e4:	4633      	mov	r3, r6
 80171e6:	9000      	str	r0, [sp, #0]
 80171e8:	4629      	mov	r1, r5
 80171ea:	9a02      	ldr	r2, [sp, #8]
 80171ec:	a803      	add	r0, sp, #12
 80171ee:	f000 fe32 	bl	8017e56 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80171f2:	a803      	add	r0, sp, #12
 80171f4:	f001 f9f0 	bl	80185d8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80171f8:	b2a3      	uxth	r3, r4
 80171fa:	b138      	cbz	r0, 801720c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 80171fc:	280a      	cmp	r0, #10
 80171fe:	a803      	add	r0, sp, #12
 8017200:	bf04      	itt	eq
 8017202:	3301      	addeq	r3, #1
 8017204:	b21c      	sxtheq	r4, r3
 8017206:	f001 f9e7 	bl	80185d8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801720a:	e7f5      	b.n	80171f8 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801720c:	4618      	mov	r0, r3
 801720e:	b01d      	add	sp, #116	; 0x74
 8017210:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017214:	b003      	add	sp, #12
 8017216:	4770      	bx	lr

08017218 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8017218:	b40e      	push	{r1, r2, r3}
 801721a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801721c:	b09e      	sub	sp, #120	; 0x78
 801721e:	4604      	mov	r4, r0
 8017220:	ab23      	add	r3, sp, #140	; 0x8c
 8017222:	a805      	add	r0, sp, #20
 8017224:	f853 5b04 	ldr.w	r5, [r3], #4
 8017228:	9303      	str	r3, [sp, #12]
 801722a:	f000 fdc1 	bl	8017db0 <_ZN8touchgfx12TextProviderC1Ev>
 801722e:	6823      	ldr	r3, [r4, #0]
 8017230:	4620      	mov	r0, r4
 8017232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017234:	4798      	blx	r3
 8017236:	6823      	ldr	r3, [r4, #0]
 8017238:	4606      	mov	r6, r0
 801723a:	4620      	mov	r0, r4
 801723c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801723e:	4798      	blx	r3
 8017240:	4633      	mov	r3, r6
 8017242:	4629      	mov	r1, r5
 8017244:	9000      	str	r0, [sp, #0]
 8017246:	9a03      	ldr	r2, [sp, #12]
 8017248:	a805      	add	r0, sp, #20
 801724a:	f000 fe04 	bl	8017e56 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801724e:	ad1e      	add	r5, sp, #120	; 0x78
 8017250:	2100      	movs	r1, #0
 8017252:	f647 76ff 	movw	r6, #32767	; 0x7fff
 8017256:	4622      	mov	r2, r4
 8017258:	a805      	add	r0, sp, #20
 801725a:	f845 1d68 	str.w	r1, [r5, #-104]!
 801725e:	462b      	mov	r3, r5
 8017260:	f001 f8ee 	bl	8018440 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017264:	b1d8      	cbz	r0, 801729e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 8017266:	280a      	cmp	r0, #10
 8017268:	d012      	beq.n	8017290 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801726a:	9804      	ldr	r0, [sp, #16]
 801726c:	b180      	cbz	r0, 8017290 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801726e:	7b47      	ldrb	r7, [r0, #13]
 8017270:	88e2      	ldrh	r2, [r4, #6]
 8017272:	00fb      	lsls	r3, r7, #3
 8017274:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8017278:	7a03      	ldrb	r3, [r0, #8]
 801727a:	430b      	orrs	r3, r1
 801727c:	0679      	lsls	r1, r7, #25
 801727e:	bf44      	itt	mi
 8017280:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8017284:	b21b      	sxthmi	r3, r3
 8017286:	1ad3      	subs	r3, r2, r3
 8017288:	b21b      	sxth	r3, r3
 801728a:	429e      	cmp	r6, r3
 801728c:	bfa8      	it	ge
 801728e:	461e      	movge	r6, r3
 8017290:	462b      	mov	r3, r5
 8017292:	4622      	mov	r2, r4
 8017294:	2100      	movs	r1, #0
 8017296:	a805      	add	r0, sp, #20
 8017298:	f001 f8d2 	bl	8018440 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801729c:	e7e2      	b.n	8017264 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 801729e:	4630      	mov	r0, r6
 80172a0:	b01e      	add	sp, #120	; 0x78
 80172a2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80172a6:	b003      	add	sp, #12
 80172a8:	4770      	bx	lr

080172aa <_ZNK8touchgfx8Drawable10invalidateEv>:
 80172aa:	b513      	push	{r0, r1, r4, lr}
 80172ac:	6803      	ldr	r3, [r0, #0]
 80172ae:	2400      	movs	r4, #0
 80172b0:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80172b4:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80172b8:	f8ad 1004 	strh.w	r1, [sp, #4]
 80172bc:	4669      	mov	r1, sp
 80172be:	691b      	ldr	r3, [r3, #16]
 80172c0:	9400      	str	r4, [sp, #0]
 80172c2:	f8ad 2006 	strh.w	r2, [sp, #6]
 80172c6:	4798      	blx	r3
 80172c8:	b002      	add	sp, #8
 80172ca:	bd10      	pop	{r4, pc}

080172cc <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 80172cc:	b538      	push	{r3, r4, r5, lr}
 80172ce:	680b      	ldr	r3, [r1, #0]
 80172d0:	460c      	mov	r4, r1
 80172d2:	4605      	mov	r5, r0
 80172d4:	68db      	ldr	r3, [r3, #12]
 80172d6:	4798      	blx	r3
 80172d8:	6823      	ldr	r3, [r4, #0]
 80172da:	4620      	mov	r0, r4
 80172dc:	4629      	mov	r1, r5
 80172de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80172e0:	4798      	blx	r3
 80172e2:	4628      	mov	r0, r5
 80172e4:	bd38      	pop	{r3, r4, r5, pc}

080172e6 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 80172e6:	b410      	push	{r4}
 80172e8:	880a      	ldrh	r2, [r1, #0]
 80172ea:	8884      	ldrh	r4, [r0, #4]
 80172ec:	4422      	add	r2, r4
 80172ee:	800a      	strh	r2, [r1, #0]
 80172f0:	884a      	ldrh	r2, [r1, #2]
 80172f2:	88c4      	ldrh	r4, [r0, #6]
 80172f4:	4422      	add	r2, r4
 80172f6:	804a      	strh	r2, [r1, #2]
 80172f8:	6940      	ldr	r0, [r0, #20]
 80172fa:	b120      	cbz	r0, 8017306 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 80172fc:	6803      	ldr	r3, [r0, #0]
 80172fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017304:	4718      	bx	r3
 8017306:	f85d 4b04 	ldr.w	r4, [sp], #4
 801730a:	4770      	bx	lr

0801730c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801730c:	b570      	push	{r4, r5, r6, lr}
 801730e:	8882      	ldrh	r2, [r0, #4]
 8017310:	460c      	mov	r4, r1
 8017312:	880b      	ldrh	r3, [r1, #0]
 8017314:	4605      	mov	r5, r0
 8017316:	4413      	add	r3, r2
 8017318:	800b      	strh	r3, [r1, #0]
 801731a:	884b      	ldrh	r3, [r1, #2]
 801731c:	88c2      	ldrh	r2, [r0, #6]
 801731e:	4413      	add	r3, r2
 8017320:	804b      	strh	r3, [r1, #2]
 8017322:	1d01      	adds	r1, r0, #4
 8017324:	4620      	mov	r0, r4
 8017326:	f7f8 ffb5 	bl	8010294 <_ZN8touchgfx4RectaNERKS0_>
 801732a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801732e:	2b00      	cmp	r3, #0
 8017330:	dd0b      	ble.n	801734a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8017332:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8017336:	2b00      	cmp	r3, #0
 8017338:	dd07      	ble.n	801734a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801733a:	6968      	ldr	r0, [r5, #20]
 801733c:	b128      	cbz	r0, 801734a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801733e:	6803      	ldr	r3, [r0, #0]
 8017340:	4621      	mov	r1, r4
 8017342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017344:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017348:	4718      	bx	r3
 801734a:	bd70      	pop	{r4, r5, r6, pc}

0801734c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801734c:	b570      	push	{r4, r5, r6, lr}
 801734e:	8882      	ldrh	r2, [r0, #4]
 8017350:	460c      	mov	r4, r1
 8017352:	880b      	ldrh	r3, [r1, #0]
 8017354:	4605      	mov	r5, r0
 8017356:	4413      	add	r3, r2
 8017358:	800b      	strh	r3, [r1, #0]
 801735a:	884b      	ldrh	r3, [r1, #2]
 801735c:	88c2      	ldrh	r2, [r0, #6]
 801735e:	4413      	add	r3, r2
 8017360:	804b      	strh	r3, [r1, #2]
 8017362:	1d01      	adds	r1, r0, #4
 8017364:	4620      	mov	r0, r4
 8017366:	f7f8 ff95 	bl	8010294 <_ZN8touchgfx4RectaNERKS0_>
 801736a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801736e:	2b00      	cmp	r3, #0
 8017370:	dd18      	ble.n	80173a4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8017372:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8017376:	2b00      	cmp	r3, #0
 8017378:	dd14      	ble.n	80173a4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801737a:	6968      	ldr	r0, [r5, #20]
 801737c:	b128      	cbz	r0, 801738a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801737e:	6803      	ldr	r3, [r0, #0]
 8017380:	4621      	mov	r1, r4
 8017382:	691b      	ldr	r3, [r3, #16]
 8017384:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017388:	4718      	bx	r3
 801738a:	4b07      	ldr	r3, [pc, #28]	; (80173a8 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 801738c:	681b      	ldr	r3, [r3, #0]
 801738e:	3304      	adds	r3, #4
 8017390:	429d      	cmp	r5, r3
 8017392:	d107      	bne.n	80173a4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8017394:	f7fe fed2 	bl	801613c <_ZN8touchgfx11Application11getInstanceEv>
 8017398:	6821      	ldr	r1, [r4, #0]
 801739a:	6862      	ldr	r2, [r4, #4]
 801739c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80173a0:	f7ff b862 	b.w	8016468 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80173a4:	bd70      	pop	{r4, r5, r6, pc}
 80173a6:	bf00      	nop
 80173a8:	20027c08 	.word	0x20027c08

080173ac <_ZN8touchgfx8Drawable12moveRelativeEss>:
 80173ac:	b570      	push	{r4, r5, r6, lr}
 80173ae:	4604      	mov	r4, r0
 80173b0:	4616      	mov	r6, r2
 80173b2:	460d      	mov	r5, r1
 80173b4:	b901      	cbnz	r1, 80173b8 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 80173b6:	b192      	cbz	r2, 80173de <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 80173b8:	6823      	ldr	r3, [r4, #0]
 80173ba:	4620      	mov	r0, r4
 80173bc:	699b      	ldr	r3, [r3, #24]
 80173be:	4798      	blx	r3
 80173c0:	88e2      	ldrh	r2, [r4, #6]
 80173c2:	88a1      	ldrh	r1, [r4, #4]
 80173c4:	4620      	mov	r0, r4
 80173c6:	4432      	add	r2, r6
 80173c8:	4429      	add	r1, r5
 80173ca:	b212      	sxth	r2, r2
 80173cc:	b209      	sxth	r1, r1
 80173ce:	f7ef f9c4 	bl	800675a <_ZN8touchgfx8Drawable5setXYEss>
 80173d2:	6823      	ldr	r3, [r4, #0]
 80173d4:	4620      	mov	r0, r4
 80173d6:	699b      	ldr	r3, [r3, #24]
 80173d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80173dc:	4718      	bx	r3
 80173de:	bd70      	pop	{r4, r5, r6, pc}

080173e0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 80173e0:	b510      	push	{r4, lr}
 80173e2:	2300      	movs	r3, #0
 80173e4:	4604      	mov	r4, r0
 80173e6:	4608      	mov	r0, r1
 80173e8:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 80173ec:	8023      	strh	r3, [r4, #0]
 80173ee:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80173f2:	8063      	strh	r3, [r4, #2]
 80173f4:	6803      	ldr	r3, [r0, #0]
 80173f6:	80a1      	strh	r1, [r4, #4]
 80173f8:	4621      	mov	r1, r4
 80173fa:	80e2      	strh	r2, [r4, #6]
 80173fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80173fe:	4798      	blx	r3
 8017400:	4620      	mov	r0, r4
 8017402:	bd10      	pop	{r4, pc}

08017404 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 8017404:	b530      	push	{r4, r5, lr}
 8017406:	8083      	strh	r3, [r0, #4]
 8017408:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801740c:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8017410:	80c3      	strh	r3, [r0, #6]
 8017412:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8017416:	6141      	str	r1, [r0, #20]
 8017418:	7203      	strb	r3, [r0, #8]
 801741a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801741e:	8302      	strh	r2, [r0, #24]
 8017420:	7243      	strb	r3, [r0, #9]
 8017422:	7a83      	ldrb	r3, [r0, #10]
 8017424:	f365 0306 	bfi	r3, r5, #0, #7
 8017428:	f89d 501c 	ldrb.w	r5, [sp, #28]
 801742c:	f365 13c7 	bfi	r3, r5, #7, #1
 8017430:	7283      	strb	r3, [r0, #10]
 8017432:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8017436:	72c3      	strb	r3, [r0, #11]
 8017438:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 801743c:	7303      	strb	r3, [r0, #12]
 801743e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8017442:	81c3      	strh	r3, [r0, #14]
 8017444:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8017448:	8203      	strh	r3, [r0, #16]
 801744a:	4b01      	ldr	r3, [pc, #4]	; (8017450 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 801744c:	6003      	str	r3, [r0, #0]
 801744e:	bd30      	pop	{r4, r5, pc}
 8017450:	0802b300 	.word	0x0802b300

08017454 <_ZNK8touchgfx9ConstFont4findEt>:
 8017454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017456:	6944      	ldr	r4, [r0, #20]
 8017458:	b3bc      	cbz	r4, 80174ca <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801745a:	88a3      	ldrh	r3, [r4, #4]
 801745c:	8b02      	ldrh	r2, [r0, #24]
 801745e:	1acb      	subs	r3, r1, r3
 8017460:	f102 32ff 	add.w	r2, r2, #4294967295
 8017464:	d431      	bmi.n	80174ca <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017466:	4293      	cmp	r3, r2
 8017468:	dd0c      	ble.n	8017484 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801746a:	230e      	movs	r3, #14
 801746c:	fb03 4302 	mla	r3, r3, r2, r4
 8017470:	889b      	ldrh	r3, [r3, #4]
 8017472:	1a5b      	subs	r3, r3, r1
 8017474:	1ad3      	subs	r3, r2, r3
 8017476:	429a      	cmp	r2, r3
 8017478:	db27      	blt.n	80174ca <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801747a:	2b00      	cmp	r3, #0
 801747c:	bfbc      	itt	lt
 801747e:	2302      	movlt	r3, #2
 8017480:	fb92 f3f3 	sdivlt	r3, r2, r3
 8017484:	2500      	movs	r5, #0
 8017486:	260e      	movs	r6, #14
 8017488:	4295      	cmp	r5, r2
 801748a:	dc1e      	bgt.n	80174ca <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801748c:	fb06 4003 	mla	r0, r6, r3, r4
 8017490:	8887      	ldrh	r7, [r0, #4]
 8017492:	42b9      	cmp	r1, r7
 8017494:	d01a      	beq.n	80174cc <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8017496:	d20d      	bcs.n	80174b4 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8017498:	1e5a      	subs	r2, r3, #1
 801749a:	4295      	cmp	r5, r2
 801749c:	dc15      	bgt.n	80174ca <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801749e:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 80174a2:	1a5b      	subs	r3, r3, r1
 80174a4:	1ad3      	subs	r3, r2, r3
 80174a6:	429a      	cmp	r2, r3
 80174a8:	db0f      	blt.n	80174ca <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80174aa:	429d      	cmp	r5, r3
 80174ac:	ddec      	ble.n	8017488 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80174ae:	1953      	adds	r3, r2, r5
 80174b0:	105b      	asrs	r3, r3, #1
 80174b2:	e7e9      	b.n	8017488 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80174b4:	1c5d      	adds	r5, r3, #1
 80174b6:	42aa      	cmp	r2, r5
 80174b8:	db07      	blt.n	80174ca <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80174ba:	8a43      	ldrh	r3, [r0, #18]
 80174bc:	1acb      	subs	r3, r1, r3
 80174be:	442b      	add	r3, r5
 80174c0:	429d      	cmp	r5, r3
 80174c2:	dc02      	bgt.n	80174ca <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80174c4:	429a      	cmp	r2, r3
 80174c6:	dadf      	bge.n	8017488 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80174c8:	e7f1      	b.n	80174ae <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 80174ca:	2000      	movs	r0, #0
 80174cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080174ce <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 80174ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80174d0:	4604      	mov	r4, r0
 80174d2:	4617      	mov	r7, r2
 80174d4:	461e      	mov	r6, r3
 80174d6:	b911      	cbnz	r1, 80174de <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 80174d8:	2500      	movs	r5, #0
 80174da:	4628      	mov	r0, r5
 80174dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80174de:	290a      	cmp	r1, #10
 80174e0:	d0fa      	beq.n	80174d8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80174e2:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 80174e6:	4291      	cmp	r1, r2
 80174e8:	d0f6      	beq.n	80174d8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80174ea:	f242 020b 	movw	r2, #8203	; 0x200b
 80174ee:	4291      	cmp	r1, r2
 80174f0:	d0f2      	beq.n	80174d8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80174f2:	f7ff ffaf 	bl	8017454 <_ZNK8touchgfx9ConstFont4findEt>
 80174f6:	4605      	mov	r5, r0
 80174f8:	b950      	cbnz	r0, 8017510 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 80174fa:	6823      	ldr	r3, [r4, #0]
 80174fc:	4620      	mov	r0, r4
 80174fe:	691b      	ldr	r3, [r3, #16]
 8017500:	4798      	blx	r3
 8017502:	4601      	mov	r1, r0
 8017504:	4620      	mov	r0, r4
 8017506:	f7ff ffa5 	bl	8017454 <_ZNK8touchgfx9ConstFont4findEt>
 801750a:	4605      	mov	r5, r0
 801750c:	2800      	cmp	r0, #0
 801750e:	d0e3      	beq.n	80174d8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8017510:	6823      	ldr	r3, [r4, #0]
 8017512:	4629      	mov	r1, r5
 8017514:	4620      	mov	r0, r4
 8017516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017518:	4798      	blx	r3
 801751a:	6038      	str	r0, [r7, #0]
 801751c:	6823      	ldr	r3, [r4, #0]
 801751e:	4620      	mov	r0, r4
 8017520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017522:	4798      	blx	r3
 8017524:	7030      	strb	r0, [r6, #0]
 8017526:	e7d8      	b.n	80174da <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08017528 <_ZN8touchgfx4clzuEm>:
 8017528:	4603      	mov	r3, r0
 801752a:	b1c8      	cbz	r0, 8017560 <_ZN8touchgfx4clzuEm+0x38>
 801752c:	0c02      	lsrs	r2, r0, #16
 801752e:	0412      	lsls	r2, r2, #16
 8017530:	b9a2      	cbnz	r2, 801755c <_ZN8touchgfx4clzuEm+0x34>
 8017532:	0403      	lsls	r3, r0, #16
 8017534:	2010      	movs	r0, #16
 8017536:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801753a:	bf04      	itt	eq
 801753c:	021b      	lsleq	r3, r3, #8
 801753e:	3008      	addeq	r0, #8
 8017540:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8017544:	bf04      	itt	eq
 8017546:	011b      	lsleq	r3, r3, #4
 8017548:	3004      	addeq	r0, #4
 801754a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801754e:	bf04      	itt	eq
 8017550:	009b      	lsleq	r3, r3, #2
 8017552:	3002      	addeq	r0, #2
 8017554:	2b00      	cmp	r3, #0
 8017556:	db04      	blt.n	8017562 <_ZN8touchgfx4clzuEm+0x3a>
 8017558:	3001      	adds	r0, #1
 801755a:	4770      	bx	lr
 801755c:	2000      	movs	r0, #0
 801755e:	e7ea      	b.n	8017536 <_ZN8touchgfx4clzuEm+0xe>
 8017560:	2020      	movs	r0, #32
 8017562:	4770      	bx	lr

08017564 <_ZN8touchgfx7muldivuEmmmRm>:
 8017564:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017568:	4680      	mov	r8, r0
 801756a:	460f      	mov	r7, r1
 801756c:	4615      	mov	r5, r2
 801756e:	461e      	mov	r6, r3
 8017570:	f7ff ffda 	bl	8017528 <_ZN8touchgfx4clzuEm>
 8017574:	b998      	cbnz	r0, 801759e <_ZN8touchgfx7muldivuEmmmRm+0x3a>
 8017576:	4608      	mov	r0, r1
 8017578:	f7ff ffd6 	bl	8017528 <_ZN8touchgfx4clzuEm>
 801757c:	2800      	cmp	r0, #0
 801757e:	dd08      	ble.n	8017592 <_ZN8touchgfx7muldivuEmmmRm+0x2e>
 8017580:	4633      	mov	r3, r6
 8017582:	462a      	mov	r2, r5
 8017584:	4641      	mov	r1, r8
 8017586:	4638      	mov	r0, r7
 8017588:	f7ff ffec 	bl	8017564 <_ZN8touchgfx7muldivuEmmmRm>
 801758c:	b003      	add	sp, #12
 801758e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017592:	f04f 33ff 	mov.w	r3, #4294967295
 8017596:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801759a:	6033      	str	r3, [r6, #0]
 801759c:	e7f6      	b.n	801758c <_ZN8touchgfx7muldivuEmmmRm+0x28>
 801759e:	fa31 f900 	lsrs.w	r9, r1, r0
 80175a2:	fb01 f308 	mul.w	r3, r1, r8
 80175a6:	d105      	bne.n	80175b4 <_ZN8touchgfx7muldivuEmmmRm+0x50>
 80175a8:	fbb3 f0f5 	udiv	r0, r3, r5
 80175ac:	fb05 3510 	mls	r5, r5, r0, r3
 80175b0:	6035      	str	r5, [r6, #0]
 80175b2:	e7eb      	b.n	801758c <_ZN8touchgfx7muldivuEmmmRm+0x28>
 80175b4:	2301      	movs	r3, #1
 80175b6:	fa08 fb00 	lsl.w	fp, r8, r0
 80175ba:	462a      	mov	r2, r5
 80175bc:	4641      	mov	r1, r8
 80175be:	fa03 f000 	lsl.w	r0, r3, r0
 80175c2:	4633      	mov	r3, r6
 80175c4:	fbbb faf5 	udiv	sl, fp, r5
 80175c8:	3801      	subs	r0, #1
 80175ca:	fb09 f40a 	mul.w	r4, r9, sl
 80175ce:	4038      	ands	r0, r7
 80175d0:	f7ff ffc8 	bl	8017564 <_ZN8touchgfx7muldivuEmmmRm>
 80175d4:	462a      	mov	r2, r5
 80175d6:	4607      	mov	r7, r0
 80175d8:	ab01      	add	r3, sp, #4
 80175da:	fb05 b11a 	mls	r1, r5, sl, fp
 80175de:	4648      	mov	r0, r9
 80175e0:	f7ff ffc0 	bl	8017564 <_ZN8touchgfx7muldivuEmmmRm>
 80175e4:	9b01      	ldr	r3, [sp, #4]
 80175e6:	6832      	ldr	r2, [r6, #0]
 80175e8:	441a      	add	r2, r3
 80175ea:	fbb2 f3f5 	udiv	r3, r2, r5
 80175ee:	441c      	add	r4, r3
 80175f0:	fb05 2513 	mls	r5, r5, r3, r2
 80175f4:	443c      	add	r4, r7
 80175f6:	4420      	add	r0, r4
 80175f8:	e7da      	b.n	80175b0 <_ZN8touchgfx7muldivuEmmmRm+0x4c>

080175fa <_ZN8touchgfx6muldivElllRl>:
 80175fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80175fc:	2800      	cmp	r0, #0
 80175fe:	461e      	mov	r6, r3
 8017600:	bfba      	itte	lt
 8017602:	4240      	neglt	r0, r0
 8017604:	f04f 34ff 	movlt.w	r4, #4294967295
 8017608:	2401      	movge	r4, #1
 801760a:	2900      	cmp	r1, #0
 801760c:	bfbc      	itt	lt
 801760e:	4249      	neglt	r1, r1
 8017610:	4264      	neglt	r4, r4
 8017612:	2a00      	cmp	r2, #0
 8017614:	bfb6      	itet	lt
 8017616:	4265      	neglt	r5, r4
 8017618:	4625      	movge	r5, r4
 801761a:	4252      	neglt	r2, r2
 801761c:	4288      	cmp	r0, r1
 801761e:	bfc2      	ittt	gt
 8017620:	4603      	movgt	r3, r0
 8017622:	4608      	movgt	r0, r1
 8017624:	4619      	movgt	r1, r3
 8017626:	ab01      	add	r3, sp, #4
 8017628:	f7ff ff9c 	bl	8017564 <_ZN8touchgfx7muldivuEmmmRm>
 801762c:	9b01      	ldr	r3, [sp, #4]
 801762e:	4368      	muls	r0, r5
 8017630:	435c      	muls	r4, r3
 8017632:	6034      	str	r4, [r6, #0]
 8017634:	b002      	add	sp, #8
 8017636:	bd70      	pop	{r4, r5, r6, pc}

08017638 <_ZN8touchgfx6muldivElll>:
 8017638:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801763a:	4606      	mov	r6, r0
 801763c:	ab01      	add	r3, sp, #4
 801763e:	460d      	mov	r5, r1
 8017640:	4614      	mov	r4, r2
 8017642:	f7ff ffda 	bl	80175fa <_ZN8touchgfx6muldivElllRl>
 8017646:	2e00      	cmp	r6, #0
 8017648:	db20      	blt.n	801768c <_ZN8touchgfx6muldivElll+0x54>
 801764a:	bf14      	ite	ne
 801764c:	2301      	movne	r3, #1
 801764e:	2300      	moveq	r3, #0
 8017650:	2d00      	cmp	r5, #0
 8017652:	db1e      	blt.n	8017692 <_ZN8touchgfx6muldivElll+0x5a>
 8017654:	bf14      	ite	ne
 8017656:	2201      	movne	r2, #1
 8017658:	2200      	moveq	r2, #0
 801765a:	2c00      	cmp	r4, #0
 801765c:	fb03 f202 	mul.w	r2, r3, r2
 8017660:	db1a      	blt.n	8017698 <_ZN8touchgfx6muldivElll+0x60>
 8017662:	bf14      	ite	ne
 8017664:	2301      	movne	r3, #1
 8017666:	2300      	moveq	r3, #0
 8017668:	4353      	muls	r3, r2
 801766a:	2b01      	cmp	r3, #1
 801766c:	d117      	bne.n	801769e <_ZN8touchgfx6muldivElll+0x66>
 801766e:	2c00      	cmp	r4, #0
 8017670:	9b01      	ldr	r3, [sp, #4]
 8017672:	bfb8      	it	lt
 8017674:	4264      	neglt	r4, r4
 8017676:	2b00      	cmp	r3, #0
 8017678:	f104 0401 	add.w	r4, r4, #1
 801767c:	bfb8      	it	lt
 801767e:	425b      	neglt	r3, r3
 8017680:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 8017684:	db00      	blt.n	8017688 <_ZN8touchgfx6muldivElll+0x50>
 8017686:	3001      	adds	r0, #1
 8017688:	b002      	add	sp, #8
 801768a:	bd70      	pop	{r4, r5, r6, pc}
 801768c:	f04f 33ff 	mov.w	r3, #4294967295
 8017690:	e7de      	b.n	8017650 <_ZN8touchgfx6muldivElll+0x18>
 8017692:	f04f 32ff 	mov.w	r2, #4294967295
 8017696:	e7e0      	b.n	801765a <_ZN8touchgfx6muldivElll+0x22>
 8017698:	f04f 33ff 	mov.w	r3, #4294967295
 801769c:	e7e4      	b.n	8017668 <_ZN8touchgfx6muldivElll+0x30>
 801769e:	3301      	adds	r3, #1
 80176a0:	d1f2      	bne.n	8017688 <_ZN8touchgfx6muldivElll+0x50>
 80176a2:	9b01      	ldr	r3, [sp, #4]
 80176a4:	2c00      	cmp	r4, #0
 80176a6:	bfb8      	it	lt
 80176a8:	4264      	neglt	r4, r4
 80176aa:	2b00      	cmp	r3, #0
 80176ac:	bfb8      	it	lt
 80176ae:	425b      	neglt	r3, r3
 80176b0:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 80176b4:	bfc8      	it	gt
 80176b6:	f100 30ff 	addgt.w	r0, r0, #4294967295
 80176ba:	e7e5      	b.n	8017688 <_ZN8touchgfx6muldivElll+0x50>

080176bc <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 80176bc:	2000      	movs	r0, #0
 80176be:	4770      	bx	lr

080176c0 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 80176c0:	2001      	movs	r0, #1
 80176c2:	4770      	bx	lr

080176c4 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 80176c4:	2002      	movs	r0, #2
 80176c6:	4770      	bx	lr

080176c8 <_ZN8touchgfx6ScreenD1Ev>:
 80176c8:	4770      	bx	lr

080176ca <_ZN8touchgfx12GestureEventD1Ev>:
 80176ca:	4770      	bx	lr

080176cc <_ZN8touchgfx9DragEventD1Ev>:
 80176cc:	4770      	bx	lr

080176ce <_ZN8touchgfx10ClickEventD1Ev>:
 80176ce:	4770      	bx	lr

080176d0 <_ZN8touchgfx10ClickEventD0Ev>:
 80176d0:	b510      	push	{r4, lr}
 80176d2:	4604      	mov	r4, r0
 80176d4:	210c      	movs	r1, #12
 80176d6:	f00e fa6c 	bl	8025bb2 <_ZdlPvj>
 80176da:	4620      	mov	r0, r4
 80176dc:	bd10      	pop	{r4, pc}

080176de <_ZN8touchgfx9DragEventD0Ev>:
 80176de:	b510      	push	{r4, lr}
 80176e0:	4604      	mov	r4, r0
 80176e2:	2110      	movs	r1, #16
 80176e4:	f00e fa65 	bl	8025bb2 <_ZdlPvj>
 80176e8:	4620      	mov	r0, r4
 80176ea:	bd10      	pop	{r4, pc}

080176ec <_ZN8touchgfx12GestureEventD0Ev>:
 80176ec:	b510      	push	{r4, lr}
 80176ee:	4604      	mov	r4, r0
 80176f0:	210c      	movs	r1, #12
 80176f2:	f00e fa5e 	bl	8025bb2 <_ZdlPvj>
 80176f6:	4620      	mov	r0, r4
 80176f8:	bd10      	pop	{r4, pc}

080176fa <_ZN8touchgfx6ScreenD0Ev>:
 80176fa:	b510      	push	{r4, lr}
 80176fc:	4604      	mov	r4, r0
 80176fe:	213c      	movs	r1, #60	; 0x3c
 8017700:	f00e fa57 	bl	8025bb2 <_ZdlPvj>
 8017704:	4620      	mov	r0, r4
 8017706:	bd10      	pop	{r4, pc}

08017708 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8017708:	b530      	push	{r4, r5, lr}
 801770a:	460d      	mov	r5, r1
 801770c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801770e:	b087      	sub	sp, #28
 8017710:	4604      	mov	r4, r0
 8017712:	b301      	cbz	r1, 8017756 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8017714:	a801      	add	r0, sp, #4
 8017716:	f7ff fe63 	bl	80173e0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801771a:	892a      	ldrh	r2, [r5, #8]
 801771c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8017720:	7928      	ldrb	r0, [r5, #4]
 8017722:	1ad2      	subs	r2, r2, r3
 8017724:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8017726:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801772a:	441a      	add	r2, r3
 801772c:	896b      	ldrh	r3, [r5, #10]
 801772e:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8017732:	f88d 0010 	strb.w	r0, [sp, #16]
 8017736:	1b5b      	subs	r3, r3, r5
 8017738:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801773a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801773c:	442b      	add	r3, r5
 801773e:	4d07      	ldr	r5, [pc, #28]	; (801775c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8017740:	f8ad 1012 	strh.w	r1, [sp, #18]
 8017744:	a903      	add	r1, sp, #12
 8017746:	9503      	str	r5, [sp, #12]
 8017748:	f8ad 2014 	strh.w	r2, [sp, #20]
 801774c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017750:	6803      	ldr	r3, [r0, #0]
 8017752:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017754:	4798      	blx	r3
 8017756:	b007      	add	sp, #28
 8017758:	bd30      	pop	{r4, r5, pc}
 801775a:	bf00      	nop
 801775c:	0802b388 	.word	0x0802b388

08017760 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8017760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017764:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8017766:	b08a      	sub	sp, #40	; 0x28
 8017768:	4604      	mov	r4, r0
 801776a:	460d      	mov	r5, r1
 801776c:	b113      	cbz	r3, 8017774 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801776e:	790b      	ldrb	r3, [r1, #4]
 8017770:	2b00      	cmp	r3, #0
 8017772:	d044      	beq.n	80177fe <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8017774:	f104 0804 	add.w	r8, r4, #4
 8017778:	a803      	add	r0, sp, #12
 801777a:	4641      	mov	r1, r8
 801777c:	f7ff fe30 	bl	80173e0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017780:	792b      	ldrb	r3, [r5, #4]
 8017782:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8017786:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801778a:	b983      	cbnz	r3, 80177ae <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801778c:	f104 0336 	add.w	r3, r4, #54	; 0x36
 8017790:	892a      	ldrh	r2, [r5, #8]
 8017792:	88e9      	ldrh	r1, [r5, #6]
 8017794:	4640      	mov	r0, r8
 8017796:	1b92      	subs	r2, r2, r6
 8017798:	9301      	str	r3, [sp, #4]
 801779a:	1bc9      	subs	r1, r1, r7
 801779c:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80177a0:	b212      	sxth	r2, r2
 80177a2:	9300      	str	r3, [sp, #0]
 80177a4:	b209      	sxth	r1, r1
 80177a6:	f104 0330 	add.w	r3, r4, #48	; 0x30
 80177aa:	f7f8 fc91 	bl	80100d0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 80177ae:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80177b0:	b329      	cbz	r1, 80177fe <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80177b2:	a805      	add	r0, sp, #20
 80177b4:	f7ff fe14 	bl	80173e0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80177b8:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80177bc:	792b      	ldrb	r3, [r5, #4]
 80177be:	a907      	add	r1, sp, #28
 80177c0:	1abf      	subs	r7, r7, r2
 80177c2:	88ea      	ldrh	r2, [r5, #6]
 80177c4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80177c6:	4417      	add	r7, r2
 80177c8:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 80177ca:	f88d 3020 	strb.w	r3, [sp, #32]
 80177ce:	4417      	add	r7, r2
 80177d0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80177d4:	1ab6      	subs	r6, r6, r2
 80177d6:	892a      	ldrh	r2, [r5, #8]
 80177d8:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 80177dc:	4416      	add	r6, r2
 80177de:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80177e0:	4416      	add	r6, r2
 80177e2:	4a08      	ldr	r2, [pc, #32]	; (8017804 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 80177e4:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 80177e8:	2600      	movs	r6, #0
 80177ea:	9207      	str	r2, [sp, #28]
 80177ec:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 80177f0:	6803      	ldr	r3, [r0, #0]
 80177f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80177f4:	4798      	blx	r3
 80177f6:	792b      	ldrb	r3, [r5, #4]
 80177f8:	b10b      	cbz	r3, 80177fe <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80177fa:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 80177fe:	b00a      	add	sp, #40	; 0x28
 8017800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017804:	0802b360 	.word	0x0802b360

08017808 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8017808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801780c:	460c      	mov	r4, r1
 801780e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8017810:	b088      	sub	sp, #32
 8017812:	4605      	mov	r5, r0
 8017814:	2900      	cmp	r1, #0
 8017816:	d06d      	beq.n	80178f4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8017818:	4668      	mov	r0, sp
 801781a:	f7ff fde1 	bl	80173e0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801781e:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8017820:	88e3      	ldrh	r3, [r4, #6]
 8017822:	f9bd 8000 	ldrsh.w	r8, [sp]
 8017826:	440b      	add	r3, r1
 8017828:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801782c:	b21b      	sxth	r3, r3
 801782e:	4543      	cmp	r3, r8
 8017830:	db31      	blt.n	8017896 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8017832:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8017836:	44c4      	add	ip, r8
 8017838:	fa0f fc8c 	sxth.w	ip, ip
 801783c:	4563      	cmp	r3, ip
 801783e:	da2a      	bge.n	8017896 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8017840:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 8017842:	8926      	ldrh	r6, [r4, #8]
 8017844:	4416      	add	r6, r2
 8017846:	b236      	sxth	r6, r6
 8017848:	42be      	cmp	r6, r7
 801784a:	db24      	blt.n	8017896 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801784c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8017850:	4438      	add	r0, r7
 8017852:	b200      	sxth	r0, r0
 8017854:	4286      	cmp	r6, r0
 8017856:	da1e      	bge.n	8017896 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8017858:	8963      	ldrh	r3, [r4, #10]
 801785a:	4419      	add	r1, r3
 801785c:	b209      	sxth	r1, r1
 801785e:	4541      	cmp	r1, r8
 8017860:	db08      	blt.n	8017874 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8017862:	4561      	cmp	r1, ip
 8017864:	da06      	bge.n	8017874 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8017866:	89a3      	ldrh	r3, [r4, #12]
 8017868:	441a      	add	r2, r3
 801786a:	b212      	sxth	r2, r2
 801786c:	42ba      	cmp	r2, r7
 801786e:	db01      	blt.n	8017874 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8017870:	4282      	cmp	r2, r0
 8017872:	db10      	blt.n	8017896 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8017874:	4b21      	ldr	r3, [pc, #132]	; (80178fc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 8017876:	a904      	add	r1, sp, #16
 8017878:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801787a:	9304      	str	r3, [sp, #16]
 801787c:	2302      	movs	r3, #2
 801787e:	f88d 3014 	strb.w	r3, [sp, #20]
 8017882:	2300      	movs	r3, #0
 8017884:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017888:	f8ad 3018 	strh.w	r3, [sp, #24]
 801788c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8017890:	6803      	ldr	r3, [r0, #0]
 8017892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017894:	4798      	blx	r3
 8017896:	1d29      	adds	r1, r5, #4
 8017898:	a802      	add	r0, sp, #8
 801789a:	f7ff fda1 	bl	80173e0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801789e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80178a2:	88e0      	ldrh	r0, [r4, #6]
 80178a4:	eba3 0808 	sub.w	r8, r3, r8
 80178a8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80178ac:	7921      	ldrb	r1, [r4, #4]
 80178ae:	fa1f f888 	uxth.w	r8, r8
 80178b2:	1bdf      	subs	r7, r3, r7
 80178b4:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 80178b8:	b2bb      	uxth	r3, r7
 80178ba:	4440      	add	r0, r8
 80178bc:	8922      	ldrh	r2, [r4, #8]
 80178be:	8967      	ldrh	r7, [r4, #10]
 80178c0:	4460      	add	r0, ip
 80178c2:	89a4      	ldrh	r4, [r4, #12]
 80178c4:	441a      	add	r2, r3
 80178c6:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 80178c8:	44b8      	add	r8, r7
 80178ca:	4423      	add	r3, r4
 80178cc:	f8ad 0016 	strh.w	r0, [sp, #22]
 80178d0:	4432      	add	r2, r6
 80178d2:	44e0      	add	r8, ip
 80178d4:	4433      	add	r3, r6
 80178d6:	4c0a      	ldr	r4, [pc, #40]	; (8017900 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 80178d8:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80178da:	f88d 1014 	strb.w	r1, [sp, #20]
 80178de:	a904      	add	r1, sp, #16
 80178e0:	9404      	str	r4, [sp, #16]
 80178e2:	f8ad 2018 	strh.w	r2, [sp, #24]
 80178e6:	f8ad 801a 	strh.w	r8, [sp, #26]
 80178ea:	f8ad 301c 	strh.w	r3, [sp, #28]
 80178ee:	6803      	ldr	r3, [r0, #0]
 80178f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80178f2:	4798      	blx	r3
 80178f4:	b008      	add	sp, #32
 80178f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80178fa:	bf00      	nop
 80178fc:	0802b360 	.word	0x0802b360
 8017900:	0802b374 	.word	0x0802b374

08017904 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8017904:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017906:	4604      	mov	r4, r0
 8017908:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801790c:	3201      	adds	r2, #1
 801790e:	d112      	bne.n	8017936 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8017910:	2500      	movs	r5, #0
 8017912:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8017916:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801791a:	6803      	ldr	r3, [r0, #0]
 801791c:	9500      	str	r5, [sp, #0]
 801791e:	466d      	mov	r5, sp
 8017920:	f8ad 1004 	strh.w	r1, [sp, #4]
 8017924:	f8ad 2006 	strh.w	r2, [sp, #6]
 8017928:	4629      	mov	r1, r5
 801792a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801792c:	4798      	blx	r3
 801792e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8017932:	e884 0003 	stmia.w	r4, {r0, r1}
 8017936:	4620      	mov	r0, r4
 8017938:	b003      	add	sp, #12
 801793a:	bd30      	pop	{r4, r5, pc}

0801793c <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801793c:	b513      	push	{r0, r1, r4, lr}
 801793e:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8017942:	4604      	mov	r4, r0
 8017944:	3301      	adds	r3, #1
 8017946:	d109      	bne.n	801795c <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8017948:	4601      	mov	r1, r0
 801794a:	4668      	mov	r0, sp
 801794c:	f7ff fd48 	bl	80173e0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017950:	f8bd 3000 	ldrh.w	r3, [sp]
 8017954:	8423      	strh	r3, [r4, #32]
 8017956:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801795a:	8463      	strh	r3, [r4, #34]	; 0x22
 801795c:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8017960:	b002      	add	sp, #8
 8017962:	bd10      	pop	{r4, pc}

08017964 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8017964:	b513      	push	{r0, r1, r4, lr}
 8017966:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801796a:	4604      	mov	r4, r0
 801796c:	3301      	adds	r3, #1
 801796e:	d109      	bne.n	8017984 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8017970:	4601      	mov	r1, r0
 8017972:	4668      	mov	r0, sp
 8017974:	f7ff fd34 	bl	80173e0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017978:	f8bd 3000 	ldrh.w	r3, [sp]
 801797c:	8423      	strh	r3, [r4, #32]
 801797e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017982:	8463      	strh	r3, [r4, #34]	; 0x22
 8017984:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8017988:	b002      	add	sp, #8
 801798a:	bd10      	pop	{r4, pc}

0801798c <_ZN8touchgfx6ScreenC1Ev>:
 801798c:	b570      	push	{r4, r5, r6, lr}
 801798e:	4b17      	ldr	r3, [pc, #92]	; (80179ec <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8017990:	4605      	mov	r5, r0
 8017992:	4a17      	ldr	r2, [pc, #92]	; (80179f0 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8017994:	2101      	movs	r1, #1
 8017996:	f845 3b04 	str.w	r3, [r5], #4
 801799a:	2300      	movs	r3, #0
 801799c:	6042      	str	r2, [r0, #4]
 801799e:	4604      	mov	r4, r0
 80179a0:	8103      	strh	r3, [r0, #8]
 80179a2:	8143      	strh	r3, [r0, #10]
 80179a4:	8183      	strh	r3, [r0, #12]
 80179a6:	81c3      	strh	r3, [r0, #14]
 80179a8:	8203      	strh	r3, [r0, #16]
 80179aa:	8243      	strh	r3, [r0, #18]
 80179ac:	8283      	strh	r3, [r0, #20]
 80179ae:	82c3      	strh	r3, [r0, #22]
 80179b0:	6203      	str	r3, [r0, #32]
 80179b2:	8483      	strh	r3, [r0, #36]	; 0x24
 80179b4:	84c3      	strh	r3, [r0, #38]	; 0x26
 80179b6:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 80179ba:	6343      	str	r3, [r0, #52]	; 0x34
 80179bc:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 80179c0:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 80179c4:	e9c0 3306 	strd	r3, r3, [r0, #24]
 80179c8:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 80179cc:	4b09      	ldr	r3, [pc, #36]	; (80179f4 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 80179ce:	4628      	mov	r0, r5
 80179d0:	f9b3 6000 	ldrsh.w	r6, [r3]
 80179d4:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80179d6:	4a08      	ldr	r2, [pc, #32]	; (80179f8 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 80179d8:	f9b2 1000 	ldrsh.w	r1, [r2]
 80179dc:	4798      	blx	r3
 80179de:	6863      	ldr	r3, [r4, #4]
 80179e0:	4628      	mov	r0, r5
 80179e2:	4631      	mov	r1, r6
 80179e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80179e6:	4798      	blx	r3
 80179e8:	4620      	mov	r0, r4
 80179ea:	bd70      	pop	{r4, r5, r6, pc}
 80179ec:	0802b39c 	.word	0x0802b39c
 80179f0:	0802a914 	.word	0x0802a914
 80179f4:	20027bba 	.word	0x20027bba
 80179f8:	20027bb8 	.word	0x20027bb8

080179fc <_ZN8touchgfx6Screen4drawEv>:
 80179fc:	4b09      	ldr	r3, [pc, #36]	; (8017a24 <_ZN8touchgfx6Screen4drawEv+0x28>)
 80179fe:	b507      	push	{r0, r1, r2, lr}
 8017a00:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017a04:	2100      	movs	r1, #0
 8017a06:	4b08      	ldr	r3, [pc, #32]	; (8017a28 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8017a08:	9100      	str	r1, [sp, #0]
 8017a0a:	4669      	mov	r1, sp
 8017a0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017a10:	f8ad 2004 	strh.w	r2, [sp, #4]
 8017a14:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017a18:	6803      	ldr	r3, [r0, #0]
 8017a1a:	689b      	ldr	r3, [r3, #8]
 8017a1c:	4798      	blx	r3
 8017a1e:	b003      	add	sp, #12
 8017a20:	f85d fb04 	ldr.w	pc, [sp], #4
 8017a24:	20027bb8 	.word	0x20027bb8
 8017a28:	20027bba 	.word	0x20027bba

08017a2c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8017a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a30:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8017a34:	b089      	sub	sp, #36	; 0x24
 8017a36:	4680      	mov	r8, r0
 8017a38:	460c      	mov	r4, r1
 8017a3a:	2b00      	cmp	r3, #0
 8017a3c:	4615      	mov	r5, r2
 8017a3e:	dd0e      	ble.n	8017a5e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8017a40:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8017a44:	2b00      	cmp	r3, #0
 8017a46:	dd0a      	ble.n	8017a5e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8017a48:	4628      	mov	r0, r5
 8017a4a:	f7ff ff5b 	bl	8017904 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8017a4e:	4621      	mov	r1, r4
 8017a50:	f7fe fadb 	bl	801600a <_ZNK8touchgfx4Rect9intersectERKS0_>
 8017a54:	69eb      	ldr	r3, [r5, #28]
 8017a56:	b928      	cbnz	r0, 8017a64 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8017a58:	461d      	mov	r5, r3
 8017a5a:	2b00      	cmp	r3, #0
 8017a5c:	d1f4      	bne.n	8017a48 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8017a5e:	b009      	add	sp, #36	; 0x24
 8017a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a64:	ae04      	add	r6, sp, #16
 8017a66:	2b00      	cmp	r3, #0
 8017a68:	f000 80b5 	beq.w	8017bd6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8017a6c:	682b      	ldr	r3, [r5, #0]
 8017a6e:	4629      	mov	r1, r5
 8017a70:	a802      	add	r0, sp, #8
 8017a72:	68db      	ldr	r3, [r3, #12]
 8017a74:	4798      	blx	r3
 8017a76:	4628      	mov	r0, r5
 8017a78:	f7ff ff60 	bl	801793c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8017a7c:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8017a80:	4407      	add	r7, r0
 8017a82:	4628      	mov	r0, r5
 8017a84:	f7ff ff6e 	bl	8017964 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8017a88:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8017a8c:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8017a90:	b23f      	sxth	r7, r7
 8017a92:	4418      	add	r0, r3
 8017a94:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8017a98:	4621      	mov	r1, r4
 8017a9a:	f8ad 2014 	strh.w	r2, [sp, #20]
 8017a9e:	f8ad 0012 	strh.w	r0, [sp, #18]
 8017aa2:	4630      	mov	r0, r6
 8017aa4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017aa8:	f8ad 7010 	strh.w	r7, [sp, #16]
 8017aac:	f7f8 fbf2 	bl	8010294 <_ZN8touchgfx4RectaNERKS0_>
 8017ab0:	4628      	mov	r0, r5
 8017ab2:	f7ff ff27 	bl	8017904 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8017ab6:	ab06      	add	r3, sp, #24
 8017ab8:	4602      	mov	r2, r0
 8017aba:	e896 0003 	ldmia.w	r6, {r0, r1}
 8017abe:	e883 0003 	stmia.w	r3, {r0, r1}
 8017ac2:	4611      	mov	r1, r2
 8017ac4:	4618      	mov	r0, r3
 8017ac6:	f7f8 fbe5 	bl	8010294 <_ZN8touchgfx4RectaNERKS0_>
 8017aca:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8017ace:	f9b4 1000 	ldrsh.w	r1, [r4]
 8017ad2:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8017ad6:	4299      	cmp	r1, r3
 8017ad8:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8017adc:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8017ae0:	d10b      	bne.n	8017afa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8017ae2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8017ae6:	4552      	cmp	r2, sl
 8017ae8:	d107      	bne.n	8017afa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8017aea:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8017aee:	455a      	cmp	r2, fp
 8017af0:	d103      	bne.n	8017afa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8017af2:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8017af6:	454a      	cmp	r2, r9
 8017af8:	d06d      	beq.n	8017bd6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8017afa:	f1bb 0f00 	cmp.w	fp, #0
 8017afe:	dd65      	ble.n	8017bcc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8017b00:	f1b9 0f00 	cmp.w	r9, #0
 8017b04:	dd62      	ble.n	8017bcc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8017b06:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8017b0a:	fa1f f08a 	uxth.w	r0, sl
 8017b0e:	4552      	cmp	r2, sl
 8017b10:	9000      	str	r0, [sp, #0]
 8017b12:	da12      	bge.n	8017b3a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8017b14:	9301      	str	r3, [sp, #4]
 8017b16:	9b00      	ldr	r3, [sp, #0]
 8017b18:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8017b1c:	f8ad 2012 	strh.w	r2, [sp, #18]
 8017b20:	1a9a      	subs	r2, r3, r2
 8017b22:	f8ad 1010 	strh.w	r1, [sp, #16]
 8017b26:	4631      	mov	r1, r6
 8017b28:	f8ad 0014 	strh.w	r0, [sp, #20]
 8017b2c:	4640      	mov	r0, r8
 8017b2e:	f8ad 2016 	strh.w	r2, [sp, #22]
 8017b32:	69ea      	ldr	r2, [r5, #28]
 8017b34:	f7ff ff7a 	bl	8017a2c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8017b38:	9b01      	ldr	r3, [sp, #4]
 8017b3a:	f9b4 2000 	ldrsh.w	r2, [r4]
 8017b3e:	b29f      	uxth	r7, r3
 8017b40:	429a      	cmp	r2, r3
 8017b42:	da0d      	bge.n	8017b60 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8017b44:	f8ad 2010 	strh.w	r2, [sp, #16]
 8017b48:	1aba      	subs	r2, r7, r2
 8017b4a:	f8ad a012 	strh.w	sl, [sp, #18]
 8017b4e:	4631      	mov	r1, r6
 8017b50:	f8ad 2014 	strh.w	r2, [sp, #20]
 8017b54:	4640      	mov	r0, r8
 8017b56:	f8ad 9016 	strh.w	r9, [sp, #22]
 8017b5a:	69ea      	ldr	r2, [r5, #28]
 8017b5c:	f7ff ff66 	bl	8017a2c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8017b60:	8822      	ldrh	r2, [r4, #0]
 8017b62:	445f      	add	r7, fp
 8017b64:	88a3      	ldrh	r3, [r4, #4]
 8017b66:	b2bf      	uxth	r7, r7
 8017b68:	4413      	add	r3, r2
 8017b6a:	b23a      	sxth	r2, r7
 8017b6c:	b29b      	uxth	r3, r3
 8017b6e:	b219      	sxth	r1, r3
 8017b70:	4291      	cmp	r1, r2
 8017b72:	dd0d      	ble.n	8017b90 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8017b74:	1bdb      	subs	r3, r3, r7
 8017b76:	f8ad 2010 	strh.w	r2, [sp, #16]
 8017b7a:	f8ad a012 	strh.w	sl, [sp, #18]
 8017b7e:	4631      	mov	r1, r6
 8017b80:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017b84:	4640      	mov	r0, r8
 8017b86:	f8ad 9016 	strh.w	r9, [sp, #22]
 8017b8a:	69ea      	ldr	r2, [r5, #28]
 8017b8c:	f7ff ff4e 	bl	8017a2c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8017b90:	88e2      	ldrh	r2, [r4, #6]
 8017b92:	8863      	ldrh	r3, [r4, #2]
 8017b94:	4413      	add	r3, r2
 8017b96:	9a00      	ldr	r2, [sp, #0]
 8017b98:	444a      	add	r2, r9
 8017b9a:	b29b      	uxth	r3, r3
 8017b9c:	fa1f f982 	uxth.w	r9, r2
 8017ba0:	b219      	sxth	r1, r3
 8017ba2:	fa0f f289 	sxth.w	r2, r9
 8017ba6:	428a      	cmp	r2, r1
 8017ba8:	da15      	bge.n	8017bd6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8017baa:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8017bae:	eba3 0309 	sub.w	r3, r3, r9
 8017bb2:	f9b4 0000 	ldrsh.w	r0, [r4]
 8017bb6:	f8ad 1014 	strh.w	r1, [sp, #20]
 8017bba:	4631      	mov	r1, r6
 8017bbc:	f8ad 0010 	strh.w	r0, [sp, #16]
 8017bc0:	f8ad 2012 	strh.w	r2, [sp, #18]
 8017bc4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017bc8:	69ea      	ldr	r2, [r5, #28]
 8017bca:	e001      	b.n	8017bd0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8017bcc:	69ea      	ldr	r2, [r5, #28]
 8017bce:	4621      	mov	r1, r4
 8017bd0:	4640      	mov	r0, r8
 8017bd2:	f7ff ff2b 	bl	8017a2c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8017bd6:	4628      	mov	r0, r5
 8017bd8:	f7ff fe94 	bl	8017904 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8017bdc:	6861      	ldr	r1, [r4, #4]
 8017bde:	4602      	mov	r2, r0
 8017be0:	4633      	mov	r3, r6
 8017be2:	6820      	ldr	r0, [r4, #0]
 8017be4:	c303      	stmia	r3!, {r0, r1}
 8017be6:	4611      	mov	r1, r2
 8017be8:	4630      	mov	r0, r6
 8017bea:	f7f8 fb53 	bl	8010294 <_ZN8touchgfx4RectaNERKS0_>
 8017bee:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8017bf2:	2b00      	cmp	r3, #0
 8017bf4:	f77f af33 	ble.w	8017a5e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8017bf8:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8017bfc:	2b00      	cmp	r3, #0
 8017bfe:	f77f af2e 	ble.w	8017a5e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8017c02:	4628      	mov	r0, r5
 8017c04:	f7ff fe9a 	bl	801793c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8017c08:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8017c0c:	1a18      	subs	r0, r3, r0
 8017c0e:	f8ad 0010 	strh.w	r0, [sp, #16]
 8017c12:	4628      	mov	r0, r5
 8017c14:	f7ff fea6 	bl	8017964 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8017c18:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8017c1c:	4631      	mov	r1, r6
 8017c1e:	1a18      	subs	r0, r3, r0
 8017c20:	f8ad 0012 	strh.w	r0, [sp, #18]
 8017c24:	4628      	mov	r0, r5
 8017c26:	682b      	ldr	r3, [r5, #0]
 8017c28:	689b      	ldr	r3, [r3, #8]
 8017c2a:	4798      	blx	r3
 8017c2c:	e717      	b.n	8017a5e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

08017c2e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8017c2e:	b570      	push	{r4, r5, r6, lr}
 8017c30:	1d06      	adds	r6, r0, #4
 8017c32:	b086      	sub	sp, #24
 8017c34:	460c      	mov	r4, r1
 8017c36:	2300      	movs	r3, #0
 8017c38:	4631      	mov	r1, r6
 8017c3a:	4605      	mov	r5, r0
 8017c3c:	a802      	add	r0, sp, #8
 8017c3e:	9301      	str	r3, [sp, #4]
 8017c40:	f7ff fbce 	bl	80173e0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017c44:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8017c48:	8822      	ldrh	r2, [r4, #0]
 8017c4a:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8017c4e:	1ad2      	subs	r2, r2, r3
 8017c50:	8863      	ldrh	r3, [r4, #2]
 8017c52:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8017c56:	1a5b      	subs	r3, r3, r1
 8017c58:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8017c5c:	f8ad 2010 	strh.w	r2, [sp, #16]
 8017c60:	aa01      	add	r2, sp, #4
 8017c62:	f8ad 0014 	strh.w	r0, [sp, #20]
 8017c66:	4630      	mov	r0, r6
 8017c68:	f8ad 1016 	strh.w	r1, [sp, #22]
 8017c6c:	a904      	add	r1, sp, #16
 8017c6e:	f8ad 3012 	strh.w	r3, [sp, #18]
 8017c72:	f7f8 fbe7 	bl	8010444 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8017c76:	9a01      	ldr	r2, [sp, #4]
 8017c78:	b11a      	cbz	r2, 8017c82 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 8017c7a:	4621      	mov	r1, r4
 8017c7c:	4628      	mov	r0, r5
 8017c7e:	f7ff fed5 	bl	8017a2c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8017c82:	b006      	add	sp, #24
 8017c84:	bd70      	pop	{r4, r5, r6, pc}

08017c86 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8017c86:	4602      	mov	r2, r0
 8017c88:	b530      	push	{r4, r5, lr}
 8017c8a:	4604      	mov	r4, r0
 8017c8c:	b085      	sub	sp, #20
 8017c8e:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8017c92:	460d      	mov	r5, r1
 8017c94:	466b      	mov	r3, sp
 8017c96:	6851      	ldr	r1, [r2, #4]
 8017c98:	c303      	stmia	r3!, {r0, r1}
 8017c9a:	4629      	mov	r1, r5
 8017c9c:	4668      	mov	r0, sp
 8017c9e:	f7f8 faf9 	bl	8010294 <_ZN8touchgfx4RectaNERKS0_>
 8017ca2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8017ca6:	b12b      	cbz	r3, 8017cb4 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8017ca8:	4669      	mov	r1, sp
 8017caa:	4620      	mov	r0, r4
 8017cac:	f7ff ffbf 	bl	8017c2e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8017cb0:	b005      	add	sp, #20
 8017cb2:	bd30      	pop	{r4, r5, pc}
 8017cb4:	3404      	adds	r4, #4
 8017cb6:	a802      	add	r0, sp, #8
 8017cb8:	4621      	mov	r1, r4
 8017cba:	f7ff fb91 	bl	80173e0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017cbe:	f8bd 3000 	ldrh.w	r3, [sp]
 8017cc2:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8017cc6:	4669      	mov	r1, sp
 8017cc8:	4620      	mov	r0, r4
 8017cca:	1a9b      	subs	r3, r3, r2
 8017ccc:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8017cd0:	f8ad 3000 	strh.w	r3, [sp]
 8017cd4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017cd8:	1a9b      	subs	r3, r3, r2
 8017cda:	f8ad 3002 	strh.w	r3, [sp, #2]
 8017cde:	f7f8 fb78 	bl	80103d2 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8017ce2:	e7e5      	b.n	8017cb0 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08017ce4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8017ce4:	460b      	mov	r3, r1
 8017ce6:	680a      	ldr	r2, [r1, #0]
 8017ce8:	1d01      	adds	r1, r0, #4
 8017cea:	6992      	ldr	r2, [r2, #24]
 8017cec:	4618      	mov	r0, r3
 8017cee:	4710      	bx	r2

08017cf0 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 8017cf0:	4298      	cmp	r0, r3
 8017cf2:	d200      	bcs.n	8017cf6 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
 8017cf4:	b913      	cbnz	r3, 8017cfc <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
 8017cf6:	440a      	add	r2, r1
 8017cf8:	b210      	sxth	r0, r2
 8017cfa:	4770      	bx	lr
 8017cfc:	ee07 0a90 	vmov	s15, r0
 8017d00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8017d04:	ee07 3a90 	vmov	s15, r3
 8017d08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017d0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8017d10:	ee07 2a90 	vmov	s15, r2
 8017d14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8017d18:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8017d1c:	ee07 1a90 	vmov	s15, r1
 8017d20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017d24:	ee37 7a66 	vsub.f32	s14, s14, s13
 8017d28:	ee67 5a07 	vmul.f32	s11, s14, s14
 8017d2c:	eee5 6a87 	vfma.f32	s13, s11, s14
 8017d30:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8017d34:	eee6 7a26 	vfma.f32	s15, s12, s13
 8017d38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d40:	bfcc      	ite	gt
 8017d42:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 8017d46:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 8017d4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017d4e:	ee17 3a90 	vmov	r3, s15
 8017d52:	b218      	sxth	r0, r3
 8017d54:	4770      	bx	lr

08017d56 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>:
 8017d56:	4298      	cmp	r0, r3
 8017d58:	d200      	bcs.n	8017d5c <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0x6>
 8017d5a:	b913      	cbnz	r3, 8017d62 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0xc>
 8017d5c:	440a      	add	r2, r1
 8017d5e:	b210      	sxth	r0, r2
 8017d60:	4770      	bx	lr
 8017d62:	ee07 2a90 	vmov	s15, r2
 8017d66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8017d6a:	ee07 0a90 	vmov	s15, r0
 8017d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017d72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017d76:	ee07 3a10 	vmov	s14, r3
 8017d7a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8017d7e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8017d82:	ee07 1a90 	vmov	s15, r1
 8017d86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017d8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017d8e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8017d92:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d9a:	bfcc      	ite	gt
 8017d9c:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 8017da0:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 8017da4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017da8:	ee17 3a90 	vmov	r3, s15
 8017dac:	b218      	sxth	r0, r3
 8017dae:	4770      	bx	lr

08017db0 <_ZN8touchgfx12TextProviderC1Ev>:
 8017db0:	b538      	push	{r3, r4, r5, lr}
 8017db2:	2500      	movs	r5, #0
 8017db4:	2302      	movs	r3, #2
 8017db6:	4604      	mov	r4, r0
 8017db8:	220e      	movs	r2, #14
 8017dba:	7403      	strb	r3, [r0, #16]
 8017dbc:	4629      	mov	r1, r5
 8017dbe:	6145      	str	r5, [r0, #20]
 8017dc0:	7605      	strb	r5, [r0, #24]
 8017dc2:	83c5      	strh	r5, [r0, #30]
 8017dc4:	8405      	strh	r5, [r0, #32]
 8017dc6:	86c5      	strh	r5, [r0, #54]	; 0x36
 8017dc8:	8705      	strh	r5, [r0, #56]	; 0x38
 8017dca:	87c5      	strh	r5, [r0, #62]	; 0x3e
 8017dcc:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 8017dd0:	e9c0 5500 	strd	r5, r5, [r0]
 8017dd4:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 8017dd8:	304c      	adds	r0, #76	; 0x4c
 8017dda:	f00e f89f 	bl	8025f1c <memset>
 8017dde:	2301      	movs	r3, #1
 8017de0:	4620      	mov	r0, r4
 8017de2:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 8017de6:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8017dea:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 8017dee:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 8017df2:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 8017df6:	f7ef fb07 	bl	8007408 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8017dfa:	4620      	mov	r0, r4
 8017dfc:	bd38      	pop	{r3, r4, r5, pc}

08017dfe <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8017dfe:	b530      	push	{r4, r5, lr}
 8017e00:	2500      	movs	r5, #0
 8017e02:	2401      	movs	r4, #1
 8017e04:	6843      	ldr	r3, [r0, #4]
 8017e06:	b913      	cbnz	r3, 8017e0e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8017e08:	6803      	ldr	r3, [r0, #0]
 8017e0a:	b313      	cbz	r3, 8017e52 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8017e0c:	6043      	str	r3, [r0, #4]
 8017e0e:	7e03      	ldrb	r3, [r0, #24]
 8017e10:	b143      	cbz	r3, 8017e24 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8017e12:	6943      	ldr	r3, [r0, #20]
 8017e14:	b12b      	cbz	r3, 8017e22 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8017e16:	881a      	ldrh	r2, [r3, #0]
 8017e18:	b11a      	cbz	r2, 8017e22 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8017e1a:	1c9a      	adds	r2, r3, #2
 8017e1c:	6142      	str	r2, [r0, #20]
 8017e1e:	8818      	ldrh	r0, [r3, #0]
 8017e20:	bd30      	pop	{r4, r5, pc}
 8017e22:	7605      	strb	r5, [r0, #24]
 8017e24:	6843      	ldr	r3, [r0, #4]
 8017e26:	8819      	ldrh	r1, [r3, #0]
 8017e28:	b199      	cbz	r1, 8017e52 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8017e2a:	1c9a      	adds	r2, r3, #2
 8017e2c:	2902      	cmp	r1, #2
 8017e2e:	6042      	str	r2, [r0, #4]
 8017e30:	d1f5      	bne.n	8017e1e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8017e32:	7c03      	ldrb	r3, [r0, #16]
 8017e34:	2b01      	cmp	r3, #1
 8017e36:	d8e5      	bhi.n	8017e04 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8017e38:	1c5a      	adds	r2, r3, #1
 8017e3a:	3302      	adds	r3, #2
 8017e3c:	7402      	strb	r2, [r0, #16]
 8017e3e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8017e42:	6143      	str	r3, [r0, #20]
 8017e44:	2b00      	cmp	r3, #0
 8017e46:	d0dd      	beq.n	8017e04 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8017e48:	881b      	ldrh	r3, [r3, #0]
 8017e4a:	2b00      	cmp	r3, #0
 8017e4c:	d0da      	beq.n	8017e04 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8017e4e:	7604      	strb	r4, [r0, #24]
 8017e50:	e7d8      	b.n	8017e04 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8017e52:	2000      	movs	r0, #0
 8017e54:	e7e4      	b.n	8017e20 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08017e56 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8017e56:	6001      	str	r1, [r0, #0]
 8017e58:	2100      	movs	r1, #0
 8017e5a:	b430      	push	{r4, r5}
 8017e5c:	6041      	str	r1, [r0, #4]
 8017e5e:	6815      	ldr	r5, [r2, #0]
 8017e60:	6085      	str	r5, [r0, #8]
 8017e62:	6852      	ldr	r2, [r2, #4]
 8017e64:	6443      	str	r3, [r0, #68]	; 0x44
 8017e66:	9b02      	ldr	r3, [sp, #8]
 8017e68:	60c2      	str	r2, [r0, #12]
 8017e6a:	7401      	strb	r1, [r0, #16]
 8017e6c:	6141      	str	r1, [r0, #20]
 8017e6e:	7601      	strb	r1, [r0, #24]
 8017e70:	8701      	strh	r1, [r0, #56]	; 0x38
 8017e72:	8401      	strh	r1, [r0, #32]
 8017e74:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8017e78:	6483      	str	r3, [r0, #72]	; 0x48
 8017e7a:	bc30      	pop	{r4, r5}
 8017e7c:	f7ef bac4 	b.w	8007408 <_ZN8touchgfx12TextProvider18initializeInternalEv>

08017e80 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8017e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017e82:	4605      	mov	r5, r0
 8017e84:	4608      	mov	r0, r1
 8017e86:	b1f1      	cbz	r1, 8017ec6 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 8017e88:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 8017e8c:	460b      	mov	r3, r1
 8017e8e:	f101 0708 	add.w	r7, r1, #8
 8017e92:	4622      	mov	r2, r4
 8017e94:	6818      	ldr	r0, [r3, #0]
 8017e96:	3308      	adds	r3, #8
 8017e98:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8017e9c:	4626      	mov	r6, r4
 8017e9e:	42bb      	cmp	r3, r7
 8017ea0:	c603      	stmia	r6!, {r0, r1}
 8017ea2:	4634      	mov	r4, r6
 8017ea4:	d1f6      	bne.n	8017e94 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8017ea6:	6818      	ldr	r0, [r3, #0]
 8017ea8:	6030      	str	r0, [r6, #0]
 8017eaa:	4610      	mov	r0, r2
 8017eac:	889b      	ldrh	r3, [r3, #4]
 8017eae:	80b3      	strh	r3, [r6, #4]
 8017eb0:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 8017eb4:	015b      	lsls	r3, r3, #5
 8017eb6:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8017eba:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 8017ebe:	430b      	orrs	r3, r1
 8017ec0:	425b      	negs	r3, r3
 8017ec2:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 8017ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017ec8 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8017ec8:	b538      	push	{r3, r4, r5, lr}
 8017eca:	460c      	mov	r4, r1
 8017ecc:	6811      	ldr	r1, [r2, #0]
 8017ece:	4610      	mov	r0, r2
 8017ed0:	68cd      	ldr	r5, [r1, #12]
 8017ed2:	4619      	mov	r1, r3
 8017ed4:	47a8      	blx	r5
 8017ed6:	2800      	cmp	r0, #0
 8017ed8:	bf08      	it	eq
 8017eda:	4620      	moveq	r0, r4
 8017edc:	bd38      	pop	{r3, r4, r5, pc}
	...

08017ee0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8017ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ee2:	4604      	mov	r4, r0
 8017ee4:	4615      	mov	r5, r2
 8017ee6:	4608      	mov	r0, r1
 8017ee8:	b93a      	cbnz	r2, 8017efa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8017eea:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8017eee:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8017ef2:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 8017ef6:	4628      	mov	r0, r5
 8017ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017efa:	f892 c00d 	ldrb.w	ip, [r2, #13]
 8017efe:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 8017f02:	8893      	ldrh	r3, [r2, #4]
 8017f04:	ea4f 160c 	mov.w	r6, ip, lsl #4
 8017f08:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8017f0c:	79ee      	ldrb	r6, [r5, #7]
 8017f0e:	4316      	orrs	r6, r2
 8017f10:	19da      	adds	r2, r3, r7
 8017f12:	b291      	uxth	r1, r2
 8017f14:	b2b7      	uxth	r7, r6
 8017f16:	291d      	cmp	r1, #29
 8017f18:	d87b      	bhi.n	8018012 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 8017f1a:	2201      	movs	r2, #1
 8017f1c:	10f6      	asrs	r6, r6, #3
 8017f1e:	408a      	lsls	r2, r1
 8017f20:	4974      	ldr	r1, [pc, #464]	; (80180f4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 8017f22:	420a      	tst	r2, r1
 8017f24:	d12e      	bne.n	8017f84 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 8017f26:	f412 7f60 	tst.w	r2, #896	; 0x380
 8017f2a:	d072      	beq.n	8018012 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 8017f2c:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 8017f30:	462b      	mov	r3, r5
 8017f32:	f105 0e08 	add.w	lr, r5, #8
 8017f36:	4615      	mov	r5, r2
 8017f38:	6818      	ldr	r0, [r3, #0]
 8017f3a:	3308      	adds	r3, #8
 8017f3c:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8017f40:	4694      	mov	ip, r2
 8017f42:	4573      	cmp	r3, lr
 8017f44:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8017f48:	4662      	mov	r2, ip
 8017f4a:	d1f5      	bne.n	8017f38 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 8017f4c:	6818      	ldr	r0, [r3, #0]
 8017f4e:	f8cc 0000 	str.w	r0, [ip]
 8017f52:	889b      	ldrh	r3, [r3, #4]
 8017f54:	f8ac 3004 	strh.w	r3, [ip, #4]
 8017f58:	b2b3      	uxth	r3, r6
 8017f5a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8017f5e:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 8017f62:	1aca      	subs	r2, r1, r3
 8017f64:	1bcf      	subs	r7, r1, r7
 8017f66:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 8017f6a:	b292      	uxth	r2, r2
 8017f6c:	1afb      	subs	r3, r7, r3
 8017f6e:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 8017f72:	10d2      	asrs	r2, r2, #3
 8017f74:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8017f78:	4302      	orrs	r2, r0
 8017f7a:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 8017f7e:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8017f82:	e7b8      	b.n	8017ef6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8017f84:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8017f86:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8017f8a:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 8017f8c:	f640 6333 	movw	r3, #3635	; 0xe33
 8017f90:	4299      	cmp	r1, r3
 8017f92:	d110      	bne.n	8017fb6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 8017f94:	6803      	ldr	r3, [r0, #0]
 8017f96:	68db      	ldr	r3, [r3, #12]
 8017f98:	4798      	blx	r3
 8017f9a:	7b41      	ldrb	r1, [r0, #13]
 8017f9c:	00cb      	lsls	r3, r1, #3
 8017f9e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8017fa2:	7a03      	ldrb	r3, [r0, #8]
 8017fa4:	0648      	lsls	r0, r1, #25
 8017fa6:	ea43 0302 	orr.w	r3, r3, r2
 8017faa:	bf44      	itt	mi
 8017fac:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8017fb0:	b21b      	sxthmi	r3, r3
 8017fb2:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8017fb6:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8017fba:	462a      	mov	r2, r5
 8017fbc:	f105 0c08 	add.w	ip, r5, #8
 8017fc0:	443b      	add	r3, r7
 8017fc2:	4433      	add	r3, r6
 8017fc4:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 8017fc8:	b29b      	uxth	r3, r3
 8017fca:	4635      	mov	r5, r6
 8017fcc:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8017fd0:	6810      	ldr	r0, [r2, #0]
 8017fd2:	3208      	adds	r2, #8
 8017fd4:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8017fd8:	4637      	mov	r7, r6
 8017fda:	4562      	cmp	r2, ip
 8017fdc:	c703      	stmia	r7!, {r0, r1}
 8017fde:	463e      	mov	r6, r7
 8017fe0:	d1f6      	bne.n	8017fd0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 8017fe2:	6810      	ldr	r0, [r2, #0]
 8017fe4:	6038      	str	r0, [r7, #0]
 8017fe6:	8892      	ldrh	r2, [r2, #4]
 8017fe8:	80ba      	strh	r2, [r7, #4]
 8017fea:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8017fee:	10db      	asrs	r3, r3, #3
 8017ff0:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8017ff4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8017ff8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8017ffc:	4313      	orrs	r3, r2
 8017ffe:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 8018002:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8018006:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801800a:	1a9b      	subs	r3, r3, r2
 801800c:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8018010:	e771      	b.n	8017ef6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8018012:	f023 0204 	bic.w	r2, r3, #4
 8018016:	f640 611b 	movw	r1, #3611	; 0xe1b
 801801a:	428a      	cmp	r2, r1
 801801c:	d003      	beq.n	8018026 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 801801e:	f640 621d 	movw	r2, #3613	; 0xe1d
 8018022:	4293      	cmp	r3, r2
 8018024:	d120      	bne.n	8018068 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 8018026:	3b01      	subs	r3, #1
 8018028:	4602      	mov	r2, r0
 801802a:	4629      	mov	r1, r5
 801802c:	4620      	mov	r0, r4
 801802e:	b29b      	uxth	r3, r3
 8018030:	f7ff ff4a 	bl	8017ec8 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8018034:	7b41      	ldrb	r1, [r0, #13]
 8018036:	00cb      	lsls	r3, r1, #3
 8018038:	0649      	lsls	r1, r1, #25
 801803a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801803e:	7a03      	ldrb	r3, [r0, #8]
 8018040:	ea43 0302 	orr.w	r3, r3, r2
 8018044:	bf44      	itt	mi
 8018046:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801804a:	b21b      	sxthmi	r3, r3
 801804c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8018050:	7b6b      	ldrb	r3, [r5, #13]
 8018052:	7aaa      	ldrb	r2, [r5, #10]
 8018054:	005b      	lsls	r3, r3, #1
 8018056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801805a:	4313      	orrs	r3, r2
 801805c:	115a      	asrs	r2, r3, #5
 801805e:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8018062:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8018066:	e035      	b.n	80180d4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 8018068:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801806c:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8018070:	f402 7180 	and.w	r1, r2, #256	; 0x100
 8018074:	7a2a      	ldrb	r2, [r5, #8]
 8018076:	ea42 0201 	orr.w	r2, r2, r1
 801807a:	f640 6109 	movw	r1, #3593	; 0xe09
 801807e:	bf1c      	itt	ne
 8018080:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 8018084:	b212      	sxthne	r2, r2
 8018086:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801808a:	f023 0210 	bic.w	r2, r3, #16
 801808e:	428a      	cmp	r2, r1
 8018090:	d003      	beq.n	801809a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 8018092:	f640 6213 	movw	r2, #3603	; 0xe13
 8018096:	4293      	cmp	r3, r2
 8018098:	d129      	bne.n	80180ee <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 801809a:	7b6e      	ldrb	r6, [r5, #13]
 801809c:	4629      	mov	r1, r5
 801809e:	0076      	lsls	r6, r6, #1
 80180a0:	f406 7280 	and.w	r2, r6, #256	; 0x100
 80180a4:	7aae      	ldrb	r6, [r5, #10]
 80180a6:	4316      	orrs	r6, r2
 80180a8:	f640 6213 	movw	r2, #3603	; 0xe13
 80180ac:	4293      	cmp	r3, r2
 80180ae:	4602      	mov	r2, r0
 80180b0:	4620      	mov	r0, r4
 80180b2:	bf16      	itet	ne
 80180b4:	f103 33ff 	addne.w	r3, r3, #4294967295
 80180b8:	f640 630c 	movweq	r3, #3596	; 0xe0c
 80180bc:	b29b      	uxthne	r3, r3
 80180be:	f7ff ff03 	bl	8017ec8 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80180c2:	7b43      	ldrb	r3, [r0, #13]
 80180c4:	7a82      	ldrb	r2, [r0, #10]
 80180c6:	005b      	lsls	r3, r3, #1
 80180c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80180cc:	4313      	orrs	r3, r2
 80180ce:	1af6      	subs	r6, r6, r3
 80180d0:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 80180d4:	7b69      	ldrb	r1, [r5, #13]
 80180d6:	00cb      	lsls	r3, r1, #3
 80180d8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80180dc:	7a2b      	ldrb	r3, [r5, #8]
 80180de:	4313      	orrs	r3, r2
 80180e0:	064a      	lsls	r2, r1, #25
 80180e2:	bf44      	itt	mi
 80180e4:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80180e8:	b21b      	sxthmi	r3, r3
 80180ea:	1bdb      	subs	r3, r3, r7
 80180ec:	e747      	b.n	8017f7e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 80180ee:	2300      	movs	r3, #0
 80180f0:	e7b7      	b.n	8018062 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 80180f2:	bf00      	nop
 80180f4:	3fc00079 	.word	0x3fc00079

080180f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 80180f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80180fc:	4604      	mov	r4, r0
 80180fe:	b942      	cbnz	r2, 8018112 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8018100:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018104:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 8018108:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 801810c:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8018110:	e047      	b.n	80181a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8018112:	7b51      	ldrb	r1, [r2, #13]
 8018114:	8893      	ldrh	r3, [r2, #4]
 8018116:	010d      	lsls	r5, r1, #4
 8018118:	f405 7080 	and.w	r0, r5, #256	; 0x100
 801811c:	79d5      	ldrb	r5, [r2, #7]
 801811e:	4305      	orrs	r5, r0
 8018120:	2d04      	cmp	r5, #4
 8018122:	bfcc      	ite	gt
 8018124:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 8018128:	f04f 0e01 	movle.w	lr, #1
 801812c:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 8018130:	f200 80ab 	bhi.w	801828a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 8018134:	f240 60e7 	movw	r0, #1767	; 0x6e7
 8018138:	4283      	cmp	r3, r0
 801813a:	d216      	bcs.n	801816a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801813c:	f240 605b 	movw	r0, #1627	; 0x65b
 8018140:	4283      	cmp	r3, r0
 8018142:	d859      	bhi.n	80181f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 8018144:	f240 6057 	movw	r0, #1623	; 0x657
 8018148:	4283      	cmp	r3, r0
 801814a:	d20e      	bcs.n	801816a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801814c:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8018150:	d24a      	bcs.n	80181e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 8018152:	f240 604e 	movw	r0, #1614	; 0x64e
 8018156:	4283      	cmp	r3, r0
 8018158:	d207      	bcs.n	801816a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801815a:	f240 601a 	movw	r0, #1562	; 0x61a
 801815e:	4283      	cmp	r3, r0
 8018160:	d02a      	beq.n	80181b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018162:	d821      	bhi.n	80181a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 8018164:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8018168:	d35b      	bcc.n	8018222 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801816a:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 801816e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8018172:	f040 80d0 	bne.w	8018316 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8018176:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 801817a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801817e:	f040 80ca 	bne.w	8018316 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8018182:	00cb      	lsls	r3, r1, #3
 8018184:	0649      	lsls	r1, r1, #25
 8018186:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801818a:	7a13      	ldrb	r3, [r2, #8]
 801818c:	ea43 0300 	orr.w	r3, r3, r0
 8018190:	bf44      	itt	mi
 8018192:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018196:	b21b      	sxthmi	r3, r3
 8018198:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801819c:	1b5d      	subs	r5, r3, r5
 801819e:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80181a2:	4610      	mov	r0, r2
 80181a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80181a8:	f240 604b 	movw	r0, #1611	; 0x64b
 80181ac:	4283      	cmp	r3, r0
 80181ae:	d338      	bcc.n	8018222 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80181b0:	f240 604c 	movw	r0, #1612	; 0x64c
 80181b4:	4283      	cmp	r3, r0
 80181b6:	d9d8      	bls.n	801816a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80181b8:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 80181bc:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 80181c0:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80181c4:	f040 80f3 	bne.w	80183ae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 80181c8:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80181cc:	f040 80ef 	bne.w	80183ae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 80181d0:	00cb      	lsls	r3, r1, #3
 80181d2:	064e      	lsls	r6, r1, #25
 80181d4:	f403 7080 	and.w	r0, r3, #256	; 0x100
 80181d8:	7a13      	ldrb	r3, [r2, #8]
 80181da:	ea43 0300 	orr.w	r3, r3, r0
 80181de:	bf44      	itt	mi
 80181e0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80181e4:	b21b      	sxthmi	r3, r3
 80181e6:	e7d9      	b.n	801819c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 80181e8:	f240 6054 	movw	r0, #1620	; 0x654
 80181ec:	4283      	cmp	r3, r0
 80181ee:	d8e3      	bhi.n	80181b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80181f0:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 80181f4:	d9e0      	bls.n	80181b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80181f6:	e7b8      	b.n	801816a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80181f8:	f240 6074 	movw	r0, #1652	; 0x674
 80181fc:	4283      	cmp	r3, r0
 80181fe:	d0b4      	beq.n	801816a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018200:	d82d      	bhi.n	801825e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 8018202:	f240 605e 	movw	r0, #1630	; 0x65e
 8018206:	4283      	cmp	r3, r0
 8018208:	d804      	bhi.n	8018214 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801820a:	f240 605d 	movw	r0, #1629	; 0x65d
 801820e:	4283      	cmp	r3, r0
 8018210:	d3d2      	bcc.n	80181b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018212:	e7aa      	b.n	801816a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018214:	f240 605f 	movw	r0, #1631	; 0x65f
 8018218:	4283      	cmp	r3, r0
 801821a:	d0cd      	beq.n	80181b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801821c:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 8018220:	d0a3      	beq.n	801816a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018222:	00cb      	lsls	r3, r1, #3
 8018224:	0649      	lsls	r1, r1, #25
 8018226:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801822a:	7a13      	ldrb	r3, [r2, #8]
 801822c:	ea43 0300 	orr.w	r3, r3, r0
 8018230:	bf44      	itt	mi
 8018232:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018236:	b21b      	sxthmi	r3, r3
 8018238:	1b5d      	subs	r5, r3, r5
 801823a:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801823e:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8018242:	7b53      	ldrb	r3, [r2, #13]
 8018244:	015b      	lsls	r3, r3, #5
 8018246:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801824a:	7993      	ldrb	r3, [r2, #6]
 801824c:	430b      	orrs	r3, r1
 801824e:	2105      	movs	r1, #5
 8018250:	005b      	lsls	r3, r3, #1
 8018252:	fb93 f3f1 	sdiv	r3, r3, r1
 8018256:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801825a:	440b      	add	r3, r1
 801825c:	e756      	b.n	801810c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801825e:	f240 60e2 	movw	r0, #1762	; 0x6e2
 8018262:	4283      	cmp	r3, r0
 8018264:	d809      	bhi.n	801827a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 8018266:	f240 60df 	movw	r0, #1759	; 0x6df
 801826a:	4283      	cmp	r3, r0
 801826c:	f4bf af7d 	bcs.w	801816a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018270:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 8018274:	2b05      	cmp	r3, #5
 8018276:	d8d4      	bhi.n	8018222 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8018278:	e777      	b.n	801816a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801827a:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801827e:	4283      	cmp	r3, r0
 8018280:	d09a      	beq.n	80181b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018282:	f240 60e4 	movw	r0, #1764	; 0x6e4
 8018286:	4283      	cmp	r3, r0
 8018288:	e7ca      	b.n	8018220 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801828a:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801828e:	d22b      	bcs.n	80182e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 8018290:	f640 00ed 	movw	r0, #2285	; 0x8ed
 8018294:	4283      	cmp	r3, r0
 8018296:	d28f      	bcs.n	80181b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018298:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801829c:	4283      	cmp	r3, r0
 801829e:	d816      	bhi.n	80182ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 80182a0:	f640 00e4 	movw	r0, #2276	; 0x8e4
 80182a4:	4283      	cmp	r3, r0
 80182a6:	f4bf af60 	bcs.w	801816a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80182aa:	f240 60ec 	movw	r0, #1772	; 0x6ec
 80182ae:	4283      	cmp	r3, r0
 80182b0:	d80a      	bhi.n	80182c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 80182b2:	f240 60eb 	movw	r0, #1771	; 0x6eb
 80182b6:	4283      	cmp	r3, r0
 80182b8:	f4bf af57 	bcs.w	801816a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80182bc:	f240 60ea 	movw	r0, #1770	; 0x6ea
 80182c0:	4283      	cmp	r3, r0
 80182c2:	f43f af79 	beq.w	80181b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80182c6:	e7ac      	b.n	8018222 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80182c8:	f240 60ed 	movw	r0, #1773	; 0x6ed
 80182cc:	e7f8      	b.n	80182c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 80182ce:	f640 00e8 	movw	r0, #2280	; 0x8e8
 80182d2:	4283      	cmp	r3, r0
 80182d4:	d802      	bhi.n	80182dc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 80182d6:	f640 00e7 	movw	r0, #2279	; 0x8e7
 80182da:	e798      	b.n	801820e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 80182dc:	f640 00e9 	movw	r0, #2281	; 0x8e9
 80182e0:	4283      	cmp	r3, r0
 80182e2:	f47f af42 	bne.w	801816a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80182e6:	e767      	b.n	80181b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80182e8:	f640 00f6 	movw	r0, #2294	; 0x8f6
 80182ec:	4283      	cmp	r3, r0
 80182ee:	f43f af63 	beq.w	80181b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80182f2:	d802      	bhi.n	80182fa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 80182f4:	f640 00f2 	movw	r0, #2290	; 0x8f2
 80182f8:	e7f2      	b.n	80182e0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 80182fa:	f640 00fa 	movw	r0, #2298	; 0x8fa
 80182fe:	4283      	cmp	r3, r0
 8018300:	d805      	bhi.n	801830e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 8018302:	f640 00f9 	movw	r0, #2297	; 0x8f9
 8018306:	4283      	cmp	r3, r0
 8018308:	f4ff af2f 	bcc.w	801816a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801830c:	e754      	b.n	80181b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801830e:	f640 00fe 	movw	r0, #2302	; 0x8fe
 8018312:	4283      	cmp	r3, r0
 8018314:	e7af      	b.n	8018276 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 8018316:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801831a:	4617      	mov	r7, r2
 801831c:	f102 0808 	add.w	r8, r2, #8
 8018320:	4666      	mov	r6, ip
 8018322:	6838      	ldr	r0, [r7, #0]
 8018324:	3708      	adds	r7, #8
 8018326:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801832a:	46e6      	mov	lr, ip
 801832c:	4547      	cmp	r7, r8
 801832e:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8018332:	46f4      	mov	ip, lr
 8018334:	d1f5      	bne.n	8018322 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 8018336:	6838      	ldr	r0, [r7, #0]
 8018338:	f8ce 0000 	str.w	r0, [lr]
 801833c:	88b9      	ldrh	r1, [r7, #4]
 801833e:	f8ae 1004 	strh.w	r1, [lr, #4]
 8018342:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8018346:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801834a:	d009      	beq.n	8018360 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 801834c:	7b51      	ldrb	r1, [r2, #13]
 801834e:	7992      	ldrb	r2, [r2, #6]
 8018350:	0149      	lsls	r1, r1, #5
 8018352:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8018356:	4311      	orrs	r1, r2
 8018358:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801835c:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8018360:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8018364:	b2ad      	uxth	r5, r5
 8018366:	d00d      	beq.n	8018384 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 8018368:	442b      	add	r3, r5
 801836a:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801836e:	b29b      	uxth	r3, r3
 8018370:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8018374:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8018378:	10db      	asrs	r3, r3, #3
 801837a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801837e:	4313      	orrs	r3, r2
 8018380:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8018384:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8018388:	00cb      	lsls	r3, r1, #3
 801838a:	064f      	lsls	r7, r1, #25
 801838c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018390:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8018394:	ea43 0302 	orr.w	r3, r3, r2
 8018398:	bf44      	itt	mi
 801839a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801839e:	b21b      	sxthmi	r3, r3
 80183a0:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80183a4:	1b5b      	subs	r3, r3, r5
 80183a6:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 80183aa:	4632      	mov	r2, r6
 80183ac:	e6f9      	b.n	80181a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 80183ae:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 80183b2:	4617      	mov	r7, r2
 80183b4:	f102 0908 	add.w	r9, r2, #8
 80183b8:	4666      	mov	r6, ip
 80183ba:	6838      	ldr	r0, [r7, #0]
 80183bc:	3708      	adds	r7, #8
 80183be:	f857 1c04 	ldr.w	r1, [r7, #-4]
 80183c2:	46e0      	mov	r8, ip
 80183c4:	454f      	cmp	r7, r9
 80183c6:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 80183ca:	46c4      	mov	ip, r8
 80183cc:	d1f5      	bne.n	80183ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 80183ce:	6838      	ldr	r0, [r7, #0]
 80183d0:	f8c8 0000 	str.w	r0, [r8]
 80183d4:	88b9      	ldrh	r1, [r7, #4]
 80183d6:	f8a8 1004 	strh.w	r1, [r8, #4]
 80183da:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 80183de:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80183e2:	d009      	beq.n	80183f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 80183e4:	7b51      	ldrb	r1, [r2, #13]
 80183e6:	7992      	ldrb	r2, [r2, #6]
 80183e8:	0149      	lsls	r1, r1, #5
 80183ea:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80183ee:	4311      	orrs	r1, r2
 80183f0:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 80183f4:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 80183f8:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80183fc:	d00e      	beq.n	801841c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 80183fe:	eba3 030e 	sub.w	r3, r3, lr
 8018402:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8018406:	b29b      	uxth	r3, r3
 8018408:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801840c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8018410:	10db      	asrs	r3, r3, #3
 8018412:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8018416:	4313      	orrs	r3, r2
 8018418:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801841c:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8018420:	00cb      	lsls	r3, r1, #3
 8018422:	0648      	lsls	r0, r1, #25
 8018424:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018428:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801842c:	ea43 0302 	orr.w	r3, r3, r2
 8018430:	bf44      	itt	mi
 8018432:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018436:	b21b      	sxthmi	r3, r3
 8018438:	1b5d      	subs	r5, r3, r5
 801843a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801843e:	e7b4      	b.n	80183aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

08018440 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8018440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018444:	461e      	mov	r6, r3
 8018446:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8018448:	4604      	mov	r4, r0
 801844a:	4617      	mov	r7, r2
 801844c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8018450:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8018454:	f7ee ff96 	bl	8007384 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018458:	4605      	mov	r5, r0
 801845a:	b918      	cbnz	r0, 8018464 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 801845c:	6030      	str	r0, [r6, #0]
 801845e:	4628      	mov	r0, r5
 8018460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018464:	683b      	ldr	r3, [r7, #0]
 8018466:	4601      	mov	r1, r0
 8018468:	4638      	mov	r0, r7
 801846a:	68db      	ldr	r3, [r3, #12]
 801846c:	4798      	blx	r3
 801846e:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8018472:	4602      	mov	r2, r0
 8018474:	6030      	str	r0, [r6, #0]
 8018476:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801847a:	d213      	bcs.n	80184a4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801847c:	4643      	mov	r3, r8
 801847e:	4639      	mov	r1, r7
 8018480:	4620      	mov	r0, r4
 8018482:	f7ff fe39 	bl	80180f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8018486:	6030      	str	r0, [r6, #0]
 8018488:	6833      	ldr	r3, [r6, #0]
 801848a:	b143      	cbz	r3, 801849e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 801848c:	7b5a      	ldrb	r2, [r3, #13]
 801848e:	7a9b      	ldrb	r3, [r3, #10]
 8018490:	0052      	lsls	r2, r2, #1
 8018492:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8018496:	4313      	orrs	r3, r2
 8018498:	bf0c      	ite	eq
 801849a:	2301      	moveq	r3, #1
 801849c:	2300      	movne	r3, #0
 801849e:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 80184a2:	e7dc      	b.n	801845e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 80184a4:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 80184a8:	b29b      	uxth	r3, r3
 80184aa:	2b7f      	cmp	r3, #127	; 0x7f
 80184ac:	d804      	bhi.n	80184b8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 80184ae:	4639      	mov	r1, r7
 80184b0:	4620      	mov	r0, r4
 80184b2:	f7ff fd15 	bl	8017ee0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 80184b6:	e7e6      	b.n	8018486 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 80184b8:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 80184bc:	2b00      	cmp	r3, #0
 80184be:	d0e3      	beq.n	8018488 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 80184c0:	f640 1302 	movw	r3, #2306	; 0x902
 80184c4:	429d      	cmp	r5, r3
 80184c6:	d1df      	bne.n	8018488 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 80184c8:	4601      	mov	r1, r0
 80184ca:	4620      	mov	r0, r4
 80184cc:	f7ff fcd8 	bl	8017e80 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 80184d0:	e7d9      	b.n	8018486 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

080184d2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 80184d2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80184d6:	461e      	mov	r6, r3
 80184d8:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80184da:	4604      	mov	r4, r0
 80184dc:	4617      	mov	r7, r2
 80184de:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80184e2:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 80184e6:	f7ee ff4d 	bl	8007384 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80184ea:	4605      	mov	r5, r0
 80184ec:	b918      	cbnz	r0, 80184f6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 80184ee:	6030      	str	r0, [r6, #0]
 80184f0:	4628      	mov	r0, r5
 80184f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80184f6:	683b      	ldr	r3, [r7, #0]
 80184f8:	4601      	mov	r1, r0
 80184fa:	4638      	mov	r0, r7
 80184fc:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8018500:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8018504:	47c8      	blx	r9
 8018506:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801850a:	4602      	mov	r2, r0
 801850c:	6030      	str	r0, [r6, #0]
 801850e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8018512:	d213      	bcs.n	801853c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 8018514:	4643      	mov	r3, r8
 8018516:	4639      	mov	r1, r7
 8018518:	4620      	mov	r0, r4
 801851a:	f7ff fded 	bl	80180f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801851e:	6030      	str	r0, [r6, #0]
 8018520:	6833      	ldr	r3, [r6, #0]
 8018522:	b143      	cbz	r3, 8018536 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 8018524:	7b5a      	ldrb	r2, [r3, #13]
 8018526:	7a9b      	ldrb	r3, [r3, #10]
 8018528:	0052      	lsls	r2, r2, #1
 801852a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801852e:	4313      	orrs	r3, r2
 8018530:	bf0c      	ite	eq
 8018532:	2301      	moveq	r3, #1
 8018534:	2300      	movne	r3, #0
 8018536:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801853a:	e7d9      	b.n	80184f0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 801853c:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8018540:	b29b      	uxth	r3, r3
 8018542:	2b7f      	cmp	r3, #127	; 0x7f
 8018544:	d804      	bhi.n	8018550 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 8018546:	4639      	mov	r1, r7
 8018548:	4620      	mov	r0, r4
 801854a:	f7ff fcc9 	bl	8017ee0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801854e:	e7e6      	b.n	801851e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 8018550:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8018554:	2b00      	cmp	r3, #0
 8018556:	d0e3      	beq.n	8018520 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8018558:	f640 1302 	movw	r3, #2306	; 0x902
 801855c:	429d      	cmp	r5, r3
 801855e:	d1df      	bne.n	8018520 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8018560:	4601      	mov	r1, r0
 8018562:	4620      	mov	r0, r4
 8018564:	f7ff fc8c 	bl	8017e80 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8018568:	e7d9      	b.n	801851e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

0801856a <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801856a:	b510      	push	{r4, lr}
 801856c:	4604      	mov	r4, r0
 801856e:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8018572:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8018574:	b1e1      	cbz	r1, 80185b0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 8018576:	2b0a      	cmp	r3, #10
 8018578:	d02d      	beq.n	80185d6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801857a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801857c:	3901      	subs	r1, #1
 801857e:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8018582:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 8018584:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 8018588:	1c51      	adds	r1, r2, #1
 801858a:	b289      	uxth	r1, r1
 801858c:	2901      	cmp	r1, #1
 801858e:	bf8a      	itet	hi
 8018590:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8018594:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 8018596:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 8018598:	1c5a      	adds	r2, r3, #1
 801859a:	8722      	strh	r2, [r4, #56]	; 0x38
 801859c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801859e:	4413      	add	r3, r2
 80185a0:	b29b      	uxth	r3, r3
 80185a2:	2b09      	cmp	r3, #9
 80185a4:	bf88      	it	hi
 80185a6:	3b0a      	subhi	r3, #10
 80185a8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80185ac:	8458      	strh	r0, [r3, #34]	; 0x22
 80185ae:	e7de      	b.n	801856e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 80185b0:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80185b2:	2b0a      	cmp	r3, #10
 80185b4:	d00f      	beq.n	80185d6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 80185b6:	4620      	mov	r0, r4
 80185b8:	f7ff fc21 	bl	8017dfe <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 80185bc:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80185be:	1c5a      	adds	r2, r3, #1
 80185c0:	8722      	strh	r2, [r4, #56]	; 0x38
 80185c2:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80185c4:	4413      	add	r3, r2
 80185c6:	b29b      	uxth	r3, r3
 80185c8:	2b09      	cmp	r3, #9
 80185ca:	bf88      	it	hi
 80185cc:	3b0a      	subhi	r3, #10
 80185ce:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80185d2:	8458      	strh	r0, [r3, #34]	; 0x22
 80185d4:	e7ec      	b.n	80185b0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 80185d6:	bd10      	pop	{r4, pc}

080185d8 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 80185d8:	b538      	push	{r3, r4, r5, lr}
 80185da:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80185dc:	4604      	mov	r4, r0
 80185de:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 80185e2:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 80185e4:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 80185e6:	3a01      	subs	r2, #1
 80185e8:	8702      	strh	r2, [r0, #56]	; 0x38
 80185ea:	1c5a      	adds	r2, r3, #1
 80185ec:	b292      	uxth	r2, r2
 80185ee:	2a09      	cmp	r2, #9
 80185f0:	bf8a      	itet	hi
 80185f2:	3b09      	subhi	r3, #9
 80185f4:	86c2      	strhls	r2, [r0, #54]	; 0x36
 80185f6:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 80185f8:	f7ff ffb7 	bl	801856a <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 80185fc:	8c23      	ldrh	r3, [r4, #32]
 80185fe:	2b01      	cmp	r3, #1
 8018600:	bf9c      	itt	ls
 8018602:	3301      	addls	r3, #1
 8018604:	8423      	strhls	r3, [r4, #32]
 8018606:	8be3      	ldrh	r3, [r4, #30]
 8018608:	b90b      	cbnz	r3, 801860e <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801860a:	2302      	movs	r3, #2
 801860c:	83e3      	strh	r3, [r4, #30]
 801860e:	8be3      	ldrh	r3, [r4, #30]
 8018610:	4628      	mov	r0, r5
 8018612:	3b01      	subs	r3, #1
 8018614:	b29b      	uxth	r3, r3
 8018616:	83e3      	strh	r3, [r4, #30]
 8018618:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801861c:	8365      	strh	r5, [r4, #26]
 801861e:	bd38      	pop	{r3, r4, r5, pc}

08018620 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8018620:	428a      	cmp	r2, r1
 8018622:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018626:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 8018628:	d932      	bls.n	8018690 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 801862a:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 801862c:	1a54      	subs	r4, r2, r1
 801862e:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 8018632:	19ee      	adds	r6, r5, r7
 8018634:	fa1f fe84 	uxth.w	lr, r4
 8018638:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 801863c:	3e01      	subs	r6, #1
 801863e:	b2b4      	uxth	r4, r6
 8018640:	eba4 090e 	sub.w	r9, r4, lr
 8018644:	fa1f f989 	uxth.w	r9, r9
 8018648:	2c09      	cmp	r4, #9
 801864a:	4626      	mov	r6, r4
 801864c:	bf88      	it	hi
 801864e:	f1a4 060a 	subhi.w	r6, r4, #10
 8018652:	f1bc 0f00 	cmp.w	ip, #0
 8018656:	f104 34ff 	add.w	r4, r4, #4294967295
 801865a:	bf08      	it	eq
 801865c:	f04f 0c02 	moveq.w	ip, #2
 8018660:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8018664:	b2a4      	uxth	r4, r4
 8018666:	f10c 3cff 	add.w	ip, ip, #4294967295
 801866a:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 801866e:	454c      	cmp	r4, r9
 8018670:	fa1f fc8c 	uxth.w	ip, ip
 8018674:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 8018678:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 801867c:	d1e4      	bne.n	8018648 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801867e:	eba5 050e 	sub.w	r5, r5, lr
 8018682:	eb0e 0408 	add.w	r4, lr, r8
 8018686:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 801868a:	8705      	strh	r5, [r0, #56]	; 0x38
 801868c:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 8018690:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 8018692:	250a      	movs	r5, #10
 8018694:	1a64      	subs	r4, r4, r1
 8018696:	4439      	add	r1, r7
 8018698:	b289      	uxth	r1, r1
 801869a:	8704      	strh	r4, [r0, #56]	; 0x38
 801869c:	2909      	cmp	r1, #9
 801869e:	bf88      	it	hi
 80186a0:	390a      	subhi	r1, #10
 80186a2:	86c1      	strh	r1, [r0, #54]	; 0x36
 80186a4:	b18a      	cbz	r2, 80186ca <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 80186a6:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 80186a8:	3a01      	subs	r2, #1
 80186aa:	3101      	adds	r1, #1
 80186ac:	b292      	uxth	r2, r2
 80186ae:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 80186b2:	8701      	strh	r1, [r0, #56]	; 0x38
 80186b4:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 80186b6:	b901      	cbnz	r1, 80186ba <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 80186b8:	86c5      	strh	r5, [r0, #54]	; 0x36
 80186ba:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 80186bc:	3901      	subs	r1, #1
 80186be:	b289      	uxth	r1, r1
 80186c0:	86c1      	strh	r1, [r0, #54]	; 0x36
 80186c2:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80186c6:	844c      	strh	r4, [r1, #34]	; 0x22
 80186c8:	e7ec      	b.n	80186a4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 80186ca:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80186ce:	f7ff bf4c 	b.w	801856a <_ZN8touchgfx12TextProvider15fillInputBufferEv>

080186d2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 80186d2:	b570      	push	{r4, r5, r6, lr}
 80186d4:	2500      	movs	r5, #0
 80186d6:	4295      	cmp	r5, r2
 80186d8:	d011      	beq.n	80186fe <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 80186da:	8bc4      	ldrh	r4, [r0, #30]
 80186dc:	f831 6b02 	ldrh.w	r6, [r1], #2
 80186e0:	4414      	add	r4, r2
 80186e2:	3c01      	subs	r4, #1
 80186e4:	1b64      	subs	r4, r4, r5
 80186e6:	b2a4      	uxth	r4, r4
 80186e8:	2c01      	cmp	r4, #1
 80186ea:	bf88      	it	hi
 80186ec:	3c02      	subhi	r4, #2
 80186ee:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80186f2:	8b64      	ldrh	r4, [r4, #26]
 80186f4:	42b4      	cmp	r4, r6
 80186f6:	d117      	bne.n	8018728 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 80186f8:	3501      	adds	r5, #1
 80186fa:	b2ad      	uxth	r5, r5
 80186fc:	e7eb      	b.n	80186d6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 80186fe:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8018702:	2400      	movs	r4, #0
 8018704:	4413      	add	r3, r2
 8018706:	b2a2      	uxth	r2, r4
 8018708:	429a      	cmp	r2, r3
 801870a:	da0f      	bge.n	801872c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801870c:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 801870e:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8018712:	3401      	adds	r4, #1
 8018714:	4432      	add	r2, r6
 8018716:	b292      	uxth	r2, r2
 8018718:	2a09      	cmp	r2, #9
 801871a:	bf88      	it	hi
 801871c:	3a0a      	subhi	r2, #10
 801871e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8018722:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8018724:	42aa      	cmp	r2, r5
 8018726:	d0ee      	beq.n	8018706 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 8018728:	2000      	movs	r0, #0
 801872a:	bd70      	pop	{r4, r5, r6, pc}
 801872c:	2001      	movs	r0, #1
 801872e:	e7fc      	b.n	801872a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

08018730 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8018730:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018734:	4605      	mov	r5, r0
 8018736:	4616      	mov	r6, r2
 8018738:	1c8c      	adds	r4, r1, #2
 801873a:	8809      	ldrh	r1, [r1, #0]
 801873c:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8018740:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8018744:	42b3      	cmp	r3, r6
 8018746:	d124      	bne.n	8018792 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8018748:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801874c:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8018750:	f001 070f 	and.w	r7, r1, #15
 8018754:	4652      	mov	r2, sl
 8018756:	f8cd 8000 	str.w	r8, [sp]
 801875a:	464b      	mov	r3, r9
 801875c:	4621      	mov	r1, r4
 801875e:	4628      	mov	r0, r5
 8018760:	f7ff ffb7 	bl	80186d2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8018764:	4683      	mov	fp, r0
 8018766:	b168      	cbz	r0, 8018784 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8018768:	eb0a 0109 	add.w	r1, sl, r9
 801876c:	463a      	mov	r2, r7
 801876e:	4628      	mov	r0, r5
 8018770:	4441      	add	r1, r8
 8018772:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8018776:	4649      	mov	r1, r9
 8018778:	f7ff ff52 	bl	8018620 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801877c:	4658      	mov	r0, fp
 801877e:	b003      	add	sp, #12
 8018780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018784:	eb07 010a 	add.w	r1, r7, sl
 8018788:	4449      	add	r1, r9
 801878a:	4441      	add	r1, r8
 801878c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8018790:	e7d2      	b.n	8018738 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8018792:	f04f 0b00 	mov.w	fp, #0
 8018796:	e7f1      	b.n	801877c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08018798 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8018798:	b570      	push	{r4, r5, r6, lr}
 801879a:	8810      	ldrh	r0, [r2, #0]
 801879c:	4298      	cmp	r0, r3
 801879e:	d817      	bhi.n	80187d0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80187a0:	1e48      	subs	r0, r1, #1
 80187a2:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 80187a6:	4298      	cmp	r0, r3
 80187a8:	d312      	bcc.n	80187d0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80187aa:	2400      	movs	r4, #0
 80187ac:	428c      	cmp	r4, r1
 80187ae:	d20f      	bcs.n	80187d0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80187b0:	1860      	adds	r0, r4, r1
 80187b2:	1040      	asrs	r0, r0, #1
 80187b4:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 80187b8:	0085      	lsls	r5, r0, #2
 80187ba:	42b3      	cmp	r3, r6
 80187bc:	d902      	bls.n	80187c4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 80187be:	3001      	adds	r0, #1
 80187c0:	b284      	uxth	r4, r0
 80187c2:	e7f3      	b.n	80187ac <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80187c4:	d201      	bcs.n	80187ca <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 80187c6:	b281      	uxth	r1, r0
 80187c8:	e7f0      	b.n	80187ac <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80187ca:	442a      	add	r2, r5
 80187cc:	8850      	ldrh	r0, [r2, #2]
 80187ce:	bd70      	pop	{r4, r5, r6, pc}
 80187d0:	2000      	movs	r0, #0
 80187d2:	e7fc      	b.n	80187ce <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

080187d4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 80187d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80187d8:	6c45      	ldr	r5, [r0, #68]	; 0x44
 80187da:	4604      	mov	r4, r0
 80187dc:	260b      	movs	r6, #11
 80187de:	886f      	ldrh	r7, [r5, #2]
 80187e0:	087f      	lsrs	r7, r7, #1
 80187e2:	3e01      	subs	r6, #1
 80187e4:	d013      	beq.n	801880e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 80187e6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80187e8:	462a      	mov	r2, r5
 80187ea:	4639      	mov	r1, r7
 80187ec:	4620      	mov	r0, r4
 80187ee:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80187f2:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 80187f6:	4643      	mov	r3, r8
 80187f8:	f7ff ffce 	bl	8018798 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 80187fc:	b138      	cbz	r0, 801880e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 80187fe:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8018802:	4642      	mov	r2, r8
 8018804:	4620      	mov	r0, r4
 8018806:	f7ff ff93 	bl	8018730 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801880a:	2800      	cmp	r0, #0
 801880c:	d1e9      	bne.n	80187e2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801880e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08018814 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8018814:	b570      	push	{r4, r5, r6, lr}
 8018816:	694a      	ldr	r2, [r1, #20]
 8018818:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801881a:	684b      	ldr	r3, [r1, #4]
 801881c:	1b54      	subs	r4, r2, r5
 801881e:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8018820:	f000 8106 	beq.w	8018a30 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8018824:	1b9b      	subs	r3, r3, r6
 8018826:	d003      	beq.n	8018830 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8018828:	4363      	muls	r3, r4
 801882a:	2210      	movs	r2, #16
 801882c:	fb93 f3f2 	sdiv	r3, r3, r2
 8018830:	680c      	ldr	r4, [r1, #0]
 8018832:	698a      	ldr	r2, [r1, #24]
 8018834:	1b65      	subs	r5, r4, r5
 8018836:	f000 80fd 	beq.w	8018a34 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801883a:	1b92      	subs	r2, r2, r6
 801883c:	d003      	beq.n	8018846 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801883e:	436a      	muls	r2, r5
 8018840:	2410      	movs	r4, #16
 8018842:	fb92 f2f4 	sdiv	r2, r2, r4
 8018846:	1a9b      	subs	r3, r3, r2
 8018848:	ed9f 4a89 	vldr	s8, [pc, #548]	; 8018a70 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801884c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018850:	460a      	mov	r2, r1
 8018852:	ee07 3a90 	vmov	s15, r3
 8018856:	f100 040c 	add.w	r4, r0, #12
 801885a:	4603      	mov	r3, r0
 801885c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018860:	ee67 7a84 	vmul.f32	s15, s15, s8
 8018864:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8018868:	eeb1 6a43 	vneg.f32	s12, s6
 801886c:	edd2 7a02 	vldr	s15, [r2, #8]
 8018870:	3214      	adds	r2, #20
 8018872:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8018876:	ece3 6a01 	vstmia	r3!, {s13}
 801887a:	429c      	cmp	r4, r3
 801887c:	ed52 7a02 	vldr	s15, [r2, #-8]
 8018880:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018884:	edc3 7a02 	vstr	s15, [r3, #8]
 8018888:	ed52 7a01 	vldr	s15, [r2, #-4]
 801888c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018890:	edc3 7a05 	vstr	s15, [r3, #20]
 8018894:	d1ea      	bne.n	801886c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8018896:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8018898:	698b      	ldr	r3, [r1, #24]
 801889a:	edd0 4a02 	vldr	s9, [r0, #8]
 801889e:	1a9b      	subs	r3, r3, r2
 80188a0:	edd0 3a00 	vldr	s7, [r0]
 80188a4:	edd0 6a01 	vldr	s13, [r0, #4]
 80188a8:	ee07 3a90 	vmov	s15, r3
 80188ac:	684b      	ldr	r3, [r1, #4]
 80188ae:	ee76 6ae4 	vsub.f32	s13, s13, s9
 80188b2:	ed90 5a05 	vldr	s10, [r0, #20]
 80188b6:	1a9b      	subs	r3, r3, r2
 80188b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80188bc:	ee73 4ae4 	vsub.f32	s9, s7, s9
 80188c0:	ed90 2a03 	vldr	s4, [r0, #12]
 80188c4:	ee07 3a10 	vmov	s14, r3
 80188c8:	edd0 5a04 	vldr	s11, [r0, #16]
 80188cc:	ee67 7a84 	vmul.f32	s15, s15, s8
 80188d0:	ed90 1a07 	vldr	s2, [r0, #28]
 80188d4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80188d8:	edd0 2a06 	vldr	s5, [r0, #24]
 80188dc:	ee75 5ac5 	vsub.f32	s11, s11, s10
 80188e0:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 80188e4:	ee27 7a04 	vmul.f32	s14, s14, s8
 80188e8:	ee32 5a45 	vsub.f32	s10, s4, s10
 80188ec:	eee6 7a87 	vfma.f32	s15, s13, s14
 80188f0:	ee67 7a83 	vmul.f32	s15, s15, s6
 80188f4:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 80188f8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80188fa:	694a      	ldr	r2, [r1, #20]
 80188fc:	1b13      	subs	r3, r2, r4
 80188fe:	ee07 3a10 	vmov	s14, r3
 8018902:	680b      	ldr	r3, [r1, #0]
 8018904:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018908:	1b1b      	subs	r3, r3, r4
 801890a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801890e:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8018912:	ee07 3a10 	vmov	s14, r3
 8018916:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801891a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801891e:	eee6 4a87 	vfma.f32	s9, s13, s14
 8018922:	ee64 4a86 	vmul.f32	s9, s9, s12
 8018926:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801892a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801892c:	698b      	ldr	r3, [r1, #24]
 801892e:	1a9b      	subs	r3, r3, r2
 8018930:	ee06 3a90 	vmov	s13, r3
 8018934:	684b      	ldr	r3, [r1, #4]
 8018936:	1a9b      	subs	r3, r3, r2
 8018938:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801893c:	ee07 3a10 	vmov	s14, r3
 8018940:	ee66 6a84 	vmul.f32	s13, s13, s8
 8018944:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018948:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801894c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018950:	eee5 6a87 	vfma.f32	s13, s11, s14
 8018954:	ee66 6a83 	vmul.f32	s13, s13, s6
 8018958:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801895c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801895e:	694a      	ldr	r2, [r1, #20]
 8018960:	1b13      	subs	r3, r2, r4
 8018962:	ee07 3a10 	vmov	s14, r3
 8018966:	680b      	ldr	r3, [r1, #0]
 8018968:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801896c:	1b1b      	subs	r3, r3, r4
 801896e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018972:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8018976:	ee07 3a10 	vmov	s14, r3
 801897a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801897e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018982:	eea5 5a87 	vfma.f32	s10, s11, s14
 8018986:	edd0 5a08 	vldr	s11, [r0, #32]
 801898a:	ee31 1a65 	vsub.f32	s2, s2, s11
 801898e:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8018992:	ee25 5a06 	vmul.f32	s10, s10, s12
 8018996:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801899a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801899c:	698b      	ldr	r3, [r1, #24]
 801899e:	1a9b      	subs	r3, r3, r2
 80189a0:	ee07 3a10 	vmov	s14, r3
 80189a4:	684b      	ldr	r3, [r1, #4]
 80189a6:	1a9b      	subs	r3, r3, r2
 80189a8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80189ac:	ee01 3a90 	vmov	s3, r3
 80189b0:	ee27 7a04 	vmul.f32	s14, s14, s8
 80189b4:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80189b8:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 80189bc:	ee61 1a84 	vmul.f32	s3, s3, s8
 80189c0:	eea1 7a21 	vfma.f32	s14, s2, s3
 80189c4:	ee27 7a03 	vmul.f32	s14, s14, s6
 80189c8:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 80189cc:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80189ce:	694a      	ldr	r2, [r1, #20]
 80189d0:	1b13      	subs	r3, r2, r4
 80189d2:	ee03 3a10 	vmov	s6, r3
 80189d6:	680b      	ldr	r3, [r1, #0]
 80189d8:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 80189dc:	1b1b      	subs	r3, r3, r4
 80189de:	ee23 3a04 	vmul.f32	s6, s6, s8
 80189e2:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 80189e6:	ee03 3a10 	vmov	s6, r3
 80189ea:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 80189ee:	ee23 4a04 	vmul.f32	s8, s6, s8
 80189f2:	eee1 5a04 	vfma.f32	s11, s2, s8
 80189f6:	ee25 6a86 	vmul.f32	s12, s11, s12
 80189fa:	ee62 5a67 	vnmul.f32	s11, s4, s15
 80189fe:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 8018a02:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8018a06:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8018a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a0e:	dd13      	ble.n	8018a38 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8018a10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018a14:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8018a18:	63c3      	str	r3, [r0, #60]	; 0x3c
 8018a1a:	eee3 7a87 	vfma.f32	s15, s7, s14
 8018a1e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a26:	dd15      	ble.n	8018a54 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8018a28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018a2c:	6403      	str	r3, [r0, #64]	; 0x40
 8018a2e:	bd70      	pop	{r4, r5, r6, pc}
 8018a30:	4623      	mov	r3, r4
 8018a32:	e6fd      	b.n	8018830 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8018a34:	462a      	mov	r2, r5
 8018a36:	e706      	b.n	8018846 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8018a38:	d502      	bpl.n	8018a40 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 8018a3a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8018a3e:	e7e9      	b.n	8018a14 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8018a40:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8018a44:	eea3 2a85 	vfma.f32	s4, s7, s10
 8018a48:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8018a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a50:	dade      	bge.n	8018a10 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 8018a52:	e7f2      	b.n	8018a3a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8018a54:	d502      	bpl.n	8018a5c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 8018a56:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8018a5a:	e7e7      	b.n	8018a2c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8018a5c:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8018a60:	eee3 4a86 	vfma.f32	s9, s7, s12
 8018a64:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8018a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a6c:	dadc      	bge.n	8018a28 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 8018a6e:	e7f2      	b.n	8018a56 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8018a70:	3d800000 	.word	0x3d800000

08018a74 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8018a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018a78:	2714      	movs	r7, #20
 8018a7a:	435f      	muls	r7, r3
 8018a7c:	eb02 0c07 	add.w	ip, r2, r7
 8018a80:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8018a84:	f115 0e0f 	adds.w	lr, r5, #15
 8018a88:	f100 80a2 	bmi.w	8018bd0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8018a8c:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 8018a90:	9c08      	ldr	r4, [sp, #32]
 8018a92:	2614      	movs	r6, #20
 8018a94:	f8c0 e014 	str.w	lr, [r0, #20]
 8018a98:	4366      	muls	r6, r4
 8018a9a:	eb02 0806 	add.w	r8, r2, r6
 8018a9e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8018aa2:	f115 040f 	adds.w	r4, r5, #15
 8018aa6:	f100 809f 	bmi.w	8018be8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 8018aaa:	1124      	asrs	r4, r4, #4
 8018aac:	eba4 040e 	sub.w	r4, r4, lr
 8018ab0:	6184      	str	r4, [r0, #24]
 8018ab2:	2c00      	cmp	r4, #0
 8018ab4:	f000 808a 	beq.w	8018bcc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 8018ab8:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8018abc:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8018ac0:	5995      	ldr	r5, [r2, r6]
 8018ac2:	eba4 0809 	sub.w	r8, r4, r9
 8018ac6:	59d4      	ldr	r4, [r2, r7]
 8018ac8:	eba5 0a04 	sub.w	sl, r5, r4
 8018acc:	ea4f 1608 	mov.w	r6, r8, lsl #4
 8018ad0:	ea4f 150a 	mov.w	r5, sl, lsl #4
 8018ad4:	fb0e fe05 	mul.w	lr, lr, r5
 8018ad8:	fb0a ee19 	mls	lr, sl, r9, lr
 8018adc:	fb08 e404 	mla	r4, r8, r4, lr
 8018ae0:	3c01      	subs	r4, #1
 8018ae2:	19a4      	adds	r4, r4, r6
 8018ae4:	f100 808c 	bmi.w	8018c00 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 8018ae8:	fb94 fef6 	sdiv	lr, r4, r6
 8018aec:	fb06 441e 	mls	r4, r6, lr, r4
 8018af0:	f8c0 e000 	str.w	lr, [r0]
 8018af4:	6104      	str	r4, [r0, #16]
 8018af6:	2d00      	cmp	r5, #0
 8018af8:	f2c0 8095 	blt.w	8018c26 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 8018afc:	fb95 f4f6 	sdiv	r4, r5, r6
 8018b00:	fb06 5514 	mls	r5, r6, r4, r5
 8018b04:	6044      	str	r4, [r0, #4]
 8018b06:	6085      	str	r5, [r0, #8]
 8018b08:	60c6      	str	r6, [r0, #12]
 8018b0a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8018b0e:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8018b12:	6945      	ldr	r5, [r0, #20]
 8018b14:	59d2      	ldr	r2, [r2, r7]
 8018b16:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 8018b1a:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8018c48 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 8018b1e:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8018b22:	ee07 4a10 	vmov	s14, r4
 8018b26:	6804      	ldr	r4, [r0, #0]
 8018b28:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 8018b2c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018b30:	ee07 2a90 	vmov	s15, r2
 8018b34:	ee27 7a26 	vmul.f32	s14, s14, s13
 8018b38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018b3c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018b40:	edd3 6a00 	vldr	s13, [r3]
 8018b44:	eee6 6a07 	vfma.f32	s13, s12, s14
 8018b48:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 8018b4c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8018b50:	edc0 6a07 	vstr	s13, [r0, #28]
 8018b54:	edd0 6a01 	vldr	s13, [r0, #4]
 8018b58:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 8018b5c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8018b60:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8018b64:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8018b68:	ed80 6a08 	vstr	s12, [r0, #32]
 8018b6c:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8018b6e:	6242      	str	r2, [r0, #36]	; 0x24
 8018b70:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 8018b74:	ed93 6a03 	vldr	s12, [r3, #12]
 8018b78:	eea5 6a87 	vfma.f32	s12, s11, s14
 8018b7c:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8018b80:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8018b84:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 8018b88:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8018b8c:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 8018b90:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8018b94:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 8018b98:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8018b9a:	6302      	str	r2, [r0, #48]	; 0x30
 8018b9c:	ed93 6a06 	vldr	s12, [r3, #24]
 8018ba0:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 8018ba4:	eea5 6a87 	vfma.f32	s12, s11, s14
 8018ba8:	eeb0 7a46 	vmov.f32	s14, s12
 8018bac:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 8018bb0:	eea6 7a27 	vfma.f32	s14, s12, s15
 8018bb4:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8018bb8:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8018bbc:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 8018bc0:	eee6 7a87 	vfma.f32	s15, s13, s14
 8018bc4:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 8018bc8:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8018bca:	63c3      	str	r3, [r0, #60]	; 0x3c
 8018bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018bd0:	2410      	movs	r4, #16
 8018bd2:	f1c5 0501 	rsb	r5, r5, #1
 8018bd6:	fb9e fef4 	sdiv	lr, lr, r4
 8018bda:	f015 050f 	ands.w	r5, r5, #15
 8018bde:	bf18      	it	ne
 8018be0:	2501      	movne	r5, #1
 8018be2:	ebae 0e05 	sub.w	lr, lr, r5
 8018be6:	e753      	b.n	8018a90 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 8018be8:	f04f 0910 	mov.w	r9, #16
 8018bec:	f1c5 0501 	rsb	r5, r5, #1
 8018bf0:	fb94 f4f9 	sdiv	r4, r4, r9
 8018bf4:	f015 050f 	ands.w	r5, r5, #15
 8018bf8:	bf18      	it	ne
 8018bfa:	2501      	movne	r5, #1
 8018bfc:	1b64      	subs	r4, r4, r5
 8018bfe:	e755      	b.n	8018aac <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 8018c00:	4264      	negs	r4, r4
 8018c02:	fb94 fef6 	sdiv	lr, r4, r6
 8018c06:	f1ce 0800 	rsb	r8, lr, #0
 8018c0a:	fb06 441e 	mls	r4, r6, lr, r4
 8018c0e:	f8c0 8000 	str.w	r8, [r0]
 8018c12:	6104      	str	r4, [r0, #16]
 8018c14:	2c00      	cmp	r4, #0
 8018c16:	f43f af6e 	beq.w	8018af6 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 8018c1a:	ea6f 0e0e 	mvn.w	lr, lr
 8018c1e:	1b34      	subs	r4, r6, r4
 8018c20:	f8c0 e000 	str.w	lr, [r0]
 8018c24:	e766      	b.n	8018af4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 8018c26:	426d      	negs	r5, r5
 8018c28:	fb95 f4f6 	sdiv	r4, r5, r6
 8018c2c:	f1c4 0e00 	rsb	lr, r4, #0
 8018c30:	fb06 5514 	mls	r5, r6, r4, r5
 8018c34:	f8c0 e004 	str.w	lr, [r0, #4]
 8018c38:	6085      	str	r5, [r0, #8]
 8018c3a:	2d00      	cmp	r5, #0
 8018c3c:	f43f af64 	beq.w	8018b08 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 8018c40:	43e4      	mvns	r4, r4
 8018c42:	1b75      	subs	r5, r6, r5
 8018c44:	6044      	str	r4, [r0, #4]
 8018c46:	e75e      	b.n	8018b06 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 8018c48:	3d800000 	.word	0x3d800000

08018c4c <_ZN8touchgfx7Unicode6strlenEPKt>:
 8018c4c:	4602      	mov	r2, r0
 8018c4e:	b148      	cbz	r0, 8018c64 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 8018c50:	2300      	movs	r3, #0
 8018c52:	b298      	uxth	r0, r3
 8018c54:	3301      	adds	r3, #1
 8018c56:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8018c5a:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 8018c5e:	2900      	cmp	r1, #0
 8018c60:	d1f7      	bne.n	8018c52 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 8018c62:	4770      	bx	lr
 8018c64:	4770      	bx	lr

08018c66 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 8018c66:	b530      	push	{r4, r5, lr}
 8018c68:	4604      	mov	r4, r0
 8018c6a:	b159      	cbz	r1, 8018c84 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 8018c6c:	b148      	cbz	r0, 8018c82 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8018c6e:	2300      	movs	r3, #0
 8018c70:	b298      	uxth	r0, r3
 8018c72:	4282      	cmp	r2, r0
 8018c74:	d905      	bls.n	8018c82 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8018c76:	5ccd      	ldrb	r5, [r1, r3]
 8018c78:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 8018c7c:	3301      	adds	r3, #1
 8018c7e:	2d00      	cmp	r5, #0
 8018c80:	d1f6      	bne.n	8018c70 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 8018c82:	bd30      	pop	{r4, r5, pc}
 8018c84:	4608      	mov	r0, r1
 8018c86:	e7fc      	b.n	8018c82 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

08018c88 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 8018c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018c8a:	468c      	mov	ip, r1
 8018c8c:	b08b      	sub	sp, #44	; 0x2c
 8018c8e:	2100      	movs	r1, #0
 8018c90:	ae01      	add	r6, sp, #4
 8018c92:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8018c96:	211f      	movs	r1, #31
 8018c98:	fbb0 f7f3 	udiv	r7, r0, r3
 8018c9c:	fb03 0517 	mls	r5, r3, r7, r0
 8018ca0:	4638      	mov	r0, r7
 8018ca2:	b2ec      	uxtb	r4, r5
 8018ca4:	2d09      	cmp	r5, #9
 8018ca6:	bfd4      	ite	le
 8018ca8:	3430      	addle	r4, #48	; 0x30
 8018caa:	3457      	addgt	r4, #87	; 0x57
 8018cac:	b2e4      	uxtb	r4, r4
 8018cae:	558c      	strb	r4, [r1, r6]
 8018cb0:	1e4c      	subs	r4, r1, #1
 8018cb2:	b92f      	cbnz	r7, 8018cc0 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 8018cb4:	4431      	add	r1, r6
 8018cb6:	4660      	mov	r0, ip
 8018cb8:	f7ff ffd5 	bl	8018c66 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8018cbc:	b00b      	add	sp, #44	; 0x2c
 8018cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018cc0:	4621      	mov	r1, r4
 8018cc2:	e7e9      	b.n	8018c98 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

08018cc4 <_ZN8touchgfx7Unicode4itoaElPtti>:
 8018cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018cc6:	4607      	mov	r7, r0
 8018cc8:	b08b      	sub	sp, #44	; 0x2c
 8018cca:	4608      	mov	r0, r1
 8018ccc:	b341      	cbz	r1, 8018d20 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8018cce:	1e99      	subs	r1, r3, #2
 8018cd0:	2922      	cmp	r1, #34	; 0x22
 8018cd2:	d825      	bhi.n	8018d20 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8018cd4:	2100      	movs	r1, #0
 8018cd6:	463c      	mov	r4, r7
 8018cd8:	261f      	movs	r6, #31
 8018cda:	f10d 0c04 	add.w	ip, sp, #4
 8018cde:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8018ce2:	1e71      	subs	r1, r6, #1
 8018ce4:	fb94 fef3 	sdiv	lr, r4, r3
 8018ce8:	fb03 441e 	mls	r4, r3, lr, r4
 8018cec:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 8018cf0:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 8018cf4:	b2ec      	uxtb	r4, r5
 8018cf6:	2d09      	cmp	r5, #9
 8018cf8:	bfd4      	ite	le
 8018cfa:	3430      	addle	r4, #48	; 0x30
 8018cfc:	3457      	addgt	r4, #87	; 0x57
 8018cfe:	b2e4      	uxtb	r4, r4
 8018d00:	f80c 4006 	strb.w	r4, [ip, r6]
 8018d04:	4674      	mov	r4, lr
 8018d06:	b96c      	cbnz	r4, 8018d24 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 8018d08:	2f00      	cmp	r7, #0
 8018d0a:	da05      	bge.n	8018d18 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 8018d0c:	ab0a      	add	r3, sp, #40	; 0x28
 8018d0e:	4419      	add	r1, r3
 8018d10:	232d      	movs	r3, #45	; 0x2d
 8018d12:	f801 3c24 	strb.w	r3, [r1, #-36]
 8018d16:	1eb1      	subs	r1, r6, #2
 8018d18:	3101      	adds	r1, #1
 8018d1a:	4461      	add	r1, ip
 8018d1c:	f7ff ffa3 	bl	8018c66 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8018d20:	b00b      	add	sp, #44	; 0x2c
 8018d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018d24:	460e      	mov	r6, r1
 8018d26:	e7dc      	b.n	8018ce2 <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

08018d28 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 8018d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d2c:	b085      	sub	sp, #20
 8018d2e:	4691      	mov	r9, r2
 8018d30:	6802      	ldr	r2, [r0, #0]
 8018d32:	4688      	mov	r8, r1
 8018d34:	461c      	mov	r4, r3
 8018d36:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 8018d3a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8018d3e:	4683      	mov	fp, r0
 8018d40:	4610      	mov	r0, r2
 8018d42:	9103      	str	r1, [sp, #12]
 8018d44:	9302      	str	r3, [sp, #8]
 8018d46:	9201      	str	r2, [sp, #4]
 8018d48:	f7ff ff80 	bl	8018c4c <_ZN8touchgfx7Unicode6strlenEPKt>
 8018d4c:	f1b8 0f00 	cmp.w	r8, #0
 8018d50:	bf0c      	ite	eq
 8018d52:	4684      	moveq	ip, r0
 8018d54:	f100 0c01 	addne.w	ip, r0, #1
 8018d58:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 8018d5c:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 8018d60:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8018d62:	fa1f fc8c 	uxth.w	ip, ip
 8018d66:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8018d68:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 8018d6c:	9903      	ldr	r1, [sp, #12]
 8018d6e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8018d72:	d041      	beq.n	8018df8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8018d74:	d834      	bhi.n	8018de0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 8018d76:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 8018d7a:	d059      	beq.n	8018e30 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 8018d7c:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 8018d80:	d03a      	beq.n	8018df8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8018d82:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 8018d86:	d034      	beq.n	8018df2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 8018d88:	2400      	movs	r4, #0
 8018d8a:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 8018d8e:	3a01      	subs	r2, #1
 8018d90:	b169      	cbz	r1, 8018dae <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8018d92:	9911      	ldr	r1, [sp, #68]	; 0x44
 8018d94:	458c      	cmp	ip, r1
 8018d96:	da09      	bge.n	8018dac <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8018d98:	eba1 010c 	sub.w	r1, r1, ip
 8018d9c:	b289      	uxth	r1, r1
 8018d9e:	b933      	cbnz	r3, 8018dae <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8018da0:	2e00      	cmp	r6, #0
 8018da2:	d051      	beq.n	8018e48 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 8018da4:	2800      	cmp	r0, #0
 8018da6:	d04f      	beq.n	8018e48 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 8018da8:	440c      	add	r4, r1
 8018daa:	b2a4      	uxth	r4, r4
 8018dac:	2100      	movs	r1, #0
 8018dae:	682b      	ldr	r3, [r5, #0]
 8018db0:	4293      	cmp	r3, r2
 8018db2:	da07      	bge.n	8018dc4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 8018db4:	f1b8 0f00 	cmp.w	r8, #0
 8018db8:	d004      	beq.n	8018dc4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 8018dba:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 8018dbe:	682b      	ldr	r3, [r5, #0]
 8018dc0:	3301      	adds	r3, #1
 8018dc2:	602b      	str	r3, [r5, #0]
 8018dc4:	2730      	movs	r7, #48	; 0x30
 8018dc6:	2c00      	cmp	r4, #0
 8018dc8:	d04e      	beq.n	8018e68 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8018dca:	682e      	ldr	r6, [r5, #0]
 8018dcc:	3c01      	subs	r4, #1
 8018dce:	42b2      	cmp	r2, r6
 8018dd0:	b2a4      	uxth	r4, r4
 8018dd2:	dd49      	ble.n	8018e68 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8018dd4:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 8018dd8:	682b      	ldr	r3, [r5, #0]
 8018dda:	3301      	adds	r3, #1
 8018ddc:	602b      	str	r3, [r5, #0]
 8018dde:	e7f2      	b.n	8018dc6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 8018de0:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 8018de4:	d01d      	beq.n	8018e22 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 8018de6:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 8018dea:	d002      	beq.n	8018df2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 8018dec:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 8018df0:	e7c9      	b.n	8018d86 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 8018df2:	4684      	mov	ip, r0
 8018df4:	f04f 0800 	mov.w	r8, #0
 8018df8:	2c00      	cmp	r4, #0
 8018dfa:	d0c6      	beq.n	8018d8a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8018dfc:	b947      	cbnz	r7, 8018e10 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 8018dfe:	2801      	cmp	r0, #1
 8018e00:	d106      	bne.n	8018e10 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 8018e02:	8814      	ldrh	r4, [r2, #0]
 8018e04:	2c30      	cmp	r4, #48	; 0x30
 8018e06:	bf02      	ittt	eq
 8018e08:	3202      	addeq	r2, #2
 8018e0a:	4638      	moveq	r0, r7
 8018e0c:	f8cb 2000 	streq.w	r2, [fp]
 8018e10:	45bc      	cmp	ip, r7
 8018e12:	da14      	bge.n	8018e3e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 8018e14:	b2bf      	uxth	r7, r7
 8018e16:	eba7 040c 	sub.w	r4, r7, ip
 8018e1a:	46bc      	mov	ip, r7
 8018e1c:	b2a4      	uxth	r4, r4
 8018e1e:	2600      	movs	r6, #0
 8018e20:	e7b3      	b.n	8018d8a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8018e22:	4684      	mov	ip, r0
 8018e24:	b16c      	cbz	r4, 8018e42 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 8018e26:	42b8      	cmp	r0, r7
 8018e28:	dd00      	ble.n	8018e2c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 8018e2a:	b2b8      	uxth	r0, r7
 8018e2c:	2400      	movs	r4, #0
 8018e2e:	e003      	b.n	8018e38 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 8018e30:	f04f 0c01 	mov.w	ip, #1
 8018e34:	2400      	movs	r4, #0
 8018e36:	4660      	mov	r0, ip
 8018e38:	4626      	mov	r6, r4
 8018e3a:	46a0      	mov	r8, r4
 8018e3c:	e7a5      	b.n	8018d8a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8018e3e:	2400      	movs	r4, #0
 8018e40:	e7ed      	b.n	8018e1e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 8018e42:	4626      	mov	r6, r4
 8018e44:	46a0      	mov	r8, r4
 8018e46:	e7a0      	b.n	8018d8a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8018e48:	2900      	cmp	r1, #0
 8018e4a:	d0b0      	beq.n	8018dae <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8018e4c:	2720      	movs	r7, #32
 8018e4e:	682e      	ldr	r6, [r5, #0]
 8018e50:	2900      	cmp	r1, #0
 8018e52:	d0ac      	beq.n	8018dae <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8018e54:	3901      	subs	r1, #1
 8018e56:	4296      	cmp	r6, r2
 8018e58:	b289      	uxth	r1, r1
 8018e5a:	daa7      	bge.n	8018dac <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8018e5c:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 8018e60:	682b      	ldr	r3, [r5, #0]
 8018e62:	3301      	adds	r3, #1
 8018e64:	602b      	str	r3, [r5, #0]
 8018e66:	e7f2      	b.n	8018e4e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 8018e68:	b188      	cbz	r0, 8018e8e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 8018e6a:	682b      	ldr	r3, [r5, #0]
 8018e6c:	3801      	subs	r0, #1
 8018e6e:	429a      	cmp	r2, r3
 8018e70:	b280      	uxth	r0, r0
 8018e72:	dd0c      	ble.n	8018e8e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 8018e74:	f8db 3000 	ldr.w	r3, [fp]
 8018e78:	1c9c      	adds	r4, r3, #2
 8018e7a:	f8cb 4000 	str.w	r4, [fp]
 8018e7e:	881c      	ldrh	r4, [r3, #0]
 8018e80:	682b      	ldr	r3, [r5, #0]
 8018e82:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 8018e86:	682b      	ldr	r3, [r5, #0]
 8018e88:	3301      	adds	r3, #1
 8018e8a:	602b      	str	r3, [r5, #0]
 8018e8c:	e7ec      	b.n	8018e68 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8018e8e:	2620      	movs	r6, #32
 8018e90:	b151      	cbz	r1, 8018ea8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8018e92:	6828      	ldr	r0, [r5, #0]
 8018e94:	3901      	subs	r1, #1
 8018e96:	4282      	cmp	r2, r0
 8018e98:	b289      	uxth	r1, r1
 8018e9a:	dd05      	ble.n	8018ea8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8018e9c:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 8018ea0:	682b      	ldr	r3, [r5, #0]
 8018ea2:	3301      	adds	r3, #1
 8018ea4:	602b      	str	r3, [r5, #0]
 8018ea6:	e7f3      	b.n	8018e90 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 8018ea8:	b005      	add	sp, #20
 8018eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018eae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 8018eae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018eb2:	2400      	movs	r4, #0
 8018eb4:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 8018eb8:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 8018ebc:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 8018ec0:	8014      	strh	r4, [r2, #0]
 8018ec2:	701c      	strb	r4, [r3, #0]
 8018ec4:	f888 4000 	strb.w	r4, [r8]
 8018ec8:	f88c 4000 	strb.w	r4, [ip]
 8018ecc:	f88e 4000 	strb.w	r4, [lr]
 8018ed0:	703c      	strb	r4, [r7, #0]
 8018ed2:	6804      	ldr	r4, [r0, #0]
 8018ed4:	b1a4      	cbz	r4, 8018f00 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 8018ed6:	8824      	ldrh	r4, [r4, #0]
 8018ed8:	f04f 0901 	mov.w	r9, #1
 8018edc:	b314      	cbz	r4, 8018f24 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8018ede:	2c2b      	cmp	r4, #43	; 0x2b
 8018ee0:	d001      	beq.n	8018ee6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 8018ee2:	2c20      	cmp	r4, #32
 8018ee4:	d110      	bne.n	8018f08 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 8018ee6:	8014      	strh	r4, [r2, #0]
 8018ee8:	6804      	ldr	r4, [r0, #0]
 8018eea:	b10c      	cbz	r4, 8018ef0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 8018eec:	3402      	adds	r4, #2
 8018eee:	6004      	str	r4, [r0, #0]
 8018ef0:	680c      	ldr	r4, [r1, #0]
 8018ef2:	b10c      	cbz	r4, 8018ef8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 8018ef4:	3401      	adds	r4, #1
 8018ef6:	600c      	str	r4, [r1, #0]
 8018ef8:	6804      	ldr	r4, [r0, #0]
 8018efa:	b17c      	cbz	r4, 8018f1c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 8018efc:	8824      	ldrh	r4, [r4, #0]
 8018efe:	e7ed      	b.n	8018edc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8018f00:	680c      	ldr	r4, [r1, #0]
 8018f02:	b17c      	cbz	r4, 8018f24 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8018f04:	7824      	ldrb	r4, [r4, #0]
 8018f06:	e7e7      	b.n	8018ed8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 8018f08:	2c2d      	cmp	r4, #45	; 0x2d
 8018f0a:	d102      	bne.n	8018f12 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 8018f0c:	f883 9000 	strb.w	r9, [r3]
 8018f10:	e7ea      	b.n	8018ee8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8018f12:	2c23      	cmp	r4, #35	; 0x23
 8018f14:	d107      	bne.n	8018f26 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 8018f16:	f888 9000 	strb.w	r9, [r8]
 8018f1a:	e7e5      	b.n	8018ee8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8018f1c:	680c      	ldr	r4, [r1, #0]
 8018f1e:	b10c      	cbz	r4, 8018f24 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8018f20:	7824      	ldrb	r4, [r4, #0]
 8018f22:	e7db      	b.n	8018edc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8018f24:	2400      	movs	r4, #0
 8018f26:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8018f2a:	2b09      	cmp	r3, #9
 8018f2c:	d901      	bls.n	8018f32 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 8018f2e:	2c2a      	cmp	r4, #42	; 0x2a
 8018f30:	d122      	bne.n	8018f78 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8018f32:	2301      	movs	r3, #1
 8018f34:	2c30      	cmp	r4, #48	; 0x30
 8018f36:	f88e 3000 	strb.w	r3, [lr]
 8018f3a:	d10d      	bne.n	8018f58 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 8018f3c:	f88c 3000 	strb.w	r3, [ip]
 8018f40:	6803      	ldr	r3, [r0, #0]
 8018f42:	b10b      	cbz	r3, 8018f48 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 8018f44:	3302      	adds	r3, #2
 8018f46:	6003      	str	r3, [r0, #0]
 8018f48:	680b      	ldr	r3, [r1, #0]
 8018f4a:	b10b      	cbz	r3, 8018f50 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 8018f4c:	3301      	adds	r3, #1
 8018f4e:	600b      	str	r3, [r1, #0]
 8018f50:	6803      	ldr	r3, [r0, #0]
 8018f52:	2b00      	cmp	r3, #0
 8018f54:	d02f      	beq.n	8018fb6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 8018f56:	881c      	ldrh	r4, [r3, #0]
 8018f58:	2c2a      	cmp	r4, #42	; 0x2a
 8018f5a:	d135      	bne.n	8018fc8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 8018f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8018f60:	6033      	str	r3, [r6, #0]
 8018f62:	6803      	ldr	r3, [r0, #0]
 8018f64:	b10b      	cbz	r3, 8018f6a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 8018f66:	3302      	adds	r3, #2
 8018f68:	6003      	str	r3, [r0, #0]
 8018f6a:	680b      	ldr	r3, [r1, #0]
 8018f6c:	b10b      	cbz	r3, 8018f72 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 8018f6e:	3301      	adds	r3, #1
 8018f70:	600b      	str	r3, [r1, #0]
 8018f72:	6803      	ldr	r3, [r0, #0]
 8018f74:	b31b      	cbz	r3, 8018fbe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 8018f76:	881c      	ldrh	r4, [r3, #0]
 8018f78:	2c2e      	cmp	r4, #46	; 0x2e
 8018f7a:	d11a      	bne.n	8018fb2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8018f7c:	2301      	movs	r3, #1
 8018f7e:	703b      	strb	r3, [r7, #0]
 8018f80:	6803      	ldr	r3, [r0, #0]
 8018f82:	b10b      	cbz	r3, 8018f88 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 8018f84:	3302      	adds	r3, #2
 8018f86:	6003      	str	r3, [r0, #0]
 8018f88:	680b      	ldr	r3, [r1, #0]
 8018f8a:	b10b      	cbz	r3, 8018f90 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 8018f8c:	3301      	adds	r3, #1
 8018f8e:	600b      	str	r3, [r1, #0]
 8018f90:	6803      	ldr	r3, [r0, #0]
 8018f92:	2b00      	cmp	r3, #0
 8018f94:	d036      	beq.n	8019004 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 8018f96:	881b      	ldrh	r3, [r3, #0]
 8018f98:	2b2a      	cmp	r3, #42	; 0x2a
 8018f9a:	d137      	bne.n	801900c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 8018f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8018fa0:	602b      	str	r3, [r5, #0]
 8018fa2:	6803      	ldr	r3, [r0, #0]
 8018fa4:	b10b      	cbz	r3, 8018faa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 8018fa6:	3302      	adds	r3, #2
 8018fa8:	6003      	str	r3, [r0, #0]
 8018faa:	680b      	ldr	r3, [r1, #0]
 8018fac:	b10b      	cbz	r3, 8018fb2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8018fae:	3301      	adds	r3, #1
 8018fb0:	600b      	str	r3, [r1, #0]
 8018fb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018fb6:	680c      	ldr	r4, [r1, #0]
 8018fb8:	b134      	cbz	r4, 8018fc8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 8018fba:	7824      	ldrb	r4, [r4, #0]
 8018fbc:	e7cc      	b.n	8018f58 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 8018fbe:	680b      	ldr	r3, [r1, #0]
 8018fc0:	2b00      	cmp	r3, #0
 8018fc2:	d0f6      	beq.n	8018fb2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8018fc4:	781c      	ldrb	r4, [r3, #0]
 8018fc6:	e7d7      	b.n	8018f78 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8018fc8:	2300      	movs	r3, #0
 8018fca:	220a      	movs	r2, #10
 8018fcc:	6033      	str	r3, [r6, #0]
 8018fce:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8018fd2:	fa1f f38c 	uxth.w	r3, ip
 8018fd6:	2b09      	cmp	r3, #9
 8018fd8:	d8ce      	bhi.n	8018f78 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8018fda:	6833      	ldr	r3, [r6, #0]
 8018fdc:	fb02 c303 	mla	r3, r2, r3, ip
 8018fe0:	6033      	str	r3, [r6, #0]
 8018fe2:	6803      	ldr	r3, [r0, #0]
 8018fe4:	b10b      	cbz	r3, 8018fea <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 8018fe6:	3302      	adds	r3, #2
 8018fe8:	6003      	str	r3, [r0, #0]
 8018fea:	680b      	ldr	r3, [r1, #0]
 8018fec:	b10b      	cbz	r3, 8018ff2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 8018fee:	3301      	adds	r3, #1
 8018ff0:	600b      	str	r3, [r1, #0]
 8018ff2:	6803      	ldr	r3, [r0, #0]
 8018ff4:	b10b      	cbz	r3, 8018ffa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 8018ff6:	881c      	ldrh	r4, [r3, #0]
 8018ff8:	e7e9      	b.n	8018fce <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8018ffa:	680c      	ldr	r4, [r1, #0]
 8018ffc:	2c00      	cmp	r4, #0
 8018ffe:	d0e6      	beq.n	8018fce <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8019000:	7824      	ldrb	r4, [r4, #0]
 8019002:	e7e4      	b.n	8018fce <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8019004:	680b      	ldr	r3, [r1, #0]
 8019006:	b10b      	cbz	r3, 801900c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 8019008:	781b      	ldrb	r3, [r3, #0]
 801900a:	e7c5      	b.n	8018f98 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801900c:	2200      	movs	r2, #0
 801900e:	240a      	movs	r4, #10
 8019010:	602a      	str	r2, [r5, #0]
 8019012:	3b30      	subs	r3, #48	; 0x30
 8019014:	682a      	ldr	r2, [r5, #0]
 8019016:	b29e      	uxth	r6, r3
 8019018:	2e09      	cmp	r6, #9
 801901a:	d813      	bhi.n	8019044 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801901c:	fb04 3302 	mla	r3, r4, r2, r3
 8019020:	602b      	str	r3, [r5, #0]
 8019022:	6803      	ldr	r3, [r0, #0]
 8019024:	b10b      	cbz	r3, 801902a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 8019026:	3302      	adds	r3, #2
 8019028:	6003      	str	r3, [r0, #0]
 801902a:	680b      	ldr	r3, [r1, #0]
 801902c:	b10b      	cbz	r3, 8019032 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801902e:	3301      	adds	r3, #1
 8019030:	600b      	str	r3, [r1, #0]
 8019032:	6803      	ldr	r3, [r0, #0]
 8019034:	b10b      	cbz	r3, 801903a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 8019036:	881b      	ldrh	r3, [r3, #0]
 8019038:	e7eb      	b.n	8019012 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801903a:	680b      	ldr	r3, [r1, #0]
 801903c:	2b00      	cmp	r3, #0
 801903e:	d0e8      	beq.n	8019012 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8019040:	781b      	ldrb	r3, [r3, #0]
 8019042:	e7e6      	b.n	8019012 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8019044:	2a06      	cmp	r2, #6
 8019046:	bfa8      	it	ge
 8019048:	2206      	movge	r2, #6
 801904a:	602a      	str	r2, [r5, #0]
 801904c:	e7b1      	b.n	8018fb2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801904e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801904e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019052:	b0a3      	sub	sp, #140	; 0x8c
 8019054:	2600      	movs	r6, #0
 8019056:	4607      	mov	r7, r0
 8019058:	4688      	mov	r8, r1
 801905a:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 801905e:	4631      	mov	r1, r6
 8019060:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8019062:	4648      	mov	r0, r9
 8019064:	960d      	str	r6, [sp, #52]	; 0x34
 8019066:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801906a:	2242      	movs	r2, #66	; 0x42
 801906c:	f00c ff56 	bl	8025f1c <memset>
 8019070:	b15f      	cbz	r7, 801908a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 8019072:	f108 3aff 	add.w	sl, r8, #4294967295
 8019076:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019078:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801907a:	b152      	cbz	r2, 8019092 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 801907c:	8812      	ldrh	r2, [r2, #0]
 801907e:	b10a      	cbz	r2, 8019084 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8019080:	459a      	cmp	sl, r3
 8019082:	dc2e      	bgt.n	80190e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 8019084:	2200      	movs	r2, #0
 8019086:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801908a:	4638      	mov	r0, r7
 801908c:	b023      	add	sp, #140	; 0x8c
 801908e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019092:	9a08      	ldr	r2, [sp, #32]
 8019094:	2a00      	cmp	r2, #0
 8019096:	d0f5      	beq.n	8019084 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8019098:	7812      	ldrb	r2, [r2, #0]
 801909a:	e7f0      	b.n	801907e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 801909c:	2d00      	cmp	r5, #0
 801909e:	d0ea      	beq.n	8019076 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 80190a0:	782a      	ldrb	r2, [r5, #0]
 80190a2:	b142      	cbz	r2, 80190b6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 80190a4:	2a25      	cmp	r2, #37	; 0x25
 80190a6:	d001      	beq.n	80190ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 80190a8:	459a      	cmp	sl, r3
 80190aa:	dc08      	bgt.n	80190be <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 80190ac:	f1bb 0f00 	cmp.w	fp, #0
 80190b0:	d121      	bne.n	80190f6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 80190b2:	2d00      	cmp	r5, #0
 80190b4:	d0df      	beq.n	8019076 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 80190b6:	782a      	ldrb	r2, [r5, #0]
 80190b8:	f04f 0b00 	mov.w	fp, #0
 80190bc:	e01d      	b.n	80190fa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 80190be:	f1bb 0f00 	cmp.w	fp, #0
 80190c2:	d077      	beq.n	80191b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 80190c4:	f8bb 2000 	ldrh.w	r2, [fp]
 80190c8:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 80190cc:	f1bb 0f00 	cmp.w	fp, #0
 80190d0:	d002      	beq.n	80190d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 80190d2:	f10b 0202 	add.w	r2, fp, #2
 80190d6:	9209      	str	r2, [sp, #36]	; 0x24
 80190d8:	b10d      	cbz	r5, 80190de <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 80190da:	3501      	adds	r5, #1
 80190dc:	9508      	str	r5, [sp, #32]
 80190de:	3301      	adds	r3, #1
 80190e0:	930d      	str	r3, [sp, #52]	; 0x34
 80190e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80190e4:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 80190e8:	f1bb 0f00 	cmp.w	fp, #0
 80190ec:	d0d6      	beq.n	801909c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 80190ee:	f8bb 2000 	ldrh.w	r2, [fp]
 80190f2:	2a00      	cmp	r2, #0
 80190f4:	d1d6      	bne.n	80190a4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 80190f6:	f8bb 2000 	ldrh.w	r2, [fp]
 80190fa:	2a00      	cmp	r2, #0
 80190fc:	d0bb      	beq.n	8019076 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 80190fe:	459a      	cmp	sl, r3
 8019100:	ddb9      	ble.n	8019076 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8019102:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 8019106:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801910a:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 801910e:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 8019112:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 8019116:	960e      	str	r6, [sp, #56]	; 0x38
 8019118:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 801911c:	960f      	str	r6, [sp, #60]	; 0x3c
 801911e:	f1bb 0f00 	cmp.w	fp, #0
 8019122:	d002      	beq.n	801912a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 8019124:	f10b 0302 	add.w	r3, fp, #2
 8019128:	9309      	str	r3, [sp, #36]	; 0x24
 801912a:	b10d      	cbz	r5, 8019130 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801912c:	1c6b      	adds	r3, r5, #1
 801912e:	9308      	str	r3, [sp, #32]
 8019130:	ab0f      	add	r3, sp, #60	; 0x3c
 8019132:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 8019136:	a908      	add	r1, sp, #32
 8019138:	a809      	add	r0, sp, #36	; 0x24
 801913a:	9305      	str	r3, [sp, #20]
 801913c:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 8019140:	9304      	str	r3, [sp, #16]
 8019142:	ab0e      	add	r3, sp, #56	; 0x38
 8019144:	9303      	str	r3, [sp, #12]
 8019146:	ab0c      	add	r3, sp, #48	; 0x30
 8019148:	9302      	str	r3, [sp, #8]
 801914a:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801914e:	9301      	str	r3, [sp, #4]
 8019150:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8019154:	9300      	str	r3, [sp, #0]
 8019156:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801915a:	f7ff fea8 	bl	8018eae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801915e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019160:	2b00      	cmp	r3, #0
 8019162:	bfbf      	itttt	lt
 8019164:	6823      	ldrlt	r3, [r4, #0]
 8019166:	3404      	addlt	r4, #4
 8019168:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801916c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801916e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019170:	2b00      	cmp	r3, #0
 8019172:	bfbe      	ittt	lt
 8019174:	6823      	ldrlt	r3, [r4, #0]
 8019176:	3404      	addlt	r4, #4
 8019178:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801917c:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8019180:	bfb8      	it	lt
 8019182:	930f      	strlt	r3, [sp, #60]	; 0x3c
 8019184:	b1d9      	cbz	r1, 80191be <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 8019186:	880b      	ldrh	r3, [r1, #0]
 8019188:	2b69      	cmp	r3, #105	; 0x69
 801918a:	d01f      	beq.n	80191cc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801918c:	d82f      	bhi.n	80191ee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 801918e:	2b58      	cmp	r3, #88	; 0x58
 8019190:	d01c      	beq.n	80191cc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8019192:	d818      	bhi.n	80191c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 8019194:	2b25      	cmp	r3, #37	; 0x25
 8019196:	d034      	beq.n	8019202 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 8019198:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801919a:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801919e:	f1bb 0f00 	cmp.w	fp, #0
 80191a2:	f000 80b7 	beq.w	8019314 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 80191a6:	f8bb 5000 	ldrh.w	r5, [fp]
 80191aa:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 80191ae:	3301      	adds	r3, #1
 80191b0:	930d      	str	r3, [sp, #52]	; 0x34
 80191b2:	e029      	b.n	8019208 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 80191b4:	b10d      	cbz	r5, 80191ba <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 80191b6:	782a      	ldrb	r2, [r5, #0]
 80191b8:	e786      	b.n	80190c8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 80191ba:	462a      	mov	r2, r5
 80191bc:	e784      	b.n	80190c8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 80191be:	2a00      	cmp	r2, #0
 80191c0:	d0ea      	beq.n	8019198 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 80191c2:	7813      	ldrb	r3, [r2, #0]
 80191c4:	e7e0      	b.n	8019188 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 80191c6:	3b63      	subs	r3, #99	; 0x63
 80191c8:	2b01      	cmp	r3, #1
 80191ca:	d8e5      	bhi.n	8019198 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 80191cc:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 80191d0:	b329      	cbz	r1, 801921e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 80191d2:	880b      	ldrh	r3, [r1, #0]
 80191d4:	2b69      	cmp	r3, #105	; 0x69
 80191d6:	d063      	beq.n	80192a0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 80191d8:	d825      	bhi.n	8019226 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 80191da:	2b63      	cmp	r3, #99	; 0x63
 80191dc:	d038      	beq.n	8019250 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 80191de:	2b64      	cmp	r3, #100	; 0x64
 80191e0:	d05e      	beq.n	80192a0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 80191e2:	2b58      	cmp	r3, #88	; 0x58
 80191e4:	d07a      	beq.n	80192dc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 80191e6:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 80191ea:	4625      	mov	r5, r4
 80191ec:	e036      	b.n	801925c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 80191ee:	2b73      	cmp	r3, #115	; 0x73
 80191f0:	d0ec      	beq.n	80191cc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 80191f2:	d802      	bhi.n	80191fa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 80191f4:	2b6f      	cmp	r3, #111	; 0x6f
 80191f6:	d1cf      	bne.n	8019198 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 80191f8:	e7e8      	b.n	80191cc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 80191fa:	2b75      	cmp	r3, #117	; 0x75
 80191fc:	d0e6      	beq.n	80191cc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 80191fe:	2b78      	cmp	r3, #120	; 0x78
 8019200:	e7f9      	b.n	80191f6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 8019202:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019204:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 8019208:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801920a:	b10b      	cbz	r3, 8019210 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 801920c:	3302      	adds	r3, #2
 801920e:	9309      	str	r3, [sp, #36]	; 0x24
 8019210:	9b08      	ldr	r3, [sp, #32]
 8019212:	2b00      	cmp	r3, #0
 8019214:	f43f af2f 	beq.w	8019076 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8019218:	3301      	adds	r3, #1
 801921a:	9308      	str	r3, [sp, #32]
 801921c:	e72b      	b.n	8019076 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801921e:	2a00      	cmp	r2, #0
 8019220:	d0e1      	beq.n	80191e6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8019222:	7813      	ldrb	r3, [r2, #0]
 8019224:	e7d6      	b.n	80191d4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 8019226:	2b73      	cmp	r3, #115	; 0x73
 8019228:	d036      	beq.n	8019298 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 801922a:	d807      	bhi.n	801923c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 801922c:	2b6f      	cmp	r3, #111	; 0x6f
 801922e:	d1da      	bne.n	80191e6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8019230:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019232:	1d25      	adds	r5, r4, #4
 8019234:	2308      	movs	r3, #8
 8019236:	eba8 0202 	sub.w	r2, r8, r2
 801923a:	e049      	b.n	80192d0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801923c:	2b75      	cmp	r3, #117	; 0x75
 801923e:	d042      	beq.n	80192c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 8019240:	2b78      	cmp	r3, #120	; 0x78
 8019242:	d1d0      	bne.n	80191e6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8019244:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019246:	1d25      	adds	r5, r4, #4
 8019248:	2310      	movs	r3, #16
 801924a:	eba8 0202 	sub.w	r2, r8, r2
 801924e:	e03f      	b.n	80192d0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 8019250:	6823      	ldr	r3, [r4, #0]
 8019252:	1d25      	adds	r5, r4, #4
 8019254:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 8019258:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801925c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801925e:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 8019262:	2b00      	cmp	r3, #0
 8019264:	d051      	beq.n	801930a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 8019266:	881a      	ldrh	r2, [r3, #0]
 8019268:	a80d      	add	r0, sp, #52	; 0x34
 801926a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801926e:	462c      	mov	r4, r5
 8019270:	9005      	str	r0, [sp, #20]
 8019272:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 8019276:	9004      	str	r0, [sp, #16]
 8019278:	980e      	ldr	r0, [sp, #56]	; 0x38
 801927a:	9003      	str	r0, [sp, #12]
 801927c:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 8019280:	9002      	str	r0, [sp, #8]
 8019282:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8019284:	9001      	str	r0, [sp, #4]
 8019286:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 801928a:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801928e:	9000      	str	r0, [sp, #0]
 8019290:	a810      	add	r0, sp, #64	; 0x40
 8019292:	f7ff fd49 	bl	8018d28 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 8019296:	e7b7      	b.n	8019208 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 8019298:	1d25      	adds	r5, r4, #4
 801929a:	6823      	ldr	r3, [r4, #0]
 801929c:	9310      	str	r3, [sp, #64]	; 0x40
 801929e:	e7dd      	b.n	801925c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 80192a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80192a2:	230a      	movs	r3, #10
 80192a4:	4649      	mov	r1, r9
 80192a6:	6820      	ldr	r0, [r4, #0]
 80192a8:	eba8 0202 	sub.w	r2, r8, r2
 80192ac:	1d25      	adds	r5, r4, #4
 80192ae:	b292      	uxth	r2, r2
 80192b0:	f7ff fd08 	bl	8018cc4 <_ZN8touchgfx7Unicode4itoaElPtti>
 80192b4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80192b8:	2b2d      	cmp	r3, #45	; 0x2d
 80192ba:	d1cf      	bne.n	801925c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 80192bc:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 80192c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80192c2:	3302      	adds	r3, #2
 80192c4:	e7ea      	b.n	801929c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 80192c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80192c8:	1d25      	adds	r5, r4, #4
 80192ca:	230a      	movs	r3, #10
 80192cc:	eba8 0202 	sub.w	r2, r8, r2
 80192d0:	b292      	uxth	r2, r2
 80192d2:	4649      	mov	r1, r9
 80192d4:	6820      	ldr	r0, [r4, #0]
 80192d6:	f7ff fcd7 	bl	8018c88 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 80192da:	e7bf      	b.n	801925c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 80192dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80192de:	2310      	movs	r3, #16
 80192e0:	4649      	mov	r1, r9
 80192e2:	6820      	ldr	r0, [r4, #0]
 80192e4:	eba8 0202 	sub.w	r2, r8, r2
 80192e8:	1d25      	adds	r5, r4, #4
 80192ea:	b292      	uxth	r2, r2
 80192ec:	f7ff fccc 	bl	8018c88 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 80192f0:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 80192f4:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 80192f8:	2b00      	cmp	r3, #0
 80192fa:	d0af      	beq.n	801925c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 80192fc:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 8019300:	2919      	cmp	r1, #25
 8019302:	d8f7      	bhi.n	80192f4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 8019304:	3b20      	subs	r3, #32
 8019306:	8013      	strh	r3, [r2, #0]
 8019308:	e7f4      	b.n	80192f4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801930a:	9a08      	ldr	r2, [sp, #32]
 801930c:	2a00      	cmp	r2, #0
 801930e:	d0ab      	beq.n	8019268 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 8019310:	7812      	ldrb	r2, [r2, #0]
 8019312:	e7a9      	b.n	8019268 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 8019314:	2d00      	cmp	r5, #0
 8019316:	f43f af48 	beq.w	80191aa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 801931a:	782d      	ldrb	r5, [r5, #0]
 801931c:	e745      	b.n	80191aa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

0801931e <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801931e:	b507      	push	{r0, r1, r2, lr}
 8019320:	9300      	str	r3, [sp, #0]
 8019322:	4613      	mov	r3, r2
 8019324:	2200      	movs	r2, #0
 8019326:	f7ff fe92 	bl	801904e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801932a:	b003      	add	sp, #12
 801932c:	f85d fb04 	ldr.w	pc, [sp], #4

08019330 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 8019330:	b40c      	push	{r2, r3}
 8019332:	b507      	push	{r0, r1, r2, lr}
 8019334:	ab04      	add	r3, sp, #16
 8019336:	f853 2b04 	ldr.w	r2, [r3], #4
 801933a:	9301      	str	r3, [sp, #4]
 801933c:	f7ff ffef 	bl	801931e <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 8019340:	b003      	add	sp, #12
 8019342:	f85d eb04 	ldr.w	lr, [sp], #4
 8019346:	b002      	add	sp, #8
 8019348:	4770      	bx	lr
	...

0801934c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf>:
 801934c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019350:	b0c3      	sub	sp, #268	; 0x10c
 8019352:	2600      	movs	r6, #0
 8019354:	4607      	mov	r7, r0
 8019356:	4689      	mov	r9, r1
 8019358:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 801935c:	4631      	mov	r1, r6
 801935e:	f8dd a130 	ldr.w	sl, [sp, #304]	; 0x130
 8019362:	4640      	mov	r0, r8
 8019364:	960c      	str	r6, [sp, #48]	; 0x30
 8019366:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801936a:	22c8      	movs	r2, #200	; 0xc8
 801936c:	f00c fdd6 	bl	8025f1c <memset>
 8019370:	b17f      	cbz	r7, 8019392 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x46>
 8019372:	eddf 5aa3 	vldr	s11, [pc, #652]	; 8019600 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2b4>
 8019376:	f8df b294 	ldr.w	fp, [pc, #660]	; 801960c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2c0>
 801937a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801937c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801937e:	b162      	cbz	r2, 801939a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x4e>
 8019380:	8812      	ldrh	r2, [r2, #0]
 8019382:	b11a      	cbz	r2, 801938c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x40>
 8019384:	f109 31ff 	add.w	r1, r9, #4294967295
 8019388:	4299      	cmp	r1, r3
 801938a:	dc26      	bgt.n	80193da <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x8e>
 801938c:	2200      	movs	r2, #0
 801938e:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8019392:	4638      	mov	r0, r7
 8019394:	b043      	add	sp, #268	; 0x10c
 8019396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801939a:	9a08      	ldr	r2, [sp, #32]
 801939c:	2a00      	cmp	r2, #0
 801939e:	d0f5      	beq.n	801938c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x40>
 80193a0:	7812      	ldrb	r2, [r2, #0]
 80193a2:	e7ee      	b.n	8019382 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x36>
 80193a4:	2c00      	cmp	r4, #0
 80193a6:	d0e8      	beq.n	801937a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2e>
 80193a8:	7822      	ldrb	r2, [r4, #0]
 80193aa:	b132      	cbz	r2, 80193ba <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x6e>
 80193ac:	2a25      	cmp	r2, #37	; 0x25
 80193ae:	d001      	beq.n	80193b4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x68>
 80193b0:	4299      	cmp	r1, r3
 80193b2:	dc05      	bgt.n	80193c0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x74>
 80193b4:	b9cd      	cbnz	r5, 80193ea <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x9e>
 80193b6:	2c00      	cmp	r4, #0
 80193b8:	d0df      	beq.n	801937a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2e>
 80193ba:	7822      	ldrb	r2, [r4, #0]
 80193bc:	2500      	movs	r5, #0
 80193be:	e015      	b.n	80193ec <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0xa0>
 80193c0:	2d00      	cmp	r5, #0
 80193c2:	d073      	beq.n	80194ac <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x160>
 80193c4:	882a      	ldrh	r2, [r5, #0]
 80193c6:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 80193ca:	b10d      	cbz	r5, 80193d0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x84>
 80193cc:	3502      	adds	r5, #2
 80193ce:	9509      	str	r5, [sp, #36]	; 0x24
 80193d0:	b10c      	cbz	r4, 80193d6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x8a>
 80193d2:	3401      	adds	r4, #1
 80193d4:	9408      	str	r4, [sp, #32]
 80193d6:	3301      	adds	r3, #1
 80193d8:	930c      	str	r3, [sp, #48]	; 0x30
 80193da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80193dc:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 80193e0:	2d00      	cmp	r5, #0
 80193e2:	d0df      	beq.n	80193a4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x58>
 80193e4:	882a      	ldrh	r2, [r5, #0]
 80193e6:	2a00      	cmp	r2, #0
 80193e8:	d1e0      	bne.n	80193ac <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x60>
 80193ea:	882a      	ldrh	r2, [r5, #0]
 80193ec:	2a00      	cmp	r2, #0
 80193ee:	d0c4      	beq.n	801937a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2e>
 80193f0:	4299      	cmp	r1, r3
 80193f2:	ddc2      	ble.n	801937a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2e>
 80193f4:	2300      	movs	r3, #0
 80193f6:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 80193fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80193fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019402:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8019406:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 801940a:	930d      	str	r3, [sp, #52]	; 0x34
 801940c:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 8019410:	930e      	str	r3, [sp, #56]	; 0x38
 8019412:	b10d      	cbz	r5, 8019418 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0xcc>
 8019414:	1cab      	adds	r3, r5, #2
 8019416:	9309      	str	r3, [sp, #36]	; 0x24
 8019418:	b10c      	cbz	r4, 801941e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0xd2>
 801941a:	1c63      	adds	r3, r4, #1
 801941c:	9308      	str	r3, [sp, #32]
 801941e:	ab0e      	add	r3, sp, #56	; 0x38
 8019420:	f10d 022e 	add.w	r2, sp, #46	; 0x2e
 8019424:	a908      	add	r1, sp, #32
 8019426:	a809      	add	r0, sp, #36	; 0x24
 8019428:	9305      	str	r3, [sp, #20]
 801942a:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801942e:	9304      	str	r3, [sp, #16]
 8019430:	ab0d      	add	r3, sp, #52	; 0x34
 8019432:	9303      	str	r3, [sp, #12]
 8019434:	ab0b      	add	r3, sp, #44	; 0x2c
 8019436:	9302      	str	r3, [sp, #8]
 8019438:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
 801943c:	9301      	str	r3, [sp, #4]
 801943e:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 8019442:	9300      	str	r3, [sp, #0]
 8019444:	f10d 0329 	add.w	r3, sp, #41	; 0x29
 8019448:	f7ff fd31 	bl	8018eae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801944c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801944e:	2b00      	cmp	r3, #0
 8019450:	da0b      	bge.n	801946a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x11e>
 8019452:	eb0a 0386 	add.w	r3, sl, r6, lsl #2
 8019456:	3601      	adds	r6, #1
 8019458:	edd3 7a00 	vldr	s15, [r3]
 801945c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019460:	ee17 3a90 	vmov	r3, s15
 8019464:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019468:	930d      	str	r3, [sp, #52]	; 0x34
 801946a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801946c:	2b00      	cmp	r3, #0
 801946e:	da0b      	bge.n	8019488 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x13c>
 8019470:	eb0a 0386 	add.w	r3, sl, r6, lsl #2
 8019474:	3601      	adds	r6, #1
 8019476:	edd3 7a00 	vldr	s15, [r3]
 801947a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801947e:	ee17 3a90 	vmov	r3, s15
 8019482:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019486:	930e      	str	r3, [sp, #56]	; 0x38
 8019488:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801948a:	b1a3      	cbz	r3, 80194b6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x16a>
 801948c:	881a      	ldrh	r2, [r3, #0]
 801948e:	2a25      	cmp	r2, #37	; 0x25
 8019490:	d016      	beq.n	80194c0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x174>
 8019492:	2a66      	cmp	r2, #102	; 0x66
 8019494:	d01a      	beq.n	80194cc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x180>
 8019496:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019498:	e9cd 4508 	strd	r4, r5, [sp, #32]
 801949c:	2d00      	cmp	r5, #0
 801949e:	f000 80fd 	beq.w	801969c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x350>
 80194a2:	882c      	ldrh	r4, [r5, #0]
 80194a4:	f827 4013 	strh.w	r4, [r7, r3, lsl #1]
 80194a8:	3301      	adds	r3, #1
 80194aa:	e00d      	b.n	80194c8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x17c>
 80194ac:	b10c      	cbz	r4, 80194b2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x166>
 80194ae:	7822      	ldrb	r2, [r4, #0]
 80194b0:	e789      	b.n	80193c6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x7a>
 80194b2:	4622      	mov	r2, r4
 80194b4:	e787      	b.n	80193c6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x7a>
 80194b6:	9b08      	ldr	r3, [sp, #32]
 80194b8:	2b00      	cmp	r3, #0
 80194ba:	d0ec      	beq.n	8019496 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x14a>
 80194bc:	781a      	ldrb	r2, [r3, #0]
 80194be:	e7e6      	b.n	801948e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x142>
 80194c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80194c2:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 80194c6:	3302      	adds	r3, #2
 80194c8:	930c      	str	r3, [sp, #48]	; 0x30
 80194ca:	e040      	b.n	801954e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x202>
 80194cc:	eb0a 0386 	add.w	r3, sl, r6, lsl #2
 80194d0:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 80194d4:	3601      	adds	r6, #1
 80194d6:	edd3 7a00 	vldr	s15, [r3]
 80194da:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 80194de:	b923      	cbnz	r3, 80194ea <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x19e>
 80194e0:	2301      	movs	r3, #1
 80194e2:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 80194e6:	2306      	movs	r3, #6
 80194e8:	930e      	str	r3, [sp, #56]	; 0x38
 80194ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80194ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80194f2:	bf42      	ittt	mi
 80194f4:	eef1 7a67 	vnegmi.f32	s15, s15
 80194f8:	232d      	movmi	r3, #45	; 0x2d
 80194fa:	f8ad 302e 	strhmi.w	r3, [sp, #46]	; 0x2e
 80194fe:	eeb0 7ae7 	vabs.f32	s14, s15
 8019502:	eeb4 7a65 	vcmp.f32	s14, s11
 8019506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801950a:	dd2b      	ble.n	8019564 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x218>
 801950c:	2366      	movs	r3, #102	; 0x66
 801950e:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
 8019512:	9311      	str	r3, [sp, #68]	; 0x44
 8019514:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019516:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801951a:	2b00      	cmp	r3, #0
 801951c:	f000 80b8 	beq.w	8019690 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x344>
 8019520:	881a      	ldrh	r2, [r3, #0]
 8019522:	a80c      	add	r0, sp, #48	; 0x30
 8019524:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 8019528:	9005      	str	r0, [sp, #20]
 801952a:	f89d 0029 	ldrb.w	r0, [sp, #41]	; 0x29
 801952e:	9004      	str	r0, [sp, #16]
 8019530:	980d      	ldr	r0, [sp, #52]	; 0x34
 8019532:	9003      	str	r0, [sp, #12]
 8019534:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
 8019538:	9002      	str	r0, [sp, #8]
 801953a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801953c:	9001      	str	r0, [sp, #4]
 801953e:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
 8019542:	e9cd 9706 	strd	r9, r7, [sp, #24]
 8019546:	9000      	str	r0, [sp, #0]
 8019548:	a80f      	add	r0, sp, #60	; 0x3c
 801954a:	f7ff fbed 	bl	8018d28 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801954e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019550:	b10b      	cbz	r3, 8019556 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x20a>
 8019552:	3302      	adds	r3, #2
 8019554:	9309      	str	r3, [sp, #36]	; 0x24
 8019556:	9b08      	ldr	r3, [sp, #32]
 8019558:	2b00      	cmp	r3, #0
 801955a:	f43f af0e 	beq.w	801937a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2e>
 801955e:	3301      	adds	r3, #1
 8019560:	9308      	str	r3, [sp, #32]
 8019562:	e70a      	b.n	801937a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2e>
 8019564:	eef4 7a67 	vcmp.f32	s15, s15
 8019568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801956c:	d60b      	bvs.n	8019586 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x23a>
 801956e:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 8019572:	980e      	ldr	r0, [sp, #56]	; 0x38
 8019574:	2300      	movs	r3, #0
 8019576:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8019604 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2b8>
 801957a:	4283      	cmp	r3, r0
 801957c:	da07      	bge.n	801958e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x242>
 801957e:	ee87 7a06 	vdiv.f32	s14, s14, s12
 8019582:	3301      	adds	r3, #1
 8019584:	e7f9      	b.n	801957a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x22e>
 8019586:	4b20      	ldr	r3, [pc, #128]	; (8019608 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2bc>)
 8019588:	9310      	str	r3, [sp, #64]	; 0x40
 801958a:	236e      	movs	r3, #110	; 0x6e
 801958c:	e7c1      	b.n	8019512 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1c6>
 801958e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019592:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019596:	eeb0 7a67 	vmov.f32	s14, s15
 801959a:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801959e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195a2:	da27      	bge.n	80195f4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a8>
 80195a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80195a6:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 80195aa:	2100      	movs	r1, #0
 80195ac:	eba9 0202 	sub.w	r2, r9, r2
 80195b0:	eef4 6ac5 	vcmpe.f32	s13, s10
 80195b4:	b28c      	uxth	r4, r1
 80195b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195ba:	db2a      	blt.n	8019612 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2c6>
 80195bc:	1a53      	subs	r3, r2, r1
 80195be:	2b00      	cmp	r3, #0
 80195c0:	dd27      	ble.n	8019612 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2c6>
 80195c2:	2963      	cmp	r1, #99	; 0x63
 80195c4:	d024      	beq.n	8019610 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2c4>
 80195c6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80195ca:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80195ce:	ee17 3a10 	vmov	r3, s14
 80195d2:	2b09      	cmp	r3, #9
 80195d4:	bfa8      	it	ge
 80195d6:	2309      	movge	r3, #9
 80195d8:	ee07 3a10 	vmov	s14, r3
 80195dc:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80195e0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80195e4:	f828 4011 	strh.w	r4, [r8, r1, lsl #1]
 80195e8:	3101      	adds	r1, #1
 80195ea:	eee7 7a66 	vfms.f32	s15, s14, s13
 80195ee:	eec6 6a86 	vdiv.f32	s13, s13, s12
 80195f2:	e7dd      	b.n	80195b0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x264>
 80195f4:	ee66 6a86 	vmul.f32	s13, s13, s12
 80195f8:	ee87 7a06 	vdiv.f32	s14, s14, s12
 80195fc:	e7cd      	b.n	801959a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x24e>
 80195fe:	bf00      	nop
 8019600:	7f7fffff 	.word	0x7f7fffff
 8019604:	3f000002 	.word	0x3f000002
 8019608:	0061006e 	.word	0x0061006e
 801960c:	006e0069 	.word	0x006e0069
 8019610:	460c      	mov	r4, r1
 8019612:	2a63      	cmp	r2, #99	; 0x63
 8019614:	bfd4      	ite	le
 8019616:	ebc4 0202 	rsble	r2, r4, r2
 801961a:	f1c4 0263 	rsbgt	r2, r4, #99	; 0x63
 801961e:	2a00      	cmp	r2, #0
 8019620:	dd31      	ble.n	8019686 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x33a>
 8019622:	4603      	mov	r3, r0
 8019624:	2501      	movs	r5, #1
 8019626:	210a      	movs	r1, #10
 8019628:	2b00      	cmp	r3, #0
 801962a:	dd0d      	ble.n	8019648 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2fc>
 801962c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8019630:	3b01      	subs	r3, #1
 8019632:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8019636:	ee17 ca10 	vmov	ip, s14
 801963a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801963e:	fb01 c505 	mla	r5, r1, r5, ip
 8019642:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019646:	e7ef      	b.n	8019628 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2dc>
 8019648:	2800      	cmp	r0, #0
 801964a:	f100 33ff 	add.w	r3, r0, #4294967295
 801964e:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8019652:	bfac      	ite	ge
 8019654:	1a18      	subge	r0, r3, r0
 8019656:	4618      	movlt	r0, r3
 8019658:	b292      	uxth	r2, r2
 801965a:	230a      	movs	r3, #10
 801965c:	900e      	str	r0, [sp, #56]	; 0x38
 801965e:	eb08 0104 	add.w	r1, r8, r4
 8019662:	4628      	mov	r0, r5
 8019664:	f7ff fb2e 	bl	8018cc4 <_ZN8touchgfx7Unicode4itoaElPtti>
 8019668:	2d01      	cmp	r5, #1
 801966a:	dc0a      	bgt.n	8019682 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x336>
 801966c:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 8019670:	2b00      	cmp	r3, #0
 8019672:	bf0c      	ite	eq
 8019674:	2300      	moveq	r3, #0
 8019676:	232e      	movne	r3, #46	; 0x2e
 8019678:	aa42      	add	r2, sp, #264	; 0x108
 801967a:	4414      	add	r4, r2
 801967c:	f824 3cc8 	strh.w	r3, [r4, #-200]
 8019680:	e748      	b.n	8019514 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1c8>
 8019682:	232e      	movs	r3, #46	; 0x2e
 8019684:	e7f8      	b.n	8019678 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x32c>
 8019686:	ab42      	add	r3, sp, #264	; 0x108
 8019688:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 801968c:	2300      	movs	r3, #0
 801968e:	e7f5      	b.n	801967c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x330>
 8019690:	9a08      	ldr	r2, [sp, #32]
 8019692:	2a00      	cmp	r2, #0
 8019694:	f43f af45 	beq.w	8019522 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1d6>
 8019698:	7812      	ldrb	r2, [r2, #0]
 801969a:	e742      	b.n	8019522 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1d6>
 801969c:	2c00      	cmp	r4, #0
 801969e:	f43f af01 	beq.w	80194a4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x158>
 80196a2:	7824      	ldrb	r4, [r4, #0]
 80196a4:	e6fe      	b.n	80194a4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x158>
 80196a6:	bf00      	nop

080196a8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>:
 80196a8:	b507      	push	{r0, r1, r2, lr}
 80196aa:	9300      	str	r3, [sp, #0]
 80196ac:	4613      	mov	r3, r2
 80196ae:	2200      	movs	r2, #0
 80196b0:	f7ff fe4c 	bl	801934c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf>
 80196b4:	b003      	add	sp, #12
 80196b6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080196bc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 80196bc:	4b01      	ldr	r3, [pc, #4]	; (80196c4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 80196be:	6018      	str	r0, [r3, #0]
 80196c0:	4770      	bx	lr
 80196c2:	bf00      	nop
 80196c4:	20027c2c 	.word	0x20027c2c

080196c8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 80196c8:	4b06      	ldr	r3, [pc, #24]	; (80196e4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 80196ca:	881a      	ldrh	r2, [r3, #0]
 80196cc:	4282      	cmp	r2, r0
 80196ce:	d807      	bhi.n	80196e0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 80196d0:	4b05      	ldr	r3, [pc, #20]	; (80196e8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 80196d2:	881b      	ldrh	r3, [r3, #0]
 80196d4:	4413      	add	r3, r2
 80196d6:	4298      	cmp	r0, r3
 80196d8:	bfac      	ite	ge
 80196da:	2000      	movge	r0, #0
 80196dc:	2001      	movlt	r0, #1
 80196de:	4770      	bx	lr
 80196e0:	2000      	movs	r0, #0
 80196e2:	4770      	bx	lr
 80196e4:	20027c4c 	.word	0x20027c4c
 80196e8:	20027c50 	.word	0x20027c50

080196ec <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 80196ec:	b508      	push	{r3, lr}
 80196ee:	4601      	mov	r1, r0
 80196f0:	f7ff ffea 	bl	80196c8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 80196f4:	b118      	cbz	r0, 80196fe <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 80196f6:	4b02      	ldr	r3, [pc, #8]	; (8019700 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 80196f8:	681b      	ldr	r3, [r3, #0]
 80196fa:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80196fe:	bd08      	pop	{r3, pc}
 8019700:	20027c30 	.word	0x20027c30

08019704 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8019704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019706:	4c24      	ldr	r4, [pc, #144]	; (8019798 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 8019708:	6823      	ldr	r3, [r4, #0]
 801970a:	2b00      	cmp	r3, #0
 801970c:	d042      	beq.n	8019794 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801970e:	4a23      	ldr	r2, [pc, #140]	; (801979c <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 8019710:	4d23      	ldr	r5, [pc, #140]	; (80197a0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 8019712:	8811      	ldrh	r1, [r2, #0]
 8019714:	f8b5 c000 	ldrh.w	ip, [r5]
 8019718:	4822      	ldr	r0, [pc, #136]	; (80197a4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801971a:	4461      	add	r1, ip
 801971c:	1c4a      	adds	r2, r1, #1
 801971e:	008f      	lsls	r7, r1, #2
 8019720:	f022 0201 	bic.w	r2, r2, #1
 8019724:	19de      	adds	r6, r3, r7
 8019726:	0412      	lsls	r2, r2, #16
 8019728:	6006      	str	r6, [r0, #0]
 801972a:	4e1f      	ldr	r6, [pc, #124]	; (80197a8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801972c:	0c12      	lsrs	r2, r2, #16
 801972e:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 8019732:	19da      	adds	r2, r3, r7
 8019734:	6032      	str	r2, [r6, #0]
 8019736:	220e      	movs	r2, #14
 8019738:	fb02 f20c 	mul.w	r2, r2, ip
 801973c:	3203      	adds	r2, #3
 801973e:	f022 0203 	bic.w	r2, r2, #3
 8019742:	443a      	add	r2, r7
 8019744:	4f19      	ldr	r7, [pc, #100]	; (80197ac <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8019746:	4413      	add	r3, r2
 8019748:	603b      	str	r3, [r7, #0]
 801974a:	2300      	movs	r3, #0
 801974c:	4f18      	ldr	r7, [pc, #96]	; (80197b0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801974e:	469c      	mov	ip, r3
 8019750:	803b      	strh	r3, [r7, #0]
 8019752:	4f18      	ldr	r7, [pc, #96]	; (80197b4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8019754:	683f      	ldr	r7, [r7, #0]
 8019756:	1aba      	subs	r2, r7, r2
 8019758:	4f17      	ldr	r7, [pc, #92]	; (80197b8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801975a:	603a      	str	r2, [r7, #0]
 801975c:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8019760:	4a16      	ldr	r2, [pc, #88]	; (80197bc <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8019762:	8013      	strh	r3, [r2, #0]
 8019764:	428b      	cmp	r3, r1
 8019766:	d10d      	bne.n	8019784 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 8019768:	882d      	ldrh	r5, [r5, #0]
 801976a:	2300      	movs	r3, #0
 801976c:	6830      	ldr	r0, [r6, #0]
 801976e:	240e      	movs	r4, #14
 8019770:	429d      	cmp	r5, r3
 8019772:	d90f      	bls.n	8019794 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8019774:	fb04 0203 	mla	r2, r4, r3, r0
 8019778:	3301      	adds	r3, #1
 801977a:	7b11      	ldrb	r1, [r2, #12]
 801977c:	f36f 1145 	bfc	r1, #5, #1
 8019780:	7311      	strb	r1, [r2, #12]
 8019782:	e7f5      	b.n	8019770 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 8019784:	6822      	ldr	r2, [r4, #0]
 8019786:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801978a:	6802      	ldr	r2, [r0, #0]
 801978c:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 8019790:	3301      	adds	r3, #1
 8019792:	e7e7      	b.n	8019764 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 8019794:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019796:	bf00      	nop
 8019798:	20027c30 	.word	0x20027c30
 801979c:	20027c4c 	.word	0x20027c4c
 80197a0:	20027c50 	.word	0x20027c50
 80197a4:	20027c44 	.word	0x20027c44
 80197a8:	20027c34 	.word	0x20027c34
 80197ac:	20027c3c 	.word	0x20027c3c
 80197b0:	20027c4e 	.word	0x20027c4e
 80197b4:	20027c38 	.word	0x20027c38
 80197b8:	20027c48 	.word	0x20027c48
 80197bc:	20027c40 	.word	0x20027c40

080197c0 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 80197c0:	4b06      	ldr	r3, [pc, #24]	; (80197dc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 80197c2:	681b      	ldr	r3, [r3, #0]
 80197c4:	b943      	cbnz	r3, 80197d8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 80197c6:	b139      	cbz	r1, 80197d8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 80197c8:	4b05      	ldr	r3, [pc, #20]	; (80197e0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 80197ca:	801a      	strh	r2, [r3, #0]
 80197cc:	4b05      	ldr	r3, [pc, #20]	; (80197e4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 80197ce:	6019      	str	r1, [r3, #0]
 80197d0:	4b05      	ldr	r3, [pc, #20]	; (80197e8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 80197d2:	6018      	str	r0, [r3, #0]
 80197d4:	f7ff bf96 	b.w	8019704 <_ZN8touchgfx6Bitmap10clearCacheEv>
 80197d8:	4770      	bx	lr
 80197da:	bf00      	nop
 80197dc:	20027c3c 	.word	0x20027c3c
 80197e0:	20027c50 	.word	0x20027c50
 80197e4:	20027c38 	.word	0x20027c38
 80197e8:	20027c30 	.word	0x20027c30

080197ec <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 80197ec:	b470      	push	{r4, r5, r6}
 80197ee:	4c07      	ldr	r4, [pc, #28]	; (801980c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 80197f0:	4605      	mov	r5, r0
 80197f2:	4610      	mov	r0, r2
 80197f4:	9a03      	ldr	r2, [sp, #12]
 80197f6:	6826      	ldr	r6, [r4, #0]
 80197f8:	b936      	cbnz	r6, 8019808 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 80197fa:	6025      	str	r5, [r4, #0]
 80197fc:	4c04      	ldr	r4, [pc, #16]	; (8019810 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 80197fe:	8021      	strh	r1, [r4, #0]
 8019800:	4619      	mov	r1, r3
 8019802:	bc70      	pop	{r4, r5, r6}
 8019804:	f7ff bfdc 	b.w	80197c0 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8019808:	bc70      	pop	{r4, r5, r6}
 801980a:	4770      	bx	lr
 801980c:	20027c54 	.word	0x20027c54
 8019810:	20027c4c 	.word	0x20027c4c

08019814 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8019814:	4a12      	ldr	r2, [pc, #72]	; (8019860 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 8019816:	8803      	ldrh	r3, [r0, #0]
 8019818:	8812      	ldrh	r2, [r2, #0]
 801981a:	4293      	cmp	r3, r2
 801981c:	d207      	bcs.n	801982e <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801981e:	4a11      	ldr	r2, [pc, #68]	; (8019864 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 8019820:	2114      	movs	r1, #20
 8019822:	6812      	ldr	r2, [r2, #0]
 8019824:	fb01 2303 	mla	r3, r1, r3, r2
 8019828:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801982c:	4770      	bx	lr
 801982e:	490e      	ldr	r1, [pc, #56]	; (8019868 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8019830:	8809      	ldrh	r1, [r1, #0]
 8019832:	4411      	add	r1, r2
 8019834:	428b      	cmp	r3, r1
 8019836:	da04      	bge.n	8019842 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 8019838:	1a9b      	subs	r3, r3, r2
 801983a:	4a0c      	ldr	r2, [pc, #48]	; (801986c <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801983c:	210e      	movs	r1, #14
 801983e:	6812      	ldr	r2, [r2, #0]
 8019840:	e7f0      	b.n	8019824 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 8019842:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8019846:	4293      	cmp	r3, r2
 8019848:	d108      	bne.n	801985c <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801984a:	4b09      	ldr	r3, [pc, #36]	; (8019870 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801984c:	781b      	ldrb	r3, [r3, #0]
 801984e:	b91b      	cbnz	r3, 8019858 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 8019850:	4b08      	ldr	r3, [pc, #32]	; (8019874 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8019852:	f9b3 0000 	ldrsh.w	r0, [r3]
 8019856:	4770      	bx	lr
 8019858:	4b07      	ldr	r3, [pc, #28]	; (8019878 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801985a:	e7fa      	b.n	8019852 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801985c:	2000      	movs	r0, #0
 801985e:	4770      	bx	lr
 8019860:	20027c4c 	.word	0x20027c4c
 8019864:	20027c54 	.word	0x20027c54
 8019868:	20027c50 	.word	0x20027c50
 801986c:	20027c34 	.word	0x20027c34
 8019870:	20027bbc 	.word	0x20027bbc
 8019874:	20027bbe 	.word	0x20027bbe
 8019878:	20027bc0 	.word	0x20027bc0

0801987c <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801987c:	4a12      	ldr	r2, [pc, #72]	; (80198c8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801987e:	8803      	ldrh	r3, [r0, #0]
 8019880:	8812      	ldrh	r2, [r2, #0]
 8019882:	4293      	cmp	r3, r2
 8019884:	d207      	bcs.n	8019896 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 8019886:	4a11      	ldr	r2, [pc, #68]	; (80198cc <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 8019888:	2114      	movs	r1, #20
 801988a:	6812      	ldr	r2, [r2, #0]
 801988c:	fb01 2303 	mla	r3, r1, r3, r2
 8019890:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 8019894:	4770      	bx	lr
 8019896:	490e      	ldr	r1, [pc, #56]	; (80198d0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8019898:	8809      	ldrh	r1, [r1, #0]
 801989a:	4411      	add	r1, r2
 801989c:	428b      	cmp	r3, r1
 801989e:	da04      	bge.n	80198aa <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 80198a0:	1a9b      	subs	r3, r3, r2
 80198a2:	4a0c      	ldr	r2, [pc, #48]	; (80198d4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 80198a4:	210e      	movs	r1, #14
 80198a6:	6812      	ldr	r2, [r2, #0]
 80198a8:	e7f0      	b.n	801988c <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 80198aa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80198ae:	4293      	cmp	r3, r2
 80198b0:	d108      	bne.n	80198c4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 80198b2:	4b09      	ldr	r3, [pc, #36]	; (80198d8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 80198b4:	781b      	ldrb	r3, [r3, #0]
 80198b6:	b91b      	cbnz	r3, 80198c0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 80198b8:	4b08      	ldr	r3, [pc, #32]	; (80198dc <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 80198ba:	f9b3 0000 	ldrsh.w	r0, [r3]
 80198be:	4770      	bx	lr
 80198c0:	4b07      	ldr	r3, [pc, #28]	; (80198e0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 80198c2:	e7fa      	b.n	80198ba <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 80198c4:	2000      	movs	r0, #0
 80198c6:	4770      	bx	lr
 80198c8:	20027c4c 	.word	0x20027c4c
 80198cc:	20027c54 	.word	0x20027c54
 80198d0:	20027c50 	.word	0x20027c50
 80198d4:	20027c34 	.word	0x20027c34
 80198d8:	20027bbc 	.word	0x20027bbc
 80198dc:	20027bc0 	.word	0x20027bc0
 80198e0:	20027bbe 	.word	0x20027bbe

080198e4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 80198e4:	4a1f      	ldr	r2, [pc, #124]	; (8019964 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 80198e6:	b510      	push	{r4, lr}
 80198e8:	880b      	ldrh	r3, [r1, #0]
 80198ea:	8812      	ldrh	r2, [r2, #0]
 80198ec:	4293      	cmp	r3, r2
 80198ee:	d213      	bcs.n	8019918 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 80198f0:	4a1d      	ldr	r2, [pc, #116]	; (8019968 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 80198f2:	2114      	movs	r1, #20
 80198f4:	6812      	ldr	r2, [r2, #0]
 80198f6:	fb01 2303 	mla	r3, r1, r3, r2
 80198fa:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 80198fe:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8019902:	8a1a      	ldrh	r2, [r3, #16]
 8019904:	8a5b      	ldrh	r3, [r3, #18]
 8019906:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801990a:	8004      	strh	r4, [r0, #0]
 801990c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019910:	8041      	strh	r1, [r0, #2]
 8019912:	8082      	strh	r2, [r0, #4]
 8019914:	80c3      	strh	r3, [r0, #6]
 8019916:	e00e      	b.n	8019936 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 8019918:	4914      	ldr	r1, [pc, #80]	; (801996c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 801991a:	8809      	ldrh	r1, [r1, #0]
 801991c:	4411      	add	r1, r2
 801991e:	428b      	cmp	r3, r1
 8019920:	da0a      	bge.n	8019938 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 8019922:	1a9b      	subs	r3, r3, r2
 8019924:	4a12      	ldr	r2, [pc, #72]	; (8019970 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 8019926:	210e      	movs	r1, #14
 8019928:	6812      	ldr	r2, [r2, #0]
 801992a:	fb01 2303 	mla	r3, r1, r3, r2
 801992e:	681a      	ldr	r2, [r3, #0]
 8019930:	6002      	str	r2, [r0, #0]
 8019932:	685a      	ldr	r2, [r3, #4]
 8019934:	6042      	str	r2, [r0, #4]
 8019936:	bd10      	pop	{r4, pc}
 8019938:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801993c:	4293      	cmp	r3, r2
 801993e:	d10b      	bne.n	8019958 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 8019940:	4b0c      	ldr	r3, [pc, #48]	; (8019974 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8019942:	f9b3 1000 	ldrsh.w	r1, [r3]
 8019946:	4b0c      	ldr	r3, [pc, #48]	; (8019978 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8019948:	8081      	strh	r1, [r0, #4]
 801994a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801994e:	2300      	movs	r3, #0
 8019950:	80c2      	strh	r2, [r0, #6]
 8019952:	8003      	strh	r3, [r0, #0]
 8019954:	8043      	strh	r3, [r0, #2]
 8019956:	e7ee      	b.n	8019936 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 8019958:	2300      	movs	r3, #0
 801995a:	8003      	strh	r3, [r0, #0]
 801995c:	8043      	strh	r3, [r0, #2]
 801995e:	8083      	strh	r3, [r0, #4]
 8019960:	e7d8      	b.n	8019914 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 8019962:	bf00      	nop
 8019964:	20027c4c 	.word	0x20027c4c
 8019968:	20027c54 	.word	0x20027c54
 801996c:	20027c50 	.word	0x20027c50
 8019970:	20027c34 	.word	0x20027c34
 8019974:	20027bb8 	.word	0x20027bb8
 8019978:	20027bba 	.word	0x20027bba

0801997c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801997c:	4a17      	ldr	r2, [pc, #92]	; (80199dc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 801997e:	8803      	ldrh	r3, [r0, #0]
 8019980:	8812      	ldrh	r2, [r2, #0]
 8019982:	4293      	cmp	r3, r2
 8019984:	d213      	bcs.n	80199ae <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 8019986:	4a16      	ldr	r2, [pc, #88]	; (80199e0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 8019988:	2114      	movs	r1, #20
 801998a:	6812      	ldr	r2, [r2, #0]
 801998c:	fb01 2303 	mla	r3, r1, r3, r2
 8019990:	8a1a      	ldrh	r2, [r3, #16]
 8019992:	8919      	ldrh	r1, [r3, #8]
 8019994:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8019998:	428a      	cmp	r2, r1
 801999a:	db1d      	blt.n	80199d8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801999c:	8a58      	ldrh	r0, [r3, #18]
 801999e:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80199a2:	895b      	ldrh	r3, [r3, #10]
 80199a4:	4298      	cmp	r0, r3
 80199a6:	bfac      	ite	ge
 80199a8:	2000      	movge	r0, #0
 80199aa:	2001      	movlt	r0, #1
 80199ac:	4770      	bx	lr
 80199ae:	490d      	ldr	r1, [pc, #52]	; (80199e4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 80199b0:	8809      	ldrh	r1, [r1, #0]
 80199b2:	4411      	add	r1, r2
 80199b4:	428b      	cmp	r3, r1
 80199b6:	da0d      	bge.n	80199d4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 80199b8:	1a9b      	subs	r3, r3, r2
 80199ba:	4a0b      	ldr	r2, [pc, #44]	; (80199e8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 80199bc:	210e      	movs	r1, #14
 80199be:	6812      	ldr	r2, [r2, #0]
 80199c0:	fb01 2303 	mla	r3, r1, r3, r2
 80199c4:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 80199c8:	891a      	ldrh	r2, [r3, #8]
 80199ca:	4291      	cmp	r1, r2
 80199cc:	db04      	blt.n	80199d8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 80199ce:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 80199d2:	e7e6      	b.n	80199a2 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 80199d4:	2000      	movs	r0, #0
 80199d6:	4770      	bx	lr
 80199d8:	2001      	movs	r0, #1
 80199da:	4770      	bx	lr
 80199dc:	20027c4c 	.word	0x20027c4c
 80199e0:	20027c54 	.word	0x20027c54
 80199e4:	20027c50 	.word	0x20027c50
 80199e8:	20027c34 	.word	0x20027c34

080199ec <_ZNK8touchgfx6Bitmap7getDataEv>:
 80199ec:	4a12      	ldr	r2, [pc, #72]	; (8019a38 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 80199ee:	8803      	ldrh	r3, [r0, #0]
 80199f0:	8811      	ldrh	r1, [r2, #0]
 80199f2:	428b      	cmp	r3, r1
 80199f4:	d20b      	bcs.n	8019a0e <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 80199f6:	4a11      	ldr	r2, [pc, #68]	; (8019a3c <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 80199f8:	6812      	ldr	r2, [r2, #0]
 80199fa:	b112      	cbz	r2, 8019a02 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 80199fc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8019a00:	b9c0      	cbnz	r0, 8019a34 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 8019a02:	4a0f      	ldr	r2, [pc, #60]	; (8019a40 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8019a04:	6811      	ldr	r1, [r2, #0]
 8019a06:	2214      	movs	r2, #20
 8019a08:	4353      	muls	r3, r2
 8019a0a:	58c8      	ldr	r0, [r1, r3]
 8019a0c:	4770      	bx	lr
 8019a0e:	4a0d      	ldr	r2, [pc, #52]	; (8019a44 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8019a10:	8812      	ldrh	r2, [r2, #0]
 8019a12:	440a      	add	r2, r1
 8019a14:	4293      	cmp	r3, r2
 8019a16:	da04      	bge.n	8019a22 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 8019a18:	4a08      	ldr	r2, [pc, #32]	; (8019a3c <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8019a1a:	6812      	ldr	r2, [r2, #0]
 8019a1c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8019a20:	4770      	bx	lr
 8019a22:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8019a26:	4293      	cmp	r3, r2
 8019a28:	d103      	bne.n	8019a32 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8019a2a:	4b07      	ldr	r3, [pc, #28]	; (8019a48 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8019a2c:	681b      	ldr	r3, [r3, #0]
 8019a2e:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8019a30:	4770      	bx	lr
 8019a32:	2000      	movs	r0, #0
 8019a34:	4770      	bx	lr
 8019a36:	bf00      	nop
 8019a38:	20027c4c 	.word	0x20027c4c
 8019a3c:	20027c30 	.word	0x20027c30
 8019a40:	20027c54 	.word	0x20027c54
 8019a44:	20027c50 	.word	0x20027c50
 8019a48:	20027bc4 	.word	0x20027bc4

08019a4c <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8019a4c:	4b24      	ldr	r3, [pc, #144]	; (8019ae0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 8019a4e:	8802      	ldrh	r2, [r0, #0]
 8019a50:	8818      	ldrh	r0, [r3, #0]
 8019a52:	4282      	cmp	r2, r0
 8019a54:	d221      	bcs.n	8019a9a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 8019a56:	4b23      	ldr	r3, [pc, #140]	; (8019ae4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8019a58:	6819      	ldr	r1, [r3, #0]
 8019a5a:	2314      	movs	r3, #20
 8019a5c:	fb03 1302 	mla	r3, r3, r2, r1
 8019a60:	6858      	ldr	r0, [r3, #4]
 8019a62:	2800      	cmp	r0, #0
 8019a64:	d03a      	beq.n	8019adc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8019a66:	4920      	ldr	r1, [pc, #128]	; (8019ae8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8019a68:	6809      	ldr	r1, [r1, #0]
 8019a6a:	2900      	cmp	r1, #0
 8019a6c:	d036      	beq.n	8019adc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8019a6e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8019a72:	2900      	cmp	r1, #0
 8019a74:	d032      	beq.n	8019adc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8019a76:	891a      	ldrh	r2, [r3, #8]
 8019a78:	8958      	ldrh	r0, [r3, #10]
 8019a7a:	4350      	muls	r0, r2
 8019a7c:	7c5a      	ldrb	r2, [r3, #17]
 8019a7e:	7cdb      	ldrb	r3, [r3, #19]
 8019a80:	0952      	lsrs	r2, r2, #5
 8019a82:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8019a86:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8019a8a:	2b0b      	cmp	r3, #11
 8019a8c:	bf18      	it	ne
 8019a8e:	0040      	lslne	r0, r0, #1
 8019a90:	3003      	adds	r0, #3
 8019a92:	f020 0003 	bic.w	r0, r0, #3
 8019a96:	4408      	add	r0, r1
 8019a98:	4770      	bx	lr
 8019a9a:	4b14      	ldr	r3, [pc, #80]	; (8019aec <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8019a9c:	881b      	ldrh	r3, [r3, #0]
 8019a9e:	4403      	add	r3, r0
 8019aa0:	429a      	cmp	r2, r3
 8019aa2:	da1a      	bge.n	8019ada <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8019aa4:	4b12      	ldr	r3, [pc, #72]	; (8019af0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8019aa6:	1a10      	subs	r0, r2, r0
 8019aa8:	210e      	movs	r1, #14
 8019aaa:	681b      	ldr	r3, [r3, #0]
 8019aac:	fb01 3000 	mla	r0, r1, r0, r3
 8019ab0:	7b03      	ldrb	r3, [r0, #12]
 8019ab2:	f003 031f 	and.w	r3, r3, #31
 8019ab6:	2b0b      	cmp	r3, #11
 8019ab8:	d10b      	bne.n	8019ad2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 8019aba:	8903      	ldrh	r3, [r0, #8]
 8019abc:	8940      	ldrh	r0, [r0, #10]
 8019abe:	4358      	muls	r0, r3
 8019ac0:	4b09      	ldr	r3, [pc, #36]	; (8019ae8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8019ac2:	3003      	adds	r0, #3
 8019ac4:	6819      	ldr	r1, [r3, #0]
 8019ac6:	f020 0303 	bic.w	r3, r0, #3
 8019aca:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8019ace:	4418      	add	r0, r3
 8019ad0:	4770      	bx	lr
 8019ad2:	2b0d      	cmp	r3, #13
 8019ad4:	d101      	bne.n	8019ada <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8019ad6:	300d      	adds	r0, #13
 8019ad8:	4770      	bx	lr
 8019ada:	2000      	movs	r0, #0
 8019adc:	4770      	bx	lr
 8019ade:	bf00      	nop
 8019ae0:	20027c4c 	.word	0x20027c4c
 8019ae4:	20027c54 	.word	0x20027c54
 8019ae8:	20027c30 	.word	0x20027c30
 8019aec:	20027c50 	.word	0x20027c50
 8019af0:	20027c34 	.word	0x20027c34

08019af4 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8019af4:	4a17      	ldr	r2, [pc, #92]	; (8019b54 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 8019af6:	b510      	push	{r4, lr}
 8019af8:	8803      	ldrh	r3, [r0, #0]
 8019afa:	8812      	ldrh	r2, [r2, #0]
 8019afc:	4293      	cmp	r3, r2
 8019afe:	d20c      	bcs.n	8019b1a <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8019b00:	4a15      	ldr	r2, [pc, #84]	; (8019b58 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 8019b02:	2114      	movs	r1, #20
 8019b04:	6812      	ldr	r2, [r2, #0]
 8019b06:	fb01 2303 	mla	r3, r1, r3, r2
 8019b0a:	7c58      	ldrb	r0, [r3, #17]
 8019b0c:	0942      	lsrs	r2, r0, #5
 8019b0e:	7cd8      	ldrb	r0, [r3, #19]
 8019b10:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8019b14:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8019b18:	bd10      	pop	{r4, pc}
 8019b1a:	4910      	ldr	r1, [pc, #64]	; (8019b5c <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8019b1c:	8809      	ldrh	r1, [r1, #0]
 8019b1e:	4411      	add	r1, r2
 8019b20:	428b      	cmp	r3, r1
 8019b22:	da09      	bge.n	8019b38 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8019b24:	1a9b      	subs	r3, r3, r2
 8019b26:	4a0e      	ldr	r2, [pc, #56]	; (8019b60 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8019b28:	210e      	movs	r1, #14
 8019b2a:	6812      	ldr	r2, [r2, #0]
 8019b2c:	fb01 2303 	mla	r3, r1, r3, r2
 8019b30:	7b18      	ldrb	r0, [r3, #12]
 8019b32:	f000 001f 	and.w	r0, r0, #31
 8019b36:	e7ef      	b.n	8019b18 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 8019b38:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8019b3c:	4293      	cmp	r3, r2
 8019b3e:	d106      	bne.n	8019b4e <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 8019b40:	f7f6 fe78 	bl	8010834 <_ZN8touchgfx3HAL3lcdEv>
 8019b44:	6803      	ldr	r3, [r0, #0]
 8019b46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019b4c:	4718      	bx	r3
 8019b4e:	2000      	movs	r0, #0
 8019b50:	e7e2      	b.n	8019b18 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 8019b52:	bf00      	nop
 8019b54:	20027c4c 	.word	0x20027c4c
 8019b58:	20027c54 	.word	0x20027c54
 8019b5c:	20027c50 	.word	0x20027c50
 8019b60:	20027c34 	.word	0x20027c34

08019b64 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 8019b64:	2010      	movs	r0, #16
 8019b66:	4770      	bx	lr

08019b68 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 8019b68:	2000      	movs	r0, #0
 8019b6a:	4770      	bx	lr

08019b6c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 8019b6c:	4b02      	ldr	r3, [pc, #8]	; (8019b78 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 8019b6e:	8818      	ldrh	r0, [r3, #0]
 8019b70:	0040      	lsls	r0, r0, #1
 8019b72:	b280      	uxth	r0, r0
 8019b74:	4770      	bx	lr
 8019b76:	bf00      	nop
 8019b78:	20027bbe 	.word	0x20027bbe

08019b7c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8019b7c:	2bff      	cmp	r3, #255	; 0xff
 8019b7e:	d050      	beq.n	8019c22 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 8019b80:	2a0b      	cmp	r2, #11
 8019b82:	d04a      	beq.n	8019c1a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8019b84:	d80e      	bhi.n	8019ba4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 8019b86:	2a03      	cmp	r2, #3
 8019b88:	d03f      	beq.n	8019c0a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 8019b8a:	d804      	bhi.n	8019b96 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8019b8c:	2a01      	cmp	r2, #1
 8019b8e:	d03e      	beq.n	8019c0e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 8019b90:	d93f      	bls.n	8019c12 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 8019b92:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8019b94:	4770      	bx	lr
 8019b96:	2a09      	cmp	r2, #9
 8019b98:	d03f      	beq.n	8019c1a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8019b9a:	d83c      	bhi.n	8019c16 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8019b9c:	2a08      	cmp	r2, #8
 8019b9e:	d03a      	beq.n	8019c16 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8019ba0:	2000      	movs	r0, #0
 8019ba2:	4770      	bx	lr
 8019ba4:	2a2f      	cmp	r2, #47	; 0x2f
 8019ba6:	d024      	beq.n	8019bf2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 8019ba8:	d80d      	bhi.n	8019bc6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 8019baa:	2a2d      	cmp	r2, #45	; 0x2d
 8019bac:	d014      	beq.n	8019bd8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 8019bae:	d826      	bhi.n	8019bfe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8019bb0:	2a2c      	cmp	r2, #44	; 0x2c
 8019bb2:	d1f5      	bne.n	8019ba0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019bb4:	684b      	ldr	r3, [r1, #4]
 8019bb6:	781b      	ldrb	r3, [r3, #0]
 8019bb8:	2b01      	cmp	r3, #1
 8019bba:	d018      	beq.n	8019bee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 8019bbc:	d323      	bcc.n	8019c06 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 8019bbe:	2b02      	cmp	r3, #2
 8019bc0:	d1ee      	bne.n	8019ba0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019bc2:	6880      	ldr	r0, [r0, #8]
 8019bc4:	4770      	bx	lr
 8019bc6:	2a31      	cmp	r2, #49	; 0x31
 8019bc8:	d004      	beq.n	8019bd4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 8019bca:	d328      	bcc.n	8019c1e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8019bcc:	2a32      	cmp	r2, #50	; 0x32
 8019bce:	d026      	beq.n	8019c1e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8019bd0:	2a33      	cmp	r2, #51	; 0x33
 8019bd2:	d1e5      	bne.n	8019ba0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019bd4:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8019bd6:	4770      	bx	lr
 8019bd8:	684b      	ldr	r3, [r1, #4]
 8019bda:	781b      	ldrb	r3, [r3, #0]
 8019bdc:	2b01      	cmp	r3, #1
 8019bde:	d004      	beq.n	8019bea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8019be0:	d30b      	bcc.n	8019bfa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8019be2:	2b02      	cmp	r3, #2
 8019be4:	d1dc      	bne.n	8019ba0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019be6:	6900      	ldr	r0, [r0, #16]
 8019be8:	4770      	bx	lr
 8019bea:	6a00      	ldr	r0, [r0, #32]
 8019bec:	4770      	bx	lr
 8019bee:	6980      	ldr	r0, [r0, #24]
 8019bf0:	4770      	bx	lr
 8019bf2:	684b      	ldr	r3, [r1, #4]
 8019bf4:	781b      	ldrb	r3, [r3, #0]
 8019bf6:	2b00      	cmp	r3, #0
 8019bf8:	d1d2      	bne.n	8019ba0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019bfa:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8019bfc:	4770      	bx	lr
 8019bfe:	684b      	ldr	r3, [r1, #4]
 8019c00:	781b      	ldrb	r3, [r3, #0]
 8019c02:	2b00      	cmp	r3, #0
 8019c04:	d1cc      	bne.n	8019ba0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019c06:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8019c08:	4770      	bx	lr
 8019c0a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8019c0c:	4770      	bx	lr
 8019c0e:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8019c10:	4770      	bx	lr
 8019c12:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8019c14:	4770      	bx	lr
 8019c16:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8019c18:	4770      	bx	lr
 8019c1a:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8019c1c:	4770      	bx	lr
 8019c1e:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8019c20:	4770      	bx	lr
 8019c22:	2a0b      	cmp	r2, #11
 8019c24:	d049      	beq.n	8019cba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8019c26:	d80e      	bhi.n	8019c46 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 8019c28:	2a03      	cmp	r2, #3
 8019c2a:	d040      	beq.n	8019cae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8019c2c:	d804      	bhi.n	8019c38 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 8019c2e:	2a01      	cmp	r2, #1
 8019c30:	d03f      	beq.n	8019cb2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 8019c32:	d940      	bls.n	8019cb6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 8019c34:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8019c36:	4770      	bx	lr
 8019c38:	2a09      	cmp	r2, #9
 8019c3a:	d03e      	beq.n	8019cba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8019c3c:	d801      	bhi.n	8019c42 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 8019c3e:	2a08      	cmp	r2, #8
 8019c40:	d1ae      	bne.n	8019ba0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019c42:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8019c44:	4770      	bx	lr
 8019c46:	2a2f      	cmp	r2, #47	; 0x2f
 8019c48:	d024      	beq.n	8019c94 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 8019c4a:	d80d      	bhi.n	8019c68 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 8019c4c:	2a2d      	cmp	r2, #45	; 0x2d
 8019c4e:	d014      	beq.n	8019c7a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 8019c50:	d826      	bhi.n	8019ca0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 8019c52:	2a2c      	cmp	r2, #44	; 0x2c
 8019c54:	d1a4      	bne.n	8019ba0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019c56:	684b      	ldr	r3, [r1, #4]
 8019c58:	781b      	ldrb	r3, [r3, #0]
 8019c5a:	2b01      	cmp	r3, #1
 8019c5c:	d018      	beq.n	8019c90 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 8019c5e:	d324      	bcc.n	8019caa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 8019c60:	2b02      	cmp	r3, #2
 8019c62:	d19d      	bne.n	8019ba0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019c64:	68c0      	ldr	r0, [r0, #12]
 8019c66:	4770      	bx	lr
 8019c68:	2a31      	cmp	r2, #49	; 0x31
 8019c6a:	d004      	beq.n	8019c76 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 8019c6c:	d327      	bcc.n	8019cbe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8019c6e:	2a32      	cmp	r2, #50	; 0x32
 8019c70:	d025      	beq.n	8019cbe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8019c72:	2a33      	cmp	r2, #51	; 0x33
 8019c74:	d194      	bne.n	8019ba0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019c76:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8019c78:	4770      	bx	lr
 8019c7a:	684b      	ldr	r3, [r1, #4]
 8019c7c:	781b      	ldrb	r3, [r3, #0]
 8019c7e:	2b01      	cmp	r3, #1
 8019c80:	d004      	beq.n	8019c8c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 8019c82:	d30b      	bcc.n	8019c9c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 8019c84:	2b02      	cmp	r3, #2
 8019c86:	d18b      	bne.n	8019ba0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019c88:	6940      	ldr	r0, [r0, #20]
 8019c8a:	4770      	bx	lr
 8019c8c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8019c8e:	4770      	bx	lr
 8019c90:	69c0      	ldr	r0, [r0, #28]
 8019c92:	4770      	bx	lr
 8019c94:	684b      	ldr	r3, [r1, #4]
 8019c96:	781b      	ldrb	r3, [r3, #0]
 8019c98:	2b00      	cmp	r3, #0
 8019c9a:	d181      	bne.n	8019ba0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019c9c:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8019c9e:	4770      	bx	lr
 8019ca0:	684b      	ldr	r3, [r1, #4]
 8019ca2:	781b      	ldrb	r3, [r3, #0]
 8019ca4:	2b00      	cmp	r3, #0
 8019ca6:	f47f af7b 	bne.w	8019ba0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019caa:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8019cac:	4770      	bx	lr
 8019cae:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8019cb0:	4770      	bx	lr
 8019cb2:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8019cb4:	4770      	bx	lr
 8019cb6:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8019cb8:	4770      	bx	lr
 8019cba:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8019cbc:	4770      	bx	lr
 8019cbe:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8019cc0:	4770      	bx	lr

08019cc2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019cc2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019cc6:	b087      	sub	sp, #28
 8019cc8:	9815      	ldr	r0, [sp, #84]	; 0x54
 8019cca:	9205      	str	r2, [sp, #20]
 8019ccc:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8019cd0:	9101      	str	r1, [sp, #4]
 8019cd2:	9202      	str	r2, [sp, #8]
 8019cd4:	6841      	ldr	r1, [r0, #4]
 8019cd6:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 8019cda:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8019cde:	fb01 2404 	mla	r4, r1, r4, r2
 8019ce2:	6802      	ldr	r2, [r0, #0]
 8019ce4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8019ce8:	f8de 2000 	ldr.w	r2, [lr]
 8019cec:	9203      	str	r2, [sp, #12]
 8019cee:	f8de 2004 	ldr.w	r2, [lr, #4]
 8019cf2:	3204      	adds	r2, #4
 8019cf4:	9204      	str	r2, [sp, #16]
 8019cf6:	9a02      	ldr	r2, [sp, #8]
 8019cf8:	43d6      	mvns	r6, r2
 8019cfa:	b2f6      	uxtb	r6, r6
 8019cfc:	9a01      	ldr	r2, [sp, #4]
 8019cfe:	2a00      	cmp	r2, #0
 8019d00:	dc03      	bgt.n	8019d0a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8019d02:	9a05      	ldr	r2, [sp, #20]
 8019d04:	2a00      	cmp	r2, #0
 8019d06:	f340 8129 	ble.w	8019f5c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8019d0a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019d0c:	f9be c008 	ldrsh.w	ip, [lr, #8]
 8019d10:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8019d14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019d16:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 8019d1a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019d1e:	2b00      	cmp	r3, #0
 8019d20:	dd0e      	ble.n	8019d40 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8019d22:	1408      	asrs	r0, r1, #16
 8019d24:	d405      	bmi.n	8019d32 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019d26:	4560      	cmp	r0, ip
 8019d28:	da03      	bge.n	8019d32 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019d2a:	1410      	asrs	r0, r2, #16
 8019d2c:	d401      	bmi.n	8019d32 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019d2e:	42b8      	cmp	r0, r7
 8019d30:	db07      	blt.n	8019d42 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8019d32:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8019d34:	3b01      	subs	r3, #1
 8019d36:	3402      	adds	r4, #2
 8019d38:	4401      	add	r1, r0
 8019d3a:	9814      	ldr	r0, [sp, #80]	; 0x50
 8019d3c:	4402      	add	r2, r0
 8019d3e:	e7ee      	b.n	8019d1e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8019d40:	d071      	beq.n	8019e26 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8019d42:	1e58      	subs	r0, r3, #1
 8019d44:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8019d46:	fb05 1500 	mla	r5, r5, r0, r1
 8019d4a:	142d      	asrs	r5, r5, #16
 8019d4c:	d45f      	bmi.n	8019e0e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8019d4e:	4565      	cmp	r5, ip
 8019d50:	da5d      	bge.n	8019e0e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8019d52:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8019d54:	fb05 2000 	mla	r0, r5, r0, r2
 8019d58:	1400      	asrs	r0, r0, #16
 8019d5a:	d458      	bmi.n	8019e0e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8019d5c:	42b8      	cmp	r0, r7
 8019d5e:	da56      	bge.n	8019e0e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8019d60:	4699      	mov	r9, r3
 8019d62:	46a2      	mov	sl, r4
 8019d64:	f8bd b008 	ldrh.w	fp, [sp, #8]
 8019d68:	f1b9 0f00 	cmp.w	r9, #0
 8019d6c:	dd57      	ble.n	8019e1e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8019d6e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8019d72:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8019d76:	9803      	ldr	r0, [sp, #12]
 8019d78:	140d      	asrs	r5, r1, #16
 8019d7a:	f109 39ff 	add.w	r9, r9, #4294967295
 8019d7e:	fb07 000c 	mla	r0, r7, ip, r0
 8019d82:	5d40      	ldrb	r0, [r0, r5]
 8019d84:	9d04      	ldr	r5, [sp, #16]
 8019d86:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 8019d8a:	f8ba 5000 	ldrh.w	r5, [sl]
 8019d8e:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8019d92:	122f      	asrs	r7, r5, #8
 8019d94:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8019d98:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8019d9c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8019da0:	00ed      	lsls	r5, r5, #3
 8019da2:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 8019da6:	fb17 f706 	smulbb	r7, r7, r6
 8019daa:	b2ed      	uxtb	r5, r5
 8019dac:	fb18 f806 	smulbb	r8, r8, r6
 8019db0:	fb0c 7c0b 	mla	ip, ip, fp, r7
 8019db4:	10c7      	asrs	r7, r0, #3
 8019db6:	fb15 f506 	smulbb	r5, r5, r6
 8019dba:	00c0      	lsls	r0, r0, #3
 8019dbc:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8019dc0:	fa1f fc8c 	uxth.w	ip, ip
 8019dc4:	b2c0      	uxtb	r0, r0
 8019dc6:	fb07 870b 	mla	r7, r7, fp, r8
 8019dca:	fb00 500b 	mla	r0, r0, fp, r5
 8019dce:	f10c 0501 	add.w	r5, ip, #1
 8019dd2:	b2bf      	uxth	r7, r7
 8019dd4:	b280      	uxth	r0, r0
 8019dd6:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8019dda:	f107 0801 	add.w	r8, r7, #1
 8019dde:	1c45      	adds	r5, r0, #1
 8019de0:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 8019de4:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8019de8:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8019dec:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8019dee:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8019df2:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8019df6:	4401      	add	r1, r0
 8019df8:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8019dfc:	9814      	ldr	r0, [sp, #80]	; 0x50
 8019dfe:	ea45 0c0c 	orr.w	ip, r5, ip
 8019e02:	4402      	add	r2, r0
 8019e04:	ea4c 0c08 	orr.w	ip, ip, r8
 8019e08:	f82a cb02 	strh.w	ip, [sl], #2
 8019e0c:	e7ac      	b.n	8019d68 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8019e0e:	f04f 0800 	mov.w	r8, #0
 8019e12:	f8bd a008 	ldrh.w	sl, [sp, #8]
 8019e16:	eb03 0008 	add.w	r0, r3, r8
 8019e1a:	2800      	cmp	r0, #0
 8019e1c:	dc41      	bgt.n	8019ea2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8019e1e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019e22:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019e26:	9b01      	ldr	r3, [sp, #4]
 8019e28:	2b00      	cmp	r3, #0
 8019e2a:	f340 8097 	ble.w	8019f5c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8019e2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019e32:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019e34:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019e38:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019e3c:	eef0 6a62 	vmov.f32	s13, s5
 8019e40:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019e44:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019e48:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019e4c:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 8019e50:	eef0 6a43 	vmov.f32	s13, s6
 8019e54:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019e58:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 8019e5c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019e60:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019e64:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019e68:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019e6c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019e70:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019e74:	ee12 2a90 	vmov	r2, s5
 8019e78:	eef0 2a47 	vmov.f32	s5, s14
 8019e7c:	fb92 f3f3 	sdiv	r3, r2, r3
 8019e80:	ee13 2a10 	vmov	r2, s6
 8019e84:	9313      	str	r3, [sp, #76]	; 0x4c
 8019e86:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019e88:	eeb0 3a67 	vmov.f32	s6, s15
 8019e8c:	fb92 f3f3 	sdiv	r3, r2, r3
 8019e90:	9314      	str	r3, [sp, #80]	; 0x50
 8019e92:	9b01      	ldr	r3, [sp, #4]
 8019e94:	9a05      	ldr	r2, [sp, #20]
 8019e96:	3b01      	subs	r3, #1
 8019e98:	9301      	str	r3, [sp, #4]
 8019e9a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019e9c:	bf08      	it	eq
 8019e9e:	4613      	moveq	r3, r2
 8019ea0:	e72c      	b.n	8019cfc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8019ea2:	140f      	asrs	r7, r1, #16
 8019ea4:	d453      	bmi.n	8019f4e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8019ea6:	f8de 5008 	ldr.w	r5, [lr, #8]
 8019eaa:	42bd      	cmp	r5, r7
 8019eac:	dd4f      	ble.n	8019f4e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8019eae:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8019eb2:	d44c      	bmi.n	8019f4e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8019eb4:	f8de 000c 	ldr.w	r0, [lr, #12]
 8019eb8:	4560      	cmp	r0, ip
 8019eba:	dd48      	ble.n	8019f4e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8019ebc:	9803      	ldr	r0, [sp, #12]
 8019ebe:	b22d      	sxth	r5, r5
 8019ec0:	fb0c 0505 	mla	r5, ip, r5, r0
 8019ec4:	5de8      	ldrb	r0, [r5, r7]
 8019ec6:	9d04      	ldr	r5, [sp, #16]
 8019ec8:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 8019ecc:	f06f 0501 	mvn.w	r5, #1
 8019ed0:	fb05 fb08 	mul.w	fp, r5, r8
 8019ed4:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8019ed8:	f834 500b 	ldrh.w	r5, [r4, fp]
 8019edc:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8019ee0:	122f      	asrs	r7, r5, #8
 8019ee2:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8019ee6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8019eea:	00ed      	lsls	r5, r5, #3
 8019eec:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8019ef0:	fb17 f706 	smulbb	r7, r7, r6
 8019ef4:	b2ed      	uxtb	r5, r5
 8019ef6:	fb19 f906 	smulbb	r9, r9, r6
 8019efa:	fb0c 7c0a 	mla	ip, ip, sl, r7
 8019efe:	10c7      	asrs	r7, r0, #3
 8019f00:	fb15 f506 	smulbb	r5, r5, r6
 8019f04:	00c0      	lsls	r0, r0, #3
 8019f06:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8019f0a:	fa1f fc8c 	uxth.w	ip, ip
 8019f0e:	b2c0      	uxtb	r0, r0
 8019f10:	fb07 970a 	mla	r7, r7, sl, r9
 8019f14:	fb00 500a 	mla	r0, r0, sl, r5
 8019f18:	f10c 0501 	add.w	r5, ip, #1
 8019f1c:	b2bf      	uxth	r7, r7
 8019f1e:	b280      	uxth	r0, r0
 8019f20:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8019f24:	f107 0901 	add.w	r9, r7, #1
 8019f28:	1c45      	adds	r5, r0, #1
 8019f2a:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 8019f2e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8019f32:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8019f36:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8019f3a:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8019f3e:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8019f42:	ea45 0c0c 	orr.w	ip, r5, ip
 8019f46:	ea4c 0c09 	orr.w	ip, ip, r9
 8019f4a:	f824 c00b 	strh.w	ip, [r4, fp]
 8019f4e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8019f50:	f108 38ff 	add.w	r8, r8, #4294967295
 8019f54:	4401      	add	r1, r0
 8019f56:	9814      	ldr	r0, [sp, #80]	; 0x50
 8019f58:	4402      	add	r2, r0
 8019f5a:	e75c      	b.n	8019e16 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8019f5c:	b007      	add	sp, #28
 8019f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019f62 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019f62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f66:	b085      	sub	sp, #20
 8019f68:	4693      	mov	fp, r2
 8019f6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019f6e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8019f70:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8019f72:	6870      	ldr	r0, [r6, #4]
 8019f74:	9100      	str	r1, [sp, #0]
 8019f76:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8019f7a:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 8019f7e:	fb00 2404 	mla	r4, r0, r4, r2
 8019f82:	6832      	ldr	r2, [r6, #0]
 8019f84:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8019f88:	682a      	ldr	r2, [r5, #0]
 8019f8a:	9201      	str	r2, [sp, #4]
 8019f8c:	686a      	ldr	r2, [r5, #4]
 8019f8e:	3204      	adds	r2, #4
 8019f90:	9202      	str	r2, [sp, #8]
 8019f92:	9a00      	ldr	r2, [sp, #0]
 8019f94:	2a00      	cmp	r2, #0
 8019f96:	dc03      	bgt.n	8019fa0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8019f98:	f1bb 0f00 	cmp.w	fp, #0
 8019f9c:	f340 80a0 	ble.w	801a0e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 8019fa0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019fa2:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8019fa6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8019faa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019fac:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8019fb0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019fb4:	2b00      	cmp	r3, #0
 8019fb6:	dd0c      	ble.n	8019fd2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019fb8:	1406      	asrs	r6, r0, #16
 8019fba:	d405      	bmi.n	8019fc8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8019fbc:	454e      	cmp	r6, r9
 8019fbe:	da03      	bge.n	8019fc8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8019fc0:	1416      	asrs	r6, r2, #16
 8019fc2:	d401      	bmi.n	8019fc8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8019fc4:	4546      	cmp	r6, r8
 8019fc6:	db05      	blt.n	8019fd4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019fc8:	4470      	add	r0, lr
 8019fca:	4462      	add	r2, ip
 8019fcc:	3b01      	subs	r3, #1
 8019fce:	3402      	adds	r4, #2
 8019fd0:	e7f0      	b.n	8019fb4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8019fd2:	d00f      	beq.n	8019ff4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8019fd4:	1e5e      	subs	r6, r3, #1
 8019fd6:	fb0e 0706 	mla	r7, lr, r6, r0
 8019fda:	143f      	asrs	r7, r7, #16
 8019fdc:	d541      	bpl.n	801a062 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 8019fde:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 8019fe2:	4698      	mov	r8, r3
 8019fe4:	9603      	str	r6, [sp, #12]
 8019fe6:	f1b8 0f00 	cmp.w	r8, #0
 8019fea:	dc59      	bgt.n	801a0a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8019fec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019ff0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019ff4:	9b00      	ldr	r3, [sp, #0]
 8019ff6:	2b00      	cmp	r3, #0
 8019ff8:	dd72      	ble.n	801a0e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 8019ffa:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019ffe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a000:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a004:	eeb0 6a62 	vmov.f32	s12, s5
 801a008:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a00c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a010:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a014:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801a018:	eeb0 6a43 	vmov.f32	s12, s6
 801a01c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a020:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801a024:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a028:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a02c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a030:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a034:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a038:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a03c:	ee12 2a90 	vmov	r2, s5
 801a040:	eef0 2a47 	vmov.f32	s5, s14
 801a044:	fb92 fef3 	sdiv	lr, r2, r3
 801a048:	ee13 2a10 	vmov	r2, s6
 801a04c:	eeb0 3a67 	vmov.f32	s6, s15
 801a050:	fb92 fcf3 	sdiv	ip, r2, r3
 801a054:	9b00      	ldr	r3, [sp, #0]
 801a056:	3b01      	subs	r3, #1
 801a058:	9300      	str	r3, [sp, #0]
 801a05a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a05c:	bf08      	it	eq
 801a05e:	465b      	moveq	r3, fp
 801a060:	e797      	b.n	8019f92 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801a062:	454f      	cmp	r7, r9
 801a064:	dabb      	bge.n	8019fde <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801a066:	fb0c 2606 	mla	r6, ip, r6, r2
 801a06a:	1436      	asrs	r6, r6, #16
 801a06c:	d4b7      	bmi.n	8019fde <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801a06e:	4546      	cmp	r6, r8
 801a070:	dab5      	bge.n	8019fde <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801a072:	461e      	mov	r6, r3
 801a074:	46a0      	mov	r8, r4
 801a076:	2e00      	cmp	r6, #0
 801a078:	ddb8      	ble.n	8019fec <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801a07a:	1417      	asrs	r7, r2, #16
 801a07c:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801a080:	9901      	ldr	r1, [sp, #4]
 801a082:	ea4f 4920 	mov.w	r9, r0, asr #16
 801a086:	4462      	add	r2, ip
 801a088:	4470      	add	r0, lr
 801a08a:	fb0a 1707 	mla	r7, sl, r7, r1
 801a08e:	9902      	ldr	r1, [sp, #8]
 801a090:	3e01      	subs	r6, #1
 801a092:	f817 7009 	ldrb.w	r7, [r7, r9]
 801a096:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801a09a:	f828 7b02 	strh.w	r7, [r8], #2
 801a09e:	e7ea      	b.n	801a076 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801a0a0:	ea5f 4920 	movs.w	r9, r0, asr #16
 801a0a4:	d417      	bmi.n	801a0d6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801a0a6:	68ae      	ldr	r6, [r5, #8]
 801a0a8:	454e      	cmp	r6, r9
 801a0aa:	dd14      	ble.n	801a0d6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801a0ac:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801a0b0:	d411      	bmi.n	801a0d6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801a0b2:	68ef      	ldr	r7, [r5, #12]
 801a0b4:	4557      	cmp	r7, sl
 801a0b6:	dd0e      	ble.n	801a0d6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801a0b8:	9f01      	ldr	r7, [sp, #4]
 801a0ba:	b236      	sxth	r6, r6
 801a0bc:	f06f 0101 	mvn.w	r1, #1
 801a0c0:	fb0a 7606 	mla	r6, sl, r6, r7
 801a0c4:	9f02      	ldr	r7, [sp, #8]
 801a0c6:	f816 6009 	ldrb.w	r6, [r6, r9]
 801a0ca:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801a0ce:	fb01 f608 	mul.w	r6, r1, r8
 801a0d2:	9903      	ldr	r1, [sp, #12]
 801a0d4:	538f      	strh	r7, [r1, r6]
 801a0d6:	4470      	add	r0, lr
 801a0d8:	4462      	add	r2, ip
 801a0da:	f108 38ff 	add.w	r8, r8, #4294967295
 801a0de:	e782      	b.n	8019fe6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801a0e0:	b005      	add	sp, #20
 801a0e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a0e6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a0e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a0ea:	b087      	sub	sp, #28
 801a0ec:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801a0ee:	9205      	str	r2, [sp, #20]
 801a0f0:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801a0f4:	9102      	str	r1, [sp, #8]
 801a0f6:	9203      	str	r2, [sp, #12]
 801a0f8:	6861      	ldr	r1, [r4, #4]
 801a0fa:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801a0fe:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801a102:	fb01 2000 	mla	r0, r1, r0, r2
 801a106:	6822      	ldr	r2, [r4, #0]
 801a108:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801a10c:	9200      	str	r2, [sp, #0]
 801a10e:	f8dc 2000 	ldr.w	r2, [ip]
 801a112:	9204      	str	r2, [sp, #16]
 801a114:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801a118:	3204      	adds	r2, #4
 801a11a:	9201      	str	r2, [sp, #4]
 801a11c:	9a03      	ldr	r2, [sp, #12]
 801a11e:	43d5      	mvns	r5, r2
 801a120:	b2ed      	uxtb	r5, r5
 801a122:	9a02      	ldr	r2, [sp, #8]
 801a124:	2a00      	cmp	r2, #0
 801a126:	dc03      	bgt.n	801a130 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801a128:	9a05      	ldr	r2, [sp, #20]
 801a12a:	2a00      	cmp	r2, #0
 801a12c:	f340 812c 	ble.w	801a388 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801a130:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a132:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801a136:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801a13a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a13c:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801a140:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a144:	2b00      	cmp	r3, #0
 801a146:	dd10      	ble.n	801a16a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801a148:	140c      	asrs	r4, r1, #16
 801a14a:	d405      	bmi.n	801a158 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a14c:	4574      	cmp	r4, lr
 801a14e:	da03      	bge.n	801a158 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a150:	1414      	asrs	r4, r2, #16
 801a152:	d401      	bmi.n	801a158 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a154:	42bc      	cmp	r4, r7
 801a156:	db09      	blt.n	801a16c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801a158:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a15a:	3b01      	subs	r3, #1
 801a15c:	9800      	ldr	r0, [sp, #0]
 801a15e:	4421      	add	r1, r4
 801a160:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a162:	3002      	adds	r0, #2
 801a164:	4422      	add	r2, r4
 801a166:	9000      	str	r0, [sp, #0]
 801a168:	e7ec      	b.n	801a144 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801a16a:	d071      	beq.n	801a250 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801a16c:	1e5c      	subs	r4, r3, #1
 801a16e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801a170:	fb06 1604 	mla	r6, r6, r4, r1
 801a174:	1436      	asrs	r6, r6, #16
 801a176:	d45d      	bmi.n	801a234 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801a178:	4576      	cmp	r6, lr
 801a17a:	da5b      	bge.n	801a234 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801a17c:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801a17e:	fb06 2404 	mla	r4, r6, r4, r2
 801a182:	1424      	asrs	r4, r4, #16
 801a184:	d456      	bmi.n	801a234 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801a186:	42bc      	cmp	r4, r7
 801a188:	da54      	bge.n	801a234 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801a18a:	4698      	mov	r8, r3
 801a18c:	f8dd 9000 	ldr.w	r9, [sp]
 801a190:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 801a194:	f1b8 0f00 	cmp.w	r8, #0
 801a198:	dd54      	ble.n	801a244 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801a19a:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801a19e:	1414      	asrs	r4, r2, #16
 801a1a0:	9804      	ldr	r0, [sp, #16]
 801a1a2:	140e      	asrs	r6, r1, #16
 801a1a4:	f108 38ff 	add.w	r8, r8, #4294967295
 801a1a8:	fb07 0404 	mla	r4, r7, r4, r0
 801a1ac:	9801      	ldr	r0, [sp, #4]
 801a1ae:	f814 e006 	ldrb.w	lr, [r4, r6]
 801a1b2:	f8b9 4000 	ldrh.w	r4, [r9]
 801a1b6:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801a1ba:	1227      	asrs	r7, r4, #8
 801a1bc:	eb00 0b0e 	add.w	fp, r0, lr
 801a1c0:	f810 e00e 	ldrb.w	lr, [r0, lr]
 801a1c4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a1c8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801a1ca:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801a1ce:	f89b b001 	ldrb.w	fp, [fp, #1]
 801a1d2:	4401      	add	r1, r0
 801a1d4:	fb16 f60a 	smulbb	r6, r6, sl
 801a1d8:	9814      	ldr	r0, [sp, #80]	; 0x50
 801a1da:	fb1b fb0a 	smulbb	fp, fp, sl
 801a1de:	fb07 6705 	mla	r7, r7, r5, r6
 801a1e2:	10e6      	asrs	r6, r4, #3
 801a1e4:	00e4      	lsls	r4, r4, #3
 801a1e6:	4402      	add	r2, r0
 801a1e8:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a1ec:	b2bf      	uxth	r7, r7
 801a1ee:	b2e4      	uxtb	r4, r4
 801a1f0:	fb06 b605 	mla	r6, r6, r5, fp
 801a1f4:	fb14 f405 	smulbb	r4, r4, r5
 801a1f8:	b2b6      	uxth	r6, r6
 801a1fa:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801a1fe:	1c7c      	adds	r4, r7, #1
 801a200:	f106 0b01 	add.w	fp, r6, #1
 801a204:	fa1f fe8e 	uxth.w	lr, lr
 801a208:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801a20c:	f10e 0401 	add.w	r4, lr, #1
 801a210:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801a214:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801a218:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 801a21c:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801a220:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801a224:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801a228:	4327      	orrs	r7, r4
 801a22a:	ea47 070b 	orr.w	r7, r7, fp
 801a22e:	f829 7b02 	strh.w	r7, [r9], #2
 801a232:	e7af      	b.n	801a194 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801a234:	f04f 0e00 	mov.w	lr, #0
 801a238:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 801a23c:	eb03 040e 	add.w	r4, r3, lr
 801a240:	2c00      	cmp	r4, #0
 801a242:	dc43      	bgt.n	801a2cc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801a244:	9a00      	ldr	r2, [sp, #0]
 801a246:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a24a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801a24e:	9300      	str	r3, [sp, #0]
 801a250:	9b02      	ldr	r3, [sp, #8]
 801a252:	2b00      	cmp	r3, #0
 801a254:	f340 8098 	ble.w	801a388 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801a258:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a25c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a25e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a262:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a266:	eef0 6a62 	vmov.f32	s13, s5
 801a26a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a26e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a272:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a276:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801a27a:	eef0 6a43 	vmov.f32	s13, s6
 801a27e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a282:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801a286:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a28a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a28e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a292:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a296:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a29a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a29e:	ee12 2a90 	vmov	r2, s5
 801a2a2:	eef0 2a47 	vmov.f32	s5, s14
 801a2a6:	fb92 f3f3 	sdiv	r3, r2, r3
 801a2aa:	ee13 2a10 	vmov	r2, s6
 801a2ae:	9313      	str	r3, [sp, #76]	; 0x4c
 801a2b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a2b2:	eeb0 3a67 	vmov.f32	s6, s15
 801a2b6:	fb92 f3f3 	sdiv	r3, r2, r3
 801a2ba:	9314      	str	r3, [sp, #80]	; 0x50
 801a2bc:	9b02      	ldr	r3, [sp, #8]
 801a2be:	9a05      	ldr	r2, [sp, #20]
 801a2c0:	3b01      	subs	r3, #1
 801a2c2:	9302      	str	r3, [sp, #8]
 801a2c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a2c6:	bf08      	it	eq
 801a2c8:	4613      	moveq	r3, r2
 801a2ca:	e72a      	b.n	801a122 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801a2cc:	140f      	asrs	r7, r1, #16
 801a2ce:	d454      	bmi.n	801a37a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801a2d0:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801a2d4:	42be      	cmp	r6, r7
 801a2d6:	dd50      	ble.n	801a37a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801a2d8:	ea5f 4822 	movs.w	r8, r2, asr #16
 801a2dc:	d44d      	bmi.n	801a37a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801a2de:	f8dc 400c 	ldr.w	r4, [ip, #12]
 801a2e2:	4544      	cmp	r4, r8
 801a2e4:	dd49      	ble.n	801a37a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801a2e6:	9c04      	ldr	r4, [sp, #16]
 801a2e8:	b236      	sxth	r6, r6
 801a2ea:	f06f 0001 	mvn.w	r0, #1
 801a2ee:	fb08 4606 	mla	r6, r8, r6, r4
 801a2f2:	9c01      	ldr	r4, [sp, #4]
 801a2f4:	fb00 fa0e 	mul.w	sl, r0, lr
 801a2f8:	9800      	ldr	r0, [sp, #0]
 801a2fa:	f816 8007 	ldrb.w	r8, [r6, r7]
 801a2fe:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801a302:	eb04 0b08 	add.w	fp, r4, r8
 801a306:	f830 400a 	ldrh.w	r4, [r0, sl]
 801a30a:	9801      	ldr	r0, [sp, #4]
 801a30c:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801a310:	1227      	asrs	r7, r4, #8
 801a312:	f89b b001 	ldrb.w	fp, [fp, #1]
 801a316:	fb16 f609 	smulbb	r6, r6, r9
 801a31a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a31e:	f810 8008 	ldrb.w	r8, [r0, r8]
 801a322:	fb1b fb09 	smulbb	fp, fp, r9
 801a326:	fb07 6705 	mla	r7, r7, r5, r6
 801a32a:	10e6      	asrs	r6, r4, #3
 801a32c:	00e4      	lsls	r4, r4, #3
 801a32e:	9800      	ldr	r0, [sp, #0]
 801a330:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a334:	b2bf      	uxth	r7, r7
 801a336:	b2e4      	uxtb	r4, r4
 801a338:	fb06 b605 	mla	r6, r6, r5, fp
 801a33c:	fb14 f405 	smulbb	r4, r4, r5
 801a340:	b2b6      	uxth	r6, r6
 801a342:	fb08 4809 	mla	r8, r8, r9, r4
 801a346:	1c7c      	adds	r4, r7, #1
 801a348:	f106 0b01 	add.w	fp, r6, #1
 801a34c:	fa1f f888 	uxth.w	r8, r8
 801a350:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801a354:	f108 0401 	add.w	r4, r8, #1
 801a358:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801a35c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801a360:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 801a364:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801a368:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801a36c:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801a370:	4327      	orrs	r7, r4
 801a372:	ea47 070b 	orr.w	r7, r7, fp
 801a376:	f820 700a 	strh.w	r7, [r0, sl]
 801a37a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801a37c:	f10e 3eff 	add.w	lr, lr, #4294967295
 801a380:	4401      	add	r1, r0
 801a382:	9814      	ldr	r0, [sp, #80]	; 0x50
 801a384:	4402      	add	r2, r0
 801a386:	e759      	b.n	801a23c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801a388:	b007      	add	sp, #28
 801a38a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801a390 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a394:	b085      	sub	sp, #20
 801a396:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a39a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801a39c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801a39e:	9203      	str	r2, [sp, #12]
 801a3a0:	6870      	ldr	r0, [r6, #4]
 801a3a2:	686f      	ldr	r7, [r5, #4]
 801a3a4:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 801a3a8:	3704      	adds	r7, #4
 801a3aa:	9101      	str	r1, [sp, #4]
 801a3ac:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801a3b0:	fb00 2404 	mla	r4, r0, r4, r2
 801a3b4:	6832      	ldr	r2, [r6, #0]
 801a3b6:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801a3ba:	682a      	ldr	r2, [r5, #0]
 801a3bc:	9202      	str	r2, [sp, #8]
 801a3be:	9a01      	ldr	r2, [sp, #4]
 801a3c0:	2a00      	cmp	r2, #0
 801a3c2:	dc03      	bgt.n	801a3cc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801a3c4:	9a03      	ldr	r2, [sp, #12]
 801a3c6:	2a00      	cmp	r2, #0
 801a3c8:	f340 80cc 	ble.w	801a564 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801a3cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a3ce:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801a3d2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a3d6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a3d8:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801a3dc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a3e0:	2b00      	cmp	r3, #0
 801a3e2:	dd0d      	ble.n	801a400 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801a3e4:	1406      	asrs	r6, r0, #16
 801a3e6:	d405      	bmi.n	801a3f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801a3e8:	454e      	cmp	r6, r9
 801a3ea:	da03      	bge.n	801a3f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801a3ec:	1416      	asrs	r6, r2, #16
 801a3ee:	d401      	bmi.n	801a3f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801a3f0:	4546      	cmp	r6, r8
 801a3f2:	db06      	blt.n	801a402 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a3f4:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801a3f6:	4460      	add	r0, ip
 801a3f8:	3b01      	subs	r3, #1
 801a3fa:	3402      	adds	r4, #2
 801a3fc:	4432      	add	r2, r6
 801a3fe:	e7ef      	b.n	801a3e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801a400:	d00f      	beq.n	801a422 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801a402:	1e5e      	subs	r6, r3, #1
 801a404:	fb0c 0e06 	mla	lr, ip, r6, r0
 801a408:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801a40c:	d543      	bpl.n	801a496 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801a40e:	4698      	mov	r8, r3
 801a410:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 801a414:	f1b8 0f00 	cmp.w	r8, #0
 801a418:	dc71      	bgt.n	801a4fe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801a41a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a41e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a422:	9b01      	ldr	r3, [sp, #4]
 801a424:	2b00      	cmp	r3, #0
 801a426:	f340 809d 	ble.w	801a564 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801a42a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a42e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a430:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a434:	eeb0 6a62 	vmov.f32	s12, s5
 801a438:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a43c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a440:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a444:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801a448:	eeb0 6a43 	vmov.f32	s12, s6
 801a44c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a450:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801a454:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a458:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a45c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a460:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a464:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a468:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a46c:	ee12 2a90 	vmov	r2, s5
 801a470:	eef0 2a47 	vmov.f32	s5, s14
 801a474:	fb92 fcf3 	sdiv	ip, r2, r3
 801a478:	ee13 2a10 	vmov	r2, s6
 801a47c:	eeb0 3a67 	vmov.f32	s6, s15
 801a480:	fb92 f3f3 	sdiv	r3, r2, r3
 801a484:	9312      	str	r3, [sp, #72]	; 0x48
 801a486:	9b01      	ldr	r3, [sp, #4]
 801a488:	9a03      	ldr	r2, [sp, #12]
 801a48a:	3b01      	subs	r3, #1
 801a48c:	9301      	str	r3, [sp, #4]
 801a48e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a490:	bf08      	it	eq
 801a492:	4613      	moveq	r3, r2
 801a494:	e793      	b.n	801a3be <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801a496:	45ce      	cmp	lr, r9
 801a498:	dab9      	bge.n	801a40e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801a49a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a49c:	fb01 2606 	mla	r6, r1, r6, r2
 801a4a0:	1436      	asrs	r6, r6, #16
 801a4a2:	d4b4      	bmi.n	801a40e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801a4a4:	4546      	cmp	r6, r8
 801a4a6:	dab2      	bge.n	801a40e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801a4a8:	4698      	mov	r8, r3
 801a4aa:	46a2      	mov	sl, r4
 801a4ac:	f1b8 0f00 	cmp.w	r8, #0
 801a4b0:	ddb3      	ble.n	801a41a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801a4b2:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801a4b6:	1416      	asrs	r6, r2, #16
 801a4b8:	9902      	ldr	r1, [sp, #8]
 801a4ba:	ea4f 4e20 	mov.w	lr, r0, asr #16
 801a4be:	f108 38ff 	add.w	r8, r8, #4294967295
 801a4c2:	4460      	add	r0, ip
 801a4c4:	fb09 1606 	mla	r6, r9, r6, r1
 801a4c8:	4928      	ldr	r1, [pc, #160]	; (801a56c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 801a4ca:	f816 e00e 	ldrb.w	lr, [r6, lr]
 801a4ce:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801a4d2:	eb07 0b0e 	add.w	fp, r7, lr
 801a4d6:	f89b 6001 	ldrb.w	r6, [fp, #1]
 801a4da:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801a4de:	00f6      	lsls	r6, r6, #3
 801a4e0:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 801a4e4:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a4e6:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801a4ea:	440a      	add	r2, r1
 801a4ec:	ea49 0606 	orr.w	r6, r9, r6
 801a4f0:	f817 900e 	ldrb.w	r9, [r7, lr]
 801a4f4:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 801a4f8:	f82a 6b02 	strh.w	r6, [sl], #2
 801a4fc:	e7d6      	b.n	801a4ac <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801a4fe:	ea5f 4920 	movs.w	r9, r0, asr #16
 801a502:	d429      	bmi.n	801a558 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801a504:	68ae      	ldr	r6, [r5, #8]
 801a506:	454e      	cmp	r6, r9
 801a508:	dd26      	ble.n	801a558 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801a50a:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801a50e:	d423      	bmi.n	801a558 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801a510:	68e9      	ldr	r1, [r5, #12]
 801a512:	4559      	cmp	r1, fp
 801a514:	dd20      	ble.n	801a558 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801a516:	fa0f fe86 	sxth.w	lr, r6
 801a51a:	9902      	ldr	r1, [sp, #8]
 801a51c:	fb0b 1e0e 	mla	lr, fp, lr, r1
 801a520:	f06f 0101 	mvn.w	r1, #1
 801a524:	f81e e009 	ldrb.w	lr, [lr, r9]
 801a528:	fb01 f908 	mul.w	r9, r1, r8
 801a52c:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 801a530:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801a534:	eb07 060e 	add.w	r6, r7, lr
 801a538:	f896 b002 	ldrb.w	fp, [r6, #2]
 801a53c:	7876      	ldrb	r6, [r6, #1]
 801a53e:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 801a542:	00f6      	lsls	r6, r6, #3
 801a544:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801a548:	ea4b 0606 	orr.w	r6, fp, r6
 801a54c:	f817 b00e 	ldrb.w	fp, [r7, lr]
 801a550:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 801a554:	f82a 6009 	strh.w	r6, [sl, r9]
 801a558:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a55a:	4460      	add	r0, ip
 801a55c:	f108 38ff 	add.w	r8, r8, #4294967295
 801a560:	440a      	add	r2, r1
 801a562:	e757      	b.n	801a414 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801a564:	b005      	add	sp, #20
 801a566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a56a:	bf00      	nop
 801a56c:	fffff800 	.word	0xfffff800

0801a570 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a574:	b087      	sub	sp, #28
 801a576:	468b      	mov	fp, r1
 801a578:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a57c:	9815      	ldr	r0, [sp, #84]	; 0x54
 801a57e:	9204      	str	r2, [sp, #16]
 801a580:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801a584:	6841      	ldr	r1, [r0, #4]
 801a586:	9205      	str	r2, [sp, #20]
 801a588:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801a58c:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801a590:	fb01 2404 	mla	r4, r1, r4, r2
 801a594:	6802      	ldr	r2, [r0, #0]
 801a596:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801a59a:	f8dc 2000 	ldr.w	r2, [ip]
 801a59e:	9201      	str	r2, [sp, #4]
 801a5a0:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801a5a4:	3204      	adds	r2, #4
 801a5a6:	9202      	str	r2, [sp, #8]
 801a5a8:	f1bb 0f00 	cmp.w	fp, #0
 801a5ac:	dc03      	bgt.n	801a5b6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801a5ae:	9a04      	ldr	r2, [sp, #16]
 801a5b0:	2a00      	cmp	r2, #0
 801a5b2:	f340 8138 	ble.w	801a826 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801a5b6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a5b8:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801a5bc:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a5c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a5c2:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 801a5c6:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801a5ca:	2b00      	cmp	r3, #0
 801a5cc:	dd0e      	ble.n	801a5ec <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801a5ce:	1402      	asrs	r2, r0, #16
 801a5d0:	d405      	bmi.n	801a5de <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801a5d2:	42ba      	cmp	r2, r7
 801a5d4:	da03      	bge.n	801a5de <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801a5d6:	140a      	asrs	r2, r1, #16
 801a5d8:	d401      	bmi.n	801a5de <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801a5da:	42b2      	cmp	r2, r6
 801a5dc:	db07      	blt.n	801a5ee <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801a5de:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a5e0:	3b01      	subs	r3, #1
 801a5e2:	3402      	adds	r4, #2
 801a5e4:	4410      	add	r0, r2
 801a5e6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a5e8:	4411      	add	r1, r2
 801a5ea:	e7ee      	b.n	801a5ca <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801a5ec:	d019      	beq.n	801a622 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801a5ee:	1e5a      	subs	r2, r3, #1
 801a5f0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801a5f2:	fb05 0502 	mla	r5, r5, r2, r0
 801a5f6:	142d      	asrs	r5, r5, #16
 801a5f8:	d409      	bmi.n	801a60e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801a5fa:	42bd      	cmp	r5, r7
 801a5fc:	da07      	bge.n	801a60e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801a5fe:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801a600:	fb05 1202 	mla	r2, r5, r2, r1
 801a604:	1412      	asrs	r2, r2, #16
 801a606:	d402      	bmi.n	801a60e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801a608:	42b2      	cmp	r2, r6
 801a60a:	f2c0 80ac 	blt.w	801a766 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801a60e:	f04f 0e00 	mov.w	lr, #0
 801a612:	eb03 020e 	add.w	r2, r3, lr
 801a616:	2a00      	cmp	r2, #0
 801a618:	dc3e      	bgt.n	801a698 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801a61a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a61e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a622:	f1bb 0f00 	cmp.w	fp, #0
 801a626:	f340 80fe 	ble.w	801a826 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801a62a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a62e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a630:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a634:	f1bb 0b01 	subs.w	fp, fp, #1
 801a638:	eeb0 6a62 	vmov.f32	s12, s5
 801a63c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a640:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a644:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a648:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801a64c:	eeb0 6a43 	vmov.f32	s12, s6
 801a650:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a654:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801a658:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a65c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a660:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a664:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a668:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a66c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a670:	ee12 2a90 	vmov	r2, s5
 801a674:	eef0 2a47 	vmov.f32	s5, s14
 801a678:	fb92 f3f3 	sdiv	r3, r2, r3
 801a67c:	ee13 2a10 	vmov	r2, s6
 801a680:	9313      	str	r3, [sp, #76]	; 0x4c
 801a682:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a684:	eeb0 3a67 	vmov.f32	s6, s15
 801a688:	fb92 f3f3 	sdiv	r3, r2, r3
 801a68c:	9a04      	ldr	r2, [sp, #16]
 801a68e:	9314      	str	r3, [sp, #80]	; 0x50
 801a690:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a692:	bf08      	it	eq
 801a694:	4613      	moveq	r3, r2
 801a696:	e787      	b.n	801a5a8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801a698:	1406      	asrs	r6, r0, #16
 801a69a:	d45d      	bmi.n	801a758 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801a69c:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801a6a0:	42b5      	cmp	r5, r6
 801a6a2:	dd59      	ble.n	801a758 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801a6a4:	140f      	asrs	r7, r1, #16
 801a6a6:	d457      	bmi.n	801a758 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801a6a8:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801a6ac:	42ba      	cmp	r2, r7
 801a6ae:	dd53      	ble.n	801a758 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801a6b0:	9a01      	ldr	r2, [sp, #4]
 801a6b2:	b22d      	sxth	r5, r5
 801a6b4:	fb07 2505 	mla	r5, r7, r5, r2
 801a6b8:	5daa      	ldrb	r2, [r5, r6]
 801a6ba:	9d02      	ldr	r5, [sp, #8]
 801a6bc:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801a6c0:	0e2e      	lsrs	r6, r5, #24
 801a6c2:	d049      	beq.n	801a758 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801a6c4:	f06f 0201 	mvn.w	r2, #1
 801a6c8:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801a6cc:	fb02 f20e 	mul.w	r2, r2, lr
 801a6d0:	f834 8002 	ldrh.w	r8, [r4, r2]
 801a6d4:	9203      	str	r2, [sp, #12]
 801a6d6:	9a05      	ldr	r2, [sp, #20]
 801a6d8:	ea4f 2728 	mov.w	r7, r8, asr #8
 801a6dc:	4356      	muls	r6, r2
 801a6de:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a6e2:	1c72      	adds	r2, r6, #1
 801a6e4:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801a6e8:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801a6ec:	b2ed      	uxtb	r5, r5
 801a6ee:	1212      	asrs	r2, r2, #8
 801a6f0:	fa1f f982 	uxth.w	r9, r2
 801a6f4:	43d2      	mvns	r2, r2
 801a6f6:	fb16 f609 	smulbb	r6, r6, r9
 801a6fa:	b2d2      	uxtb	r2, r2
 801a6fc:	fb15 f509 	smulbb	r5, r5, r9
 801a700:	fb07 6702 	mla	r7, r7, r2, r6
 801a704:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801a708:	fb1a fa09 	smulbb	sl, sl, r9
 801a70c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801a710:	b2bf      	uxth	r7, r7
 801a712:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a716:	fa5f f888 	uxtb.w	r8, r8
 801a71a:	fb06 a602 	mla	r6, r6, r2, sl
 801a71e:	fb08 5502 	mla	r5, r8, r2, r5
 801a722:	1c7a      	adds	r2, r7, #1
 801a724:	b2b6      	uxth	r6, r6
 801a726:	b2ad      	uxth	r5, r5
 801a728:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801a72c:	9a03      	ldr	r2, [sp, #12]
 801a72e:	f105 0a01 	add.w	sl, r5, #1
 801a732:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801a736:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801a73a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801a73e:	ea4a 0707 	orr.w	r7, sl, r7
 801a742:	f106 0a01 	add.w	sl, r6, #1
 801a746:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801a74a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801a74e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801a752:	ea47 070a 	orr.w	r7, r7, sl
 801a756:	52a7      	strh	r7, [r4, r2]
 801a758:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a75a:	f10e 3eff 	add.w	lr, lr, #4294967295
 801a75e:	4410      	add	r0, r2
 801a760:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a762:	4411      	add	r1, r2
 801a764:	e755      	b.n	801a612 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801a766:	f04f 0800 	mov.w	r8, #0
 801a76a:	eba3 0208 	sub.w	r2, r3, r8
 801a76e:	2a00      	cmp	r2, #0
 801a770:	f77f af53 	ble.w	801a61a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801a774:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 801a778:	140a      	asrs	r2, r1, #16
 801a77a:	9f01      	ldr	r7, [sp, #4]
 801a77c:	1405      	asrs	r5, r0, #16
 801a77e:	fb06 7202 	mla	r2, r6, r2, r7
 801a782:	5d52      	ldrb	r2, [r2, r5]
 801a784:	9d02      	ldr	r5, [sp, #8]
 801a786:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801a78a:	0e2e      	lsrs	r6, r5, #24
 801a78c:	d044      	beq.n	801a818 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801a78e:	9a05      	ldr	r2, [sp, #20]
 801a790:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801a794:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801a798:	4356      	muls	r6, r2
 801a79a:	ea4f 272e 	mov.w	r7, lr, asr #8
 801a79e:	1c72      	adds	r2, r6, #1
 801a7a0:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a7a4:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801a7a8:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801a7ac:	b2ed      	uxtb	r5, r5
 801a7ae:	1212      	asrs	r2, r2, #8
 801a7b0:	fa1f f982 	uxth.w	r9, r2
 801a7b4:	43d2      	mvns	r2, r2
 801a7b6:	fb16 f609 	smulbb	r6, r6, r9
 801a7ba:	b2d2      	uxtb	r2, r2
 801a7bc:	fb15 f509 	smulbb	r5, r5, r9
 801a7c0:	fb07 6702 	mla	r7, r7, r2, r6
 801a7c4:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801a7c8:	fb1a fa09 	smulbb	sl, sl, r9
 801a7cc:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801a7d0:	b2bf      	uxth	r7, r7
 801a7d2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a7d6:	fa5f fe8e 	uxtb.w	lr, lr
 801a7da:	fb06 a602 	mla	r6, r6, r2, sl
 801a7de:	fb0e 5502 	mla	r5, lr, r2, r5
 801a7e2:	1c7a      	adds	r2, r7, #1
 801a7e4:	b2b6      	uxth	r6, r6
 801a7e6:	b2ad      	uxth	r5, r5
 801a7e8:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801a7ec:	f105 0a01 	add.w	sl, r5, #1
 801a7f0:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801a7f4:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801a7f8:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801a7fc:	ea4a 0707 	orr.w	r7, sl, r7
 801a800:	f106 0a01 	add.w	sl, r6, #1
 801a804:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801a808:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801a80c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801a810:	ea47 070a 	orr.w	r7, r7, sl
 801a814:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801a818:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a81a:	f108 0801 	add.w	r8, r8, #1
 801a81e:	4410      	add	r0, r2
 801a820:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a822:	4411      	add	r1, r2
 801a824:	e7a1      	b.n	801a76a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801a826:	b007      	add	sp, #28
 801a828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a82c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a82c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a830:	b085      	sub	sp, #20
 801a832:	468b      	mov	fp, r1
 801a834:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a838:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801a83a:	9203      	str	r2, [sp, #12]
 801a83c:	6841      	ldr	r1, [r0, #4]
 801a83e:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801a842:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801a846:	fb01 2404 	mla	r4, r1, r4, r2
 801a84a:	6802      	ldr	r2, [r0, #0]
 801a84c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801a850:	f8de 2000 	ldr.w	r2, [lr]
 801a854:	9200      	str	r2, [sp, #0]
 801a856:	f8de 2004 	ldr.w	r2, [lr, #4]
 801a85a:	3204      	adds	r2, #4
 801a85c:	9201      	str	r2, [sp, #4]
 801a85e:	f1bb 0f00 	cmp.w	fp, #0
 801a862:	dc03      	bgt.n	801a86c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801a864:	9a03      	ldr	r2, [sp, #12]
 801a866:	2a00      	cmp	r2, #0
 801a868:	f340 8153 	ble.w	801ab12 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801a86c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a86e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801a872:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801a876:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a878:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801a87c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a880:	2b00      	cmp	r3, #0
 801a882:	dd0e      	ble.n	801a8a2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801a884:	1408      	asrs	r0, r1, #16
 801a886:	d405      	bmi.n	801a894 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801a888:	42b8      	cmp	r0, r7
 801a88a:	da03      	bge.n	801a894 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801a88c:	1410      	asrs	r0, r2, #16
 801a88e:	d401      	bmi.n	801a894 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801a890:	42b0      	cmp	r0, r6
 801a892:	db07      	blt.n	801a8a4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801a894:	9811      	ldr	r0, [sp, #68]	; 0x44
 801a896:	3b01      	subs	r3, #1
 801a898:	3402      	adds	r4, #2
 801a89a:	4401      	add	r1, r0
 801a89c:	9812      	ldr	r0, [sp, #72]	; 0x48
 801a89e:	4402      	add	r2, r0
 801a8a0:	e7ee      	b.n	801a880 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801a8a2:	d017      	beq.n	801a8d4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801a8a4:	1e58      	subs	r0, r3, #1
 801a8a6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801a8a8:	fb05 1500 	mla	r5, r5, r0, r1
 801a8ac:	142d      	asrs	r5, r5, #16
 801a8ae:	d409      	bmi.n	801a8c4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801a8b0:	42bd      	cmp	r5, r7
 801a8b2:	da07      	bge.n	801a8c4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801a8b4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801a8b6:	fb05 2000 	mla	r0, r5, r0, r2
 801a8ba:	1400      	asrs	r0, r0, #16
 801a8bc:	d402      	bmi.n	801a8c4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801a8be:	42b0      	cmp	r0, r6
 801a8c0:	f2c0 80bc 	blt.w	801aa3c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801a8c4:	2600      	movs	r6, #0
 801a8c6:	1998      	adds	r0, r3, r6
 801a8c8:	2800      	cmp	r0, #0
 801a8ca:	dc3e      	bgt.n	801a94a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801a8cc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a8d0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a8d4:	f1bb 0f00 	cmp.w	fp, #0
 801a8d8:	f340 811b 	ble.w	801ab12 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801a8dc:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a8e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a8e2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a8e6:	f1bb 0b01 	subs.w	fp, fp, #1
 801a8ea:	eeb0 6a62 	vmov.f32	s12, s5
 801a8ee:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a8f2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a8f6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a8fa:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801a8fe:	eeb0 6a43 	vmov.f32	s12, s6
 801a902:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a906:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801a90a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a90e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a912:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a916:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a91a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a91e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a922:	ee12 2a90 	vmov	r2, s5
 801a926:	eef0 2a47 	vmov.f32	s5, s14
 801a92a:	fb92 f3f3 	sdiv	r3, r2, r3
 801a92e:	ee13 2a10 	vmov	r2, s6
 801a932:	9311      	str	r3, [sp, #68]	; 0x44
 801a934:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a936:	eeb0 3a67 	vmov.f32	s6, s15
 801a93a:	fb92 f3f3 	sdiv	r3, r2, r3
 801a93e:	9a03      	ldr	r2, [sp, #12]
 801a940:	9312      	str	r3, [sp, #72]	; 0x48
 801a942:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a944:	bf08      	it	eq
 801a946:	4613      	moveq	r3, r2
 801a948:	e789      	b.n	801a85e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801a94a:	140f      	asrs	r7, r1, #16
 801a94c:	d426      	bmi.n	801a99c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801a94e:	f8de 5008 	ldr.w	r5, [lr, #8]
 801a952:	42bd      	cmp	r5, r7
 801a954:	dd22      	ble.n	801a99c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801a956:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801a95a:	d41f      	bmi.n	801a99c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801a95c:	f8de 000c 	ldr.w	r0, [lr, #12]
 801a960:	4560      	cmp	r0, ip
 801a962:	dd1b      	ble.n	801a99c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801a964:	9800      	ldr	r0, [sp, #0]
 801a966:	b22d      	sxth	r5, r5
 801a968:	fb0c 0505 	mla	r5, ip, r5, r0
 801a96c:	5de8      	ldrb	r0, [r5, r7]
 801a96e:	9d01      	ldr	r5, [sp, #4]
 801a970:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801a974:	0e07      	lsrs	r7, r0, #24
 801a976:	2fff      	cmp	r7, #255	; 0xff
 801a978:	d116      	bne.n	801a9a8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801a97a:	f06f 0501 	mvn.w	r5, #1
 801a97e:	fb05 f706 	mul.w	r7, r5, r6
 801a982:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801a986:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801a98a:	0945      	lsrs	r5, r0, #5
 801a98c:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801a990:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801a994:	ea4c 0505 	orr.w	r5, ip, r5
 801a998:	4305      	orrs	r5, r0
 801a99a:	53e5      	strh	r5, [r4, r7]
 801a99c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801a99e:	3e01      	subs	r6, #1
 801a9a0:	4401      	add	r1, r0
 801a9a2:	9812      	ldr	r0, [sp, #72]	; 0x48
 801a9a4:	4402      	add	r2, r0
 801a9a6:	e78e      	b.n	801a8c6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801a9a8:	b2fd      	uxtb	r5, r7
 801a9aa:	2f00      	cmp	r7, #0
 801a9ac:	d0f6      	beq.n	801a99c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801a9ae:	f06f 0701 	mvn.w	r7, #1
 801a9b2:	fa1f f985 	uxth.w	r9, r5
 801a9b6:	43ed      	mvns	r5, r5
 801a9b8:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801a9bc:	4377      	muls	r7, r6
 801a9be:	fb1a fa09 	smulbb	sl, sl, r9
 801a9c2:	b2ed      	uxtb	r5, r5
 801a9c4:	f834 8007 	ldrh.w	r8, [r4, r7]
 801a9c8:	9702      	str	r7, [sp, #8]
 801a9ca:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801a9ce:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801a9d2:	fb17 f709 	smulbb	r7, r7, r9
 801a9d6:	b2c0      	uxtb	r0, r0
 801a9d8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801a9dc:	fb10 f009 	smulbb	r0, r0, r9
 801a9e0:	fb0c 7c05 	mla	ip, ip, r5, r7
 801a9e4:	ea4f 07e8 	mov.w	r7, r8, asr #3
 801a9e8:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801a9ec:	fa1f fc8c 	uxth.w	ip, ip
 801a9f0:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801a9f4:	fa5f f888 	uxtb.w	r8, r8
 801a9f8:	fb07 a705 	mla	r7, r7, r5, sl
 801a9fc:	fb08 0005 	mla	r0, r8, r5, r0
 801aa00:	f10c 0501 	add.w	r5, ip, #1
 801aa04:	b2bf      	uxth	r7, r7
 801aa06:	b280      	uxth	r0, r0
 801aa08:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801aa0c:	f100 0a01 	add.w	sl, r0, #1
 801aa10:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801aa14:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801aa18:	9802      	ldr	r0, [sp, #8]
 801aa1a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801aa1e:	ea4a 0c0c 	orr.w	ip, sl, ip
 801aa22:	f107 0a01 	add.w	sl, r7, #1
 801aa26:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801aa2a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801aa2e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801aa32:	ea4c 0c0a 	orr.w	ip, ip, sl
 801aa36:	f824 c000 	strh.w	ip, [r4, r0]
 801aa3a:	e7af      	b.n	801a99c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801aa3c:	f04f 0800 	mov.w	r8, #0
 801aa40:	eba3 0008 	sub.w	r0, r3, r8
 801aa44:	2800      	cmp	r0, #0
 801aa46:	f77f af41 	ble.w	801a8cc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801aa4a:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801aa4e:	1410      	asrs	r0, r2, #16
 801aa50:	9f00      	ldr	r7, [sp, #0]
 801aa52:	140d      	asrs	r5, r1, #16
 801aa54:	fb06 7000 	mla	r0, r6, r0, r7
 801aa58:	5d40      	ldrb	r0, [r0, r5]
 801aa5a:	9d01      	ldr	r5, [sp, #4]
 801aa5c:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801aa60:	0e2e      	lsrs	r6, r5, #24
 801aa62:	2eff      	cmp	r6, #255	; 0xff
 801aa64:	d112      	bne.n	801aa8c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 801aa66:	482c      	ldr	r0, [pc, #176]	; (801ab18 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801aa68:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801aa6c:	0968      	lsrs	r0, r5, #5
 801aa6e:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801aa72:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801aa76:	4330      	orrs	r0, r6
 801aa78:	4328      	orrs	r0, r5
 801aa7a:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 801aa7e:	9811      	ldr	r0, [sp, #68]	; 0x44
 801aa80:	f108 0801 	add.w	r8, r8, #1
 801aa84:	4401      	add	r1, r0
 801aa86:	9812      	ldr	r0, [sp, #72]	; 0x48
 801aa88:	4402      	add	r2, r0
 801aa8a:	e7d9      	b.n	801aa40 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801aa8c:	b2f0      	uxtb	r0, r6
 801aa8e:	2e00      	cmp	r6, #0
 801aa90:	d0f5      	beq.n	801aa7e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801aa92:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 801aa96:	fa1f f980 	uxth.w	r9, r0
 801aa9a:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801aa9e:	43c0      	mvns	r0, r0
 801aaa0:	ea4f 272c 	mov.w	r7, ip, asr #8
 801aaa4:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801aaa8:	fb16 f609 	smulbb	r6, r6, r9
 801aaac:	b2c0      	uxtb	r0, r0
 801aaae:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801aab2:	b2ed      	uxtb	r5, r5
 801aab4:	fb1a fa09 	smulbb	sl, sl, r9
 801aab8:	fb07 6700 	mla	r7, r7, r0, r6
 801aabc:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801aac0:	fb15 f509 	smulbb	r5, r5, r9
 801aac4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801aac8:	b2bf      	uxth	r7, r7
 801aaca:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801aace:	fa5f fc8c 	uxtb.w	ip, ip
 801aad2:	fb06 a600 	mla	r6, r6, r0, sl
 801aad6:	fb0c 5500 	mla	r5, ip, r0, r5
 801aada:	1c78      	adds	r0, r7, #1
 801aadc:	b2b6      	uxth	r6, r6
 801aade:	b2ad      	uxth	r5, r5
 801aae0:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801aae4:	f105 0a01 	add.w	sl, r5, #1
 801aae8:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801aaec:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801aaf0:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801aaf4:	ea4a 0707 	orr.w	r7, sl, r7
 801aaf8:	f106 0a01 	add.w	sl, r6, #1
 801aafc:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801ab00:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ab04:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801ab08:	ea47 070a 	orr.w	r7, r7, sl
 801ab0c:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801ab10:	e7b5      	b.n	801aa7e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801ab12:	b005      	add	sp, #20
 801ab14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab18:	fffff800 	.word	0xfffff800

0801ab1c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ab1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab20:	b087      	sub	sp, #28
 801ab22:	468b      	mov	fp, r1
 801ab24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ab28:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ab2a:	9204      	str	r2, [sp, #16]
 801ab2c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801ab30:	6861      	ldr	r1, [r4, #4]
 801ab32:	9205      	str	r2, [sp, #20]
 801ab34:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801ab38:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801ab3c:	fb01 2000 	mla	r0, r1, r0, r2
 801ab40:	6822      	ldr	r2, [r4, #0]
 801ab42:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801ab46:	f8de 2000 	ldr.w	r2, [lr]
 801ab4a:	9201      	str	r2, [sp, #4]
 801ab4c:	f8de 2004 	ldr.w	r2, [lr, #4]
 801ab50:	9202      	str	r2, [sp, #8]
 801ab52:	f1bb 0f00 	cmp.w	fp, #0
 801ab56:	dc03      	bgt.n	801ab60 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801ab58:	9a04      	ldr	r2, [sp, #16]
 801ab5a:	2a00      	cmp	r2, #0
 801ab5c:	f340 8142 	ble.w	801ade4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801ab60:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ab62:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801ab66:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801ab6a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ab6c:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801ab70:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ab74:	2b00      	cmp	r3, #0
 801ab76:	dd0e      	ble.n	801ab96 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801ab78:	140c      	asrs	r4, r1, #16
 801ab7a:	d405      	bmi.n	801ab88 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801ab7c:	42bc      	cmp	r4, r7
 801ab7e:	da03      	bge.n	801ab88 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801ab80:	1414      	asrs	r4, r2, #16
 801ab82:	d401      	bmi.n	801ab88 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801ab84:	42b4      	cmp	r4, r6
 801ab86:	db07      	blt.n	801ab98 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801ab88:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ab8a:	3b01      	subs	r3, #1
 801ab8c:	3002      	adds	r0, #2
 801ab8e:	4421      	add	r1, r4
 801ab90:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801ab92:	4422      	add	r2, r4
 801ab94:	e7ee      	b.n	801ab74 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801ab96:	d019      	beq.n	801abcc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801ab98:	1e5c      	subs	r4, r3, #1
 801ab9a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801ab9c:	fb05 1504 	mla	r5, r5, r4, r1
 801aba0:	142d      	asrs	r5, r5, #16
 801aba2:	d409      	bmi.n	801abb8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801aba4:	42bd      	cmp	r5, r7
 801aba6:	da07      	bge.n	801abb8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801aba8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801abaa:	fb05 2404 	mla	r4, r5, r4, r2
 801abae:	1424      	asrs	r4, r4, #16
 801abb0:	d402      	bmi.n	801abb8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801abb2:	42b4      	cmp	r4, r6
 801abb4:	f2c0 80b1 	blt.w	801ad1a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801abb8:	f04f 0800 	mov.w	r8, #0
 801abbc:	eb03 0408 	add.w	r4, r3, r8
 801abc0:	2c00      	cmp	r4, #0
 801abc2:	dc3e      	bgt.n	801ac42 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801abc4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801abc8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801abcc:	f1bb 0f00 	cmp.w	fp, #0
 801abd0:	f340 8108 	ble.w	801ade4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801abd4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801abd8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801abda:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801abde:	f1bb 0b01 	subs.w	fp, fp, #1
 801abe2:	eeb0 6a62 	vmov.f32	s12, s5
 801abe6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801abea:	ee31 1a05 	vadd.f32	s2, s2, s10
 801abee:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801abf2:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801abf6:	eeb0 6a43 	vmov.f32	s12, s6
 801abfa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801abfe:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801ac02:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ac06:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ac0a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ac0e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ac12:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ac16:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ac1a:	ee12 2a90 	vmov	r2, s5
 801ac1e:	eef0 2a47 	vmov.f32	s5, s14
 801ac22:	fb92 f3f3 	sdiv	r3, r2, r3
 801ac26:	ee13 2a10 	vmov	r2, s6
 801ac2a:	9313      	str	r3, [sp, #76]	; 0x4c
 801ac2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ac2e:	eeb0 3a67 	vmov.f32	s6, s15
 801ac32:	fb92 f3f3 	sdiv	r3, r2, r3
 801ac36:	9a04      	ldr	r2, [sp, #16]
 801ac38:	9314      	str	r3, [sp, #80]	; 0x50
 801ac3a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ac3c:	bf08      	it	eq
 801ac3e:	4613      	moveq	r3, r2
 801ac40:	e787      	b.n	801ab52 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801ac42:	140e      	asrs	r6, r1, #16
 801ac44:	d462      	bmi.n	801ad0c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801ac46:	f8de 5008 	ldr.w	r5, [lr, #8]
 801ac4a:	42b5      	cmp	r5, r6
 801ac4c:	dd5e      	ble.n	801ad0c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801ac4e:	1417      	asrs	r7, r2, #16
 801ac50:	d45c      	bmi.n	801ad0c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801ac52:	f8de 400c 	ldr.w	r4, [lr, #12]
 801ac56:	42bc      	cmp	r4, r7
 801ac58:	dd58      	ble.n	801ad0c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801ac5a:	b22d      	sxth	r5, r5
 801ac5c:	9c02      	ldr	r4, [sp, #8]
 801ac5e:	fb07 6505 	mla	r5, r7, r5, r6
 801ac62:	5d66      	ldrb	r6, [r4, r5]
 801ac64:	2e00      	cmp	r6, #0
 801ac66:	d051      	beq.n	801ad0c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801ac68:	9c01      	ldr	r4, [sp, #4]
 801ac6a:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 801ac6e:	f06f 0401 	mvn.w	r4, #1
 801ac72:	fb04 f408 	mul.w	r4, r4, r8
 801ac76:	ea4f 2c29 	mov.w	ip, r9, asr #8
 801ac7a:	5b05      	ldrh	r5, [r0, r4]
 801ac7c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801ac80:	9403      	str	r4, [sp, #12]
 801ac82:	9c05      	ldr	r4, [sp, #20]
 801ac84:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801ac88:	4366      	muls	r6, r4
 801ac8a:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801ac8e:	1c74      	adds	r4, r6, #1
 801ac90:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801ac94:	122e      	asrs	r6, r5, #8
 801ac96:	1224      	asrs	r4, r4, #8
 801ac98:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801ac9c:	00ed      	lsls	r5, r5, #3
 801ac9e:	b2a7      	uxth	r7, r4
 801aca0:	43e4      	mvns	r4, r4
 801aca2:	b2ed      	uxtb	r5, r5
 801aca4:	b2e4      	uxtb	r4, r4
 801aca6:	fb16 f604 	smulbb	r6, r6, r4
 801acaa:	fb15 f504 	smulbb	r5, r5, r4
 801acae:	fb0c 6c07 	mla	ip, ip, r7, r6
 801acb2:	ea4f 06e9 	mov.w	r6, r9, asr #3
 801acb6:	fb1a fa04 	smulbb	sl, sl, r4
 801acba:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801acbe:	fa1f fc8c 	uxth.w	ip, ip
 801acc2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801acc6:	fa5f f989 	uxtb.w	r9, r9
 801acca:	fb06 a607 	mla	r6, r6, r7, sl
 801acce:	f10c 0401 	add.w	r4, ip, #1
 801acd2:	fb09 5507 	mla	r5, r9, r7, r5
 801acd6:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801acda:	9c03      	ldr	r4, [sp, #12]
 801acdc:	b2ad      	uxth	r5, r5
 801acde:	b2b6      	uxth	r6, r6
 801ace0:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801ace4:	f105 0a01 	add.w	sl, r5, #1
 801ace8:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801acec:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801acf0:	ea4a 0c0c 	orr.w	ip, sl, ip
 801acf4:	f106 0a01 	add.w	sl, r6, #1
 801acf8:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801acfc:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ad00:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801ad04:	ea4c 0c0a 	orr.w	ip, ip, sl
 801ad08:	f820 c004 	strh.w	ip, [r0, r4]
 801ad0c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ad0e:	f108 38ff 	add.w	r8, r8, #4294967295
 801ad12:	4421      	add	r1, r4
 801ad14:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801ad16:	4422      	add	r2, r4
 801ad18:	e750      	b.n	801abbc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801ad1a:	f04f 0900 	mov.w	r9, #0
 801ad1e:	eba3 0409 	sub.w	r4, r3, r9
 801ad22:	2c00      	cmp	r4, #0
 801ad24:	f77f af4e 	ble.w	801abc4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801ad28:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801ad2c:	140d      	asrs	r5, r1, #16
 801ad2e:	1414      	asrs	r4, r2, #16
 801ad30:	fb06 5404 	mla	r4, r6, r4, r5
 801ad34:	9d02      	ldr	r5, [sp, #8]
 801ad36:	5d2e      	ldrb	r6, [r5, r4]
 801ad38:	2e00      	cmp	r6, #0
 801ad3a:	d04c      	beq.n	801add6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801ad3c:	9d01      	ldr	r5, [sp, #4]
 801ad3e:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 801ad42:	9c05      	ldr	r4, [sp, #20]
 801ad44:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801ad48:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801ad4c:	4366      	muls	r6, r4
 801ad4e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801ad52:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801ad56:	1c74      	adds	r4, r6, #1
 801ad58:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801ad5c:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801ad60:	122e      	asrs	r6, r5, #8
 801ad62:	1224      	asrs	r4, r4, #8
 801ad64:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801ad68:	00ed      	lsls	r5, r5, #3
 801ad6a:	b2a7      	uxth	r7, r4
 801ad6c:	43e4      	mvns	r4, r4
 801ad6e:	b2ed      	uxtb	r5, r5
 801ad70:	b2e4      	uxtb	r4, r4
 801ad72:	fb16 f604 	smulbb	r6, r6, r4
 801ad76:	fb15 f504 	smulbb	r5, r5, r4
 801ad7a:	fb0c 6c07 	mla	ip, ip, r7, r6
 801ad7e:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801ad82:	fb1a fa04 	smulbb	sl, sl, r4
 801ad86:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801ad8a:	fa1f fc8c 	uxth.w	ip, ip
 801ad8e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801ad92:	fa5f f888 	uxtb.w	r8, r8
 801ad96:	fb06 a607 	mla	r6, r6, r7, sl
 801ad9a:	f10c 0401 	add.w	r4, ip, #1
 801ad9e:	fb08 5507 	mla	r5, r8, r7, r5
 801ada2:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801ada6:	b2ad      	uxth	r5, r5
 801ada8:	b2b6      	uxth	r6, r6
 801adaa:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801adae:	f105 0a01 	add.w	sl, r5, #1
 801adb2:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801adb6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801adba:	ea4a 0c0c 	orr.w	ip, sl, ip
 801adbe:	f106 0a01 	add.w	sl, r6, #1
 801adc2:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801adc6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801adca:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801adce:	ea4c 0c0a 	orr.w	ip, ip, sl
 801add2:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801add6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801add8:	f109 0901 	add.w	r9, r9, #1
 801addc:	4421      	add	r1, r4
 801adde:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801ade0:	4422      	add	r2, r4
 801ade2:	e79c      	b.n	801ad1e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801ade4:	b007      	add	sp, #28
 801ade6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801adea <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801adea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801adee:	b085      	sub	sp, #20
 801adf0:	468b      	mov	fp, r1
 801adf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801adf6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801adf8:	9203      	str	r2, [sp, #12]
 801adfa:	6861      	ldr	r1, [r4, #4]
 801adfc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801ae00:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 801ae04:	fb01 2000 	mla	r0, r1, r0, r2
 801ae08:	6822      	ldr	r2, [r4, #0]
 801ae0a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801ae0e:	f8d8 2000 	ldr.w	r2, [r8]
 801ae12:	9200      	str	r2, [sp, #0]
 801ae14:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801ae18:	9201      	str	r2, [sp, #4]
 801ae1a:	f1bb 0f00 	cmp.w	fp, #0
 801ae1e:	dc03      	bgt.n	801ae28 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801ae20:	9a03      	ldr	r2, [sp, #12]
 801ae22:	2a00      	cmp	r2, #0
 801ae24:	f340 8146 	ble.w	801b0b4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801ae28:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ae2a:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801ae2e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801ae32:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ae34:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801ae38:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ae3c:	2b00      	cmp	r3, #0
 801ae3e:	dd0e      	ble.n	801ae5e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801ae40:	140c      	asrs	r4, r1, #16
 801ae42:	d405      	bmi.n	801ae50 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801ae44:	42bc      	cmp	r4, r7
 801ae46:	da03      	bge.n	801ae50 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801ae48:	1414      	asrs	r4, r2, #16
 801ae4a:	d401      	bmi.n	801ae50 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801ae4c:	42b4      	cmp	r4, r6
 801ae4e:	db07      	blt.n	801ae60 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ae50:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ae52:	3b01      	subs	r3, #1
 801ae54:	3002      	adds	r0, #2
 801ae56:	4421      	add	r1, r4
 801ae58:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ae5a:	4422      	add	r2, r4
 801ae5c:	e7ee      	b.n	801ae3c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801ae5e:	d017      	beq.n	801ae90 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801ae60:	1e5c      	subs	r4, r3, #1
 801ae62:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801ae64:	fb05 1504 	mla	r5, r5, r4, r1
 801ae68:	142d      	asrs	r5, r5, #16
 801ae6a:	d409      	bmi.n	801ae80 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801ae6c:	42bd      	cmp	r5, r7
 801ae6e:	da07      	bge.n	801ae80 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801ae70:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801ae72:	fb05 2404 	mla	r4, r5, r4, r2
 801ae76:	1424      	asrs	r4, r4, #16
 801ae78:	d402      	bmi.n	801ae80 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801ae7a:	42b4      	cmp	r4, r6
 801ae7c:	f2c0 80b3 	blt.w	801afe6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801ae80:	2600      	movs	r6, #0
 801ae82:	199c      	adds	r4, r3, r6
 801ae84:	2c00      	cmp	r4, #0
 801ae86:	dc3e      	bgt.n	801af06 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801ae88:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ae8c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801ae90:	f1bb 0f00 	cmp.w	fp, #0
 801ae94:	f340 810e 	ble.w	801b0b4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801ae98:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ae9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ae9e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801aea2:	f1bb 0b01 	subs.w	fp, fp, #1
 801aea6:	eeb0 6a62 	vmov.f32	s12, s5
 801aeaa:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801aeae:	ee31 1a05 	vadd.f32	s2, s2, s10
 801aeb2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801aeb6:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801aeba:	eeb0 6a43 	vmov.f32	s12, s6
 801aebe:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801aec2:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801aec6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801aeca:	ee61 7a27 	vmul.f32	s15, s2, s15
 801aece:	ee77 2a62 	vsub.f32	s5, s14, s5
 801aed2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801aed6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801aeda:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801aede:	ee12 2a90 	vmov	r2, s5
 801aee2:	eef0 2a47 	vmov.f32	s5, s14
 801aee6:	fb92 f3f3 	sdiv	r3, r2, r3
 801aeea:	ee13 2a10 	vmov	r2, s6
 801aeee:	9311      	str	r3, [sp, #68]	; 0x44
 801aef0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801aef2:	eeb0 3a67 	vmov.f32	s6, s15
 801aef6:	fb92 f3f3 	sdiv	r3, r2, r3
 801aefa:	9a03      	ldr	r2, [sp, #12]
 801aefc:	9312      	str	r3, [sp, #72]	; 0x48
 801aefe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801af00:	bf08      	it	eq
 801af02:	4613      	moveq	r3, r2
 801af04:	e789      	b.n	801ae1a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801af06:	140f      	asrs	r7, r1, #16
 801af08:	d418      	bmi.n	801af3c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801af0a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801af0e:	42bd      	cmp	r5, r7
 801af10:	dd14      	ble.n	801af3c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801af12:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801af16:	d411      	bmi.n	801af3c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801af18:	f8d8 400c 	ldr.w	r4, [r8, #12]
 801af1c:	4564      	cmp	r4, ip
 801af1e:	dd0d      	ble.n	801af3c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801af20:	b22d      	sxth	r5, r5
 801af22:	9c01      	ldr	r4, [sp, #4]
 801af24:	fb0c 7505 	mla	r5, ip, r5, r7
 801af28:	5d64      	ldrb	r4, [r4, r5]
 801af2a:	2cff      	cmp	r4, #255	; 0xff
 801af2c:	d10c      	bne.n	801af48 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801af2e:	9c00      	ldr	r4, [sp, #0]
 801af30:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 801af34:	f06f 0401 	mvn.w	r4, #1
 801af38:	4374      	muls	r4, r6
 801af3a:	5305      	strh	r5, [r0, r4]
 801af3c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801af3e:	3e01      	subs	r6, #1
 801af40:	4421      	add	r1, r4
 801af42:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801af44:	4422      	add	r2, r4
 801af46:	e79c      	b.n	801ae82 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801af48:	2c00      	cmp	r4, #0
 801af4a:	d0f7      	beq.n	801af3c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801af4c:	9f00      	ldr	r7, [sp, #0]
 801af4e:	fa1f fc84 	uxth.w	ip, r4
 801af52:	43e4      	mvns	r4, r4
 801af54:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 801af58:	f06f 0501 	mvn.w	r5, #1
 801af5c:	b2e4      	uxtb	r4, r4
 801af5e:	4375      	muls	r5, r6
 801af60:	ea4f 2e29 	mov.w	lr, r9, asr #8
 801af64:	9502      	str	r5, [sp, #8]
 801af66:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801af6a:	5b45      	ldrh	r5, [r0, r5]
 801af6c:	122f      	asrs	r7, r5, #8
 801af6e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801af72:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801af76:	00ed      	lsls	r5, r5, #3
 801af78:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801af7c:	fb17 f704 	smulbb	r7, r7, r4
 801af80:	b2ed      	uxtb	r5, r5
 801af82:	fb1a fa04 	smulbb	sl, sl, r4
 801af86:	fb0e 7e0c 	mla	lr, lr, ip, r7
 801af8a:	ea4f 07e9 	mov.w	r7, r9, asr #3
 801af8e:	fb15 f504 	smulbb	r5, r5, r4
 801af92:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801af96:	fa1f fe8e 	uxth.w	lr, lr
 801af9a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801af9e:	fa5f f989 	uxtb.w	r9, r9
 801afa2:	fb07 a70c 	mla	r7, r7, ip, sl
 801afa6:	f10e 0401 	add.w	r4, lr, #1
 801afaa:	fb09 550c 	mla	r5, r9, ip, r5
 801afae:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 801afb2:	9c02      	ldr	r4, [sp, #8]
 801afb4:	b2ad      	uxth	r5, r5
 801afb6:	b2bf      	uxth	r7, r7
 801afb8:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801afbc:	f105 0a01 	add.w	sl, r5, #1
 801afc0:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801afc4:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801afc8:	ea4a 0e0e 	orr.w	lr, sl, lr
 801afcc:	f107 0a01 	add.w	sl, r7, #1
 801afd0:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801afd4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801afd8:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801afdc:	ea4e 0e0a 	orr.w	lr, lr, sl
 801afe0:	f820 e004 	strh.w	lr, [r0, r4]
 801afe4:	e7aa      	b.n	801af3c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801afe6:	f04f 0900 	mov.w	r9, #0
 801afea:	eba3 0409 	sub.w	r4, r3, r9
 801afee:	2c00      	cmp	r4, #0
 801aff0:	f77f af4a 	ble.w	801ae88 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801aff4:	1414      	asrs	r4, r2, #16
 801aff6:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801affa:	140d      	asrs	r5, r1, #16
 801affc:	fb06 5504 	mla	r5, r6, r4, r5
 801b000:	9c01      	ldr	r4, [sp, #4]
 801b002:	5d64      	ldrb	r4, [r4, r5]
 801b004:	2cff      	cmp	r4, #255	; 0xff
 801b006:	d10b      	bne.n	801b020 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801b008:	9c00      	ldr	r4, [sp, #0]
 801b00a:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801b00e:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 801b012:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801b014:	f109 0901 	add.w	r9, r9, #1
 801b018:	4421      	add	r1, r4
 801b01a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801b01c:	4422      	add	r2, r4
 801b01e:	e7e4      	b.n	801afea <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801b020:	2c00      	cmp	r4, #0
 801b022:	d0f6      	beq.n	801b012 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801b024:	9e00      	ldr	r6, [sp, #0]
 801b026:	b2a7      	uxth	r7, r4
 801b028:	43e4      	mvns	r4, r4
 801b02a:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 801b02e:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801b032:	b2e4      	uxtb	r4, r4
 801b034:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801b038:	122e      	asrs	r6, r5, #8
 801b03a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801b03e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b042:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801b046:	00ed      	lsls	r5, r5, #3
 801b048:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801b04c:	fb16 f604 	smulbb	r6, r6, r4
 801b050:	b2ed      	uxtb	r5, r5
 801b052:	fb1a fa04 	smulbb	sl, sl, r4
 801b056:	fb0c 6c07 	mla	ip, ip, r7, r6
 801b05a:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801b05e:	fb15 f504 	smulbb	r5, r5, r4
 801b062:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801b066:	fa1f fc8c 	uxth.w	ip, ip
 801b06a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801b06e:	fa5f fe8e 	uxtb.w	lr, lr
 801b072:	fb06 a607 	mla	r6, r6, r7, sl
 801b076:	f10c 0401 	add.w	r4, ip, #1
 801b07a:	fb0e 5507 	mla	r5, lr, r7, r5
 801b07e:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801b082:	b2ad      	uxth	r5, r5
 801b084:	b2b6      	uxth	r6, r6
 801b086:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801b08a:	f105 0a01 	add.w	sl, r5, #1
 801b08e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801b092:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801b096:	ea4a 0c0c 	orr.w	ip, sl, ip
 801b09a:	f106 0a01 	add.w	sl, r6, #1
 801b09e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801b0a2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b0a6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801b0aa:	ea4c 0c0a 	orr.w	ip, ip, sl
 801b0ae:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801b0b2:	e7ae      	b.n	801b012 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801b0b4:	b005      	add	sp, #20
 801b0b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b0ba <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b0ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b0be:	b085      	sub	sp, #20
 801b0c0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801b0c2:	9203      	str	r2, [sp, #12]
 801b0c4:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801b0c8:	9100      	str	r1, [sp, #0]
 801b0ca:	9201      	str	r2, [sp, #4]
 801b0cc:	6841      	ldr	r1, [r0, #4]
 801b0ce:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801b0d2:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801b0d6:	fb01 2404 	mla	r4, r1, r4, r2
 801b0da:	6802      	ldr	r2, [r0, #0]
 801b0dc:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801b0e0:	f8de 2000 	ldr.w	r2, [lr]
 801b0e4:	9202      	str	r2, [sp, #8]
 801b0e6:	9a01      	ldr	r2, [sp, #4]
 801b0e8:	43d6      	mvns	r6, r2
 801b0ea:	b2f6      	uxtb	r6, r6
 801b0ec:	9a00      	ldr	r2, [sp, #0]
 801b0ee:	2a00      	cmp	r2, #0
 801b0f0:	dc03      	bgt.n	801b0fa <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801b0f2:	9a03      	ldr	r2, [sp, #12]
 801b0f4:	2a00      	cmp	r2, #0
 801b0f6:	f340 8124 	ble.w	801b342 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801b0fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b0fc:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801b100:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801b104:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b106:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801b10a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b10e:	2b00      	cmp	r3, #0
 801b110:	dd0e      	ble.n	801b130 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b112:	1408      	asrs	r0, r1, #16
 801b114:	d405      	bmi.n	801b122 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801b116:	4560      	cmp	r0, ip
 801b118:	da03      	bge.n	801b122 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801b11a:	1410      	asrs	r0, r2, #16
 801b11c:	d401      	bmi.n	801b122 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801b11e:	42b8      	cmp	r0, r7
 801b120:	db07      	blt.n	801b132 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801b122:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b124:	3b01      	subs	r3, #1
 801b126:	3402      	adds	r4, #2
 801b128:	4401      	add	r1, r0
 801b12a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801b12c:	4402      	add	r2, r0
 801b12e:	e7ee      	b.n	801b10e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801b130:	d06e      	beq.n	801b210 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801b132:	1e58      	subs	r0, r3, #1
 801b134:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801b136:	fb05 1500 	mla	r5, r5, r0, r1
 801b13a:	142d      	asrs	r5, r5, #16
 801b13c:	d45c      	bmi.n	801b1f8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801b13e:	4565      	cmp	r5, ip
 801b140:	da5a      	bge.n	801b1f8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801b142:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801b144:	fb05 2000 	mla	r0, r5, r0, r2
 801b148:	1400      	asrs	r0, r0, #16
 801b14a:	d455      	bmi.n	801b1f8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801b14c:	42b8      	cmp	r0, r7
 801b14e:	da53      	bge.n	801b1f8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801b150:	4699      	mov	r9, r3
 801b152:	46a2      	mov	sl, r4
 801b154:	f8bd b004 	ldrh.w	fp, [sp, #4]
 801b158:	f1b9 0f00 	cmp.w	r9, #0
 801b15c:	dd54      	ble.n	801b208 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801b15e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801b162:	140d      	asrs	r5, r1, #16
 801b164:	1410      	asrs	r0, r2, #16
 801b166:	f109 39ff 	add.w	r9, r9, #4294967295
 801b16a:	fb07 5000 	mla	r0, r7, r0, r5
 801b16e:	9d02      	ldr	r5, [sp, #8]
 801b170:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801b174:	f8ba 5000 	ldrh.w	r5, [sl]
 801b178:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801b17c:	122f      	asrs	r7, r5, #8
 801b17e:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801b182:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b186:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b18a:	00ed      	lsls	r5, r5, #3
 801b18c:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801b190:	fb17 f706 	smulbb	r7, r7, r6
 801b194:	b2ed      	uxtb	r5, r5
 801b196:	fb18 f806 	smulbb	r8, r8, r6
 801b19a:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801b19e:	10c7      	asrs	r7, r0, #3
 801b1a0:	fb15 f506 	smulbb	r5, r5, r6
 801b1a4:	00c0      	lsls	r0, r0, #3
 801b1a6:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801b1aa:	fa1f fc8c 	uxth.w	ip, ip
 801b1ae:	b2c0      	uxtb	r0, r0
 801b1b0:	fb07 870b 	mla	r7, r7, fp, r8
 801b1b4:	fb00 500b 	mla	r0, r0, fp, r5
 801b1b8:	f10c 0501 	add.w	r5, ip, #1
 801b1bc:	b2bf      	uxth	r7, r7
 801b1be:	b280      	uxth	r0, r0
 801b1c0:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801b1c4:	f107 0801 	add.w	r8, r7, #1
 801b1c8:	1c45      	adds	r5, r0, #1
 801b1ca:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801b1ce:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801b1d2:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801b1d6:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b1d8:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801b1dc:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801b1e0:	4401      	add	r1, r0
 801b1e2:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801b1e6:	9812      	ldr	r0, [sp, #72]	; 0x48
 801b1e8:	ea45 0c0c 	orr.w	ip, r5, ip
 801b1ec:	4402      	add	r2, r0
 801b1ee:	ea4c 0c08 	orr.w	ip, ip, r8
 801b1f2:	f82a cb02 	strh.w	ip, [sl], #2
 801b1f6:	e7af      	b.n	801b158 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801b1f8:	f04f 0800 	mov.w	r8, #0
 801b1fc:	f8bd a004 	ldrh.w	sl, [sp, #4]
 801b200:	eb03 0008 	add.w	r0, r3, r8
 801b204:	2800      	cmp	r0, #0
 801b206:	dc41      	bgt.n	801b28c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801b208:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b20c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b210:	9b00      	ldr	r3, [sp, #0]
 801b212:	2b00      	cmp	r3, #0
 801b214:	f340 8095 	ble.w	801b342 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801b218:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b21c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b21e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b222:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b226:	eef0 6a62 	vmov.f32	s13, s5
 801b22a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b22e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b232:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b236:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801b23a:	eef0 6a43 	vmov.f32	s13, s6
 801b23e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b242:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801b246:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b24a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b24e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b252:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b256:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b25a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b25e:	ee12 2a90 	vmov	r2, s5
 801b262:	eef0 2a47 	vmov.f32	s5, s14
 801b266:	fb92 f3f3 	sdiv	r3, r2, r3
 801b26a:	ee13 2a10 	vmov	r2, s6
 801b26e:	9311      	str	r3, [sp, #68]	; 0x44
 801b270:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b272:	eeb0 3a67 	vmov.f32	s6, s15
 801b276:	fb92 f3f3 	sdiv	r3, r2, r3
 801b27a:	9312      	str	r3, [sp, #72]	; 0x48
 801b27c:	9b00      	ldr	r3, [sp, #0]
 801b27e:	9a03      	ldr	r2, [sp, #12]
 801b280:	3b01      	subs	r3, #1
 801b282:	9300      	str	r3, [sp, #0]
 801b284:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b286:	bf08      	it	eq
 801b288:	4613      	moveq	r3, r2
 801b28a:	e72f      	b.n	801b0ec <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801b28c:	140f      	asrs	r7, r1, #16
 801b28e:	d451      	bmi.n	801b334 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801b290:	f8de 5008 	ldr.w	r5, [lr, #8]
 801b294:	42bd      	cmp	r5, r7
 801b296:	dd4d      	ble.n	801b334 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801b298:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801b29c:	d44a      	bmi.n	801b334 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801b29e:	f8de 000c 	ldr.w	r0, [lr, #12]
 801b2a2:	4560      	cmp	r0, ip
 801b2a4:	dd46      	ble.n	801b334 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801b2a6:	b22d      	sxth	r5, r5
 801b2a8:	9802      	ldr	r0, [sp, #8]
 801b2aa:	fb0c 7505 	mla	r5, ip, r5, r7
 801b2ae:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 801b2b2:	f06f 0501 	mvn.w	r5, #1
 801b2b6:	fb05 fb08 	mul.w	fp, r5, r8
 801b2ba:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801b2be:	f834 500b 	ldrh.w	r5, [r4, fp]
 801b2c2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b2c6:	122f      	asrs	r7, r5, #8
 801b2c8:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801b2cc:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b2d0:	00ed      	lsls	r5, r5, #3
 801b2d2:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801b2d6:	fb17 f706 	smulbb	r7, r7, r6
 801b2da:	b2ed      	uxtb	r5, r5
 801b2dc:	fb19 f906 	smulbb	r9, r9, r6
 801b2e0:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801b2e4:	10c7      	asrs	r7, r0, #3
 801b2e6:	fb15 f506 	smulbb	r5, r5, r6
 801b2ea:	00c0      	lsls	r0, r0, #3
 801b2ec:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801b2f0:	fa1f fc8c 	uxth.w	ip, ip
 801b2f4:	b2c0      	uxtb	r0, r0
 801b2f6:	fb07 970a 	mla	r7, r7, sl, r9
 801b2fa:	fb00 500a 	mla	r0, r0, sl, r5
 801b2fe:	f10c 0501 	add.w	r5, ip, #1
 801b302:	b2bf      	uxth	r7, r7
 801b304:	b280      	uxth	r0, r0
 801b306:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801b30a:	f107 0901 	add.w	r9, r7, #1
 801b30e:	1c45      	adds	r5, r0, #1
 801b310:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801b314:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801b318:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801b31c:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801b320:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801b324:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801b328:	ea45 0c0c 	orr.w	ip, r5, ip
 801b32c:	ea4c 0c09 	orr.w	ip, ip, r9
 801b330:	f824 c00b 	strh.w	ip, [r4, fp]
 801b334:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b336:	f108 38ff 	add.w	r8, r8, #4294967295
 801b33a:	4401      	add	r1, r0
 801b33c:	9812      	ldr	r0, [sp, #72]	; 0x48
 801b33e:	4402      	add	r2, r0
 801b340:	e75e      	b.n	801b200 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801b342:	b005      	add	sp, #20
 801b344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b348 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b34c:	b085      	sub	sp, #20
 801b34e:	4693      	mov	fp, r2
 801b350:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b354:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801b356:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801b358:	6870      	ldr	r0, [r6, #4]
 801b35a:	9101      	str	r1, [sp, #4]
 801b35c:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801b360:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801b364:	fb00 2404 	mla	r4, r0, r4, r2
 801b368:	6832      	ldr	r2, [r6, #0]
 801b36a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801b36e:	682a      	ldr	r2, [r5, #0]
 801b370:	9202      	str	r2, [sp, #8]
 801b372:	9a01      	ldr	r2, [sp, #4]
 801b374:	2a00      	cmp	r2, #0
 801b376:	dc03      	bgt.n	801b380 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801b378:	f1bb 0f00 	cmp.w	fp, #0
 801b37c:	f340 809a 	ble.w	801b4b4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801b380:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b382:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801b386:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b38a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b38c:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801b390:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b394:	2b00      	cmp	r3, #0
 801b396:	dd0c      	ble.n	801b3b2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801b398:	1406      	asrs	r6, r0, #16
 801b39a:	d405      	bmi.n	801b3a8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801b39c:	454e      	cmp	r6, r9
 801b39e:	da03      	bge.n	801b3a8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801b3a0:	1416      	asrs	r6, r2, #16
 801b3a2:	d401      	bmi.n	801b3a8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801b3a4:	4546      	cmp	r6, r8
 801b3a6:	db05      	blt.n	801b3b4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801b3a8:	4470      	add	r0, lr
 801b3aa:	4462      	add	r2, ip
 801b3ac:	3b01      	subs	r3, #1
 801b3ae:	3402      	adds	r4, #2
 801b3b0:	e7f0      	b.n	801b394 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801b3b2:	d00f      	beq.n	801b3d4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801b3b4:	1e5e      	subs	r6, r3, #1
 801b3b6:	fb0e 0706 	mla	r7, lr, r6, r0
 801b3ba:	143f      	asrs	r7, r7, #16
 801b3bc:	d541      	bpl.n	801b442 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801b3be:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801b3c2:	4698      	mov	r8, r3
 801b3c4:	9603      	str	r6, [sp, #12]
 801b3c6:	f1b8 0f00 	cmp.w	r8, #0
 801b3ca:	dc56      	bgt.n	801b47a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 801b3cc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b3d0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b3d4:	9b01      	ldr	r3, [sp, #4]
 801b3d6:	2b00      	cmp	r3, #0
 801b3d8:	dd6c      	ble.n	801b4b4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801b3da:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b3de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b3e0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b3e4:	eeb0 6a62 	vmov.f32	s12, s5
 801b3e8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b3ec:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b3f0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b3f4:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801b3f8:	eeb0 6a43 	vmov.f32	s12, s6
 801b3fc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b400:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801b404:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b408:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b40c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b410:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b414:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b418:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b41c:	ee12 2a90 	vmov	r2, s5
 801b420:	eef0 2a47 	vmov.f32	s5, s14
 801b424:	fb92 fef3 	sdiv	lr, r2, r3
 801b428:	ee13 2a10 	vmov	r2, s6
 801b42c:	eeb0 3a67 	vmov.f32	s6, s15
 801b430:	fb92 fcf3 	sdiv	ip, r2, r3
 801b434:	9b01      	ldr	r3, [sp, #4]
 801b436:	3b01      	subs	r3, #1
 801b438:	9301      	str	r3, [sp, #4]
 801b43a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b43c:	bf08      	it	eq
 801b43e:	465b      	moveq	r3, fp
 801b440:	e797      	b.n	801b372 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801b442:	454f      	cmp	r7, r9
 801b444:	dabb      	bge.n	801b3be <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b446:	fb0c 2606 	mla	r6, ip, r6, r2
 801b44a:	1436      	asrs	r6, r6, #16
 801b44c:	d4b7      	bmi.n	801b3be <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b44e:	4546      	cmp	r6, r8
 801b450:	dab5      	bge.n	801b3be <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b452:	461e      	mov	r6, r3
 801b454:	46a0      	mov	r8, r4
 801b456:	2e00      	cmp	r6, #0
 801b458:	ddb8      	ble.n	801b3cc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801b45a:	1417      	asrs	r7, r2, #16
 801b45c:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801b460:	ea4f 4920 	mov.w	r9, r0, asr #16
 801b464:	9902      	ldr	r1, [sp, #8]
 801b466:	4470      	add	r0, lr
 801b468:	4462      	add	r2, ip
 801b46a:	fb0a 9707 	mla	r7, sl, r7, r9
 801b46e:	3e01      	subs	r6, #1
 801b470:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801b474:	f828 7b02 	strh.w	r7, [r8], #2
 801b478:	e7ed      	b.n	801b456 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801b47a:	ea5f 4920 	movs.w	r9, r0, asr #16
 801b47e:	d414      	bmi.n	801b4aa <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801b480:	68ae      	ldr	r6, [r5, #8]
 801b482:	454e      	cmp	r6, r9
 801b484:	dd11      	ble.n	801b4aa <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801b486:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801b48a:	d40e      	bmi.n	801b4aa <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801b48c:	68ef      	ldr	r7, [r5, #12]
 801b48e:	4557      	cmp	r7, sl
 801b490:	dd0b      	ble.n	801b4aa <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801b492:	b236      	sxth	r6, r6
 801b494:	f06f 0101 	mvn.w	r1, #1
 801b498:	9f02      	ldr	r7, [sp, #8]
 801b49a:	fb0a 9606 	mla	r6, sl, r6, r9
 801b49e:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801b4a2:	fb01 f608 	mul.w	r6, r1, r8
 801b4a6:	9903      	ldr	r1, [sp, #12]
 801b4a8:	538f      	strh	r7, [r1, r6]
 801b4aa:	4470      	add	r0, lr
 801b4ac:	4462      	add	r2, ip
 801b4ae:	f108 38ff 	add.w	r8, r8, #4294967295
 801b4b2:	e788      	b.n	801b3c6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801b4b4:	b005      	add	sp, #20
 801b4b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b4ba <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b4ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4be:	b087      	sub	sp, #28
 801b4c0:	468b      	mov	fp, r1
 801b4c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b4c6:	9815      	ldr	r0, [sp, #84]	; 0x54
 801b4c8:	9203      	str	r2, [sp, #12]
 801b4ca:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801b4ce:	6841      	ldr	r1, [r0, #4]
 801b4d0:	9204      	str	r2, [sp, #16]
 801b4d2:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801b4d6:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801b4da:	fb01 2505 	mla	r5, r1, r5, r2
 801b4de:	6802      	ldr	r2, [r0, #0]
 801b4e0:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801b4e4:	f8d9 2000 	ldr.w	r2, [r9]
 801b4e8:	9201      	str	r2, [sp, #4]
 801b4ea:	f1bb 0f00 	cmp.w	fp, #0
 801b4ee:	dc03      	bgt.n	801b4f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801b4f0:	9a03      	ldr	r2, [sp, #12]
 801b4f2:	2a00      	cmp	r2, #0
 801b4f4:	f340 8158 	ble.w	801b7a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 801b4f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b4fa:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801b4fe:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b502:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b504:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801b508:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801b50c:	2b00      	cmp	r3, #0
 801b50e:	dd0e      	ble.n	801b52e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801b510:	1402      	asrs	r2, r0, #16
 801b512:	d405      	bmi.n	801b520 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801b514:	42ba      	cmp	r2, r7
 801b516:	da03      	bge.n	801b520 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801b518:	140a      	asrs	r2, r1, #16
 801b51a:	d401      	bmi.n	801b520 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801b51c:	42b2      	cmp	r2, r6
 801b51e:	db07      	blt.n	801b530 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b520:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b522:	3b01      	subs	r3, #1
 801b524:	3502      	adds	r5, #2
 801b526:	4410      	add	r0, r2
 801b528:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b52a:	4411      	add	r1, r2
 801b52c:	e7ee      	b.n	801b50c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801b52e:	d017      	beq.n	801b560 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801b530:	1e5a      	subs	r2, r3, #1
 801b532:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b534:	fb04 0402 	mla	r4, r4, r2, r0
 801b538:	1424      	asrs	r4, r4, #16
 801b53a:	d409      	bmi.n	801b550 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b53c:	42bc      	cmp	r4, r7
 801b53e:	da07      	bge.n	801b550 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b540:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801b542:	fb04 1202 	mla	r2, r4, r2, r1
 801b546:	1412      	asrs	r2, r2, #16
 801b548:	d402      	bmi.n	801b550 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b54a:	42b2      	cmp	r2, r6
 801b54c:	f2c0 80bf 	blt.w	801b6ce <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801b550:	2700      	movs	r7, #0
 801b552:	19da      	adds	r2, r3, r7
 801b554:	2a00      	cmp	r2, #0
 801b556:	dc3e      	bgt.n	801b5d6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801b558:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b55c:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801b560:	f1bb 0f00 	cmp.w	fp, #0
 801b564:	f340 8120 	ble.w	801b7a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 801b568:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b56c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b56e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b572:	f1bb 0b01 	subs.w	fp, fp, #1
 801b576:	eeb0 6a62 	vmov.f32	s12, s5
 801b57a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b57e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b582:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b586:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801b58a:	eeb0 6a43 	vmov.f32	s12, s6
 801b58e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b592:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801b596:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b59a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b59e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b5a2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b5a6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b5aa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b5ae:	ee12 2a90 	vmov	r2, s5
 801b5b2:	eef0 2a47 	vmov.f32	s5, s14
 801b5b6:	fb92 f3f3 	sdiv	r3, r2, r3
 801b5ba:	ee13 2a10 	vmov	r2, s6
 801b5be:	9313      	str	r3, [sp, #76]	; 0x4c
 801b5c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b5c2:	eeb0 3a67 	vmov.f32	s6, s15
 801b5c6:	fb92 f3f3 	sdiv	r3, r2, r3
 801b5ca:	9a03      	ldr	r2, [sp, #12]
 801b5cc:	9314      	str	r3, [sp, #80]	; 0x50
 801b5ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b5d0:	bf08      	it	eq
 801b5d2:	4613      	moveq	r3, r2
 801b5d4:	e789      	b.n	801b4ea <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801b5d6:	1406      	asrs	r6, r0, #16
 801b5d8:	d42d      	bmi.n	801b636 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801b5da:	f8d9 4008 	ldr.w	r4, [r9, #8]
 801b5de:	42b4      	cmp	r4, r6
 801b5e0:	dd29      	ble.n	801b636 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801b5e2:	ea5f 4c21 	movs.w	ip, r1, asr #16
 801b5e6:	d426      	bmi.n	801b636 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801b5e8:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801b5ec:	4562      	cmp	r2, ip
 801b5ee:	dd22      	ble.n	801b636 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801b5f0:	b224      	sxth	r4, r4
 801b5f2:	9a01      	ldr	r2, [sp, #4]
 801b5f4:	fb0c 6404 	mla	r4, ip, r4, r6
 801b5f8:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 801b5fc:	0e22      	lsrs	r2, r4, #24
 801b5fe:	d01a      	beq.n	801b636 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801b600:	9e04      	ldr	r6, [sp, #16]
 801b602:	4372      	muls	r2, r6
 801b604:	1c56      	adds	r6, r2, #1
 801b606:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801b60a:	0a26      	lsrs	r6, r4, #8
 801b60c:	1212      	asrs	r2, r2, #8
 801b60e:	9605      	str	r6, [sp, #20]
 801b610:	2aff      	cmp	r2, #255	; 0xff
 801b612:	d116      	bne.n	801b642 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801b614:	f06f 0201 	mvn.w	r2, #1
 801b618:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801b61c:	fb02 fc07 	mul.w	ip, r2, r7
 801b620:	0962      	lsrs	r2, r4, #5
 801b622:	f026 0607 	bic.w	r6, r6, #7
 801b626:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801b62a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801b62e:	4316      	orrs	r6, r2
 801b630:	4326      	orrs	r6, r4
 801b632:	f825 600c 	strh.w	r6, [r5, ip]
 801b636:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b638:	3f01      	subs	r7, #1
 801b63a:	4410      	add	r0, r2
 801b63c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b63e:	4411      	add	r1, r2
 801b640:	e787      	b.n	801b552 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801b642:	f06f 0601 	mvn.w	r6, #1
 801b646:	fa1f fa82 	uxth.w	sl, r2
 801b64a:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 801b64e:	43d2      	mvns	r2, r2
 801b650:	437e      	muls	r6, r7
 801b652:	b2e4      	uxtb	r4, r4
 801b654:	fb1c fc0a 	smulbb	ip, ip, sl
 801b658:	b2d2      	uxtb	r2, r2
 801b65a:	f835 8006 	ldrh.w	r8, [r5, r6]
 801b65e:	fb14 f40a 	smulbb	r4, r4, sl
 801b662:	9602      	str	r6, [sp, #8]
 801b664:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801b668:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801b66c:	fb16 f60a 	smulbb	r6, r6, sl
 801b670:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801b674:	fb0e ce02 	mla	lr, lr, r2, ip
 801b678:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801b67c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801b680:	fa1f fe8e 	uxth.w	lr, lr
 801b684:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801b688:	fa5f f888 	uxtb.w	r8, r8
 801b68c:	fb0c 6c02 	mla	ip, ip, r2, r6
 801b690:	fb08 4402 	mla	r4, r8, r2, r4
 801b694:	f10e 0201 	add.w	r2, lr, #1
 801b698:	fa1f fc8c 	uxth.w	ip, ip
 801b69c:	b2a4      	uxth	r4, r4
 801b69e:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801b6a2:	9a02      	ldr	r2, [sp, #8]
 801b6a4:	1c66      	adds	r6, r4, #1
 801b6a6:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801b6aa:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801b6ae:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801b6b2:	ea46 0e0e 	orr.w	lr, r6, lr
 801b6b6:	f10c 0601 	add.w	r6, ip, #1
 801b6ba:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801b6be:	0976      	lsrs	r6, r6, #5
 801b6c0:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801b6c4:	ea4e 0e06 	orr.w	lr, lr, r6
 801b6c8:	f825 e002 	strh.w	lr, [r5, r2]
 801b6cc:	e7b3      	b.n	801b636 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801b6ce:	f04f 0800 	mov.w	r8, #0
 801b6d2:	eba3 0208 	sub.w	r2, r3, r8
 801b6d6:	2a00      	cmp	r2, #0
 801b6d8:	f77f af3e 	ble.w	801b558 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801b6dc:	1404      	asrs	r4, r0, #16
 801b6de:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 801b6e2:	140a      	asrs	r2, r1, #16
 801b6e4:	fb06 4202 	mla	r2, r6, r2, r4
 801b6e8:	9c01      	ldr	r4, [sp, #4]
 801b6ea:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 801b6ee:	0e22      	lsrs	r2, r4, #24
 801b6f0:	d015      	beq.n	801b71e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801b6f2:	9e04      	ldr	r6, [sp, #16]
 801b6f4:	4372      	muls	r2, r6
 801b6f6:	1c56      	adds	r6, r2, #1
 801b6f8:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801b6fc:	0a26      	lsrs	r6, r4, #8
 801b6fe:	1212      	asrs	r2, r2, #8
 801b700:	2aff      	cmp	r2, #255	; 0xff
 801b702:	d113      	bne.n	801b72c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 801b704:	0962      	lsrs	r2, r4, #5
 801b706:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801b70a:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801b70e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801b712:	f026 0607 	bic.w	r6, r6, #7
 801b716:	4316      	orrs	r6, r2
 801b718:	4326      	orrs	r6, r4
 801b71a:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 801b71e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b720:	f108 0801 	add.w	r8, r8, #1
 801b724:	4410      	add	r0, r2
 801b726:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b728:	4411      	add	r1, r2
 801b72a:	e7d2      	b.n	801b6d2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801b72c:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 801b730:	fa1f fa82 	uxth.w	sl, r2
 801b734:	f3c4 4707 	ubfx	r7, r4, #16, #8
 801b738:	43d2      	mvns	r2, r2
 801b73a:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801b73e:	fb17 f70a 	smulbb	r7, r7, sl
 801b742:	b2d2      	uxtb	r2, r2
 801b744:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b748:	b2e4      	uxtb	r4, r4
 801b74a:	b2f6      	uxtb	r6, r6
 801b74c:	fb0c 7c02 	mla	ip, ip, r2, r7
 801b750:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801b754:	fb14 f40a 	smulbb	r4, r4, sl
 801b758:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801b75c:	fa1f fc8c 	uxth.w	ip, ip
 801b760:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801b764:	fb16 f60a 	smulbb	r6, r6, sl
 801b768:	fa5f fe8e 	uxtb.w	lr, lr
 801b76c:	fb0e 4402 	mla	r4, lr, r2, r4
 801b770:	fb07 6702 	mla	r7, r7, r2, r6
 801b774:	f10c 0201 	add.w	r2, ip, #1
 801b778:	b2a4      	uxth	r4, r4
 801b77a:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801b77e:	1c66      	adds	r6, r4, #1
 801b780:	b2bf      	uxth	r7, r7
 801b782:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801b786:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801b78a:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801b78e:	ea46 0c0c 	orr.w	ip, r6, ip
 801b792:	1c7e      	adds	r6, r7, #1
 801b794:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801b798:	0976      	lsrs	r6, r6, #5
 801b79a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801b79e:	ea4c 0c06 	orr.w	ip, ip, r6
 801b7a2:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 801b7a6:	e7ba      	b.n	801b71e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801b7a8:	b007      	add	sp, #28
 801b7aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801b7b0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b7b4:	b085      	sub	sp, #20
 801b7b6:	468b      	mov	fp, r1
 801b7b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b7bc:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801b7be:	9203      	str	r2, [sp, #12]
 801b7c0:	6841      	ldr	r1, [r0, #4]
 801b7c2:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801b7c6:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801b7ca:	fb01 2404 	mla	r4, r1, r4, r2
 801b7ce:	6802      	ldr	r2, [r0, #0]
 801b7d0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801b7d4:	f8d8 2000 	ldr.w	r2, [r8]
 801b7d8:	9201      	str	r2, [sp, #4]
 801b7da:	f1bb 0f00 	cmp.w	fp, #0
 801b7de:	dc03      	bgt.n	801b7e8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801b7e0:	9a03      	ldr	r2, [sp, #12]
 801b7e2:	2a00      	cmp	r2, #0
 801b7e4:	f340 814f 	ble.w	801ba86 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801b7e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b7ea:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801b7ee:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801b7f2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b7f4:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801b7f8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b7fc:	2b00      	cmp	r3, #0
 801b7fe:	dd0e      	ble.n	801b81e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801b800:	1408      	asrs	r0, r1, #16
 801b802:	d405      	bmi.n	801b810 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801b804:	42b8      	cmp	r0, r7
 801b806:	da03      	bge.n	801b810 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801b808:	1410      	asrs	r0, r2, #16
 801b80a:	d401      	bmi.n	801b810 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801b80c:	42b0      	cmp	r0, r6
 801b80e:	db07      	blt.n	801b820 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b810:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b812:	3b01      	subs	r3, #1
 801b814:	3402      	adds	r4, #2
 801b816:	4401      	add	r1, r0
 801b818:	9812      	ldr	r0, [sp, #72]	; 0x48
 801b81a:	4402      	add	r2, r0
 801b81c:	e7ee      	b.n	801b7fc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801b81e:	d017      	beq.n	801b850 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801b820:	1e58      	subs	r0, r3, #1
 801b822:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801b824:	fb05 1500 	mla	r5, r5, r0, r1
 801b828:	142d      	asrs	r5, r5, #16
 801b82a:	d409      	bmi.n	801b840 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801b82c:	42bd      	cmp	r5, r7
 801b82e:	da07      	bge.n	801b840 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801b830:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801b832:	fb05 2000 	mla	r0, r5, r0, r2
 801b836:	1400      	asrs	r0, r0, #16
 801b838:	d402      	bmi.n	801b840 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801b83a:	42b0      	cmp	r0, r6
 801b83c:	f2c0 80ba 	blt.w	801b9b4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801b840:	2600      	movs	r6, #0
 801b842:	1998      	adds	r0, r3, r6
 801b844:	2800      	cmp	r0, #0
 801b846:	dc3e      	bgt.n	801b8c6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801b848:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b84c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b850:	f1bb 0f00 	cmp.w	fp, #0
 801b854:	f340 8117 	ble.w	801ba86 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801b858:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b85c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b85e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b862:	f1bb 0b01 	subs.w	fp, fp, #1
 801b866:	eeb0 6a62 	vmov.f32	s12, s5
 801b86a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b86e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b872:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b876:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801b87a:	eeb0 6a43 	vmov.f32	s12, s6
 801b87e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b882:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801b886:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b88a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b88e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b892:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b896:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b89a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b89e:	ee12 2a90 	vmov	r2, s5
 801b8a2:	eef0 2a47 	vmov.f32	s5, s14
 801b8a6:	fb92 f3f3 	sdiv	r3, r2, r3
 801b8aa:	ee13 2a10 	vmov	r2, s6
 801b8ae:	9311      	str	r3, [sp, #68]	; 0x44
 801b8b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b8b2:	eeb0 3a67 	vmov.f32	s6, s15
 801b8b6:	fb92 f3f3 	sdiv	r3, r2, r3
 801b8ba:	9a03      	ldr	r2, [sp, #12]
 801b8bc:	9312      	str	r3, [sp, #72]	; 0x48
 801b8be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b8c0:	bf08      	it	eq
 801b8c2:	4613      	moveq	r3, r2
 801b8c4:	e789      	b.n	801b7da <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801b8c6:	140f      	asrs	r7, r1, #16
 801b8c8:	d424      	bmi.n	801b914 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801b8ca:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801b8ce:	42bd      	cmp	r5, r7
 801b8d0:	dd20      	ble.n	801b914 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801b8d2:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801b8d6:	d41d      	bmi.n	801b914 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801b8d8:	f8d8 000c 	ldr.w	r0, [r8, #12]
 801b8dc:	4560      	cmp	r0, ip
 801b8de:	dd19      	ble.n	801b914 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801b8e0:	b22d      	sxth	r5, r5
 801b8e2:	9801      	ldr	r0, [sp, #4]
 801b8e4:	fb0c 7505 	mla	r5, ip, r5, r7
 801b8e8:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801b8ec:	0e07      	lsrs	r7, r0, #24
 801b8ee:	2fff      	cmp	r7, #255	; 0xff
 801b8f0:	d116      	bne.n	801b920 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801b8f2:	f06f 0501 	mvn.w	r5, #1
 801b8f6:	fb05 f706 	mul.w	r7, r5, r6
 801b8fa:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801b8fe:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801b902:	0945      	lsrs	r5, r0, #5
 801b904:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801b908:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801b90c:	ea4c 0505 	orr.w	r5, ip, r5
 801b910:	4305      	orrs	r5, r0
 801b912:	53e5      	strh	r5, [r4, r7]
 801b914:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b916:	3e01      	subs	r6, #1
 801b918:	4401      	add	r1, r0
 801b91a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801b91c:	4402      	add	r2, r0
 801b91e:	e790      	b.n	801b842 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801b920:	b2fd      	uxtb	r5, r7
 801b922:	2f00      	cmp	r7, #0
 801b924:	d0f6      	beq.n	801b914 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801b926:	f06f 0701 	mvn.w	r7, #1
 801b92a:	fa1f f985 	uxth.w	r9, r5
 801b92e:	43ed      	mvns	r5, r5
 801b930:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801b934:	4377      	muls	r7, r6
 801b936:	fb1a fa09 	smulbb	sl, sl, r9
 801b93a:	b2ed      	uxtb	r5, r5
 801b93c:	f834 e007 	ldrh.w	lr, [r4, r7]
 801b940:	9702      	str	r7, [sp, #8]
 801b942:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801b946:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801b94a:	fb17 f709 	smulbb	r7, r7, r9
 801b94e:	b2c0      	uxtb	r0, r0
 801b950:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b954:	fb10 f009 	smulbb	r0, r0, r9
 801b958:	fb0c 7c05 	mla	ip, ip, r5, r7
 801b95c:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801b960:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801b964:	fa1f fc8c 	uxth.w	ip, ip
 801b968:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801b96c:	fa5f fe8e 	uxtb.w	lr, lr
 801b970:	fb07 a705 	mla	r7, r7, r5, sl
 801b974:	fb0e 0005 	mla	r0, lr, r5, r0
 801b978:	f10c 0501 	add.w	r5, ip, #1
 801b97c:	b2bf      	uxth	r7, r7
 801b97e:	b280      	uxth	r0, r0
 801b980:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801b984:	f100 0a01 	add.w	sl, r0, #1
 801b988:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801b98c:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801b990:	9802      	ldr	r0, [sp, #8]
 801b992:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801b996:	ea4a 0c0c 	orr.w	ip, sl, ip
 801b99a:	f107 0a01 	add.w	sl, r7, #1
 801b99e:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801b9a2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b9a6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801b9aa:	ea4c 0c0a 	orr.w	ip, ip, sl
 801b9ae:	f824 c000 	strh.w	ip, [r4, r0]
 801b9b2:	e7af      	b.n	801b914 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801b9b4:	f04f 0e00 	mov.w	lr, #0
 801b9b8:	eba3 000e 	sub.w	r0, r3, lr
 801b9bc:	2800      	cmp	r0, #0
 801b9be:	f77f af43 	ble.w	801b848 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801b9c2:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801b9c6:	140d      	asrs	r5, r1, #16
 801b9c8:	1410      	asrs	r0, r2, #16
 801b9ca:	fb06 5000 	mla	r0, r6, r0, r5
 801b9ce:	9d01      	ldr	r5, [sp, #4]
 801b9d0:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801b9d4:	0e2e      	lsrs	r6, r5, #24
 801b9d6:	2eff      	cmp	r6, #255	; 0xff
 801b9d8:	d112      	bne.n	801ba00 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801b9da:	482c      	ldr	r0, [pc, #176]	; (801ba8c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 801b9dc:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801b9e0:	0968      	lsrs	r0, r5, #5
 801b9e2:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801b9e6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801b9ea:	4330      	orrs	r0, r6
 801b9ec:	4328      	orrs	r0, r5
 801b9ee:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 801b9f2:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b9f4:	f10e 0e01 	add.w	lr, lr, #1
 801b9f8:	4401      	add	r1, r0
 801b9fa:	9812      	ldr	r0, [sp, #72]	; 0x48
 801b9fc:	4402      	add	r2, r0
 801b9fe:	e7db      	b.n	801b9b8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801ba00:	b2f0      	uxtb	r0, r6
 801ba02:	2e00      	cmp	r6, #0
 801ba04:	d0f5      	beq.n	801b9f2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801ba06:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801ba0a:	fa1f f980 	uxth.w	r9, r0
 801ba0e:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801ba12:	43c0      	mvns	r0, r0
 801ba14:	ea4f 272c 	mov.w	r7, ip, asr #8
 801ba18:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801ba1c:	fb16 f609 	smulbb	r6, r6, r9
 801ba20:	b2c0      	uxtb	r0, r0
 801ba22:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ba26:	b2ed      	uxtb	r5, r5
 801ba28:	fb1a fa09 	smulbb	sl, sl, r9
 801ba2c:	fb07 6700 	mla	r7, r7, r0, r6
 801ba30:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801ba34:	fb15 f509 	smulbb	r5, r5, r9
 801ba38:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801ba3c:	b2bf      	uxth	r7, r7
 801ba3e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801ba42:	fa5f fc8c 	uxtb.w	ip, ip
 801ba46:	fb06 a600 	mla	r6, r6, r0, sl
 801ba4a:	fb0c 5500 	mla	r5, ip, r0, r5
 801ba4e:	1c78      	adds	r0, r7, #1
 801ba50:	b2b6      	uxth	r6, r6
 801ba52:	b2ad      	uxth	r5, r5
 801ba54:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801ba58:	f105 0a01 	add.w	sl, r5, #1
 801ba5c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801ba60:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801ba64:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ba68:	ea4a 0707 	orr.w	r7, sl, r7
 801ba6c:	f106 0a01 	add.w	sl, r6, #1
 801ba70:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801ba74:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ba78:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801ba7c:	ea47 070a 	orr.w	r7, r7, sl
 801ba80:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 801ba84:	e7b5      	b.n	801b9f2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801ba86:	b005      	add	sp, #20
 801ba88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba8c:	fffff800 	.word	0xfffff800

0801ba90 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ba90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba94:	b087      	sub	sp, #28
 801ba96:	468b      	mov	fp, r1
 801ba98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ba9c:	9815      	ldr	r0, [sp, #84]	; 0x54
 801ba9e:	9203      	str	r2, [sp, #12]
 801baa0:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801baa4:	6841      	ldr	r1, [r0, #4]
 801baa6:	9204      	str	r2, [sp, #16]
 801baa8:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801baac:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801bab0:	fb01 2404 	mla	r4, r1, r4, r2
 801bab4:	6802      	ldr	r2, [r0, #0]
 801bab6:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801baba:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801babe:	3201      	adds	r2, #1
 801bac0:	f022 0201 	bic.w	r2, r2, #1
 801bac4:	9200      	str	r2, [sp, #0]
 801bac6:	f8d9 2000 	ldr.w	r2, [r9]
 801baca:	9201      	str	r2, [sp, #4]
 801bacc:	f1bb 0f00 	cmp.w	fp, #0
 801bad0:	dc03      	bgt.n	801bada <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801bad2:	9a03      	ldr	r2, [sp, #12]
 801bad4:	2a00      	cmp	r2, #0
 801bad6:	f340 816a 	ble.w	801bdae <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801bada:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801badc:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801bae0:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801bae4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801bae6:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801baea:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801baee:	2b00      	cmp	r3, #0
 801baf0:	dd0e      	ble.n	801bb10 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801baf2:	1402      	asrs	r2, r0, #16
 801baf4:	d405      	bmi.n	801bb02 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801baf6:	42ba      	cmp	r2, r7
 801baf8:	da03      	bge.n	801bb02 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801bafa:	140a      	asrs	r2, r1, #16
 801bafc:	d401      	bmi.n	801bb02 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801bafe:	42b2      	cmp	r2, r6
 801bb00:	db07      	blt.n	801bb12 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801bb02:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bb04:	3b01      	subs	r3, #1
 801bb06:	3402      	adds	r4, #2
 801bb08:	4410      	add	r0, r2
 801bb0a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bb0c:	4411      	add	r1, r2
 801bb0e:	e7ee      	b.n	801baee <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801bb10:	d017      	beq.n	801bb42 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801bb12:	1e5a      	subs	r2, r3, #1
 801bb14:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801bb16:	fb05 0502 	mla	r5, r5, r2, r0
 801bb1a:	142d      	asrs	r5, r5, #16
 801bb1c:	d409      	bmi.n	801bb32 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801bb1e:	42bd      	cmp	r5, r7
 801bb20:	da07      	bge.n	801bb32 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801bb22:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801bb24:	fb05 1202 	mla	r2, r5, r2, r1
 801bb28:	1412      	asrs	r2, r2, #16
 801bb2a:	d402      	bmi.n	801bb32 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801bb2c:	42b2      	cmp	r2, r6
 801bb2e:	f2c0 80c8 	blt.w	801bcc2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801bb32:	2700      	movs	r7, #0
 801bb34:	19da      	adds	r2, r3, r7
 801bb36:	2a00      	cmp	r2, #0
 801bb38:	dc3e      	bgt.n	801bbb8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801bb3a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bb3e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801bb42:	f1bb 0f00 	cmp.w	fp, #0
 801bb46:	f340 8132 	ble.w	801bdae <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801bb4a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bb4e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bb50:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bb54:	f1bb 0b01 	subs.w	fp, fp, #1
 801bb58:	eeb0 6a62 	vmov.f32	s12, s5
 801bb5c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801bb60:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bb64:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bb68:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801bb6c:	eeb0 6a43 	vmov.f32	s12, s6
 801bb70:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bb74:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801bb78:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bb7c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bb80:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bb84:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bb88:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bb8c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bb90:	ee12 2a90 	vmov	r2, s5
 801bb94:	eef0 2a47 	vmov.f32	s5, s14
 801bb98:	fb92 f3f3 	sdiv	r3, r2, r3
 801bb9c:	ee13 2a10 	vmov	r2, s6
 801bba0:	9313      	str	r3, [sp, #76]	; 0x4c
 801bba2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bba4:	eeb0 3a67 	vmov.f32	s6, s15
 801bba8:	fb92 f3f3 	sdiv	r3, r2, r3
 801bbac:	9a03      	ldr	r2, [sp, #12]
 801bbae:	9314      	str	r3, [sp, #80]	; 0x50
 801bbb0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bbb2:	bf08      	it	eq
 801bbb4:	4613      	moveq	r3, r2
 801bbb6:	e789      	b.n	801bacc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801bbb8:	1405      	asrs	r5, r0, #16
 801bbba:	d436      	bmi.n	801bc2a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801bbbc:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801bbc0:	42aa      	cmp	r2, r5
 801bbc2:	dd32      	ble.n	801bc2a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801bbc4:	140e      	asrs	r6, r1, #16
 801bbc6:	d430      	bmi.n	801bc2a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801bbc8:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801bbcc:	42b2      	cmp	r2, r6
 801bbce:	dd2c      	ble.n	801bc2a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801bbd0:	9a00      	ldr	r2, [sp, #0]
 801bbd2:	fb06 5502 	mla	r5, r6, r2, r5
 801bbd6:	9e01      	ldr	r6, [sp, #4]
 801bbd8:	086a      	lsrs	r2, r5, #1
 801bbda:	5cb2      	ldrb	r2, [r6, r2]
 801bbdc:	07ee      	lsls	r6, r5, #31
 801bbde:	bf54      	ite	pl
 801bbe0:	f002 020f 	andpl.w	r2, r2, #15
 801bbe4:	1112      	asrmi	r2, r2, #4
 801bbe6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801bbea:	b2d2      	uxtb	r2, r2
 801bbec:	b1ea      	cbz	r2, 801bc2a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801bbee:	9d04      	ldr	r5, [sp, #16]
 801bbf0:	436a      	muls	r2, r5
 801bbf2:	1c55      	adds	r5, r2, #1
 801bbf4:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801bbf8:	4d6e      	ldr	r5, [pc, #440]	; (801bdb4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801bbfa:	1212      	asrs	r2, r2, #8
 801bbfc:	682d      	ldr	r5, [r5, #0]
 801bbfe:	2aff      	cmp	r2, #255	; 0xff
 801bc00:	ea4f 2615 	mov.w	r6, r5, lsr #8
 801bc04:	9605      	str	r6, [sp, #20]
 801bc06:	d116      	bne.n	801bc36 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801bc08:	f06f 0201 	mvn.w	r2, #1
 801bc0c:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801bc10:	fb02 fc07 	mul.w	ip, r2, r7
 801bc14:	096a      	lsrs	r2, r5, #5
 801bc16:	f026 0607 	bic.w	r6, r6, #7
 801bc1a:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801bc1e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801bc22:	4316      	orrs	r6, r2
 801bc24:	432e      	orrs	r6, r5
 801bc26:	f824 600c 	strh.w	r6, [r4, ip]
 801bc2a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bc2c:	3f01      	subs	r7, #1
 801bc2e:	4410      	add	r0, r2
 801bc30:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bc32:	4411      	add	r1, r2
 801bc34:	e77e      	b.n	801bb34 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801bc36:	f06f 0601 	mvn.w	r6, #1
 801bc3a:	fa1f fa82 	uxth.w	sl, r2
 801bc3e:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 801bc42:	43d2      	mvns	r2, r2
 801bc44:	437e      	muls	r6, r7
 801bc46:	b2ed      	uxtb	r5, r5
 801bc48:	fb1c fc0a 	smulbb	ip, ip, sl
 801bc4c:	b2d2      	uxtb	r2, r2
 801bc4e:	f834 8006 	ldrh.w	r8, [r4, r6]
 801bc52:	fb15 f50a 	smulbb	r5, r5, sl
 801bc56:	9602      	str	r6, [sp, #8]
 801bc58:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801bc5c:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801bc60:	fb16 f60a 	smulbb	r6, r6, sl
 801bc64:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801bc68:	fb0e ce02 	mla	lr, lr, r2, ip
 801bc6c:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801bc70:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801bc74:	fa1f fe8e 	uxth.w	lr, lr
 801bc78:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801bc7c:	fa5f f888 	uxtb.w	r8, r8
 801bc80:	fb0c 6c02 	mla	ip, ip, r2, r6
 801bc84:	fb08 5502 	mla	r5, r8, r2, r5
 801bc88:	f10e 0201 	add.w	r2, lr, #1
 801bc8c:	fa1f fc8c 	uxth.w	ip, ip
 801bc90:	b2ad      	uxth	r5, r5
 801bc92:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801bc96:	9a02      	ldr	r2, [sp, #8]
 801bc98:	1c6e      	adds	r6, r5, #1
 801bc9a:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801bc9e:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 801bca2:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801bca6:	ea46 0e0e 	orr.w	lr, r6, lr
 801bcaa:	f10c 0601 	add.w	r6, ip, #1
 801bcae:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801bcb2:	0976      	lsrs	r6, r6, #5
 801bcb4:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801bcb8:	ea4e 0e06 	orr.w	lr, lr, r6
 801bcbc:	f824 e002 	strh.w	lr, [r4, r2]
 801bcc0:	e7b3      	b.n	801bc2a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801bcc2:	f04f 0800 	mov.w	r8, #0
 801bcc6:	eba3 0208 	sub.w	r2, r3, r8
 801bcca:	2a00      	cmp	r2, #0
 801bccc:	f77f af35 	ble.w	801bb3a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801bcd0:	1402      	asrs	r2, r0, #16
 801bcd2:	9e00      	ldr	r6, [sp, #0]
 801bcd4:	140d      	asrs	r5, r1, #16
 801bcd6:	fb06 2505 	mla	r5, r6, r5, r2
 801bcda:	9e01      	ldr	r6, [sp, #4]
 801bcdc:	086a      	lsrs	r2, r5, #1
 801bcde:	07ed      	lsls	r5, r5, #31
 801bce0:	5cb2      	ldrb	r2, [r6, r2]
 801bce2:	bf54      	ite	pl
 801bce4:	f002 020f 	andpl.w	r2, r2, #15
 801bce8:	1112      	asrmi	r2, r2, #4
 801bcea:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801bcee:	b2d2      	uxtb	r2, r2
 801bcf0:	b1c2      	cbz	r2, 801bd24 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801bcf2:	9d04      	ldr	r5, [sp, #16]
 801bcf4:	436a      	muls	r2, r5
 801bcf6:	1c55      	adds	r5, r2, #1
 801bcf8:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801bcfc:	4d2d      	ldr	r5, [pc, #180]	; (801bdb4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801bcfe:	1212      	asrs	r2, r2, #8
 801bd00:	682e      	ldr	r6, [r5, #0]
 801bd02:	2aff      	cmp	r2, #255	; 0xff
 801bd04:	ea4f 2516 	mov.w	r5, r6, lsr #8
 801bd08:	d113      	bne.n	801bd32 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801bd0a:	0972      	lsrs	r2, r6, #5
 801bd0c:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 801bd10:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801bd14:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801bd18:	f025 0507 	bic.w	r5, r5, #7
 801bd1c:	4315      	orrs	r5, r2
 801bd1e:	4335      	orrs	r5, r6
 801bd20:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 801bd24:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bd26:	f108 0801 	add.w	r8, r8, #1
 801bd2a:	4410      	add	r0, r2
 801bd2c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bd2e:	4411      	add	r1, r2
 801bd30:	e7c9      	b.n	801bcc6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801bd32:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801bd36:	fa1f fa82 	uxth.w	sl, r2
 801bd3a:	f3c6 4707 	ubfx	r7, r6, #16, #8
 801bd3e:	43d2      	mvns	r2, r2
 801bd40:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801bd44:	fb17 f70a 	smulbb	r7, r7, sl
 801bd48:	b2d2      	uxtb	r2, r2
 801bd4a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801bd4e:	b2f6      	uxtb	r6, r6
 801bd50:	b2ed      	uxtb	r5, r5
 801bd52:	fb0c 7c02 	mla	ip, ip, r2, r7
 801bd56:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801bd5a:	fb16 f60a 	smulbb	r6, r6, sl
 801bd5e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801bd62:	fa1f fc8c 	uxth.w	ip, ip
 801bd66:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801bd6a:	fb15 f50a 	smulbb	r5, r5, sl
 801bd6e:	fa5f fe8e 	uxtb.w	lr, lr
 801bd72:	fb0e 6602 	mla	r6, lr, r2, r6
 801bd76:	fb07 5702 	mla	r7, r7, r2, r5
 801bd7a:	f10c 0201 	add.w	r2, ip, #1
 801bd7e:	b2b6      	uxth	r6, r6
 801bd80:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801bd84:	1c75      	adds	r5, r6, #1
 801bd86:	b2bf      	uxth	r7, r7
 801bd88:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801bd8c:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 801bd90:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801bd94:	ea45 0c0c 	orr.w	ip, r5, ip
 801bd98:	1c7d      	adds	r5, r7, #1
 801bd9a:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 801bd9e:	096d      	lsrs	r5, r5, #5
 801bda0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801bda4:	ea4c 0c05 	orr.w	ip, ip, r5
 801bda8:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 801bdac:	e7ba      	b.n	801bd24 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801bdae:	b007      	add	sp, #28
 801bdb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bdb4:	20027bd4 	.word	0x20027bd4

0801bdb8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bdb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bdbc:	b087      	sub	sp, #28
 801bdbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bdc2:	f8df 8308 	ldr.w	r8, [pc, #776]	; 801c0cc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 801bdc6:	9815      	ldr	r0, [sp, #84]	; 0x54
 801bdc8:	9101      	str	r1, [sp, #4]
 801bdca:	9205      	str	r2, [sp, #20]
 801bdcc:	6841      	ldr	r1, [r0, #4]
 801bdce:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 801bdd2:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801bdd6:	fb01 2404 	mla	r4, r1, r4, r2
 801bdda:	6802      	ldr	r2, [r0, #0]
 801bddc:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801bde0:	f8db 2008 	ldr.w	r2, [fp, #8]
 801bde4:	3201      	adds	r2, #1
 801bde6:	f022 0201 	bic.w	r2, r2, #1
 801bdea:	9202      	str	r2, [sp, #8]
 801bdec:	f8db 2000 	ldr.w	r2, [fp]
 801bdf0:	9203      	str	r2, [sp, #12]
 801bdf2:	9a01      	ldr	r2, [sp, #4]
 801bdf4:	2a00      	cmp	r2, #0
 801bdf6:	dc03      	bgt.n	801be00 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801bdf8:	9a05      	ldr	r2, [sp, #20]
 801bdfa:	2a00      	cmp	r2, #0
 801bdfc:	f340 8162 	ble.w	801c0c4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801be00:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801be02:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 801be06:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801be0a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801be0c:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 801be10:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801be14:	2b00      	cmp	r3, #0
 801be16:	dd0e      	ble.n	801be36 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801be18:	1402      	asrs	r2, r0, #16
 801be1a:	d405      	bmi.n	801be28 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801be1c:	42ba      	cmp	r2, r7
 801be1e:	da03      	bge.n	801be28 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801be20:	140a      	asrs	r2, r1, #16
 801be22:	d401      	bmi.n	801be28 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801be24:	42b2      	cmp	r2, r6
 801be26:	db07      	blt.n	801be38 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801be28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801be2a:	3b01      	subs	r3, #1
 801be2c:	3402      	adds	r4, #2
 801be2e:	4410      	add	r0, r2
 801be30:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801be32:	4411      	add	r1, r2
 801be34:	e7ee      	b.n	801be14 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801be36:	d017      	beq.n	801be68 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801be38:	1e5a      	subs	r2, r3, #1
 801be3a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801be3c:	fb05 0502 	mla	r5, r5, r2, r0
 801be40:	142d      	asrs	r5, r5, #16
 801be42:	d409      	bmi.n	801be58 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801be44:	42bd      	cmp	r5, r7
 801be46:	da07      	bge.n	801be58 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801be48:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801be4a:	fb05 1202 	mla	r2, r5, r2, r1
 801be4e:	1412      	asrs	r2, r2, #16
 801be50:	d402      	bmi.n	801be58 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801be52:	42b2      	cmp	r2, r6
 801be54:	f2c0 80c3 	blt.w	801bfde <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 801be58:	2500      	movs	r5, #0
 801be5a:	195a      	adds	r2, r3, r5
 801be5c:	2a00      	cmp	r2, #0
 801be5e:	dc3f      	bgt.n	801bee0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801be60:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801be64:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801be68:	9b01      	ldr	r3, [sp, #4]
 801be6a:	2b00      	cmp	r3, #0
 801be6c:	f340 812a 	ble.w	801c0c4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801be70:	ee30 0a04 	vadd.f32	s0, s0, s8
 801be74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801be76:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801be7a:	eeb0 6a62 	vmov.f32	s12, s5
 801be7e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801be82:	ee31 1a05 	vadd.f32	s2, s2, s10
 801be86:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801be8a:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801be8e:	eeb0 6a43 	vmov.f32	s12, s6
 801be92:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801be96:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801be9a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801be9e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bea2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bea6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801beaa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801beae:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801beb2:	ee12 2a90 	vmov	r2, s5
 801beb6:	eef0 2a47 	vmov.f32	s5, s14
 801beba:	fb92 f3f3 	sdiv	r3, r2, r3
 801bebe:	ee13 2a10 	vmov	r2, s6
 801bec2:	9313      	str	r3, [sp, #76]	; 0x4c
 801bec4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bec6:	eeb0 3a67 	vmov.f32	s6, s15
 801beca:	fb92 f3f3 	sdiv	r3, r2, r3
 801bece:	9314      	str	r3, [sp, #80]	; 0x50
 801bed0:	9b01      	ldr	r3, [sp, #4]
 801bed2:	9a05      	ldr	r2, [sp, #20]
 801bed4:	3b01      	subs	r3, #1
 801bed6:	9301      	str	r3, [sp, #4]
 801bed8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801beda:	bf08      	it	eq
 801bedc:	4613      	moveq	r3, r2
 801bede:	e788      	b.n	801bdf2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801bee0:	1406      	asrs	r6, r0, #16
 801bee2:	d42c      	bmi.n	801bf3e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801bee4:	f8db 2008 	ldr.w	r2, [fp, #8]
 801bee8:	42b2      	cmp	r2, r6
 801beea:	dd28      	ble.n	801bf3e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801beec:	140f      	asrs	r7, r1, #16
 801beee:	d426      	bmi.n	801bf3e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801bef0:	f8db 200c 	ldr.w	r2, [fp, #12]
 801bef4:	42ba      	cmp	r2, r7
 801bef6:	dd22      	ble.n	801bf3e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801bef8:	9a02      	ldr	r2, [sp, #8]
 801befa:	fb07 6602 	mla	r6, r7, r2, r6
 801befe:	9f03      	ldr	r7, [sp, #12]
 801bf00:	0872      	lsrs	r2, r6, #1
 801bf02:	07f6      	lsls	r6, r6, #31
 801bf04:	5cba      	ldrb	r2, [r7, r2]
 801bf06:	bf54      	ite	pl
 801bf08:	f002 020f 	andpl.w	r2, r2, #15
 801bf0c:	1112      	asrmi	r2, r2, #4
 801bf0e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801bf12:	b2d2      	uxtb	r2, r2
 801bf14:	2aff      	cmp	r2, #255	; 0xff
 801bf16:	d118      	bne.n	801bf4a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801bf18:	f06f 0601 	mvn.w	r6, #1
 801bf1c:	f8d8 2000 	ldr.w	r2, [r8]
 801bf20:	fb06 f705 	mul.w	r7, r6, r5
 801bf24:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
 801bf28:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 801bf2c:	0956      	lsrs	r6, r2, #5
 801bf2e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801bf32:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801bf36:	ea4c 0606 	orr.w	r6, ip, r6
 801bf3a:	4316      	orrs	r6, r2
 801bf3c:	53e6      	strh	r6, [r4, r7]
 801bf3e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bf40:	3d01      	subs	r5, #1
 801bf42:	4410      	add	r0, r2
 801bf44:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bf46:	4411      	add	r1, r2
 801bf48:	e787      	b.n	801be5a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801bf4a:	2a00      	cmp	r2, #0
 801bf4c:	d0f7      	beq.n	801bf3e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801bf4e:	f06f 0601 	mvn.w	r6, #1
 801bf52:	f8d8 c000 	ldr.w	ip, [r8]
 801bf56:	fa1f f982 	uxth.w	r9, r2
 801bf5a:	43d2      	mvns	r2, r2
 801bf5c:	436e      	muls	r6, r5
 801bf5e:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 801bf62:	b2d2      	uxtb	r2, r2
 801bf64:	f834 e006 	ldrh.w	lr, [r4, r6]
 801bf68:	fb1a fa09 	smulbb	sl, sl, r9
 801bf6c:	9604      	str	r6, [sp, #16]
 801bf6e:	f3cc 4607 	ubfx	r6, ip, #16, #8
 801bf72:	ea4f 272e 	mov.w	r7, lr, asr #8
 801bf76:	fb16 f609 	smulbb	r6, r6, r9
 801bf7a:	fa5f fc8c 	uxtb.w	ip, ip
 801bf7e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801bf82:	fb1c fc09 	smulbb	ip, ip, r9
 801bf86:	fb07 6702 	mla	r7, r7, r2, r6
 801bf8a:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801bf8e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801bf92:	b2bf      	uxth	r7, r7
 801bf94:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801bf98:	fa5f fe8e 	uxtb.w	lr, lr
 801bf9c:	fb06 a602 	mla	r6, r6, r2, sl
 801bfa0:	fb0e cc02 	mla	ip, lr, r2, ip
 801bfa4:	1c7a      	adds	r2, r7, #1
 801bfa6:	b2b6      	uxth	r6, r6
 801bfa8:	fa1f fc8c 	uxth.w	ip, ip
 801bfac:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801bfb0:	9a04      	ldr	r2, [sp, #16]
 801bfb2:	f10c 0a01 	add.w	sl, ip, #1
 801bfb6:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801bfba:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801bfbe:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801bfc2:	ea4a 0707 	orr.w	r7, sl, r7
 801bfc6:	f106 0a01 	add.w	sl, r6, #1
 801bfca:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801bfce:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801bfd2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801bfd6:	ea47 070a 	orr.w	r7, r7, sl
 801bfda:	52a7      	strh	r7, [r4, r2]
 801bfdc:	e7af      	b.n	801bf3e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801bfde:	f04f 0e00 	mov.w	lr, #0
 801bfe2:	eba3 020e 	sub.w	r2, r3, lr
 801bfe6:	2a00      	cmp	r2, #0
 801bfe8:	f77f af3a 	ble.w	801be60 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801bfec:	1402      	asrs	r2, r0, #16
 801bfee:	9e02      	ldr	r6, [sp, #8]
 801bff0:	140d      	asrs	r5, r1, #16
 801bff2:	fb06 2505 	mla	r5, r6, r5, r2
 801bff6:	9e03      	ldr	r6, [sp, #12]
 801bff8:	086a      	lsrs	r2, r5, #1
 801bffa:	07ed      	lsls	r5, r5, #31
 801bffc:	5cb2      	ldrb	r2, [r6, r2]
 801bffe:	bf54      	ite	pl
 801c000:	f002 020f 	andpl.w	r2, r2, #15
 801c004:	1112      	asrmi	r2, r2, #4
 801c006:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801c00a:	b2d2      	uxtb	r2, r2
 801c00c:	2aff      	cmp	r2, #255	; 0xff
 801c00e:	d115      	bne.n	801c03c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801c010:	f8d8 5000 	ldr.w	r5, [r8]
 801c014:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
 801c018:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 801c01c:	096a      	lsrs	r2, r5, #5
 801c01e:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801c022:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801c026:	4332      	orrs	r2, r6
 801c028:	432a      	orrs	r2, r5
 801c02a:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 801c02e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c030:	f10e 0e01 	add.w	lr, lr, #1
 801c034:	4410      	add	r0, r2
 801c036:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c038:	4411      	add	r1, r2
 801c03a:	e7d2      	b.n	801bfe2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801c03c:	2a00      	cmp	r2, #0
 801c03e:	d0f6      	beq.n	801c02e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801c040:	f8d8 7000 	ldr.w	r7, [r8]
 801c044:	fa1f f982 	uxth.w	r9, r2
 801c048:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801c04c:	43d2      	mvns	r2, r2
 801c04e:	f3c7 4507 	ubfx	r5, r7, #16, #8
 801c052:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801c056:	ea4f 262c 	mov.w	r6, ip, asr #8
 801c05a:	fb15 f509 	smulbb	r5, r5, r9
 801c05e:	b2d2      	uxtb	r2, r2
 801c060:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801c064:	b2ff      	uxtb	r7, r7
 801c066:	fb1a fa09 	smulbb	sl, sl, r9
 801c06a:	fb06 5602 	mla	r6, r6, r2, r5
 801c06e:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801c072:	fb17 f709 	smulbb	r7, r7, r9
 801c076:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801c07a:	b2b6      	uxth	r6, r6
 801c07c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801c080:	fa5f fc8c 	uxtb.w	ip, ip
 801c084:	fb05 a502 	mla	r5, r5, r2, sl
 801c088:	fb0c 7702 	mla	r7, ip, r2, r7
 801c08c:	1c72      	adds	r2, r6, #1
 801c08e:	b2ad      	uxth	r5, r5
 801c090:	b2bf      	uxth	r7, r7
 801c092:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 801c096:	f107 0a01 	add.w	sl, r7, #1
 801c09a:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801c09e:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801c0a2:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801c0a6:	ea4a 0606 	orr.w	r6, sl, r6
 801c0aa:	f105 0a01 	add.w	sl, r5, #1
 801c0ae:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801c0b2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801c0b6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801c0ba:	ea46 060a 	orr.w	r6, r6, sl
 801c0be:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 801c0c2:	e7b4      	b.n	801c02e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801c0c4:	b007      	add	sp, #28
 801c0c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c0ca:	bf00      	nop
 801c0cc:	20027bd4 	.word	0x20027bd4

0801c0d0 <_ZN8touchgfx8LCD16bppD1Ev>:
 801c0d0:	4770      	bx	lr

0801c0d2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801c0d2:	4770      	bx	lr

0801c0d4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801c0d4:	4770      	bx	lr

0801c0d6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801c0d6:	4770      	bx	lr

0801c0d8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801c0d8:	4770      	bx	lr

0801c0da <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801c0da:	4770      	bx	lr

0801c0dc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801c0dc:	4770      	bx	lr

0801c0de <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801c0de:	4770      	bx	lr

0801c0e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801c0e0:	4770      	bx	lr

0801c0e2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801c0e2:	4770      	bx	lr

0801c0e4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801c0e4:	4770      	bx	lr

0801c0e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801c0e6:	4770      	bx	lr

0801c0e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801c0e8:	4770      	bx	lr

0801c0ea <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801c0ea:	4770      	bx	lr

0801c0ec <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801c0ec:	4770      	bx	lr

0801c0ee <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801c0ee:	4770      	bx	lr

0801c0f0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 801c0f0:	4770      	bx	lr

0801c0f2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801c0f2:	4770      	bx	lr

0801c0f4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801c0f4:	4770      	bx	lr

0801c0f6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801c0f6:	4770      	bx	lr

0801c0f8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801c0f8:	4770      	bx	lr

0801c0fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801c0fa:	4770      	bx	lr

0801c0fc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801c0fc:	4770      	bx	lr

0801c0fe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801c0fe:	4770      	bx	lr

0801c100 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801c100:	4770      	bx	lr

0801c102 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801c102:	4770      	bx	lr

0801c104 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801c104:	4770      	bx	lr

0801c106 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801c106:	4770      	bx	lr

0801c108 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801c108:	4770      	bx	lr

0801c10a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801c10a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c10e:	b088      	sub	sp, #32
 801c110:	4606      	mov	r6, r0
 801c112:	4688      	mov	r8, r1
 801c114:	4691      	mov	r9, r2
 801c116:	ac08      	add	r4, sp, #32
 801c118:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801c11c:	4620      	mov	r0, r4
 801c11e:	f7fd fc65 	bl	80199ec <_ZNK8touchgfx6Bitmap7getDataEv>
 801c122:	6833      	ldr	r3, [r6, #0]
 801c124:	4605      	mov	r5, r0
 801c126:	4620      	mov	r0, r4
 801c128:	699f      	ldr	r7, [r3, #24]
 801c12a:	f7fd fb73 	bl	8019814 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c12e:	4682      	mov	sl, r0
 801c130:	4620      	mov	r0, r4
 801c132:	f7fd fba3 	bl	801987c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801c136:	9500      	str	r5, [sp, #0]
 801c138:	464b      	mov	r3, r9
 801c13a:	4642      	mov	r2, r8
 801c13c:	4631      	mov	r1, r6
 801c13e:	e9cd a001 	strd	sl, r0, [sp, #4]
 801c142:	a806      	add	r0, sp, #24
 801c144:	47b8      	blx	r7
 801c146:	4628      	mov	r0, r5
 801c148:	b008      	add	sp, #32
 801c14a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801c150 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801c150:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c154:	2300      	movs	r3, #0
 801c156:	9300      	str	r3, [sp, #0]
 801c158:	4b3d      	ldr	r3, [pc, #244]	; (801c250 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 801c15a:	781b      	ldrb	r3, [r3, #0]
 801c15c:	2b00      	cmp	r3, #0
 801c15e:	d137      	bne.n	801c1d0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 801c160:	4a3c      	ldr	r2, [pc, #240]	; (801c254 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801c162:	f9b2 2000 	ldrsh.w	r2, [r2]
 801c166:	f8ad 2004 	strh.w	r2, [sp, #4]
 801c16a:	2b00      	cmp	r3, #0
 801c16c:	d132      	bne.n	801c1d4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 801c16e:	4b3a      	ldr	r3, [pc, #232]	; (801c258 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801c170:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c174:	ac02      	add	r4, sp, #8
 801c176:	6808      	ldr	r0, [r1, #0]
 801c178:	f8ad 3006 	strh.w	r3, [sp, #6]
 801c17c:	ab02      	add	r3, sp, #8
 801c17e:	6849      	ldr	r1, [r1, #4]
 801c180:	4d36      	ldr	r5, [pc, #216]	; (801c25c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 801c182:	c303      	stmia	r3!, {r0, r1}
 801c184:	4669      	mov	r1, sp
 801c186:	4620      	mov	r0, r4
 801c188:	f7f9 fec6 	bl	8015f18 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c18c:	4668      	mov	r0, sp
 801c18e:	f7f9 fe9b 	bl	8015ec8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c192:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801c196:	f8bd 2000 	ldrh.w	r2, [sp]
 801c19a:	462f      	mov	r7, r5
 801c19c:	6828      	ldr	r0, [r5, #0]
 801c19e:	4413      	add	r3, r2
 801c1a0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801c1a4:	f8ad 3008 	strh.w	r3, [sp, #8]
 801c1a8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801c1ac:	4413      	add	r3, r2
 801c1ae:	f8ad 300a 	strh.w	r3, [sp, #10]
 801c1b2:	6803      	ldr	r3, [r0, #0]
 801c1b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c1b6:	4798      	blx	r3
 801c1b8:	f010 0f01 	tst.w	r0, #1
 801c1bc:	d00c      	beq.n	801c1d8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 801c1be:	6828      	ldr	r0, [r5, #0]
 801c1c0:	6803      	ldr	r3, [r0, #0]
 801c1c2:	e894 0006 	ldmia.w	r4, {r1, r2}
 801c1c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c1c8:	4798      	blx	r3
 801c1ca:	b004      	add	sp, #16
 801c1cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c1d0:	4a21      	ldr	r2, [pc, #132]	; (801c258 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801c1d2:	e7c6      	b.n	801c162 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801c1d4:	4b1f      	ldr	r3, [pc, #124]	; (801c254 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801c1d6:	e7cb      	b.n	801c170 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801c1d8:	6838      	ldr	r0, [r7, #0]
 801c1da:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801c1de:	6803      	ldr	r3, [r0, #0]
 801c1e0:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 801c1e4:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801c1e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c1ea:	4798      	blx	r3
 801c1ec:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801c1f0:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801c1f4:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 801c1f8:	fb16 3602 	smlabb	r6, r6, r2, r3
 801c1fc:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801c200:	6838      	ldr	r0, [r7, #0]
 801c202:	6803      	ldr	r3, [r0, #0]
 801c204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c206:	4798      	blx	r3
 801c208:	4a12      	ldr	r2, [pc, #72]	; (801c254 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801c20a:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 801c20e:	8813      	ldrh	r3, [r2, #0]
 801c210:	4691      	mov	r9, r2
 801c212:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801c216:	435d      	muls	r5, r3
 801c218:	fb03 1404 	mla	r4, r3, r4, r1
 801c21c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801c220:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801c224:	6838      	ldr	r0, [r7, #0]
 801c226:	42ac      	cmp	r4, r5
 801c228:	6803      	ldr	r3, [r0, #0]
 801c22a:	d20e      	bcs.n	801c24a <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 801c22c:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 801c230:	4632      	mov	r2, r6
 801c232:	4643      	mov	r3, r8
 801c234:	4621      	mov	r1, r4
 801c236:	47d0      	blx	sl
 801c238:	f8b9 3000 	ldrh.w	r3, [r9]
 801c23c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c240:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801c244:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801c248:	e7ec      	b.n	801c224 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 801c24a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c24c:	4798      	blx	r3
 801c24e:	e7bc      	b.n	801c1ca <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801c250:	20027bbc 	.word	0x20027bbc
 801c254:	20027bbe 	.word	0x20027bbe
 801c258:	20027bc0 	.word	0x20027bc0
 801c25c:	20027bc4 	.word	0x20027bc4

0801c260 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801c260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c264:	b08b      	sub	sp, #44	; 0x2c
 801c266:	460f      	mov	r7, r1
 801c268:	4616      	mov	r6, r2
 801c26a:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 801c26e:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801c272:	f1bb 0f00 	cmp.w	fp, #0
 801c276:	d049      	beq.n	801c30c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801c278:	6810      	ldr	r0, [r2, #0]
 801c27a:	ad06      	add	r5, sp, #24
 801c27c:	6851      	ldr	r1, [r2, #4]
 801c27e:	c503      	stmia	r5!, {r0, r1}
 801c280:	6818      	ldr	r0, [r3, #0]
 801c282:	ad08      	add	r5, sp, #32
 801c284:	6859      	ldr	r1, [r3, #4]
 801c286:	c503      	stmia	r5!, {r0, r1}
 801c288:	a806      	add	r0, sp, #24
 801c28a:	f7f9 fe1d 	bl	8015ec8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c28e:	4631      	mov	r1, r6
 801c290:	a808      	add	r0, sp, #32
 801c292:	f7f9 fe41 	bl	8015f18 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c296:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801c29a:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801c29e:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801c2a2:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801c2a6:	fb16 2103 	smlabb	r1, r6, r3, r2
 801c2aa:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801c2ae:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 801c2b2:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801c2b6:	4f5f      	ldr	r7, [pc, #380]	; (801c434 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801c2b8:	440a      	add	r2, r1
 801c2ba:	6838      	ldr	r0, [r7, #0]
 801c2bc:	46b9      	mov	r9, r7
 801c2be:	f8ad 2020 	strh.w	r2, [sp, #32]
 801c2c2:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801c2c6:	4413      	add	r3, r2
 801c2c8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801c2cc:	6803      	ldr	r3, [r0, #0]
 801c2ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c2d0:	4798      	blx	r3
 801c2d2:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801c2d6:	d01c      	beq.n	801c312 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801c2d8:	f010 0f04 	tst.w	r0, #4
 801c2dc:	d01d      	beq.n	801c31a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801c2de:	f8d9 0000 	ldr.w	r0, [r9]
 801c2e2:	2700      	movs	r7, #0
 801c2e4:	b2ad      	uxth	r5, r5
 801c2e6:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801c2ea:	6801      	ldr	r1, [r0, #0]
 801c2ec:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801c2f0:	f8cd b00c 	str.w	fp, [sp, #12]
 801c2f4:	9501      	str	r5, [sp, #4]
 801c2f6:	e9cd 4704 	strd	r4, r7, [sp, #16]
 801c2fa:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801c2fe:	9402      	str	r4, [sp, #8]
 801c300:	fa1f f488 	uxth.w	r4, r8
 801c304:	9400      	str	r4, [sp, #0]
 801c306:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 801c308:	4631      	mov	r1, r6
 801c30a:	47a0      	blx	r4
 801c30c:	b00b      	add	sp, #44	; 0x2c
 801c30e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c312:	b914      	cbnz	r4, 801c31a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801c314:	f010 0f01 	tst.w	r0, #1
 801c318:	e7e0      	b.n	801c2dc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 801c31a:	f8d9 0000 	ldr.w	r0, [r9]
 801c31e:	ea4f 0748 	mov.w	r7, r8, lsl #1
 801c322:	6803      	ldr	r3, [r0, #0]
 801c324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c326:	4798      	blx	r3
 801c328:	4b43      	ldr	r3, [pc, #268]	; (801c438 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 801c32a:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801c32e:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801c332:	881a      	ldrh	r2, [r3, #0]
 801c334:	469a      	mov	sl, r3
 801c336:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801c33a:	fb05 f502 	mul.w	r5, r5, r2
 801c33e:	fb02 1404 	mla	r4, r2, r4, r1
 801c342:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801c346:	d059      	beq.n	801c3fc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 801c348:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 801c34c:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801c350:	fa1f f28b 	uxth.w	r2, fp
 801c354:	469e      	mov	lr, r3
 801c356:	fa1f f989 	uxth.w	r9, r9
 801c35a:	42ac      	cmp	r4, r5
 801c35c:	d264      	bcs.n	801c428 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801c35e:	eb04 0a07 	add.w	sl, r4, r7
 801c362:	4554      	cmp	r4, sl
 801c364:	d23d      	bcs.n	801c3e2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 801c366:	8821      	ldrh	r1, [r4, #0]
 801c368:	f836 3b02 	ldrh.w	r3, [r6], #2
 801c36c:	1208      	asrs	r0, r1, #8
 801c36e:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801c372:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801c376:	ea4f 0be1 	mov.w	fp, r1, asr #3
 801c37a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801c37e:	00c9      	lsls	r1, r1, #3
 801c380:	fb10 f009 	smulbb	r0, r0, r9
 801c384:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801c388:	b2c9      	uxtb	r1, r1
 801c38a:	fb0c 0c02 	mla	ip, ip, r2, r0
 801c38e:	10d8      	asrs	r0, r3, #3
 801c390:	fb1b fb09 	smulbb	fp, fp, r9
 801c394:	00db      	lsls	r3, r3, #3
 801c396:	fa1f fc8c 	uxth.w	ip, ip
 801c39a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801c39e:	fb11 f109 	smulbb	r1, r1, r9
 801c3a2:	b2db      	uxtb	r3, r3
 801c3a4:	fb00 b002 	mla	r0, r0, r2, fp
 801c3a8:	f10c 0b01 	add.w	fp, ip, #1
 801c3ac:	fb03 1302 	mla	r3, r3, r2, r1
 801c3b0:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c3b4:	b29b      	uxth	r3, r3
 801c3b6:	b280      	uxth	r0, r0
 801c3b8:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 801c3bc:	f103 0c01 	add.w	ip, r3, #1
 801c3c0:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801c3c4:	1c43      	adds	r3, r0, #1
 801c3c6:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801c3ca:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801c3ce:	0940      	lsrs	r0, r0, #5
 801c3d0:	ea4c 0c0b 	orr.w	ip, ip, fp
 801c3d4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801c3d8:	ea4c 0c00 	orr.w	ip, ip, r0
 801c3dc:	f824 cb02 	strh.w	ip, [r4], #2
 801c3e0:	e7bf      	b.n	801c362 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 801c3e2:	f8be 3000 	ldrh.w	r3, [lr]
 801c3e6:	eba3 0308 	sub.w	r3, r3, r8
 801c3ea:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c3ee:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801c3f2:	eba3 0308 	sub.w	r3, r3, r8
 801c3f6:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801c3fa:	e7ae      	b.n	801c35a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 801c3fc:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801c400:	f8d9 0000 	ldr.w	r0, [r9]
 801c404:	42ac      	cmp	r4, r5
 801c406:	6803      	ldr	r3, [r0, #0]
 801c408:	d20e      	bcs.n	801c428 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801c40a:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 801c40e:	4632      	mov	r2, r6
 801c410:	463b      	mov	r3, r7
 801c412:	4621      	mov	r1, r4
 801c414:	47c0      	blx	r8
 801c416:	f8ba 3000 	ldrh.w	r3, [sl]
 801c41a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c41e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801c422:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801c426:	e7eb      	b.n	801c400 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 801c428:	4b02      	ldr	r3, [pc, #8]	; (801c434 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801c42a:	6818      	ldr	r0, [r3, #0]
 801c42c:	6803      	ldr	r3, [r0, #0]
 801c42e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c430:	4798      	blx	r3
 801c432:	e76b      	b.n	801c30c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801c434:	20027bc4 	.word	0x20027bc4
 801c438:	20027bbe 	.word	0x20027bbe

0801c43c <_ZN8touchgfx8LCD16bppD0Ev>:
 801c43c:	b510      	push	{r4, lr}
 801c43e:	4604      	mov	r4, r0
 801c440:	2178      	movs	r1, #120	; 0x78
 801c442:	f009 fbb6 	bl	8025bb2 <_ZdlPvj>
 801c446:	4620      	mov	r0, r4
 801c448:	bd10      	pop	{r4, pc}

0801c44a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801c44a:	b510      	push	{r4, lr}
 801c44c:	4604      	mov	r4, r0
 801c44e:	2104      	movs	r1, #4
 801c450:	f009 fbaf 	bl	8025bb2 <_ZdlPvj>
 801c454:	4620      	mov	r0, r4
 801c456:	bd10      	pop	{r4, pc}

0801c458 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801c458:	b510      	push	{r4, lr}
 801c45a:	4604      	mov	r4, r0
 801c45c:	2104      	movs	r1, #4
 801c45e:	f009 fba8 	bl	8025bb2 <_ZdlPvj>
 801c462:	4620      	mov	r0, r4
 801c464:	bd10      	pop	{r4, pc}

0801c466 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801c466:	b510      	push	{r4, lr}
 801c468:	4604      	mov	r4, r0
 801c46a:	2104      	movs	r1, #4
 801c46c:	f009 fba1 	bl	8025bb2 <_ZdlPvj>
 801c470:	4620      	mov	r0, r4
 801c472:	bd10      	pop	{r4, pc}

0801c474 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801c474:	b510      	push	{r4, lr}
 801c476:	4604      	mov	r4, r0
 801c478:	2104      	movs	r1, #4
 801c47a:	f009 fb9a 	bl	8025bb2 <_ZdlPvj>
 801c47e:	4620      	mov	r0, r4
 801c480:	bd10      	pop	{r4, pc}

0801c482 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801c482:	b510      	push	{r4, lr}
 801c484:	4604      	mov	r4, r0
 801c486:	2104      	movs	r1, #4
 801c488:	f009 fb93 	bl	8025bb2 <_ZdlPvj>
 801c48c:	4620      	mov	r0, r4
 801c48e:	bd10      	pop	{r4, pc}

0801c490 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801c490:	b510      	push	{r4, lr}
 801c492:	4604      	mov	r4, r0
 801c494:	2104      	movs	r1, #4
 801c496:	f009 fb8c 	bl	8025bb2 <_ZdlPvj>
 801c49a:	4620      	mov	r0, r4
 801c49c:	bd10      	pop	{r4, pc}

0801c49e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801c49e:	b510      	push	{r4, lr}
 801c4a0:	4604      	mov	r4, r0
 801c4a2:	2104      	movs	r1, #4
 801c4a4:	f009 fb85 	bl	8025bb2 <_ZdlPvj>
 801c4a8:	4620      	mov	r0, r4
 801c4aa:	bd10      	pop	{r4, pc}

0801c4ac <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801c4ac:	b510      	push	{r4, lr}
 801c4ae:	4604      	mov	r4, r0
 801c4b0:	2104      	movs	r1, #4
 801c4b2:	f009 fb7e 	bl	8025bb2 <_ZdlPvj>
 801c4b6:	4620      	mov	r0, r4
 801c4b8:	bd10      	pop	{r4, pc}

0801c4ba <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801c4ba:	b510      	push	{r4, lr}
 801c4bc:	4604      	mov	r4, r0
 801c4be:	2104      	movs	r1, #4
 801c4c0:	f009 fb77 	bl	8025bb2 <_ZdlPvj>
 801c4c4:	4620      	mov	r0, r4
 801c4c6:	bd10      	pop	{r4, pc}

0801c4c8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801c4c8:	b510      	push	{r4, lr}
 801c4ca:	4604      	mov	r4, r0
 801c4cc:	2104      	movs	r1, #4
 801c4ce:	f009 fb70 	bl	8025bb2 <_ZdlPvj>
 801c4d2:	4620      	mov	r0, r4
 801c4d4:	bd10      	pop	{r4, pc}

0801c4d6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801c4d6:	b510      	push	{r4, lr}
 801c4d8:	4604      	mov	r4, r0
 801c4da:	2104      	movs	r1, #4
 801c4dc:	f009 fb69 	bl	8025bb2 <_ZdlPvj>
 801c4e0:	4620      	mov	r0, r4
 801c4e2:	bd10      	pop	{r4, pc}

0801c4e4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801c4e4:	b510      	push	{r4, lr}
 801c4e6:	4604      	mov	r4, r0
 801c4e8:	2104      	movs	r1, #4
 801c4ea:	f009 fb62 	bl	8025bb2 <_ZdlPvj>
 801c4ee:	4620      	mov	r0, r4
 801c4f0:	bd10      	pop	{r4, pc}

0801c4f2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801c4f2:	b510      	push	{r4, lr}
 801c4f4:	4604      	mov	r4, r0
 801c4f6:	2104      	movs	r1, #4
 801c4f8:	f009 fb5b 	bl	8025bb2 <_ZdlPvj>
 801c4fc:	4620      	mov	r0, r4
 801c4fe:	bd10      	pop	{r4, pc}

0801c500 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801c500:	b510      	push	{r4, lr}
 801c502:	4604      	mov	r4, r0
 801c504:	2104      	movs	r1, #4
 801c506:	f009 fb54 	bl	8025bb2 <_ZdlPvj>
 801c50a:	4620      	mov	r0, r4
 801c50c:	bd10      	pop	{r4, pc}

0801c50e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801c50e:	b510      	push	{r4, lr}
 801c510:	4604      	mov	r4, r0
 801c512:	2104      	movs	r1, #4
 801c514:	f009 fb4d 	bl	8025bb2 <_ZdlPvj>
 801c518:	4620      	mov	r0, r4
 801c51a:	bd10      	pop	{r4, pc}

0801c51c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801c51c:	b510      	push	{r4, lr}
 801c51e:	4604      	mov	r4, r0
 801c520:	2104      	movs	r1, #4
 801c522:	f009 fb46 	bl	8025bb2 <_ZdlPvj>
 801c526:	4620      	mov	r0, r4
 801c528:	bd10      	pop	{r4, pc}

0801c52a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801c52a:	b510      	push	{r4, lr}
 801c52c:	4604      	mov	r4, r0
 801c52e:	2104      	movs	r1, #4
 801c530:	f009 fb3f 	bl	8025bb2 <_ZdlPvj>
 801c534:	4620      	mov	r0, r4
 801c536:	bd10      	pop	{r4, pc}

0801c538 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801c538:	b510      	push	{r4, lr}
 801c53a:	4604      	mov	r4, r0
 801c53c:	2104      	movs	r1, #4
 801c53e:	f009 fb38 	bl	8025bb2 <_ZdlPvj>
 801c542:	4620      	mov	r0, r4
 801c544:	bd10      	pop	{r4, pc}

0801c546 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801c546:	b510      	push	{r4, lr}
 801c548:	4604      	mov	r4, r0
 801c54a:	2104      	movs	r1, #4
 801c54c:	f009 fb31 	bl	8025bb2 <_ZdlPvj>
 801c550:	4620      	mov	r0, r4
 801c552:	bd10      	pop	{r4, pc}

0801c554 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 801c554:	b510      	push	{r4, lr}
 801c556:	4604      	mov	r4, r0
 801c558:	2104      	movs	r1, #4
 801c55a:	f009 fb2a 	bl	8025bb2 <_ZdlPvj>
 801c55e:	4620      	mov	r0, r4
 801c560:	bd10      	pop	{r4, pc}

0801c562 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801c562:	b510      	push	{r4, lr}
 801c564:	4604      	mov	r4, r0
 801c566:	2104      	movs	r1, #4
 801c568:	f009 fb23 	bl	8025bb2 <_ZdlPvj>
 801c56c:	4620      	mov	r0, r4
 801c56e:	bd10      	pop	{r4, pc}

0801c570 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801c570:	b510      	push	{r4, lr}
 801c572:	4604      	mov	r4, r0
 801c574:	2104      	movs	r1, #4
 801c576:	f009 fb1c 	bl	8025bb2 <_ZdlPvj>
 801c57a:	4620      	mov	r0, r4
 801c57c:	bd10      	pop	{r4, pc}

0801c57e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801c57e:	b510      	push	{r4, lr}
 801c580:	4604      	mov	r4, r0
 801c582:	2104      	movs	r1, #4
 801c584:	f009 fb15 	bl	8025bb2 <_ZdlPvj>
 801c588:	4620      	mov	r0, r4
 801c58a:	bd10      	pop	{r4, pc}

0801c58c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801c58c:	b510      	push	{r4, lr}
 801c58e:	4604      	mov	r4, r0
 801c590:	2104      	movs	r1, #4
 801c592:	f009 fb0e 	bl	8025bb2 <_ZdlPvj>
 801c596:	4620      	mov	r0, r4
 801c598:	bd10      	pop	{r4, pc}

0801c59a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801c59a:	b510      	push	{r4, lr}
 801c59c:	4604      	mov	r4, r0
 801c59e:	2104      	movs	r1, #4
 801c5a0:	f009 fb07 	bl	8025bb2 <_ZdlPvj>
 801c5a4:	4620      	mov	r0, r4
 801c5a6:	bd10      	pop	{r4, pc}

0801c5a8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801c5a8:	b510      	push	{r4, lr}
 801c5aa:	4604      	mov	r4, r0
 801c5ac:	2104      	movs	r1, #4
 801c5ae:	f009 fb00 	bl	8025bb2 <_ZdlPvj>
 801c5b2:	4620      	mov	r0, r4
 801c5b4:	bd10      	pop	{r4, pc}

0801c5b6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801c5b6:	b510      	push	{r4, lr}
 801c5b8:	4604      	mov	r4, r0
 801c5ba:	2104      	movs	r1, #4
 801c5bc:	f009 faf9 	bl	8025bb2 <_ZdlPvj>
 801c5c0:	4620      	mov	r0, r4
 801c5c2:	bd10      	pop	{r4, pc}

0801c5c4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801c5c4:	b510      	push	{r4, lr}
 801c5c6:	4604      	mov	r4, r0
 801c5c8:	2104      	movs	r1, #4
 801c5ca:	f009 faf2 	bl	8025bb2 <_ZdlPvj>
 801c5ce:	4620      	mov	r0, r4
 801c5d0:	bd10      	pop	{r4, pc}
	...

0801c5d4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 801c5d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c5d8:	b091      	sub	sp, #68	; 0x44
 801c5da:	469b      	mov	fp, r3
 801c5dc:	4616      	mov	r6, r2
 801c5de:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c5e2:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 801c5e6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801c5ea:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	; 0x6c
 801c5ee:	4604      	mov	r4, r0
 801c5f0:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
 801c5f4:	4640      	mov	r0, r8
 801c5f6:	460d      	mov	r5, r1
 801c5f8:	4659      	mov	r1, fp
 801c5fa:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801c5fe:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801c602:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
 801c606:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
 801c60a:	f7f3 fe43 	bl	8010294 <_ZN8touchgfx4RectaNERKS0_>
 801c60e:	4631      	mov	r1, r6
 801c610:	4640      	mov	r0, r8
 801c612:	f7f3 fe3f 	bl	8010294 <_ZN8touchgfx4RectaNERKS0_>
 801c616:	4b74      	ldr	r3, [pc, #464]	; (801c7e8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 801c618:	8818      	ldrh	r0, [r3, #0]
 801c61a:	4b74      	ldr	r3, [pc, #464]	; (801c7ec <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 801c61c:	b202      	sxth	r2, r0
 801c61e:	8819      	ldrh	r1, [r3, #0]
 801c620:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801c624:	b20e      	sxth	r6, r1
 801c626:	2b00      	cmp	r3, #0
 801c628:	da07      	bge.n	801c63a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 801c62a:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 801c62e:	4463      	add	r3, ip
 801c630:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801c634:	2300      	movs	r3, #0
 801c636:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 801c63a:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801c63e:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801c642:	1ad2      	subs	r2, r2, r3
 801c644:	4594      	cmp	ip, r2
 801c646:	bfc4      	itt	gt
 801c648:	1ac2      	subgt	r2, r0, r3
 801c64a:	f8ad 202c 	strhgt.w	r2, [sp, #44]	; 0x2c
 801c64e:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801c652:	2a00      	cmp	r2, #0
 801c654:	da07      	bge.n	801c666 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 801c656:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
 801c65a:	4462      	add	r2, ip
 801c65c:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 801c660:	2200      	movs	r2, #0
 801c662:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801c666:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 801c66a:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 801c66e:	eba6 060a 	sub.w	r6, r6, sl
 801c672:	42b2      	cmp	r2, r6
 801c674:	bfc4      	itt	gt
 801c676:	eba1 020a 	subgt.w	r2, r1, sl
 801c67a:	f8ad 202e 	strhgt.w	r2, [sp, #46]	; 0x2e
 801c67e:	4a5c      	ldr	r2, [pc, #368]	; (801c7f0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 801c680:	7812      	ldrb	r2, [r2, #0]
 801c682:	b9a2      	cbnz	r2, 801c6ae <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 801c684:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 801c688:	4286      	cmp	r6, r0
 801c68a:	4640      	mov	r0, r8
 801c68c:	9303      	str	r3, [sp, #12]
 801c68e:	bf14      	ite	ne
 801c690:	2600      	movne	r6, #0
 801c692:	2601      	moveq	r6, #1
 801c694:	f7f3 fe41 	bl	801031a <_ZNK8touchgfx4Rect7isEmptyEv>
 801c698:	9b03      	ldr	r3, [sp, #12]
 801c69a:	b160      	cbz	r0, 801c6b6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 801c69c:	2300      	movs	r3, #0
 801c69e:	8023      	strh	r3, [r4, #0]
 801c6a0:	8063      	strh	r3, [r4, #2]
 801c6a2:	80a3      	strh	r3, [r4, #4]
 801c6a4:	4620      	mov	r0, r4
 801c6a6:	80e3      	strh	r3, [r4, #6]
 801c6a8:	b011      	add	sp, #68	; 0x44
 801c6aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c6ae:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801c6b2:	428e      	cmp	r6, r1
 801c6b4:	e7e9      	b.n	801c68a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 801c6b6:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801c6ba:	a90e      	add	r1, sp, #56	; 0x38
 801c6bc:	900e      	str	r0, [sp, #56]	; 0x38
 801c6be:	a80c      	add	r0, sp, #48	; 0x30
 801c6c0:	9205      	str	r2, [sp, #20]
 801c6c2:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 801c6c6:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
 801c6ca:	9206      	str	r2, [sp, #24]
 801c6cc:	f8bb 2000 	ldrh.w	r2, [fp]
 801c6d0:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
 801c6d4:	1a9b      	subs	r3, r3, r2
 801c6d6:	b21b      	sxth	r3, r3
 801c6d8:	9303      	str	r3, [sp, #12]
 801c6da:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 801c6de:	f8df b118 	ldr.w	fp, [pc, #280]	; 801c7f8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 801c6e2:	ebaa 0a03 	sub.w	sl, sl, r3
 801c6e6:	fa0f f38a 	sxth.w	r3, sl
 801c6ea:	9304      	str	r3, [sp, #16]
 801c6ec:	9b03      	ldr	r3, [sp, #12]
 801c6ee:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 801c6f2:	9b04      	ldr	r3, [sp, #16]
 801c6f4:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801c6f8:	9b05      	ldr	r3, [sp, #20]
 801c6fa:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801c6fe:	9b06      	ldr	r3, [sp, #24]
 801c700:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801c704:	f7f9 fc08 	bl	8015f18 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c708:	4640      	mov	r0, r8
 801c70a:	f7f9 fbdd 	bl	8015ec8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c70e:	a80e      	add	r0, sp, #56	; 0x38
 801c710:	f7f9 fbda 	bl	8015ec8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c714:	4b37      	ldr	r3, [pc, #220]	; (801c7f4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 801c716:	4628      	mov	r0, r5
 801c718:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 801c71c:	881b      	ldrh	r3, [r3, #0]
 801c71e:	9307      	str	r3, [sp, #28]
 801c720:	682b      	ldr	r3, [r5, #0]
 801c722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c724:	4798      	blx	r3
 801c726:	f8bd 5032 	ldrh.w	r5, [sp, #50]	; 0x32
 801c72a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801c72e:	4681      	mov	r9, r0
 801c730:	f8db 0000 	ldr.w	r0, [fp]
 801c734:	fb1a 3305 	smlabb	r3, sl, r5, r3
 801c738:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801c73a:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801c73e:	6803      	ldr	r3, [r0, #0]
 801c740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c742:	4798      	blx	r3
 801c744:	4607      	mov	r7, r0
 801c746:	f8db 0000 	ldr.w	r0, [fp]
 801c74a:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801c74e:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801c752:	6803      	ldr	r3, [r0, #0]
 801c754:	9109      	str	r1, [sp, #36]	; 0x24
 801c756:	9208      	str	r2, [sp, #32]
 801c758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c75a:	4798      	blx	r3
 801c75c:	f010 0f01 	tst.w	r0, #1
 801c760:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801c764:	d012      	beq.n	801c78c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 801c766:	f8db 0000 	ldr.w	r0, [fp]
 801c76a:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801c76e:	6803      	ldr	r3, [r0, #0]
 801c770:	9200      	str	r2, [sp, #0]
 801c772:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 801c774:	462b      	mov	r3, r5
 801c776:	e898 0006 	ldmia.w	r8, {r1, r2}
 801c77a:	47b0      	blx	r6
 801c77c:	9b03      	ldr	r3, [sp, #12]
 801c77e:	8023      	strh	r3, [r4, #0]
 801c780:	9b04      	ldr	r3, [sp, #16]
 801c782:	8063      	strh	r3, [r4, #2]
 801c784:	9b05      	ldr	r3, [sp, #20]
 801c786:	80a3      	strh	r3, [r4, #4]
 801c788:	9b06      	ldr	r3, [sp, #24]
 801c78a:	e78b      	b.n	801c6a4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 801c78c:	fb09 f202 	mul.w	r2, r9, r2
 801c790:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801c794:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801c798:	440f      	add	r7, r1
 801c79a:	b166      	cbz	r6, 801c7b6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 801c79c:	9a07      	ldr	r2, [sp, #28]
 801c79e:	4592      	cmp	sl, r2
 801c7a0:	d109      	bne.n	801c7b6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 801c7a2:	f8db 0000 	ldr.w	r0, [fp]
 801c7a6:	fb09 f303 	mul.w	r3, r9, r3
 801c7aa:	4629      	mov	r1, r5
 801c7ac:	6802      	ldr	r2, [r0, #0]
 801c7ae:	6b56      	ldr	r6, [r2, #52]	; 0x34
 801c7b0:	463a      	mov	r2, r7
 801c7b2:	47b0      	blx	r6
 801c7b4:	e7e2      	b.n	801c77c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 801c7b6:	fb0a f303 	mul.w	r3, sl, r3
 801c7ba:	ea4f 064a 	mov.w	r6, sl, lsl #1
 801c7be:	f8df b038 	ldr.w	fp, [pc, #56]	; 801c7f8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 801c7c2:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 801c7c6:	4545      	cmp	r5, r8
 801c7c8:	d2d8      	bcs.n	801c77c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 801c7ca:	f8db 0000 	ldr.w	r0, [fp]
 801c7ce:	4629      	mov	r1, r5
 801c7d0:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801c7d4:	4435      	add	r5, r6
 801c7d6:	6802      	ldr	r2, [r0, #0]
 801c7d8:	005b      	lsls	r3, r3, #1
 801c7da:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 801c7de:	463a      	mov	r2, r7
 801c7e0:	47d0      	blx	sl
 801c7e2:	444f      	add	r7, r9
 801c7e4:	e7ef      	b.n	801c7c6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 801c7e6:	bf00      	nop
 801c7e8:	20027bb8 	.word	0x20027bb8
 801c7ec:	20027bba 	.word	0x20027bba
 801c7f0:	20027bbc 	.word	0x20027bbc
 801c7f4:	20027bbe 	.word	0x20027bbe
 801c7f8:	20027bc4 	.word	0x20027bc4

0801c7fc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801c7fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c7fe:	4606      	mov	r6, r0
 801c800:	b087      	sub	sp, #28
 801c802:	460c      	mov	r4, r1
 801c804:	4617      	mov	r7, r2
 801c806:	461d      	mov	r5, r3
 801c808:	b333      	cbz	r3, 801c858 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801c80a:	4608      	mov	r0, r1
 801c80c:	f7f3 fd85 	bl	801031a <_ZNK8touchgfx4Rect7isEmptyEv>
 801c810:	bb10      	cbnz	r0, 801c858 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801c812:	6820      	ldr	r0, [r4, #0]
 801c814:	ab04      	add	r3, sp, #16
 801c816:	6861      	ldr	r1, [r4, #4]
 801c818:	4c1b      	ldr	r4, [pc, #108]	; (801c888 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 801c81a:	c303      	stmia	r3!, {r0, r1}
 801c81c:	a804      	add	r0, sp, #16
 801c81e:	f7f9 fb53 	bl	8015ec8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c822:	6820      	ldr	r0, [r4, #0]
 801c824:	6803      	ldr	r3, [r0, #0]
 801c826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c828:	4798      	blx	r3
 801c82a:	2dff      	cmp	r5, #255	; 0xff
 801c82c:	d016      	beq.n	801c85c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801c82e:	f010 0f08 	tst.w	r0, #8
 801c832:	6820      	ldr	r0, [r4, #0]
 801c834:	d015      	beq.n	801c862 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801c836:	2400      	movs	r4, #0
 801c838:	6801      	ldr	r1, [r0, #0]
 801c83a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801c83e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801c842:	e9cd 5402 	strd	r5, r4, [sp, #8]
 801c846:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801c84a:	9401      	str	r4, [sp, #4]
 801c84c:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801c850:	9400      	str	r4, [sp, #0]
 801c852:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 801c854:	4639      	mov	r1, r7
 801c856:	47a0      	blx	r4
 801c858:	b007      	add	sp, #28
 801c85a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c85c:	f010 0f02 	tst.w	r0, #2
 801c860:	e7e7      	b.n	801c832 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 801c862:	6803      	ldr	r3, [r0, #0]
 801c864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c866:	4798      	blx	r3
 801c868:	4b08      	ldr	r3, [pc, #32]	; (801c88c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801c86a:	4601      	mov	r1, r0
 801c86c:	4630      	mov	r0, r6
 801c86e:	881a      	ldrh	r2, [r3, #0]
 801c870:	6833      	ldr	r3, [r6, #0]
 801c872:	e9cd 7500 	strd	r7, r5, [sp]
 801c876:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801c878:	ab04      	add	r3, sp, #16
 801c87a:	47a8      	blx	r5
 801c87c:	6820      	ldr	r0, [r4, #0]
 801c87e:	6803      	ldr	r3, [r0, #0]
 801c880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c882:	4798      	blx	r3
 801c884:	e7e8      	b.n	801c858 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801c886:	bf00      	nop
 801c888:	20027bc4 	.word	0x20027bc4
 801c88c:	20027bbe 	.word	0x20027bbe

0801c890 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801c890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c894:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 801c898:	4688      	mov	r8, r1
 801c89a:	4614      	mov	r4, r2
 801c89c:	461d      	mov	r5, r3
 801c89e:	9e08      	ldr	r6, [sp, #32]
 801c8a0:	2f00      	cmp	r7, #0
 801c8a2:	f000 80ab 	beq.w	801c9fc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801c8a6:	4618      	mov	r0, r3
 801c8a8:	f7f3 fd37 	bl	801031a <_ZNK8touchgfx4Rect7isEmptyEv>
 801c8ac:	2800      	cmp	r0, #0
 801c8ae:	f040 80a5 	bne.w	801c9fc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801c8b2:	f9b5 1000 	ldrsh.w	r1, [r5]
 801c8b6:	2fff      	cmp	r7, #255	; 0xff
 801c8b8:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801c8bc:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 801c8c0:	fb04 1303 	mla	r3, r4, r3, r1
 801c8c4:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 801c8c8:	eba4 0200 	sub.w	r2, r4, r0
 801c8cc:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 801c8d0:	fb04 f505 	mul.w	r5, r4, r5
 801c8d4:	ea4f 2816 	mov.w	r8, r6, lsr #8
 801c8d8:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 801c8dc:	d04a      	beq.n	801c974 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe4>
 801c8de:	b2bc      	uxth	r4, r7
 801c8e0:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 801c8e4:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 801c8e8:	fa5f f788 	uxtb.w	r7, r8
 801c8ec:	b2f3      	uxtb	r3, r6
 801c8ee:	0040      	lsls	r0, r0, #1
 801c8f0:	fb0e fe04 	mul.w	lr, lr, r4
 801c8f4:	4367      	muls	r7, r4
 801c8f6:	ea4f 0842 	mov.w	r8, r2, lsl #1
 801c8fa:	4363      	muls	r3, r4
 801c8fc:	fa1f fc8c 	uxth.w	ip, ip
 801c900:	42a9      	cmp	r1, r5
 801c902:	d27b      	bcs.n	801c9fc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801c904:	eb01 0900 	add.w	r9, r1, r0
 801c908:	4549      	cmp	r1, r9
 801c90a:	d231      	bcs.n	801c970 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe0>
 801c90c:	880a      	ldrh	r2, [r1, #0]
 801c90e:	1214      	asrs	r4, r2, #8
 801c910:	10d6      	asrs	r6, r2, #3
 801c912:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801c916:	00d2      	lsls	r2, r2, #3
 801c918:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801c91c:	b2d2      	uxtb	r2, r2
 801c91e:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801c922:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801c926:	fb14 f40c 	smulbb	r4, r4, ip
 801c92a:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 801c92e:	fb12 f20c 	smulbb	r2, r2, ip
 801c932:	fb16 f60c 	smulbb	r6, r6, ip
 801c936:	4474      	add	r4, lr
 801c938:	441a      	add	r2, r3
 801c93a:	b2a4      	uxth	r4, r4
 801c93c:	443e      	add	r6, r7
 801c93e:	b292      	uxth	r2, r2
 801c940:	f104 0a01 	add.w	sl, r4, #1
 801c944:	b2b6      	uxth	r6, r6
 801c946:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801c94a:	f102 0a01 	add.w	sl, r2, #1
 801c94e:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 801c952:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801c956:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801c95a:	4322      	orrs	r2, r4
 801c95c:	1c74      	adds	r4, r6, #1
 801c95e:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 801c962:	0976      	lsrs	r6, r6, #5
 801c964:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801c968:	4332      	orrs	r2, r6
 801c96a:	f821 2b02 	strh.w	r2, [r1], #2
 801c96e:	e7cb      	b.n	801c908 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x78>
 801c970:	4441      	add	r1, r8
 801c972:	e7c5      	b.n	801c900 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 801c974:	0973      	lsrs	r3, r6, #5
 801c976:	4f22      	ldr	r7, [pc, #136]	; (801ca00 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x170>)
 801c978:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801c97c:	ea08 0707 	and.w	r7, r8, r7
 801c980:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801c984:	433b      	orrs	r3, r7
 801c986:	07e7      	lsls	r7, r4, #31
 801c988:	ea43 0306 	orr.w	r3, r3, r6
 801c98c:	b29b      	uxth	r3, r3
 801c98e:	d50b      	bpl.n	801c9a8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
 801c990:	0040      	lsls	r0, r0, #1
 801c992:	0052      	lsls	r2, r2, #1
 801c994:	42a9      	cmp	r1, r5
 801c996:	d231      	bcs.n	801c9fc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801c998:	180c      	adds	r4, r1, r0
 801c99a:	42a1      	cmp	r1, r4
 801c99c:	d202      	bcs.n	801c9a4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 801c99e:	f821 3b02 	strh.w	r3, [r1], #2
 801c9a2:	e7fa      	b.n	801c99a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
 801c9a4:	4411      	add	r1, r2
 801c9a6:	e7f5      	b.n	801c994 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x104>
 801c9a8:	078e      	lsls	r6, r1, #30
 801c9aa:	d008      	beq.n	801c9be <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12e>
 801c9ac:	0066      	lsls	r6, r4, #1
 801c9ae:	460a      	mov	r2, r1
 801c9b0:	42aa      	cmp	r2, r5
 801c9b2:	d202      	bcs.n	801c9ba <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 801c9b4:	8013      	strh	r3, [r2, #0]
 801c9b6:	4432      	add	r2, r6
 801c9b8:	e7fa      	b.n	801c9b0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x120>
 801c9ba:	3102      	adds	r1, #2
 801c9bc:	3801      	subs	r0, #1
 801c9be:	07c2      	lsls	r2, r0, #31
 801c9c0:	d50b      	bpl.n	801c9da <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
 801c9c2:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 801c9c6:	0066      	lsls	r6, r4, #1
 801c9c8:	3a01      	subs	r2, #1
 801c9ca:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 801c9ce:	42aa      	cmp	r2, r5
 801c9d0:	d202      	bcs.n	801c9d8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
 801c9d2:	8013      	strh	r3, [r2, #0]
 801c9d4:	4432      	add	r2, r6
 801c9d6:	e7fa      	b.n	801c9ce <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13e>
 801c9d8:	3801      	subs	r0, #1
 801c9da:	b178      	cbz	r0, 801c9fc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801c9dc:	1040      	asrs	r0, r0, #1
 801c9de:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 801c9e2:	0080      	lsls	r0, r0, #2
 801c9e4:	0064      	lsls	r4, r4, #1
 801c9e6:	42a9      	cmp	r1, r5
 801c9e8:	d208      	bcs.n	801c9fc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801c9ea:	180e      	adds	r6, r1, r0
 801c9ec:	460a      	mov	r2, r1
 801c9ee:	42b2      	cmp	r2, r6
 801c9f0:	d202      	bcs.n	801c9f8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801c9f2:	f842 3b04 	str.w	r3, [r2], #4
 801c9f6:	e7fa      	b.n	801c9ee <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15e>
 801c9f8:	4421      	add	r1, r4
 801c9fa:	e7f4      	b.n	801c9e6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
 801c9fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ca00:	00fff800 	.word	0x00fff800

0801ca04 <_ZN8touchgfx8LCD16bppC1Ev>:
 801ca04:	2200      	movs	r2, #0
 801ca06:	4910      	ldr	r1, [pc, #64]	; (801ca48 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 801ca08:	6042      	str	r2, [r0, #4]
 801ca0a:	6001      	str	r1, [r0, #0]
 801ca0c:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801ca10:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801ca14:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801ca18:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801ca1c:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801ca20:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801ca24:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801ca28:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801ca2c:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801ca30:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801ca34:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 801ca38:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 801ca3c:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 801ca40:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 801ca44:	4770      	bx	lr
 801ca46:	bf00      	nop
 801ca48:	0802b600 	.word	0x0802b600

0801ca4c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801ca4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca50:	b08d      	sub	sp, #52	; 0x34
 801ca52:	460d      	mov	r5, r1
 801ca54:	4604      	mov	r4, r0
 801ca56:	4699      	mov	r9, r3
 801ca58:	6808      	ldr	r0, [r1, #0]
 801ca5a:	ab08      	add	r3, sp, #32
 801ca5c:	6849      	ldr	r1, [r1, #4]
 801ca5e:	c303      	stmia	r3!, {r0, r1}
 801ca60:	6810      	ldr	r0, [r2, #0]
 801ca62:	ab0a      	add	r3, sp, #40	; 0x28
 801ca64:	6851      	ldr	r1, [r2, #4]
 801ca66:	c303      	stmia	r3!, {r0, r1}
 801ca68:	a808      	add	r0, sp, #32
 801ca6a:	f7f9 fa2d 	bl	8015ec8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ca6e:	4629      	mov	r1, r5
 801ca70:	a80a      	add	r0, sp, #40	; 0x28
 801ca72:	4d67      	ldr	r5, [pc, #412]	; (801cc10 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801ca74:	f7f9 fa50 	bl	8015f18 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ca78:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801ca7c:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801ca80:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801ca84:	6828      	ldr	r0, [r5, #0]
 801ca86:	fb11 2103 	smlabb	r1, r1, r3, r2
 801ca8a:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 801ca8e:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801ca92:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801ca96:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801ca9a:	440a      	add	r2, r1
 801ca9c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801caa0:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801caa4:	4413      	add	r3, r2
 801caa6:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801caaa:	6803      	ldr	r3, [r0, #0]
 801caac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801caae:	4798      	blx	r3
 801cab0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801cab4:	d119      	bne.n	801caea <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 801cab6:	f010 0f20 	tst.w	r0, #32
 801caba:	6828      	ldr	r0, [r5, #0]
 801cabc:	d018      	beq.n	801caf0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 801cabe:	2500      	movs	r5, #0
 801cac0:	6801      	ldr	r1, [r0, #0]
 801cac2:	b2b6      	uxth	r6, r6
 801cac4:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801cac8:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801cacc:	9601      	str	r6, [sp, #4]
 801cace:	e9cd 9503 	strd	r9, r5, [sp, #12]
 801cad2:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 801cad6:	9502      	str	r5, [sp, #8]
 801cad8:	fa1f f588 	uxth.w	r5, r8
 801cadc:	9500      	str	r5, [sp, #0]
 801cade:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 801cae0:	4621      	mov	r1, r4
 801cae2:	47a8      	blx	r5
 801cae4:	b00d      	add	sp, #52	; 0x34
 801cae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801caea:	f010 0f40 	tst.w	r0, #64	; 0x40
 801caee:	e7e4      	b.n	801caba <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801caf0:	6803      	ldr	r3, [r0, #0]
 801caf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801caf4:	4798      	blx	r3
 801caf6:	4947      	ldr	r1, [pc, #284]	; (801cc14 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 801caf8:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801cafc:	880b      	ldrh	r3, [r1, #0]
 801cafe:	468a      	mov	sl, r1
 801cb00:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 801cb04:	fb03 5202 	mla	r2, r3, r2, r5
 801cb08:	4373      	muls	r3, r6
 801cb0a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801cb0e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801cb12:	9307      	str	r3, [sp, #28]
 801cb14:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801cb18:	9306      	str	r3, [sp, #24]
 801cb1a:	9b07      	ldr	r3, [sp, #28]
 801cb1c:	4298      	cmp	r0, r3
 801cb1e:	d270      	bcs.n	801cc02 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 801cb20:	9b06      	ldr	r3, [sp, #24]
 801cb22:	4621      	mov	r1, r4
 801cb24:	eb00 0b03 	add.w	fp, r0, r3
 801cb28:	4558      	cmp	r0, fp
 801cb2a:	d25d      	bcs.n	801cbe8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 801cb2c:	f851 4b04 	ldr.w	r4, [r1], #4
 801cb30:	0e23      	lsrs	r3, r4, #24
 801cb32:	d014      	beq.n	801cb5e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801cb34:	2bff      	cmp	r3, #255	; 0xff
 801cb36:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 801cb3a:	d112      	bne.n	801cb62 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801cb3c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801cb40:	d10f      	bne.n	801cb62 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801cb42:	0963      	lsrs	r3, r4, #5
 801cb44:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 801cb48:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801cb4c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801cb50:	f02c 0c07 	bic.w	ip, ip, #7
 801cb54:	ea43 0c0c 	orr.w	ip, r3, ip
 801cb58:	ea4c 0404 	orr.w	r4, ip, r4
 801cb5c:	8004      	strh	r4, [r0, #0]
 801cb5e:	3002      	adds	r0, #2
 801cb60:	e7e2      	b.n	801cb28 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 801cb62:	fb09 f303 	mul.w	r3, r9, r3
 801cb66:	8807      	ldrh	r7, [r0, #0]
 801cb68:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 801cb6c:	fa5f fc8c 	uxtb.w	ip, ip
 801cb70:	1c5a      	adds	r2, r3, #1
 801cb72:	123e      	asrs	r6, r7, #8
 801cb74:	10fd      	asrs	r5, r7, #3
 801cb76:	eb02 2223 	add.w	r2, r2, r3, asr #8
 801cb7a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801cb7e:	00ff      	lsls	r7, r7, #3
 801cb80:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801cb84:	1212      	asrs	r2, r2, #8
 801cb86:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801cb8a:	b293      	uxth	r3, r2
 801cb8c:	43d2      	mvns	r2, r2
 801cb8e:	b2ff      	uxtb	r7, r7
 801cb90:	fb1e fe03 	smulbb	lr, lr, r3
 801cb94:	b2d2      	uxtb	r2, r2
 801cb96:	fb1c fc03 	smulbb	ip, ip, r3
 801cb9a:	b2e4      	uxtb	r4, r4
 801cb9c:	fb06 e602 	mla	r6, r6, r2, lr
 801cba0:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801cba4:	fb14 f403 	smulbb	r4, r4, r3
 801cba8:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 801cbac:	b2b6      	uxth	r6, r6
 801cbae:	fb05 c502 	mla	r5, r5, r2, ip
 801cbb2:	fb07 4702 	mla	r7, r7, r2, r4
 801cbb6:	f106 0e01 	add.w	lr, r6, #1
 801cbba:	b2ad      	uxth	r5, r5
 801cbbc:	b2bf      	uxth	r7, r7
 801cbbe:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 801cbc2:	f105 0c01 	add.w	ip, r5, #1
 801cbc6:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
 801cbca:	1c7e      	adds	r6, r7, #1
 801cbcc:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801cbd0:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801cbd4:	096d      	lsrs	r5, r5, #5
 801cbd6:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801cbda:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801cbde:	ea46 060e 	orr.w	r6, r6, lr
 801cbe2:	432e      	orrs	r6, r5
 801cbe4:	8006      	strh	r6, [r0, #0]
 801cbe6:	e7ba      	b.n	801cb5e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801cbe8:	f8ba 3000 	ldrh.w	r3, [sl]
 801cbec:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 801cbf0:	eba3 0308 	sub.w	r3, r3, r8
 801cbf4:	eba4 0408 	sub.w	r4, r4, r8
 801cbf8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801cbfc:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801cc00:	e78b      	b.n	801cb1a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 801cc02:	4b03      	ldr	r3, [pc, #12]	; (801cc10 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801cc04:	6818      	ldr	r0, [r3, #0]
 801cc06:	6803      	ldr	r3, [r0, #0]
 801cc08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cc0a:	4798      	blx	r3
 801cc0c:	e76a      	b.n	801cae4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 801cc0e:	bf00      	nop
 801cc10:	20027bc4 	.word	0x20027bc4
 801cc14:	20027bbe 	.word	0x20027bbe

0801cc18 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 801cc18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801cc1c:	b085      	sub	sp, #20
 801cc1e:	6810      	ldr	r0, [r2, #0]
 801cc20:	460c      	mov	r4, r1
 801cc22:	6851      	ldr	r1, [r2, #4]
 801cc24:	466d      	mov	r5, sp
 801cc26:	4616      	mov	r6, r2
 801cc28:	c503      	stmia	r5!, {r0, r1}
 801cc2a:	6818      	ldr	r0, [r3, #0]
 801cc2c:	6859      	ldr	r1, [r3, #4]
 801cc2e:	c503      	stmia	r5!, {r0, r1}
 801cc30:	4668      	mov	r0, sp
 801cc32:	4d2e      	ldr	r5, [pc, #184]	; (801ccec <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 801cc34:	f7f9 f948 	bl	8015ec8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cc38:	4631      	mov	r1, r6
 801cc3a:	a802      	add	r0, sp, #8
 801cc3c:	4e2c      	ldr	r6, [pc, #176]	; (801ccf0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 801cc3e:	f7f9 f96b 	bl	8015f18 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801cc42:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801cc46:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801cc4a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801cc4e:	6828      	ldr	r0, [r5, #0]
 801cc50:	fb11 2103 	smlabb	r1, r1, r3, r2
 801cc54:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801cc58:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 801cc5c:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801cc60:	f8bd 1000 	ldrh.w	r1, [sp]
 801cc64:	440a      	add	r2, r1
 801cc66:	f8ad 2008 	strh.w	r2, [sp, #8]
 801cc6a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801cc6e:	4413      	add	r3, r2
 801cc70:	f8ad 300a 	strh.w	r3, [sp, #10]
 801cc74:	6803      	ldr	r3, [r0, #0]
 801cc76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cc78:	4798      	blx	r3
 801cc7a:	8833      	ldrh	r3, [r6, #0]
 801cc7c:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801cc80:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 801cc84:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801cc88:	f8df e068 	ldr.w	lr, [pc, #104]	; 801ccf4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 801cc8c:	fb03 1202 	mla	r2, r3, r2, r1
 801cc90:	fb08 f303 	mul.w	r3, r8, r3
 801cc94:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801cc98:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801cc9c:	4298      	cmp	r0, r3
 801cc9e:	d21d      	bcs.n	801ccdc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 801cca0:	eb00 080c 	add.w	r8, r0, ip
 801cca4:	4540      	cmp	r0, r8
 801cca6:	d20f      	bcs.n	801ccc8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 801cca8:	f854 1b04 	ldr.w	r1, [r4], #4
 801ccac:	ea4f 1951 	mov.w	r9, r1, lsr #5
 801ccb0:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 801ccb4:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 801ccb8:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801ccbc:	ea42 0209 	orr.w	r2, r2, r9
 801ccc0:	430a      	orrs	r2, r1
 801ccc2:	f820 2b02 	strh.w	r2, [r0], #2
 801ccc6:	e7ed      	b.n	801cca4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 801ccc8:	8832      	ldrh	r2, [r6, #0]
 801ccca:	1bd2      	subs	r2, r2, r7
 801cccc:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801ccd0:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801ccd4:	1bd2      	subs	r2, r2, r7
 801ccd6:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 801ccda:	e7df      	b.n	801cc9c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 801ccdc:	6828      	ldr	r0, [r5, #0]
 801ccde:	6803      	ldr	r3, [r0, #0]
 801cce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cce2:	4798      	blx	r3
 801cce4:	b005      	add	sp, #20
 801cce6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ccea:	bf00      	nop
 801ccec:	20027bc4 	.word	0x20027bc4
 801ccf0:	20027bbe 	.word	0x20027bbe
 801ccf4:	fffff800 	.word	0xfffff800

0801ccf8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 801ccf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ccfc:	b08e      	sub	sp, #56	; 0x38
 801ccfe:	460e      	mov	r6, r1
 801cd00:	4604      	mov	r4, r0
 801cd02:	461d      	mov	r5, r3
 801cd04:	6808      	ldr	r0, [r1, #0]
 801cd06:	ab0a      	add	r3, sp, #40	; 0x28
 801cd08:	6849      	ldr	r1, [r1, #4]
 801cd0a:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 801cee0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 801cd0e:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 801cee4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 801cd12:	c303      	stmia	r3!, {r0, r1}
 801cd14:	6810      	ldr	r0, [r2, #0]
 801cd16:	ab0c      	add	r3, sp, #48	; 0x30
 801cd18:	6851      	ldr	r1, [r2, #4]
 801cd1a:	c303      	stmia	r3!, {r0, r1}
 801cd1c:	a80a      	add	r0, sp, #40	; 0x28
 801cd1e:	f7f9 f8d3 	bl	8015ec8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cd22:	4631      	mov	r1, r6
 801cd24:	a80c      	add	r0, sp, #48	; 0x30
 801cd26:	f7f9 f8f7 	bl	8015f18 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801cd2a:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801cd2e:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801cd32:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801cd36:	f8d8 0000 	ldr.w	r0, [r8]
 801cd3a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801cd3e:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 801cd42:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 801cd46:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801cd4a:	440c      	add	r4, r1
 801cd4c:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801cd50:	440a      	add	r2, r1
 801cd52:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801cd56:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 801cd5a:	4413      	add	r3, r2
 801cd5c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801cd60:	6803      	ldr	r3, [r0, #0]
 801cd62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cd64:	4798      	blx	r3
 801cd66:	2dff      	cmp	r5, #255	; 0xff
 801cd68:	d124      	bne.n	801cdb4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 801cd6a:	f010 0f01 	tst.w	r0, #1
 801cd6e:	f8d8 0000 	ldr.w	r0, [r8]
 801cd72:	d022      	beq.n	801cdba <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 801cd74:	2100      	movs	r1, #0
 801cd76:	f04f 0e01 	mov.w	lr, #1
 801cd7a:	f8d0 c000 	ldr.w	ip, [r0]
 801cd7e:	b2b6      	uxth	r6, r6
 801cd80:	f8cd e018 	str.w	lr, [sp, #24]
 801cd84:	b2bf      	uxth	r7, r7
 801cd86:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801cd8a:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801cd8e:	e9cd 1107 	strd	r1, r1, [sp, #28]
 801cd92:	f8b9 e000 	ldrh.w	lr, [r9]
 801cd96:	9503      	str	r5, [sp, #12]
 801cd98:	9601      	str	r6, [sp, #4]
 801cd9a:	9700      	str	r7, [sp, #0]
 801cd9c:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801cda0:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801cda4:	9102      	str	r1, [sp, #8]
 801cda6:	4621      	mov	r1, r4
 801cda8:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 801cdac:	47a8      	blx	r5
 801cdae:	b00e      	add	sp, #56	; 0x38
 801cdb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cdb4:	f010 0f04 	tst.w	r0, #4
 801cdb8:	e7d9      	b.n	801cd6e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 801cdba:	6803      	ldr	r3, [r0, #0]
 801cdbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cdbe:	4798      	blx	r3
 801cdc0:	f8b9 3000 	ldrh.w	r3, [r9]
 801cdc4:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801cdc8:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 801cdcc:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801cdd0:	435e      	muls	r6, r3
 801cdd2:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801cdd6:	2dff      	cmp	r5, #255	; 0xff
 801cdd8:	fb03 1202 	mla	r2, r3, r2, r1
 801cddc:	ebac 0c07 	sub.w	ip, ip, r7
 801cde0:	eba3 0707 	sub.w	r7, r3, r7
 801cde4:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801cde8:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801cdec:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801cdf0:	ea4f 0747 	mov.w	r7, r7, lsl #1
 801cdf4:	d049      	beq.n	801ce8a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 801cdf6:	43eb      	mvns	r3, r5
 801cdf8:	fa1f f985 	uxth.w	r9, r5
 801cdfc:	b2db      	uxtb	r3, r3
 801cdfe:	42b0      	cmp	r0, r6
 801ce00:	d266      	bcs.n	801ced0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801ce02:	eb00 0a0e 	add.w	sl, r0, lr
 801ce06:	4550      	cmp	r0, sl
 801ce08:	4621      	mov	r1, r4
 801ce0a:	f104 0403 	add.w	r4, r4, #3
 801ce0e:	d25b      	bcs.n	801cec8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 801ce10:	8802      	ldrh	r2, [r0, #0]
 801ce12:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801ce16:	ea4f 2822 	mov.w	r8, r2, asr #8
 801ce1a:	fb11 f109 	smulbb	r1, r1, r9
 801ce1e:	10d5      	asrs	r5, r2, #3
 801ce20:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 801ce24:	00d2      	lsls	r2, r2, #3
 801ce26:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801ce2a:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 801ce2e:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801ce32:	fb08 1803 	mla	r8, r8, r3, r1
 801ce36:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 801ce3a:	b2d2      	uxtb	r2, r2
 801ce3c:	fb11 f109 	smulbb	r1, r1, r9
 801ce40:	fa1f f888 	uxth.w	r8, r8
 801ce44:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801ce48:	fb05 1503 	mla	r5, r5, r3, r1
 801ce4c:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801ce50:	fb11 f109 	smulbb	r1, r1, r9
 801ce54:	b2ad      	uxth	r5, r5
 801ce56:	fb02 1203 	mla	r2, r2, r3, r1
 801ce5a:	f108 0101 	add.w	r1, r8, #1
 801ce5e:	b292      	uxth	r2, r2
 801ce60:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 801ce64:	1c51      	adds	r1, r2, #1
 801ce66:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 801ce6a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801ce6e:	1c69      	adds	r1, r5, #1
 801ce70:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801ce74:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801ce78:	096d      	lsrs	r5, r5, #5
 801ce7a:	ea42 0208 	orr.w	r2, r2, r8
 801ce7e:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801ce82:	432a      	orrs	r2, r5
 801ce84:	f820 2b02 	strh.w	r2, [r0], #2
 801ce88:	e7bd      	b.n	801ce06 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 801ce8a:	4a14      	ldr	r2, [pc, #80]	; (801cedc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 801ce8c:	42b0      	cmp	r0, r6
 801ce8e:	d21f      	bcs.n	801ced0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801ce90:	eb00 050e 	add.w	r5, r0, lr
 801ce94:	42a8      	cmp	r0, r5
 801ce96:	4621      	mov	r1, r4
 801ce98:	f104 0403 	add.w	r4, r4, #3
 801ce9c:	d210      	bcs.n	801cec0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 801ce9e:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 801cea2:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801cea6:	00db      	lsls	r3, r3, #3
 801cea8:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 801ceac:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801ceb0:	430b      	orrs	r3, r1
 801ceb2:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801ceb6:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 801ceba:	f820 3b02 	strh.w	r3, [r0], #2
 801cebe:	e7e9      	b.n	801ce94 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 801cec0:	4438      	add	r0, r7
 801cec2:	eb01 040c 	add.w	r4, r1, ip
 801cec6:	e7e1      	b.n	801ce8c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 801cec8:	4438      	add	r0, r7
 801ceca:	eb01 040c 	add.w	r4, r1, ip
 801cece:	e796      	b.n	801cdfe <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 801ced0:	4b03      	ldr	r3, [pc, #12]	; (801cee0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 801ced2:	6818      	ldr	r0, [r3, #0]
 801ced4:	6803      	ldr	r3, [r0, #0]
 801ced6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ced8:	4798      	blx	r3
 801ceda:	e768      	b.n	801cdae <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 801cedc:	fffff800 	.word	0xfffff800
 801cee0:	20027bc4 	.word	0x20027bc4
 801cee4:	20027bbe 	.word	0x20027bbe

0801cee8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801cee8:	b4f0      	push	{r4, r5, r6, r7}
 801ceea:	4616      	mov	r6, r2
 801ceec:	461c      	mov	r4, r3
 801ceee:	460d      	mov	r5, r1
 801cef0:	9a04      	ldr	r2, [sp, #16]
 801cef2:	2e01      	cmp	r6, #1
 801cef4:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801cef8:	f89d 7018 	ldrb.w	r7, [sp, #24]
 801cefc:	d012      	beq.n	801cf24 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 801cefe:	d303      	bcc.n	801cf08 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 801cf00:	2e02      	cmp	r6, #2
 801cf02:	d00a      	beq.n	801cf1a <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 801cf04:	bcf0      	pop	{r4, r5, r6, r7}
 801cf06:	4770      	bx	lr
 801cf08:	6805      	ldr	r5, [r0, #0]
 801cf0a:	e9cd 3704 	strd	r3, r7, [sp, #16]
 801cf0e:	68ed      	ldr	r5, [r5, #12]
 801cf10:	4613      	mov	r3, r2
 801cf12:	4622      	mov	r2, r4
 801cf14:	46ac      	mov	ip, r5
 801cf16:	bcf0      	pop	{r4, r5, r6, r7}
 801cf18:	4760      	bx	ip
 801cf1a:	4621      	mov	r1, r4
 801cf1c:	4628      	mov	r0, r5
 801cf1e:	bcf0      	pop	{r4, r5, r6, r7}
 801cf20:	f7ff bd94 	b.w	801ca4c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801cf24:	4621      	mov	r1, r4
 801cf26:	4628      	mov	r0, r5
 801cf28:	bcf0      	pop	{r4, r5, r6, r7}
 801cf2a:	f7ff bee5 	b.w	801ccf8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

0801cf30 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801cf30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf34:	b093      	sub	sp, #76	; 0x4c
 801cf36:	4681      	mov	r9, r0
 801cf38:	4688      	mov	r8, r1
 801cf3a:	6810      	ldr	r0, [r2, #0]
 801cf3c:	6851      	ldr	r1, [r2, #4]
 801cf3e:	ac0e      	add	r4, sp, #56	; 0x38
 801cf40:	4616      	mov	r6, r2
 801cf42:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 801cf46:	4f6b      	ldr	r7, [pc, #428]	; (801d0f4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 801cf48:	c403      	stmia	r4!, {r0, r1}
 801cf4a:	6818      	ldr	r0, [r3, #0]
 801cf4c:	ac10      	add	r4, sp, #64	; 0x40
 801cf4e:	6859      	ldr	r1, [r3, #4]
 801cf50:	c403      	stmia	r4!, {r0, r1}
 801cf52:	a80e      	add	r0, sp, #56	; 0x38
 801cf54:	f7f8 ffb8 	bl	8015ec8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cf58:	4631      	mov	r1, r6
 801cf5a:	a810      	add	r0, sp, #64	; 0x40
 801cf5c:	4e66      	ldr	r6, [pc, #408]	; (801d0f8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801cf5e:	f7f8 ffdb 	bl	8015f18 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801cf62:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801cf66:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801cf6a:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801cf6e:	6830      	ldr	r0, [r6, #0]
 801cf70:	fb11 2103 	smlabb	r1, r1, r3, r2
 801cf74:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 801cf78:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 801cf7c:	4489      	add	r9, r1
 801cf7e:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801cf82:	440a      	add	r2, r1
 801cf84:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801cf88:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801cf8c:	4413      	add	r3, r2
 801cf8e:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801cf92:	6803      	ldr	r3, [r0, #0]
 801cf94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cf96:	4798      	blx	r3
 801cf98:	f010 0f80 	tst.w	r0, #128	; 0x80
 801cf9c:	6830      	ldr	r0, [r6, #0]
 801cf9e:	d01d      	beq.n	801cfdc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 801cfa0:	2200      	movs	r2, #0
 801cfa2:	6801      	ldr	r1, [r0, #0]
 801cfa4:	b2a4      	uxth	r4, r4
 801cfa6:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801cfaa:	b2ad      	uxth	r5, r5
 801cfac:	e9cd 2208 	strd	r2, r2, [sp, #32]
 801cfb0:	220b      	movs	r2, #11
 801cfb2:	9207      	str	r2, [sp, #28]
 801cfb4:	883a      	ldrh	r2, [r7, #0]
 801cfb6:	9502      	str	r5, [sp, #8]
 801cfb8:	9206      	str	r2, [sp, #24]
 801cfba:	2201      	movs	r2, #1
 801cfbc:	9401      	str	r4, [sp, #4]
 801cfbe:	e9cd a204 	strd	sl, r2, [sp, #16]
 801cfc2:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801cfc6:	9203      	str	r2, [sp, #12]
 801cfc8:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801cfcc:	9200      	str	r2, [sp, #0]
 801cfce:	4642      	mov	r2, r8
 801cfd0:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801cfd2:	4649      	mov	r1, r9
 801cfd4:	47a0      	blx	r4
 801cfd6:	b013      	add	sp, #76	; 0x4c
 801cfd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cfdc:	6803      	ldr	r3, [r0, #0]
 801cfde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cfe0:	4798      	blx	r3
 801cfe2:	883b      	ldrh	r3, [r7, #0]
 801cfe4:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 801cfe8:	f04f 0e04 	mov.w	lr, #4
 801cfec:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 801cff0:	435d      	muls	r5, r3
 801cff2:	fb03 1202 	mla	r2, r3, r2, r1
 801cff6:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801cffa:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 801cffe:	920c      	str	r2, [sp, #48]	; 0x30
 801d000:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 801d004:	1b12      	subs	r2, r2, r4
 801d006:	920d      	str	r2, [sp, #52]	; 0x34
 801d008:	0062      	lsls	r2, r4, #1
 801d00a:	1b1c      	subs	r4, r3, r4
 801d00c:	920a      	str	r2, [sp, #40]	; 0x28
 801d00e:	0063      	lsls	r3, r4, #1
 801d010:	930b      	str	r3, [sp, #44]	; 0x2c
 801d012:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d014:	4298      	cmp	r0, r3
 801d016:	d266      	bcs.n	801d0e6 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 801d018:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d01a:	eb00 0b03 	add.w	fp, r0, r3
 801d01e:	4558      	cmp	r0, fp
 801d020:	d25c      	bcs.n	801d0dc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801d022:	f819 3b01 	ldrb.w	r3, [r9], #1
 801d026:	fb1e e303 	smlabb	r3, lr, r3, lr
 801d02a:	f858 2003 	ldr.w	r2, [r8, r3]
 801d02e:	0e11      	lsrs	r1, r2, #24
 801d030:	d012      	beq.n	801d058 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801d032:	29ff      	cmp	r1, #255	; 0xff
 801d034:	ea4f 2712 	mov.w	r7, r2, lsr #8
 801d038:	d110      	bne.n	801d05c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801d03a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801d03e:	d10d      	bne.n	801d05c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801d040:	0953      	lsrs	r3, r2, #5
 801d042:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 801d046:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801d04a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d04e:	f027 0707 	bic.w	r7, r7, #7
 801d052:	431f      	orrs	r7, r3
 801d054:	433a      	orrs	r2, r7
 801d056:	8002      	strh	r2, [r0, #0]
 801d058:	3002      	adds	r0, #2
 801d05a:	e7e0      	b.n	801d01e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 801d05c:	fb0a f101 	mul.w	r1, sl, r1
 801d060:	8806      	ldrh	r6, [r0, #0]
 801d062:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801d066:	b2d2      	uxtb	r2, r2
 801d068:	1c4b      	adds	r3, r1, #1
 801d06a:	1235      	asrs	r5, r6, #8
 801d06c:	10f4      	asrs	r4, r6, #3
 801d06e:	eb03 2321 	add.w	r3, r3, r1, asr #8
 801d072:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801d076:	00f6      	lsls	r6, r6, #3
 801d078:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801d07c:	121b      	asrs	r3, r3, #8
 801d07e:	b2f6      	uxtb	r6, r6
 801d080:	b299      	uxth	r1, r3
 801d082:	43db      	mvns	r3, r3
 801d084:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801d088:	fb1c fc01 	smulbb	ip, ip, r1
 801d08c:	b2db      	uxtb	r3, r3
 801d08e:	fb12 f201 	smulbb	r2, r2, r1
 801d092:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801d096:	fb05 c503 	mla	r5, r5, r3, ip
 801d09a:	b2ff      	uxtb	r7, r7
 801d09c:	fb06 2203 	mla	r2, r6, r3, r2
 801d0a0:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 801d0a4:	fb17 f701 	smulbb	r7, r7, r1
 801d0a8:	b2ad      	uxth	r5, r5
 801d0aa:	b292      	uxth	r2, r2
 801d0ac:	fb04 7403 	mla	r4, r4, r3, r7
 801d0b0:	f105 0c01 	add.w	ip, r5, #1
 801d0b4:	1c57      	adds	r7, r2, #1
 801d0b6:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801d0ba:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801d0be:	b2a4      	uxth	r4, r4
 801d0c0:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801d0c4:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801d0c8:	433d      	orrs	r5, r7
 801d0ca:	1c67      	adds	r7, r4, #1
 801d0cc:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 801d0d0:	0964      	lsrs	r4, r4, #5
 801d0d2:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801d0d6:	4325      	orrs	r5, r4
 801d0d8:	8005      	strh	r5, [r0, #0]
 801d0da:	e7bd      	b.n	801d058 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801d0dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d0de:	4418      	add	r0, r3
 801d0e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d0e2:	4499      	add	r9, r3
 801d0e4:	e795      	b.n	801d012 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 801d0e6:	4b04      	ldr	r3, [pc, #16]	; (801d0f8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801d0e8:	6818      	ldr	r0, [r3, #0]
 801d0ea:	6803      	ldr	r3, [r0, #0]
 801d0ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d0ee:	4798      	blx	r3
 801d0f0:	e771      	b.n	801cfd6 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 801d0f2:	bf00      	nop
 801d0f4:	20027bbe 	.word	0x20027bbe
 801d0f8:	20027bc4 	.word	0x20027bc4

0801d0fc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 801d0fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d100:	b087      	sub	sp, #28
 801d102:	4680      	mov	r8, r0
 801d104:	460d      	mov	r5, r1
 801d106:	4614      	mov	r4, r2
 801d108:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 801d10c:	2e00      	cmp	r6, #0
 801d10e:	f000 80b9 	beq.w	801d284 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 801d112:	6810      	ldr	r0, [r2, #0]
 801d114:	af02      	add	r7, sp, #8
 801d116:	6851      	ldr	r1, [r2, #4]
 801d118:	c703      	stmia	r7!, {r0, r1}
 801d11a:	6818      	ldr	r0, [r3, #0]
 801d11c:	af04      	add	r7, sp, #16
 801d11e:	6859      	ldr	r1, [r3, #4]
 801d120:	c703      	stmia	r7!, {r0, r1}
 801d122:	a802      	add	r0, sp, #8
 801d124:	f7f8 fed0 	bl	8015ec8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d128:	4621      	mov	r1, r4
 801d12a:	a804      	add	r0, sp, #16
 801d12c:	f7f8 fef4 	bl	8015f18 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d130:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801d134:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801d138:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 801d13c:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 801d140:	fb14 2103 	smlabb	r1, r4, r3, r2
 801d144:	eb08 0401 	add.w	r4, r8, r1
 801d148:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801d14c:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801d150:	440a      	add	r2, r1
 801d152:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 801d156:	f8ad 2010 	strh.w	r2, [sp, #16]
 801d15a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801d15e:	4413      	add	r3, r2
 801d160:	f8ad 3012 	strh.w	r3, [sp, #18]
 801d164:	4b49      	ldr	r3, [pc, #292]	; (801d28c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 801d166:	6818      	ldr	r0, [r3, #0]
 801d168:	6803      	ldr	r3, [r0, #0]
 801d16a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d16c:	4798      	blx	r3
 801d16e:	4b48      	ldr	r3, [pc, #288]	; (801d290 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 801d170:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 801d174:	2eff      	cmp	r6, #255	; 0xff
 801d176:	881a      	ldrh	r2, [r3, #0]
 801d178:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 801d17c:	fb02 c101 	mla	r1, r2, r1, ip
 801d180:	fb02 f207 	mul.w	r2, r2, r7
 801d184:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801d188:	f105 0104 	add.w	r1, r5, #4
 801d18c:	461d      	mov	r5, r3
 801d18e:	d05a      	beq.n	801d246 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 801d190:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 801d194:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801d198:	b2b6      	uxth	r6, r6
 801d19a:	9301      	str	r3, [sp, #4]
 801d19c:	fa1f fe8e 	uxth.w	lr, lr
 801d1a0:	4282      	cmp	r2, r0
 801d1a2:	d96a      	bls.n	801d27a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 801d1a4:	eb00 0b0a 	add.w	fp, r0, sl
 801d1a8:	4583      	cmp	fp, r0
 801d1aa:	d940      	bls.n	801d22e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 801d1ac:	8805      	ldrh	r5, [r0, #0]
 801d1ae:	f814 3b01 	ldrb.w	r3, [r4], #1
 801d1b2:	122f      	asrs	r7, r5, #8
 801d1b4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801d1b8:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801d1bc:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801d1c0:	00ed      	lsls	r5, r5, #3
 801d1c2:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801d1c6:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801d1ca:	fb17 f70e 	smulbb	r7, r7, lr
 801d1ce:	b2ed      	uxtb	r5, r5
 801d1d0:	fb19 f90e 	smulbb	r9, r9, lr
 801d1d4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801d1d8:	fb15 f50e 	smulbb	r5, r5, lr
 801d1dc:	fb0c 7c06 	mla	ip, ip, r6, r7
 801d1e0:	10df      	asrs	r7, r3, #3
 801d1e2:	00db      	lsls	r3, r3, #3
 801d1e4:	fa1f fc8c 	uxth.w	ip, ip
 801d1e8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801d1ec:	b2db      	uxtb	r3, r3
 801d1ee:	fb07 9706 	mla	r7, r7, r6, r9
 801d1f2:	f10c 0901 	add.w	r9, ip, #1
 801d1f6:	fb03 5306 	mla	r3, r3, r6, r5
 801d1fa:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 801d1fe:	b29b      	uxth	r3, r3
 801d200:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 801d204:	b2bf      	uxth	r7, r7
 801d206:	f103 0c01 	add.w	ip, r3, #1
 801d20a:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801d20e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801d212:	ea4c 0c09 	orr.w	ip, ip, r9
 801d216:	f107 0901 	add.w	r9, r7, #1
 801d21a:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801d21e:	097f      	lsrs	r7, r7, #5
 801d220:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801d224:	ea4c 0c07 	orr.w	ip, ip, r7
 801d228:	f820 cb02 	strh.w	ip, [r0], #2
 801d22c:	e7bc      	b.n	801d1a8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 801d22e:	9b01      	ldr	r3, [sp, #4]
 801d230:	881b      	ldrh	r3, [r3, #0]
 801d232:	eba3 0308 	sub.w	r3, r3, r8
 801d236:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d23a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801d23e:	eba3 0308 	sub.w	r3, r3, r8
 801d242:	441c      	add	r4, r3
 801d244:	e7ac      	b.n	801d1a0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 801d246:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801d24a:	4282      	cmp	r2, r0
 801d24c:	d915      	bls.n	801d27a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 801d24e:	eb00 060a 	add.w	r6, r0, sl
 801d252:	4286      	cmp	r6, r0
 801d254:	d906      	bls.n	801d264 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 801d256:	f814 3b01 	ldrb.w	r3, [r4], #1
 801d25a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801d25e:	f820 3b02 	strh.w	r3, [r0], #2
 801d262:	e7f6      	b.n	801d252 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 801d264:	882b      	ldrh	r3, [r5, #0]
 801d266:	eba3 0308 	sub.w	r3, r3, r8
 801d26a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d26e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801d272:	eba3 0308 	sub.w	r3, r3, r8
 801d276:	441c      	add	r4, r3
 801d278:	e7e7      	b.n	801d24a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 801d27a:	4b04      	ldr	r3, [pc, #16]	; (801d28c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 801d27c:	6818      	ldr	r0, [r3, #0]
 801d27e:	6803      	ldr	r3, [r0, #0]
 801d280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d282:	4798      	blx	r3
 801d284:	b007      	add	sp, #28
 801d286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d28a:	bf00      	nop
 801d28c:	20027bc4 	.word	0x20027bc4
 801d290:	20027bbe 	.word	0x20027bbe

0801d294 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801d294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d298:	b091      	sub	sp, #68	; 0x44
 801d29a:	4680      	mov	r8, r0
 801d29c:	460f      	mov	r7, r1
 801d29e:	4614      	mov	r4, r2
 801d2a0:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 801d2a4:	2d00      	cmp	r5, #0
 801d2a6:	d051      	beq.n	801d34c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 801d2a8:	6810      	ldr	r0, [r2, #0]
 801d2aa:	ae0c      	add	r6, sp, #48	; 0x30
 801d2ac:	6851      	ldr	r1, [r2, #4]
 801d2ae:	f8df 9200 	ldr.w	r9, [pc, #512]	; 801d4b0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 801d2b2:	c603      	stmia	r6!, {r0, r1}
 801d2b4:	6818      	ldr	r0, [r3, #0]
 801d2b6:	ae0e      	add	r6, sp, #56	; 0x38
 801d2b8:	6859      	ldr	r1, [r3, #4]
 801d2ba:	c603      	stmia	r6!, {r0, r1}
 801d2bc:	a80c      	add	r0, sp, #48	; 0x30
 801d2be:	f7f8 fe03 	bl	8015ec8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d2c2:	4621      	mov	r1, r4
 801d2c4:	a80e      	add	r0, sp, #56	; 0x38
 801d2c6:	f7f8 fe27 	bl	8015f18 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d2ca:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801d2ce:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801d2d2:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801d2d6:	f8d9 0000 	ldr.w	r0, [r9]
 801d2da:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d2de:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 801d2e2:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 801d2e6:	eb08 0401 	add.w	r4, r8, r1
 801d2ea:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801d2ee:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 801d4b4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 801d2f2:	440a      	add	r2, r1
 801d2f4:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801d2f8:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801d2fc:	4413      	add	r3, r2
 801d2fe:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801d302:	6803      	ldr	r3, [r0, #0]
 801d304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d306:	4798      	blx	r3
 801d308:	f010 0f80 	tst.w	r0, #128	; 0x80
 801d30c:	f8d9 0000 	ldr.w	r0, [r9]
 801d310:	d01f      	beq.n	801d352 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 801d312:	2200      	movs	r2, #0
 801d314:	6801      	ldr	r1, [r0, #0]
 801d316:	b2b6      	uxth	r6, r6
 801d318:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801d31c:	e9cd 2208 	strd	r2, r2, [sp, #32]
 801d320:	220b      	movs	r2, #11
 801d322:	9207      	str	r2, [sp, #28]
 801d324:	f8b8 2000 	ldrh.w	r2, [r8]
 801d328:	9601      	str	r6, [sp, #4]
 801d32a:	9206      	str	r2, [sp, #24]
 801d32c:	2201      	movs	r2, #1
 801d32e:	e9cd 5204 	strd	r5, r2, [sp, #16]
 801d332:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801d336:	9203      	str	r2, [sp, #12]
 801d338:	fa1f f28a 	uxth.w	r2, sl
 801d33c:	9202      	str	r2, [sp, #8]
 801d33e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801d342:	9200      	str	r2, [sp, #0]
 801d344:	463a      	mov	r2, r7
 801d346:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 801d348:	4621      	mov	r1, r4
 801d34a:	47a8      	blx	r5
 801d34c:	b011      	add	sp, #68	; 0x44
 801d34e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d352:	6803      	ldr	r3, [r0, #0]
 801d354:	ea4f 0946 	mov.w	r9, r6, lsl #1
 801d358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d35a:	4798      	blx	r3
 801d35c:	f8b8 2000 	ldrh.w	r2, [r8]
 801d360:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801d364:	2dff      	cmp	r5, #255	; 0xff
 801d366:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 801d36a:	fb0a fa02 	mul.w	sl, sl, r2
 801d36e:	fb02 1303 	mla	r3, r2, r3, r1
 801d372:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d376:	d062      	beq.n	801d43e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 801d378:	ea6f 0c05 	mvn.w	ip, r5
 801d37c:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 801d380:	b2ad      	uxth	r5, r5
 801d382:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 801d386:	fa5f fc8c 	uxtb.w	ip, ip
 801d38a:	930a      	str	r3, [sp, #40]	; 0x28
 801d38c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d38e:	4298      	cmp	r0, r3
 801d390:	f080 8085 	bcs.w	801d49e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 801d394:	eb00 0b09 	add.w	fp, r0, r9
 801d398:	4558      	cmp	r0, fp
 801d39a:	d246      	bcs.n	801d42a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 801d39c:	f814 eb01 	ldrb.w	lr, [r4], #1
 801d3a0:	2303      	movs	r3, #3
 801d3a2:	2204      	movs	r2, #4
 801d3a4:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 801d3a8:	8803      	ldrh	r3, [r0, #0]
 801d3aa:	eb07 0a0e 	add.w	sl, r7, lr
 801d3ae:	1219      	asrs	r1, r3, #8
 801d3b0:	10da      	asrs	r2, r3, #3
 801d3b2:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801d3b6:	f89a 8002 	ldrb.w	r8, [sl, #2]
 801d3ba:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801d3be:	00db      	lsls	r3, r3, #3
 801d3c0:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801d3c4:	fb18 f805 	smulbb	r8, r8, r5
 801d3c8:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 801d3cc:	fb1e fe05 	smulbb	lr, lr, r5
 801d3d0:	b2db      	uxtb	r3, r3
 801d3d2:	fb01 810c 	mla	r1, r1, ip, r8
 801d3d6:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801d3da:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801d3de:	fb18 f805 	smulbb	r8, r8, r5
 801d3e2:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801d3e6:	b289      	uxth	r1, r1
 801d3e8:	fb02 820c 	mla	r2, r2, ip, r8
 801d3ec:	fb03 e30c 	mla	r3, r3, ip, lr
 801d3f0:	f101 0801 	add.w	r8, r1, #1
 801d3f4:	b292      	uxth	r2, r2
 801d3f6:	b29b      	uxth	r3, r3
 801d3f8:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801d3fc:	f102 0801 	add.w	r8, r2, #1
 801d400:	f103 0e01 	add.w	lr, r3, #1
 801d404:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 801d408:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801d40c:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 801d410:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801d414:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801d418:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801d41c:	ea4e 0101 	orr.w	r1, lr, r1
 801d420:	ea41 0108 	orr.w	r1, r1, r8
 801d424:	f820 1b02 	strh.w	r1, [r0], #2
 801d428:	e7b6      	b.n	801d398 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 801d42a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d42c:	881b      	ldrh	r3, [r3, #0]
 801d42e:	1b9b      	subs	r3, r3, r6
 801d430:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d434:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801d438:	1b9b      	subs	r3, r3, r6
 801d43a:	441c      	add	r4, r3
 801d43c:	e7a6      	b.n	801d38c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 801d43e:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 801d442:	2203      	movs	r2, #3
 801d444:	2504      	movs	r5, #4
 801d446:	4919      	ldr	r1, [pc, #100]	; (801d4ac <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 801d448:	4550      	cmp	r0, sl
 801d44a:	d228      	bcs.n	801d49e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 801d44c:	eb00 0c09 	add.w	ip, r0, r9
 801d450:	4560      	cmp	r0, ip
 801d452:	4623      	mov	r3, r4
 801d454:	d219      	bcs.n	801d48a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 801d456:	f893 e000 	ldrb.w	lr, [r3]
 801d45a:	3401      	adds	r4, #1
 801d45c:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 801d460:	eb07 0b0e 	add.w	fp, r7, lr
 801d464:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801d468:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801d46c:	f89b b001 	ldrb.w	fp, [fp, #1]
 801d470:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 801d474:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801d478:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801d47c:	ea43 030b 	orr.w	r3, r3, fp
 801d480:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 801d484:	f820 3b02 	strh.w	r3, [r0], #2
 801d488:	e7e2      	b.n	801d450 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 801d48a:	f8b8 3000 	ldrh.w	r3, [r8]
 801d48e:	1b9b      	subs	r3, r3, r6
 801d490:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d494:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801d498:	1b9b      	subs	r3, r3, r6
 801d49a:	441c      	add	r4, r3
 801d49c:	e7d4      	b.n	801d448 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 801d49e:	4b04      	ldr	r3, [pc, #16]	; (801d4b0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 801d4a0:	6818      	ldr	r0, [r3, #0]
 801d4a2:	6803      	ldr	r3, [r0, #0]
 801d4a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d4a6:	4798      	blx	r3
 801d4a8:	e750      	b.n	801d34c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 801d4aa:	bf00      	nop
 801d4ac:	fffff800 	.word	0xfffff800
 801d4b0:	20027bc4 	.word	0x20027bc4
 801d4b4:	20027bbe 	.word	0x20027bbe

0801d4b8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801d4b8:	b430      	push	{r4, r5}
 801d4ba:	780d      	ldrb	r5, [r1, #0]
 801d4bc:	f89d 4008 	ldrb.w	r4, [sp, #8]
 801d4c0:	2d01      	cmp	r5, #1
 801d4c2:	d00a      	beq.n	801d4da <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 801d4c4:	d305      	bcc.n	801d4d2 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 801d4c6:	2d02      	cmp	r5, #2
 801d4c8:	d10b      	bne.n	801d4e2 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 801d4ca:	9402      	str	r4, [sp, #8]
 801d4cc:	bc30      	pop	{r4, r5}
 801d4ce:	f7ff be15 	b.w	801d0fc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 801d4d2:	9402      	str	r4, [sp, #8]
 801d4d4:	bc30      	pop	{r4, r5}
 801d4d6:	f7ff bd2b 	b.w	801cf30 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801d4da:	9402      	str	r4, [sp, #8]
 801d4dc:	bc30      	pop	{r4, r5}
 801d4de:	f7ff bed9 	b.w	801d294 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801d4e2:	bc30      	pop	{r4, r5}
 801d4e4:	4770      	bx	lr
	...

0801d4e8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 801d4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d4ec:	b087      	sub	sp, #28
 801d4ee:	4604      	mov	r4, r0
 801d4f0:	460e      	mov	r6, r1
 801d4f2:	6810      	ldr	r0, [r2, #0]
 801d4f4:	6851      	ldr	r1, [r2, #4]
 801d4f6:	ad02      	add	r5, sp, #8
 801d4f8:	4617      	mov	r7, r2
 801d4fa:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 801d4fe:	f8df 9230 	ldr.w	r9, [pc, #560]	; 801d730 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 801d502:	c503      	stmia	r5!, {r0, r1}
 801d504:	6818      	ldr	r0, [r3, #0]
 801d506:	ad04      	add	r5, sp, #16
 801d508:	6859      	ldr	r1, [r3, #4]
 801d50a:	c503      	stmia	r5!, {r0, r1}
 801d50c:	a802      	add	r0, sp, #8
 801d50e:	f7f8 fcdb 	bl	8015ec8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d512:	4639      	mov	r1, r7
 801d514:	a804      	add	r0, sp, #16
 801d516:	f7f8 fcff 	bl	8015f18 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d51a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801d51e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801d522:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801d526:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801d52a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d52e:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801d532:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 801d536:	440e      	add	r6, r1
 801d538:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801d53c:	440a      	add	r2, r1
 801d53e:	f8ad 2010 	strh.w	r2, [sp, #16]
 801d542:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801d546:	4413      	add	r3, r2
 801d548:	f8ad 3012 	strh.w	r3, [sp, #18]
 801d54c:	4b77      	ldr	r3, [pc, #476]	; (801d72c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801d54e:	6818      	ldr	r0, [r3, #0]
 801d550:	6803      	ldr	r3, [r0, #0]
 801d552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d554:	4798      	blx	r3
 801d556:	f8b9 b000 	ldrh.w	fp, [r9]
 801d55a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801d55e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801d562:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801d566:	fb05 f50b 	mul.w	r5, r5, fp
 801d56a:	fb0b 2303 	mla	r3, fp, r3, r2
 801d56e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d572:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801d576:	9300      	str	r3, [sp, #0]
 801d578:	d069      	beq.n	801d64e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 801d57a:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 801d57e:	4558      	cmp	r0, fp
 801d580:	f080 80cc 	bcs.w	801d71c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801d584:	9b00      	ldr	r3, [sp, #0]
 801d586:	4631      	mov	r1, r6
 801d588:	18c3      	adds	r3, r0, r3
 801d58a:	9301      	str	r3, [sp, #4]
 801d58c:	9b01      	ldr	r3, [sp, #4]
 801d58e:	4298      	cmp	r0, r3
 801d590:	d24f      	bcs.n	801d632 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 801d592:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d596:	2a00      	cmp	r2, #0
 801d598:	d048      	beq.n	801d62c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801d59a:	fb0a f202 	mul.w	r2, sl, r2
 801d59e:	1c53      	adds	r3, r2, #1
 801d5a0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801d5a4:	121b      	asrs	r3, r3, #8
 801d5a6:	d041      	beq.n	801d62c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801d5a8:	8802      	ldrh	r2, [r0, #0]
 801d5aa:	b29e      	uxth	r6, r3
 801d5ac:	f8b4 c000 	ldrh.w	ip, [r4]
 801d5b0:	43db      	mvns	r3, r3
 801d5b2:	1215      	asrs	r5, r2, #8
 801d5b4:	b2db      	uxtb	r3, r3
 801d5b6:	ea4f 272c 	mov.w	r7, ip, asr #8
 801d5ba:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801d5be:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 801d5c2:	fb15 f503 	smulbb	r5, r5, r3
 801d5c6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801d5ca:	00d2      	lsls	r2, r2, #3
 801d5cc:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801d5d0:	fb07 5706 	mla	r7, r7, r6, r5
 801d5d4:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801d5d8:	b2d2      	uxtb	r2, r2
 801d5da:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801d5de:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801d5e2:	fb1e fe03 	smulbb	lr, lr, r3
 801d5e6:	b2bf      	uxth	r7, r7
 801d5e8:	fb12 f203 	smulbb	r2, r2, r3
 801d5ec:	fa5f fc8c 	uxtb.w	ip, ip
 801d5f0:	fb05 e506 	mla	r5, r5, r6, lr
 801d5f4:	f107 0e01 	add.w	lr, r7, #1
 801d5f8:	fb0c 2c06 	mla	ip, ip, r6, r2
 801d5fc:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801d600:	fa1f fc8c 	uxth.w	ip, ip
 801d604:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 801d608:	b2ad      	uxth	r5, r5
 801d60a:	f10c 0701 	add.w	r7, ip, #1
 801d60e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801d612:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801d616:	ea47 070e 	orr.w	r7, r7, lr
 801d61a:	f105 0e01 	add.w	lr, r5, #1
 801d61e:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 801d622:	096d      	lsrs	r5, r5, #5
 801d624:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801d628:	432f      	orrs	r7, r5
 801d62a:	8007      	strh	r7, [r0, #0]
 801d62c:	3002      	adds	r0, #2
 801d62e:	3402      	adds	r4, #2
 801d630:	e7ac      	b.n	801d58c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 801d632:	f8b9 3000 	ldrh.w	r3, [r9]
 801d636:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801d63a:	eba3 0308 	sub.w	r3, r3, r8
 801d63e:	eba6 0608 	sub.w	r6, r6, r8
 801d642:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d646:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801d64a:	440e      	add	r6, r1
 801d64c:	e797      	b.n	801d57e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 801d64e:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801d652:	42a8      	cmp	r0, r5
 801d654:	d262      	bcs.n	801d71c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801d656:	9b00      	ldr	r3, [sp, #0]
 801d658:	4631      	mov	r1, r6
 801d65a:	eb00 0b03 	add.w	fp, r0, r3
 801d65e:	4558      	cmp	r0, fp
 801d660:	d24e      	bcs.n	801d700 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 801d662:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d666:	b12b      	cbz	r3, 801d674 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801d668:	2bff      	cmp	r3, #255	; 0xff
 801d66a:	f8b4 e000 	ldrh.w	lr, [r4]
 801d66e:	d104      	bne.n	801d67a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 801d670:	f8a0 e000 	strh.w	lr, [r0]
 801d674:	3002      	adds	r0, #2
 801d676:	3402      	adds	r4, #2
 801d678:	e7f1      	b.n	801d65e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 801d67a:	8802      	ldrh	r2, [r0, #0]
 801d67c:	b29f      	uxth	r7, r3
 801d67e:	43db      	mvns	r3, r3
 801d680:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801d684:	1216      	asrs	r6, r2, #8
 801d686:	b2db      	uxtb	r3, r3
 801d688:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801d68c:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801d690:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 801d694:	00d2      	lsls	r2, r2, #3
 801d696:	fb16 f603 	smulbb	r6, r6, r3
 801d69a:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801d69e:	b2d2      	uxtb	r2, r2
 801d6a0:	fb0c 6c07 	mla	ip, ip, r7, r6
 801d6a4:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801d6a8:	fb1a fa03 	smulbb	sl, sl, r3
 801d6ac:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801d6b0:	fa1f fc8c 	uxth.w	ip, ip
 801d6b4:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801d6b8:	fb12 f303 	smulbb	r3, r2, r3
 801d6bc:	fa5f fe8e 	uxtb.w	lr, lr
 801d6c0:	fb06 a607 	mla	r6, r6, r7, sl
 801d6c4:	f10c 0201 	add.w	r2, ip, #1
 801d6c8:	fb0e 3307 	mla	r3, lr, r7, r3
 801d6cc:	b2b6      	uxth	r6, r6
 801d6ce:	b29b      	uxth	r3, r3
 801d6d0:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801d6d4:	f106 0a01 	add.w	sl, r6, #1
 801d6d8:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 801d6dc:	f103 0c01 	add.w	ip, r3, #1
 801d6e0:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 801d6e4:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801d6e8:	0976      	lsrs	r6, r6, #5
 801d6ea:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801d6ee:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801d6f2:	ea4c 0c02 	orr.w	ip, ip, r2
 801d6f6:	ea4c 0c06 	orr.w	ip, ip, r6
 801d6fa:	f8a0 c000 	strh.w	ip, [r0]
 801d6fe:	e7b9      	b.n	801d674 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801d700:	f8b9 3000 	ldrh.w	r3, [r9]
 801d704:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801d708:	eba3 0308 	sub.w	r3, r3, r8
 801d70c:	eba6 0608 	sub.w	r6, r6, r8
 801d710:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d714:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801d718:	440e      	add	r6, r1
 801d71a:	e79a      	b.n	801d652 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 801d71c:	4b03      	ldr	r3, [pc, #12]	; (801d72c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801d71e:	6818      	ldr	r0, [r3, #0]
 801d720:	6803      	ldr	r3, [r0, #0]
 801d722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d724:	4798      	blx	r3
 801d726:	b007      	add	sp, #28
 801d728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d72c:	20027bc4 	.word	0x20027bc4
 801d730:	20027bbe 	.word	0x20027bbe

0801d734 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801d734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d738:	b089      	sub	sp, #36	; 0x24
 801d73a:	4682      	mov	sl, r0
 801d73c:	460f      	mov	r7, r1
 801d73e:	4691      	mov	r9, r2
 801d740:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 801d744:	4698      	mov	r8, r3
 801d746:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801d748:	2e00      	cmp	r6, #0
 801d74a:	d036      	beq.n	801d7ba <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801d74c:	4608      	mov	r0, r1
 801d74e:	f7fc f861 	bl	8019814 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801d752:	4605      	mov	r5, r0
 801d754:	4638      	mov	r0, r7
 801d756:	f7fc f891 	bl	801987c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801d75a:	f8ad 000e 	strh.w	r0, [sp, #14]
 801d75e:	4638      	mov	r0, r7
 801d760:	f8ad 9008 	strh.w	r9, [sp, #8]
 801d764:	f8ad 500c 	strh.w	r5, [sp, #12]
 801d768:	f8ad 800a 	strh.w	r8, [sp, #10]
 801d76c:	f7fc f93e 	bl	80199ec <_ZNK8touchgfx6Bitmap7getDataEv>
 801d770:	4605      	mov	r5, r0
 801d772:	4638      	mov	r0, r7
 801d774:	f7fc f96a 	bl	8019a4c <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801d778:	4681      	mov	r9, r0
 801d77a:	4638      	mov	r0, r7
 801d77c:	f7fc f9ba 	bl	8019af4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801d780:	280b      	cmp	r0, #11
 801d782:	d81a      	bhi.n	801d7ba <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801d784:	e8df f000 	tbb	[pc, r0]
 801d788:	1906aebd 	.word	0x1906aebd
 801d78c:	19191919 	.word	0x19191919
 801d790:	b5191919 	.word	0xb5191919
 801d794:	4bb0      	ldr	r3, [pc, #704]	; (801da58 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x324>)
 801d796:	6818      	ldr	r0, [r3, #0]
 801d798:	6803      	ldr	r3, [r0, #0]
 801d79a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d79c:	4798      	blx	r3
 801d79e:	2eff      	cmp	r6, #255	; 0xff
 801d7a0:	d121      	bne.n	801d7e6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 801d7a2:	0683      	lsls	r3, r0, #26
 801d7a4:	d41f      	bmi.n	801d7e6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 801d7a6:	4638      	mov	r0, r7
 801d7a8:	f7fc f8e8 	bl	801997c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801d7ac:	b940      	cbnz	r0, 801d7c0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
 801d7ae:	4623      	mov	r3, r4
 801d7b0:	aa02      	add	r2, sp, #8
 801d7b2:	4629      	mov	r1, r5
 801d7b4:	4650      	mov	r0, sl
 801d7b6:	f7ff fa2f 	bl	801cc18 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801d7ba:	b009      	add	sp, #36	; 0x24
 801d7bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d7c0:	f10d 0818 	add.w	r8, sp, #24
 801d7c4:	4639      	mov	r1, r7
 801d7c6:	af04      	add	r7, sp, #16
 801d7c8:	4640      	mov	r0, r8
 801d7ca:	f7fc f88b 	bl	80198e4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801d7ce:	e898 0003 	ldmia.w	r8, {r0, r1}
 801d7d2:	e887 0003 	stmia.w	r7, {r0, r1}
 801d7d6:	4638      	mov	r0, r7
 801d7d8:	4621      	mov	r1, r4
 801d7da:	f7f2 fd5b 	bl	8010294 <_ZN8touchgfx4RectaNERKS0_>
 801d7de:	4638      	mov	r0, r7
 801d7e0:	f7f2 fd9b 	bl	801031a <_ZNK8touchgfx4Rect7isEmptyEv>
 801d7e4:	b130      	cbz	r0, 801d7f4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 801d7e6:	4633      	mov	r3, r6
 801d7e8:	4622      	mov	r2, r4
 801d7ea:	a902      	add	r1, sp, #8
 801d7ec:	4628      	mov	r0, r5
 801d7ee:	f7ff f92d 	bl	801ca4c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801d7f2:	e7e2      	b.n	801d7ba <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801d7f4:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801d7f8:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801d7fc:	4293      	cmp	r3, r2
 801d7fe:	dd12      	ble.n	801d826 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf2>
 801d800:	1a9b      	subs	r3, r3, r2
 801d802:	f9b4 0000 	ldrsh.w	r0, [r4]
 801d806:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801d80a:	f8ad 0018 	strh.w	r0, [sp, #24]
 801d80e:	4628      	mov	r0, r5
 801d810:	f8ad 201a 	strh.w	r2, [sp, #26]
 801d814:	4642      	mov	r2, r8
 801d816:	f8ad 101c 	strh.w	r1, [sp, #28]
 801d81a:	a902      	add	r1, sp, #8
 801d81c:	f8ad 301e 	strh.w	r3, [sp, #30]
 801d820:	4633      	mov	r3, r6
 801d822:	f7ff f913 	bl	801ca4c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801d826:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801d82a:	f9b4 2000 	ldrsh.w	r2, [r4]
 801d82e:	4293      	cmp	r3, r2
 801d830:	dd12      	ble.n	801d858 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x124>
 801d832:	1a9b      	subs	r3, r3, r2
 801d834:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801d838:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801d83c:	f8ad 2018 	strh.w	r2, [sp, #24]
 801d840:	4642      	mov	r2, r8
 801d842:	f8ad 001a 	strh.w	r0, [sp, #26]
 801d846:	4628      	mov	r0, r5
 801d848:	f8ad 301c 	strh.w	r3, [sp, #28]
 801d84c:	23ff      	movs	r3, #255	; 0xff
 801d84e:	f8ad 101e 	strh.w	r1, [sp, #30]
 801d852:	a902      	add	r1, sp, #8
 801d854:	f7ff f8fa 	bl	801ca4c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801d858:	463b      	mov	r3, r7
 801d85a:	aa02      	add	r2, sp, #8
 801d85c:	4629      	mov	r1, r5
 801d85e:	4650      	mov	r0, sl
 801d860:	f7ff f9da 	bl	801cc18 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801d864:	88a2      	ldrh	r2, [r4, #4]
 801d866:	8823      	ldrh	r3, [r4, #0]
 801d868:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801d86c:	4413      	add	r3, r2
 801d86e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801d872:	440a      	add	r2, r1
 801d874:	b29b      	uxth	r3, r3
 801d876:	b292      	uxth	r2, r2
 801d878:	b218      	sxth	r0, r3
 801d87a:	b211      	sxth	r1, r2
 801d87c:	4288      	cmp	r0, r1
 801d87e:	dd12      	ble.n	801d8a6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x172>
 801d880:	1a9b      	subs	r3, r3, r2
 801d882:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801d886:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 801d88a:	4642      	mov	r2, r8
 801d88c:	f8ad 1018 	strh.w	r1, [sp, #24]
 801d890:	a902      	add	r1, sp, #8
 801d892:	f8ad 301c 	strh.w	r3, [sp, #28]
 801d896:	23ff      	movs	r3, #255	; 0xff
 801d898:	f8ad 001e 	strh.w	r0, [sp, #30]
 801d89c:	4628      	mov	r0, r5
 801d89e:	f8ad 601a 	strh.w	r6, [sp, #26]
 801d8a2:	f7ff f8d3 	bl	801ca4c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801d8a6:	88e2      	ldrh	r2, [r4, #6]
 801d8a8:	8863      	ldrh	r3, [r4, #2]
 801d8aa:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801d8ae:	4413      	add	r3, r2
 801d8b0:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801d8b4:	440a      	add	r2, r1
 801d8b6:	b29b      	uxth	r3, r3
 801d8b8:	b292      	uxth	r2, r2
 801d8ba:	b218      	sxth	r0, r3
 801d8bc:	b211      	sxth	r1, r2
 801d8be:	4288      	cmp	r0, r1
 801d8c0:	f77f af7b 	ble.w	801d7ba <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801d8c4:	1a9b      	subs	r3, r3, r2
 801d8c6:	f9b4 6000 	ldrsh.w	r6, [r4]
 801d8ca:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801d8ce:	4642      	mov	r2, r8
 801d8d0:	f8ad 301e 	strh.w	r3, [sp, #30]
 801d8d4:	23ff      	movs	r3, #255	; 0xff
 801d8d6:	f8ad 6018 	strh.w	r6, [sp, #24]
 801d8da:	f8ad 101a 	strh.w	r1, [sp, #26]
 801d8de:	f8ad 001c 	strh.w	r0, [sp, #28]
 801d8e2:	e782      	b.n	801d7ea <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb6>
 801d8e4:	4633      	mov	r3, r6
 801d8e6:	4622      	mov	r2, r4
 801d8e8:	a902      	add	r1, sp, #8
 801d8ea:	4628      	mov	r0, r5
 801d8ec:	f7ff fa04 	bl	801ccf8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 801d8f0:	e763      	b.n	801d7ba <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801d8f2:	9600      	str	r6, [sp, #0]
 801d8f4:	4623      	mov	r3, r4
 801d8f6:	aa02      	add	r2, sp, #8
 801d8f8:	4649      	mov	r1, r9
 801d8fa:	4628      	mov	r0, r5
 801d8fc:	f7ff fddc 	bl	801d4b8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801d900:	e75b      	b.n	801d7ba <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801d902:	4638      	mov	r0, r7
 801d904:	f7fc f83a 	bl	801997c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801d908:	b950      	cbnz	r0, 801d920 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1ec>
 801d90a:	f8da 3000 	ldr.w	r3, [sl]
 801d90e:	aa02      	add	r2, sp, #8
 801d910:	4629      	mov	r1, r5
 801d912:	e9cd 6000 	strd	r6, r0, [sp]
 801d916:	4650      	mov	r0, sl
 801d918:	68de      	ldr	r6, [r3, #12]
 801d91a:	4623      	mov	r3, r4
 801d91c:	47b0      	blx	r6
 801d91e:	e74c      	b.n	801d7ba <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801d920:	f10d 0818 	add.w	r8, sp, #24
 801d924:	4639      	mov	r1, r7
 801d926:	af04      	add	r7, sp, #16
 801d928:	4640      	mov	r0, r8
 801d92a:	f7fb ffdb 	bl	80198e4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801d92e:	e898 0003 	ldmia.w	r8, {r0, r1}
 801d932:	e887 0003 	stmia.w	r7, {r0, r1}
 801d936:	4638      	mov	r0, r7
 801d938:	4621      	mov	r1, r4
 801d93a:	f7f2 fcab 	bl	8010294 <_ZN8touchgfx4RectaNERKS0_>
 801d93e:	4638      	mov	r0, r7
 801d940:	f7f2 fceb 	bl	801031a <_ZNK8touchgfx4Rect7isEmptyEv>
 801d944:	b138      	cbz	r0, 801d956 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x222>
 801d946:	4623      	mov	r3, r4
 801d948:	9600      	str	r6, [sp, #0]
 801d94a:	aa02      	add	r2, sp, #8
 801d94c:	4649      	mov	r1, r9
 801d94e:	4628      	mov	r0, r5
 801d950:	f7ff fdca 	bl	801d4e8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801d954:	e731      	b.n	801d7ba <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801d956:	f8da 3000 	ldr.w	r3, [sl]
 801d95a:	aa02      	add	r2, sp, #8
 801d95c:	4629      	mov	r1, r5
 801d95e:	e9cd 6000 	strd	r6, r0, [sp]
 801d962:	4650      	mov	r0, sl
 801d964:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 801d968:	463b      	mov	r3, r7
 801d96a:	47d8      	blx	fp
 801d96c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801d970:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801d974:	4293      	cmp	r3, r2
 801d976:	dd13      	ble.n	801d9a0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x26c>
 801d978:	f9b4 0000 	ldrsh.w	r0, [r4]
 801d97c:	1a9b      	subs	r3, r3, r2
 801d97e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801d982:	f8ad 0018 	strh.w	r0, [sp, #24]
 801d986:	4628      	mov	r0, r5
 801d988:	f8ad 201a 	strh.w	r2, [sp, #26]
 801d98c:	aa02      	add	r2, sp, #8
 801d98e:	f8ad 101c 	strh.w	r1, [sp, #28]
 801d992:	4649      	mov	r1, r9
 801d994:	f8ad 301e 	strh.w	r3, [sp, #30]
 801d998:	4643      	mov	r3, r8
 801d99a:	9600      	str	r6, [sp, #0]
 801d99c:	f7ff fda4 	bl	801d4e8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801d9a0:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801d9a4:	f9b4 2000 	ldrsh.w	r2, [r4]
 801d9a8:	4293      	cmp	r3, r2
 801d9aa:	dd13      	ble.n	801d9d4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2a0>
 801d9ac:	1a9b      	subs	r3, r3, r2
 801d9ae:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801d9b2:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801d9b6:	f8ad 2018 	strh.w	r2, [sp, #24]
 801d9ba:	aa02      	add	r2, sp, #8
 801d9bc:	f8ad 001a 	strh.w	r0, [sp, #26]
 801d9c0:	4628      	mov	r0, r5
 801d9c2:	f8ad 301c 	strh.w	r3, [sp, #28]
 801d9c6:	4643      	mov	r3, r8
 801d9c8:	f8ad 101e 	strh.w	r1, [sp, #30]
 801d9cc:	4649      	mov	r1, r9
 801d9ce:	9600      	str	r6, [sp, #0]
 801d9d0:	f7ff fd8a 	bl	801d4e8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801d9d4:	88a2      	ldrh	r2, [r4, #4]
 801d9d6:	8823      	ldrh	r3, [r4, #0]
 801d9d8:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801d9dc:	4413      	add	r3, r2
 801d9de:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801d9e2:	440a      	add	r2, r1
 801d9e4:	b29b      	uxth	r3, r3
 801d9e6:	b292      	uxth	r2, r2
 801d9e8:	b218      	sxth	r0, r3
 801d9ea:	b211      	sxth	r1, r2
 801d9ec:	4288      	cmp	r0, r1
 801d9ee:	dd13      	ble.n	801da18 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2e4>
 801d9f0:	1a9b      	subs	r3, r3, r2
 801d9f2:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801d9f6:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 801d9fa:	aa02      	add	r2, sp, #8
 801d9fc:	f8ad 1018 	strh.w	r1, [sp, #24]
 801da00:	4649      	mov	r1, r9
 801da02:	f8ad 301c 	strh.w	r3, [sp, #28]
 801da06:	4643      	mov	r3, r8
 801da08:	f8ad 001e 	strh.w	r0, [sp, #30]
 801da0c:	4628      	mov	r0, r5
 801da0e:	9600      	str	r6, [sp, #0]
 801da10:	f8ad 701a 	strh.w	r7, [sp, #26]
 801da14:	f7ff fd68 	bl	801d4e8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801da18:	88e2      	ldrh	r2, [r4, #6]
 801da1a:	8863      	ldrh	r3, [r4, #2]
 801da1c:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801da20:	4413      	add	r3, r2
 801da22:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801da26:	440a      	add	r2, r1
 801da28:	b29b      	uxth	r3, r3
 801da2a:	b292      	uxth	r2, r2
 801da2c:	b218      	sxth	r0, r3
 801da2e:	b211      	sxth	r1, r2
 801da30:	4288      	cmp	r0, r1
 801da32:	f77f aec2 	ble.w	801d7ba <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801da36:	f9b4 7000 	ldrsh.w	r7, [r4]
 801da3a:	1a9b      	subs	r3, r3, r2
 801da3c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801da40:	f8ad 301e 	strh.w	r3, [sp, #30]
 801da44:	4643      	mov	r3, r8
 801da46:	f8ad 7018 	strh.w	r7, [sp, #24]
 801da4a:	f8ad 101a 	strh.w	r1, [sp, #26]
 801da4e:	f8ad 001c 	strh.w	r0, [sp, #28]
 801da52:	9600      	str	r6, [sp, #0]
 801da54:	e779      	b.n	801d94a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x216>
 801da56:	bf00      	nop
 801da58:	20027bc4 	.word	0x20027bc4

0801da5c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 801da5c:	b180      	cbz	r0, 801da80 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 801da5e:	2903      	cmp	r1, #3
 801da60:	d81c      	bhi.n	801da9c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801da62:	e8df f001 	tbb	[pc, r1]
 801da66:	1d02      	.short	0x1d02
 801da68:	1f08      	.short	0x1f08
 801da6a:	4b10      	ldr	r3, [pc, #64]	; (801daac <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801da6c:	8818      	ldrh	r0, [r3, #0]
 801da6e:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801da72:	4240      	negs	r0, r0
 801da74:	4770      	bx	lr
 801da76:	4b0d      	ldr	r3, [pc, #52]	; (801daac <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801da78:	8818      	ldrh	r0, [r3, #0]
 801da7a:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801da7e:	4770      	bx	lr
 801da80:	2903      	cmp	r1, #3
 801da82:	d80b      	bhi.n	801da9c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801da84:	a301      	add	r3, pc, #4	; (adr r3, 801da8c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 801da86:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801da8a:	bf00      	nop
 801da8c:	0801daa1 	.word	0x0801daa1
 801da90:	0801da77 	.word	0x0801da77
 801da94:	0801daa5 	.word	0x0801daa5
 801da98:	0801da6b 	.word	0x0801da6b
 801da9c:	2000      	movs	r0, #0
 801da9e:	4770      	bx	lr
 801daa0:	2001      	movs	r0, #1
 801daa2:	4770      	bx	lr
 801daa4:	f04f 30ff 	mov.w	r0, #4294967295
 801daa8:	4770      	bx	lr
 801daaa:	bf00      	nop
 801daac:	20027bbe 	.word	0x20027bbe

0801dab0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 801dab0:	b180      	cbz	r0, 801dad4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 801dab2:	2903      	cmp	r1, #3
 801dab4:	d81c      	bhi.n	801daf0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 801dab6:	e8df f001 	tbb	[pc, r1]
 801daba:	021d      	.short	0x021d
 801dabc:	071f      	.short	0x071f
 801dabe:	4b10      	ldr	r3, [pc, #64]	; (801db00 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801dac0:	8818      	ldrh	r0, [r3, #0]
 801dac2:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801dac6:	4770      	bx	lr
 801dac8:	4b0d      	ldr	r3, [pc, #52]	; (801db00 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801daca:	8818      	ldrh	r0, [r3, #0]
 801dacc:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801dad0:	4240      	negs	r0, r0
 801dad2:	4770      	bx	lr
 801dad4:	2903      	cmp	r1, #3
 801dad6:	d80b      	bhi.n	801daf0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 801dad8:	a301      	add	r3, pc, #4	; (adr r3, 801dae0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 801dada:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801dade:	bf00      	nop
 801dae0:	0801dabf 	.word	0x0801dabf
 801dae4:	0801daf9 	.word	0x0801daf9
 801dae8:	0801dac9 	.word	0x0801dac9
 801daec:	0801daf5 	.word	0x0801daf5
 801daf0:	2000      	movs	r0, #0
 801daf2:	4770      	bx	lr
 801daf4:	2001      	movs	r0, #1
 801daf6:	4770      	bx	lr
 801daf8:	f04f 30ff 	mov.w	r0, #4294967295
 801dafc:	4770      	bx	lr
 801dafe:	bf00      	nop
 801db00:	20027bbe 	.word	0x20027bbe

0801db04 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801db04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db08:	b099      	sub	sp, #100	; 0x64
 801db0a:	910b      	str	r1, [sp, #44]	; 0x2c
 801db0c:	a914      	add	r1, sp, #80	; 0x50
 801db0e:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	; 0x88
 801db12:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
 801db16:	f8bd 6094 	ldrh.w	r6, [sp, #148]	; 0x94
 801db1a:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 801db1e:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 801db22:	e881 000c 	stmia.w	r1, {r2, r3}
 801db26:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 801db2a:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 801db2e:	9309      	str	r3, [sp, #36]	; 0x24
 801db30:	f891 900d 	ldrb.w	r9, [r1, #13]
 801db34:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 801db38:	ea4f 1749 	mov.w	r7, r9, lsl #5
 801db3c:	9310      	str	r3, [sp, #64]	; 0x40
 801db3e:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 801db42:	930c      	str	r3, [sp, #48]	; 0x30
 801db44:	f407 7380 	and.w	r3, r7, #256	; 0x100
 801db48:	798f      	ldrb	r7, [r1, #6]
 801db4a:	431f      	orrs	r7, r3
 801db4c:	f000 8195 	beq.w	801de7a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801db50:	ea4f 1909 	mov.w	r9, r9, lsl #4
 801db54:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801db58:	f891 9007 	ldrb.w	r9, [r1, #7]
 801db5c:	ea59 0903 	orrs.w	r9, r9, r3
 801db60:	f000 818b 	beq.w	801de7a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801db64:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801db68:	b29b      	uxth	r3, r3
 801db6a:	2d00      	cmp	r5, #0
 801db6c:	f000 812e 	beq.w	801ddcc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c8>
 801db70:	1aed      	subs	r5, r5, r3
 801db72:	b2ad      	uxth	r5, r5
 801db74:	042b      	lsls	r3, r5, #16
 801db76:	d502      	bpl.n	801db7e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801db78:	1b64      	subs	r4, r4, r5
 801db7a:	2500      	movs	r5, #0
 801db7c:	b224      	sxth	r4, r4
 801db7e:	f9b2 1000 	ldrsh.w	r1, [r2]
 801db82:	a814      	add	r0, sp, #80	; 0x50
 801db84:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 801db88:	428c      	cmp	r4, r1
 801db8a:	b28b      	uxth	r3, r1
 801db8c:	bfbf      	itttt	lt
 801db8e:	18ed      	addlt	r5, r5, r3
 801db90:	1b2c      	sublt	r4, r5, r4
 801db92:	b2a5      	uxthlt	r5, r4
 801db94:	460c      	movlt	r4, r1
 801db96:	8891      	ldrh	r1, [r2, #4]
 801db98:	440b      	add	r3, r1
 801db9a:	4621      	mov	r1, r4
 801db9c:	b21b      	sxth	r3, r3
 801db9e:	930f      	str	r3, [sp, #60]	; 0x3c
 801dba0:	88d3      	ldrh	r3, [r2, #6]
 801dba2:	8852      	ldrh	r2, [r2, #2]
 801dba4:	4413      	add	r3, r2
 801dba6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801dba8:	b21b      	sxth	r3, r3
 801dbaa:	930d      	str	r3, [sp, #52]	; 0x34
 801dbac:	4bbd      	ldr	r3, [pc, #756]	; (801dea4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 801dbae:	f893 b000 	ldrb.w	fp, [r3]
 801dbb2:	f10b 3cff 	add.w	ip, fp, #4294967295
 801dbb6:	f1dc 0300 	rsbs	r3, ip, #0
 801dbba:	eb43 030c 	adc.w	r3, r3, ip
 801dbbe:	930e      	str	r3, [sp, #56]	; 0x38
 801dbc0:	4653      	mov	r3, sl
 801dbc2:	f7f7 fffb 	bl	8015bbc <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801dbc6:	4621      	mov	r1, r4
 801dbc8:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 801dbcc:	4653      	mov	r3, sl
 801dbce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801dbd0:	a814      	add	r0, sp, #80	; 0x50
 801dbd2:	f7f8 f810 	bl	8015bf6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801dbd6:	a918      	add	r1, sp, #96	; 0x60
 801dbd8:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801dbdc:	a817      	add	r0, sp, #92	; 0x5c
 801dbde:	f7f8 f931 	bl	8015e44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801dbe2:	f1ba 0f00 	cmp.w	sl, #0
 801dbe6:	f040 80f4 	bne.w	801ddd2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 801dbea:	f1bb 0f01 	cmp.w	fp, #1
 801dbee:	f040 80f8 	bne.w	801dde2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 801dbf2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801dbf4:	2b00      	cmp	r3, #0
 801dbf6:	f040 8145 	bne.w	801de84 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 801dbfa:	b2ba      	uxth	r2, r7
 801dbfc:	b905      	cbnz	r5, 801dc00 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
 801dbfe:	b16e      	cbz	r6, 801dc1c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
 801dc00:	fb06 5302 	mla	r3, r6, r2, r5
 801dc04:	9828      	ldr	r0, [sp, #160]	; 0xa0
 801dc06:	4631      	mov	r1, r6
 801dc08:	fb08 f303 	mul.w	r3, r8, r3
 801dc0c:	f003 0607 	and.w	r6, r3, #7
 801dc10:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
 801dc14:	9328      	str	r3, [sp, #160]	; 0xa0
 801dc16:	eba9 0301 	sub.w	r3, r9, r1
 801dc1a:	930a      	str	r3, [sp, #40]	; 0x28
 801dc1c:	4651      	mov	r1, sl
 801dc1e:	980e      	ldr	r0, [sp, #56]	; 0x38
 801dc20:	f7ff ff1c 	bl	801da5c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 801dc24:	4681      	mov	r9, r0
 801dc26:	980e      	ldr	r0, [sp, #56]	; 0x38
 801dc28:	f7ff ff42 	bl	801dab0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 801dc2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801dc2e:	9909      	ldr	r1, [sp, #36]	; 0x24
 801dc30:	4683      	mov	fp, r0
 801dc32:	eba3 0a01 	sub.w	sl, r3, r1
 801dc36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dc38:	459a      	cmp	sl, r3
 801dc3a:	bfa8      	it	ge
 801dc3c:	469a      	movge	sl, r3
 801dc3e:	f1ba 0f00 	cmp.w	sl, #0
 801dc42:	f340 811a 	ble.w	801de7a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801dc46:	1b64      	subs	r4, r4, r5
 801dc48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801dc4a:	1b1c      	subs	r4, r3, r4
 801dc4c:	42bc      	cmp	r4, r7
 801dc4e:	bfd4      	ite	le
 801dc50:	ebc5 0504 	rsble	r5, r5, r4
 801dc54:	ebc5 0507 	rsbgt	r5, r5, r7
 801dc58:	2d00      	cmp	r5, #0
 801dc5a:	f340 810e 	ble.w	801de7a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801dc5e:	1b52      	subs	r2, r2, r5
 801dc60:	fb08 f302 	mul.w	r3, r8, r2
 801dc64:	930f      	str	r3, [sp, #60]	; 0x3c
 801dc66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dc68:	2b00      	cmp	r3, #0
 801dc6a:	f040 8116 	bne.w	801de9a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 801dc6e:	4b8e      	ldr	r3, [pc, #568]	; (801dea8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 801dc70:	6818      	ldr	r0, [r3, #0]
 801dc72:	6803      	ldr	r3, [r0, #0]
 801dc74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dc76:	4798      	blx	r3
 801dc78:	2301      	movs	r3, #1
 801dc7a:	4a8c      	ldr	r2, [pc, #560]	; (801deac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 801dc7c:	fa03 f308 	lsl.w	r3, r3, r8
 801dc80:	8811      	ldrh	r1, [r2, #0]
 801dc82:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801dc86:	3b01      	subs	r3, #1
 801dc88:	b2db      	uxtb	r3, r3
 801dc8a:	930e      	str	r3, [sp, #56]	; 0x38
 801dc8c:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801dc90:	fb01 2303 	mla	r3, r1, r3, r2
 801dc94:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801dc98:	930a      	str	r3, [sp, #40]	; 0x28
 801dc9a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801dc9c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801dca0:	9313      	str	r3, [sp, #76]	; 0x4c
 801dca2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801dca4:	0a19      	lsrs	r1, r3, #8
 801dca6:	b2cb      	uxtb	r3, r1
 801dca8:	9312      	str	r3, [sp, #72]	; 0x48
 801dcaa:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801dcac:	b2db      	uxtb	r3, r3
 801dcae:	9311      	str	r3, [sp, #68]	; 0x44
 801dcb0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801dcb2:	095a      	lsrs	r2, r3, #5
 801dcb4:	4b7e      	ldr	r3, [pc, #504]	; (801deb0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 801dcb6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801dcba:	400b      	ands	r3, r1
 801dcbc:	4313      	orrs	r3, r2
 801dcbe:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801dcc0:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801dcc4:	4313      	orrs	r3, r2
 801dcc6:	b29b      	uxth	r3, r3
 801dcc8:	9310      	str	r3, [sp, #64]	; 0x40
 801dcca:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801dccc:	781a      	ldrb	r2, [r3, #0]
 801dcce:	ea4f 0349 	mov.w	r3, r9, lsl #1
 801dcd2:	fb05 b919 	mls	r9, r5, r9, fp
 801dcd6:	4132      	asrs	r2, r6
 801dcd8:	fb03 fb05 	mul.w	fp, r3, r5
 801dcdc:	930d      	str	r3, [sp, #52]	; 0x34
 801dcde:	b2d2      	uxtb	r2, r2
 801dce0:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 801dce4:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801dce8:	f0c0 80f5 	bcc.w	801ded6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d2>
 801dcec:	46ae      	mov	lr, r5
 801dcee:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 801dcf2:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801dcf6:	f0c0 80dd 	bcc.w	801deb4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 801dcfa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dcfc:	4013      	ands	r3, r2
 801dcfe:	d055      	beq.n	801ddac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 801dd00:	20ff      	movs	r0, #255	; 0xff
 801dd02:	990e      	ldr	r1, [sp, #56]	; 0x38
 801dd04:	fb90 f1f1 	sdiv	r1, r0, r1
 801dd08:	434b      	muls	r3, r1
 801dd0a:	2bfe      	cmp	r3, #254	; 0xfe
 801dd0c:	dd03      	ble.n	801dd16 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
 801dd0e:	990c      	ldr	r1, [sp, #48]	; 0x30
 801dd10:	4281      	cmp	r1, r0
 801dd12:	f000 80c4 	beq.w	801de9e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 801dd16:	990c      	ldr	r1, [sp, #48]	; 0x30
 801dd18:	f8bc 4000 	ldrh.w	r4, [ip]
 801dd1c:	fb11 f303 	smulbb	r3, r1, r3
 801dd20:	1220      	asrs	r0, r4, #8
 801dd22:	b29b      	uxth	r3, r3
 801dd24:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801dd28:	1c59      	adds	r1, r3, #1
 801dd2a:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801dd2e:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801dd32:	10e1      	asrs	r1, r4, #3
 801dd34:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801dd38:	00e4      	lsls	r4, r4, #3
 801dd3a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801dd3e:	b29f      	uxth	r7, r3
 801dd40:	43db      	mvns	r3, r3
 801dd42:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 801dd46:	b2db      	uxtb	r3, r3
 801dd48:	b2e4      	uxtb	r4, r4
 801dd4a:	9309      	str	r3, [sp, #36]	; 0x24
 801dd4c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801dd4e:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801dd52:	fb13 f907 	smulbb	r9, r3, r7
 801dd56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dd58:	fb00 9003 	mla	r0, r0, r3, r9
 801dd5c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801dd5e:	fb13 f907 	smulbb	r9, r3, r7
 801dd62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dd64:	b280      	uxth	r0, r0
 801dd66:	fb01 9103 	mla	r1, r1, r3, r9
 801dd6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801dd6c:	fb13 f707 	smulbb	r7, r3, r7
 801dd70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dd72:	b289      	uxth	r1, r1
 801dd74:	fb04 7403 	mla	r4, r4, r3, r7
 801dd78:	1c43      	adds	r3, r0, #1
 801dd7a:	b2a4      	uxth	r4, r4
 801dd7c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801dd80:	f104 0901 	add.w	r9, r4, #1
 801dd84:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801dd88:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 801dd8c:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 801dd90:	ea49 0000 	orr.w	r0, r9, r0
 801dd94:	f101 0901 	add.w	r9, r1, #1
 801dd98:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 801dd9c:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801dda0:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801dda4:	ea40 0009 	orr.w	r0, r0, r9
 801dda8:	f8ac 0000 	strh.w	r0, [ip]
 801ddac:	4446      	add	r6, r8
 801ddae:	b2b6      	uxth	r6, r6
 801ddb0:	2e07      	cmp	r6, #7
 801ddb2:	bf89      	itett	hi
 801ddb4:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 801ddb6:	fa42 f208 	asrls.w	r2, r2, r8
 801ddba:	2600      	movhi	r6, #0
 801ddbc:	785a      	ldrbhi	r2, [r3, #1]
 801ddbe:	bf8a      	itet	hi
 801ddc0:	3301      	addhi	r3, #1
 801ddc2:	b2d2      	uxtbls	r2, r2
 801ddc4:	9328      	strhi	r3, [sp, #160]	; 0xa0
 801ddc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ddc8:	449c      	add	ip, r3
 801ddca:	e792      	b.n	801dcf2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 801ddcc:	441c      	add	r4, r3
 801ddce:	b224      	sxth	r4, r4
 801ddd0:	e6d5      	b.n	801db7e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801ddd2:	f1ba 0f01 	cmp.w	sl, #1
 801ddd6:	f47f af0c 	bne.w	801dbf2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801ddda:	f1bb 0f01 	cmp.w	fp, #1
 801ddde:	f47f af08 	bne.w	801dbf2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801dde2:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 801dea8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>
 801dde6:	f8db 0000 	ldr.w	r0, [fp]
 801ddea:	6803      	ldr	r3, [r0, #0]
 801ddec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ddee:	4798      	blx	r3
 801ddf0:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 801ddf4:	465a      	mov	r2, fp
 801ddf6:	d006      	beq.n	801de06 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 801ddf8:	f1b8 0f04 	cmp.w	r8, #4
 801ddfc:	d140      	bne.n	801de80 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 801ddfe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801de00:	3300      	adds	r3, #0
 801de02:	bf18      	it	ne
 801de04:	2301      	movne	r3, #1
 801de06:	0580      	lsls	r0, r0, #22
 801de08:	d56e      	bpl.n	801dee8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 801de0a:	f1b8 0f08 	cmp.w	r8, #8
 801de0e:	d16b      	bne.n	801dee8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 801de10:	2b00      	cmp	r3, #0
 801de12:	bf0c      	ite	eq
 801de14:	f44f 7100 	moveq.w	r1, #512	; 0x200
 801de18:	f44f 7180 	movne.w	r1, #256	; 0x100
 801de1c:	2d00      	cmp	r5, #0
 801de1e:	f47f aee8 	bne.w	801dbf2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801de22:	2e00      	cmp	r6, #0
 801de24:	f47f aee5 	bne.w	801dbf2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801de28:	19e3      	adds	r3, r4, r7
 801de2a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801de2c:	4283      	cmp	r3, r0
 801de2e:	f73f aee0 	bgt.w	801dbf2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801de32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801de34:	980d      	ldr	r0, [sp, #52]	; 0x34
 801de36:	444b      	add	r3, r9
 801de38:	4283      	cmp	r3, r0
 801de3a:	f73f aeda 	bgt.w	801dbf2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801de3e:	b2bf      	uxth	r7, r7
 801de40:	f1b8 0f08 	cmp.w	r8, #8
 801de44:	6810      	ldr	r0, [r2, #0]
 801de46:	f04f 0500 	mov.w	r5, #0
 801de4a:	bf18      	it	ne
 801de4c:	3701      	addne	r7, #1
 801de4e:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 801de52:	6804      	ldr	r4, [r0, #0]
 801de54:	bf18      	it	ne
 801de56:	f027 0701 	bicne.w	r7, r7, #1
 801de5a:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 801de5e:	e9cd 1505 	strd	r1, r5, [sp, #20]
 801de62:	990c      	ldr	r1, [sp, #48]	; 0x30
 801de64:	bf18      	it	ne
 801de66:	b2bf      	uxthne	r7, r7
 801de68:	9104      	str	r1, [sp, #16]
 801de6a:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801de6c:	e9cd 7900 	strd	r7, r9, [sp]
 801de70:	e9cd 7102 	strd	r7, r1, [sp, #8]
 801de74:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801de76:	6d64      	ldr	r4, [r4, #84]	; 0x54
 801de78:	47a0      	blx	r4
 801de7a:	b019      	add	sp, #100	; 0x64
 801de7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801de80:	2300      	movs	r3, #0
 801de82:	e7c0      	b.n	801de06 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 801de84:	2208      	movs	r2, #8
 801de86:	fb92 f3f8 	sdiv	r3, r2, r8
 801de8a:	1e5a      	subs	r2, r3, #1
 801de8c:	443a      	add	r2, r7
 801de8e:	fb92 f2f3 	sdiv	r2, r2, r3
 801de92:	fb12 f203 	smulbb	r2, r2, r3
 801de96:	b292      	uxth	r2, r2
 801de98:	e6b0      	b.n	801dbfc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
 801de9a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801de9c:	e6ec      	b.n	801dc78 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
 801de9e:	9810      	ldr	r0, [sp, #64]	; 0x40
 801dea0:	e782      	b.n	801dda8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
 801dea2:	bf00      	nop
 801dea4:	20027bbc 	.word	0x20027bbc
 801dea8:	20027bc4 	.word	0x20027bc4
 801deac:	20027bbe 	.word	0x20027bbe
 801deb0:	00fff800 	.word	0x00fff800
 801deb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801deb6:	b153      	cbz	r3, 801dece <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
 801deb8:	441e      	add	r6, r3
 801deba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801debc:	b2b6      	uxth	r6, r6
 801debe:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
 801dec2:	f006 0607 	and.w	r6, r6, #7
 801dec6:	781a      	ldrb	r2, [r3, #0]
 801dec8:	9328      	str	r3, [sp, #160]	; 0xa0
 801deca:	4132      	asrs	r2, r6
 801decc:	b2d2      	uxtb	r2, r2
 801dece:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ded0:	445b      	add	r3, fp
 801ded2:	930a      	str	r3, [sp, #40]	; 0x28
 801ded4:	e706      	b.n	801dce4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
 801ded6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ded8:	2b00      	cmp	r3, #0
 801deda:	d1ce      	bne.n	801de7a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801dedc:	4b05      	ldr	r3, [pc, #20]	; (801def4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f0>)
 801dede:	6818      	ldr	r0, [r3, #0]
 801dee0:	6803      	ldr	r3, [r0, #0]
 801dee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dee4:	4798      	blx	r3
 801dee6:	e7c8      	b.n	801de7a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801dee8:	2b00      	cmp	r3, #0
 801deea:	f43f ae82 	beq.w	801dbf2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801deee:	f44f 7180 	mov.w	r1, #256	; 0x100
 801def2:	e793      	b.n	801de1c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
 801def4:	20027bc4 	.word	0x20027bc4

0801def8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 801def8:	b538      	push	{r3, r4, r5, lr}
 801defa:	4c15      	ldr	r4, [pc, #84]	; (801df50 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 801defc:	4605      	mov	r5, r0
 801defe:	7823      	ldrb	r3, [r4, #0]
 801df00:	f3bf 8f5b 	dmb	ish
 801df04:	07da      	lsls	r2, r3, #31
 801df06:	d40b      	bmi.n	801df20 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 801df08:	4620      	mov	r0, r4
 801df0a:	f007 fe54 	bl	8025bb6 <__cxa_guard_acquire>
 801df0e:	b138      	cbz	r0, 801df20 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 801df10:	4620      	mov	r0, r4
 801df12:	f007 fe5c 	bl	8025bce <__cxa_guard_release>
 801df16:	4a0f      	ldr	r2, [pc, #60]	; (801df54 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801df18:	490f      	ldr	r1, [pc, #60]	; (801df58 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 801df1a:	4810      	ldr	r0, [pc, #64]	; (801df5c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801df1c:	f007 fe44 	bl	8025ba8 <__aeabi_atexit>
 801df20:	4c0f      	ldr	r4, [pc, #60]	; (801df60 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 801df22:	7823      	ldrb	r3, [r4, #0]
 801df24:	f3bf 8f5b 	dmb	ish
 801df28:	07db      	lsls	r3, r3, #31
 801df2a:	d40b      	bmi.n	801df44 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 801df2c:	4620      	mov	r0, r4
 801df2e:	f007 fe42 	bl	8025bb6 <__cxa_guard_acquire>
 801df32:	b138      	cbz	r0, 801df44 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 801df34:	4620      	mov	r0, r4
 801df36:	f007 fe4a 	bl	8025bce <__cxa_guard_release>
 801df3a:	4a06      	ldr	r2, [pc, #24]	; (801df54 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801df3c:	4909      	ldr	r1, [pc, #36]	; (801df64 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 801df3e:	480a      	ldr	r0, [pc, #40]	; (801df68 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801df40:	f007 fe32 	bl	8025ba8 <__aeabi_atexit>
 801df44:	4b05      	ldr	r3, [pc, #20]	; (801df5c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801df46:	612b      	str	r3, [r5, #16]
 801df48:	4b07      	ldr	r3, [pc, #28]	; (801df68 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801df4a:	616b      	str	r3, [r5, #20]
 801df4c:	bd38      	pop	{r3, r4, r5, pc}
 801df4e:	bf00      	nop
 801df50:	20027c98 	.word	0x20027c98
 801df54:	20000000 	.word	0x20000000
 801df58:	0801c105 	.word	0x0801c105
 801df5c:	200000b4 	.word	0x200000b4
 801df60:	20027c9c 	.word	0x20027c9c
 801df64:	0801c103 	.word	0x0801c103
 801df68:	200000b8 	.word	0x200000b8

0801df6c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 801df6c:	b538      	push	{r3, r4, r5, lr}
 801df6e:	4c15      	ldr	r4, [pc, #84]	; (801dfc4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 801df70:	4605      	mov	r5, r0
 801df72:	7823      	ldrb	r3, [r4, #0]
 801df74:	f3bf 8f5b 	dmb	ish
 801df78:	07da      	lsls	r2, r3, #31
 801df7a:	d40b      	bmi.n	801df94 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 801df7c:	4620      	mov	r0, r4
 801df7e:	f007 fe1a 	bl	8025bb6 <__cxa_guard_acquire>
 801df82:	b138      	cbz	r0, 801df94 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 801df84:	4620      	mov	r0, r4
 801df86:	f007 fe22 	bl	8025bce <__cxa_guard_release>
 801df8a:	4a0f      	ldr	r2, [pc, #60]	; (801dfc8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801df8c:	490f      	ldr	r1, [pc, #60]	; (801dfcc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 801df8e:	4810      	ldr	r0, [pc, #64]	; (801dfd0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801df90:	f007 fe0a 	bl	8025ba8 <__aeabi_atexit>
 801df94:	4c0f      	ldr	r4, [pc, #60]	; (801dfd4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 801df96:	7823      	ldrb	r3, [r4, #0]
 801df98:	f3bf 8f5b 	dmb	ish
 801df9c:	07db      	lsls	r3, r3, #31
 801df9e:	d40b      	bmi.n	801dfb8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 801dfa0:	4620      	mov	r0, r4
 801dfa2:	f007 fe08 	bl	8025bb6 <__cxa_guard_acquire>
 801dfa6:	b138      	cbz	r0, 801dfb8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 801dfa8:	4620      	mov	r0, r4
 801dfaa:	f007 fe10 	bl	8025bce <__cxa_guard_release>
 801dfae:	4a06      	ldr	r2, [pc, #24]	; (801dfc8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801dfb0:	4909      	ldr	r1, [pc, #36]	; (801dfd8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 801dfb2:	480a      	ldr	r0, [pc, #40]	; (801dfdc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801dfb4:	f007 fdf8 	bl	8025ba8 <__aeabi_atexit>
 801dfb8:	4b05      	ldr	r3, [pc, #20]	; (801dfd0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801dfba:	60ab      	str	r3, [r5, #8]
 801dfbc:	4b07      	ldr	r3, [pc, #28]	; (801dfdc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801dfbe:	60eb      	str	r3, [r5, #12]
 801dfc0:	bd38      	pop	{r3, r4, r5, pc}
 801dfc2:	bf00      	nop
 801dfc4:	20027c70 	.word	0x20027c70
 801dfc8:	20000000 	.word	0x20000000
 801dfcc:	0801c109 	.word	0x0801c109
 801dfd0:	2000008c 	.word	0x2000008c
 801dfd4:	20027c74 	.word	0x20027c74
 801dfd8:	0801c107 	.word	0x0801c107
 801dfdc:	20000090 	.word	0x20000090

0801dfe0 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 801dfe0:	b510      	push	{r4, lr}
 801dfe2:	4604      	mov	r4, r0
 801dfe4:	f7ff ff88 	bl	801def8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 801dfe8:	4620      	mov	r0, r4
 801dfea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dfee:	f7ff bfbd 	b.w	801df6c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

0801dff4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801dff4:	b538      	push	{r3, r4, r5, lr}
 801dff6:	4c15      	ldr	r4, [pc, #84]	; (801e04c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801dff8:	4605      	mov	r5, r0
 801dffa:	7823      	ldrb	r3, [r4, #0]
 801dffc:	f3bf 8f5b 	dmb	ish
 801e000:	07da      	lsls	r2, r3, #31
 801e002:	d40b      	bmi.n	801e01c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801e004:	4620      	mov	r0, r4
 801e006:	f007 fdd6 	bl	8025bb6 <__cxa_guard_acquire>
 801e00a:	b138      	cbz	r0, 801e01c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801e00c:	4620      	mov	r0, r4
 801e00e:	f007 fdde 	bl	8025bce <__cxa_guard_release>
 801e012:	4a0f      	ldr	r2, [pc, #60]	; (801e050 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801e014:	490f      	ldr	r1, [pc, #60]	; (801e054 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801e016:	4810      	ldr	r0, [pc, #64]	; (801e058 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801e018:	f007 fdc6 	bl	8025ba8 <__aeabi_atexit>
 801e01c:	4c0f      	ldr	r4, [pc, #60]	; (801e05c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801e01e:	7823      	ldrb	r3, [r4, #0]
 801e020:	f3bf 8f5b 	dmb	ish
 801e024:	07db      	lsls	r3, r3, #31
 801e026:	d40b      	bmi.n	801e040 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801e028:	4620      	mov	r0, r4
 801e02a:	f007 fdc4 	bl	8025bb6 <__cxa_guard_acquire>
 801e02e:	b138      	cbz	r0, 801e040 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801e030:	4620      	mov	r0, r4
 801e032:	f007 fdcc 	bl	8025bce <__cxa_guard_release>
 801e036:	4a06      	ldr	r2, [pc, #24]	; (801e050 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801e038:	4909      	ldr	r1, [pc, #36]	; (801e060 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801e03a:	480a      	ldr	r0, [pc, #40]	; (801e064 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801e03c:	f007 fdb4 	bl	8025ba8 <__aeabi_atexit>
 801e040:	4b05      	ldr	r3, [pc, #20]	; (801e058 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801e042:	622b      	str	r3, [r5, #32]
 801e044:	4b07      	ldr	r3, [pc, #28]	; (801e064 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801e046:	626b      	str	r3, [r5, #36]	; 0x24
 801e048:	bd38      	pop	{r3, r4, r5, pc}
 801e04a:	bf00      	nop
 801e04c:	20027ca0 	.word	0x20027ca0
 801e050:	20000000 	.word	0x20000000
 801e054:	0801c0fd 	.word	0x0801c0fd
 801e058:	200000bc 	.word	0x200000bc
 801e05c:	20027ca4 	.word	0x20027ca4
 801e060:	0801c0fb 	.word	0x0801c0fb
 801e064:	200000c0 	.word	0x200000c0

0801e068 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801e068:	b538      	push	{r3, r4, r5, lr}
 801e06a:	4c15      	ldr	r4, [pc, #84]	; (801e0c0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801e06c:	4605      	mov	r5, r0
 801e06e:	7823      	ldrb	r3, [r4, #0]
 801e070:	f3bf 8f5b 	dmb	ish
 801e074:	07da      	lsls	r2, r3, #31
 801e076:	d40b      	bmi.n	801e090 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801e078:	4620      	mov	r0, r4
 801e07a:	f007 fd9c 	bl	8025bb6 <__cxa_guard_acquire>
 801e07e:	b138      	cbz	r0, 801e090 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801e080:	4620      	mov	r0, r4
 801e082:	f007 fda4 	bl	8025bce <__cxa_guard_release>
 801e086:	4a0f      	ldr	r2, [pc, #60]	; (801e0c4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801e088:	490f      	ldr	r1, [pc, #60]	; (801e0c8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801e08a:	4810      	ldr	r0, [pc, #64]	; (801e0cc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801e08c:	f007 fd8c 	bl	8025ba8 <__aeabi_atexit>
 801e090:	4c0f      	ldr	r4, [pc, #60]	; (801e0d0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801e092:	7823      	ldrb	r3, [r4, #0]
 801e094:	f3bf 8f5b 	dmb	ish
 801e098:	07db      	lsls	r3, r3, #31
 801e09a:	d40b      	bmi.n	801e0b4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801e09c:	4620      	mov	r0, r4
 801e09e:	f007 fd8a 	bl	8025bb6 <__cxa_guard_acquire>
 801e0a2:	b138      	cbz	r0, 801e0b4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801e0a4:	4620      	mov	r0, r4
 801e0a6:	f007 fd92 	bl	8025bce <__cxa_guard_release>
 801e0aa:	4a06      	ldr	r2, [pc, #24]	; (801e0c4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801e0ac:	4909      	ldr	r1, [pc, #36]	; (801e0d4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801e0ae:	480a      	ldr	r0, [pc, #40]	; (801e0d8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801e0b0:	f007 fd7a 	bl	8025ba8 <__aeabi_atexit>
 801e0b4:	4b05      	ldr	r3, [pc, #20]	; (801e0cc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801e0b6:	61ab      	str	r3, [r5, #24]
 801e0b8:	4b07      	ldr	r3, [pc, #28]	; (801e0d8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801e0ba:	61eb      	str	r3, [r5, #28]
 801e0bc:	bd38      	pop	{r3, r4, r5, pc}
 801e0be:	bf00      	nop
 801e0c0:	20027c78 	.word	0x20027c78
 801e0c4:	20000000 	.word	0x20000000
 801e0c8:	0801c101 	.word	0x0801c101
 801e0cc:	20000094 	.word	0x20000094
 801e0d0:	20027c7c 	.word	0x20027c7c
 801e0d4:	0801c0ff 	.word	0x0801c0ff
 801e0d8:	20000098 	.word	0x20000098

0801e0dc <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 801e0dc:	b510      	push	{r4, lr}
 801e0de:	4604      	mov	r4, r0
 801e0e0:	f7ff ff88 	bl	801dff4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801e0e4:	4620      	mov	r0, r4
 801e0e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e0ea:	f7ff bfbd 	b.w	801e068 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801e0f0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801e0f0:	b538      	push	{r3, r4, r5, lr}
 801e0f2:	4c15      	ldr	r4, [pc, #84]	; (801e148 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801e0f4:	4605      	mov	r5, r0
 801e0f6:	7823      	ldrb	r3, [r4, #0]
 801e0f8:	f3bf 8f5b 	dmb	ish
 801e0fc:	07da      	lsls	r2, r3, #31
 801e0fe:	d40b      	bmi.n	801e118 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801e100:	4620      	mov	r0, r4
 801e102:	f007 fd58 	bl	8025bb6 <__cxa_guard_acquire>
 801e106:	b138      	cbz	r0, 801e118 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801e108:	4620      	mov	r0, r4
 801e10a:	f007 fd60 	bl	8025bce <__cxa_guard_release>
 801e10e:	4a0f      	ldr	r2, [pc, #60]	; (801e14c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801e110:	490f      	ldr	r1, [pc, #60]	; (801e150 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801e112:	4810      	ldr	r0, [pc, #64]	; (801e154 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801e114:	f007 fd48 	bl	8025ba8 <__aeabi_atexit>
 801e118:	4c0f      	ldr	r4, [pc, #60]	; (801e158 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801e11a:	7823      	ldrb	r3, [r4, #0]
 801e11c:	f3bf 8f5b 	dmb	ish
 801e120:	07db      	lsls	r3, r3, #31
 801e122:	d40b      	bmi.n	801e13c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801e124:	4620      	mov	r0, r4
 801e126:	f007 fd46 	bl	8025bb6 <__cxa_guard_acquire>
 801e12a:	b138      	cbz	r0, 801e13c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801e12c:	4620      	mov	r0, r4
 801e12e:	f007 fd4e 	bl	8025bce <__cxa_guard_release>
 801e132:	4a06      	ldr	r2, [pc, #24]	; (801e14c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801e134:	4909      	ldr	r1, [pc, #36]	; (801e15c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801e136:	480a      	ldr	r0, [pc, #40]	; (801e160 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801e138:	f007 fd36 	bl	8025ba8 <__aeabi_atexit>
 801e13c:	4b05      	ldr	r3, [pc, #20]	; (801e154 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801e13e:	632b      	str	r3, [r5, #48]	; 0x30
 801e140:	4b07      	ldr	r3, [pc, #28]	; (801e160 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801e142:	636b      	str	r3, [r5, #52]	; 0x34
 801e144:	bd38      	pop	{r3, r4, r5, pc}
 801e146:	bf00      	nop
 801e148:	20027cb0 	.word	0x20027cb0
 801e14c:	20000000 	.word	0x20000000
 801e150:	0801c0f5 	.word	0x0801c0f5
 801e154:	200000cc 	.word	0x200000cc
 801e158:	20027cb4 	.word	0x20027cb4
 801e15c:	0801c0f3 	.word	0x0801c0f3
 801e160:	200000d0 	.word	0x200000d0

0801e164 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801e164:	b538      	push	{r3, r4, r5, lr}
 801e166:	4c15      	ldr	r4, [pc, #84]	; (801e1bc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801e168:	4605      	mov	r5, r0
 801e16a:	7823      	ldrb	r3, [r4, #0]
 801e16c:	f3bf 8f5b 	dmb	ish
 801e170:	07da      	lsls	r2, r3, #31
 801e172:	d40b      	bmi.n	801e18c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801e174:	4620      	mov	r0, r4
 801e176:	f007 fd1e 	bl	8025bb6 <__cxa_guard_acquire>
 801e17a:	b138      	cbz	r0, 801e18c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801e17c:	4620      	mov	r0, r4
 801e17e:	f007 fd26 	bl	8025bce <__cxa_guard_release>
 801e182:	4a0f      	ldr	r2, [pc, #60]	; (801e1c0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801e184:	490f      	ldr	r1, [pc, #60]	; (801e1c4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801e186:	4810      	ldr	r0, [pc, #64]	; (801e1c8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801e188:	f007 fd0e 	bl	8025ba8 <__aeabi_atexit>
 801e18c:	4c0f      	ldr	r4, [pc, #60]	; (801e1cc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801e18e:	7823      	ldrb	r3, [r4, #0]
 801e190:	f3bf 8f5b 	dmb	ish
 801e194:	07db      	lsls	r3, r3, #31
 801e196:	d40b      	bmi.n	801e1b0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801e198:	4620      	mov	r0, r4
 801e19a:	f007 fd0c 	bl	8025bb6 <__cxa_guard_acquire>
 801e19e:	b138      	cbz	r0, 801e1b0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801e1a0:	4620      	mov	r0, r4
 801e1a2:	f007 fd14 	bl	8025bce <__cxa_guard_release>
 801e1a6:	4a06      	ldr	r2, [pc, #24]	; (801e1c0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801e1a8:	4909      	ldr	r1, [pc, #36]	; (801e1d0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801e1aa:	480a      	ldr	r0, [pc, #40]	; (801e1d4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801e1ac:	f007 fcfc 	bl	8025ba8 <__aeabi_atexit>
 801e1b0:	4b05      	ldr	r3, [pc, #20]	; (801e1c8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801e1b2:	62ab      	str	r3, [r5, #40]	; 0x28
 801e1b4:	4b07      	ldr	r3, [pc, #28]	; (801e1d4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801e1b6:	62eb      	str	r3, [r5, #44]	; 0x2c
 801e1b8:	bd38      	pop	{r3, r4, r5, pc}
 801e1ba:	bf00      	nop
 801e1bc:	20027c80 	.word	0x20027c80
 801e1c0:	20000000 	.word	0x20000000
 801e1c4:	0801c0f9 	.word	0x0801c0f9
 801e1c8:	2000009c 	.word	0x2000009c
 801e1cc:	20027c84 	.word	0x20027c84
 801e1d0:	0801c0f7 	.word	0x0801c0f7
 801e1d4:	200000a0 	.word	0x200000a0

0801e1d8 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 801e1d8:	b510      	push	{r4, lr}
 801e1da:	4604      	mov	r4, r0
 801e1dc:	f7ff ff88 	bl	801e0f0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801e1e0:	4620      	mov	r0, r4
 801e1e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e1e6:	f7ff bfbd 	b.w	801e164 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801e1ec <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 801e1ec:	b538      	push	{r3, r4, r5, lr}
 801e1ee:	4c15      	ldr	r4, [pc, #84]	; (801e244 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 801e1f0:	4605      	mov	r5, r0
 801e1f2:	7823      	ldrb	r3, [r4, #0]
 801e1f4:	f3bf 8f5b 	dmb	ish
 801e1f8:	07da      	lsls	r2, r3, #31
 801e1fa:	d40b      	bmi.n	801e214 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 801e1fc:	4620      	mov	r0, r4
 801e1fe:	f007 fcda 	bl	8025bb6 <__cxa_guard_acquire>
 801e202:	b138      	cbz	r0, 801e214 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 801e204:	4620      	mov	r0, r4
 801e206:	f007 fce2 	bl	8025bce <__cxa_guard_release>
 801e20a:	4a0f      	ldr	r2, [pc, #60]	; (801e248 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801e20c:	490f      	ldr	r1, [pc, #60]	; (801e24c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 801e20e:	4810      	ldr	r0, [pc, #64]	; (801e250 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801e210:	f007 fcca 	bl	8025ba8 <__aeabi_atexit>
 801e214:	4c0f      	ldr	r4, [pc, #60]	; (801e254 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 801e216:	7823      	ldrb	r3, [r4, #0]
 801e218:	f3bf 8f5b 	dmb	ish
 801e21c:	07db      	lsls	r3, r3, #31
 801e21e:	d40b      	bmi.n	801e238 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 801e220:	4620      	mov	r0, r4
 801e222:	f007 fcc8 	bl	8025bb6 <__cxa_guard_acquire>
 801e226:	b138      	cbz	r0, 801e238 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 801e228:	4620      	mov	r0, r4
 801e22a:	f007 fcd0 	bl	8025bce <__cxa_guard_release>
 801e22e:	4a06      	ldr	r2, [pc, #24]	; (801e248 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801e230:	4909      	ldr	r1, [pc, #36]	; (801e258 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 801e232:	480a      	ldr	r0, [pc, #40]	; (801e25c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 801e234:	f007 fcb8 	bl	8025ba8 <__aeabi_atexit>
 801e238:	4b05      	ldr	r3, [pc, #20]	; (801e250 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801e23a:	652b      	str	r3, [r5, #80]	; 0x50
 801e23c:	4b07      	ldr	r3, [pc, #28]	; (801e25c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 801e23e:	656b      	str	r3, [r5, #84]	; 0x54
 801e240:	bd38      	pop	{r3, r4, r5, pc}
 801e242:	bf00      	nop
 801e244:	20027cb8 	.word	0x20027cb8
 801e248:	20000000 	.word	0x20000000
 801e24c:	0801c0e5 	.word	0x0801c0e5
 801e250:	200000d4 	.word	0x200000d4
 801e254:	20027cbc 	.word	0x20027cbc
 801e258:	0801c0e3 	.word	0x0801c0e3
 801e25c:	200000d8 	.word	0x200000d8

0801e260 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 801e260:	b538      	push	{r3, r4, r5, lr}
 801e262:	4c15      	ldr	r4, [pc, #84]	; (801e2b8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 801e264:	4605      	mov	r5, r0
 801e266:	7823      	ldrb	r3, [r4, #0]
 801e268:	f3bf 8f5b 	dmb	ish
 801e26c:	07da      	lsls	r2, r3, #31
 801e26e:	d40b      	bmi.n	801e288 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 801e270:	4620      	mov	r0, r4
 801e272:	f007 fca0 	bl	8025bb6 <__cxa_guard_acquire>
 801e276:	b138      	cbz	r0, 801e288 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 801e278:	4620      	mov	r0, r4
 801e27a:	f007 fca8 	bl	8025bce <__cxa_guard_release>
 801e27e:	4a0f      	ldr	r2, [pc, #60]	; (801e2bc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801e280:	490f      	ldr	r1, [pc, #60]	; (801e2c0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 801e282:	4810      	ldr	r0, [pc, #64]	; (801e2c4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801e284:	f007 fc90 	bl	8025ba8 <__aeabi_atexit>
 801e288:	4c0f      	ldr	r4, [pc, #60]	; (801e2c8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 801e28a:	7823      	ldrb	r3, [r4, #0]
 801e28c:	f3bf 8f5b 	dmb	ish
 801e290:	07db      	lsls	r3, r3, #31
 801e292:	d40b      	bmi.n	801e2ac <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 801e294:	4620      	mov	r0, r4
 801e296:	f007 fc8e 	bl	8025bb6 <__cxa_guard_acquire>
 801e29a:	b138      	cbz	r0, 801e2ac <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 801e29c:	4620      	mov	r0, r4
 801e29e:	f007 fc96 	bl	8025bce <__cxa_guard_release>
 801e2a2:	4a06      	ldr	r2, [pc, #24]	; (801e2bc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801e2a4:	4909      	ldr	r1, [pc, #36]	; (801e2cc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 801e2a6:	480a      	ldr	r0, [pc, #40]	; (801e2d0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 801e2a8:	f007 fc7e 	bl	8025ba8 <__aeabi_atexit>
 801e2ac:	4b05      	ldr	r3, [pc, #20]	; (801e2c4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801e2ae:	64ab      	str	r3, [r5, #72]	; 0x48
 801e2b0:	4b07      	ldr	r3, [pc, #28]	; (801e2d0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 801e2b2:	64eb      	str	r3, [r5, #76]	; 0x4c
 801e2b4:	bd38      	pop	{r3, r4, r5, pc}
 801e2b6:	bf00      	nop
 801e2b8:	20027cc0 	.word	0x20027cc0
 801e2bc:	20000000 	.word	0x20000000
 801e2c0:	0801c0e9 	.word	0x0801c0e9
 801e2c4:	200000dc 	.word	0x200000dc
 801e2c8:	20027cc4 	.word	0x20027cc4
 801e2cc:	0801c0e7 	.word	0x0801c0e7
 801e2d0:	200000e0 	.word	0x200000e0

0801e2d4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 801e2d4:	b538      	push	{r3, r4, r5, lr}
 801e2d6:	4c15      	ldr	r4, [pc, #84]	; (801e32c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 801e2d8:	4605      	mov	r5, r0
 801e2da:	7823      	ldrb	r3, [r4, #0]
 801e2dc:	f3bf 8f5b 	dmb	ish
 801e2e0:	07da      	lsls	r2, r3, #31
 801e2e2:	d40b      	bmi.n	801e2fc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 801e2e4:	4620      	mov	r0, r4
 801e2e6:	f007 fc66 	bl	8025bb6 <__cxa_guard_acquire>
 801e2ea:	b138      	cbz	r0, 801e2fc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 801e2ec:	4620      	mov	r0, r4
 801e2ee:	f007 fc6e 	bl	8025bce <__cxa_guard_release>
 801e2f2:	4a0f      	ldr	r2, [pc, #60]	; (801e330 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801e2f4:	490f      	ldr	r1, [pc, #60]	; (801e334 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 801e2f6:	4810      	ldr	r0, [pc, #64]	; (801e338 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801e2f8:	f007 fc56 	bl	8025ba8 <__aeabi_atexit>
 801e2fc:	4c0f      	ldr	r4, [pc, #60]	; (801e33c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 801e2fe:	7823      	ldrb	r3, [r4, #0]
 801e300:	f3bf 8f5b 	dmb	ish
 801e304:	07db      	lsls	r3, r3, #31
 801e306:	d40b      	bmi.n	801e320 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 801e308:	4620      	mov	r0, r4
 801e30a:	f007 fc54 	bl	8025bb6 <__cxa_guard_acquire>
 801e30e:	b138      	cbz	r0, 801e320 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 801e310:	4620      	mov	r0, r4
 801e312:	f007 fc5c 	bl	8025bce <__cxa_guard_release>
 801e316:	4a06      	ldr	r2, [pc, #24]	; (801e330 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801e318:	4909      	ldr	r1, [pc, #36]	; (801e340 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 801e31a:	480a      	ldr	r0, [pc, #40]	; (801e344 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 801e31c:	f007 fc44 	bl	8025ba8 <__aeabi_atexit>
 801e320:	4b05      	ldr	r3, [pc, #20]	; (801e338 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801e322:	642b      	str	r3, [r5, #64]	; 0x40
 801e324:	4b07      	ldr	r3, [pc, #28]	; (801e344 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 801e326:	646b      	str	r3, [r5, #68]	; 0x44
 801e328:	bd38      	pop	{r3, r4, r5, pc}
 801e32a:	bf00      	nop
 801e32c:	20027c88 	.word	0x20027c88
 801e330:	20000000 	.word	0x20000000
 801e334:	0801c0ed 	.word	0x0801c0ed
 801e338:	200000a4 	.word	0x200000a4
 801e33c:	20027c8c 	.word	0x20027c8c
 801e340:	0801c0eb 	.word	0x0801c0eb
 801e344:	200000a8 	.word	0x200000a8

0801e348 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 801e348:	b538      	push	{r3, r4, r5, lr}
 801e34a:	4c15      	ldr	r4, [pc, #84]	; (801e3a0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 801e34c:	4605      	mov	r5, r0
 801e34e:	7823      	ldrb	r3, [r4, #0]
 801e350:	f3bf 8f5b 	dmb	ish
 801e354:	07da      	lsls	r2, r3, #31
 801e356:	d40b      	bmi.n	801e370 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 801e358:	4620      	mov	r0, r4
 801e35a:	f007 fc2c 	bl	8025bb6 <__cxa_guard_acquire>
 801e35e:	b138      	cbz	r0, 801e370 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 801e360:	4620      	mov	r0, r4
 801e362:	f007 fc34 	bl	8025bce <__cxa_guard_release>
 801e366:	4a0f      	ldr	r2, [pc, #60]	; (801e3a4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801e368:	490f      	ldr	r1, [pc, #60]	; (801e3a8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 801e36a:	4810      	ldr	r0, [pc, #64]	; (801e3ac <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801e36c:	f007 fc1c 	bl	8025ba8 <__aeabi_atexit>
 801e370:	4c0f      	ldr	r4, [pc, #60]	; (801e3b0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 801e372:	7823      	ldrb	r3, [r4, #0]
 801e374:	f3bf 8f5b 	dmb	ish
 801e378:	07db      	lsls	r3, r3, #31
 801e37a:	d40b      	bmi.n	801e394 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 801e37c:	4620      	mov	r0, r4
 801e37e:	f007 fc1a 	bl	8025bb6 <__cxa_guard_acquire>
 801e382:	b138      	cbz	r0, 801e394 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 801e384:	4620      	mov	r0, r4
 801e386:	f007 fc22 	bl	8025bce <__cxa_guard_release>
 801e38a:	4a06      	ldr	r2, [pc, #24]	; (801e3a4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801e38c:	4909      	ldr	r1, [pc, #36]	; (801e3b4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 801e38e:	480a      	ldr	r0, [pc, #40]	; (801e3b8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 801e390:	f007 fc0a 	bl	8025ba8 <__aeabi_atexit>
 801e394:	4b05      	ldr	r3, [pc, #20]	; (801e3ac <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801e396:	63ab      	str	r3, [r5, #56]	; 0x38
 801e398:	4b07      	ldr	r3, [pc, #28]	; (801e3b8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 801e39a:	63eb      	str	r3, [r5, #60]	; 0x3c
 801e39c:	bd38      	pop	{r3, r4, r5, pc}
 801e39e:	bf00      	nop
 801e3a0:	20027ca8 	.word	0x20027ca8
 801e3a4:	20000000 	.word	0x20000000
 801e3a8:	0801c0f1 	.word	0x0801c0f1
 801e3ac:	200000c4 	.word	0x200000c4
 801e3b0:	20027cac 	.word	0x20027cac
 801e3b4:	0801c0ef 	.word	0x0801c0ef
 801e3b8:	200000c8 	.word	0x200000c8

0801e3bc <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 801e3bc:	b510      	push	{r4, lr}
 801e3be:	4604      	mov	r4, r0
 801e3c0:	f7ff ff14 	bl	801e1ec <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 801e3c4:	4620      	mov	r0, r4
 801e3c6:	f7ff ff85 	bl	801e2d4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 801e3ca:	4620      	mov	r0, r4
 801e3cc:	f7ff ff48 	bl	801e260 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 801e3d0:	4620      	mov	r0, r4
 801e3d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e3d6:	f7ff bfb7 	b.w	801e348 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

0801e3dc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801e3dc:	b538      	push	{r3, r4, r5, lr}
 801e3de:	4c15      	ldr	r4, [pc, #84]	; (801e434 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801e3e0:	4605      	mov	r5, r0
 801e3e2:	7823      	ldrb	r3, [r4, #0]
 801e3e4:	f3bf 8f5b 	dmb	ish
 801e3e8:	07da      	lsls	r2, r3, #31
 801e3ea:	d40b      	bmi.n	801e404 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801e3ec:	4620      	mov	r0, r4
 801e3ee:	f007 fbe2 	bl	8025bb6 <__cxa_guard_acquire>
 801e3f2:	b138      	cbz	r0, 801e404 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801e3f4:	4620      	mov	r0, r4
 801e3f6:	f007 fbea 	bl	8025bce <__cxa_guard_release>
 801e3fa:	4a0f      	ldr	r2, [pc, #60]	; (801e438 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801e3fc:	490f      	ldr	r1, [pc, #60]	; (801e43c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801e3fe:	4810      	ldr	r0, [pc, #64]	; (801e440 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801e400:	f007 fbd2 	bl	8025ba8 <__aeabi_atexit>
 801e404:	4c0f      	ldr	r4, [pc, #60]	; (801e444 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801e406:	7823      	ldrb	r3, [r4, #0]
 801e408:	f3bf 8f5b 	dmb	ish
 801e40c:	07db      	lsls	r3, r3, #31
 801e40e:	d40b      	bmi.n	801e428 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801e410:	4620      	mov	r0, r4
 801e412:	f007 fbd0 	bl	8025bb6 <__cxa_guard_acquire>
 801e416:	b138      	cbz	r0, 801e428 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801e418:	4620      	mov	r0, r4
 801e41a:	f007 fbd8 	bl	8025bce <__cxa_guard_release>
 801e41e:	4a06      	ldr	r2, [pc, #24]	; (801e438 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801e420:	4909      	ldr	r1, [pc, #36]	; (801e448 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801e422:	480a      	ldr	r0, [pc, #40]	; (801e44c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801e424:	f007 fbc0 	bl	8025ba8 <__aeabi_atexit>
 801e428:	4b05      	ldr	r3, [pc, #20]	; (801e440 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801e42a:	662b      	str	r3, [r5, #96]	; 0x60
 801e42c:	4b07      	ldr	r3, [pc, #28]	; (801e44c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801e42e:	666b      	str	r3, [r5, #100]	; 0x64
 801e430:	bd38      	pop	{r3, r4, r5, pc}
 801e432:	bf00      	nop
 801e434:	20027c90 	.word	0x20027c90
 801e438:	20000000 	.word	0x20000000
 801e43c:	0801c0dd 	.word	0x0801c0dd
 801e440:	200000ac 	.word	0x200000ac
 801e444:	20027c94 	.word	0x20027c94
 801e448:	0801c0db 	.word	0x0801c0db
 801e44c:	200000b0 	.word	0x200000b0

0801e450 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801e450:	b538      	push	{r3, r4, r5, lr}
 801e452:	4c15      	ldr	r4, [pc, #84]	; (801e4a8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801e454:	4605      	mov	r5, r0
 801e456:	7823      	ldrb	r3, [r4, #0]
 801e458:	f3bf 8f5b 	dmb	ish
 801e45c:	07da      	lsls	r2, r3, #31
 801e45e:	d40b      	bmi.n	801e478 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801e460:	4620      	mov	r0, r4
 801e462:	f007 fba8 	bl	8025bb6 <__cxa_guard_acquire>
 801e466:	b138      	cbz	r0, 801e478 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801e468:	4620      	mov	r0, r4
 801e46a:	f007 fbb0 	bl	8025bce <__cxa_guard_release>
 801e46e:	4a0f      	ldr	r2, [pc, #60]	; (801e4ac <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801e470:	490f      	ldr	r1, [pc, #60]	; (801e4b0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801e472:	4810      	ldr	r0, [pc, #64]	; (801e4b4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801e474:	f007 fb98 	bl	8025ba8 <__aeabi_atexit>
 801e478:	4c0f      	ldr	r4, [pc, #60]	; (801e4b8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801e47a:	7823      	ldrb	r3, [r4, #0]
 801e47c:	f3bf 8f5b 	dmb	ish
 801e480:	07db      	lsls	r3, r3, #31
 801e482:	d40b      	bmi.n	801e49c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801e484:	4620      	mov	r0, r4
 801e486:	f007 fb96 	bl	8025bb6 <__cxa_guard_acquire>
 801e48a:	b138      	cbz	r0, 801e49c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801e48c:	4620      	mov	r0, r4
 801e48e:	f007 fb9e 	bl	8025bce <__cxa_guard_release>
 801e492:	4a06      	ldr	r2, [pc, #24]	; (801e4ac <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801e494:	4909      	ldr	r1, [pc, #36]	; (801e4bc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801e496:	480a      	ldr	r0, [pc, #40]	; (801e4c0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801e498:	f007 fb86 	bl	8025ba8 <__aeabi_atexit>
 801e49c:	4b05      	ldr	r3, [pc, #20]	; (801e4b4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801e49e:	65ab      	str	r3, [r5, #88]	; 0x58
 801e4a0:	4b07      	ldr	r3, [pc, #28]	; (801e4c0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801e4a2:	65eb      	str	r3, [r5, #92]	; 0x5c
 801e4a4:	bd38      	pop	{r3, r4, r5, pc}
 801e4a6:	bf00      	nop
 801e4a8:	20027c68 	.word	0x20027c68
 801e4ac:	20000000 	.word	0x20000000
 801e4b0:	0801c0e1 	.word	0x0801c0e1
 801e4b4:	20000084 	.word	0x20000084
 801e4b8:	20027c6c 	.word	0x20027c6c
 801e4bc:	0801c0df 	.word	0x0801c0df
 801e4c0:	20000088 	.word	0x20000088

0801e4c4 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 801e4c4:	b510      	push	{r4, lr}
 801e4c6:	4604      	mov	r4, r0
 801e4c8:	f7ff ff88 	bl	801e3dc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801e4cc:	4620      	mov	r0, r4
 801e4ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e4d2:	f7ff bfbd 	b.w	801e450 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801e4d8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801e4d8:	b538      	push	{r3, r4, r5, lr}
 801e4da:	4c15      	ldr	r4, [pc, #84]	; (801e530 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801e4dc:	4605      	mov	r5, r0
 801e4de:	7823      	ldrb	r3, [r4, #0]
 801e4e0:	f3bf 8f5b 	dmb	ish
 801e4e4:	07da      	lsls	r2, r3, #31
 801e4e6:	d40b      	bmi.n	801e500 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801e4e8:	4620      	mov	r0, r4
 801e4ea:	f007 fb64 	bl	8025bb6 <__cxa_guard_acquire>
 801e4ee:	b138      	cbz	r0, 801e500 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801e4f0:	4620      	mov	r0, r4
 801e4f2:	f007 fb6c 	bl	8025bce <__cxa_guard_release>
 801e4f6:	4a0f      	ldr	r2, [pc, #60]	; (801e534 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801e4f8:	490f      	ldr	r1, [pc, #60]	; (801e538 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801e4fa:	4810      	ldr	r0, [pc, #64]	; (801e53c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801e4fc:	f007 fb54 	bl	8025ba8 <__aeabi_atexit>
 801e500:	4c0f      	ldr	r4, [pc, #60]	; (801e540 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801e502:	7823      	ldrb	r3, [r4, #0]
 801e504:	f3bf 8f5b 	dmb	ish
 801e508:	07db      	lsls	r3, r3, #31
 801e50a:	d40b      	bmi.n	801e524 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801e50c:	4620      	mov	r0, r4
 801e50e:	f007 fb52 	bl	8025bb6 <__cxa_guard_acquire>
 801e512:	b138      	cbz	r0, 801e524 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801e514:	4620      	mov	r0, r4
 801e516:	f007 fb5a 	bl	8025bce <__cxa_guard_release>
 801e51a:	4a06      	ldr	r2, [pc, #24]	; (801e534 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801e51c:	4909      	ldr	r1, [pc, #36]	; (801e544 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801e51e:	480a      	ldr	r0, [pc, #40]	; (801e548 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801e520:	f007 fb42 	bl	8025ba8 <__aeabi_atexit>
 801e524:	4b05      	ldr	r3, [pc, #20]	; (801e53c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801e526:	672b      	str	r3, [r5, #112]	; 0x70
 801e528:	4b07      	ldr	r3, [pc, #28]	; (801e548 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801e52a:	676b      	str	r3, [r5, #116]	; 0x74
 801e52c:	bd38      	pop	{r3, r4, r5, pc}
 801e52e:	bf00      	nop
 801e530:	20027c60 	.word	0x20027c60
 801e534:	20000000 	.word	0x20000000
 801e538:	0801c0d5 	.word	0x0801c0d5
 801e53c:	2000007c 	.word	0x2000007c
 801e540:	20027c64 	.word	0x20027c64
 801e544:	0801c0d3 	.word	0x0801c0d3
 801e548:	20000080 	.word	0x20000080

0801e54c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 801e54c:	b538      	push	{r3, r4, r5, lr}
 801e54e:	4c15      	ldr	r4, [pc, #84]	; (801e5a4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801e550:	4605      	mov	r5, r0
 801e552:	7823      	ldrb	r3, [r4, #0]
 801e554:	f3bf 8f5b 	dmb	ish
 801e558:	07da      	lsls	r2, r3, #31
 801e55a:	d40b      	bmi.n	801e574 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801e55c:	4620      	mov	r0, r4
 801e55e:	f007 fb2a 	bl	8025bb6 <__cxa_guard_acquire>
 801e562:	b138      	cbz	r0, 801e574 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801e564:	4620      	mov	r0, r4
 801e566:	f007 fb32 	bl	8025bce <__cxa_guard_release>
 801e56a:	4a0f      	ldr	r2, [pc, #60]	; (801e5a8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801e56c:	490f      	ldr	r1, [pc, #60]	; (801e5ac <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801e56e:	4810      	ldr	r0, [pc, #64]	; (801e5b0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801e570:	f007 fb1a 	bl	8025ba8 <__aeabi_atexit>
 801e574:	4c0f      	ldr	r4, [pc, #60]	; (801e5b4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801e576:	7823      	ldrb	r3, [r4, #0]
 801e578:	f3bf 8f5b 	dmb	ish
 801e57c:	07db      	lsls	r3, r3, #31
 801e57e:	d40b      	bmi.n	801e598 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801e580:	4620      	mov	r0, r4
 801e582:	f007 fb18 	bl	8025bb6 <__cxa_guard_acquire>
 801e586:	b138      	cbz	r0, 801e598 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801e588:	4620      	mov	r0, r4
 801e58a:	f007 fb20 	bl	8025bce <__cxa_guard_release>
 801e58e:	4a06      	ldr	r2, [pc, #24]	; (801e5a8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801e590:	4909      	ldr	r1, [pc, #36]	; (801e5b8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801e592:	480a      	ldr	r0, [pc, #40]	; (801e5bc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801e594:	f007 fb08 	bl	8025ba8 <__aeabi_atexit>
 801e598:	4b05      	ldr	r3, [pc, #20]	; (801e5b0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801e59a:	66ab      	str	r3, [r5, #104]	; 0x68
 801e59c:	4b07      	ldr	r3, [pc, #28]	; (801e5bc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801e59e:	66eb      	str	r3, [r5, #108]	; 0x6c
 801e5a0:	bd38      	pop	{r3, r4, r5, pc}
 801e5a2:	bf00      	nop
 801e5a4:	20027c58 	.word	0x20027c58
 801e5a8:	20000000 	.word	0x20000000
 801e5ac:	0801c0d9 	.word	0x0801c0d9
 801e5b0:	20000074 	.word	0x20000074
 801e5b4:	20027c5c 	.word	0x20027c5c
 801e5b8:	0801c0d7 	.word	0x0801c0d7
 801e5bc:	20000078 	.word	0x20000078

0801e5c0 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 801e5c0:	b510      	push	{r4, lr}
 801e5c2:	4604      	mov	r4, r0
 801e5c4:	f7ff ff88 	bl	801e4d8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801e5c8:	4620      	mov	r0, r4
 801e5ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e5ce:	f7ff bfbd 	b.w	801e54c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

0801e5d2 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 801e5d2:	b510      	push	{r4, lr}
 801e5d4:	4604      	mov	r4, r0
 801e5d6:	f7ff fff3 	bl	801e5c0 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 801e5da:	4620      	mov	r0, r4
 801e5dc:	f7ff ff72 	bl	801e4c4 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 801e5e0:	4620      	mov	r0, r4
 801e5e2:	f7ff fdf9 	bl	801e1d8 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 801e5e6:	4620      	mov	r0, r4
 801e5e8:	f7ff fcfa 	bl	801dfe0 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 801e5ec:	4620      	mov	r0, r4
 801e5ee:	f7ff fd75 	bl	801e0dc <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 801e5f2:	4620      	mov	r0, r4
 801e5f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e5f8:	f7ff bee0 	b.w	801e3bc <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

0801e5fc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 801e5fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e600:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	; 0x2c
 801e604:	f9bd e024 	ldrsh.w	lr, [sp, #36]	; 0x24
 801e608:	2d00      	cmp	r5, #0
 801e60a:	f9bd b028 	ldrsh.w	fp, [sp, #40]	; 0x28
 801e60e:	fb05 4c0e 	mla	ip, r5, lr, r4
 801e612:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 801e616:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 801e61a:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 801e61e:	eb02 0a0c 	add.w	sl, r2, ip
 801e622:	8808      	ldrh	r0, [r1, #0]
 801e624:	f2c0 80b0 	blt.w	801e788 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 801e628:	45ab      	cmp	fp, r5
 801e62a:	f340 80ad 	ble.w	801e788 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 801e62e:	2c00      	cmp	r4, #0
 801e630:	f2c0 80a8 	blt.w	801e784 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 801e634:	45a6      	cmp	lr, r4
 801e636:	f340 80a5 	ble.w	801e784 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 801e63a:	f812 200c 	ldrb.w	r2, [r2, ip]
 801e63e:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
 801e642:	1c62      	adds	r2, r4, #1
 801e644:	f100 80a3 	bmi.w	801e78e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801e648:	4596      	cmp	lr, r2
 801e64a:	f340 80a0 	ble.w	801e78e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801e64e:	f1b9 0f00 	cmp.w	r9, #0
 801e652:	f000 809c 	beq.w	801e78e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801e656:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801e65a:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 801e65e:	3501      	adds	r5, #1
 801e660:	f100 8099 	bmi.w	801e796 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801e664:	45ab      	cmp	fp, r5
 801e666:	f340 8096 	ble.w	801e796 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801e66a:	2f00      	cmp	r7, #0
 801e66c:	f000 8093 	beq.w	801e796 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801e670:	2c00      	cmp	r4, #0
 801e672:	f2c0 808e 	blt.w	801e792 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 801e676:	45a6      	cmp	lr, r4
 801e678:	f340 808b 	ble.w	801e792 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 801e67c:	f81a 200e 	ldrb.w	r2, [sl, lr]
 801e680:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 801e684:	3401      	adds	r4, #1
 801e686:	f100 8089 	bmi.w	801e79c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801e68a:	45a6      	cmp	lr, r4
 801e68c:	f340 8086 	ble.w	801e79c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801e690:	f1b9 0f00 	cmp.w	r9, #0
 801e694:	f000 8082 	beq.w	801e79c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801e698:	44d6      	add	lr, sl
 801e69a:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801e69e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801e6a2:	ea4f 4408 	mov.w	r4, r8, lsl #16
 801e6a6:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 801e6aa:	fb19 fe07 	smulbb	lr, r9, r7
 801e6ae:	f1c7 0210 	rsb	r2, r7, #16
 801e6b2:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801e6b6:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 801e6ba:	eba2 0209 	sub.w	r2, r2, r9
 801e6be:	ea44 0808 	orr.w	r8, r4, r8
 801e6c2:	ea4f 440c 	mov.w	r4, ip, lsl #16
 801e6c6:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801e6ca:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 801e6ce:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801e6d2:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 801e6d6:	ea44 0c0c 	orr.w	ip, r4, ip
 801e6da:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 801e6de:	fb04 f40c 	mul.w	r4, r4, ip
 801e6e2:	fb02 4808 	mla	r8, r2, r8, r4
 801e6e6:	041a      	lsls	r2, r3, #16
 801e6e8:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801e6ec:	b2b4      	uxth	r4, r6
 801e6ee:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801e6f2:	43f6      	mvns	r6, r6
 801e6f4:	4313      	orrs	r3, r2
 801e6f6:	042a      	lsls	r2, r5, #16
 801e6f8:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801e6fc:	b2f6      	uxtb	r6, r6
 801e6fe:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801e702:	fb0e 8303 	mla	r3, lr, r3, r8
 801e706:	432a      	orrs	r2, r5
 801e708:	fb07 3202 	mla	r2, r7, r2, r3
 801e70c:	10c7      	asrs	r7, r0, #3
 801e70e:	0d53      	lsrs	r3, r2, #21
 801e710:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e714:	0952      	lsrs	r2, r2, #5
 801e716:	fb17 f706 	smulbb	r7, r7, r6
 801e71a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e71e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801e722:	431a      	orrs	r2, r3
 801e724:	b293      	uxth	r3, r2
 801e726:	1202      	asrs	r2, r0, #8
 801e728:	121d      	asrs	r5, r3, #8
 801e72a:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801e72e:	00c0      	lsls	r0, r0, #3
 801e730:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801e734:	fb12 f206 	smulbb	r2, r2, r6
 801e738:	b2c0      	uxtb	r0, r0
 801e73a:	fb05 2504 	mla	r5, r5, r4, r2
 801e73e:	10da      	asrs	r2, r3, #3
 801e740:	fb10 f006 	smulbb	r0, r0, r6
 801e744:	00db      	lsls	r3, r3, #3
 801e746:	b2ad      	uxth	r5, r5
 801e748:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801e74c:	b2db      	uxtb	r3, r3
 801e74e:	fb02 7204 	mla	r2, r2, r4, r7
 801e752:	fb03 0004 	mla	r0, r3, r4, r0
 801e756:	1c6b      	adds	r3, r5, #1
 801e758:	b292      	uxth	r2, r2
 801e75a:	b280      	uxth	r0, r0
 801e75c:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801e760:	1c43      	adds	r3, r0, #1
 801e762:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801e766:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801e76a:	1c50      	adds	r0, r2, #1
 801e76c:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801e770:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801e774:	0952      	lsrs	r2, r2, #5
 801e776:	432b      	orrs	r3, r5
 801e778:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801e77c:	4313      	orrs	r3, r2
 801e77e:	800b      	strh	r3, [r1, #0]
 801e780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e784:	4680      	mov	r8, r0
 801e786:	e75c      	b.n	801e642 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
 801e788:	4684      	mov	ip, r0
 801e78a:	4680      	mov	r8, r0
 801e78c:	e767      	b.n	801e65e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 801e78e:	4684      	mov	ip, r0
 801e790:	e765      	b.n	801e65e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 801e792:	4605      	mov	r5, r0
 801e794:	e776      	b.n	801e684 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
 801e796:	4603      	mov	r3, r0
 801e798:	4605      	mov	r5, r0
 801e79a:	e782      	b.n	801e6a2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 801e79c:	4603      	mov	r3, r0
 801e79e:	e780      	b.n	801e6a2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

0801e7a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e7a4:	b099      	sub	sp, #100	; 0x64
 801e7a6:	9215      	str	r2, [sp, #84]	; 0x54
 801e7a8:	9309      	str	r3, [sp, #36]	; 0x24
 801e7aa:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801e7ac:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
 801e7b0:	9016      	str	r0, [sp, #88]	; 0x58
 801e7b2:	930d      	str	r3, [sp, #52]	; 0x34
 801e7b4:	6850      	ldr	r0, [r2, #4]
 801e7b6:	910c      	str	r1, [sp, #48]	; 0x30
 801e7b8:	6812      	ldr	r2, [r2, #0]
 801e7ba:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 801e7be:	e9dd a523 	ldrd	sl, r5, [sp, #140]	; 0x8c
 801e7c2:	fb00 1303 	mla	r3, r0, r3, r1
 801e7c6:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 801e7ca:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e7cc:	681b      	ldr	r3, [r3, #0]
 801e7ce:	930b      	str	r3, [sp, #44]	; 0x2c
 801e7d0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e7d2:	685e      	ldr	r6, [r3, #4]
 801e7d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e7d6:	3604      	adds	r6, #4
 801e7d8:	43db      	mvns	r3, r3
 801e7da:	b2db      	uxtb	r3, r3
 801e7dc:	930a      	str	r3, [sp, #40]	; 0x28
 801e7de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e7e0:	2b00      	cmp	r3, #0
 801e7e2:	dc03      	bgt.n	801e7ec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801e7e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e7e6:	2b00      	cmp	r3, #0
 801e7e8:	f340 8225 	ble.w	801ec36 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 801e7ec:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e7ee:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e7f2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e7f6:	1e48      	subs	r0, r1, #1
 801e7f8:	1e57      	subs	r7, r2, #1
 801e7fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e7fc:	2b00      	cmp	r3, #0
 801e7fe:	f340 80e3 	ble.w	801e9c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801e802:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 801e806:	ea4f 4325 	mov.w	r3, r5, asr #16
 801e80a:	d406      	bmi.n	801e81a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801e80c:	4584      	cmp	ip, r0
 801e80e:	da04      	bge.n	801e81a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801e810:	2b00      	cmp	r3, #0
 801e812:	db02      	blt.n	801e81a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801e814:	42bb      	cmp	r3, r7
 801e816:	f2c0 80d8 	blt.w	801e9ca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801e81a:	f11c 0c01 	adds.w	ip, ip, #1
 801e81e:	f100 80c9 	bmi.w	801e9b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801e822:	4561      	cmp	r1, ip
 801e824:	f2c0 80c6 	blt.w	801e9b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801e828:	3301      	adds	r3, #1
 801e82a:	f100 80c3 	bmi.w	801e9b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801e82e:	429a      	cmp	r2, r3
 801e830:	f2c0 80c0 	blt.w	801e9b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801e834:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801e838:	4647      	mov	r7, r8
 801e83a:	f1bb 0f00 	cmp.w	fp, #0
 801e83e:	f340 80e3 	ble.w	801ea08 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 801e842:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801e844:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801e848:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e84a:	f3ca 3003 	ubfx	r0, sl, #12, #4
 801e84e:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801e852:	ea5f 422a 	movs.w	r2, sl, asr #16
 801e856:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801e85a:	689b      	ldr	r3, [r3, #8]
 801e85c:	f100 8121 	bmi.w	801eaa2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801e860:	f103 39ff 	add.w	r9, r3, #4294967295
 801e864:	454a      	cmp	r2, r9
 801e866:	f280 811c 	bge.w	801eaa2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801e86a:	f1bc 0f00 	cmp.w	ip, #0
 801e86e:	f2c0 8118 	blt.w	801eaa2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801e872:	f10e 39ff 	add.w	r9, lr, #4294967295
 801e876:	45cc      	cmp	ip, r9
 801e878:	f280 8113 	bge.w	801eaa2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801e87c:	b21b      	sxth	r3, r3
 801e87e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e880:	fb0c 2203 	mla	r2, ip, r3, r2
 801e884:	eb04 0902 	add.w	r9, r4, r2
 801e888:	5ca2      	ldrb	r2, [r4, r2]
 801e88a:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 801e88e:	2800      	cmp	r0, #0
 801e890:	f000 80fe 	beq.w	801ea90 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801e894:	f899 2001 	ldrb.w	r2, [r9, #1]
 801e898:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 801e89c:	9211      	str	r2, [sp, #68]	; 0x44
 801e89e:	b151      	cbz	r1, 801e8b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801e8a0:	eb09 0203 	add.w	r2, r9, r3
 801e8a4:	f819 3003 	ldrb.w	r3, [r9, r3]
 801e8a8:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801e8ac:	930f      	str	r3, [sp, #60]	; 0x3c
 801e8ae:	7853      	ldrb	r3, [r2, #1]
 801e8b0:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801e8b4:	9312      	str	r3, [sp, #72]	; 0x48
 801e8b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e8b8:	fb10 f201 	smulbb	r2, r0, r1
 801e8bc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801e8be:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801e8c2:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801e8c6:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 801e8ca:	10d2      	asrs	r2, r2, #3
 801e8cc:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801e8d0:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 801e8d4:	ea4c 0c03 	orr.w	ip, ip, r3
 801e8d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e8da:	041b      	lsls	r3, r3, #16
 801e8dc:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801e8e0:	4323      	orrs	r3, r4
 801e8e2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801e8e4:	4353      	muls	r3, r2
 801e8e6:	fb09 330c 	mla	r3, r9, ip, r3
 801e8ea:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801e8ee:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801e8f2:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801e8f6:	ea4c 0e0e 	orr.w	lr, ip, lr
 801e8fa:	f1c1 0c10 	rsb	ip, r1, #16
 801e8fe:	ebac 0c00 	sub.w	ip, ip, r0
 801e902:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801e906:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801e90a:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801e90e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e910:	0418      	lsls	r0, r3, #16
 801e912:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801e916:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801e91a:	4318      	orrs	r0, r3
 801e91c:	fb02 c200 	mla	r2, r2, r0, ip
 801e920:	8838      	ldrh	r0, [r7, #0]
 801e922:	0d53      	lsrs	r3, r2, #21
 801e924:	0952      	lsrs	r2, r2, #5
 801e926:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e92a:	1201      	asrs	r1, r0, #8
 801e92c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801e930:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 801e934:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801e938:	00c0      	lsls	r0, r0, #3
 801e93a:	431a      	orrs	r2, r3
 801e93c:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 801e940:	fb11 f104 	smulbb	r1, r1, r4
 801e944:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801e948:	b292      	uxth	r2, r2
 801e94a:	fb1e fe04 	smulbb	lr, lr, r4
 801e94e:	b2c0      	uxtb	r0, r0
 801e950:	ea4f 2c22 	mov.w	ip, r2, asr #8
 801e954:	fb10 f004 	smulbb	r0, r0, r4
 801e958:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801e95c:	fb0c 1c03 	mla	ip, ip, r3, r1
 801e960:	10d1      	asrs	r1, r2, #3
 801e962:	00d2      	lsls	r2, r2, #3
 801e964:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801e968:	fa1f fc8c 	uxth.w	ip, ip
 801e96c:	b2d2      	uxtb	r2, r2
 801e96e:	fb01 e103 	mla	r1, r1, r3, lr
 801e972:	fb02 0303 	mla	r3, r2, r3, r0
 801e976:	b289      	uxth	r1, r1
 801e978:	b29a      	uxth	r2, r3
 801e97a:	f10c 0301 	add.w	r3, ip, #1
 801e97e:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801e982:	1c53      	adds	r3, r2, #1
 801e984:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801e988:	1c4a      	adds	r2, r1, #1
 801e98a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801e98e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801e992:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801e996:	0949      	lsrs	r1, r1, #5
 801e998:	ea43 030c 	orr.w	r3, r3, ip
 801e99c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801e9a0:	430b      	orrs	r3, r1
 801e9a2:	803b      	strh	r3, [r7, #0]
 801e9a4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801e9a6:	3702      	adds	r7, #2
 801e9a8:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e9ac:	449a      	add	sl, r3
 801e9ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e9b0:	441d      	add	r5, r3
 801e9b2:	e742      	b.n	801e83a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801e9b4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801e9b6:	f108 0802 	add.w	r8, r8, #2
 801e9ba:	449a      	add	sl, r3
 801e9bc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e9be:	441d      	add	r5, r3
 801e9c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e9c2:	3b01      	subs	r3, #1
 801e9c4:	9309      	str	r3, [sp, #36]	; 0x24
 801e9c6:	e718      	b.n	801e7fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801e9c8:	d023      	beq.n	801ea12 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 801e9ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e9cc:	9825      	ldr	r0, [sp, #148]	; 0x94
 801e9ce:	3b01      	subs	r3, #1
 801e9d0:	fb00 a003 	mla	r0, r0, r3, sl
 801e9d4:	1400      	asrs	r0, r0, #16
 801e9d6:	f53f af2d 	bmi.w	801e834 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801e9da:	3901      	subs	r1, #1
 801e9dc:	4288      	cmp	r0, r1
 801e9de:	f6bf af29 	bge.w	801e834 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801e9e2:	9926      	ldr	r1, [sp, #152]	; 0x98
 801e9e4:	fb01 5303 	mla	r3, r1, r3, r5
 801e9e8:	141b      	asrs	r3, r3, #16
 801e9ea:	f53f af23 	bmi.w	801e834 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801e9ee:	3a01      	subs	r2, #1
 801e9f0:	4293      	cmp	r3, r2
 801e9f2:	f6bf af1f 	bge.w	801e834 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801e9f6:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 801e9fa:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 801e9fe:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801ea02:	f1be 0f00 	cmp.w	lr, #0
 801ea06:	dc6c      	bgt.n	801eae2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801ea08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ea0a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801ea0e:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 801ea12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ea14:	2b00      	cmp	r3, #0
 801ea16:	f340 810e 	ble.w	801ec36 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 801ea1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ea1e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801ea20:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ea24:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ea28:	eef0 6a62 	vmov.f32	s13, s5
 801ea2c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ea30:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ea34:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ea38:	ee16 aa90 	vmov	sl, s13
 801ea3c:	eef0 6a43 	vmov.f32	s13, s6
 801ea40:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ea44:	ee16 5a90 	vmov	r5, s13
 801ea48:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ea4c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ea50:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ea54:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ea58:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ea5c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ea60:	ee12 2a90 	vmov	r2, s5
 801ea64:	eef0 2a47 	vmov.f32	s5, s14
 801ea68:	fb92 f3f3 	sdiv	r3, r2, r3
 801ea6c:	ee13 2a10 	vmov	r2, s6
 801ea70:	9325      	str	r3, [sp, #148]	; 0x94
 801ea72:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801ea74:	eeb0 3a67 	vmov.f32	s6, s15
 801ea78:	fb92 f3f3 	sdiv	r3, r2, r3
 801ea7c:	9326      	str	r3, [sp, #152]	; 0x98
 801ea7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ea80:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801ea82:	3b01      	subs	r3, #1
 801ea84:	930c      	str	r3, [sp, #48]	; 0x30
 801ea86:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801ea88:	bf08      	it	eq
 801ea8a:	4613      	moveq	r3, r2
 801ea8c:	9309      	str	r3, [sp, #36]	; 0x24
 801ea8e:	e6a6      	b.n	801e7de <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801ea90:	2900      	cmp	r1, #0
 801ea92:	f43f af10 	beq.w	801e8b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801ea96:	f819 3003 	ldrb.w	r3, [r9, r3]
 801ea9a:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801ea9e:	930f      	str	r3, [sp, #60]	; 0x3c
 801eaa0:	e709      	b.n	801e8b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801eaa2:	f112 0901 	adds.w	r9, r2, #1
 801eaa6:	f53f af7d 	bmi.w	801e9a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801eaaa:	454b      	cmp	r3, r9
 801eaac:	f6ff af7a 	blt.w	801e9a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801eab0:	f11c 0901 	adds.w	r9, ip, #1
 801eab4:	f53f af76 	bmi.w	801e9a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801eab8:	45ce      	cmp	lr, r9
 801eaba:	f6ff af73 	blt.w	801e9a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801eabe:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801eac0:	b21b      	sxth	r3, r3
 801eac2:	9202      	str	r2, [sp, #8]
 801eac4:	fa0f f28e 	sxth.w	r2, lr
 801eac8:	9300      	str	r3, [sp, #0]
 801eaca:	4633      	mov	r3, r6
 801eacc:	9201      	str	r2, [sp, #4]
 801eace:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ead0:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801ead4:	e9cd c003 	strd	ip, r0, [sp, #12]
 801ead8:	4639      	mov	r1, r7
 801eada:	9816      	ldr	r0, [sp, #88]	; 0x58
 801eadc:	f7ff fd8e 	bl	801e5fc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 801eae0:	e760      	b.n	801e9a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801eae2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801eae4:	ea4f 422a 	mov.w	r2, sl, asr #16
 801eae8:	1429      	asrs	r1, r5, #16
 801eaea:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801eaec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801eaf0:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 801eaf4:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801eaf8:	fb03 2101 	mla	r1, r3, r1, r2
 801eafc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801eafe:	440a      	add	r2, r1
 801eb00:	5c61      	ldrb	r1, [r4, r1]
 801eb02:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 801eb06:	f1bc 0f00 	cmp.w	ip, #0
 801eb0a:	f000 808c 	beq.w	801ec26 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 801eb0e:	7857      	ldrb	r7, [r2, #1]
 801eb10:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 801eb14:	9413      	str	r4, [sp, #76]	; 0x4c
 801eb16:	b140      	cbz	r0, 801eb2a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801eb18:	18d7      	adds	r7, r2, r3
 801eb1a:	5cd3      	ldrb	r3, [r2, r3]
 801eb1c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801eb20:	9310      	str	r3, [sp, #64]	; 0x40
 801eb22:	787b      	ldrb	r3, [r7, #1]
 801eb24:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801eb28:	9314      	str	r3, [sp, #80]	; 0x50
 801eb2a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801eb2c:	fb1c f200 	smulbb	r2, ip, r0
 801eb30:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801eb32:	f10e 3eff 	add.w	lr, lr, #4294967295
 801eb36:	041f      	lsls	r7, r3, #16
 801eb38:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801eb3c:	10d2      	asrs	r2, r2, #3
 801eb3e:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 801eb42:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 801eb46:	431f      	orrs	r7, r3
 801eb48:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 801eb4c:	9317      	str	r3, [sp, #92]	; 0x5c
 801eb4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801eb50:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801eb52:	041b      	lsls	r3, r3, #16
 801eb54:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801eb58:	ea43 030b 	orr.w	r3, r3, fp
 801eb5c:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801eb60:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801eb64:	4353      	muls	r3, r2
 801eb66:	fb04 3707 	mla	r7, r4, r7, r3
 801eb6a:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801eb6e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801eb70:	ea43 0b01 	orr.w	fp, r3, r1
 801eb74:	f1c0 0110 	rsb	r1, r0, #16
 801eb78:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801eb7a:	eba1 0c0c 	sub.w	ip, r1, ip
 801eb7e:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801eb82:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801eb86:	fb0c 770b 	mla	r7, ip, fp, r7
 801eb8a:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801eb8e:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 801eb92:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801eb96:	ea4c 0c0b 	orr.w	ip, ip, fp
 801eb9a:	fb02 770c 	mla	r7, r2, ip, r7
 801eb9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801eba0:	0d79      	lsrs	r1, r7, #21
 801eba2:	8812      	ldrh	r2, [r2, #0]
 801eba4:	097f      	lsrs	r7, r7, #5
 801eba6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801ebaa:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801ebae:	430f      	orrs	r7, r1
 801ebb0:	1211      	asrs	r1, r2, #8
 801ebb2:	b2bb      	uxth	r3, r7
 801ebb4:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801ebb8:	10d7      	asrs	r7, r2, #3
 801ebba:	fb11 f104 	smulbb	r1, r1, r4
 801ebbe:	1218      	asrs	r0, r3, #8
 801ebc0:	00d2      	lsls	r2, r2, #3
 801ebc2:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801ebc6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801ebca:	fb17 f704 	smulbb	r7, r7, r4
 801ebce:	b2d2      	uxtb	r2, r2
 801ebd0:	fb00 1009 	mla	r0, r0, r9, r1
 801ebd4:	10d9      	asrs	r1, r3, #3
 801ebd6:	fb12 f204 	smulbb	r2, r2, r4
 801ebda:	00db      	lsls	r3, r3, #3
 801ebdc:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801ebe0:	b280      	uxth	r0, r0
 801ebe2:	b2db      	uxtb	r3, r3
 801ebe4:	fb01 7109 	mla	r1, r1, r9, r7
 801ebe8:	fb03 2309 	mla	r3, r3, r9, r2
 801ebec:	1c42      	adds	r2, r0, #1
 801ebee:	b289      	uxth	r1, r1
 801ebf0:	b29b      	uxth	r3, r3
 801ebf2:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801ebf6:	1c4f      	adds	r7, r1, #1
 801ebf8:	1c5a      	adds	r2, r3, #1
 801ebfa:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801ebfe:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801ec02:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801ec06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ec08:	0949      	lsrs	r1, r1, #5
 801ec0a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801ec0e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801ec12:	4310      	orrs	r0, r2
 801ec14:	4308      	orrs	r0, r1
 801ec16:	f823 0b02 	strh.w	r0, [r3], #2
 801ec1a:	930e      	str	r3, [sp, #56]	; 0x38
 801ec1c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801ec1e:	449a      	add	sl, r3
 801ec20:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801ec22:	441d      	add	r5, r3
 801ec24:	e6ed      	b.n	801ea02 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 801ec26:	2800      	cmp	r0, #0
 801ec28:	f43f af7f 	beq.w	801eb2a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801ec2c:	5cd3      	ldrb	r3, [r2, r3]
 801ec2e:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801ec32:	9310      	str	r3, [sp, #64]	; 0x40
 801ec34:	e779      	b.n	801eb2a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801ec36:	b019      	add	sp, #100	; 0x64
 801ec38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ec3c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 801ec3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ec40:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	; 0x28
 801ec44:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801ec48:	f1b8 0f00 	cmp.w	r8, #0
 801ec4c:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
 801ec50:	fb08 470e 	mla	r7, r8, lr, r4
 801ec54:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 801ec58:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 801ec5c:	eb02 0907 	add.w	r9, r2, r7
 801ec60:	8808      	ldrh	r0, [r1, #0]
 801ec62:	db67      	blt.n	801ed34 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 801ec64:	45c2      	cmp	sl, r8
 801ec66:	dd65      	ble.n	801ed34 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 801ec68:	2c00      	cmp	r4, #0
 801ec6a:	db61      	blt.n	801ed30 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 801ec6c:	45a6      	cmp	lr, r4
 801ec6e:	dd5f      	ble.n	801ed30 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 801ec70:	5dd2      	ldrb	r2, [r2, r7]
 801ec72:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 801ec76:	1c62      	adds	r2, r4, #1
 801ec78:	d45f      	bmi.n	801ed3a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801ec7a:	4596      	cmp	lr, r2
 801ec7c:	dd5d      	ble.n	801ed3a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801ec7e:	2d00      	cmp	r5, #0
 801ec80:	d05b      	beq.n	801ed3a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801ec82:	f899 2001 	ldrb.w	r2, [r9, #1]
 801ec86:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 801ec8a:	f118 0801 	adds.w	r8, r8, #1
 801ec8e:	d458      	bmi.n	801ed42 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801ec90:	45c2      	cmp	sl, r8
 801ec92:	dd56      	ble.n	801ed42 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801ec94:	2e00      	cmp	r6, #0
 801ec96:	d054      	beq.n	801ed42 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801ec98:	2c00      	cmp	r4, #0
 801ec9a:	db50      	blt.n	801ed3e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 801ec9c:	45a6      	cmp	lr, r4
 801ec9e:	dd4e      	ble.n	801ed3e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 801eca0:	f819 200e 	ldrb.w	r2, [r9, lr]
 801eca4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801eca8:	3401      	adds	r4, #1
 801ecaa:	d407      	bmi.n	801ecbc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801ecac:	45a6      	cmp	lr, r4
 801ecae:	dd05      	ble.n	801ecbc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801ecb0:	b125      	cbz	r5, 801ecbc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801ecb2:	44ce      	add	lr, r9
 801ecb4:	f89e 0001 	ldrb.w	r0, [lr, #1]
 801ecb8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801ecbc:	fb15 f406 	smulbb	r4, r5, r6
 801ecc0:	ea4f 430c 	mov.w	r3, ip, lsl #16
 801ecc4:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 801ecc8:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801eccc:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801ecd0:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 801ecd4:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801ecd8:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801ecdc:	ea43 0c0c 	orr.w	ip, r3, ip
 801ece0:	f1c6 0310 	rsb	r3, r6, #16
 801ece4:	ea4e 0707 	orr.w	r7, lr, r7
 801ece8:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 801ecec:	1b5b      	subs	r3, r3, r5
 801ecee:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 801ecf2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801ecf6:	437d      	muls	r5, r7
 801ecf8:	fb03 5c0c 	mla	ip, r3, ip, r5
 801ecfc:	0403      	lsls	r3, r0, #16
 801ecfe:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801ed02:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801ed06:	4318      	orrs	r0, r3
 801ed08:	0413      	lsls	r3, r2, #16
 801ed0a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801ed0e:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801ed12:	fb04 c000 	mla	r0, r4, r0, ip
 801ed16:	4313      	orrs	r3, r2
 801ed18:	fb06 0003 	mla	r0, r6, r3, r0
 801ed1c:	0d43      	lsrs	r3, r0, #21
 801ed1e:	0940      	lsrs	r0, r0, #5
 801ed20:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801ed24:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801ed28:	4318      	orrs	r0, r3
 801ed2a:	8008      	strh	r0, [r1, #0]
 801ed2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ed30:	4684      	mov	ip, r0
 801ed32:	e7a0      	b.n	801ec76 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
 801ed34:	4607      	mov	r7, r0
 801ed36:	4684      	mov	ip, r0
 801ed38:	e7a7      	b.n	801ec8a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 801ed3a:	4607      	mov	r7, r0
 801ed3c:	e7a5      	b.n	801ec8a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 801ed3e:	4602      	mov	r2, r0
 801ed40:	e7b2      	b.n	801eca8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
 801ed42:	4602      	mov	r2, r0
 801ed44:	e7ba      	b.n	801ecbc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

0801ed46 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ed46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed4a:	b093      	sub	sp, #76	; 0x4c
 801ed4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ed50:	920f      	str	r2, [sp, #60]	; 0x3c
 801ed52:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801ed54:	9010      	str	r0, [sp, #64]	; 0x40
 801ed56:	9108      	str	r1, [sp, #32]
 801ed58:	6850      	ldr	r0, [r2, #4]
 801ed5a:	9306      	str	r3, [sp, #24]
 801ed5c:	6812      	ldr	r2, [r2, #0]
 801ed5e:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 801ed62:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 801ed66:	fb00 1303 	mla	r3, r0, r3, r1
 801ed6a:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 801ed6e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ed70:	681b      	ldr	r3, [r3, #0]
 801ed72:	9307      	str	r3, [sp, #28]
 801ed74:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ed76:	685f      	ldr	r7, [r3, #4]
 801ed78:	3704      	adds	r7, #4
 801ed7a:	9b08      	ldr	r3, [sp, #32]
 801ed7c:	2b00      	cmp	r3, #0
 801ed7e:	dc03      	bgt.n	801ed88 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801ed80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ed82:	2b00      	cmp	r3, #0
 801ed84:	f340 81b2 	ble.w	801f0ec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 801ed88:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ed8a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ed8e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801ed92:	1e48      	subs	r0, r1, #1
 801ed94:	f102 3cff 	add.w	ip, r2, #4294967295
 801ed98:	9b06      	ldr	r3, [sp, #24]
 801ed9a:	2b00      	cmp	r3, #0
 801ed9c:	f340 80a9 	ble.w	801eef2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801eda0:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801eda4:	ea4f 4326 	mov.w	r3, r6, asr #16
 801eda8:	d406      	bmi.n	801edb8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801edaa:	4586      	cmp	lr, r0
 801edac:	da04      	bge.n	801edb8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801edae:	2b00      	cmp	r3, #0
 801edb0:	db02      	blt.n	801edb8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801edb2:	4563      	cmp	r3, ip
 801edb4:	f2c0 809e 	blt.w	801eef4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801edb8:	f11e 0e01 	adds.w	lr, lr, #1
 801edbc:	f100 808f 	bmi.w	801eede <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801edc0:	4571      	cmp	r1, lr
 801edc2:	f2c0 808c 	blt.w	801eede <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801edc6:	3301      	adds	r3, #1
 801edc8:	f100 8089 	bmi.w	801eede <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801edcc:	429a      	cmp	r2, r3
 801edce:	f2c0 8086 	blt.w	801eede <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801edd2:	f8dd b018 	ldr.w	fp, [sp, #24]
 801edd6:	46c8      	mov	r8, r9
 801edd8:	f1bb 0f00 	cmp.w	fp, #0
 801eddc:	f340 80a6 	ble.w	801ef2c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801ede0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801ede2:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801ede6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ede8:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801edec:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801edf0:	1422      	asrs	r2, r4, #16
 801edf2:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801edf6:	689b      	ldr	r3, [r3, #8]
 801edf8:	f100 80e3 	bmi.w	801efc2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801edfc:	f103 3aff 	add.w	sl, r3, #4294967295
 801ee00:	4552      	cmp	r2, sl
 801ee02:	f280 80de 	bge.w	801efc2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801ee06:	f1bc 0f00 	cmp.w	ip, #0
 801ee0a:	f2c0 80da 	blt.w	801efc2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801ee0e:	f10e 3aff 	add.w	sl, lr, #4294967295
 801ee12:	45d4      	cmp	ip, sl
 801ee14:	f280 80d5 	bge.w	801efc2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801ee18:	b21b      	sxth	r3, r3
 801ee1a:	9d07      	ldr	r5, [sp, #28]
 801ee1c:	fb0c 2203 	mla	r2, ip, r3, r2
 801ee20:	eb05 0a02 	add.w	sl, r5, r2
 801ee24:	5caa      	ldrb	r2, [r5, r2]
 801ee26:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 801ee2a:	2800      	cmp	r0, #0
 801ee2c:	f000 80c0 	beq.w	801efb0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801ee30:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801ee34:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 801ee38:	920b      	str	r2, [sp, #44]	; 0x2c
 801ee3a:	b151      	cbz	r1, 801ee52 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801ee3c:	eb0a 0203 	add.w	r2, sl, r3
 801ee40:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801ee44:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801ee48:	9309      	str	r3, [sp, #36]	; 0x24
 801ee4a:	7853      	ldrb	r3, [r2, #1]
 801ee4c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801ee50:	930c      	str	r3, [sp, #48]	; 0x30
 801ee52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ee54:	fb10 f201 	smulbb	r2, r0, r1
 801ee58:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801ee5a:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801ee5e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801ee62:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801ee66:	10d2      	asrs	r2, r2, #3
 801ee68:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801ee6c:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 801ee70:	ea4c 0c03 	orr.w	ip, ip, r3
 801ee74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ee76:	041b      	lsls	r3, r3, #16
 801ee78:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801ee7c:	432b      	orrs	r3, r5
 801ee7e:	4353      	muls	r3, r2
 801ee80:	fb0a 330c 	mla	r3, sl, ip, r3
 801ee84:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801ee88:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801ee8c:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801ee90:	ea4c 0e0e 	orr.w	lr, ip, lr
 801ee94:	f1c1 0c10 	rsb	ip, r1, #16
 801ee98:	ebac 0c00 	sub.w	ip, ip, r0
 801ee9c:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801eea0:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801eea4:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801eea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eeaa:	0418      	lsls	r0, r3, #16
 801eeac:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801eeb0:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801eeb4:	4318      	orrs	r0, r3
 801eeb6:	fb02 c200 	mla	r2, r2, r0, ip
 801eeba:	0d53      	lsrs	r3, r2, #21
 801eebc:	0952      	lsrs	r2, r2, #5
 801eebe:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801eec2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801eec6:	431a      	orrs	r2, r3
 801eec8:	f8a8 2000 	strh.w	r2, [r8]
 801eecc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801eece:	f108 0802 	add.w	r8, r8, #2
 801eed2:	f10b 3bff 	add.w	fp, fp, #4294967295
 801eed6:	441c      	add	r4, r3
 801eed8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801eeda:	441e      	add	r6, r3
 801eedc:	e77c      	b.n	801edd8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801eede:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801eee0:	f109 0902 	add.w	r9, r9, #2
 801eee4:	441c      	add	r4, r3
 801eee6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801eee8:	441e      	add	r6, r3
 801eeea:	9b06      	ldr	r3, [sp, #24]
 801eeec:	3b01      	subs	r3, #1
 801eeee:	9306      	str	r3, [sp, #24]
 801eef0:	e752      	b.n	801ed98 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801eef2:	d020      	beq.n	801ef36 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801eef4:	9b06      	ldr	r3, [sp, #24]
 801eef6:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801eef8:	3b01      	subs	r3, #1
 801eefa:	fb00 4003 	mla	r0, r0, r3, r4
 801eefe:	1400      	asrs	r0, r0, #16
 801ef00:	f53f af67 	bmi.w	801edd2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801ef04:	3901      	subs	r1, #1
 801ef06:	4288      	cmp	r0, r1
 801ef08:	f6bf af63 	bge.w	801edd2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801ef0c:	9920      	ldr	r1, [sp, #128]	; 0x80
 801ef0e:	fb01 6303 	mla	r3, r1, r3, r6
 801ef12:	141b      	asrs	r3, r3, #16
 801ef14:	f53f af5d 	bmi.w	801edd2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801ef18:	3a01      	subs	r2, #1
 801ef1a:	4293      	cmp	r3, r2
 801ef1c:	f6bf af59 	bge.w	801edd2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801ef20:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801ef24:	46ca      	mov	sl, r9
 801ef26:	f1b8 0f00 	cmp.w	r8, #0
 801ef2a:	dc67      	bgt.n	801effc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801ef2c:	9b06      	ldr	r3, [sp, #24]
 801ef2e:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801ef32:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 801ef36:	9b08      	ldr	r3, [sp, #32]
 801ef38:	2b00      	cmp	r3, #0
 801ef3a:	f340 80d7 	ble.w	801f0ec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 801ef3e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ef42:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ef44:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ef48:	eeb0 6a62 	vmov.f32	s12, s5
 801ef4c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ef50:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ef54:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ef58:	ee16 4a10 	vmov	r4, s12
 801ef5c:	eeb0 6a43 	vmov.f32	s12, s6
 801ef60:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ef64:	ee16 6a10 	vmov	r6, s12
 801ef68:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ef6c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ef70:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ef74:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ef78:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ef7c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ef80:	ee12 2a90 	vmov	r2, s5
 801ef84:	eef0 2a47 	vmov.f32	s5, s14
 801ef88:	fb92 f3f3 	sdiv	r3, r2, r3
 801ef8c:	ee13 2a10 	vmov	r2, s6
 801ef90:	931f      	str	r3, [sp, #124]	; 0x7c
 801ef92:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ef94:	eeb0 3a67 	vmov.f32	s6, s15
 801ef98:	fb92 f3f3 	sdiv	r3, r2, r3
 801ef9c:	9320      	str	r3, [sp, #128]	; 0x80
 801ef9e:	9b08      	ldr	r3, [sp, #32]
 801efa0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801efa2:	3b01      	subs	r3, #1
 801efa4:	9308      	str	r3, [sp, #32]
 801efa6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801efa8:	bf08      	it	eq
 801efaa:	4613      	moveq	r3, r2
 801efac:	9306      	str	r3, [sp, #24]
 801efae:	e6e4      	b.n	801ed7a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801efb0:	2900      	cmp	r1, #0
 801efb2:	f43f af4e 	beq.w	801ee52 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801efb6:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801efba:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801efbe:	9309      	str	r3, [sp, #36]	; 0x24
 801efc0:	e747      	b.n	801ee52 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801efc2:	f112 0a01 	adds.w	sl, r2, #1
 801efc6:	d481      	bmi.n	801eecc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801efc8:	4553      	cmp	r3, sl
 801efca:	f6ff af7f 	blt.w	801eecc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801efce:	f11c 0a01 	adds.w	sl, ip, #1
 801efd2:	f53f af7b 	bmi.w	801eecc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801efd6:	45d6      	cmp	lr, sl
 801efd8:	f6ff af78 	blt.w	801eecc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801efdc:	b21b      	sxth	r3, r3
 801efde:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 801efe2:	fa0f f28e 	sxth.w	r2, lr
 801efe6:	9300      	str	r3, [sp, #0]
 801efe8:	463b      	mov	r3, r7
 801efea:	9201      	str	r2, [sp, #4]
 801efec:	9a07      	ldr	r2, [sp, #28]
 801efee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801eff2:	4641      	mov	r1, r8
 801eff4:	9810      	ldr	r0, [sp, #64]	; 0x40
 801eff6:	f7ff fe21 	bl	801ec3c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 801effa:	e767      	b.n	801eecc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801effc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801effe:	1422      	asrs	r2, r4, #16
 801f000:	1431      	asrs	r1, r6, #16
 801f002:	9d07      	ldr	r5, [sp, #28]
 801f004:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801f008:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 801f00c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801f010:	fb03 2101 	mla	r1, r3, r1, r2
 801f014:	9a07      	ldr	r2, [sp, #28]
 801f016:	440a      	add	r2, r1
 801f018:	5c69      	ldrb	r1, [r5, r1]
 801f01a:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 801f01e:	f1be 0f00 	cmp.w	lr, #0
 801f022:	d05c      	beq.n	801f0de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 801f024:	f892 c001 	ldrb.w	ip, [r2, #1]
 801f028:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 801f02c:	950d      	str	r5, [sp, #52]	; 0x34
 801f02e:	b150      	cbz	r0, 801f046 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801f030:	eb02 0c03 	add.w	ip, r2, r3
 801f034:	5cd3      	ldrb	r3, [r2, r3]
 801f036:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801f03a:	930a      	str	r3, [sp, #40]	; 0x28
 801f03c:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801f040:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801f044:	930e      	str	r3, [sp, #56]	; 0x38
 801f046:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f048:	fb1e f200 	smulbb	r2, lr, r0
 801f04c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801f04e:	f108 38ff 	add.w	r8, r8, #4294967295
 801f052:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801f056:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801f05a:	10d2      	asrs	r2, r2, #3
 801f05c:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 801f060:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801f064:	ea4c 0c03 	orr.w	ip, ip, r3
 801f068:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 801f06c:	9311      	str	r3, [sp, #68]	; 0x44
 801f06e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f070:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801f072:	041b      	lsls	r3, r3, #16
 801f074:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801f078:	ea43 030b 	orr.w	r3, r3, fp
 801f07c:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801f080:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801f084:	4353      	muls	r3, r2
 801f086:	fb05 3c0c 	mla	ip, r5, ip, r3
 801f08a:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801f08e:	ea43 0b01 	orr.w	fp, r3, r1
 801f092:	f1c0 0110 	rsb	r1, r0, #16
 801f096:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f098:	eba1 0e0e 	sub.w	lr, r1, lr
 801f09c:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 801f0a0:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801f0a4:	fb0e cc0b 	mla	ip, lr, fp, ip
 801f0a8:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 801f0ac:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 801f0b0:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801f0b4:	ea4b 0e0e 	orr.w	lr, fp, lr
 801f0b8:	fb02 cc0e 	mla	ip, r2, lr, ip
 801f0bc:	ea4f 535c 	mov.w	r3, ip, lsr #21
 801f0c0:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801f0c4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f0c8:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801f0cc:	ea43 0c0c 	orr.w	ip, r3, ip
 801f0d0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801f0d2:	441c      	add	r4, r3
 801f0d4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f0d6:	f82a cb02 	strh.w	ip, [sl], #2
 801f0da:	441e      	add	r6, r3
 801f0dc:	e723      	b.n	801ef26 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801f0de:	2800      	cmp	r0, #0
 801f0e0:	d0b1      	beq.n	801f046 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801f0e2:	5cd3      	ldrb	r3, [r2, r3]
 801f0e4:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801f0e8:	930a      	str	r3, [sp, #40]	; 0x28
 801f0ea:	e7ac      	b.n	801f046 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801f0ec:	b013      	add	sp, #76	; 0x4c
 801f0ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f0f2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 801f0f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f0f6:	880d      	ldrh	r5, [r1, #0]
 801f0f8:	b087      	sub	sp, #28
 801f0fa:	10ef      	asrs	r7, r5, #3
 801f0fc:	9103      	str	r1, [sp, #12]
 801f0fe:	ea4f 2a25 	mov.w	sl, r5, asr #8
 801f102:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	; 0x40
 801f106:	00ed      	lsls	r5, r5, #3
 801f108:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f10c:	f00a 0af8 	and.w	sl, sl, #248	; 0xf8
 801f110:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 801f114:	b2ed      	uxtb	r5, r5
 801f116:	9701      	str	r7, [sp, #4]
 801f118:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 801f11c:	9502      	str	r5, [sp, #8]
 801f11e:	9d01      	ldr	r5, [sp, #4]
 801f120:	9902      	ldr	r1, [sp, #8]
 801f122:	022d      	lsls	r5, r5, #8
 801f124:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 801f128:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
 801f12c:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 801f130:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 801f134:	430d      	orrs	r5, r1
 801f136:	fb06 0709 	mla	r7, r6, r9, r0
 801f13a:	2e00      	cmp	r6, #0
 801f13c:	9505      	str	r5, [sp, #20]
 801f13e:	eb02 0c07 	add.w	ip, r2, r7
 801f142:	f2c0 80b6 	blt.w	801f2b2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 801f146:	45b3      	cmp	fp, r6
 801f148:	f340 80b3 	ble.w	801f2b2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 801f14c:	2800      	cmp	r0, #0
 801f14e:	f2c0 80ae 	blt.w	801f2ae <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 801f152:	4581      	cmp	r9, r0
 801f154:	f340 80ab 	ble.w	801f2ae <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 801f158:	5dd7      	ldrb	r7, [r2, r7]
 801f15a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801f15e:	441f      	add	r7, r3
 801f160:	1c42      	adds	r2, r0, #1
 801f162:	f100 80a9 	bmi.w	801f2b8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801f166:	4591      	cmp	r9, r2
 801f168:	f340 80a6 	ble.w	801f2b8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801f16c:	2c00      	cmp	r4, #0
 801f16e:	f000 80a3 	beq.w	801f2b8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801f172:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801f176:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f17a:	441d      	add	r5, r3
 801f17c:	3601      	adds	r6, #1
 801f17e:	f100 809f 	bmi.w	801f2c0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801f182:	45b3      	cmp	fp, r6
 801f184:	f340 809c 	ble.w	801f2c0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801f188:	f1be 0f00 	cmp.w	lr, #0
 801f18c:	f000 8098 	beq.w	801f2c0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801f190:	2800      	cmp	r0, #0
 801f192:	f2c0 8093 	blt.w	801f2bc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 801f196:	4581      	cmp	r9, r0
 801f198:	f340 8090 	ble.w	801f2bc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 801f19c:	f81c 6009 	ldrb.w	r6, [ip, r9]
 801f1a0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f1a4:	441e      	add	r6, r3
 801f1a6:	3001      	adds	r0, #1
 801f1a8:	f100 808d 	bmi.w	801f2c6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801f1ac:	4581      	cmp	r9, r0
 801f1ae:	f340 808a 	ble.w	801f2c6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801f1b2:	2c00      	cmp	r4, #0
 801f1b4:	f000 8087 	beq.w	801f2c6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801f1b8:	44e1      	add	r9, ip
 801f1ba:	f899 2001 	ldrb.w	r2, [r9, #1]
 801f1be:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f1c2:	4413      	add	r3, r2
 801f1c4:	b2a4      	uxth	r4, r4
 801f1c6:	f897 c002 	ldrb.w	ip, [r7, #2]
 801f1ca:	fa1f fe8e 	uxth.w	lr, lr
 801f1ce:	9901      	ldr	r1, [sp, #4]
 801f1d0:	fb04 fb0e 	mul.w	fp, r4, lr
 801f1d4:	0124      	lsls	r4, r4, #4
 801f1d6:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
 801f1da:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
 801f1de:	eba4 040b 	sub.w	r4, r4, fp
 801f1e2:	fa1f f08e 	uxth.w	r0, lr
 801f1e6:	b2a2      	uxth	r2, r4
 801f1e8:	78ac      	ldrb	r4, [r5, #2]
 801f1ea:	eba9 0900 	sub.w	r9, r9, r0
 801f1ee:	fa1f fe88 	uxth.w	lr, r8
 801f1f2:	4354      	muls	r4, r2
 801f1f4:	ea6f 0808 	mvn.w	r8, r8
 801f1f8:	fa1f f989 	uxth.w	r9, r9
 801f1fc:	fa5f f888 	uxtb.w	r8, r8
 801f200:	fb09 440c 	mla	r4, r9, ip, r4
 801f204:	f896 c002 	ldrb.w	ip, [r6, #2]
 801f208:	fb1a fa08 	smulbb	sl, sl, r8
 801f20c:	fb00 440c 	mla	r4, r0, ip, r4
 801f210:	f893 c002 	ldrb.w	ip, [r3, #2]
 801f214:	fb0b 4c0c 	mla	ip, fp, ip, r4
 801f218:	787c      	ldrb	r4, [r7, #1]
 801f21a:	783f      	ldrb	r7, [r7, #0]
 801f21c:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801f220:	fb0c ac0e 	mla	ip, ip, lr, sl
 801f224:	f895 a001 	ldrb.w	sl, [r5, #1]
 801f228:	782d      	ldrb	r5, [r5, #0]
 801f22a:	fb02 fa0a 	mul.w	sl, r2, sl
 801f22e:	fa1f fc8c 	uxth.w	ip, ip
 801f232:	436a      	muls	r2, r5
 801f234:	7835      	ldrb	r5, [r6, #0]
 801f236:	fb09 aa04 	mla	sl, r9, r4, sl
 801f23a:	7874      	ldrb	r4, [r6, #1]
 801f23c:	fb09 2207 	mla	r2, r9, r7, r2
 801f240:	fb00 aa04 	mla	sl, r0, r4, sl
 801f244:	785c      	ldrb	r4, [r3, #1]
 801f246:	fb00 2005 	mla	r0, r0, r5, r2
 801f24a:	781b      	ldrb	r3, [r3, #0]
 801f24c:	fb0b a404 	mla	r4, fp, r4, sl
 801f250:	fb11 fa08 	smulbb	sl, r1, r8
 801f254:	fb0b 0b03 	mla	fp, fp, r3, r0
 801f258:	9b02      	ldr	r3, [sp, #8]
 801f25a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801f25e:	fb13 f808 	smulbb	r8, r3, r8
 801f262:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 801f266:	fb04 a40e 	mla	r4, r4, lr, sl
 801f26a:	f10c 0301 	add.w	r3, ip, #1
 801f26e:	fb0b 8e0e 	mla	lr, fp, lr, r8
 801f272:	b2a4      	uxth	r4, r4
 801f274:	fa1f fe8e 	uxth.w	lr, lr
 801f278:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801f27c:	f104 0a01 	add.w	sl, r4, #1
 801f280:	f40c 4378 	and.w	r3, ip, #63488	; 0xf800
 801f284:	f10e 0c01 	add.w	ip, lr, #1
 801f288:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801f28c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801f290:	0964      	lsrs	r4, r4, #5
 801f292:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801f296:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801f29a:	ea4c 0c03 	orr.w	ip, ip, r3
 801f29e:	9b03      	ldr	r3, [sp, #12]
 801f2a0:	ea4c 0c04 	orr.w	ip, ip, r4
 801f2a4:	f8a3 c000 	strh.w	ip, [r3]
 801f2a8:	b007      	add	sp, #28
 801f2aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f2ae:	af05      	add	r7, sp, #20
 801f2b0:	e756      	b.n	801f160 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
 801f2b2:	ad05      	add	r5, sp, #20
 801f2b4:	462f      	mov	r7, r5
 801f2b6:	e761      	b.n	801f17c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 801f2b8:	ad05      	add	r5, sp, #20
 801f2ba:	e75f      	b.n	801f17c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 801f2bc:	ae05      	add	r6, sp, #20
 801f2be:	e772      	b.n	801f1a6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 801f2c0:	ab05      	add	r3, sp, #20
 801f2c2:	461e      	mov	r6, r3
 801f2c4:	e77e      	b.n	801f1c4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
 801f2c6:	ab05      	add	r3, sp, #20
 801f2c8:	e77c      	b.n	801f1c4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

0801f2ca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f2ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f2ce:	b095      	sub	sp, #84	; 0x54
 801f2d0:	9212      	str	r2, [sp, #72]	; 0x48
 801f2d2:	9309      	str	r3, [sp, #36]	; 0x24
 801f2d4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801f2d6:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 801f2da:	9013      	str	r0, [sp, #76]	; 0x4c
 801f2dc:	930f      	str	r3, [sp, #60]	; 0x3c
 801f2de:	6850      	ldr	r0, [r2, #4]
 801f2e0:	910e      	str	r1, [sp, #56]	; 0x38
 801f2e2:	6812      	ldr	r2, [r2, #0]
 801f2e4:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	; 0x90
 801f2e8:	fb00 1303 	mla	r3, r0, r3, r1
 801f2ec:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801f2f0:	930a      	str	r3, [sp, #40]	; 0x28
 801f2f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f2f4:	681b      	ldr	r3, [r3, #0]
 801f2f6:	930d      	str	r3, [sp, #52]	; 0x34
 801f2f8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f2fa:	685c      	ldr	r4, [r3, #4]
 801f2fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f2fe:	3404      	adds	r4, #4
 801f300:	43db      	mvns	r3, r3
 801f302:	b2db      	uxtb	r3, r3
 801f304:	930b      	str	r3, [sp, #44]	; 0x2c
 801f306:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f308:	2b00      	cmp	r3, #0
 801f30a:	dc03      	bgt.n	801f314 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801f30c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f30e:	2b00      	cmp	r3, #0
 801f310:	f340 8255 	ble.w	801f7be <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 801f314:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f316:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f31a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f31e:	1e48      	subs	r0, r1, #1
 801f320:	1e55      	subs	r5, r2, #1
 801f322:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f324:	2b00      	cmp	r3, #0
 801f326:	f340 80f9 	ble.w	801f51c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801f32a:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 801f32c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f32e:	1436      	asrs	r6, r6, #16
 801f330:	ea4f 4323 	mov.w	r3, r3, asr #16
 801f334:	d406      	bmi.n	801f344 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f336:	4286      	cmp	r6, r0
 801f338:	da04      	bge.n	801f344 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f33a:	2b00      	cmp	r3, #0
 801f33c:	db02      	blt.n	801f344 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f33e:	42ab      	cmp	r3, r5
 801f340:	f2c0 80ed 	blt.w	801f51e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801f344:	3601      	adds	r6, #1
 801f346:	f100 80da 	bmi.w	801f4fe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801f34a:	42b1      	cmp	r1, r6
 801f34c:	f2c0 80d7 	blt.w	801f4fe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801f350:	3301      	adds	r3, #1
 801f352:	f100 80d4 	bmi.w	801f4fe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801f356:	429a      	cmp	r2, r3
 801f358:	f2c0 80d1 	blt.w	801f4fe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801f35c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f35e:	9311      	str	r3, [sp, #68]	; 0x44
 801f360:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f362:	930c      	str	r3, [sp, #48]	; 0x30
 801f364:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f366:	2b00      	cmp	r3, #0
 801f368:	f340 80fa 	ble.w	801f560 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801f36c:	9826      	ldr	r0, [sp, #152]	; 0x98
 801f36e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f370:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801f372:	68c6      	ldr	r6, [r0, #12]
 801f374:	141d      	asrs	r5, r3, #16
 801f376:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801f378:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801f37c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801f37e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801f380:	1400      	asrs	r0, r0, #16
 801f382:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801f386:	6892      	ldr	r2, [r2, #8]
 801f388:	f100 813e 	bmi.w	801f608 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801f38c:	1e57      	subs	r7, r2, #1
 801f38e:	42b8      	cmp	r0, r7
 801f390:	f280 813a 	bge.w	801f608 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801f394:	2d00      	cmp	r5, #0
 801f396:	f2c0 8137 	blt.w	801f608 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801f39a:	1e77      	subs	r7, r6, #1
 801f39c:	42bd      	cmp	r5, r7
 801f39e:	f280 8133 	bge.w	801f608 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801f3a2:	b212      	sxth	r2, r2
 801f3a4:	fb05 0002 	mla	r0, r5, r2, r0
 801f3a8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801f3aa:	f815 a000 	ldrb.w	sl, [r5, r0]
 801f3ae:	182e      	adds	r6, r5, r0
 801f3b0:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 801f3b4:	eb04 050a 	add.w	r5, r4, sl
 801f3b8:	2b00      	cmp	r3, #0
 801f3ba:	f000 8117 	beq.w	801f5ec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801f3be:	f896 c001 	ldrb.w	ip, [r6, #1]
 801f3c2:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801f3c6:	44a4      	add	ip, r4
 801f3c8:	2900      	cmp	r1, #0
 801f3ca:	f000 8117 	beq.w	801f5fc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801f3ce:	18b0      	adds	r0, r6, r2
 801f3d0:	5cb2      	ldrb	r2, [r6, r2]
 801f3d2:	7840      	ldrb	r0, [r0, #1]
 801f3d4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f3d8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f3dc:	4422      	add	r2, r4
 801f3de:	4420      	add	r0, r4
 801f3e0:	b29b      	uxth	r3, r3
 801f3e2:	f89c 7002 	ldrb.w	r7, [ip, #2]
 801f3e6:	b289      	uxth	r1, r1
 801f3e8:	f895 b002 	ldrb.w	fp, [r5, #2]
 801f3ec:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801f3ee:	fb03 f901 	mul.w	r9, r3, r1
 801f3f2:	011b      	lsls	r3, r3, #4
 801f3f4:	f8b6 e000 	ldrh.w	lr, [r6]
 801f3f8:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801f3fc:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 801f400:	eba3 0309 	sub.w	r3, r3, r9
 801f404:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 801f408:	b289      	uxth	r1, r1
 801f40a:	f814 a00a 	ldrb.w	sl, [r4, sl]
 801f40e:	b29b      	uxth	r3, r3
 801f410:	eba8 0801 	sub.w	r8, r8, r1
 801f414:	435f      	muls	r7, r3
 801f416:	fa1f f888 	uxth.w	r8, r8
 801f41a:	9310      	str	r3, [sp, #64]	; 0x40
 801f41c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f41e:	fb08 770b 	mla	r7, r8, fp, r7
 801f422:	f892 b002 	ldrb.w	fp, [r2, #2]
 801f426:	fb01 770b 	mla	r7, r1, fp, r7
 801f42a:	f890 b002 	ldrb.w	fp, [r0, #2]
 801f42e:	fb09 770b 	mla	r7, r9, fp, r7
 801f432:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 801f436:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 801f43a:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801f43e:	fb1b fb03 	smulbb	fp, fp, r3
 801f442:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f444:	fb07 b706 	mla	r7, r7, r6, fp
 801f448:	f895 b001 	ldrb.w	fp, [r5, #1]
 801f44c:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801f450:	f89c c000 	ldrb.w	ip, [ip]
 801f454:	b2bf      	uxth	r7, r7
 801f456:	435d      	muls	r5, r3
 801f458:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f45a:	fb08 550b 	mla	r5, r8, fp, r5
 801f45e:	f892 b001 	ldrb.w	fp, [r2, #1]
 801f462:	fb01 550b 	mla	r5, r1, fp, r5
 801f466:	f890 b001 	ldrb.w	fp, [r0, #1]
 801f46a:	fb09 550b 	mla	r5, r9, fp, r5
 801f46e:	ea4f 0bee 	mov.w	fp, lr, asr #3
 801f472:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801f476:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801f47a:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801f47e:	fa5f fe8e 	uxtb.w	lr, lr
 801f482:	fb1b fb03 	smulbb	fp, fp, r3
 801f486:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f488:	fb03 f30c 	mul.w	r3, r3, ip
 801f48c:	f892 c000 	ldrb.w	ip, [r2]
 801f490:	fb05 b506 	mla	r5, r5, r6, fp
 801f494:	fb08 330a 	mla	r3, r8, sl, r3
 801f498:	b2ad      	uxth	r5, r5
 801f49a:	fb01 330c 	mla	r3, r1, ip, r3
 801f49e:	f890 c000 	ldrb.w	ip, [r0]
 801f4a2:	f105 0b01 	add.w	fp, r5, #1
 801f4a6:	fb09 3c0c 	mla	ip, r9, ip, r3
 801f4aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f4ac:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 801f4b0:	fb1e fe03 	smulbb	lr, lr, r3
 801f4b4:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801f4b8:	1c7b      	adds	r3, r7, #1
 801f4ba:	096d      	lsrs	r5, r5, #5
 801f4bc:	fb0c e606 	mla	r6, ip, r6, lr
 801f4c0:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801f4c4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801f4c8:	b2b6      	uxth	r6, r6
 801f4ca:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
 801f4ce:	1c77      	adds	r7, r6, #1
 801f4d0:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 801f4d4:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801f4d8:	431f      	orrs	r7, r3
 801f4da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f4dc:	433d      	orrs	r5, r7
 801f4de:	801d      	strh	r5, [r3, #0]
 801f4e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f4e2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801f4e4:	3302      	adds	r3, #2
 801f4e6:	930c      	str	r3, [sp, #48]	; 0x30
 801f4e8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801f4ea:	4413      	add	r3, r2
 801f4ec:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801f4ee:	931f      	str	r3, [sp, #124]	; 0x7c
 801f4f0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f4f2:	4413      	add	r3, r2
 801f4f4:	9320      	str	r3, [sp, #128]	; 0x80
 801f4f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f4f8:	3b01      	subs	r3, #1
 801f4fa:	9311      	str	r3, [sp, #68]	; 0x44
 801f4fc:	e732      	b.n	801f364 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801f4fe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801f500:	9e21      	ldr	r6, [sp, #132]	; 0x84
 801f502:	4433      	add	r3, r6
 801f504:	9e22      	ldr	r6, [sp, #136]	; 0x88
 801f506:	931f      	str	r3, [sp, #124]	; 0x7c
 801f508:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f50a:	4433      	add	r3, r6
 801f50c:	9320      	str	r3, [sp, #128]	; 0x80
 801f50e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f510:	3b01      	subs	r3, #1
 801f512:	9309      	str	r3, [sp, #36]	; 0x24
 801f514:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f516:	3302      	adds	r3, #2
 801f518:	930a      	str	r3, [sp, #40]	; 0x28
 801f51a:	e702      	b.n	801f322 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801f51c:	d027      	beq.n	801f56e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 801f51e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f520:	9821      	ldr	r0, [sp, #132]	; 0x84
 801f522:	3b01      	subs	r3, #1
 801f524:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 801f526:	fb00 5003 	mla	r0, r0, r3, r5
 801f52a:	1400      	asrs	r0, r0, #16
 801f52c:	f53f af16 	bmi.w	801f35c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801f530:	3901      	subs	r1, #1
 801f532:	4288      	cmp	r0, r1
 801f534:	f6bf af12 	bge.w	801f35c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801f538:	9922      	ldr	r1, [sp, #136]	; 0x88
 801f53a:	9820      	ldr	r0, [sp, #128]	; 0x80
 801f53c:	fb01 0303 	mla	r3, r1, r3, r0
 801f540:	141b      	asrs	r3, r3, #16
 801f542:	f53f af0b 	bmi.w	801f35c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801f546:	3a01      	subs	r2, #1
 801f548:	4293      	cmp	r3, r2
 801f54a:	f6bf af07 	bge.w	801f35c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801f54e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f550:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 801f554:	9311      	str	r3, [sp, #68]	; 0x44
 801f556:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f558:	930c      	str	r3, [sp, #48]	; 0x30
 801f55a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f55c:	2b00      	cmp	r3, #0
 801f55e:	dc70      	bgt.n	801f642 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 801f560:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f562:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f564:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f568:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801f56c:	930a      	str	r3, [sp, #40]	; 0x28
 801f56e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f570:	2b00      	cmp	r3, #0
 801f572:	f340 8124 	ble.w	801f7be <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 801f576:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f57a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801f57c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f580:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f584:	eef0 6a62 	vmov.f32	s13, s5
 801f588:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f58c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f590:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f594:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 801f598:	eef0 6a43 	vmov.f32	s13, s6
 801f59c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f5a0:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 801f5a4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f5a8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f5ac:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f5b0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f5b4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f5b8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f5bc:	ee12 2a90 	vmov	r2, s5
 801f5c0:	eef0 2a47 	vmov.f32	s5, s14
 801f5c4:	fb92 f3f3 	sdiv	r3, r2, r3
 801f5c8:	ee13 2a10 	vmov	r2, s6
 801f5cc:	9321      	str	r3, [sp, #132]	; 0x84
 801f5ce:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801f5d0:	eeb0 3a67 	vmov.f32	s6, s15
 801f5d4:	fb92 f3f3 	sdiv	r3, r2, r3
 801f5d8:	9322      	str	r3, [sp, #136]	; 0x88
 801f5da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f5dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f5de:	3b01      	subs	r3, #1
 801f5e0:	930e      	str	r3, [sp, #56]	; 0x38
 801f5e2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801f5e4:	bf08      	it	eq
 801f5e6:	4613      	moveq	r3, r2
 801f5e8:	9309      	str	r3, [sp, #36]	; 0x24
 801f5ea:	e68c      	b.n	801f306 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801f5ec:	b149      	cbz	r1, 801f602 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 801f5ee:	5cb2      	ldrb	r2, [r6, r2]
 801f5f0:	4628      	mov	r0, r5
 801f5f2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f5f6:	4422      	add	r2, r4
 801f5f8:	46ac      	mov	ip, r5
 801f5fa:	e6f1      	b.n	801f3e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801f5fc:	4628      	mov	r0, r5
 801f5fe:	462a      	mov	r2, r5
 801f600:	e6ee      	b.n	801f3e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801f602:	4628      	mov	r0, r5
 801f604:	462a      	mov	r2, r5
 801f606:	e7f7      	b.n	801f5f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 801f608:	1c47      	adds	r7, r0, #1
 801f60a:	f53f af69 	bmi.w	801f4e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801f60e:	42ba      	cmp	r2, r7
 801f610:	f6ff af66 	blt.w	801f4e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801f614:	1c6f      	adds	r7, r5, #1
 801f616:	f53f af63 	bmi.w	801f4e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801f61a:	42be      	cmp	r6, r7
 801f61c:	f6ff af60 	blt.w	801f4e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801f620:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801f622:	b236      	sxth	r6, r6
 801f624:	b212      	sxth	r2, r2
 801f626:	9002      	str	r0, [sp, #8]
 801f628:	9601      	str	r6, [sp, #4]
 801f62a:	9200      	str	r2, [sp, #0]
 801f62c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f62e:	e9cd 1705 	strd	r1, r7, [sp, #20]
 801f632:	e9cd 5303 	strd	r5, r3, [sp, #12]
 801f636:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 801f63a:	4623      	mov	r3, r4
 801f63c:	f7ff fd59 	bl	801f0f2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 801f640:	e74e      	b.n	801f4e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801f642:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801f644:	9820      	ldr	r0, [sp, #128]	; 0x80
 801f646:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801f64a:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 801f64c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801f64e:	1400      	asrs	r0, r0, #16
 801f650:	142d      	asrs	r5, r5, #16
 801f652:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801f654:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801f658:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801f65c:	fb02 5000 	mla	r0, r2, r0, r5
 801f660:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801f662:	f815 9000 	ldrb.w	r9, [r5, r0]
 801f666:	182e      	adds	r6, r5, r0
 801f668:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801f66c:	eb04 0509 	add.w	r5, r4, r9
 801f670:	2b00      	cmp	r3, #0
 801f672:	f000 8096 	beq.w	801f7a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 801f676:	7877      	ldrb	r7, [r6, #1]
 801f678:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801f67c:	4427      	add	r7, r4
 801f67e:	2900      	cmp	r1, #0
 801f680:	f000 8097 	beq.w	801f7b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
 801f684:	18b0      	adds	r0, r6, r2
 801f686:	5cb2      	ldrb	r2, [r6, r2]
 801f688:	7840      	ldrb	r0, [r0, #1]
 801f68a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f68e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f692:	4422      	add	r2, r4
 801f694:	4420      	add	r0, r4
 801f696:	b29b      	uxth	r3, r3
 801f698:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801f69a:	b289      	uxth	r1, r1
 801f69c:	f895 b002 	ldrb.w	fp, [r5, #2]
 801f6a0:	f8b6 c000 	ldrh.w	ip, [r6]
 801f6a4:	fb03 f801 	mul.w	r8, r3, r1
 801f6a8:	011b      	lsls	r3, r3, #4
 801f6aa:	78be      	ldrb	r6, [r7, #2]
 801f6ac:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801f6b0:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801f6b4:	eba3 0308 	sub.w	r3, r3, r8
 801f6b8:	f814 9009 	ldrb.w	r9, [r4, r9]
 801f6bc:	b289      	uxth	r1, r1
 801f6be:	b29b      	uxth	r3, r3
 801f6c0:	ebae 0e01 	sub.w	lr, lr, r1
 801f6c4:	435e      	muls	r6, r3
 801f6c6:	fa1f fe8e 	uxth.w	lr, lr
 801f6ca:	9310      	str	r3, [sp, #64]	; 0x40
 801f6cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f6ce:	fb0e 660b 	mla	r6, lr, fp, r6
 801f6d2:	f892 b002 	ldrb.w	fp, [r2, #2]
 801f6d6:	fb01 660b 	mla	r6, r1, fp, r6
 801f6da:	f890 b002 	ldrb.w	fp, [r0, #2]
 801f6de:	fb08 660b 	mla	r6, r8, fp, r6
 801f6e2:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 801f6e6:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 801f6ea:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801f6ee:	fb1b fb03 	smulbb	fp, fp, r3
 801f6f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f6f4:	fb06 b60a 	mla	r6, r6, sl, fp
 801f6f8:	f895 b001 	ldrb.w	fp, [r5, #1]
 801f6fc:	787d      	ldrb	r5, [r7, #1]
 801f6fe:	783f      	ldrb	r7, [r7, #0]
 801f700:	b2b6      	uxth	r6, r6
 801f702:	435d      	muls	r5, r3
 801f704:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f706:	fb0e 550b 	mla	r5, lr, fp, r5
 801f70a:	f892 b001 	ldrb.w	fp, [r2, #1]
 801f70e:	fb01 550b 	mla	r5, r1, fp, r5
 801f712:	f890 b001 	ldrb.w	fp, [r0, #1]
 801f716:	fb08 550b 	mla	r5, r8, fp, r5
 801f71a:	ea4f 0bec 	mov.w	fp, ip, asr #3
 801f71e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801f722:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801f726:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801f72a:	fa5f fc8c 	uxtb.w	ip, ip
 801f72e:	fb1b fb03 	smulbb	fp, fp, r3
 801f732:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f734:	437b      	muls	r3, r7
 801f736:	7817      	ldrb	r7, [r2, #0]
 801f738:	fb05 b50a 	mla	r5, r5, sl, fp
 801f73c:	fb0e 3309 	mla	r3, lr, r9, r3
 801f740:	b2ad      	uxth	r5, r5
 801f742:	fb01 3307 	mla	r3, r1, r7, r3
 801f746:	7807      	ldrb	r7, [r0, #0]
 801f748:	f105 0b01 	add.w	fp, r5, #1
 801f74c:	fb08 3707 	mla	r7, r8, r7, r3
 801f750:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f752:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 801f756:	fb1c fc03 	smulbb	ip, ip, r3
 801f75a:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801f75e:	1c73      	adds	r3, r6, #1
 801f760:	096d      	lsrs	r5, r5, #5
 801f762:	fb07 c70a 	mla	r7, r7, sl, ip
 801f766:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801f76a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801f76e:	b2bf      	uxth	r7, r7
 801f770:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f772:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801f776:	1c7a      	adds	r2, r7, #1
 801f778:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 801f77c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801f780:	4316      	orrs	r6, r2
 801f782:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801f784:	432e      	orrs	r6, r5
 801f786:	f823 6b02 	strh.w	r6, [r3], #2
 801f78a:	930c      	str	r3, [sp, #48]	; 0x30
 801f78c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801f78e:	4413      	add	r3, r2
 801f790:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801f792:	931f      	str	r3, [sp, #124]	; 0x7c
 801f794:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f796:	4413      	add	r3, r2
 801f798:	9320      	str	r3, [sp, #128]	; 0x80
 801f79a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f79c:	3b01      	subs	r3, #1
 801f79e:	9311      	str	r3, [sp, #68]	; 0x44
 801f7a0:	e6db      	b.n	801f55a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 801f7a2:	b149      	cbz	r1, 801f7b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 801f7a4:	5cb2      	ldrb	r2, [r6, r2]
 801f7a6:	4628      	mov	r0, r5
 801f7a8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f7ac:	4422      	add	r2, r4
 801f7ae:	462f      	mov	r7, r5
 801f7b0:	e771      	b.n	801f696 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 801f7b2:	4628      	mov	r0, r5
 801f7b4:	462a      	mov	r2, r5
 801f7b6:	e76e      	b.n	801f696 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 801f7b8:	4628      	mov	r0, r5
 801f7ba:	462a      	mov	r2, r5
 801f7bc:	e7f7      	b.n	801f7ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 801f7be:	b015      	add	sp, #84	; 0x54
 801f7c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f7c4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 801f7c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f7c8:	880f      	ldrh	r7, [r1, #0]
 801f7ca:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 801f7ce:	023c      	lsls	r4, r7, #8
 801f7d0:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 801f7d4:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 801f7d8:	f404 0b78 	and.w	fp, r4, #16252928	; 0xf80000
 801f7dc:	017c      	lsls	r4, r7, #5
 801f7de:	00ff      	lsls	r7, r7, #3
 801f7e0:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 801f7e4:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
 801f7e8:	b2ff      	uxtb	r7, r7
 801f7ea:	ea4b 0404 	orr.w	r4, fp, r4
 801f7ee:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	; 0x38
 801f7f2:	4327      	orrs	r7, r4
 801f7f4:	fb05 ca0e 	mla	sl, r5, lr, ip
 801f7f8:	2d00      	cmp	r5, #0
 801f7fa:	9701      	str	r7, [sp, #4]
 801f7fc:	eb02 080a 	add.w	r8, r2, sl
 801f800:	db7e      	blt.n	801f900 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 801f802:	45a9      	cmp	r9, r5
 801f804:	dd7c      	ble.n	801f900 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 801f806:	f1bc 0f00 	cmp.w	ip, #0
 801f80a:	db77      	blt.n	801f8fc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 801f80c:	45e6      	cmp	lr, ip
 801f80e:	dd75      	ble.n	801f8fc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 801f810:	f812 700a 	ldrb.w	r7, [r2, sl]
 801f814:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801f818:	441f      	add	r7, r3
 801f81a:	f11c 0201 	adds.w	r2, ip, #1
 801f81e:	d472      	bmi.n	801f906 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 801f820:	4596      	cmp	lr, r2
 801f822:	dd70      	ble.n	801f906 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 801f824:	2800      	cmp	r0, #0
 801f826:	d06e      	beq.n	801f906 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 801f828:	f898 4001 	ldrb.w	r4, [r8, #1]
 801f82c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f830:	441c      	add	r4, r3
 801f832:	3501      	adds	r5, #1
 801f834:	d46b      	bmi.n	801f90e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 801f836:	45a9      	cmp	r9, r5
 801f838:	dd69      	ble.n	801f90e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 801f83a:	2e00      	cmp	r6, #0
 801f83c:	d067      	beq.n	801f90e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 801f83e:	f1bc 0f00 	cmp.w	ip, #0
 801f842:	db62      	blt.n	801f90a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 801f844:	45e6      	cmp	lr, ip
 801f846:	dd60      	ble.n	801f90a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 801f848:	f818 500e 	ldrb.w	r5, [r8, lr]
 801f84c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f850:	441d      	add	r5, r3
 801f852:	f11c 0201 	adds.w	r2, ip, #1
 801f856:	d45d      	bmi.n	801f914 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 801f858:	4596      	cmp	lr, r2
 801f85a:	dd5b      	ble.n	801f914 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 801f85c:	2800      	cmp	r0, #0
 801f85e:	d059      	beq.n	801f914 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 801f860:	44c6      	add	lr, r8
 801f862:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801f866:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f86a:	4413      	add	r3, r2
 801f86c:	b280      	uxth	r0, r0
 801f86e:	f897 e002 	ldrb.w	lr, [r7, #2]
 801f872:	b2b2      	uxth	r2, r6
 801f874:	f897 9000 	ldrb.w	r9, [r7]
 801f878:	787f      	ldrb	r7, [r7, #1]
 801f87a:	fb00 f602 	mul.w	r6, r0, r2
 801f87e:	0100      	lsls	r0, r0, #4
 801f880:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 801f884:	f5c0 7880 	rsb	r8, r0, #256	; 0x100
 801f888:	1b80      	subs	r0, r0, r6
 801f88a:	fa1f fc82 	uxth.w	ip, r2
 801f88e:	b282      	uxth	r2, r0
 801f890:	78a0      	ldrb	r0, [r4, #2]
 801f892:	eba8 080c 	sub.w	r8, r8, ip
 801f896:	4350      	muls	r0, r2
 801f898:	fa1f f888 	uxth.w	r8, r8
 801f89c:	fb08 0e0e 	mla	lr, r8, lr, r0
 801f8a0:	78a8      	ldrb	r0, [r5, #2]
 801f8a2:	fb0c e000 	mla	r0, ip, r0, lr
 801f8a6:	f893 e002 	ldrb.w	lr, [r3, #2]
 801f8aa:	fb06 0e0e 	mla	lr, r6, lr, r0
 801f8ae:	f40e 4078 	and.w	r0, lr, #63488	; 0xf800
 801f8b2:	f894 e000 	ldrb.w	lr, [r4]
 801f8b6:	fb02 fe0e 	mul.w	lr, r2, lr
 801f8ba:	fb08 e909 	mla	r9, r8, r9, lr
 801f8be:	f895 e000 	ldrb.w	lr, [r5]
 801f8c2:	fb0c 990e 	mla	r9, ip, lr, r9
 801f8c6:	f893 e000 	ldrb.w	lr, [r3]
 801f8ca:	785b      	ldrb	r3, [r3, #1]
 801f8cc:	fb06 9e0e 	mla	lr, r6, lr, r9
 801f8d0:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801f8d4:	ea4e 0e00 	orr.w	lr, lr, r0
 801f8d8:	7860      	ldrb	r0, [r4, #1]
 801f8da:	4350      	muls	r0, r2
 801f8dc:	786a      	ldrb	r2, [r5, #1]
 801f8de:	fb08 0007 	mla	r0, r8, r7, r0
 801f8e2:	fb0c 0202 	mla	r2, ip, r2, r0
 801f8e6:	fb06 2303 	mla	r3, r6, r3, r2
 801f8ea:	095b      	lsrs	r3, r3, #5
 801f8ec:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f8f0:	ea4e 0303 	orr.w	r3, lr, r3
 801f8f4:	800b      	strh	r3, [r1, #0]
 801f8f6:	b003      	add	sp, #12
 801f8f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f8fc:	af01      	add	r7, sp, #4
 801f8fe:	e78c      	b.n	801f81a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
 801f900:	ac01      	add	r4, sp, #4
 801f902:	4627      	mov	r7, r4
 801f904:	e795      	b.n	801f832 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 801f906:	ac01      	add	r4, sp, #4
 801f908:	e793      	b.n	801f832 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 801f90a:	ad01      	add	r5, sp, #4
 801f90c:	e7a1      	b.n	801f852 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
 801f90e:	ab01      	add	r3, sp, #4
 801f910:	461d      	mov	r5, r3
 801f912:	e7ab      	b.n	801f86c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
 801f914:	ab01      	add	r3, sp, #4
 801f916:	e7a9      	b.n	801f86c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

0801f918 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f91c:	b08f      	sub	sp, #60	; 0x3c
 801f91e:	920c      	str	r2, [sp, #48]	; 0x30
 801f920:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801f922:	900d      	str	r0, [sp, #52]	; 0x34
 801f924:	910a      	str	r1, [sp, #40]	; 0x28
 801f926:	6850      	ldr	r0, [r2, #4]
 801f928:	9306      	str	r3, [sp, #24]
 801f92a:	6812      	ldr	r2, [r2, #0]
 801f92c:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	; 0x78
 801f930:	e9dd b519 	ldrd	fp, r5, [sp, #100]	; 0x64
 801f934:	fb00 1303 	mla	r3, r0, r3, r1
 801f938:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801f93c:	9307      	str	r3, [sp, #28]
 801f93e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f940:	681b      	ldr	r3, [r3, #0]
 801f942:	9308      	str	r3, [sp, #32]
 801f944:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f946:	685c      	ldr	r4, [r3, #4]
 801f948:	3404      	adds	r4, #4
 801f94a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f94c:	2b00      	cmp	r3, #0
 801f94e:	dc03      	bgt.n	801f958 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801f950:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f952:	2b00      	cmp	r3, #0
 801f954:	f340 81d5 	ble.w	801fd02 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 801f958:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f95a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f95e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f962:	1e48      	subs	r0, r1, #1
 801f964:	1e56      	subs	r6, r2, #1
 801f966:	9b06      	ldr	r3, [sp, #24]
 801f968:	2b00      	cmp	r3, #0
 801f96a:	f340 80b6 	ble.w	801fada <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801f96e:	ea5f 472b 	movs.w	r7, fp, asr #16
 801f972:	ea4f 4325 	mov.w	r3, r5, asr #16
 801f976:	d406      	bmi.n	801f986 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801f978:	4287      	cmp	r7, r0
 801f97a:	da04      	bge.n	801f986 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801f97c:	2b00      	cmp	r3, #0
 801f97e:	db02      	blt.n	801f986 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801f980:	42b3      	cmp	r3, r6
 801f982:	f2c0 80ab 	blt.w	801fadc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 801f986:	3701      	adds	r7, #1
 801f988:	f100 809c 	bmi.w	801fac4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801f98c:	42b9      	cmp	r1, r7
 801f98e:	f2c0 8099 	blt.w	801fac4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801f992:	3301      	adds	r3, #1
 801f994:	f100 8096 	bmi.w	801fac4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801f998:	429a      	cmp	r2, r3
 801f99a:	f2c0 8093 	blt.w	801fac4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801f99e:	9b06      	ldr	r3, [sp, #24]
 801f9a0:	930b      	str	r3, [sp, #44]	; 0x2c
 801f9a2:	9b07      	ldr	r3, [sp, #28]
 801f9a4:	9309      	str	r3, [sp, #36]	; 0x24
 801f9a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f9a8:	2b00      	cmp	r3, #0
 801f9aa:	f340 80b4 	ble.w	801fb16 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801f9ae:	9820      	ldr	r0, [sp, #128]	; 0x80
 801f9b0:	142e      	asrs	r6, r5, #16
 801f9b2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801f9b4:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801f9b8:	68c7      	ldr	r7, [r0, #12]
 801f9ba:	ea5f 402b 	movs.w	r0, fp, asr #16
 801f9be:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801f9c2:	6892      	ldr	r2, [r2, #8]
 801f9c4:	f100 80fb 	bmi.w	801fbbe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801f9c8:	f102 3cff 	add.w	ip, r2, #4294967295
 801f9cc:	4560      	cmp	r0, ip
 801f9ce:	f280 80f6 	bge.w	801fbbe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801f9d2:	2e00      	cmp	r6, #0
 801f9d4:	f2c0 80f3 	blt.w	801fbbe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801f9d8:	f107 3cff 	add.w	ip, r7, #4294967295
 801f9dc:	4566      	cmp	r6, ip
 801f9de:	f280 80ee 	bge.w	801fbbe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801f9e2:	b212      	sxth	r2, r2
 801f9e4:	fb06 0002 	mla	r0, r6, r2, r0
 801f9e8:	9e08      	ldr	r6, [sp, #32]
 801f9ea:	1837      	adds	r7, r6, r0
 801f9ec:	5c30      	ldrb	r0, [r6, r0]
 801f9ee:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 801f9f2:	eb04 0c08 	add.w	ip, r4, r8
 801f9f6:	2b00      	cmp	r3, #0
 801f9f8:	f000 80d3 	beq.w	801fba2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801f9fc:	787e      	ldrb	r6, [r7, #1]
 801f9fe:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801fa02:	4426      	add	r6, r4
 801fa04:	2900      	cmp	r1, #0
 801fa06:	f000 80d4 	beq.w	801fbb2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801fa0a:	18b8      	adds	r0, r7, r2
 801fa0c:	5cba      	ldrb	r2, [r7, r2]
 801fa0e:	7840      	ldrb	r0, [r0, #1]
 801fa10:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fa14:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801fa18:	4422      	add	r2, r4
 801fa1a:	4420      	add	r0, r4
 801fa1c:	b29b      	uxth	r3, r3
 801fa1e:	78b7      	ldrb	r7, [r6, #2]
 801fa20:	b289      	uxth	r1, r1
 801fa22:	f89c a002 	ldrb.w	sl, [ip, #2]
 801fa26:	f89c c001 	ldrb.w	ip, [ip, #1]
 801fa2a:	fb03 f901 	mul.w	r9, r3, r1
 801fa2e:	011b      	lsls	r3, r3, #4
 801fa30:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801fa34:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801fa38:	eba3 0309 	sub.w	r3, r3, r9
 801fa3c:	b289      	uxth	r1, r1
 801fa3e:	b29b      	uxth	r3, r3
 801fa40:	ebae 0e01 	sub.w	lr, lr, r1
 801fa44:	435f      	muls	r7, r3
 801fa46:	fa1f fe8e 	uxth.w	lr, lr
 801fa4a:	fb0e 770a 	mla	r7, lr, sl, r7
 801fa4e:	f892 a002 	ldrb.w	sl, [r2, #2]
 801fa52:	fb01 770a 	mla	r7, r1, sl, r7
 801fa56:	f890 a002 	ldrb.w	sl, [r0, #2]
 801fa5a:	fb09 7a0a 	mla	sl, r9, sl, r7
 801fa5e:	f814 7008 	ldrb.w	r7, [r4, r8]
 801fa62:	f896 8000 	ldrb.w	r8, [r6]
 801fa66:	7876      	ldrb	r6, [r6, #1]
 801fa68:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 801fa6c:	fb03 f808 	mul.w	r8, r3, r8
 801fa70:	4373      	muls	r3, r6
 801fa72:	fb0e 8807 	mla	r8, lr, r7, r8
 801fa76:	7817      	ldrb	r7, [r2, #0]
 801fa78:	fb0e 330c 	mla	r3, lr, ip, r3
 801fa7c:	fb01 8807 	mla	r8, r1, r7, r8
 801fa80:	7807      	ldrb	r7, [r0, #0]
 801fa82:	fb09 8707 	mla	r7, r9, r7, r8
 801fa86:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801fa8a:	ea47 070a 	orr.w	r7, r7, sl
 801fa8e:	f892 a001 	ldrb.w	sl, [r2, #1]
 801fa92:	fb01 310a 	mla	r1, r1, sl, r3
 801fa96:	f890 a001 	ldrb.w	sl, [r0, #1]
 801fa9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fa9c:	fb09 1a0a 	mla	sl, r9, sl, r1
 801faa0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801faa4:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801faa8:	ea47 070a 	orr.w	r7, r7, sl
 801faac:	801f      	strh	r7, [r3, #0]
 801faae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fab0:	3302      	adds	r3, #2
 801fab2:	9309      	str	r3, [sp, #36]	; 0x24
 801fab4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801fab6:	449b      	add	fp, r3
 801fab8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801faba:	441d      	add	r5, r3
 801fabc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fabe:	3b01      	subs	r3, #1
 801fac0:	930b      	str	r3, [sp, #44]	; 0x2c
 801fac2:	e770      	b.n	801f9a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801fac4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801fac6:	449b      	add	fp, r3
 801fac8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801faca:	441d      	add	r5, r3
 801facc:	9b06      	ldr	r3, [sp, #24]
 801face:	3b01      	subs	r3, #1
 801fad0:	9306      	str	r3, [sp, #24]
 801fad2:	9b07      	ldr	r3, [sp, #28]
 801fad4:	3302      	adds	r3, #2
 801fad6:	9307      	str	r3, [sp, #28]
 801fad8:	e745      	b.n	801f966 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801fada:	d023      	beq.n	801fb24 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801fadc:	9b06      	ldr	r3, [sp, #24]
 801fade:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801fae0:	3b01      	subs	r3, #1
 801fae2:	fb00 b003 	mla	r0, r0, r3, fp
 801fae6:	1400      	asrs	r0, r0, #16
 801fae8:	f53f af59 	bmi.w	801f99e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801faec:	3901      	subs	r1, #1
 801faee:	4288      	cmp	r0, r1
 801faf0:	f6bf af55 	bge.w	801f99e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801faf4:	991c      	ldr	r1, [sp, #112]	; 0x70
 801faf6:	fb01 5303 	mla	r3, r1, r3, r5
 801fafa:	141b      	asrs	r3, r3, #16
 801fafc:	f53f af4f 	bmi.w	801f99e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801fb00:	3a01      	subs	r2, #1
 801fb02:	4293      	cmp	r3, r2
 801fb04:	f6bf af4b 	bge.w	801f99e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801fb08:	9b06      	ldr	r3, [sp, #24]
 801fb0a:	9309      	str	r3, [sp, #36]	; 0x24
 801fb0c:	9b07      	ldr	r3, [sp, #28]
 801fb0e:	930b      	str	r3, [sp, #44]	; 0x2c
 801fb10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fb12:	2b00      	cmp	r3, #0
 801fb14:	dc70      	bgt.n	801fbf8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801fb16:	9b06      	ldr	r3, [sp, #24]
 801fb18:	9a07      	ldr	r2, [sp, #28]
 801fb1a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fb1e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801fb22:	9307      	str	r3, [sp, #28]
 801fb24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fb26:	2b00      	cmp	r3, #0
 801fb28:	f340 80eb 	ble.w	801fd02 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 801fb2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801fb30:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801fb32:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fb36:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fb3a:	eef0 6a62 	vmov.f32	s13, s5
 801fb3e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801fb42:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fb46:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fb4a:	ee16 ba90 	vmov	fp, s13
 801fb4e:	eef0 6a43 	vmov.f32	s13, s6
 801fb52:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fb56:	ee16 5a90 	vmov	r5, s13
 801fb5a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fb5e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fb62:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fb66:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fb6a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fb6e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fb72:	ee12 2a90 	vmov	r2, s5
 801fb76:	eef0 2a47 	vmov.f32	s5, s14
 801fb7a:	fb92 f3f3 	sdiv	r3, r2, r3
 801fb7e:	ee13 2a10 	vmov	r2, s6
 801fb82:	931b      	str	r3, [sp, #108]	; 0x6c
 801fb84:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801fb86:	eeb0 3a67 	vmov.f32	s6, s15
 801fb8a:	fb92 f3f3 	sdiv	r3, r2, r3
 801fb8e:	931c      	str	r3, [sp, #112]	; 0x70
 801fb90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fb92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801fb94:	3b01      	subs	r3, #1
 801fb96:	930a      	str	r3, [sp, #40]	; 0x28
 801fb98:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801fb9a:	bf08      	it	eq
 801fb9c:	4613      	moveq	r3, r2
 801fb9e:	9306      	str	r3, [sp, #24]
 801fba0:	e6d3      	b.n	801f94a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801fba2:	b149      	cbz	r1, 801fbb8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 801fba4:	5cba      	ldrb	r2, [r7, r2]
 801fba6:	4660      	mov	r0, ip
 801fba8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fbac:	4422      	add	r2, r4
 801fbae:	4666      	mov	r6, ip
 801fbb0:	e734      	b.n	801fa1c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801fbb2:	4660      	mov	r0, ip
 801fbb4:	4662      	mov	r2, ip
 801fbb6:	e731      	b.n	801fa1c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801fbb8:	4660      	mov	r0, ip
 801fbba:	4662      	mov	r2, ip
 801fbbc:	e7f7      	b.n	801fbae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801fbbe:	f110 0c01 	adds.w	ip, r0, #1
 801fbc2:	f53f af74 	bmi.w	801faae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801fbc6:	4562      	cmp	r2, ip
 801fbc8:	f6ff af71 	blt.w	801faae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801fbcc:	f116 0c01 	adds.w	ip, r6, #1
 801fbd0:	f53f af6d 	bmi.w	801faae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801fbd4:	4567      	cmp	r7, ip
 801fbd6:	f6ff af6a 	blt.w	801faae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801fbda:	b23f      	sxth	r7, r7
 801fbdc:	b212      	sxth	r2, r2
 801fbde:	9701      	str	r7, [sp, #4]
 801fbe0:	9200      	str	r2, [sp, #0]
 801fbe2:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801fbe6:	e9cd 0602 	strd	r0, r6, [sp, #8]
 801fbea:	4623      	mov	r3, r4
 801fbec:	980d      	ldr	r0, [sp, #52]	; 0x34
 801fbee:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801fbf2:	f7ff fde7 	bl	801f7c4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 801fbf6:	e75a      	b.n	801faae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801fbf8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801fbfa:	ea4f 462b 	mov.w	r6, fp, asr #16
 801fbfe:	1428      	asrs	r0, r5, #16
 801fc00:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801fc04:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801fc08:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801fc0c:	fb02 6000 	mla	r0, r2, r0, r6
 801fc10:	9e08      	ldr	r6, [sp, #32]
 801fc12:	f816 8000 	ldrb.w	r8, [r6, r0]
 801fc16:	1837      	adds	r7, r6, r0
 801fc18:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801fc1c:	eb04 0c08 	add.w	ip, r4, r8
 801fc20:	2b00      	cmp	r3, #0
 801fc22:	d060      	beq.n	801fce6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 801fc24:	787e      	ldrb	r6, [r7, #1]
 801fc26:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801fc2a:	4426      	add	r6, r4
 801fc2c:	2900      	cmp	r1, #0
 801fc2e:	d062      	beq.n	801fcf6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 801fc30:	18b8      	adds	r0, r7, r2
 801fc32:	5cba      	ldrb	r2, [r7, r2]
 801fc34:	7840      	ldrb	r0, [r0, #1]
 801fc36:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fc3a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801fc3e:	4422      	add	r2, r4
 801fc40:	4420      	add	r0, r4
 801fc42:	b29b      	uxth	r3, r3
 801fc44:	78b7      	ldrb	r7, [r6, #2]
 801fc46:	b289      	uxth	r1, r1
 801fc48:	f89c a002 	ldrb.w	sl, [ip, #2]
 801fc4c:	f89c c001 	ldrb.w	ip, [ip, #1]
 801fc50:	fb03 f901 	mul.w	r9, r3, r1
 801fc54:	011b      	lsls	r3, r3, #4
 801fc56:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801fc5a:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801fc5e:	eba3 0309 	sub.w	r3, r3, r9
 801fc62:	b289      	uxth	r1, r1
 801fc64:	b29b      	uxth	r3, r3
 801fc66:	ebae 0e01 	sub.w	lr, lr, r1
 801fc6a:	435f      	muls	r7, r3
 801fc6c:	fa1f fe8e 	uxth.w	lr, lr
 801fc70:	fb0e 770a 	mla	r7, lr, sl, r7
 801fc74:	f892 a002 	ldrb.w	sl, [r2, #2]
 801fc78:	fb01 770a 	mla	r7, r1, sl, r7
 801fc7c:	f890 a002 	ldrb.w	sl, [r0, #2]
 801fc80:	fb09 7a0a 	mla	sl, r9, sl, r7
 801fc84:	f814 7008 	ldrb.w	r7, [r4, r8]
 801fc88:	f896 8000 	ldrb.w	r8, [r6]
 801fc8c:	7876      	ldrb	r6, [r6, #1]
 801fc8e:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 801fc92:	fb03 f808 	mul.w	r8, r3, r8
 801fc96:	4373      	muls	r3, r6
 801fc98:	7856      	ldrb	r6, [r2, #1]
 801fc9a:	fb0e 8807 	mla	r8, lr, r7, r8
 801fc9e:	7817      	ldrb	r7, [r2, #0]
 801fca0:	fb0e 330c 	mla	r3, lr, ip, r3
 801fca4:	fb01 8807 	mla	r8, r1, r7, r8
 801fca8:	7807      	ldrb	r7, [r0, #0]
 801fcaa:	fb01 3306 	mla	r3, r1, r6, r3
 801fcae:	fb09 8707 	mla	r7, r9, r7, r8
 801fcb2:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801fcb6:	ea47 070a 	orr.w	r7, r7, sl
 801fcba:	f890 a001 	ldrb.w	sl, [r0, #1]
 801fcbe:	fb09 3a0a 	mla	sl, r9, sl, r3
 801fcc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fcc4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801fcc8:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801fccc:	ea47 070a 	orr.w	r7, r7, sl
 801fcd0:	f823 7b02 	strh.w	r7, [r3], #2
 801fcd4:	930b      	str	r3, [sp, #44]	; 0x2c
 801fcd6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801fcd8:	449b      	add	fp, r3
 801fcda:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801fcdc:	441d      	add	r5, r3
 801fcde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fce0:	3b01      	subs	r3, #1
 801fce2:	9309      	str	r3, [sp, #36]	; 0x24
 801fce4:	e714      	b.n	801fb10 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 801fce6:	b149      	cbz	r1, 801fcfc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 801fce8:	5cba      	ldrb	r2, [r7, r2]
 801fcea:	4660      	mov	r0, ip
 801fcec:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fcf0:	4422      	add	r2, r4
 801fcf2:	4666      	mov	r6, ip
 801fcf4:	e7a5      	b.n	801fc42 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 801fcf6:	4660      	mov	r0, ip
 801fcf8:	4662      	mov	r2, ip
 801fcfa:	e7a2      	b.n	801fc42 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 801fcfc:	4660      	mov	r0, ip
 801fcfe:	4662      	mov	r2, ip
 801fd00:	e7f7      	b.n	801fcf2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3da>
 801fd02:	b00f      	add	sp, #60	; 0x3c
 801fd04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fd08 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 801fd08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fd0c:	b085      	sub	sp, #20
 801fd0e:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	; 0x40
 801fd12:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 801fd16:	9102      	str	r1, [sp, #8]
 801fd18:	2c00      	cmp	r4, #0
 801fd1a:	fb04 710c 	mla	r1, r4, ip, r7
 801fd1e:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801fd22:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 801fd26:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 801fd2a:	eb02 0e01 	add.w	lr, r2, r1
 801fd2e:	f2c0 8122 	blt.w	801ff76 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 801fd32:	45a0      	cmp	r8, r4
 801fd34:	f340 811f 	ble.w	801ff76 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 801fd38:	2f00      	cmp	r7, #0
 801fd3a:	f2c0 811a 	blt.w	801ff72 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 801fd3e:	45bc      	cmp	ip, r7
 801fd40:	f340 8117 	ble.w	801ff72 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 801fd44:	5c52      	ldrb	r2, [r2, r1]
 801fd46:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801fd4a:	1c7a      	adds	r2, r7, #1
 801fd4c:	f100 8116 	bmi.w	801ff7c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 801fd50:	4594      	cmp	ip, r2
 801fd52:	f340 8113 	ble.w	801ff7c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 801fd56:	2e00      	cmp	r6, #0
 801fd58:	f000 8112 	beq.w	801ff80 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
 801fd5c:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801fd60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801fd64:	3401      	adds	r4, #1
 801fd66:	f100 810f 	bmi.w	801ff88 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 801fd6a:	45a0      	cmp	r8, r4
 801fd6c:	f340 810c 	ble.w	801ff88 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 801fd70:	2800      	cmp	r0, #0
 801fd72:	f000 810c 	beq.w	801ff8e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
 801fd76:	2f00      	cmp	r7, #0
 801fd78:	f2c0 8104 	blt.w	801ff84 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 801fd7c:	45bc      	cmp	ip, r7
 801fd7e:	f340 8101 	ble.w	801ff84 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 801fd82:	f81e 200c 	ldrb.w	r2, [lr, ip]
 801fd86:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 801fd8a:	3701      	adds	r7, #1
 801fd8c:	f100 8102 	bmi.w	801ff94 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 801fd90:	45bc      	cmp	ip, r7
 801fd92:	f340 80ff 	ble.w	801ff94 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 801fd96:	2e00      	cmp	r6, #0
 801fd98:	f000 80fe 	beq.w	801ff98 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
 801fd9c:	44f4      	add	ip, lr
 801fd9e:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801fda2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801fda6:	b2b6      	uxth	r6, r6
 801fda8:	b280      	uxth	r0, r0
 801fdaa:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 801fdae:	fb00 fe06 	mul.w	lr, r0, r6
 801fdb2:	0136      	lsls	r6, r6, #4
 801fdb4:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 801fdb8:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 801fdbc:	eba6 070e 	sub.w	r7, r6, lr
 801fdc0:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 801fdc4:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801fdc8:	b280      	uxth	r0, r0
 801fdca:	b2bf      	uxth	r7, r7
 801fdcc:	1a1b      	subs	r3, r3, r0
 801fdce:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801fdd2:	fb0a f607 	mul.w	r6, sl, r7
 801fdd6:	b29b      	uxth	r3, r3
 801fdd8:	fb0b 6603 	mla	r6, fp, r3, r6
 801fddc:	fb00 6609 	mla	r6, r0, r9, r6
 801fde0:	fb0e 6608 	mla	r6, lr, r8, r6
 801fde4:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801fde8:	9600      	str	r6, [sp, #0]
 801fdea:	2e00      	cmp	r6, #0
 801fdec:	f000 80be 	beq.w	801ff6c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
 801fdf0:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 801fdf4:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801fdf8:	9e02      	ldr	r6, [sp, #8]
 801fdfa:	fb0b fc0c 	mul.w	ip, fp, ip
 801fdfe:	fb0b f505 	mul.w	r5, fp, r5
 801fe02:	8836      	ldrh	r6, [r6, #0]
 801fe04:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801fe08:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801fe0c:	9501      	str	r5, [sp, #4]
 801fe0e:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801fe12:	44dc      	add	ip, fp
 801fe14:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fe18:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 801fe1c:	9503      	str	r5, [sp, #12]
 801fe1e:	9d01      	ldr	r5, [sp, #4]
 801fe20:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 801fe24:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801fe28:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 801fe2c:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801fe30:	fb0a fc0c 	mul.w	ip, sl, ip
 801fe34:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 801fe38:	fb0a fa01 	mul.w	sl, sl, r1
 801fe3c:	ea4f 251c 	mov.w	r5, ip, lsr #8
 801fe40:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801fe44:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 801fe48:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801fe4c:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 801fe50:	4465      	add	r5, ip
 801fe52:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801fe56:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801fe5a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fe5e:	fb09 fc0c 	mul.w	ip, r9, ip
 801fe62:	0a2d      	lsrs	r5, r5, #8
 801fe64:	fb09 f904 	mul.w	r9, r9, r4
 801fe68:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fe6c:	ea4f 211c 	mov.w	r1, ip, lsr #8
 801fe70:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801fe74:	f509 7480 	add.w	r4, r9, #256	; 0x100
 801fe78:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801fe7c:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801fe80:	437d      	muls	r5, r7
 801fe82:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801fe86:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 801fe8a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801fe8e:	4461      	add	r1, ip
 801fe90:	fb08 f404 	mul.w	r4, r8, r4
 801fe94:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801fe98:	fb08 f802 	mul.w	r8, r8, r2
 801fe9c:	0a09      	lsrs	r1, r1, #8
 801fe9e:	0a22      	lsrs	r2, r4, #8
 801fea0:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 801fea4:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801fea8:	fb07 f70a 	mul.w	r7, r7, sl
 801feac:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801feb0:	4414      	add	r4, r2
 801feb2:	f508 7280 	add.w	r2, r8, #256	; 0x100
 801feb6:	0a24      	lsrs	r4, r4, #8
 801feb8:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801febc:	9a03      	ldr	r2, [sp, #12]
 801febe:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801fec2:	fb02 5503 	mla	r5, r2, r3, r5
 801fec6:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801feca:	9a00      	ldr	r2, [sp, #0]
 801fecc:	fb04 540e 	mla	r4, r4, lr, r5
 801fed0:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801fed4:	1235      	asrs	r5, r6, #8
 801fed6:	fb01 4100 	mla	r1, r1, r0, r4
 801feda:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801fede:	0a09      	lsrs	r1, r1, #8
 801fee0:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 801fee4:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 801fee8:	fb03 7101 	mla	r1, r3, r1, r7
 801feec:	fb0e 1e08 	mla	lr, lr, r8, r1
 801fef0:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 801fef4:	fb00 e101 	mla	r1, r0, r1, lr
 801fef8:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 801fefc:	b287      	uxth	r7, r0
 801fefe:	0a09      	lsrs	r1, r1, #8
 801ff00:	437a      	muls	r2, r7
 801ff02:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801ff06:	1c53      	adds	r3, r2, #1
 801ff08:	4321      	orrs	r1, r4
 801ff0a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801ff0e:	0c0a      	lsrs	r2, r1, #16
 801ff10:	f3c1 2407 	ubfx	r4, r1, #8, #8
 801ff14:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 801ff18:	b2c8      	uxtb	r0, r1
 801ff1a:	fb12 f207 	smulbb	r2, r2, r7
 801ff1e:	fb14 f407 	smulbb	r4, r4, r7
 801ff22:	b2db      	uxtb	r3, r3
 801ff24:	fb10 f007 	smulbb	r0, r0, r7
 801ff28:	fb05 2503 	mla	r5, r5, r3, r2
 801ff2c:	10f2      	asrs	r2, r6, #3
 801ff2e:	00f6      	lsls	r6, r6, #3
 801ff30:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801ff34:	b2ad      	uxth	r5, r5
 801ff36:	b2f6      	uxtb	r6, r6
 801ff38:	fb02 4203 	mla	r2, r2, r3, r4
 801ff3c:	fb06 0303 	mla	r3, r6, r3, r0
 801ff40:	b294      	uxth	r4, r2
 801ff42:	b299      	uxth	r1, r3
 801ff44:	1c6b      	adds	r3, r5, #1
 801ff46:	1c62      	adds	r2, r4, #1
 801ff48:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801ff4c:	1c4b      	adds	r3, r1, #1
 801ff4e:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801ff52:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801ff56:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801ff5a:	0952      	lsrs	r2, r2, #5
 801ff5c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801ff60:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801ff64:	432b      	orrs	r3, r5
 801ff66:	4313      	orrs	r3, r2
 801ff68:	9a02      	ldr	r2, [sp, #8]
 801ff6a:	8013      	strh	r3, [r2, #0]
 801ff6c:	b005      	add	sp, #20
 801ff6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ff72:	2500      	movs	r5, #0
 801ff74:	e6e9      	b.n	801fd4a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
 801ff76:	2100      	movs	r1, #0
 801ff78:	460d      	mov	r5, r1
 801ff7a:	e6f3      	b.n	801fd64 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 801ff7c:	2100      	movs	r1, #0
 801ff7e:	e6f1      	b.n	801fd64 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 801ff80:	4631      	mov	r1, r6
 801ff82:	e6ef      	b.n	801fd64 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 801ff84:	2400      	movs	r4, #0
 801ff86:	e700      	b.n	801fd8a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 801ff88:	2200      	movs	r2, #0
 801ff8a:	4614      	mov	r4, r2
 801ff8c:	e70b      	b.n	801fda6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 801ff8e:	4602      	mov	r2, r0
 801ff90:	4604      	mov	r4, r0
 801ff92:	e708      	b.n	801fda6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 801ff94:	2200      	movs	r2, #0
 801ff96:	e706      	b.n	801fda6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 801ff98:	4632      	mov	r2, r6
 801ff9a:	e704      	b.n	801fda6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

0801ff9c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ff9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ffa0:	b09f      	sub	sp, #124	; 0x7c
 801ffa2:	921b      	str	r2, [sp, #108]	; 0x6c
 801ffa4:	9309      	str	r3, [sp, #36]	; 0x24
 801ffa6:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801ffa8:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801ffac:	901d      	str	r0, [sp, #116]	; 0x74
 801ffae:	931c      	str	r3, [sp, #112]	; 0x70
 801ffb0:	6850      	ldr	r0, [r2, #4]
 801ffb2:	9119      	str	r1, [sp, #100]	; 0x64
 801ffb4:	6812      	ldr	r2, [r2, #0]
 801ffb6:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 801ffb8:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801ffbc:	fb00 1303 	mla	r3, r0, r3, r1
 801ffc0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801ffc4:	930c      	str	r3, [sp, #48]	; 0x30
 801ffc6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801ffc8:	681b      	ldr	r3, [r3, #0]
 801ffca:	9312      	str	r3, [sp, #72]	; 0x48
 801ffcc:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801ffce:	685e      	ldr	r6, [r3, #4]
 801ffd0:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 801ffd4:	3604      	adds	r6, #4
 801ffd6:	930d      	str	r3, [sp, #52]	; 0x34
 801ffd8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801ffda:	2b00      	cmp	r3, #0
 801ffdc:	dc03      	bgt.n	801ffe6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801ffde:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801ffe0:	2b00      	cmp	r3, #0
 801ffe2:	f340 8387 	ble.w	80206f4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 801ffe6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801ffe8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ffec:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801fff0:	1e48      	subs	r0, r1, #1
 801fff2:	1e57      	subs	r7, r2, #1
 801fff4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fff6:	2b00      	cmp	r3, #0
 801fff8:	f340 8194 	ble.w	8020324 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 801fffc:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801fffe:	142b      	asrs	r3, r5, #16
 8020000:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8020004:	d406      	bmi.n	8020014 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8020006:	4584      	cmp	ip, r0
 8020008:	da04      	bge.n	8020014 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802000a:	2b00      	cmp	r3, #0
 802000c:	db02      	blt.n	8020014 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802000e:	42bb      	cmp	r3, r7
 8020010:	f2c0 8189 	blt.w	8020326 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8020014:	f11c 0c01 	adds.w	ip, ip, #1
 8020018:	f100 8177 	bmi.w	802030a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 802001c:	4561      	cmp	r1, ip
 802001e:	f2c0 8174 	blt.w	802030a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8020022:	3301      	adds	r3, #1
 8020024:	f100 8171 	bmi.w	802030a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8020028:	429a      	cmp	r2, r3
 802002a:	f2c0 816e 	blt.w	802030a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 802002e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020030:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8020032:	931a      	str	r3, [sp, #104]	; 0x68
 8020034:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8020036:	2b00      	cmp	r3, #0
 8020038:	f340 8193 	ble.w	8020362 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 802003c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802003e:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8020042:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8020046:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802004a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802004c:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8020050:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020052:	141b      	asrs	r3, r3, #16
 8020054:	f100 81d6 	bmi.w	8020404 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8020058:	f100 38ff 	add.w	r8, r0, #4294967295
 802005c:	4543      	cmp	r3, r8
 802005e:	f280 81d1 	bge.w	8020404 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8020062:	f1bc 0f00 	cmp.w	ip, #0
 8020066:	f2c0 81cd 	blt.w	8020404 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 802006a:	f10e 38ff 	add.w	r8, lr, #4294967295
 802006e:	45c4      	cmp	ip, r8
 8020070:	f280 81c8 	bge.w	8020404 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8020074:	b200      	sxth	r0, r0
 8020076:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020078:	fb0c 3300 	mla	r3, ip, r0, r3
 802007c:	eb04 0803 	add.w	r8, r4, r3
 8020080:	5ce3      	ldrb	r3, [r4, r3]
 8020082:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8020086:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 802008a:	2a00      	cmp	r2, #0
 802008c:	f000 81af 	beq.w	80203ee <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8020090:	f898 c001 	ldrb.w	ip, [r8, #1]
 8020094:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8020098:	940e      	str	r4, [sp, #56]	; 0x38
 802009a:	0e24      	lsrs	r4, r4, #24
 802009c:	9415      	str	r4, [sp, #84]	; 0x54
 802009e:	b179      	cbz	r1, 80200c0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 80200a0:	eb08 0c00 	add.w	ip, r8, r0
 80200a4:	f818 0000 	ldrb.w	r0, [r8, r0]
 80200a8:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80200ac:	900a      	str	r0, [sp, #40]	; 0x28
 80200ae:	0e00      	lsrs	r0, r0, #24
 80200b0:	9013      	str	r0, [sp, #76]	; 0x4c
 80200b2:	f89c 0001 	ldrb.w	r0, [ip, #1]
 80200b6:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80200ba:	900f      	str	r0, [sp, #60]	; 0x3c
 80200bc:	0e00      	lsrs	r0, r0, #24
 80200be:	9016      	str	r0, [sp, #88]	; 0x58
 80200c0:	b292      	uxth	r2, r2
 80200c2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80200c4:	b289      	uxth	r1, r1
 80200c6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80200c8:	fb02 f901 	mul.w	r9, r2, r1
 80200cc:	0112      	lsls	r2, r2, #4
 80200ce:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80200d2:	eba2 0809 	sub.w	r8, r2, r9
 80200d6:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80200da:	b289      	uxth	r1, r1
 80200dc:	fa1f f888 	uxth.w	r8, r8
 80200e0:	1a52      	subs	r2, r2, r1
 80200e2:	fb08 f000 	mul.w	r0, r8, r0
 80200e6:	b292      	uxth	r2, r2
 80200e8:	fb02 000e 	mla	r0, r2, lr, r0
 80200ec:	fb01 0004 	mla	r0, r1, r4, r0
 80200f0:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80200f2:	fb09 0004 	mla	r0, r9, r4, r0
 80200f6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80200fa:	2800      	cmp	r0, #0
 80200fc:	f000 80fa 	beq.w	80202f4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8020100:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8020104:	d01b      	beq.n	802013e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8020106:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802010a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802010e:	fb0e fa0a 	mul.w	sl, lr, sl
 8020112:	fb0e fe03 	mul.w	lr, lr, r3
 8020116:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802011a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802011e:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8020122:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020126:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802012a:	4453      	add	r3, sl
 802012c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020130:	0a1b      	lsrs	r3, r3, #8
 8020132:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020136:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802013a:	ea43 030c 	orr.w	r3, r3, ip
 802013e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020140:	2cff      	cmp	r4, #255	; 0xff
 8020142:	d021      	beq.n	8020188 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 8020144:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020146:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802014a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802014c:	fb04 fb0b 	mul.w	fp, r4, fp
 8020150:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020152:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020156:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020158:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802015c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020160:	fb04 fa0a 	mul.w	sl, r4, sl
 8020164:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020168:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802016c:	44de      	add	lr, fp
 802016e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020172:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020176:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802017a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802017e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020182:	ea4e 040a 	orr.w	r4, lr, sl
 8020186:	940e      	str	r4, [sp, #56]	; 0x38
 8020188:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802018a:	2cff      	cmp	r4, #255	; 0xff
 802018c:	d021      	beq.n	80201d2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 802018e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8020190:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8020194:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020196:	fb04 fb0b 	mul.w	fp, r4, fp
 802019a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802019c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80201a0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80201a2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80201a6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80201aa:	fb04 fa0a 	mul.w	sl, r4, sl
 80201ae:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80201b2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80201b6:	44de      	add	lr, fp
 80201b8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80201bc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80201c0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80201c4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80201c8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80201cc:	ea4e 040a 	orr.w	r4, lr, sl
 80201d0:	940a      	str	r4, [sp, #40]	; 0x28
 80201d2:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80201d4:	2cff      	cmp	r4, #255	; 0xff
 80201d6:	d021      	beq.n	802021c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 80201d8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80201da:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80201de:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80201e0:	fb04 fb0b 	mul.w	fp, r4, fp
 80201e4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80201e6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80201ea:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80201ec:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80201f0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80201f4:	fb04 fa0a 	mul.w	sl, r4, sl
 80201f8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80201fc:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020200:	44de      	add	lr, fp
 8020202:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020206:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802020a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802020e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020212:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020216:	ea4e 040a 	orr.w	r4, lr, sl
 802021a:	940f      	str	r4, [sp, #60]	; 0x3c
 802021c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802021e:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8020222:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020226:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802022a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802022c:	fb08 fc0c 	mul.w	ip, r8, ip
 8020230:	fb02 cc0e 	mla	ip, r2, lr, ip
 8020234:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8020238:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802023a:	fb01 cc0e 	mla	ip, r1, lr, ip
 802023e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8020242:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020244:	fb09 cc0e 	mla	ip, r9, lr, ip
 8020248:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 802024c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802024e:	fb08 f80e 	mul.w	r8, r8, lr
 8020252:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020256:	fb02 8303 	mla	r3, r2, r3, r8
 802025a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802025c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020260:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8020264:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020266:	fb01 330a 	mla	r3, r1, sl, r3
 802026a:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 802026e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020270:	fb09 3901 	mla	r9, r9, r1, r3
 8020274:	883b      	ldrh	r3, [r7, #0]
 8020276:	4342      	muls	r2, r0
 8020278:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802027c:	1c50      	adds	r0, r2, #1
 802027e:	1219      	asrs	r1, r3, #8
 8020280:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8020284:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8020288:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802028c:	ea4c 0c09 	orr.w	ip, ip, r9
 8020290:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8020294:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8020298:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 802029c:	b2c0      	uxtb	r0, r0
 802029e:	fb12 f204 	smulbb	r2, r2, r4
 80202a2:	fa5f fc8c 	uxtb.w	ip, ip
 80202a6:	fb1e fe04 	smulbb	lr, lr, r4
 80202aa:	fb01 2100 	mla	r1, r1, r0, r2
 80202ae:	10da      	asrs	r2, r3, #3
 80202b0:	fb1c fc04 	smulbb	ip, ip, r4
 80202b4:	00db      	lsls	r3, r3, #3
 80202b6:	b289      	uxth	r1, r1
 80202b8:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80202bc:	b2db      	uxtb	r3, r3
 80202be:	fb02 e200 	mla	r2, r2, r0, lr
 80202c2:	fb03 c300 	mla	r3, r3, r0, ip
 80202c6:	b292      	uxth	r2, r2
 80202c8:	fa1f fc83 	uxth.w	ip, r3
 80202cc:	1c4b      	adds	r3, r1, #1
 80202ce:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80202d2:	f10c 0301 	add.w	r3, ip, #1
 80202d6:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 80202da:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 80202de:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80202e2:	430b      	orrs	r3, r1
 80202e4:	1c51      	adds	r1, r2, #1
 80202e6:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80202ea:	0952      	lsrs	r2, r2, #5
 80202ec:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80202f0:	4313      	orrs	r3, r2
 80202f2:	803b      	strh	r3, [r7, #0]
 80202f4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80202f6:	3702      	adds	r7, #2
 80202f8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80202fa:	441a      	add	r2, r3
 80202fc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80202fe:	441d      	add	r5, r3
 8020300:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8020302:	9229      	str	r2, [sp, #164]	; 0xa4
 8020304:	3b01      	subs	r3, #1
 8020306:	931a      	str	r3, [sp, #104]	; 0x68
 8020308:	e694      	b.n	8020034 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 802030a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802030c:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 802030e:	441c      	add	r4, r3
 8020310:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020312:	441d      	add	r5, r3
 8020314:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020316:	9429      	str	r4, [sp, #164]	; 0xa4
 8020318:	3b01      	subs	r3, #1
 802031a:	9309      	str	r3, [sp, #36]	; 0x24
 802031c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802031e:	3302      	adds	r3, #2
 8020320:	930c      	str	r3, [sp, #48]	; 0x30
 8020322:	e667      	b.n	801fff4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8020324:	d024      	beq.n	8020370 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 8020326:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020328:	982b      	ldr	r0, [sp, #172]	; 0xac
 802032a:	3b01      	subs	r3, #1
 802032c:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 802032e:	fb00 4003 	mla	r0, r0, r3, r4
 8020332:	1400      	asrs	r0, r0, #16
 8020334:	f53f ae7b 	bmi.w	802002e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8020338:	3901      	subs	r1, #1
 802033a:	4288      	cmp	r0, r1
 802033c:	f6bf ae77 	bge.w	802002e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8020340:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8020342:	fb01 5303 	mla	r3, r1, r3, r5
 8020346:	141b      	asrs	r3, r3, #16
 8020348:	f53f ae71 	bmi.w	802002e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802034c:	3a01      	subs	r2, #1
 802034e:	4293      	cmp	r3, r2
 8020350:	f6bf ae6d 	bge.w	802002e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8020354:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8020358:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 802035c:	f1bb 0f00 	cmp.w	fp, #0
 8020360:	dc70      	bgt.n	8020444 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 8020362:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020364:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8020368:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802036a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 802036e:	930c      	str	r3, [sp, #48]	; 0x30
 8020370:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020372:	2b00      	cmp	r3, #0
 8020374:	f340 81be 	ble.w	80206f4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 8020378:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802037c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802037e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020382:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020386:	eef0 6a62 	vmov.f32	s13, s5
 802038a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802038e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020392:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020396:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 802039a:	eef0 6a43 	vmov.f32	s13, s6
 802039e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80203a2:	ee16 5a90 	vmov	r5, s13
 80203a6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80203aa:	ee61 7a27 	vmul.f32	s15, s2, s15
 80203ae:	ee77 2a62 	vsub.f32	s5, s14, s5
 80203b2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80203b6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80203ba:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80203be:	ee12 2a90 	vmov	r2, s5
 80203c2:	eef0 2a47 	vmov.f32	s5, s14
 80203c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80203ca:	ee13 2a10 	vmov	r2, s6
 80203ce:	932b      	str	r3, [sp, #172]	; 0xac
 80203d0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80203d2:	eeb0 3a67 	vmov.f32	s6, s15
 80203d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80203da:	932c      	str	r3, [sp, #176]	; 0xb0
 80203dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80203de:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80203e0:	3b01      	subs	r3, #1
 80203e2:	9319      	str	r3, [sp, #100]	; 0x64
 80203e4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80203e6:	bf08      	it	eq
 80203e8:	4613      	moveq	r3, r2
 80203ea:	9309      	str	r3, [sp, #36]	; 0x24
 80203ec:	e5f4      	b.n	801ffd8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80203ee:	2900      	cmp	r1, #0
 80203f0:	f43f ae66 	beq.w	80200c0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 80203f4:	f818 0000 	ldrb.w	r0, [r8, r0]
 80203f8:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80203fc:	900a      	str	r0, [sp, #40]	; 0x28
 80203fe:	0e00      	lsrs	r0, r0, #24
 8020400:	9013      	str	r0, [sp, #76]	; 0x4c
 8020402:	e65d      	b.n	80200c0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8020404:	f113 0801 	adds.w	r8, r3, #1
 8020408:	f53f af74 	bmi.w	80202f4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802040c:	4540      	cmp	r0, r8
 802040e:	f6ff af71 	blt.w	80202f4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8020412:	f11c 0801 	adds.w	r8, ip, #1
 8020416:	f53f af6d 	bmi.w	80202f4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802041a:	45c6      	cmp	lr, r8
 802041c:	f6ff af6a 	blt.w	80202f4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8020420:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8020422:	b200      	sxth	r0, r0
 8020424:	9302      	str	r3, [sp, #8]
 8020426:	fa0f f38e 	sxth.w	r3, lr
 802042a:	9000      	str	r0, [sp, #0]
 802042c:	9301      	str	r3, [sp, #4]
 802042e:	4633      	mov	r3, r6
 8020430:	981d      	ldr	r0, [sp, #116]	; 0x74
 8020432:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8020436:	e9cd c203 	strd	ip, r2, [sp, #12]
 802043a:	4639      	mov	r1, r7
 802043c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802043e:	f7ff fc63 	bl	801fd08 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 8020442:	e757      	b.n	80202f4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8020444:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020446:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802044a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 802044c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8020450:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020452:	1427      	asrs	r7, r4, #16
 8020454:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020456:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802045a:	142b      	asrs	r3, r5, #16
 802045c:	fb01 7303 	mla	r3, r1, r3, r7
 8020460:	18e7      	adds	r7, r4, r3
 8020462:	5ce3      	ldrb	r3, [r4, r3]
 8020464:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8020468:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802046c:	2a00      	cmp	r2, #0
 802046e:	f000 8137 	beq.w	80206e0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 8020472:	f897 e001 	ldrb.w	lr, [r7, #1]
 8020476:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 802047a:	9410      	str	r4, [sp, #64]	; 0x40
 802047c:	0e24      	lsrs	r4, r4, #24
 802047e:	9417      	str	r4, [sp, #92]	; 0x5c
 8020480:	b170      	cbz	r0, 80204a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8020482:	eb07 0e01 	add.w	lr, r7, r1
 8020486:	5c79      	ldrb	r1, [r7, r1]
 8020488:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802048c:	910b      	str	r1, [sp, #44]	; 0x2c
 802048e:	0e09      	lsrs	r1, r1, #24
 8020490:	9114      	str	r1, [sp, #80]	; 0x50
 8020492:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8020496:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802049a:	9111      	str	r1, [sp, #68]	; 0x44
 802049c:	0e09      	lsrs	r1, r1, #24
 802049e:	9118      	str	r1, [sp, #96]	; 0x60
 80204a0:	b292      	uxth	r2, r2
 80204a2:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80204a4:	b280      	uxth	r0, r0
 80204a6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80204a8:	fb02 f800 	mul.w	r8, r2, r0
 80204ac:	0112      	lsls	r2, r2, #4
 80204ae:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 80204b2:	eba2 0e08 	sub.w	lr, r2, r8
 80204b6:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80204ba:	b280      	uxth	r0, r0
 80204bc:	fa1f fe8e 	uxth.w	lr, lr
 80204c0:	1a12      	subs	r2, r2, r0
 80204c2:	fb0e f101 	mul.w	r1, lr, r1
 80204c6:	b292      	uxth	r2, r2
 80204c8:	fb02 110c 	mla	r1, r2, ip, r1
 80204cc:	fb00 1104 	mla	r1, r0, r4, r1
 80204d0:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80204d2:	fb08 1104 	mla	r1, r8, r4, r1
 80204d6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80204da:	2900      	cmp	r1, #0
 80204dc:	f000 80f5 	beq.w	80206ca <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 80204e0:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80204e4:	d019      	beq.n	802051a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 80204e6:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80204ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80204ee:	fb0c fa0a 	mul.w	sl, ip, sl
 80204f2:	fb0c fc03 	mul.w	ip, ip, r3
 80204f6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80204fa:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80204fe:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8020502:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020506:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802050a:	4453      	add	r3, sl
 802050c:	0a3f      	lsrs	r7, r7, #8
 802050e:	0a1b      	lsrs	r3, r3, #8
 8020510:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020514:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020518:	433b      	orrs	r3, r7
 802051a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 802051c:	2cff      	cmp	r4, #255	; 0xff
 802051e:	d020      	beq.n	8020562 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 8020520:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020522:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020526:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8020528:	4367      	muls	r7, r4
 802052a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802052c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020530:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020534:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8020536:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802053a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802053e:	fb04 fa0a 	mul.w	sl, r4, sl
 8020542:	44bc      	add	ip, r7
 8020544:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020548:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802054c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020550:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020554:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020558:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802055c:	ea4c 040a 	orr.w	r4, ip, sl
 8020560:	9410      	str	r4, [sp, #64]	; 0x40
 8020562:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020564:	2cff      	cmp	r4, #255	; 0xff
 8020566:	d020      	beq.n	80205aa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
 8020568:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802056a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802056e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020570:	4367      	muls	r7, r4
 8020572:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020574:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020578:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802057c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802057e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020582:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020586:	fb04 fa0a 	mul.w	sl, r4, sl
 802058a:	44bc      	add	ip, r7
 802058c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020590:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020594:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020598:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802059c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80205a0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80205a4:	ea4c 040a 	orr.w	r4, ip, sl
 80205a8:	940b      	str	r4, [sp, #44]	; 0x2c
 80205aa:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80205ac:	2cff      	cmp	r4, #255	; 0xff
 80205ae:	d020      	beq.n	80205f2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
 80205b0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80205b2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80205b6:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80205b8:	4367      	muls	r7, r4
 80205ba:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80205bc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80205c0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80205c4:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80205c6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80205ca:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80205ce:	fb04 fa0a 	mul.w	sl, r4, sl
 80205d2:	44bc      	add	ip, r7
 80205d4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80205d8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80205dc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80205e0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80205e4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80205e8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80205ec:	ea4c 040a 	orr.w	r4, ip, sl
 80205f0:	9411      	str	r4, [sp, #68]	; 0x44
 80205f2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80205f4:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80205f8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80205fc:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020600:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020602:	fb0e f707 	mul.w	r7, lr, r7
 8020606:	fb02 770c 	mla	r7, r2, ip, r7
 802060a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802060e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020610:	fb00 770c 	mla	r7, r0, ip, r7
 8020614:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020618:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802061a:	fb08 770c 	mla	r7, r8, ip, r7
 802061e:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8020622:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020624:	fb0e fe0c 	mul.w	lr, lr, ip
 8020628:	0a3f      	lsrs	r7, r7, #8
 802062a:	fb02 e303 	mla	r3, r2, r3, lr
 802062e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020630:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020634:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8020638:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802063a:	fb00 330a 	mla	r3, r0, sl, r3
 802063e:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8020642:	f8b9 0000 	ldrh.w	r0, [r9]
 8020646:	fb08 3c0c 	mla	ip, r8, ip, r3
 802064a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802064c:	1202      	asrs	r2, r0, #8
 802064e:	434b      	muls	r3, r1
 8020650:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020654:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8020658:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802065c:	1c59      	adds	r1, r3, #1
 802065e:	ea47 070c 	orr.w	r7, r7, ip
 8020662:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8020666:	0c3b      	lsrs	r3, r7, #16
 8020668:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 802066c:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8020670:	b2ff      	uxtb	r7, r7
 8020672:	fb13 f304 	smulbb	r3, r3, r4
 8020676:	b2c9      	uxtb	r1, r1
 8020678:	fb1c fc04 	smulbb	ip, ip, r4
 802067c:	fb02 3201 	mla	r2, r2, r1, r3
 8020680:	10c3      	asrs	r3, r0, #3
 8020682:	fb17 f704 	smulbb	r7, r7, r4
 8020686:	00c0      	lsls	r0, r0, #3
 8020688:	b292      	uxth	r2, r2
 802068a:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 802068e:	b2c0      	uxtb	r0, r0
 8020690:	fb03 c301 	mla	r3, r3, r1, ip
 8020694:	f102 0c01 	add.w	ip, r2, #1
 8020698:	fb00 7001 	mla	r0, r0, r1, r7
 802069c:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80206a0:	b280      	uxth	r0, r0
 80206a2:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 80206a6:	b29b      	uxth	r3, r3
 80206a8:	1c42      	adds	r2, r0, #1
 80206aa:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80206ae:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80206b2:	ea42 020c 	orr.w	r2, r2, ip
 80206b6:	f103 0c01 	add.w	ip, r3, #1
 80206ba:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 80206be:	095b      	lsrs	r3, r3, #5
 80206c0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80206c4:	431a      	orrs	r2, r3
 80206c6:	f8a9 2000 	strh.w	r2, [r9]
 80206ca:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80206cc:	f109 0902 	add.w	r9, r9, #2
 80206d0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80206d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80206d6:	441a      	add	r2, r3
 80206d8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80206da:	9229      	str	r2, [sp, #164]	; 0xa4
 80206dc:	441d      	add	r5, r3
 80206de:	e63d      	b.n	802035c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 80206e0:	2800      	cmp	r0, #0
 80206e2:	f43f aedd 	beq.w	80204a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 80206e6:	5c79      	ldrb	r1, [r7, r1]
 80206e8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80206ec:	910b      	str	r1, [sp, #44]	; 0x2c
 80206ee:	0e09      	lsrs	r1, r1, #24
 80206f0:	9114      	str	r1, [sp, #80]	; 0x50
 80206f2:	e6d5      	b.n	80204a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 80206f4:	b01f      	add	sp, #124	; 0x7c
 80206f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080206fa <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 80206fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80206fe:	b089      	sub	sp, #36	; 0x24
 8020700:	9101      	str	r1, [sp, #4]
 8020702:	9801      	ldr	r0, [sp, #4]
 8020704:	f9bd c048 	ldrsh.w	ip, [sp, #72]	; 0x48
 8020708:	8800      	ldrh	r0, [r0, #0]
 802070a:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	; 0x4c
 802070e:	1206      	asrs	r6, r0, #8
 8020710:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8020714:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 8020718:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 802071c:	9602      	str	r6, [sp, #8]
 802071e:	10c6      	asrs	r6, r0, #3
 8020720:	00c0      	lsls	r0, r0, #3
 8020722:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8020726:	b2c0      	uxtb	r0, r0
 8020728:	9603      	str	r6, [sp, #12]
 802072a:	9004      	str	r0, [sp, #16]
 802072c:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	; 0x50
 8020730:	fb07 100c 	mla	r0, r7, ip, r1
 8020734:	2f00      	cmp	r7, #0
 8020736:	eb02 0e00 	add.w	lr, r2, r0
 802073a:	f2c0 810a 	blt.w	8020952 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 802073e:	45b8      	cmp	r8, r7
 8020740:	f340 8107 	ble.w	8020952 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 8020744:	2900      	cmp	r1, #0
 8020746:	f2c0 8102 	blt.w	802094e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 802074a:	458c      	cmp	ip, r1
 802074c:	f340 80ff 	ble.w	802094e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 8020750:	5c12      	ldrb	r2, [r2, r0]
 8020752:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8020756:	1c4a      	adds	r2, r1, #1
 8020758:	f100 80fe 	bmi.w	8020958 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 802075c:	4594      	cmp	ip, r2
 802075e:	f340 80fb 	ble.w	8020958 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 8020762:	2d00      	cmp	r5, #0
 8020764:	f000 80fa 	beq.w	802095c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
 8020768:	f89e 2001 	ldrb.w	r2, [lr, #1]
 802076c:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8020770:	3701      	adds	r7, #1
 8020772:	f100 80f7 	bmi.w	8020964 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8020776:	45b8      	cmp	r8, r7
 8020778:	f340 80f4 	ble.w	8020964 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 802077c:	2c00      	cmp	r4, #0
 802077e:	f000 80f4 	beq.w	802096a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
 8020782:	2900      	cmp	r1, #0
 8020784:	eb0e 020c 	add.w	r2, lr, ip
 8020788:	f2c0 80ea 	blt.w	8020960 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 802078c:	458c      	cmp	ip, r1
 802078e:	f340 80e7 	ble.w	8020960 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 8020792:	f81e 700c 	ldrb.w	r7, [lr, ip]
 8020796:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 802079a:	3101      	adds	r1, #1
 802079c:	f100 80e8 	bmi.w	8020970 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 80207a0:	458c      	cmp	ip, r1
 80207a2:	f340 80e5 	ble.w	8020970 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 80207a6:	2d00      	cmp	r5, #0
 80207a8:	f000 80e4 	beq.w	8020974 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
 80207ac:	7852      	ldrb	r2, [r2, #1]
 80207ae:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80207b2:	0e0b      	lsrs	r3, r1, #24
 80207b4:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80207b8:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 80207bc:	9300      	str	r3, [sp, #0]
 80207be:	b2a4      	uxth	r4, r4
 80207c0:	b2ab      	uxth	r3, r5
 80207c2:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 80207c6:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 80207ca:	fb03 f904 	mul.w	r9, r3, r4
 80207ce:	011b      	lsls	r3, r3, #4
 80207d0:	fb0a f505 	mul.w	r5, sl, r5
 80207d4:	ea4f 6817 	mov.w	r8, r7, lsr #24
 80207d8:	eba3 0e09 	sub.w	lr, r3, r9
 80207dc:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 80207e0:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 80207e4:	0a28      	lsrs	r0, r5, #8
 80207e6:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 80207ea:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80207ee:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80207f2:	fb0a f303 	mul.w	r3, sl, r3
 80207f6:	fb08 f707 	mul.w	r7, r8, r7
 80207fa:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
 80207fe:	4405      	add	r5, r0
 8020800:	fb08 fc0c 	mul.w	ip, r8, ip
 8020804:	b2a4      	uxth	r4, r4
 8020806:	0a2d      	lsrs	r5, r5, #8
 8020808:	fa1f fe8e 	uxth.w	lr, lr
 802080c:	1b12      	subs	r2, r2, r4
 802080e:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
 8020812:	b292      	uxth	r2, r2
 8020814:	9005      	str	r0, [sp, #20]
 8020816:	f503 7080 	add.w	r0, r3, #256	; 0x100
 802081a:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 802081e:	ea4f 201c 	mov.w	r0, ip, lsr #8
 8020822:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020826:	0a1b      	lsrs	r3, r3, #8
 8020828:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802082c:	9306      	str	r3, [sp, #24]
 802082e:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
 8020832:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020836:	4460      	add	r0, ip
 8020838:	fb0b f303 	mul.w	r3, fp, r3
 802083c:	fb0b f606 	mul.w	r6, fp, r6
 8020840:	0a00      	lsrs	r0, r0, #8
 8020842:	0a1d      	lsrs	r5, r3, #8
 8020844:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8020848:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802084c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8020850:	441d      	add	r5, r3
 8020852:	f506 7380 	add.w	r3, r6, #256	; 0x100
 8020856:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 802085a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 802085e:	0a2d      	lsrs	r5, r5, #8
 8020860:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8020864:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
 8020868:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802086c:	0a36      	lsrs	r6, r6, #8
 802086e:	0a1b      	lsrs	r3, r3, #8
 8020870:	fb05 f50e 	mul.w	r5, r5, lr
 8020874:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020878:	9307      	str	r3, [sp, #28]
 802087a:	0e0b      	lsrs	r3, r1, #24
 802087c:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8020880:	fb0e f606 	mul.w	r6, lr, r6
 8020884:	435f      	muls	r7, r3
 8020886:	4359      	muls	r1, r3
 8020888:	9b05      	ldr	r3, [sp, #20]
 802088a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802088e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020892:	fb03 5502 	mla	r5, r3, r2, r5
 8020896:	9b06      	ldr	r3, [sp, #24]
 8020898:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802089c:	fb0e fe0b 	mul.w	lr, lr, fp
 80208a0:	44bc      	add	ip, r7
 80208a2:	f501 7780 	add.w	r7, r1, #256	; 0x100
 80208a6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80208aa:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 80208ae:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80208b2:	0a09      	lsrs	r1, r1, #8
 80208b4:	fb0c 5509 	mla	r5, ip, r9, r5
 80208b8:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80208bc:	fb00 5504 	mla	r5, r0, r4, r5
 80208c0:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 80208c4:	9b07      	ldr	r3, [sp, #28]
 80208c6:	fb02 6000 	mla	r0, r2, r0, r6
 80208ca:	0a2d      	lsrs	r5, r5, #8
 80208cc:	fb02 e20a 	mla	r2, r2, sl, lr
 80208d0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80208d4:	fb09 0001 	mla	r0, r9, r1, r0
 80208d8:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80208dc:	fb04 0003 	mla	r0, r4, r3, r0
 80208e0:	9b00      	ldr	r3, [sp, #0]
 80208e2:	fb04 2408 	mla	r4, r4, r8, r2
 80208e6:	9a04      	ldr	r2, [sp, #16]
 80208e8:	0a00      	lsrs	r0, r0, #8
 80208ea:	fb09 4903 	mla	r9, r9, r3, r4
 80208ee:	9b02      	ldr	r3, [sp, #8]
 80208f0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80208f4:	ea6f 2929 	mvn.w	r9, r9, asr #8
 80208f8:	4305      	orrs	r5, r0
 80208fa:	fa5f f989 	uxtb.w	r9, r9
 80208fe:	fb03 f109 	mul.w	r1, r3, r9
 8020902:	9b03      	ldr	r3, [sp, #12]
 8020904:	fb03 f309 	mul.w	r3, r3, r9
 8020908:	fb02 f909 	mul.w	r9, r2, r9
 802090c:	1c4a      	adds	r2, r1, #1
 802090e:	1c58      	adds	r0, r3, #1
 8020910:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8020914:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8020918:	0c2a      	lsrs	r2, r5, #16
 802091a:	0a2b      	lsrs	r3, r5, #8
 802091c:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8020920:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8020924:	0212      	lsls	r2, r2, #8
 8020926:	00db      	lsls	r3, r3, #3
 8020928:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 802092c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020930:	4313      	orrs	r3, r2
 8020932:	f109 0201 	add.w	r2, r9, #1
 8020936:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 802093a:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 802093e:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8020942:	431d      	orrs	r5, r3
 8020944:	9b01      	ldr	r3, [sp, #4]
 8020946:	801d      	strh	r5, [r3, #0]
 8020948:	b009      	add	sp, #36	; 0x24
 802094a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802094e:	2000      	movs	r0, #0
 8020950:	e701      	b.n	8020756 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
 8020952:	2600      	movs	r6, #0
 8020954:	4630      	mov	r0, r6
 8020956:	e70b      	b.n	8020770 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8020958:	2600      	movs	r6, #0
 802095a:	e709      	b.n	8020770 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 802095c:	462e      	mov	r6, r5
 802095e:	e707      	b.n	8020770 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8020960:	2700      	movs	r7, #0
 8020962:	e71a      	b.n	802079a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
 8020964:	2100      	movs	r1, #0
 8020966:	460f      	mov	r7, r1
 8020968:	e723      	b.n	80207b2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 802096a:	4621      	mov	r1, r4
 802096c:	4627      	mov	r7, r4
 802096e:	e720      	b.n	80207b2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8020970:	2100      	movs	r1, #0
 8020972:	e71e      	b.n	80207b2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8020974:	4629      	mov	r1, r5
 8020976:	e71c      	b.n	80207b2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>

08020978 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802097c:	b09b      	sub	sp, #108	; 0x6c
 802097e:	9218      	str	r2, [sp, #96]	; 0x60
 8020980:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020982:	9019      	str	r0, [sp, #100]	; 0x64
 8020984:	9116      	str	r1, [sp, #88]	; 0x58
 8020986:	6850      	ldr	r0, [r2, #4]
 8020988:	9307      	str	r3, [sp, #28]
 802098a:	6812      	ldr	r2, [r2, #0]
 802098c:	9d26      	ldr	r5, [sp, #152]	; 0x98
 802098e:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8020992:	fb00 1303 	mla	r3, r0, r3, r1
 8020996:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802099a:	930a      	str	r3, [sp, #40]	; 0x28
 802099c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802099e:	681b      	ldr	r3, [r3, #0]
 80209a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80209a2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80209a4:	685e      	ldr	r6, [r3, #4]
 80209a6:	3604      	adds	r6, #4
 80209a8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80209aa:	2b00      	cmp	r3, #0
 80209ac:	dc03      	bgt.n	80209b6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80209ae:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80209b0:	2b00      	cmp	r3, #0
 80209b2:	f340 8373 	ble.w	802109c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 80209b6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80209b8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80209bc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80209c0:	1e48      	subs	r0, r1, #1
 80209c2:	1e57      	subs	r7, r2, #1
 80209c4:	9b07      	ldr	r3, [sp, #28]
 80209c6:	2b00      	cmp	r3, #0
 80209c8:	f340 818f 	ble.w	8020cea <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 80209cc:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80209ce:	142b      	asrs	r3, r5, #16
 80209d0:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80209d4:	d406      	bmi.n	80209e4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80209d6:	4584      	cmp	ip, r0
 80209d8:	da04      	bge.n	80209e4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80209da:	2b00      	cmp	r3, #0
 80209dc:	db02      	blt.n	80209e4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80209de:	42bb      	cmp	r3, r7
 80209e0:	f2c0 8184 	blt.w	8020cec <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 80209e4:	f11c 0c01 	adds.w	ip, ip, #1
 80209e8:	f100 8172 	bmi.w	8020cd0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80209ec:	4561      	cmp	r1, ip
 80209ee:	f2c0 816f 	blt.w	8020cd0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80209f2:	3301      	adds	r3, #1
 80209f4:	f100 816c 	bmi.w	8020cd0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80209f8:	429a      	cmp	r2, r3
 80209fa:	f2c0 8169 	blt.w	8020cd0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80209fe:	9b07      	ldr	r3, [sp, #28]
 8020a00:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8020a02:	9317      	str	r3, [sp, #92]	; 0x5c
 8020a04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8020a06:	2b00      	cmp	r3, #0
 8020a08:	f340 818e 	ble.w	8020d28 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 8020a0c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8020a0e:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8020a12:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8020a16:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8020a1a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020a1c:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8020a20:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8020a22:	141b      	asrs	r3, r3, #16
 8020a24:	f100 81d1 	bmi.w	8020dca <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8020a28:	f101 38ff 	add.w	r8, r1, #4294967295
 8020a2c:	4543      	cmp	r3, r8
 8020a2e:	f280 81cc 	bge.w	8020dca <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8020a32:	f1bc 0f00 	cmp.w	ip, #0
 8020a36:	f2c0 81c8 	blt.w	8020dca <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8020a3a:	f10e 38ff 	add.w	r8, lr, #4294967295
 8020a3e:	45c4      	cmp	ip, r8
 8020a40:	f280 81c3 	bge.w	8020dca <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8020a44:	b209      	sxth	r1, r1
 8020a46:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020a48:	fb0c 3301 	mla	r3, ip, r1, r3
 8020a4c:	eb04 0803 	add.w	r8, r4, r3
 8020a50:	5ce3      	ldrb	r3, [r4, r3]
 8020a52:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8020a56:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8020a5a:	2a00      	cmp	r2, #0
 8020a5c:	f000 81aa 	beq.w	8020db4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
 8020a60:	f898 c001 	ldrb.w	ip, [r8, #1]
 8020a64:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8020a68:	940b      	str	r4, [sp, #44]	; 0x2c
 8020a6a:	0e24      	lsrs	r4, r4, #24
 8020a6c:	9412      	str	r4, [sp, #72]	; 0x48
 8020a6e:	b178      	cbz	r0, 8020a90 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8020a70:	eb08 0c01 	add.w	ip, r8, r1
 8020a74:	f818 1001 	ldrb.w	r1, [r8, r1]
 8020a78:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020a7c:	9108      	str	r1, [sp, #32]
 8020a7e:	0e09      	lsrs	r1, r1, #24
 8020a80:	9110      	str	r1, [sp, #64]	; 0x40
 8020a82:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8020a86:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020a8a:	910c      	str	r1, [sp, #48]	; 0x30
 8020a8c:	0e09      	lsrs	r1, r1, #24
 8020a8e:	9113      	str	r1, [sp, #76]	; 0x4c
 8020a90:	b292      	uxth	r2, r2
 8020a92:	9912      	ldr	r1, [sp, #72]	; 0x48
 8020a94:	b280      	uxth	r0, r0
 8020a96:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020a98:	fb02 f900 	mul.w	r9, r2, r0
 8020a9c:	0112      	lsls	r2, r2, #4
 8020a9e:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8020aa2:	eba2 0809 	sub.w	r8, r2, r9
 8020aa6:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8020aaa:	b280      	uxth	r0, r0
 8020aac:	fa1f f888 	uxth.w	r8, r8
 8020ab0:	1a12      	subs	r2, r2, r0
 8020ab2:	fb08 f101 	mul.w	r1, r8, r1
 8020ab6:	b292      	uxth	r2, r2
 8020ab8:	fb02 110e 	mla	r1, r2, lr, r1
 8020abc:	fb00 1104 	mla	r1, r0, r4, r1
 8020ac0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020ac2:	fb09 1104 	mla	r1, r9, r4, r1
 8020ac6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020aca:	2900      	cmp	r1, #0
 8020acc:	f000 80f5 	beq.w	8020cba <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8020ad0:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8020ad4:	d01b      	beq.n	8020b0e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8020ad6:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8020ada:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020ade:	fb0e fa0a 	mul.w	sl, lr, sl
 8020ae2:	fb0e fe03 	mul.w	lr, lr, r3
 8020ae6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8020aea:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8020aee:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8020af2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020af6:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8020afa:	4453      	add	r3, sl
 8020afc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020b00:	0a1b      	lsrs	r3, r3, #8
 8020b02:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020b06:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020b0a:	ea43 030c 	orr.w	r3, r3, ip
 8020b0e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020b10:	2cff      	cmp	r4, #255	; 0xff
 8020b12:	d021      	beq.n	8020b58 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8020b14:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020b16:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8020b1a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020b1c:	fb04 fb0b 	mul.w	fp, r4, fp
 8020b20:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020b22:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020b26:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020b28:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020b2c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020b30:	fb04 fa0a 	mul.w	sl, r4, sl
 8020b34:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020b38:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020b3c:	44de      	add	lr, fp
 8020b3e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020b42:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020b46:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020b4a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020b4e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020b52:	ea4e 040a 	orr.w	r4, lr, sl
 8020b56:	940b      	str	r4, [sp, #44]	; 0x2c
 8020b58:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020b5a:	2cff      	cmp	r4, #255	; 0xff
 8020b5c:	d021      	beq.n	8020ba2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8020b5e:	9c08      	ldr	r4, [sp, #32]
 8020b60:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8020b64:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020b66:	fb04 fb0b 	mul.w	fp, r4, fp
 8020b6a:	9c08      	ldr	r4, [sp, #32]
 8020b6c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020b70:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020b72:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020b76:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020b7a:	fb04 fa0a 	mul.w	sl, r4, sl
 8020b7e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020b82:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020b86:	44de      	add	lr, fp
 8020b88:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020b8c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020b90:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020b94:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020b98:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020b9c:	ea4e 040a 	orr.w	r4, lr, sl
 8020ba0:	9408      	str	r4, [sp, #32]
 8020ba2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020ba4:	2cff      	cmp	r4, #255	; 0xff
 8020ba6:	d021      	beq.n	8020bec <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 8020ba8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8020baa:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8020bae:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020bb0:	fb04 fb0b 	mul.w	fp, r4, fp
 8020bb4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8020bb6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020bba:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020bbc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020bc0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020bc4:	fb04 fa0a 	mul.w	sl, r4, sl
 8020bc8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020bcc:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020bd0:	44de      	add	lr, fp
 8020bd2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020bd6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020bda:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020bde:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020be2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020be6:	ea4e 040a 	orr.w	r4, lr, sl
 8020bea:	940c      	str	r4, [sp, #48]	; 0x30
 8020bec:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020bee:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8020bf2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020bf6:	43c9      	mvns	r1, r1
 8020bf8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020bfc:	9c08      	ldr	r4, [sp, #32]
 8020bfe:	fb08 fc0c 	mul.w	ip, r8, ip
 8020c02:	fb02 cc0e 	mla	ip, r2, lr, ip
 8020c06:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8020c0a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8020c0c:	fb00 cc0e 	mla	ip, r0, lr, ip
 8020c10:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8020c14:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020c16:	fb09 cc0e 	mla	ip, r9, lr, ip
 8020c1a:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8020c1e:	fb08 f80e 	mul.w	r8, r8, lr
 8020c22:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020c26:	fa5f fe81 	uxtb.w	lr, r1
 8020c2a:	fb02 8303 	mla	r3, r2, r3, r8
 8020c2e:	9a08      	ldr	r2, [sp, #32]
 8020c30:	f8b7 8000 	ldrh.w	r8, [r7]
 8020c34:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020c38:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8020c3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020c3e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8020c42:	fb00 330a 	mla	r3, r0, sl, r3
 8020c46:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8020c4a:	ea4f 2228 	mov.w	r2, r8, asr #8
 8020c4e:	fb09 3900 	mla	r9, r9, r0, r3
 8020c52:	ea4f 00e8 	mov.w	r0, r8, asr #3
 8020c56:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8020c5a:	b2c9      	uxtb	r1, r1
 8020c5c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020c60:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8020c64:	fb02 f20e 	mul.w	r2, r2, lr
 8020c68:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8020c6c:	fb00 f00e 	mul.w	r0, r0, lr
 8020c70:	1c53      	adds	r3, r2, #1
 8020c72:	fb01 f10e 	mul.w	r1, r1, lr
 8020c76:	ea4c 0c09 	orr.w	ip, ip, r9
 8020c7a:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8020c7e:	ea4f 431c 	mov.w	r3, ip, lsr #16
 8020c82:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020c86:	4a60      	ldr	r2, [pc, #384]	; (8020e08 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 8020c88:	b2db      	uxtb	r3, r3
 8020c8a:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 8020c8e:	1c43      	adds	r3, r0, #1
 8020c90:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8020c94:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8020c98:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8020c9c:	00db      	lsls	r3, r3, #3
 8020c9e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020ca2:	4313      	orrs	r3, r2
 8020ca4:	1c4a      	adds	r2, r1, #1
 8020ca6:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8020caa:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8020cae:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8020cb2:	ea4c 0c03 	orr.w	ip, ip, r3
 8020cb6:	f8a7 c000 	strh.w	ip, [r7]
 8020cba:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020cbc:	3702      	adds	r7, #2
 8020cbe:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8020cc0:	441a      	add	r2, r3
 8020cc2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020cc4:	441d      	add	r5, r3
 8020cc6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8020cc8:	9225      	str	r2, [sp, #148]	; 0x94
 8020cca:	3b01      	subs	r3, #1
 8020ccc:	9317      	str	r3, [sp, #92]	; 0x5c
 8020cce:	e699      	b.n	8020a04 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8020cd0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020cd2:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8020cd4:	441c      	add	r4, r3
 8020cd6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020cd8:	441d      	add	r5, r3
 8020cda:	9b07      	ldr	r3, [sp, #28]
 8020cdc:	9425      	str	r4, [sp, #148]	; 0x94
 8020cde:	3b01      	subs	r3, #1
 8020ce0:	9307      	str	r3, [sp, #28]
 8020ce2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020ce4:	3302      	adds	r3, #2
 8020ce6:	930a      	str	r3, [sp, #40]	; 0x28
 8020ce8:	e66c      	b.n	80209c4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8020cea:	d024      	beq.n	8020d36 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 8020cec:	9b07      	ldr	r3, [sp, #28]
 8020cee:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8020cf0:	3b01      	subs	r3, #1
 8020cf2:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8020cf4:	fb00 4003 	mla	r0, r0, r3, r4
 8020cf8:	1400      	asrs	r0, r0, #16
 8020cfa:	f53f ae80 	bmi.w	80209fe <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8020cfe:	3901      	subs	r1, #1
 8020d00:	4288      	cmp	r0, r1
 8020d02:	f6bf ae7c 	bge.w	80209fe <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8020d06:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8020d08:	fb01 5303 	mla	r3, r1, r3, r5
 8020d0c:	141b      	asrs	r3, r3, #16
 8020d0e:	f53f ae76 	bmi.w	80209fe <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8020d12:	3a01      	subs	r2, #1
 8020d14:	4293      	cmp	r3, r2
 8020d16:	f6bf ae72 	bge.w	80209fe <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8020d1a:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8020d1e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8020d22:	f1bb 0f00 	cmp.w	fp, #0
 8020d26:	dc71      	bgt.n	8020e0c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8020d28:	9b07      	ldr	r3, [sp, #28]
 8020d2a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8020d2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020d30:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8020d34:	930a      	str	r3, [sp, #40]	; 0x28
 8020d36:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8020d38:	2b00      	cmp	r3, #0
 8020d3a:	f340 81af 	ble.w	802109c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 8020d3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020d42:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020d44:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020d48:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020d4c:	eef0 6a62 	vmov.f32	s13, s5
 8020d50:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020d54:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020d58:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020d5c:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 8020d60:	eef0 6a43 	vmov.f32	s13, s6
 8020d64:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020d68:	ee16 5a90 	vmov	r5, s13
 8020d6c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020d70:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020d74:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020d78:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020d7c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020d80:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020d84:	ee12 2a90 	vmov	r2, s5
 8020d88:	eef0 2a47 	vmov.f32	s5, s14
 8020d8c:	fb92 f3f3 	sdiv	r3, r2, r3
 8020d90:	ee13 2a10 	vmov	r2, s6
 8020d94:	9327      	str	r3, [sp, #156]	; 0x9c
 8020d96:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020d98:	eeb0 3a67 	vmov.f32	s6, s15
 8020d9c:	fb92 f3f3 	sdiv	r3, r2, r3
 8020da0:	9328      	str	r3, [sp, #160]	; 0xa0
 8020da2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8020da4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8020da6:	3b01      	subs	r3, #1
 8020da8:	9316      	str	r3, [sp, #88]	; 0x58
 8020daa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020dac:	bf08      	it	eq
 8020dae:	4613      	moveq	r3, r2
 8020db0:	9307      	str	r3, [sp, #28]
 8020db2:	e5f9      	b.n	80209a8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8020db4:	2800      	cmp	r0, #0
 8020db6:	f43f ae6b 	beq.w	8020a90 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8020dba:	f818 1001 	ldrb.w	r1, [r8, r1]
 8020dbe:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020dc2:	9108      	str	r1, [sp, #32]
 8020dc4:	0e09      	lsrs	r1, r1, #24
 8020dc6:	9110      	str	r1, [sp, #64]	; 0x40
 8020dc8:	e662      	b.n	8020a90 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8020dca:	f113 0801 	adds.w	r8, r3, #1
 8020dce:	f53f af74 	bmi.w	8020cba <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8020dd2:	4541      	cmp	r1, r8
 8020dd4:	f6ff af71 	blt.w	8020cba <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8020dd8:	f11c 0801 	adds.w	r8, ip, #1
 8020ddc:	f53f af6d 	bmi.w	8020cba <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8020de0:	45c6      	cmp	lr, r8
 8020de2:	f6ff af6a 	blt.w	8020cba <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8020de6:	b209      	sxth	r1, r1
 8020de8:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8020dec:	fa0f f38e 	sxth.w	r3, lr
 8020df0:	9100      	str	r1, [sp, #0]
 8020df2:	4639      	mov	r1, r7
 8020df4:	9301      	str	r3, [sp, #4]
 8020df6:	4633      	mov	r3, r6
 8020df8:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8020dfc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020dfe:	9819      	ldr	r0, [sp, #100]	; 0x64
 8020e00:	f7ff fc7b 	bl	80206fa <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 8020e04:	e759      	b.n	8020cba <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8020e06:	bf00      	nop
 8020e08:	fffff800 	.word	0xfffff800
 8020e0c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8020e0e:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8020e12:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8020e14:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8020e18:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020e1a:	1427      	asrs	r7, r4, #16
 8020e1c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020e1e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020e22:	142b      	asrs	r3, r5, #16
 8020e24:	fb01 7303 	mla	r3, r1, r3, r7
 8020e28:	18e7      	adds	r7, r4, r3
 8020e2a:	5ce3      	ldrb	r3, [r4, r3]
 8020e2c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8020e30:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8020e34:	2a00      	cmp	r2, #0
 8020e36:	f000 8127 	beq.w	8021088 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 8020e3a:	f897 e001 	ldrb.w	lr, [r7, #1]
 8020e3e:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8020e42:	940d      	str	r4, [sp, #52]	; 0x34
 8020e44:	0e24      	lsrs	r4, r4, #24
 8020e46:	9414      	str	r4, [sp, #80]	; 0x50
 8020e48:	b170      	cbz	r0, 8020e68 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8020e4a:	eb07 0e01 	add.w	lr, r7, r1
 8020e4e:	5c79      	ldrb	r1, [r7, r1]
 8020e50:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020e54:	9109      	str	r1, [sp, #36]	; 0x24
 8020e56:	0e09      	lsrs	r1, r1, #24
 8020e58:	9111      	str	r1, [sp, #68]	; 0x44
 8020e5a:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8020e5e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020e62:	910e      	str	r1, [sp, #56]	; 0x38
 8020e64:	0e09      	lsrs	r1, r1, #24
 8020e66:	9115      	str	r1, [sp, #84]	; 0x54
 8020e68:	b292      	uxth	r2, r2
 8020e6a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020e6c:	b280      	uxth	r0, r0
 8020e6e:	fb02 f800 	mul.w	r8, r2, r0
 8020e72:	0112      	lsls	r2, r2, #4
 8020e74:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8020e78:	eba2 0e08 	sub.w	lr, r2, r8
 8020e7c:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8020e80:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020e82:	b280      	uxth	r0, r0
 8020e84:	fa1f fe8e 	uxth.w	lr, lr
 8020e88:	1a09      	subs	r1, r1, r0
 8020e8a:	fb0e f202 	mul.w	r2, lr, r2
 8020e8e:	b289      	uxth	r1, r1
 8020e90:	fb01 220c 	mla	r2, r1, ip, r2
 8020e94:	fb00 2204 	mla	r2, r0, r4, r2
 8020e98:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020e9a:	fb08 2204 	mla	r2, r8, r4, r2
 8020e9e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8020ea2:	2a00      	cmp	r2, #0
 8020ea4:	f000 80e5 	beq.w	8021072 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 8020ea8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8020eac:	d019      	beq.n	8020ee2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
 8020eae:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8020eb2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020eb6:	fb0c fa0a 	mul.w	sl, ip, sl
 8020eba:	fb0c fc03 	mul.w	ip, ip, r3
 8020ebe:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8020ec2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8020ec6:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8020eca:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020ece:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8020ed2:	4453      	add	r3, sl
 8020ed4:	0a3f      	lsrs	r7, r7, #8
 8020ed6:	0a1b      	lsrs	r3, r3, #8
 8020ed8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020edc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020ee0:	433b      	orrs	r3, r7
 8020ee2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020ee4:	2cff      	cmp	r4, #255	; 0xff
 8020ee6:	d020      	beq.n	8020f2a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
 8020ee8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020eea:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020eee:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020ef0:	4367      	muls	r7, r4
 8020ef2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020ef4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020ef8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020efc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020efe:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020f02:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020f06:	fb04 fa0a 	mul.w	sl, r4, sl
 8020f0a:	44bc      	add	ip, r7
 8020f0c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020f10:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020f14:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020f18:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020f1c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020f20:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020f24:	ea4c 040a 	orr.w	r4, ip, sl
 8020f28:	940d      	str	r4, [sp, #52]	; 0x34
 8020f2a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020f2c:	2cff      	cmp	r4, #255	; 0xff
 8020f2e:	d020      	beq.n	8020f72 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
 8020f30:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8020f32:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020f36:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020f38:	4367      	muls	r7, r4
 8020f3a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8020f3c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020f40:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020f44:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020f46:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020f4a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020f4e:	fb04 fa0a 	mul.w	sl, r4, sl
 8020f52:	44bc      	add	ip, r7
 8020f54:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020f58:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020f5c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020f60:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020f64:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020f68:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020f6c:	ea4c 040a 	orr.w	r4, ip, sl
 8020f70:	9409      	str	r4, [sp, #36]	; 0x24
 8020f72:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020f74:	2cff      	cmp	r4, #255	; 0xff
 8020f76:	d020      	beq.n	8020fba <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
 8020f78:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020f7a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020f7e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020f80:	4367      	muls	r7, r4
 8020f82:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020f84:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020f88:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020f8c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020f8e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020f92:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020f96:	fb04 fa0a 	mul.w	sl, r4, sl
 8020f9a:	44bc      	add	ip, r7
 8020f9c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020fa0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020fa4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020fa8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020fac:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020fb0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020fb4:	ea4c 040a 	orr.w	r4, ip, sl
 8020fb8:	940e      	str	r4, [sp, #56]	; 0x38
 8020fba:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020fbc:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8020fc0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020fc4:	43d2      	mvns	r2, r2
 8020fc6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020fca:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8020fcc:	b2d2      	uxtb	r2, r2
 8020fce:	fb0e f707 	mul.w	r7, lr, r7
 8020fd2:	fb01 770c 	mla	r7, r1, ip, r7
 8020fd6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020fda:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020fdc:	fb00 770c 	mla	r7, r0, ip, r7
 8020fe0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020fe4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020fe6:	fb08 770c 	mla	r7, r8, ip, r7
 8020fea:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8020fee:	fb0e fe0c 	mul.w	lr, lr, ip
 8020ff2:	0a3f      	lsrs	r7, r7, #8
 8020ff4:	fb01 e303 	mla	r3, r1, r3, lr
 8020ff8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020ffa:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020ffe:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8021002:	990e      	ldr	r1, [sp, #56]	; 0x38
 8021004:	fb00 330a 	mla	r3, r0, sl, r3
 8021008:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 802100c:	fb08 3c0c 	mla	ip, r8, ip, r3
 8021010:	f8b9 3000 	ldrh.w	r3, [r9]
 8021014:	1218      	asrs	r0, r3, #8
 8021016:	10d9      	asrs	r1, r3, #3
 8021018:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802101c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8021020:	00db      	lsls	r3, r3, #3
 8021022:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8021026:	4350      	muls	r0, r2
 8021028:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802102c:	b2db      	uxtb	r3, r3
 802102e:	4351      	muls	r1, r2
 8021030:	ea47 070c 	orr.w	r7, r7, ip
 8021034:	4353      	muls	r3, r2
 8021036:	1c42      	adds	r2, r0, #1
 8021038:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802103c:	0c3a      	lsrs	r2, r7, #16
 802103e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8021042:	4a18      	ldr	r2, [pc, #96]	; (80210a4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
 8021044:	b2c0      	uxtb	r0, r0
 8021046:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 802104a:	1c4a      	adds	r2, r1, #1
 802104c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8021050:	0a3a      	lsrs	r2, r7, #8
 8021052:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8021056:	00c9      	lsls	r1, r1, #3
 8021058:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802105c:	4301      	orrs	r1, r0
 802105e:	1c58      	adds	r0, r3, #1
 8021060:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8021064:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8021068:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 802106c:	4308      	orrs	r0, r1
 802106e:	f8a9 0000 	strh.w	r0, [r9]
 8021072:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8021074:	f109 0902 	add.w	r9, r9, #2
 8021078:	9a25      	ldr	r2, [sp, #148]	; 0x94
 802107a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802107e:	441a      	add	r2, r3
 8021080:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021082:	9225      	str	r2, [sp, #148]	; 0x94
 8021084:	441d      	add	r5, r3
 8021086:	e64c      	b.n	8020d22 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8021088:	2800      	cmp	r0, #0
 802108a:	f43f aeed 	beq.w	8020e68 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 802108e:	5c79      	ldrb	r1, [r7, r1]
 8021090:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021094:	9109      	str	r1, [sp, #36]	; 0x24
 8021096:	0e09      	lsrs	r1, r1, #24
 8021098:	9111      	str	r1, [sp, #68]	; 0x44
 802109a:	e6e5      	b.n	8020e68 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 802109c:	b01b      	add	sp, #108	; 0x6c
 802109e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80210a2:	bf00      	nop
 80210a4:	fffff800 	.word	0xfffff800

080210a8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 80210a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80210ac:	b085      	sub	sp, #20
 80210ae:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 80210b2:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 80210b6:	2800      	cmp	r0, #0
 80210b8:	9103      	str	r1, [sp, #12]
 80210ba:	fb00 7406 	mla	r4, r0, r6, r7
 80210be:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 80210c2:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 80210c6:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 80210ca:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 80210ce:	eb03 0904 	add.w	r9, r3, r4
 80210d2:	9501      	str	r5, [sp, #4]
 80210d4:	f2c0 8150 	blt.w	8021378 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 80210d8:	4583      	cmp	fp, r0
 80210da:	f340 814d 	ble.w	8021378 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 80210de:	2f00      	cmp	r7, #0
 80210e0:	f2c0 8146 	blt.w	8021370 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 80210e4:	42be      	cmp	r6, r7
 80210e6:	f340 8143 	ble.w	8021370 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 80210ea:	f813 c004 	ldrb.w	ip, [r3, r4]
 80210ee:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 80210f2:	f64f 041f 	movw	r4, #63519	; 0xf81f
 80210f6:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80210fa:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 80210fe:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021102:	4355      	muls	r5, r2
 8021104:	fb0c f203 	mul.w	r2, ip, r3
 8021108:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 802110c:	f605 0501 	addw	r5, r5, #2049	; 0x801
 8021110:	441d      	add	r5, r3
 8021112:	f102 0320 	add.w	r3, r2, #32
 8021116:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802111a:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 802111e:	0a1b      	lsrs	r3, r3, #8
 8021120:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021124:	431c      	orrs	r4, r3
 8021126:	1c7b      	adds	r3, r7, #1
 8021128:	f100 812b 	bmi.w	8021382 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 802112c:	429e      	cmp	r6, r3
 802112e:	f340 8128 	ble.w	8021382 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 8021132:	2900      	cmp	r1, #0
 8021134:	f000 8128 	beq.w	8021388 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
 8021138:	9a01      	ldr	r2, [sp, #4]
 802113a:	f899 3001 	ldrb.w	r3, [r9, #1]
 802113e:	8855      	ldrh	r5, [r2, #2]
 8021140:	ea4f 08e3 	mov.w	r8, r3, asr #3
 8021144:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 8021148:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802114c:	fb08 f802 	mul.w	r8, r8, r2
 8021150:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8021154:	435d      	muls	r5, r3
 8021156:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 802115a:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802115e:	44d0      	add	r8, sl
 8021160:	f105 0a20 	add.w	sl, r5, #32
 8021164:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8021168:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 802116c:	0a2d      	lsrs	r5, r5, #8
 802116e:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021172:	432a      	orrs	r2, r5
 8021174:	3001      	adds	r0, #1
 8021176:	f100 810d 	bmi.w	8021394 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 802117a:	4583      	cmp	fp, r0
 802117c:	f340 810a 	ble.w	8021394 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 8021180:	f1be 0f00 	cmp.w	lr, #0
 8021184:	f000 810b 	beq.w	802139e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
 8021188:	2f00      	cmp	r7, #0
 802118a:	f2c0 8100 	blt.w	802138e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 802118e:	42be      	cmp	r6, r7
 8021190:	f340 80fd 	ble.w	802138e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 8021194:	9801      	ldr	r0, [sp, #4]
 8021196:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 802119a:	f819 5006 	ldrb.w	r5, [r9, r6]
 802119e:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 80211a2:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 80211a6:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 80211aa:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 80211ae:	fb0a fa00 	mul.w	sl, sl, r0
 80211b2:	fb05 f808 	mul.w	r8, r5, r8
 80211b6:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 80211ba:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 80211be:	4482      	add	sl, r0
 80211c0:	f108 0020 	add.w	r0, r8, #32
 80211c4:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 80211c8:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 80211cc:	0a00      	lsrs	r0, r0, #8
 80211ce:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80211d2:	ea4b 0b00 	orr.w	fp, fp, r0
 80211d6:	3701      	adds	r7, #1
 80211d8:	f100 80e6 	bmi.w	80213a8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 80211dc:	42be      	cmp	r6, r7
 80211de:	f340 80e3 	ble.w	80213a8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 80211e2:	2900      	cmp	r1, #0
 80211e4:	f000 80e3 	beq.w	80213ae <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
 80211e8:	3601      	adds	r6, #1
 80211ea:	9801      	ldr	r0, [sp, #4]
 80211ec:	f819 7006 	ldrb.w	r7, [r9, r6]
 80211f0:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 80211f4:	ea4f 09e7 	mov.w	r9, r7, asr #3
 80211f8:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 80211fc:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021200:	fb09 f906 	mul.w	r9, r9, r6
 8021204:	fb07 f800 	mul.w	r8, r7, r0
 8021208:	f64f 001f 	movw	r0, #63519	; 0xf81f
 802120c:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 8021210:	f609 0901 	addw	r9, r9, #2049	; 0x801
 8021214:	44d1      	add	r9, sl
 8021216:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 802121a:	f108 0020 	add.w	r0, r8, #32
 802121e:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8021222:	0a00      	lsrs	r0, r0, #8
 8021224:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021228:	4330      	orrs	r0, r6
 802122a:	b28e      	uxth	r6, r1
 802122c:	fa1f f98e 	uxth.w	r9, lr
 8021230:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 8021234:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8021238:	fb06 f809 	mul.w	r8, r6, r9
 802123c:	0136      	lsls	r6, r6, #4
 802123e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021242:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8021246:	9601      	str	r6, [sp, #4]
 8021248:	ea4a 0404 	orr.w	r4, sl, r4
 802124c:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8021250:	fa1f f689 	uxth.w	r6, r9
 8021254:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8021258:	fb11 f90e 	smulbb	r9, r1, lr
 802125c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021260:	9602      	str	r6, [sp, #8]
 8021262:	4626      	mov	r6, r4
 8021264:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 8021268:	f1ce 0410 	rsb	r4, lr, #16
 802126c:	ea4a 0202 	orr.w	r2, sl, r2
 8021270:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8021274:	1a64      	subs	r4, r4, r1
 8021276:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 802127a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802127e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8021282:	434a      	muls	r2, r1
 8021284:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8021288:	ea4a 0000 	orr.w	r0, sl, r0
 802128c:	9903      	ldr	r1, [sp, #12]
 802128e:	fb04 2406 	mla	r4, r4, r6, r2
 8021292:	9e02      	ldr	r6, [sp, #8]
 8021294:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8021298:	fb09 4200 	mla	r2, r9, r0, r4
 802129c:	ea4f 440b 	mov.w	r4, fp, lsl #16
 80212a0:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 80212a4:	8808      	ldrh	r0, [r1, #0]
 80212a6:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 80212aa:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
 80212ae:	ea44 0b0b 	orr.w	fp, r4, fp
 80212b2:	9c01      	ldr	r4, [sp, #4]
 80212b4:	b289      	uxth	r1, r1
 80212b6:	f5c4 7480 	rsb	r4, r4, #256	; 0x100
 80212ba:	fb0e 2e0b 	mla	lr, lr, fp, r2
 80212be:	1ba4      	subs	r4, r4, r6
 80212c0:	9e01      	ldr	r6, [sp, #4]
 80212c2:	ea4f 525e 	mov.w	r2, lr, lsr #21
 80212c6:	eba6 0608 	sub.w	r6, r6, r8
 80212ca:	b2a4      	uxth	r4, r4
 80212cc:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80212d0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80212d4:	b2b6      	uxth	r6, r6
 80212d6:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80212da:	4373      	muls	r3, r6
 80212dc:	ea42 0e0e 	orr.w	lr, r2, lr
 80212e0:	fb0c 3304 	mla	r3, ip, r4, r3
 80212e4:	9c02      	ldr	r4, [sp, #8]
 80212e6:	fa1f f28e 	uxth.w	r2, lr
 80212ea:	fb04 3505 	mla	r5, r4, r5, r3
 80212ee:	10d4      	asrs	r4, r2, #3
 80212f0:	fb08 5707 	mla	r7, r8, r7, r5
 80212f4:	1215      	asrs	r5, r2, #8
 80212f6:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 80212fa:	00d2      	lsls	r2, r2, #3
 80212fc:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8021300:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8021304:	b2d2      	uxtb	r2, r2
 8021306:	434f      	muls	r7, r1
 8021308:	1c7b      	adds	r3, r7, #1
 802130a:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 802130e:	1203      	asrs	r3, r0, #8
 8021310:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 8021314:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8021318:	b2ff      	uxtb	r7, r7
 802131a:	fb13 f307 	smulbb	r3, r3, r7
 802131e:	fb05 3501 	mla	r5, r5, r1, r3
 8021322:	10c3      	asrs	r3, r0, #3
 8021324:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8021328:	b2ad      	uxth	r5, r5
 802132a:	fb13 f307 	smulbb	r3, r3, r7
 802132e:	fb04 3401 	mla	r4, r4, r1, r3
 8021332:	00c3      	lsls	r3, r0, #3
 8021334:	b2db      	uxtb	r3, r3
 8021336:	b2a4      	uxth	r4, r4
 8021338:	fb13 f307 	smulbb	r3, r3, r7
 802133c:	fb02 3101 	mla	r1, r2, r1, r3
 8021340:	1c6b      	adds	r3, r5, #1
 8021342:	1c62      	adds	r2, r4, #1
 8021344:	b289      	uxth	r1, r1
 8021346:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802134a:	1c4b      	adds	r3, r1, #1
 802134c:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8021350:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8021354:	9a03      	ldr	r2, [sp, #12]
 8021356:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802135a:	0964      	lsrs	r4, r4, #5
 802135c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8021360:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8021364:	432b      	orrs	r3, r5
 8021366:	4323      	orrs	r3, r4
 8021368:	8013      	strh	r3, [r2, #0]
 802136a:	b005      	add	sp, #20
 802136c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021370:	f04f 0c00 	mov.w	ip, #0
 8021374:	4664      	mov	r4, ip
 8021376:	e6d6      	b.n	8021126 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
 8021378:	2300      	movs	r3, #0
 802137a:	469c      	mov	ip, r3
 802137c:	461a      	mov	r2, r3
 802137e:	461c      	mov	r4, r3
 8021380:	e6f8      	b.n	8021174 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8021382:	2300      	movs	r3, #0
 8021384:	461a      	mov	r2, r3
 8021386:	e6f5      	b.n	8021174 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8021388:	460b      	mov	r3, r1
 802138a:	460a      	mov	r2, r1
 802138c:	e6f2      	b.n	8021174 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 802138e:	2500      	movs	r5, #0
 8021390:	46ab      	mov	fp, r5
 8021392:	e720      	b.n	80211d6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
 8021394:	2700      	movs	r7, #0
 8021396:	463d      	mov	r5, r7
 8021398:	4638      	mov	r0, r7
 802139a:	46bb      	mov	fp, r7
 802139c:	e745      	b.n	802122a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 802139e:	4677      	mov	r7, lr
 80213a0:	4675      	mov	r5, lr
 80213a2:	4670      	mov	r0, lr
 80213a4:	46f3      	mov	fp, lr
 80213a6:	e740      	b.n	802122a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 80213a8:	2700      	movs	r7, #0
 80213aa:	4638      	mov	r0, r7
 80213ac:	e73d      	b.n	802122a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 80213ae:	460f      	mov	r7, r1
 80213b0:	4608      	mov	r0, r1
 80213b2:	e73a      	b.n	802122a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

080213b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80213b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80213b8:	b097      	sub	sp, #92	; 0x5c
 80213ba:	9214      	str	r2, [sp, #80]	; 0x50
 80213bc:	9308      	str	r3, [sp, #32]
 80213be:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80213c0:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 80213c4:	9015      	str	r0, [sp, #84]	; 0x54
 80213c6:	9312      	str	r3, [sp, #72]	; 0x48
 80213c8:	6850      	ldr	r0, [r2, #4]
 80213ca:	9111      	str	r1, [sp, #68]	; 0x44
 80213cc:	6812      	ldr	r2, [r2, #0]
 80213ce:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 80213d2:	fb00 1303 	mla	r3, r0, r3, r1
 80213d6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80213da:	9309      	str	r3, [sp, #36]	; 0x24
 80213dc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80213de:	681b      	ldr	r3, [r3, #0]
 80213e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80213e2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80213e4:	685b      	ldr	r3, [r3, #4]
 80213e6:	930c      	str	r3, [sp, #48]	; 0x30
 80213e8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80213ec:	930a      	str	r3, [sp, #40]	; 0x28
 80213ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80213f0:	2b00      	cmp	r3, #0
 80213f2:	dc03      	bgt.n	80213fc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80213f4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80213f6:	2b00      	cmp	r3, #0
 80213f8:	f340 83cd 	ble.w	8021b96 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
 80213fc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80213fe:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021402:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021406:	1e48      	subs	r0, r1, #1
 8021408:	1e55      	subs	r5, r2, #1
 802140a:	9b08      	ldr	r3, [sp, #32]
 802140c:	2b00      	cmp	r3, #0
 802140e:	f340 81a5 	ble.w	802175c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8021412:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8021414:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8021416:	1436      	asrs	r6, r6, #16
 8021418:	ea4f 4323 	mov.w	r3, r3, asr #16
 802141c:	d406      	bmi.n	802142c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802141e:	4286      	cmp	r6, r0
 8021420:	da04      	bge.n	802142c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8021422:	2b00      	cmp	r3, #0
 8021424:	db02      	blt.n	802142c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8021426:	42ab      	cmp	r3, r5
 8021428:	f2c0 8199 	blt.w	802175e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 802142c:	3601      	adds	r6, #1
 802142e:	f100 8186 	bmi.w	802173e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8021432:	42b1      	cmp	r1, r6
 8021434:	f2c0 8183 	blt.w	802173e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8021438:	3301      	adds	r3, #1
 802143a:	f100 8180 	bmi.w	802173e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 802143e:	429a      	cmp	r2, r3
 8021440:	f2c0 817d 	blt.w	802173e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8021444:	9b08      	ldr	r3, [sp, #32]
 8021446:	f64f 061f 	movw	r6, #63519	; 0xf81f
 802144a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802144c:	9313      	str	r3, [sp, #76]	; 0x4c
 802144e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021450:	2b00      	cmp	r3, #0
 8021452:	f340 81a6 	ble.w	80217a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8021456:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8021458:	9d21      	ldr	r5, [sp, #132]	; 0x84
 802145a:	1418      	asrs	r0, r3, #16
 802145c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802145e:	142d      	asrs	r5, r5, #16
 8021460:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8021464:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8021466:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 802146a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802146c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8021470:	f100 81fa 	bmi.w	8021868 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8021474:	f102 3eff 	add.w	lr, r2, #4294967295
 8021478:	4575      	cmp	r5, lr
 802147a:	f280 81f5 	bge.w	8021868 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 802147e:	2800      	cmp	r0, #0
 8021480:	f2c0 81f2 	blt.w	8021868 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8021484:	f103 3eff 	add.w	lr, r3, #4294967295
 8021488:	4570      	cmp	r0, lr
 802148a:	f280 81ed 	bge.w	8021868 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 802148e:	b212      	sxth	r2, r2
 8021490:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021492:	fa1f fe81 	uxth.w	lr, r1
 8021496:	fb00 5002 	mla	r0, r0, r2, r5
 802149a:	ea4f 150e 	mov.w	r5, lr, lsl #4
 802149e:	eb03 0a00 	add.w	sl, r3, r0
 80214a2:	f813 9000 	ldrb.w	r9, [r3, r0]
 80214a6:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 80214aa:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80214ae:	b29b      	uxth	r3, r3
 80214b0:	f1bc 0f00 	cmp.w	ip, #0
 80214b4:	f000 81bb 	beq.w	802182e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 80214b8:	f81a 4002 	ldrb.w	r4, [sl, r2]
 80214bc:	eb0a 0b02 	add.w	fp, sl, r2
 80214c0:	fa1f fa8c 	uxth.w	sl, ip
 80214c4:	940d      	str	r4, [sp, #52]	; 0x34
 80214c6:	fb0a fe0e 	mul.w	lr, sl, lr
 80214ca:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80214ce:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 80214d2:	eba5 050e 	sub.w	r5, r5, lr
 80214d6:	940e      	str	r4, [sp, #56]	; 0x38
 80214d8:	fa1f fa8a 	uxth.w	sl, sl
 80214dc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80214de:	b2ad      	uxth	r5, r5
 80214e0:	eba3 030a 	sub.w	r3, r3, sl
 80214e4:	fb08 f505 	mul.w	r5, r8, r5
 80214e8:	b29b      	uxth	r3, r3
 80214ea:	fb09 5303 	mla	r3, r9, r3, r5
 80214ee:	fb0a 3304 	mla	r3, sl, r4, r3
 80214f2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80214f4:	fb0e 3304 	mla	r3, lr, r4, r3
 80214f8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80214fc:	2b00      	cmp	r3, #0
 80214fe:	f000 8111 	beq.w	8021724 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8021502:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021504:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021508:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 802150c:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8021510:	f000 8192 	beq.w	8021838 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 8021514:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8021518:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 802151c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021520:	fb0a fe0e 	mul.w	lr, sl, lr
 8021524:	fb09 f000 	mul.w	r0, r9, r0
 8021528:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 802152c:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8021530:	f100 0b20 	add.w	fp, r0, #32
 8021534:	44ce      	add	lr, r9
 8021536:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 802153a:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 802153e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021542:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8021546:	ea4e 0909 	orr.w	r9, lr, r9
 802154a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802154e:	8868      	ldrh	r0, [r5, #2]
 8021550:	d019      	beq.n	8021586 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8021552:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8021556:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 802155a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802155e:	fb0a fe0e 	mul.w	lr, sl, lr
 8021562:	fb08 f800 	mul.w	r8, r8, r0
 8021566:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 802156a:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 802156e:	f108 0b20 	add.w	fp, r8, #32
 8021572:	4486      	add	lr, r0
 8021574:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8021578:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 802157c:	0a00      	lsrs	r0, r0, #8
 802157e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021582:	ea4e 0000 	orr.w	r0, lr, r0
 8021586:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 802158a:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802158e:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8021592:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8021596:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 802159a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802159e:	ea4e 0909 	orr.w	r9, lr, r9
 80215a2:	ea4a 0000 	orr.w	r0, sl, r0
 80215a6:	f1bc 0f00 	cmp.w	ip, #0
 80215aa:	f000 8147 	beq.w	802183c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 80215ae:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80215b2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80215b4:	3a01      	subs	r2, #1
 80215b6:	2cff      	cmp	r4, #255	; 0xff
 80215b8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80215bc:	f102 0202 	add.w	r2, r2, #2
 80215c0:	eb05 0e02 	add.w	lr, r5, r2
 80215c4:	5aaa      	ldrh	r2, [r5, r2]
 80215c6:	d018      	beq.n	80215fa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 80215c8:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 80215cc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80215d0:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80215d4:	fb04 fa02 	mul.w	sl, r4, r2
 80215d8:	fb08 f805 	mul.w	r8, r8, r5
 80215dc:	f10a 0520 	add.w	r5, sl, #32
 80215e0:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 80215e4:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80215e8:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 80215ec:	4442      	add	r2, r8
 80215ee:	0a2d      	lsrs	r5, r5, #8
 80215f0:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 80215f4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80215f8:	432a      	orrs	r2, r5
 80215fa:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80215fc:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8021600:	2cff      	cmp	r4, #255	; 0xff
 8021602:	d01a      	beq.n	802163a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
 8021604:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8021608:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802160c:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8021610:	fb04 fa05 	mul.w	sl, r4, r5
 8021614:	fb08 f80e 	mul.w	r8, r8, lr
 8021618:	f10a 0e20 	add.w	lr, sl, #32
 802161c:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8021620:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8021624:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8021628:	4445      	add	r5, r8
 802162a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802162e:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8021632:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8021636:	ea45 050e 	orr.w	r5, r5, lr
 802163a:	fb1c fe01 	smulbb	lr, ip, r1
 802163e:	f1cc 0810 	rsb	r8, ip, #16
 8021642:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8021646:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802164a:	ea4f 0eee 	mov.w	lr, lr, asr #3
 802164e:	eba8 0801 	sub.w	r8, r8, r1
 8021652:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8021656:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802165a:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 802165e:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8021662:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8021666:	ea4a 0202 	orr.w	r2, sl, r2
 802166a:	4341      	muls	r1, r0
 802166c:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8021670:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8021674:	fb09 1108 	mla	r1, r9, r8, r1
 8021678:	ea4b 0505 	orr.w	r5, fp, r5
 802167c:	fb0c 1102 	mla	r1, ip, r2, r1
 8021680:	fb0e 1e05 	mla	lr, lr, r5, r1
 8021684:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8021688:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 802168c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021690:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8021694:	ea42 0e0e 	orr.w	lr, r2, lr
 8021698:	fa1f f28e 	uxth.w	r2, lr
 802169c:	2bff      	cmp	r3, #255	; 0xff
 802169e:	d103      	bne.n	80216a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80216a0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80216a2:	29ff      	cmp	r1, #255	; 0xff
 80216a4:	f000 80de 	beq.w	8021864 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 80216a8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80216aa:	1215      	asrs	r5, r2, #8
 80216ac:	8838      	ldrh	r0, [r7, #0]
 80216ae:	434b      	muls	r3, r1
 80216b0:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80216b4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80216b6:	f103 0c01 	add.w	ip, r3, #1
 80216ba:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 80216be:	ea6f 2323 	mvn.w	r3, r3, asr #8
 80216c2:	fa5f fc83 	uxtb.w	ip, r3
 80216c6:	1203      	asrs	r3, r0, #8
 80216c8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80216cc:	fb13 f30c 	smulbb	r3, r3, ip
 80216d0:	fb05 3501 	mla	r5, r5, r1, r3
 80216d4:	10c3      	asrs	r3, r0, #3
 80216d6:	10d1      	asrs	r1, r2, #3
 80216d8:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80216dc:	00d2      	lsls	r2, r2, #3
 80216de:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80216e2:	b2ad      	uxth	r5, r5
 80216e4:	fb13 f30c 	smulbb	r3, r3, ip
 80216e8:	b2d2      	uxtb	r2, r2
 80216ea:	fb01 3104 	mla	r1, r1, r4, r3
 80216ee:	00c3      	lsls	r3, r0, #3
 80216f0:	b2db      	uxtb	r3, r3
 80216f2:	b289      	uxth	r1, r1
 80216f4:	fb13 f30c 	smulbb	r3, r3, ip
 80216f8:	fb02 3304 	mla	r3, r2, r4, r3
 80216fc:	b29a      	uxth	r2, r3
 80216fe:	1c6b      	adds	r3, r5, #1
 8021700:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8021704:	1c53      	adds	r3, r2, #1
 8021706:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802170a:	1c4a      	adds	r2, r1, #1
 802170c:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8021710:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8021714:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8021718:	0949      	lsrs	r1, r1, #5
 802171a:	432b      	orrs	r3, r5
 802171c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8021720:	430b      	orrs	r3, r1
 8021722:	803b      	strh	r3, [r7, #0]
 8021724:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021726:	3702      	adds	r7, #2
 8021728:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 802172a:	4413      	add	r3, r2
 802172c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 802172e:	9321      	str	r3, [sp, #132]	; 0x84
 8021730:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021732:	441a      	add	r2, r3
 8021734:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021736:	3b01      	subs	r3, #1
 8021738:	9222      	str	r2, [sp, #136]	; 0x88
 802173a:	9313      	str	r3, [sp, #76]	; 0x4c
 802173c:	e687      	b.n	802144e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 802173e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021740:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 8021742:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8021744:	4433      	add	r3, r6
 8021746:	9321      	str	r3, [sp, #132]	; 0x84
 8021748:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802174a:	441c      	add	r4, r3
 802174c:	9b08      	ldr	r3, [sp, #32]
 802174e:	3b01      	subs	r3, #1
 8021750:	9422      	str	r4, [sp, #136]	; 0x88
 8021752:	9308      	str	r3, [sp, #32]
 8021754:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021756:	3302      	adds	r3, #2
 8021758:	9309      	str	r3, [sp, #36]	; 0x24
 802175a:	e656      	b.n	802140a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 802175c:	d028      	beq.n	80217b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 802175e:	9b08      	ldr	r3, [sp, #32]
 8021760:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8021762:	3b01      	subs	r3, #1
 8021764:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8021766:	fb00 5003 	mla	r0, r0, r3, r5
 802176a:	1400      	asrs	r0, r0, #16
 802176c:	f53f ae6a 	bmi.w	8021444 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8021770:	3901      	subs	r1, #1
 8021772:	4288      	cmp	r0, r1
 8021774:	f6bf ae66 	bge.w	8021444 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8021778:	9924      	ldr	r1, [sp, #144]	; 0x90
 802177a:	9822      	ldr	r0, [sp, #136]	; 0x88
 802177c:	fb01 0303 	mla	r3, r1, r3, r0
 8021780:	141b      	asrs	r3, r3, #16
 8021782:	f53f ae5f 	bmi.w	8021444 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8021786:	3a01      	subs	r2, #1
 8021788:	4293      	cmp	r3, r2
 802178a:	f6bf ae5b 	bge.w	8021444 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802178e:	9b08      	ldr	r3, [sp, #32]
 8021790:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8021794:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8021798:	9313      	str	r3, [sp, #76]	; 0x4c
 802179a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802179c:	2b00      	cmp	r3, #0
 802179e:	f300 8082 	bgt.w	80218a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 80217a2:	9b08      	ldr	r3, [sp, #32]
 80217a4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80217a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80217aa:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80217ae:	9309      	str	r3, [sp, #36]	; 0x24
 80217b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80217b2:	2b00      	cmp	r3, #0
 80217b4:	f340 81ef 	ble.w	8021b96 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
 80217b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80217bc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80217be:	ee30 0a04 	vadd.f32	s0, s0, s8
 80217c2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80217c6:	eef0 6a62 	vmov.f32	s13, s5
 80217ca:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80217ce:	ee31 1a05 	vadd.f32	s2, s2, s10
 80217d2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80217d6:	edcd 6a21 	vstr	s13, [sp, #132]	; 0x84
 80217da:	eef0 6a43 	vmov.f32	s13, s6
 80217de:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80217e2:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 80217e6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80217ea:	ee61 7a27 	vmul.f32	s15, s2, s15
 80217ee:	ee77 2a62 	vsub.f32	s5, s14, s5
 80217f2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80217f6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80217fa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80217fe:	ee12 2a90 	vmov	r2, s5
 8021802:	eef0 2a47 	vmov.f32	s5, s14
 8021806:	fb92 f3f3 	sdiv	r3, r2, r3
 802180a:	ee13 2a10 	vmov	r2, s6
 802180e:	9323      	str	r3, [sp, #140]	; 0x8c
 8021810:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021812:	eeb0 3a67 	vmov.f32	s6, s15
 8021816:	fb92 f3f3 	sdiv	r3, r2, r3
 802181a:	9324      	str	r3, [sp, #144]	; 0x90
 802181c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802181e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021820:	3b01      	subs	r3, #1
 8021822:	9311      	str	r3, [sp, #68]	; 0x44
 8021824:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021826:	bf08      	it	eq
 8021828:	4613      	moveq	r3, r2
 802182a:	9308      	str	r3, [sp, #32]
 802182c:	e5df      	b.n	80213ee <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802182e:	fb08 f505 	mul.w	r5, r8, r5
 8021832:	fb09 5303 	mla	r3, r9, r3, r5
 8021836:	e65f      	b.n	80214f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 8021838:	4681      	mov	r9, r0
 802183a:	e686      	b.n	802154a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 802183c:	f1c1 0210 	rsb	r2, r1, #16
 8021840:	4341      	muls	r1, r0
 8021842:	fb09 1902 	mla	r9, r9, r2, r1
 8021846:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802184a:	ea4f 5259 	mov.w	r2, r9, lsr #21
 802184e:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8021852:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021856:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802185a:	ea42 0909 	orr.w	r9, r2, r9
 802185e:	fa1f f289 	uxth.w	r2, r9
 8021862:	e71b      	b.n	802169c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 8021864:	803a      	strh	r2, [r7, #0]
 8021866:	e75d      	b.n	8021724 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8021868:	f115 0e01 	adds.w	lr, r5, #1
 802186c:	f53f af5a 	bmi.w	8021724 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8021870:	4572      	cmp	r2, lr
 8021872:	f6ff af57 	blt.w	8021724 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8021876:	f110 0e01 	adds.w	lr, r0, #1
 802187a:	f53f af53 	bmi.w	8021724 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 802187e:	4573      	cmp	r3, lr
 8021880:	f6ff af50 	blt.w	8021724 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8021884:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021886:	b21b      	sxth	r3, r3
 8021888:	b212      	sxth	r2, r2
 802188a:	9502      	str	r5, [sp, #8]
 802188c:	9301      	str	r3, [sp, #4]
 802188e:	9200      	str	r2, [sp, #0]
 8021890:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8021894:	e9cd c405 	strd	ip, r4, [sp, #20]
 8021898:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 802189c:	4639      	mov	r1, r7
 802189e:	9815      	ldr	r0, [sp, #84]	; 0x54
 80218a0:	f7ff fc02 	bl	80210a8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 80218a4:	e73e      	b.n	8021724 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80218a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80218a8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80218ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80218ae:	f3c3 3503 	ubfx	r5, r3, #12, #4
 80218b2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80218b4:	fa1f fc82 	uxth.w	ip, r2
 80218b8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80218bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80218be:	ea4f 100c 	mov.w	r0, ip, lsl #4
 80218c2:	141f      	asrs	r7, r3, #16
 80218c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80218c6:	141b      	asrs	r3, r3, #16
 80218c8:	fb01 3707 	mla	r7, r1, r7, r3
 80218cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80218ce:	eb03 0a07 	add.w	sl, r3, r7
 80218d2:	f813 9007 	ldrb.w	r9, [r3, r7]
 80218d6:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 80218da:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80218de:	b29b      	uxth	r3, r3
 80218e0:	2d00      	cmp	r5, #0
 80218e2:	f000 813d 	beq.w	8021b60 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>
 80218e6:	f81a 4001 	ldrb.w	r4, [sl, r1]
 80218ea:	eb0a 0b01 	add.w	fp, sl, r1
 80218ee:	fa1f fa85 	uxth.w	sl, r5
 80218f2:	940f      	str	r4, [sp, #60]	; 0x3c
 80218f4:	fb0a fc0c 	mul.w	ip, sl, ip
 80218f8:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80218fc:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8021900:	eba0 000c 	sub.w	r0, r0, ip
 8021904:	9410      	str	r4, [sp, #64]	; 0x40
 8021906:	fa1f fa8a 	uxth.w	sl, sl
 802190a:	b280      	uxth	r0, r0
 802190c:	eba3 030a 	sub.w	r3, r3, sl
 8021910:	fb08 f000 	mul.w	r0, r8, r0
 8021914:	b29b      	uxth	r3, r3
 8021916:	fb09 0303 	mla	r3, r9, r3, r0
 802191a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802191c:	fb0a 3300 	mla	r3, sl, r0, r3
 8021920:	fb0c 3304 	mla	r3, ip, r4, r3
 8021924:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021928:	2b00      	cmp	r3, #0
 802192a:	f000 810b 	beq.w	8021b44 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
 802192e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8021930:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021934:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021936:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 802193a:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 802193e:	f000 8114 	beq.w	8021b6a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
 8021942:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8021946:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 802194a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802194e:	fb0a fc0c 	mul.w	ip, sl, ip
 8021952:	fb09 f707 	mul.w	r7, r9, r7
 8021956:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 802195a:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 802195e:	f107 0b20 	add.w	fp, r7, #32
 8021962:	44cc      	add	ip, r9
 8021964:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8021968:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 802196c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021970:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8021974:	ea4c 0909 	orr.w	r9, ip, r9
 8021978:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802197c:	8847      	ldrh	r7, [r0, #2]
 802197e:	d019      	beq.n	80219b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x600>
 8021980:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8021984:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8021988:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802198c:	fb0a fc0c 	mul.w	ip, sl, ip
 8021990:	fb08 f807 	mul.w	r8, r8, r7
 8021994:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8021998:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 802199c:	f108 0b20 	add.w	fp, r8, #32
 80219a0:	44bc      	add	ip, r7
 80219a2:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 80219a6:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80219aa:	0a3f      	lsrs	r7, r7, #8
 80219ac:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80219b0:	ea4c 0707 	orr.w	r7, ip, r7
 80219b4:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 80219b8:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80219bc:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 80219c0:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 80219c4:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80219c8:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80219cc:	ea4c 0909 	orr.w	r9, ip, r9
 80219d0:	ea4a 0707 	orr.w	r7, sl, r7
 80219d4:	2d00      	cmp	r5, #0
 80219d6:	f000 80ca 	beq.w	8021b6e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ba>
 80219da:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80219de:	3901      	subs	r1, #1
 80219e0:	0049      	lsls	r1, r1, #1
 80219e2:	3102      	adds	r1, #2
 80219e4:	eb00 0c01 	add.w	ip, r0, r1
 80219e8:	5a41      	ldrh	r1, [r0, r1]
 80219ea:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80219ec:	28ff      	cmp	r0, #255	; 0xff
 80219ee:	d019      	beq.n	8021a24 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 80219f0:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 80219f4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80219f6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80219fa:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80219fe:	fb04 fa01 	mul.w	sl, r4, r1
 8021a02:	fb08 f800 	mul.w	r8, r8, r0
 8021a06:	f10a 0020 	add.w	r0, sl, #32
 8021a0a:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8021a0e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8021a12:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8021a16:	4441      	add	r1, r8
 8021a18:	0a00      	lsrs	r0, r0, #8
 8021a1a:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8021a1e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021a22:	4301      	orrs	r1, r0
 8021a24:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021a26:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8021a2a:	2cff      	cmp	r4, #255	; 0xff
 8021a2c:	d01a      	beq.n	8021a64 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b0>
 8021a2e:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8021a32:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021a36:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8021a3a:	fb04 fa00 	mul.w	sl, r4, r0
 8021a3e:	fb08 f80c 	mul.w	r8, r8, ip
 8021a42:	f10a 0c20 	add.w	ip, sl, #32
 8021a46:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8021a4a:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8021a4e:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8021a52:	4440      	add	r0, r8
 8021a54:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021a58:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8021a5c:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8021a60:	ea40 000c 	orr.w	r0, r0, ip
 8021a64:	fb15 fc02 	smulbb	ip, r5, r2
 8021a68:	f1c5 0810 	rsb	r8, r5, #16
 8021a6c:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8021a70:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8021a74:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8021a78:	eba8 0802 	sub.w	r8, r8, r2
 8021a7c:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8021a80:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021a84:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8021a88:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8021a8c:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8021a90:	ea4a 0101 	orr.w	r1, sl, r1
 8021a94:	437a      	muls	r2, r7
 8021a96:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8021a9a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8021a9e:	fb09 2208 	mla	r2, r9, r8, r2
 8021aa2:	ea4b 0000 	orr.w	r0, fp, r0
 8021aa6:	fb05 2201 	mla	r2, r5, r1, r2
 8021aaa:	fb0c 2200 	mla	r2, ip, r0, r2
 8021aae:	0d57      	lsrs	r7, r2, #21
 8021ab0:	0952      	lsrs	r2, r2, #5
 8021ab2:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8021ab6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8021aba:	433a      	orrs	r2, r7
 8021abc:	2bff      	cmp	r3, #255	; 0xff
 8021abe:	b292      	uxth	r2, r2
 8021ac0:	d102      	bne.n	8021ac8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 8021ac2:	9912      	ldr	r1, [sp, #72]	; 0x48
 8021ac4:	29ff      	cmp	r1, #255	; 0xff
 8021ac6:	d063      	beq.n	8021b90 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7dc>
 8021ac8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8021aca:	1215      	asrs	r5, r2, #8
 8021acc:	f8be 1000 	ldrh.w	r1, [lr]
 8021ad0:	4343      	muls	r3, r0
 8021ad2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021ad4:	10cf      	asrs	r7, r1, #3
 8021ad6:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8021ada:	1c58      	adds	r0, r3, #1
 8021adc:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8021ae0:	eb00 2323 	add.w	r3, r0, r3, asr #8
 8021ae4:	1208      	asrs	r0, r1, #8
 8021ae6:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8021aea:	00c9      	lsls	r1, r1, #3
 8021aec:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8021af0:	b2db      	uxtb	r3, r3
 8021af2:	b2c9      	uxtb	r1, r1
 8021af4:	fb10 f003 	smulbb	r0, r0, r3
 8021af8:	fb11 f103 	smulbb	r1, r1, r3
 8021afc:	fb05 0504 	mla	r5, r5, r4, r0
 8021b00:	10d0      	asrs	r0, r2, #3
 8021b02:	fb17 f703 	smulbb	r7, r7, r3
 8021b06:	00d2      	lsls	r2, r2, #3
 8021b08:	b2ad      	uxth	r5, r5
 8021b0a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8021b0e:	b2d2      	uxtb	r2, r2
 8021b10:	fb00 7004 	mla	r0, r0, r4, r7
 8021b14:	1c6b      	adds	r3, r5, #1
 8021b16:	fb02 1204 	mla	r2, r2, r4, r1
 8021b1a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8021b1e:	b292      	uxth	r2, r2
 8021b20:	b280      	uxth	r0, r0
 8021b22:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8021b26:	1c57      	adds	r7, r2, #1
 8021b28:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8021b2c:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8021b30:	433d      	orrs	r5, r7
 8021b32:	1c47      	adds	r7, r0, #1
 8021b34:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8021b38:	097f      	lsrs	r7, r7, #5
 8021b3a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8021b3e:	433d      	orrs	r5, r7
 8021b40:	f8ae 5000 	strh.w	r5, [lr]
 8021b44:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021b46:	f10e 0e02 	add.w	lr, lr, #2
 8021b4a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8021b4c:	4413      	add	r3, r2
 8021b4e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8021b50:	9321      	str	r3, [sp, #132]	; 0x84
 8021b52:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021b54:	441a      	add	r2, r3
 8021b56:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021b58:	3b01      	subs	r3, #1
 8021b5a:	9222      	str	r2, [sp, #136]	; 0x88
 8021b5c:	9313      	str	r3, [sp, #76]	; 0x4c
 8021b5e:	e61c      	b.n	802179a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8021b60:	fb08 f000 	mul.w	r0, r8, r0
 8021b64:	fb09 0303 	mla	r3, r9, r3, r0
 8021b68:	e6dc      	b.n	8021924 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x570>
 8021b6a:	46b9      	mov	r9, r7
 8021b6c:	e704      	b.n	8021978 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
 8021b6e:	f1c2 0110 	rsb	r1, r2, #16
 8021b72:	437a      	muls	r2, r7
 8021b74:	fb09 2901 	mla	r9, r9, r1, r2
 8021b78:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8021b7c:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8021b80:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8021b84:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021b88:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8021b8c:	4302      	orrs	r2, r0
 8021b8e:	e795      	b.n	8021abc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x708>
 8021b90:	f8ae 2000 	strh.w	r2, [lr]
 8021b94:	e7d6      	b.n	8021b44 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
 8021b96:	b017      	add	sp, #92	; 0x5c
 8021b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021b9c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8021b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021ba0:	b085      	sub	sp, #20
 8021ba2:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 8021ba6:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8021baa:	2800      	cmp	r0, #0
 8021bac:	9103      	str	r1, [sp, #12]
 8021bae:	fb00 7406 	mla	r4, r0, r6, r7
 8021bb2:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 8021bb6:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 8021bba:	eb03 0544 	add.w	r5, r3, r4, lsl #1
 8021bbe:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 8021bc2:	eb02 0904 	add.w	r9, r2, r4
 8021bc6:	9501      	str	r5, [sp, #4]
 8021bc8:	f2c0 8141 	blt.w	8021e4e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 8021bcc:	4583      	cmp	fp, r0
 8021bce:	f340 813e 	ble.w	8021e4e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 8021bd2:	2f00      	cmp	r7, #0
 8021bd4:	f2c0 8137 	blt.w	8021e46 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 8021bd8:	42be      	cmp	r6, r7
 8021bda:	f340 8134 	ble.w	8021e46 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 8021bde:	f812 c004 	ldrb.w	ip, [r2, r4]
 8021be2:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8021be6:	f64f 041f 	movw	r4, #63519	; 0xf81f
 8021bea:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8021bee:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 8021bf2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021bf6:	4355      	muls	r5, r2
 8021bf8:	fb0c f203 	mul.w	r2, ip, r3
 8021bfc:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 8021c00:	f605 0501 	addw	r5, r5, #2049	; 0x801
 8021c04:	441d      	add	r5, r3
 8021c06:	f102 0320 	add.w	r3, r2, #32
 8021c0a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021c0e:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 8021c12:	0a1b      	lsrs	r3, r3, #8
 8021c14:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021c18:	431c      	orrs	r4, r3
 8021c1a:	1c7b      	adds	r3, r7, #1
 8021c1c:	f100 811c 	bmi.w	8021e58 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 8021c20:	429e      	cmp	r6, r3
 8021c22:	f340 8119 	ble.w	8021e58 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 8021c26:	2900      	cmp	r1, #0
 8021c28:	f000 8119 	beq.w	8021e5e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
 8021c2c:	9a01      	ldr	r2, [sp, #4]
 8021c2e:	f899 3001 	ldrb.w	r3, [r9, #1]
 8021c32:	8855      	ldrh	r5, [r2, #2]
 8021c34:	ea4f 08e3 	mov.w	r8, r3, asr #3
 8021c38:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 8021c3c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021c40:	fb08 f802 	mul.w	r8, r8, r2
 8021c44:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8021c48:	435d      	muls	r5, r3
 8021c4a:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 8021c4e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8021c52:	44d0      	add	r8, sl
 8021c54:	f105 0a20 	add.w	sl, r5, #32
 8021c58:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8021c5c:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8021c60:	0a2d      	lsrs	r5, r5, #8
 8021c62:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021c66:	432a      	orrs	r2, r5
 8021c68:	3001      	adds	r0, #1
 8021c6a:	f100 80fe 	bmi.w	8021e6a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 8021c6e:	4583      	cmp	fp, r0
 8021c70:	f340 80fb 	ble.w	8021e6a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 8021c74:	f1be 0f00 	cmp.w	lr, #0
 8021c78:	f000 80fc 	beq.w	8021e74 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
 8021c7c:	2f00      	cmp	r7, #0
 8021c7e:	f2c0 80f1 	blt.w	8021e64 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 8021c82:	42be      	cmp	r6, r7
 8021c84:	f340 80ee 	ble.w	8021e64 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 8021c88:	9801      	ldr	r0, [sp, #4]
 8021c8a:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8021c8e:	f819 5006 	ldrb.w	r5, [r9, r6]
 8021c92:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 8021c96:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8021c9a:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 8021c9e:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8021ca2:	fb0a fa00 	mul.w	sl, sl, r0
 8021ca6:	fb05 f808 	mul.w	r8, r5, r8
 8021caa:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 8021cae:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8021cb2:	4482      	add	sl, r0
 8021cb4:	f108 0020 	add.w	r0, r8, #32
 8021cb8:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8021cbc:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 8021cc0:	0a00      	lsrs	r0, r0, #8
 8021cc2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021cc6:	ea4b 0b00 	orr.w	fp, fp, r0
 8021cca:	3701      	adds	r7, #1
 8021ccc:	f100 80d7 	bmi.w	8021e7e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 8021cd0:	42be      	cmp	r6, r7
 8021cd2:	f340 80d4 	ble.w	8021e7e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 8021cd6:	2900      	cmp	r1, #0
 8021cd8:	f000 80d4 	beq.w	8021e84 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
 8021cdc:	3601      	adds	r6, #1
 8021cde:	9801      	ldr	r0, [sp, #4]
 8021ce0:	f819 7006 	ldrb.w	r7, [r9, r6]
 8021ce4:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 8021ce8:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8021cec:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 8021cf0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021cf4:	fb09 f906 	mul.w	r9, r9, r6
 8021cf8:	fb07 f800 	mul.w	r8, r7, r0
 8021cfc:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8021d00:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 8021d04:	f609 0901 	addw	r9, r9, #2049	; 0x801
 8021d08:	44d1      	add	r9, sl
 8021d0a:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 8021d0e:	f108 0020 	add.w	r0, r8, #32
 8021d12:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8021d16:	0a00      	lsrs	r0, r0, #8
 8021d18:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021d1c:	4330      	orrs	r0, r6
 8021d1e:	b28e      	uxth	r6, r1
 8021d20:	fa1f f98e 	uxth.w	r9, lr
 8021d24:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 8021d28:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8021d2c:	fb06 f809 	mul.w	r8, r6, r9
 8021d30:	0136      	lsls	r6, r6, #4
 8021d32:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021d36:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8021d3a:	9601      	str	r6, [sp, #4]
 8021d3c:	ea4a 0404 	orr.w	r4, sl, r4
 8021d40:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8021d44:	fa1f f689 	uxth.w	r6, r9
 8021d48:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8021d4c:	fb11 f90e 	smulbb	r9, r1, lr
 8021d50:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021d54:	9602      	str	r6, [sp, #8]
 8021d56:	4626      	mov	r6, r4
 8021d58:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 8021d5c:	f1ce 0410 	rsb	r4, lr, #16
 8021d60:	ea4a 0202 	orr.w	r2, sl, r2
 8021d64:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8021d68:	1a64      	subs	r4, r4, r1
 8021d6a:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 8021d6e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021d72:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8021d76:	434a      	muls	r2, r1
 8021d78:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8021d7c:	ea4a 0000 	orr.w	r0, sl, r0
 8021d80:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8021d84:	fb04 2406 	mla	r4, r4, r6, r2
 8021d88:	9903      	ldr	r1, [sp, #12]
 8021d8a:	fb09 4200 	mla	r2, r9, r0, r4
 8021d8e:	ea4f 440b 	mov.w	r4, fp, lsl #16
 8021d92:	9801      	ldr	r0, [sp, #4]
 8021d94:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8021d98:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8021d9c:	8809      	ldrh	r1, [r1, #0]
 8021d9e:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8021da2:	ea44 0b0b 	orr.w	fp, r4, fp
 8021da6:	9c02      	ldr	r4, [sp, #8]
 8021da8:	1b00      	subs	r0, r0, r4
 8021daa:	9c01      	ldr	r4, [sp, #4]
 8021dac:	fb0e 2e0b 	mla	lr, lr, fp, r2
 8021db0:	eba4 0608 	sub.w	r6, r4, r8
 8021db4:	b280      	uxth	r0, r0
 8021db6:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8021dba:	b2b6      	uxth	r6, r6
 8021dbc:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8021dc0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021dc4:	4373      	muls	r3, r6
 8021dc6:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8021dca:	fb0c 3300 	mla	r3, ip, r0, r3
 8021dce:	9802      	ldr	r0, [sp, #8]
 8021dd0:	ea42 0e0e 	orr.w	lr, r2, lr
 8021dd4:	fb00 3505 	mla	r5, r0, r5, r3
 8021dd8:	120b      	asrs	r3, r1, #8
 8021dda:	10c8      	asrs	r0, r1, #3
 8021ddc:	fb08 5707 	mla	r7, r8, r7, r5
 8021de0:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8021de4:	00c9      	lsls	r1, r1, #3
 8021de6:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8021dea:	ea6f 2727 	mvn.w	r7, r7, asr #8
 8021dee:	fa1f f28e 	uxth.w	r2, lr
 8021df2:	b2c9      	uxtb	r1, r1
 8021df4:	b2ff      	uxtb	r7, r7
 8021df6:	437b      	muls	r3, r7
 8021df8:	4378      	muls	r0, r7
 8021dfa:	434f      	muls	r7, r1
 8021dfc:	1c59      	adds	r1, r3, #1
 8021dfe:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8021e02:	1213      	asrs	r3, r2, #8
 8021e04:	f023 0307 	bic.w	r3, r3, #7
 8021e08:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8021e0c:	1c41      	adds	r1, r0, #1
 8021e0e:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8021e12:	10d1      	asrs	r1, r2, #3
 8021e14:	021b      	lsls	r3, r3, #8
 8021e16:	f021 0103 	bic.w	r1, r1, #3
 8021e1a:	00d2      	lsls	r2, r2, #3
 8021e1c:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8021e20:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8021e24:	00c9      	lsls	r1, r1, #3
 8021e26:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8021e2a:	430b      	orrs	r3, r1
 8021e2c:	1c79      	adds	r1, r7, #1
 8021e2e:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8021e32:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8021e36:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8021e3a:	431a      	orrs	r2, r3
 8021e3c:	9b03      	ldr	r3, [sp, #12]
 8021e3e:	801a      	strh	r2, [r3, #0]
 8021e40:	b005      	add	sp, #20
 8021e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021e46:	f04f 0c00 	mov.w	ip, #0
 8021e4a:	4664      	mov	r4, ip
 8021e4c:	e6e5      	b.n	8021c1a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
 8021e4e:	2300      	movs	r3, #0
 8021e50:	469c      	mov	ip, r3
 8021e52:	461a      	mov	r2, r3
 8021e54:	461c      	mov	r4, r3
 8021e56:	e707      	b.n	8021c68 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8021e58:	2300      	movs	r3, #0
 8021e5a:	461a      	mov	r2, r3
 8021e5c:	e704      	b.n	8021c68 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8021e5e:	460b      	mov	r3, r1
 8021e60:	460a      	mov	r2, r1
 8021e62:	e701      	b.n	8021c68 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8021e64:	2500      	movs	r5, #0
 8021e66:	46ab      	mov	fp, r5
 8021e68:	e72f      	b.n	8021cca <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
 8021e6a:	2700      	movs	r7, #0
 8021e6c:	463d      	mov	r5, r7
 8021e6e:	4638      	mov	r0, r7
 8021e70:	46bb      	mov	fp, r7
 8021e72:	e754      	b.n	8021d1e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8021e74:	4677      	mov	r7, lr
 8021e76:	4675      	mov	r5, lr
 8021e78:	4670      	mov	r0, lr
 8021e7a:	46f3      	mov	fp, lr
 8021e7c:	e74f      	b.n	8021d1e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8021e7e:	2700      	movs	r7, #0
 8021e80:	4638      	mov	r0, r7
 8021e82:	e74c      	b.n	8021d1e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8021e84:	460f      	mov	r7, r1
 8021e86:	4608      	mov	r0, r1
 8021e88:	e749      	b.n	8021d1e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

08021e8c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021e90:	b093      	sub	sp, #76	; 0x4c
 8021e92:	9210      	str	r2, [sp, #64]	; 0x40
 8021e94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8021e96:	9011      	str	r0, [sp, #68]	; 0x44
 8021e98:	910e      	str	r1, [sp, #56]	; 0x38
 8021e9a:	6850      	ldr	r0, [r2, #4]
 8021e9c:	9306      	str	r3, [sp, #24]
 8021e9e:	6812      	ldr	r2, [r2, #0]
 8021ea0:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8021ea4:	fb00 1303 	mla	r3, r0, r3, r1
 8021ea8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8021eac:	9307      	str	r3, [sp, #28]
 8021eae:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021eb0:	681b      	ldr	r3, [r3, #0]
 8021eb2:	9308      	str	r3, [sp, #32]
 8021eb4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021eb6:	685b      	ldr	r3, [r3, #4]
 8021eb8:	9309      	str	r3, [sp, #36]	; 0x24
 8021eba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021ebc:	2b00      	cmp	r3, #0
 8021ebe:	dc03      	bgt.n	8021ec8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8021ec0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021ec2:	2b00      	cmp	r3, #0
 8021ec4:	f340 83b6 	ble.w	8022634 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 8021ec8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021eca:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021ece:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021ed2:	1e48      	subs	r0, r1, #1
 8021ed4:	1e55      	subs	r5, r2, #1
 8021ed6:	9b06      	ldr	r3, [sp, #24]
 8021ed8:	2b00      	cmp	r3, #0
 8021eda:	f340 8165 	ble.w	80221a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8021ede:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8021ee0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8021ee2:	1436      	asrs	r6, r6, #16
 8021ee4:	ea4f 4323 	mov.w	r3, r3, asr #16
 8021ee8:	d406      	bmi.n	8021ef8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8021eea:	4286      	cmp	r6, r0
 8021eec:	da04      	bge.n	8021ef8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8021eee:	2b00      	cmp	r3, #0
 8021ef0:	db02      	blt.n	8021ef8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8021ef2:	42ab      	cmp	r3, r5
 8021ef4:	f2c0 8159 	blt.w	80221aa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8021ef8:	3601      	adds	r6, #1
 8021efa:	f100 8146 	bmi.w	802218a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8021efe:	42b1      	cmp	r1, r6
 8021f00:	f2c0 8143 	blt.w	802218a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8021f04:	3301      	adds	r3, #1
 8021f06:	f100 8140 	bmi.w	802218a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8021f0a:	429a      	cmp	r2, r3
 8021f0c:	f2c0 813d 	blt.w	802218a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8021f10:	9b06      	ldr	r3, [sp, #24]
 8021f12:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8021f16:	9f07      	ldr	r7, [sp, #28]
 8021f18:	930f      	str	r3, [sp, #60]	; 0x3c
 8021f1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021f1c:	2b00      	cmp	r3, #0
 8021f1e:	f340 8166 	ble.w	80221ee <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8021f22:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8021f24:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8021f26:	1418      	asrs	r0, r3, #16
 8021f28:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8021f2a:	142d      	asrs	r5, r5, #16
 8021f2c:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8021f30:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8021f32:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8021f36:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021f38:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8021f3c:	f100 81f0 	bmi.w	8022320 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8021f40:	f102 3eff 	add.w	lr, r2, #4294967295
 8021f44:	4575      	cmp	r5, lr
 8021f46:	f280 81eb 	bge.w	8022320 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8021f4a:	2800      	cmp	r0, #0
 8021f4c:	f2c0 81e8 	blt.w	8022320 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8021f50:	f103 3eff 	add.w	lr, r3, #4294967295
 8021f54:	4570      	cmp	r0, lr
 8021f56:	f280 81e3 	bge.w	8022320 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8021f5a:	b212      	sxth	r2, r2
 8021f5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021f5e:	fa1f fe81 	uxth.w	lr, r1
 8021f62:	fb00 5002 	mla	r0, r0, r2, r5
 8021f66:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8021f6a:	eb03 0a00 	add.w	sl, r3, r0
 8021f6e:	f813 9000 	ldrb.w	r9, [r3, r0]
 8021f72:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8021f76:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8021f7a:	b29b      	uxth	r3, r3
 8021f7c:	f1bc 0f00 	cmp.w	ip, #0
 8021f80:	f000 817b 	beq.w	802227a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8021f84:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8021f88:	eb0a 0b02 	add.w	fp, sl, r2
 8021f8c:	fa1f fa8c 	uxth.w	sl, ip
 8021f90:	940a      	str	r4, [sp, #40]	; 0x28
 8021f92:	fb0a fe0e 	mul.w	lr, sl, lr
 8021f96:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8021f9a:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8021f9e:	eba5 050e 	sub.w	r5, r5, lr
 8021fa2:	940b      	str	r4, [sp, #44]	; 0x2c
 8021fa4:	fa1f fa8a 	uxth.w	sl, sl
 8021fa8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021faa:	b2ad      	uxth	r5, r5
 8021fac:	eba3 030a 	sub.w	r3, r3, sl
 8021fb0:	fb08 f505 	mul.w	r5, r8, r5
 8021fb4:	b29b      	uxth	r3, r3
 8021fb6:	fb09 5303 	mla	r3, r9, r3, r5
 8021fba:	fb0a 3304 	mla	r3, sl, r4, r3
 8021fbe:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021fc0:	fb0e 3304 	mla	r3, lr, r4, r3
 8021fc4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021fc8:	2b00      	cmp	r3, #0
 8021fca:	f000 80d1 	beq.w	8022170 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8021fce:	9c08      	ldr	r4, [sp, #32]
 8021fd0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021fd4:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8021fd8:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8021fdc:	f000 8152 	beq.w	8022284 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8021fe0:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8021fe4:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8021fe8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021fec:	fb0a fe0e 	mul.w	lr, sl, lr
 8021ff0:	fb09 f000 	mul.w	r0, r9, r0
 8021ff4:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8021ff8:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8021ffc:	f100 0b20 	add.w	fp, r0, #32
 8022000:	44ce      	add	lr, r9
 8022002:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8022006:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 802200a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802200e:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8022012:	ea4e 0909 	orr.w	r9, lr, r9
 8022016:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802201a:	8868      	ldrh	r0, [r5, #2]
 802201c:	d019      	beq.n	8022052 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802201e:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8022022:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8022026:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802202a:	fb0a fe0e 	mul.w	lr, sl, lr
 802202e:	fb08 f800 	mul.w	r8, r8, r0
 8022032:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8022036:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 802203a:	f108 0b20 	add.w	fp, r8, #32
 802203e:	4486      	add	lr, r0
 8022040:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8022044:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8022048:	0a00      	lsrs	r0, r0, #8
 802204a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802204e:	ea4e 0000 	orr.w	r0, lr, r0
 8022052:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8022056:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802205a:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 802205e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8022062:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8022066:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802206a:	ea4e 0909 	orr.w	r9, lr, r9
 802206e:	ea4a 0000 	orr.w	r0, sl, r0
 8022072:	f1bc 0f00 	cmp.w	ip, #0
 8022076:	f000 8107 	beq.w	8022288 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 802207a:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 802207e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022080:	3a01      	subs	r2, #1
 8022082:	2cff      	cmp	r4, #255	; 0xff
 8022084:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8022088:	f102 0202 	add.w	r2, r2, #2
 802208c:	eb05 0e02 	add.w	lr, r5, r2
 8022090:	5aaa      	ldrh	r2, [r5, r2]
 8022092:	d018      	beq.n	80220c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8022094:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8022098:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802209c:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80220a0:	fb04 fa02 	mul.w	sl, r4, r2
 80220a4:	fb08 f805 	mul.w	r8, r8, r5
 80220a8:	f10a 0520 	add.w	r5, sl, #32
 80220ac:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 80220b0:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80220b4:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 80220b8:	4442      	add	r2, r8
 80220ba:	0a2d      	lsrs	r5, r5, #8
 80220bc:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 80220c0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80220c4:	432a      	orrs	r2, r5
 80220c6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80220c8:	f8be 5002 	ldrh.w	r5, [lr, #2]
 80220cc:	2cff      	cmp	r4, #255	; 0xff
 80220ce:	d01a      	beq.n	8022106 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80220d0:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 80220d4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80220d8:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80220dc:	fb04 fa05 	mul.w	sl, r4, r5
 80220e0:	fb08 f80e 	mul.w	r8, r8, lr
 80220e4:	f10a 0e20 	add.w	lr, sl, #32
 80220e8:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 80220ec:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80220f0:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 80220f4:	4445      	add	r5, r8
 80220f6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80220fa:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 80220fe:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8022102:	ea45 050e 	orr.w	r5, r5, lr
 8022106:	fb1c fe01 	smulbb	lr, ip, r1
 802210a:	f1cc 0810 	rsb	r8, ip, #16
 802210e:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8022112:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022116:	ea4f 0eee 	mov.w	lr, lr, asr #3
 802211a:	eba8 0801 	sub.w	r8, r8, r1
 802211e:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8022122:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022126:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 802212a:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 802212e:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8022132:	ea4a 0202 	orr.w	r2, sl, r2
 8022136:	4341      	muls	r1, r0
 8022138:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 802213c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8022140:	fb09 1108 	mla	r1, r9, r8, r1
 8022144:	ea4b 0505 	orr.w	r5, fp, r5
 8022148:	fb0c 1102 	mla	r1, ip, r2, r1
 802214c:	fb0e 1e05 	mla	lr, lr, r5, r1
 8022150:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8022154:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8022158:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802215c:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8022160:	ea42 0e0e 	orr.w	lr, r2, lr
 8022164:	fa1f f28e 	uxth.w	r2, lr
 8022168:	2bff      	cmp	r3, #255	; 0xff
 802216a:	f040 80a1 	bne.w	80222b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 802216e:	803a      	strh	r2, [r7, #0]
 8022170:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8022172:	3702      	adds	r7, #2
 8022174:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8022176:	4413      	add	r3, r2
 8022178:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 802217a:	931d      	str	r3, [sp, #116]	; 0x74
 802217c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802217e:	441a      	add	r2, r3
 8022180:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022182:	3b01      	subs	r3, #1
 8022184:	921e      	str	r2, [sp, #120]	; 0x78
 8022186:	930f      	str	r3, [sp, #60]	; 0x3c
 8022188:	e6c7      	b.n	8021f1a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802218a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802218c:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 802218e:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8022190:	4433      	add	r3, r6
 8022192:	931d      	str	r3, [sp, #116]	; 0x74
 8022194:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022196:	441c      	add	r4, r3
 8022198:	9b06      	ldr	r3, [sp, #24]
 802219a:	3b01      	subs	r3, #1
 802219c:	941e      	str	r4, [sp, #120]	; 0x78
 802219e:	9306      	str	r3, [sp, #24]
 80221a0:	9b07      	ldr	r3, [sp, #28]
 80221a2:	3302      	adds	r3, #2
 80221a4:	9307      	str	r3, [sp, #28]
 80221a6:	e696      	b.n	8021ed6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80221a8:	d028      	beq.n	80221fc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80221aa:	9b06      	ldr	r3, [sp, #24]
 80221ac:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80221ae:	3b01      	subs	r3, #1
 80221b0:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80221b2:	fb00 5003 	mla	r0, r0, r3, r5
 80221b6:	1400      	asrs	r0, r0, #16
 80221b8:	f53f aeaa 	bmi.w	8021f10 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80221bc:	3901      	subs	r1, #1
 80221be:	4288      	cmp	r0, r1
 80221c0:	f6bf aea6 	bge.w	8021f10 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80221c4:	9920      	ldr	r1, [sp, #128]	; 0x80
 80221c6:	981e      	ldr	r0, [sp, #120]	; 0x78
 80221c8:	fb01 0303 	mla	r3, r1, r3, r0
 80221cc:	141b      	asrs	r3, r3, #16
 80221ce:	f53f ae9f 	bmi.w	8021f10 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80221d2:	3a01      	subs	r2, #1
 80221d4:	4293      	cmp	r3, r2
 80221d6:	f6bf ae9b 	bge.w	8021f10 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80221da:	9b06      	ldr	r3, [sp, #24]
 80221dc:	f64f 061f 	movw	r6, #63519	; 0xf81f
 80221e0:	f8dd e01c 	ldr.w	lr, [sp, #28]
 80221e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80221e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80221e8:	2b00      	cmp	r3, #0
 80221ea:	f300 80b6 	bgt.w	802235a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 80221ee:	9b06      	ldr	r3, [sp, #24]
 80221f0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80221f4:	9b07      	ldr	r3, [sp, #28]
 80221f6:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80221fa:	9307      	str	r3, [sp, #28]
 80221fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80221fe:	2b00      	cmp	r3, #0
 8022200:	f340 8218 	ble.w	8022634 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 8022204:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022208:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802220a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802220e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022212:	eef0 6a62 	vmov.f32	s13, s5
 8022216:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802221a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802221e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022222:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 8022226:	eef0 6a43 	vmov.f32	s13, s6
 802222a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802222e:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 8022232:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022236:	ee61 7a27 	vmul.f32	s15, s2, s15
 802223a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802223e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022242:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022246:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802224a:	ee12 2a90 	vmov	r2, s5
 802224e:	eef0 2a47 	vmov.f32	s5, s14
 8022252:	fb92 f3f3 	sdiv	r3, r2, r3
 8022256:	ee13 2a10 	vmov	r2, s6
 802225a:	931f      	str	r3, [sp, #124]	; 0x7c
 802225c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802225e:	eeb0 3a67 	vmov.f32	s6, s15
 8022262:	fb92 f3f3 	sdiv	r3, r2, r3
 8022266:	9320      	str	r3, [sp, #128]	; 0x80
 8022268:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802226a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802226c:	3b01      	subs	r3, #1
 802226e:	930e      	str	r3, [sp, #56]	; 0x38
 8022270:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022272:	bf08      	it	eq
 8022274:	4613      	moveq	r3, r2
 8022276:	9306      	str	r3, [sp, #24]
 8022278:	e61f      	b.n	8021eba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 802227a:	fb08 f505 	mul.w	r5, r8, r5
 802227e:	fb09 5303 	mla	r3, r9, r3, r5
 8022282:	e69f      	b.n	8021fc4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8022284:	4681      	mov	r9, r0
 8022286:	e6c6      	b.n	8022016 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8022288:	f1c1 0210 	rsb	r2, r1, #16
 802228c:	4341      	muls	r1, r0
 802228e:	fb09 1902 	mla	r9, r9, r2, r1
 8022292:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8022296:	ea4f 5259 	mov.w	r2, r9, lsr #21
 802229a:	ea4f 1959 	mov.w	r9, r9, lsr #5
 802229e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80222a2:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80222a6:	ea42 0909 	orr.w	r9, r2, r9
 80222aa:	fa1f f289 	uxth.w	r2, r9
 80222ae:	e75b      	b.n	8022168 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>
 80222b0:	f8b7 c000 	ldrh.w	ip, [r7]
 80222b4:	43db      	mvns	r3, r3
 80222b6:	ea4f 202c 	mov.w	r0, ip, asr #8
 80222ba:	fa5f fe83 	uxtb.w	lr, r3
 80222be:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80222c2:	ea4f 05ec 	mov.w	r5, ip, asr #3
 80222c6:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 80222ca:	fb00 f00e 	mul.w	r0, r0, lr
 80222ce:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80222d2:	b2db      	uxtb	r3, r3
 80222d4:	1c41      	adds	r1, r0, #1
 80222d6:	fb05 f50e 	mul.w	r5, r5, lr
 80222da:	fb03 f30e 	mul.w	r3, r3, lr
 80222de:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 80222e2:	1211      	asrs	r1, r2, #8
 80222e4:	f021 0107 	bic.w	r1, r1, #7
 80222e8:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80222ec:	48d3      	ldr	r0, [pc, #844]	; (802263c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
 80222ee:	b2c9      	uxtb	r1, r1
 80222f0:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 80222f4:	1c69      	adds	r1, r5, #1
 80222f6:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 80222fa:	10d1      	asrs	r1, r2, #3
 80222fc:	00d2      	lsls	r2, r2, #3
 80222fe:	f021 0103 	bic.w	r1, r1, #3
 8022302:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8022306:	00c9      	lsls	r1, r1, #3
 8022308:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802230c:	4301      	orrs	r1, r0
 802230e:	1c58      	adds	r0, r3, #1
 8022310:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8022314:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022318:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802231c:	430a      	orrs	r2, r1
 802231e:	e726      	b.n	802216e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 8022320:	f115 0e01 	adds.w	lr, r5, #1
 8022324:	f53f af24 	bmi.w	8022170 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8022328:	4572      	cmp	r2, lr
 802232a:	f6ff af21 	blt.w	8022170 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 802232e:	f110 0e01 	adds.w	lr, r0, #1
 8022332:	f53f af1d 	bmi.w	8022170 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8022336:	4573      	cmp	r3, lr
 8022338:	f6ff af1a 	blt.w	8022170 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 802233c:	b21b      	sxth	r3, r3
 802233e:	b212      	sxth	r2, r2
 8022340:	9301      	str	r3, [sp, #4]
 8022342:	9200      	str	r2, [sp, #0]
 8022344:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8022348:	e9cd 5002 	strd	r5, r0, [sp, #8]
 802234c:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 8022350:	4639      	mov	r1, r7
 8022352:	9811      	ldr	r0, [sp, #68]	; 0x44
 8022354:	f7ff fc22 	bl	8021b9c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8022358:	e70a      	b.n	8022170 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 802235a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802235c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8022360:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8022362:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8022366:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022368:	fa1f fc82 	uxth.w	ip, r2
 802236c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022370:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8022372:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8022376:	141f      	asrs	r7, r3, #16
 8022378:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802237a:	141b      	asrs	r3, r3, #16
 802237c:	fb01 3707 	mla	r7, r1, r7, r3
 8022380:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022382:	eb03 0a07 	add.w	sl, r3, r7
 8022386:	f813 9007 	ldrb.w	r9, [r3, r7]
 802238a:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 802238e:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8022392:	b29b      	uxth	r3, r3
 8022394:	2d00      	cmp	r5, #0
 8022396:	f000 80fe 	beq.w	8022596 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70a>
 802239a:	f81a 4001 	ldrb.w	r4, [sl, r1]
 802239e:	eb0a 0b01 	add.w	fp, sl, r1
 80223a2:	fa1f fa85 	uxth.w	sl, r5
 80223a6:	940c      	str	r4, [sp, #48]	; 0x30
 80223a8:	fb0a fc0c 	mul.w	ip, sl, ip
 80223ac:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80223b0:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 80223b4:	eba0 000c 	sub.w	r0, r0, ip
 80223b8:	940d      	str	r4, [sp, #52]	; 0x34
 80223ba:	fa1f fa8a 	uxth.w	sl, sl
 80223be:	b280      	uxth	r0, r0
 80223c0:	eba3 030a 	sub.w	r3, r3, sl
 80223c4:	fb08 f000 	mul.w	r0, r8, r0
 80223c8:	b29b      	uxth	r3, r3
 80223ca:	fb09 0303 	mla	r3, r9, r3, r0
 80223ce:	980c      	ldr	r0, [sp, #48]	; 0x30
 80223d0:	fb0a 3300 	mla	r3, sl, r0, r3
 80223d4:	fb0c 3304 	mla	r3, ip, r4, r3
 80223d8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80223dc:	2b00      	cmp	r3, #0
 80223de:	f000 80cc 	beq.w	802257a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 80223e2:	9808      	ldr	r0, [sp, #32]
 80223e4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80223e8:	9c08      	ldr	r4, [sp, #32]
 80223ea:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 80223ee:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 80223f2:	f000 80d5 	beq.w	80225a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 80223f6:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 80223fa:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80223fe:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022402:	fb0a fc0c 	mul.w	ip, sl, ip
 8022406:	fb09 f707 	mul.w	r7, r9, r7
 802240a:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 802240e:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8022412:	f107 0b20 	add.w	fp, r7, #32
 8022416:	44cc      	add	ip, r9
 8022418:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 802241c:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8022420:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022424:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8022428:	ea4c 0909 	orr.w	r9, ip, r9
 802242c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8022430:	8847      	ldrh	r7, [r0, #2]
 8022432:	d019      	beq.n	8022468 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5dc>
 8022434:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8022438:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 802243c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022440:	fb0a fc0c 	mul.w	ip, sl, ip
 8022444:	fb08 f807 	mul.w	r8, r8, r7
 8022448:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 802244c:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8022450:	f108 0b20 	add.w	fp, r8, #32
 8022454:	44bc      	add	ip, r7
 8022456:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 802245a:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 802245e:	0a3f      	lsrs	r7, r7, #8
 8022460:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022464:	ea4c 0707 	orr.w	r7, ip, r7
 8022468:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 802246c:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8022470:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8022474:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8022478:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 802247c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022480:	ea4c 0909 	orr.w	r9, ip, r9
 8022484:	ea4a 0707 	orr.w	r7, sl, r7
 8022488:	2d00      	cmp	r5, #0
 802248a:	f000 808b 	beq.w	80225a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 802248e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8022492:	3901      	subs	r1, #1
 8022494:	0049      	lsls	r1, r1, #1
 8022496:	3102      	adds	r1, #2
 8022498:	eb00 0c01 	add.w	ip, r0, r1
 802249c:	5a41      	ldrh	r1, [r0, r1]
 802249e:	980c      	ldr	r0, [sp, #48]	; 0x30
 80224a0:	28ff      	cmp	r0, #255	; 0xff
 80224a2:	d019      	beq.n	80224d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 80224a4:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 80224a8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80224aa:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80224ae:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80224b2:	fb04 fa01 	mul.w	sl, r4, r1
 80224b6:	fb08 f800 	mul.w	r8, r8, r0
 80224ba:	f10a 0020 	add.w	r0, sl, #32
 80224be:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 80224c2:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80224c6:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 80224ca:	4441      	add	r1, r8
 80224cc:	0a00      	lsrs	r0, r0, #8
 80224ce:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 80224d2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80224d6:	4301      	orrs	r1, r0
 80224d8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80224da:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 80224de:	2cff      	cmp	r4, #255	; 0xff
 80224e0:	d01a      	beq.n	8022518 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68c>
 80224e2:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 80224e6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80224ea:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80224ee:	fb04 fa00 	mul.w	sl, r4, r0
 80224f2:	fb08 f80c 	mul.w	r8, r8, ip
 80224f6:	f10a 0c20 	add.w	ip, sl, #32
 80224fa:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 80224fe:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8022502:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8022506:	4440      	add	r0, r8
 8022508:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802250c:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8022510:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8022514:	ea40 000c 	orr.w	r0, r0, ip
 8022518:	fb15 fc02 	smulbb	ip, r5, r2
 802251c:	f1c5 0810 	rsb	r8, r5, #16
 8022520:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8022524:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8022528:	ea4f 0cec 	mov.w	ip, ip, asr #3
 802252c:	eba8 0802 	sub.w	r8, r8, r2
 8022530:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8022534:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022538:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 802253c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8022540:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8022544:	ea4a 0101 	orr.w	r1, sl, r1
 8022548:	437a      	muls	r2, r7
 802254a:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 802254e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8022552:	fb09 2208 	mla	r2, r9, r8, r2
 8022556:	ea4b 0000 	orr.w	r0, fp, r0
 802255a:	fb05 2201 	mla	r2, r5, r1, r2
 802255e:	fb0c 2200 	mla	r2, ip, r0, r2
 8022562:	0d57      	lsrs	r7, r2, #21
 8022564:	0952      	lsrs	r2, r2, #5
 8022566:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802256a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802256e:	433a      	orrs	r2, r7
 8022570:	2bff      	cmp	r3, #255	; 0xff
 8022572:	b292      	uxth	r2, r2
 8022574:	d127      	bne.n	80225c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73a>
 8022576:	f8ae 2000 	strh.w	r2, [lr]
 802257a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802257c:	f10e 0e02 	add.w	lr, lr, #2
 8022580:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8022582:	4413      	add	r3, r2
 8022584:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8022586:	931d      	str	r3, [sp, #116]	; 0x74
 8022588:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802258a:	441a      	add	r2, r3
 802258c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802258e:	3b01      	subs	r3, #1
 8022590:	921e      	str	r2, [sp, #120]	; 0x78
 8022592:	930f      	str	r3, [sp, #60]	; 0x3c
 8022594:	e627      	b.n	80221e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8022596:	fb08 f000 	mul.w	r0, r8, r0
 802259a:	fb09 0303 	mla	r3, r9, r3, r0
 802259e:	e71b      	b.n	80223d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54c>
 80225a0:	46b9      	mov	r9, r7
 80225a2:	e743      	b.n	802242c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a0>
 80225a4:	f1c2 0110 	rsb	r1, r2, #16
 80225a8:	437a      	muls	r2, r7
 80225aa:	fb09 2901 	mla	r9, r9, r1, r2
 80225ae:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80225b2:	ea4f 5059 	mov.w	r0, r9, lsr #21
 80225b6:	ea4f 1259 	mov.w	r2, r9, lsr #5
 80225ba:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80225be:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80225c2:	4302      	orrs	r2, r0
 80225c4:	e7d4      	b.n	8022570 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e4>
 80225c6:	f8be 7000 	ldrh.w	r7, [lr]
 80225ca:	43db      	mvns	r3, r3
 80225cc:	4c1b      	ldr	r4, [pc, #108]	; (802263c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
 80225ce:	1238      	asrs	r0, r7, #8
 80225d0:	fa5f fc83 	uxtb.w	ip, r3
 80225d4:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80225d8:	10fd      	asrs	r5, r7, #3
 80225da:	00fb      	lsls	r3, r7, #3
 80225dc:	fb00 f00c 	mul.w	r0, r0, ip
 80225e0:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80225e4:	b2db      	uxtb	r3, r3
 80225e6:	fb05 f10c 	mul.w	r1, r5, ip
 80225ea:	1c45      	adds	r5, r0, #1
 80225ec:	fb03 f30c 	mul.w	r3, r3, ip
 80225f0:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80225f4:	1215      	asrs	r5, r2, #8
 80225f6:	f025 0507 	bic.w	r5, r5, #7
 80225fa:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80225fe:	1c4d      	adds	r5, r1, #1
 8022600:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8022604:	10d1      	asrs	r1, r2, #3
 8022606:	b2c0      	uxtb	r0, r0
 8022608:	f021 0103 	bic.w	r1, r1, #3
 802260c:	00d2      	lsls	r2, r2, #3
 802260e:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 8022612:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8022616:	00c9      	lsls	r1, r1, #3
 8022618:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802261c:	4308      	orrs	r0, r1
 802261e:	1c59      	adds	r1, r3, #1
 8022620:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8022624:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022628:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 802262c:	4318      	orrs	r0, r3
 802262e:	f8ae 0000 	strh.w	r0, [lr]
 8022632:	e7a2      	b.n	802257a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 8022634:	b013      	add	sp, #76	; 0x4c
 8022636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802263a:	bf00      	nop
 802263c:	fffff800 	.word	0xfffff800

08022640 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 8022640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022644:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	; 0x24
 8022648:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 802264c:	fb05 4c03 	mla	ip, r5, r3, r4
 8022650:	2d00      	cmp	r5, #0
 8022652:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8022656:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 802265a:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 802265e:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8022662:	8808      	ldrh	r0, [r1, #0]
 8022664:	f2c0 80a7 	blt.w	80227b6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8022668:	45aa      	cmp	sl, r5
 802266a:	f340 80a4 	ble.w	80227b6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 802266e:	2c00      	cmp	r4, #0
 8022670:	f2c0 809f 	blt.w	80227b2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 8022674:	42a3      	cmp	r3, r4
 8022676:	f340 809c 	ble.w	80227b2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 802267a:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
 802267e:	1c62      	adds	r2, r4, #1
 8022680:	f100 809c 	bmi.w	80227bc <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8022684:	4293      	cmp	r3, r2
 8022686:	f340 8099 	ble.w	80227bc <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 802268a:	f1b9 0f00 	cmp.w	r9, #0
 802268e:	f000 8095 	beq.w	80227bc <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8022692:	f8be c002 	ldrh.w	ip, [lr, #2]
 8022696:	3501      	adds	r5, #1
 8022698:	f100 8094 	bmi.w	80227c4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 802269c:	45aa      	cmp	sl, r5
 802269e:	f340 8091 	ble.w	80227c4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 80226a2:	2f00      	cmp	r7, #0
 80226a4:	f000 808e 	beq.w	80227c4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 80226a8:	2c00      	cmp	r4, #0
 80226aa:	f2c0 8089 	blt.w	80227c0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 80226ae:	42a3      	cmp	r3, r4
 80226b0:	f340 8086 	ble.w	80227c0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 80226b4:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
 80226b8:	3401      	adds	r4, #1
 80226ba:	f100 8086 	bmi.w	80227ca <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 80226be:	42a3      	cmp	r3, r4
 80226c0:	f340 8083 	ble.w	80227ca <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 80226c4:	f1b9 0f00 	cmp.w	r9, #0
 80226c8:	d07f      	beq.n	80227ca <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 80226ca:	3301      	adds	r3, #1
 80226cc:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
 80226d0:	ea4f 4408 	mov.w	r4, r8, lsl #16
 80226d4:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 80226d8:	fb19 fe07 	smulbb	lr, r9, r7
 80226dc:	f1c7 0210 	rsb	r2, r7, #16
 80226e0:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 80226e4:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 80226e8:	eba2 0209 	sub.w	r2, r2, r9
 80226ec:	ea44 0808 	orr.w	r8, r4, r8
 80226f0:	ea4f 440c 	mov.w	r4, ip, lsl #16
 80226f4:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80226f8:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 80226fc:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8022700:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 8022704:	ea44 0c0c 	orr.w	ip, r4, ip
 8022708:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 802270c:	fb04 f40c 	mul.w	r4, r4, ip
 8022710:	fb02 4808 	mla	r8, r2, r8, r4
 8022714:	041a      	lsls	r2, r3, #16
 8022716:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802271a:	b2b4      	uxth	r4, r6
 802271c:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8022720:	43f6      	mvns	r6, r6
 8022722:	4313      	orrs	r3, r2
 8022724:	042a      	lsls	r2, r5, #16
 8022726:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 802272a:	b2f6      	uxtb	r6, r6
 802272c:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8022730:	fb0e 8303 	mla	r3, lr, r3, r8
 8022734:	432a      	orrs	r2, r5
 8022736:	fb07 3202 	mla	r2, r7, r2, r3
 802273a:	10c7      	asrs	r7, r0, #3
 802273c:	0d53      	lsrs	r3, r2, #21
 802273e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8022742:	0952      	lsrs	r2, r2, #5
 8022744:	fb17 f706 	smulbb	r7, r7, r6
 8022748:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802274c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022750:	431a      	orrs	r2, r3
 8022752:	b293      	uxth	r3, r2
 8022754:	1202      	asrs	r2, r0, #8
 8022756:	121d      	asrs	r5, r3, #8
 8022758:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 802275c:	00c0      	lsls	r0, r0, #3
 802275e:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8022762:	fb12 f206 	smulbb	r2, r2, r6
 8022766:	b2c0      	uxtb	r0, r0
 8022768:	fb05 2504 	mla	r5, r5, r4, r2
 802276c:	10da      	asrs	r2, r3, #3
 802276e:	fb10 f006 	smulbb	r0, r0, r6
 8022772:	00db      	lsls	r3, r3, #3
 8022774:	b2ad      	uxth	r5, r5
 8022776:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802277a:	b2db      	uxtb	r3, r3
 802277c:	fb02 7204 	mla	r2, r2, r4, r7
 8022780:	fb03 0004 	mla	r0, r3, r4, r0
 8022784:	1c6b      	adds	r3, r5, #1
 8022786:	b292      	uxth	r2, r2
 8022788:	b280      	uxth	r0, r0
 802278a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802278e:	1c43      	adds	r3, r0, #1
 8022790:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8022794:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8022798:	1c50      	adds	r0, r2, #1
 802279a:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 802279e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80227a2:	0952      	lsrs	r2, r2, #5
 80227a4:	432b      	orrs	r3, r5
 80227a6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80227aa:	4313      	orrs	r3, r2
 80227ac:	800b      	strh	r3, [r1, #0]
 80227ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80227b2:	4680      	mov	r8, r0
 80227b4:	e763      	b.n	802267e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
 80227b6:	4684      	mov	ip, r0
 80227b8:	4680      	mov	r8, r0
 80227ba:	e76c      	b.n	8022696 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 80227bc:	4684      	mov	ip, r0
 80227be:	e76a      	b.n	8022696 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 80227c0:	4605      	mov	r5, r0
 80227c2:	e779      	b.n	80226b8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
 80227c4:	4603      	mov	r3, r0
 80227c6:	4605      	mov	r5, r0
 80227c8:	e782      	b.n	80226d0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
 80227ca:	4603      	mov	r3, r0
 80227cc:	e780      	b.n	80226d0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

080227ce <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80227ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80227d2:	b093      	sub	sp, #76	; 0x4c
 80227d4:	461d      	mov	r5, r3
 80227d6:	9210      	str	r2, [sp, #64]	; 0x40
 80227d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80227da:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
 80227de:	910a      	str	r1, [sp, #40]	; 0x28
 80227e0:	920b      	str	r2, [sp, #44]	; 0x2c
 80227e2:	6859      	ldr	r1, [r3, #4]
 80227e4:	681b      	ldr	r3, [r3, #0]
 80227e6:	9011      	str	r0, [sp, #68]	; 0x44
 80227e8:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	; 0x88
 80227ec:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 80227f0:	fb01 2707 	mla	r7, r1, r7, r2
 80227f4:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 80227f8:	9307      	str	r3, [sp, #28]
 80227fa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80227fc:	681b      	ldr	r3, [r3, #0]
 80227fe:	9309      	str	r3, [sp, #36]	; 0x24
 8022800:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022802:	43db      	mvns	r3, r3
 8022804:	b2db      	uxtb	r3, r3
 8022806:	9308      	str	r3, [sp, #32]
 8022808:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802280a:	2b00      	cmp	r3, #0
 802280c:	dc03      	bgt.n	8022816 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802280e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022810:	2b00      	cmp	r3, #0
 8022812:	f340 8205 	ble.w	8022c20 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8022816:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022818:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802281c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022820:	1e48      	subs	r0, r1, #1
 8022822:	f102 3cff 	add.w	ip, r2, #4294967295
 8022826:	2d00      	cmp	r5, #0
 8022828:	f340 80da 	ble.w	80229e0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 802282c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8022830:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022834:	d406      	bmi.n	8022844 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8022836:	4586      	cmp	lr, r0
 8022838:	da04      	bge.n	8022844 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802283a:	2b00      	cmp	r3, #0
 802283c:	db02      	blt.n	8022844 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802283e:	4563      	cmp	r3, ip
 8022840:	f2c0 80cf 	blt.w	80229e2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8022844:	f11e 0e01 	adds.w	lr, lr, #1
 8022848:	f100 80c1 	bmi.w	80229ce <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 802284c:	4571      	cmp	r1, lr
 802284e:	f2c0 80be 	blt.w	80229ce <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8022852:	3301      	adds	r3, #1
 8022854:	f100 80bb 	bmi.w	80229ce <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8022858:	429a      	cmp	r2, r3
 802285a:	f2c0 80b8 	blt.w	80229ce <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 802285e:	46a9      	mov	r9, r5
 8022860:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8022864:	f1b9 0f00 	cmp.w	r9, #0
 8022868:	f340 80d8 	ble.w	8022a1c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 802286c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802286e:	1421      	asrs	r1, r4, #16
 8022870:	ea4f 4026 	mov.w	r0, r6, asr #16
 8022874:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8022878:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802287c:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8022880:	f100 8112 	bmi.w	8022aa8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8022884:	f10e 3aff 	add.w	sl, lr, #4294967295
 8022888:	4551      	cmp	r1, sl
 802288a:	f280 810d 	bge.w	8022aa8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 802288e:	2800      	cmp	r0, #0
 8022890:	f2c0 810a 	blt.w	8022aa8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8022894:	f103 3aff 	add.w	sl, r3, #4294967295
 8022898:	4550      	cmp	r0, sl
 802289a:	f280 8105 	bge.w	8022aa8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 802289e:	fa0f f38e 	sxth.w	r3, lr
 80228a2:	fb00 1103 	mla	r1, r0, r3, r1
 80228a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80228a8:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 80228ac:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 80228b0:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 80228b4:	f1bc 0f00 	cmp.w	ip, #0
 80228b8:	d007      	beq.n	80228ca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 80228ba:	005b      	lsls	r3, r3, #1
 80228bc:	eb0a 0003 	add.w	r0, sl, r3
 80228c0:	f83a 3003 	ldrh.w	r3, [sl, r3]
 80228c4:	930c      	str	r3, [sp, #48]	; 0x30
 80228c6:	8843      	ldrh	r3, [r0, #2]
 80228c8:	930d      	str	r3, [sp, #52]	; 0x34
 80228ca:	ea4f 400e 	mov.w	r0, lr, lsl #16
 80228ce:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80228d2:	fb12 f30c 	smulbb	r3, r2, ip
 80228d6:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80228da:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80228de:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80228e2:	10db      	asrs	r3, r3, #3
 80228e4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80228e8:	ea40 000e 	orr.w	r0, r0, lr
 80228ec:	f1cc 0e10 	rsb	lr, ip, #16
 80228f0:	ea4a 0101 	orr.w	r1, sl, r1
 80228f4:	9f08      	ldr	r7, [sp, #32]
 80228f6:	ebae 0e02 	sub.w	lr, lr, r2
 80228fa:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80228fe:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8022902:	4351      	muls	r1, r2
 8022904:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8022906:	fb0e 1e00 	mla	lr, lr, r0, r1
 802290a:	990c      	ldr	r1, [sp, #48]	; 0x30
 802290c:	0410      	lsls	r0, r2, #16
 802290e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022912:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8022916:	4310      	orrs	r0, r2
 8022918:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802291a:	0412      	lsls	r2, r2, #16
 802291c:	fb03 e000 	mla	r0, r3, r0, lr
 8022920:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8022924:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8022928:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802292c:	ea42 020e 	orr.w	r2, r2, lr
 8022930:	fb03 0302 	mla	r3, r3, r2, r0
 8022934:	f8b8 0000 	ldrh.w	r0, [r8]
 8022938:	0d5a      	lsrs	r2, r3, #21
 802293a:	095b      	lsrs	r3, r3, #5
 802293c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022940:	1201      	asrs	r1, r0, #8
 8022942:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022946:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 802294a:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802294e:	00c0      	lsls	r0, r0, #3
 8022950:	4313      	orrs	r3, r2
 8022952:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8022956:	fb11 f107 	smulbb	r1, r1, r7
 802295a:	b2c0      	uxtb	r0, r0
 802295c:	b29b      	uxth	r3, r3
 802295e:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8022962:	fb10 f007 	smulbb	r0, r0, r7
 8022966:	fb1e fe07 	smulbb	lr, lr, r7
 802296a:	ea4f 2c23 	mov.w	ip, r3, asr #8
 802296e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8022972:	fb0c 1c02 	mla	ip, ip, r2, r1
 8022976:	10d9      	asrs	r1, r3, #3
 8022978:	00db      	lsls	r3, r3, #3
 802297a:	fa1f fc8c 	uxth.w	ip, ip
 802297e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8022982:	b2db      	uxtb	r3, r3
 8022984:	fb01 e102 	mla	r1, r1, r2, lr
 8022988:	fb03 0302 	mla	r3, r3, r2, r0
 802298c:	b289      	uxth	r1, r1
 802298e:	b29a      	uxth	r2, r3
 8022990:	f10c 0301 	add.w	r3, ip, #1
 8022994:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8022998:	1c53      	adds	r3, r2, #1
 802299a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802299e:	1c4a      	adds	r2, r1, #1
 80229a0:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80229a4:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80229a8:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80229ac:	0949      	lsrs	r1, r1, #5
 80229ae:	ea43 030c 	orr.w	r3, r3, ip
 80229b2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80229b6:	430b      	orrs	r3, r1
 80229b8:	f8a8 3000 	strh.w	r3, [r8]
 80229bc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80229be:	f108 0802 	add.w	r8, r8, #2
 80229c2:	f109 39ff 	add.w	r9, r9, #4294967295
 80229c6:	441c      	add	r4, r3
 80229c8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80229ca:	441e      	add	r6, r3
 80229cc:	e74a      	b.n	8022864 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80229ce:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80229d0:	3d01      	subs	r5, #1
 80229d2:	441c      	add	r4, r3
 80229d4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80229d6:	441e      	add	r6, r3
 80229d8:	9b07      	ldr	r3, [sp, #28]
 80229da:	3302      	adds	r3, #2
 80229dc:	9307      	str	r3, [sp, #28]
 80229de:	e722      	b.n	8022826 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80229e0:	d022      	beq.n	8022a28 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 80229e2:	1e6b      	subs	r3, r5, #1
 80229e4:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80229e6:	fb00 4003 	mla	r0, r0, r3, r4
 80229ea:	1400      	asrs	r0, r0, #16
 80229ec:	f53f af37 	bmi.w	802285e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80229f0:	3901      	subs	r1, #1
 80229f2:	4288      	cmp	r0, r1
 80229f4:	f6bf af33 	bge.w	802285e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80229f8:	9920      	ldr	r1, [sp, #128]	; 0x80
 80229fa:	fb01 6303 	mla	r3, r1, r3, r6
 80229fe:	141b      	asrs	r3, r3, #16
 8022a00:	f53f af2d 	bmi.w	802285e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8022a04:	3a01      	subs	r2, #1
 8022a06:	4293      	cmp	r3, r2
 8022a08:	f6bf af29 	bge.w	802285e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8022a0c:	46a8      	mov	r8, r5
 8022a0e:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8022a12:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 8022a16:	f1b8 0f00 	cmp.w	r8, #0
 8022a1a:	dc60      	bgt.n	8022ade <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 8022a1c:	9b07      	ldr	r3, [sp, #28]
 8022a1e:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8022a22:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8022a26:	9307      	str	r3, [sp, #28]
 8022a28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022a2a:	2b00      	cmp	r3, #0
 8022a2c:	f340 80f8 	ble.w	8022c20 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8022a30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022a34:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022a36:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022a3a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022a3e:	eef0 6a62 	vmov.f32	s13, s5
 8022a42:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022a46:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022a4a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022a4e:	ee16 4a90 	vmov	r4, s13
 8022a52:	eef0 6a43 	vmov.f32	s13, s6
 8022a56:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022a5a:	ee16 6a90 	vmov	r6, s13
 8022a5e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022a62:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022a66:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022a6a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022a6e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022a72:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022a76:	ee12 2a90 	vmov	r2, s5
 8022a7a:	eef0 2a47 	vmov.f32	s5, s14
 8022a7e:	fb92 f3f3 	sdiv	r3, r2, r3
 8022a82:	ee13 2a10 	vmov	r2, s6
 8022a86:	931f      	str	r3, [sp, #124]	; 0x7c
 8022a88:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022a8a:	eeb0 3a67 	vmov.f32	s6, s15
 8022a8e:	fb92 f3f3 	sdiv	r3, r2, r3
 8022a92:	9320      	str	r3, [sp, #128]	; 0x80
 8022a94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022a96:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022a98:	3b01      	subs	r3, #1
 8022a9a:	930a      	str	r3, [sp, #40]	; 0x28
 8022a9c:	bf08      	it	eq
 8022a9e:	4615      	moveq	r5, r2
 8022aa0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022aa2:	bf18      	it	ne
 8022aa4:	461d      	movne	r5, r3
 8022aa6:	e6af      	b.n	8022808 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8022aa8:	f111 0a01 	adds.w	sl, r1, #1
 8022aac:	d486      	bmi.n	80229bc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8022aae:	45d6      	cmp	lr, sl
 8022ab0:	db84      	blt.n	80229bc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8022ab2:	f110 0a01 	adds.w	sl, r0, #1
 8022ab6:	d481      	bmi.n	80229bc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8022ab8:	4553      	cmp	r3, sl
 8022aba:	f6ff af7f 	blt.w	80229bc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8022abe:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8022ac0:	b21b      	sxth	r3, r3
 8022ac2:	9101      	str	r1, [sp, #4]
 8022ac4:	4641      	mov	r1, r8
 8022ac6:	9300      	str	r3, [sp, #0]
 8022ac8:	fa0f f38e 	sxth.w	r3, lr
 8022acc:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8022ad0:	e9cd c704 	strd	ip, r7, [sp, #16]
 8022ad4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022ad6:	9811      	ldr	r0, [sp, #68]	; 0x44
 8022ad8:	f7ff fdb2 	bl	8022640 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 8022adc:	e76e      	b.n	80229bc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8022ade:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022ae0:	1430      	asrs	r0, r6, #16
 8022ae2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8022ae4:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8022ae8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022aec:	1423      	asrs	r3, r4, #16
 8022aee:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8022af2:	fb01 3000 	mla	r0, r1, r0, r3
 8022af6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022af8:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8022afc:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 8022b00:	8858      	ldrh	r0, [r3, #2]
 8022b02:	f1be 0f00 	cmp.w	lr, #0
 8022b06:	d00b      	beq.n	8022b20 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8022b08:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8022b0c:	3901      	subs	r1, #1
 8022b0e:	0049      	lsls	r1, r1, #1
 8022b10:	3102      	adds	r1, #2
 8022b12:	eb03 0b01 	add.w	fp, r3, r1
 8022b16:	5a5b      	ldrh	r3, [r3, r1]
 8022b18:	930e      	str	r3, [sp, #56]	; 0x38
 8022b1a:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8022b1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8022b20:	ea4f 410c 	mov.w	r1, ip, lsl #16
 8022b24:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8022b28:	fb12 f30e 	smulbb	r3, r2, lr
 8022b2c:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8022b30:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 8022b34:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8022b38:	10db      	asrs	r3, r3, #3
 8022b3a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8022b3e:	ea41 010c 	orr.w	r1, r1, ip
 8022b42:	f1ce 0c10 	rsb	ip, lr, #16
 8022b46:	ea4b 0000 	orr.w	r0, fp, r0
 8022b4a:	9f08      	ldr	r7, [sp, #32]
 8022b4c:	ebac 0c02 	sub.w	ip, ip, r2
 8022b50:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8022b54:	f108 38ff 	add.w	r8, r8, #4294967295
 8022b58:	4350      	muls	r0, r2
 8022b5a:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8022b5e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022b60:	fb0c 0c01 	mla	ip, ip, r1, r0
 8022b64:	980e      	ldr	r0, [sp, #56]	; 0x38
 8022b66:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8022b6a:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 8022b6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022b70:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8022b74:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8022b78:	0412      	lsls	r2, r2, #16
 8022b7a:	ea4b 0101 	orr.w	r1, fp, r1
 8022b7e:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8022b82:	fb03 c101 	mla	r1, r3, r1, ip
 8022b86:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8022b8a:	4302      	orrs	r2, r0
 8022b8c:	fb03 1202 	mla	r2, r3, r2, r1
 8022b90:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 8022b94:	0952      	lsrs	r2, r2, #5
 8022b96:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8022b9a:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 8022b9e:	f8b9 2000 	ldrh.w	r2, [r9]
 8022ba2:	ea4b 0303 	orr.w	r3, fp, r3
 8022ba6:	1211      	asrs	r1, r2, #8
 8022ba8:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 8022bac:	b29b      	uxth	r3, r3
 8022bae:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8022bb2:	00d2      	lsls	r2, r2, #3
 8022bb4:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8022bb8:	fb11 f107 	smulbb	r1, r1, r7
 8022bbc:	1218      	asrs	r0, r3, #8
 8022bbe:	fb1c fc07 	smulbb	ip, ip, r7
 8022bc2:	b2d2      	uxtb	r2, r2
 8022bc4:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8022bc8:	fb12 f207 	smulbb	r2, r2, r7
 8022bcc:	fb00 100a 	mla	r0, r0, sl, r1
 8022bd0:	10d9      	asrs	r1, r3, #3
 8022bd2:	00db      	lsls	r3, r3, #3
 8022bd4:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8022bd8:	b280      	uxth	r0, r0
 8022bda:	b2db      	uxtb	r3, r3
 8022bdc:	fb01 c10a 	mla	r1, r1, sl, ip
 8022be0:	fb03 230a 	mla	r3, r3, sl, r2
 8022be4:	1c42      	adds	r2, r0, #1
 8022be6:	b289      	uxth	r1, r1
 8022be8:	b29b      	uxth	r3, r3
 8022bea:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8022bee:	f101 0c01 	add.w	ip, r1, #1
 8022bf2:	1c5a      	adds	r2, r3, #1
 8022bf4:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8022bf8:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8022bfc:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022c00:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8022c02:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8022c06:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8022c0a:	441c      	add	r4, r3
 8022c0c:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8022c10:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022c12:	4310      	orrs	r0, r2
 8022c14:	441e      	add	r6, r3
 8022c16:	ea40 000c 	orr.w	r0, r0, ip
 8022c1a:	f829 0b02 	strh.w	r0, [r9], #2
 8022c1e:	e6fa      	b.n	8022a16 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8022c20:	b013      	add	sp, #76	; 0x4c
 8022c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022c26 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 8022c26:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022c2a:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
 8022c2e:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
 8022c32:	fb0e 4703 	mla	r7, lr, r3, r4
 8022c36:	f1be 0f00 	cmp.w	lr, #0
 8022c3a:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 8022c3e:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 8022c42:	eb02 0847 	add.w	r8, r2, r7, lsl #1
 8022c46:	8808      	ldrh	r0, [r1, #0]
 8022c48:	db60      	blt.n	8022d0c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 8022c4a:	45f1      	cmp	r9, lr
 8022c4c:	dd5e      	ble.n	8022d0c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 8022c4e:	2c00      	cmp	r4, #0
 8022c50:	db5a      	blt.n	8022d08 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 8022c52:	42a3      	cmp	r3, r4
 8022c54:	dd58      	ble.n	8022d08 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 8022c56:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
 8022c5a:	1c62      	adds	r2, r4, #1
 8022c5c:	d459      	bmi.n	8022d12 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8022c5e:	4293      	cmp	r3, r2
 8022c60:	dd57      	ble.n	8022d12 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8022c62:	2d00      	cmp	r5, #0
 8022c64:	d055      	beq.n	8022d12 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8022c66:	f8b8 7002 	ldrh.w	r7, [r8, #2]
 8022c6a:	f11e 0e01 	adds.w	lr, lr, #1
 8022c6e:	d454      	bmi.n	8022d1a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8022c70:	45f1      	cmp	r9, lr
 8022c72:	dd52      	ble.n	8022d1a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8022c74:	2e00      	cmp	r6, #0
 8022c76:	d050      	beq.n	8022d1a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8022c78:	2c00      	cmp	r4, #0
 8022c7a:	db4c      	blt.n	8022d16 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 8022c7c:	42a3      	cmp	r3, r4
 8022c7e:	dd4a      	ble.n	8022d16 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 8022c80:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 8022c84:	3401      	adds	r4, #1
 8022c86:	d405      	bmi.n	8022c94 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8022c88:	42a3      	cmp	r3, r4
 8022c8a:	dd03      	ble.n	8022c94 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8022c8c:	b115      	cbz	r5, 8022c94 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8022c8e:	3301      	adds	r3, #1
 8022c90:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
 8022c94:	fb15 f406 	smulbb	r4, r5, r6
 8022c98:	ea4f 430c 	mov.w	r3, ip, lsl #16
 8022c9c:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 8022ca0:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8022ca4:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8022ca8:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 8022cac:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8022cb0:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8022cb4:	ea43 0c0c 	orr.w	ip, r3, ip
 8022cb8:	f1c6 0310 	rsb	r3, r6, #16
 8022cbc:	ea4e 0707 	orr.w	r7, lr, r7
 8022cc0:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 8022cc4:	1b5b      	subs	r3, r3, r5
 8022cc6:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 8022cca:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8022cce:	437d      	muls	r5, r7
 8022cd0:	fb03 5c0c 	mla	ip, r3, ip, r5
 8022cd4:	0403      	lsls	r3, r0, #16
 8022cd6:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8022cda:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8022cde:	4318      	orrs	r0, r3
 8022ce0:	0413      	lsls	r3, r2, #16
 8022ce2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022ce6:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8022cea:	fb04 c000 	mla	r0, r4, r0, ip
 8022cee:	4313      	orrs	r3, r2
 8022cf0:	fb06 0003 	mla	r0, r6, r3, r0
 8022cf4:	0d43      	lsrs	r3, r0, #21
 8022cf6:	0940      	lsrs	r0, r0, #5
 8022cf8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022cfc:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8022d00:	4318      	orrs	r0, r3
 8022d02:	8008      	strh	r0, [r1, #0]
 8022d04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022d08:	4684      	mov	ip, r0
 8022d0a:	e7a6      	b.n	8022c5a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
 8022d0c:	4607      	mov	r7, r0
 8022d0e:	4684      	mov	ip, r0
 8022d10:	e7ab      	b.n	8022c6a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 8022d12:	4607      	mov	r7, r0
 8022d14:	e7a9      	b.n	8022c6a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 8022d16:	4602      	mov	r2, r0
 8022d18:	e7b4      	b.n	8022c84 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
 8022d1a:	4602      	mov	r2, r0
 8022d1c:	e7ba      	b.n	8022c94 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

08022d1e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022d1e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022d22:	b08f      	sub	sp, #60	; 0x3c
 8022d24:	461d      	mov	r5, r3
 8022d26:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8022d28:	9107      	str	r1, [sp, #28]
 8022d2a:	920c      	str	r2, [sp, #48]	; 0x30
 8022d2c:	6859      	ldr	r1, [r3, #4]
 8022d2e:	681b      	ldr	r3, [r3, #0]
 8022d30:	900d      	str	r0, [sp, #52]	; 0x34
 8022d32:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	; 0x78
 8022d36:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	; 0x64
 8022d3a:	fb01 2707 	mla	r7, r1, r7, r2
 8022d3e:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 8022d42:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022d44:	f8d3 8000 	ldr.w	r8, [r3]
 8022d48:	9b07      	ldr	r3, [sp, #28]
 8022d4a:	2b00      	cmp	r3, #0
 8022d4c:	dc03      	bgt.n	8022d56 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8022d4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022d50:	2b00      	cmp	r3, #0
 8022d52:	f340 8182 	ble.w	802305a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
 8022d56:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022d58:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022d5c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022d60:	1e48      	subs	r0, r1, #1
 8022d62:	f102 3cff 	add.w	ip, r2, #4294967295
 8022d66:	2d00      	cmp	r5, #0
 8022d68:	f340 809b 	ble.w	8022ea2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 8022d6c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8022d70:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022d74:	d406      	bmi.n	8022d84 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8022d76:	4586      	cmp	lr, r0
 8022d78:	da04      	bge.n	8022d84 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8022d7a:	2b00      	cmp	r3, #0
 8022d7c:	db02      	blt.n	8022d84 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8022d7e:	4563      	cmp	r3, ip
 8022d80:	f2c0 8090 	blt.w	8022ea4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8022d84:	f11e 0e01 	adds.w	lr, lr, #1
 8022d88:	f100 8084 	bmi.w	8022e94 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8022d8c:	4571      	cmp	r1, lr
 8022d8e:	f2c0 8081 	blt.w	8022e94 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8022d92:	3301      	adds	r3, #1
 8022d94:	d47e      	bmi.n	8022e94 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8022d96:	429a      	cmp	r2, r3
 8022d98:	db7c      	blt.n	8022e94 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8022d9a:	46aa      	mov	sl, r5
 8022d9c:	46b9      	mov	r9, r7
 8022d9e:	f1ba 0f00 	cmp.w	sl, #0
 8022da2:	f340 8099 	ble.w	8022ed8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8022da6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022da8:	1421      	asrs	r1, r4, #16
 8022daa:	ea4f 4026 	mov.w	r0, r6, asr #16
 8022dae:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8022db2:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8022db6:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8022dba:	f100 80d1 	bmi.w	8022f60 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8022dbe:	f10e 3bff 	add.w	fp, lr, #4294967295
 8022dc2:	4559      	cmp	r1, fp
 8022dc4:	f280 80cc 	bge.w	8022f60 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8022dc8:	2800      	cmp	r0, #0
 8022dca:	f2c0 80c9 	blt.w	8022f60 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8022dce:	f103 3bff 	add.w	fp, r3, #4294967295
 8022dd2:	4558      	cmp	r0, fp
 8022dd4:	f280 80c4 	bge.w	8022f60 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8022dd8:	fa0f fe8e 	sxth.w	lr, lr
 8022ddc:	fb00 110e 	mla	r1, r0, lr, r1
 8022de0:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8022de4:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 8022de8:	8841      	ldrh	r1, [r0, #2]
 8022dea:	f1bc 0f00 	cmp.w	ip, #0
 8022dee:	d00b      	beq.n	8022e08 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 8022df0:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 8022df4:	3b01      	subs	r3, #1
 8022df6:	005b      	lsls	r3, r3, #1
 8022df8:	3302      	adds	r3, #2
 8022dfa:	eb00 0e03 	add.w	lr, r0, r3
 8022dfe:	5ac3      	ldrh	r3, [r0, r3]
 8022e00:	9308      	str	r3, [sp, #32]
 8022e02:	f8be 3002 	ldrh.w	r3, [lr, #2]
 8022e06:	9309      	str	r3, [sp, #36]	; 0x24
 8022e08:	ea4f 400b 	mov.w	r0, fp, lsl #16
 8022e0c:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8022e10:	fb12 f30c 	smulbb	r3, r2, ip
 8022e14:	f1cc 0e10 	rsb	lr, ip, #16
 8022e18:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8022e1c:	10db      	asrs	r3, r3, #3
 8022e1e:	ebae 0e02 	sub.w	lr, lr, r2
 8022e22:	ea40 000b 	orr.w	r0, r0, fp
 8022e26:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8022e2a:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8022e2e:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8022e32:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8022e36:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8022e3a:	ea4b 0101 	orr.w	r1, fp, r1
 8022e3e:	4351      	muls	r1, r2
 8022e40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022e42:	fb0e 1e00 	mla	lr, lr, r0, r1
 8022e46:	0410      	lsls	r0, r2, #16
 8022e48:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022e4c:	9908      	ldr	r1, [sp, #32]
 8022e4e:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8022e52:	4310      	orrs	r0, r2
 8022e54:	9a08      	ldr	r2, [sp, #32]
 8022e56:	0412      	lsls	r2, r2, #16
 8022e58:	fb03 e000 	mla	r0, r3, r0, lr
 8022e5c:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8022e60:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8022e64:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8022e68:	ea42 020e 	orr.w	r2, r2, lr
 8022e6c:	fb03 0302 	mla	r3, r3, r2, r0
 8022e70:	0d5a      	lsrs	r2, r3, #21
 8022e72:	095b      	lsrs	r3, r3, #5
 8022e74:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022e78:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022e7c:	4313      	orrs	r3, r2
 8022e7e:	f8a9 3000 	strh.w	r3, [r9]
 8022e82:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8022e84:	f109 0902 	add.w	r9, r9, #2
 8022e88:	f10a 3aff 	add.w	sl, sl, #4294967295
 8022e8c:	441c      	add	r4, r3
 8022e8e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022e90:	441e      	add	r6, r3
 8022e92:	e784      	b.n	8022d9e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8022e94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8022e96:	3d01      	subs	r5, #1
 8022e98:	3702      	adds	r7, #2
 8022e9a:	441c      	add	r4, r3
 8022e9c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022e9e:	441e      	add	r6, r3
 8022ea0:	e761      	b.n	8022d66 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8022ea2:	d01d      	beq.n	8022ee0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8022ea4:	1e6b      	subs	r3, r5, #1
 8022ea6:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8022ea8:	fb00 4003 	mla	r0, r0, r3, r4
 8022eac:	1400      	asrs	r0, r0, #16
 8022eae:	f53f af74 	bmi.w	8022d9a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8022eb2:	3901      	subs	r1, #1
 8022eb4:	4288      	cmp	r0, r1
 8022eb6:	f6bf af70 	bge.w	8022d9a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8022eba:	991c      	ldr	r1, [sp, #112]	; 0x70
 8022ebc:	fb01 6303 	mla	r3, r1, r3, r6
 8022ec0:	141b      	asrs	r3, r3, #16
 8022ec2:	f53f af6a 	bmi.w	8022d9a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8022ec6:	3a01      	subs	r2, #1
 8022ec8:	4293      	cmp	r3, r2
 8022eca:	f6bf af66 	bge.w	8022d9a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8022ece:	46a9      	mov	r9, r5
 8022ed0:	46ba      	mov	sl, r7
 8022ed2:	f1b9 0f00 	cmp.w	r9, #0
 8022ed6:	dc5b      	bgt.n	8022f90 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8022ed8:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8022edc:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 8022ee0:	9b07      	ldr	r3, [sp, #28]
 8022ee2:	2b00      	cmp	r3, #0
 8022ee4:	f340 80b9 	ble.w	802305a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
 8022ee8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022eec:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8022eee:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022ef2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022ef6:	eef0 6a62 	vmov.f32	s13, s5
 8022efa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022efe:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022f02:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022f06:	ee16 4a90 	vmov	r4, s13
 8022f0a:	eef0 6a43 	vmov.f32	s13, s6
 8022f0e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022f12:	ee16 6a90 	vmov	r6, s13
 8022f16:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022f1a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022f1e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022f22:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022f26:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022f2a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022f2e:	ee12 2a90 	vmov	r2, s5
 8022f32:	eef0 2a47 	vmov.f32	s5, s14
 8022f36:	fb92 f3f3 	sdiv	r3, r2, r3
 8022f3a:	ee13 2a10 	vmov	r2, s6
 8022f3e:	931b      	str	r3, [sp, #108]	; 0x6c
 8022f40:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8022f42:	eeb0 3a67 	vmov.f32	s6, s15
 8022f46:	fb92 f3f3 	sdiv	r3, r2, r3
 8022f4a:	931c      	str	r3, [sp, #112]	; 0x70
 8022f4c:	9b07      	ldr	r3, [sp, #28]
 8022f4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022f50:	3b01      	subs	r3, #1
 8022f52:	9307      	str	r3, [sp, #28]
 8022f54:	bf08      	it	eq
 8022f56:	4615      	moveq	r5, r2
 8022f58:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8022f5a:	bf18      	it	ne
 8022f5c:	461d      	movne	r5, r3
 8022f5e:	e6f3      	b.n	8022d48 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8022f60:	f111 0b01 	adds.w	fp, r1, #1
 8022f64:	d48d      	bmi.n	8022e82 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8022f66:	45de      	cmp	lr, fp
 8022f68:	db8b      	blt.n	8022e82 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8022f6a:	f110 0b01 	adds.w	fp, r0, #1
 8022f6e:	d488      	bmi.n	8022e82 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8022f70:	455b      	cmp	r3, fp
 8022f72:	db86      	blt.n	8022e82 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8022f74:	b21b      	sxth	r3, r3
 8022f76:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8022f7a:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 8022f7e:	9300      	str	r3, [sp, #0]
 8022f80:	4642      	mov	r2, r8
 8022f82:	fa0f f38e 	sxth.w	r3, lr
 8022f86:	4649      	mov	r1, r9
 8022f88:	980d      	ldr	r0, [sp, #52]	; 0x34
 8022f8a:	f7ff fe4c 	bl	8022c26 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 8022f8e:	e778      	b.n	8022e82 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8022f90:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022f92:	1420      	asrs	r0, r4, #16
 8022f94:	1431      	asrs	r1, r6, #16
 8022f96:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8022f9a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8022f9e:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8022fa2:	fb03 0101 	mla	r1, r3, r1, r0
 8022fa6:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8022faa:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 8022fae:	8841      	ldrh	r1, [r0, #2]
 8022fb0:	f1be 0f00 	cmp.w	lr, #0
 8022fb4:	d00b      	beq.n	8022fce <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8022fb6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8022fba:	3b01      	subs	r3, #1
 8022fbc:	005b      	lsls	r3, r3, #1
 8022fbe:	3302      	adds	r3, #2
 8022fc0:	eb00 0b03 	add.w	fp, r0, r3
 8022fc4:	5ac3      	ldrh	r3, [r0, r3]
 8022fc6:	930a      	str	r3, [sp, #40]	; 0x28
 8022fc8:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8022fcc:	930b      	str	r3, [sp, #44]	; 0x2c
 8022fce:	ea4f 400c 	mov.w	r0, ip, lsl #16
 8022fd2:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8022fd6:	fb12 f30e 	smulbb	r3, r2, lr
 8022fda:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8022fde:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8022fe2:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8022fe6:	10db      	asrs	r3, r3, #3
 8022fe8:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8022fec:	ea40 000c 	orr.w	r0, r0, ip
 8022ff0:	f1ce 0c10 	rsb	ip, lr, #16
 8022ff4:	ea4b 0101 	orr.w	r1, fp, r1
 8022ff8:	f109 39ff 	add.w	r9, r9, #4294967295
 8022ffc:	ebac 0c02 	sub.w	ip, ip, r2
 8023000:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8023004:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8023008:	4351      	muls	r1, r2
 802300a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802300c:	fb0c 1c00 	mla	ip, ip, r0, r1
 8023010:	990a      	ldr	r1, [sp, #40]	; 0x28
 8023012:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8023016:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 802301a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802301c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8023020:	0412      	lsls	r2, r2, #16
 8023022:	ea4b 0000 	orr.w	r0, fp, r0
 8023026:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 802302a:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802302e:	fb03 c000 	mla	r0, r3, r0, ip
 8023032:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8023036:	ea42 0b0b 	orr.w	fp, r2, fp
 802303a:	fb03 000b 	mla	r0, r3, fp, r0
 802303e:	0d43      	lsrs	r3, r0, #21
 8023040:	0940      	lsrs	r0, r0, #5
 8023042:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023046:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802304a:	4318      	orrs	r0, r3
 802304c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802304e:	441c      	add	r4, r3
 8023050:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023052:	f82a 0b02 	strh.w	r0, [sl], #2
 8023056:	441e      	add	r6, r3
 8023058:	e73b      	b.n	8022ed2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 802305a:	b00f      	add	sp, #60	; 0x3c
 802305c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023060 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 8023060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023064:	b085      	sub	sp, #20
 8023066:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 802306a:	9102      	str	r1, [sp, #8]
 802306c:	2c00      	cmp	r4, #0
 802306e:	fb04 7103 	mla	r1, r4, r3, r7
 8023072:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8023076:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 802307a:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 802307e:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8023082:	f2c0 811b 	blt.w	80232bc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 8023086:	45a6      	cmp	lr, r4
 8023088:	f340 8118 	ble.w	80232bc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 802308c:	2f00      	cmp	r7, #0
 802308e:	f2c0 8113 	blt.w	80232b8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 8023092:	42bb      	cmp	r3, r7
 8023094:	f340 8110 	ble.w	80232b8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 8023098:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 802309c:	1c7a      	adds	r2, r7, #1
 802309e:	f100 8110 	bmi.w	80232c2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 80230a2:	4293      	cmp	r3, r2
 80230a4:	f340 810d 	ble.w	80232c2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 80230a8:	2e00      	cmp	r6, #0
 80230aa:	f000 810c 	beq.w	80232c6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
 80230ae:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80230b2:	3401      	adds	r4, #1
 80230b4:	f100 810b 	bmi.w	80232ce <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 80230b8:	45a6      	cmp	lr, r4
 80230ba:	f340 8108 	ble.w	80232ce <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 80230be:	2800      	cmp	r0, #0
 80230c0:	f000 8108 	beq.w	80232d4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
 80230c4:	2f00      	cmp	r7, #0
 80230c6:	f2c0 8100 	blt.w	80232ca <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 80230ca:	42bb      	cmp	r3, r7
 80230cc:	f340 80fd 	ble.w	80232ca <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 80230d0:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 80230d4:	3701      	adds	r7, #1
 80230d6:	f100 8100 	bmi.w	80232da <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 80230da:	42bb      	cmp	r3, r7
 80230dc:	f340 80fd 	ble.w	80232da <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 80230e0:	2e00      	cmp	r6, #0
 80230e2:	f000 80fc 	beq.w	80232de <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
 80230e6:	3301      	adds	r3, #1
 80230e8:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80230ec:	b2b6      	uxth	r6, r6
 80230ee:	b280      	uxth	r0, r0
 80230f0:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 80230f4:	fb00 fe06 	mul.w	lr, r0, r6
 80230f8:	0136      	lsls	r6, r6, #4
 80230fa:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 80230fe:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8023102:	eba6 070e 	sub.w	r7, r6, lr
 8023106:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 802310a:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802310e:	b280      	uxth	r0, r0
 8023110:	b2bf      	uxth	r7, r7
 8023112:	1a1b      	subs	r3, r3, r0
 8023114:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8023118:	fb0a f607 	mul.w	r6, sl, r7
 802311c:	b29b      	uxth	r3, r3
 802311e:	fb0b 6603 	mla	r6, fp, r3, r6
 8023122:	fb00 6609 	mla	r6, r0, r9, r6
 8023126:	fb0e 6608 	mla	r6, lr, r8, r6
 802312a:	f3c6 2607 	ubfx	r6, r6, #8, #8
 802312e:	9600      	str	r6, [sp, #0]
 8023130:	2e00      	cmp	r6, #0
 8023132:	f000 80be 	beq.w	80232b2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
 8023136:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802313a:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 802313e:	9e02      	ldr	r6, [sp, #8]
 8023140:	fb0b fc0c 	mul.w	ip, fp, ip
 8023144:	fb0b f505 	mul.w	r5, fp, r5
 8023148:	8836      	ldrh	r6, [r6, #0]
 802314a:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 802314e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023152:	9501      	str	r5, [sp, #4]
 8023154:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8023158:	44dc      	add	ip, fp
 802315a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802315e:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8023162:	9503      	str	r5, [sp, #12]
 8023164:	9d01      	ldr	r5, [sp, #4]
 8023166:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 802316a:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 802316e:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 8023172:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8023176:	fb0a fc0c 	mul.w	ip, sl, ip
 802317a:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 802317e:	fb0a fa01 	mul.w	sl, sl, r1
 8023182:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8023186:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802318a:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 802318e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8023192:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8023196:	4465      	add	r5, ip
 8023198:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802319c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80231a0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80231a4:	fb09 fc0c 	mul.w	ip, r9, ip
 80231a8:	0a2d      	lsrs	r5, r5, #8
 80231aa:	fb09 f904 	mul.w	r9, r9, r4
 80231ae:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80231b2:	ea4f 211c 	mov.w	r1, ip, lsr #8
 80231b6:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80231ba:	f509 7480 	add.w	r4, r9, #256	; 0x100
 80231be:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80231c2:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80231c6:	437d      	muls	r5, r7
 80231c8:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 80231cc:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 80231d0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80231d4:	4461      	add	r1, ip
 80231d6:	fb08 f404 	mul.w	r4, r8, r4
 80231da:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80231de:	fb08 f802 	mul.w	r8, r8, r2
 80231e2:	0a09      	lsrs	r1, r1, #8
 80231e4:	0a22      	lsrs	r2, r4, #8
 80231e6:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 80231ea:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80231ee:	fb07 f70a 	mul.w	r7, r7, sl
 80231f2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80231f6:	4414      	add	r4, r2
 80231f8:	f508 7280 	add.w	r2, r8, #256	; 0x100
 80231fc:	0a24      	lsrs	r4, r4, #8
 80231fe:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8023202:	9a03      	ldr	r2, [sp, #12]
 8023204:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8023208:	fb02 5503 	mla	r5, r2, r3, r5
 802320c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8023210:	9a00      	ldr	r2, [sp, #0]
 8023212:	fb04 540e 	mla	r4, r4, lr, r5
 8023216:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 802321a:	1235      	asrs	r5, r6, #8
 802321c:	fb01 4100 	mla	r1, r1, r0, r4
 8023220:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8023224:	0a09      	lsrs	r1, r1, #8
 8023226:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 802322a:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 802322e:	fb03 7101 	mla	r1, r3, r1, r7
 8023232:	fb0e 1e08 	mla	lr, lr, r8, r1
 8023236:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 802323a:	fb00 e101 	mla	r1, r0, r1, lr
 802323e:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8023242:	b287      	uxth	r7, r0
 8023244:	0a09      	lsrs	r1, r1, #8
 8023246:	437a      	muls	r2, r7
 8023248:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 802324c:	1c53      	adds	r3, r2, #1
 802324e:	4321      	orrs	r1, r4
 8023250:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023254:	0c0a      	lsrs	r2, r1, #16
 8023256:	f3c1 2407 	ubfx	r4, r1, #8, #8
 802325a:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 802325e:	b2c8      	uxtb	r0, r1
 8023260:	fb12 f207 	smulbb	r2, r2, r7
 8023264:	fb14 f407 	smulbb	r4, r4, r7
 8023268:	b2db      	uxtb	r3, r3
 802326a:	fb10 f007 	smulbb	r0, r0, r7
 802326e:	fb05 2503 	mla	r5, r5, r3, r2
 8023272:	10f2      	asrs	r2, r6, #3
 8023274:	00f6      	lsls	r6, r6, #3
 8023276:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802327a:	b2ad      	uxth	r5, r5
 802327c:	b2f6      	uxtb	r6, r6
 802327e:	fb02 4203 	mla	r2, r2, r3, r4
 8023282:	fb06 0303 	mla	r3, r6, r3, r0
 8023286:	b294      	uxth	r4, r2
 8023288:	b299      	uxth	r1, r3
 802328a:	1c6b      	adds	r3, r5, #1
 802328c:	1c62      	adds	r2, r4, #1
 802328e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8023292:	1c4b      	adds	r3, r1, #1
 8023294:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8023298:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802329c:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80232a0:	0952      	lsrs	r2, r2, #5
 80232a2:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80232a6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80232aa:	432b      	orrs	r3, r5
 80232ac:	4313      	orrs	r3, r2
 80232ae:	9a02      	ldr	r2, [sp, #8]
 80232b0:	8013      	strh	r3, [r2, #0]
 80232b2:	b005      	add	sp, #20
 80232b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80232b8:	2500      	movs	r5, #0
 80232ba:	e6ef      	b.n	802309c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
 80232bc:	2100      	movs	r1, #0
 80232be:	460d      	mov	r5, r1
 80232c0:	e6f7      	b.n	80230b2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 80232c2:	2100      	movs	r1, #0
 80232c4:	e6f5      	b.n	80230b2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 80232c6:	4631      	mov	r1, r6
 80232c8:	e6f3      	b.n	80230b2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 80232ca:	2400      	movs	r4, #0
 80232cc:	e702      	b.n	80230d4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 80232ce:	2200      	movs	r2, #0
 80232d0:	4614      	mov	r4, r2
 80232d2:	e70b      	b.n	80230ec <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 80232d4:	4602      	mov	r2, r0
 80232d6:	4604      	mov	r4, r0
 80232d8:	e708      	b.n	80230ec <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 80232da:	2200      	movs	r2, #0
 80232dc:	e706      	b.n	80230ec <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 80232de:	4632      	mov	r2, r6
 80232e0:	e704      	b.n	80230ec <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

080232e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80232e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80232e6:	b09d      	sub	sp, #116	; 0x74
 80232e8:	9219      	str	r2, [sp, #100]	; 0x64
 80232ea:	9307      	str	r3, [sp, #28]
 80232ec:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80232ee:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 80232f2:	901b      	str	r0, [sp, #108]	; 0x6c
 80232f4:	931a      	str	r3, [sp, #104]	; 0x68
 80232f6:	6850      	ldr	r0, [r2, #4]
 80232f8:	9117      	str	r1, [sp, #92]	; 0x5c
 80232fa:	6812      	ldr	r2, [r2, #0]
 80232fc:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8023300:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 8023304:	fb00 1303 	mla	r3, r0, r3, r1
 8023308:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802330c:	930a      	str	r3, [sp, #40]	; 0x28
 802330e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023310:	681b      	ldr	r3, [r3, #0]
 8023312:	9310      	str	r3, [sp, #64]	; 0x40
 8023314:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8023318:	930b      	str	r3, [sp, #44]	; 0x2c
 802331a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802331c:	2b00      	cmp	r3, #0
 802331e:	dc03      	bgt.n	8023328 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8023320:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8023322:	2b00      	cmp	r3, #0
 8023324:	f340 8375 	ble.w	8023a12 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8023328:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802332a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802332e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023332:	1e48      	subs	r0, r1, #1
 8023334:	1e57      	subs	r7, r2, #1
 8023336:	9b07      	ldr	r3, [sp, #28]
 8023338:	2b00      	cmp	r3, #0
 802333a:	f340 818e 	ble.w	802365a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 802333e:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8023342:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023346:	d406      	bmi.n	8023356 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8023348:	4584      	cmp	ip, r0
 802334a:	da04      	bge.n	8023356 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802334c:	2b00      	cmp	r3, #0
 802334e:	db02      	blt.n	8023356 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8023350:	42bb      	cmp	r3, r7
 8023352:	f2c0 8183 	blt.w	802365c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8023356:	f11c 0c01 	adds.w	ip, ip, #1
 802335a:	f100 8173 	bmi.w	8023644 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802335e:	4561      	cmp	r1, ip
 8023360:	f2c0 8170 	blt.w	8023644 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8023364:	3301      	adds	r3, #1
 8023366:	f100 816d 	bmi.w	8023644 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802336a:	429a      	cmp	r2, r3
 802336c:	f2c0 816a 	blt.w	8023644 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8023370:	9b07      	ldr	r3, [sp, #28]
 8023372:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8023374:	9318      	str	r3, [sp, #96]	; 0x60
 8023376:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023378:	2b00      	cmp	r3, #0
 802337a:	f340 818c 	ble.w	8023696 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 802337e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8023380:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8023384:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023386:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802338a:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802338e:	1422      	asrs	r2, r4, #16
 8023390:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8023394:	689b      	ldr	r3, [r3, #8]
 8023396:	f100 81cd 	bmi.w	8023734 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802339a:	f103 38ff 	add.w	r8, r3, #4294967295
 802339e:	4542      	cmp	r2, r8
 80233a0:	f280 81c8 	bge.w	8023734 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80233a4:	f1bc 0f00 	cmp.w	ip, #0
 80233a8:	f2c0 81c4 	blt.w	8023734 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80233ac:	f10e 38ff 	add.w	r8, lr, #4294967295
 80233b0:	45c4      	cmp	ip, r8
 80233b2:	f280 81bf 	bge.w	8023734 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80233b6:	b21b      	sxth	r3, r3
 80233b8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80233ba:	fb0c 2203 	mla	r2, ip, r3, r2
 80233be:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 80233c2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80233c6:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80233ca:	2800      	cmp	r0, #0
 80233cc:	f000 81a9 	beq.w	8023722 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 80233d0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80233d4:	950c      	str	r5, [sp, #48]	; 0x30
 80233d6:	0e2d      	lsrs	r5, r5, #24
 80233d8:	9513      	str	r5, [sp, #76]	; 0x4c
 80233da:	b181      	cbz	r1, 80233fe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80233dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80233e0:	3b01      	subs	r3, #1
 80233e2:	009b      	lsls	r3, r3, #2
 80233e4:	3304      	adds	r3, #4
 80233e6:	eb08 0c03 	add.w	ip, r8, r3
 80233ea:	f858 3003 	ldr.w	r3, [r8, r3]
 80233ee:	9308      	str	r3, [sp, #32]
 80233f0:	0e1b      	lsrs	r3, r3, #24
 80233f2:	9311      	str	r3, [sp, #68]	; 0x44
 80233f4:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80233f8:	930d      	str	r3, [sp, #52]	; 0x34
 80233fa:	0e1b      	lsrs	r3, r3, #24
 80233fc:	9314      	str	r3, [sp, #80]	; 0x50
 80233fe:	b280      	uxth	r0, r0
 8023400:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8023402:	b289      	uxth	r1, r1
 8023404:	fb00 f901 	mul.w	r9, r0, r1
 8023408:	0100      	lsls	r0, r0, #4
 802340a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802340e:	eba0 0809 	sub.w	r8, r0, r9
 8023412:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8023416:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8023418:	b289      	uxth	r1, r1
 802341a:	fa1f f888 	uxth.w	r8, r8
 802341e:	1a5b      	subs	r3, r3, r1
 8023420:	fb08 f000 	mul.w	r0, r8, r0
 8023424:	b29b      	uxth	r3, r3
 8023426:	fb03 000e 	mla	r0, r3, lr, r0
 802342a:	fb01 0005 	mla	r0, r1, r5, r0
 802342e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8023430:	fb09 0005 	mla	r0, r9, r5, r0
 8023434:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8023438:	2800      	cmp	r0, #0
 802343a:	f000 80fa 	beq.w	8023632 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802343e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8023442:	d01b      	beq.n	802347c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8023444:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8023448:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802344c:	fb0e fa0a 	mul.w	sl, lr, sl
 8023450:	fb0e fe02 	mul.w	lr, lr, r2
 8023454:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8023458:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802345c:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8023460:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023464:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8023468:	4452      	add	r2, sl
 802346a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802346e:	0a12      	lsrs	r2, r2, #8
 8023470:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023474:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023478:	ea42 020c 	orr.w	r2, r2, ip
 802347c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802347e:	2dff      	cmp	r5, #255	; 0xff
 8023480:	d021      	beq.n	80234c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 8023482:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023484:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8023488:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802348a:	fb05 fb0b 	mul.w	fp, r5, fp
 802348e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023490:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8023494:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8023496:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802349a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802349e:	fb05 fa0a 	mul.w	sl, r5, sl
 80234a2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80234a6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80234aa:	44de      	add	lr, fp
 80234ac:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80234b0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80234b4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80234b8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80234bc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80234c0:	ea4e 050a 	orr.w	r5, lr, sl
 80234c4:	950c      	str	r5, [sp, #48]	; 0x30
 80234c6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80234c8:	2dff      	cmp	r5, #255	; 0xff
 80234ca:	d021      	beq.n	8023510 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 80234cc:	9d08      	ldr	r5, [sp, #32]
 80234ce:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80234d2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80234d4:	fb05 fb0b 	mul.w	fp, r5, fp
 80234d8:	9d08      	ldr	r5, [sp, #32]
 80234da:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80234de:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80234e0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80234e4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80234e8:	fb05 fa0a 	mul.w	sl, r5, sl
 80234ec:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80234f0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80234f4:	44de      	add	lr, fp
 80234f6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80234fa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80234fe:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023502:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023506:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802350a:	ea4e 050a 	orr.w	r5, lr, sl
 802350e:	9508      	str	r5, [sp, #32]
 8023510:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8023512:	2dff      	cmp	r5, #255	; 0xff
 8023514:	d021      	beq.n	802355a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8023516:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023518:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802351c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802351e:	fb05 fb0b 	mul.w	fp, r5, fp
 8023522:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023524:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8023528:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802352a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802352e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023532:	fb05 fa0a 	mul.w	sl, r5, sl
 8023536:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802353a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802353e:	44de      	add	lr, fp
 8023540:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023544:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023548:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802354c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023550:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023554:	ea4e 050a 	orr.w	r5, lr, sl
 8023558:	950d      	str	r5, [sp, #52]	; 0x34
 802355a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802355c:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8023560:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023564:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8023568:	9d08      	ldr	r5, [sp, #32]
 802356a:	fb08 fc0c 	mul.w	ip, r8, ip
 802356e:	fb03 cc0e 	mla	ip, r3, lr, ip
 8023572:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8023576:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023578:	fb01 cc0e 	mla	ip, r1, lr, ip
 802357c:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8023580:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023582:	fb09 cc0e 	mla	ip, r9, lr, ip
 8023586:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 802358a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802358c:	fb08 f80e 	mul.w	r8, r8, lr
 8023590:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023594:	fb03 8202 	mla	r2, r3, r2, r8
 8023598:	9b08      	ldr	r3, [sp, #32]
 802359a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802359e:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 80235a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80235a4:	fb01 220a 	mla	r2, r1, sl, r2
 80235a8:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 80235ac:	883b      	ldrh	r3, [r7, #0]
 80235ae:	fb09 2901 	mla	r9, r9, r1, r2
 80235b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80235b4:	1219      	asrs	r1, r3, #8
 80235b6:	4342      	muls	r2, r0
 80235b8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80235bc:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80235c0:	1c50      	adds	r0, r2, #1
 80235c2:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80235c6:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80235ca:	ea4c 0c09 	orr.w	ip, ip, r9
 80235ce:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80235d2:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80235d6:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 80235da:	fa5f fc8c 	uxtb.w	ip, ip
 80235de:	fb12 f205 	smulbb	r2, r2, r5
 80235e2:	b2c0      	uxtb	r0, r0
 80235e4:	fb1c fc05 	smulbb	ip, ip, r5
 80235e8:	fb01 2100 	mla	r1, r1, r0, r2
 80235ec:	10da      	asrs	r2, r3, #3
 80235ee:	fb1e fe05 	smulbb	lr, lr, r5
 80235f2:	00db      	lsls	r3, r3, #3
 80235f4:	b289      	uxth	r1, r1
 80235f6:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80235fa:	b2db      	uxtb	r3, r3
 80235fc:	fb02 e200 	mla	r2, r2, r0, lr
 8023600:	fb03 c300 	mla	r3, r3, r0, ip
 8023604:	b292      	uxth	r2, r2
 8023606:	fa1f fc83 	uxth.w	ip, r3
 802360a:	1c4b      	adds	r3, r1, #1
 802360c:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8023610:	f10c 0301 	add.w	r3, ip, #1
 8023614:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8023618:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 802361c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8023620:	430b      	orrs	r3, r1
 8023622:	1c51      	adds	r1, r2, #1
 8023624:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8023628:	0952      	lsrs	r2, r2, #5
 802362a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802362e:	4313      	orrs	r3, r2
 8023630:	803b      	strh	r3, [r7, #0]
 8023632:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023634:	3702      	adds	r7, #2
 8023636:	441c      	add	r4, r3
 8023638:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802363a:	441e      	add	r6, r3
 802363c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802363e:	3b01      	subs	r3, #1
 8023640:	9318      	str	r3, [sp, #96]	; 0x60
 8023642:	e698      	b.n	8023376 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8023644:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023646:	441c      	add	r4, r3
 8023648:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802364a:	441e      	add	r6, r3
 802364c:	9b07      	ldr	r3, [sp, #28]
 802364e:	3b01      	subs	r3, #1
 8023650:	9307      	str	r3, [sp, #28]
 8023652:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023654:	3302      	adds	r3, #2
 8023656:	930a      	str	r3, [sp, #40]	; 0x28
 8023658:	e66d      	b.n	8023336 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 802365a:	d023      	beq.n	80236a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 802365c:	9b07      	ldr	r3, [sp, #28]
 802365e:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8023660:	3b01      	subs	r3, #1
 8023662:	fb00 4003 	mla	r0, r0, r3, r4
 8023666:	1400      	asrs	r0, r0, #16
 8023668:	f53f ae82 	bmi.w	8023370 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802366c:	3901      	subs	r1, #1
 802366e:	4288      	cmp	r0, r1
 8023670:	f6bf ae7e 	bge.w	8023370 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8023674:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8023676:	fb01 6303 	mla	r3, r1, r3, r6
 802367a:	141b      	asrs	r3, r3, #16
 802367c:	f53f ae78 	bmi.w	8023370 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8023680:	3a01      	subs	r2, #1
 8023682:	4293      	cmp	r3, r2
 8023684:	f6bf ae74 	bge.w	8023370 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8023688:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802368c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8023690:	f1bb 0f00 	cmp.w	fp, #0
 8023694:	dc6c      	bgt.n	8023770 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8023696:	9b07      	ldr	r3, [sp, #28]
 8023698:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802369c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802369e:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 80236a2:	930a      	str	r3, [sp, #40]	; 0x28
 80236a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80236a6:	2b00      	cmp	r3, #0
 80236a8:	f340 81b3 	ble.w	8023a12 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 80236ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80236b0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80236b2:	ee30 0a04 	vadd.f32	s0, s0, s8
 80236b6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80236ba:	eef0 6a62 	vmov.f32	s13, s5
 80236be:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80236c2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80236c6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80236ca:	ee16 4a90 	vmov	r4, s13
 80236ce:	eef0 6a43 	vmov.f32	s13, s6
 80236d2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80236d6:	ee16 6a90 	vmov	r6, s13
 80236da:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80236de:	ee61 7a27 	vmul.f32	s15, s2, s15
 80236e2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80236e6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80236ea:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80236ee:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80236f2:	ee12 2a90 	vmov	r2, s5
 80236f6:	eef0 2a47 	vmov.f32	s5, s14
 80236fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80236fe:	ee13 2a10 	vmov	r2, s6
 8023702:	9329      	str	r3, [sp, #164]	; 0xa4
 8023704:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023706:	eeb0 3a67 	vmov.f32	s6, s15
 802370a:	fb92 f3f3 	sdiv	r3, r2, r3
 802370e:	932a      	str	r3, [sp, #168]	; 0xa8
 8023710:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8023712:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8023714:	3b01      	subs	r3, #1
 8023716:	9317      	str	r3, [sp, #92]	; 0x5c
 8023718:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802371a:	bf08      	it	eq
 802371c:	4613      	moveq	r3, r2
 802371e:	9307      	str	r3, [sp, #28]
 8023720:	e5fb      	b.n	802331a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8023722:	2900      	cmp	r1, #0
 8023724:	f43f ae6b 	beq.w	80233fe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8023728:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 802372c:	9308      	str	r3, [sp, #32]
 802372e:	0e1b      	lsrs	r3, r3, #24
 8023730:	9311      	str	r3, [sp, #68]	; 0x44
 8023732:	e664      	b.n	80233fe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8023734:	f112 0801 	adds.w	r8, r2, #1
 8023738:	f53f af7b 	bmi.w	8023632 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802373c:	4543      	cmp	r3, r8
 802373e:	f6ff af78 	blt.w	8023632 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8023742:	f11c 0801 	adds.w	r8, ip, #1
 8023746:	f53f af74 	bmi.w	8023632 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802374a:	45c6      	cmp	lr, r8
 802374c:	f6ff af71 	blt.w	8023632 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8023750:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8023752:	b21b      	sxth	r3, r3
 8023754:	9201      	str	r2, [sp, #4]
 8023756:	fa0f f28e 	sxth.w	r2, lr
 802375a:	e9cd 1504 	strd	r1, r5, [sp, #16]
 802375e:	e9cd c002 	strd	ip, r0, [sp, #8]
 8023762:	9200      	str	r2, [sp, #0]
 8023764:	4639      	mov	r1, r7
 8023766:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023768:	981b      	ldr	r0, [sp, #108]	; 0x6c
 802376a:	f7ff fc79 	bl	8023060 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 802376e:	e760      	b.n	8023632 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8023770:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023772:	1427      	asrs	r7, r4, #16
 8023774:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8023776:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802377a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802377e:	1433      	asrs	r3, r6, #16
 8023780:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8023784:	fb01 7303 	mla	r3, r1, r3, r7
 8023788:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 802378c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8023790:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8023794:	2a00      	cmp	r2, #0
 8023796:	f000 8133 	beq.w	8023a00 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 802379a:	687d      	ldr	r5, [r7, #4]
 802379c:	950e      	str	r5, [sp, #56]	; 0x38
 802379e:	0e2d      	lsrs	r5, r5, #24
 80237a0:	9515      	str	r5, [sp, #84]	; 0x54
 80237a2:	b178      	cbz	r0, 80237c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 80237a4:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80237a8:	3901      	subs	r1, #1
 80237aa:	0089      	lsls	r1, r1, #2
 80237ac:	3104      	adds	r1, #4
 80237ae:	eb07 0e01 	add.w	lr, r7, r1
 80237b2:	5879      	ldr	r1, [r7, r1]
 80237b4:	9109      	str	r1, [sp, #36]	; 0x24
 80237b6:	0e09      	lsrs	r1, r1, #24
 80237b8:	9112      	str	r1, [sp, #72]	; 0x48
 80237ba:	f8de 1004 	ldr.w	r1, [lr, #4]
 80237be:	910f      	str	r1, [sp, #60]	; 0x3c
 80237c0:	0e09      	lsrs	r1, r1, #24
 80237c2:	9116      	str	r1, [sp, #88]	; 0x58
 80237c4:	b292      	uxth	r2, r2
 80237c6:	9915      	ldr	r1, [sp, #84]	; 0x54
 80237c8:	b280      	uxth	r0, r0
 80237ca:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80237cc:	fb02 f800 	mul.w	r8, r2, r0
 80237d0:	0112      	lsls	r2, r2, #4
 80237d2:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 80237d6:	eba2 0e08 	sub.w	lr, r2, r8
 80237da:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80237de:	b280      	uxth	r0, r0
 80237e0:	fa1f fe8e 	uxth.w	lr, lr
 80237e4:	1a12      	subs	r2, r2, r0
 80237e6:	fb0e f101 	mul.w	r1, lr, r1
 80237ea:	b292      	uxth	r2, r2
 80237ec:	fb02 110c 	mla	r1, r2, ip, r1
 80237f0:	fb00 1105 	mla	r1, r0, r5, r1
 80237f4:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80237f6:	fb08 1105 	mla	r1, r8, r5, r1
 80237fa:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80237fe:	2900      	cmp	r1, #0
 8023800:	f000 80f5 	beq.w	80239ee <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
 8023804:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8023808:	d019      	beq.n	802383e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
 802380a:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802380e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023812:	fb0c fa0a 	mul.w	sl, ip, sl
 8023816:	fb0c fc03 	mul.w	ip, ip, r3
 802381a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802381e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023822:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8023826:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802382a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802382e:	4453      	add	r3, sl
 8023830:	0a3f      	lsrs	r7, r7, #8
 8023832:	0a1b      	lsrs	r3, r3, #8
 8023834:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023838:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802383c:	433b      	orrs	r3, r7
 802383e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8023840:	2dff      	cmp	r5, #255	; 0xff
 8023842:	d020      	beq.n	8023886 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
 8023844:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8023846:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802384a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802384c:	436f      	muls	r7, r5
 802384e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8023850:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023854:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8023858:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802385a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802385e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023862:	fb05 fa0a 	mul.w	sl, r5, sl
 8023866:	44bc      	add	ip, r7
 8023868:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802386c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023870:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023874:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023878:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802387c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023880:	ea4c 050a 	orr.w	r5, ip, sl
 8023884:	950e      	str	r5, [sp, #56]	; 0x38
 8023886:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8023888:	2dff      	cmp	r5, #255	; 0xff
 802388a:	d020      	beq.n	80238ce <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 802388c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802388e:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8023892:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8023894:	436f      	muls	r7, r5
 8023896:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8023898:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802389c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80238a0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80238a2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80238a6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80238aa:	fb05 fa0a 	mul.w	sl, r5, sl
 80238ae:	44bc      	add	ip, r7
 80238b0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80238b4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80238b8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80238bc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80238c0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80238c4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80238c8:	ea4c 050a 	orr.w	r5, ip, sl
 80238cc:	9509      	str	r5, [sp, #36]	; 0x24
 80238ce:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80238d0:	2dff      	cmp	r5, #255	; 0xff
 80238d2:	d020      	beq.n	8023916 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
 80238d4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80238d6:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80238da:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80238dc:	436f      	muls	r7, r5
 80238de:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80238e0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80238e4:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80238e8:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80238ea:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80238ee:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80238f2:	fb05 fa0a 	mul.w	sl, r5, sl
 80238f6:	44bc      	add	ip, r7
 80238f8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80238fc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023900:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023904:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023908:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802390c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023910:	ea4c 050a 	orr.w	r5, ip, sl
 8023914:	950f      	str	r5, [sp, #60]	; 0x3c
 8023916:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8023918:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802391c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023920:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8023924:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8023926:	fb0e f707 	mul.w	r7, lr, r7
 802392a:	fb02 770c 	mla	r7, r2, ip, r7
 802392e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8023932:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8023934:	fb00 770c 	mla	r7, r0, ip, r7
 8023938:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802393c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802393e:	fb08 770c 	mla	r7, r8, ip, r7
 8023942:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8023946:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8023948:	fb0e fe0c 	mul.w	lr, lr, ip
 802394c:	0a3f      	lsrs	r7, r7, #8
 802394e:	fb02 e303 	mla	r3, r2, r3, lr
 8023952:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023954:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8023958:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 802395c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802395e:	fb00 330a 	mla	r3, r0, sl, r3
 8023962:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8023966:	f8b9 0000 	ldrh.w	r0, [r9]
 802396a:	fb08 3c0c 	mla	ip, r8, ip, r3
 802396e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023970:	1202      	asrs	r2, r0, #8
 8023972:	4359      	muls	r1, r3
 8023974:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023978:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 802397c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023980:	1c4b      	adds	r3, r1, #1
 8023982:	ea47 070c 	orr.w	r7, r7, ip
 8023986:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802398a:	0c3b      	lsrs	r3, r7, #16
 802398c:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8023990:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8023994:	b2ff      	uxtb	r7, r7
 8023996:	fb13 f305 	smulbb	r3, r3, r5
 802399a:	b2c9      	uxtb	r1, r1
 802399c:	fb17 f705 	smulbb	r7, r7, r5
 80239a0:	fb02 3201 	mla	r2, r2, r1, r3
 80239a4:	10c3      	asrs	r3, r0, #3
 80239a6:	fb1c fc05 	smulbb	ip, ip, r5
 80239aa:	00c0      	lsls	r0, r0, #3
 80239ac:	b292      	uxth	r2, r2
 80239ae:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80239b2:	b2c0      	uxtb	r0, r0
 80239b4:	fb03 c301 	mla	r3, r3, r1, ip
 80239b8:	fb00 7001 	mla	r0, r0, r1, r7
 80239bc:	1c51      	adds	r1, r2, #1
 80239be:	b29b      	uxth	r3, r3
 80239c0:	b280      	uxth	r0, r0
 80239c2:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80239c6:	f100 0c01 	add.w	ip, r0, #1
 80239ca:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 80239ce:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 80239d2:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80239d6:	ea4c 0202 	orr.w	r2, ip, r2
 80239da:	f103 0c01 	add.w	ip, r3, #1
 80239de:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 80239e2:	095b      	lsrs	r3, r3, #5
 80239e4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80239e8:	431a      	orrs	r2, r3
 80239ea:	f8a9 2000 	strh.w	r2, [r9]
 80239ee:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80239f0:	f109 0902 	add.w	r9, r9, #2
 80239f4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80239f8:	441c      	add	r4, r3
 80239fa:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80239fc:	441e      	add	r6, r3
 80239fe:	e647      	b.n	8023690 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8023a00:	2800      	cmp	r0, #0
 8023a02:	f43f aedf 	beq.w	80237c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8023a06:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8023a0a:	9109      	str	r1, [sp, #36]	; 0x24
 8023a0c:	0e09      	lsrs	r1, r1, #24
 8023a0e:	9112      	str	r1, [sp, #72]	; 0x48
 8023a10:	e6d8      	b.n	80237c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8023a12:	b01d      	add	sp, #116	; 0x74
 8023a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023a18 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 8023a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023a1c:	b085      	sub	sp, #20
 8023a1e:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 8023a22:	9102      	str	r1, [sp, #8]
 8023a24:	2c00      	cmp	r4, #0
 8023a26:	fb04 7103 	mla	r1, r4, r3, r7
 8023a2a:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8023a2e:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8023a32:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 8023a36:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8023a3a:	f2c0 810c 	blt.w	8023c56 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8023a3e:	45a6      	cmp	lr, r4
 8023a40:	f340 8109 	ble.w	8023c56 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8023a44:	2f00      	cmp	r7, #0
 8023a46:	f2c0 8104 	blt.w	8023c52 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8023a4a:	42bb      	cmp	r3, r7
 8023a4c:	f340 8101 	ble.w	8023c52 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8023a50:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 8023a54:	1c7a      	adds	r2, r7, #1
 8023a56:	f100 8101 	bmi.w	8023c5c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 8023a5a:	4293      	cmp	r3, r2
 8023a5c:	f340 80fe 	ble.w	8023c5c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 8023a60:	2e00      	cmp	r6, #0
 8023a62:	f000 80fd 	beq.w	8023c60 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
 8023a66:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8023a6a:	3401      	adds	r4, #1
 8023a6c:	f100 80fc 	bmi.w	8023c68 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8023a70:	45a6      	cmp	lr, r4
 8023a72:	f340 80f9 	ble.w	8023c68 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8023a76:	2800      	cmp	r0, #0
 8023a78:	f000 80f9 	beq.w	8023c6e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
 8023a7c:	2f00      	cmp	r7, #0
 8023a7e:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 8023a82:	f2c0 80ef 	blt.w	8023c64 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8023a86:	42bb      	cmp	r3, r7
 8023a88:	f340 80ec 	ble.w	8023c64 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8023a8c:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8023a90:	3701      	adds	r7, #1
 8023a92:	f100 80ef 	bmi.w	8023c74 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8023a96:	42bb      	cmp	r3, r7
 8023a98:	f340 80ec 	ble.w	8023c74 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8023a9c:	2e00      	cmp	r6, #0
 8023a9e:	f000 80eb 	beq.w	8023c78 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
 8023aa2:	6852      	ldr	r2, [r2, #4]
 8023aa4:	b2b6      	uxth	r6, r6
 8023aa6:	b280      	uxth	r0, r0
 8023aa8:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8023aac:	fb00 fe06 	mul.w	lr, r0, r6
 8023ab0:	0136      	lsls	r6, r6, #4
 8023ab2:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8023ab6:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8023aba:	eba6 070e 	sub.w	r7, r6, lr
 8023abe:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8023ac2:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8023ac6:	b280      	uxth	r0, r0
 8023ac8:	b2bf      	uxth	r7, r7
 8023aca:	1a1b      	subs	r3, r3, r0
 8023acc:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8023ad0:	fb07 f60a 	mul.w	r6, r7, sl
 8023ad4:	b29b      	uxth	r3, r3
 8023ad6:	fb0b 6603 	mla	r6, fp, r3, r6
 8023ada:	fb00 6609 	mla	r6, r0, r9, r6
 8023ade:	fb0e 6608 	mla	r6, lr, r8, r6
 8023ae2:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8023ae6:	9600      	str	r6, [sp, #0]
 8023ae8:	2e00      	cmp	r6, #0
 8023aea:	f000 80af 	beq.w	8023c4c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
 8023aee:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8023af2:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8023af6:	9e02      	ldr	r6, [sp, #8]
 8023af8:	fb0b fc0c 	mul.w	ip, fp, ip
 8023afc:	fb0b f505 	mul.w	r5, fp, r5
 8023b00:	8836      	ldrh	r6, [r6, #0]
 8023b02:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8023b06:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023b0a:	9501      	str	r5, [sp, #4]
 8023b0c:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8023b10:	44dc      	add	ip, fp
 8023b12:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023b16:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8023b1a:	9503      	str	r5, [sp, #12]
 8023b1c:	9d01      	ldr	r5, [sp, #4]
 8023b1e:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8023b22:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8023b26:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 8023b2a:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8023b2e:	fb0a fc0c 	mul.w	ip, sl, ip
 8023b32:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8023b36:	fb0a fa01 	mul.w	sl, sl, r1
 8023b3a:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8023b3e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023b42:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 8023b46:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8023b4a:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8023b4e:	4465      	add	r5, ip
 8023b50:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023b54:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8023b58:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023b5c:	fb09 fc0c 	mul.w	ip, r9, ip
 8023b60:	0a2d      	lsrs	r5, r5, #8
 8023b62:	fb09 f904 	mul.w	r9, r9, r4
 8023b66:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023b6a:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8023b6e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8023b72:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8023b76:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023b7a:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8023b7e:	437d      	muls	r5, r7
 8023b80:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8023b84:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 8023b88:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023b8c:	4461      	add	r1, ip
 8023b8e:	fb08 f404 	mul.w	r4, r8, r4
 8023b92:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023b96:	fb08 f802 	mul.w	r8, r8, r2
 8023b9a:	0a09      	lsrs	r1, r1, #8
 8023b9c:	0a22      	lsrs	r2, r4, #8
 8023b9e:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8023ba2:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8023ba6:	fb07 f70a 	mul.w	r7, r7, sl
 8023baa:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023bae:	4414      	add	r4, r2
 8023bb0:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8023bb4:	0a24      	lsrs	r4, r4, #8
 8023bb6:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8023bba:	9a03      	ldr	r2, [sp, #12]
 8023bbc:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8023bc0:	fb02 5503 	mla	r5, r2, r3, r5
 8023bc4:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8023bc8:	fb04 540e 	mla	r4, r4, lr, r5
 8023bcc:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8023bd0:	fb01 4100 	mla	r1, r1, r0, r4
 8023bd4:	0a09      	lsrs	r1, r1, #8
 8023bd6:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 8023bda:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 8023bde:	fb03 7101 	mla	r1, r3, r1, r7
 8023be2:	9b00      	ldr	r3, [sp, #0]
 8023be4:	fb0e 1e08 	mla	lr, lr, r8, r1
 8023be8:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 8023bec:	43da      	mvns	r2, r3
 8023bee:	1233      	asrs	r3, r6, #8
 8023bf0:	fb00 e101 	mla	r1, r0, r1, lr
 8023bf4:	10f0      	asrs	r0, r6, #3
 8023bf6:	b2d2      	uxtb	r2, r2
 8023bf8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8023bfc:	0a09      	lsrs	r1, r1, #8
 8023bfe:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8023c02:	00f6      	lsls	r6, r6, #3
 8023c04:	4353      	muls	r3, r2
 8023c06:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8023c0a:	4350      	muls	r0, r2
 8023c0c:	b2f6      	uxtb	r6, r6
 8023c0e:	4321      	orrs	r1, r4
 8023c10:	4356      	muls	r6, r2
 8023c12:	1c5a      	adds	r2, r3, #1
 8023c14:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8023c18:	0c0b      	lsrs	r3, r1, #16
 8023c1a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023c1e:	1c42      	adds	r2, r0, #1
 8023c20:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8023c24:	0a0a      	lsrs	r2, r1, #8
 8023c26:	021b      	lsls	r3, r3, #8
 8023c28:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8023c2c:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8023c30:	00d2      	lsls	r2, r2, #3
 8023c32:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023c36:	4313      	orrs	r3, r2
 8023c38:	1c72      	adds	r2, r6, #1
 8023c3a:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8023c3e:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 8023c42:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8023c46:	4319      	orrs	r1, r3
 8023c48:	9b02      	ldr	r3, [sp, #8]
 8023c4a:	8019      	strh	r1, [r3, #0]
 8023c4c:	b005      	add	sp, #20
 8023c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023c52:	2500      	movs	r5, #0
 8023c54:	e6fe      	b.n	8023a54 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
 8023c56:	2100      	movs	r1, #0
 8023c58:	460d      	mov	r5, r1
 8023c5a:	e706      	b.n	8023a6a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8023c5c:	2100      	movs	r1, #0
 8023c5e:	e704      	b.n	8023a6a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8023c60:	4631      	mov	r1, r6
 8023c62:	e702      	b.n	8023a6a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8023c64:	2400      	movs	r4, #0
 8023c66:	e713      	b.n	8023a90 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
 8023c68:	2200      	movs	r2, #0
 8023c6a:	4614      	mov	r4, r2
 8023c6c:	e71a      	b.n	8023aa4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8023c6e:	4602      	mov	r2, r0
 8023c70:	4604      	mov	r4, r0
 8023c72:	e717      	b.n	8023aa4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8023c74:	2200      	movs	r2, #0
 8023c76:	e715      	b.n	8023aa4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8023c78:	4632      	mov	r2, r6
 8023c7a:	e713      	b.n	8023aa4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>

08023c7c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023c80:	b09b      	sub	sp, #108	; 0x6c
 8023c82:	9218      	str	r2, [sp, #96]	; 0x60
 8023c84:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8023c86:	9019      	str	r0, [sp, #100]	; 0x64
 8023c88:	9116      	str	r1, [sp, #88]	; 0x58
 8023c8a:	6850      	ldr	r0, [r2, #4]
 8023c8c:	9307      	str	r3, [sp, #28]
 8023c8e:	6812      	ldr	r2, [r2, #0]
 8023c90:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8023c94:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 8023c98:	fb00 1303 	mla	r3, r0, r3, r1
 8023c9c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8023ca0:	930a      	str	r3, [sp, #40]	; 0x28
 8023ca2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023ca4:	681b      	ldr	r3, [r3, #0]
 8023ca6:	930f      	str	r3, [sp, #60]	; 0x3c
 8023ca8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8023caa:	2b00      	cmp	r3, #0
 8023cac:	dc03      	bgt.n	8023cb6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8023cae:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023cb0:	2b00      	cmp	r3, #0
 8023cb2:	f340 8387 	ble.w	80243c4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8023cb6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023cb8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023cbc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023cc0:	1e48      	subs	r0, r1, #1
 8023cc2:	1e57      	subs	r7, r2, #1
 8023cc4:	9b07      	ldr	r3, [sp, #28]
 8023cc6:	2b00      	cmp	r3, #0
 8023cc8:	f340 8166 	ble.w	8023f98 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8023ccc:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8023cd0:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023cd4:	d406      	bmi.n	8023ce4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8023cd6:	4584      	cmp	ip, r0
 8023cd8:	da04      	bge.n	8023ce4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8023cda:	2b00      	cmp	r3, #0
 8023cdc:	db02      	blt.n	8023ce4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8023cde:	42bb      	cmp	r3, r7
 8023ce0:	f2c0 815b 	blt.w	8023f9a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8023ce4:	f11c 0c01 	adds.w	ip, ip, #1
 8023ce8:	f100 814b 	bmi.w	8023f82 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8023cec:	4561      	cmp	r1, ip
 8023cee:	f2c0 8148 	blt.w	8023f82 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8023cf2:	3301      	adds	r3, #1
 8023cf4:	f100 8145 	bmi.w	8023f82 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8023cf8:	429a      	cmp	r2, r3
 8023cfa:	f2c0 8142 	blt.w	8023f82 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8023cfe:	9b07      	ldr	r3, [sp, #28]
 8023d00:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8023d02:	9317      	str	r3, [sp, #92]	; 0x5c
 8023d04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8023d06:	2b00      	cmp	r3, #0
 8023d08:	f340 8165 	ble.w	8023fd6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8023d0c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8023d0e:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8023d12:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023d14:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8023d18:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8023d1c:	1422      	asrs	r2, r4, #16
 8023d1e:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8023d22:	689b      	ldr	r3, [r3, #8]
 8023d24:	f100 81d5 	bmi.w	80240d2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8023d28:	f103 38ff 	add.w	r8, r3, #4294967295
 8023d2c:	4542      	cmp	r2, r8
 8023d2e:	f280 81d0 	bge.w	80240d2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8023d32:	f1bc 0f00 	cmp.w	ip, #0
 8023d36:	f2c0 81cc 	blt.w	80240d2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8023d3a:	f10e 38ff 	add.w	r8, lr, #4294967295
 8023d3e:	45c4      	cmp	ip, r8
 8023d40:	f280 81c7 	bge.w	80240d2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8023d44:	b21b      	sxth	r3, r3
 8023d46:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8023d48:	fb0c 2203 	mla	r2, ip, r3, r2
 8023d4c:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8023d50:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8023d54:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8023d58:	2900      	cmp	r1, #0
 8023d5a:	f000 8182 	beq.w	8024062 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8023d5e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8023d62:	950b      	str	r5, [sp, #44]	; 0x2c
 8023d64:	0e2d      	lsrs	r5, r5, #24
 8023d66:	9512      	str	r5, [sp, #72]	; 0x48
 8023d68:	b180      	cbz	r0, 8023d8c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8023d6a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8023d6e:	3b01      	subs	r3, #1
 8023d70:	009b      	lsls	r3, r3, #2
 8023d72:	3304      	adds	r3, #4
 8023d74:	eb08 0c03 	add.w	ip, r8, r3
 8023d78:	f858 3003 	ldr.w	r3, [r8, r3]
 8023d7c:	9308      	str	r3, [sp, #32]
 8023d7e:	0e1b      	lsrs	r3, r3, #24
 8023d80:	9310      	str	r3, [sp, #64]	; 0x40
 8023d82:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8023d86:	930c      	str	r3, [sp, #48]	; 0x30
 8023d88:	0e1b      	lsrs	r3, r3, #24
 8023d8a:	9313      	str	r3, [sp, #76]	; 0x4c
 8023d8c:	b289      	uxth	r1, r1
 8023d8e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8023d90:	b280      	uxth	r0, r0
 8023d92:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8023d94:	fb01 f900 	mul.w	r9, r1, r0
 8023d98:	0109      	lsls	r1, r1, #4
 8023d9a:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8023d9e:	eba1 0809 	sub.w	r8, r1, r9
 8023da2:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8023da6:	b280      	uxth	r0, r0
 8023da8:	fa1f f888 	uxth.w	r8, r8
 8023dac:	1a09      	subs	r1, r1, r0
 8023dae:	fb08 f303 	mul.w	r3, r8, r3
 8023db2:	b289      	uxth	r1, r1
 8023db4:	fb01 330e 	mla	r3, r1, lr, r3
 8023db8:	fb00 3305 	mla	r3, r0, r5, r3
 8023dbc:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8023dbe:	fb09 3305 	mla	r3, r9, r5, r3
 8023dc2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023dc6:	2b00      	cmp	r3, #0
 8023dc8:	f000 80d2 	beq.w	8023f70 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8023dcc:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8023dd0:	d01b      	beq.n	8023e0a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 8023dd2:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8023dd6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023dda:	fb0e fa0a 	mul.w	sl, lr, sl
 8023dde:	fb0e fe02 	mul.w	lr, lr, r2
 8023de2:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8023de6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023dea:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8023dee:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023df2:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8023df6:	4452      	add	r2, sl
 8023df8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023dfc:	0a12      	lsrs	r2, r2, #8
 8023dfe:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023e02:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023e06:	ea42 020c 	orr.w	r2, r2, ip
 8023e0a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8023e0c:	2dff      	cmp	r5, #255	; 0xff
 8023e0e:	d021      	beq.n	8023e54 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8023e10:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8023e12:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8023e16:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8023e18:	fb05 fb0b 	mul.w	fp, r5, fp
 8023e1c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8023e1e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8023e22:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8023e24:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023e28:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023e2c:	fb05 fa0a 	mul.w	sl, r5, sl
 8023e30:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023e34:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023e38:	44de      	add	lr, fp
 8023e3a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023e3e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023e42:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023e46:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023e4a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023e4e:	ea4e 050a 	orr.w	r5, lr, sl
 8023e52:	950b      	str	r5, [sp, #44]	; 0x2c
 8023e54:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8023e56:	2dff      	cmp	r5, #255	; 0xff
 8023e58:	d021      	beq.n	8023e9e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 8023e5a:	9d08      	ldr	r5, [sp, #32]
 8023e5c:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8023e60:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8023e62:	fb05 fb0b 	mul.w	fp, r5, fp
 8023e66:	9d08      	ldr	r5, [sp, #32]
 8023e68:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8023e6c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8023e6e:	fb05 fa0e 	mul.w	sl, r5, lr
 8023e72:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023e76:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023e7a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023e7e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023e82:	44de      	add	lr, fp
 8023e84:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023e88:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023e8c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023e90:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023e94:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023e98:	ea4e 050a 	orr.w	r5, lr, sl
 8023e9c:	9508      	str	r5, [sp, #32]
 8023e9e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8023ea0:	2dff      	cmp	r5, #255	; 0xff
 8023ea2:	d021      	beq.n	8023ee8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8023ea4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023ea6:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8023eaa:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8023eac:	fb05 fb0b 	mul.w	fp, r5, fp
 8023eb0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023eb2:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8023eb6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8023eb8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023ebc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023ec0:	fb05 fa0a 	mul.w	sl, r5, sl
 8023ec4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023ec8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023ecc:	44de      	add	lr, fp
 8023ece:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023ed2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023ed6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023eda:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023ede:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023ee2:	ea4e 050a 	orr.w	r5, lr, sl
 8023ee6:	950c      	str	r5, [sp, #48]	; 0x30
 8023ee8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8023eea:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8023eee:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023ef2:	2bff      	cmp	r3, #255	; 0xff
 8023ef4:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8023ef8:	9d08      	ldr	r5, [sp, #32]
 8023efa:	fb08 fc0c 	mul.w	ip, r8, ip
 8023efe:	fb01 cc0e 	mla	ip, r1, lr, ip
 8023f02:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8023f06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023f08:	fb00 cc0e 	mla	ip, r0, lr, ip
 8023f0c:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8023f10:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8023f12:	fb09 cc0e 	mla	ip, r9, lr, ip
 8023f16:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8023f1a:	fb08 f80e 	mul.w	r8, r8, lr
 8023f1e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023f22:	fb01 8202 	mla	r2, r1, r2, r8
 8023f26:	9908      	ldr	r1, [sp, #32]
 8023f28:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023f2c:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8023f30:	990c      	ldr	r1, [sp, #48]	; 0x30
 8023f32:	fb00 220a 	mla	r2, r0, sl, r2
 8023f36:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8023f3a:	fb09 2900 	mla	r9, r9, r0, r2
 8023f3e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023f42:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8023f46:	ea4c 0c09 	orr.w	ip, ip, r9
 8023f4a:	ea4f 221c 	mov.w	r2, ip, lsr #8
 8023f4e:	f040 8091 	bne.w	8024074 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8023f52:	ea4f 135c 	mov.w	r3, ip, lsr #5
 8023f56:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 8023f5a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023f5e:	f022 0207 	bic.w	r2, r2, #7
 8023f62:	431a      	orrs	r2, r3
 8023f64:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8023f68:	ea4c 0c02 	orr.w	ip, ip, r2
 8023f6c:	f8a7 c000 	strh.w	ip, [r7]
 8023f70:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8023f72:	3702      	adds	r7, #2
 8023f74:	441c      	add	r4, r3
 8023f76:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023f78:	441e      	add	r6, r3
 8023f7a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8023f7c:	3b01      	subs	r3, #1
 8023f7e:	9317      	str	r3, [sp, #92]	; 0x5c
 8023f80:	e6c0      	b.n	8023d04 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8023f82:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8023f84:	441c      	add	r4, r3
 8023f86:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023f88:	441e      	add	r6, r3
 8023f8a:	9b07      	ldr	r3, [sp, #28]
 8023f8c:	3b01      	subs	r3, #1
 8023f8e:	9307      	str	r3, [sp, #28]
 8023f90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023f92:	3302      	adds	r3, #2
 8023f94:	930a      	str	r3, [sp, #40]	; 0x28
 8023f96:	e695      	b.n	8023cc4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8023f98:	d024      	beq.n	8023fe4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8023f9a:	9b07      	ldr	r3, [sp, #28]
 8023f9c:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8023f9e:	3b01      	subs	r3, #1
 8023fa0:	fb00 4003 	mla	r0, r0, r3, r4
 8023fa4:	1400      	asrs	r0, r0, #16
 8023fa6:	f53f aeaa 	bmi.w	8023cfe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8023faa:	3901      	subs	r1, #1
 8023fac:	4288      	cmp	r0, r1
 8023fae:	f6bf aea6 	bge.w	8023cfe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8023fb2:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8023fb4:	fb01 6303 	mla	r3, r1, r3, r6
 8023fb8:	141b      	asrs	r3, r3, #16
 8023fba:	f53f aea0 	bmi.w	8023cfe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8023fbe:	3a01      	subs	r2, #1
 8023fc0:	4293      	cmp	r3, r2
 8023fc2:	f6bf ae9c 	bge.w	8023cfe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8023fc6:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8023fca:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8023fce:	f1bb 0f00 	cmp.w	fp, #0
 8023fd2:	f300 809a 	bgt.w	802410a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8023fd6:	9b07      	ldr	r3, [sp, #28]
 8023fd8:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8023fdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023fde:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8023fe2:	930a      	str	r3, [sp, #40]	; 0x28
 8023fe4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8023fe6:	2b00      	cmp	r3, #0
 8023fe8:	f340 81ec 	ble.w	80243c4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8023fec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023ff0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023ff2:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023ff6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023ffa:	eef0 6a62 	vmov.f32	s13, s5
 8023ffe:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024002:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024006:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802400a:	ee16 4a90 	vmov	r4, s13
 802400e:	eef0 6a43 	vmov.f32	s13, s6
 8024012:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024016:	ee16 6a90 	vmov	r6, s13
 802401a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802401e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024022:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024026:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802402a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802402e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024032:	ee12 2a90 	vmov	r2, s5
 8024036:	eef0 2a47 	vmov.f32	s5, s14
 802403a:	fb92 f3f3 	sdiv	r3, r2, r3
 802403e:	ee13 2a10 	vmov	r2, s6
 8024042:	9327      	str	r3, [sp, #156]	; 0x9c
 8024044:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024046:	eeb0 3a67 	vmov.f32	s6, s15
 802404a:	fb92 f3f3 	sdiv	r3, r2, r3
 802404e:	9328      	str	r3, [sp, #160]	; 0xa0
 8024050:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8024052:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8024054:	3b01      	subs	r3, #1
 8024056:	9316      	str	r3, [sp, #88]	; 0x58
 8024058:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802405a:	bf08      	it	eq
 802405c:	4613      	moveq	r3, r2
 802405e:	9307      	str	r3, [sp, #28]
 8024060:	e622      	b.n	8023ca8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 8024062:	2800      	cmp	r0, #0
 8024064:	f43f ae92 	beq.w	8023d8c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8024068:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 802406c:	9308      	str	r3, [sp, #32]
 802406e:	0e1b      	lsrs	r3, r3, #24
 8024070:	9310      	str	r3, [sp, #64]	; 0x40
 8024072:	e68b      	b.n	8023d8c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8024074:	8839      	ldrh	r1, [r7, #0]
 8024076:	43db      	mvns	r3, r3
 8024078:	4dd4      	ldr	r5, [pc, #848]	; (80243cc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 802407a:	ea4f 2e21 	mov.w	lr, r1, asr #8
 802407e:	fa5f f883 	uxtb.w	r8, r3
 8024082:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8024086:	10c8      	asrs	r0, r1, #3
 8024088:	00cb      	lsls	r3, r1, #3
 802408a:	fb0e fe08 	mul.w	lr, lr, r8
 802408e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8024092:	b2db      	uxtb	r3, r3
 8024094:	f10e 0101 	add.w	r1, lr, #1
 8024098:	fb00 f008 	mul.w	r0, r0, r8
 802409c:	fb03 f308 	mul.w	r3, r3, r8
 80240a0:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 80240a4:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80240a8:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 80240ac:	f100 0e01 	add.w	lr, r0, #1
 80240b0:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 80240b4:	b2c9      	uxtb	r1, r1
 80240b6:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80240ba:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 80240be:	00d2      	lsls	r2, r2, #3
 80240c0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80240c4:	430a      	orrs	r2, r1
 80240c6:	1c59      	adds	r1, r3, #1
 80240c8:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80240cc:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80240d0:	e748      	b.n	8023f64 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 80240d2:	f112 0801 	adds.w	r8, r2, #1
 80240d6:	f53f af4b 	bmi.w	8023f70 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80240da:	4543      	cmp	r3, r8
 80240dc:	f6ff af48 	blt.w	8023f70 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80240e0:	f11c 0801 	adds.w	r8, ip, #1
 80240e4:	f53f af44 	bmi.w	8023f70 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80240e8:	45c6      	cmp	lr, r8
 80240ea:	f6ff af41 	blt.w	8023f70 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80240ee:	b21b      	sxth	r3, r3
 80240f0:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 80240f4:	fa0f f28e 	sxth.w	r2, lr
 80240f8:	e9cd 1003 	strd	r1, r0, [sp, #12]
 80240fc:	9200      	str	r2, [sp, #0]
 80240fe:	4639      	mov	r1, r7
 8024100:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024102:	9819      	ldr	r0, [sp, #100]	; 0x64
 8024104:	f7ff fc88 	bl	8023a18 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 8024108:	e732      	b.n	8023f70 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802410a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802410c:	1421      	asrs	r1, r4, #16
 802410e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8024110:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8024114:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 8024118:	1433      	asrs	r3, r6, #16
 802411a:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802411e:	fb07 1303 	mla	r3, r7, r3, r1
 8024122:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8024124:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8024128:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 802412c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8024130:	2a00      	cmp	r2, #0
 8024132:	f000 8108 	beq.w	8024346 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 8024136:	684d      	ldr	r5, [r1, #4]
 8024138:	950d      	str	r5, [sp, #52]	; 0x34
 802413a:	0e2d      	lsrs	r5, r5, #24
 802413c:	9514      	str	r5, [sp, #80]	; 0x50
 802413e:	b178      	cbz	r0, 8024160 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8024140:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8024144:	3f01      	subs	r7, #1
 8024146:	00bf      	lsls	r7, r7, #2
 8024148:	3704      	adds	r7, #4
 802414a:	eb01 0e07 	add.w	lr, r1, r7
 802414e:	59c9      	ldr	r1, [r1, r7]
 8024150:	9109      	str	r1, [sp, #36]	; 0x24
 8024152:	0e09      	lsrs	r1, r1, #24
 8024154:	9111      	str	r1, [sp, #68]	; 0x44
 8024156:	f8de 1004 	ldr.w	r1, [lr, #4]
 802415a:	910e      	str	r1, [sp, #56]	; 0x38
 802415c:	0e09      	lsrs	r1, r1, #24
 802415e:	9115      	str	r1, [sp, #84]	; 0x54
 8024160:	b292      	uxth	r2, r2
 8024162:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8024164:	b280      	uxth	r0, r0
 8024166:	fb02 f900 	mul.w	r9, r2, r0
 802416a:	0112      	lsls	r2, r2, #4
 802416c:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8024170:	eba2 0e09 	sub.w	lr, r2, r9
 8024174:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8024178:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802417a:	b280      	uxth	r0, r0
 802417c:	fa1f fe8e 	uxth.w	lr, lr
 8024180:	1a09      	subs	r1, r1, r0
 8024182:	fb0e f202 	mul.w	r2, lr, r2
 8024186:	b289      	uxth	r1, r1
 8024188:	fb01 220c 	mla	r2, r1, ip, r2
 802418c:	fb00 2205 	mla	r2, r0, r5, r2
 8024190:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8024192:	fb09 2205 	mla	r2, r9, r5, r2
 8024196:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802419a:	2a00      	cmp	r2, #0
 802419c:	f000 80ca 	beq.w	8024334 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 80241a0:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80241a4:	d019      	beq.n	80241da <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
 80241a6:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80241aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80241ae:	fb0c fa0a 	mul.w	sl, ip, sl
 80241b2:	fb0c fc03 	mul.w	ip, ip, r3
 80241b6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80241ba:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80241be:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80241c2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80241c6:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80241ca:	4453      	add	r3, sl
 80241cc:	0a3f      	lsrs	r7, r7, #8
 80241ce:	0a1b      	lsrs	r3, r3, #8
 80241d0:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80241d4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80241d8:	433b      	orrs	r3, r7
 80241da:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80241dc:	2dff      	cmp	r5, #255	; 0xff
 80241de:	d020      	beq.n	8024222 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
 80241e0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80241e2:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80241e6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80241e8:	436f      	muls	r7, r5
 80241ea:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80241ec:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80241f0:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80241f4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80241f6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80241fa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80241fe:	fb05 fa0a 	mul.w	sl, r5, sl
 8024202:	44bc      	add	ip, r7
 8024204:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024208:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802420c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024210:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024214:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024218:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802421c:	ea4c 050a 	orr.w	r5, ip, sl
 8024220:	950d      	str	r5, [sp, #52]	; 0x34
 8024222:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8024224:	2dff      	cmp	r5, #255	; 0xff
 8024226:	d020      	beq.n	802426a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
 8024228:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802422a:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802422e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8024230:	436f      	muls	r7, r5
 8024232:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8024234:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8024238:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802423a:	fb05 fa0c 	mul.w	sl, r5, ip
 802423e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024242:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024246:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802424a:	44bc      	add	ip, r7
 802424c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024250:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024254:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024258:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802425c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024260:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024264:	ea4c 050a 	orr.w	r5, ip, sl
 8024268:	9509      	str	r5, [sp, #36]	; 0x24
 802426a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802426c:	2dff      	cmp	r5, #255	; 0xff
 802426e:	d020      	beq.n	80242b2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
 8024270:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8024272:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8024276:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8024278:	436f      	muls	r7, r5
 802427a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802427c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024280:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8024284:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8024286:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802428a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802428e:	fb05 fa0a 	mul.w	sl, r5, sl
 8024292:	44bc      	add	ip, r7
 8024294:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024298:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802429c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80242a0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80242a4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80242a8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80242ac:	ea4c 050a 	orr.w	r5, ip, sl
 80242b0:	950e      	str	r5, [sp, #56]	; 0x38
 80242b2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80242b4:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80242b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80242bc:	2aff      	cmp	r2, #255	; 0xff
 80242be:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80242c2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80242c4:	fb0e f707 	mul.w	r7, lr, r7
 80242c8:	fb01 770c 	mla	r7, r1, ip, r7
 80242cc:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80242d0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80242d2:	fb00 770c 	mla	r7, r0, ip, r7
 80242d6:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80242da:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80242dc:	fb09 770c 	mla	r7, r9, ip, r7
 80242e0:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 80242e4:	fb0e fe0c 	mul.w	lr, lr, ip
 80242e8:	ea4f 2717 	mov.w	r7, r7, lsr #8
 80242ec:	fb01 e303 	mla	r3, r1, r3, lr
 80242f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80242f2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80242f6:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 80242fa:	990e      	ldr	r1, [sp, #56]	; 0x38
 80242fc:	fb00 330a 	mla	r3, r0, sl, r3
 8024300:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8024304:	fb09 3c0c 	mla	ip, r9, ip, r3
 8024308:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802430c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024310:	ea47 070c 	orr.w	r7, r7, ip
 8024314:	ea4f 2317 	mov.w	r3, r7, lsr #8
 8024318:	d11e      	bne.n	8024358 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 802431a:	097a      	lsrs	r2, r7, #5
 802431c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8024320:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8024324:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024328:	f023 0307 	bic.w	r3, r3, #7
 802432c:	4313      	orrs	r3, r2
 802432e:	431f      	orrs	r7, r3
 8024330:	f8a8 7000 	strh.w	r7, [r8]
 8024334:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8024336:	f108 0802 	add.w	r8, r8, #2
 802433a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802433e:	441c      	add	r4, r3
 8024340:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024342:	441e      	add	r6, r3
 8024344:	e643      	b.n	8023fce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8024346:	2800      	cmp	r0, #0
 8024348:	f43f af0a 	beq.w	8024160 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 802434c:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8024350:	9109      	str	r1, [sp, #36]	; 0x24
 8024352:	0e09      	lsrs	r1, r1, #24
 8024354:	9111      	str	r1, [sp, #68]	; 0x44
 8024356:	e703      	b.n	8024160 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8024358:	f8b8 1000 	ldrh.w	r1, [r8]
 802435c:	43d2      	mvns	r2, r2
 802435e:	ea4f 2c21 	mov.w	ip, r1, asr #8
 8024362:	fa5f fe82 	uxtb.w	lr, r2
 8024366:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802436a:	10c8      	asrs	r0, r1, #3
 802436c:	00ca      	lsls	r2, r1, #3
 802436e:	fb0c fc0e 	mul.w	ip, ip, lr
 8024372:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8024376:	b2d2      	uxtb	r2, r2
 8024378:	f10c 0101 	add.w	r1, ip, #1
 802437c:	fb00 f00e 	mul.w	r0, r0, lr
 8024380:	fb02 f20e 	mul.w	r2, r2, lr
 8024384:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8024388:	0c39      	lsrs	r1, r7, #16
 802438a:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802438e:	490f      	ldr	r1, [pc, #60]	; (80243cc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 8024390:	fa5f fc8c 	uxtb.w	ip, ip
 8024394:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 8024398:	1c41      	adds	r1, r0, #1
 802439a:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 802439e:	1c51      	adds	r1, r2, #1
 80243a0:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80243a4:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80243a8:	00c0      	lsls	r0, r0, #3
 80243aa:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80243ae:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80243b2:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 80243b6:	ea4c 0c00 	orr.w	ip, ip, r0
 80243ba:	ea47 0c0c 	orr.w	ip, r7, ip
 80243be:	f8a8 c000 	strh.w	ip, [r8]
 80243c2:	e7b7      	b.n	8024334 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 80243c4:	b01b      	add	sp, #108	; 0x6c
 80243c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80243ca:	bf00      	nop
 80243cc:	fffff800 	.word	0xfffff800

080243d0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 80243d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80243d4:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 80243d8:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 80243dc:	2d00      	cmp	r5, #0
 80243de:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80243e2:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 80243e6:	fb05 0e03 	mla	lr, r5, r3, r0
 80243ea:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 80243ee:	f2c0 808c 	blt.w	802450a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 80243f2:	45a9      	cmp	r9, r5
 80243f4:	f340 8089 	ble.w	802450a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 80243f8:	2800      	cmp	r0, #0
 80243fa:	f2c0 8084 	blt.w	8024506 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 80243fe:	4580      	cmp	r8, r0
 8024400:	f340 8081 	ble.w	8024506 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 8024404:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8024408:	f01e 0f01 	tst.w	lr, #1
 802440c:	5d16      	ldrb	r6, [r2, r4]
 802440e:	bf0c      	ite	eq
 8024410:	f006 060f 	andeq.w	r6, r6, #15
 8024414:	1136      	asrne	r6, r6, #4
 8024416:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802441a:	b2f6      	uxtb	r6, r6
 802441c:	1c44      	adds	r4, r0, #1
 802441e:	d477      	bmi.n	8024510 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8024420:	45a0      	cmp	r8, r4
 8024422:	dd75      	ble.n	8024510 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8024424:	2f00      	cmp	r7, #0
 8024426:	d075      	beq.n	8024514 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
 8024428:	f10e 0a01 	add.w	sl, lr, #1
 802442c:	ea4f 045a 	mov.w	r4, sl, lsr #1
 8024430:	f01a 0f01 	tst.w	sl, #1
 8024434:	5d14      	ldrb	r4, [r2, r4]
 8024436:	bf0c      	ite	eq
 8024438:	f004 040f 	andeq.w	r4, r4, #15
 802443c:	1124      	asrne	r4, r4, #4
 802443e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8024442:	b2e4      	uxtb	r4, r4
 8024444:	3501      	adds	r5, #1
 8024446:	d469      	bmi.n	802451c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 8024448:	45a9      	cmp	r9, r5
 802444a:	dd67      	ble.n	802451c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 802444c:	f1bc 0f00 	cmp.w	ip, #0
 8024450:	d067      	beq.n	8024522 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
 8024452:	2800      	cmp	r0, #0
 8024454:	db60      	blt.n	8024518 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 8024456:	4580      	cmp	r8, r0
 8024458:	dd5e      	ble.n	8024518 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 802445a:	eb03 090e 	add.w	r9, r3, lr
 802445e:	ea4f 0559 	mov.w	r5, r9, lsr #1
 8024462:	f019 0f01 	tst.w	r9, #1
 8024466:	5d55      	ldrb	r5, [r2, r5]
 8024468:	bf0c      	ite	eq
 802446a:	f005 050f 	andeq.w	r5, r5, #15
 802446e:	112d      	asrne	r5, r5, #4
 8024470:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8024474:	b2ed      	uxtb	r5, r5
 8024476:	3001      	adds	r0, #1
 8024478:	d456      	bmi.n	8024528 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 802447a:	4580      	cmp	r8, r0
 802447c:	dd54      	ble.n	8024528 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 802447e:	2f00      	cmp	r7, #0
 8024480:	d054      	beq.n	802452c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
 8024482:	3301      	adds	r3, #1
 8024484:	449e      	add	lr, r3
 8024486:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802448a:	f01e 0f01 	tst.w	lr, #1
 802448e:	5cd0      	ldrb	r0, [r2, r3]
 8024490:	bf0c      	ite	eq
 8024492:	f000 000f 	andeq.w	r0, r0, #15
 8024496:	1100      	asrne	r0, r0, #4
 8024498:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802449c:	b2c3      	uxtb	r3, r0
 802449e:	b2ba      	uxth	r2, r7
 80244a0:	fa1f fc8c 	uxth.w	ip, ip
 80244a4:	fb02 f00c 	mul.w	r0, r2, ip
 80244a8:	0112      	lsls	r2, r2, #4
 80244aa:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 80244ae:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 80244b2:	1a12      	subs	r2, r2, r0
 80244b4:	fa1f fc8c 	uxth.w	ip, ip
 80244b8:	b292      	uxth	r2, r2
 80244ba:	eba7 070c 	sub.w	r7, r7, ip
 80244be:	4362      	muls	r2, r4
 80244c0:	b2bf      	uxth	r7, r7
 80244c2:	fb06 2207 	mla	r2, r6, r7, r2
 80244c6:	fb0c 2505 	mla	r5, ip, r5, r2
 80244ca:	fb00 5303 	mla	r3, r0, r3, r5
 80244ce:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80244d2:	b1b3      	cbz	r3, 8024502 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 80244d4:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 80244d8:	435a      	muls	r2, r3
 80244da:	1c53      	adds	r3, r2, #1
 80244dc:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80244e0:	4a2d      	ldr	r2, [pc, #180]	; (8024598 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 80244e2:	121b      	asrs	r3, r3, #8
 80244e4:	6812      	ldr	r2, [r2, #0]
 80244e6:	2bff      	cmp	r3, #255	; 0xff
 80244e8:	ea4f 2612 	mov.w	r6, r2, lsr #8
 80244ec:	d120      	bne.n	8024530 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
 80244ee:	0950      	lsrs	r0, r2, #5
 80244f0:	4b2a      	ldr	r3, [pc, #168]	; (802459c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 80244f2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80244f6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80244fa:	4033      	ands	r3, r6
 80244fc:	4318      	orrs	r0, r3
 80244fe:	4302      	orrs	r2, r0
 8024500:	800a      	strh	r2, [r1, #0]
 8024502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024506:	2600      	movs	r6, #0
 8024508:	e788      	b.n	802441c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
 802450a:	2400      	movs	r4, #0
 802450c:	4626      	mov	r6, r4
 802450e:	e799      	b.n	8024444 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8024510:	2400      	movs	r4, #0
 8024512:	e797      	b.n	8024444 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8024514:	463c      	mov	r4, r7
 8024516:	e795      	b.n	8024444 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8024518:	2500      	movs	r5, #0
 802451a:	e7ac      	b.n	8024476 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
 802451c:	2300      	movs	r3, #0
 802451e:	461d      	mov	r5, r3
 8024520:	e7bd      	b.n	802449e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8024522:	4663      	mov	r3, ip
 8024524:	4665      	mov	r5, ip
 8024526:	e7ba      	b.n	802449e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8024528:	2300      	movs	r3, #0
 802452a:	e7b8      	b.n	802449e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 802452c:	463b      	mov	r3, r7
 802452e:	e7b6      	b.n	802449e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8024530:	880d      	ldrh	r5, [r1, #0]
 8024532:	b29f      	uxth	r7, r3
 8024534:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8024538:	43db      	mvns	r3, r3
 802453a:	122c      	asrs	r4, r5, #8
 802453c:	fb10 f007 	smulbb	r0, r0, r7
 8024540:	b2db      	uxtb	r3, r3
 8024542:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8024546:	b2f6      	uxtb	r6, r6
 8024548:	b2d2      	uxtb	r2, r2
 802454a:	fb04 0403 	mla	r4, r4, r3, r0
 802454e:	10e8      	asrs	r0, r5, #3
 8024550:	fb12 f207 	smulbb	r2, r2, r7
 8024554:	00ed      	lsls	r5, r5, #3
 8024556:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802455a:	b2a4      	uxth	r4, r4
 802455c:	fb16 f607 	smulbb	r6, r6, r7
 8024560:	b2ed      	uxtb	r5, r5
 8024562:	fb00 6603 	mla	r6, r0, r3, r6
 8024566:	fb05 2303 	mla	r3, r5, r3, r2
 802456a:	b2b0      	uxth	r0, r6
 802456c:	b29a      	uxth	r2, r3
 802456e:	1c63      	adds	r3, r4, #1
 8024570:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8024574:	1c53      	adds	r3, r2, #1
 8024576:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802457a:	1c42      	adds	r2, r0, #1
 802457c:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8024580:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8024584:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8024588:	0940      	lsrs	r0, r0, #5
 802458a:	4323      	orrs	r3, r4
 802458c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024590:	4303      	orrs	r3, r0
 8024592:	800b      	strh	r3, [r1, #0]
 8024594:	e7b5      	b.n	8024502 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 8024596:	bf00      	nop
 8024598:	20027bd4 	.word	0x20027bd4
 802459c:	00fff800 	.word	0x00fff800

080245a0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80245a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80245a4:	b097      	sub	sp, #92	; 0x5c
 80245a6:	9214      	str	r2, [sp, #80]	; 0x50
 80245a8:	9309      	str	r3, [sp, #36]	; 0x24
 80245aa:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80245ac:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 80245b0:	9015      	str	r0, [sp, #84]	; 0x54
 80245b2:	910d      	str	r1, [sp, #52]	; 0x34
 80245b4:	6850      	ldr	r0, [r2, #4]
 80245b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80245b8:	6812      	ldr	r2, [r2, #0]
 80245ba:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 80245be:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 80245c2:	fb00 1303 	mla	r3, r0, r3, r1
 80245c6:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 80245ca:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80245cc:	689b      	ldr	r3, [r3, #8]
 80245ce:	3301      	adds	r3, #1
 80245d0:	f023 0301 	bic.w	r3, r3, #1
 80245d4:	930a      	str	r3, [sp, #40]	; 0x28
 80245d6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80245d8:	681f      	ldr	r7, [r3, #0]
 80245da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80245dc:	2b00      	cmp	r3, #0
 80245de:	dc03      	bgt.n	80245e8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80245e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80245e2:	2b00      	cmp	r3, #0
 80245e4:	f340 8289 	ble.w	8024afa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
 80245e8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80245ea:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80245ee:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80245f2:	1e48      	subs	r0, r1, #1
 80245f4:	f102 3cff 	add.w	ip, r2, #4294967295
 80245f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80245fa:	2b00      	cmp	r3, #0
 80245fc:	f340 80c5 	ble.w	802478a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8024600:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8024604:	ea4f 4326 	mov.w	r3, r6, asr #16
 8024608:	d406      	bmi.n	8024618 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802460a:	4586      	cmp	lr, r0
 802460c:	da04      	bge.n	8024618 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802460e:	2b00      	cmp	r3, #0
 8024610:	db02      	blt.n	8024618 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8024612:	4563      	cmp	r3, ip
 8024614:	f2c0 80ba 	blt.w	802478c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 8024618:	f11e 0e01 	adds.w	lr, lr, #1
 802461c:	f100 80ab 	bmi.w	8024776 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8024620:	4571      	cmp	r1, lr
 8024622:	f2c0 80a8 	blt.w	8024776 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8024626:	3301      	adds	r3, #1
 8024628:	f100 80a5 	bmi.w	8024776 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 802462c:	429a      	cmp	r2, r3
 802462e:	f2c0 80a2 	blt.w	8024776 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8024632:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024634:	46c8      	mov	r8, r9
 8024636:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 802463a:	930e      	str	r3, [sp, #56]	; 0x38
 802463c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802463e:	2b00      	cmp	r3, #0
 8024640:	f340 80c4 	ble.w	80247cc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8024644:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024646:	1430      	asrs	r0, r6, #16
 8024648:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802464c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8024650:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8024654:	1423      	asrs	r3, r4, #16
 8024656:	f100 814f 	bmi.w	80248f8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802465a:	f10c 3bff 	add.w	fp, ip, #4294967295
 802465e:	455b      	cmp	r3, fp
 8024660:	f280 814a 	bge.w	80248f8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8024664:	2800      	cmp	r0, #0
 8024666:	f2c0 8147 	blt.w	80248f8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802466a:	f10e 3bff 	add.w	fp, lr, #4294967295
 802466e:	4558      	cmp	r0, fp
 8024670:	f280 8142 	bge.w	80248f8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8024674:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8024676:	fb00 3305 	mla	r3, r0, r5, r3
 802467a:	0858      	lsrs	r0, r3, #1
 802467c:	07dd      	lsls	r5, r3, #31
 802467e:	f817 c000 	ldrb.w	ip, [r7, r0]
 8024682:	bf54      	ite	pl
 8024684:	f00c 0c0f 	andpl.w	ip, ip, #15
 8024688:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802468c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8024690:	fa5f fc8c 	uxtb.w	ip, ip
 8024694:	2a00      	cmp	r2, #0
 8024696:	f000 80dd 	beq.w	8024854 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
 802469a:	1c58      	adds	r0, r3, #1
 802469c:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80246a0:	07c0      	lsls	r0, r0, #31
 80246a2:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80246a6:	bf54      	ite	pl
 80246a8:	f00e 0e0f 	andpl.w	lr, lr, #15
 80246ac:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 80246b0:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 80246b4:	fa5f f08e 	uxtb.w	r0, lr
 80246b8:	9010      	str	r0, [sp, #64]	; 0x40
 80246ba:	b1d9      	cbz	r1, 80246f4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80246bc:	4453      	add	r3, sl
 80246be:	0858      	lsrs	r0, r3, #1
 80246c0:	07dd      	lsls	r5, r3, #31
 80246c2:	f103 0301 	add.w	r3, r3, #1
 80246c6:	5c38      	ldrb	r0, [r7, r0]
 80246c8:	bf54      	ite	pl
 80246ca:	f000 000f 	andpl.w	r0, r0, #15
 80246ce:	1100      	asrmi	r0, r0, #4
 80246d0:	07dd      	lsls	r5, r3, #31
 80246d2:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80246d6:	b2c0      	uxtb	r0, r0
 80246d8:	900b      	str	r0, [sp, #44]	; 0x2c
 80246da:	ea4f 0053 	mov.w	r0, r3, lsr #1
 80246de:	f817 e000 	ldrb.w	lr, [r7, r0]
 80246e2:	bf54      	ite	pl
 80246e4:	f00e 030f 	andpl.w	r3, lr, #15
 80246e8:	ea4f 132e 	movmi.w	r3, lr, asr #4
 80246ec:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80246f0:	b2db      	uxtb	r3, r3
 80246f2:	9311      	str	r3, [sp, #68]	; 0x44
 80246f4:	b292      	uxth	r2, r2
 80246f6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80246f8:	b289      	uxth	r1, r1
 80246fa:	fb02 f301 	mul.w	r3, r2, r1
 80246fe:	0112      	lsls	r2, r2, #4
 8024700:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8024704:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8024708:	1ad2      	subs	r2, r2, r3
 802470a:	b289      	uxth	r1, r1
 802470c:	b292      	uxth	r2, r2
 802470e:	1a40      	subs	r0, r0, r1
 8024710:	436a      	muls	r2, r5
 8024712:	b280      	uxth	r0, r0
 8024714:	fb0c 2c00 	mla	ip, ip, r0, r2
 8024718:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802471a:	fb01 c102 	mla	r1, r1, r2, ip
 802471e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8024720:	fb03 1302 	mla	r3, r3, r2, r1
 8024724:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024728:	b1db      	cbz	r3, 8024762 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802472a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802472c:	4353      	muls	r3, r2
 802472e:	1c5a      	adds	r2, r3, #1
 8024730:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024734:	4ac6      	ldr	r2, [pc, #792]	; (8024a50 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8024736:	121b      	asrs	r3, r3, #8
 8024738:	6812      	ldr	r2, [r2, #0]
 802473a:	2bff      	cmp	r3, #255	; 0xff
 802473c:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8024740:	f040 8099 	bne.w	8024876 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8024744:	0953      	lsrs	r3, r2, #5
 8024746:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 802474a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802474e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024752:	f02c 0c07 	bic.w	ip, ip, #7
 8024756:	ea43 0c0c 	orr.w	ip, r3, ip
 802475a:	ea4c 0202 	orr.w	r2, ip, r2
 802475e:	f8a8 2000 	strh.w	r2, [r8]
 8024762:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8024764:	f108 0802 	add.w	r8, r8, #2
 8024768:	441c      	add	r4, r3
 802476a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802476c:	441e      	add	r6, r3
 802476e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024770:	3b01      	subs	r3, #1
 8024772:	930e      	str	r3, [sp, #56]	; 0x38
 8024774:	e762      	b.n	802463c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8024776:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8024778:	f109 0902 	add.w	r9, r9, #2
 802477c:	441c      	add	r4, r3
 802477e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024780:	441e      	add	r6, r3
 8024782:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024784:	3b01      	subs	r3, #1
 8024786:	9309      	str	r3, [sp, #36]	; 0x24
 8024788:	e736      	b.n	80245f8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 802478a:	d024      	beq.n	80247d6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 802478c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802478e:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8024790:	3b01      	subs	r3, #1
 8024792:	fb00 4003 	mla	r0, r0, r3, r4
 8024796:	1400      	asrs	r0, r0, #16
 8024798:	f53f af4b 	bmi.w	8024632 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802479c:	3901      	subs	r1, #1
 802479e:	4288      	cmp	r0, r1
 80247a0:	f6bf af47 	bge.w	8024632 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80247a4:	9924      	ldr	r1, [sp, #144]	; 0x90
 80247a6:	fb01 6303 	mla	r3, r1, r3, r6
 80247aa:	141b      	asrs	r3, r3, #16
 80247ac:	f53f af41 	bmi.w	8024632 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80247b0:	3a01      	subs	r2, #1
 80247b2:	4293      	cmp	r3, r2
 80247b4:	f6bf af3d 	bge.w	8024632 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80247b8:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 80247bc:	46c8      	mov	r8, r9
 80247be:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80247c2:	930e      	str	r3, [sp, #56]	; 0x38
 80247c4:	f1bb 0f00 	cmp.w	fp, #0
 80247c8:	f300 80b7 	bgt.w	802493a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 80247cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80247ce:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80247d2:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 80247d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80247d8:	2b00      	cmp	r3, #0
 80247da:	f340 818e 	ble.w	8024afa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
 80247de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80247e2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80247e4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80247e8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80247ec:	eef0 6a62 	vmov.f32	s13, s5
 80247f0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80247f4:	ee31 1a05 	vadd.f32	s2, s2, s10
 80247f8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80247fc:	ee16 4a90 	vmov	r4, s13
 8024800:	eef0 6a43 	vmov.f32	s13, s6
 8024804:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024808:	ee16 6a90 	vmov	r6, s13
 802480c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024810:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024814:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024818:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802481c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024820:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024824:	ee12 2a90 	vmov	r2, s5
 8024828:	eef0 2a47 	vmov.f32	s5, s14
 802482c:	fb92 f3f3 	sdiv	r3, r2, r3
 8024830:	ee13 2a10 	vmov	r2, s6
 8024834:	9323      	str	r3, [sp, #140]	; 0x8c
 8024836:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024838:	eeb0 3a67 	vmov.f32	s6, s15
 802483c:	fb92 f3f3 	sdiv	r3, r2, r3
 8024840:	9324      	str	r3, [sp, #144]	; 0x90
 8024842:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024844:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8024846:	3b01      	subs	r3, #1
 8024848:	930d      	str	r3, [sp, #52]	; 0x34
 802484a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802484c:	bf08      	it	eq
 802484e:	4613      	moveq	r3, r2
 8024850:	9309      	str	r3, [sp, #36]	; 0x24
 8024852:	e6c2      	b.n	80245da <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8024854:	2900      	cmp	r1, #0
 8024856:	f43f af4d 	beq.w	80246f4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 802485a:	eb0a 0003 	add.w	r0, sl, r3
 802485e:	0843      	lsrs	r3, r0, #1
 8024860:	07c0      	lsls	r0, r0, #31
 8024862:	5cfb      	ldrb	r3, [r7, r3]
 8024864:	bf54      	ite	pl
 8024866:	f003 030f 	andpl.w	r3, r3, #15
 802486a:	111b      	asrmi	r3, r3, #4
 802486c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8024870:	b2db      	uxtb	r3, r3
 8024872:	930b      	str	r3, [sp, #44]	; 0x2c
 8024874:	e73e      	b.n	80246f4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8024876:	f8b8 e000 	ldrh.w	lr, [r8]
 802487a:	fa1f fb83 	uxth.w	fp, r3
 802487e:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8024882:	43db      	mvns	r3, r3
 8024884:	ea4f 202e 	mov.w	r0, lr, asr #8
 8024888:	fb11 f10b 	smulbb	r1, r1, fp
 802488c:	b2db      	uxtb	r3, r3
 802488e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8024892:	fa5f fc8c 	uxtb.w	ip, ip
 8024896:	b2d2      	uxtb	r2, r2
 8024898:	fb00 1003 	mla	r0, r0, r3, r1
 802489c:	ea4f 01ee 	mov.w	r1, lr, asr #3
 80248a0:	fb1c fc0b 	smulbb	ip, ip, fp
 80248a4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80248a8:	b280      	uxth	r0, r0
 80248aa:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80248ae:	fb12 fb0b 	smulbb	fp, r2, fp
 80248b2:	fa5f fe8e 	uxtb.w	lr, lr
 80248b6:	fb01 cc03 	mla	ip, r1, r3, ip
 80248ba:	fb0e bb03 	mla	fp, lr, r3, fp
 80248be:	1c43      	adds	r3, r0, #1
 80248c0:	fa1f fc8c 	uxth.w	ip, ip
 80248c4:	fa1f fb8b 	uxth.w	fp, fp
 80248c8:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80248cc:	f10c 0101 	add.w	r1, ip, #1
 80248d0:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
 80248d4:	f10b 0001 	add.w	r0, fp, #1
 80248d8:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 80248dc:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 80248e0:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80248e4:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 80248e8:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80248ec:	4318      	orrs	r0, r3
 80248ee:	ea40 000c 	orr.w	r0, r0, ip
 80248f2:	f8a8 0000 	strh.w	r0, [r8]
 80248f6:	e734      	b.n	8024762 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80248f8:	f113 0b01 	adds.w	fp, r3, #1
 80248fc:	f53f af31 	bmi.w	8024762 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8024900:	45dc      	cmp	ip, fp
 8024902:	f6ff af2e 	blt.w	8024762 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8024906:	f110 0b01 	adds.w	fp, r0, #1
 802490a:	f53f af2a 	bmi.w	8024762 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802490e:	45de      	cmp	lr, fp
 8024910:	f6ff af27 	blt.w	8024762 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8024914:	9302      	str	r3, [sp, #8]
 8024916:	fa0f f38e 	sxth.w	r3, lr
 802491a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802491c:	9301      	str	r3, [sp, #4]
 802491e:	fa0f f38c 	sxth.w	r3, ip
 8024922:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8024926:	e9cd 1505 	strd	r1, r5, [sp, #20]
 802492a:	9300      	str	r3, [sp, #0]
 802492c:	463a      	mov	r2, r7
 802492e:	4653      	mov	r3, sl
 8024930:	4641      	mov	r1, r8
 8024932:	9815      	ldr	r0, [sp, #84]	; 0x54
 8024934:	f7ff fd4c 	bl	80243d0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 8024938:	e713      	b.n	8024762 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802493a:	1422      	asrs	r2, r4, #16
 802493c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802493e:	1433      	asrs	r3, r6, #16
 8024940:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8024944:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8024948:	fb05 2303 	mla	r3, r5, r3, r2
 802494c:	085a      	lsrs	r2, r3, #1
 802494e:	07dd      	lsls	r5, r3, #31
 8024950:	5cba      	ldrb	r2, [r7, r2]
 8024952:	bf54      	ite	pl
 8024954:	f002 020f 	andpl.w	r2, r2, #15
 8024958:	1112      	asrmi	r2, r2, #4
 802495a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802495e:	b2d2      	uxtb	r2, r2
 8024960:	2900      	cmp	r1, #0
 8024962:	d077      	beq.n	8024a54 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8024964:	f103 0e01 	add.w	lr, r3, #1
 8024968:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 802496c:	f01e 0f01 	tst.w	lr, #1
 8024970:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8024974:	bf0c      	ite	eq
 8024976:	f00c 0c0f 	andeq.w	ip, ip, #15
 802497a:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 802497e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8024982:	fa5f f58c 	uxtb.w	r5, ip
 8024986:	9512      	str	r5, [sp, #72]	; 0x48
 8024988:	b308      	cbz	r0, 80249ce <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 802498a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802498c:	442b      	add	r3, r5
 802498e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8024992:	07dd      	lsls	r5, r3, #31
 8024994:	f103 0301 	add.w	r3, r3, #1
 8024998:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802499c:	bf54      	ite	pl
 802499e:	f00c 0c0f 	andpl.w	ip, ip, #15
 80249a2:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80249a6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80249aa:	fa5f f58c 	uxtb.w	r5, ip
 80249ae:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80249b2:	950c      	str	r5, [sp, #48]	; 0x30
 80249b4:	07dd      	lsls	r5, r3, #31
 80249b6:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80249ba:	bf54      	ite	pl
 80249bc:	f00c 0c0f 	andpl.w	ip, ip, #15
 80249c0:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80249c4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80249c8:	fa5f f38c 	uxtb.w	r3, ip
 80249cc:	9313      	str	r3, [sp, #76]	; 0x4c
 80249ce:	b289      	uxth	r1, r1
 80249d0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80249d2:	b280      	uxth	r0, r0
 80249d4:	fb01 f300 	mul.w	r3, r1, r0
 80249d8:	0109      	lsls	r1, r1, #4
 80249da:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 80249de:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 80249e2:	1ac9      	subs	r1, r1, r3
 80249e4:	b280      	uxth	r0, r0
 80249e6:	b289      	uxth	r1, r1
 80249e8:	ebac 0c00 	sub.w	ip, ip, r0
 80249ec:	4369      	muls	r1, r5
 80249ee:	fa1f fc8c 	uxth.w	ip, ip
 80249f2:	fb02 120c 	mla	r2, r2, ip, r1
 80249f6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80249f8:	fb00 2001 	mla	r0, r0, r1, r2
 80249fc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80249fe:	fb03 0302 	mla	r3, r3, r2, r0
 8024a02:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024a06:	b1d3      	cbz	r3, 8024a3e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8024a08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024a0a:	4353      	muls	r3, r2
 8024a0c:	1c5a      	adds	r2, r3, #1
 8024a0e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024a12:	4a0f      	ldr	r2, [pc, #60]	; (8024a50 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8024a14:	121b      	asrs	r3, r3, #8
 8024a16:	6812      	ldr	r2, [r2, #0]
 8024a18:	2bff      	cmp	r3, #255	; 0xff
 8024a1a:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8024a1e:	d12d      	bne.n	8024a7c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8024a20:	0953      	lsrs	r3, r2, #5
 8024a22:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8024a26:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8024a2a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024a2e:	f02c 0c07 	bic.w	ip, ip, #7
 8024a32:	ea43 0c0c 	orr.w	ip, r3, ip
 8024a36:	ea4c 0202 	orr.w	r2, ip, r2
 8024a3a:	f8a8 2000 	strh.w	r2, [r8]
 8024a3e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8024a40:	f108 0802 	add.w	r8, r8, #2
 8024a44:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024a48:	441c      	add	r4, r3
 8024a4a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024a4c:	441e      	add	r6, r3
 8024a4e:	e6b9      	b.n	80247c4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8024a50:	20027bd4 	.word	0x20027bd4
 8024a54:	2800      	cmp	r0, #0
 8024a56:	d0ba      	beq.n	80249ce <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8024a58:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8024a5a:	442b      	add	r3, r5
 8024a5c:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8024a60:	07db      	lsls	r3, r3, #31
 8024a62:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8024a66:	bf54      	ite	pl
 8024a68:	f00c 0c0f 	andpl.w	ip, ip, #15
 8024a6c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8024a70:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8024a74:	fa5f f38c 	uxtb.w	r3, ip
 8024a78:	930c      	str	r3, [sp, #48]	; 0x30
 8024a7a:	e7a8      	b.n	80249ce <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8024a7c:	f8b8 e000 	ldrh.w	lr, [r8]
 8024a80:	fa1f fa83 	uxth.w	sl, r3
 8024a84:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8024a88:	43db      	mvns	r3, r3
 8024a8a:	ea4f 202e 	mov.w	r0, lr, asr #8
 8024a8e:	fb11 f10a 	smulbb	r1, r1, sl
 8024a92:	b2db      	uxtb	r3, r3
 8024a94:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8024a98:	b2d2      	uxtb	r2, r2
 8024a9a:	fa5f fc8c 	uxtb.w	ip, ip
 8024a9e:	fb00 1003 	mla	r0, r0, r3, r1
 8024aa2:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8024aa6:	fb12 f20a 	smulbb	r2, r2, sl
 8024aaa:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8024aae:	b280      	uxth	r0, r0
 8024ab0:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8024ab4:	fb1c fc0a 	smulbb	ip, ip, sl
 8024ab8:	fa5f fe8e 	uxtb.w	lr, lr
 8024abc:	fb0e 2203 	mla	r2, lr, r3, r2
 8024ac0:	fb01 cc03 	mla	ip, r1, r3, ip
 8024ac4:	1c43      	adds	r3, r0, #1
 8024ac6:	b292      	uxth	r2, r2
 8024ac8:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8024acc:	1c51      	adds	r1, r2, #1
 8024ace:	fa1f fc8c 	uxth.w	ip, ip
 8024ad2:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8024ad6:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8024ada:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8024ade:	4308      	orrs	r0, r1
 8024ae0:	f10c 0101 	add.w	r1, ip, #1
 8024ae4:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8024ae8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8024aec:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8024af0:	ea40 000c 	orr.w	r0, r0, ip
 8024af4:	f8a8 0000 	strh.w	r0, [r8]
 8024af8:	e7a1      	b.n	8024a3e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8024afa:	b017      	add	sp, #92	; 0x5c
 8024afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024b00 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 8024b00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024b04:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 8024b08:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8024b0c:	2d00      	cmp	r5, #0
 8024b0e:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8024b12:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8024b16:	fb05 0e03 	mla	lr, r5, r3, r0
 8024b1a:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 8024b1e:	f2c0 80b0 	blt.w	8024c82 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 8024b22:	45a9      	cmp	r9, r5
 8024b24:	f340 80ad 	ble.w	8024c82 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 8024b28:	2800      	cmp	r0, #0
 8024b2a:	f2c0 80a8 	blt.w	8024c7e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 8024b2e:	4580      	cmp	r8, r0
 8024b30:	f340 80a5 	ble.w	8024c7e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 8024b34:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8024b38:	f01e 0f01 	tst.w	lr, #1
 8024b3c:	5d16      	ldrb	r6, [r2, r4]
 8024b3e:	bf0c      	ite	eq
 8024b40:	f006 060f 	andeq.w	r6, r6, #15
 8024b44:	1136      	asrne	r6, r6, #4
 8024b46:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8024b4a:	b2f6      	uxtb	r6, r6
 8024b4c:	1c44      	adds	r4, r0, #1
 8024b4e:	f100 809b 	bmi.w	8024c88 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 8024b52:	45a0      	cmp	r8, r4
 8024b54:	f340 8098 	ble.w	8024c88 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 8024b58:	2f00      	cmp	r7, #0
 8024b5a:	f000 8097 	beq.w	8024c8c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
 8024b5e:	f10e 0a01 	add.w	sl, lr, #1
 8024b62:	ea4f 045a 	mov.w	r4, sl, lsr #1
 8024b66:	f01a 0f01 	tst.w	sl, #1
 8024b6a:	5d14      	ldrb	r4, [r2, r4]
 8024b6c:	bf0c      	ite	eq
 8024b6e:	f004 040f 	andeq.w	r4, r4, #15
 8024b72:	1124      	asrne	r4, r4, #4
 8024b74:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8024b78:	b2e4      	uxtb	r4, r4
 8024b7a:	3501      	adds	r5, #1
 8024b7c:	f100 808a 	bmi.w	8024c94 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 8024b80:	45a9      	cmp	r9, r5
 8024b82:	f340 8087 	ble.w	8024c94 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 8024b86:	f1bc 0f00 	cmp.w	ip, #0
 8024b8a:	f000 8086 	beq.w	8024c9a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
 8024b8e:	2800      	cmp	r0, #0
 8024b90:	db7e      	blt.n	8024c90 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 8024b92:	4580      	cmp	r8, r0
 8024b94:	dd7c      	ble.n	8024c90 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 8024b96:	eb03 090e 	add.w	r9, r3, lr
 8024b9a:	ea4f 0559 	mov.w	r5, r9, lsr #1
 8024b9e:	f019 0f01 	tst.w	r9, #1
 8024ba2:	5d55      	ldrb	r5, [r2, r5]
 8024ba4:	bf0c      	ite	eq
 8024ba6:	f005 050f 	andeq.w	r5, r5, #15
 8024baa:	112d      	asrne	r5, r5, #4
 8024bac:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8024bb0:	b2ed      	uxtb	r5, r5
 8024bb2:	3001      	adds	r0, #1
 8024bb4:	d474      	bmi.n	8024ca0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 8024bb6:	4580      	cmp	r8, r0
 8024bb8:	dd72      	ble.n	8024ca0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 8024bba:	2f00      	cmp	r7, #0
 8024bbc:	d072      	beq.n	8024ca4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 8024bbe:	3301      	adds	r3, #1
 8024bc0:	449e      	add	lr, r3
 8024bc2:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8024bc6:	f01e 0f01 	tst.w	lr, #1
 8024bca:	5cd0      	ldrb	r0, [r2, r3]
 8024bcc:	bf0c      	ite	eq
 8024bce:	f000 000f 	andeq.w	r0, r0, #15
 8024bd2:	1100      	asrne	r0, r0, #4
 8024bd4:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8024bd8:	b2c3      	uxtb	r3, r0
 8024bda:	b2ba      	uxth	r2, r7
 8024bdc:	fa1f fc8c 	uxth.w	ip, ip
 8024be0:	fb02 f00c 	mul.w	r0, r2, ip
 8024be4:	0112      	lsls	r2, r2, #4
 8024be6:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8024bea:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8024bee:	1a12      	subs	r2, r2, r0
 8024bf0:	fa1f fc8c 	uxth.w	ip, ip
 8024bf4:	b292      	uxth	r2, r2
 8024bf6:	eba7 070c 	sub.w	r7, r7, ip
 8024bfa:	4362      	muls	r2, r4
 8024bfc:	b2bf      	uxth	r7, r7
 8024bfe:	fb06 2207 	mla	r2, r6, r7, r2
 8024c02:	fb0c 2505 	mla	r5, ip, r5, r2
 8024c06:	fb00 5303 	mla	r3, r0, r3, r5
 8024c0a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024c0e:	b3a3      	cbz	r3, 8024c7a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
 8024c10:	4a25      	ldr	r2, [pc, #148]	; (8024ca8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
 8024c12:	880e      	ldrh	r6, [r1, #0]
 8024c14:	6815      	ldr	r5, [r2, #0]
 8024c16:	b29a      	uxth	r2, r3
 8024c18:	1234      	asrs	r4, r6, #8
 8024c1a:	43db      	mvns	r3, r3
 8024c1c:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8024c20:	f3c5 2707 	ubfx	r7, r5, #8, #8
 8024c24:	b2db      	uxtb	r3, r3
 8024c26:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8024c2a:	fb10 f002 	smulbb	r0, r0, r2
 8024c2e:	b2ed      	uxtb	r5, r5
 8024c30:	fb17 f702 	smulbb	r7, r7, r2
 8024c34:	fb04 0403 	mla	r4, r4, r3, r0
 8024c38:	10f0      	asrs	r0, r6, #3
 8024c3a:	fb15 f202 	smulbb	r2, r5, r2
 8024c3e:	00f6      	lsls	r6, r6, #3
 8024c40:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8024c44:	b2a4      	uxth	r4, r4
 8024c46:	b2f6      	uxtb	r6, r6
 8024c48:	fb00 7003 	mla	r0, r0, r3, r7
 8024c4c:	fb06 2303 	mla	r3, r6, r3, r2
 8024c50:	b280      	uxth	r0, r0
 8024c52:	b29a      	uxth	r2, r3
 8024c54:	1c63      	adds	r3, r4, #1
 8024c56:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8024c5a:	1c53      	adds	r3, r2, #1
 8024c5c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024c60:	1c42      	adds	r2, r0, #1
 8024c62:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8024c66:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8024c6a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8024c6e:	0940      	lsrs	r0, r0, #5
 8024c70:	4323      	orrs	r3, r4
 8024c72:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024c76:	4303      	orrs	r3, r0
 8024c78:	800b      	strh	r3, [r1, #0]
 8024c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024c7e:	2600      	movs	r6, #0
 8024c80:	e764      	b.n	8024b4c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
 8024c82:	2400      	movs	r4, #0
 8024c84:	4626      	mov	r6, r4
 8024c86:	e778      	b.n	8024b7a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8024c88:	2400      	movs	r4, #0
 8024c8a:	e776      	b.n	8024b7a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8024c8c:	463c      	mov	r4, r7
 8024c8e:	e774      	b.n	8024b7a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8024c90:	2500      	movs	r5, #0
 8024c92:	e78e      	b.n	8024bb2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
 8024c94:	2300      	movs	r3, #0
 8024c96:	461d      	mov	r5, r3
 8024c98:	e79f      	b.n	8024bda <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8024c9a:	4663      	mov	r3, ip
 8024c9c:	4665      	mov	r5, ip
 8024c9e:	e79c      	b.n	8024bda <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8024ca0:	2300      	movs	r3, #0
 8024ca2:	e79a      	b.n	8024bda <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8024ca4:	463b      	mov	r3, r7
 8024ca6:	e798      	b.n	8024bda <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8024ca8:	20027bd4 	.word	0x20027bd4

08024cac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024cb0:	b093      	sub	sp, #76	; 0x4c
 8024cb2:	461d      	mov	r5, r3
 8024cb4:	920c      	str	r2, [sp, #48]	; 0x30
 8024cb6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8024cb8:	9011      	str	r0, [sp, #68]	; 0x44
 8024cba:	9107      	str	r1, [sp, #28]
 8024cbc:	6850      	ldr	r0, [r2, #4]
 8024cbe:	6812      	ldr	r2, [r2, #0]
 8024cc0:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8024cc4:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 8024cc8:	fb00 1303 	mla	r3, r0, r3, r1
 8024ccc:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8024cd0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024cd2:	689b      	ldr	r3, [r3, #8]
 8024cd4:	3301      	adds	r3, #1
 8024cd6:	f023 0301 	bic.w	r3, r3, #1
 8024cda:	9306      	str	r3, [sp, #24]
 8024cdc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024cde:	681f      	ldr	r7, [r3, #0]
 8024ce0:	9b07      	ldr	r3, [sp, #28]
 8024ce2:	2b00      	cmp	r3, #0
 8024ce4:	dc03      	bgt.n	8024cee <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8024ce6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024ce8:	2b00      	cmp	r3, #0
 8024cea:	f340 8267 	ble.w	80251bc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 8024cee:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024cf0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024cf4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024cf8:	1e48      	subs	r0, r1, #1
 8024cfa:	f102 3cff 	add.w	ip, r2, #4294967295
 8024cfe:	2d00      	cmp	r5, #0
 8024d00:	f340 80b7 	ble.w	8024e72 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8024d04:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8024d08:	ea4f 4326 	mov.w	r3, r6, asr #16
 8024d0c:	d406      	bmi.n	8024d1c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8024d0e:	4586      	cmp	lr, r0
 8024d10:	da04      	bge.n	8024d1c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8024d12:	2b00      	cmp	r3, #0
 8024d14:	db02      	blt.n	8024d1c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8024d16:	4563      	cmp	r3, ip
 8024d18:	f2c0 80ac 	blt.w	8024e74 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8024d1c:	f11e 0e01 	adds.w	lr, lr, #1
 8024d20:	f100 809f 	bmi.w	8024e62 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8024d24:	4571      	cmp	r1, lr
 8024d26:	f2c0 809c 	blt.w	8024e62 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8024d2a:	3301      	adds	r3, #1
 8024d2c:	f100 8099 	bmi.w	8024e62 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8024d30:	429a      	cmp	r2, r3
 8024d32:	f2c0 8096 	blt.w	8024e62 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8024d36:	46c8      	mov	r8, r9
 8024d38:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 8024d3c:	9509      	str	r5, [sp, #36]	; 0x24
 8024d3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024d40:	2b00      	cmp	r3, #0
 8024d42:	f340 80b5 	ble.w	8024eb0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8024d46:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8024d4a:	1430      	asrs	r0, r6, #16
 8024d4c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8024d50:	9308      	str	r3, [sp, #32]
 8024d52:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024d54:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8024d58:	1423      	asrs	r3, r4, #16
 8024d5a:	f100 813f 	bmi.w	8024fdc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8024d5e:	f10c 3bff 	add.w	fp, ip, #4294967295
 8024d62:	455b      	cmp	r3, fp
 8024d64:	f280 813a 	bge.w	8024fdc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8024d68:	2800      	cmp	r0, #0
 8024d6a:	f2c0 8137 	blt.w	8024fdc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8024d6e:	f10e 3bff 	add.w	fp, lr, #4294967295
 8024d72:	4558      	cmp	r0, fp
 8024d74:	f280 8132 	bge.w	8024fdc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8024d78:	9a06      	ldr	r2, [sp, #24]
 8024d7a:	fb00 3302 	mla	r3, r0, r2, r3
 8024d7e:	0858      	lsrs	r0, r3, #1
 8024d80:	07da      	lsls	r2, r3, #31
 8024d82:	9a08      	ldr	r2, [sp, #32]
 8024d84:	f817 c000 	ldrb.w	ip, [r7, r0]
 8024d88:	bf54      	ite	pl
 8024d8a:	f00c 0c0f 	andpl.w	ip, ip, #15
 8024d8e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8024d92:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8024d96:	fa5f fc8c 	uxtb.w	ip, ip
 8024d9a:	2a00      	cmp	r2, #0
 8024d9c:	f000 80cc 	beq.w	8024f38 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8024da0:	1c58      	adds	r0, r3, #1
 8024da2:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8024da6:	07c0      	lsls	r0, r0, #31
 8024da8:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8024dac:	bf54      	ite	pl
 8024dae:	f00e 0e0f 	andpl.w	lr, lr, #15
 8024db2:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8024db6:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8024dba:	fa5f fe8e 	uxtb.w	lr, lr
 8024dbe:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8024dc2:	b1b9      	cbz	r1, 8024df4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8024dc4:	4453      	add	r3, sl
 8024dc6:	0858      	lsrs	r0, r3, #1
 8024dc8:	07da      	lsls	r2, r3, #31
 8024dca:	5c38      	ldrb	r0, [r7, r0]
 8024dcc:	bf54      	ite	pl
 8024dce:	f000 000f 	andpl.w	r0, r0, #15
 8024dd2:	1100      	asrmi	r0, r0, #4
 8024dd4:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8024dd8:	b2c0      	uxtb	r0, r0
 8024dda:	900a      	str	r0, [sp, #40]	; 0x28
 8024ddc:	1c58      	adds	r0, r3, #1
 8024dde:	0843      	lsrs	r3, r0, #1
 8024de0:	07c2      	lsls	r2, r0, #31
 8024de2:	5cfb      	ldrb	r3, [r7, r3]
 8024de4:	bf54      	ite	pl
 8024de6:	f003 030f 	andpl.w	r3, r3, #15
 8024dea:	111b      	asrmi	r3, r3, #4
 8024dec:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8024df0:	b2db      	uxtb	r3, r3
 8024df2:	930e      	str	r3, [sp, #56]	; 0x38
 8024df4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8024df8:	b289      	uxth	r1, r1
 8024dfa:	fb02 f301 	mul.w	r3, r2, r1
 8024dfe:	0112      	lsls	r2, r2, #4
 8024e00:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8024e04:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8024e08:	1ad2      	subs	r2, r2, r3
 8024e0a:	b289      	uxth	r1, r1
 8024e0c:	b292      	uxth	r2, r2
 8024e0e:	1a40      	subs	r0, r0, r1
 8024e10:	fa1f fe80 	uxth.w	lr, r0
 8024e14:	980d      	ldr	r0, [sp, #52]	; 0x34
 8024e16:	4342      	muls	r2, r0
 8024e18:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8024e1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024e1e:	fb01 c102 	mla	r1, r1, r2, ip
 8024e22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024e24:	fb03 1302 	mla	r3, r3, r2, r1
 8024e28:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024e2c:	2bff      	cmp	r3, #255	; 0xff
 8024e2e:	f040 8094 	bne.w	8024f5a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 8024e32:	4bbf      	ldr	r3, [pc, #764]	; (8025130 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8024e34:	681a      	ldr	r2, [r3, #0]
 8024e36:	4bbf      	ldr	r3, [pc, #764]	; (8025134 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 8024e38:	0951      	lsrs	r1, r2, #5
 8024e3a:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 8024e3e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8024e42:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8024e46:	430b      	orrs	r3, r1
 8024e48:	4313      	orrs	r3, r2
 8024e4a:	f8a8 3000 	strh.w	r3, [r8]
 8024e4e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8024e50:	f108 0802 	add.w	r8, r8, #2
 8024e54:	441c      	add	r4, r3
 8024e56:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024e58:	441e      	add	r6, r3
 8024e5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024e5c:	3b01      	subs	r3, #1
 8024e5e:	9309      	str	r3, [sp, #36]	; 0x24
 8024e60:	e76d      	b.n	8024d3e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024e62:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8024e64:	3d01      	subs	r5, #1
 8024e66:	f109 0902 	add.w	r9, r9, #2
 8024e6a:	441c      	add	r4, r3
 8024e6c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024e6e:	441e      	add	r6, r3
 8024e70:	e745      	b.n	8024cfe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8024e72:	d021      	beq.n	8024eb8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8024e74:	1e6b      	subs	r3, r5, #1
 8024e76:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8024e78:	fb00 4003 	mla	r0, r0, r3, r4
 8024e7c:	1400      	asrs	r0, r0, #16
 8024e7e:	f53f af5a 	bmi.w	8024d36 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8024e82:	3901      	subs	r1, #1
 8024e84:	4288      	cmp	r0, r1
 8024e86:	f6bf af56 	bge.w	8024d36 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8024e8a:	9920      	ldr	r1, [sp, #128]	; 0x80
 8024e8c:	fb01 6303 	mla	r3, r1, r3, r6
 8024e90:	141b      	asrs	r3, r3, #16
 8024e92:	f53f af50 	bmi.w	8024d36 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8024e96:	3a01      	subs	r2, #1
 8024e98:	4293      	cmp	r3, r2
 8024e9a:	f6bf af4c 	bge.w	8024d36 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8024e9e:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8024ea2:	46a8      	mov	r8, r5
 8024ea4:	46ce      	mov	lr, r9
 8024ea6:	9308      	str	r3, [sp, #32]
 8024ea8:	f1b8 0f00 	cmp.w	r8, #0
 8024eac:	f300 80b6 	bgt.w	802501c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8024eb0:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8024eb4:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8024eb8:	9b07      	ldr	r3, [sp, #28]
 8024eba:	2b00      	cmp	r3, #0
 8024ebc:	f340 817e 	ble.w	80251bc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 8024ec0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024ec4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8024ec6:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024eca:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024ece:	eef0 6a62 	vmov.f32	s13, s5
 8024ed2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024ed6:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024eda:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024ede:	ee16 4a90 	vmov	r4, s13
 8024ee2:	eef0 6a43 	vmov.f32	s13, s6
 8024ee6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024eea:	ee16 6a90 	vmov	r6, s13
 8024eee:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024ef2:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024ef6:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024efa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024efe:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024f02:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024f06:	ee12 2a90 	vmov	r2, s5
 8024f0a:	eef0 2a47 	vmov.f32	s5, s14
 8024f0e:	fb92 f3f3 	sdiv	r3, r2, r3
 8024f12:	ee13 2a10 	vmov	r2, s6
 8024f16:	931f      	str	r3, [sp, #124]	; 0x7c
 8024f18:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8024f1a:	eeb0 3a67 	vmov.f32	s6, s15
 8024f1e:	fb92 f3f3 	sdiv	r3, r2, r3
 8024f22:	9320      	str	r3, [sp, #128]	; 0x80
 8024f24:	9b07      	ldr	r3, [sp, #28]
 8024f26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024f28:	3b01      	subs	r3, #1
 8024f2a:	9307      	str	r3, [sp, #28]
 8024f2c:	bf08      	it	eq
 8024f2e:	4615      	moveq	r5, r2
 8024f30:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8024f32:	bf18      	it	ne
 8024f34:	461d      	movne	r5, r3
 8024f36:	e6d3      	b.n	8024ce0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8024f38:	2900      	cmp	r1, #0
 8024f3a:	f43f af5b 	beq.w	8024df4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8024f3e:	eb0a 0003 	add.w	r0, sl, r3
 8024f42:	0843      	lsrs	r3, r0, #1
 8024f44:	07c0      	lsls	r0, r0, #31
 8024f46:	5cfb      	ldrb	r3, [r7, r3]
 8024f48:	bf54      	ite	pl
 8024f4a:	f003 030f 	andpl.w	r3, r3, #15
 8024f4e:	111b      	asrmi	r3, r3, #4
 8024f50:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8024f54:	b2db      	uxtb	r3, r3
 8024f56:	930a      	str	r3, [sp, #40]	; 0x28
 8024f58:	e74c      	b.n	8024df4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8024f5a:	2b00      	cmp	r3, #0
 8024f5c:	f43f af77 	beq.w	8024e4e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8024f60:	4a73      	ldr	r2, [pc, #460]	; (8025130 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8024f62:	fa1f fe83 	uxth.w	lr, r3
 8024f66:	f8b8 c000 	ldrh.w	ip, [r8]
 8024f6a:	43db      	mvns	r3, r3
 8024f6c:	6810      	ldr	r0, [r2, #0]
 8024f6e:	ea4f 212c 	mov.w	r1, ip, asr #8
 8024f72:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8024f76:	b2db      	uxtb	r3, r3
 8024f78:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8024f7c:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 8024f80:	fb12 f20e 	smulbb	r2, r2, lr
 8024f84:	b2c0      	uxtb	r0, r0
 8024f86:	fb1b fb0e 	smulbb	fp, fp, lr
 8024f8a:	fb01 2103 	mla	r1, r1, r3, r2
 8024f8e:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8024f92:	fb10 fe0e 	smulbb	lr, r0, lr
 8024f96:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8024f9a:	b289      	uxth	r1, r1
 8024f9c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8024fa0:	fa5f fc8c 	uxtb.w	ip, ip
 8024fa4:	fb02 b203 	mla	r2, r2, r3, fp
 8024fa8:	1c48      	adds	r0, r1, #1
 8024faa:	fb0c e303 	mla	r3, ip, r3, lr
 8024fae:	b292      	uxth	r2, r2
 8024fb0:	b29b      	uxth	r3, r3
 8024fb2:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8024fb6:	f102 0b01 	add.w	fp, r2, #1
 8024fba:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 8024fbe:	1c59      	adds	r1, r3, #1
 8024fc0:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8024fc4:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8024fc8:	0952      	lsrs	r2, r2, #5
 8024fca:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8024fce:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024fd2:	4301      	orrs	r1, r0
 8024fd4:	4311      	orrs	r1, r2
 8024fd6:	f8a8 1000 	strh.w	r1, [r8]
 8024fda:	e738      	b.n	8024e4e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8024fdc:	f113 0b01 	adds.w	fp, r3, #1
 8024fe0:	f53f af35 	bmi.w	8024e4e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8024fe4:	45dc      	cmp	ip, fp
 8024fe6:	f6ff af32 	blt.w	8024e4e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8024fea:	f110 0b01 	adds.w	fp, r0, #1
 8024fee:	f53f af2e 	bmi.w	8024e4e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8024ff2:	45de      	cmp	lr, fp
 8024ff4:	f6ff af2b 	blt.w	8024e4e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8024ff8:	9302      	str	r3, [sp, #8]
 8024ffa:	fa0f f38e 	sxth.w	r3, lr
 8024ffe:	9a08      	ldr	r2, [sp, #32]
 8025000:	9301      	str	r3, [sp, #4]
 8025002:	fa0f f38c 	sxth.w	r3, ip
 8025006:	9105      	str	r1, [sp, #20]
 8025008:	4641      	mov	r1, r8
 802500a:	9300      	str	r3, [sp, #0]
 802500c:	4653      	mov	r3, sl
 802500e:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8025012:	463a      	mov	r2, r7
 8025014:	9811      	ldr	r0, [sp, #68]	; 0x44
 8025016:	f7ff fd73 	bl	8024b00 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 802501a:	e718      	b.n	8024e4e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802501c:	1422      	asrs	r2, r4, #16
 802501e:	9906      	ldr	r1, [sp, #24]
 8025020:	1433      	asrs	r3, r6, #16
 8025022:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8025026:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802502a:	fb01 2303 	mla	r3, r1, r3, r2
 802502e:	085a      	lsrs	r2, r3, #1
 8025030:	07d9      	lsls	r1, r3, #31
 8025032:	5cba      	ldrb	r2, [r7, r2]
 8025034:	bf54      	ite	pl
 8025036:	f002 020f 	andpl.w	r2, r2, #15
 802503a:	1112      	asrmi	r2, r2, #4
 802503c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8025040:	b2d2      	uxtb	r2, r2
 8025042:	2800      	cmp	r0, #0
 8025044:	d063      	beq.n	802510e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 8025046:	f103 0a01 	add.w	sl, r3, #1
 802504a:	ea4f 015a 	mov.w	r1, sl, lsr #1
 802504e:	f01a 0f01 	tst.w	sl, #1
 8025052:	5c79      	ldrb	r1, [r7, r1]
 8025054:	bf0c      	ite	eq
 8025056:	f001 010f 	andeq.w	r1, r1, #15
 802505a:	1109      	asrne	r1, r1, #4
 802505c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8025060:	b2c9      	uxtb	r1, r1
 8025062:	910f      	str	r1, [sp, #60]	; 0x3c
 8025064:	f1bc 0f00 	cmp.w	ip, #0
 8025068:	d01a      	beq.n	80250a0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 802506a:	9908      	ldr	r1, [sp, #32]
 802506c:	440b      	add	r3, r1
 802506e:	0859      	lsrs	r1, r3, #1
 8025070:	f013 0f01 	tst.w	r3, #1
 8025074:	f103 0301 	add.w	r3, r3, #1
 8025078:	5c79      	ldrb	r1, [r7, r1]
 802507a:	bf0c      	ite	eq
 802507c:	f001 010f 	andeq.w	r1, r1, #15
 8025080:	1109      	asrne	r1, r1, #4
 8025082:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8025086:	b2c9      	uxtb	r1, r1
 8025088:	910b      	str	r1, [sp, #44]	; 0x2c
 802508a:	0859      	lsrs	r1, r3, #1
 802508c:	07db      	lsls	r3, r3, #31
 802508e:	5c79      	ldrb	r1, [r7, r1]
 8025090:	bf54      	ite	pl
 8025092:	f001 010f 	andpl.w	r1, r1, #15
 8025096:	1109      	asrmi	r1, r1, #4
 8025098:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802509c:	b2c9      	uxtb	r1, r1
 802509e:	9110      	str	r1, [sp, #64]	; 0x40
 80250a0:	b280      	uxth	r0, r0
 80250a2:	fa1f fc8c 	uxth.w	ip, ip
 80250a6:	fb00 f30c 	mul.w	r3, r0, ip
 80250aa:	0100      	lsls	r0, r0, #4
 80250ac:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 80250b0:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 80250b4:	1ac0      	subs	r0, r0, r3
 80250b6:	fa1f fc8c 	uxth.w	ip, ip
 80250ba:	b280      	uxth	r0, r0
 80250bc:	eba1 010c 	sub.w	r1, r1, ip
 80250c0:	fa1f fa81 	uxth.w	sl, r1
 80250c4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80250c6:	4348      	muls	r0, r1
 80250c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80250ca:	fb02 020a 	mla	r2, r2, sl, r0
 80250ce:	fb0c 2c01 	mla	ip, ip, r1, r2
 80250d2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80250d4:	fb03 c302 	mla	r3, r3, r2, ip
 80250d8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80250dc:	2bff      	cmp	r3, #255	; 0xff
 80250de:	d12b      	bne.n	8025138 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 80250e0:	4b13      	ldr	r3, [pc, #76]	; (8025130 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 80250e2:	681a      	ldr	r2, [r3, #0]
 80250e4:	4b13      	ldr	r3, [pc, #76]	; (8025134 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 80250e6:	0951      	lsrs	r1, r2, #5
 80250e8:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 80250ec:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80250f0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80250f4:	430b      	orrs	r3, r1
 80250f6:	4313      	orrs	r3, r2
 80250f8:	f8ae 3000 	strh.w	r3, [lr]
 80250fc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80250fe:	f10e 0e02 	add.w	lr, lr, #2
 8025102:	f108 38ff 	add.w	r8, r8, #4294967295
 8025106:	441c      	add	r4, r3
 8025108:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802510a:	441e      	add	r6, r3
 802510c:	e6cc      	b.n	8024ea8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 802510e:	f1bc 0f00 	cmp.w	ip, #0
 8025112:	d0c5      	beq.n	80250a0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8025114:	9908      	ldr	r1, [sp, #32]
 8025116:	440b      	add	r3, r1
 8025118:	0859      	lsrs	r1, r3, #1
 802511a:	07db      	lsls	r3, r3, #31
 802511c:	5c79      	ldrb	r1, [r7, r1]
 802511e:	bf54      	ite	pl
 8025120:	f001 010f 	andpl.w	r1, r1, #15
 8025124:	1109      	asrmi	r1, r1, #4
 8025126:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802512a:	b2c9      	uxtb	r1, r1
 802512c:	910b      	str	r1, [sp, #44]	; 0x2c
 802512e:	e7b7      	b.n	80250a0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8025130:	20027bd4 	.word	0x20027bd4
 8025134:	fffff800 	.word	0xfffff800
 8025138:	2b00      	cmp	r3, #0
 802513a:	d0df      	beq.n	80250fc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 802513c:	4a21      	ldr	r2, [pc, #132]	; (80251c4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>)
 802513e:	fa1f fa83 	uxth.w	sl, r3
 8025142:	f8be c000 	ldrh.w	ip, [lr]
 8025146:	43db      	mvns	r3, r3
 8025148:	6810      	ldr	r0, [r2, #0]
 802514a:	ea4f 212c 	mov.w	r1, ip, asr #8
 802514e:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8025152:	b2db      	uxtb	r3, r3
 8025154:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8025158:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 802515c:	fb12 f20a 	smulbb	r2, r2, sl
 8025160:	b2c0      	uxtb	r0, r0
 8025162:	fb1b fb0a 	smulbb	fp, fp, sl
 8025166:	fb01 2103 	mla	r1, r1, r3, r2
 802516a:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802516e:	fb10 f00a 	smulbb	r0, r0, sl
 8025172:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8025176:	b289      	uxth	r1, r1
 8025178:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802517c:	fa5f fc8c 	uxtb.w	ip, ip
 8025180:	fb02 b203 	mla	r2, r2, r3, fp
 8025184:	fb0c 0003 	mla	r0, ip, r3, r0
 8025188:	1c4b      	adds	r3, r1, #1
 802518a:	b292      	uxth	r2, r2
 802518c:	b280      	uxth	r0, r0
 802518e:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8025192:	f100 0b01 	add.w	fp, r0, #1
 8025196:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 802519a:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 802519e:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 80251a2:	ea4b 0101 	orr.w	r1, fp, r1
 80251a6:	f102 0b01 	add.w	fp, r2, #1
 80251aa:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 80251ae:	0952      	lsrs	r2, r2, #5
 80251b0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80251b4:	4311      	orrs	r1, r2
 80251b6:	f8ae 1000 	strh.w	r1, [lr]
 80251ba:	e79f      	b.n	80250fc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 80251bc:	b013      	add	sp, #76	; 0x4c
 80251be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80251c2:	bf00      	nop
 80251c4:	20027bd4 	.word	0x20027bd4

080251c8 <CRC_Lock>:
 80251c8:	4a20      	ldr	r2, [pc, #128]	; (802524c <CRC_Lock+0x84>)
 80251ca:	b530      	push	{r4, r5, lr}
 80251cc:	6813      	ldr	r3, [r2, #0]
 80251ce:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 80251d2:	f24c 2540 	movw	r5, #49728	; 0xc240
 80251d6:	f023 0301 	bic.w	r3, r3, #1
 80251da:	6013      	str	r3, [r2, #0]
 80251dc:	4b1c      	ldr	r3, [pc, #112]	; (8025250 <CRC_Lock+0x88>)
 80251de:	681a      	ldr	r2, [r3, #0]
 80251e0:	4022      	ands	r2, r4
 80251e2:	42aa      	cmp	r2, r5
 80251e4:	d005      	beq.n	80251f2 <CRC_Lock+0x2a>
 80251e6:	681b      	ldr	r3, [r3, #0]
 80251e8:	f24c 2270 	movw	r2, #49776	; 0xc270
 80251ec:	4023      	ands	r3, r4
 80251ee:	4293      	cmp	r3, r2
 80251f0:	d124      	bne.n	802523c <CRC_Lock+0x74>
 80251f2:	4b18      	ldr	r3, [pc, #96]	; (8025254 <CRC_Lock+0x8c>)
 80251f4:	681b      	ldr	r3, [r3, #0]
 80251f6:	bb0b      	cbnz	r3, 802523c <CRC_Lock+0x74>
 80251f8:	4b17      	ldr	r3, [pc, #92]	; (8025258 <CRC_Lock+0x90>)
 80251fa:	681a      	ldr	r2, [r3, #0]
 80251fc:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8025200:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8025204:	d00d      	beq.n	8025222 <CRC_Lock+0x5a>
 8025206:	681a      	ldr	r2, [r3, #0]
 8025208:	f240 4483 	movw	r4, #1155	; 0x483
 802520c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8025210:	42a2      	cmp	r2, r4
 8025212:	d006      	beq.n	8025222 <CRC_Lock+0x5a>
 8025214:	681b      	ldr	r3, [r3, #0]
 8025216:	f240 4285 	movw	r2, #1157	; 0x485
 802521a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802521e:	4293      	cmp	r3, r2
 8025220:	d10c      	bne.n	802523c <CRC_Lock+0x74>
 8025222:	4b0e      	ldr	r3, [pc, #56]	; (802525c <CRC_Lock+0x94>)
 8025224:	2201      	movs	r2, #1
 8025226:	601a      	str	r2, [r3, #0]
 8025228:	681a      	ldr	r2, [r3, #0]
 802522a:	2a00      	cmp	r2, #0
 802522c:	d1fc      	bne.n	8025228 <CRC_Lock+0x60>
 802522e:	4b0c      	ldr	r3, [pc, #48]	; (8025260 <CRC_Lock+0x98>)
 8025230:	6018      	str	r0, [r3, #0]
 8025232:	6818      	ldr	r0, [r3, #0]
 8025234:	1a43      	subs	r3, r0, r1
 8025236:	4258      	negs	r0, r3
 8025238:	4158      	adcs	r0, r3
 802523a:	bd30      	pop	{r4, r5, pc}
 802523c:	4b09      	ldr	r3, [pc, #36]	; (8025264 <CRC_Lock+0x9c>)
 802523e:	2201      	movs	r2, #1
 8025240:	601a      	str	r2, [r3, #0]
 8025242:	681a      	ldr	r2, [r3, #0]
 8025244:	2a00      	cmp	r2, #0
 8025246:	d1fc      	bne.n	8025242 <CRC_Lock+0x7a>
 8025248:	4b07      	ldr	r3, [pc, #28]	; (8025268 <CRC_Lock+0xa0>)
 802524a:	e7f1      	b.n	8025230 <CRC_Lock+0x68>
 802524c:	e0002000 	.word	0xe0002000
 8025250:	e000ed00 	.word	0xe000ed00
 8025254:	e0042000 	.word	0xe0042000
 8025258:	5c001000 	.word	0x5c001000
 802525c:	58024c08 	.word	0x58024c08
 8025260:	58024c00 	.word	0x58024c00
 8025264:	40023008 	.word	0x40023008
 8025268:	40023000 	.word	0x40023000

0802526c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 802526c:	6101      	str	r1, [r0, #16]
 802526e:	4770      	bx	lr

08025270 <_ZN8touchgfx8Gestures4tickEv>:
 8025270:	7b83      	ldrb	r3, [r0, #14]
 8025272:	b14b      	cbz	r3, 8025288 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8025274:	8903      	ldrh	r3, [r0, #8]
 8025276:	3301      	adds	r3, #1
 8025278:	b29b      	uxth	r3, r3
 802527a:	2b07      	cmp	r3, #7
 802527c:	8103      	strh	r3, [r0, #8]
 802527e:	bf81      	itttt	hi
 8025280:	2300      	movhi	r3, #0
 8025282:	8143      	strhhi	r3, [r0, #10]
 8025284:	8183      	strhhi	r3, [r0, #12]
 8025286:	7383      	strbhi	r3, [r0, #14]
 8025288:	4770      	bx	lr
	...

0802528c <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 802528c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8025290:	4698      	mov	r8, r3
 8025292:	8883      	ldrh	r3, [r0, #4]
 8025294:	4604      	mov	r4, r0
 8025296:	4617      	mov	r7, r2
 8025298:	f8ad 3006 	strh.w	r3, [sp, #6]
 802529c:	eba8 0303 	sub.w	r3, r8, r3
 80252a0:	4a19      	ldr	r2, [pc, #100]	; (8025308 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 80252a2:	460e      	mov	r6, r1
 80252a4:	b21b      	sxth	r3, r3
 80252a6:	88c1      	ldrh	r1, [r0, #6]
 80252a8:	9200      	str	r2, [sp, #0]
 80252aa:	2000      	movs	r0, #0
 80252ac:	2b00      	cmp	r3, #0
 80252ae:	8aa2      	ldrh	r2, [r4, #20]
 80252b0:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 80252b4:	bfb8      	it	lt
 80252b6:	425b      	neglt	r3, r3
 80252b8:	f88d 0004 	strb.w	r0, [sp, #4]
 80252bc:	f8ad 1008 	strh.w	r1, [sp, #8]
 80252c0:	b21b      	sxth	r3, r3
 80252c2:	f8ad 800a 	strh.w	r8, [sp, #10]
 80252c6:	f8ad 500c 	strh.w	r5, [sp, #12]
 80252ca:	4293      	cmp	r3, r2
 80252cc:	dc07      	bgt.n	80252de <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 80252ce:	1a69      	subs	r1, r5, r1
 80252d0:	b209      	sxth	r1, r1
 80252d2:	2900      	cmp	r1, #0
 80252d4:	bfb8      	it	lt
 80252d6:	4249      	neglt	r1, r1
 80252d8:	b209      	sxth	r1, r1
 80252da:	428a      	cmp	r2, r1
 80252dc:	da10      	bge.n	8025300 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 80252de:	6920      	ldr	r0, [r4, #16]
 80252e0:	4669      	mov	r1, sp
 80252e2:	eba8 0606 	sub.w	r6, r8, r6
 80252e6:	1bef      	subs	r7, r5, r7
 80252e8:	6803      	ldr	r3, [r0, #0]
 80252ea:	685b      	ldr	r3, [r3, #4]
 80252ec:	4798      	blx	r3
 80252ee:	2300      	movs	r3, #0
 80252f0:	2001      	movs	r0, #1
 80252f2:	8166      	strh	r6, [r4, #10]
 80252f4:	8123      	strh	r3, [r4, #8]
 80252f6:	81a7      	strh	r7, [r4, #12]
 80252f8:	f8a4 8004 	strh.w	r8, [r4, #4]
 80252fc:	80e5      	strh	r5, [r4, #6]
 80252fe:	73a0      	strb	r0, [r4, #14]
 8025300:	b004      	add	sp, #16
 8025302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025306:	bf00      	nop
 8025308:	0802b374 	.word	0x0802b374

0802530c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 802530c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802530e:	461e      	mov	r6, r3
 8025310:	1e4b      	subs	r3, r1, #1
 8025312:	b085      	sub	sp, #20
 8025314:	4604      	mov	r4, r0
 8025316:	2b01      	cmp	r3, #1
 8025318:	460d      	mov	r5, r1
 802531a:	4617      	mov	r7, r2
 802531c:	d84b      	bhi.n	80253b6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 802531e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8025322:	1cd3      	adds	r3, r2, #3
 8025324:	b29b      	uxth	r3, r3
 8025326:	2b06      	cmp	r3, #6
 8025328:	d916      	bls.n	8025358 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802532a:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 80253cc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802532e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8025332:	f8cd c004 	str.w	ip, [sp, #4]
 8025336:	f04f 0c00 	mov.w	ip, #0
 802533a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802533e:	6900      	ldr	r0, [r0, #16]
 8025340:	f8ad 100c 	strh.w	r1, [sp, #12]
 8025344:	a901      	add	r1, sp, #4
 8025346:	f88d c008 	strb.w	ip, [sp, #8]
 802534a:	f8ad 200a 	strh.w	r2, [sp, #10]
 802534e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8025352:	6803      	ldr	r3, [r0, #0]
 8025354:	689b      	ldr	r3, [r3, #8]
 8025356:	4798      	blx	r3
 8025358:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802535c:	1cd3      	adds	r3, r2, #3
 802535e:	b29b      	uxth	r3, r3
 8025360:	2b06      	cmp	r3, #6
 8025362:	d916      	bls.n	8025392 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8025364:	f8df c064 	ldr.w	ip, [pc, #100]	; 80253cc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8025368:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802536c:	f8cd c004 	str.w	ip, [sp, #4]
 8025370:	f04f 0c01 	mov.w	ip, #1
 8025374:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8025378:	6920      	ldr	r0, [r4, #16]
 802537a:	f8ad 100c 	strh.w	r1, [sp, #12]
 802537e:	a901      	add	r1, sp, #4
 8025380:	f88d c008 	strb.w	ip, [sp, #8]
 8025384:	f8ad 200a 	strh.w	r2, [sp, #10]
 8025388:	f8ad 300e 	strh.w	r3, [sp, #14]
 802538c:	6803      	ldr	r3, [r0, #0]
 802538e:	689b      	ldr	r3, [r3, #8]
 8025390:	4798      	blx	r3
 8025392:	4b0d      	ldr	r3, [pc, #52]	; (80253c8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8025394:	a901      	add	r1, sp, #4
 8025396:	6920      	ldr	r0, [r4, #16]
 8025398:	9301      	str	r3, [sp, #4]
 802539a:	2300      	movs	r3, #0
 802539c:	f88d 5008 	strb.w	r5, [sp, #8]
 80253a0:	f8ad 700a 	strh.w	r7, [sp, #10]
 80253a4:	f8ad 600c 	strh.w	r6, [sp, #12]
 80253a8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80253ac:	6803      	ldr	r3, [r0, #0]
 80253ae:	681b      	ldr	r3, [r3, #0]
 80253b0:	4798      	blx	r3
 80253b2:	b005      	add	sp, #20
 80253b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80253b6:	2900      	cmp	r1, #0
 80253b8:	d1eb      	bne.n	8025392 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80253ba:	80a2      	strh	r2, [r4, #4]
 80253bc:	80c6      	strh	r6, [r0, #6]
 80253be:	60a1      	str	r1, [r4, #8]
 80253c0:	81a1      	strh	r1, [r4, #12]
 80253c2:	73a1      	strb	r1, [r4, #14]
 80253c4:	e7e5      	b.n	8025392 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80253c6:	bf00      	nop
 80253c8:	0802b360 	.word	0x0802b360
 80253cc:	0802b388 	.word	0x0802b388

080253d0 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>:
 80253d0:	10c9      	asrs	r1, r1, #3
 80253d2:	2900      	cmp	r1, #0
 80253d4:	bfb8      	it	lt
 80253d6:	4249      	neglt	r1, r1
 80253d8:	2801      	cmp	r0, #1
 80253da:	d108      	bne.n	80253ee <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
 80253dc:	f3c1 0008 	ubfx	r0, r1, #0, #9
 80253e0:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80253e4:	4601      	mov	r1, r0
 80253e6:	dd02      	ble.n	80253ee <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
 80253e8:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 80253ec:	4770      	bx	lr
 80253ee:	29ff      	cmp	r1, #255	; 0xff
 80253f0:	bfa8      	it	ge
 80253f2:	21ff      	movge	r1, #255	; 0xff
 80253f4:	4608      	mov	r0, r1
 80253f6:	4770      	bx	lr

080253f8 <_ZN8touchgfx10Rasterizer6lineToEii>:
 80253f8:	b410      	push	{r4}
 80253fa:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 80253fe:	429c      	cmp	r4, r3
 8025400:	d803      	bhi.n	802540a <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 8025402:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025406:	f7ef b871 	b.w	80144ec <_ZN8touchgfx7Outline6lineToEii>
 802540a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802540e:	4770      	bx	lr

08025410 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 8025410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025414:	b08b      	sub	sp, #44	; 0x2c
 8025416:	4606      	mov	r6, r0
 8025418:	468a      	mov	sl, r1
 802541a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 802541e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8025422:	9308      	str	r3, [sp, #32]
 8025424:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8025428:	9309      	str	r3, [sp, #36]	; 0x24
 802542a:	f7ef f9ca 	bl	80147c2 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 802542e:	68b5      	ldr	r5, [r6, #8]
 8025430:	4604      	mov	r4, r0
 8025432:	2d00      	cmp	r5, #0
 8025434:	d044      	beq.n	80254c0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8025436:	6873      	ldr	r3, [r6, #4]
 8025438:	42ab      	cmp	r3, r5
 802543a:	d33d      	bcc.n	80254b8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 802543c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8025440:	f04f 0800 	mov.w	r8, #0
 8025444:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	; 0x34
 8025448:	eb02 0b03 	add.w	fp, r2, r3
 802544c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8025450:	fb02 1203 	mla	r2, r2, r3, r1
 8025454:	9205      	str	r2, [sp, #20]
 8025456:	1e6a      	subs	r2, r5, #1
 8025458:	9204      	str	r2, [sp, #16]
 802545a:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 802545e:	f9b4 7000 	ldrsh.w	r7, [r4]
 8025462:	454b      	cmp	r3, r9
 8025464:	463a      	mov	r2, r7
 8025466:	d008      	beq.n	802547a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 8025468:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	; 0x34
 802546c:	eb03 0b09 	add.w	fp, r3, r9
 8025470:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 8025474:	fb03 1309 	mla	r3, r3, r9, r1
 8025478:	9305      	str	r3, [sp, #20]
 802547a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 802547e:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8025482:	4498      	add	r8, r3
 8025484:	9b04      	ldr	r3, [sp, #16]
 8025486:	3b01      	subs	r3, #1
 8025488:	9304      	str	r3, [sp, #16]
 802548a:	9b04      	ldr	r3, [sp, #16]
 802548c:	3301      	adds	r3, #1
 802548e:	d015      	beq.n	80254bc <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 8025490:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 8025494:	42bb      	cmp	r3, r7
 8025496:	d117      	bne.n	80254c8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 8025498:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 802549c:	9b04      	ldr	r3, [sp, #16]
 802549e:	4548      	cmp	r0, r9
 80254a0:	f103 33ff 	add.w	r3, r3, #4294967295
 80254a4:	d17d      	bne.n	80255a2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 80254a6:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 80254aa:	4401      	add	r1, r0
 80254ac:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80254b0:	4480      	add	r8, r0
 80254b2:	e7e9      	b.n	8025488 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 80254b4:	461f      	mov	r7, r3
 80254b6:	e042      	b.n	802553e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 80254b8:	2000      	movs	r0, #0
 80254ba:	e002      	b.n	80254c2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 80254bc:	2900      	cmp	r1, #0
 80254be:	d16d      	bne.n	802559c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 80254c0:	2001      	movs	r0, #1
 80254c2:	b00b      	add	sp, #44	; 0x2c
 80254c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80254c8:	b379      	cbz	r1, 802552a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 80254ca:	2f00      	cmp	r7, #0
 80254cc:	db29      	blt.n	8025522 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 80254ce:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
 80254d2:	42bb      	cmp	r3, r7
 80254d4:	dd25      	ble.n	8025522 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 80254d6:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 80254da:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 80254de:	f7ff ff77 	bl	80253d0 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
 80254e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80254e4:	fb10 f003 	smulbb	r0, r0, r3
 80254e8:	b280      	uxth	r0, r0
 80254ea:	1c41      	adds	r1, r0, #1
 80254ec:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80254f0:	1209      	asrs	r1, r1, #8
 80254f2:	f011 0fff 	tst.w	r1, #255	; 0xff
 80254f6:	d014      	beq.n	8025522 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 80254f8:	b2c9      	uxtb	r1, r1
 80254fa:	9808      	ldr	r0, [sp, #32]
 80254fc:	b2ba      	uxth	r2, r7
 80254fe:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 8025500:	9102      	str	r1, [sp, #8]
 8025502:	2101      	movs	r1, #1
 8025504:	4413      	add	r3, r2
 8025506:	4402      	add	r2, r0
 8025508:	9101      	str	r1, [sp, #4]
 802550a:	fa0f f18b 	sxth.w	r1, fp
 802550e:	f8da 0000 	ldr.w	r0, [sl]
 8025512:	b21b      	sxth	r3, r3
 8025514:	9100      	str	r1, [sp, #0]
 8025516:	b212      	sxth	r2, r2
 8025518:	6941      	ldr	r1, [r0, #20]
 802551a:	4650      	mov	r0, sl
 802551c:	460d      	mov	r5, r1
 802551e:	9905      	ldr	r1, [sp, #20]
 8025520:	47a8      	blx	r5
 8025522:	9b04      	ldr	r3, [sp, #16]
 8025524:	1c7a      	adds	r2, r7, #1
 8025526:	3301      	adds	r3, #1
 8025528:	d0ca      	beq.n	80254c0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802552a:	f9b4 7000 	ldrsh.w	r7, [r4]
 802552e:	1abb      	subs	r3, r7, r2
 8025530:	2b00      	cmp	r3, #0
 8025532:	dd31      	ble.n	8025598 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8025534:	2a00      	cmp	r2, #0
 8025536:	dabd      	bge.n	80254b4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 8025538:	2f00      	cmp	r7, #0
 802553a:	dd2d      	ble.n	8025598 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802553c:	2200      	movs	r2, #0
 802553e:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
 8025542:	19d1      	adds	r1, r2, r7
 8025544:	4299      	cmp	r1, r3
 8025546:	db02      	blt.n	802554e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 8025548:	1a9f      	subs	r7, r3, r2
 802554a:	2f00      	cmp	r7, #0
 802554c:	dd24      	ble.n	8025598 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802554e:	ea4f 1188 	mov.w	r1, r8, lsl #6
 8025552:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 8025556:	f7ff ff3b 	bl	80253d0 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
 802555a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802555c:	fb10 f003 	smulbb	r0, r0, r3
 8025560:	b280      	uxth	r0, r0
 8025562:	1c41      	adds	r1, r0, #1
 8025564:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8025568:	1209      	asrs	r1, r1, #8
 802556a:	f011 0fff 	tst.w	r1, #255	; 0xff
 802556e:	d013      	beq.n	8025598 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8025570:	b292      	uxth	r2, r2
 8025572:	9808      	ldr	r0, [sp, #32]
 8025574:	b2c9      	uxtb	r1, r1
 8025576:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 8025578:	b23f      	sxth	r7, r7
 802557a:	4413      	add	r3, r2
 802557c:	9102      	str	r1, [sp, #8]
 802557e:	4402      	add	r2, r0
 8025580:	fa0f f18b 	sxth.w	r1, fp
 8025584:	f8da 0000 	ldr.w	r0, [sl]
 8025588:	b21b      	sxth	r3, r3
 802558a:	9100      	str	r1, [sp, #0]
 802558c:	b212      	sxth	r2, r2
 802558e:	9701      	str	r7, [sp, #4]
 8025590:	9905      	ldr	r1, [sp, #20]
 8025592:	6947      	ldr	r7, [r0, #20]
 8025594:	4650      	mov	r0, sl
 8025596:	47b8      	blx	r7
 8025598:	464b      	mov	r3, r9
 802559a:	e75e      	b.n	802545a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 802559c:	2f00      	cmp	r7, #0
 802559e:	da96      	bge.n	80254ce <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 80255a0:	e78e      	b.n	80254c0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 80255a2:	2900      	cmp	r1, #0
 80255a4:	d0f8      	beq.n	8025598 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 80255a6:	e790      	b.n	80254ca <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

080255a8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 80255a8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80255ac:	4b4a      	ldr	r3, [pc, #296]	; (80256d8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x130>)
 80255ae:	2500      	movs	r5, #0
 80255b0:	f100 0620 	add.w	r6, r0, #32
 80255b4:	4604      	mov	r4, r0
 80255b6:	4690      	mov	r8, r2
 80255b8:	f100 0718 	add.w	r7, r0, #24
 80255bc:	e9c0 3100 	strd	r3, r1, [r0]
 80255c0:	e9c0 5502 	strd	r5, r5, [r0, #8]
 80255c4:	e9c0 5504 	strd	r5, r5, [r0, #16]
 80255c8:	e9c0 5506 	strd	r5, r5, [r0, #24]
 80255cc:	4630      	mov	r0, r6
 80255ce:	f7ee fad3 	bl	8013b78 <_ZN8touchgfx7OutlineC1Ev>
 80255d2:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 80255d6:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
 80255da:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 80255de:	f8a4 5056 	strh.w	r5, [r4, #86]	; 0x56
 80255e2:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 80255e6:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
 80255ea:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
 80255ee:	f8d4 c004 	ldr.w	ip, [r4, #4]
 80255f2:	9500      	str	r5, [sp, #0]
 80255f4:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
 80255f8:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
 80255fc:	f9b8 2000 	ldrsh.w	r2, [r8]
 8025600:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8025604:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 8025608:	4410      	add	r0, r2
 802560a:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 802560e:	b280      	uxth	r0, r0
 8025610:	fa0f fa80 	sxth.w	sl, r0
 8025614:	45aa      	cmp	sl, r5
 8025616:	dd5c      	ble.n	80256d2 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
 8025618:	4591      	cmp	r9, r2
 802561a:	dd5a      	ble.n	80256d2 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
 802561c:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 8025620:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8025624:	440b      	add	r3, r1
 8025626:	b29b      	uxth	r3, r3
 8025628:	b21d      	sxth	r5, r3
 802562a:	2d00      	cmp	r5, #0
 802562c:	dd51      	ble.n	80256d2 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
 802562e:	458e      	cmp	lr, r1
 8025630:	dd4f      	ble.n	80256d2 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
 8025632:	45d1      	cmp	r9, sl
 8025634:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8025638:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 802563c:	bfb8      	it	lt
 802563e:	fa1f f089 	uxthlt.w	r0, r9
 8025642:	45ae      	cmp	lr, r5
 8025644:	f8ad 2000 	strh.w	r2, [sp]
 8025648:	bfb8      	it	lt
 802564a:	fa1f f38e 	uxthlt.w	r3, lr
 802564e:	1a80      	subs	r0, r0, r2
 8025650:	f8ad 1002 	strh.w	r1, [sp, #2]
 8025654:	1a5b      	subs	r3, r3, r1
 8025656:	f8ad 0004 	strh.w	r0, [sp, #4]
 802565a:	f8ad 3006 	strh.w	r3, [sp, #6]
 802565e:	466d      	mov	r5, sp
 8025660:	e895 0003 	ldmia.w	r5, {r0, r1}
 8025664:	e887 0003 	stmia.w	r7, {r0, r1}
 8025668:	f8dc 3000 	ldr.w	r3, [ip]
 802566c:	4660      	mov	r0, ip
 802566e:	4639      	mov	r1, r7
 8025670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8025672:	4798      	blx	r3
 8025674:	6861      	ldr	r1, [r4, #4]
 8025676:	4628      	mov	r0, r5
 8025678:	3104      	adds	r1, #4
 802567a:	f7f0 fc4d 	bl	8015f18 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802567e:	4638      	mov	r0, r7
 8025680:	f7f0 fc22 	bl	8015ec8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8025684:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8025688:	f8bd 2000 	ldrh.w	r2, [sp]
 802568c:	4630      	mov	r0, r6
 802568e:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 8025692:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8025696:	f7ee fa53 	bl	8013b40 <_ZN8touchgfx7Outline5resetEv>
 802569a:	f9bd 3000 	ldrsh.w	r3, [sp]
 802569e:	f9b4 201e 	ldrsh.w	r2, [r4, #30]
 80256a2:	4620      	mov	r0, r4
 80256a4:	015b      	lsls	r3, r3, #5
 80256a6:	60a3      	str	r3, [r4, #8]
 80256a8:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80256ac:	015b      	lsls	r3, r3, #5
 80256ae:	60e3      	str	r3, [r4, #12]
 80256b0:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80256b4:	015b      	lsls	r3, r3, #5
 80256b6:	6123      	str	r3, [r4, #16]
 80256b8:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80256bc:	015b      	lsls	r3, r3, #5
 80256be:	6163      	str	r3, [r4, #20]
 80256c0:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
 80256c4:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 80256c8:	e9c4 3212 	strd	r3, r2, [r4, #72]	; 0x48
 80256cc:	b002      	add	sp, #8
 80256ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80256d2:	2300      	movs	r3, #0
 80256d4:	9301      	str	r3, [sp, #4]
 80256d6:	e7c2      	b.n	802565e <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xb6>
 80256d8:	0802b658 	.word	0x0802b658

080256dc <_ZN8touchgfx6Canvas5closeEv>:
 80256dc:	b538      	push	{r3, r4, r5, lr}
 80256de:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 80256e2:	4604      	mov	r4, r0
 80256e4:	b193      	cbz	r3, 802570c <_ZN8touchgfx6Canvas5closeEv+0x30>
 80256e6:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 80256ea:	f890 2065 	ldrb.w	r2, [r0, #101]	; 0x65
 80256ee:	4213      	tst	r3, r2
 80256f0:	d10c      	bne.n	802570c <_ZN8touchgfx6Canvas5closeEv+0x30>
 80256f2:	f100 0520 	add.w	r5, r0, #32
 80256f6:	b123      	cbz	r3, 8025702 <_ZN8touchgfx6Canvas5closeEv+0x26>
 80256f8:	e9d0 1217 	ldrd	r1, r2, [r0, #92]	; 0x5c
 80256fc:	4628      	mov	r0, r5
 80256fe:	f7ff fe7b 	bl	80253f8 <_ZN8touchgfx10Rasterizer6lineToEii>
 8025702:	4628      	mov	r0, r5
 8025704:	e9d4 121a 	ldrd	r1, r2, [r4, #104]	; 0x68
 8025708:	f7ff fe76 	bl	80253f8 <_ZN8touchgfx10Rasterizer6lineToEii>
 802570c:	2300      	movs	r3, #0
 802570e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8025712:	e9d4 0309 	ldrd	r0, r3, [r4, #36]	; 0x24
 8025716:	4298      	cmp	r0, r3
 8025718:	bf34      	ite	cc
 802571a:	2000      	movcc	r0, #0
 802571c:	2001      	movcs	r0, #1
 802571e:	bd38      	pop	{r3, r4, r5, pc}

08025720 <_ZN8touchgfx6Canvas6renderEh>:
 8025720:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8025724:	4604      	mov	r4, r0
 8025726:	6840      	ldr	r0, [r0, #4]
 8025728:	460d      	mov	r5, r1
 802572a:	6803      	ldr	r3, [r0, #0]
 802572c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802572e:	4798      	blx	r3
 8025730:	fb10 f105 	smulbb	r1, r0, r5
 8025734:	b289      	uxth	r1, r1
 8025736:	1c4d      	adds	r5, r1, #1
 8025738:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 802573c:	122d      	asrs	r5, r5, #8
 802573e:	f000 8097 	beq.w	8025870 <_ZN8touchgfx6Canvas6renderEh+0x150>
 8025742:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 8025746:	2b00      	cmp	r3, #0
 8025748:	f000 8092 	beq.w	8025870 <_ZN8touchgfx6Canvas6renderEh+0x150>
 802574c:	4620      	mov	r0, r4
 802574e:	f7ff ffc5 	bl	80256dc <_ZN8touchgfx6Canvas5closeEv>
 8025752:	4607      	mov	r7, r0
 8025754:	2800      	cmp	r0, #0
 8025756:	d043      	beq.n	80257e0 <_ZN8touchgfx6Canvas6renderEh+0xc0>
 8025758:	6863      	ldr	r3, [r4, #4]
 802575a:	4e46      	ldr	r6, [pc, #280]	; (8025874 <_ZN8touchgfx6Canvas6renderEh+0x154>)
 802575c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 802575e:	6837      	ldr	r7, [r6, #0]
 8025760:	6803      	ldr	r3, [r0, #0]
 8025762:	689b      	ldr	r3, [r3, #8]
 8025764:	4798      	blx	r3
 8025766:	4601      	mov	r1, r0
 8025768:	4638      	mov	r0, r7
 802576a:	f7eb fc9f 	bl	80110ac <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 802576e:	4607      	mov	r7, r0
 8025770:	f7eb f860 	bl	8010834 <_ZN8touchgfx3HAL3lcdEv>
 8025774:	6803      	ldr	r3, [r0, #0]
 8025776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025778:	4798      	blx	r3
 802577a:	4680      	mov	r8, r0
 802577c:	f7eb f85a 	bl	8010834 <_ZN8touchgfx3HAL3lcdEv>
 8025780:	6803      	ldr	r3, [r0, #0]
 8025782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8025784:	4798      	blx	r3
 8025786:	280b      	cmp	r0, #11
 8025788:	d857      	bhi.n	802583a <_ZN8touchgfx6Canvas6renderEh+0x11a>
 802578a:	e8df f000 	tbb	[pc, r0]
 802578e:	584d      	.short	0x584d
 8025790:	2d560668 	.word	0x2d560668
 8025794:	6161613d 	.word	0x6161613d
 8025798:	6161      	.short	0x6161
 802579a:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 802579e:	2208      	movs	r2, #8
 80257a0:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 80257a4:	fb91 f2f2 	sdiv	r2, r1, r2
 80257a8:	fb08 2303 	mla	r3, r8, r3, r2
 80257ac:	441f      	add	r7, r3
 80257ae:	424b      	negs	r3, r1
 80257b0:	f001 0107 	and.w	r1, r1, #7
 80257b4:	f003 0307 	and.w	r3, r3, #7
 80257b8:	bf58      	it	pl
 80257ba:	4259      	negpl	r1, r3
 80257bc:	b2c9      	uxtb	r1, r1
 80257be:	6860      	ldr	r0, [r4, #4]
 80257c0:	b2ed      	uxtb	r5, r5
 80257c2:	fa0f f388 	sxth.w	r3, r8
 80257c6:	463a      	mov	r2, r7
 80257c8:	e9cd 1500 	strd	r1, r5, [sp]
 80257cc:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80257ce:	f104 0020 	add.w	r0, r4, #32
 80257d2:	f7ff fe1d 	bl	8025410 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 80257d6:	4607      	mov	r7, r0
 80257d8:	6830      	ldr	r0, [r6, #0]
 80257da:	6803      	ldr	r3, [r0, #0]
 80257dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80257de:	4798      	blx	r3
 80257e0:	4638      	mov	r0, r7
 80257e2:	b002      	add	sp, #8
 80257e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80257e8:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 80257ec:	2204      	movs	r2, #4
 80257ee:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 80257f2:	fb91 f2f2 	sdiv	r2, r1, r2
 80257f6:	fb08 2303 	mla	r3, r8, r3, r2
 80257fa:	441f      	add	r7, r3
 80257fc:	424b      	negs	r3, r1
 80257fe:	f001 0103 	and.w	r1, r1, #3
 8025802:	f003 0303 	and.w	r3, r3, #3
 8025806:	e7d7      	b.n	80257b8 <_ZN8touchgfx6Canvas6renderEh+0x98>
 8025808:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 802580c:	2202      	movs	r2, #2
 802580e:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8025812:	2900      	cmp	r1, #0
 8025814:	fb91 f2f2 	sdiv	r2, r1, r2
 8025818:	f001 0101 	and.w	r1, r1, #1
 802581c:	fb08 2303 	mla	r3, r8, r3, r2
 8025820:	bfb8      	it	lt
 8025822:	4249      	neglt	r1, r1
 8025824:	441f      	add	r7, r3
 8025826:	e7c9      	b.n	80257bc <_ZN8touchgfx6Canvas6renderEh+0x9c>
 8025828:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 802582c:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 8025830:	fb08 f303 	mul.w	r3, r8, r3
 8025834:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8025838:	441f      	add	r7, r3
 802583a:	2100      	movs	r1, #0
 802583c:	e7bf      	b.n	80257be <_ZN8touchgfx6Canvas6renderEh+0x9e>
 802583e:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8025842:	2103      	movs	r1, #3
 8025844:	fb08 f203 	mul.w	r2, r8, r3
 8025848:	8b23      	ldrh	r3, [r4, #24]
 802584a:	fb13 2301 	smlabb	r3, r3, r1, r2
 802584e:	e7f3      	b.n	8025838 <_ZN8touchgfx6Canvas6renderEh+0x118>
 8025850:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8025854:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 8025858:	fb08 2303 	mla	r3, r8, r3, r2
 802585c:	e7ec      	b.n	8025838 <_ZN8touchgfx6Canvas6renderEh+0x118>
 802585e:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8025862:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 8025866:	fb08 f303 	mul.w	r3, r8, r3
 802586a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802586e:	e7e3      	b.n	8025838 <_ZN8touchgfx6Canvas6renderEh+0x118>
 8025870:	2701      	movs	r7, #1
 8025872:	e7b5      	b.n	80257e0 <_ZN8touchgfx6Canvas6renderEh+0xc0>
 8025874:	20027bc4 	.word	0x20027bc4

08025878 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 8025878:	4b07      	ldr	r3, [pc, #28]	; (8025898 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 802587a:	b510      	push	{r4, lr}
 802587c:	781b      	ldrb	r3, [r3, #0]
 802587e:	2b01      	cmp	r3, #1
 8025880:	d108      	bne.n	8025894 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 8025882:	6843      	ldr	r3, [r0, #4]
 8025884:	6814      	ldr	r4, [r2, #0]
 8025886:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 802588a:	680b      	ldr	r3, [r1, #0]
 802588c:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 8025890:	6013      	str	r3, [r2, #0]
 8025892:	600c      	str	r4, [r1, #0]
 8025894:	bd10      	pop	{r4, pc}
 8025896:	bf00      	nop
 8025898:	20027bbc 	.word	0x20027bbc

0802589c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 802589c:	b513      	push	{r0, r1, r4, lr}
 802589e:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 80258a2:	4604      	mov	r4, r0
 80258a4:	e9cd 2100 	strd	r2, r1, [sp]
 80258a8:	b9a3      	cbnz	r3, 80258d4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 80258aa:	466a      	mov	r2, sp
 80258ac:	a901      	add	r1, sp, #4
 80258ae:	4620      	mov	r0, r4
 80258b0:	f7ff ffe2 	bl	8025878 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 80258b4:	68a3      	ldr	r3, [r4, #8]
 80258b6:	9901      	ldr	r1, [sp, #4]
 80258b8:	9a00      	ldr	r2, [sp, #0]
 80258ba:	1ac9      	subs	r1, r1, r3
 80258bc:	68e3      	ldr	r3, [r4, #12]
 80258be:	1ad2      	subs	r2, r2, r3
 80258c0:	9101      	str	r1, [sp, #4]
 80258c2:	2a00      	cmp	r2, #0
 80258c4:	9200      	str	r2, [sp, #0]
 80258c6:	da0b      	bge.n	80258e0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 80258c8:	2301      	movs	r3, #1
 80258ca:	2900      	cmp	r1, #0
 80258cc:	da0e      	bge.n	80258ec <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 80258ce:	f043 0304 	orr.w	r3, r3, #4
 80258d2:	e013      	b.n	80258fc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 80258d4:	f7ff ff02 	bl	80256dc <_ZN8touchgfx6Canvas5closeEv>
 80258d8:	2800      	cmp	r0, #0
 80258da:	d1e6      	bne.n	80258aa <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 80258dc:	b002      	add	sp, #8
 80258de:	bd10      	pop	{r4, pc}
 80258e0:	6963      	ldr	r3, [r4, #20]
 80258e2:	429a      	cmp	r2, r3
 80258e4:	bfac      	ite	ge
 80258e6:	2302      	movge	r3, #2
 80258e8:	2300      	movlt	r3, #0
 80258ea:	e7ee      	b.n	80258ca <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 80258ec:	6920      	ldr	r0, [r4, #16]
 80258ee:	4281      	cmp	r1, r0
 80258f0:	bfac      	ite	ge
 80258f2:	2008      	movge	r0, #8
 80258f4:	2000      	movlt	r0, #0
 80258f6:	4318      	orrs	r0, r3
 80258f8:	b2c3      	uxtb	r3, r0
 80258fa:	b158      	cbz	r0, 8025914 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 80258fc:	2200      	movs	r2, #0
 80258fe:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
 8025902:	9901      	ldr	r1, [sp, #4]
 8025904:	9a00      	ldr	r2, [sp, #0]
 8025906:	66a1      	str	r1, [r4, #104]	; 0x68
 8025908:	66e2      	str	r2, [r4, #108]	; 0x6c
 802590a:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 802590e:	e9c4 1217 	strd	r1, r2, [r4, #92]	; 0x5c
 8025912:	e7e3      	b.n	80258dc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 8025914:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
 8025918:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	; 0x24
 802591c:	4298      	cmp	r0, r3
 802591e:	d803      	bhi.n	8025928 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 8025920:	f104 0020 	add.w	r0, r4, #32
 8025924:	f7ee fdfc 	bl	8014520 <_ZN8touchgfx7Outline6moveToEii>
 8025928:	2301      	movs	r3, #1
 802592a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 802592e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8025932:	2300      	movs	r3, #0
 8025934:	e7e5      	b.n	8025902 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

08025936 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8025936:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8025938:	ab02      	add	r3, sp, #8
 802593a:	4604      	mov	r4, r0
 802593c:	9101      	str	r1, [sp, #4]
 802593e:	a901      	add	r1, sp, #4
 8025940:	f843 2d08 	str.w	r2, [r3, #-8]!
 8025944:	461a      	mov	r2, r3
 8025946:	f7ff ff97 	bl	8025878 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802594a:	68a3      	ldr	r3, [r4, #8]
 802594c:	9901      	ldr	r1, [sp, #4]
 802594e:	9a00      	ldr	r2, [sp, #0]
 8025950:	1ac9      	subs	r1, r1, r3
 8025952:	68e3      	ldr	r3, [r4, #12]
 8025954:	1ad2      	subs	r2, r2, r3
 8025956:	9101      	str	r1, [sp, #4]
 8025958:	2a00      	cmp	r2, #0
 802595a:	9200      	str	r2, [sp, #0]
 802595c:	db1c      	blt.n	8025998 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 802595e:	6963      	ldr	r3, [r4, #20]
 8025960:	429a      	cmp	r2, r3
 8025962:	bfac      	ite	ge
 8025964:	2002      	movge	r0, #2
 8025966:	2000      	movlt	r0, #0
 8025968:	2900      	cmp	r1, #0
 802596a:	db17      	blt.n	802599c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 802596c:	6923      	ldr	r3, [r4, #16]
 802596e:	4299      	cmp	r1, r3
 8025970:	bfac      	ite	ge
 8025972:	2308      	movge	r3, #8
 8025974:	2300      	movlt	r3, #0
 8025976:	4303      	orrs	r3, r0
 8025978:	f894 0064 	ldrb.w	r0, [r4, #100]	; 0x64
 802597c:	b2dd      	uxtb	r5, r3
 802597e:	b978      	cbnz	r0, 80259a0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 8025980:	f104 0020 	add.w	r0, r4, #32
 8025984:	f7ff fd38 	bl	80253f8 <_ZN8touchgfx10Rasterizer6lineToEii>
 8025988:	9b01      	ldr	r3, [sp, #4]
 802598a:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
 802598e:	65e3      	str	r3, [r4, #92]	; 0x5c
 8025990:	9b00      	ldr	r3, [sp, #0]
 8025992:	6623      	str	r3, [r4, #96]	; 0x60
 8025994:	b002      	add	sp, #8
 8025996:	bd70      	pop	{r4, r5, r6, pc}
 8025998:	2001      	movs	r0, #1
 802599a:	e7e5      	b.n	8025968 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 802599c:	2304      	movs	r3, #4
 802599e:	e7ea      	b.n	8025976 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 80259a0:	b113      	cbz	r3, 80259a8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 80259a2:	ea10 0305 	ands.w	r3, r0, r5
 80259a6:	d11c      	bne.n	80259e2 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xac>
 80259a8:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 80259ac:	f104 0620 	add.w	r6, r4, #32
 80259b0:	e9d4 1217 	ldrd	r1, r2, [r4, #92]	; 0x5c
 80259b4:	b98b      	cbnz	r3, 80259da <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa4>
 80259b6:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
 80259ba:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	; 0x24
 80259be:	4298      	cmp	r0, r3
 80259c0:	d802      	bhi.n	80259c8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 80259c2:	4630      	mov	r0, r6
 80259c4:	f7ee fdac 	bl	8014520 <_ZN8touchgfx7Outline6moveToEii>
 80259c8:	2301      	movs	r3, #1
 80259ca:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 80259ce:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80259d2:	4630      	mov	r0, r6
 80259d4:	e9dd 2100 	ldrd	r2, r1, [sp]
 80259d8:	e7d4      	b.n	8025984 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 80259da:	4630      	mov	r0, r6
 80259dc:	f7ff fd0c 	bl	80253f8 <_ZN8touchgfx10Rasterizer6lineToEii>
 80259e0:	e7f7      	b.n	80259d2 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9c>
 80259e2:	461d      	mov	r5, r3
 80259e4:	e7d0      	b.n	8025988 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>
	...

080259e8 <_ZN8touchgfx6CanvasD1Ev>:
 80259e8:	4b04      	ldr	r3, [pc, #16]	; (80259fc <_ZN8touchgfx6CanvasD1Ev+0x14>)
 80259ea:	b510      	push	{r4, lr}
 80259ec:	4604      	mov	r4, r0
 80259ee:	f840 3b20 	str.w	r3, [r0], #32
 80259f2:	f7ee f89d 	bl	8013b30 <_ZN8touchgfx7OutlineD1Ev>
 80259f6:	4620      	mov	r0, r4
 80259f8:	bd10      	pop	{r4, pc}
 80259fa:	bf00      	nop
 80259fc:	0802b658 	.word	0x0802b658

08025a00 <_ZN8touchgfx6CanvasD0Ev>:
 8025a00:	b510      	push	{r4, lr}
 8025a02:	4604      	mov	r4, r0
 8025a04:	f7ff fff0 	bl	80259e8 <_ZN8touchgfx6CanvasD1Ev>
 8025a08:	2170      	movs	r1, #112	; 0x70
 8025a0a:	4620      	mov	r0, r4
 8025a0c:	f000 f8d1 	bl	8025bb2 <_ZdlPvj>
 8025a10:	4620      	mov	r0, r4
 8025a12:	bd10      	pop	{r4, pc}

08025a14 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 8025a14:	790b      	ldrb	r3, [r1, #4]
 8025a16:	2b00      	cmp	r3, #0
 8025a18:	bf0c      	ite	eq
 8025a1a:	2301      	moveq	r3, #1
 8025a1c:	2300      	movne	r3, #0
 8025a1e:	b570      	push	{r4, r5, r6, lr}
 8025a20:	4604      	mov	r4, r0
 8025a22:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8025a26:	460e      	mov	r6, r1
 8025a28:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 8025a2c:	d109      	bne.n	8025a42 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 8025a2e:	b14d      	cbz	r5, 8025a44 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 8025a30:	7933      	ldrb	r3, [r6, #4]
 8025a32:	2b01      	cmp	r3, #1
 8025a34:	d10c      	bne.n	8025a50 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8025a36:	6823      	ldr	r3, [r4, #0]
 8025a38:	4620      	mov	r0, r4
 8025a3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8025a3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8025a40:	4718      	bx	r3
 8025a42:	b12d      	cbz	r5, 8025a50 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8025a44:	6823      	ldr	r3, [r4, #0]
 8025a46:	4620      	mov	r0, r4
 8025a48:	695b      	ldr	r3, [r3, #20]
 8025a4a:	4798      	blx	r3
 8025a4c:	2d00      	cmp	r5, #0
 8025a4e:	d1ef      	bne.n	8025a30 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 8025a50:	bd70      	pop	{r4, r5, r6, pc}

08025a52 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 8025a52:	b570      	push	{r4, r5, r6, lr}
 8025a54:	880b      	ldrh	r3, [r1, #0]
 8025a56:	4605      	mov	r5, r0
 8025a58:	4604      	mov	r4, r0
 8025a5a:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8025a5c:	8813      	ldrh	r3, [r2, #0]
 8025a5e:	f825 3f30 	strh.w	r3, [r5, #48]!
 8025a62:	4628      	mov	r0, r5
 8025a64:	f7f3 fed6 	bl	8019814 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8025a68:	4606      	mov	r6, r0
 8025a6a:	4628      	mov	r0, r5
 8025a6c:	f7f3 ff06 	bl	801987c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8025a70:	6823      	ldr	r3, [r4, #0]
 8025a72:	4605      	mov	r5, r0
 8025a74:	4631      	mov	r1, r6
 8025a76:	4620      	mov	r0, r4
 8025a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8025a7a:	4798      	blx	r3
 8025a7c:	6823      	ldr	r3, [r4, #0]
 8025a7e:	4629      	mov	r1, r5
 8025a80:	4620      	mov	r0, r4
 8025a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8025a84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8025a88:	4718      	bx	r3

08025a8a <_ZNK8touchgfx6Button12getSolidRectEv>:
 8025a8a:	b510      	push	{r4, lr}
 8025a8c:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 8025a90:	4604      	mov	r4, r0
 8025a92:	2bff      	cmp	r3, #255	; 0xff
 8025a94:	d006      	beq.n	8025aa4 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 8025a96:	2300      	movs	r3, #0
 8025a98:	8003      	strh	r3, [r0, #0]
 8025a9a:	8043      	strh	r3, [r0, #2]
 8025a9c:	8083      	strh	r3, [r0, #4]
 8025a9e:	80c3      	strh	r3, [r0, #6]
 8025aa0:	4620      	mov	r0, r4
 8025aa2:	bd10      	pop	{r4, pc}
 8025aa4:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 8025aa8:	b11b      	cbz	r3, 8025ab2 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 8025aaa:	3130      	adds	r1, #48	; 0x30
 8025aac:	f7f3 ff1a 	bl	80198e4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8025ab0:	e7f6      	b.n	8025aa0 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 8025ab2:	312e      	adds	r1, #46	; 0x2e
 8025ab4:	e7fa      	b.n	8025aac <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

08025ab8 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 8025ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025abc:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8025ac0:	b08a      	sub	sp, #40	; 0x28
 8025ac2:	4604      	mov	r4, r0
 8025ac4:	4688      	mov	r8, r1
 8025ac6:	2b00      	cmp	r3, #0
 8025ac8:	d066      	beq.n	8025b98 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 8025aca:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8025acc:	a805      	add	r0, sp, #20
 8025ace:	f8ad 3014 	strh.w	r3, [sp, #20]
 8025ad2:	f7f3 fe9f 	bl	8019814 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8025ad6:	4607      	mov	r7, r0
 8025ad8:	a805      	add	r0, sp, #20
 8025ada:	f7f3 fecf 	bl	801987c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8025ade:	f9b8 6000 	ldrsh.w	r6, [r8]
 8025ae2:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 8025ae6:	2300      	movs	r3, #0
 8025ae8:	4432      	add	r2, r6
 8025aea:	9306      	str	r3, [sp, #24]
 8025aec:	b292      	uxth	r2, r2
 8025aee:	fa0f fc82 	sxth.w	ip, r2
 8025af2:	459c      	cmp	ip, r3
 8025af4:	dd52      	ble.n	8025b9c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8025af6:	42b7      	cmp	r7, r6
 8025af8:	dd50      	ble.n	8025b9c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8025afa:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 8025afe:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8025b02:	442b      	add	r3, r5
 8025b04:	b29b      	uxth	r3, r3
 8025b06:	b219      	sxth	r1, r3
 8025b08:	2900      	cmp	r1, #0
 8025b0a:	dd47      	ble.n	8025b9c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8025b0c:	42a8      	cmp	r0, r5
 8025b0e:	dd45      	ble.n	8025b9c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8025b10:	4567      	cmp	r7, ip
 8025b12:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 8025b16:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8025b1a:	bfb8      	it	lt
 8025b1c:	b2ba      	uxthlt	r2, r7
 8025b1e:	4288      	cmp	r0, r1
 8025b20:	f8ad 6018 	strh.w	r6, [sp, #24]
 8025b24:	bfb8      	it	lt
 8025b26:	b283      	uxthlt	r3, r0
 8025b28:	1b92      	subs	r2, r2, r6
 8025b2a:	f8ad 501a 	strh.w	r5, [sp, #26]
 8025b2e:	1b5b      	subs	r3, r3, r5
 8025b30:	f8ad 201c 	strh.w	r2, [sp, #28]
 8025b34:	f8ad 301e 	strh.w	r3, [sp, #30]
 8025b38:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8025b3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8025b40:	429a      	cmp	r2, r3
 8025b42:	d026      	beq.n	8025b92 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8025b44:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8025b48:	2b00      	cmp	r3, #0
 8025b4a:	dd22      	ble.n	8025b92 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8025b4c:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8025b50:	2b00      	cmp	r3, #0
 8025b52:	dd1e      	ble.n	8025b92 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8025b54:	2300      	movs	r3, #0
 8025b56:	a908      	add	r1, sp, #32
 8025b58:	4620      	mov	r0, r4
 8025b5a:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8025b5e:	6823      	ldr	r3, [r4, #0]
 8025b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8025b62:	4798      	blx	r3
 8025b64:	4b0f      	ldr	r3, [pc, #60]	; (8025ba4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 8025b66:	681b      	ldr	r3, [r3, #0]
 8025b68:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8025b6c:	b10a      	cbz	r2, 8025b72 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 8025b6e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8025b70:	b900      	cbnz	r0, 8025b74 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 8025b72:	6898      	ldr	r0, [r3, #8]
 8025b74:	2501      	movs	r5, #1
 8025b76:	6801      	ldr	r1, [r0, #0]
 8025b78:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8025b7c:	9502      	str	r5, [sp, #8]
 8025b7e:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 8025b82:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8025b86:	9401      	str	r4, [sp, #4]
 8025b88:	ac06      	add	r4, sp, #24
 8025b8a:	9400      	str	r4, [sp, #0]
 8025b8c:	688c      	ldr	r4, [r1, #8]
 8025b8e:	a905      	add	r1, sp, #20
 8025b90:	47a0      	blx	r4
 8025b92:	b00a      	add	sp, #40	; 0x28
 8025b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025b98:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8025b9a:	e797      	b.n	8025acc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8025b9c:	2300      	movs	r3, #0
 8025b9e:	9307      	str	r3, [sp, #28]
 8025ba0:	e7ca      	b.n	8025b38 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 8025ba2:	bf00      	nop
 8025ba4:	20027bc4 	.word	0x20027bc4

08025ba8 <__aeabi_atexit>:
 8025ba8:	460b      	mov	r3, r1
 8025baa:	4601      	mov	r1, r0
 8025bac:	4618      	mov	r0, r3
 8025bae:	f000 b853 	b.w	8025c58 <__cxa_atexit>

08025bb2 <_ZdlPvj>:
 8025bb2:	f000 b812 	b.w	8025bda <_ZdlPv>

08025bb6 <__cxa_guard_acquire>:
 8025bb6:	6803      	ldr	r3, [r0, #0]
 8025bb8:	07db      	lsls	r3, r3, #31
 8025bba:	d406      	bmi.n	8025bca <__cxa_guard_acquire+0x14>
 8025bbc:	7843      	ldrb	r3, [r0, #1]
 8025bbe:	b103      	cbz	r3, 8025bc2 <__cxa_guard_acquire+0xc>
 8025bc0:	deff      	udf	#255	; 0xff
 8025bc2:	2301      	movs	r3, #1
 8025bc4:	7043      	strb	r3, [r0, #1]
 8025bc6:	4618      	mov	r0, r3
 8025bc8:	4770      	bx	lr
 8025bca:	2000      	movs	r0, #0
 8025bcc:	4770      	bx	lr

08025bce <__cxa_guard_release>:
 8025bce:	2301      	movs	r3, #1
 8025bd0:	6003      	str	r3, [r0, #0]
 8025bd2:	4770      	bx	lr

08025bd4 <__cxa_pure_virtual>:
 8025bd4:	b508      	push	{r3, lr}
 8025bd6:	f000 f80f 	bl	8025bf8 <_ZSt9terminatev>

08025bda <_ZdlPv>:
 8025bda:	f000 b989 	b.w	8025ef0 <free>

08025bde <_ZN10__cxxabiv111__terminateEPFvvE>:
 8025bde:	b508      	push	{r3, lr}
 8025be0:	4780      	blx	r0
 8025be2:	f000 f80e 	bl	8025c02 <abort>
	...

08025be8 <_ZSt13get_terminatev>:
 8025be8:	4b02      	ldr	r3, [pc, #8]	; (8025bf4 <_ZSt13get_terminatev+0xc>)
 8025bea:	6818      	ldr	r0, [r3, #0]
 8025bec:	f3bf 8f5b 	dmb	ish
 8025bf0:	4770      	bx	lr
 8025bf2:	bf00      	nop
 8025bf4:	200000e4 	.word	0x200000e4

08025bf8 <_ZSt9terminatev>:
 8025bf8:	b508      	push	{r3, lr}
 8025bfa:	f7ff fff5 	bl	8025be8 <_ZSt13get_terminatev>
 8025bfe:	f7ff ffee 	bl	8025bde <_ZN10__cxxabiv111__terminateEPFvvE>

08025c02 <abort>:
 8025c02:	b508      	push	{r3, lr}
 8025c04:	2006      	movs	r0, #6
 8025c06:	f000 fe01 	bl	802680c <raise>
 8025c0a:	2001      	movs	r0, #1
 8025c0c:	f7df fb1e 	bl	800524c <_exit>

08025c10 <__assert_func>:
 8025c10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8025c12:	4614      	mov	r4, r2
 8025c14:	461a      	mov	r2, r3
 8025c16:	4b09      	ldr	r3, [pc, #36]	; (8025c3c <__assert_func+0x2c>)
 8025c18:	681b      	ldr	r3, [r3, #0]
 8025c1a:	4605      	mov	r5, r0
 8025c1c:	68d8      	ldr	r0, [r3, #12]
 8025c1e:	b14c      	cbz	r4, 8025c34 <__assert_func+0x24>
 8025c20:	4b07      	ldr	r3, [pc, #28]	; (8025c40 <__assert_func+0x30>)
 8025c22:	9100      	str	r1, [sp, #0]
 8025c24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8025c28:	4906      	ldr	r1, [pc, #24]	; (8025c44 <__assert_func+0x34>)
 8025c2a:	462b      	mov	r3, r5
 8025c2c:	f000 f8fe 	bl	8025e2c <fiprintf>
 8025c30:	f7ff ffe7 	bl	8025c02 <abort>
 8025c34:	4b04      	ldr	r3, [pc, #16]	; (8025c48 <__assert_func+0x38>)
 8025c36:	461c      	mov	r4, r3
 8025c38:	e7f3      	b.n	8025c22 <__assert_func+0x12>
 8025c3a:	bf00      	nop
 8025c3c:	200000e8 	.word	0x200000e8
 8025c40:	0802b664 	.word	0x0802b664
 8025c44:	0802b671 	.word	0x0802b671
 8025c48:	0802b69f 	.word	0x0802b69f

08025c4c <atexit>:
 8025c4c:	2300      	movs	r3, #0
 8025c4e:	4601      	mov	r1, r0
 8025c50:	461a      	mov	r2, r3
 8025c52:	4618      	mov	r0, r3
 8025c54:	f000 bf20 	b.w	8026a98 <__register_exitproc>

08025c58 <__cxa_atexit>:
 8025c58:	b510      	push	{r4, lr}
 8025c5a:	4c05      	ldr	r4, [pc, #20]	; (8025c70 <__cxa_atexit+0x18>)
 8025c5c:	4613      	mov	r3, r2
 8025c5e:	b12c      	cbz	r4, 8025c6c <__cxa_atexit+0x14>
 8025c60:	460a      	mov	r2, r1
 8025c62:	4601      	mov	r1, r0
 8025c64:	2002      	movs	r0, #2
 8025c66:	f000 ff17 	bl	8026a98 <__register_exitproc>
 8025c6a:	bd10      	pop	{r4, pc}
 8025c6c:	4620      	mov	r0, r4
 8025c6e:	e7fc      	b.n	8025c6a <__cxa_atexit+0x12>
 8025c70:	08026a99 	.word	0x08026a99

08025c74 <__errno>:
 8025c74:	4b01      	ldr	r3, [pc, #4]	; (8025c7c <__errno+0x8>)
 8025c76:	6818      	ldr	r0, [r3, #0]
 8025c78:	4770      	bx	lr
 8025c7a:	bf00      	nop
 8025c7c:	200000e8 	.word	0x200000e8

08025c80 <std>:
 8025c80:	2300      	movs	r3, #0
 8025c82:	b510      	push	{r4, lr}
 8025c84:	4604      	mov	r4, r0
 8025c86:	e9c0 3300 	strd	r3, r3, [r0]
 8025c8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8025c8e:	6083      	str	r3, [r0, #8]
 8025c90:	8181      	strh	r1, [r0, #12]
 8025c92:	6643      	str	r3, [r0, #100]	; 0x64
 8025c94:	81c2      	strh	r2, [r0, #14]
 8025c96:	6183      	str	r3, [r0, #24]
 8025c98:	4619      	mov	r1, r3
 8025c9a:	2208      	movs	r2, #8
 8025c9c:	305c      	adds	r0, #92	; 0x5c
 8025c9e:	f000 f93d 	bl	8025f1c <memset>
 8025ca2:	4b05      	ldr	r3, [pc, #20]	; (8025cb8 <std+0x38>)
 8025ca4:	6263      	str	r3, [r4, #36]	; 0x24
 8025ca6:	4b05      	ldr	r3, [pc, #20]	; (8025cbc <std+0x3c>)
 8025ca8:	62a3      	str	r3, [r4, #40]	; 0x28
 8025caa:	4b05      	ldr	r3, [pc, #20]	; (8025cc0 <std+0x40>)
 8025cac:	62e3      	str	r3, [r4, #44]	; 0x2c
 8025cae:	4b05      	ldr	r3, [pc, #20]	; (8025cc4 <std+0x44>)
 8025cb0:	6224      	str	r4, [r4, #32]
 8025cb2:	6323      	str	r3, [r4, #48]	; 0x30
 8025cb4:	bd10      	pop	{r4, pc}
 8025cb6:	bf00      	nop
 8025cb8:	08026845 	.word	0x08026845
 8025cbc:	08026867 	.word	0x08026867
 8025cc0:	0802689f 	.word	0x0802689f
 8025cc4:	080268c3 	.word	0x080268c3

08025cc8 <_cleanup_r>:
 8025cc8:	4901      	ldr	r1, [pc, #4]	; (8025cd0 <_cleanup_r+0x8>)
 8025cca:	f000 b8c1 	b.w	8025e50 <_fwalk_reent>
 8025cce:	bf00      	nop
 8025cd0:	08026c89 	.word	0x08026c89

08025cd4 <__sfmoreglue>:
 8025cd4:	b570      	push	{r4, r5, r6, lr}
 8025cd6:	2268      	movs	r2, #104	; 0x68
 8025cd8:	1e4d      	subs	r5, r1, #1
 8025cda:	4355      	muls	r5, r2
 8025cdc:	460e      	mov	r6, r1
 8025cde:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8025ce2:	f000 f98f 	bl	8026004 <_malloc_r>
 8025ce6:	4604      	mov	r4, r0
 8025ce8:	b140      	cbz	r0, 8025cfc <__sfmoreglue+0x28>
 8025cea:	2100      	movs	r1, #0
 8025cec:	e9c0 1600 	strd	r1, r6, [r0]
 8025cf0:	300c      	adds	r0, #12
 8025cf2:	60a0      	str	r0, [r4, #8]
 8025cf4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8025cf8:	f000 f910 	bl	8025f1c <memset>
 8025cfc:	4620      	mov	r0, r4
 8025cfe:	bd70      	pop	{r4, r5, r6, pc}

08025d00 <__sfp_lock_acquire>:
 8025d00:	4801      	ldr	r0, [pc, #4]	; (8025d08 <__sfp_lock_acquire+0x8>)
 8025d02:	f000 b8ea 	b.w	8025eda <__retarget_lock_acquire_recursive>
 8025d06:	bf00      	nop
 8025d08:	20027cca 	.word	0x20027cca

08025d0c <__sfp_lock_release>:
 8025d0c:	4801      	ldr	r0, [pc, #4]	; (8025d14 <__sfp_lock_release+0x8>)
 8025d0e:	f000 b8e6 	b.w	8025ede <__retarget_lock_release_recursive>
 8025d12:	bf00      	nop
 8025d14:	20027cca 	.word	0x20027cca

08025d18 <__sinit_lock_acquire>:
 8025d18:	4801      	ldr	r0, [pc, #4]	; (8025d20 <__sinit_lock_acquire+0x8>)
 8025d1a:	f000 b8de 	b.w	8025eda <__retarget_lock_acquire_recursive>
 8025d1e:	bf00      	nop
 8025d20:	20027ccb 	.word	0x20027ccb

08025d24 <__sinit_lock_release>:
 8025d24:	4801      	ldr	r0, [pc, #4]	; (8025d2c <__sinit_lock_release+0x8>)
 8025d26:	f000 b8da 	b.w	8025ede <__retarget_lock_release_recursive>
 8025d2a:	bf00      	nop
 8025d2c:	20027ccb 	.word	0x20027ccb

08025d30 <__sinit>:
 8025d30:	b510      	push	{r4, lr}
 8025d32:	4604      	mov	r4, r0
 8025d34:	f7ff fff0 	bl	8025d18 <__sinit_lock_acquire>
 8025d38:	69a3      	ldr	r3, [r4, #24]
 8025d3a:	b11b      	cbz	r3, 8025d44 <__sinit+0x14>
 8025d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025d40:	f7ff bff0 	b.w	8025d24 <__sinit_lock_release>
 8025d44:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8025d48:	6523      	str	r3, [r4, #80]	; 0x50
 8025d4a:	4b13      	ldr	r3, [pc, #76]	; (8025d98 <__sinit+0x68>)
 8025d4c:	4a13      	ldr	r2, [pc, #76]	; (8025d9c <__sinit+0x6c>)
 8025d4e:	681b      	ldr	r3, [r3, #0]
 8025d50:	62a2      	str	r2, [r4, #40]	; 0x28
 8025d52:	42a3      	cmp	r3, r4
 8025d54:	bf04      	itt	eq
 8025d56:	2301      	moveq	r3, #1
 8025d58:	61a3      	streq	r3, [r4, #24]
 8025d5a:	4620      	mov	r0, r4
 8025d5c:	f000 f820 	bl	8025da0 <__sfp>
 8025d60:	6060      	str	r0, [r4, #4]
 8025d62:	4620      	mov	r0, r4
 8025d64:	f000 f81c 	bl	8025da0 <__sfp>
 8025d68:	60a0      	str	r0, [r4, #8]
 8025d6a:	4620      	mov	r0, r4
 8025d6c:	f000 f818 	bl	8025da0 <__sfp>
 8025d70:	2200      	movs	r2, #0
 8025d72:	60e0      	str	r0, [r4, #12]
 8025d74:	2104      	movs	r1, #4
 8025d76:	6860      	ldr	r0, [r4, #4]
 8025d78:	f7ff ff82 	bl	8025c80 <std>
 8025d7c:	68a0      	ldr	r0, [r4, #8]
 8025d7e:	2201      	movs	r2, #1
 8025d80:	2109      	movs	r1, #9
 8025d82:	f7ff ff7d 	bl	8025c80 <std>
 8025d86:	68e0      	ldr	r0, [r4, #12]
 8025d88:	2202      	movs	r2, #2
 8025d8a:	2112      	movs	r1, #18
 8025d8c:	f7ff ff78 	bl	8025c80 <std>
 8025d90:	2301      	movs	r3, #1
 8025d92:	61a3      	str	r3, [r4, #24]
 8025d94:	e7d2      	b.n	8025d3c <__sinit+0xc>
 8025d96:	bf00      	nop
 8025d98:	0802b700 	.word	0x0802b700
 8025d9c:	08025cc9 	.word	0x08025cc9

08025da0 <__sfp>:
 8025da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025da2:	4607      	mov	r7, r0
 8025da4:	f7ff ffac 	bl	8025d00 <__sfp_lock_acquire>
 8025da8:	4b1e      	ldr	r3, [pc, #120]	; (8025e24 <__sfp+0x84>)
 8025daa:	681e      	ldr	r6, [r3, #0]
 8025dac:	69b3      	ldr	r3, [r6, #24]
 8025dae:	b913      	cbnz	r3, 8025db6 <__sfp+0x16>
 8025db0:	4630      	mov	r0, r6
 8025db2:	f7ff ffbd 	bl	8025d30 <__sinit>
 8025db6:	3648      	adds	r6, #72	; 0x48
 8025db8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8025dbc:	3b01      	subs	r3, #1
 8025dbe:	d503      	bpl.n	8025dc8 <__sfp+0x28>
 8025dc0:	6833      	ldr	r3, [r6, #0]
 8025dc2:	b30b      	cbz	r3, 8025e08 <__sfp+0x68>
 8025dc4:	6836      	ldr	r6, [r6, #0]
 8025dc6:	e7f7      	b.n	8025db8 <__sfp+0x18>
 8025dc8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8025dcc:	b9d5      	cbnz	r5, 8025e04 <__sfp+0x64>
 8025dce:	4b16      	ldr	r3, [pc, #88]	; (8025e28 <__sfp+0x88>)
 8025dd0:	60e3      	str	r3, [r4, #12]
 8025dd2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8025dd6:	6665      	str	r5, [r4, #100]	; 0x64
 8025dd8:	f000 f87e 	bl	8025ed8 <__retarget_lock_init_recursive>
 8025ddc:	f7ff ff96 	bl	8025d0c <__sfp_lock_release>
 8025de0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8025de4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8025de8:	6025      	str	r5, [r4, #0]
 8025dea:	61a5      	str	r5, [r4, #24]
 8025dec:	2208      	movs	r2, #8
 8025dee:	4629      	mov	r1, r5
 8025df0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8025df4:	f000 f892 	bl	8025f1c <memset>
 8025df8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8025dfc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8025e00:	4620      	mov	r0, r4
 8025e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025e04:	3468      	adds	r4, #104	; 0x68
 8025e06:	e7d9      	b.n	8025dbc <__sfp+0x1c>
 8025e08:	2104      	movs	r1, #4
 8025e0a:	4638      	mov	r0, r7
 8025e0c:	f7ff ff62 	bl	8025cd4 <__sfmoreglue>
 8025e10:	4604      	mov	r4, r0
 8025e12:	6030      	str	r0, [r6, #0]
 8025e14:	2800      	cmp	r0, #0
 8025e16:	d1d5      	bne.n	8025dc4 <__sfp+0x24>
 8025e18:	f7ff ff78 	bl	8025d0c <__sfp_lock_release>
 8025e1c:	230c      	movs	r3, #12
 8025e1e:	603b      	str	r3, [r7, #0]
 8025e20:	e7ee      	b.n	8025e00 <__sfp+0x60>
 8025e22:	bf00      	nop
 8025e24:	0802b700 	.word	0x0802b700
 8025e28:	ffff0001 	.word	0xffff0001

08025e2c <fiprintf>:
 8025e2c:	b40e      	push	{r1, r2, r3}
 8025e2e:	b503      	push	{r0, r1, lr}
 8025e30:	4601      	mov	r1, r0
 8025e32:	ab03      	add	r3, sp, #12
 8025e34:	4805      	ldr	r0, [pc, #20]	; (8025e4c <fiprintf+0x20>)
 8025e36:	f853 2b04 	ldr.w	r2, [r3], #4
 8025e3a:	6800      	ldr	r0, [r0, #0]
 8025e3c:	9301      	str	r3, [sp, #4]
 8025e3e:	f000 f97f 	bl	8026140 <_vfiprintf_r>
 8025e42:	b002      	add	sp, #8
 8025e44:	f85d eb04 	ldr.w	lr, [sp], #4
 8025e48:	b003      	add	sp, #12
 8025e4a:	4770      	bx	lr
 8025e4c:	200000e8 	.word	0x200000e8

08025e50 <_fwalk_reent>:
 8025e50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025e54:	4606      	mov	r6, r0
 8025e56:	4688      	mov	r8, r1
 8025e58:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8025e5c:	2700      	movs	r7, #0
 8025e5e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8025e62:	f1b9 0901 	subs.w	r9, r9, #1
 8025e66:	d505      	bpl.n	8025e74 <_fwalk_reent+0x24>
 8025e68:	6824      	ldr	r4, [r4, #0]
 8025e6a:	2c00      	cmp	r4, #0
 8025e6c:	d1f7      	bne.n	8025e5e <_fwalk_reent+0xe>
 8025e6e:	4638      	mov	r0, r7
 8025e70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025e74:	89ab      	ldrh	r3, [r5, #12]
 8025e76:	2b01      	cmp	r3, #1
 8025e78:	d907      	bls.n	8025e8a <_fwalk_reent+0x3a>
 8025e7a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8025e7e:	3301      	adds	r3, #1
 8025e80:	d003      	beq.n	8025e8a <_fwalk_reent+0x3a>
 8025e82:	4629      	mov	r1, r5
 8025e84:	4630      	mov	r0, r6
 8025e86:	47c0      	blx	r8
 8025e88:	4307      	orrs	r7, r0
 8025e8a:	3568      	adds	r5, #104	; 0x68
 8025e8c:	e7e9      	b.n	8025e62 <_fwalk_reent+0x12>
	...

08025e90 <__libc_init_array>:
 8025e90:	b570      	push	{r4, r5, r6, lr}
 8025e92:	4d0d      	ldr	r5, [pc, #52]	; (8025ec8 <__libc_init_array+0x38>)
 8025e94:	4c0d      	ldr	r4, [pc, #52]	; (8025ecc <__libc_init_array+0x3c>)
 8025e96:	1b64      	subs	r4, r4, r5
 8025e98:	10a4      	asrs	r4, r4, #2
 8025e9a:	2600      	movs	r6, #0
 8025e9c:	42a6      	cmp	r6, r4
 8025e9e:	d109      	bne.n	8025eb4 <__libc_init_array+0x24>
 8025ea0:	4d0b      	ldr	r5, [pc, #44]	; (8025ed0 <__libc_init_array+0x40>)
 8025ea2:	4c0c      	ldr	r4, [pc, #48]	; (8025ed4 <__libc_init_array+0x44>)
 8025ea4:	f000 ffe4 	bl	8026e70 <_init>
 8025ea8:	1b64      	subs	r4, r4, r5
 8025eaa:	10a4      	asrs	r4, r4, #2
 8025eac:	2600      	movs	r6, #0
 8025eae:	42a6      	cmp	r6, r4
 8025eb0:	d105      	bne.n	8025ebe <__libc_init_array+0x2e>
 8025eb2:	bd70      	pop	{r4, r5, r6, pc}
 8025eb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8025eb8:	4798      	blx	r3
 8025eba:	3601      	adds	r6, #1
 8025ebc:	e7ee      	b.n	8025e9c <__libc_init_array+0xc>
 8025ebe:	f855 3b04 	ldr.w	r3, [r5], #4
 8025ec2:	4798      	blx	r3
 8025ec4:	3601      	adds	r6, #1
 8025ec6:	e7f2      	b.n	8025eae <__libc_init_array+0x1e>
 8025ec8:	0802b834 	.word	0x0802b834
 8025ecc:	0802b834 	.word	0x0802b834
 8025ed0:	0802b834 	.word	0x0802b834
 8025ed4:	0802b850 	.word	0x0802b850

08025ed8 <__retarget_lock_init_recursive>:
 8025ed8:	4770      	bx	lr

08025eda <__retarget_lock_acquire_recursive>:
 8025eda:	4770      	bx	lr

08025edc <__retarget_lock_release>:
 8025edc:	4770      	bx	lr

08025ede <__retarget_lock_release_recursive>:
 8025ede:	4770      	bx	lr

08025ee0 <malloc>:
 8025ee0:	4b02      	ldr	r3, [pc, #8]	; (8025eec <malloc+0xc>)
 8025ee2:	4601      	mov	r1, r0
 8025ee4:	6818      	ldr	r0, [r3, #0]
 8025ee6:	f000 b88d 	b.w	8026004 <_malloc_r>
 8025eea:	bf00      	nop
 8025eec:	200000e8 	.word	0x200000e8

08025ef0 <free>:
 8025ef0:	4b02      	ldr	r3, [pc, #8]	; (8025efc <free+0xc>)
 8025ef2:	4601      	mov	r1, r0
 8025ef4:	6818      	ldr	r0, [r3, #0]
 8025ef6:	f000 b819 	b.w	8025f2c <_free_r>
 8025efa:	bf00      	nop
 8025efc:	200000e8 	.word	0x200000e8

08025f00 <memcpy>:
 8025f00:	440a      	add	r2, r1
 8025f02:	4291      	cmp	r1, r2
 8025f04:	f100 33ff 	add.w	r3, r0, #4294967295
 8025f08:	d100      	bne.n	8025f0c <memcpy+0xc>
 8025f0a:	4770      	bx	lr
 8025f0c:	b510      	push	{r4, lr}
 8025f0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8025f12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8025f16:	4291      	cmp	r1, r2
 8025f18:	d1f9      	bne.n	8025f0e <memcpy+0xe>
 8025f1a:	bd10      	pop	{r4, pc}

08025f1c <memset>:
 8025f1c:	4402      	add	r2, r0
 8025f1e:	4603      	mov	r3, r0
 8025f20:	4293      	cmp	r3, r2
 8025f22:	d100      	bne.n	8025f26 <memset+0xa>
 8025f24:	4770      	bx	lr
 8025f26:	f803 1b01 	strb.w	r1, [r3], #1
 8025f2a:	e7f9      	b.n	8025f20 <memset+0x4>

08025f2c <_free_r>:
 8025f2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8025f2e:	2900      	cmp	r1, #0
 8025f30:	d044      	beq.n	8025fbc <_free_r+0x90>
 8025f32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8025f36:	9001      	str	r0, [sp, #4]
 8025f38:	2b00      	cmp	r3, #0
 8025f3a:	f1a1 0404 	sub.w	r4, r1, #4
 8025f3e:	bfb8      	it	lt
 8025f40:	18e4      	addlt	r4, r4, r3
 8025f42:	f000 ff55 	bl	8026df0 <__malloc_lock>
 8025f46:	4a1e      	ldr	r2, [pc, #120]	; (8025fc0 <_free_r+0x94>)
 8025f48:	9801      	ldr	r0, [sp, #4]
 8025f4a:	6813      	ldr	r3, [r2, #0]
 8025f4c:	b933      	cbnz	r3, 8025f5c <_free_r+0x30>
 8025f4e:	6063      	str	r3, [r4, #4]
 8025f50:	6014      	str	r4, [r2, #0]
 8025f52:	b003      	add	sp, #12
 8025f54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8025f58:	f000 bf50 	b.w	8026dfc <__malloc_unlock>
 8025f5c:	42a3      	cmp	r3, r4
 8025f5e:	d908      	bls.n	8025f72 <_free_r+0x46>
 8025f60:	6825      	ldr	r5, [r4, #0]
 8025f62:	1961      	adds	r1, r4, r5
 8025f64:	428b      	cmp	r3, r1
 8025f66:	bf01      	itttt	eq
 8025f68:	6819      	ldreq	r1, [r3, #0]
 8025f6a:	685b      	ldreq	r3, [r3, #4]
 8025f6c:	1949      	addeq	r1, r1, r5
 8025f6e:	6021      	streq	r1, [r4, #0]
 8025f70:	e7ed      	b.n	8025f4e <_free_r+0x22>
 8025f72:	461a      	mov	r2, r3
 8025f74:	685b      	ldr	r3, [r3, #4]
 8025f76:	b10b      	cbz	r3, 8025f7c <_free_r+0x50>
 8025f78:	42a3      	cmp	r3, r4
 8025f7a:	d9fa      	bls.n	8025f72 <_free_r+0x46>
 8025f7c:	6811      	ldr	r1, [r2, #0]
 8025f7e:	1855      	adds	r5, r2, r1
 8025f80:	42a5      	cmp	r5, r4
 8025f82:	d10b      	bne.n	8025f9c <_free_r+0x70>
 8025f84:	6824      	ldr	r4, [r4, #0]
 8025f86:	4421      	add	r1, r4
 8025f88:	1854      	adds	r4, r2, r1
 8025f8a:	42a3      	cmp	r3, r4
 8025f8c:	6011      	str	r1, [r2, #0]
 8025f8e:	d1e0      	bne.n	8025f52 <_free_r+0x26>
 8025f90:	681c      	ldr	r4, [r3, #0]
 8025f92:	685b      	ldr	r3, [r3, #4]
 8025f94:	6053      	str	r3, [r2, #4]
 8025f96:	4421      	add	r1, r4
 8025f98:	6011      	str	r1, [r2, #0]
 8025f9a:	e7da      	b.n	8025f52 <_free_r+0x26>
 8025f9c:	d902      	bls.n	8025fa4 <_free_r+0x78>
 8025f9e:	230c      	movs	r3, #12
 8025fa0:	6003      	str	r3, [r0, #0]
 8025fa2:	e7d6      	b.n	8025f52 <_free_r+0x26>
 8025fa4:	6825      	ldr	r5, [r4, #0]
 8025fa6:	1961      	adds	r1, r4, r5
 8025fa8:	428b      	cmp	r3, r1
 8025faa:	bf04      	itt	eq
 8025fac:	6819      	ldreq	r1, [r3, #0]
 8025fae:	685b      	ldreq	r3, [r3, #4]
 8025fb0:	6063      	str	r3, [r4, #4]
 8025fb2:	bf04      	itt	eq
 8025fb4:	1949      	addeq	r1, r1, r5
 8025fb6:	6021      	streq	r1, [r4, #0]
 8025fb8:	6054      	str	r4, [r2, #4]
 8025fba:	e7ca      	b.n	8025f52 <_free_r+0x26>
 8025fbc:	b003      	add	sp, #12
 8025fbe:	bd30      	pop	{r4, r5, pc}
 8025fc0:	20027ccc 	.word	0x20027ccc

08025fc4 <sbrk_aligned>:
 8025fc4:	b570      	push	{r4, r5, r6, lr}
 8025fc6:	4e0e      	ldr	r6, [pc, #56]	; (8026000 <sbrk_aligned+0x3c>)
 8025fc8:	460c      	mov	r4, r1
 8025fca:	6831      	ldr	r1, [r6, #0]
 8025fcc:	4605      	mov	r5, r0
 8025fce:	b911      	cbnz	r1, 8025fd6 <sbrk_aligned+0x12>
 8025fd0:	f000 fbe4 	bl	802679c <_sbrk_r>
 8025fd4:	6030      	str	r0, [r6, #0]
 8025fd6:	4621      	mov	r1, r4
 8025fd8:	4628      	mov	r0, r5
 8025fda:	f000 fbdf 	bl	802679c <_sbrk_r>
 8025fde:	1c43      	adds	r3, r0, #1
 8025fe0:	d00a      	beq.n	8025ff8 <sbrk_aligned+0x34>
 8025fe2:	1cc4      	adds	r4, r0, #3
 8025fe4:	f024 0403 	bic.w	r4, r4, #3
 8025fe8:	42a0      	cmp	r0, r4
 8025fea:	d007      	beq.n	8025ffc <sbrk_aligned+0x38>
 8025fec:	1a21      	subs	r1, r4, r0
 8025fee:	4628      	mov	r0, r5
 8025ff0:	f000 fbd4 	bl	802679c <_sbrk_r>
 8025ff4:	3001      	adds	r0, #1
 8025ff6:	d101      	bne.n	8025ffc <sbrk_aligned+0x38>
 8025ff8:	f04f 34ff 	mov.w	r4, #4294967295
 8025ffc:	4620      	mov	r0, r4
 8025ffe:	bd70      	pop	{r4, r5, r6, pc}
 8026000:	20027cd0 	.word	0x20027cd0

08026004 <_malloc_r>:
 8026004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026008:	1ccd      	adds	r5, r1, #3
 802600a:	f025 0503 	bic.w	r5, r5, #3
 802600e:	3508      	adds	r5, #8
 8026010:	2d0c      	cmp	r5, #12
 8026012:	bf38      	it	cc
 8026014:	250c      	movcc	r5, #12
 8026016:	2d00      	cmp	r5, #0
 8026018:	4607      	mov	r7, r0
 802601a:	db01      	blt.n	8026020 <_malloc_r+0x1c>
 802601c:	42a9      	cmp	r1, r5
 802601e:	d905      	bls.n	802602c <_malloc_r+0x28>
 8026020:	230c      	movs	r3, #12
 8026022:	603b      	str	r3, [r7, #0]
 8026024:	2600      	movs	r6, #0
 8026026:	4630      	mov	r0, r6
 8026028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802602c:	4e2e      	ldr	r6, [pc, #184]	; (80260e8 <_malloc_r+0xe4>)
 802602e:	f000 fedf 	bl	8026df0 <__malloc_lock>
 8026032:	6833      	ldr	r3, [r6, #0]
 8026034:	461c      	mov	r4, r3
 8026036:	bb34      	cbnz	r4, 8026086 <_malloc_r+0x82>
 8026038:	4629      	mov	r1, r5
 802603a:	4638      	mov	r0, r7
 802603c:	f7ff ffc2 	bl	8025fc4 <sbrk_aligned>
 8026040:	1c43      	adds	r3, r0, #1
 8026042:	4604      	mov	r4, r0
 8026044:	d14d      	bne.n	80260e2 <_malloc_r+0xde>
 8026046:	6834      	ldr	r4, [r6, #0]
 8026048:	4626      	mov	r6, r4
 802604a:	2e00      	cmp	r6, #0
 802604c:	d140      	bne.n	80260d0 <_malloc_r+0xcc>
 802604e:	6823      	ldr	r3, [r4, #0]
 8026050:	4631      	mov	r1, r6
 8026052:	4638      	mov	r0, r7
 8026054:	eb04 0803 	add.w	r8, r4, r3
 8026058:	f000 fba0 	bl	802679c <_sbrk_r>
 802605c:	4580      	cmp	r8, r0
 802605e:	d13a      	bne.n	80260d6 <_malloc_r+0xd2>
 8026060:	6821      	ldr	r1, [r4, #0]
 8026062:	3503      	adds	r5, #3
 8026064:	1a6d      	subs	r5, r5, r1
 8026066:	f025 0503 	bic.w	r5, r5, #3
 802606a:	3508      	adds	r5, #8
 802606c:	2d0c      	cmp	r5, #12
 802606e:	bf38      	it	cc
 8026070:	250c      	movcc	r5, #12
 8026072:	4629      	mov	r1, r5
 8026074:	4638      	mov	r0, r7
 8026076:	f7ff ffa5 	bl	8025fc4 <sbrk_aligned>
 802607a:	3001      	adds	r0, #1
 802607c:	d02b      	beq.n	80260d6 <_malloc_r+0xd2>
 802607e:	6823      	ldr	r3, [r4, #0]
 8026080:	442b      	add	r3, r5
 8026082:	6023      	str	r3, [r4, #0]
 8026084:	e00e      	b.n	80260a4 <_malloc_r+0xa0>
 8026086:	6822      	ldr	r2, [r4, #0]
 8026088:	1b52      	subs	r2, r2, r5
 802608a:	d41e      	bmi.n	80260ca <_malloc_r+0xc6>
 802608c:	2a0b      	cmp	r2, #11
 802608e:	d916      	bls.n	80260be <_malloc_r+0xba>
 8026090:	1961      	adds	r1, r4, r5
 8026092:	42a3      	cmp	r3, r4
 8026094:	6025      	str	r5, [r4, #0]
 8026096:	bf18      	it	ne
 8026098:	6059      	strne	r1, [r3, #4]
 802609a:	6863      	ldr	r3, [r4, #4]
 802609c:	bf08      	it	eq
 802609e:	6031      	streq	r1, [r6, #0]
 80260a0:	5162      	str	r2, [r4, r5]
 80260a2:	604b      	str	r3, [r1, #4]
 80260a4:	4638      	mov	r0, r7
 80260a6:	f104 060b 	add.w	r6, r4, #11
 80260aa:	f000 fea7 	bl	8026dfc <__malloc_unlock>
 80260ae:	f026 0607 	bic.w	r6, r6, #7
 80260b2:	1d23      	adds	r3, r4, #4
 80260b4:	1af2      	subs	r2, r6, r3
 80260b6:	d0b6      	beq.n	8026026 <_malloc_r+0x22>
 80260b8:	1b9b      	subs	r3, r3, r6
 80260ba:	50a3      	str	r3, [r4, r2]
 80260bc:	e7b3      	b.n	8026026 <_malloc_r+0x22>
 80260be:	6862      	ldr	r2, [r4, #4]
 80260c0:	42a3      	cmp	r3, r4
 80260c2:	bf0c      	ite	eq
 80260c4:	6032      	streq	r2, [r6, #0]
 80260c6:	605a      	strne	r2, [r3, #4]
 80260c8:	e7ec      	b.n	80260a4 <_malloc_r+0xa0>
 80260ca:	4623      	mov	r3, r4
 80260cc:	6864      	ldr	r4, [r4, #4]
 80260ce:	e7b2      	b.n	8026036 <_malloc_r+0x32>
 80260d0:	4634      	mov	r4, r6
 80260d2:	6876      	ldr	r6, [r6, #4]
 80260d4:	e7b9      	b.n	802604a <_malloc_r+0x46>
 80260d6:	230c      	movs	r3, #12
 80260d8:	603b      	str	r3, [r7, #0]
 80260da:	4638      	mov	r0, r7
 80260dc:	f000 fe8e 	bl	8026dfc <__malloc_unlock>
 80260e0:	e7a1      	b.n	8026026 <_malloc_r+0x22>
 80260e2:	6025      	str	r5, [r4, #0]
 80260e4:	e7de      	b.n	80260a4 <_malloc_r+0xa0>
 80260e6:	bf00      	nop
 80260e8:	20027ccc 	.word	0x20027ccc

080260ec <__sfputc_r>:
 80260ec:	6893      	ldr	r3, [r2, #8]
 80260ee:	3b01      	subs	r3, #1
 80260f0:	2b00      	cmp	r3, #0
 80260f2:	b410      	push	{r4}
 80260f4:	6093      	str	r3, [r2, #8]
 80260f6:	da08      	bge.n	802610a <__sfputc_r+0x1e>
 80260f8:	6994      	ldr	r4, [r2, #24]
 80260fa:	42a3      	cmp	r3, r4
 80260fc:	db01      	blt.n	8026102 <__sfputc_r+0x16>
 80260fe:	290a      	cmp	r1, #10
 8026100:	d103      	bne.n	802610a <__sfputc_r+0x1e>
 8026102:	f85d 4b04 	ldr.w	r4, [sp], #4
 8026106:	f000 bbf5 	b.w	80268f4 <__swbuf_r>
 802610a:	6813      	ldr	r3, [r2, #0]
 802610c:	1c58      	adds	r0, r3, #1
 802610e:	6010      	str	r0, [r2, #0]
 8026110:	7019      	strb	r1, [r3, #0]
 8026112:	4608      	mov	r0, r1
 8026114:	f85d 4b04 	ldr.w	r4, [sp], #4
 8026118:	4770      	bx	lr

0802611a <__sfputs_r>:
 802611a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802611c:	4606      	mov	r6, r0
 802611e:	460f      	mov	r7, r1
 8026120:	4614      	mov	r4, r2
 8026122:	18d5      	adds	r5, r2, r3
 8026124:	42ac      	cmp	r4, r5
 8026126:	d101      	bne.n	802612c <__sfputs_r+0x12>
 8026128:	2000      	movs	r0, #0
 802612a:	e007      	b.n	802613c <__sfputs_r+0x22>
 802612c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026130:	463a      	mov	r2, r7
 8026132:	4630      	mov	r0, r6
 8026134:	f7ff ffda 	bl	80260ec <__sfputc_r>
 8026138:	1c43      	adds	r3, r0, #1
 802613a:	d1f3      	bne.n	8026124 <__sfputs_r+0xa>
 802613c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08026140 <_vfiprintf_r>:
 8026140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026144:	460d      	mov	r5, r1
 8026146:	b09d      	sub	sp, #116	; 0x74
 8026148:	4614      	mov	r4, r2
 802614a:	4698      	mov	r8, r3
 802614c:	4606      	mov	r6, r0
 802614e:	b118      	cbz	r0, 8026158 <_vfiprintf_r+0x18>
 8026150:	6983      	ldr	r3, [r0, #24]
 8026152:	b90b      	cbnz	r3, 8026158 <_vfiprintf_r+0x18>
 8026154:	f7ff fdec 	bl	8025d30 <__sinit>
 8026158:	4b89      	ldr	r3, [pc, #548]	; (8026380 <_vfiprintf_r+0x240>)
 802615a:	429d      	cmp	r5, r3
 802615c:	d11b      	bne.n	8026196 <_vfiprintf_r+0x56>
 802615e:	6875      	ldr	r5, [r6, #4]
 8026160:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8026162:	07d9      	lsls	r1, r3, #31
 8026164:	d405      	bmi.n	8026172 <_vfiprintf_r+0x32>
 8026166:	89ab      	ldrh	r3, [r5, #12]
 8026168:	059a      	lsls	r2, r3, #22
 802616a:	d402      	bmi.n	8026172 <_vfiprintf_r+0x32>
 802616c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802616e:	f7ff feb4 	bl	8025eda <__retarget_lock_acquire_recursive>
 8026172:	89ab      	ldrh	r3, [r5, #12]
 8026174:	071b      	lsls	r3, r3, #28
 8026176:	d501      	bpl.n	802617c <_vfiprintf_r+0x3c>
 8026178:	692b      	ldr	r3, [r5, #16]
 802617a:	b9eb      	cbnz	r3, 80261b8 <_vfiprintf_r+0x78>
 802617c:	4629      	mov	r1, r5
 802617e:	4630      	mov	r0, r6
 8026180:	f000 fc1c 	bl	80269bc <__swsetup_r>
 8026184:	b1c0      	cbz	r0, 80261b8 <_vfiprintf_r+0x78>
 8026186:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8026188:	07dc      	lsls	r4, r3, #31
 802618a:	d50e      	bpl.n	80261aa <_vfiprintf_r+0x6a>
 802618c:	f04f 30ff 	mov.w	r0, #4294967295
 8026190:	b01d      	add	sp, #116	; 0x74
 8026192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026196:	4b7b      	ldr	r3, [pc, #492]	; (8026384 <_vfiprintf_r+0x244>)
 8026198:	429d      	cmp	r5, r3
 802619a:	d101      	bne.n	80261a0 <_vfiprintf_r+0x60>
 802619c:	68b5      	ldr	r5, [r6, #8]
 802619e:	e7df      	b.n	8026160 <_vfiprintf_r+0x20>
 80261a0:	4b79      	ldr	r3, [pc, #484]	; (8026388 <_vfiprintf_r+0x248>)
 80261a2:	429d      	cmp	r5, r3
 80261a4:	bf08      	it	eq
 80261a6:	68f5      	ldreq	r5, [r6, #12]
 80261a8:	e7da      	b.n	8026160 <_vfiprintf_r+0x20>
 80261aa:	89ab      	ldrh	r3, [r5, #12]
 80261ac:	0598      	lsls	r0, r3, #22
 80261ae:	d4ed      	bmi.n	802618c <_vfiprintf_r+0x4c>
 80261b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80261b2:	f7ff fe94 	bl	8025ede <__retarget_lock_release_recursive>
 80261b6:	e7e9      	b.n	802618c <_vfiprintf_r+0x4c>
 80261b8:	2300      	movs	r3, #0
 80261ba:	9309      	str	r3, [sp, #36]	; 0x24
 80261bc:	2320      	movs	r3, #32
 80261be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80261c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80261c6:	2330      	movs	r3, #48	; 0x30
 80261c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802638c <_vfiprintf_r+0x24c>
 80261cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80261d0:	f04f 0901 	mov.w	r9, #1
 80261d4:	4623      	mov	r3, r4
 80261d6:	469a      	mov	sl, r3
 80261d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80261dc:	b10a      	cbz	r2, 80261e2 <_vfiprintf_r+0xa2>
 80261de:	2a25      	cmp	r2, #37	; 0x25
 80261e0:	d1f9      	bne.n	80261d6 <_vfiprintf_r+0x96>
 80261e2:	ebba 0b04 	subs.w	fp, sl, r4
 80261e6:	d00b      	beq.n	8026200 <_vfiprintf_r+0xc0>
 80261e8:	465b      	mov	r3, fp
 80261ea:	4622      	mov	r2, r4
 80261ec:	4629      	mov	r1, r5
 80261ee:	4630      	mov	r0, r6
 80261f0:	f7ff ff93 	bl	802611a <__sfputs_r>
 80261f4:	3001      	adds	r0, #1
 80261f6:	f000 80aa 	beq.w	802634e <_vfiprintf_r+0x20e>
 80261fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80261fc:	445a      	add	r2, fp
 80261fe:	9209      	str	r2, [sp, #36]	; 0x24
 8026200:	f89a 3000 	ldrb.w	r3, [sl]
 8026204:	2b00      	cmp	r3, #0
 8026206:	f000 80a2 	beq.w	802634e <_vfiprintf_r+0x20e>
 802620a:	2300      	movs	r3, #0
 802620c:	f04f 32ff 	mov.w	r2, #4294967295
 8026210:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8026214:	f10a 0a01 	add.w	sl, sl, #1
 8026218:	9304      	str	r3, [sp, #16]
 802621a:	9307      	str	r3, [sp, #28]
 802621c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8026220:	931a      	str	r3, [sp, #104]	; 0x68
 8026222:	4654      	mov	r4, sl
 8026224:	2205      	movs	r2, #5
 8026226:	f814 1b01 	ldrb.w	r1, [r4], #1
 802622a:	4858      	ldr	r0, [pc, #352]	; (802638c <_vfiprintf_r+0x24c>)
 802622c:	f7da f808 	bl	8000240 <memchr>
 8026230:	9a04      	ldr	r2, [sp, #16]
 8026232:	b9d8      	cbnz	r0, 802626c <_vfiprintf_r+0x12c>
 8026234:	06d1      	lsls	r1, r2, #27
 8026236:	bf44      	itt	mi
 8026238:	2320      	movmi	r3, #32
 802623a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802623e:	0713      	lsls	r3, r2, #28
 8026240:	bf44      	itt	mi
 8026242:	232b      	movmi	r3, #43	; 0x2b
 8026244:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8026248:	f89a 3000 	ldrb.w	r3, [sl]
 802624c:	2b2a      	cmp	r3, #42	; 0x2a
 802624e:	d015      	beq.n	802627c <_vfiprintf_r+0x13c>
 8026250:	9a07      	ldr	r2, [sp, #28]
 8026252:	4654      	mov	r4, sl
 8026254:	2000      	movs	r0, #0
 8026256:	f04f 0c0a 	mov.w	ip, #10
 802625a:	4621      	mov	r1, r4
 802625c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8026260:	3b30      	subs	r3, #48	; 0x30
 8026262:	2b09      	cmp	r3, #9
 8026264:	d94e      	bls.n	8026304 <_vfiprintf_r+0x1c4>
 8026266:	b1b0      	cbz	r0, 8026296 <_vfiprintf_r+0x156>
 8026268:	9207      	str	r2, [sp, #28]
 802626a:	e014      	b.n	8026296 <_vfiprintf_r+0x156>
 802626c:	eba0 0308 	sub.w	r3, r0, r8
 8026270:	fa09 f303 	lsl.w	r3, r9, r3
 8026274:	4313      	orrs	r3, r2
 8026276:	9304      	str	r3, [sp, #16]
 8026278:	46a2      	mov	sl, r4
 802627a:	e7d2      	b.n	8026222 <_vfiprintf_r+0xe2>
 802627c:	9b03      	ldr	r3, [sp, #12]
 802627e:	1d19      	adds	r1, r3, #4
 8026280:	681b      	ldr	r3, [r3, #0]
 8026282:	9103      	str	r1, [sp, #12]
 8026284:	2b00      	cmp	r3, #0
 8026286:	bfbb      	ittet	lt
 8026288:	425b      	neglt	r3, r3
 802628a:	f042 0202 	orrlt.w	r2, r2, #2
 802628e:	9307      	strge	r3, [sp, #28]
 8026290:	9307      	strlt	r3, [sp, #28]
 8026292:	bfb8      	it	lt
 8026294:	9204      	strlt	r2, [sp, #16]
 8026296:	7823      	ldrb	r3, [r4, #0]
 8026298:	2b2e      	cmp	r3, #46	; 0x2e
 802629a:	d10c      	bne.n	80262b6 <_vfiprintf_r+0x176>
 802629c:	7863      	ldrb	r3, [r4, #1]
 802629e:	2b2a      	cmp	r3, #42	; 0x2a
 80262a0:	d135      	bne.n	802630e <_vfiprintf_r+0x1ce>
 80262a2:	9b03      	ldr	r3, [sp, #12]
 80262a4:	1d1a      	adds	r2, r3, #4
 80262a6:	681b      	ldr	r3, [r3, #0]
 80262a8:	9203      	str	r2, [sp, #12]
 80262aa:	2b00      	cmp	r3, #0
 80262ac:	bfb8      	it	lt
 80262ae:	f04f 33ff 	movlt.w	r3, #4294967295
 80262b2:	3402      	adds	r4, #2
 80262b4:	9305      	str	r3, [sp, #20]
 80262b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802639c <_vfiprintf_r+0x25c>
 80262ba:	7821      	ldrb	r1, [r4, #0]
 80262bc:	2203      	movs	r2, #3
 80262be:	4650      	mov	r0, sl
 80262c0:	f7d9 ffbe 	bl	8000240 <memchr>
 80262c4:	b140      	cbz	r0, 80262d8 <_vfiprintf_r+0x198>
 80262c6:	2340      	movs	r3, #64	; 0x40
 80262c8:	eba0 000a 	sub.w	r0, r0, sl
 80262cc:	fa03 f000 	lsl.w	r0, r3, r0
 80262d0:	9b04      	ldr	r3, [sp, #16]
 80262d2:	4303      	orrs	r3, r0
 80262d4:	3401      	adds	r4, #1
 80262d6:	9304      	str	r3, [sp, #16]
 80262d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80262dc:	482c      	ldr	r0, [pc, #176]	; (8026390 <_vfiprintf_r+0x250>)
 80262de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80262e2:	2206      	movs	r2, #6
 80262e4:	f7d9 ffac 	bl	8000240 <memchr>
 80262e8:	2800      	cmp	r0, #0
 80262ea:	d03f      	beq.n	802636c <_vfiprintf_r+0x22c>
 80262ec:	4b29      	ldr	r3, [pc, #164]	; (8026394 <_vfiprintf_r+0x254>)
 80262ee:	bb1b      	cbnz	r3, 8026338 <_vfiprintf_r+0x1f8>
 80262f0:	9b03      	ldr	r3, [sp, #12]
 80262f2:	3307      	adds	r3, #7
 80262f4:	f023 0307 	bic.w	r3, r3, #7
 80262f8:	3308      	adds	r3, #8
 80262fa:	9303      	str	r3, [sp, #12]
 80262fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80262fe:	443b      	add	r3, r7
 8026300:	9309      	str	r3, [sp, #36]	; 0x24
 8026302:	e767      	b.n	80261d4 <_vfiprintf_r+0x94>
 8026304:	fb0c 3202 	mla	r2, ip, r2, r3
 8026308:	460c      	mov	r4, r1
 802630a:	2001      	movs	r0, #1
 802630c:	e7a5      	b.n	802625a <_vfiprintf_r+0x11a>
 802630e:	2300      	movs	r3, #0
 8026310:	3401      	adds	r4, #1
 8026312:	9305      	str	r3, [sp, #20]
 8026314:	4619      	mov	r1, r3
 8026316:	f04f 0c0a 	mov.w	ip, #10
 802631a:	4620      	mov	r0, r4
 802631c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8026320:	3a30      	subs	r2, #48	; 0x30
 8026322:	2a09      	cmp	r2, #9
 8026324:	d903      	bls.n	802632e <_vfiprintf_r+0x1ee>
 8026326:	2b00      	cmp	r3, #0
 8026328:	d0c5      	beq.n	80262b6 <_vfiprintf_r+0x176>
 802632a:	9105      	str	r1, [sp, #20]
 802632c:	e7c3      	b.n	80262b6 <_vfiprintf_r+0x176>
 802632e:	fb0c 2101 	mla	r1, ip, r1, r2
 8026332:	4604      	mov	r4, r0
 8026334:	2301      	movs	r3, #1
 8026336:	e7f0      	b.n	802631a <_vfiprintf_r+0x1da>
 8026338:	ab03      	add	r3, sp, #12
 802633a:	9300      	str	r3, [sp, #0]
 802633c:	462a      	mov	r2, r5
 802633e:	4b16      	ldr	r3, [pc, #88]	; (8026398 <_vfiprintf_r+0x258>)
 8026340:	a904      	add	r1, sp, #16
 8026342:	4630      	mov	r0, r6
 8026344:	f3af 8000 	nop.w
 8026348:	4607      	mov	r7, r0
 802634a:	1c78      	adds	r0, r7, #1
 802634c:	d1d6      	bne.n	80262fc <_vfiprintf_r+0x1bc>
 802634e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8026350:	07d9      	lsls	r1, r3, #31
 8026352:	d405      	bmi.n	8026360 <_vfiprintf_r+0x220>
 8026354:	89ab      	ldrh	r3, [r5, #12]
 8026356:	059a      	lsls	r2, r3, #22
 8026358:	d402      	bmi.n	8026360 <_vfiprintf_r+0x220>
 802635a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802635c:	f7ff fdbf 	bl	8025ede <__retarget_lock_release_recursive>
 8026360:	89ab      	ldrh	r3, [r5, #12]
 8026362:	065b      	lsls	r3, r3, #25
 8026364:	f53f af12 	bmi.w	802618c <_vfiprintf_r+0x4c>
 8026368:	9809      	ldr	r0, [sp, #36]	; 0x24
 802636a:	e711      	b.n	8026190 <_vfiprintf_r+0x50>
 802636c:	ab03      	add	r3, sp, #12
 802636e:	9300      	str	r3, [sp, #0]
 8026370:	462a      	mov	r2, r5
 8026372:	4b09      	ldr	r3, [pc, #36]	; (8026398 <_vfiprintf_r+0x258>)
 8026374:	a904      	add	r1, sp, #16
 8026376:	4630      	mov	r0, r6
 8026378:	f000 f880 	bl	802647c <_printf_i>
 802637c:	e7e4      	b.n	8026348 <_vfiprintf_r+0x208>
 802637e:	bf00      	nop
 8026380:	0802b6c0 	.word	0x0802b6c0
 8026384:	0802b6e0 	.word	0x0802b6e0
 8026388:	0802b6a0 	.word	0x0802b6a0
 802638c:	0802b704 	.word	0x0802b704
 8026390:	0802b70e 	.word	0x0802b70e
 8026394:	00000000 	.word	0x00000000
 8026398:	0802611b 	.word	0x0802611b
 802639c:	0802b70a 	.word	0x0802b70a

080263a0 <_printf_common>:
 80263a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80263a4:	4616      	mov	r6, r2
 80263a6:	4699      	mov	r9, r3
 80263a8:	688a      	ldr	r2, [r1, #8]
 80263aa:	690b      	ldr	r3, [r1, #16]
 80263ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80263b0:	4293      	cmp	r3, r2
 80263b2:	bfb8      	it	lt
 80263b4:	4613      	movlt	r3, r2
 80263b6:	6033      	str	r3, [r6, #0]
 80263b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80263bc:	4607      	mov	r7, r0
 80263be:	460c      	mov	r4, r1
 80263c0:	b10a      	cbz	r2, 80263c6 <_printf_common+0x26>
 80263c2:	3301      	adds	r3, #1
 80263c4:	6033      	str	r3, [r6, #0]
 80263c6:	6823      	ldr	r3, [r4, #0]
 80263c8:	0699      	lsls	r1, r3, #26
 80263ca:	bf42      	ittt	mi
 80263cc:	6833      	ldrmi	r3, [r6, #0]
 80263ce:	3302      	addmi	r3, #2
 80263d0:	6033      	strmi	r3, [r6, #0]
 80263d2:	6825      	ldr	r5, [r4, #0]
 80263d4:	f015 0506 	ands.w	r5, r5, #6
 80263d8:	d106      	bne.n	80263e8 <_printf_common+0x48>
 80263da:	f104 0a19 	add.w	sl, r4, #25
 80263de:	68e3      	ldr	r3, [r4, #12]
 80263e0:	6832      	ldr	r2, [r6, #0]
 80263e2:	1a9b      	subs	r3, r3, r2
 80263e4:	42ab      	cmp	r3, r5
 80263e6:	dc26      	bgt.n	8026436 <_printf_common+0x96>
 80263e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80263ec:	1e13      	subs	r3, r2, #0
 80263ee:	6822      	ldr	r2, [r4, #0]
 80263f0:	bf18      	it	ne
 80263f2:	2301      	movne	r3, #1
 80263f4:	0692      	lsls	r2, r2, #26
 80263f6:	d42b      	bmi.n	8026450 <_printf_common+0xb0>
 80263f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80263fc:	4649      	mov	r1, r9
 80263fe:	4638      	mov	r0, r7
 8026400:	47c0      	blx	r8
 8026402:	3001      	adds	r0, #1
 8026404:	d01e      	beq.n	8026444 <_printf_common+0xa4>
 8026406:	6823      	ldr	r3, [r4, #0]
 8026408:	68e5      	ldr	r5, [r4, #12]
 802640a:	6832      	ldr	r2, [r6, #0]
 802640c:	f003 0306 	and.w	r3, r3, #6
 8026410:	2b04      	cmp	r3, #4
 8026412:	bf08      	it	eq
 8026414:	1aad      	subeq	r5, r5, r2
 8026416:	68a3      	ldr	r3, [r4, #8]
 8026418:	6922      	ldr	r2, [r4, #16]
 802641a:	bf0c      	ite	eq
 802641c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8026420:	2500      	movne	r5, #0
 8026422:	4293      	cmp	r3, r2
 8026424:	bfc4      	itt	gt
 8026426:	1a9b      	subgt	r3, r3, r2
 8026428:	18ed      	addgt	r5, r5, r3
 802642a:	2600      	movs	r6, #0
 802642c:	341a      	adds	r4, #26
 802642e:	42b5      	cmp	r5, r6
 8026430:	d11a      	bne.n	8026468 <_printf_common+0xc8>
 8026432:	2000      	movs	r0, #0
 8026434:	e008      	b.n	8026448 <_printf_common+0xa8>
 8026436:	2301      	movs	r3, #1
 8026438:	4652      	mov	r2, sl
 802643a:	4649      	mov	r1, r9
 802643c:	4638      	mov	r0, r7
 802643e:	47c0      	blx	r8
 8026440:	3001      	adds	r0, #1
 8026442:	d103      	bne.n	802644c <_printf_common+0xac>
 8026444:	f04f 30ff 	mov.w	r0, #4294967295
 8026448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802644c:	3501      	adds	r5, #1
 802644e:	e7c6      	b.n	80263de <_printf_common+0x3e>
 8026450:	18e1      	adds	r1, r4, r3
 8026452:	1c5a      	adds	r2, r3, #1
 8026454:	2030      	movs	r0, #48	; 0x30
 8026456:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802645a:	4422      	add	r2, r4
 802645c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8026460:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8026464:	3302      	adds	r3, #2
 8026466:	e7c7      	b.n	80263f8 <_printf_common+0x58>
 8026468:	2301      	movs	r3, #1
 802646a:	4622      	mov	r2, r4
 802646c:	4649      	mov	r1, r9
 802646e:	4638      	mov	r0, r7
 8026470:	47c0      	blx	r8
 8026472:	3001      	adds	r0, #1
 8026474:	d0e6      	beq.n	8026444 <_printf_common+0xa4>
 8026476:	3601      	adds	r6, #1
 8026478:	e7d9      	b.n	802642e <_printf_common+0x8e>
	...

0802647c <_printf_i>:
 802647c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8026480:	7e0f      	ldrb	r7, [r1, #24]
 8026482:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8026484:	2f78      	cmp	r7, #120	; 0x78
 8026486:	4691      	mov	r9, r2
 8026488:	4680      	mov	r8, r0
 802648a:	460c      	mov	r4, r1
 802648c:	469a      	mov	sl, r3
 802648e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8026492:	d807      	bhi.n	80264a4 <_printf_i+0x28>
 8026494:	2f62      	cmp	r7, #98	; 0x62
 8026496:	d80a      	bhi.n	80264ae <_printf_i+0x32>
 8026498:	2f00      	cmp	r7, #0
 802649a:	f000 80d8 	beq.w	802664e <_printf_i+0x1d2>
 802649e:	2f58      	cmp	r7, #88	; 0x58
 80264a0:	f000 80a3 	beq.w	80265ea <_printf_i+0x16e>
 80264a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80264a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80264ac:	e03a      	b.n	8026524 <_printf_i+0xa8>
 80264ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80264b2:	2b15      	cmp	r3, #21
 80264b4:	d8f6      	bhi.n	80264a4 <_printf_i+0x28>
 80264b6:	a101      	add	r1, pc, #4	; (adr r1, 80264bc <_printf_i+0x40>)
 80264b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80264bc:	08026515 	.word	0x08026515
 80264c0:	08026529 	.word	0x08026529
 80264c4:	080264a5 	.word	0x080264a5
 80264c8:	080264a5 	.word	0x080264a5
 80264cc:	080264a5 	.word	0x080264a5
 80264d0:	080264a5 	.word	0x080264a5
 80264d4:	08026529 	.word	0x08026529
 80264d8:	080264a5 	.word	0x080264a5
 80264dc:	080264a5 	.word	0x080264a5
 80264e0:	080264a5 	.word	0x080264a5
 80264e4:	080264a5 	.word	0x080264a5
 80264e8:	08026635 	.word	0x08026635
 80264ec:	08026559 	.word	0x08026559
 80264f0:	08026617 	.word	0x08026617
 80264f4:	080264a5 	.word	0x080264a5
 80264f8:	080264a5 	.word	0x080264a5
 80264fc:	08026657 	.word	0x08026657
 8026500:	080264a5 	.word	0x080264a5
 8026504:	08026559 	.word	0x08026559
 8026508:	080264a5 	.word	0x080264a5
 802650c:	080264a5 	.word	0x080264a5
 8026510:	0802661f 	.word	0x0802661f
 8026514:	682b      	ldr	r3, [r5, #0]
 8026516:	1d1a      	adds	r2, r3, #4
 8026518:	681b      	ldr	r3, [r3, #0]
 802651a:	602a      	str	r2, [r5, #0]
 802651c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8026520:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8026524:	2301      	movs	r3, #1
 8026526:	e0a3      	b.n	8026670 <_printf_i+0x1f4>
 8026528:	6820      	ldr	r0, [r4, #0]
 802652a:	6829      	ldr	r1, [r5, #0]
 802652c:	0606      	lsls	r6, r0, #24
 802652e:	f101 0304 	add.w	r3, r1, #4
 8026532:	d50a      	bpl.n	802654a <_printf_i+0xce>
 8026534:	680e      	ldr	r6, [r1, #0]
 8026536:	602b      	str	r3, [r5, #0]
 8026538:	2e00      	cmp	r6, #0
 802653a:	da03      	bge.n	8026544 <_printf_i+0xc8>
 802653c:	232d      	movs	r3, #45	; 0x2d
 802653e:	4276      	negs	r6, r6
 8026540:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8026544:	485e      	ldr	r0, [pc, #376]	; (80266c0 <_printf_i+0x244>)
 8026546:	230a      	movs	r3, #10
 8026548:	e019      	b.n	802657e <_printf_i+0x102>
 802654a:	680e      	ldr	r6, [r1, #0]
 802654c:	602b      	str	r3, [r5, #0]
 802654e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8026552:	bf18      	it	ne
 8026554:	b236      	sxthne	r6, r6
 8026556:	e7ef      	b.n	8026538 <_printf_i+0xbc>
 8026558:	682b      	ldr	r3, [r5, #0]
 802655a:	6820      	ldr	r0, [r4, #0]
 802655c:	1d19      	adds	r1, r3, #4
 802655e:	6029      	str	r1, [r5, #0]
 8026560:	0601      	lsls	r1, r0, #24
 8026562:	d501      	bpl.n	8026568 <_printf_i+0xec>
 8026564:	681e      	ldr	r6, [r3, #0]
 8026566:	e002      	b.n	802656e <_printf_i+0xf2>
 8026568:	0646      	lsls	r6, r0, #25
 802656a:	d5fb      	bpl.n	8026564 <_printf_i+0xe8>
 802656c:	881e      	ldrh	r6, [r3, #0]
 802656e:	4854      	ldr	r0, [pc, #336]	; (80266c0 <_printf_i+0x244>)
 8026570:	2f6f      	cmp	r7, #111	; 0x6f
 8026572:	bf0c      	ite	eq
 8026574:	2308      	moveq	r3, #8
 8026576:	230a      	movne	r3, #10
 8026578:	2100      	movs	r1, #0
 802657a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802657e:	6865      	ldr	r5, [r4, #4]
 8026580:	60a5      	str	r5, [r4, #8]
 8026582:	2d00      	cmp	r5, #0
 8026584:	bfa2      	ittt	ge
 8026586:	6821      	ldrge	r1, [r4, #0]
 8026588:	f021 0104 	bicge.w	r1, r1, #4
 802658c:	6021      	strge	r1, [r4, #0]
 802658e:	b90e      	cbnz	r6, 8026594 <_printf_i+0x118>
 8026590:	2d00      	cmp	r5, #0
 8026592:	d04d      	beq.n	8026630 <_printf_i+0x1b4>
 8026594:	4615      	mov	r5, r2
 8026596:	fbb6 f1f3 	udiv	r1, r6, r3
 802659a:	fb03 6711 	mls	r7, r3, r1, r6
 802659e:	5dc7      	ldrb	r7, [r0, r7]
 80265a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80265a4:	4637      	mov	r7, r6
 80265a6:	42bb      	cmp	r3, r7
 80265a8:	460e      	mov	r6, r1
 80265aa:	d9f4      	bls.n	8026596 <_printf_i+0x11a>
 80265ac:	2b08      	cmp	r3, #8
 80265ae:	d10b      	bne.n	80265c8 <_printf_i+0x14c>
 80265b0:	6823      	ldr	r3, [r4, #0]
 80265b2:	07de      	lsls	r6, r3, #31
 80265b4:	d508      	bpl.n	80265c8 <_printf_i+0x14c>
 80265b6:	6923      	ldr	r3, [r4, #16]
 80265b8:	6861      	ldr	r1, [r4, #4]
 80265ba:	4299      	cmp	r1, r3
 80265bc:	bfde      	ittt	le
 80265be:	2330      	movle	r3, #48	; 0x30
 80265c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80265c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80265c8:	1b52      	subs	r2, r2, r5
 80265ca:	6122      	str	r2, [r4, #16]
 80265cc:	f8cd a000 	str.w	sl, [sp]
 80265d0:	464b      	mov	r3, r9
 80265d2:	aa03      	add	r2, sp, #12
 80265d4:	4621      	mov	r1, r4
 80265d6:	4640      	mov	r0, r8
 80265d8:	f7ff fee2 	bl	80263a0 <_printf_common>
 80265dc:	3001      	adds	r0, #1
 80265de:	d14c      	bne.n	802667a <_printf_i+0x1fe>
 80265e0:	f04f 30ff 	mov.w	r0, #4294967295
 80265e4:	b004      	add	sp, #16
 80265e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80265ea:	4835      	ldr	r0, [pc, #212]	; (80266c0 <_printf_i+0x244>)
 80265ec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80265f0:	6829      	ldr	r1, [r5, #0]
 80265f2:	6823      	ldr	r3, [r4, #0]
 80265f4:	f851 6b04 	ldr.w	r6, [r1], #4
 80265f8:	6029      	str	r1, [r5, #0]
 80265fa:	061d      	lsls	r5, r3, #24
 80265fc:	d514      	bpl.n	8026628 <_printf_i+0x1ac>
 80265fe:	07df      	lsls	r7, r3, #31
 8026600:	bf44      	itt	mi
 8026602:	f043 0320 	orrmi.w	r3, r3, #32
 8026606:	6023      	strmi	r3, [r4, #0]
 8026608:	b91e      	cbnz	r6, 8026612 <_printf_i+0x196>
 802660a:	6823      	ldr	r3, [r4, #0]
 802660c:	f023 0320 	bic.w	r3, r3, #32
 8026610:	6023      	str	r3, [r4, #0]
 8026612:	2310      	movs	r3, #16
 8026614:	e7b0      	b.n	8026578 <_printf_i+0xfc>
 8026616:	6823      	ldr	r3, [r4, #0]
 8026618:	f043 0320 	orr.w	r3, r3, #32
 802661c:	6023      	str	r3, [r4, #0]
 802661e:	2378      	movs	r3, #120	; 0x78
 8026620:	4828      	ldr	r0, [pc, #160]	; (80266c4 <_printf_i+0x248>)
 8026622:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8026626:	e7e3      	b.n	80265f0 <_printf_i+0x174>
 8026628:	0659      	lsls	r1, r3, #25
 802662a:	bf48      	it	mi
 802662c:	b2b6      	uxthmi	r6, r6
 802662e:	e7e6      	b.n	80265fe <_printf_i+0x182>
 8026630:	4615      	mov	r5, r2
 8026632:	e7bb      	b.n	80265ac <_printf_i+0x130>
 8026634:	682b      	ldr	r3, [r5, #0]
 8026636:	6826      	ldr	r6, [r4, #0]
 8026638:	6961      	ldr	r1, [r4, #20]
 802663a:	1d18      	adds	r0, r3, #4
 802663c:	6028      	str	r0, [r5, #0]
 802663e:	0635      	lsls	r5, r6, #24
 8026640:	681b      	ldr	r3, [r3, #0]
 8026642:	d501      	bpl.n	8026648 <_printf_i+0x1cc>
 8026644:	6019      	str	r1, [r3, #0]
 8026646:	e002      	b.n	802664e <_printf_i+0x1d2>
 8026648:	0670      	lsls	r0, r6, #25
 802664a:	d5fb      	bpl.n	8026644 <_printf_i+0x1c8>
 802664c:	8019      	strh	r1, [r3, #0]
 802664e:	2300      	movs	r3, #0
 8026650:	6123      	str	r3, [r4, #16]
 8026652:	4615      	mov	r5, r2
 8026654:	e7ba      	b.n	80265cc <_printf_i+0x150>
 8026656:	682b      	ldr	r3, [r5, #0]
 8026658:	1d1a      	adds	r2, r3, #4
 802665a:	602a      	str	r2, [r5, #0]
 802665c:	681d      	ldr	r5, [r3, #0]
 802665e:	6862      	ldr	r2, [r4, #4]
 8026660:	2100      	movs	r1, #0
 8026662:	4628      	mov	r0, r5
 8026664:	f7d9 fdec 	bl	8000240 <memchr>
 8026668:	b108      	cbz	r0, 802666e <_printf_i+0x1f2>
 802666a:	1b40      	subs	r0, r0, r5
 802666c:	6060      	str	r0, [r4, #4]
 802666e:	6863      	ldr	r3, [r4, #4]
 8026670:	6123      	str	r3, [r4, #16]
 8026672:	2300      	movs	r3, #0
 8026674:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8026678:	e7a8      	b.n	80265cc <_printf_i+0x150>
 802667a:	6923      	ldr	r3, [r4, #16]
 802667c:	462a      	mov	r2, r5
 802667e:	4649      	mov	r1, r9
 8026680:	4640      	mov	r0, r8
 8026682:	47d0      	blx	sl
 8026684:	3001      	adds	r0, #1
 8026686:	d0ab      	beq.n	80265e0 <_printf_i+0x164>
 8026688:	6823      	ldr	r3, [r4, #0]
 802668a:	079b      	lsls	r3, r3, #30
 802668c:	d413      	bmi.n	80266b6 <_printf_i+0x23a>
 802668e:	68e0      	ldr	r0, [r4, #12]
 8026690:	9b03      	ldr	r3, [sp, #12]
 8026692:	4298      	cmp	r0, r3
 8026694:	bfb8      	it	lt
 8026696:	4618      	movlt	r0, r3
 8026698:	e7a4      	b.n	80265e4 <_printf_i+0x168>
 802669a:	2301      	movs	r3, #1
 802669c:	4632      	mov	r2, r6
 802669e:	4649      	mov	r1, r9
 80266a0:	4640      	mov	r0, r8
 80266a2:	47d0      	blx	sl
 80266a4:	3001      	adds	r0, #1
 80266a6:	d09b      	beq.n	80265e0 <_printf_i+0x164>
 80266a8:	3501      	adds	r5, #1
 80266aa:	68e3      	ldr	r3, [r4, #12]
 80266ac:	9903      	ldr	r1, [sp, #12]
 80266ae:	1a5b      	subs	r3, r3, r1
 80266b0:	42ab      	cmp	r3, r5
 80266b2:	dcf2      	bgt.n	802669a <_printf_i+0x21e>
 80266b4:	e7eb      	b.n	802668e <_printf_i+0x212>
 80266b6:	2500      	movs	r5, #0
 80266b8:	f104 0619 	add.w	r6, r4, #25
 80266bc:	e7f5      	b.n	80266aa <_printf_i+0x22e>
 80266be:	bf00      	nop
 80266c0:	0802b715 	.word	0x0802b715
 80266c4:	0802b726 	.word	0x0802b726

080266c8 <cleanup_glue>:
 80266c8:	b538      	push	{r3, r4, r5, lr}
 80266ca:	460c      	mov	r4, r1
 80266cc:	6809      	ldr	r1, [r1, #0]
 80266ce:	4605      	mov	r5, r0
 80266d0:	b109      	cbz	r1, 80266d6 <cleanup_glue+0xe>
 80266d2:	f7ff fff9 	bl	80266c8 <cleanup_glue>
 80266d6:	4621      	mov	r1, r4
 80266d8:	4628      	mov	r0, r5
 80266da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80266de:	f7ff bc25 	b.w	8025f2c <_free_r>
	...

080266e4 <_reclaim_reent>:
 80266e4:	4b2c      	ldr	r3, [pc, #176]	; (8026798 <_reclaim_reent+0xb4>)
 80266e6:	681b      	ldr	r3, [r3, #0]
 80266e8:	4283      	cmp	r3, r0
 80266ea:	b570      	push	{r4, r5, r6, lr}
 80266ec:	4604      	mov	r4, r0
 80266ee:	d051      	beq.n	8026794 <_reclaim_reent+0xb0>
 80266f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80266f2:	b143      	cbz	r3, 8026706 <_reclaim_reent+0x22>
 80266f4:	68db      	ldr	r3, [r3, #12]
 80266f6:	2b00      	cmp	r3, #0
 80266f8:	d14a      	bne.n	8026790 <_reclaim_reent+0xac>
 80266fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80266fc:	6819      	ldr	r1, [r3, #0]
 80266fe:	b111      	cbz	r1, 8026706 <_reclaim_reent+0x22>
 8026700:	4620      	mov	r0, r4
 8026702:	f7ff fc13 	bl	8025f2c <_free_r>
 8026706:	6961      	ldr	r1, [r4, #20]
 8026708:	b111      	cbz	r1, 8026710 <_reclaim_reent+0x2c>
 802670a:	4620      	mov	r0, r4
 802670c:	f7ff fc0e 	bl	8025f2c <_free_r>
 8026710:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8026712:	b111      	cbz	r1, 802671a <_reclaim_reent+0x36>
 8026714:	4620      	mov	r0, r4
 8026716:	f7ff fc09 	bl	8025f2c <_free_r>
 802671a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 802671c:	b111      	cbz	r1, 8026724 <_reclaim_reent+0x40>
 802671e:	4620      	mov	r0, r4
 8026720:	f7ff fc04 	bl	8025f2c <_free_r>
 8026724:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8026726:	b111      	cbz	r1, 802672e <_reclaim_reent+0x4a>
 8026728:	4620      	mov	r0, r4
 802672a:	f7ff fbff 	bl	8025f2c <_free_r>
 802672e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8026730:	b111      	cbz	r1, 8026738 <_reclaim_reent+0x54>
 8026732:	4620      	mov	r0, r4
 8026734:	f7ff fbfa 	bl	8025f2c <_free_r>
 8026738:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 802673a:	b111      	cbz	r1, 8026742 <_reclaim_reent+0x5e>
 802673c:	4620      	mov	r0, r4
 802673e:	f7ff fbf5 	bl	8025f2c <_free_r>
 8026742:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8026744:	b111      	cbz	r1, 802674c <_reclaim_reent+0x68>
 8026746:	4620      	mov	r0, r4
 8026748:	f7ff fbf0 	bl	8025f2c <_free_r>
 802674c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802674e:	b111      	cbz	r1, 8026756 <_reclaim_reent+0x72>
 8026750:	4620      	mov	r0, r4
 8026752:	f7ff fbeb 	bl	8025f2c <_free_r>
 8026756:	69a3      	ldr	r3, [r4, #24]
 8026758:	b1e3      	cbz	r3, 8026794 <_reclaim_reent+0xb0>
 802675a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 802675c:	4620      	mov	r0, r4
 802675e:	4798      	blx	r3
 8026760:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8026762:	b1b9      	cbz	r1, 8026794 <_reclaim_reent+0xb0>
 8026764:	4620      	mov	r0, r4
 8026766:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802676a:	f7ff bfad 	b.w	80266c8 <cleanup_glue>
 802676e:	5949      	ldr	r1, [r1, r5]
 8026770:	b941      	cbnz	r1, 8026784 <_reclaim_reent+0xa0>
 8026772:	3504      	adds	r5, #4
 8026774:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8026776:	2d80      	cmp	r5, #128	; 0x80
 8026778:	68d9      	ldr	r1, [r3, #12]
 802677a:	d1f8      	bne.n	802676e <_reclaim_reent+0x8a>
 802677c:	4620      	mov	r0, r4
 802677e:	f7ff fbd5 	bl	8025f2c <_free_r>
 8026782:	e7ba      	b.n	80266fa <_reclaim_reent+0x16>
 8026784:	680e      	ldr	r6, [r1, #0]
 8026786:	4620      	mov	r0, r4
 8026788:	f7ff fbd0 	bl	8025f2c <_free_r>
 802678c:	4631      	mov	r1, r6
 802678e:	e7ef      	b.n	8026770 <_reclaim_reent+0x8c>
 8026790:	2500      	movs	r5, #0
 8026792:	e7ef      	b.n	8026774 <_reclaim_reent+0x90>
 8026794:	bd70      	pop	{r4, r5, r6, pc}
 8026796:	bf00      	nop
 8026798:	200000e8 	.word	0x200000e8

0802679c <_sbrk_r>:
 802679c:	b538      	push	{r3, r4, r5, lr}
 802679e:	4d06      	ldr	r5, [pc, #24]	; (80267b8 <_sbrk_r+0x1c>)
 80267a0:	2300      	movs	r3, #0
 80267a2:	4604      	mov	r4, r0
 80267a4:	4608      	mov	r0, r1
 80267a6:	602b      	str	r3, [r5, #0]
 80267a8:	f7de fd7e 	bl	80052a8 <_sbrk>
 80267ac:	1c43      	adds	r3, r0, #1
 80267ae:	d102      	bne.n	80267b6 <_sbrk_r+0x1a>
 80267b0:	682b      	ldr	r3, [r5, #0]
 80267b2:	b103      	cbz	r3, 80267b6 <_sbrk_r+0x1a>
 80267b4:	6023      	str	r3, [r4, #0]
 80267b6:	bd38      	pop	{r3, r4, r5, pc}
 80267b8:	20027ddc 	.word	0x20027ddc

080267bc <_raise_r>:
 80267bc:	291f      	cmp	r1, #31
 80267be:	b538      	push	{r3, r4, r5, lr}
 80267c0:	4604      	mov	r4, r0
 80267c2:	460d      	mov	r5, r1
 80267c4:	d904      	bls.n	80267d0 <_raise_r+0x14>
 80267c6:	2316      	movs	r3, #22
 80267c8:	6003      	str	r3, [r0, #0]
 80267ca:	f04f 30ff 	mov.w	r0, #4294967295
 80267ce:	bd38      	pop	{r3, r4, r5, pc}
 80267d0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80267d2:	b112      	cbz	r2, 80267da <_raise_r+0x1e>
 80267d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80267d8:	b94b      	cbnz	r3, 80267ee <_raise_r+0x32>
 80267da:	4620      	mov	r0, r4
 80267dc:	f000 f830 	bl	8026840 <_getpid_r>
 80267e0:	462a      	mov	r2, r5
 80267e2:	4601      	mov	r1, r0
 80267e4:	4620      	mov	r0, r4
 80267e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80267ea:	f000 b817 	b.w	802681c <_kill_r>
 80267ee:	2b01      	cmp	r3, #1
 80267f0:	d00a      	beq.n	8026808 <_raise_r+0x4c>
 80267f2:	1c59      	adds	r1, r3, #1
 80267f4:	d103      	bne.n	80267fe <_raise_r+0x42>
 80267f6:	2316      	movs	r3, #22
 80267f8:	6003      	str	r3, [r0, #0]
 80267fa:	2001      	movs	r0, #1
 80267fc:	e7e7      	b.n	80267ce <_raise_r+0x12>
 80267fe:	2400      	movs	r4, #0
 8026800:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8026804:	4628      	mov	r0, r5
 8026806:	4798      	blx	r3
 8026808:	2000      	movs	r0, #0
 802680a:	e7e0      	b.n	80267ce <_raise_r+0x12>

0802680c <raise>:
 802680c:	4b02      	ldr	r3, [pc, #8]	; (8026818 <raise+0xc>)
 802680e:	4601      	mov	r1, r0
 8026810:	6818      	ldr	r0, [r3, #0]
 8026812:	f7ff bfd3 	b.w	80267bc <_raise_r>
 8026816:	bf00      	nop
 8026818:	200000e8 	.word	0x200000e8

0802681c <_kill_r>:
 802681c:	b538      	push	{r3, r4, r5, lr}
 802681e:	4d07      	ldr	r5, [pc, #28]	; (802683c <_kill_r+0x20>)
 8026820:	2300      	movs	r3, #0
 8026822:	4604      	mov	r4, r0
 8026824:	4608      	mov	r0, r1
 8026826:	4611      	mov	r1, r2
 8026828:	602b      	str	r3, [r5, #0]
 802682a:	f7de fd07 	bl	800523c <_kill>
 802682e:	1c43      	adds	r3, r0, #1
 8026830:	d102      	bne.n	8026838 <_kill_r+0x1c>
 8026832:	682b      	ldr	r3, [r5, #0]
 8026834:	b103      	cbz	r3, 8026838 <_kill_r+0x1c>
 8026836:	6023      	str	r3, [r4, #0]
 8026838:	bd38      	pop	{r3, r4, r5, pc}
 802683a:	bf00      	nop
 802683c:	20027ddc 	.word	0x20027ddc

08026840 <_getpid_r>:
 8026840:	f7de bcfa 	b.w	8005238 <_getpid>

08026844 <__sread>:
 8026844:	b510      	push	{r4, lr}
 8026846:	460c      	mov	r4, r1
 8026848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802684c:	f000 fadc 	bl	8026e08 <_read_r>
 8026850:	2800      	cmp	r0, #0
 8026852:	bfab      	itete	ge
 8026854:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8026856:	89a3      	ldrhlt	r3, [r4, #12]
 8026858:	181b      	addge	r3, r3, r0
 802685a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802685e:	bfac      	ite	ge
 8026860:	6563      	strge	r3, [r4, #84]	; 0x54
 8026862:	81a3      	strhlt	r3, [r4, #12]
 8026864:	bd10      	pop	{r4, pc}

08026866 <__swrite>:
 8026866:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802686a:	461f      	mov	r7, r3
 802686c:	898b      	ldrh	r3, [r1, #12]
 802686e:	05db      	lsls	r3, r3, #23
 8026870:	4605      	mov	r5, r0
 8026872:	460c      	mov	r4, r1
 8026874:	4616      	mov	r6, r2
 8026876:	d505      	bpl.n	8026884 <__swrite+0x1e>
 8026878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802687c:	2302      	movs	r3, #2
 802687e:	2200      	movs	r2, #0
 8026880:	f000 fa3e 	bl	8026d00 <_lseek_r>
 8026884:	89a3      	ldrh	r3, [r4, #12]
 8026886:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802688a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802688e:	81a3      	strh	r3, [r4, #12]
 8026890:	4632      	mov	r2, r6
 8026892:	463b      	mov	r3, r7
 8026894:	4628      	mov	r0, r5
 8026896:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802689a:	f000 b87d 	b.w	8026998 <_write_r>

0802689e <__sseek>:
 802689e:	b510      	push	{r4, lr}
 80268a0:	460c      	mov	r4, r1
 80268a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80268a6:	f000 fa2b 	bl	8026d00 <_lseek_r>
 80268aa:	1c43      	adds	r3, r0, #1
 80268ac:	89a3      	ldrh	r3, [r4, #12]
 80268ae:	bf15      	itete	ne
 80268b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80268b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80268b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80268ba:	81a3      	strheq	r3, [r4, #12]
 80268bc:	bf18      	it	ne
 80268be:	81a3      	strhne	r3, [r4, #12]
 80268c0:	bd10      	pop	{r4, pc}

080268c2 <__sclose>:
 80268c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80268c6:	f000 b949 	b.w	8026b5c <_close_r>

080268ca <strncmp>:
 80268ca:	b510      	push	{r4, lr}
 80268cc:	b17a      	cbz	r2, 80268ee <strncmp+0x24>
 80268ce:	4603      	mov	r3, r0
 80268d0:	3901      	subs	r1, #1
 80268d2:	1884      	adds	r4, r0, r2
 80268d4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80268d8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80268dc:	4290      	cmp	r0, r2
 80268de:	d101      	bne.n	80268e4 <strncmp+0x1a>
 80268e0:	42a3      	cmp	r3, r4
 80268e2:	d101      	bne.n	80268e8 <strncmp+0x1e>
 80268e4:	1a80      	subs	r0, r0, r2
 80268e6:	bd10      	pop	{r4, pc}
 80268e8:	2800      	cmp	r0, #0
 80268ea:	d1f3      	bne.n	80268d4 <strncmp+0xa>
 80268ec:	e7fa      	b.n	80268e4 <strncmp+0x1a>
 80268ee:	4610      	mov	r0, r2
 80268f0:	e7f9      	b.n	80268e6 <strncmp+0x1c>
	...

080268f4 <__swbuf_r>:
 80268f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80268f6:	460e      	mov	r6, r1
 80268f8:	4614      	mov	r4, r2
 80268fa:	4605      	mov	r5, r0
 80268fc:	b118      	cbz	r0, 8026906 <__swbuf_r+0x12>
 80268fe:	6983      	ldr	r3, [r0, #24]
 8026900:	b90b      	cbnz	r3, 8026906 <__swbuf_r+0x12>
 8026902:	f7ff fa15 	bl	8025d30 <__sinit>
 8026906:	4b21      	ldr	r3, [pc, #132]	; (802698c <__swbuf_r+0x98>)
 8026908:	429c      	cmp	r4, r3
 802690a:	d12b      	bne.n	8026964 <__swbuf_r+0x70>
 802690c:	686c      	ldr	r4, [r5, #4]
 802690e:	69a3      	ldr	r3, [r4, #24]
 8026910:	60a3      	str	r3, [r4, #8]
 8026912:	89a3      	ldrh	r3, [r4, #12]
 8026914:	071a      	lsls	r2, r3, #28
 8026916:	d52f      	bpl.n	8026978 <__swbuf_r+0x84>
 8026918:	6923      	ldr	r3, [r4, #16]
 802691a:	b36b      	cbz	r3, 8026978 <__swbuf_r+0x84>
 802691c:	6923      	ldr	r3, [r4, #16]
 802691e:	6820      	ldr	r0, [r4, #0]
 8026920:	1ac0      	subs	r0, r0, r3
 8026922:	6963      	ldr	r3, [r4, #20]
 8026924:	b2f6      	uxtb	r6, r6
 8026926:	4283      	cmp	r3, r0
 8026928:	4637      	mov	r7, r6
 802692a:	dc04      	bgt.n	8026936 <__swbuf_r+0x42>
 802692c:	4621      	mov	r1, r4
 802692e:	4628      	mov	r0, r5
 8026930:	f000 f9aa 	bl	8026c88 <_fflush_r>
 8026934:	bb30      	cbnz	r0, 8026984 <__swbuf_r+0x90>
 8026936:	68a3      	ldr	r3, [r4, #8]
 8026938:	3b01      	subs	r3, #1
 802693a:	60a3      	str	r3, [r4, #8]
 802693c:	6823      	ldr	r3, [r4, #0]
 802693e:	1c5a      	adds	r2, r3, #1
 8026940:	6022      	str	r2, [r4, #0]
 8026942:	701e      	strb	r6, [r3, #0]
 8026944:	6963      	ldr	r3, [r4, #20]
 8026946:	3001      	adds	r0, #1
 8026948:	4283      	cmp	r3, r0
 802694a:	d004      	beq.n	8026956 <__swbuf_r+0x62>
 802694c:	89a3      	ldrh	r3, [r4, #12]
 802694e:	07db      	lsls	r3, r3, #31
 8026950:	d506      	bpl.n	8026960 <__swbuf_r+0x6c>
 8026952:	2e0a      	cmp	r6, #10
 8026954:	d104      	bne.n	8026960 <__swbuf_r+0x6c>
 8026956:	4621      	mov	r1, r4
 8026958:	4628      	mov	r0, r5
 802695a:	f000 f995 	bl	8026c88 <_fflush_r>
 802695e:	b988      	cbnz	r0, 8026984 <__swbuf_r+0x90>
 8026960:	4638      	mov	r0, r7
 8026962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026964:	4b0a      	ldr	r3, [pc, #40]	; (8026990 <__swbuf_r+0x9c>)
 8026966:	429c      	cmp	r4, r3
 8026968:	d101      	bne.n	802696e <__swbuf_r+0x7a>
 802696a:	68ac      	ldr	r4, [r5, #8]
 802696c:	e7cf      	b.n	802690e <__swbuf_r+0x1a>
 802696e:	4b09      	ldr	r3, [pc, #36]	; (8026994 <__swbuf_r+0xa0>)
 8026970:	429c      	cmp	r4, r3
 8026972:	bf08      	it	eq
 8026974:	68ec      	ldreq	r4, [r5, #12]
 8026976:	e7ca      	b.n	802690e <__swbuf_r+0x1a>
 8026978:	4621      	mov	r1, r4
 802697a:	4628      	mov	r0, r5
 802697c:	f000 f81e 	bl	80269bc <__swsetup_r>
 8026980:	2800      	cmp	r0, #0
 8026982:	d0cb      	beq.n	802691c <__swbuf_r+0x28>
 8026984:	f04f 37ff 	mov.w	r7, #4294967295
 8026988:	e7ea      	b.n	8026960 <__swbuf_r+0x6c>
 802698a:	bf00      	nop
 802698c:	0802b6c0 	.word	0x0802b6c0
 8026990:	0802b6e0 	.word	0x0802b6e0
 8026994:	0802b6a0 	.word	0x0802b6a0

08026998 <_write_r>:
 8026998:	b538      	push	{r3, r4, r5, lr}
 802699a:	4d07      	ldr	r5, [pc, #28]	; (80269b8 <_write_r+0x20>)
 802699c:	4604      	mov	r4, r0
 802699e:	4608      	mov	r0, r1
 80269a0:	4611      	mov	r1, r2
 80269a2:	2200      	movs	r2, #0
 80269a4:	602a      	str	r2, [r5, #0]
 80269a6:	461a      	mov	r2, r3
 80269a8:	f7de fc64 	bl	8005274 <_write>
 80269ac:	1c43      	adds	r3, r0, #1
 80269ae:	d102      	bne.n	80269b6 <_write_r+0x1e>
 80269b0:	682b      	ldr	r3, [r5, #0]
 80269b2:	b103      	cbz	r3, 80269b6 <_write_r+0x1e>
 80269b4:	6023      	str	r3, [r4, #0]
 80269b6:	bd38      	pop	{r3, r4, r5, pc}
 80269b8:	20027ddc 	.word	0x20027ddc

080269bc <__swsetup_r>:
 80269bc:	4b32      	ldr	r3, [pc, #200]	; (8026a88 <__swsetup_r+0xcc>)
 80269be:	b570      	push	{r4, r5, r6, lr}
 80269c0:	681d      	ldr	r5, [r3, #0]
 80269c2:	4606      	mov	r6, r0
 80269c4:	460c      	mov	r4, r1
 80269c6:	b125      	cbz	r5, 80269d2 <__swsetup_r+0x16>
 80269c8:	69ab      	ldr	r3, [r5, #24]
 80269ca:	b913      	cbnz	r3, 80269d2 <__swsetup_r+0x16>
 80269cc:	4628      	mov	r0, r5
 80269ce:	f7ff f9af 	bl	8025d30 <__sinit>
 80269d2:	4b2e      	ldr	r3, [pc, #184]	; (8026a8c <__swsetup_r+0xd0>)
 80269d4:	429c      	cmp	r4, r3
 80269d6:	d10f      	bne.n	80269f8 <__swsetup_r+0x3c>
 80269d8:	686c      	ldr	r4, [r5, #4]
 80269da:	89a3      	ldrh	r3, [r4, #12]
 80269dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80269e0:	0719      	lsls	r1, r3, #28
 80269e2:	d42c      	bmi.n	8026a3e <__swsetup_r+0x82>
 80269e4:	06dd      	lsls	r5, r3, #27
 80269e6:	d411      	bmi.n	8026a0c <__swsetup_r+0x50>
 80269e8:	2309      	movs	r3, #9
 80269ea:	6033      	str	r3, [r6, #0]
 80269ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80269f0:	81a3      	strh	r3, [r4, #12]
 80269f2:	f04f 30ff 	mov.w	r0, #4294967295
 80269f6:	e03e      	b.n	8026a76 <__swsetup_r+0xba>
 80269f8:	4b25      	ldr	r3, [pc, #148]	; (8026a90 <__swsetup_r+0xd4>)
 80269fa:	429c      	cmp	r4, r3
 80269fc:	d101      	bne.n	8026a02 <__swsetup_r+0x46>
 80269fe:	68ac      	ldr	r4, [r5, #8]
 8026a00:	e7eb      	b.n	80269da <__swsetup_r+0x1e>
 8026a02:	4b24      	ldr	r3, [pc, #144]	; (8026a94 <__swsetup_r+0xd8>)
 8026a04:	429c      	cmp	r4, r3
 8026a06:	bf08      	it	eq
 8026a08:	68ec      	ldreq	r4, [r5, #12]
 8026a0a:	e7e6      	b.n	80269da <__swsetup_r+0x1e>
 8026a0c:	0758      	lsls	r0, r3, #29
 8026a0e:	d512      	bpl.n	8026a36 <__swsetup_r+0x7a>
 8026a10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8026a12:	b141      	cbz	r1, 8026a26 <__swsetup_r+0x6a>
 8026a14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8026a18:	4299      	cmp	r1, r3
 8026a1a:	d002      	beq.n	8026a22 <__swsetup_r+0x66>
 8026a1c:	4630      	mov	r0, r6
 8026a1e:	f7ff fa85 	bl	8025f2c <_free_r>
 8026a22:	2300      	movs	r3, #0
 8026a24:	6363      	str	r3, [r4, #52]	; 0x34
 8026a26:	89a3      	ldrh	r3, [r4, #12]
 8026a28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8026a2c:	81a3      	strh	r3, [r4, #12]
 8026a2e:	2300      	movs	r3, #0
 8026a30:	6063      	str	r3, [r4, #4]
 8026a32:	6923      	ldr	r3, [r4, #16]
 8026a34:	6023      	str	r3, [r4, #0]
 8026a36:	89a3      	ldrh	r3, [r4, #12]
 8026a38:	f043 0308 	orr.w	r3, r3, #8
 8026a3c:	81a3      	strh	r3, [r4, #12]
 8026a3e:	6923      	ldr	r3, [r4, #16]
 8026a40:	b94b      	cbnz	r3, 8026a56 <__swsetup_r+0x9a>
 8026a42:	89a3      	ldrh	r3, [r4, #12]
 8026a44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8026a48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8026a4c:	d003      	beq.n	8026a56 <__swsetup_r+0x9a>
 8026a4e:	4621      	mov	r1, r4
 8026a50:	4630      	mov	r0, r6
 8026a52:	f000 f98d 	bl	8026d70 <__smakebuf_r>
 8026a56:	89a0      	ldrh	r0, [r4, #12]
 8026a58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8026a5c:	f010 0301 	ands.w	r3, r0, #1
 8026a60:	d00a      	beq.n	8026a78 <__swsetup_r+0xbc>
 8026a62:	2300      	movs	r3, #0
 8026a64:	60a3      	str	r3, [r4, #8]
 8026a66:	6963      	ldr	r3, [r4, #20]
 8026a68:	425b      	negs	r3, r3
 8026a6a:	61a3      	str	r3, [r4, #24]
 8026a6c:	6923      	ldr	r3, [r4, #16]
 8026a6e:	b943      	cbnz	r3, 8026a82 <__swsetup_r+0xc6>
 8026a70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8026a74:	d1ba      	bne.n	80269ec <__swsetup_r+0x30>
 8026a76:	bd70      	pop	{r4, r5, r6, pc}
 8026a78:	0781      	lsls	r1, r0, #30
 8026a7a:	bf58      	it	pl
 8026a7c:	6963      	ldrpl	r3, [r4, #20]
 8026a7e:	60a3      	str	r3, [r4, #8]
 8026a80:	e7f4      	b.n	8026a6c <__swsetup_r+0xb0>
 8026a82:	2000      	movs	r0, #0
 8026a84:	e7f7      	b.n	8026a76 <__swsetup_r+0xba>
 8026a86:	bf00      	nop
 8026a88:	200000e8 	.word	0x200000e8
 8026a8c:	0802b6c0 	.word	0x0802b6c0
 8026a90:	0802b6e0 	.word	0x0802b6e0
 8026a94:	0802b6a0 	.word	0x0802b6a0

08026a98 <__register_exitproc>:
 8026a98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026a9c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8026b58 <__register_exitproc+0xc0>
 8026aa0:	4606      	mov	r6, r0
 8026aa2:	f8d8 0000 	ldr.w	r0, [r8]
 8026aa6:	461f      	mov	r7, r3
 8026aa8:	460d      	mov	r5, r1
 8026aaa:	4691      	mov	r9, r2
 8026aac:	f7ff fa15 	bl	8025eda <__retarget_lock_acquire_recursive>
 8026ab0:	4b25      	ldr	r3, [pc, #148]	; (8026b48 <__register_exitproc+0xb0>)
 8026ab2:	681c      	ldr	r4, [r3, #0]
 8026ab4:	b934      	cbnz	r4, 8026ac4 <__register_exitproc+0x2c>
 8026ab6:	4c25      	ldr	r4, [pc, #148]	; (8026b4c <__register_exitproc+0xb4>)
 8026ab8:	601c      	str	r4, [r3, #0]
 8026aba:	4b25      	ldr	r3, [pc, #148]	; (8026b50 <__register_exitproc+0xb8>)
 8026abc:	b113      	cbz	r3, 8026ac4 <__register_exitproc+0x2c>
 8026abe:	681b      	ldr	r3, [r3, #0]
 8026ac0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8026ac4:	6863      	ldr	r3, [r4, #4]
 8026ac6:	2b1f      	cmp	r3, #31
 8026ac8:	dd07      	ble.n	8026ada <__register_exitproc+0x42>
 8026aca:	f8d8 0000 	ldr.w	r0, [r8]
 8026ace:	f7ff fa06 	bl	8025ede <__retarget_lock_release_recursive>
 8026ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8026ad6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026ada:	b34e      	cbz	r6, 8026b30 <__register_exitproc+0x98>
 8026adc:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8026ae0:	b988      	cbnz	r0, 8026b06 <__register_exitproc+0x6e>
 8026ae2:	4b1c      	ldr	r3, [pc, #112]	; (8026b54 <__register_exitproc+0xbc>)
 8026ae4:	b923      	cbnz	r3, 8026af0 <__register_exitproc+0x58>
 8026ae6:	f8d8 0000 	ldr.w	r0, [r8]
 8026aea:	f7ff f9f7 	bl	8025edc <__retarget_lock_release>
 8026aee:	e7f0      	b.n	8026ad2 <__register_exitproc+0x3a>
 8026af0:	f44f 7084 	mov.w	r0, #264	; 0x108
 8026af4:	f7ff f9f4 	bl	8025ee0 <malloc>
 8026af8:	2800      	cmp	r0, #0
 8026afa:	d0f4      	beq.n	8026ae6 <__register_exitproc+0x4e>
 8026afc:	2300      	movs	r3, #0
 8026afe:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8026b02:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8026b06:	6863      	ldr	r3, [r4, #4]
 8026b08:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8026b0c:	2201      	movs	r2, #1
 8026b0e:	409a      	lsls	r2, r3
 8026b10:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8026b14:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8026b18:	4313      	orrs	r3, r2
 8026b1a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8026b1e:	2e02      	cmp	r6, #2
 8026b20:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8026b24:	bf02      	ittt	eq
 8026b26:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8026b2a:	4313      	orreq	r3, r2
 8026b2c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8026b30:	6863      	ldr	r3, [r4, #4]
 8026b32:	f8d8 0000 	ldr.w	r0, [r8]
 8026b36:	1c5a      	adds	r2, r3, #1
 8026b38:	3302      	adds	r3, #2
 8026b3a:	6062      	str	r2, [r4, #4]
 8026b3c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8026b40:	f7ff f9cd 	bl	8025ede <__retarget_lock_release_recursive>
 8026b44:	2000      	movs	r0, #0
 8026b46:	e7c6      	b.n	8026ad6 <__register_exitproc+0x3e>
 8026b48:	20027e6c 	.word	0x20027e6c
 8026b4c:	20027de0 	.word	0x20027de0
 8026b50:	0802b738 	.word	0x0802b738
 8026b54:	08025ee1 	.word	0x08025ee1
 8026b58:	2000014c 	.word	0x2000014c

08026b5c <_close_r>:
 8026b5c:	b538      	push	{r3, r4, r5, lr}
 8026b5e:	4d06      	ldr	r5, [pc, #24]	; (8026b78 <_close_r+0x1c>)
 8026b60:	2300      	movs	r3, #0
 8026b62:	4604      	mov	r4, r0
 8026b64:	4608      	mov	r0, r1
 8026b66:	602b      	str	r3, [r5, #0]
 8026b68:	f7de fb92 	bl	8005290 <_close>
 8026b6c:	1c43      	adds	r3, r0, #1
 8026b6e:	d102      	bne.n	8026b76 <_close_r+0x1a>
 8026b70:	682b      	ldr	r3, [r5, #0]
 8026b72:	b103      	cbz	r3, 8026b76 <_close_r+0x1a>
 8026b74:	6023      	str	r3, [r4, #0]
 8026b76:	bd38      	pop	{r3, r4, r5, pc}
 8026b78:	20027ddc 	.word	0x20027ddc

08026b7c <__sflush_r>:
 8026b7c:	898a      	ldrh	r2, [r1, #12]
 8026b7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026b82:	4605      	mov	r5, r0
 8026b84:	0710      	lsls	r0, r2, #28
 8026b86:	460c      	mov	r4, r1
 8026b88:	d458      	bmi.n	8026c3c <__sflush_r+0xc0>
 8026b8a:	684b      	ldr	r3, [r1, #4]
 8026b8c:	2b00      	cmp	r3, #0
 8026b8e:	dc05      	bgt.n	8026b9c <__sflush_r+0x20>
 8026b90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8026b92:	2b00      	cmp	r3, #0
 8026b94:	dc02      	bgt.n	8026b9c <__sflush_r+0x20>
 8026b96:	2000      	movs	r0, #0
 8026b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026b9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8026b9e:	2e00      	cmp	r6, #0
 8026ba0:	d0f9      	beq.n	8026b96 <__sflush_r+0x1a>
 8026ba2:	2300      	movs	r3, #0
 8026ba4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8026ba8:	682f      	ldr	r7, [r5, #0]
 8026baa:	602b      	str	r3, [r5, #0]
 8026bac:	d032      	beq.n	8026c14 <__sflush_r+0x98>
 8026bae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8026bb0:	89a3      	ldrh	r3, [r4, #12]
 8026bb2:	075a      	lsls	r2, r3, #29
 8026bb4:	d505      	bpl.n	8026bc2 <__sflush_r+0x46>
 8026bb6:	6863      	ldr	r3, [r4, #4]
 8026bb8:	1ac0      	subs	r0, r0, r3
 8026bba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8026bbc:	b10b      	cbz	r3, 8026bc2 <__sflush_r+0x46>
 8026bbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8026bc0:	1ac0      	subs	r0, r0, r3
 8026bc2:	2300      	movs	r3, #0
 8026bc4:	4602      	mov	r2, r0
 8026bc6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8026bc8:	6a21      	ldr	r1, [r4, #32]
 8026bca:	4628      	mov	r0, r5
 8026bcc:	47b0      	blx	r6
 8026bce:	1c43      	adds	r3, r0, #1
 8026bd0:	89a3      	ldrh	r3, [r4, #12]
 8026bd2:	d106      	bne.n	8026be2 <__sflush_r+0x66>
 8026bd4:	6829      	ldr	r1, [r5, #0]
 8026bd6:	291d      	cmp	r1, #29
 8026bd8:	d82c      	bhi.n	8026c34 <__sflush_r+0xb8>
 8026bda:	4a2a      	ldr	r2, [pc, #168]	; (8026c84 <__sflush_r+0x108>)
 8026bdc:	40ca      	lsrs	r2, r1
 8026bde:	07d6      	lsls	r6, r2, #31
 8026be0:	d528      	bpl.n	8026c34 <__sflush_r+0xb8>
 8026be2:	2200      	movs	r2, #0
 8026be4:	6062      	str	r2, [r4, #4]
 8026be6:	04d9      	lsls	r1, r3, #19
 8026be8:	6922      	ldr	r2, [r4, #16]
 8026bea:	6022      	str	r2, [r4, #0]
 8026bec:	d504      	bpl.n	8026bf8 <__sflush_r+0x7c>
 8026bee:	1c42      	adds	r2, r0, #1
 8026bf0:	d101      	bne.n	8026bf6 <__sflush_r+0x7a>
 8026bf2:	682b      	ldr	r3, [r5, #0]
 8026bf4:	b903      	cbnz	r3, 8026bf8 <__sflush_r+0x7c>
 8026bf6:	6560      	str	r0, [r4, #84]	; 0x54
 8026bf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8026bfa:	602f      	str	r7, [r5, #0]
 8026bfc:	2900      	cmp	r1, #0
 8026bfe:	d0ca      	beq.n	8026b96 <__sflush_r+0x1a>
 8026c00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8026c04:	4299      	cmp	r1, r3
 8026c06:	d002      	beq.n	8026c0e <__sflush_r+0x92>
 8026c08:	4628      	mov	r0, r5
 8026c0a:	f7ff f98f 	bl	8025f2c <_free_r>
 8026c0e:	2000      	movs	r0, #0
 8026c10:	6360      	str	r0, [r4, #52]	; 0x34
 8026c12:	e7c1      	b.n	8026b98 <__sflush_r+0x1c>
 8026c14:	6a21      	ldr	r1, [r4, #32]
 8026c16:	2301      	movs	r3, #1
 8026c18:	4628      	mov	r0, r5
 8026c1a:	47b0      	blx	r6
 8026c1c:	1c41      	adds	r1, r0, #1
 8026c1e:	d1c7      	bne.n	8026bb0 <__sflush_r+0x34>
 8026c20:	682b      	ldr	r3, [r5, #0]
 8026c22:	2b00      	cmp	r3, #0
 8026c24:	d0c4      	beq.n	8026bb0 <__sflush_r+0x34>
 8026c26:	2b1d      	cmp	r3, #29
 8026c28:	d001      	beq.n	8026c2e <__sflush_r+0xb2>
 8026c2a:	2b16      	cmp	r3, #22
 8026c2c:	d101      	bne.n	8026c32 <__sflush_r+0xb6>
 8026c2e:	602f      	str	r7, [r5, #0]
 8026c30:	e7b1      	b.n	8026b96 <__sflush_r+0x1a>
 8026c32:	89a3      	ldrh	r3, [r4, #12]
 8026c34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026c38:	81a3      	strh	r3, [r4, #12]
 8026c3a:	e7ad      	b.n	8026b98 <__sflush_r+0x1c>
 8026c3c:	690f      	ldr	r7, [r1, #16]
 8026c3e:	2f00      	cmp	r7, #0
 8026c40:	d0a9      	beq.n	8026b96 <__sflush_r+0x1a>
 8026c42:	0793      	lsls	r3, r2, #30
 8026c44:	680e      	ldr	r6, [r1, #0]
 8026c46:	bf08      	it	eq
 8026c48:	694b      	ldreq	r3, [r1, #20]
 8026c4a:	600f      	str	r7, [r1, #0]
 8026c4c:	bf18      	it	ne
 8026c4e:	2300      	movne	r3, #0
 8026c50:	eba6 0807 	sub.w	r8, r6, r7
 8026c54:	608b      	str	r3, [r1, #8]
 8026c56:	f1b8 0f00 	cmp.w	r8, #0
 8026c5a:	dd9c      	ble.n	8026b96 <__sflush_r+0x1a>
 8026c5c:	6a21      	ldr	r1, [r4, #32]
 8026c5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8026c60:	4643      	mov	r3, r8
 8026c62:	463a      	mov	r2, r7
 8026c64:	4628      	mov	r0, r5
 8026c66:	47b0      	blx	r6
 8026c68:	2800      	cmp	r0, #0
 8026c6a:	dc06      	bgt.n	8026c7a <__sflush_r+0xfe>
 8026c6c:	89a3      	ldrh	r3, [r4, #12]
 8026c6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026c72:	81a3      	strh	r3, [r4, #12]
 8026c74:	f04f 30ff 	mov.w	r0, #4294967295
 8026c78:	e78e      	b.n	8026b98 <__sflush_r+0x1c>
 8026c7a:	4407      	add	r7, r0
 8026c7c:	eba8 0800 	sub.w	r8, r8, r0
 8026c80:	e7e9      	b.n	8026c56 <__sflush_r+0xda>
 8026c82:	bf00      	nop
 8026c84:	20400001 	.word	0x20400001

08026c88 <_fflush_r>:
 8026c88:	b538      	push	{r3, r4, r5, lr}
 8026c8a:	690b      	ldr	r3, [r1, #16]
 8026c8c:	4605      	mov	r5, r0
 8026c8e:	460c      	mov	r4, r1
 8026c90:	b913      	cbnz	r3, 8026c98 <_fflush_r+0x10>
 8026c92:	2500      	movs	r5, #0
 8026c94:	4628      	mov	r0, r5
 8026c96:	bd38      	pop	{r3, r4, r5, pc}
 8026c98:	b118      	cbz	r0, 8026ca2 <_fflush_r+0x1a>
 8026c9a:	6983      	ldr	r3, [r0, #24]
 8026c9c:	b90b      	cbnz	r3, 8026ca2 <_fflush_r+0x1a>
 8026c9e:	f7ff f847 	bl	8025d30 <__sinit>
 8026ca2:	4b14      	ldr	r3, [pc, #80]	; (8026cf4 <_fflush_r+0x6c>)
 8026ca4:	429c      	cmp	r4, r3
 8026ca6:	d11b      	bne.n	8026ce0 <_fflush_r+0x58>
 8026ca8:	686c      	ldr	r4, [r5, #4]
 8026caa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026cae:	2b00      	cmp	r3, #0
 8026cb0:	d0ef      	beq.n	8026c92 <_fflush_r+0xa>
 8026cb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8026cb4:	07d0      	lsls	r0, r2, #31
 8026cb6:	d404      	bmi.n	8026cc2 <_fflush_r+0x3a>
 8026cb8:	0599      	lsls	r1, r3, #22
 8026cba:	d402      	bmi.n	8026cc2 <_fflush_r+0x3a>
 8026cbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8026cbe:	f7ff f90c 	bl	8025eda <__retarget_lock_acquire_recursive>
 8026cc2:	4628      	mov	r0, r5
 8026cc4:	4621      	mov	r1, r4
 8026cc6:	f7ff ff59 	bl	8026b7c <__sflush_r>
 8026cca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8026ccc:	07da      	lsls	r2, r3, #31
 8026cce:	4605      	mov	r5, r0
 8026cd0:	d4e0      	bmi.n	8026c94 <_fflush_r+0xc>
 8026cd2:	89a3      	ldrh	r3, [r4, #12]
 8026cd4:	059b      	lsls	r3, r3, #22
 8026cd6:	d4dd      	bmi.n	8026c94 <_fflush_r+0xc>
 8026cd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8026cda:	f7ff f900 	bl	8025ede <__retarget_lock_release_recursive>
 8026cde:	e7d9      	b.n	8026c94 <_fflush_r+0xc>
 8026ce0:	4b05      	ldr	r3, [pc, #20]	; (8026cf8 <_fflush_r+0x70>)
 8026ce2:	429c      	cmp	r4, r3
 8026ce4:	d101      	bne.n	8026cea <_fflush_r+0x62>
 8026ce6:	68ac      	ldr	r4, [r5, #8]
 8026ce8:	e7df      	b.n	8026caa <_fflush_r+0x22>
 8026cea:	4b04      	ldr	r3, [pc, #16]	; (8026cfc <_fflush_r+0x74>)
 8026cec:	429c      	cmp	r4, r3
 8026cee:	bf08      	it	eq
 8026cf0:	68ec      	ldreq	r4, [r5, #12]
 8026cf2:	e7da      	b.n	8026caa <_fflush_r+0x22>
 8026cf4:	0802b6c0 	.word	0x0802b6c0
 8026cf8:	0802b6e0 	.word	0x0802b6e0
 8026cfc:	0802b6a0 	.word	0x0802b6a0

08026d00 <_lseek_r>:
 8026d00:	b538      	push	{r3, r4, r5, lr}
 8026d02:	4d07      	ldr	r5, [pc, #28]	; (8026d20 <_lseek_r+0x20>)
 8026d04:	4604      	mov	r4, r0
 8026d06:	4608      	mov	r0, r1
 8026d08:	4611      	mov	r1, r2
 8026d0a:	2200      	movs	r2, #0
 8026d0c:	602a      	str	r2, [r5, #0]
 8026d0e:	461a      	mov	r2, r3
 8026d10:	f7de fac8 	bl	80052a4 <_lseek>
 8026d14:	1c43      	adds	r3, r0, #1
 8026d16:	d102      	bne.n	8026d1e <_lseek_r+0x1e>
 8026d18:	682b      	ldr	r3, [r5, #0]
 8026d1a:	b103      	cbz	r3, 8026d1e <_lseek_r+0x1e>
 8026d1c:	6023      	str	r3, [r4, #0]
 8026d1e:	bd38      	pop	{r3, r4, r5, pc}
 8026d20:	20027ddc 	.word	0x20027ddc

08026d24 <__swhatbuf_r>:
 8026d24:	b570      	push	{r4, r5, r6, lr}
 8026d26:	460e      	mov	r6, r1
 8026d28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026d2c:	2900      	cmp	r1, #0
 8026d2e:	b096      	sub	sp, #88	; 0x58
 8026d30:	4614      	mov	r4, r2
 8026d32:	461d      	mov	r5, r3
 8026d34:	da08      	bge.n	8026d48 <__swhatbuf_r+0x24>
 8026d36:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8026d3a:	2200      	movs	r2, #0
 8026d3c:	602a      	str	r2, [r5, #0]
 8026d3e:	061a      	lsls	r2, r3, #24
 8026d40:	d410      	bmi.n	8026d64 <__swhatbuf_r+0x40>
 8026d42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8026d46:	e00e      	b.n	8026d66 <__swhatbuf_r+0x42>
 8026d48:	466a      	mov	r2, sp
 8026d4a:	f000 f86f 	bl	8026e2c <_fstat_r>
 8026d4e:	2800      	cmp	r0, #0
 8026d50:	dbf1      	blt.n	8026d36 <__swhatbuf_r+0x12>
 8026d52:	9a01      	ldr	r2, [sp, #4]
 8026d54:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8026d58:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8026d5c:	425a      	negs	r2, r3
 8026d5e:	415a      	adcs	r2, r3
 8026d60:	602a      	str	r2, [r5, #0]
 8026d62:	e7ee      	b.n	8026d42 <__swhatbuf_r+0x1e>
 8026d64:	2340      	movs	r3, #64	; 0x40
 8026d66:	2000      	movs	r0, #0
 8026d68:	6023      	str	r3, [r4, #0]
 8026d6a:	b016      	add	sp, #88	; 0x58
 8026d6c:	bd70      	pop	{r4, r5, r6, pc}
	...

08026d70 <__smakebuf_r>:
 8026d70:	898b      	ldrh	r3, [r1, #12]
 8026d72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8026d74:	079d      	lsls	r5, r3, #30
 8026d76:	4606      	mov	r6, r0
 8026d78:	460c      	mov	r4, r1
 8026d7a:	d507      	bpl.n	8026d8c <__smakebuf_r+0x1c>
 8026d7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8026d80:	6023      	str	r3, [r4, #0]
 8026d82:	6123      	str	r3, [r4, #16]
 8026d84:	2301      	movs	r3, #1
 8026d86:	6163      	str	r3, [r4, #20]
 8026d88:	b002      	add	sp, #8
 8026d8a:	bd70      	pop	{r4, r5, r6, pc}
 8026d8c:	ab01      	add	r3, sp, #4
 8026d8e:	466a      	mov	r2, sp
 8026d90:	f7ff ffc8 	bl	8026d24 <__swhatbuf_r>
 8026d94:	9900      	ldr	r1, [sp, #0]
 8026d96:	4605      	mov	r5, r0
 8026d98:	4630      	mov	r0, r6
 8026d9a:	f7ff f933 	bl	8026004 <_malloc_r>
 8026d9e:	b948      	cbnz	r0, 8026db4 <__smakebuf_r+0x44>
 8026da0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026da4:	059a      	lsls	r2, r3, #22
 8026da6:	d4ef      	bmi.n	8026d88 <__smakebuf_r+0x18>
 8026da8:	f023 0303 	bic.w	r3, r3, #3
 8026dac:	f043 0302 	orr.w	r3, r3, #2
 8026db0:	81a3      	strh	r3, [r4, #12]
 8026db2:	e7e3      	b.n	8026d7c <__smakebuf_r+0xc>
 8026db4:	4b0d      	ldr	r3, [pc, #52]	; (8026dec <__smakebuf_r+0x7c>)
 8026db6:	62b3      	str	r3, [r6, #40]	; 0x28
 8026db8:	89a3      	ldrh	r3, [r4, #12]
 8026dba:	6020      	str	r0, [r4, #0]
 8026dbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8026dc0:	81a3      	strh	r3, [r4, #12]
 8026dc2:	9b00      	ldr	r3, [sp, #0]
 8026dc4:	6163      	str	r3, [r4, #20]
 8026dc6:	9b01      	ldr	r3, [sp, #4]
 8026dc8:	6120      	str	r0, [r4, #16]
 8026dca:	b15b      	cbz	r3, 8026de4 <__smakebuf_r+0x74>
 8026dcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026dd0:	4630      	mov	r0, r6
 8026dd2:	f000 f83d 	bl	8026e50 <_isatty_r>
 8026dd6:	b128      	cbz	r0, 8026de4 <__smakebuf_r+0x74>
 8026dd8:	89a3      	ldrh	r3, [r4, #12]
 8026dda:	f023 0303 	bic.w	r3, r3, #3
 8026dde:	f043 0301 	orr.w	r3, r3, #1
 8026de2:	81a3      	strh	r3, [r4, #12]
 8026de4:	89a0      	ldrh	r0, [r4, #12]
 8026de6:	4305      	orrs	r5, r0
 8026de8:	81a5      	strh	r5, [r4, #12]
 8026dea:	e7cd      	b.n	8026d88 <__smakebuf_r+0x18>
 8026dec:	08025cc9 	.word	0x08025cc9

08026df0 <__malloc_lock>:
 8026df0:	4801      	ldr	r0, [pc, #4]	; (8026df8 <__malloc_lock+0x8>)
 8026df2:	f7ff b872 	b.w	8025eda <__retarget_lock_acquire_recursive>
 8026df6:	bf00      	nop
 8026df8:	20027cc9 	.word	0x20027cc9

08026dfc <__malloc_unlock>:
 8026dfc:	4801      	ldr	r0, [pc, #4]	; (8026e04 <__malloc_unlock+0x8>)
 8026dfe:	f7ff b86e 	b.w	8025ede <__retarget_lock_release_recursive>
 8026e02:	bf00      	nop
 8026e04:	20027cc9 	.word	0x20027cc9

08026e08 <_read_r>:
 8026e08:	b538      	push	{r3, r4, r5, lr}
 8026e0a:	4d07      	ldr	r5, [pc, #28]	; (8026e28 <_read_r+0x20>)
 8026e0c:	4604      	mov	r4, r0
 8026e0e:	4608      	mov	r0, r1
 8026e10:	4611      	mov	r1, r2
 8026e12:	2200      	movs	r2, #0
 8026e14:	602a      	str	r2, [r5, #0]
 8026e16:	461a      	mov	r2, r3
 8026e18:	f7de fa1e 	bl	8005258 <_read>
 8026e1c:	1c43      	adds	r3, r0, #1
 8026e1e:	d102      	bne.n	8026e26 <_read_r+0x1e>
 8026e20:	682b      	ldr	r3, [r5, #0]
 8026e22:	b103      	cbz	r3, 8026e26 <_read_r+0x1e>
 8026e24:	6023      	str	r3, [r4, #0]
 8026e26:	bd38      	pop	{r3, r4, r5, pc}
 8026e28:	20027ddc 	.word	0x20027ddc

08026e2c <_fstat_r>:
 8026e2c:	b538      	push	{r3, r4, r5, lr}
 8026e2e:	4d07      	ldr	r5, [pc, #28]	; (8026e4c <_fstat_r+0x20>)
 8026e30:	2300      	movs	r3, #0
 8026e32:	4604      	mov	r4, r0
 8026e34:	4608      	mov	r0, r1
 8026e36:	4611      	mov	r1, r2
 8026e38:	602b      	str	r3, [r5, #0]
 8026e3a:	f7de fa2c 	bl	8005296 <_fstat>
 8026e3e:	1c43      	adds	r3, r0, #1
 8026e40:	d102      	bne.n	8026e48 <_fstat_r+0x1c>
 8026e42:	682b      	ldr	r3, [r5, #0]
 8026e44:	b103      	cbz	r3, 8026e48 <_fstat_r+0x1c>
 8026e46:	6023      	str	r3, [r4, #0]
 8026e48:	bd38      	pop	{r3, r4, r5, pc}
 8026e4a:	bf00      	nop
 8026e4c:	20027ddc 	.word	0x20027ddc

08026e50 <_isatty_r>:
 8026e50:	b538      	push	{r3, r4, r5, lr}
 8026e52:	4d06      	ldr	r5, [pc, #24]	; (8026e6c <_isatty_r+0x1c>)
 8026e54:	2300      	movs	r3, #0
 8026e56:	4604      	mov	r4, r0
 8026e58:	4608      	mov	r0, r1
 8026e5a:	602b      	str	r3, [r5, #0]
 8026e5c:	f7de fa20 	bl	80052a0 <_isatty>
 8026e60:	1c43      	adds	r3, r0, #1
 8026e62:	d102      	bne.n	8026e6a <_isatty_r+0x1a>
 8026e64:	682b      	ldr	r3, [r5, #0]
 8026e66:	b103      	cbz	r3, 8026e6a <_isatty_r+0x1a>
 8026e68:	6023      	str	r3, [r4, #0]
 8026e6a:	bd38      	pop	{r3, r4, r5, pc}
 8026e6c:	20027ddc 	.word	0x20027ddc

08026e70 <_init>:
 8026e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026e72:	bf00      	nop
 8026e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026e76:	bc08      	pop	{r3}
 8026e78:	469e      	mov	lr, r3
 8026e7a:	4770      	bx	lr

08026e7c <_fini>:
 8026e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026e7e:	bf00      	nop
 8026e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026e82:	bc08      	pop	{r3}
 8026e84:	469e      	mov	lr, r3
 8026e86:	4770      	bx	lr
